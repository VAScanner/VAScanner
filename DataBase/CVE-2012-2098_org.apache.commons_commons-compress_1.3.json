{
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void blockSort()": {
        "isVulRoot": true,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void endBlock()"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void endBlock()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void writeRun()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void finish()"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void writeRun()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void writeRun()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void finish()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void write0(int)"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void finish()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void finalize()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void close()"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void write0(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void write(int)",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void write(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void finalize()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void <init>(java.io.OutputStream)",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void <init>(java.io.OutputStream,int)"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void destroy()",
            "org.apache.commons.compress.archivers.tar.TarBuffer:void close()",
            "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:void close()",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void close()",
            "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:void close()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void close()",
            "org.apache.commons.compress.compressors.pack200.Pack200Utils:void normalize(java.io.File,java.io.File,java.util.Map)",
            "org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge:java.io.InputStream getInputView()",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream:void close()"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void write(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.utils.CountingOutputStream:void write(int)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeCString(java.lang.String)",
            "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:void closeArchiveEntry()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void bsFinishedWithStream()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void bsW(int,int)",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void sendMTFValues4()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void sendMTFValues5(int,int)",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void sendMTFValues6(int,int)",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void sendMTFValues7()"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void write(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.utils.IOUtils:long copy(java.io.InputStream,java.io.OutputStream,int)",
            "org.apache.commons.compress.utils.CountingOutputStream:void write(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void writeOut(byte[],int,int)",
            "org.apache.commons.compress.archivers.tar.TarBuffer:void writeBlock()",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void write(byte[],int,int)",
            "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:void write(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void <init>(java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.CompressorStreamFactory:org.apache.commons.compress.compressors.CompressorOutputStream createCompressorOutputStream(java.lang.String,java.io.OutputStream)"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void <init>(java.io.OutputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void <init>(java.io.OutputStream)"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void close()"
        ]
    },
    "org.apache.commons.compress.archivers.tar.TarBuffer:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:void close()",
            "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:void close()"
        ]
    },
    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void destroy()",
            "org.apache.commons.compress.archivers.tar.TarBuffer:void close()",
            "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:void close()",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void close()",
            "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:void close()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void close()",
            "org.apache.commons.compress.compressors.pack200.Pack200Utils:void normalize(java.io.File,java.io.File,java.util.Map)",
            "org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge:java.io.InputStream getInputView()",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream:void close()"
        ]
    },
    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void destroy()",
            "org.apache.commons.compress.archivers.tar.TarBuffer:void close()",
            "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:void close()",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void close()",
            "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:void close()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void close()",
            "org.apache.commons.compress.compressors.pack200.Pack200Utils:void normalize(java.io.File,java.io.File,java.util.Map)",
            "org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge:java.io.InputStream getInputView()",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream:void close()"
        ]
    },
    "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void destroy()",
            "org.apache.commons.compress.archivers.tar.TarBuffer:void close()",
            "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:void close()",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void close()",
            "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:void close()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void close()",
            "org.apache.commons.compress.compressors.pack200.Pack200Utils:void normalize(java.io.File,java.io.File,java.util.Map)",
            "org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge:java.io.InputStream getInputView()",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream:void close()"
        ]
    },
    "org.apache.commons.compress.compressors.pack200.Pack200Utils:void normalize(java.io.File,java.io.File,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.pack200.Pack200Utils:void normalize(java.io.File)",
            "org.apache.commons.compress.compressors.pack200.Pack200Utils:void normalize(java.io.File,java.util.Map)",
            "org.apache.commons.compress.compressors.pack200.Pack200Utils:void normalize(java.io.File,java.io.File)"
        ]
    },
    "org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge:java.io.InputStream getInputView()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.pack200.StreamBridge:java.io.InputStream getInput()"
        ]
    },
    "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void destroy()",
            "org.apache.commons.compress.archivers.tar.TarBuffer:void close()",
            "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:void close()",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void close()",
            "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:void close()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void close()",
            "org.apache.commons.compress.compressors.pack200.Pack200Utils:void normalize(java.io.File,java.io.File,java.util.Map)",
            "org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge:java.io.InputStream getInputView()",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream:void close()"
        ]
    },
    "org.apache.commons.compress.utils.CountingOutputStream:void write(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.utils.CountingOutputStream:void write(int)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeCString(java.lang.String)",
            "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:void closeArchiveEntry()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void bsFinishedWithStream()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void bsW(int,int)",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void sendMTFValues4()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void sendMTFValues5(int,int)",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void sendMTFValues6(int,int)",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void sendMTFValues7()"
        ]
    },
    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeCString(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeNewEntry(org.apache.commons.compress.archivers.cpio.CpioArchiveEntry)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeOldAsciiEntry(org.apache.commons.compress.archivers.cpio.CpioArchiveEntry)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeOldBinaryEntry(org.apache.commons.compress.archivers.cpio.CpioArchiveEntry,boolean)"
        ]
    },
    "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:void closeArchiveEntry()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.changes.ChangeSetPerformer:void copyStream(java.io.InputStream,org.apache.commons.compress.archivers.ArchiveOutputStream,org.apache.commons.compress.archivers.ArchiveEntry)",
            "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:void putArchiveEntry(org.apache.commons.compress.archivers.ArchiveEntry)"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void bsFinishedWithStream()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void endCompression()"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void bsW(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void endBlock()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void bsPutUByte(int)",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void bsPutInt(int)",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void sendMTFValues4()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void sendMTFValues5(int,int)",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void moveToFrontCodeAndSend()"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void sendMTFValues4()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void sendMTFValues()"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void sendMTFValues5(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void sendMTFValues()"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void sendMTFValues6(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void sendMTFValues()"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void sendMTFValues7()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void sendMTFValues()"
        ]
    },
    "org.apache.commons.compress.utils.IOUtils:long copy(java.io.InputStream,java.io.OutputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.utils.IOUtils:long copy(java.io.InputStream,java.io.OutputStream)"
        ]
    },
    "org.apache.commons.compress.utils.CountingOutputStream:void write(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.utils.IOUtils:long copy(java.io.InputStream,java.io.OutputStream,int)",
            "org.apache.commons.compress.utils.CountingOutputStream:void write(byte[])",
            "org.apache.commons.compress.utils.CountingOutputStream:void write(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void writeOut(byte[],int,int)",
            "org.apache.commons.compress.archivers.tar.TarBuffer:void writeBlock()",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void write(byte[],int,int)",
            "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:void write(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void writeOut(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void write(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void deflate()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void writeLocalFileHeader(org.apache.commons.compress.archivers.zip.ZipArchiveEntry)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void writeCentralFileHeader(org.apache.commons.compress.archivers.zip.ZipArchiveEntry)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void writeCentralDirectoryEnd()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void writeOut(byte[])"
        ]
    },
    "org.apache.commons.compress.archivers.tar.TarBuffer:void writeBlock()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.tar.TarBuffer:void writeRecord(byte[])",
            "org.apache.commons.compress.archivers.tar.TarBuffer:void writeRecord(byte[],int)",
            "org.apache.commons.compress.archivers.tar.TarBuffer:void flushBlock()"
        ]
    },
    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void write(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.utils.IOUtils:long copy(java.io.InputStream,java.io.OutputStream,int)",
            "org.apache.commons.compress.utils.CountingOutputStream:void write(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void writeOut(byte[],int,int)",
            "org.apache.commons.compress.archivers.tar.TarBuffer:void writeBlock()",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void write(byte[],int,int)",
            "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:void write(byte[],int,int)",
            "org.apache.commons.compress.archivers.ArchiveOutputStream:void write(int)"
        ]
    },
    "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:void write(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.utils.IOUtils:long copy(java.io.InputStream,java.io.OutputStream,int)",
            "org.apache.commons.compress.utils.CountingOutputStream:void write(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void writeOut(byte[],int,int)",
            "org.apache.commons.compress.archivers.tar.TarBuffer:void writeBlock()",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void write(byte[],int,int)",
            "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:void write(byte[],int,int)",
            "org.apache.commons.compress.archivers.ArchiveOutputStream:void write(int)"
        ]
    },
    "org.apache.commons.compress.compressors.CompressorStreamFactory:org.apache.commons.compress.compressors.CompressorOutputStream createCompressorOutputStream(java.lang.String,java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void destroy()",
            "org.apache.commons.compress.archivers.tar.TarBuffer:void close()",
            "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:void close()",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void close()",
            "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:void close()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void close()",
            "org.apache.commons.compress.compressors.pack200.Pack200Utils:void normalize(java.io.File,java.io.File,java.util.Map)",
            "org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge:java.io.InputStream getInputView()",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream:void close()"
        ]
    },
    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void close()",
            "org.apache.commons.compress.archivers.tar.TarBuffer:void close()",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:void close()",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:void close()",
            "org.apache.commons.compress.archivers.dump.TapeInputStream:void close()",
            "org.apache.commons.compress.archivers.Lister:void main(java.lang.String[])",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void close()",
            "org.apache.commons.compress.compressors.pack200.StreamBridge:void stop()",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:void close()"
        ]
    },
    "org.apache.commons.compress.compressors.pack200.Pack200Utils:void normalize(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.compress.compressors.pack200.Pack200Utils:void normalize(java.io.File,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.compress.compressors.pack200.Pack200Utils:void normalize(java.io.File,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.compress.compressors.pack200.StreamBridge:java.io.InputStream getInput()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read()",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read(byte[])",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int available()",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:boolean markSupported()",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:void mark(int)",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:void reset()",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:long skip(long)",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream:void finish()"
        ]
    },
    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeNewEntry(org.apache.commons.compress.archivers.cpio.CpioArchiveEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeHeader(org.apache.commons.compress.archivers.cpio.CpioArchiveEntry)"
        ]
    },
    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeOldAsciiEntry(org.apache.commons.compress.archivers.cpio.CpioArchiveEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeHeader(org.apache.commons.compress.archivers.cpio.CpioArchiveEntry)"
        ]
    },
    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeOldBinaryEntry(org.apache.commons.compress.archivers.cpio.CpioArchiveEntry,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeHeader(org.apache.commons.compress.archivers.cpio.CpioArchiveEntry)"
        ]
    },
    "org.apache.commons.compress.changes.ChangeSetPerformer:void copyStream(java.io.InputStream,org.apache.commons.compress.archivers.ArchiveOutputStream,org.apache.commons.compress.archivers.ArchiveEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.changes.ChangeSetPerformer:org.apache.commons.compress.changes.ChangeSetResults perform(org.apache.commons.compress.archivers.ArchiveInputStream,org.apache.commons.compress.archivers.ArchiveOutputStream)"
        ]
    },
    "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:void putArchiveEntry(org.apache.commons.compress.archivers.ArchiveEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.changes.ChangeSetPerformer:void copyStream(java.io.InputStream,org.apache.commons.compress.archivers.ArchiveOutputStream,org.apache.commons.compress.archivers.ArchiveEntry)"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void endCompression()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void finish()"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void bsPutUByte(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void init()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void endBlock()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void endCompression()"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void bsPutInt(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void endBlock()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void endCompression()"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void moveToFrontCodeAndSend()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void endBlock()"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void sendMTFValues()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void moveToFrontCodeAndSend()"
        ]
    },
    "org.apache.commons.compress.utils.IOUtils:long copy(java.io.InputStream,java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.changes.ChangeSetPerformer:void copyStream(java.io.InputStream,org.apache.commons.compress.archivers.ArchiveOutputStream,org.apache.commons.compress.archivers.ArchiveEntry)"
        ]
    },
    "org.apache.commons.compress.utils.CountingOutputStream:void write(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeHeader(org.apache.commons.compress.archivers.cpio.CpioArchiveEntry)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void pad(int)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeBinaryLong(long,int,boolean)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeAsciiLong(long,int,int)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeCString(java.lang.String)",
            "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:long writeArchiveHeader()"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void write(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.utils.IOUtils:long copy(java.io.InputStream,java.io.OutputStream,int)",
            "org.apache.commons.compress.utils.CountingOutputStream:void write(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void closeArchiveEntry()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void writeOut(byte[],int,int)",
            "org.apache.commons.compress.archivers.tar.TarBuffer:void writeBlock()",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void write(byte[],int,int)",
            "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:void write(byte[],int,int)",
            "org.apache.commons.compress.archivers.ArchiveOutputStream:void write(int)"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void deflate()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void flushDeflater()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void deflateUntilInputIsNeeded()"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void writeLocalFileHeader(org.apache.commons.compress.archivers.zip.ZipArchiveEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void putArchiveEntry(org.apache.commons.compress.archivers.ArchiveEntry)"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void writeCentralFileHeader(org.apache.commons.compress.archivers.zip.ZipArchiveEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void finish()"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void writeCentralDirectoryEnd()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void finish()"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void writeOut(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void rewriteSizesAndCrc(boolean)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void writeLocalFileHeader(org.apache.commons.compress.archivers.zip.ZipArchiveEntry)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void writeDataDescriptor(org.apache.commons.compress.archivers.zip.ZipArchiveEntry)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void writeCentralFileHeader(org.apache.commons.compress.archivers.zip.ZipArchiveEntry)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void writeCentralDirectoryEnd()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void writeZip64CentralDirectory()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void writeVersionNeededToExtractAndGeneralPurposeBits(int,boolean,boolean)"
        ]
    },
    "org.apache.commons.compress.archivers.tar.TarBuffer:void writeRecord(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:void putArchiveEntry(org.apache.commons.compress.archivers.ArchiveEntry)",
            "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:void closeArchiveEntry()",
            "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:void write(byte[],int,int)",
            "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:void writeEOFRecord()"
        ]
    },
    "org.apache.commons.compress.archivers.tar.TarBuffer:void writeRecord(byte[],int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:void write(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.archivers.tar.TarBuffer:void flushBlock()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.tar.TarBuffer:void close()",
            "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:void finish()"
        ]
    },
    "org.apache.commons.compress.archivers.ArchiveOutputStream:void write(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.utils.CountingOutputStream:void write(int)",
            "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:void putArchiveEntry(org.apache.commons.compress.archivers.ArchiveEntry)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeCString(java.lang.String)",
            "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:void closeArchiveEntry()",
            "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:long fill(long,long,char)",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void bsFinishedWithStream()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void bsW(int,int)",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void sendMTFValues4()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void sendMTFValues5(int,int)",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void sendMTFValues6(int,int)",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void sendMTFValues7()"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void close()",
            "org.apache.commons.compress.archivers.tar.TarBuffer:void close()",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:void close()",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:void close()",
            "org.apache.commons.compress.archivers.dump.TapeInputStream:void close()",
            "org.apache.commons.compress.archivers.Lister:void main(java.lang.String[])",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void close()",
            "org.apache.commons.compress.compressors.pack200.StreamBridge:void stop()",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:void close()"
        ]
    },
    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void close()",
            "org.apache.commons.compress.archivers.tar.TarBuffer:void close()",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:void close()",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:void close()",
            "org.apache.commons.compress.archivers.dump.TapeInputStream:void close()",
            "org.apache.commons.compress.archivers.Lister:void main(java.lang.String[])",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void close()",
            "org.apache.commons.compress.compressors.pack200.StreamBridge:void stop()",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:void close()"
        ]
    },
    "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void close()",
            "org.apache.commons.compress.archivers.tar.TarBuffer:void close()",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:void close()",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:void close()",
            "org.apache.commons.compress.archivers.dump.TapeInputStream:void close()",
            "org.apache.commons.compress.archivers.Lister:void main(java.lang.String[])",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void close()",
            "org.apache.commons.compress.compressors.pack200.StreamBridge:void stop()",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:void close()"
        ]
    },
    "org.apache.commons.compress.archivers.dump.TapeInputStream:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void close()",
            "org.apache.commons.compress.archivers.tar.TarBuffer:void close()",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:void close()",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:void close()",
            "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:org.apache.commons.compress.archivers.dump.DumpArchiveEntry getNextEntry()",
            "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:void close()",
            "org.apache.commons.compress.archivers.dump.TapeInputStream:void close()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void close()",
            "org.apache.commons.compress.compressors.pack200.StreamBridge:void stop()",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:void close()"
        ]
    },
    "org.apache.commons.compress.archivers.Lister:void main(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void close()",
            "org.apache.commons.compress.archivers.tar.TarBuffer:void close()",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:void close()",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:void close()",
            "org.apache.commons.compress.archivers.dump.TapeInputStream:void close()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void close()",
            "org.apache.commons.compress.compressors.pack200.StreamBridge:void stop()",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:void close()"
        ]
    },
    "org.apache.commons.compress.compressors.pack200.StreamBridge:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:void close()",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream:void close()"
        ]
    },
    "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void close()",
            "org.apache.commons.compress.archivers.tar.TarBuffer:void close()",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:void close()",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:void close()",
            "org.apache.commons.compress.archivers.dump.TapeInputStream:void close()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void close()",
            "org.apache.commons.compress.compressors.pack200.StreamBridge:void stop()",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:void close()"
        ]
    },
    "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.utils.CountingInputStream:int read()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void init()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void checkMagicChar(char,java.lang.String)",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:int bsR(int)",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:boolean bsGetBit()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void getAndMoveToFrontDecode()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:int getAndMoveToFrontDecode0(int)",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read()"
        ]
    },
    "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.utils.IOUtils:long copy(java.io.InputStream,java.io.OutputStream,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:int readStored(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void fill()",
            "org.apache.commons.compress.archivers.ArchiveStreamFactory:org.apache.commons.compress.archivers.ArchiveInputStream createArchiveInputStream(java.io.InputStream)",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read(byte[])",
            "org.apache.commons.compress.compressors.CompressorStreamFactory:org.apache.commons.compress.compressors.CompressorInputStream createCompressorInputStream(java.io.InputStream)"
        ]
    },
    "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.utils.CountingInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void drainCurrentEntryData()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void readFully(byte[])",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void readStoredEntry()",
            "org.apache.commons.compress.archivers.tar.TarBuffer:boolean readBlock()",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:int readFully(byte[],int,int)",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:java.lang.String getBSDLongName(java.lang.String)",
            "org.apache.commons.compress.archivers.dump.TapeInputStream:boolean readFully(byte[],int,int)",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int available()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:org.apache.commons.compress.archivers.ar.ArArchiveEntry getNextArEntry()",
            "org.apache.commons.compress.archivers.dump.TapeInputStream:int available()",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int available()"
        ]
    },
    "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:boolean markSupported()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.ArchiveStreamFactory:org.apache.commons.compress.archivers.ArchiveInputStream createArchiveInputStream(java.io.InputStream)",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:boolean markSupported()",
            "org.apache.commons.compress.compressors.CompressorStreamFactory:org.apache.commons.compress.compressors.CompressorInputStream createCompressorInputStream(java.io.InputStream)"
        ]
    },
    "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:void mark(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.ArchiveStreamFactory:org.apache.commons.compress.archivers.ArchiveInputStream createArchiveInputStream(java.io.InputStream)",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:void mark(int)",
            "org.apache.commons.compress.compressors.CompressorStreamFactory:org.apache.commons.compress.compressors.CompressorInputStream createCompressorInputStream(java.io.InputStream)"
        ]
    },
    "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:void reset()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.ArchiveStreamFactory:org.apache.commons.compress.archivers.ArchiveInputStream createArchiveInputStream(java.io.InputStream)",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:void reset()",
            "org.apache.commons.compress.compressors.CompressorStreamFactory:org.apache.commons.compress.compressors.CompressorInputStream createCompressorInputStream(java.io.InputStream)"
        ]
    },
    "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:long skip(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:long skip(long)"
        ]
    },
    "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream:void finish()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream:void close()"
        ]
    },
    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeHeader(org.apache.commons.compress.archivers.cpio.CpioArchiveEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void putArchiveEntry(org.apache.commons.compress.archivers.ArchiveEntry)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void finish()"
        ]
    },
    "org.apache.commons.compress.changes.ChangeSetPerformer:org.apache.commons.compress.changes.ChangeSetResults perform(org.apache.commons.compress.archivers.ArchiveInputStream,org.apache.commons.compress.archivers.ArchiveOutputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void init()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void <init>(java.io.OutputStream,int)"
        ]
    },
    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void pad(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeNewEntry(org.apache.commons.compress.archivers.cpio.CpioArchiveEntry)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeOldBinaryEntry(org.apache.commons.compress.archivers.cpio.CpioArchiveEntry,boolean)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void closeArchiveEntry()",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void finish()"
        ]
    },
    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeBinaryLong(long,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeHeader(org.apache.commons.compress.archivers.cpio.CpioArchiveEntry)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeOldBinaryEntry(org.apache.commons.compress.archivers.cpio.CpioArchiveEntry,boolean)"
        ]
    },
    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeAsciiLong(long,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeNewEntry(org.apache.commons.compress.archivers.cpio.CpioArchiveEntry)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeOldAsciiEntry(org.apache.commons.compress.archivers.cpio.CpioArchiveEntry)"
        ]
    },
    "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:long writeArchiveHeader()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:void putArchiveEntry(org.apache.commons.compress.archivers.ArchiveEntry)"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void closeArchiveEntry()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.changes.ChangeSetPerformer:void copyStream(java.io.InputStream,org.apache.commons.compress.archivers.ArchiveOutputStream,org.apache.commons.compress.archivers.ArchiveEntry)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void putArchiveEntry(org.apache.commons.compress.archivers.ArchiveEntry)"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void flushDeflater()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void closeArchiveEntry()"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void deflateUntilInputIsNeeded()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void writeDeflated(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void putArchiveEntry(org.apache.commons.compress.archivers.ArchiveEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.changes.ChangeSetPerformer:void copyStream(java.io.InputStream,org.apache.commons.compress.archivers.ArchiveOutputStream,org.apache.commons.compress.archivers.ArchiveEntry)",
            "org.apache.commons.compress.archivers.jar.JarArchiveOutputStream:void putArchiveEntry(org.apache.commons.compress.archivers.ArchiveEntry)"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void finish()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.changes.ChangeSetPerformer:org.apache.commons.compress.changes.ChangeSetResults perform(org.apache.commons.compress.archivers.ArchiveInputStream,org.apache.commons.compress.archivers.ArchiveOutputStream)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void close()"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void rewriteSizesAndCrc(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void closeArchiveEntry()"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void writeDataDescriptor(org.apache.commons.compress.archivers.zip.ZipArchiveEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void closeArchiveEntry()"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void writeZip64CentralDirectory()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void finish()"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void writeVersionNeededToExtractAndGeneralPurposeBits(int,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void writeLocalFileHeader(org.apache.commons.compress.archivers.zip.ZipArchiveEntry)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void writeCentralFileHeader(org.apache.commons.compress.archivers.zip.ZipArchiveEntry)"
        ]
    },
    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:void putArchiveEntry(org.apache.commons.compress.archivers.ArchiveEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.changes.ChangeSetPerformer:void copyStream(java.io.InputStream,org.apache.commons.compress.archivers.ArchiveOutputStream,org.apache.commons.compress.archivers.ArchiveEntry)",
            "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:void putArchiveEntry(org.apache.commons.compress.archivers.ArchiveEntry)"
        ]
    },
    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:void closeArchiveEntry()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.changes.ChangeSetPerformer:void copyStream(java.io.InputStream,org.apache.commons.compress.archivers.ArchiveOutputStream,org.apache.commons.compress.archivers.ArchiveEntry)",
            "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:void putArchiveEntry(org.apache.commons.compress.archivers.ArchiveEntry)"
        ]
    },
    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:void write(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.utils.IOUtils:long copy(java.io.InputStream,java.io.OutputStream,int)",
            "org.apache.commons.compress.utils.CountingOutputStream:void write(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void writeOut(byte[],int,int)",
            "org.apache.commons.compress.archivers.tar.TarBuffer:void writeBlock()",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void write(byte[],int,int)",
            "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:void write(byte[],int,int)",
            "org.apache.commons.compress.archivers.ArchiveOutputStream:void write(int)"
        ]
    },
    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:void writeEOFRecord()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:void finish()"
        ]
    },
    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:void finish()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.changes.ChangeSetPerformer:org.apache.commons.compress.changes.ChangeSetResults perform(org.apache.commons.compress.archivers.ArchiveInputStream,org.apache.commons.compress.archivers.ArchiveOutputStream)",
            "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:void close()"
        ]
    },
    "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:long fill(long,long,char)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:long writeEntryHeader(org.apache.commons.compress.archivers.ar.ArArchiveEntry)"
        ]
    },
    "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:org.apache.commons.compress.archivers.dump.DumpArchiveEntry getNextEntry()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:org.apache.commons.compress.archivers.dump.DumpArchiveEntry getNextDumpEntry()",
            "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:org.apache.commons.compress.archivers.ArchiveEntry getNextEntry()"
        ]
    },
    "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void close()",
            "org.apache.commons.compress.archivers.tar.TarBuffer:void close()",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:void close()",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:void close()",
            "org.apache.commons.compress.archivers.dump.TapeInputStream:void close()",
            "org.apache.commons.compress.archivers.Lister:void main(java.lang.String[])",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void close()",
            "org.apache.commons.compress.compressors.pack200.StreamBridge:void stop()",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:void close()"
        ]
    },
    "org.apache.commons.compress.utils.CountingInputStream:int read()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.utils.CountingInputStream:int read()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void init()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void checkMagicChar(char,java.lang.String)",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:int bsR(int)",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:boolean bsGetBit()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void getAndMoveToFrontDecode()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:int getAndMoveToFrontDecode0(int)",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read()"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void init()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void <init>(java.io.InputStream)"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void checkMagicChar(char,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void init()"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:int bsR(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void initBlock()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:char bsGetUByte()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:int bsGetInt()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void recvDecodingTables()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void getAndMoveToFrontDecode()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:int getAndMoveToFrontDecode0(int)"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:boolean bsGetBit()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void recvDecodingTables()"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void getAndMoveToFrontDecode()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void initBlock()"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:int getAndMoveToFrontDecode0(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void getAndMoveToFrontDecode()"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:int readStored(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:int read(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void fill()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:int readDeflated(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.archivers.ArchiveStreamFactory:org.apache.commons.compress.archivers.ArchiveInputStream createArchiveInputStream(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.Lister:void main(java.lang.String[])"
        ]
    },
    "org.apache.commons.compress.compressors.CompressorStreamFactory:org.apache.commons.compress.compressors.CompressorInputStream createCompressorInputStream(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.compress.utils.CountingInputStream:int read(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.utils.CountingInputStream:int read(byte[])",
            "org.apache.commons.compress.utils.CountingInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void drainCurrentEntryData()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void readFully(byte[])",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void readStoredEntry()",
            "org.apache.commons.compress.archivers.tar.TarBuffer:boolean readBlock()",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:int readFully(byte[],int,int)",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:java.lang.String getBSDLongName(java.lang.String)",
            "org.apache.commons.compress.archivers.dump.TapeInputStream:boolean readFully(byte[],int,int)",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void drainCurrentEntryData()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void closeEntry()"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void readFully(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:org.apache.commons.compress.archivers.zip.ZipArchiveEntry getNextZipEntry()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void readDataDescriptor()"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void readStoredEntry()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:int readStored(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.archivers.tar.TarBuffer:boolean readBlock()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.tar.TarBuffer:void skipRecord()",
            "org.apache.commons.compress.archivers.tar.TarBuffer:byte[] readRecord()"
        ]
    },
    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:int readFully(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:org.apache.commons.compress.archivers.cpio.CpioArchiveEntry getNextCPIOEntry()",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:void skip(int)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:long readBinaryLong(int,boolean)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:long readAsciiLong(int,int)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:java.lang.String readCString(int)"
        ]
    },
    "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:int read(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.utils.CountingInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void drainCurrentEntryData()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void readFully(byte[])",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void readStoredEntry()",
            "org.apache.commons.compress.archivers.tar.TarBuffer:boolean readBlock()",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:int readFully(byte[],int,int)",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:java.lang.String getBSDLongName(java.lang.String)",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:org.apache.commons.compress.archivers.ar.ArArchiveEntry readGNUStringTable(byte[])",
            "org.apache.commons.compress.archivers.dump.TapeInputStream:boolean readFully(byte[],int,int)",
            "org.apache.commons.compress.archivers.ArchiveInputStream:int read()",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:java.lang.String getBSDLongName(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:org.apache.commons.compress.archivers.ar.ArArchiveEntry getNextArEntry()"
        ]
    },
    "org.apache.commons.compress.archivers.dump.TapeInputStream:boolean readFully(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.dump.TapeInputStream:void resetBlockSize(int,boolean)",
            "org.apache.commons.compress.archivers.dump.TapeInputStream:boolean readBlock(boolean)"
        ]
    },
    "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:org.apache.commons.compress.archivers.ar.ArArchiveEntry getNextArEntry()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:org.apache.commons.compress.archivers.ar.ArArchiveEntry getNextArEntry()",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:org.apache.commons.compress.archivers.ArchiveEntry getNextEntry()"
        ]
    },
    "org.apache.commons.compress.archivers.dump.TapeInputStream:int available()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:org.apache.commons.compress.archivers.ar.ArArchiveEntry getNextArEntry()",
            "org.apache.commons.compress.archivers.dump.TapeInputStream:int available()",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int available()"
        ]
    },
    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void putArchiveEntry(org.apache.commons.compress.archivers.ArchiveEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.changes.ChangeSetPerformer:void copyStream(java.io.InputStream,org.apache.commons.compress.archivers.ArchiveOutputStream,org.apache.commons.compress.archivers.ArchiveEntry)"
        ]
    },
    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void finish()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.changes.ChangeSetPerformer:org.apache.commons.compress.changes.ChangeSetResults perform(org.apache.commons.compress.archivers.ArchiveInputStream,org.apache.commons.compress.archivers.ArchiveOutputStream)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void close()"
        ]
    },
    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void closeArchiveEntry()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.changes.ChangeSetPerformer:void copyStream(java.io.InputStream,org.apache.commons.compress.archivers.ArchiveOutputStream,org.apache.commons.compress.archivers.ArchiveEntry)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void putArchiveEntry(org.apache.commons.compress.archivers.ArchiveEntry)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void finish()"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void writeDeflated(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void write(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.archivers.jar.JarArchiveOutputStream:void putArchiveEntry(org.apache.commons.compress.archivers.ArchiveEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.changes.ChangeSetPerformer:void copyStream(java.io.InputStream,org.apache.commons.compress.archivers.ArchiveOutputStream,org.apache.commons.compress.archivers.ArchiveEntry)"
        ]
    },
    "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:long writeEntryHeader(org.apache.commons.compress.archivers.ar.ArArchiveEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:void putArchiveEntry(org.apache.commons.compress.archivers.ArchiveEntry)"
        ]
    },
    "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:org.apache.commons.compress.archivers.dump.DumpArchiveEntry getNextDumpEntry()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:org.apache.commons.compress.archivers.ArchiveEntry getNextEntry()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.changes.ChangeSetPerformer:org.apache.commons.compress.changes.ChangeSetResults perform(org.apache.commons.compress.archivers.ArchiveInputStream,org.apache.commons.compress.archivers.ArchiveOutputStream)",
            "org.apache.commons.compress.archivers.Lister:void main(java.lang.String[])"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void <init>(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.CompressorStreamFactory:org.apache.commons.compress.compressors.CompressorInputStream createCompressorInputStream(java.io.InputStream)",
            "org.apache.commons.compress.compressors.CompressorStreamFactory:org.apache.commons.compress.compressors.CompressorInputStream createCompressorInputStream(java.lang.String,java.io.InputStream)"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void initBlock()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void init()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void setupRandPartA()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void setupNoRandPartA()"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:char bsGetUByte()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void initBlock()"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:int bsGetInt()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void initBlock()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void complete()"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void recvDecodingTables()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void getAndMoveToFrontDecode()"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:int read(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.utils.CountingInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:long skip(long)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void drainCurrentEntryData()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void readFully(byte[])",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void readStoredEntry()",
            "org.apache.commons.compress.archivers.tar.TarBuffer:boolean readBlock()",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:int readFully(byte[],int,int)",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:java.lang.String getBSDLongName(java.lang.String)",
            "org.apache.commons.compress.archivers.dump.TapeInputStream:boolean readFully(byte[],int,int)",
            "org.apache.commons.compress.archivers.ArchiveInputStream:int read()",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:int readDeflated(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:int read(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.utils.CountingInputStream:int read(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.utils.IOUtils:long copy(java.io.InputStream,java.io.OutputStream,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:int readStored(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void fill()",
            "org.apache.commons.compress.archivers.ArchiveStreamFactory:org.apache.commons.compress.archivers.ArchiveInputStream createArchiveInputStream(java.io.InputStream)",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read(byte[])",
            "org.apache.commons.compress.compressors.CompressorStreamFactory:org.apache.commons.compress.compressors.CompressorInputStream createCompressorInputStream(java.io.InputStream)"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void closeEntry()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:org.apache.commons.compress.archivers.zip.ZipArchiveEntry getNextZipEntry()"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:org.apache.commons.compress.archivers.zip.ZipArchiveEntry getNextZipEntry()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:org.apache.commons.compress.archivers.ArchiveEntry getNextEntry()",
            "org.apache.commons.compress.archivers.jar.JarArchiveInputStream:org.apache.commons.compress.archivers.jar.JarArchiveEntry getNextJarEntry()"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void readDataDescriptor()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void closeEntry()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:boolean bufferContainsSignature(java.io.ByteArrayOutputStream,int,int,int)"
        ]
    },
    "org.apache.commons.compress.archivers.tar.TarBuffer:void skipRecord()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.compress.archivers.tar.TarBuffer:byte[] readRecord()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:byte[] getRecord()",
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:int read(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:org.apache.commons.compress.archivers.cpio.CpioArchiveEntry getNextCPIOEntry()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:org.apache.commons.compress.archivers.ArchiveEntry getNextEntry()"
        ]
    },
    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:void skip(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:org.apache.commons.compress.archivers.cpio.CpioArchiveEntry readNewEntry(boolean)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:org.apache.commons.compress.archivers.cpio.CpioArchiveEntry readOldBinaryEntry(boolean)"
        ]
    },
    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:int read(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.utils.CountingInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void drainCurrentEntryData()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void readFully(byte[])",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void readStoredEntry()",
            "org.apache.commons.compress.archivers.tar.TarBuffer:boolean readBlock()",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:void closeEntry()",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:int readFully(byte[],int,int)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:long skip(long)",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:java.lang.String getBSDLongName(java.lang.String)",
            "org.apache.commons.compress.archivers.dump.TapeInputStream:boolean readFully(byte[],int,int)",
            "org.apache.commons.compress.archivers.ArchiveInputStream:int read()",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:long readBinaryLong(int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:org.apache.commons.compress.archivers.cpio.CpioArchiveEntry readOldBinaryEntry(boolean)"
        ]
    },
    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:long readAsciiLong(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:org.apache.commons.compress.archivers.cpio.CpioArchiveEntry readNewEntry(boolean)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:org.apache.commons.compress.archivers.cpio.CpioArchiveEntry readOldAsciiEntry()"
        ]
    },
    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:java.lang.String readCString(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:org.apache.commons.compress.archivers.cpio.CpioArchiveEntry readNewEntry(boolean)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:org.apache.commons.compress.archivers.cpio.CpioArchiveEntry readOldAsciiEntry()",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:org.apache.commons.compress.archivers.cpio.CpioArchiveEntry readOldBinaryEntry(boolean)"
        ]
    },
    "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:org.apache.commons.compress.archivers.ar.ArArchiveEntry readGNUStringTable(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:org.apache.commons.compress.archivers.ar.ArArchiveEntry getNextArEntry()"
        ]
    },
    "org.apache.commons.compress.archivers.ArchiveInputStream:int read()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.utils.CountingInputStream:int read()",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:org.apache.commons.compress.archivers.ar.ArArchiveEntry getNextArEntry()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void init()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void checkMagicChar(char,java.lang.String)",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:int bsR(int)",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:boolean bsGetBit()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void getAndMoveToFrontDecode()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:int getAndMoveToFrontDecode0(int)",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read()"
        ]
    },
    "org.apache.commons.compress.archivers.dump.TapeInputStream:void resetBlockSize(int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:void <init>(java.io.InputStream)"
        ]
    },
    "org.apache.commons.compress.archivers.dump.TapeInputStream:boolean readBlock(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.dump.TapeInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.dump.TapeInputStream:long skip(long)",
            "org.apache.commons.compress.archivers.dump.TapeInputStream:byte[] peek()"
        ]
    },
    "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:org.apache.commons.compress.archivers.ArchiveEntry getNextEntry()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.changes.ChangeSetPerformer:org.apache.commons.compress.changes.ChangeSetResults perform(org.apache.commons.compress.archivers.ArchiveInputStream,org.apache.commons.compress.archivers.ArchiveOutputStream)",
            "org.apache.commons.compress.archivers.Lister:void main(java.lang.String[])"
        ]
    },
    "org.apache.commons.compress.compressors.CompressorStreamFactory:org.apache.commons.compress.compressors.CompressorInputStream createCompressorInputStream(java.lang.String,java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void setupRandPartA()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void setupBlock()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void setupRandPartB()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void setupRandPartC()"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void setupNoRandPartA()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void setupBlock()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void setupNoRandPartB()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void setupNoRandPartC()"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void complete()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void initBlock()"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:long skip(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void closeEntry()",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:long skip(long)"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:org.apache.commons.compress.archivers.ArchiveEntry getNextEntry()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.changes.ChangeSetPerformer:org.apache.commons.compress.changes.ChangeSetResults perform(org.apache.commons.compress.archivers.ArchiveInputStream,org.apache.commons.compress.archivers.ArchiveOutputStream)",
            "org.apache.commons.compress.archivers.Lister:void main(java.lang.String[])"
        ]
    },
    "org.apache.commons.compress.archivers.jar.JarArchiveInputStream:org.apache.commons.compress.archivers.jar.JarArchiveEntry getNextJarEntry()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.jar.JarArchiveInputStream:org.apache.commons.compress.archivers.ArchiveEntry getNextEntry()"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:boolean bufferContainsSignature(java.io.ByteArrayOutputStream,int,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void readStoredEntry()"
        ]
    },
    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:byte[] getRecord()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:org.apache.commons.compress.archivers.tar.TarArchiveEntry getNextTarEntry()",
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:void readGNUSparse()"
        ]
    },
    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:int read(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.utils.CountingInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void drainCurrentEntryData()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void readFully(byte[])",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void readStoredEntry()",
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:long skip(long)",
            "org.apache.commons.compress.archivers.tar.TarBuffer:boolean readBlock()",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:int readFully(byte[],int,int)",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:java.lang.String getBSDLongName(java.lang.String)",
            "org.apache.commons.compress.archivers.dump.TapeInputStream:boolean readFully(byte[],int,int)",
            "org.apache.commons.compress.archivers.ArchiveInputStream:int read()",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:org.apache.commons.compress.archivers.ArchiveEntry getNextEntry()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.changes.ChangeSetPerformer:org.apache.commons.compress.changes.ChangeSetResults perform(org.apache.commons.compress.archivers.ArchiveInputStream,org.apache.commons.compress.archivers.ArchiveOutputStream)",
            "org.apache.commons.compress.archivers.Lister:void main(java.lang.String[])"
        ]
    },
    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:org.apache.commons.compress.archivers.cpio.CpioArchiveEntry readNewEntry(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:org.apache.commons.compress.archivers.cpio.CpioArchiveEntry getNextCPIOEntry()"
        ]
    },
    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:org.apache.commons.compress.archivers.cpio.CpioArchiveEntry readOldBinaryEntry(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:org.apache.commons.compress.archivers.cpio.CpioArchiveEntry getNextCPIOEntry()"
        ]
    },
    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:void closeEntry()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:org.apache.commons.compress.archivers.cpio.CpioArchiveEntry getNextCPIOEntry()"
        ]
    },
    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:long skip(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:long skip(long)"
        ]
    },
    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:org.apache.commons.compress.archivers.cpio.CpioArchiveEntry readOldAsciiEntry()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:org.apache.commons.compress.archivers.cpio.CpioArchiveEntry getNextCPIOEntry()"
        ]
    },
    "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:void <init>(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.ArchiveStreamFactory:org.apache.commons.compress.archivers.ArchiveInputStream createArchiveInputStream(java.lang.String,java.io.InputStream)",
            "org.apache.commons.compress.archivers.ArchiveStreamFactory:org.apache.commons.compress.archivers.ArchiveInputStream createArchiveInputStream(java.io.InputStream)"
        ]
    },
    "org.apache.commons.compress.archivers.dump.TapeInputStream:int read(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.utils.CountingInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void drainCurrentEntryData()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void readFully(byte[])",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void readStoredEntry()",
            "org.apache.commons.compress.archivers.tar.TarBuffer:boolean readBlock()",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:int readFully(byte[],int,int)",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:java.lang.String getBSDLongName(java.lang.String)",
            "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:void readDirectoryEntry(org.apache.commons.compress.archivers.dump.DumpArchiveEntry)",
            "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.dump.TapeInputStream:byte[] readRecord()",
            "org.apache.commons.compress.archivers.dump.TapeInputStream:boolean readFully(byte[],int,int)",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.archivers.dump.TapeInputStream:long skip(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:void readCLRI()",
            "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:void readBITS()",
            "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:org.apache.commons.compress.archivers.dump.DumpArchiveEntry getNextEntry()",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:long skip(long)"
        ]
    },
    "org.apache.commons.compress.archivers.dump.TapeInputStream:byte[] peek()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:void readDirectoryEntry(org.apache.commons.compress.archivers.dump.DumpArchiveEntry)"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void setupBlock()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void init()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void setupRandPartA()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void setupNoRandPartA()"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void setupRandPartB()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:int read0()"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void setupRandPartC()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:int read0()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void setupRandPartB()"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void setupNoRandPartB()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:int read0()"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void setupNoRandPartC()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:int read0()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void setupNoRandPartB()"
        ]
    },
    "org.apache.commons.compress.archivers.jar.JarArchiveInputStream:org.apache.commons.compress.archivers.ArchiveEntry getNextEntry()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.changes.ChangeSetPerformer:org.apache.commons.compress.changes.ChangeSetResults perform(org.apache.commons.compress.archivers.ArchiveInputStream,org.apache.commons.compress.archivers.ArchiveOutputStream)",
            "org.apache.commons.compress.archivers.Lister:void main(java.lang.String[])"
        ]
    },
    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:org.apache.commons.compress.archivers.tar.TarArchiveEntry getNextTarEntry()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:org.apache.commons.compress.archivers.ArchiveEntry getNextEntry()"
        ]
    },
    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:void readGNUSparse()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:org.apache.commons.compress.archivers.tar.TarArchiveEntry getNextTarEntry()"
        ]
    },
    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:long skip(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:org.apache.commons.compress.archivers.tar.TarArchiveEntry getNextTarEntry()",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:long skip(long)"
        ]
    },
    "org.apache.commons.compress.archivers.ArchiveStreamFactory:org.apache.commons.compress.archivers.ArchiveInputStream createArchiveInputStream(java.lang.String,java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.Lister:void main(java.lang.String[])"
        ]
    },
    "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:void readDirectoryEntry(org.apache.commons.compress.archivers.dump.DumpArchiveEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:org.apache.commons.compress.archivers.dump.DumpArchiveEntry getNextEntry()"
        ]
    },
    "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:int read(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.utils.CountingInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void drainCurrentEntryData()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void readFully(byte[])",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void readStoredEntry()",
            "org.apache.commons.compress.archivers.tar.TarBuffer:boolean readBlock()",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:int readFully(byte[],int,int)",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:java.lang.String getBSDLongName(java.lang.String)",
            "org.apache.commons.compress.archivers.dump.TapeInputStream:boolean readFully(byte[],int,int)",
            "org.apache.commons.compress.archivers.ArchiveInputStream:int read()",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.archivers.dump.TapeInputStream:byte[] readRecord()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:void <init>(java.io.InputStream)",
            "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:void readCLRI()",
            "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:void readBITS()",
            "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:org.apache.commons.compress.archivers.dump.DumpArchiveEntry getNextEntry()",
            "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:void readDirectoryEntry(org.apache.commons.compress.archivers.dump.DumpArchiveEntry)",
            "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:int read(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:void readCLRI()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:void <init>(java.io.InputStream)"
        ]
    },
    "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:void readBITS()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:void <init>(java.io.InputStream)"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:int read0()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:int read()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:int read(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:org.apache.commons.compress.archivers.ArchiveEntry getNextEntry()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.changes.ChangeSetPerformer:org.apache.commons.compress.changes.ChangeSetResults perform(org.apache.commons.compress.archivers.ArchiveInputStream,org.apache.commons.compress.archivers.ArchiveOutputStream)",
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:org.apache.commons.compress.archivers.tar.TarArchiveEntry getNextTarEntry()",
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:void paxHeaders()",
            "org.apache.commons.compress.archivers.Lister:void main(java.lang.String[])",
            "org.apache.commons.compress.archivers.ArchiveStreamFactory:org.apache.commons.compress.archivers.ArchiveInputStream createArchiveInputStream(java.io.InputStream)"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:int read()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.utils.CountingInputStream:int read()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void init()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void checkMagicChar(char,java.lang.String)",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:int bsR(int)",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:boolean bsGetBit()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void getAndMoveToFrontDecode()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:int getAndMoveToFrontDecode0(int)",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read()"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:int read(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.utils.CountingInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void drainCurrentEntryData()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void readFully(byte[])",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void readStoredEntry()",
            "org.apache.commons.compress.archivers.tar.TarBuffer:boolean readBlock()",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:int readFully(byte[],int,int)",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:java.lang.String getBSDLongName(java.lang.String)",
            "org.apache.commons.compress.archivers.dump.TapeInputStream:boolean readFully(byte[],int,int)",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:void paxHeaders()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:org.apache.commons.compress.archivers.tar.TarArchiveEntry getNextTarEntry()"
        ]
    }
}