{
    "org.bouncycastle.crypto.agreement.DHAgreement:java.math.BigInteger calculateAgreement(org.bouncycastle.crypto.params.DHPublicKeyParameters,java.math.BigInteger)": {
        "isVulRoot": true,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.agreement.DHBasicAgreement:java.math.BigInteger calculateAgreement(org.bouncycastle.crypto.CipherParameters)": {
        "isVulRoot": true,
        "vulCaller": [
            "org.bouncycastle.crypto.engines.IESEngine:byte[] processBlock(byte[],int,int)",
            "org.bouncycastle.jce.provider.JCEECDHKeyAgreement:java.security.Key engineDoPhase(java.security.Key,boolean)"
        ]
    },
    "org.bouncycastle.crypto.engines.IESEngine:byte[] processBlock(byte[],int,int)": {
        "isVulRoot": true,
        "vulCaller": [
            "org.bouncycastle.jce.provider.JCEIESCipher:byte[] engineDoFinal(byte[],int,int)",
            "org.bouncycastle.jce.provider.JCEIESCipher:int engineDoFinal(byte[],int,int,byte[],int)"
        ]
    },
    "org.bouncycastle.crypto.params.DHPublicKeyParameters:void <init>(java.math.BigInteger,org.bouncycastle.crypto.params.DHParameters)": {
        "isVulRoot": true,
        "vulCaller": [
            "org.bouncycastle.crypto.generators.DHBasicKeyPairGenerator:org.bouncycastle.crypto.AsymmetricCipherKeyPair generateKeyPair()",
            "org.bouncycastle.crypto.generators.DHKeyPairGenerator:org.bouncycastle.crypto.AsymmetricCipherKeyPair generateKeyPair()",
            "org.bouncycastle.crypto.util.PublicKeyFactory:org.bouncycastle.crypto.params.AsymmetricKeyParameter createKey(org.bouncycastle.asn1.x509.SubjectPublicKeyInfo)",
            "org.bouncycastle.jce.provider.DHUtil:org.bouncycastle.crypto.params.AsymmetricKeyParameter generatePublicKeyParameter(java.security.PublicKey)"
        ]
    },
    "org.bouncycastle.jce.provider.JCEECDHKeyAgreement:java.security.Key engineDoPhase(java.security.Key,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jce.provider.JCEIESCipher:byte[] engineDoFinal(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jce.provider.WrapCipherSpi:byte[] engineWrap(java.security.Key)",
            "org.bouncycastle.jce.provider.WrapCipherSpi:java.security.Key engineUnwrap(byte[],java.lang.String,int)"
        ]
    },
    "org.bouncycastle.jce.provider.JCEIESCipher:int engineDoFinal(byte[],int,int,byte[],int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.generators.DHBasicKeyPairGenerator:org.bouncycastle.crypto.AsymmetricCipherKeyPair generateKeyPair()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jce.provider.JDKKeyPairGenerator$DH:java.security.KeyPair generateKeyPair()"
        ]
    },
    "org.bouncycastle.crypto.generators.DHKeyPairGenerator:org.bouncycastle.crypto.AsymmetricCipherKeyPair generateKeyPair()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.util.PublicKeyFactory:org.bouncycastle.crypto.params.AsymmetricKeyParameter createKey(org.bouncycastle.asn1.x509.SubjectPublicKeyInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.util.PublicKeyFactory:org.bouncycastle.crypto.params.AsymmetricKeyParameter createKey(byte[])",
            "org.bouncycastle.crypto.util.PublicKeyFactory:org.bouncycastle.crypto.params.AsymmetricKeyParameter createKey(java.io.InputStream)"
        ]
    },
    "org.bouncycastle.jce.provider.DHUtil:org.bouncycastle.crypto.params.AsymmetricKeyParameter generatePublicKeyParameter(java.security.PublicKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jce.provider.JCEIESCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.jce.provider.WrapCipherSpi:byte[] engineWrap(java.security.Key)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jce.provider.WrapCipherSpi:java.security.Key engineUnwrap(byte[],java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jce.provider.JDKKeyPairGenerator$DH:java.security.KeyPair generateKeyPair()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.util.PublicKeyFactory:org.bouncycastle.crypto.params.AsymmetricKeyParameter createKey(byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.util.PublicKeyFactory:org.bouncycastle.crypto.params.AsymmetricKeyParameter createKey(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jce.provider.JCEIESCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jce.provider.JCEIESCipher:void engineInit(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom)",
            "org.bouncycastle.jce.provider.JCEIESCipher:void engineInit(int,java.security.Key,java.security.SecureRandom)",
            "org.bouncycastle.jce.provider.WrapCipherSpi:void engineInit(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom)",
            "org.bouncycastle.jce.provider.WrapCipherSpi:void engineInit(int,java.security.Key,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.jce.provider.JCEIESCipher:void engineInit(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jce.provider.JCEIESCipher:void engineInit(int,java.security.Key,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jce.provider.WrapCipherSpi:void engineInit(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jce.provider.WrapCipherSpi:void engineInit(int,java.security.Key,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": []
    }
}