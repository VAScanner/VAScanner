{
    "org.eclipse.jetty.server.Request:void extractParameters()": {
        "isVulRoot": true,
        "vulCaller": [
            "org.eclipse.jetty.server.Request:java.lang.String getParameter(java.lang.String)",
            "org.eclipse.jetty.server.Request:java.util.Map getParameterMap()",
            "org.eclipse.jetty.server.Request:java.util.Enumeration getParameterNames()",
            "org.eclipse.jetty.server.Request:java.lang.String[] getParameterValues(java.lang.String)",
            "org.eclipse.jetty.server.Request:void mergeQueryString(java.lang.String)",
            "org.eclipse.jetty.server.Dispatcher:void include(javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "org.eclipse.jetty.server.Dispatcher:void forward(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.DispatcherType)",
            "org.eclipse.jetty.security.authentication.FormAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)"
        ]
    },
    "org.eclipse.jetty.server.Request:java.lang.String getParameter(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.StatisticsServlet:void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.security.jaspi.modules.FormAuthModule:javax.security.auth.message.AuthStatus validateRequest(javax.security.auth.message.MessageInfo,javax.security.auth.Subject,javax.security.auth.Subject)",
            "org.eclipse.jetty.security.authentication.FormAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)"
        ]
    },
    "org.eclipse.jetty.server.Request:java.util.Map getParameterMap()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.Request:java.util.Enumeration getParameterNames()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.Request:java.lang.String[] getParameterValues(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.plus.jaas.callback.DefaultCallbackHandler:void handle(javax.security.auth.callback.Callback[])"
        ]
    },
    "org.eclipse.jetty.server.Request:void mergeQueryString(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.Server:void handleAsync(org.eclipse.jetty.server.HttpConnection)",
            "org.eclipse.jetty.server.Dispatcher:void forward(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.DispatcherType)"
        ]
    },
    "org.eclipse.jetty.server.Dispatcher:void include(javax.servlet.ServletRequest,javax.servlet.ServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.DefaultServlet:void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.servlets.ConcatServlet:void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.Dispatcher:void forward(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.DispatcherType)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.Dispatcher:void forward(javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "org.eclipse.jetty.server.Dispatcher:void error(javax.servlet.ServletRequest,javax.servlet.ServletResponse)"
        ]
    },
    "org.eclipse.jetty.security.authentication.FormAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.security.authentication.DeferredAuthentication:org.eclipse.jetty.server.Authentication authenticate(javax.servlet.ServletRequest)",
            "org.eclipse.jetty.security.authentication.DeferredAuthentication:org.eclipse.jetty.server.Authentication authenticate(javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "org.eclipse.jetty.security.SecurityHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.servlet.StatisticsServlet:void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.security.jaspi.modules.FormAuthModule:javax.security.auth.message.AuthStatus validateRequest(javax.security.auth.message.MessageInfo,javax.security.auth.Subject,javax.security.auth.Subject)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.security.jaspi.JaspiAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(org.eclipse.jetty.security.jaspi.JaspiMessageInfo)"
        ]
    },
    "org.eclipse.jetty.plus.jaas.callback.DefaultCallbackHandler:void handle(javax.security.auth.callback.Callback[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.plus.jaas.spi.LdapLoginModule:boolean login()",
            "org.eclipse.jetty.plus.jaas.spi.AbstractLoginModule:boolean login()",
            "org.eclipse.jetty.plus.jaas.JAASLoginService:java.lang.String getUserName(javax.security.auth.callback.CallbackHandler)",
            "org.eclipse.jetty.security.jaspi.modules.BaseAuthModule:boolean login(javax.security.auth.Subject,java.lang.String,org.eclipse.jetty.http.security.Credential,java.lang.String,javax.security.auth.message.MessageInfo)"
        ]
    },
    "org.eclipse.jetty.server.Server:void handleAsync(org.eclipse.jetty.server.HttpConnection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.HttpConnection:void handleRequest()"
        ]
    },
    "org.eclipse.jetty.servlet.DefaultServlet:void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.servlets.ConcatServlet:void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.Dispatcher:void forward(javax.servlet.ServletRequest,javax.servlet.ServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.DefaultServlet:void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.servlets.WelcomeFilter:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)",
            "org.eclipse.jetty.security.authentication.FormAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)"
        ]
    },
    "org.eclipse.jetty.server.Dispatcher:void error(javax.servlet.ServletRequest,javax.servlet.ServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ErrorPageErrorHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.security.authentication.DeferredAuthentication:org.eclipse.jetty.server.Authentication authenticate(javax.servlet.ServletRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.Request:java.lang.String getAuthType()",
            "org.eclipse.jetty.server.Request:org.eclipse.jetty.server.UserIdentity getUserIdentity()",
            "org.eclipse.jetty.server.Request:java.security.Principal getUserPrincipal()",
            "org.eclipse.jetty.server.Request:boolean isUserInRole(java.lang.String)"
        ]
    },
    "org.eclipse.jetty.security.authentication.DeferredAuthentication:org.eclipse.jetty.server.Authentication authenticate(javax.servlet.ServletRequest,javax.servlet.ServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.Request:boolean authenticate(javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.security.SecurityHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ScopedHandler:void nextHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HotSwapHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.GzipHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerList:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.DebugHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerWrapper:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.IPAccessHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.session.SessionHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.security.SecurityHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.security.jaspi.JaspiAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(org.eclipse.jetty.security.jaspi.JaspiMessageInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.security.jaspi.JaspiAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)"
        ]
    },
    "org.eclipse.jetty.plus.jaas.spi.LdapLoginModule:boolean login()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.plus.jaas.spi.AbstractLoginModule:boolean login()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.plus.jaas.JAASLoginService:java.lang.String getUserName(javax.security.auth.callback.CallbackHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.plus.jaas.JAASLoginService:org.eclipse.jetty.server.UserIdentity login(java.lang.String,java.lang.Object)"
        ]
    },
    "org.eclipse.jetty.security.jaspi.modules.BaseAuthModule:boolean login(javax.security.auth.Subject,java.lang.String,org.eclipse.jetty.http.security.Credential,java.lang.String,javax.security.auth.message.MessageInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.security.jaspi.modules.BaseAuthModule:boolean login(javax.security.auth.Subject,java.lang.String,java.lang.String,javax.security.auth.message.MessageInfo)",
            "org.eclipse.jetty.security.jaspi.modules.DigestAuthModule:javax.security.auth.message.AuthStatus validateRequest(javax.security.auth.message.MessageInfo,javax.security.auth.Subject,javax.security.auth.Subject)",
            "org.eclipse.jetty.security.jaspi.modules.ClientCertAuthModule:javax.security.auth.message.AuthStatus validateRequest(javax.security.auth.message.MessageInfo,javax.security.auth.Subject,javax.security.auth.Subject)",
            "org.eclipse.jetty.security.jaspi.modules.FormAuthModule:boolean tryLogin(javax.security.auth.message.MessageInfo,javax.security.auth.Subject,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,java.lang.String,org.eclipse.jetty.http.security.Password)"
        ]
    },
    "org.eclipse.jetty.server.HttpConnection:void handleRequest()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.HttpConnection$RequestHandler:void headerComplete()",
            "org.eclipse.jetty.server.HttpConnection$RequestHandler:void content(org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.server.HttpConnection$RequestHandler:void messageComplete(long)",
            "org.eclipse.jetty.server.AsyncHttpConnection:org.eclipse.jetty.io.Connection handle()",
            "org.eclipse.jetty.ajp.Ajp13Connection:void access$2700(org.eclipse.jetty.ajp.Ajp13Connection)"
        ]
    },
    "org.eclipse.jetty.servlets.WelcomeFilter:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletHandler$CachedChain:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "org.eclipse.jetty.servlet.ServletHandler$Chain:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)"
        ]
    },
    "org.eclipse.jetty.servlet.ErrorPageErrorHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ScopedHandler:void nextHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HotSwapHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.GzipHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerList:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.DebugHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerWrapper:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.IPAccessHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.session.SessionHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.Response:void sendError(int,java.lang.String)",
            "org.eclipse.jetty.security.SecurityHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.Request:java.lang.String getAuthType()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlets.CGI:void exec(java.io.File,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.security.ConstraintSecurityHandler:boolean checkWebResourcePermissions(java.lang.String,org.eclipse.jetty.server.Request,org.eclipse.jetty.server.Response,java.lang.Object,org.eclipse.jetty.server.UserIdentity)"
        ]
    },
    "org.eclipse.jetty.server.Request:org.eclipse.jetty.server.UserIdentity getUserIdentity()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.Request:java.security.Principal getUserPrincipal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlets.DoSFilter:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)",
            "org.eclipse.jetty.servlets.QoSFilter:int getPriority(javax.servlet.ServletRequest)",
            "org.eclipse.jetty.server.Request:java.lang.String getRemoteUser()"
        ]
    },
    "org.eclipse.jetty.server.Request:boolean isUserInRole(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.Request:boolean authenticate(javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.handler.ScopedHandler:void nextHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ContextHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.session.SessionHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.handler.HotSwapHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ScopedHandler:void nextHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HotSwapHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.GzipHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerList:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.DebugHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerWrapper:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.IPAccessHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.session.SessionHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.security.SecurityHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.handler.GzipHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ScopedHandler:void nextHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HotSwapHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.GzipHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerList:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.DebugHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerWrapper:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.IPAccessHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.session.SessionHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.security.SecurityHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.handler.HandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ScopedHandler:void nextHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HotSwapHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.GzipHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerList:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.DebugHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerWrapper:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.IPAccessHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.session.SessionHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.security.SecurityHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.handler.HandlerList:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ScopedHandler:void nextHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HotSwapHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.GzipHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerList:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.DebugHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerWrapper:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.IPAccessHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.session.SessionHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.security.SecurityHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.handler.DebugHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ScopedHandler:void nextHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HotSwapHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.GzipHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerList:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.DebugHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerWrapper:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.IPAccessHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.session.SessionHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.security.SecurityHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.handler.ContextHandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ScopedHandler:void nextHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HotSwapHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.GzipHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerList:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.DebugHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerWrapper:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.IPAccessHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.session.SessionHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.security.SecurityHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.handler.HandlerWrapper:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.rewrite.handler.RewriteHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ScopedHandler:void nextHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HotSwapHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.StatisticsHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.RequestLogHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ConnectHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.GzipHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerList:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.DebugHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerWrapper:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.IPAccessHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.session.SessionHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.Server:void handle(org.eclipse.jetty.server.HttpConnection)",
            "org.eclipse.jetty.server.Server:void handleAsync(org.eclipse.jetty.server.HttpConnection)",
            "org.eclipse.jetty.websocket.WebSocketHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.security.SecurityHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.handler.IPAccessHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ScopedHandler:void nextHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HotSwapHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.GzipHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerList:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.DebugHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerWrapper:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.IPAccessHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.session.SessionHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.security.SecurityHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.handler.ContextHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletHandler:void doScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ScopedHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ScopedHandler:void nextScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ScopedHandler:void nextHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandler:void doScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.session.SessionHandler:void doScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.session.SessionHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.session.SessionHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletHandler:void doScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ScopedHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ScopedHandler:void nextScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ScopedHandler:void nextHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandler:void doScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.session.SessionHandler:void doScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.session.SessionHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.security.jaspi.JaspiAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.security.authentication.DeferredAuthentication:org.eclipse.jetty.server.Authentication authenticate(javax.servlet.ServletRequest)",
            "org.eclipse.jetty.security.authentication.DeferredAuthentication:org.eclipse.jetty.server.Authentication authenticate(javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "org.eclipse.jetty.security.SecurityHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.plus.jaas.JAASLoginService:org.eclipse.jetty.server.UserIdentity login(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.security.jaspi.ServletCallbackHandler:void handle(javax.security.auth.callback.Callback[])",
            "org.eclipse.jetty.security.authentication.FormAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)",
            "org.eclipse.jetty.security.authentication.SessionAuthentication:void readObject(java.io.ObjectInputStream)",
            "org.eclipse.jetty.security.authentication.SpnegoAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)",
            "org.eclipse.jetty.security.authentication.DeferredAuthentication:org.eclipse.jetty.server.Authentication login(java.lang.String,java.lang.String)",
            "org.eclipse.jetty.security.authentication.ClientCertAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)",
            "org.eclipse.jetty.security.authentication.BasicAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)",
            "org.eclipse.jetty.security.authentication.DigestAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)"
        ]
    },
    "org.eclipse.jetty.security.jaspi.modules.BaseAuthModule:boolean login(javax.security.auth.Subject,java.lang.String,java.lang.String,javax.security.auth.message.MessageInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.security.jaspi.modules.BasicAuthModule:javax.security.auth.message.AuthStatus validateRequest(javax.security.auth.message.MessageInfo,javax.security.auth.Subject,javax.security.auth.Subject)"
        ]
    },
    "org.eclipse.jetty.security.jaspi.modules.DigestAuthModule:javax.security.auth.message.AuthStatus validateRequest(javax.security.auth.message.MessageInfo,javax.security.auth.Subject,javax.security.auth.Subject)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.security.jaspi.JaspiAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(org.eclipse.jetty.security.jaspi.JaspiMessageInfo)"
        ]
    },
    "org.eclipse.jetty.security.jaspi.modules.ClientCertAuthModule:javax.security.auth.message.AuthStatus validateRequest(javax.security.auth.message.MessageInfo,javax.security.auth.Subject,javax.security.auth.Subject)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.security.jaspi.JaspiAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(org.eclipse.jetty.security.jaspi.JaspiMessageInfo)"
        ]
    },
    "org.eclipse.jetty.security.jaspi.modules.FormAuthModule:boolean tryLogin(javax.security.auth.message.MessageInfo,javax.security.auth.Subject,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,java.lang.String,org.eclipse.jetty.http.security.Password)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.security.jaspi.modules.FormAuthModule:javax.security.auth.message.AuthStatus validateRequest(javax.security.auth.message.MessageInfo,javax.security.auth.Subject,javax.security.auth.Subject)"
        ]
    },
    "org.eclipse.jetty.server.HttpConnection$RequestHandler:void headerComplete()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.http.HttpParser:int parseNext()"
        ]
    },
    "org.eclipse.jetty.server.HttpConnection$RequestHandler:void content(org.eclipse.jetty.io.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.http.HttpParser:int parseNext()"
        ]
    },
    "org.eclipse.jetty.server.HttpConnection$RequestHandler:void messageComplete(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.http.HttpParser:int parseNext()"
        ]
    },
    "org.eclipse.jetty.server.AsyncHttpConnection:org.eclipse.jetty.io.Connection handle()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.nio.BlockingChannelConnector$BlockingChannelEndPoint:void run()",
            "org.eclipse.jetty.server.bio.SocketConnector$ConnectorEndPoint:void run()",
            "org.eclipse.jetty.server.LocalConnector$Request:void run()",
            "org.eclipse.jetty.io.nio.SelectChannelEndPoint:void handle()",
            "org.eclipse.jetty.client.SocketConnector$1:void run()"
        ]
    },
    "org.eclipse.jetty.ajp.Ajp13Connection:void access$2700(org.eclipse.jetty.ajp.Ajp13Connection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.ajp.Ajp13Connection$RequestHandler:void headerComplete()"
        ]
    },
    "org.eclipse.jetty.servlet.ServletHandler$CachedChain:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.servlets.CrossOriginFilter:void handle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.FilterChain)",
            "org.eclipse.jetty.servlets.UserAgentFilter:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)",
            "org.eclipse.jetty.servlets.DoSFilter:void doFilterChain(javax.servlet.FilterChain,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.servlets.QoSFilter:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)",
            "org.eclipse.jetty.servlets.MultiPartFilter:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)",
            "org.eclipse.jetty.servlets.PutFilter:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)",
            "org.eclipse.jetty.servlets.PutFilter:void handleOptions(javax.servlet.FilterChain,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.servlets.WelcomeFilter:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)",
            "org.eclipse.jetty.continuation.ContinuationFilter:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)"
        ]
    },
    "org.eclipse.jetty.servlet.ServletHandler$Chain:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.servlets.CrossOriginFilter:void handle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.FilterChain)",
            "org.eclipse.jetty.servlets.UserAgentFilter:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)",
            "org.eclipse.jetty.servlets.DoSFilter:void doFilterChain(javax.servlet.FilterChain,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.servlets.QoSFilter:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)",
            "org.eclipse.jetty.servlets.MultiPartFilter:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)",
            "org.eclipse.jetty.servlets.PutFilter:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)",
            "org.eclipse.jetty.servlets.PutFilter:void handleOptions(javax.servlet.FilterChain,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.servlets.WelcomeFilter:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)",
            "org.eclipse.jetty.continuation.ContinuationFilter:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)"
        ]
    },
    "org.eclipse.jetty.server.Response:void sendError(int,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.rewrite.handler.ResponsePatternRule:java.lang.String apply(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.servlet.ServletHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.servlet.DefaultServlet:void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.servlet.DefaultServlet:boolean passConditionalHeaders(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.eclipse.jetty.util.resource.Resource,org.eclipse.jetty.http.HttpContent)",
            "org.eclipse.jetty.servlet.DefaultServlet:void sendDirectory(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.eclipse.jetty.util.resource.Resource,java.lang.String)",
            "org.eclipse.jetty.servlet.NoJspServlet:void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.servlets.CGI:void exec(java.io.File,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.Response:void sendError(int)",
            "org.eclipse.jetty.server.HttpConnection:void handleRequest()",
            "org.eclipse.jetty.websocket.WebSocketConnectionD00:void handshake(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String)",
            "org.eclipse.jetty.security.jaspi.modules.ClientCertAuthModule:javax.security.auth.message.AuthStatus validateRequest(javax.security.auth.message.MessageInfo,javax.security.auth.Subject,javax.security.auth.Subject)",
            "org.eclipse.jetty.security.ConstraintSecurityHandler:boolean checkUserDataPermissions(java.lang.String,org.eclipse.jetty.server.Request,org.eclipse.jetty.server.Response,java.lang.Object)",
            "org.eclipse.jetty.security.SecurityHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.servlets.CGI:void exec(java.io.File,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlets.CGI:void service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.security.ConstraintSecurityHandler:boolean checkWebResourcePermissions(java.lang.String,org.eclipse.jetty.server.Request,org.eclipse.jetty.server.Response,java.lang.Object,org.eclipse.jetty.server.UserIdentity)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.security.SecurityHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.servlets.DoSFilter:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletHandler$CachedChain:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "org.eclipse.jetty.servlet.ServletHandler$Chain:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)"
        ]
    },
    "org.eclipse.jetty.servlets.QoSFilter:int getPriority(javax.servlet.ServletRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlets.QoSFilter:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)"
        ]
    },
    "org.eclipse.jetty.server.Request:java.lang.String getRemoteUser()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlets.CGI:void exec(java.io.File,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.ajp.Ajp13Request:java.lang.String getRemoteUser()"
        ]
    },
    "org.eclipse.jetty.rewrite.handler.RewriteHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ScopedHandler:void nextHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HotSwapHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.GzipHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerList:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.DebugHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerWrapper:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.IPAccessHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.session.SessionHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.security.SecurityHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.handler.StatisticsHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ScopedHandler:void nextHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HotSwapHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.GzipHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerList:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.DebugHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerWrapper:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.IPAccessHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.session.SessionHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.security.SecurityHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.handler.RequestLogHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ScopedHandler:void nextHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HotSwapHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.GzipHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerList:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.DebugHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerWrapper:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.IPAccessHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.session.SessionHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.security.SecurityHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.handler.ConnectHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ScopedHandler:void nextHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HotSwapHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.GzipHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerList:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.DebugHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerWrapper:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.IPAccessHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.session.SessionHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.security.SecurityHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.Server:void handle(org.eclipse.jetty.server.HttpConnection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.HttpConnection:void handleRequest()",
            "org.eclipse.jetty.nested.NestedConnection:void service()"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ScopedHandler:void nextHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HotSwapHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.GzipHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerList:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.DebugHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerWrapper:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.IPAccessHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.session.SessionHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.security.SecurityHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.servlet.ServletHandler:void doScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletHandler:void doScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ScopedHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ScopedHandler:void nextScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandler:void doScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.session.SessionHandler:void doScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.handler.ScopedHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ScopedHandler:void nextHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HotSwapHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.GzipHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerList:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.DebugHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerWrapper:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.IPAccessHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.session.SessionHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.Dispatcher:void include(javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "org.eclipse.jetty.server.Dispatcher:void forward(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.DispatcherType)",
            "org.eclipse.jetty.security.SecurityHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.handler.ScopedHandler:void nextScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletHandler:void doScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandler:void doScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.handler.ContextHandler:void doScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletHandler:void doScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ScopedHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ScopedHandler:void nextScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandler:void doScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.session.SessionHandler:void doScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.session.SessionHandler:void doScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletHandler:void doScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ScopedHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ScopedHandler:void nextScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandler:void doScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.session.SessionHandler:void doScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.security.jaspi.ServletCallbackHandler:void handle(javax.security.auth.callback.Callback[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.plus.jaas.spi.LdapLoginModule:boolean login()",
            "org.eclipse.jetty.plus.jaas.spi.AbstractLoginModule:boolean login()",
            "org.eclipse.jetty.plus.jaas.JAASLoginService:java.lang.String getUserName(javax.security.auth.callback.CallbackHandler)",
            "org.eclipse.jetty.security.jaspi.modules.BaseAuthModule:boolean login(javax.security.auth.Subject,java.lang.String,org.eclipse.jetty.http.security.Credential,java.lang.String,javax.security.auth.message.MessageInfo)"
        ]
    },
    "org.eclipse.jetty.security.authentication.SessionAuthentication:void readObject(java.io.ObjectInputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.security.authentication.SpnegoAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.security.authentication.DeferredAuthentication:org.eclipse.jetty.server.Authentication authenticate(javax.servlet.ServletRequest)",
            "org.eclipse.jetty.security.authentication.DeferredAuthentication:org.eclipse.jetty.server.Authentication authenticate(javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "org.eclipse.jetty.security.SecurityHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.security.authentication.DeferredAuthentication:org.eclipse.jetty.server.Authentication login(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.Request:void login(java.lang.String,java.lang.String)"
        ]
    },
    "org.eclipse.jetty.security.authentication.ClientCertAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.security.authentication.DeferredAuthentication:org.eclipse.jetty.server.Authentication authenticate(javax.servlet.ServletRequest)",
            "org.eclipse.jetty.security.authentication.DeferredAuthentication:org.eclipse.jetty.server.Authentication authenticate(javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "org.eclipse.jetty.security.SecurityHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.security.authentication.BasicAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.security.authentication.DeferredAuthentication:org.eclipse.jetty.server.Authentication authenticate(javax.servlet.ServletRequest)",
            "org.eclipse.jetty.security.authentication.DeferredAuthentication:org.eclipse.jetty.server.Authentication authenticate(javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "org.eclipse.jetty.security.SecurityHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.security.authentication.DigestAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.security.authentication.DeferredAuthentication:org.eclipse.jetty.server.Authentication authenticate(javax.servlet.ServletRequest)",
            "org.eclipse.jetty.security.authentication.DeferredAuthentication:org.eclipse.jetty.server.Authentication authenticate(javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "org.eclipse.jetty.security.SecurityHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.security.jaspi.modules.BasicAuthModule:javax.security.auth.message.AuthStatus validateRequest(javax.security.auth.message.MessageInfo,javax.security.auth.Subject,javax.security.auth.Subject)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.security.jaspi.JaspiAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(org.eclipse.jetty.security.jaspi.JaspiMessageInfo)"
        ]
    },
    "org.eclipse.jetty.http.HttpParser:int parseNext()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.http.HttpParser:void parse()",
            "org.eclipse.jetty.http.HttpParser:int parseAvailable()",
            "org.eclipse.jetty.http.HttpParser:org.eclipse.jetty.io.Buffer blockForContent(long)",
            "org.eclipse.jetty.http.HttpParser:int available()"
        ]
    },
    "org.eclipse.jetty.server.nio.BlockingChannelConnector$BlockingChannelEndPoint:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ContextHandler:void handle(java.lang.Runnable)",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:void sslClose()",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int fill(org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int flush(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.io.nio.SelectorManager$SelectSet:void doSelect()",
            "org.eclipse.jetty.util.thread.QueuedThreadPool$3:void run()",
            "org.eclipse.jetty.util.thread.ExecutorThreadPool:boolean dispatch(java.lang.Runnable)"
        ]
    },
    "org.eclipse.jetty.server.bio.SocketConnector$ConnectorEndPoint:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ContextHandler:void handle(java.lang.Runnable)",
            "org.eclipse.jetty.server.ssl.SslSocketConnector$SslConnectorEndPoint:void run()",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:void sslClose()",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int fill(org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int flush(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.io.nio.SelectorManager$SelectSet:void doSelect()",
            "org.eclipse.jetty.util.thread.QueuedThreadPool$3:void run()",
            "org.eclipse.jetty.util.thread.ExecutorThreadPool:boolean dispatch(java.lang.Runnable)"
        ]
    },
    "org.eclipse.jetty.server.LocalConnector$Request:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ContextHandler:void handle(java.lang.Runnable)",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:void sslClose()",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int fill(org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int flush(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.io.nio.SelectorManager$SelectSet:void doSelect()",
            "org.eclipse.jetty.util.thread.QueuedThreadPool$3:void run()",
            "org.eclipse.jetty.util.thread.ExecutorThreadPool:boolean dispatch(java.lang.Runnable)"
        ]
    },
    "org.eclipse.jetty.io.nio.SelectChannelEndPoint:void handle()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.io.nio.SelectChannelEndPoint$1:void run()"
        ]
    },
    "org.eclipse.jetty.client.SocketConnector$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ContextHandler:void handle(java.lang.Runnable)",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:void sslClose()",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int fill(org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int flush(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.io.nio.SelectorManager$SelectSet:void doSelect()",
            "org.eclipse.jetty.util.thread.QueuedThreadPool$3:void run()",
            "org.eclipse.jetty.util.thread.ExecutorThreadPool:boolean dispatch(java.lang.Runnable)"
        ]
    },
    "org.eclipse.jetty.ajp.Ajp13Connection$RequestHandler:void headerComplete()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.ajp.Ajp13Parser:int parseNext()"
        ]
    },
    "org.eclipse.jetty.servlet.ServletHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletHandler:void doScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ScopedHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ScopedHandler:void nextScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ScopedHandler:void nextHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandler:void doScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.session.SessionHandler:void doScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.session.SessionHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.servlets.CrossOriginFilter:void handle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.FilterChain)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlets.CrossOriginFilter:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)"
        ]
    },
    "org.eclipse.jetty.servlets.UserAgentFilter:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletHandler$CachedChain:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "org.eclipse.jetty.servlet.ServletHandler$Chain:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "org.eclipse.jetty.servlets.GzipFilter:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)"
        ]
    },
    "org.eclipse.jetty.servlets.DoSFilter:void doFilterChain(javax.servlet.FilterChain,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlets.DoSFilter:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)"
        ]
    },
    "org.eclipse.jetty.servlets.QoSFilter:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletHandler$CachedChain:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "org.eclipse.jetty.servlet.ServletHandler$Chain:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)"
        ]
    },
    "org.eclipse.jetty.servlets.MultiPartFilter:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletHandler$CachedChain:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "org.eclipse.jetty.servlet.ServletHandler$Chain:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)"
        ]
    },
    "org.eclipse.jetty.servlets.PutFilter:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletHandler$CachedChain:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "org.eclipse.jetty.servlet.ServletHandler$Chain:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)"
        ]
    },
    "org.eclipse.jetty.servlets.PutFilter:void handleOptions(javax.servlet.FilterChain,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlets.PutFilter:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)"
        ]
    },
    "org.eclipse.jetty.continuation.ContinuationFilter:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletHandler$CachedChain:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "org.eclipse.jetty.servlet.ServletHandler$Chain:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)"
        ]
    },
    "org.eclipse.jetty.rewrite.handler.ResponsePatternRule:java.lang.String apply(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.rewrite.handler.PatternRule:java.lang.String matchAndApply(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.servlet.DefaultServlet:boolean passConditionalHeaders(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.eclipse.jetty.util.resource.Resource,org.eclipse.jetty.http.HttpContent)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.servlet.DefaultServlet:void sendDirectory(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.eclipse.jetty.util.resource.Resource,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.servlet.NoJspServlet:void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.Response:void sendError(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletHandler:void notFound(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.servlet.Invoker:void service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.servlet.DefaultServlet:void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.servlet.DefaultServlet:void doTrace(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.servlet.DefaultServlet:boolean passConditionalHeaders(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.eclipse.jetty.util.resource.Resource,org.eclipse.jetty.http.HttpContent)",
            "org.eclipse.jetty.servlet.DefaultServlet:void sendDirectory(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.eclipse.jetty.util.resource.Resource,java.lang.String)",
            "org.eclipse.jetty.servlet.StatisticsServlet:void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.servlets.DoSFilter:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)",
            "org.eclipse.jetty.servlets.QoSFilter:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)",
            "org.eclipse.jetty.servlets.ProxyServlet:void service(javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "org.eclipse.jetty.servlets.PutFilter:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)",
            "org.eclipse.jetty.servlets.PutFilter:void handlePut(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String,java.io.File)",
            "org.eclipse.jetty.servlets.PutFilter:void handleDelete(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String,java.io.File)",
            "org.eclipse.jetty.servlets.PutFilter:void handleMove(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String,java.io.File)",
            "org.eclipse.jetty.servlets.PutFilter:boolean passConditionalHeaders(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.io.File)",
            "org.eclipse.jetty.servlets.CGI:void service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.servlets.ConcatServlet:void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ResourceHandler:void doDirectory(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.eclipse.jetty.util.resource.Resource)",
            "org.eclipse.jetty.server.handler.DefaultHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.IPAccessHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandler:boolean checkContext(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.HttpConnection:void handleRequest()",
            "org.eclipse.jetty.server.Request:boolean authenticate(javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD10:void handshake(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String)",
            "org.eclipse.jetty.websocket.WebSocketFactory:boolean acceptWebSocket(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD06:void handshake(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String)",
            "org.eclipse.jetty.security.jaspi.modules.DigestAuthModule:javax.security.auth.message.AuthStatus validateRequest(javax.security.auth.message.MessageInfo,javax.security.auth.Subject,javax.security.auth.Subject)",
            "org.eclipse.jetty.security.jaspi.modules.BasicAuthModule:javax.security.auth.message.AuthStatus validateRequest(javax.security.auth.message.MessageInfo,javax.security.auth.Subject,javax.security.auth.Subject)",
            "org.eclipse.jetty.security.jaspi.modules.FormAuthModule:javax.security.auth.message.AuthStatus validateRequest(javax.security.auth.message.MessageInfo,javax.security.auth.Subject,javax.security.auth.Subject)",
            "org.eclipse.jetty.security.authentication.FormAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)",
            "org.eclipse.jetty.security.authentication.SpnegoAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)",
            "org.eclipse.jetty.security.authentication.ClientCertAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)",
            "org.eclipse.jetty.security.authentication.BasicAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)",
            "org.eclipse.jetty.security.authentication.DigestAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)",
            "org.eclipse.jetty.security.SecurityHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketConnectionD00:void handshake(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.WebSocketFactory:void upgrade(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.eclipse.jetty.websocket.WebSocket,java.lang.String)"
        ]
    },
    "org.eclipse.jetty.security.ConstraintSecurityHandler:boolean checkUserDataPermissions(java.lang.String,org.eclipse.jetty.server.Request,org.eclipse.jetty.server.Response,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.security.SecurityHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.servlets.CGI:void service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.ajp.Ajp13Request:java.lang.String getRemoteUser()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlets.CGI:void exec(java.io.File,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.nested.NestedConnection:void service()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.nested.NestedConnector:void service(javax.servlet.ServletRequest,javax.servlet.ServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.Request:void login(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.http.HttpParser:void parse()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.http.HttpParser:int parseAvailable()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.BlockingHttpConnection:org.eclipse.jetty.io.Connection handle()",
            "org.eclipse.jetty.server.AsyncHttpConnection:org.eclipse.jetty.io.Connection handle()",
            "org.eclipse.jetty.client.HttpConnection:org.eclipse.jetty.io.Connection handle()",
            "org.eclipse.jetty.websocket.WebSocketClient$HandshakeConnection:org.eclipse.jetty.io.Connection handle()"
        ]
    },
    "org.eclipse.jetty.http.HttpParser:org.eclipse.jetty.io.Buffer blockForContent(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.HttpInput:int read()",
            "org.eclipse.jetty.server.HttpInput:int read(byte[],int,int)"
        ]
    },
    "org.eclipse.jetty.http.HttpParser:int available()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.HttpInput:int available()"
        ]
    },
    "org.eclipse.jetty.server.handler.ContextHandler:void handle(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.JDBCSessionManager:org.eclipse.jetty.server.session.JDBCSessionManager$SessionData loadSession(java.lang.String,java.lang.String,java.lang.String)",
            "org.eclipse.jetty.server.AsyncContinuation$1:void run()"
        ]
    },
    "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:void sslClose()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:void shutdownOutput()",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:void close()"
        ]
    },
    "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int fill(org.eclipse.jetty.io.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ConnectHandler:int read(org.eclipse.jetty.io.EndPoint,org.eclipse.jetty.io.Buffer,java.util.concurrent.ConcurrentMap)",
            "org.eclipse.jetty.http.HttpParser:long fill()",
            "org.eclipse.jetty.client.SelectConnector$ProxySelectChannelEndPoint:int fill(org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.ajp.Ajp13Parser:int fill()",
            "org.eclipse.jetty.websocket.WebSocketParserD00:int parseNext()",
            "org.eclipse.jetty.websocket.WebSocketParserD10:int parseNext()",
            "org.eclipse.jetty.websocket.WebSocketParserD06:int parseNext()",
            "org.eclipse.jetty.websocket.WebSocketConnectionD00:org.eclipse.jetty.io.Connection handle()"
        ]
    },
    "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int flush(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int flush(org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.http.HttpGenerator:long flushBuffer()",
            "org.eclipse.jetty.client.SelectConnector$ProxySelectChannelEndPoint:int flush(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.ajp.Ajp13Generator:long flushBuffer()"
        ]
    },
    "org.eclipse.jetty.io.nio.SelectorManager$SelectSet:void doSelect()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.io.nio.SelectorManager:void doSelect(int)"
        ]
    },
    "org.eclipse.jetty.util.thread.QueuedThreadPool$3:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ContextHandler:void handle(java.lang.Runnable)",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:void sslClose()",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int fill(org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int flush(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.io.nio.SelectorManager$SelectSet:void doSelect()",
            "org.eclipse.jetty.util.thread.QueuedThreadPool$3:void run()",
            "org.eclipse.jetty.util.thread.ExecutorThreadPool:boolean dispatch(java.lang.Runnable)"
        ]
    },
    "org.eclipse.jetty.util.thread.ExecutorThreadPool:boolean dispatch(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ConnectHandler:void doStart()",
            "org.eclipse.jetty.server.handler.HandlerCollection:void doStart()",
            "org.eclipse.jetty.server.handler.ConnectHandler$Manager:boolean dispatch(java.lang.Runnable)",
            "org.eclipse.jetty.server.nio.BlockingChannelConnector$BlockingChannelEndPoint:void dispatch()",
            "org.eclipse.jetty.server.nio.SelectChannelConnector$ConnectorSelectorManager:boolean dispatch(java.lang.Runnable)",
            "org.eclipse.jetty.server.nio.BlockingChannelConnector:void doStart()",
            "org.eclipse.jetty.server.bio.SocketConnector$ConnectorEndPoint:void dispatch()",
            "org.eclipse.jetty.server.AbstractConnector:void doStart()",
            "org.eclipse.jetty.server.LocalConnector:void accept(int)",
            "org.eclipse.jetty.server.AsyncContinuation:void start(java.lang.Runnable)",
            "org.eclipse.jetty.client.SelectConnector$Manager:boolean dispatch(java.lang.Runnable)",
            "org.eclipse.jetty.client.SocketConnector:void startConnection(org.eclipse.jetty.client.HttpDestination)",
            "org.eclipse.jetty.client.HttpClient:void doStart()",
            "org.eclipse.jetty.client.SelectConnector:void doStart()",
            "org.eclipse.jetty.websocket.WebSocketClient$WebSocketClientSelector:boolean dispatch(java.lang.Runnable)",
            "org.eclipse.jetty.websocket.WebSocketClient:void doStart()"
        ]
    },
    "org.eclipse.jetty.server.ssl.SslSocketConnector$SslConnectorEndPoint:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ContextHandler:void handle(java.lang.Runnable)",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:void sslClose()",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int fill(org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int flush(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.io.nio.SelectorManager$SelectSet:void doSelect()",
            "org.eclipse.jetty.util.thread.QueuedThreadPool$3:void run()",
            "org.eclipse.jetty.util.thread.ExecutorThreadPool:boolean dispatch(java.lang.Runnable)"
        ]
    },
    "org.eclipse.jetty.io.nio.SelectChannelEndPoint$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ContextHandler:void handle(java.lang.Runnable)",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:void sslClose()",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int fill(org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int flush(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.io.nio.SelectorManager$SelectSet:void doSelect()",
            "org.eclipse.jetty.util.thread.QueuedThreadPool$3:void run()",
            "org.eclipse.jetty.util.thread.ExecutorThreadPool:boolean dispatch(java.lang.Runnable)"
        ]
    },
    "org.eclipse.jetty.ajp.Ajp13Parser:int parseNext()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.ajp.Ajp13Parser:void parse()",
            "org.eclipse.jetty.ajp.Ajp13Parser:int parseAvailable()",
            "org.eclipse.jetty.ajp.Ajp13Parser$Input:boolean blockForContent()"
        ]
    },
    "org.eclipse.jetty.servlets.CrossOriginFilter:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletHandler$CachedChain:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "org.eclipse.jetty.servlet.ServletHandler$Chain:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)"
        ]
    },
    "org.eclipse.jetty.servlets.GzipFilter:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletHandler$CachedChain:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "org.eclipse.jetty.servlet.ServletHandler$Chain:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)"
        ]
    },
    "org.eclipse.jetty.rewrite.handler.PatternRule:java.lang.String matchAndApply(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.rewrite.handler.RuleContainer:java.lang.String apply(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.servlet.ServletHandler:void notFound(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.servlet.ServletHandler$CachedChain:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "org.eclipse.jetty.servlet.ServletHandler$Chain:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)"
        ]
    },
    "org.eclipse.jetty.servlet.Invoker:void service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.servlet.DefaultServlet:void doTrace(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.servlets.ProxyServlet:void service(javax.servlet.ServletRequest,javax.servlet.ServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletHolder$SingleThreadedWrapper:void service(javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "org.eclipse.jetty.servlet.ServletHolder:void handle(org.eclipse.jetty.server.Request,javax.servlet.ServletRequest,javax.servlet.ServletResponse)"
        ]
    },
    "org.eclipse.jetty.servlets.PutFilter:void handlePut(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlets.PutFilter:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)"
        ]
    },
    "org.eclipse.jetty.servlets.PutFilter:void handleDelete(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlets.PutFilter:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)"
        ]
    },
    "org.eclipse.jetty.servlets.PutFilter:void handleMove(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlets.PutFilter:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)"
        ]
    },
    "org.eclipse.jetty.servlets.PutFilter:boolean passConditionalHeaders(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlets.PutFilter:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)"
        ]
    },
    "org.eclipse.jetty.server.handler.ResourceHandler:void doDirectory(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.eclipse.jetty.util.resource.Resource)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ResourceHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.handler.DefaultHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ScopedHandler:void nextHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HotSwapHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.GzipHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerList:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.DebugHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerWrapper:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.IPAccessHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.session.SessionHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.security.SecurityHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.handler.ContextHandler:boolean checkContext(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ContextHandler:void doScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketConnectionD10:void handshake(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.WebSocketFactory:void upgrade(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.eclipse.jetty.websocket.WebSocket,java.lang.String)"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketFactory:boolean acceptWebSocket(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.WebSocketHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.websocket.WebSocketServlet:void service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketConnectionD06:void handshake(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.WebSocketFactory:void upgrade(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.eclipse.jetty.websocket.WebSocket,java.lang.String)"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketFactory:void upgrade(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.eclipse.jetty.websocket.WebSocket,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.WebSocketFactory:boolean acceptWebSocket(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.nested.NestedConnector:void service(javax.servlet.ServletRequest,javax.servlet.ServletResponse)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.BlockingHttpConnection:org.eclipse.jetty.io.Connection handle()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.nio.BlockingChannelConnector$BlockingChannelEndPoint:void run()",
            "org.eclipse.jetty.server.bio.SocketConnector$ConnectorEndPoint:void run()",
            "org.eclipse.jetty.server.LocalConnector$Request:void run()",
            "org.eclipse.jetty.io.nio.SelectChannelEndPoint:void handle()",
            "org.eclipse.jetty.client.SocketConnector$1:void run()"
        ]
    },
    "org.eclipse.jetty.client.HttpConnection:org.eclipse.jetty.io.Connection handle()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.nio.BlockingChannelConnector$BlockingChannelEndPoint:void run()",
            "org.eclipse.jetty.server.bio.SocketConnector$ConnectorEndPoint:void run()",
            "org.eclipse.jetty.server.LocalConnector$Request:void run()",
            "org.eclipse.jetty.io.nio.SelectChannelEndPoint:void handle()",
            "org.eclipse.jetty.client.SocketConnector$1:void run()"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketClient$HandshakeConnection:org.eclipse.jetty.io.Connection handle()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.nio.BlockingChannelConnector$BlockingChannelEndPoint:void run()",
            "org.eclipse.jetty.server.bio.SocketConnector$ConnectorEndPoint:void run()",
            "org.eclipse.jetty.server.LocalConnector$Request:void run()",
            "org.eclipse.jetty.io.nio.SelectChannelEndPoint:void handle()",
            "org.eclipse.jetty.client.SocketConnector$1:void run()"
        ]
    },
    "org.eclipse.jetty.server.HttpInput:int read()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.HttpInput:int read(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.HttpInput:int available()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.session.JDBCSessionManager:org.eclipse.jetty.server.session.JDBCSessionManager$SessionData loadSession(java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.JDBCSessionManager:org.eclipse.jetty.server.session.JDBCSessionManager$Session getSession(java.lang.String)"
        ]
    },
    "org.eclipse.jetty.server.AsyncContinuation$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ContextHandler:void handle(java.lang.Runnable)",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:void sslClose()",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int fill(org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int flush(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.io.nio.SelectorManager$SelectSet:void doSelect()",
            "org.eclipse.jetty.util.thread.QueuedThreadPool$3:void run()",
            "org.eclipse.jetty.util.thread.ExecutorThreadPool:boolean dispatch(java.lang.Runnable)"
        ]
    },
    "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:void shutdownOutput()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ConnectHandler$ProxyToServerConnection:void shutdownOutput()",
            "org.eclipse.jetty.server.handler.ConnectHandler$ClientToProxyConnection:void shutdownOutput()",
            "org.eclipse.jetty.server.HttpConnection:void handleRequest()",
            "org.eclipse.jetty.io.AbstractConnection:void idleExpired()",
            "org.eclipse.jetty.http.HttpGenerator:long flushBuffer()",
            "org.eclipse.jetty.client.SelectConnector$ProxySelectChannelEndPoint:void shutdownOutput()"
        ]
    },
    "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlets.CloseableDoSFilter:void closeConnection(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Thread)",
            "org.eclipse.jetty.server.handler.ConnectHandler$ProxyToServerConnection:void closeServer()",
            "org.eclipse.jetty.server.handler.ConnectHandler$ClientToProxyConnection:void closeClient()",
            "org.eclipse.jetty.server.BlockingHttpConnection:org.eclipse.jetty.io.Connection handle()",
            "org.eclipse.jetty.server.AsyncHttpConnection:org.eclipse.jetty.io.Connection handle()",
            "org.eclipse.jetty.io.nio.ChannelEndPoint:int fill(org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.io.nio.SelectChannelEndPoint:void handle()",
            "org.eclipse.jetty.io.nio.SelectorManager$SelectSet$2:void run()",
            "org.eclipse.jetty.io.nio.SelectorManager$SelectSet:void stop()",
            "org.eclipse.jetty.io.AbstractConnection:void idleExpired()",
            "org.eclipse.jetty.http.AbstractGenerator:void blockForOutput(long)",
            "org.eclipse.jetty.http.HttpParser:org.eclipse.jetty.io.Buffer blockForContent(long)",
            "org.eclipse.jetty.client.SelectConnector$ProxySelectChannelEndPoint:void close()",
            "org.eclipse.jetty.client.HttpConnection:void close()",
            "org.eclipse.jetty.websocket.WebSocketConnectionD10:org.eclipse.jetty.io.Connection handle()",
            "org.eclipse.jetty.websocket.WebSocketConnectionD10:void closeIn(int,java.lang.String)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD10:void closeOut(int,java.lang.String)",
            "org.eclipse.jetty.websocket.WebSocketClient$HandshakeConnection$1:void startResponse(org.eclipse.jetty.io.Buffer,int,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.websocket.WebSocketClient$HandshakeConnection$1:void startRequest(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.websocket.WebSocketClient$HandshakeConnection$1:void content(org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD06:org.eclipse.jetty.io.Connection handle()",
            "org.eclipse.jetty.websocket.WebSocketConnectionD06:void closeIn(int,java.lang.String)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD06:void closeOut(int,java.lang.String)",
            "org.eclipse.jetty.websocket.WebSocketClient$HandshakeConnection:org.eclipse.jetty.io.Connection handle()",
            "org.eclipse.jetty.websocket.WebSocketConnectionD00:org.eclipse.jetty.io.Connection handle()",
            "org.eclipse.jetty.websocket.WebSocketConnectionD00:void disconnect()"
        ]
    },
    "org.eclipse.jetty.server.handler.ConnectHandler:int read(org.eclipse.jetty.io.EndPoint,org.eclipse.jetty.io.Buffer,java.util.concurrent.ConcurrentMap)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ConnectHandler$ProxyToServerConnection:org.eclipse.jetty.io.Connection handle()",
            "org.eclipse.jetty.server.handler.ConnectHandler$ClientToProxyConnection:org.eclipse.jetty.io.Connection handle()"
        ]
    },
    "org.eclipse.jetty.http.HttpParser:long fill()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.http.HttpParser:int parseNext()",
            "org.eclipse.jetty.client.HttpConnection:org.eclipse.jetty.io.Connection handle()"
        ]
    },
    "org.eclipse.jetty.client.SelectConnector$ProxySelectChannelEndPoint:int fill(org.eclipse.jetty.io.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ConnectHandler:int read(org.eclipse.jetty.io.EndPoint,org.eclipse.jetty.io.Buffer,java.util.concurrent.ConcurrentMap)",
            "org.eclipse.jetty.http.HttpParser:long fill()",
            "org.eclipse.jetty.client.SelectConnector$ProxySelectChannelEndPoint:int fill(org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.ajp.Ajp13Parser:int fill()",
            "org.eclipse.jetty.websocket.WebSocketParserD00:int parseNext()",
            "org.eclipse.jetty.websocket.WebSocketParserD10:int parseNext()",
            "org.eclipse.jetty.websocket.WebSocketParserD06:int parseNext()",
            "org.eclipse.jetty.websocket.WebSocketConnectionD00:org.eclipse.jetty.io.Connection handle()"
        ]
    },
    "org.eclipse.jetty.ajp.Ajp13Parser:int fill()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.ajp.Ajp13Parser:int parseNext()"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketParserD00:int parseNext()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.WebSocketConnectionD06:org.eclipse.jetty.io.Connection handle()",
            "org.eclipse.jetty.websocket.WebSocketConnectionD00:org.eclipse.jetty.io.Connection handle()"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketParserD10:int parseNext()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.WebSocketConnectionD10:org.eclipse.jetty.io.Connection handle()",
            "org.eclipse.jetty.websocket.WebSocketConnectionD06:org.eclipse.jetty.io.Connection handle()",
            "org.eclipse.jetty.websocket.WebSocketConnectionD00:org.eclipse.jetty.io.Connection handle()"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketParserD06:int parseNext()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.WebSocketConnectionD06:org.eclipse.jetty.io.Connection handle()",
            "org.eclipse.jetty.websocket.WebSocketConnectionD00:org.eclipse.jetty.io.Connection handle()"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketConnectionD00:org.eclipse.jetty.io.Connection handle()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.nio.BlockingChannelConnector$BlockingChannelEndPoint:void run()",
            "org.eclipse.jetty.server.bio.SocketConnector$ConnectorEndPoint:void run()",
            "org.eclipse.jetty.server.LocalConnector$Request:void run()",
            "org.eclipse.jetty.io.nio.SelectChannelEndPoint:void handle()",
            "org.eclipse.jetty.client.SocketConnector$1:void run()"
        ]
    },
    "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int flush(org.eclipse.jetty.io.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ConnectHandler:int write(org.eclipse.jetty.io.EndPoint,org.eclipse.jetty.io.Buffer,java.util.concurrent.ConcurrentMap)",
            "org.eclipse.jetty.io.nio.ChannelEndPoint:int flush(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.http.HttpGenerator:void send1xx(int)",
            "org.eclipse.jetty.http.HttpGenerator:long flushBuffer()",
            "org.eclipse.jetty.client.SelectConnector$ProxySelectChannelEndPoint:int flush(org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.ajp.Ajp13Generator:long flushBuffer()",
            "org.eclipse.jetty.ajp.Ajp13Generator:void sendCPong()",
            "org.eclipse.jetty.websocket.WebSocketGeneratorD00:int flushBuffer()",
            "org.eclipse.jetty.websocket.WebSocketGeneratorD06:int flushBuffer()",
            "org.eclipse.jetty.websocket.WebSocketGeneratorD10:int flushBuffer()",
            "org.eclipse.jetty.websocket.WebSocketClient$HandshakeConnection:void <init>(org.eclipse.jetty.websocket.WebSocketClient,org.eclipse.jetty.io.nio.SelectChannelEndPoint,org.eclipse.jetty.websocket.WebSocketClient$WebSocketFuture)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD00:org.eclipse.jetty.io.Connection handle()",
            "org.eclipse.jetty.nested.NestedGenerator:long flushBuffer()"
        ]
    },
    "org.eclipse.jetty.http.HttpGenerator:long flushBuffer()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.BlockingHttpConnection:org.eclipse.jetty.io.Connection handle()",
            "org.eclipse.jetty.server.HttpConnection:void flushResponse()",
            "org.eclipse.jetty.server.AsyncHttpConnection:org.eclipse.jetty.io.Connection handle()",
            "org.eclipse.jetty.http.HttpGenerator:void addContent(org.eclipse.jetty.io.Buffer,boolean)",
            "org.eclipse.jetty.http.HttpGenerator:boolean addContent(byte)",
            "org.eclipse.jetty.http.HttpGenerator:int prepareUncheckedAddContent()",
            "org.eclipse.jetty.http.HttpGenerator:void complete()",
            "org.eclipse.jetty.http.AbstractGenerator:void flush(long)",
            "org.eclipse.jetty.http.AbstractGenerator:void blockForOutput(long)",
            "org.eclipse.jetty.client.HttpConnection:org.eclipse.jetty.io.Connection handle()",
            "org.eclipse.jetty.nested.NestedConnection:void service()"
        ]
    },
    "org.eclipse.jetty.client.SelectConnector$ProxySelectChannelEndPoint:int flush(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int flush(org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.http.HttpGenerator:long flushBuffer()",
            "org.eclipse.jetty.client.SelectConnector$ProxySelectChannelEndPoint:int flush(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.ajp.Ajp13Generator:long flushBuffer()"
        ]
    },
    "org.eclipse.jetty.ajp.Ajp13Generator:long flushBuffer()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.BlockingHttpConnection:org.eclipse.jetty.io.Connection handle()",
            "org.eclipse.jetty.server.HttpConnection:void flushResponse()",
            "org.eclipse.jetty.server.AsyncHttpConnection:org.eclipse.jetty.io.Connection handle()",
            "org.eclipse.jetty.http.AbstractGenerator:void flush(long)",
            "org.eclipse.jetty.http.AbstractGenerator:void blockForOutput(long)",
            "org.eclipse.jetty.ajp.Ajp13Generator:void addContent(org.eclipse.jetty.io.Buffer,boolean)",
            "org.eclipse.jetty.ajp.Ajp13Generator:boolean addContent(byte)",
            "org.eclipse.jetty.ajp.Ajp13Generator:int prepareUncheckedAddContent()",
            "org.eclipse.jetty.ajp.Ajp13Generator:void complete()",
            "org.eclipse.jetty.ajp.Ajp13Generator:void getBodyChunk()",
            "org.eclipse.jetty.nested.NestedConnection:void service()"
        ]
    },
    "org.eclipse.jetty.io.nio.SelectorManager:void doSelect(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ConnectHandler$1:void run()",
            "org.eclipse.jetty.server.nio.SelectChannelConnector$1:void run()",
            "org.eclipse.jetty.client.SelectConnector:void run()",
            "org.eclipse.jetty.websocket.WebSocketClient$1:void run()"
        ]
    },
    "org.eclipse.jetty.server.handler.ConnectHandler:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()"
        ]
    },
    "org.eclipse.jetty.server.handler.HandlerCollection:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ContextHandlerCollection:void doStart()",
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()"
        ]
    },
    "org.eclipse.jetty.server.handler.ConnectHandler$Manager:boolean dispatch(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.nio.SelectChannelConnector:void doStart()",
            "org.eclipse.jetty.io.nio.SelectChannelEndPoint:void dispatch()",
            "org.eclipse.jetty.io.nio.SelectorManager$SelectSet:void doSelect()",
            "org.eclipse.jetty.io.nio.SelectorManager$SelectSet:void checkJvmBugs(long,long,long,int)"
        ]
    },
    "org.eclipse.jetty.server.nio.BlockingChannelConnector$BlockingChannelEndPoint:void dispatch()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.nio.BlockingChannelConnector:void accept(int)"
        ]
    },
    "org.eclipse.jetty.server.nio.SelectChannelConnector$ConnectorSelectorManager:boolean dispatch(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.nio.SelectChannelConnector:void doStart()",
            "org.eclipse.jetty.io.nio.SelectChannelEndPoint:void dispatch()",
            "org.eclipse.jetty.io.nio.SelectorManager$SelectSet:void doSelect()",
            "org.eclipse.jetty.io.nio.SelectorManager$SelectSet:void checkJvmBugs(long,long,long,int)"
        ]
    },
    "org.eclipse.jetty.server.nio.BlockingChannelConnector:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()"
        ]
    },
    "org.eclipse.jetty.server.bio.SocketConnector$ConnectorEndPoint:void dispatch()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.bio.SocketConnector:void accept(int)",
            "org.eclipse.jetty.server.ssl.SslSocketConnector$SslConnectorEndPoint:void dispatch()"
        ]
    },
    "org.eclipse.jetty.server.AbstractConnector:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.nio.SelectChannelConnector:void doStart()",
            "org.eclipse.jetty.server.nio.BlockingChannelConnector:void doStart()",
            "org.eclipse.jetty.server.bio.SocketConnector:void doStart()",
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()"
        ]
    },
    "org.eclipse.jetty.server.LocalConnector:void accept(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.AbstractConnector$Acceptor:void run()"
        ]
    },
    "org.eclipse.jetty.server.AsyncContinuation:void start(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.client.SelectConnector$Manager:boolean dispatch(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.nio.SelectChannelConnector:void doStart()",
            "org.eclipse.jetty.io.nio.SelectChannelEndPoint:void dispatch()",
            "org.eclipse.jetty.io.nio.SelectorManager$SelectSet:void doSelect()",
            "org.eclipse.jetty.io.nio.SelectorManager$SelectSet:void checkJvmBugs(long,long,long,int)"
        ]
    },
    "org.eclipse.jetty.client.SocketConnector:void startConnection(org.eclipse.jetty.client.HttpDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.client.HttpDestination:void startNewConnection()"
        ]
    },
    "org.eclipse.jetty.client.HttpClient:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()"
        ]
    },
    "org.eclipse.jetty.client.SelectConnector:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketClient$WebSocketClientSelector:boolean dispatch(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.nio.SelectChannelConnector:void doStart()",
            "org.eclipse.jetty.io.nio.SelectChannelEndPoint:void dispatch()",
            "org.eclipse.jetty.io.nio.SelectorManager$SelectSet:void doSelect()",
            "org.eclipse.jetty.io.nio.SelectorManager$SelectSet:void checkJvmBugs(long,long,long,int)"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketClient:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()"
        ]
    },
    "org.eclipse.jetty.ajp.Ajp13Parser:void parse()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.ajp.Ajp13Parser:int parseAvailable()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.BlockingHttpConnection:org.eclipse.jetty.io.Connection handle()",
            "org.eclipse.jetty.server.AsyncHttpConnection:org.eclipse.jetty.io.Connection handle()"
        ]
    },
    "org.eclipse.jetty.ajp.Ajp13Parser$Input:boolean blockForContent()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.ajp.Ajp13Parser$Input:int read()",
            "org.eclipse.jetty.ajp.Ajp13Parser$Input:int read(byte[],int,int)"
        ]
    },
    "org.eclipse.jetty.rewrite.handler.RuleContainer:java.lang.String apply(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.rewrite.handler.VirtualHostRuleContainer:java.lang.String matchAndApply(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.rewrite.handler.RuleContainer:java.lang.String matchAndApply(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.servlet.ServletHolder$SingleThreadedWrapper:void service(javax.servlet.ServletRequest,javax.servlet.ServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletHolder$SingleThreadedWrapper:void service(javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "org.eclipse.jetty.servlet.ServletHolder:void handle(org.eclipse.jetty.server.Request,javax.servlet.ServletRequest,javax.servlet.ServletResponse)"
        ]
    },
    "org.eclipse.jetty.servlet.ServletHolder:void handle(org.eclipse.jetty.server.Request,javax.servlet.ServletRequest,javax.servlet.ServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.servlet.Invoker:void service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.servlet.ServletHandler$CachedChain:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "org.eclipse.jetty.servlet.ServletHandler$Chain:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.handler.ResourceHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ScopedHandler:void nextHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HotSwapHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.GzipHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerList:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.DebugHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerWrapper:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.IPAccessHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.session.SessionHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.security.SecurityHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketServlet:void service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.session.JDBCSessionManager:org.eclipse.jetty.server.session.JDBCSessionManager$Session getSession(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.JDBCSessionManager:void removeSession(org.eclipse.jetty.server.session.AbstractSession,boolean)",
            "org.eclipse.jetty.server.session.JDBCSessionManager:org.eclipse.jetty.server.session.AbstractSession getSession(java.lang.String)"
        ]
    },
    "org.eclipse.jetty.server.handler.ConnectHandler$ProxyToServerConnection:void shutdownOutput()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ConnectHandler$ProxyToServerConnection:void idleExpired()",
            "org.eclipse.jetty.server.handler.ConnectHandler$ClientToProxyConnection:org.eclipse.jetty.io.Connection handle()"
        ]
    },
    "org.eclipse.jetty.server.handler.ConnectHandler$ClientToProxyConnection:void shutdownOutput()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ConnectHandler$ProxyToServerConnection:org.eclipse.jetty.io.Connection handle()",
            "org.eclipse.jetty.server.handler.ConnectHandler$ClientToProxyConnection:void idleExpired()"
        ]
    },
    "org.eclipse.jetty.io.AbstractConnection:void idleExpired()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.io.nio.SelectChannelEndPoint:void idleExpired()"
        ]
    },
    "org.eclipse.jetty.client.SelectConnector$ProxySelectChannelEndPoint:void shutdownOutput()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ConnectHandler$ProxyToServerConnection:void shutdownOutput()",
            "org.eclipse.jetty.server.handler.ConnectHandler$ClientToProxyConnection:void shutdownOutput()",
            "org.eclipse.jetty.server.HttpConnection:void handleRequest()",
            "org.eclipse.jetty.io.AbstractConnection:void idleExpired()",
            "org.eclipse.jetty.http.HttpGenerator:long flushBuffer()",
            "org.eclipse.jetty.client.SelectConnector$ProxySelectChannelEndPoint:void shutdownOutput()"
        ]
    },
    "org.eclipse.jetty.servlets.CloseableDoSFilter:void closeConnection(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Thread)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlets.DoSFilter$4:void expired()"
        ]
    },
    "org.eclipse.jetty.server.handler.ConnectHandler$ProxyToServerConnection:void closeServer()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ConnectHandler$ProxyToServerConnection:void close()",
            "org.eclipse.jetty.server.handler.ConnectHandler$ClientToProxyConnection:void closeServer()"
        ]
    },
    "org.eclipse.jetty.server.handler.ConnectHandler$ClientToProxyConnection:void closeClient()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ConnectHandler$ProxyToServerConnection:void closeClient()",
            "org.eclipse.jetty.server.handler.ConnectHandler$ClientToProxyConnection:void close()"
        ]
    },
    "org.eclipse.jetty.io.nio.ChannelEndPoint:int fill(org.eclipse.jetty.io.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ConnectHandler:int read(org.eclipse.jetty.io.EndPoint,org.eclipse.jetty.io.Buffer,java.util.concurrent.ConcurrentMap)",
            "org.eclipse.jetty.server.nio.BlockingChannelConnector$BlockingChannelEndPoint:int fill(org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.io.nio.NetworkTrafficSelectChannelEndPoint:int fill(org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:boolean unwrap(java.nio.ByteBuffer)",
            "org.eclipse.jetty.http.HttpParser:long fill()",
            "org.eclipse.jetty.client.SelectConnector$ProxySelectChannelEndPoint:int fill(org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.ajp.Ajp13Parser:int fill()",
            "org.eclipse.jetty.websocket.WebSocketParserD00:int parseNext()",
            "org.eclipse.jetty.websocket.WebSocketParserD10:int parseNext()",
            "org.eclipse.jetty.websocket.WebSocketParserD06:int parseNext()",
            "org.eclipse.jetty.websocket.WebSocketConnectionD00:org.eclipse.jetty.io.Connection handle()"
        ]
    },
    "org.eclipse.jetty.io.nio.SelectorManager$SelectSet$2:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ContextHandler:void handle(java.lang.Runnable)",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:void sslClose()",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int fill(org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int flush(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.io.nio.SelectorManager$SelectSet:void doSelect()",
            "org.eclipse.jetty.util.thread.QueuedThreadPool$3:void run()",
            "org.eclipse.jetty.util.thread.ExecutorThreadPool:boolean dispatch(java.lang.Runnable)"
        ]
    },
    "org.eclipse.jetty.io.nio.SelectorManager$SelectSet:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.io.nio.SelectorManager:void doStop()"
        ]
    },
    "org.eclipse.jetty.http.AbstractGenerator:void blockForOutput(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.HttpOutput:void write(int)",
            "org.eclipse.jetty.server.HttpOutput:void write(org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.http.AbstractGenerator:void flush(long)"
        ]
    },
    "org.eclipse.jetty.client.SelectConnector$ProxySelectChannelEndPoint:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlets.CloseableDoSFilter:void closeConnection(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Thread)",
            "org.eclipse.jetty.server.handler.ConnectHandler$ProxyToServerConnection:void closeServer()",
            "org.eclipse.jetty.server.handler.ConnectHandler$ClientToProxyConnection:void closeClient()",
            "org.eclipse.jetty.server.BlockingHttpConnection:org.eclipse.jetty.io.Connection handle()",
            "org.eclipse.jetty.server.AsyncHttpConnection:org.eclipse.jetty.io.Connection handle()",
            "org.eclipse.jetty.io.nio.ChannelEndPoint:int fill(org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.io.nio.SelectChannelEndPoint:void handle()",
            "org.eclipse.jetty.io.nio.SelectorManager$SelectSet$2:void run()",
            "org.eclipse.jetty.io.nio.SelectorManager$SelectSet:void stop()",
            "org.eclipse.jetty.io.AbstractConnection:void idleExpired()",
            "org.eclipse.jetty.http.AbstractGenerator:void blockForOutput(long)",
            "org.eclipse.jetty.http.HttpParser:org.eclipse.jetty.io.Buffer blockForContent(long)",
            "org.eclipse.jetty.client.SelectConnector$ProxySelectChannelEndPoint:void close()",
            "org.eclipse.jetty.client.HttpConnection:void close()",
            "org.eclipse.jetty.websocket.WebSocketConnectionD10:org.eclipse.jetty.io.Connection handle()",
            "org.eclipse.jetty.websocket.WebSocketConnectionD10:void closeIn(int,java.lang.String)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD10:void closeOut(int,java.lang.String)",
            "org.eclipse.jetty.websocket.WebSocketClient$HandshakeConnection$1:void startResponse(org.eclipse.jetty.io.Buffer,int,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.websocket.WebSocketClient$HandshakeConnection$1:void startRequest(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.websocket.WebSocketClient$HandshakeConnection$1:void content(org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD06:org.eclipse.jetty.io.Connection handle()",
            "org.eclipse.jetty.websocket.WebSocketConnectionD06:void closeIn(int,java.lang.String)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD06:void closeOut(int,java.lang.String)",
            "org.eclipse.jetty.websocket.WebSocketClient$HandshakeConnection:org.eclipse.jetty.io.Connection handle()",
            "org.eclipse.jetty.websocket.WebSocketConnectionD00:org.eclipse.jetty.io.Connection handle()",
            "org.eclipse.jetty.websocket.WebSocketConnectionD00:void disconnect()"
        ]
    },
    "org.eclipse.jetty.client.HttpConnection:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.client.HttpDestination:org.eclipse.jetty.client.HttpConnection getIdleConnection()",
            "org.eclipse.jetty.client.HttpDestination:void returnConnection(org.eclipse.jetty.client.HttpConnection,boolean)",
            "org.eclipse.jetty.client.HttpDestination:void returnIdleConnection(org.eclipse.jetty.client.HttpConnection)",
            "org.eclipse.jetty.client.HttpDestination:void close()",
            "org.eclipse.jetty.client.HttpConnection:org.eclipse.jetty.io.Connection handle()",
            "org.eclipse.jetty.client.HttpExchange:void abort()"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketConnectionD10:org.eclipse.jetty.io.Connection handle()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.nio.BlockingChannelConnector$BlockingChannelEndPoint:void run()",
            "org.eclipse.jetty.server.bio.SocketConnector$ConnectorEndPoint:void run()",
            "org.eclipse.jetty.server.LocalConnector$Request:void run()",
            "org.eclipse.jetty.io.nio.SelectChannelEndPoint:void handle()",
            "org.eclipse.jetty.client.SocketConnector$1:void run()"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketConnectionD10:void closeIn(int,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.WebSocketConnectionD10:org.eclipse.jetty.io.Connection handle()",
            "org.eclipse.jetty.websocket.WebSocketConnectionD10$WSFrameHandler:void onFrame(byte,byte,org.eclipse.jetty.io.Buffer)"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketConnectionD10:void closeOut(int,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.WebSocketConnectionD10:void idleExpired()",
            "org.eclipse.jetty.websocket.WebSocketConnectionD10:void closeIn(int,java.lang.String)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD10$WSFrameConnection:void close(int,java.lang.String)"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketClient$HandshakeConnection$1:void startResponse(org.eclipse.jetty.io.Buffer,int,org.eclipse.jetty.io.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.http.HttpParser:int parseNext()"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketClient$HandshakeConnection$1:void startRequest(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.http.HttpParser:int parseNext()"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketClient$HandshakeConnection$1:void content(org.eclipse.jetty.io.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.http.HttpParser:int parseNext()"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketConnectionD06:org.eclipse.jetty.io.Connection handle()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.nio.BlockingChannelConnector$BlockingChannelEndPoint:void run()",
            "org.eclipse.jetty.server.bio.SocketConnector$ConnectorEndPoint:void run()",
            "org.eclipse.jetty.server.LocalConnector$Request:void run()",
            "org.eclipse.jetty.io.nio.SelectChannelEndPoint:void handle()",
            "org.eclipse.jetty.client.SocketConnector$1:void run()"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketConnectionD06:void closeIn(int,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.WebSocketConnectionD06$FrameHandlerD06:void onFrame(byte,byte,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD06:org.eclipse.jetty.io.Connection handle()"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketConnectionD06:void closeOut(int,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.WebSocketConnectionD06:void idleExpired()",
            "org.eclipse.jetty.websocket.WebSocketConnectionD06:void closeIn(int,java.lang.String)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD06$FrameConnectionD06:void close(int,java.lang.String)"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketConnectionD00:void disconnect()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.TestClient:void disconnect()"
        ]
    },
    "org.eclipse.jetty.server.handler.ConnectHandler$ProxyToServerConnection:org.eclipse.jetty.io.Connection handle()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.nio.BlockingChannelConnector$BlockingChannelEndPoint:void run()",
            "org.eclipse.jetty.server.bio.SocketConnector$ConnectorEndPoint:void run()",
            "org.eclipse.jetty.server.LocalConnector$Request:void run()",
            "org.eclipse.jetty.io.nio.SelectChannelEndPoint:void handle()",
            "org.eclipse.jetty.client.SocketConnector$1:void run()"
        ]
    },
    "org.eclipse.jetty.server.handler.ConnectHandler$ClientToProxyConnection:org.eclipse.jetty.io.Connection handle()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.nio.BlockingChannelConnector$BlockingChannelEndPoint:void run()",
            "org.eclipse.jetty.server.bio.SocketConnector$ConnectorEndPoint:void run()",
            "org.eclipse.jetty.server.LocalConnector$Request:void run()",
            "org.eclipse.jetty.io.nio.SelectChannelEndPoint:void handle()",
            "org.eclipse.jetty.client.SocketConnector$1:void run()"
        ]
    },
    "org.eclipse.jetty.server.handler.ConnectHandler:int write(org.eclipse.jetty.io.EndPoint,org.eclipse.jetty.io.Buffer,java.util.concurrent.ConcurrentMap)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ConnectHandler$ProxyToServerConnection:org.eclipse.jetty.io.Connection handle()",
            "org.eclipse.jetty.server.handler.ConnectHandler$ProxyToServerConnection:void writeData()",
            "org.eclipse.jetty.server.handler.ConnectHandler$ClientToProxyConnection:org.eclipse.jetty.io.Connection handle()"
        ]
    },
    "org.eclipse.jetty.io.nio.ChannelEndPoint:int flush(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.nio.BlockingChannelConnector$BlockingChannelEndPoint:int flush(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.io.nio.SelectChannelEndPoint:int flush(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.http.HttpGenerator:long flushBuffer()",
            "org.eclipse.jetty.ajp.Ajp13Generator:long flushBuffer()"
        ]
    },
    "org.eclipse.jetty.http.HttpGenerator:void send1xx(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.Response:void sendProcessing()",
            "org.eclipse.jetty.server.HttpConnection:javax.servlet.ServletInputStream getInputStream()"
        ]
    },
    "org.eclipse.jetty.client.SelectConnector$ProxySelectChannelEndPoint:int flush(org.eclipse.jetty.io.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ConnectHandler:int write(org.eclipse.jetty.io.EndPoint,org.eclipse.jetty.io.Buffer,java.util.concurrent.ConcurrentMap)",
            "org.eclipse.jetty.io.nio.ChannelEndPoint:int flush(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.http.HttpGenerator:void send1xx(int)",
            "org.eclipse.jetty.http.HttpGenerator:long flushBuffer()",
            "org.eclipse.jetty.client.SelectConnector$ProxySelectChannelEndPoint:int flush(org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.ajp.Ajp13Generator:long flushBuffer()",
            "org.eclipse.jetty.ajp.Ajp13Generator:void sendCPong()",
            "org.eclipse.jetty.websocket.WebSocketGeneratorD00:int flushBuffer()",
            "org.eclipse.jetty.websocket.WebSocketGeneratorD06:int flushBuffer()",
            "org.eclipse.jetty.websocket.WebSocketGeneratorD10:int flushBuffer()",
            "org.eclipse.jetty.websocket.WebSocketClient$HandshakeConnection:void <init>(org.eclipse.jetty.websocket.WebSocketClient,org.eclipse.jetty.io.nio.SelectChannelEndPoint,org.eclipse.jetty.websocket.WebSocketClient$WebSocketFuture)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD00:org.eclipse.jetty.io.Connection handle()",
            "org.eclipse.jetty.nested.NestedGenerator:long flushBuffer()"
        ]
    },
    "org.eclipse.jetty.ajp.Ajp13Generator:void sendCPong()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.ajp.Ajp13Parser:int parseNext()"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketGeneratorD00:int flushBuffer()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.WebSocketGeneratorD00:void addFrame(byte,byte,byte[],int,int)",
            "org.eclipse.jetty.websocket.WebSocketGeneratorD00:int flush()",
            "org.eclipse.jetty.websocket.WebSocketGeneratorD00:int expelBuffer(long)"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketGeneratorD06:int flushBuffer()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.WebSocketGeneratorD06:void addFrame(byte,byte,byte[],int,int)",
            "org.eclipse.jetty.websocket.WebSocketGeneratorD06:int flush()",
            "org.eclipse.jetty.websocket.WebSocketGeneratorD06:int expelBuffer(long)"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketGeneratorD10:int flushBuffer()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.WebSocketConnectionD10:org.eclipse.jetty.io.Connection handle()",
            "org.eclipse.jetty.websocket.WebSocketGeneratorD10:void addFrame(byte,byte,byte[],int,int)",
            "org.eclipse.jetty.websocket.WebSocketGeneratorD10:int flush()"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketClient$HandshakeConnection:void <init>(org.eclipse.jetty.websocket.WebSocketClient,org.eclipse.jetty.io.nio.SelectChannelEndPoint,org.eclipse.jetty.websocket.WebSocketClient$WebSocketFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.WebSocketClient$WebSocketClientSelector:org.eclipse.jetty.io.Connection newConnection(java.nio.channels.SocketChannel,org.eclipse.jetty.io.nio.SelectChannelEndPoint)"
        ]
    },
    "org.eclipse.jetty.nested.NestedGenerator:long flushBuffer()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.BlockingHttpConnection:org.eclipse.jetty.io.Connection handle()",
            "org.eclipse.jetty.server.HttpConnection:void flushResponse()",
            "org.eclipse.jetty.server.AsyncHttpConnection:org.eclipse.jetty.io.Connection handle()",
            "org.eclipse.jetty.http.AbstractGenerator:void flush(long)",
            "org.eclipse.jetty.http.AbstractGenerator:void blockForOutput(long)",
            "org.eclipse.jetty.nested.NestedConnection:void service()",
            "org.eclipse.jetty.nested.NestedGenerator:void addContent(org.eclipse.jetty.io.Buffer,boolean)",
            "org.eclipse.jetty.nested.NestedGenerator:boolean addContent(byte)"
        ]
    },
    "org.eclipse.jetty.server.HttpConnection:void flushResponse()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.Response:void flushBuffer()",
            "org.eclipse.jetty.server.HttpConnection$Output:void close()"
        ]
    },
    "org.eclipse.jetty.http.HttpGenerator:void addContent(org.eclipse.jetty.io.Buffer,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.HttpConnection$Output:void sendContent(java.lang.Object)",
            "org.eclipse.jetty.server.HttpOutput:void write(org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.http.AbstractGenerator:void sendError(int,java.lang.String,java.lang.String,boolean)",
            "org.eclipse.jetty.client.HttpConnection:org.eclipse.jetty.io.Connection handle()",
            "org.eclipse.jetty.client.HttpConnection:void commitRequest()"
        ]
    },
    "org.eclipse.jetty.http.HttpGenerator:boolean addContent(byte)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.HttpOutput:void write(int)"
        ]
    },
    "org.eclipse.jetty.http.HttpGenerator:int prepareUncheckedAddContent()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.HttpConnection$Output:void sendContent(java.lang.Object)"
        ]
    },
    "org.eclipse.jetty.http.HttpGenerator:void complete()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.HttpConnection$RequestHandler:void headerComplete()",
            "org.eclipse.jetty.server.HttpConnection:void commitResponse(boolean)",
            "org.eclipse.jetty.server.HttpConnection:void completeResponse()",
            "org.eclipse.jetty.http.AbstractGenerator:void sendError(int,java.lang.String,java.lang.String,boolean)",
            "org.eclipse.jetty.client.HttpConnection:org.eclipse.jetty.io.Connection handle()"
        ]
    },
    "org.eclipse.jetty.http.AbstractGenerator:void flush(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.HttpOutput:void flush()"
        ]
    },
    "org.eclipse.jetty.ajp.Ajp13Generator:void addContent(org.eclipse.jetty.io.Buffer,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.HttpConnection$Output:void sendContent(java.lang.Object)",
            "org.eclipse.jetty.server.HttpOutput:void write(org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.http.AbstractGenerator:void sendError(int,java.lang.String,java.lang.String,boolean)"
        ]
    },
    "org.eclipse.jetty.ajp.Ajp13Generator:boolean addContent(byte)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.HttpOutput:void write(int)"
        ]
    },
    "org.eclipse.jetty.ajp.Ajp13Generator:int prepareUncheckedAddContent()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.HttpConnection$Output:void sendContent(java.lang.Object)"
        ]
    },
    "org.eclipse.jetty.ajp.Ajp13Generator:void complete()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.HttpConnection$RequestHandler:void headerComplete()",
            "org.eclipse.jetty.server.HttpConnection:void commitResponse(boolean)",
            "org.eclipse.jetty.server.HttpConnection:void completeResponse()",
            "org.eclipse.jetty.http.AbstractGenerator:void sendError(int,java.lang.String,java.lang.String,boolean)"
        ]
    },
    "org.eclipse.jetty.ajp.Ajp13Generator:void getBodyChunk()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.ajp.Ajp13Parser:int parseNext()"
        ]
    },
    "org.eclipse.jetty.server.handler.ConnectHandler$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ContextHandler:void handle(java.lang.Runnable)",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:void sslClose()",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int fill(org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int flush(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.io.nio.SelectorManager$SelectSet:void doSelect()",
            "org.eclipse.jetty.util.thread.QueuedThreadPool$3:void run()",
            "org.eclipse.jetty.util.thread.ExecutorThreadPool:boolean dispatch(java.lang.Runnable)"
        ]
    },
    "org.eclipse.jetty.server.nio.SelectChannelConnector$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ContextHandler:void handle(java.lang.Runnable)",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:void sslClose()",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int fill(org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int flush(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.io.nio.SelectorManager$SelectSet:void doSelect()",
            "org.eclipse.jetty.util.thread.QueuedThreadPool$3:void run()",
            "org.eclipse.jetty.util.thread.ExecutorThreadPool:boolean dispatch(java.lang.Runnable)"
        ]
    },
    "org.eclipse.jetty.client.SelectConnector:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ConnectHandler:void doStart()",
            "org.eclipse.jetty.server.handler.ContextHandler:void handle(java.lang.Runnable)",
            "org.eclipse.jetty.server.AbstractConnector:void doStart()",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:void sslClose()",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int fill(org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int flush(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.io.nio.SelectorManager$SelectSet:void doSelect()",
            "org.eclipse.jetty.client.HttpClient:void doStart()",
            "org.eclipse.jetty.xml.XmlConfiguration$1:java.lang.Object run()",
            "org.eclipse.jetty.security.SecurityHandler:void doStart()",
            "org.eclipse.jetty.util.component.AggregateLifeCycle:void doStart()",
            "org.eclipse.jetty.util.component.AggregateLifeCycle:boolean addBean(java.lang.Object)",
            "org.eclipse.jetty.util.thread.QueuedThreadPool$3:void run()",
            "org.eclipse.jetty.util.thread.ExecutorThreadPool:boolean dispatch(java.lang.Runnable)"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketClient$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ContextHandler:void handle(java.lang.Runnable)",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:void sslClose()",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int fill(org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int flush(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.io.nio.SelectorManager$SelectSet:void doSelect()",
            "org.eclipse.jetty.util.thread.QueuedThreadPool$3:void run()",
            "org.eclipse.jetty.util.thread.ExecutorThreadPool:boolean dispatch(java.lang.Runnable)"
        ]
    },
    "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletHandler:void initialize()",
            "org.eclipse.jetty.servlet.Invoker:void service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.servlets.ProxyServlet:org.eclipse.jetty.client.HttpClient createHttpClient(javax.servlet.ServletConfig)",
            "org.eclipse.jetty.server.handler.HotSwapHandler:void setHandler(org.eclipse.jetty.server.Handler)",
            "org.eclipse.jetty.server.handler.HotSwapHandler:void doStart()",
            "org.eclipse.jetty.server.handler.HandlerCollection$1:void run()",
            "org.eclipse.jetty.server.handler.RequestLogHandler:void setRequestLog(org.eclipse.jetty.server.RequestLog)",
            "org.eclipse.jetty.server.handler.RequestLogHandler:void doStart()",
            "org.eclipse.jetty.server.handler.ConnectHandler:void doStart()",
            "org.eclipse.jetty.server.handler.HandlerCollection:void doStart()",
            "org.eclipse.jetty.server.handler.HandlerWrapper:void doStart()",
            "org.eclipse.jetty.server.handler.ContextHandler:void startContext()",
            "org.eclipse.jetty.server.session.AbstractSessionManager:void doStart()",
            "org.eclipse.jetty.server.session.SessionHandler:void doStart()",
            "org.eclipse.jetty.server.nio.SelectChannelConnector:void doStart()",
            "org.eclipse.jetty.server.ssl.SslSelectChannelConnector:void doStart()",
            "org.eclipse.jetty.server.ssl.SslSocketConnector:void doStart()",
            "org.eclipse.jetty.server.AbstractConnector:void doStart()",
            "org.eclipse.jetty.server.Server:void doStart()",
            "org.eclipse.jetty.client.HttpClient:void doStart()",
            "org.eclipse.jetty.client.SelectConnector:void doStart()",
            "org.eclipse.jetty.xml.XmlConfiguration$1:java.lang.Object run()",
            "org.eclipse.jetty.deploy.bindings.StandardStarter:void processBinding(org.eclipse.jetty.deploy.graph.Node,org.eclipse.jetty.deploy.App)",
            "org.eclipse.jetty.deploy.providers.ScanningAppProvider:void doStart()",
            "org.eclipse.jetty.deploy.DeploymentManager:void startAppProvider(org.eclipse.jetty.deploy.AppProvider)",
            "org.eclipse.jetty.deploy.WebAppDeployer:void scan()",
            "org.eclipse.jetty.deploy.ContextDeployer:void deploy(java.lang.String)",
            "org.eclipse.jetty.deploy.ContextDeployer:void doStart()",
            "org.eclipse.jetty.jmx.MBeanContainer:void <init>(javax.management.MBeanServer)",
            "org.eclipse.jetty.websocket.TestClient:void main(java.lang.String[])",
            "org.eclipse.jetty.websocket.TestServer:void main(java.lang.String[])",
            "org.eclipse.jetty.security.HashLoginService:void doStart()",
            "org.eclipse.jetty.security.SecurityHandler:void doStart()",
            "org.eclipse.jetty.security.PropertyUserStore:void doStart()",
            "org.eclipse.jetty.util.component.AggregateLifeCycle:void doStart()",
            "org.eclipse.jetty.util.component.AggregateLifeCycle:boolean addBean(java.lang.Object)",
            "org.eclipse.jetty.util.IO$Singleton:void <clinit>()"
        ]
    },
    "org.eclipse.jetty.server.handler.ContextHandlerCollection:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()"
        ]
    },
    "org.eclipse.jetty.server.nio.SelectChannelConnector:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.ssl.SslSelectChannelConnector:void doStart()",
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()"
        ]
    },
    "org.eclipse.jetty.io.nio.SelectChannelEndPoint:void dispatch()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.AsyncContinuation:void scheduleDispatch()",
            "org.eclipse.jetty.io.nio.SelectChannelEndPoint:void schedule()"
        ]
    },
    "org.eclipse.jetty.io.nio.SelectorManager$SelectSet:void checkJvmBugs(long,long,long,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.io.nio.SelectorManager$SelectSet:void doSelect()"
        ]
    },
    "org.eclipse.jetty.server.nio.BlockingChannelConnector:void accept(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.AbstractConnector$Acceptor:void run()"
        ]
    },
    "org.eclipse.jetty.server.bio.SocketConnector:void accept(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.AbstractConnector$Acceptor:void run()"
        ]
    },
    "org.eclipse.jetty.server.ssl.SslSocketConnector$SslConnectorEndPoint:void dispatch()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.bio.SocketConnector:void accept(int)",
            "org.eclipse.jetty.server.ssl.SslSocketConnector:void accept(int)"
        ]
    },
    "org.eclipse.jetty.server.bio.SocketConnector:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.ssl.SslSocketConnector:void doStart()",
            "org.eclipse.jetty.ajp.Ajp13SocketConnector:void doStart()",
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()"
        ]
    },
    "org.eclipse.jetty.server.AbstractConnector$Acceptor:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ContextHandler:void handle(java.lang.Runnable)",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:void sslClose()",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int fill(org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int flush(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.io.nio.SelectorManager$SelectSet:void doSelect()",
            "org.eclipse.jetty.util.thread.QueuedThreadPool$3:void run()",
            "org.eclipse.jetty.util.thread.ExecutorThreadPool:boolean dispatch(java.lang.Runnable)"
        ]
    },
    "org.eclipse.jetty.client.HttpDestination:void startNewConnection()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.client.HttpDestination:org.eclipse.jetty.client.HttpConnection getConnection(long)",
            "org.eclipse.jetty.client.HttpDestination:void onConnectionFailed(java.lang.Throwable)",
            "org.eclipse.jetty.client.HttpDestination:void returnConnection(org.eclipse.jetty.client.HttpConnection,boolean)",
            "org.eclipse.jetty.client.HttpDestination:void returnIdleConnection(org.eclipse.jetty.client.HttpConnection)",
            "org.eclipse.jetty.client.HttpDestination:void doSend(org.eclipse.jetty.client.HttpExchange)"
        ]
    },
    "org.eclipse.jetty.ajp.Ajp13Parser$Input:int read()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.ajp.Ajp13Parser$Input:int read(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.rewrite.handler.VirtualHostRuleContainer:java.lang.String matchAndApply(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.rewrite.handler.RuleContainer:java.lang.String apply(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.rewrite.handler.RewriteHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.rewrite.handler.RuleContainer:java.lang.String matchAndApply(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.rewrite.handler.RuleContainer:java.lang.String apply(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.rewrite.handler.RewriteHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.session.JDBCSessionManager:void removeSession(org.eclipse.jetty.server.session.AbstractSession,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.AbstractSession:void timeout()",
            "org.eclipse.jetty.server.session.AbstractSession:void invalidate()",
            "org.eclipse.jetty.server.session.AbstractSessionManager:void removeSession(javax.servlet.http.HttpSession,boolean)"
        ]
    },
    "org.eclipse.jetty.server.session.JDBCSessionManager:org.eclipse.jetty.server.session.AbstractSession getSession(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.AbstractSessionManager:javax.servlet.http.HttpSession getHttpSession(java.lang.String)"
        ]
    },
    "org.eclipse.jetty.server.handler.ConnectHandler$ProxyToServerConnection:void idleExpired()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.io.nio.SelectChannelEndPoint:void idleExpired()"
        ]
    },
    "org.eclipse.jetty.server.handler.ConnectHandler$ClientToProxyConnection:void idleExpired()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.io.nio.SelectChannelEndPoint:void idleExpired()"
        ]
    },
    "org.eclipse.jetty.io.nio.SelectChannelEndPoint:void idleExpired()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.io.nio.SelectChannelEndPoint:void checkIdleTimestamp(long)"
        ]
    },
    "org.eclipse.jetty.servlets.DoSFilter$4:void expired()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.thread.Timeout:void tick()"
        ]
    },
    "org.eclipse.jetty.server.handler.ConnectHandler$ProxyToServerConnection:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ConnectHandler$ProxyToServerConnection:org.eclipse.jetty.io.Connection handle()",
            "org.eclipse.jetty.server.handler.ConnectHandler$ProxyToServerConnection:void idleExpired()"
        ]
    },
    "org.eclipse.jetty.server.handler.ConnectHandler$ClientToProxyConnection:void closeServer()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ConnectHandler$ClientToProxyConnection:org.eclipse.jetty.io.Connection handle()",
            "org.eclipse.jetty.server.handler.ConnectHandler$ClientToProxyConnection:void close()"
        ]
    },
    "org.eclipse.jetty.server.handler.ConnectHandler$ProxyToServerConnection:void closeClient()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ConnectHandler$ProxyToServerConnection:org.eclipse.jetty.io.Connection handle()",
            "org.eclipse.jetty.server.handler.ConnectHandler$ProxyToServerConnection:void close()"
        ]
    },
    "org.eclipse.jetty.server.handler.ConnectHandler$ClientToProxyConnection:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ConnectHandler$ClientToProxyConnection:org.eclipse.jetty.io.Connection handle()",
            "org.eclipse.jetty.server.handler.ConnectHandler$ClientToProxyConnection:void idleExpired()"
        ]
    },
    "org.eclipse.jetty.server.nio.BlockingChannelConnector$BlockingChannelEndPoint:int fill(org.eclipse.jetty.io.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ConnectHandler:int read(org.eclipse.jetty.io.EndPoint,org.eclipse.jetty.io.Buffer,java.util.concurrent.ConcurrentMap)",
            "org.eclipse.jetty.http.HttpParser:long fill()",
            "org.eclipse.jetty.ajp.Ajp13Parser:int fill()",
            "org.eclipse.jetty.websocket.WebSocketParserD00:int parseNext()",
            "org.eclipse.jetty.websocket.WebSocketParserD10:int parseNext()",
            "org.eclipse.jetty.websocket.WebSocketParserD06:int parseNext()",
            "org.eclipse.jetty.websocket.WebSocketConnectionD00:org.eclipse.jetty.io.Connection handle()"
        ]
    },
    "org.eclipse.jetty.io.nio.NetworkTrafficSelectChannelEndPoint:int fill(org.eclipse.jetty.io.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ConnectHandler:int read(org.eclipse.jetty.io.EndPoint,org.eclipse.jetty.io.Buffer,java.util.concurrent.ConcurrentMap)",
            "org.eclipse.jetty.http.HttpParser:long fill()",
            "org.eclipse.jetty.client.SelectConnector$ProxySelectChannelEndPoint:int fill(org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.ajp.Ajp13Parser:int fill()",
            "org.eclipse.jetty.websocket.WebSocketParserD00:int parseNext()",
            "org.eclipse.jetty.websocket.WebSocketParserD10:int parseNext()",
            "org.eclipse.jetty.websocket.WebSocketParserD06:int parseNext()",
            "org.eclipse.jetty.websocket.WebSocketConnectionD00:org.eclipse.jetty.io.Connection handle()"
        ]
    },
    "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:boolean unwrap(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:void sslClose()",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int fill(org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int flush(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)"
        ]
    },
    "org.eclipse.jetty.io.nio.SelectorManager:void doStop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void stop()"
        ]
    },
    "org.eclipse.jetty.server.HttpOutput:void write(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.HttpOutput:void write(org.eclipse.jetty.io.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.HttpOutput:void write(byte[],int,int)",
            "org.eclipse.jetty.server.HttpOutput:void write(byte[])"
        ]
    },
    "org.eclipse.jetty.client.HttpDestination:org.eclipse.jetty.client.HttpConnection getIdleConnection()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.client.HttpDestination:org.eclipse.jetty.client.HttpConnection getConnection(long)",
            "org.eclipse.jetty.client.HttpDestination:void doSend(org.eclipse.jetty.client.HttpExchange)"
        ]
    },
    "org.eclipse.jetty.client.HttpDestination:void returnConnection(org.eclipse.jetty.client.HttpConnection,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.client.HttpConnection:org.eclipse.jetty.io.Connection handle()",
            "org.eclipse.jetty.client.HttpConnection:void exchangeExpired(org.eclipse.jetty.client.HttpExchange)"
        ]
    },
    "org.eclipse.jetty.client.HttpDestination:void returnIdleConnection(org.eclipse.jetty.client.HttpConnection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.client.HttpDestination:void send(org.eclipse.jetty.client.HttpConnection,org.eclipse.jetty.client.HttpExchange)",
            "org.eclipse.jetty.client.HttpConnection$ConnectionIdleTask:void expired()"
        ]
    },
    "org.eclipse.jetty.client.HttpDestination:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.client.HttpClient:void doStop()"
        ]
    },
    "org.eclipse.jetty.client.HttpExchange:void abort()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.client.HttpExchange:void cancel()",
            "org.eclipse.jetty.client.HttpExchange:void associate(org.eclipse.jetty.client.HttpConnection)"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketConnectionD10$WSFrameHandler:void onFrame(byte,byte,org.eclipse.jetty.io.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.WebSocketParserD00:int parseNext()",
            "org.eclipse.jetty.websocket.WebSocketParserD10:int parseNext()",
            "org.eclipse.jetty.websocket.AbstractExtension:void onFrame(byte,byte,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.websocket.WebSocketParserD06:int parseNext()"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketConnectionD10:void idleExpired()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.io.nio.SelectChannelEndPoint:void idleExpired()"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketConnectionD10$WSFrameConnection:void close(int,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.WebSocketConnectionD10$WSFrameHandler:boolean checkBinaryMessageSize(int,int)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD10$WSFrameHandler:void textMessageTooLarge()",
            "org.eclipse.jetty.websocket.WebSocketConnectionD10$WSFrameHandler:void close(int,java.lang.String)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD10$WSFrameConnection:void disconnect()",
            "org.eclipse.jetty.websocket.DeflateFrameExtension:void onFrame(byte,byte,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD06$FrameHandlerD06:void onFrame(byte,byte,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD06$FrameHandlerD06:void close(int,java.lang.String)"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketConnectionD06$FrameHandlerD06:void onFrame(byte,byte,org.eclipse.jetty.io.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.WebSocketParserD00:int parseNext()",
            "org.eclipse.jetty.websocket.WebSocketParserD10:int parseNext()",
            "org.eclipse.jetty.websocket.AbstractExtension:void onFrame(byte,byte,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.websocket.WebSocketParserD06:int parseNext()"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketConnectionD06:void idleExpired()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.io.nio.SelectChannelEndPoint:void idleExpired()"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketConnectionD06$FrameConnectionD06:void close(int,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.WebSocketConnectionD10$WSFrameHandler:boolean checkBinaryMessageSize(int,int)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD10$WSFrameHandler:void textMessageTooLarge()",
            "org.eclipse.jetty.websocket.WebSocketConnectionD10$WSFrameHandler:void close(int,java.lang.String)",
            "org.eclipse.jetty.websocket.DeflateFrameExtension:void onFrame(byte,byte,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD06$FrameHandlerD06:void onFrame(byte,byte,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD06$FrameHandlerD06:void close(int,java.lang.String)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD06$FrameConnectionD06:void disconnect()"
        ]
    },
    "org.eclipse.jetty.websocket.TestClient:void disconnect()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.TestClient:void main(java.lang.String[])"
        ]
    },
    "org.eclipse.jetty.server.handler.ConnectHandler$ProxyToServerConnection:void writeData()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ConnectHandler$ProxyToServerConnection:org.eclipse.jetty.io.Connection handle()",
            "org.eclipse.jetty.server.handler.ConnectHandler$ProxyToServerConnection:void shutdownOutput()"
        ]
    },
    "org.eclipse.jetty.server.nio.BlockingChannelConnector$BlockingChannelEndPoint:int flush(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.http.HttpGenerator:long flushBuffer()",
            "org.eclipse.jetty.ajp.Ajp13Generator:long flushBuffer()"
        ]
    },
    "org.eclipse.jetty.io.nio.SelectChannelEndPoint:int flush(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.http.HttpGenerator:long flushBuffer()",
            "org.eclipse.jetty.client.SelectConnector$ProxySelectChannelEndPoint:int flush(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.ajp.Ajp13Generator:long flushBuffer()"
        ]
    },
    "org.eclipse.jetty.server.Response:void sendProcessing()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.Response:void sendError(int)"
        ]
    },
    "org.eclipse.jetty.server.HttpConnection:javax.servlet.ServletInputStream getInputStream()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.Request:javax.servlet.ServletInputStream getInputStream()"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketGeneratorD00:void addFrame(byte,byte,byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.WebSocketConnectionD10:void closeOut(int,java.lang.String)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD10$WSFrameConnection:void sendMessage(java.lang.String)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD10$WSFrameConnection:void sendMessage(byte[],int,int)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD10$WSFrameConnection:void sendFrame(byte,byte,byte[],int,int)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD10$WSFrameConnection:void sendControl(byte,byte[],int,int)",
            "org.eclipse.jetty.websocket.AbstractExtension:void addFrame(byte,byte,byte[],int,int)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD06:void closeOut(int,java.lang.String)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD06$FrameConnectionD06:void sendMessage(java.lang.String)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD06$FrameConnectionD06:void sendMessage(byte[],int,int)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD06$FrameConnectionD06:void sendFrame(byte,byte,byte[],int,int)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD06$FrameConnectionD06:void sendControl(byte,byte[],int,int)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD00:void sendMessage(java.lang.String)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD00:void sendMessage(byte[],int,int)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD00:void sendFrame(byte,byte,byte[],int,int)"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketGeneratorD00:int flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.WebSocketConnectionD10:void closeOut(int,java.lang.String)",
            "org.eclipse.jetty.websocket.AbstractExtension:int flush()",
            "org.eclipse.jetty.websocket.WebSocketConnectionD06:org.eclipse.jetty.io.Connection handle()",
            "org.eclipse.jetty.websocket.WebSocketConnectionD06:void closeOut(int,java.lang.String)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD06$FrameConnectionD06:void sendMessage(java.lang.String)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD06$FrameConnectionD06:void sendMessage(byte[],int,int)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD06$FrameConnectionD06:void sendFrame(byte,byte,byte[],int,int)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD06$FrameConnectionD06:void sendControl(byte,byte[],int,int)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD00:org.eclipse.jetty.io.Connection handle()",
            "org.eclipse.jetty.websocket.WebSocketConnectionD00:void sendMessage(java.lang.String)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD00:void sendMessage(byte[],int,int)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD00:void sendFrame(byte,byte,byte[],int,int)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD00:void disconnect()"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketGeneratorD00:int expelBuffer(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.WebSocketGeneratorD00:void addFrame(byte,byte,byte[],int,int)",
            "org.eclipse.jetty.websocket.WebSocketGeneratorD00:void bufferPut(byte,long)",
            "org.eclipse.jetty.websocket.WebSocketGeneratorD00:int flush(int)"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketGeneratorD06:void addFrame(byte,byte,byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.WebSocketConnectionD10:void closeOut(int,java.lang.String)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD10$WSFrameConnection:void sendMessage(java.lang.String)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD10$WSFrameConnection:void sendMessage(byte[],int,int)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD10$WSFrameConnection:void sendFrame(byte,byte,byte[],int,int)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD10$WSFrameConnection:void sendControl(byte,byte[],int,int)",
            "org.eclipse.jetty.websocket.AbstractExtension:void addFrame(byte,byte,byte[],int,int)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD06:void closeOut(int,java.lang.String)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD06$FrameConnectionD06:void sendMessage(java.lang.String)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD06$FrameConnectionD06:void sendMessage(byte[],int,int)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD06$FrameConnectionD06:void sendFrame(byte,byte,byte[],int,int)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD06$FrameConnectionD06:void sendControl(byte,byte[],int,int)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD00:void sendMessage(java.lang.String)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD00:void sendMessage(byte[],int,int)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD00:void sendFrame(byte,byte,byte[],int,int)"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketGeneratorD06:int flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.WebSocketConnectionD10:void closeOut(int,java.lang.String)",
            "org.eclipse.jetty.websocket.AbstractExtension:int flush()",
            "org.eclipse.jetty.websocket.WebSocketConnectionD06:org.eclipse.jetty.io.Connection handle()",
            "org.eclipse.jetty.websocket.WebSocketConnectionD06:void closeOut(int,java.lang.String)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD06$FrameConnectionD06:void sendMessage(java.lang.String)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD06$FrameConnectionD06:void sendMessage(byte[],int,int)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD06$FrameConnectionD06:void sendFrame(byte,byte,byte[],int,int)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD06$FrameConnectionD06:void sendControl(byte,byte[],int,int)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD00:org.eclipse.jetty.io.Connection handle()",
            "org.eclipse.jetty.websocket.WebSocketConnectionD00:void sendMessage(java.lang.String)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD00:void sendMessage(byte[],int,int)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD00:void sendFrame(byte,byte,byte[],int,int)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD00:void disconnect()"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketGeneratorD06:int expelBuffer(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.WebSocketGeneratorD06:void addFrame(byte,byte,byte[],int,int)",
            "org.eclipse.jetty.websocket.WebSocketGeneratorD06:int flush(int)"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketGeneratorD10:void addFrame(byte,byte,byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.WebSocketConnectionD10:void closeOut(int,java.lang.String)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD10$WSFrameConnection:void sendMessage(java.lang.String)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD10$WSFrameConnection:void sendMessage(byte[],int,int)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD10$WSFrameConnection:void sendFrame(byte,byte,byte[],int,int)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD10$WSFrameConnection:void sendControl(byte,byte[],int,int)",
            "org.eclipse.jetty.websocket.AbstractExtension:void addFrame(byte,byte,byte[],int,int)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD06:void closeOut(int,java.lang.String)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD06$FrameConnectionD06:void sendMessage(java.lang.String)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD06$FrameConnectionD06:void sendMessage(byte[],int,int)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD06$FrameConnectionD06:void sendFrame(byte,byte,byte[],int,int)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD06$FrameConnectionD06:void sendControl(byte,byte[],int,int)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD00:void sendMessage(java.lang.String)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD00:void sendMessage(byte[],int,int)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD00:void sendFrame(byte,byte,byte[],int,int)"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketGeneratorD10:int flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.WebSocketConnectionD10:void closeOut(int,java.lang.String)",
            "org.eclipse.jetty.websocket.WebSocketGeneratorD10:void addFrame(byte,byte,byte[],int,int)",
            "org.eclipse.jetty.websocket.AbstractExtension:int flush()",
            "org.eclipse.jetty.websocket.WebSocketConnectionD06:org.eclipse.jetty.io.Connection handle()",
            "org.eclipse.jetty.websocket.WebSocketConnectionD06:void closeOut(int,java.lang.String)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD06$FrameConnectionD06:void sendMessage(java.lang.String)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD06$FrameConnectionD06:void sendMessage(byte[],int,int)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD06$FrameConnectionD06:void sendFrame(byte,byte,byte[],int,int)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD06$FrameConnectionD06:void sendControl(byte,byte[],int,int)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD00:org.eclipse.jetty.io.Connection handle()",
            "org.eclipse.jetty.websocket.WebSocketConnectionD00:void sendMessage(java.lang.String)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD00:void sendMessage(byte[],int,int)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD00:void sendFrame(byte,byte,byte[],int,int)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD00:void disconnect()"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketClient$WebSocketClientSelector:org.eclipse.jetty.io.Connection newConnection(java.nio.channels.SocketChannel,org.eclipse.jetty.io.nio.SelectChannelEndPoint)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.io.nio.SelectChannelEndPoint:void <init>(java.nio.channels.SocketChannel,org.eclipse.jetty.io.nio.SelectorManager$SelectSet,java.nio.channels.SelectionKey,int)",
            "org.eclipse.jetty.io.nio.SelectChannelEndPoint:void <init>(java.nio.channels.SocketChannel,org.eclipse.jetty.io.nio.SelectorManager$SelectSet,java.nio.channels.SelectionKey)"
        ]
    },
    "org.eclipse.jetty.nested.NestedGenerator:void addContent(org.eclipse.jetty.io.Buffer,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.HttpConnection$Output:void sendContent(java.lang.Object)",
            "org.eclipse.jetty.server.HttpOutput:void write(org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.http.AbstractGenerator:void sendError(int,java.lang.String,java.lang.String,boolean)"
        ]
    },
    "org.eclipse.jetty.nested.NestedGenerator:boolean addContent(byte)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.HttpOutput:void write(int)"
        ]
    },
    "org.eclipse.jetty.server.Response:void flushBuffer()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.DefaultServlet:boolean passConditionalHeaders(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.eclipse.jetty.util.resource.Resource,org.eclipse.jetty.http.HttpContent)",
            "org.eclipse.jetty.servlets.ProxyServlet:void handleConnect(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.servlets.PutFilter:void handlePut(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String,java.io.File)",
            "org.eclipse.jetty.servlets.PutFilter:void handleDelete(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String,java.io.File)",
            "org.eclipse.jetty.servlets.PutFilter:void handleMove(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String,java.io.File)",
            "org.eclipse.jetty.servlets.PutFilter:boolean passConditionalHeaders(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.io.File)",
            "org.eclipse.jetty.websocket.WebSocketFactory:void upgrade(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.eclipse.jetty.websocket.WebSocket,java.lang.String)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD00:void handshake(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String)"
        ]
    },
    "org.eclipse.jetty.server.HttpConnection$Output:void close()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.HttpConnection$Output:void sendContent(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.http.AbstractGenerator:void sendError(int,java.lang.String,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.BlockingHttpConnection:org.eclipse.jetty.io.Connection handle()",
            "org.eclipse.jetty.server.HttpConnection:void handleRequest()",
            "org.eclipse.jetty.server.AsyncHttpConnection:org.eclipse.jetty.io.Connection handle()"
        ]
    },
    "org.eclipse.jetty.client.HttpConnection:void commitRequest()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.client.HttpConnection:org.eclipse.jetty.io.Connection handle()"
        ]
    },
    "org.eclipse.jetty.server.HttpConnection:void commitResponse(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.HttpConnection:void flushResponse()",
            "org.eclipse.jetty.server.HttpConnection$Output:void close()",
            "org.eclipse.jetty.server.HttpConnection$Output:void flush()",
            "org.eclipse.jetty.server.HttpConnection$Output:void sendContent(java.lang.Object)"
        ]
    },
    "org.eclipse.jetty.server.HttpConnection:void completeResponse()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.Response:void complete()",
            "org.eclipse.jetty.nested.NestedConnection:void service()"
        ]
    },
    "org.eclipse.jetty.server.HttpOutput:void flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.HttpConnection$Output:void flush()"
        ]
    },
    "org.eclipse.jetty.xml.XmlConfiguration$1:java.lang.Object run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.xml.XmlConfiguration:void main(java.lang.String[])"
        ]
    },
    "org.eclipse.jetty.security.SecurityHandler:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.security.ConstraintSecurityHandler:void doStart()"
        ]
    },
    "org.eclipse.jetty.util.component.AggregateLifeCycle:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.AbstractHandler:void doStart()",
            "org.eclipse.jetty.deploy.DeploymentManager:void doStart()",
            "org.eclipse.jetty.websocket.WebSocketClient:void doStart()",
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()"
        ]
    },
    "org.eclipse.jetty.util.component.AggregateLifeCycle:boolean addBean(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.Server:boolean addBean(java.lang.Object)",
            "org.eclipse.jetty.deploy.DeploymentManager:void setAppProviders(java.util.Collection)",
            "org.eclipse.jetty.deploy.DeploymentManager:void addAppProvider(org.eclipse.jetty.deploy.AppProvider)",
            "org.eclipse.jetty.websocket.WebSocketClient:void <init>(org.eclipse.jetty.util.thread.ThreadPool)",
            "org.eclipse.jetty.websocket.WebSocketClient:void <init>(org.eclipse.jetty.websocket.WebSocketClient)"
        ]
    },
    "org.eclipse.jetty.servlet.ServletHandler:void initialize()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletHandler:void doStart()",
            "org.eclipse.jetty.servlet.ServletHandler:void updateMappings()",
            "org.eclipse.jetty.servlet.ServletContextHandler:void startContext()"
        ]
    },
    "org.eclipse.jetty.servlets.ProxyServlet:org.eclipse.jetty.client.HttpClient createHttpClient(javax.servlet.ServletConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlets.ProxyServlet:void init(javax.servlet.ServletConfig)"
        ]
    },
    "org.eclipse.jetty.server.handler.HotSwapHandler:void setHandler(org.eclipse.jetty.server.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.HotSwapHandler:void destroy()"
        ]
    },
    "org.eclipse.jetty.server.handler.HotSwapHandler:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()"
        ]
    },
    "org.eclipse.jetty.server.handler.HandlerCollection$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ContextHandler:void handle(java.lang.Runnable)",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:void sslClose()",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int fill(org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int flush(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.io.nio.SelectorManager$SelectSet:void doSelect()",
            "org.eclipse.jetty.util.thread.QueuedThreadPool$3:void run()",
            "org.eclipse.jetty.util.thread.ExecutorThreadPool:boolean dispatch(java.lang.Runnable)"
        ]
    },
    "org.eclipse.jetty.server.handler.RequestLogHandler:void setRequestLog(org.eclipse.jetty.server.RequestLog)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.handler.RequestLogHandler:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()"
        ]
    },
    "org.eclipse.jetty.server.handler.HandlerWrapper:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ScopedHandler:void doStart()",
            "org.eclipse.jetty.server.handler.StatisticsHandler:void doStart()",
            "org.eclipse.jetty.server.handler.RequestLogHandler:void doStart()",
            "org.eclipse.jetty.server.handler.ConnectHandler:void doStart()",
            "org.eclipse.jetty.server.handler.DebugHandler:void doStart()",
            "org.eclipse.jetty.server.handler.IPAccessHandler:void doStart()",
            "org.eclipse.jetty.server.Server:void doStart()",
            "org.eclipse.jetty.websocket.WebSocketHandler:void doStart()",
            "org.eclipse.jetty.security.SecurityHandler:void doStart()",
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()"
        ]
    },
    "org.eclipse.jetty.server.handler.ContextHandler:void startContext()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletContextHandler:void startContext()",
            "org.eclipse.jetty.server.handler.ContextHandler:void doStart()"
        ]
    },
    "org.eclipse.jetty.server.session.AbstractSessionManager:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.JDBCSessionManager:void doStart()",
            "org.eclipse.jetty.server.session.HashSessionManager:void doStart()"
        ]
    },
    "org.eclipse.jetty.server.session.SessionHandler:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()"
        ]
    },
    "org.eclipse.jetty.server.ssl.SslSelectChannelConnector:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()"
        ]
    },
    "org.eclipse.jetty.server.ssl.SslSocketConnector:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()"
        ]
    },
    "org.eclipse.jetty.server.Server:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()"
        ]
    },
    "org.eclipse.jetty.deploy.bindings.StandardStarter:void processBinding(org.eclipse.jetty.deploy.graph.Node,org.eclipse.jetty.deploy.App)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.deploy.bindings.OrderedGroupBinding:void processBinding(org.eclipse.jetty.deploy.graph.Node,org.eclipse.jetty.deploy.App)",
            "org.eclipse.jetty.deploy.AppLifeCycle:void runBindings(org.eclipse.jetty.deploy.graph.Node,org.eclipse.jetty.deploy.App,org.eclipse.jetty.deploy.DeploymentManager)"
        ]
    },
    "org.eclipse.jetty.deploy.providers.ScanningAppProvider:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()"
        ]
    },
    "org.eclipse.jetty.deploy.DeploymentManager:void startAppProvider(org.eclipse.jetty.deploy.AppProvider)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.deploy.DeploymentManager:void doStart()"
        ]
    },
    "org.eclipse.jetty.deploy.WebAppDeployer:void scan()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.deploy.WebAppDeployer:void doStart()"
        ]
    },
    "org.eclipse.jetty.deploy.ContextDeployer:void deploy(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.deploy.ContextDeployer:void redeploy(java.lang.String)",
            "org.eclipse.jetty.deploy.ContextDeployer:void access$000(org.eclipse.jetty.deploy.ContextDeployer,java.lang.String)"
        ]
    },
    "org.eclipse.jetty.deploy.ContextDeployer:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()"
        ]
    },
    "org.eclipse.jetty.jmx.MBeanContainer:void <init>(javax.management.MBeanServer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.websocket.TestClient:void main(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.websocket.TestServer:void main(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.security.HashLoginService:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()"
        ]
    },
    "org.eclipse.jetty.security.PropertyUserStore:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()"
        ]
    },
    "org.eclipse.jetty.util.IO$Singleton:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.IO$Singleton:void <clinit>()",
            "org.eclipse.jetty.util.IO:void copyThread(java.io.InputStream,java.io.OutputStream)",
            "org.eclipse.jetty.util.IO:void copyThread(java.io.Reader,java.io.Writer)"
        ]
    },
    "org.eclipse.jetty.server.AsyncContinuation:void scheduleDispatch()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.AsyncContinuation:void dispatch()",
            "org.eclipse.jetty.server.AsyncContinuation:void expired()",
            "org.eclipse.jetty.server.AsyncContinuation:void complete()"
        ]
    },
    "org.eclipse.jetty.io.nio.SelectChannelEndPoint:void schedule()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.io.nio.SelectorManager$SelectSet:void doSelect()"
        ]
    },
    "org.eclipse.jetty.server.ssl.SslSocketConnector:void accept(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.AbstractConnector$Acceptor:void run()"
        ]
    },
    "org.eclipse.jetty.ajp.Ajp13SocketConnector:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()"
        ]
    },
    "org.eclipse.jetty.client.HttpDestination:org.eclipse.jetty.client.HttpConnection getConnection(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.client.HttpDestination:org.eclipse.jetty.client.HttpConnection reserveConnection(long)"
        ]
    },
    "org.eclipse.jetty.client.HttpDestination:void onConnectionFailed(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.client.HttpDestination:void startNewConnection()",
            "org.eclipse.jetty.client.SelectConnector$Manager:void connectionFailed(java.nio.channels.SocketChannel,java.lang.Throwable,java.lang.Object)",
            "org.eclipse.jetty.client.SelectConnector$ConnectTimeout:void expired()",
            "org.eclipse.jetty.client.SelectConnector:void startConnection(org.eclipse.jetty.client.HttpDestination)",
            "org.eclipse.jetty.client.HttpDestination$ConnectExchange:void onConnectionFailed(java.lang.Throwable)"
        ]
    },
    "org.eclipse.jetty.client.HttpDestination:void doSend(org.eclipse.jetty.client.HttpExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.client.HttpDestination:void send(org.eclipse.jetty.client.HttpExchange)",
            "org.eclipse.jetty.client.HttpDestination:void resend(org.eclipse.jetty.client.HttpExchange)"
        ]
    },
    "org.eclipse.jetty.server.session.AbstractSession:void timeout()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.JDBCSessionManager$Session:void timeout()",
            "org.eclipse.jetty.server.session.HashSessionManager:void scavenge()"
        ]
    },
    "org.eclipse.jetty.server.session.AbstractSession:void invalidate()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.AbstractSession:boolean access(long)",
            "org.eclipse.jetty.server.session.JDBCSessionManager:void invalidateSession(java.lang.String)",
            "org.eclipse.jetty.server.session.HashSessionManager:void invalidateSessions()",
            "org.eclipse.jetty.server.session.HashedSession:void deIdle()",
            "org.eclipse.jetty.server.session.HashSessionIdManager:void invalidateAll(java.lang.String)",
            "org.eclipse.jetty.security.authentication.LoginAuthenticator:javax.servlet.http.HttpSession renewSessionOnAuthentication(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.session.AbstractSessionManager:void removeSession(javax.servlet.http.HttpSession,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.session.AbstractSessionManager:javax.servlet.http.HttpSession getHttpSession(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.SessionHandler:void checkRequestedSessionId(org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest)"
        ]
    },
    "org.eclipse.jetty.io.nio.SelectChannelEndPoint:void checkIdleTimestamp(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.io.nio.SelectorManager$SelectSet$1:void run()"
        ]
    },
    "org.eclipse.jetty.util.thread.Timeout:void tick()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlets.DoSFilter$2:void run()",
            "org.eclipse.jetty.util.thread.Timeout:void tick(long)"
        ]
    },
    "org.eclipse.jetty.util.component.AbstractLifeCycle:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletHandler:void doStop()",
            "org.eclipse.jetty.servlet.Invoker:void service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.servlet.FilterHolder:void doStart()",
            "org.eclipse.jetty.servlets.ProxyServlet:void destroy()",
            "org.eclipse.jetty.server.handler.HotSwapHandler:void setHandler(org.eclipse.jetty.server.Handler)",
            "org.eclipse.jetty.server.handler.HotSwapHandler:void doStop()",
            "org.eclipse.jetty.server.handler.RequestLogHandler:void setRequestLog(org.eclipse.jetty.server.RequestLog)",
            "org.eclipse.jetty.server.handler.RequestLogHandler:void doStop()",
            "org.eclipse.jetty.server.handler.ConnectHandler:void doStop()",
            "org.eclipse.jetty.server.handler.HandlerCollection:void setHandlers(org.eclipse.jetty.server.Handler[])",
            "org.eclipse.jetty.server.handler.HandlerCollection:void doStop()",
            "org.eclipse.jetty.server.handler.HandlerWrapper:void doStop()",
            "org.eclipse.jetty.server.handler.ContextHandler:void doStop()",
            "org.eclipse.jetty.server.session.SessionHandler:void doStop()",
            "org.eclipse.jetty.server.nio.SelectChannelConnector:void doStop()",
            "org.eclipse.jetty.server.ssl.SslSelectChannelConnector:void doStop()",
            "org.eclipse.jetty.server.ssl.SslSocketConnector:void doStop()",
            "org.eclipse.jetty.server.AbstractConnector:void doStop()",
            "org.eclipse.jetty.server.Server:void doStop()",
            "org.eclipse.jetty.client.HttpClient:void doStop()",
            "org.eclipse.jetty.client.SelectConnector:void doStop()",
            "org.eclipse.jetty.deploy.bindings.StandardStopper:void processBinding(org.eclipse.jetty.deploy.graph.Node,org.eclipse.jetty.deploy.App)",
            "org.eclipse.jetty.deploy.providers.ScanningAppProvider:void doStop()",
            "org.eclipse.jetty.deploy.DeploymentManager:void doStop()",
            "org.eclipse.jetty.deploy.DeploymentManager:void removeAppProvider(org.eclipse.jetty.deploy.AppProvider)",
            "org.eclipse.jetty.deploy.WebAppDeployer:void doStop()",
            "org.eclipse.jetty.deploy.ContextDeployer:void undeploy(java.lang.String)",
            "org.eclipse.jetty.deploy.ContextDeployer:void doStop()",
            "org.eclipse.jetty.websocket.TestClient:void main(java.lang.String[])",
            "org.eclipse.jetty.security.HashLoginService:void doStop()",
            "org.eclipse.jetty.security.SecurityHandler:void doStop()",
            "org.eclipse.jetty.security.PropertyUserStore:void doStop()",
            "org.eclipse.jetty.util.component.AggregateLifeCycle:void doStop()",
            "org.eclipse.jetty.util.thread.ShutdownThread:void run()"
        ]
    },
    "org.eclipse.jetty.server.HttpOutput:void write(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.HttpOutput:void write(byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.client.HttpConnection:void exchangeExpired(org.eclipse.jetty.client.HttpExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.client.HttpExchange:void expire(org.eclipse.jetty.client.HttpDestination)"
        ]
    },
    "org.eclipse.jetty.client.HttpDestination:void send(org.eclipse.jetty.client.HttpConnection,org.eclipse.jetty.client.HttpExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.client.HttpDestination:void onNewConnection(org.eclipse.jetty.client.HttpConnection)",
            "org.eclipse.jetty.client.HttpDestination:void returnConnection(org.eclipse.jetty.client.HttpConnection,boolean)",
            "org.eclipse.jetty.client.HttpDestination:void doSend(org.eclipse.jetty.client.HttpExchange)"
        ]
    },
    "org.eclipse.jetty.client.HttpConnection$ConnectionIdleTask:void expired()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.thread.Timeout:void tick()"
        ]
    },
    "org.eclipse.jetty.client.HttpClient:void doStop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void stop()"
        ]
    },
    "org.eclipse.jetty.client.HttpExchange:void cancel()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.client.HttpExchange:void associate(org.eclipse.jetty.client.HttpConnection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.client.HttpConnection:boolean send(org.eclipse.jetty.client.HttpExchange)"
        ]
    },
    "org.eclipse.jetty.websocket.AbstractExtension:void onFrame(byte,byte,org.eclipse.jetty.io.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.WebSocketParserD00:int parseNext()",
            "org.eclipse.jetty.websocket.DeflateFrameExtension:void onFrame(byte,byte,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.websocket.WebSocketParserD10:int parseNext()",
            "org.eclipse.jetty.websocket.AbstractExtension:void onFrame(byte,byte,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.websocket.WebSocketParserD06:int parseNext()"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketConnectionD10$WSFrameHandler:boolean checkBinaryMessageSize(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.WebSocketConnectionD10$WSFrameHandler:void onFrame(byte,byte,org.eclipse.jetty.io.Buffer)"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketConnectionD10$WSFrameHandler:void textMessageTooLarge()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.WebSocketConnectionD10$WSFrameHandler:void onFrame(byte,byte,org.eclipse.jetty.io.Buffer)"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketConnectionD10$WSFrameHandler:void close(int,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.WebSocketParserD10:int parseNext()",
            "org.eclipse.jetty.websocket.AbstractExtension:void close(int,java.lang.String)",
            "org.eclipse.jetty.websocket.WebSocketParserD06:int parseNext()"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketConnectionD10$WSFrameConnection:void disconnect()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.TestClient:void disconnect()"
        ]
    },
    "org.eclipse.jetty.websocket.DeflateFrameExtension:void onFrame(byte,byte,org.eclipse.jetty.io.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.WebSocketParserD00:int parseNext()",
            "org.eclipse.jetty.websocket.WebSocketParserD10:int parseNext()",
            "org.eclipse.jetty.websocket.AbstractExtension:void onFrame(byte,byte,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.websocket.WebSocketParserD06:int parseNext()"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketConnectionD06$FrameHandlerD06:void close(int,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.WebSocketParserD10:int parseNext()",
            "org.eclipse.jetty.websocket.AbstractExtension:void close(int,java.lang.String)",
            "org.eclipse.jetty.websocket.WebSocketParserD06:int parseNext()"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketConnectionD06$FrameConnectionD06:void disconnect()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.TestClient:void disconnect()"
        ]
    },
    "org.eclipse.jetty.server.Request:javax.servlet.ServletInputStream getInputStream()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlets.ProxyServlet:void service(javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "org.eclipse.jetty.servlets.ProxyServlet:void handleConnect(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.servlets.PutFilter:void handlePut(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String,java.io.File)",
            "org.eclipse.jetty.servlets.CGI:void exec(java.io.File,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.Request:void extractParameters()",
            "org.eclipse.jetty.server.Request:java.io.BufferedReader getReader()",
            "org.eclipse.jetty.server.Request:javax.servlet.http.Part getPart(java.lang.String)",
            "org.eclipse.jetty.server.Request:java.util.Collection getParts()",
            "org.eclipse.jetty.nested.NestedEndPoint:void <init>(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketConnectionD10$WSFrameConnection:void sendMessage(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.TestServer$TestEchoAssembleWebSocket:void onMessage(java.lang.String)",
            "org.eclipse.jetty.websocket.TestServer$TestEchoBroadcastWebSocket:void onMessage(java.lang.String)"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketConnectionD10$WSFrameConnection:void sendMessage(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.TestServer$TestEchoAssembleWebSocket:void onMessage(byte[],int,int)",
            "org.eclipse.jetty.websocket.TestServer$TestEchoBroadcastWebSocket:void onMessage(byte[],int,int)"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketConnectionD10$WSFrameConnection:void sendFrame(byte,byte,byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.TestServer$TestEchoWebSocket:boolean onFrame(byte,byte,byte[],int,int)",
            "org.eclipse.jetty.websocket.TestClient:void ping(byte,byte[],int)",
            "org.eclipse.jetty.websocket.TestServer$TestEchoFragmentWebSocket:void onMessage(byte[],int,int)",
            "org.eclipse.jetty.websocket.TestServer$TestEchoFragmentWebSocket:void onMessage(java.lang.String)"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketConnectionD10$WSFrameConnection:void sendControl(byte,byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.WebSocketConnectionD10$WSFrameHandler:void onFrame(byte,byte,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD06$FrameHandlerD06:void onFrame(byte,byte,org.eclipse.jetty.io.Buffer)"
        ]
    },
    "org.eclipse.jetty.websocket.AbstractExtension:void addFrame(byte,byte,byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.WebSocketConnectionD10:void closeOut(int,java.lang.String)",
            "org.eclipse.jetty.websocket.FragmentExtension:void addFrame(byte,byte,byte[],int,int)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD10$WSFrameConnection:void sendMessage(java.lang.String)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD10$WSFrameConnection:void sendMessage(byte[],int,int)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD10$WSFrameConnection:void sendFrame(byte,byte,byte[],int,int)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD10$WSFrameConnection:void sendControl(byte,byte[],int,int)",
            "org.eclipse.jetty.websocket.DeflateFrameExtension:void addFrame(byte,byte,byte[],int,int)",
            "org.eclipse.jetty.websocket.AbstractExtension:void addFrame(byte,byte,byte[],int,int)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD06:void closeOut(int,java.lang.String)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD06$FrameConnectionD06:void sendMessage(java.lang.String)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD06$FrameConnectionD06:void sendMessage(byte[],int,int)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD06$FrameConnectionD06:void sendFrame(byte,byte,byte[],int,int)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD06$FrameConnectionD06:void sendControl(byte,byte[],int,int)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD00:void sendMessage(java.lang.String)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD00:void sendMessage(byte[],int,int)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD00:void sendFrame(byte,byte,byte[],int,int)"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketConnectionD06$FrameConnectionD06:void sendMessage(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.TestServer$TestEchoAssembleWebSocket:void onMessage(java.lang.String)",
            "org.eclipse.jetty.websocket.TestServer$TestEchoBroadcastWebSocket:void onMessage(java.lang.String)"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketConnectionD06$FrameConnectionD06:void sendMessage(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.TestServer$TestEchoAssembleWebSocket:void onMessage(byte[],int,int)",
            "org.eclipse.jetty.websocket.TestServer$TestEchoBroadcastWebSocket:void onMessage(byte[],int,int)"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketConnectionD06$FrameConnectionD06:void sendFrame(byte,byte,byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.TestServer$TestEchoWebSocket:boolean onFrame(byte,byte,byte[],int,int)",
            "org.eclipse.jetty.websocket.TestClient:void ping(byte,byte[],int)",
            "org.eclipse.jetty.websocket.TestServer$TestEchoFragmentWebSocket:void onMessage(byte[],int,int)",
            "org.eclipse.jetty.websocket.TestServer$TestEchoFragmentWebSocket:void onMessage(java.lang.String)"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketConnectionD06$FrameConnectionD06:void sendControl(byte,byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.WebSocketConnectionD10$WSFrameHandler:void onFrame(byte,byte,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD06$FrameHandlerD06:void onFrame(byte,byte,org.eclipse.jetty.io.Buffer)"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketConnectionD00:void sendMessage(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.TestServer$TestEchoAssembleWebSocket:void onMessage(java.lang.String)",
            "org.eclipse.jetty.websocket.TestServer$TestEchoBroadcastWebSocket:void onMessage(java.lang.String)"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketConnectionD00:void sendMessage(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.TestServer$TestEchoAssembleWebSocket:void onMessage(byte[],int,int)",
            "org.eclipse.jetty.websocket.TestServer$TestEchoBroadcastWebSocket:void onMessage(byte[],int,int)"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketConnectionD00:void sendFrame(byte,byte,byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.TestServer$TestEchoWebSocket:boolean onFrame(byte,byte,byte[],int,int)",
            "org.eclipse.jetty.websocket.TestClient:void ping(byte,byte[],int)",
            "org.eclipse.jetty.websocket.TestServer$TestEchoFragmentWebSocket:void onMessage(byte[],int,int)",
            "org.eclipse.jetty.websocket.TestServer$TestEchoFragmentWebSocket:void onMessage(java.lang.String)"
        ]
    },
    "org.eclipse.jetty.websocket.AbstractExtension:int flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.WebSocketConnectionD10:void closeOut(int,java.lang.String)",
            "org.eclipse.jetty.websocket.AbstractExtension:int flush()",
            "org.eclipse.jetty.websocket.WebSocketConnectionD06:org.eclipse.jetty.io.Connection handle()",
            "org.eclipse.jetty.websocket.WebSocketConnectionD06:void closeOut(int,java.lang.String)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD06$FrameConnectionD06:void sendMessage(java.lang.String)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD06$FrameConnectionD06:void sendMessage(byte[],int,int)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD06$FrameConnectionD06:void sendFrame(byte,byte,byte[],int,int)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD06$FrameConnectionD06:void sendControl(byte,byte[],int,int)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD00:org.eclipse.jetty.io.Connection handle()",
            "org.eclipse.jetty.websocket.WebSocketConnectionD00:void sendMessage(java.lang.String)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD00:void sendMessage(byte[],int,int)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD00:void sendFrame(byte,byte,byte[],int,int)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD00:void disconnect()"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketGeneratorD00:void bufferPut(byte,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.WebSocketGeneratorD00:void addFrame(byte,byte,byte[],int,int)"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketGeneratorD00:int flush(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.websocket.WebSocketGeneratorD06:int flush(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.io.nio.SelectChannelEndPoint:void <init>(java.nio.channels.SocketChannel,org.eclipse.jetty.io.nio.SelectorManager$SelectSet,java.nio.channels.SelectionKey,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.nio.SelectChannelConnector:org.eclipse.jetty.io.nio.SelectChannelEndPoint newEndPoint(java.nio.channels.SocketChannel,org.eclipse.jetty.io.nio.SelectorManager$SelectSet,java.nio.channels.SelectionKey)",
            "org.eclipse.jetty.io.nio.NetworkTrafficSelectChannelEndPoint:void <init>(java.nio.channels.SocketChannel,org.eclipse.jetty.io.nio.SelectorManager$SelectSet,java.nio.channels.SelectionKey,int,java.util.List)",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:void <init>(org.eclipse.jetty.io.Buffers,java.nio.channels.SocketChannel,org.eclipse.jetty.io.nio.SelectorManager$SelectSet,java.nio.channels.SelectionKey,javax.net.ssl.SSLEngine,int)",
            "org.eclipse.jetty.client.SelectConnector$Manager:org.eclipse.jetty.io.nio.SelectChannelEndPoint newEndPoint(java.nio.channels.SocketChannel,org.eclipse.jetty.io.nio.SelectorManager$SelectSet,java.nio.channels.SelectionKey)",
            "org.eclipse.jetty.client.SelectConnector$ProxySelectChannelEndPoint:void <init>(java.nio.channels.SocketChannel,org.eclipse.jetty.io.nio.SelectorManager$SelectSet,java.nio.channels.SelectionKey,org.eclipse.jetty.io.Buffers,javax.net.ssl.SSLEngine,int)"
        ]
    },
    "org.eclipse.jetty.io.nio.SelectChannelEndPoint:void <init>(java.nio.channels.SocketChannel,org.eclipse.jetty.io.nio.SelectorManager$SelectSet,java.nio.channels.SelectionKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ConnectHandler$Manager:org.eclipse.jetty.io.nio.SelectChannelEndPoint newEndPoint(java.nio.channels.SocketChannel,org.eclipse.jetty.io.nio.SelectorManager$SelectSet,java.nio.channels.SelectionKey)",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:void <init>(org.eclipse.jetty.io.Buffers,java.nio.channels.SocketChannel,org.eclipse.jetty.io.nio.SelectorManager$SelectSet,java.nio.channels.SelectionKey,javax.net.ssl.SSLEngine)",
            "org.eclipse.jetty.websocket.WebSocketClient$WebSocketClientSelector:org.eclipse.jetty.io.nio.SelectChannelEndPoint newEndPoint(java.nio.channels.SocketChannel,org.eclipse.jetty.io.nio.SelectorManager$SelectSet,java.nio.channels.SelectionKey)"
        ]
    },
    "org.eclipse.jetty.servlets.ProxyServlet:void handleConnect(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlets.ProxyServlet:void service(javax.servlet.ServletRequest,javax.servlet.ServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.HttpConnection$Output:void flush()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.Response:void complete()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.Response:void sendError(int,java.lang.String)",
            "org.eclipse.jetty.server.Response:void sendRedirect(java.lang.String)",
            "org.eclipse.jetty.server.HttpConnection:void handleRequest()"
        ]
    },
    "org.eclipse.jetty.xml.XmlConfiguration:void main(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.security.ConstraintSecurityHandler:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()"
        ]
    },
    "org.eclipse.jetty.server.handler.AbstractHandler:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ErrorPageErrorHandler:void doStart()",
            "org.eclipse.jetty.server.handler.HotSwapHandler:void doStart()",
            "org.eclipse.jetty.server.handler.ResourceHandler:void doStart()",
            "org.eclipse.jetty.server.handler.HandlerCollection:void doStart()",
            "org.eclipse.jetty.server.handler.HandlerWrapper:void doStart()",
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()"
        ]
    },
    "org.eclipse.jetty.deploy.DeploymentManager:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()"
        ]
    },
    "org.eclipse.jetty.server.Server:boolean addBean(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.Server:void setThreadPool(org.eclipse.jetty.util.thread.ThreadPool)",
            "org.eclipse.jetty.server.Server:void setSessionIdManager(org.eclipse.jetty.server.SessionIdManager)",
            "org.eclipse.jetty.server.Server:void addLifeCycle(org.eclipse.jetty.util.component.LifeCycle)"
        ]
    },
    "org.eclipse.jetty.deploy.DeploymentManager:void setAppProviders(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.deploy.DeploymentManager:void addAppProvider(org.eclipse.jetty.deploy.AppProvider)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.websocket.WebSocketClient:void <init>(org.eclipse.jetty.util.thread.ThreadPool)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.WebSocketClient:void <init>()"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketClient:void <init>(org.eclipse.jetty.websocket.WebSocketClient)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.TestClient:void open()"
        ]
    },
    "org.eclipse.jetty.servlet.ServletHandler:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()"
        ]
    },
    "org.eclipse.jetty.servlet.ServletHandler:void updateMappings()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletHandler:void doStart()",
            "org.eclipse.jetty.servlet.ServletHandler:void setFilterMappings(org.eclipse.jetty.servlet.FilterMapping[])",
            "org.eclipse.jetty.servlet.ServletHandler:void setServletMappings(org.eclipse.jetty.servlet.ServletMapping[])"
        ]
    },
    "org.eclipse.jetty.servlet.ServletContextHandler:void startContext()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ContextHandler:void doStart()",
            "org.eclipse.jetty.webapp.WebAppContext:void startContext()"
        ]
    },
    "org.eclipse.jetty.servlets.ProxyServlet:void init(javax.servlet.ServletConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletHolder$SingleThreadedWrapper:void init(javax.servlet.ServletConfig)",
            "org.eclipse.jetty.servlet.ServletHolder$SingleThreadedWrapper:void service(javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "org.eclipse.jetty.servlet.ServletHolder:void initServlet()",
            "org.eclipse.jetty.servlets.ProxyServlet$Transparent:void init(javax.servlet.ServletConfig)"
        ]
    },
    "org.eclipse.jetty.server.handler.HotSwapHandler:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.HotSwapHandler:void destroy()",
            "org.eclipse.jetty.server.handler.HandlerCollection:void destroy()",
            "org.eclipse.jetty.server.handler.HandlerWrapper:void destroy()",
            "org.eclipse.jetty.deploy.bindings.StandardUndeployer:void recursiveRemoveContext(org.eclipse.jetty.server.handler.HandlerCollection,org.eclipse.jetty.server.handler.ContextHandler)",
            "org.eclipse.jetty.util.component.AggregateLifeCycle:void destroy()"
        ]
    },
    "org.eclipse.jetty.server.handler.ScopedHandler:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletHandler:void doStart()",
            "org.eclipse.jetty.server.handler.ContextHandler:void startContext()",
            "org.eclipse.jetty.server.session.SessionHandler:void doStart()"
        ]
    },
    "org.eclipse.jetty.server.handler.StatisticsHandler:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()"
        ]
    },
    "org.eclipse.jetty.server.handler.DebugHandler:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()"
        ]
    },
    "org.eclipse.jetty.server.handler.IPAccessHandler:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketHandler:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()"
        ]
    },
    "org.eclipse.jetty.server.handler.ContextHandler:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.webapp.WebAppContext:void doStart()",
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()"
        ]
    },
    "org.eclipse.jetty.server.session.JDBCSessionManager:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()"
        ]
    },
    "org.eclipse.jetty.server.session.HashSessionManager:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()"
        ]
    },
    "org.eclipse.jetty.deploy.bindings.OrderedGroupBinding:void processBinding(org.eclipse.jetty.deploy.graph.Node,org.eclipse.jetty.deploy.App)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.deploy.bindings.OrderedGroupBinding:void processBinding(org.eclipse.jetty.deploy.graph.Node,org.eclipse.jetty.deploy.App)",
            "org.eclipse.jetty.deploy.AppLifeCycle:void runBindings(org.eclipse.jetty.deploy.graph.Node,org.eclipse.jetty.deploy.App,org.eclipse.jetty.deploy.DeploymentManager)"
        ]
    },
    "org.eclipse.jetty.deploy.AppLifeCycle:void runBindings(org.eclipse.jetty.deploy.graph.Node,org.eclipse.jetty.deploy.App,org.eclipse.jetty.deploy.DeploymentManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.deploy.DeploymentManager:void requestAppGoal(org.eclipse.jetty.deploy.DeploymentManager$AppEntry,java.lang.String)"
        ]
    },
    "org.eclipse.jetty.deploy.WebAppDeployer:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()"
        ]
    },
    "org.eclipse.jetty.deploy.ContextDeployer:void redeploy(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.deploy.ContextDeployer:void access$100(org.eclipse.jetty.deploy.ContextDeployer,java.lang.String)"
        ]
    },
    "org.eclipse.jetty.deploy.ContextDeployer:void access$000(org.eclipse.jetty.deploy.ContextDeployer,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.deploy.ContextDeployer$ScannerListener:void fileAdded(java.lang.String)"
        ]
    },
    "org.eclipse.jetty.util.IO:void copyThread(java.io.InputStream,java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlets.ProxyServlet:void handleConnect(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.servlets.CGI:void exec(java.io.File,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.util.IO:void copyThread(java.io.Reader,java.io.Writer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.AsyncContinuation:void dispatch()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.AsyncContinuation:void expired()",
            "org.eclipse.jetty.server.AsyncContinuation:void dispatch(javax.servlet.ServletContext,java.lang.String)",
            "org.eclipse.jetty.server.AsyncContinuation:void dispatch(java.lang.String)",
            "org.eclipse.jetty.server.AsyncContinuation:void resume()",
            "org.eclipse.jetty.continuation.Servlet3Continuation:void resume()",
            "org.eclipse.jetty.continuation.Servlet3Continuation$1:void onTimeout(javax.servlet.AsyncEvent)"
        ]
    },
    "org.eclipse.jetty.server.AsyncContinuation:void expired()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.AsyncContinuation:void scheduleTimeout()",
            "org.eclipse.jetty.server.AsyncContinuation$AsyncTimeout:void expired()",
            "org.eclipse.jetty.server.AsyncContinuation$AsyncTimeout:void run()"
        ]
    },
    "org.eclipse.jetty.server.AsyncContinuation:void complete()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlets.ProxyServlet$1:void onResponseComplete()",
            "org.eclipse.jetty.servlets.ProxyServlet$1:void onConnectionFailed(java.lang.Throwable)",
            "org.eclipse.jetty.servlets.ProxyServlet$1:void onException(java.lang.Throwable)",
            "org.eclipse.jetty.servlets.ProxyServlet$1:void onExpire()",
            "org.eclipse.jetty.server.AsyncContinuation:void expired()",
            "org.eclipse.jetty.continuation.Servlet3Continuation:void complete()"
        ]
    },
    "org.eclipse.jetty.client.HttpDestination:org.eclipse.jetty.client.HttpConnection reserveConnection(long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.client.SelectConnector$Manager:void connectionFailed(java.nio.channels.SocketChannel,java.lang.Throwable,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.io.nio.SelectorManager$SelectSet:void doSelect()"
        ]
    },
    "org.eclipse.jetty.client.SelectConnector$ConnectTimeout:void expired()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.thread.Timeout:void tick()"
        ]
    },
    "org.eclipse.jetty.client.SelectConnector:void startConnection(org.eclipse.jetty.client.HttpDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.client.HttpDestination:void startNewConnection()"
        ]
    },
    "org.eclipse.jetty.client.HttpDestination$ConnectExchange:void onConnectionFailed(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.client.HttpExchange$Listener:void onConnectionFailed(java.lang.Throwable)",
            "org.eclipse.jetty.client.HttpDestination$ConnectExchange:void onResponseComplete()"
        ]
    },
    "org.eclipse.jetty.client.HttpDestination:void send(org.eclipse.jetty.client.HttpExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.client.webdav.WebdavListener:boolean checkExists(java.lang.String)",
            "org.eclipse.jetty.client.webdav.WebdavListener:boolean makeCollection(java.lang.String)",
            "org.eclipse.jetty.client.webdav.WebdavListener:boolean checkWebdavSupported()",
            "org.eclipse.jetty.client.HttpClient:void send(org.eclipse.jetty.client.HttpExchange)",
            "org.eclipse.jetty.client.RedirectListener:boolean checkExchangeComplete()",
            "org.eclipse.jetty.client.HttpConnection:org.eclipse.jetty.io.Connection handle()"
        ]
    },
    "org.eclipse.jetty.client.HttpDestination:void resend(org.eclipse.jetty.client.HttpExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.client.webdav.WebdavListener:void onResponseComplete()",
            "org.eclipse.jetty.client.webdav.WebdavListener:void onRequestComplete()",
            "org.eclipse.jetty.client.security.SecurityListener:void onRequestComplete()",
            "org.eclipse.jetty.client.security.SecurityListener:void onResponseComplete()",
            "org.eclipse.jetty.client.RedirectListener:boolean checkExchangeComplete()"
        ]
    },
    "org.eclipse.jetty.server.session.JDBCSessionManager$Session:void timeout()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.JDBCSessionManager:void expire(java.util.List)"
        ]
    },
    "org.eclipse.jetty.server.session.HashSessionManager:void scavenge()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.HashSessionManager$2:void run()"
        ]
    },
    "org.eclipse.jetty.server.session.AbstractSession:boolean access(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.AbstractSessionManager:org.eclipse.jetty.http.HttpCookie access(javax.servlet.http.HttpSession,boolean)",
            "org.eclipse.jetty.server.session.JDBCSessionManager$Session:boolean access(long)",
            "org.eclipse.jetty.server.session.HashedSession:void deIdle()"
        ]
    },
    "org.eclipse.jetty.server.session.JDBCSessionManager:void invalidateSession(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.JDBCSessionIdManager:void invalidateAll(java.lang.String)"
        ]
    },
    "org.eclipse.jetty.server.session.HashSessionManager:void invalidateSessions()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.AbstractSessionManager:void doStop()"
        ]
    },
    "org.eclipse.jetty.server.session.HashedSession:void deIdle()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.HashSessionManager:org.eclipse.jetty.server.session.AbstractSession getSession(java.lang.String)",
            "org.eclipse.jetty.server.session.HashedSession:void checkValid()"
        ]
    },
    "org.eclipse.jetty.server.session.HashSessionIdManager:void invalidateAll(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.JDBCSessionManager:void removeSession(org.eclipse.jetty.server.session.AbstractSession,boolean)",
            "org.eclipse.jetty.server.session.AbstractSessionManager:void removeSession(org.eclipse.jetty.server.session.AbstractSession,boolean)"
        ]
    },
    "org.eclipse.jetty.security.authentication.LoginAuthenticator:javax.servlet.http.HttpSession renewSessionOnAuthentication(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.security.authentication.FormAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)",
            "org.eclipse.jetty.security.authentication.ClientCertAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)",
            "org.eclipse.jetty.security.authentication.BasicAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)",
            "org.eclipse.jetty.security.authentication.DigestAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)"
        ]
    },
    "org.eclipse.jetty.server.session.SessionHandler:void checkRequestedSessionId(org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.SessionHandler:void doScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.io.nio.SelectorManager$SelectSet$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ContextHandler:void handle(java.lang.Runnable)",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:void sslClose()",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int fill(org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int flush(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.io.nio.SelectorManager$SelectSet:void doSelect()",
            "org.eclipse.jetty.util.thread.QueuedThreadPool$3:void run()",
            "org.eclipse.jetty.util.thread.ExecutorThreadPool:boolean dispatch(java.lang.Runnable)"
        ]
    },
    "org.eclipse.jetty.servlets.DoSFilter$2:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlets.DoSFilter:void init(javax.servlet.FilterConfig)",
            "org.eclipse.jetty.servlets.CGI:void exec(java.io.File,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandler:void handle(java.lang.Runnable)",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:void sslClose()",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int fill(org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int flush(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.io.nio.SelectorManager$SelectSet:void doSelect()",
            "org.eclipse.jetty.util.thread.QueuedThreadPool$3:void run()",
            "org.eclipse.jetty.util.thread.QueuedThreadPool:boolean startThread(int)",
            "org.eclipse.jetty.util.thread.ExecutorThreadPool:boolean dispatch(java.lang.Runnable)"
        ]
    },
    "org.eclipse.jetty.util.thread.Timeout:void tick(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.client.HttpClient$1:void run()"
        ]
    },
    "org.eclipse.jetty.servlet.ServletHandler:void doStop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void stop()"
        ]
    },
    "org.eclipse.jetty.servlet.FilterHolder:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()"
        ]
    },
    "org.eclipse.jetty.servlets.ProxyServlet:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletHolder$SingleThreadedWrapper:void destroy()",
            "org.eclipse.jetty.servlet.ServletHolder:void destroyInstance(java.lang.Object)"
        ]
    },
    "org.eclipse.jetty.server.handler.HotSwapHandler:void doStop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void stop()"
        ]
    },
    "org.eclipse.jetty.server.handler.RequestLogHandler:void doStop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void stop()"
        ]
    },
    "org.eclipse.jetty.server.handler.ConnectHandler:void doStop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void stop()"
        ]
    },
    "org.eclipse.jetty.server.handler.HandlerCollection:void setHandlers(org.eclipse.jetty.server.Handler[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.HandlerCollection:void addHandler(org.eclipse.jetty.server.Handler)",
            "org.eclipse.jetty.server.handler.HandlerCollection:void removeHandler(org.eclipse.jetty.server.Handler)",
            "org.eclipse.jetty.server.handler.HandlerCollection:void destroy()",
            "org.eclipse.jetty.server.handler.ContextHandlerCollection:void setHandlers(org.eclipse.jetty.server.Handler[])"
        ]
    },
    "org.eclipse.jetty.server.handler.HandlerCollection:void doStop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void stop()"
        ]
    },
    "org.eclipse.jetty.server.handler.HandlerWrapper:void doStop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletHandler:void doStop()",
            "org.eclipse.jetty.server.handler.RequestLogHandler:void doStop()",
            "org.eclipse.jetty.server.handler.ConnectHandler:void doStop()",
            "org.eclipse.jetty.server.handler.DebugHandler:void doStop()",
            "org.eclipse.jetty.server.handler.ContextHandler:void doStop()",
            "org.eclipse.jetty.server.session.SessionHandler:void doStop()",
            "org.eclipse.jetty.server.Server:void doStop()",
            "org.eclipse.jetty.websocket.WebSocketHandler:void doStop()",
            "org.eclipse.jetty.security.SecurityHandler:void doStop()",
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void stop()"
        ]
    },
    "org.eclipse.jetty.server.handler.ContextHandler:void doStop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletContextHandler:void doStop()",
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void stop()"
        ]
    },
    "org.eclipse.jetty.server.session.SessionHandler:void doStop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void stop()"
        ]
    },
    "org.eclipse.jetty.server.nio.SelectChannelConnector:void doStop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.ssl.SslSelectChannelConnector:void doStop()",
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void stop()"
        ]
    },
    "org.eclipse.jetty.server.ssl.SslSelectChannelConnector:void doStop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void stop()"
        ]
    },
    "org.eclipse.jetty.server.ssl.SslSocketConnector:void doStop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void stop()"
        ]
    },
    "org.eclipse.jetty.server.AbstractConnector:void doStop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.nio.SelectChannelConnector:void doStop()",
            "org.eclipse.jetty.server.bio.SocketConnector:void doStop()",
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void stop()"
        ]
    },
    "org.eclipse.jetty.server.Server:void doStop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void stop()"
        ]
    },
    "org.eclipse.jetty.client.SelectConnector:void doStop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void stop()"
        ]
    },
    "org.eclipse.jetty.deploy.bindings.StandardStopper:void processBinding(org.eclipse.jetty.deploy.graph.Node,org.eclipse.jetty.deploy.App)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.deploy.bindings.OrderedGroupBinding:void processBinding(org.eclipse.jetty.deploy.graph.Node,org.eclipse.jetty.deploy.App)",
            "org.eclipse.jetty.deploy.AppLifeCycle:void runBindings(org.eclipse.jetty.deploy.graph.Node,org.eclipse.jetty.deploy.App,org.eclipse.jetty.deploy.DeploymentManager)"
        ]
    },
    "org.eclipse.jetty.deploy.providers.ScanningAppProvider:void doStop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void stop()"
        ]
    },
    "org.eclipse.jetty.deploy.DeploymentManager:void doStop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void stop()"
        ]
    },
    "org.eclipse.jetty.deploy.DeploymentManager:void removeAppProvider(org.eclipse.jetty.deploy.AppProvider)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.deploy.WebAppDeployer:void doStop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void stop()"
        ]
    },
    "org.eclipse.jetty.deploy.ContextDeployer:void undeploy(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.deploy.ContextDeployer:void redeploy(java.lang.String)",
            "org.eclipse.jetty.deploy.ContextDeployer:void access$200(org.eclipse.jetty.deploy.ContextDeployer,java.lang.String)"
        ]
    },
    "org.eclipse.jetty.deploy.ContextDeployer:void doStop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void stop()"
        ]
    },
    "org.eclipse.jetty.security.HashLoginService:void doStop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void stop()"
        ]
    },
    "org.eclipse.jetty.security.SecurityHandler:void doStop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.security.ConstraintSecurityHandler:void doStop()"
        ]
    },
    "org.eclipse.jetty.security.PropertyUserStore:void doStop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void stop()"
        ]
    },
    "org.eclipse.jetty.util.component.AggregateLifeCycle:void doStop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.AbstractHandler:void doStop()",
            "org.eclipse.jetty.deploy.DeploymentManager:void doStop()",
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void stop()"
        ]
    },
    "org.eclipse.jetty.util.thread.ShutdownThread:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlets.DoSFilter:void init(javax.servlet.FilterConfig)",
            "org.eclipse.jetty.servlets.CGI:void exec(java.io.File,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandler:void handle(java.lang.Runnable)",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:void sslClose()",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int fill(org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int flush(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.io.nio.SelectorManager$SelectSet:void doSelect()",
            "org.eclipse.jetty.util.thread.QueuedThreadPool$3:void run()",
            "org.eclipse.jetty.util.thread.QueuedThreadPool:boolean startThread(int)",
            "org.eclipse.jetty.util.thread.ExecutorThreadPool:boolean dispatch(java.lang.Runnable)"
        ]
    },
    "org.eclipse.jetty.client.HttpExchange:void expire(org.eclipse.jetty.client.HttpDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.client.HttpExchange$1:void expired()"
        ]
    },
    "org.eclipse.jetty.client.HttpDestination:void onNewConnection(org.eclipse.jetty.client.HttpConnection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.client.SelectConnector$Manager:org.eclipse.jetty.io.nio.SelectChannelEndPoint newEndPoint(java.nio.channels.SocketChannel,org.eclipse.jetty.io.nio.SelectorManager$SelectSet,java.nio.channels.SelectionKey)",
            "org.eclipse.jetty.client.SocketConnector:void startConnection(org.eclipse.jetty.client.HttpDestination)"
        ]
    },
    "org.eclipse.jetty.client.HttpConnection:boolean send(org.eclipse.jetty.client.HttpExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.client.HttpDestination:void send(org.eclipse.jetty.client.HttpConnection,org.eclipse.jetty.client.HttpExchange)",
            "org.eclipse.jetty.client.HttpConnection:org.eclipse.jetty.io.Connection handle()"
        ]
    },
    "org.eclipse.jetty.websocket.AbstractExtension:void close(int,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.WebSocketParserD10:int parseNext()",
            "org.eclipse.jetty.websocket.AbstractExtension:void close(int,java.lang.String)",
            "org.eclipse.jetty.websocket.WebSocketParserD06:int parseNext()"
        ]
    },
    "org.eclipse.jetty.server.Request:java.io.BufferedReader getReader()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.Request:javax.servlet.http.Part getPart(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.Request:java.util.Collection getParts()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.nested.NestedEndPoint:void <init>(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.nested.NestedConnector:void service(javax.servlet.ServletRequest,javax.servlet.ServletResponse)"
        ]
    },
    "org.eclipse.jetty.websocket.TestServer$TestEchoAssembleWebSocket:void onMessage(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.WebSocketConnectionD10$WSFrameHandler:void onFrame(byte,byte,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD00$FrameHandlerD0:void onFrame(byte,byte,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD06$FrameHandlerD06:void onFrame(byte,byte,org.eclipse.jetty.io.Buffer)"
        ]
    },
    "org.eclipse.jetty.websocket.TestServer$TestEchoBroadcastWebSocket:void onMessage(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.WebSocketConnectionD10$WSFrameHandler:void onFrame(byte,byte,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD00$FrameHandlerD0:void onFrame(byte,byte,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD06$FrameHandlerD06:void onFrame(byte,byte,org.eclipse.jetty.io.Buffer)"
        ]
    },
    "org.eclipse.jetty.websocket.TestServer$TestEchoAssembleWebSocket:void onMessage(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.WebSocketConnectionD10$WSFrameHandler:void onFrame(byte,byte,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD00$FrameHandlerD0:void onFrame(byte,byte,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD06$FrameHandlerD06:void onFrame(byte,byte,org.eclipse.jetty.io.Buffer)"
        ]
    },
    "org.eclipse.jetty.websocket.TestServer$TestEchoBroadcastWebSocket:void onMessage(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.WebSocketConnectionD10$WSFrameHandler:void onFrame(byte,byte,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD00$FrameHandlerD0:void onFrame(byte,byte,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD06$FrameHandlerD06:void onFrame(byte,byte,org.eclipse.jetty.io.Buffer)"
        ]
    },
    "org.eclipse.jetty.websocket.TestServer$TestEchoWebSocket:boolean onFrame(byte,byte,byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.WebSocketConnectionD10$WSFrameHandler:void onFrame(byte,byte,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD06$FrameHandlerD06:void onFrame(byte,byte,org.eclipse.jetty.io.Buffer)"
        ]
    },
    "org.eclipse.jetty.websocket.TestClient:void ping(byte,byte[],int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.TestClient:void main(java.lang.String[])"
        ]
    },
    "org.eclipse.jetty.websocket.TestServer$TestEchoFragmentWebSocket:void onMessage(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.WebSocketConnectionD10$WSFrameHandler:void onFrame(byte,byte,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD00$FrameHandlerD0:void onFrame(byte,byte,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD06$FrameHandlerD06:void onFrame(byte,byte,org.eclipse.jetty.io.Buffer)"
        ]
    },
    "org.eclipse.jetty.websocket.TestServer$TestEchoFragmentWebSocket:void onMessage(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.WebSocketConnectionD10$WSFrameHandler:void onFrame(byte,byte,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD00$FrameHandlerD0:void onFrame(byte,byte,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD06$FrameHandlerD06:void onFrame(byte,byte,org.eclipse.jetty.io.Buffer)"
        ]
    },
    "org.eclipse.jetty.websocket.FragmentExtension:void addFrame(byte,byte,byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.WebSocketConnectionD10:void closeOut(int,java.lang.String)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD10$WSFrameConnection:void sendMessage(java.lang.String)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD10$WSFrameConnection:void sendMessage(byte[],int,int)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD10$WSFrameConnection:void sendFrame(byte,byte,byte[],int,int)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD10$WSFrameConnection:void sendControl(byte,byte[],int,int)",
            "org.eclipse.jetty.websocket.AbstractExtension:void addFrame(byte,byte,byte[],int,int)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD06:void closeOut(int,java.lang.String)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD06$FrameConnectionD06:void sendMessage(java.lang.String)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD06$FrameConnectionD06:void sendMessage(byte[],int,int)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD06$FrameConnectionD06:void sendFrame(byte,byte,byte[],int,int)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD06$FrameConnectionD06:void sendControl(byte,byte[],int,int)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD00:void sendMessage(java.lang.String)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD00:void sendMessage(byte[],int,int)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD00:void sendFrame(byte,byte,byte[],int,int)"
        ]
    },
    "org.eclipse.jetty.websocket.DeflateFrameExtension:void addFrame(byte,byte,byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.WebSocketConnectionD10:void closeOut(int,java.lang.String)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD10$WSFrameConnection:void sendMessage(java.lang.String)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD10$WSFrameConnection:void sendMessage(byte[],int,int)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD10$WSFrameConnection:void sendFrame(byte,byte,byte[],int,int)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD10$WSFrameConnection:void sendControl(byte,byte[],int,int)",
            "org.eclipse.jetty.websocket.AbstractExtension:void addFrame(byte,byte,byte[],int,int)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD06:void closeOut(int,java.lang.String)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD06$FrameConnectionD06:void sendMessage(java.lang.String)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD06$FrameConnectionD06:void sendMessage(byte[],int,int)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD06$FrameConnectionD06:void sendFrame(byte,byte,byte[],int,int)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD06$FrameConnectionD06:void sendControl(byte,byte[],int,int)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD00:void sendMessage(java.lang.String)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD00:void sendMessage(byte[],int,int)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD00:void sendFrame(byte,byte,byte[],int,int)"
        ]
    },
    "org.eclipse.jetty.server.nio.SelectChannelConnector:org.eclipse.jetty.io.nio.SelectChannelEndPoint newEndPoint(java.nio.channels.SocketChannel,org.eclipse.jetty.io.nio.SelectorManager$SelectSet,java.nio.channels.SelectionKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.nio.SelectChannelConnector$ConnectorSelectorManager:org.eclipse.jetty.io.nio.SelectChannelEndPoint newEndPoint(java.nio.channels.SocketChannel,org.eclipse.jetty.io.nio.SelectorManager$SelectSet,java.nio.channels.SelectionKey)"
        ]
    },
    "org.eclipse.jetty.io.nio.NetworkTrafficSelectChannelEndPoint:void <init>(java.nio.channels.SocketChannel,org.eclipse.jetty.io.nio.SelectorManager$SelectSet,java.nio.channels.SelectionKey,int,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.nio.NetworkTrafficSelectChannelConnector:org.eclipse.jetty.io.nio.SelectChannelEndPoint newEndPoint(java.nio.channels.SocketChannel,org.eclipse.jetty.io.nio.SelectorManager$SelectSet,java.nio.channels.SelectionKey)"
        ]
    },
    "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:void <init>(org.eclipse.jetty.io.Buffers,java.nio.channels.SocketChannel,org.eclipse.jetty.io.nio.SelectorManager$SelectSet,java.nio.channels.SelectionKey,javax.net.ssl.SSLEngine,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.ssl.SslSelectChannelConnector:org.eclipse.jetty.io.nio.SelectChannelEndPoint newEndPoint(java.nio.channels.SocketChannel,org.eclipse.jetty.io.nio.SelectorManager$SelectSet,java.nio.channels.SelectionKey)",
            "org.eclipse.jetty.client.SelectConnector$Manager:org.eclipse.jetty.io.nio.SelectChannelEndPoint newEndPoint(java.nio.channels.SocketChannel,org.eclipse.jetty.io.nio.SelectorManager$SelectSet,java.nio.channels.SelectionKey)",
            "org.eclipse.jetty.client.SelectConnector$ProxySelectChannelEndPoint:void <init>(java.nio.channels.SocketChannel,org.eclipse.jetty.io.nio.SelectorManager$SelectSet,java.nio.channels.SelectionKey,org.eclipse.jetty.io.Buffers,javax.net.ssl.SSLEngine,int)"
        ]
    },
    "org.eclipse.jetty.client.SelectConnector$Manager:org.eclipse.jetty.io.nio.SelectChannelEndPoint newEndPoint(java.nio.channels.SocketChannel,org.eclipse.jetty.io.nio.SelectorManager$SelectSet,java.nio.channels.SelectionKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.io.nio.SelectorManager$SelectSet:org.eclipse.jetty.io.nio.SelectChannelEndPoint createEndPoint(java.nio.channels.SocketChannel,java.nio.channels.SelectionKey)"
        ]
    },
    "org.eclipse.jetty.client.SelectConnector$ProxySelectChannelEndPoint:void <init>(java.nio.channels.SocketChannel,org.eclipse.jetty.io.nio.SelectorManager$SelectSet,java.nio.channels.SelectionKey,org.eclipse.jetty.io.Buffers,javax.net.ssl.SSLEngine,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.client.SelectConnector$Manager:org.eclipse.jetty.io.nio.SelectChannelEndPoint newEndPoint(java.nio.channels.SocketChannel,org.eclipse.jetty.io.nio.SelectorManager$SelectSet,java.nio.channels.SelectionKey)"
        ]
    },
    "org.eclipse.jetty.server.handler.ConnectHandler$Manager:org.eclipse.jetty.io.nio.SelectChannelEndPoint newEndPoint(java.nio.channels.SocketChannel,org.eclipse.jetty.io.nio.SelectorManager$SelectSet,java.nio.channels.SelectionKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.io.nio.SelectorManager$SelectSet:org.eclipse.jetty.io.nio.SelectChannelEndPoint createEndPoint(java.nio.channels.SocketChannel,java.nio.channels.SelectionKey)"
        ]
    },
    "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:void <init>(org.eclipse.jetty.io.Buffers,java.nio.channels.SocketChannel,org.eclipse.jetty.io.nio.SelectorManager$SelectSet,java.nio.channels.SelectionKey,javax.net.ssl.SSLEngine)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.websocket.WebSocketClient$WebSocketClientSelector:org.eclipse.jetty.io.nio.SelectChannelEndPoint newEndPoint(java.nio.channels.SocketChannel,org.eclipse.jetty.io.nio.SelectorManager$SelectSet,java.nio.channels.SelectionKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.io.nio.SelectorManager$SelectSet:org.eclipse.jetty.io.nio.SelectChannelEndPoint createEndPoint(java.nio.channels.SocketChannel,java.nio.channels.SelectionKey)"
        ]
    },
    "org.eclipse.jetty.server.Response:void sendRedirect(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.rewrite.handler.RedirectPatternRule:java.lang.String apply(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.rewrite.handler.RedirectRegexRule:java.lang.String apply(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.regex.Matcher)",
            "org.eclipse.jetty.servlet.DefaultServlet:void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.servlets.CGI:void exec(java.io.File,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ResourceHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandler:boolean checkContext(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.security.jaspi.modules.FormAuthModule:javax.security.auth.message.AuthStatus validateRequest(javax.security.auth.message.MessageInfo,javax.security.auth.Subject,javax.security.auth.Subject)",
            "org.eclipse.jetty.security.authentication.FormAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)",
            "org.eclipse.jetty.security.ConstraintSecurityHandler:boolean checkUserDataPermissions(java.lang.String,org.eclipse.jetty.server.Request,org.eclipse.jetty.server.Response,java.lang.Object)"
        ]
    },
    "org.eclipse.jetty.servlet.ErrorPageErrorHandler:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()"
        ]
    },
    "org.eclipse.jetty.server.handler.ResourceHandler:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()"
        ]
    },
    "org.eclipse.jetty.server.Server:void setThreadPool(org.eclipse.jetty.util.thread.ThreadPool)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.Server:void doStart()"
        ]
    },
    "org.eclipse.jetty.server.Server:void setSessionIdManager(org.eclipse.jetty.server.SessionIdManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.AbstractSessionManager:void doStart()"
        ]
    },
    "org.eclipse.jetty.server.Server:void addLifeCycle(org.eclipse.jetty.util.component.LifeCycle)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.websocket.WebSocketClient:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.TestClient:void <clinit>()"
        ]
    },
    "org.eclipse.jetty.websocket.TestClient:void open()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.TestClient:void main(java.lang.String[])"
        ]
    },
    "org.eclipse.jetty.servlet.ServletHandler:void setFilterMappings(org.eclipse.jetty.servlet.FilterMapping[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletHandler:void addFilterWithMapping(org.eclipse.jetty.servlet.FilterHolder,java.lang.String,java.util.EnumSet)",
            "org.eclipse.jetty.servlet.ServletHandler:void addFilterWithMapping(org.eclipse.jetty.servlet.FilterHolder,java.lang.String,int)",
            "org.eclipse.jetty.servlet.ServletHandler:void addFilter(org.eclipse.jetty.servlet.FilterHolder,org.eclipse.jetty.servlet.FilterMapping)",
            "org.eclipse.jetty.servlet.ServletHandler:void addFilterMapping(org.eclipse.jetty.servlet.FilterMapping)",
            "org.eclipse.jetty.servlet.ServletHandler:void prependFilterMapping(org.eclipse.jetty.servlet.FilterMapping)",
            "org.eclipse.jetty.webapp.WebXmlConfiguration:void deconfigure(org.eclipse.jetty.webapp.WebAppContext)"
        ]
    },
    "org.eclipse.jetty.servlet.ServletHandler:void setServletMappings(org.eclipse.jetty.servlet.ServletMapping[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletHandler:void addServletWithMapping(org.eclipse.jetty.servlet.ServletHolder,java.lang.String)",
            "org.eclipse.jetty.servlet.ServletHandler:void addServletMapping(org.eclipse.jetty.servlet.ServletMapping)",
            "org.eclipse.jetty.servlet.Invoker:void service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.webapp.WebXmlConfiguration:void deconfigure(org.eclipse.jetty.webapp.WebAppContext)"
        ]
    },
    "org.eclipse.jetty.webapp.WebAppContext:void startContext()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ContextHandler:void doStart()"
        ]
    },
    "org.eclipse.jetty.servlet.ServletHolder$SingleThreadedWrapper:void init(javax.servlet.ServletConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletHolder$SingleThreadedWrapper:void init(javax.servlet.ServletConfig)",
            "org.eclipse.jetty.servlet.ServletHolder$SingleThreadedWrapper:void service(javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "org.eclipse.jetty.servlet.ServletHolder:void initServlet()"
        ]
    },
    "org.eclipse.jetty.servlet.ServletHolder:void initServlet()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletHolder:void doStart()",
            "org.eclipse.jetty.servlet.ServletHolder:javax.servlet.Servlet getServlet()"
        ]
    },
    "org.eclipse.jetty.servlets.ProxyServlet$Transparent:void init(javax.servlet.ServletConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletHolder$SingleThreadedWrapper:void init(javax.servlet.ServletConfig)",
            "org.eclipse.jetty.servlet.ServletHolder$SingleThreadedWrapper:void service(javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "org.eclipse.jetty.servlet.ServletHolder:void initServlet()"
        ]
    },
    "org.eclipse.jetty.server.handler.HandlerCollection:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.HotSwapHandler:void destroy()",
            "org.eclipse.jetty.server.handler.HandlerCollection:void destroy()",
            "org.eclipse.jetty.server.handler.HandlerWrapper:void destroy()",
            "org.eclipse.jetty.deploy.bindings.StandardUndeployer:void recursiveRemoveContext(org.eclipse.jetty.server.handler.HandlerCollection,org.eclipse.jetty.server.handler.ContextHandler)",
            "org.eclipse.jetty.util.component.AggregateLifeCycle:void destroy()"
        ]
    },
    "org.eclipse.jetty.server.handler.HandlerWrapper:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.HotSwapHandler:void destroy()",
            "org.eclipse.jetty.server.handler.HandlerCollection:void destroy()",
            "org.eclipse.jetty.server.handler.HandlerWrapper:void destroy()",
            "org.eclipse.jetty.webapp.WebAppContext:void destroy()",
            "org.eclipse.jetty.deploy.bindings.StandardUndeployer:void recursiveRemoveContext(org.eclipse.jetty.server.handler.HandlerCollection,org.eclipse.jetty.server.handler.ContextHandler)",
            "org.eclipse.jetty.util.component.AggregateLifeCycle:void destroy()"
        ]
    },
    "org.eclipse.jetty.deploy.bindings.StandardUndeployer:void recursiveRemoveContext(org.eclipse.jetty.server.handler.HandlerCollection,org.eclipse.jetty.server.handler.ContextHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.deploy.bindings.StandardUndeployer:void processBinding(org.eclipse.jetty.deploy.graph.Node,org.eclipse.jetty.deploy.App)",
            "org.eclipse.jetty.deploy.bindings.StandardUndeployer:void recursiveRemoveContext(org.eclipse.jetty.server.handler.HandlerCollection,org.eclipse.jetty.server.handler.ContextHandler)"
        ]
    },
    "org.eclipse.jetty.util.component.AggregateLifeCycle:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.AbstractHandler:void destroy()",
            "org.eclipse.jetty.util.component.AggregateLifeCycle:void destroy()"
        ]
    },
    "org.eclipse.jetty.webapp.WebAppContext:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()"
        ]
    },
    "org.eclipse.jetty.deploy.DeploymentManager:void requestAppGoal(org.eclipse.jetty.deploy.DeploymentManager$AppEntry,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.deploy.DeploymentManager:void addApp(org.eclipse.jetty.deploy.App)",
            "org.eclipse.jetty.deploy.DeploymentManager:void requestAppGoal(org.eclipse.jetty.deploy.App,java.lang.String)",
            "org.eclipse.jetty.deploy.DeploymentManager:void requestAppGoal(java.lang.String,java.lang.String)",
            "org.eclipse.jetty.deploy.DeploymentManager:void undeployAll()"
        ]
    },
    "org.eclipse.jetty.deploy.ContextDeployer:void access$100(org.eclipse.jetty.deploy.ContextDeployer,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.deploy.ContextDeployer$ScannerListener:void fileChanged(java.lang.String)"
        ]
    },
    "org.eclipse.jetty.deploy.ContextDeployer$ScannerListener:void fileAdded(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.Scanner:void reportAddition(java.lang.String)"
        ]
    },
    "org.eclipse.jetty.server.AsyncContinuation:void dispatch(javax.servlet.ServletContext,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.AsyncContinuation:void dispatch(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.AsyncContinuation:void resume()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlets.DoSFilter:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)",
            "org.eclipse.jetty.servlets.QoSFilter:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)"
        ]
    },
    "org.eclipse.jetty.continuation.Servlet3Continuation:void resume()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlets.DoSFilter:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)",
            "org.eclipse.jetty.servlets.QoSFilter:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)"
        ]
    },
    "org.eclipse.jetty.continuation.Servlet3Continuation$1:void onTimeout(javax.servlet.AsyncEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.AsyncContinuation:void expired()"
        ]
    },
    "org.eclipse.jetty.server.AsyncContinuation:void scheduleTimeout()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.AsyncContinuation:boolean unhandle()"
        ]
    },
    "org.eclipse.jetty.server.AsyncContinuation$AsyncTimeout:void expired()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.thread.Timeout:void tick()"
        ]
    },
    "org.eclipse.jetty.server.AsyncContinuation$AsyncTimeout:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ContextHandler:void handle(java.lang.Runnable)",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:void sslClose()",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int fill(org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int flush(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.io.nio.SelectorManager$SelectSet:void doSelect()",
            "org.eclipse.jetty.util.thread.QueuedThreadPool$3:void run()",
            "org.eclipse.jetty.util.thread.ExecutorThreadPool:boolean dispatch(java.lang.Runnable)"
        ]
    },
    "org.eclipse.jetty.servlets.ProxyServlet$1:void onResponseComplete()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.client.HttpExchange$Listener:void onResponseComplete()"
        ]
    },
    "org.eclipse.jetty.servlets.ProxyServlet$1:void onConnectionFailed(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.client.HttpExchange$Listener:void onConnectionFailed(java.lang.Throwable)"
        ]
    },
    "org.eclipse.jetty.servlets.ProxyServlet$1:void onException(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.client.HttpExchange$Listener:void onException(java.lang.Throwable)"
        ]
    },
    "org.eclipse.jetty.servlets.ProxyServlet$1:void onExpire()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.client.HttpExchange$Listener:void onExpire()"
        ]
    },
    "org.eclipse.jetty.continuation.Servlet3Continuation:void complete()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlets.ProxyServlet$1:void onResponseComplete()",
            "org.eclipse.jetty.servlets.ProxyServlet$1:void onConnectionFailed(java.lang.Throwable)",
            "org.eclipse.jetty.servlets.ProxyServlet$1:void onException(java.lang.Throwable)",
            "org.eclipse.jetty.servlets.ProxyServlet$1:void onExpire()"
        ]
    },
    "org.eclipse.jetty.client.HttpExchange$Listener:void onConnectionFailed(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.client.HttpDestination:void onConnectionFailed(java.lang.Throwable)",
            "org.eclipse.jetty.client.HttpEventListenerWrapper:void onConnectionFailed(java.lang.Throwable)"
        ]
    },
    "org.eclipse.jetty.client.HttpDestination$ConnectExchange:void onResponseComplete()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.client.HttpExchange$Listener:void onResponseComplete()"
        ]
    },
    "org.eclipse.jetty.client.webdav.WebdavListener:boolean checkExists(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.client.webdav.WebdavListener:boolean resolveCollectionIssues()"
        ]
    },
    "org.eclipse.jetty.client.webdav.WebdavListener:boolean makeCollection(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.client.webdav.WebdavListener:boolean resolveCollectionIssues()"
        ]
    },
    "org.eclipse.jetty.client.webdav.WebdavListener:boolean checkWebdavSupported()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.client.webdav.WebdavListener:boolean resolveCollectionIssues()"
        ]
    },
    "org.eclipse.jetty.client.HttpClient:void send(org.eclipse.jetty.client.HttpExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlets.ProxyServlet:void service(javax.servlet.ServletRequest,javax.servlet.ServletResponse)"
        ]
    },
    "org.eclipse.jetty.client.RedirectListener:boolean checkExchangeComplete()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.client.RedirectListener:void onRequestComplete()",
            "org.eclipse.jetty.client.RedirectListener:void onResponseComplete()"
        ]
    },
    "org.eclipse.jetty.client.webdav.WebdavListener:void onResponseComplete()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.client.HttpEventListenerWrapper:void onResponseComplete()",
            "org.eclipse.jetty.client.HttpExchange:void setStatus(int)"
        ]
    },
    "org.eclipse.jetty.client.webdav.WebdavListener:void onRequestComplete()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.client.HttpConnection:org.eclipse.jetty.io.Connection handle()",
            "org.eclipse.jetty.client.HttpEventListenerWrapper:void onRequestComplete()"
        ]
    },
    "org.eclipse.jetty.client.security.SecurityListener:void onRequestComplete()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.client.HttpConnection:org.eclipse.jetty.io.Connection handle()",
            "org.eclipse.jetty.client.HttpEventListenerWrapper:void onRequestComplete()"
        ]
    },
    "org.eclipse.jetty.client.security.SecurityListener:void onResponseComplete()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.client.HttpEventListenerWrapper:void onResponseComplete()",
            "org.eclipse.jetty.client.HttpExchange:void setStatus(int)"
        ]
    },
    "org.eclipse.jetty.server.session.JDBCSessionManager:void expire(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.JDBCSessionIdManager:void scavenge()"
        ]
    },
    "org.eclipse.jetty.server.session.HashSessionManager$2:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ContextHandler:void handle(java.lang.Runnable)",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:void sslClose()",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int fill(org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int flush(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.io.nio.SelectorManager$SelectSet:void doSelect()",
            "org.eclipse.jetty.util.thread.QueuedThreadPool$3:void run()",
            "org.eclipse.jetty.util.thread.ExecutorThreadPool:boolean dispatch(java.lang.Runnable)"
        ]
    },
    "org.eclipse.jetty.server.session.AbstractSessionManager:org.eclipse.jetty.http.HttpCookie access(javax.servlet.http.HttpSession,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.SessionHandler:void doScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.session.JDBCSessionManager$Session:boolean access(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.AbstractSessionManager:org.eclipse.jetty.http.HttpCookie access(javax.servlet.http.HttpSession,boolean)"
        ]
    },
    "org.eclipse.jetty.server.session.JDBCSessionIdManager:void invalidateAll(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.JDBCSessionManager:void removeSession(org.eclipse.jetty.server.session.AbstractSession,boolean)",
            "org.eclipse.jetty.server.session.AbstractSessionManager:void removeSession(org.eclipse.jetty.server.session.AbstractSession,boolean)"
        ]
    },
    "org.eclipse.jetty.server.session.AbstractSessionManager:void doStop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.JDBCSessionManager:void doStop()",
            "org.eclipse.jetty.server.session.HashSessionManager:void doStop()"
        ]
    },
    "org.eclipse.jetty.server.session.HashSessionManager:org.eclipse.jetty.server.session.AbstractSession getSession(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.AbstractSessionManager:javax.servlet.http.HttpSession getHttpSession(java.lang.String)"
        ]
    },
    "org.eclipse.jetty.server.session.HashedSession:void checkValid()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.AbstractSession:java.lang.Object getAttribute(java.lang.String)",
            "org.eclipse.jetty.server.session.AbstractSession:int getAttributes()",
            "org.eclipse.jetty.server.session.AbstractSession:java.util.Enumeration getAttributeNames()",
            "org.eclipse.jetty.server.session.AbstractSession:long getLastAccessedTime()",
            "org.eclipse.jetty.server.session.AbstractSession:int getMaxInactiveInterval()",
            "org.eclipse.jetty.server.session.AbstractSession:javax.servlet.http.HttpSessionContext getSessionContext()",
            "org.eclipse.jetty.server.session.AbstractSession:java.lang.String[] getValueNames()",
            "org.eclipse.jetty.server.session.AbstractSession:boolean isNew()",
            "org.eclipse.jetty.server.session.AbstractSession:void setAttribute(java.lang.String,java.lang.Object)"
        ]
    },
    "org.eclipse.jetty.server.session.AbstractSessionManager:void removeSession(org.eclipse.jetty.server.session.AbstractSession,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.AbstractSession:void timeout()",
            "org.eclipse.jetty.server.session.AbstractSession:void invalidate()",
            "org.eclipse.jetty.server.session.AbstractSessionManager:void removeSession(javax.servlet.http.HttpSession,boolean)",
            "org.eclipse.jetty.server.session.HashSessionManager:void invalidateSessions()"
        ]
    },
    "org.eclipse.jetty.servlets.DoSFilter:void init(javax.servlet.FilterConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.FilterHolder:void doStart()"
        ]
    },
    "org.eclipse.jetty.util.thread.QueuedThreadPool:boolean startThread(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.thread.QueuedThreadPool:void doStart()",
            "org.eclipse.jetty.util.thread.QueuedThreadPool:void setMinThreads(int)",
            "org.eclipse.jetty.util.thread.QueuedThreadPool:boolean dispatch(java.lang.Runnable)"
        ]
    },
    "org.eclipse.jetty.client.HttpClient$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ContextHandler:void handle(java.lang.Runnable)",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:void sslClose()",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int fill(org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int flush(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.io.nio.SelectorManager$SelectSet:void doSelect()",
            "org.eclipse.jetty.util.thread.QueuedThreadPool$3:void run()",
            "org.eclipse.jetty.util.thread.ExecutorThreadPool:boolean dispatch(java.lang.Runnable)"
        ]
    },
    "org.eclipse.jetty.servlet.ServletHolder$SingleThreadedWrapper:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletHolder$SingleThreadedWrapper:void destroy()",
            "org.eclipse.jetty.servlet.ServletHolder:void destroyInstance(java.lang.Object)"
        ]
    },
    "org.eclipse.jetty.servlet.ServletHolder:void destroyInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletHolder:void doStop()"
        ]
    },
    "org.eclipse.jetty.server.handler.HandlerCollection:void addHandler(org.eclipse.jetty.server.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletContextHandler:void <init>(org.eclipse.jetty.server.HandlerContainer,java.lang.String,org.eclipse.jetty.server.session.SessionHandler,org.eclipse.jetty.security.SecurityHandler,org.eclipse.jetty.servlet.ServletHandler,org.eclipse.jetty.server.handler.ErrorHandler)",
            "org.eclipse.jetty.server.handler.ContextHandlerCollection:org.eclipse.jetty.server.handler.ContextHandler addContext(java.lang.String,java.lang.String)",
            "org.eclipse.jetty.server.handler.ContextHandler:void <init>(org.eclipse.jetty.server.HandlerContainer,java.lang.String)",
            "org.eclipse.jetty.deploy.bindings.StandardDeployer:void processBinding(org.eclipse.jetty.deploy.graph.Node,org.eclipse.jetty.deploy.App)",
            "org.eclipse.jetty.deploy.WebAppDeployer:void scan()",
            "org.eclipse.jetty.deploy.ContextDeployer:void deploy(java.lang.String)"
        ]
    },
    "org.eclipse.jetty.server.handler.HandlerCollection:void removeHandler(org.eclipse.jetty.server.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.deploy.bindings.StandardUndeployer:void recursiveRemoveContext(org.eclipse.jetty.server.handler.HandlerCollection,org.eclipse.jetty.server.handler.ContextHandler)",
            "org.eclipse.jetty.deploy.ContextDeployer:void undeploy(java.lang.String)"
        ]
    },
    "org.eclipse.jetty.server.handler.ContextHandlerCollection:void setHandlers(org.eclipse.jetty.server.Handler[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.HandlerCollection:void addHandler(org.eclipse.jetty.server.Handler)",
            "org.eclipse.jetty.server.handler.HandlerCollection:void removeHandler(org.eclipse.jetty.server.Handler)",
            "org.eclipse.jetty.server.handler.HandlerCollection:void destroy()"
        ]
    },
    "org.eclipse.jetty.server.handler.DebugHandler:void doStop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void stop()"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketHandler:void doStop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void stop()"
        ]
    },
    "org.eclipse.jetty.servlet.ServletContextHandler:void doStop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.webapp.WebAppContext:void doStop()",
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void stop()"
        ]
    },
    "org.eclipse.jetty.server.bio.SocketConnector:void doStop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.ssl.SslSocketConnector:void doStop()",
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void stop()"
        ]
    },
    "org.eclipse.jetty.deploy.ContextDeployer:void access$200(org.eclipse.jetty.deploy.ContextDeployer,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.deploy.ContextDeployer$ScannerListener:void fileRemoved(java.lang.String)"
        ]
    },
    "org.eclipse.jetty.security.ConstraintSecurityHandler:void doStop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void stop()"
        ]
    },
    "org.eclipse.jetty.server.handler.AbstractHandler:void doStop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ErrorPageErrorHandler:void doStop()",
            "org.eclipse.jetty.server.handler.HotSwapHandler:void doStop()",
            "org.eclipse.jetty.server.handler.HandlerCollection:void doStop()",
            "org.eclipse.jetty.server.handler.HandlerWrapper:void doStop()",
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void stop()"
        ]
    },
    "org.eclipse.jetty.client.HttpExchange$1:void expired()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.thread.Timeout:void tick()"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketConnectionD00$FrameHandlerD0:void onFrame(byte,byte,org.eclipse.jetty.io.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.WebSocketParserD00:int parseNext()",
            "org.eclipse.jetty.websocket.WebSocketParserD10:int parseNext()",
            "org.eclipse.jetty.websocket.AbstractExtension:void onFrame(byte,byte,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.websocket.WebSocketParserD06:int parseNext()"
        ]
    },
    "org.eclipse.jetty.server.nio.SelectChannelConnector$ConnectorSelectorManager:org.eclipse.jetty.io.nio.SelectChannelEndPoint newEndPoint(java.nio.channels.SocketChannel,org.eclipse.jetty.io.nio.SelectorManager$SelectSet,java.nio.channels.SelectionKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.io.nio.SelectorManager$SelectSet:org.eclipse.jetty.io.nio.SelectChannelEndPoint createEndPoint(java.nio.channels.SocketChannel,java.nio.channels.SelectionKey)"
        ]
    },
    "org.eclipse.jetty.server.nio.NetworkTrafficSelectChannelConnector:org.eclipse.jetty.io.nio.SelectChannelEndPoint newEndPoint(java.nio.channels.SocketChannel,org.eclipse.jetty.io.nio.SelectorManager$SelectSet,java.nio.channels.SelectionKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.nio.SelectChannelConnector$ConnectorSelectorManager:org.eclipse.jetty.io.nio.SelectChannelEndPoint newEndPoint(java.nio.channels.SocketChannel,org.eclipse.jetty.io.nio.SelectorManager$SelectSet,java.nio.channels.SelectionKey)"
        ]
    },
    "org.eclipse.jetty.server.ssl.SslSelectChannelConnector:org.eclipse.jetty.io.nio.SelectChannelEndPoint newEndPoint(java.nio.channels.SocketChannel,org.eclipse.jetty.io.nio.SelectorManager$SelectSet,java.nio.channels.SelectionKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.nio.SelectChannelConnector$ConnectorSelectorManager:org.eclipse.jetty.io.nio.SelectChannelEndPoint newEndPoint(java.nio.channels.SocketChannel,org.eclipse.jetty.io.nio.SelectorManager$SelectSet,java.nio.channels.SelectionKey)"
        ]
    },
    "org.eclipse.jetty.io.nio.SelectorManager$SelectSet:org.eclipse.jetty.io.nio.SelectChannelEndPoint createEndPoint(java.nio.channels.SocketChannel,java.nio.channels.SelectionKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.io.nio.SelectorManager$SelectSet:void doSelect()"
        ]
    },
    "org.eclipse.jetty.rewrite.handler.RedirectPatternRule:java.lang.String apply(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.rewrite.handler.PatternRule:java.lang.String matchAndApply(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.rewrite.handler.RedirectRegexRule:java.lang.String apply(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.regex.Matcher)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.rewrite.handler.RegexRule:java.lang.String matchAndApply(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.websocket.TestClient:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.TestClient:boolean onFrame(byte,byte,byte[],int,int)",
            "org.eclipse.jetty.websocket.TestClient:void open()",
            "org.eclipse.jetty.websocket.TestClient:void ping(byte,byte[],int)",
            "org.eclipse.jetty.websocket.TestClient:void main(java.lang.String[])",
            "org.eclipse.jetty.websocket.TestClient:void <clinit>()"
        ]
    },
    "org.eclipse.jetty.servlet.ServletHandler:void addFilterWithMapping(org.eclipse.jetty.servlet.FilterHolder,java.lang.String,java.util.EnumSet)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletHandler:org.eclipse.jetty.servlet.FilterHolder addFilterWithMapping(java.lang.Class,java.lang.String,java.util.EnumSet)",
            "org.eclipse.jetty.servlet.ServletHandler:org.eclipse.jetty.servlet.FilterHolder addFilterWithMapping(java.lang.String,java.lang.String,java.util.EnumSet)",
            "org.eclipse.jetty.servlet.ServletContextHandler:void addFilter(org.eclipse.jetty.servlet.FilterHolder,java.lang.String,java.util.EnumSet)"
        ]
    },
    "org.eclipse.jetty.servlet.ServletHandler:void addFilterWithMapping(org.eclipse.jetty.servlet.FilterHolder,java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletHandler:org.eclipse.jetty.servlet.FilterHolder addFilterWithMapping(java.lang.Class,java.lang.String,int)",
            "org.eclipse.jetty.servlet.ServletHandler:org.eclipse.jetty.servlet.FilterHolder addFilterWithMapping(java.lang.String,java.lang.String,int)"
        ]
    },
    "org.eclipse.jetty.servlet.ServletHandler:void addFilter(org.eclipse.jetty.servlet.FilterHolder,org.eclipse.jetty.servlet.FilterMapping)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.servlet.ServletHandler:void addFilterMapping(org.eclipse.jetty.servlet.FilterMapping)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.FilterHolder$Registration:void addMappingForServletNames(java.util.EnumSet,boolean,java.lang.String[])",
            "org.eclipse.jetty.servlet.FilterHolder$Registration:void addMappingForUrlPatterns(java.util.EnumSet,boolean,java.lang.String[])",
            "org.eclipse.jetty.webapp.StandardDescriptorProcessor:void addFilterMapping(java.lang.String,org.eclipse.jetty.xml.XmlParser$Node,org.eclipse.jetty.webapp.WebAppContext)",
            "org.eclipse.jetty.annotations.WebFilterAnnotation:void apply()"
        ]
    },
    "org.eclipse.jetty.servlet.ServletHandler:void prependFilterMapping(org.eclipse.jetty.servlet.FilterMapping)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.FilterHolder$Registration:void addMappingForServletNames(java.util.EnumSet,boolean,java.lang.String[])",
            "org.eclipse.jetty.servlet.FilterHolder$Registration:void addMappingForUrlPatterns(java.util.EnumSet,boolean,java.lang.String[])"
        ]
    },
    "org.eclipse.jetty.webapp.WebXmlConfiguration:void deconfigure(org.eclipse.jetty.webapp.WebAppContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.webapp.WebAppContext:void doStop()",
            "org.eclipse.jetty.webapp.CloneConfiguration:void deconfigure(org.eclipse.jetty.webapp.WebAppContext)"
        ]
    },
    "org.eclipse.jetty.servlet.ServletHandler:void addServletWithMapping(org.eclipse.jetty.servlet.ServletHolder,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletHandler:org.eclipse.jetty.servlet.ServletHolder addServletWithMapping(java.lang.String,java.lang.String)",
            "org.eclipse.jetty.servlet.ServletHandler:org.eclipse.jetty.servlet.ServletHolder addServletWithMapping(java.lang.Class,java.lang.String)",
            "org.eclipse.jetty.servlet.ServletContextHandler:void addServlet(org.eclipse.jetty.servlet.ServletHolder,java.lang.String)"
        ]
    },
    "org.eclipse.jetty.servlet.ServletHandler:void addServletMapping(org.eclipse.jetty.servlet.ServletMapping)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletHolder$Registration:java.util.Set addMapping(java.lang.String[])",
            "org.eclipse.jetty.webapp.StandardDescriptorProcessor:void addServletMapping(java.lang.String,org.eclipse.jetty.xml.XmlParser$Node,org.eclipse.jetty.webapp.WebAppContext)",
            "org.eclipse.jetty.webapp.StandardDescriptorProcessor:void visitJspConfig(org.eclipse.jetty.webapp.WebAppContext,org.eclipse.jetty.webapp.Descriptor,org.eclipse.jetty.xml.XmlParser$Node)",
            "org.eclipse.jetty.annotations.WebServletAnnotation:void apply()"
        ]
    },
    "org.eclipse.jetty.servlet.ServletHolder:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()"
        ]
    },
    "org.eclipse.jetty.servlet.ServletHolder:javax.servlet.Servlet getServlet()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.Invoker:void service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.servlet.ServletHolder:boolean isAvailable()",
            "org.eclipse.jetty.servlet.ServletHolder:void handle(org.eclipse.jetty.server.Request,javax.servlet.ServletRequest,javax.servlet.ServletResponse)"
        ]
    },
    "org.eclipse.jetty.webapp.WebAppContext:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.HotSwapHandler:void destroy()",
            "org.eclipse.jetty.server.handler.HandlerCollection:void destroy()",
            "org.eclipse.jetty.server.handler.HandlerWrapper:void destroy()",
            "org.eclipse.jetty.deploy.bindings.StandardUndeployer:void recursiveRemoveContext(org.eclipse.jetty.server.handler.HandlerCollection,org.eclipse.jetty.server.handler.ContextHandler)",
            "org.eclipse.jetty.util.component.AggregateLifeCycle:void destroy()"
        ]
    },
    "org.eclipse.jetty.deploy.bindings.StandardUndeployer:void processBinding(org.eclipse.jetty.deploy.graph.Node,org.eclipse.jetty.deploy.App)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.deploy.bindings.OrderedGroupBinding:void processBinding(org.eclipse.jetty.deploy.graph.Node,org.eclipse.jetty.deploy.App)",
            "org.eclipse.jetty.deploy.AppLifeCycle:void runBindings(org.eclipse.jetty.deploy.graph.Node,org.eclipse.jetty.deploy.App,org.eclipse.jetty.deploy.DeploymentManager)"
        ]
    },
    "org.eclipse.jetty.server.handler.AbstractHandler:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.HotSwapHandler:void destroy()",
            "org.eclipse.jetty.server.handler.HandlerCollection:void destroy()",
            "org.eclipse.jetty.server.handler.HandlerWrapper:void destroy()",
            "org.eclipse.jetty.deploy.bindings.StandardUndeployer:void recursiveRemoveContext(org.eclipse.jetty.server.handler.HandlerCollection,org.eclipse.jetty.server.handler.ContextHandler)",
            "org.eclipse.jetty.util.component.AggregateLifeCycle:void destroy()"
        ]
    },
    "org.eclipse.jetty.deploy.DeploymentManager:void addApp(org.eclipse.jetty.deploy.App)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.deploy.providers.ScanningAppProvider:void fileAdded(java.lang.String)",
            "org.eclipse.jetty.deploy.providers.ScanningAppProvider:void fileChanged(java.lang.String)"
        ]
    },
    "org.eclipse.jetty.deploy.DeploymentManager:void requestAppGoal(org.eclipse.jetty.deploy.App,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.deploy.DeploymentManager:void removeApp(org.eclipse.jetty.deploy.App)"
        ]
    },
    "org.eclipse.jetty.deploy.DeploymentManager:void requestAppGoal(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.deploy.jmx.DeploymentManagerMBean:void requestAppGoal(java.lang.String,java.lang.String)"
        ]
    },
    "org.eclipse.jetty.deploy.DeploymentManager:void undeployAll()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.deploy.ContextDeployer$ScannerListener:void fileChanged(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.Scanner:void reportChange(java.lang.String)"
        ]
    },
    "org.eclipse.jetty.util.Scanner:void reportAddition(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.Scanner:void reportDifferences(java.util.Map,java.util.Map)"
        ]
    },
    "org.eclipse.jetty.server.AsyncContinuation:boolean unhandle()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.HttpConnection:void handleRequest()"
        ]
    },
    "org.eclipse.jetty.client.HttpExchange$Listener:void onResponseComplete()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.client.HttpEventListenerWrapper:void onResponseComplete()",
            "org.eclipse.jetty.client.HttpExchange:void setStatus(int)"
        ]
    },
    "org.eclipse.jetty.client.HttpExchange$Listener:void onException(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.client.HttpDestination:void onException(java.lang.Throwable)",
            "org.eclipse.jetty.client.HttpConnection:org.eclipse.jetty.io.Connection handle()",
            "org.eclipse.jetty.client.HttpConnection:void close()",
            "org.eclipse.jetty.client.HttpEventListenerWrapper:void onException(java.lang.Throwable)"
        ]
    },
    "org.eclipse.jetty.client.HttpExchange$Listener:void onExpire()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.client.HttpEventListenerWrapper:void onExpire()",
            "org.eclipse.jetty.client.HttpExchange:void setStatus(int)"
        ]
    },
    "org.eclipse.jetty.client.HttpEventListenerWrapper:void onConnectionFailed(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.client.HttpDestination:void onConnectionFailed(java.lang.Throwable)",
            "org.eclipse.jetty.client.HttpEventListenerWrapper:void onConnectionFailed(java.lang.Throwable)"
        ]
    },
    "org.eclipse.jetty.client.webdav.WebdavListener:boolean resolveCollectionIssues()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.client.webdav.WebdavListener:void onResponseComplete()",
            "org.eclipse.jetty.client.webdav.WebdavListener:void onRequestComplete()"
        ]
    },
    "org.eclipse.jetty.client.RedirectListener:void onRequestComplete()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.client.HttpConnection:org.eclipse.jetty.io.Connection handle()",
            "org.eclipse.jetty.client.HttpEventListenerWrapper:void onRequestComplete()"
        ]
    },
    "org.eclipse.jetty.client.RedirectListener:void onResponseComplete()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.client.HttpEventListenerWrapper:void onResponseComplete()",
            "org.eclipse.jetty.client.HttpExchange:void setStatus(int)"
        ]
    },
    "org.eclipse.jetty.client.HttpEventListenerWrapper:void onResponseComplete()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.client.webdav.WebdavListener:void onResponseComplete()",
            "org.eclipse.jetty.client.security.SecurityListener:void onResponseComplete()",
            "org.eclipse.jetty.client.RedirectListener:void onResponseComplete()",
            "org.eclipse.jetty.client.HttpEventListenerWrapper:void onResponseComplete()",
            "org.eclipse.jetty.client.HttpExchange:void setStatus(int)"
        ]
    },
    "org.eclipse.jetty.client.HttpExchange:void setStatus(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.client.HttpDestination:void onConnectionFailed(java.lang.Throwable)",
            "org.eclipse.jetty.client.HttpDestination:void onException(java.lang.Throwable)",
            "org.eclipse.jetty.client.HttpClient:void send(org.eclipse.jetty.client.HttpExchange)",
            "org.eclipse.jetty.client.HttpConnection:boolean send(org.eclipse.jetty.client.HttpExchange)",
            "org.eclipse.jetty.client.HttpConnection:org.eclipse.jetty.io.Connection handle()",
            "org.eclipse.jetty.client.HttpConnection:void commitRequest()",
            "org.eclipse.jetty.client.HttpConnection:void close()",
            "org.eclipse.jetty.client.HttpConnection$Handler:void startResponse(org.eclipse.jetty.io.Buffer,int,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.client.HttpConnection$Handler:void headerComplete()",
            "org.eclipse.jetty.client.HttpConnection$Handler:void messageComplete(long)",
            "org.eclipse.jetty.client.HttpExchange:void expire(org.eclipse.jetty.client.HttpDestination)",
            "org.eclipse.jetty.client.HttpExchange:void reset()",
            "org.eclipse.jetty.client.HttpExchange:void cancel()",
            "org.eclipse.jetty.client.HttpExchange:org.eclipse.jetty.client.HttpConnection disassociate()"
        ]
    },
    "org.eclipse.jetty.client.HttpEventListenerWrapper:void onRequestComplete()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.client.webdav.WebdavListener:void onRequestComplete()",
            "org.eclipse.jetty.client.security.SecurityListener:void onRequestComplete()",
            "org.eclipse.jetty.client.RedirectListener:void onRequestComplete()",
            "org.eclipse.jetty.client.HttpConnection:org.eclipse.jetty.io.Connection handle()",
            "org.eclipse.jetty.client.HttpEventListenerWrapper:void onRequestComplete()"
        ]
    },
    "org.eclipse.jetty.server.session.JDBCSessionIdManager:void scavenge()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.JDBCSessionIdManager:void access$000(org.eclipse.jetty.server.session.JDBCSessionIdManager)"
        ]
    },
    "org.eclipse.jetty.server.session.JDBCSessionManager:void doStop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void stop()"
        ]
    },
    "org.eclipse.jetty.server.session.HashSessionManager:void doStop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void stop()"
        ]
    },
    "org.eclipse.jetty.server.session.AbstractSession:java.lang.Object getAttribute(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.AbstractSession:java.lang.Object getValue(java.lang.String)",
            "org.eclipse.jetty.security.jaspi.modules.FormAuthModule:javax.security.auth.message.AuthStatus validateRequest(javax.security.auth.message.MessageInfo,javax.security.auth.Subject,javax.security.auth.Subject)",
            "org.eclipse.jetty.security.authentication.FormAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)",
            "org.eclipse.jetty.security.authentication.SessionAuthentication:void logout()",
            "org.eclipse.jetty.security.authentication.LoginAuthenticator:javax.servlet.http.HttpSession renewSessionOnAuthentication(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.session.AbstractSession:int getAttributes()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.HashedSession:void save(java.io.OutputStream)"
        ]
    },
    "org.eclipse.jetty.server.session.AbstractSession:java.util.Enumeration getAttributeNames()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.HashedSession:void save(java.io.OutputStream)",
            "org.eclipse.jetty.security.authentication.LoginAuthenticator:javax.servlet.http.HttpSession renewSessionOnAuthentication(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.session.AbstractSession:long getLastAccessedTime()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.session.AbstractSession:int getMaxInactiveInterval()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.JDBCSessionManager$Session:void <init>(org.eclipse.jetty.server.session.JDBCSessionManager,javax.servlet.http.HttpServletRequest)",
            "org.eclipse.jetty.server.session.JDBCSessionManager$Session:boolean access(long)",
            "org.eclipse.jetty.server.session.HashSessionManager:void scavenge()",
            "org.eclipse.jetty.server.session.HashedSession:void setMaxInactiveInterval(int)"
        ]
    },
    "org.eclipse.jetty.server.session.AbstractSession:javax.servlet.http.HttpSessionContext getSessionContext()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.session.AbstractSession:java.lang.String[] getValueNames()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.session.AbstractSession:boolean isNew()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlets.DoSFilter:org.eclipse.jetty.servlets.DoSFilter$RateTracker getRateTracker(javax.servlet.ServletRequest)",
            "org.eclipse.jetty.servlets.QoSFilter:int getPriority(javax.servlet.ServletRequest)"
        ]
    },
    "org.eclipse.jetty.server.session.AbstractSession:void setAttribute(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlets.DoSFilter:org.eclipse.jetty.servlets.DoSFilter$RateTracker getRateTracker(javax.servlet.ServletRequest)",
            "org.eclipse.jetty.server.session.AbstractSession:void putValue(java.lang.String,java.lang.Object)",
            "org.eclipse.jetty.server.session.AbstractSession:void removeAttribute(java.lang.String)",
            "org.eclipse.jetty.server.session.JDBCSessionManager$Session:void setAttribute(java.lang.String,java.lang.Object)",
            "org.eclipse.jetty.server.session.HashSessionManager:org.eclipse.jetty.server.session.HashedSession restoreSession(java.io.InputStream,org.eclipse.jetty.server.session.HashedSession)",
            "org.eclipse.jetty.security.jaspi.modules.FormAuthModule:javax.security.auth.message.AuthStatus validateRequest(javax.security.auth.message.MessageInfo,javax.security.auth.Subject,javax.security.auth.Subject)",
            "org.eclipse.jetty.security.jaspi.modules.FormAuthModule:boolean tryLogin(javax.security.auth.message.MessageInfo,javax.security.auth.Subject,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,java.lang.String,org.eclipse.jetty.http.security.Password)",
            "org.eclipse.jetty.security.authentication.FormAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)",
            "org.eclipse.jetty.security.authentication.LoginAuthenticator:javax.servlet.http.HttpSession renewSessionOnAuthentication(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.util.thread.QueuedThreadPool:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()"
        ]
    },
    "org.eclipse.jetty.util.thread.QueuedThreadPool:void setMinThreads(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.util.thread.QueuedThreadPool:boolean dispatch(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ConnectHandler:void doStart()",
            "org.eclipse.jetty.server.handler.HandlerCollection:void doStart()",
            "org.eclipse.jetty.server.handler.ConnectHandler$Manager:boolean dispatch(java.lang.Runnable)",
            "org.eclipse.jetty.server.nio.BlockingChannelConnector$BlockingChannelEndPoint:void dispatch()",
            "org.eclipse.jetty.server.nio.SelectChannelConnector$ConnectorSelectorManager:boolean dispatch(java.lang.Runnable)",
            "org.eclipse.jetty.server.nio.BlockingChannelConnector:void doStart()",
            "org.eclipse.jetty.server.bio.SocketConnector$ConnectorEndPoint:void dispatch()",
            "org.eclipse.jetty.server.AbstractConnector:void doStart()",
            "org.eclipse.jetty.server.LocalConnector:void accept(int)",
            "org.eclipse.jetty.server.AsyncContinuation:void start(java.lang.Runnable)",
            "org.eclipse.jetty.client.SelectConnector$Manager:boolean dispatch(java.lang.Runnable)",
            "org.eclipse.jetty.client.SocketConnector:void startConnection(org.eclipse.jetty.client.HttpDestination)",
            "org.eclipse.jetty.client.HttpClient:void doStart()",
            "org.eclipse.jetty.client.SelectConnector:void doStart()",
            "org.eclipse.jetty.websocket.WebSocketClient$WebSocketClientSelector:boolean dispatch(java.lang.Runnable)",
            "org.eclipse.jetty.websocket.WebSocketClient:void doStart()",
            "org.eclipse.jetty.util.thread.QueuedThreadPool:void execute(java.lang.Runnable)",
            "org.eclipse.jetty.util.IO:void copyThread(java.io.InputStream,java.io.OutputStream)",
            "org.eclipse.jetty.util.IO:void copyThread(java.io.Reader,java.io.Writer)"
        ]
    },
    "org.eclipse.jetty.servlet.ServletHolder:void doStop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void stop()"
        ]
    },
    "org.eclipse.jetty.servlet.ServletContextHandler:void <init>(org.eclipse.jetty.server.HandlerContainer,java.lang.String,org.eclipse.jetty.server.session.SessionHandler,org.eclipse.jetty.security.SecurityHandler,org.eclipse.jetty.servlet.ServletHandler,org.eclipse.jetty.server.handler.ErrorHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletContextHandler:void <init>(org.eclipse.jetty.server.HandlerContainer,java.lang.String)",
            "org.eclipse.jetty.servlet.ServletContextHandler:void <init>(org.eclipse.jetty.server.HandlerContainer,java.lang.String,int)",
            "org.eclipse.jetty.servlet.ServletContextHandler:void <init>(org.eclipse.jetty.server.HandlerContainer,org.eclipse.jetty.server.session.SessionHandler,org.eclipse.jetty.security.SecurityHandler,org.eclipse.jetty.servlet.ServletHandler,org.eclipse.jetty.server.handler.ErrorHandler)"
        ]
    },
    "org.eclipse.jetty.server.handler.ContextHandlerCollection:org.eclipse.jetty.server.handler.ContextHandler addContext(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.handler.ContextHandler:void <init>(org.eclipse.jetty.server.HandlerContainer,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.MovedContextHandler:void <init>(org.eclipse.jetty.server.HandlerContainer,java.lang.String,java.lang.String)"
        ]
    },
    "org.eclipse.jetty.deploy.bindings.StandardDeployer:void processBinding(org.eclipse.jetty.deploy.graph.Node,org.eclipse.jetty.deploy.App)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.deploy.bindings.OrderedGroupBinding:void processBinding(org.eclipse.jetty.deploy.graph.Node,org.eclipse.jetty.deploy.App)",
            "org.eclipse.jetty.deploy.AppLifeCycle:void runBindings(org.eclipse.jetty.deploy.graph.Node,org.eclipse.jetty.deploy.App,org.eclipse.jetty.deploy.DeploymentManager)"
        ]
    },
    "org.eclipse.jetty.webapp.WebAppContext:void doStop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void stop()"
        ]
    },
    "org.eclipse.jetty.deploy.ContextDeployer$ScannerListener:void fileRemoved(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.Scanner:void reportRemoval(java.lang.String)"
        ]
    },
    "org.eclipse.jetty.servlet.ErrorPageErrorHandler:void doStop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void stop()"
        ]
    },
    "org.eclipse.jetty.rewrite.handler.RegexRule:java.lang.String matchAndApply(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.rewrite.handler.RuleContainer:java.lang.String apply(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.websocket.TestClient:boolean onFrame(byte,byte,byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.WebSocketConnectionD10$WSFrameHandler:void onFrame(byte,byte,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD06$FrameHandlerD06:void onFrame(byte,byte,org.eclipse.jetty.io.Buffer)"
        ]
    },
    "org.eclipse.jetty.servlet.ServletHandler:org.eclipse.jetty.servlet.FilterHolder addFilterWithMapping(java.lang.Class,java.lang.String,java.util.EnumSet)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletContextHandler:org.eclipse.jetty.servlet.FilterHolder addFilter(java.lang.Class,java.lang.String,java.util.EnumSet)"
        ]
    },
    "org.eclipse.jetty.servlet.ServletHandler:org.eclipse.jetty.servlet.FilterHolder addFilterWithMapping(java.lang.String,java.lang.String,java.util.EnumSet)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletHandler:org.eclipse.jetty.servlet.FilterHolder addFilter(java.lang.String,java.lang.String,java.util.EnumSet)",
            "org.eclipse.jetty.servlet.ServletContextHandler:org.eclipse.jetty.servlet.FilterHolder addFilter(java.lang.String,java.lang.String,java.util.EnumSet)"
        ]
    },
    "org.eclipse.jetty.servlet.ServletContextHandler:void addFilter(org.eclipse.jetty.servlet.FilterHolder,java.lang.String,java.util.EnumSet)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.servlet.ServletHandler:org.eclipse.jetty.servlet.FilterHolder addFilterWithMapping(java.lang.Class,java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.servlet.ServletHandler:org.eclipse.jetty.servlet.FilterHolder addFilterWithMapping(java.lang.String,java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.servlet.FilterHolder$Registration:void addMappingForServletNames(java.util.EnumSet,boolean,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.servlet.FilterHolder$Registration:void addMappingForUrlPatterns(java.util.EnumSet,boolean,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.webapp.StandardDescriptorProcessor:void addFilterMapping(java.lang.String,org.eclipse.jetty.xml.XmlParser$Node,org.eclipse.jetty.webapp.WebAppContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.webapp.StandardDescriptorProcessor:void visitFilterMapping(org.eclipse.jetty.webapp.WebAppContext,org.eclipse.jetty.webapp.Descriptor,org.eclipse.jetty.xml.XmlParser$Node)"
        ]
    },
    "org.eclipse.jetty.annotations.WebFilterAnnotation:void apply()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.webapp.MetaData:void resolve(org.eclipse.jetty.webapp.WebAppContext)"
        ]
    },
    "org.eclipse.jetty.webapp.CloneConfiguration:void deconfigure(org.eclipse.jetty.webapp.WebAppContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.webapp.WebAppContext:void doStop()",
            "org.eclipse.jetty.webapp.CloneConfiguration:void deconfigure(org.eclipse.jetty.webapp.WebAppContext)"
        ]
    },
    "org.eclipse.jetty.servlet.ServletHandler:org.eclipse.jetty.servlet.ServletHolder addServletWithMapping(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.Invoker:void service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.servlet.ServletContextHandler:org.eclipse.jetty.servlet.ServletHolder addServlet(java.lang.String,java.lang.String)",
            "org.eclipse.jetty.servlet.ServletContextHandler:org.eclipse.jetty.servlet.ServletHolder addServlet(java.lang.Class,java.lang.String)"
        ]
    },
    "org.eclipse.jetty.servlet.ServletHandler:org.eclipse.jetty.servlet.ServletHolder addServletWithMapping(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.servlet.ServletContextHandler:void addServlet(org.eclipse.jetty.servlet.ServletHolder,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.servlet.ServletHolder$Registration:java.util.Set addMapping(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.webapp.StandardDescriptorProcessor:void addServletMapping(java.lang.String,org.eclipse.jetty.xml.XmlParser$Node,org.eclipse.jetty.webapp.WebAppContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.webapp.StandardDescriptorProcessor:void visitServletMapping(org.eclipse.jetty.webapp.WebAppContext,org.eclipse.jetty.webapp.Descriptor,org.eclipse.jetty.xml.XmlParser$Node)"
        ]
    },
    "org.eclipse.jetty.webapp.StandardDescriptorProcessor:void visitJspConfig(org.eclipse.jetty.webapp.WebAppContext,org.eclipse.jetty.webapp.Descriptor,org.eclipse.jetty.xml.XmlParser$Node)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.annotations.WebServletAnnotation:void apply()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.webapp.MetaData:void resolve(org.eclipse.jetty.webapp.WebAppContext)"
        ]
    },
    "org.eclipse.jetty.servlet.ServletHolder:boolean isAvailable()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletHandler:boolean isAvailable()"
        ]
    },
    "org.eclipse.jetty.deploy.providers.ScanningAppProvider:void fileAdded(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.deploy.providers.ScanningAppProvider$1:void fileAdded(java.lang.String)"
        ]
    },
    "org.eclipse.jetty.deploy.providers.ScanningAppProvider:void fileChanged(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.deploy.providers.ScanningAppProvider$1:void fileChanged(java.lang.String)"
        ]
    },
    "org.eclipse.jetty.deploy.DeploymentManager:void removeApp(org.eclipse.jetty.deploy.App)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.deploy.providers.ScanningAppProvider:void fileChanged(java.lang.String)",
            "org.eclipse.jetty.deploy.providers.ScanningAppProvider:void fileRemoved(java.lang.String)"
        ]
    },
    "org.eclipse.jetty.deploy.jmx.DeploymentManagerMBean:void requestAppGoal(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.util.Scanner:void reportChange(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.Scanner:void reportDifferences(java.util.Map,java.util.Map)"
        ]
    },
    "org.eclipse.jetty.util.Scanner:void reportDifferences(java.util.Map,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.Scanner:void scan()"
        ]
    },
    "org.eclipse.jetty.client.HttpDestination:void onException(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.client.SocketConnector$1:void run()"
        ]
    },
    "org.eclipse.jetty.client.HttpEventListenerWrapper:void onException(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.client.HttpDestination:void onException(java.lang.Throwable)",
            "org.eclipse.jetty.client.HttpConnection:org.eclipse.jetty.io.Connection handle()",
            "org.eclipse.jetty.client.HttpConnection:void close()",
            "org.eclipse.jetty.client.HttpEventListenerWrapper:void onException(java.lang.Throwable)"
        ]
    },
    "org.eclipse.jetty.client.HttpEventListenerWrapper:void onExpire()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.client.HttpEventListenerWrapper:void onExpire()",
            "org.eclipse.jetty.client.HttpExchange:void setStatus(int)"
        ]
    },
    "org.eclipse.jetty.client.HttpConnection$Handler:void startResponse(org.eclipse.jetty.io.Buffer,int,org.eclipse.jetty.io.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.http.HttpParser:int parseNext()"
        ]
    },
    "org.eclipse.jetty.client.HttpConnection$Handler:void headerComplete()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.http.HttpParser:int parseNext()"
        ]
    },
    "org.eclipse.jetty.client.HttpConnection$Handler:void messageComplete(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.http.HttpParser:int parseNext()"
        ]
    },
    "org.eclipse.jetty.client.HttpExchange:void reset()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.client.HttpDestination:void resend(org.eclipse.jetty.client.HttpExchange)",
            "org.eclipse.jetty.client.RedirectListener:boolean checkExchangeComplete()"
        ]
    },
    "org.eclipse.jetty.client.HttpExchange:org.eclipse.jetty.client.HttpConnection disassociate()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.client.HttpConnection:boolean send(org.eclipse.jetty.client.HttpExchange)",
            "org.eclipse.jetty.client.HttpExchange$Listener:void onRequestComplete()",
            "org.eclipse.jetty.client.HttpExchange$Listener:void onResponseComplete()",
            "org.eclipse.jetty.client.HttpExchange:void done()",
            "org.eclipse.jetty.client.HttpExchange:void abort()"
        ]
    },
    "org.eclipse.jetty.server.session.JDBCSessionIdManager:void access$000(org.eclipse.jetty.server.session.JDBCSessionIdManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.JDBCSessionIdManager$1:void run()"
        ]
    },
    "org.eclipse.jetty.server.session.AbstractSession:java.lang.Object getValue(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.security.authentication.SessionAuthentication:void logout()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.Request:void logout()"
        ]
    },
    "org.eclipse.jetty.server.session.HashedSession:void save(java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.HashedSession:void save(boolean)"
        ]
    },
    "org.eclipse.jetty.server.session.JDBCSessionManager$Session:void <init>(org.eclipse.jetty.server.session.JDBCSessionManager,javax.servlet.http.HttpServletRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.JDBCSessionManager:org.eclipse.jetty.server.session.AbstractSession newSession(javax.servlet.http.HttpServletRequest)"
        ]
    },
    "org.eclipse.jetty.server.session.HashedSession:void setMaxInactiveInterval(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.AbstractSessionManager:javax.servlet.http.HttpSession newHttpSession(javax.servlet.http.HttpServletRequest)"
        ]
    },
    "org.eclipse.jetty.servlets.DoSFilter:org.eclipse.jetty.servlets.DoSFilter$RateTracker getRateTracker(javax.servlet.ServletRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlets.DoSFilter:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)"
        ]
    },
    "org.eclipse.jetty.server.session.AbstractSession:void putValue(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.session.AbstractSession:void removeAttribute(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.AbstractSession:void removeValue(java.lang.String)",
            "org.eclipse.jetty.server.session.JDBCSessionManager$Session:void removeAttribute(java.lang.String)",
            "org.eclipse.jetty.security.jaspi.modules.FormAuthModule:javax.security.auth.message.AuthStatus validateRequest(javax.security.auth.message.MessageInfo,javax.security.auth.Subject,javax.security.auth.Subject)",
            "org.eclipse.jetty.security.authentication.FormAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)",
            "org.eclipse.jetty.security.authentication.SessionAuthentication:void logout()",
            "org.eclipse.jetty.security.authentication.SessionAuthentication:void doLogout()",
            "org.eclipse.jetty.security.authentication.LoginAuthenticator:javax.servlet.http.HttpSession renewSessionOnAuthentication(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.session.JDBCSessionManager$Session:void setAttribute(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlets.DoSFilter:org.eclipse.jetty.servlets.DoSFilter$RateTracker getRateTracker(javax.servlet.ServletRequest)",
            "org.eclipse.jetty.server.session.AbstractSession:void putValue(java.lang.String,java.lang.Object)",
            "org.eclipse.jetty.server.session.AbstractSession:void removeAttribute(java.lang.String)",
            "org.eclipse.jetty.security.jaspi.modules.FormAuthModule:javax.security.auth.message.AuthStatus validateRequest(javax.security.auth.message.MessageInfo,javax.security.auth.Subject,javax.security.auth.Subject)",
            "org.eclipse.jetty.security.jaspi.modules.FormAuthModule:boolean tryLogin(javax.security.auth.message.MessageInfo,javax.security.auth.Subject,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession,java.lang.String,org.eclipse.jetty.http.security.Password)",
            "org.eclipse.jetty.security.authentication.FormAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)",
            "org.eclipse.jetty.security.authentication.LoginAuthenticator:javax.servlet.http.HttpSession renewSessionOnAuthentication(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.session.HashSessionManager:org.eclipse.jetty.server.session.HashedSession restoreSession(java.io.InputStream,org.eclipse.jetty.server.session.HashedSession)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.HashSessionManager:org.eclipse.jetty.server.session.HashedSession restoreSession(java.lang.String)",
            "org.eclipse.jetty.server.session.HashedSession:void deIdle()"
        ]
    },
    "org.eclipse.jetty.util.thread.QueuedThreadPool:void execute(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.servlet.ServletContextHandler:void <init>(org.eclipse.jetty.server.HandlerContainer,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.servlet.ServletContextHandler:void <init>(org.eclipse.jetty.server.HandlerContainer,java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletContextHandler:void <init>(int)",
            "org.eclipse.jetty.servlet.ServletContextHandler:void <init>(org.eclipse.jetty.server.HandlerContainer,java.lang.String,boolean,boolean)",
            "org.eclipse.jetty.webapp.WebAppContext:void <init>(java.lang.String,java.lang.String)",
            "org.eclipse.jetty.webapp.WebAppContext:void <init>(org.eclipse.jetty.server.HandlerContainer,java.lang.String,java.lang.String)"
        ]
    },
    "org.eclipse.jetty.servlet.ServletContextHandler:void <init>(org.eclipse.jetty.server.HandlerContainer,org.eclipse.jetty.server.session.SessionHandler,org.eclipse.jetty.security.SecurityHandler,org.eclipse.jetty.servlet.ServletHandler,org.eclipse.jetty.server.handler.ErrorHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletContextHandler:void <init>()",
            "org.eclipse.jetty.webapp.WebAppContext:void <init>(org.eclipse.jetty.server.session.SessionHandler,org.eclipse.jetty.security.SecurityHandler,org.eclipse.jetty.servlet.ServletHandler,org.eclipse.jetty.server.handler.ErrorHandler)"
        ]
    },
    "org.eclipse.jetty.server.handler.MovedContextHandler:void <init>(org.eclipse.jetty.server.HandlerContainer,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.util.Scanner:void reportRemoval(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.Scanner:void reportDifferences(java.util.Map,java.util.Map)"
        ]
    },
    "org.eclipse.jetty.servlet.ServletContextHandler:org.eclipse.jetty.servlet.FilterHolder addFilter(java.lang.Class,java.lang.String,java.util.EnumSet)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.servlet.ServletHandler:org.eclipse.jetty.servlet.FilterHolder addFilter(java.lang.String,java.lang.String,java.util.EnumSet)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.servlet.ServletContextHandler:org.eclipse.jetty.servlet.FilterHolder addFilter(java.lang.String,java.lang.String,java.util.EnumSet)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.webapp.StandardDescriptorProcessor:void visitFilterMapping(org.eclipse.jetty.webapp.WebAppContext,org.eclipse.jetty.webapp.Descriptor,org.eclipse.jetty.xml.XmlParser$Node)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.webapp.MetaData:void resolve(org.eclipse.jetty.webapp.WebAppContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.webapp.WebAppContext:void startContext()"
        ]
    },
    "org.eclipse.jetty.servlet.ServletContextHandler:org.eclipse.jetty.servlet.ServletHolder addServlet(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.servlet.ServletContextHandler:org.eclipse.jetty.servlet.ServletHolder addServlet(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.webapp.StandardDescriptorProcessor:void visitServletMapping(org.eclipse.jetty.webapp.WebAppContext,org.eclipse.jetty.webapp.Descriptor,org.eclipse.jetty.xml.XmlParser$Node)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.servlet.ServletHandler:boolean isAvailable()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.deploy.providers.ScanningAppProvider$1:void fileAdded(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.Scanner:void reportAddition(java.lang.String)"
        ]
    },
    "org.eclipse.jetty.deploy.providers.ScanningAppProvider$1:void fileChanged(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.Scanner:void reportChange(java.lang.String)"
        ]
    },
    "org.eclipse.jetty.deploy.providers.ScanningAppProvider:void fileRemoved(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.deploy.providers.ScanningAppProvider$1:void fileRemoved(java.lang.String)"
        ]
    },
    "org.eclipse.jetty.util.Scanner:void scan()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.deploy.ContextDeployer:void doStart()",
            "org.eclipse.jetty.util.Scanner:void doStart()",
            "org.eclipse.jetty.util.Scanner$1:void run()"
        ]
    },
    "org.eclipse.jetty.client.HttpExchange$Listener:void onRequestComplete()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.client.HttpConnection:org.eclipse.jetty.io.Connection handle()",
            "org.eclipse.jetty.client.HttpEventListenerWrapper:void onRequestComplete()"
        ]
    },
    "org.eclipse.jetty.client.HttpExchange:void done()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.client.HttpExchange:void setStatus(int)",
            "org.eclipse.jetty.client.HttpExchange:void access$100(org.eclipse.jetty.client.HttpExchange)"
        ]
    },
    "org.eclipse.jetty.server.session.JDBCSessionIdManager$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ContextHandler:void handle(java.lang.Runnable)",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:void sslClose()",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int fill(org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int flush(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.io.nio.SelectorManager$SelectSet:void doSelect()",
            "org.eclipse.jetty.util.thread.QueuedThreadPool$3:void run()",
            "org.eclipse.jetty.util.thread.ExecutorThreadPool:boolean dispatch(java.lang.Runnable)"
        ]
    },
    "org.eclipse.jetty.server.Request:void logout()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.session.HashedSession:void save(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.HashSessionManager:void invalidateSessions()",
            "org.eclipse.jetty.server.session.HashSessionManager:void saveSessions(boolean)",
            "org.eclipse.jetty.server.session.HashedSession:void idle()"
        ]
    },
    "org.eclipse.jetty.server.session.JDBCSessionManager:org.eclipse.jetty.server.session.AbstractSession newSession(javax.servlet.http.HttpServletRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.AbstractSessionManager:javax.servlet.http.HttpSession newHttpSession(javax.servlet.http.HttpServletRequest)"
        ]
    },
    "org.eclipse.jetty.server.session.AbstractSessionManager:javax.servlet.http.HttpSession newHttpSession(javax.servlet.http.HttpServletRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.Request:javax.servlet.http.HttpSession getSession(boolean)"
        ]
    },
    "org.eclipse.jetty.server.session.AbstractSession:void removeValue(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.session.JDBCSessionManager$Session:void removeAttribute(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.AbstractSession:void removeValue(java.lang.String)",
            "org.eclipse.jetty.security.jaspi.modules.FormAuthModule:javax.security.auth.message.AuthStatus validateRequest(javax.security.auth.message.MessageInfo,javax.security.auth.Subject,javax.security.auth.Subject)",
            "org.eclipse.jetty.security.authentication.FormAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)",
            "org.eclipse.jetty.security.authentication.SessionAuthentication:void logout()",
            "org.eclipse.jetty.security.authentication.SessionAuthentication:void doLogout()",
            "org.eclipse.jetty.security.authentication.LoginAuthenticator:javax.servlet.http.HttpSession renewSessionOnAuthentication(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.security.authentication.SessionAuthentication:void doLogout()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.security.authentication.SessionAuthentication:void logout()",
            "org.eclipse.jetty.security.authentication.SessionAuthentication:void valueUnbound(javax.servlet.http.HttpSessionBindingEvent)"
        ]
    },
    "org.eclipse.jetty.server.session.HashSessionManager:org.eclipse.jetty.server.session.HashedSession restoreSession(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.HashSessionManager:org.eclipse.jetty.server.session.AbstractSession getSession(java.lang.String)",
            "org.eclipse.jetty.server.session.HashSessionManager:void restoreSessions()"
        ]
    },
    "org.eclipse.jetty.servlet.ServletContextHandler:void <init>(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.webapp.WebAppContext:void <init>()"
        ]
    },
    "org.eclipse.jetty.servlet.ServletContextHandler:void <init>(org.eclipse.jetty.server.HandlerContainer,java.lang.String,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.webapp.WebAppContext:void <init>(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.webapp.WebAppContext:void <init>(org.eclipse.jetty.server.HandlerContainer,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.servlet.ServletContextHandler:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.webapp.WebAppContext:void <init>(org.eclipse.jetty.server.session.SessionHandler,org.eclipse.jetty.security.SecurityHandler,org.eclipse.jetty.servlet.ServletHandler,org.eclipse.jetty.server.handler.ErrorHandler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.deploy.providers.ScanningAppProvider$1:void fileRemoved(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.Scanner:void reportRemoval(java.lang.String)"
        ]
    },
    "org.eclipse.jetty.util.Scanner:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()"
        ]
    },
    "org.eclipse.jetty.util.Scanner$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ContextHandler:void handle(java.lang.Runnable)",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:void sslClose()",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int fill(org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int flush(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.io.nio.SelectorManager$SelectSet:void doSelect()",
            "org.eclipse.jetty.util.thread.QueuedThreadPool$3:void run()",
            "org.eclipse.jetty.util.thread.ExecutorThreadPool:boolean dispatch(java.lang.Runnable)"
        ]
    },
    "org.eclipse.jetty.client.HttpExchange:void access$100(org.eclipse.jetty.client.HttpExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.client.HttpExchange$Listener:void onConnectionFailed(java.lang.Throwable)",
            "org.eclipse.jetty.client.HttpExchange$Listener:void onException(java.lang.Throwable)",
            "org.eclipse.jetty.client.HttpExchange$Listener:void onExpire()"
        ]
    },
    "org.eclipse.jetty.server.session.HashSessionManager:void saveSessions(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.HashSessionManager$1:void run()"
        ]
    },
    "org.eclipse.jetty.server.session.HashedSession:void idle()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.HashSessionManager:void scavenge()"
        ]
    },
    "org.eclipse.jetty.server.Request:javax.servlet.http.HttpSession getSession(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlets.DoSFilter:org.eclipse.jetty.servlets.DoSFilter$RateTracker getRateTracker(javax.servlet.ServletRequest)",
            "org.eclipse.jetty.servlets.QoSFilter:int getPriority(javax.servlet.ServletRequest)",
            "org.eclipse.jetty.server.session.SessionHandler:void doScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.Response:java.lang.String encodeURL(java.lang.String)",
            "org.eclipse.jetty.server.Request:javax.servlet.http.HttpSession getSession()",
            "org.eclipse.jetty.server.Request:boolean isRequestedSessionIdValid()",
            "org.eclipse.jetty.security.jaspi.modules.FormAuthModule:javax.security.auth.message.AuthStatus validateRequest(javax.security.auth.message.MessageInfo,javax.security.auth.Subject,javax.security.auth.Subject)",
            "org.eclipse.jetty.security.authentication.FormAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)",
            "org.eclipse.jetty.security.authentication.LoginAuthenticator:javax.servlet.http.HttpSession renewSessionOnAuthentication(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.security.authentication.SessionAuthentication:void valueUnbound(javax.servlet.http.HttpSessionBindingEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.AbstractSession:void unbindValue(java.lang.String,java.lang.Object)"
        ]
    },
    "org.eclipse.jetty.server.session.HashSessionManager:void restoreSessions()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.HashSessionManager:void doStart()",
            "org.eclipse.jetty.server.session.HashSessionManager:org.eclipse.jetty.server.session.AbstractSession getSession(java.lang.String)"
        ]
    },
    "org.eclipse.jetty.webapp.WebAppContext:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.deploy.providers.WebAppProvider:org.eclipse.jetty.server.handler.ContextHandler createContextHandler(org.eclipse.jetty.deploy.App)",
            "org.eclipse.jetty.deploy.WebAppDeployer:void scan()"
        ]
    },
    "org.eclipse.jetty.server.session.HashSessionManager$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ContextHandler:void handle(java.lang.Runnable)",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:void sslClose()",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int fill(org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int flush(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.io.nio.SelectorManager$SelectSet:void doSelect()",
            "org.eclipse.jetty.util.thread.QueuedThreadPool$3:void run()",
            "org.eclipse.jetty.util.thread.ExecutorThreadPool:boolean dispatch(java.lang.Runnable)"
        ]
    },
    "org.eclipse.jetty.server.Response:java.lang.String encodeURL(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.Response:java.lang.String encodeRedirectURL(java.lang.String)",
            "org.eclipse.jetty.server.Response:java.lang.String encodeUrl(java.lang.String)"
        ]
    },
    "org.eclipse.jetty.server.Request:javax.servlet.http.HttpSession getSession()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.Request:boolean isRequestedSessionIdValid()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.session.AbstractSession:void unbindValue(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.AbstractSession:void clearAttributes()",
            "org.eclipse.jetty.server.session.AbstractSession:void setAttribute(java.lang.String,java.lang.Object)"
        ]
    },
    "org.eclipse.jetty.deploy.providers.WebAppProvider:org.eclipse.jetty.server.handler.ContextHandler createContextHandler(org.eclipse.jetty.deploy.App)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.deploy.App:org.eclipse.jetty.server.handler.ContextHandler getContextHandler()"
        ]
    },
    "org.eclipse.jetty.server.Response:java.lang.String encodeRedirectURL(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.rewrite.handler.RedirectPatternRule:java.lang.String apply(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.rewrite.handler.RedirectRegexRule:java.lang.String apply(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.regex.Matcher)",
            "org.eclipse.jetty.servlet.DefaultServlet:void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.servlets.CGI:void exec(java.io.File,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ResourceHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.Response:java.lang.String encodeRedirectUrl(java.lang.String)",
            "org.eclipse.jetty.server.Response:void sendRedirect(java.lang.String)",
            "org.eclipse.jetty.security.jaspi.modules.FormAuthModule:javax.security.auth.message.AuthStatus validateRequest(javax.security.auth.message.MessageInfo,javax.security.auth.Subject,javax.security.auth.Subject)",
            "org.eclipse.jetty.security.authentication.FormAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)"
        ]
    },
    "org.eclipse.jetty.server.Response:java.lang.String encodeUrl(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.session.AbstractSession:void clearAttributes()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.AbstractSession:void doInvalidate()",
            "org.eclipse.jetty.server.session.HashedSession:void save(boolean)"
        ]
    },
    "org.eclipse.jetty.deploy.App:org.eclipse.jetty.server.handler.ContextHandler getContextHandler()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.deploy.bindings.StandardDeployer:void processBinding(org.eclipse.jetty.deploy.graph.Node,org.eclipse.jetty.deploy.App)",
            "org.eclipse.jetty.deploy.bindings.GlobalWebappConfigBinding:void processBinding(org.eclipse.jetty.deploy.graph.Node,org.eclipse.jetty.deploy.App)",
            "org.eclipse.jetty.deploy.bindings.StandardStopper:void processBinding(org.eclipse.jetty.deploy.graph.Node,org.eclipse.jetty.deploy.App)",
            "org.eclipse.jetty.deploy.bindings.DebugBinding:void processBinding(org.eclipse.jetty.deploy.graph.Node,org.eclipse.jetty.deploy.App)",
            "org.eclipse.jetty.deploy.bindings.StandardUndeployer:void processBinding(org.eclipse.jetty.deploy.graph.Node,org.eclipse.jetty.deploy.App)",
            "org.eclipse.jetty.deploy.bindings.StandardStarter:void processBinding(org.eclipse.jetty.deploy.graph.Node,org.eclipse.jetty.deploy.App)",
            "org.eclipse.jetty.deploy.jmx.DeploymentManagerMBean:java.util.Collection getContexts()"
        ]
    },
    "org.eclipse.jetty.server.Response:java.lang.String encodeRedirectUrl(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.session.AbstractSession:void doInvalidate()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.AbstractSession:void complete()",
            "org.eclipse.jetty.server.session.AbstractSession:void timeout()",
            "org.eclipse.jetty.server.session.AbstractSession:void invalidate()",
            "org.eclipse.jetty.server.session.HashedSession:void doInvalidate()"
        ]
    },
    "org.eclipse.jetty.deploy.bindings.GlobalWebappConfigBinding:void processBinding(org.eclipse.jetty.deploy.graph.Node,org.eclipse.jetty.deploy.App)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.deploy.bindings.OrderedGroupBinding:void processBinding(org.eclipse.jetty.deploy.graph.Node,org.eclipse.jetty.deploy.App)",
            "org.eclipse.jetty.deploy.AppLifeCycle:void runBindings(org.eclipse.jetty.deploy.graph.Node,org.eclipse.jetty.deploy.App,org.eclipse.jetty.deploy.DeploymentManager)"
        ]
    },
    "org.eclipse.jetty.deploy.bindings.DebugBinding:void processBinding(org.eclipse.jetty.deploy.graph.Node,org.eclipse.jetty.deploy.App)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.deploy.bindings.OrderedGroupBinding:void processBinding(org.eclipse.jetty.deploy.graph.Node,org.eclipse.jetty.deploy.App)",
            "org.eclipse.jetty.deploy.AppLifeCycle:void runBindings(org.eclipse.jetty.deploy.graph.Node,org.eclipse.jetty.deploy.App,org.eclipse.jetty.deploy.DeploymentManager)"
        ]
    },
    "org.eclipse.jetty.deploy.jmx.DeploymentManagerMBean:java.util.Collection getContexts()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.session.AbstractSession:void complete()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.AbstractSessionManager:void complete(javax.servlet.http.HttpSession)",
            "org.eclipse.jetty.server.session.JDBCSessionManager$Session:void complete()"
        ]
    },
    "org.eclipse.jetty.server.session.HashedSession:void doInvalidate()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.AbstractSession:void complete()",
            "org.eclipse.jetty.server.session.AbstractSession:void timeout()",
            "org.eclipse.jetty.server.session.AbstractSession:void invalidate()"
        ]
    },
    "org.eclipse.jetty.server.session.AbstractSessionManager:void complete(javax.servlet.http.HttpSession)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.SessionHandler:void doScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.session.JDBCSessionManager$Session:void complete()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.AbstractSessionManager:void complete(javax.servlet.http.HttpSession)"
        ]
    }
}