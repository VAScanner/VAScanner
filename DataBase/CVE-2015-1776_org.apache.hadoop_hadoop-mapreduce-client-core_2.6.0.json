{
    "org.apache.hadoop.mapreduce.JobSubmitter:org.apache.hadoop.mapreduce.JobStatus submitJobInternal(org.apache.hadoop.mapreduce.Job,org.apache.hadoop.mapreduce.Cluster)": {
        "isVulRoot": true,
        "vulCaller": [
            "org.apache.hadoop.mapreduce.Job$10:org.apache.hadoop.mapreduce.JobStatus run()"
        ]
    },
    "org.apache.hadoop.mapreduce.task.reduce.LocalFetcher:boolean copyMapOutput(org.apache.hadoop.mapreduce.TaskAttemptID)": {
        "isVulRoot": true,
        "vulCaller": [
            "org.apache.hadoop.mapreduce.task.reduce.LocalFetcher:void doCopy(java.util.Set)"
        ]
    },
    "org.apache.hadoop.mapreduce.Job$10:org.apache.hadoop.mapreduce.JobStatus run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.hadoop.mapreduce.Job$10:java.lang.Object run()"
        ]
    },
    "org.apache.hadoop.mapreduce.task.reduce.LocalFetcher:void doCopy(java.util.Set)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.hadoop.mapreduce.task.reduce.LocalFetcher:void run()"
        ]
    },
    "org.apache.hadoop.mapreduce.Job$10:java.lang.Object run()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.hadoop.mapreduce.task.reduce.LocalFetcher:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.hadoop.mapred.Task$TaskReporter:void startCommunicationThread()",
            "org.apache.hadoop.mapreduce.lib.chain.Chain:void startAllThreads()",
            "org.apache.hadoop.mapreduce.task.reduce.Shuffle:org.apache.hadoop.mapred.RawKeyValueIterator run()"
        ]
    },
    "org.apache.hadoop.mapred.Task$TaskReporter:void startCommunicationThread()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.hadoop.mapred.Task:org.apache.hadoop.mapred.Task$TaskReporter startReporter(org.apache.hadoop.mapred.TaskUmbilicalProtocol)"
        ]
    },
    "org.apache.hadoop.mapreduce.lib.chain.Chain:void startAllThreads()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.hadoop.mapreduce.lib.chain.ChainMapper:void run(org.apache.hadoop.mapreduce.Mapper$Context)",
            "org.apache.hadoop.mapreduce.lib.chain.ChainReducer:void run(org.apache.hadoop.mapreduce.Reducer$Context)"
        ]
    },
    "org.apache.hadoop.mapreduce.task.reduce.Shuffle:org.apache.hadoop.mapred.RawKeyValueIterator run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.hadoop.mapred.ReduceTask:void run(org.apache.hadoop.mapred.JobConf,org.apache.hadoop.mapred.TaskUmbilicalProtocol)"
        ]
    },
    "org.apache.hadoop.mapred.Task:org.apache.hadoop.mapred.Task$TaskReporter startReporter(org.apache.hadoop.mapred.TaskUmbilicalProtocol)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.hadoop.mapred.MapTask:void run(org.apache.hadoop.mapred.JobConf,org.apache.hadoop.mapred.TaskUmbilicalProtocol)",
            "org.apache.hadoop.mapred.ReduceTask:void run(org.apache.hadoop.mapred.JobConf,org.apache.hadoop.mapred.TaskUmbilicalProtocol)"
        ]
    },
    "org.apache.hadoop.mapreduce.lib.chain.ChainMapper:void run(org.apache.hadoop.mapreduce.Mapper$Context)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.hadoop.mapred.MapTask:void runNewMapper(org.apache.hadoop.mapred.JobConf,org.apache.hadoop.mapreduce.split.JobSplit$TaskSplitIndex,org.apache.hadoop.mapred.TaskUmbilicalProtocol,org.apache.hadoop.mapred.Task$TaskReporter)",
            "org.apache.hadoop.mapreduce.lib.chain.Chain$MapRunner:void run()",
            "org.apache.hadoop.mapreduce.lib.chain.Chain:void runMapper(org.apache.hadoop.mapreduce.TaskInputOutputContext,int)",
            "org.apache.hadoop.mapreduce.lib.input.DelegatingMapper:void run(org.apache.hadoop.mapreduce.Mapper$Context)",
            "org.apache.hadoop.mapreduce.lib.map.MultithreadedMapper$MapRunner:void run()"
        ]
    },
    "org.apache.hadoop.mapreduce.lib.chain.ChainReducer:void run(org.apache.hadoop.mapreduce.Reducer$Context)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.hadoop.mapred.ReduceTask:void runNewReducer(org.apache.hadoop.mapred.JobConf,org.apache.hadoop.mapred.TaskUmbilicalProtocol,org.apache.hadoop.mapred.Task$TaskReporter,org.apache.hadoop.mapred.RawKeyValueIterator,org.apache.hadoop.io.RawComparator,java.lang.Class,java.lang.Class)",
            "org.apache.hadoop.mapred.Task$NewCombinerRunner:void combine(org.apache.hadoop.mapred.RawKeyValueIterator,org.apache.hadoop.mapred.OutputCollector)",
            "org.apache.hadoop.mapreduce.lib.chain.Chain$ReduceRunner:void run()",
            "org.apache.hadoop.mapreduce.lib.chain.Chain:void runReducer(org.apache.hadoop.mapreduce.TaskInputOutputContext)"
        ]
    },
    "org.apache.hadoop.mapred.ReduceTask:void run(org.apache.hadoop.mapred.JobConf,org.apache.hadoop.mapred.TaskUmbilicalProtocol)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.hadoop.mapred.MapTask:void run(org.apache.hadoop.mapred.JobConf,org.apache.hadoop.mapred.TaskUmbilicalProtocol)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.hadoop.mapred.MapTask:void runNewMapper(org.apache.hadoop.mapred.JobConf,org.apache.hadoop.mapreduce.split.JobSplit$TaskSplitIndex,org.apache.hadoop.mapred.TaskUmbilicalProtocol,org.apache.hadoop.mapred.Task$TaskReporter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.hadoop.mapred.MapTask:void run(org.apache.hadoop.mapred.JobConf,org.apache.hadoop.mapred.TaskUmbilicalProtocol)"
        ]
    },
    "org.apache.hadoop.mapreduce.lib.chain.Chain$MapRunner:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.hadoop.mapred.Task$TaskReporter:void startCommunicationThread()",
            "org.apache.hadoop.mapreduce.lib.chain.Chain:void startAllThreads()"
        ]
    },
    "org.apache.hadoop.mapreduce.lib.chain.Chain:void runMapper(org.apache.hadoop.mapreduce.TaskInputOutputContext,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.hadoop.mapreduce.lib.chain.ChainMapper:void run(org.apache.hadoop.mapreduce.Mapper$Context)"
        ]
    },
    "org.apache.hadoop.mapreduce.lib.input.DelegatingMapper:void run(org.apache.hadoop.mapreduce.Mapper$Context)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.hadoop.mapred.MapTask:void runNewMapper(org.apache.hadoop.mapred.JobConf,org.apache.hadoop.mapreduce.split.JobSplit$TaskSplitIndex,org.apache.hadoop.mapred.TaskUmbilicalProtocol,org.apache.hadoop.mapred.Task$TaskReporter)",
            "org.apache.hadoop.mapreduce.lib.chain.Chain$MapRunner:void run()",
            "org.apache.hadoop.mapreduce.lib.chain.Chain:void runMapper(org.apache.hadoop.mapreduce.TaskInputOutputContext,int)",
            "org.apache.hadoop.mapreduce.lib.input.DelegatingMapper:void run(org.apache.hadoop.mapreduce.Mapper$Context)",
            "org.apache.hadoop.mapreduce.lib.map.MultithreadedMapper$MapRunner:void run()"
        ]
    },
    "org.apache.hadoop.mapreduce.lib.map.MultithreadedMapper$MapRunner:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.hadoop.mapred.Task$TaskReporter:void startCommunicationThread()",
            "org.apache.hadoop.mapreduce.lib.chain.Chain:void startAllThreads()",
            "org.apache.hadoop.mapreduce.lib.map.MultithreadedMapper:void run(org.apache.hadoop.mapreduce.Mapper$Context)"
        ]
    },
    "org.apache.hadoop.mapred.ReduceTask:void runNewReducer(org.apache.hadoop.mapred.JobConf,org.apache.hadoop.mapred.TaskUmbilicalProtocol,org.apache.hadoop.mapred.Task$TaskReporter,org.apache.hadoop.mapred.RawKeyValueIterator,org.apache.hadoop.io.RawComparator,java.lang.Class,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.hadoop.mapred.ReduceTask:void run(org.apache.hadoop.mapred.JobConf,org.apache.hadoop.mapred.TaskUmbilicalProtocol)"
        ]
    },
    "org.apache.hadoop.mapred.Task$NewCombinerRunner:void combine(org.apache.hadoop.mapred.RawKeyValueIterator,org.apache.hadoop.mapred.OutputCollector)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.hadoop.mapred.MapTask$MapOutputBuffer:void sortAndSpill()",
            "org.apache.hadoop.mapred.MapTask$MapOutputBuffer:void mergeParts()"
        ]
    },
    "org.apache.hadoop.mapreduce.lib.chain.Chain$ReduceRunner:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.hadoop.mapred.Task$TaskReporter:void startCommunicationThread()",
            "org.apache.hadoop.mapreduce.lib.chain.Chain:void startAllThreads()"
        ]
    },
    "org.apache.hadoop.mapreduce.lib.chain.Chain:void runReducer(org.apache.hadoop.mapreduce.TaskInputOutputContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.hadoop.mapreduce.lib.chain.ChainReducer:void run(org.apache.hadoop.mapreduce.Reducer$Context)"
        ]
    },
    "org.apache.hadoop.mapreduce.lib.map.MultithreadedMapper:void run(org.apache.hadoop.mapreduce.Mapper$Context)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.hadoop.mapred.MapTask:void runNewMapper(org.apache.hadoop.mapred.JobConf,org.apache.hadoop.mapreduce.split.JobSplit$TaskSplitIndex,org.apache.hadoop.mapred.TaskUmbilicalProtocol,org.apache.hadoop.mapred.Task$TaskReporter)",
            "org.apache.hadoop.mapreduce.lib.chain.Chain$MapRunner:void run()",
            "org.apache.hadoop.mapreduce.lib.chain.Chain:void runMapper(org.apache.hadoop.mapreduce.TaskInputOutputContext,int)",
            "org.apache.hadoop.mapreduce.lib.input.DelegatingMapper:void run(org.apache.hadoop.mapreduce.Mapper$Context)",
            "org.apache.hadoop.mapreduce.lib.map.MultithreadedMapper$MapRunner:void run()"
        ]
    },
    "org.apache.hadoop.mapred.MapTask$MapOutputBuffer:void sortAndSpill()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.hadoop.mapred.MapTask$MapOutputBuffer:void flush()",
            "org.apache.hadoop.mapred.MapTask$MapOutputBuffer:void access$900(org.apache.hadoop.mapred.MapTask$MapOutputBuffer)"
        ]
    },
    "org.apache.hadoop.mapred.MapTask$MapOutputBuffer:void mergeParts()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.hadoop.mapred.MapTask$MapOutputBuffer:void flush()"
        ]
    },
    "org.apache.hadoop.mapred.MapTask$MapOutputBuffer:void flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.hadoop.mapred.MapTask$NewOutputCollector:void close(org.apache.hadoop.mapreduce.TaskAttemptContext)",
            "org.apache.hadoop.mapred.MapTask:void runOldMapper(org.apache.hadoop.mapred.JobConf,org.apache.hadoop.mapreduce.split.JobSplit$TaskSplitIndex,org.apache.hadoop.mapred.TaskUmbilicalProtocol,org.apache.hadoop.mapred.Task$TaskReporter)"
        ]
    },
    "org.apache.hadoop.mapred.MapTask$MapOutputBuffer:void access$900(org.apache.hadoop.mapred.MapTask$MapOutputBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.hadoop.mapred.MapTask$MapOutputBuffer$SpillThread:void run()"
        ]
    },
    "org.apache.hadoop.mapred.MapTask$NewOutputCollector:void close(org.apache.hadoop.mapreduce.TaskAttemptContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.hadoop.mapred.MapTask$NewDirectOutputCollector:void close(org.apache.hadoop.mapreduce.TaskAttemptContext)",
            "org.apache.hadoop.mapred.MapTask:void runNewMapper(org.apache.hadoop.mapred.JobConf,org.apache.hadoop.mapreduce.split.JobSplit$TaskSplitIndex,org.apache.hadoop.mapred.TaskUmbilicalProtocol,org.apache.hadoop.mapred.Task$TaskReporter)",
            "org.apache.hadoop.mapred.MapTask:void closeQuietly(org.apache.hadoop.mapreduce.RecordWriter,org.apache.hadoop.mapreduce.Mapper$Context)",
            "org.apache.hadoop.mapred.ReduceTask$NewTrackingRecordWriter:void close(org.apache.hadoop.mapreduce.TaskAttemptContext)",
            "org.apache.hadoop.mapreduce.lib.chain.Chain$MapRunner:void run()",
            "org.apache.hadoop.mapreduce.lib.chain.Chain$ReduceRunner:void run()",
            "org.apache.hadoop.mapreduce.lib.output.FilterOutputFormat$FilterRecordWriter:void close(org.apache.hadoop.mapreduce.TaskAttemptContext)",
            "org.apache.hadoop.mapreduce.lib.output.LazyOutputFormat$LazyRecordWriter:void close(org.apache.hadoop.mapreduce.TaskAttemptContext)",
            "org.apache.hadoop.mapreduce.lib.output.MultipleOutputs$RecordWriterWithCounter:void close(org.apache.hadoop.mapreduce.TaskAttemptContext)",
            "org.apache.hadoop.mapreduce.lib.output.MultipleOutputs:void close()"
        ]
    },
    "org.apache.hadoop.mapred.MapTask:void runOldMapper(org.apache.hadoop.mapred.JobConf,org.apache.hadoop.mapreduce.split.JobSplit$TaskSplitIndex,org.apache.hadoop.mapred.TaskUmbilicalProtocol,org.apache.hadoop.mapred.Task$TaskReporter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.hadoop.mapred.MapTask:void run(org.apache.hadoop.mapred.JobConf,org.apache.hadoop.mapred.TaskUmbilicalProtocol)"
        ]
    },
    "org.apache.hadoop.mapred.MapTask$MapOutputBuffer$SpillThread:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.hadoop.mapred.MapTask$MapOutputBuffer:void init(org.apache.hadoop.mapred.MapOutputCollector$Context)",
            "org.apache.hadoop.mapred.Task$TaskReporter:void startCommunicationThread()",
            "org.apache.hadoop.mapreduce.lib.chain.Chain:void startAllThreads()"
        ]
    },
    "org.apache.hadoop.mapred.MapTask$NewDirectOutputCollector:void close(org.apache.hadoop.mapreduce.TaskAttemptContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.hadoop.mapred.MapTask$NewDirectOutputCollector:void close(org.apache.hadoop.mapreduce.TaskAttemptContext)",
            "org.apache.hadoop.mapred.MapTask:void runNewMapper(org.apache.hadoop.mapred.JobConf,org.apache.hadoop.mapreduce.split.JobSplit$TaskSplitIndex,org.apache.hadoop.mapred.TaskUmbilicalProtocol,org.apache.hadoop.mapred.Task$TaskReporter)",
            "org.apache.hadoop.mapred.MapTask:void closeQuietly(org.apache.hadoop.mapreduce.RecordWriter,org.apache.hadoop.mapreduce.Mapper$Context)",
            "org.apache.hadoop.mapred.ReduceTask$NewTrackingRecordWriter:void close(org.apache.hadoop.mapreduce.TaskAttemptContext)",
            "org.apache.hadoop.mapreduce.lib.chain.Chain$MapRunner:void run()",
            "org.apache.hadoop.mapreduce.lib.chain.Chain$ReduceRunner:void run()",
            "org.apache.hadoop.mapreduce.lib.output.FilterOutputFormat$FilterRecordWriter:void close(org.apache.hadoop.mapreduce.TaskAttemptContext)",
            "org.apache.hadoop.mapreduce.lib.output.LazyOutputFormat$LazyRecordWriter:void close(org.apache.hadoop.mapreduce.TaskAttemptContext)",
            "org.apache.hadoop.mapreduce.lib.output.MultipleOutputs$RecordWriterWithCounter:void close(org.apache.hadoop.mapreduce.TaskAttemptContext)",
            "org.apache.hadoop.mapreduce.lib.output.MultipleOutputs:void close()"
        ]
    },
    "org.apache.hadoop.mapred.MapTask:void closeQuietly(org.apache.hadoop.mapreduce.RecordWriter,org.apache.hadoop.mapreduce.Mapper$Context)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.hadoop.mapred.MapTask:void runNewMapper(org.apache.hadoop.mapred.JobConf,org.apache.hadoop.mapreduce.split.JobSplit$TaskSplitIndex,org.apache.hadoop.mapred.TaskUmbilicalProtocol,org.apache.hadoop.mapred.Task$TaskReporter)"
        ]
    },
    "org.apache.hadoop.mapred.ReduceTask$NewTrackingRecordWriter:void close(org.apache.hadoop.mapreduce.TaskAttemptContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.hadoop.mapred.MapTask$NewDirectOutputCollector:void close(org.apache.hadoop.mapreduce.TaskAttemptContext)",
            "org.apache.hadoop.mapred.MapTask:void runNewMapper(org.apache.hadoop.mapred.JobConf,org.apache.hadoop.mapreduce.split.JobSplit$TaskSplitIndex,org.apache.hadoop.mapred.TaskUmbilicalProtocol,org.apache.hadoop.mapred.Task$TaskReporter)",
            "org.apache.hadoop.mapred.MapTask:void closeQuietly(org.apache.hadoop.mapreduce.RecordWriter,org.apache.hadoop.mapreduce.Mapper$Context)",
            "org.apache.hadoop.mapred.ReduceTask$NewTrackingRecordWriter:void close(org.apache.hadoop.mapreduce.TaskAttemptContext)",
            "org.apache.hadoop.mapred.ReduceTask:void runNewReducer(org.apache.hadoop.mapred.JobConf,org.apache.hadoop.mapred.TaskUmbilicalProtocol,org.apache.hadoop.mapred.Task$TaskReporter,org.apache.hadoop.mapred.RawKeyValueIterator,org.apache.hadoop.io.RawComparator,java.lang.Class,java.lang.Class)",
            "org.apache.hadoop.mapreduce.lib.chain.Chain$MapRunner:void run()",
            "org.apache.hadoop.mapreduce.lib.chain.Chain$ReduceRunner:void run()",
            "org.apache.hadoop.mapreduce.lib.output.FilterOutputFormat$FilterRecordWriter:void close(org.apache.hadoop.mapreduce.TaskAttemptContext)",
            "org.apache.hadoop.mapreduce.lib.output.LazyOutputFormat$LazyRecordWriter:void close(org.apache.hadoop.mapreduce.TaskAttemptContext)",
            "org.apache.hadoop.mapreduce.lib.output.MultipleOutputs$RecordWriterWithCounter:void close(org.apache.hadoop.mapreduce.TaskAttemptContext)",
            "org.apache.hadoop.mapreduce.lib.output.MultipleOutputs:void close()"
        ]
    },
    "org.apache.hadoop.mapreduce.lib.output.FilterOutputFormat$FilterRecordWriter:void close(org.apache.hadoop.mapreduce.TaskAttemptContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.hadoop.mapred.MapTask$NewDirectOutputCollector:void close(org.apache.hadoop.mapreduce.TaskAttemptContext)",
            "org.apache.hadoop.mapred.MapTask:void runNewMapper(org.apache.hadoop.mapred.JobConf,org.apache.hadoop.mapreduce.split.JobSplit$TaskSplitIndex,org.apache.hadoop.mapred.TaskUmbilicalProtocol,org.apache.hadoop.mapred.Task$TaskReporter)",
            "org.apache.hadoop.mapred.MapTask:void closeQuietly(org.apache.hadoop.mapreduce.RecordWriter,org.apache.hadoop.mapreduce.Mapper$Context)",
            "org.apache.hadoop.mapred.ReduceTask$NewTrackingRecordWriter:void close(org.apache.hadoop.mapreduce.TaskAttemptContext)",
            "org.apache.hadoop.mapreduce.lib.chain.Chain$MapRunner:void run()",
            "org.apache.hadoop.mapreduce.lib.chain.Chain$ReduceRunner:void run()",
            "org.apache.hadoop.mapreduce.lib.output.FilterOutputFormat$FilterRecordWriter:void close(org.apache.hadoop.mapreduce.TaskAttemptContext)",
            "org.apache.hadoop.mapreduce.lib.output.LazyOutputFormat$LazyRecordWriter:void close(org.apache.hadoop.mapreduce.TaskAttemptContext)",
            "org.apache.hadoop.mapreduce.lib.output.MultipleOutputs$RecordWriterWithCounter:void close(org.apache.hadoop.mapreduce.TaskAttemptContext)",
            "org.apache.hadoop.mapreduce.lib.output.MultipleOutputs:void close()"
        ]
    },
    "org.apache.hadoop.mapreduce.lib.output.LazyOutputFormat$LazyRecordWriter:void close(org.apache.hadoop.mapreduce.TaskAttemptContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.hadoop.mapred.MapTask$NewDirectOutputCollector:void close(org.apache.hadoop.mapreduce.TaskAttemptContext)",
            "org.apache.hadoop.mapred.MapTask:void runNewMapper(org.apache.hadoop.mapred.JobConf,org.apache.hadoop.mapreduce.split.JobSplit$TaskSplitIndex,org.apache.hadoop.mapred.TaskUmbilicalProtocol,org.apache.hadoop.mapred.Task$TaskReporter)",
            "org.apache.hadoop.mapred.MapTask:void closeQuietly(org.apache.hadoop.mapreduce.RecordWriter,org.apache.hadoop.mapreduce.Mapper$Context)",
            "org.apache.hadoop.mapred.ReduceTask$NewTrackingRecordWriter:void close(org.apache.hadoop.mapreduce.TaskAttemptContext)",
            "org.apache.hadoop.mapreduce.lib.chain.Chain$MapRunner:void run()",
            "org.apache.hadoop.mapreduce.lib.chain.Chain$ReduceRunner:void run()",
            "org.apache.hadoop.mapreduce.lib.output.FilterOutputFormat$FilterRecordWriter:void close(org.apache.hadoop.mapreduce.TaskAttemptContext)",
            "org.apache.hadoop.mapreduce.lib.output.LazyOutputFormat$LazyRecordWriter:void close(org.apache.hadoop.mapreduce.TaskAttemptContext)",
            "org.apache.hadoop.mapreduce.lib.output.MultipleOutputs$RecordWriterWithCounter:void close(org.apache.hadoop.mapreduce.TaskAttemptContext)",
            "org.apache.hadoop.mapreduce.lib.output.MultipleOutputs:void close()"
        ]
    },
    "org.apache.hadoop.mapreduce.lib.output.MultipleOutputs$RecordWriterWithCounter:void close(org.apache.hadoop.mapreduce.TaskAttemptContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.hadoop.mapred.MapTask$NewDirectOutputCollector:void close(org.apache.hadoop.mapreduce.TaskAttemptContext)",
            "org.apache.hadoop.mapred.MapTask:void runNewMapper(org.apache.hadoop.mapred.JobConf,org.apache.hadoop.mapreduce.split.JobSplit$TaskSplitIndex,org.apache.hadoop.mapred.TaskUmbilicalProtocol,org.apache.hadoop.mapred.Task$TaskReporter)",
            "org.apache.hadoop.mapred.MapTask:void closeQuietly(org.apache.hadoop.mapreduce.RecordWriter,org.apache.hadoop.mapreduce.Mapper$Context)",
            "org.apache.hadoop.mapred.ReduceTask$NewTrackingRecordWriter:void close(org.apache.hadoop.mapreduce.TaskAttemptContext)",
            "org.apache.hadoop.mapreduce.lib.chain.Chain$MapRunner:void run()",
            "org.apache.hadoop.mapreduce.lib.chain.Chain$ReduceRunner:void run()",
            "org.apache.hadoop.mapreduce.lib.output.FilterOutputFormat$FilterRecordWriter:void close(org.apache.hadoop.mapreduce.TaskAttemptContext)",
            "org.apache.hadoop.mapreduce.lib.output.LazyOutputFormat$LazyRecordWriter:void close(org.apache.hadoop.mapreduce.TaskAttemptContext)",
            "org.apache.hadoop.mapreduce.lib.output.MultipleOutputs$RecordWriterWithCounter:void close(org.apache.hadoop.mapreduce.TaskAttemptContext)",
            "org.apache.hadoop.mapreduce.lib.output.MultipleOutputs:void close()"
        ]
    },
    "org.apache.hadoop.mapreduce.lib.output.MultipleOutputs:void close()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.hadoop.mapred.MapTask$MapOutputBuffer:void init(org.apache.hadoop.mapred.MapOutputCollector$Context)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.hadoop.mapred.MapTask:org.apache.hadoop.mapred.MapOutputCollector createSortingCollector(org.apache.hadoop.mapred.JobConf,org.apache.hadoop.mapred.Task$TaskReporter)",
            "org.apache.hadoop.mapred.MapTask:void runOldMapper(org.apache.hadoop.mapred.JobConf,org.apache.hadoop.mapreduce.split.JobSplit$TaskSplitIndex,org.apache.hadoop.mapred.TaskUmbilicalProtocol,org.apache.hadoop.mapred.Task$TaskReporter)"
        ]
    },
    "org.apache.hadoop.mapred.MapTask:org.apache.hadoop.mapred.MapOutputCollector createSortingCollector(org.apache.hadoop.mapred.JobConf,org.apache.hadoop.mapred.Task$TaskReporter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.hadoop.mapred.MapTask:void runOldMapper(org.apache.hadoop.mapred.JobConf,org.apache.hadoop.mapreduce.split.JobSplit$TaskSplitIndex,org.apache.hadoop.mapred.TaskUmbilicalProtocol,org.apache.hadoop.mapred.Task$TaskReporter)",
            "org.apache.hadoop.mapred.MapTask:org.apache.hadoop.mapred.MapOutputCollector access$100(org.apache.hadoop.mapred.MapTask,org.apache.hadoop.mapred.JobConf,org.apache.hadoop.mapred.Task$TaskReporter)"
        ]
    },
    "org.apache.hadoop.mapred.MapTask:org.apache.hadoop.mapred.MapOutputCollector access$100(org.apache.hadoop.mapred.MapTask,org.apache.hadoop.mapred.JobConf,org.apache.hadoop.mapred.Task$TaskReporter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.hadoop.mapred.MapTask$NewOutputCollector:void <init>(org.apache.hadoop.mapred.MapTask,org.apache.hadoop.mapreduce.JobContext,org.apache.hadoop.mapred.JobConf,org.apache.hadoop.mapred.TaskUmbilicalProtocol,org.apache.hadoop.mapred.Task$TaskReporter)"
        ]
    },
    "org.apache.hadoop.mapred.MapTask$NewOutputCollector:void <init>(org.apache.hadoop.mapred.MapTask,org.apache.hadoop.mapreduce.JobContext,org.apache.hadoop.mapred.JobConf,org.apache.hadoop.mapred.TaskUmbilicalProtocol,org.apache.hadoop.mapred.Task$TaskReporter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.hadoop.mapred.MapTask:void runNewMapper(org.apache.hadoop.mapred.JobConf,org.apache.hadoop.mapreduce.split.JobSplit$TaskSplitIndex,org.apache.hadoop.mapred.TaskUmbilicalProtocol,org.apache.hadoop.mapred.Task$TaskReporter)"
        ]
    }
}