{
    "cn.hutool.core.util.ZipUtil:java.io.File unzip(java.io.File,java.io.File,java.nio.charset.Charset)": {
        "isVulRoot": true,
        "vulCaller": [
            "cn.hutool.core.util.ZipUtil:java.io.File unzip(java.io.File,java.nio.charset.Charset)",
            "cn.hutool.core.util.ZipUtil:java.io.File unzip(java.lang.String,java.lang.String,java.nio.charset.Charset)",
            "cn.hutool.core.util.ZipUtil:java.io.File unzip(java.io.File,java.io.File)"
        ]
    },
    "cn.hutool.core.util.ZipUtil:void validateFiles(java.io.File,java.io.File[])": {
        "isVulRoot": true,
        "vulCaller": [
            "cn.hutool.core.util.ZipUtil:java.io.File zip(java.io.File,java.nio.charset.Charset,boolean,java.io.File[])"
        ]
    },
    "cn.hutool.core.util.ZipUtil:java.io.File zip(java.io.File,java.nio.charset.Charset,boolean,java.io.File[])": {
        "isVulRoot": true,
        "vulCaller": [
            "cn.hutool.core.util.ZipUtil:java.io.File zip(java.io.File,java.nio.charset.Charset)",
            "cn.hutool.core.util.ZipUtil:java.io.File zip(java.lang.String,java.lang.String,java.nio.charset.Charset,boolean)",
            "cn.hutool.core.util.ZipUtil:java.io.File zip(java.io.File,boolean,java.io.File[])"
        ]
    },
    "cn.hutool.core.io.FileUtil:java.io.File file(java.lang.String)": {
        "isVulRoot": true,
        "vulCaller": [
            "cn.hutool.core.io.file.FileCopier:cn.hutool.core.io.file.FileCopier create(java.lang.String,java.lang.String)",
            "cn.hutool.core.io.file.FileReader:void <init>(java.lang.String,java.nio.charset.Charset)",
            "cn.hutool.core.io.file.FileReader:void <init>(java.lang.String,java.lang.String)",
            "cn.hutool.core.io.file.FileWriter:void <init>(java.lang.String,java.nio.charset.Charset)",
            "cn.hutool.core.io.file.FileWriter:void <init>(java.lang.String,java.lang.String)",
            "cn.hutool.core.io.FileTypeUtil:java.lang.String getTypeByPath(java.lang.String)",
            "cn.hutool.core.io.FileUtil:java.io.File[] ls(java.lang.String)",
            "cn.hutool.core.io.FileUtil:java.util.List loopFiles(java.lang.String,java.io.FileFilter)",
            "cn.hutool.core.io.FileUtil:java.util.List loopFiles(java.lang.String)",
            "cn.hutool.core.io.FileUtil:java.io.File getTmpDir()",
            "cn.hutool.core.io.FileUtil:java.io.File getUserHomeDir()",
            "cn.hutool.core.io.FileUtil:boolean exist(java.lang.String)",
            "cn.hutool.core.io.FileUtil:java.io.File touch(java.lang.String)",
            "cn.hutool.core.io.FileUtil:java.io.File mkParentDirs(java.lang.String)",
            "cn.hutool.core.io.FileUtil:boolean del(java.lang.String)",
            "cn.hutool.core.io.FileUtil:boolean clean(java.lang.String)",
            "cn.hutool.core.io.FileUtil:java.io.File mkdir(java.lang.String)",
            "cn.hutool.core.io.FileUtil:java.io.File copy(java.lang.String,java.lang.String,boolean)",
            "cn.hutool.core.io.FileUtil:boolean isDirectory(java.lang.String)",
            "cn.hutool.core.io.FileUtil:boolean isFile(java.lang.String)",
            "cn.hutool.core.io.FileUtil:java.io.BufferedInputStream getInputStream(java.lang.String)",
            "cn.hutool.core.io.FileUtil:java.io.BufferedReader getReader(java.lang.String,java.lang.String)",
            "cn.hutool.core.io.FileUtil:java.io.BufferedReader getReader(java.lang.String,java.nio.charset.Charset)",
            "cn.hutool.core.io.FileUtil:byte[] readBytes(java.lang.String)",
            "cn.hutool.core.io.FileUtil:java.lang.String readString(java.lang.String,java.lang.String)",
            "cn.hutool.core.io.FileUtil:java.lang.String readString(java.lang.String,java.nio.charset.Charset)",
            "cn.hutool.core.io.FileUtil:java.util.Collection readLines(java.lang.String,java.lang.String,java.util.Collection)",
            "cn.hutool.core.io.FileUtil:java.util.Collection readLines(java.lang.String,java.nio.charset.Charset,java.util.Collection)",
            "cn.hutool.core.io.FileUtil:java.lang.Object load(cn.hutool.core.io.file.FileReader$ReaderHandler,java.lang.String,java.lang.String)",
            "cn.hutool.core.io.FileUtil:java.lang.Object load(java.lang.String,java.lang.String,cn.hutool.core.io.file.FileReader$ReaderHandler)",
            "cn.hutool.core.io.FileUtil:java.lang.Object load(java.lang.String,java.nio.charset.Charset,cn.hutool.core.io.file.FileReader$ReaderHandler)",
            "cn.hutool.core.io.FileUtil:java.io.File writeLines(java.util.Collection,java.lang.String,java.lang.String,boolean)",
            "cn.hutool.core.io.FileUtil:java.io.File writeLines(java.util.Collection,java.lang.String,java.nio.charset.Charset,boolean)",
            "cn.hutool.core.io.FileUtil:java.io.File getWebRoot()",
            "cn.hutool.core.io.FileUtil:java.lang.String getParent(java.lang.String,int)",
            "cn.hutool.core.io.resource.ClassPathResource:void <init>(java.lang.String,java.lang.ClassLoader,java.lang.Class)",
            "cn.hutool.core.io.resource.FileResource:void <init>(java.lang.String)",
            "cn.hutool.core.text.csv.CsvWriter:void <init>(java.lang.String)",
            "cn.hutool.core.text.csv.CsvWriter:void <init>(java.lang.String,java.nio.charset.Charset)",
            "cn.hutool.core.text.csv.CsvWriter:void <init>(java.lang.String,java.nio.charset.Charset,boolean)",
            "cn.hutool.core.text.csv.CsvWriter:void <init>(java.lang.String,java.nio.charset.Charset,boolean,cn.hutool.core.text.csv.CsvWriteConfig)",
            "cn.hutool.core.util.XmlUtil:org.w3c.dom.Document readXML(java.lang.String)",
            "cn.hutool.core.util.ZipUtil:java.io.File zip(java.lang.String,java.nio.charset.Charset)",
            "cn.hutool.core.util.ZipUtil:java.io.File zip(java.lang.String,java.lang.String,java.nio.charset.Charset,boolean)",
            "cn.hutool.core.util.ZipUtil:java.io.File unzip(java.lang.String,java.nio.charset.Charset)",
            "cn.hutool.core.util.ZipUtil:java.io.File unzip(java.lang.String,java.lang.String,java.nio.charset.Charset)",
            "cn.hutool.core.util.ZipUtil:byte[] unzipFileBytes(java.lang.String,java.nio.charset.Charset,java.lang.String)",
            "cn.hutool.extra.template.engine.freemarker.FreemarkerEngine:freemarker.template.Configuration createCfg(cn.hutool.extra.template.TemplateConfig)",
            "cn.hutool.http.HttpResponse:long writeBody(java.lang.String)",
            "cn.hutool.http.HttpUtil:long downloadFile(java.lang.String,java.lang.String)",
            "cn.hutool.poi.excel.ExcelReader:void <init>(java.lang.String,int)",
            "cn.hutool.poi.excel.ExcelWriter:void <init>(java.lang.String,java.lang.String)",
            "cn.hutool.poi.excel.sax.AbstractExcelSaxReader:java.lang.Object read(java.lang.String)",
            "cn.hutool.poi.excel.sax.AbstractExcelSaxReader:java.lang.Object read(java.lang.String,int)",
            "cn.hutool.poi.excel.WorkbookUtil:org.apache.poi.ss.usermodel.Workbook createBook(java.lang.String)"
        ]
    },
    "cn.hutool.core.io.FileUtil:java.io.File file(java.io.File,java.lang.String)": {
        "isVulRoot": true,
        "vulCaller": [
            "cn.hutool.core.io.file.FileCopier:java.io.File copy()",
            "cn.hutool.core.io.FileUtil:java.io.File touch(java.io.File,java.lang.String)",
            "cn.hutool.core.util.ZipUtil:java.io.File zip(java.io.File,java.nio.charset.Charset)",
            "cn.hutool.core.util.ZipUtil:java.io.File unzip(java.io.File,java.nio.charset.Charset)",
            "cn.hutool.http.HttpResponse:long writeBody(java.io.File,cn.hutool.core.io.StreamProgress)"
        ]
    },
    "cn.hutool.core.io.FileUtil:java.io.File getParent(java.io.File,int)": {
        "isVulRoot": true,
        "vulCaller": [
            "cn.hutool.core.io.FileUtil:java.lang.String getParent(java.lang.String,int)",
            "cn.hutool.core.io.FileUtil:java.io.File getParent(java.io.File,int)"
        ]
    },
    "cn.hutool.core.io.FileUtil:java.lang.String getParent(java.lang.String,int)": {
        "isVulRoot": true,
        "vulCaller": []
    },
    "cn.hutool.core.collection.IterUtil:java.util.Map toMap(java.lang.Iterable,java.lang.Iterable)": {
        "isVulRoot": true,
        "vulCaller": [
            "cn.hutool.poi.excel.ExcelReader:java.util.List read(int,int,int)"
        ]
    },
    "cn.hutool.core.collection.IterUtil:java.util.Map toMap(java.util.Iterator,java.util.Iterator)": {
        "isVulRoot": true,
        "vulCaller": [
            "cn.hutool.core.collection.IterUtil:java.util.Map toMap(java.lang.Iterable,java.lang.Iterable)"
        ]
    },
    "cn.hutool.poi.excel.ExcelReader:java.util.List read(int,int,int)": {
        "isVulRoot": true,
        "vulCaller": [
            "cn.hutool.poi.excel.ExcelReader:java.util.List readAll()",
            "cn.hutool.poi.excel.ExcelReader:java.util.List read(int,int,int,java.lang.Class)"
        ]
    },
    "cn.hutool.core.util.ZipUtil:java.io.File unzip(java.io.File,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ZipUtil:java.io.File unzip(java.lang.String,java.nio.charset.Charset)",
            "cn.hutool.core.util.ZipUtil:java.io.File unzip(java.io.File)"
        ]
    },
    "cn.hutool.core.util.ZipUtil:java.io.File unzip(java.lang.String,java.lang.String,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ZipUtil:java.io.File unzip(java.lang.String,java.lang.String)"
        ]
    },
    "cn.hutool.core.util.ZipUtil:java.io.File unzip(java.io.File,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ZipUtil:java.io.File zip(java.io.File,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ZipUtil:java.io.File zip(java.lang.String,java.nio.charset.Charset)",
            "cn.hutool.core.util.ZipUtil:java.io.File zip(java.io.File)"
        ]
    },
    "cn.hutool.core.util.ZipUtil:java.io.File zip(java.lang.String,java.lang.String,java.nio.charset.Charset,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ZipUtil:java.io.File zip(java.lang.String,java.lang.String,boolean)"
        ]
    },
    "cn.hutool.core.util.ZipUtil:java.io.File zip(java.io.File,boolean,java.io.File[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.file.FileCopier:cn.hutool.core.io.file.FileCopier create(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.file.FileReader:void <init>(java.lang.String,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.file.FileReader:void <init>(java.lang.String)"
        ]
    },
    "cn.hutool.core.io.file.FileReader:void <init>(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.file.FileWriter:void <init>(java.lang.String,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.file.FileWriter:void <init>(java.lang.String)"
        ]
    },
    "cn.hutool.core.io.file.FileWriter:void <init>(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.FileTypeUtil:java.lang.String getTypeByPath(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.FileUtil:java.io.File[] ls(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.FileUtil:java.util.List listFileNames(java.lang.String)"
        ]
    },
    "cn.hutool.core.io.FileUtil:java.util.List loopFiles(java.lang.String,java.io.FileFilter)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.FileUtil:java.util.List loopFiles(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.FileUtil:java.io.File getTmpDir()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.FileUtil:java.io.File getUserHomeDir()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.FileUtil:boolean exist(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.FileUtil:java.io.File touch(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.FileUtil:java.io.BufferedOutputStream getOutputStream(java.lang.String)",
            "cn.hutool.core.io.FileUtil:java.io.BufferedWriter getWriter(java.lang.String,java.lang.String,boolean)",
            "cn.hutool.core.io.FileUtil:java.io.BufferedWriter getWriter(java.lang.String,java.nio.charset.Charset,boolean)",
            "cn.hutool.core.io.FileUtil:java.io.File writeString(java.lang.String,java.lang.String,java.lang.String)",
            "cn.hutool.core.io.FileUtil:java.io.File writeString(java.lang.String,java.lang.String,java.nio.charset.Charset)",
            "cn.hutool.core.io.FileUtil:java.io.File appendString(java.lang.String,java.lang.String,java.lang.String)",
            "cn.hutool.core.io.FileUtil:java.io.File appendString(java.lang.String,java.lang.String,java.nio.charset.Charset)",
            "cn.hutool.core.io.FileUtil:java.io.File writeBytes(byte[],java.lang.String)",
            "cn.hutool.core.io.FileUtil:java.io.File writeFromStream(java.io.InputStream,java.lang.String)",
            "cn.hutool.core.io.FileUtil:void writeToStream(java.lang.String,java.io.OutputStream)",
            "cn.hutool.extra.servlet.multipart.UploadFile:java.io.File write(java.lang.String)",
            "cn.hutool.extra.servlet.multipart.UploadFile:boolean processStream(cn.hutool.extra.servlet.multipart.MultipartRequestInputStream)",
            "cn.hutool.captcha.AbstractCaptcha:void write(java.lang.String)"
        ]
    },
    "cn.hutool.core.io.FileUtil:java.io.File mkParentDirs(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.FileUtil:boolean del(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.FileUtil:boolean clean(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.FileUtil:java.io.File mkdir(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ZipUtil:java.io.File unzip(java.lang.String,java.lang.String,java.nio.charset.Charset)"
        ]
    },
    "cn.hutool.core.io.FileUtil:java.io.File copy(java.lang.String,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.FileUtil:boolean isDirectory(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.FileUtil:boolean isFile(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.FileUtil:java.io.BufferedInputStream getInputStream(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.poi.excel.ExcelUtil:void readBySax(java.lang.String,int,cn.hutool.poi.excel.sax.handler.RowHandler)"
        ]
    },
    "cn.hutool.core.io.FileUtil:java.io.BufferedReader getReader(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.bloomfilter.BitSetBloomFilter:void init(java.lang.String,java.lang.String)"
        ]
    },
    "cn.hutool.core.io.FileUtil:java.io.BufferedReader getReader(java.lang.String,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.FileUtil:java.io.BufferedReader getUtf8Reader(java.lang.String)"
        ]
    },
    "cn.hutool.core.io.FileUtil:byte[] readBytes(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.FileUtil:java.lang.String readString(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.FileUtil:java.lang.String readString(java.lang.String,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.FileUtil:java.lang.String readUtf8String(java.lang.String)"
        ]
    },
    "cn.hutool.core.io.FileUtil:java.util.Collection readLines(java.lang.String,java.lang.String,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.FileUtil:java.util.List readLines(java.lang.String,java.lang.String)"
        ]
    },
    "cn.hutool.core.io.FileUtil:java.util.Collection readLines(java.lang.String,java.nio.charset.Charset,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.FileUtil:java.util.Collection readUtf8Lines(java.lang.String,java.util.Collection)",
            "cn.hutool.core.io.FileUtil:java.util.List readLines(java.lang.String,java.nio.charset.Charset)"
        ]
    },
    "cn.hutool.core.io.FileUtil:java.lang.Object load(cn.hutool.core.io.file.FileReader$ReaderHandler,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.FileUtil:java.lang.Object load(java.lang.String,java.lang.String,cn.hutool.core.io.file.FileReader$ReaderHandler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.FileUtil:java.lang.Object load(java.lang.String,java.nio.charset.Charset,cn.hutool.core.io.file.FileReader$ReaderHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.FileUtil:java.lang.Object loadUtf8(java.lang.String,cn.hutool.core.io.file.FileReader$ReaderHandler)"
        ]
    },
    "cn.hutool.core.io.FileUtil:java.io.File writeLines(java.util.Collection,java.lang.String,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.FileUtil:java.io.File writeLines(java.util.Collection,java.lang.String,java.lang.String)",
            "cn.hutool.core.io.FileUtil:java.io.File appendLines(java.util.Collection,java.lang.String,java.lang.String)"
        ]
    },
    "cn.hutool.core.io.FileUtil:java.io.File writeLines(java.util.Collection,java.lang.String,java.nio.charset.Charset,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.FileUtil:java.io.File writeLines(java.util.Collection,java.lang.String,java.nio.charset.Charset)",
            "cn.hutool.core.io.FileUtil:java.io.File appendLines(java.util.Collection,java.lang.String,java.nio.charset.Charset)"
        ]
    },
    "cn.hutool.core.io.FileUtil:java.io.File getWebRoot()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.resource.ClassPathResource:void <init>(java.lang.String,java.lang.ClassLoader,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.resource.ClassPathResource:void <init>(java.lang.String)",
            "cn.hutool.core.io.resource.ClassPathResource:void <init>(java.lang.String,java.lang.ClassLoader)",
            "cn.hutool.core.io.resource.ClassPathResource:void <init>(java.lang.String,java.lang.Class)"
        ]
    },
    "cn.hutool.core.io.resource.FileResource:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.resource.ResourceUtil:cn.hutool.core.io.resource.Resource getResourceObj(java.lang.String)"
        ]
    },
    "cn.hutool.core.text.csv.CsvWriter:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.text.csv.CsvWriter:void <init>(java.lang.String,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.text.csv.CsvUtil:cn.hutool.core.text.csv.CsvWriter getWriter(java.lang.String,java.nio.charset.Charset)"
        ]
    },
    "cn.hutool.core.text.csv.CsvWriter:void <init>(java.lang.String,java.nio.charset.Charset,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.text.csv.CsvUtil:cn.hutool.core.text.csv.CsvWriter getWriter(java.lang.String,java.nio.charset.Charset,boolean)"
        ]
    },
    "cn.hutool.core.text.csv.CsvWriter:void <init>(java.lang.String,java.nio.charset.Charset,boolean,cn.hutool.core.text.csv.CsvWriteConfig)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.XmlUtil:org.w3c.dom.Document readXML(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ZipUtil:java.io.File zip(java.lang.String,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ZipUtil:java.io.File zip(java.lang.String)"
        ]
    },
    "cn.hutool.core.util.ZipUtil:java.io.File unzip(java.lang.String,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ZipUtil:java.io.File unzip(java.lang.String)"
        ]
    },
    "cn.hutool.core.util.ZipUtil:byte[] unzipFileBytes(java.lang.String,java.nio.charset.Charset,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ZipUtil:byte[] unzipFileBytes(java.lang.String,java.lang.String)"
        ]
    },
    "cn.hutool.extra.template.engine.freemarker.FreemarkerEngine:freemarker.template.Configuration createCfg(cn.hutool.extra.template.TemplateConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.template.engine.freemarker.FreemarkerEngine:void <init>(cn.hutool.extra.template.TemplateConfig)"
        ]
    },
    "cn.hutool.http.HttpResponse:long writeBody(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.http.HttpUtil:long downloadFile(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.poi.excel.ExcelReader:void <init>(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.poi.excel.ExcelUtil:cn.hutool.poi.excel.ExcelReader getReader(java.lang.String,int)"
        ]
    },
    "cn.hutool.poi.excel.ExcelWriter:void <init>(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.poi.excel.ExcelUtil:cn.hutool.poi.excel.ExcelWriter getWriter(java.lang.String,java.lang.String)",
            "cn.hutool.poi.excel.ExcelWriter:void <init>(java.lang.String)"
        ]
    },
    "cn.hutool.poi.excel.sax.AbstractExcelSaxReader:java.lang.Object read(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.poi.excel.sax.AbstractExcelSaxReader:java.lang.Object read(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.poi.excel.ExcelUtil:cn.hutool.poi.excel.sax.Excel07SaxReader read07BySax(java.lang.String,int,cn.hutool.poi.excel.sax.handler.RowHandler)",
            "cn.hutool.poi.excel.ExcelUtil:cn.hutool.poi.excel.sax.Excel03SaxReader read03BySax(java.lang.String,int,cn.hutool.poi.excel.sax.handler.RowHandler)"
        ]
    },
    "cn.hutool.poi.excel.WorkbookUtil:org.apache.poi.ss.usermodel.Workbook createBook(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.file.FileCopier:java.io.File copy()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.file.FileCopier:java.lang.Object copy()",
            "cn.hutool.core.io.FileUtil:java.io.File copy(java.io.File,java.io.File,boolean)",
            "cn.hutool.core.io.FileUtil:java.io.File copyContent(java.io.File,java.io.File,boolean)",
            "cn.hutool.core.io.FileUtil:java.io.File copyFilesFromDir(java.io.File,java.io.File,boolean)"
        ]
    },
    "cn.hutool.core.io.FileUtil:java.io.File touch(java.io.File,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.http.HttpResponse:long writeBody(java.io.File,cn.hutool.core.io.StreamProgress)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HttpResponse:long writeBody(java.io.File)",
            "cn.hutool.http.HttpUtil:long downloadFile(java.lang.String,java.io.File,int,cn.hutool.core.io.StreamProgress)"
        ]
    },
    "cn.hutool.poi.excel.ExcelReader:java.util.List readAll()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.poi.excel.ExcelReader:java.util.List read(int,int,int,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.poi.excel.ExcelReader:java.util.List readAll(java.lang.Class)",
            "cn.hutool.poi.excel.ExcelReader:java.util.List read(int,int,java.lang.Class)"
        ]
    },
    "cn.hutool.core.util.ZipUtil:java.io.File unzip(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ZipUtil:java.io.File unzip(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ZipUtil:java.io.File zip(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ZipUtil:java.io.File zip(java.lang.String,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ZipUtil:java.io.File zip(java.lang.String,java.lang.String)"
        ]
    },
    "cn.hutool.core.io.file.FileReader:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.file.FileWriter:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.FileUtil:java.util.List listFileNames(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.FileUtil:java.io.BufferedOutputStream getOutputStream(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.FileUtil:java.io.BufferedWriter getWriter(java.lang.String,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.FileUtil:java.io.PrintWriter getPrintWriter(java.lang.String,java.lang.String,boolean)",
            "cn.hutool.core.util.XmlUtil:void toFile(org.w3c.dom.Document,java.lang.String,java.lang.String)"
        ]
    },
    "cn.hutool.core.io.FileUtil:java.io.BufferedWriter getWriter(java.lang.String,java.nio.charset.Charset,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.FileUtil:java.io.PrintWriter getPrintWriter(java.lang.String,java.nio.charset.Charset,boolean)",
            "cn.hutool.setting.dialect.Props:void store(java.lang.String)"
        ]
    },
    "cn.hutool.core.io.FileUtil:java.io.File writeString(java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.FileUtil:java.io.File writeString(java.lang.String,java.lang.String,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.FileUtil:java.io.File writeUtf8String(java.lang.String,java.lang.String)"
        ]
    },
    "cn.hutool.core.io.FileUtil:java.io.File appendString(java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.FileUtil:java.io.File appendString(java.lang.String,java.lang.String,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.FileUtil:java.io.File appendUtf8String(java.lang.String,java.lang.String)"
        ]
    },
    "cn.hutool.core.io.FileUtil:java.io.File writeBytes(byte[],java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.FileUtil:java.io.File writeFromStream(java.io.InputStream,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.FileUtil:void writeToStream(java.lang.String,java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.extra.servlet.multipart.UploadFile:java.io.File write(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.extra.servlet.multipart.UploadFile:boolean processStream(cn.hutool.extra.servlet.multipart.MultipartRequestInputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.servlet.multipart.MultipartFormData:void parseRequestStream(java.io.InputStream,java.lang.String)"
        ]
    },
    "cn.hutool.captcha.AbstractCaptcha:void write(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.poi.excel.ExcelUtil:void readBySax(java.lang.String,int,cn.hutool.poi.excel.sax.handler.RowHandler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.bloomfilter.BitSetBloomFilter:void init(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.FileUtil:java.io.BufferedReader getUtf8Reader(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.FileUtil:java.lang.String readUtf8String(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.FileUtil:java.util.List readLines(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.FileUtil:java.util.Collection readUtf8Lines(java.lang.String,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.FileUtil:java.util.List readLines(java.lang.String,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.FileUtil:java.util.List readUtf8Lines(java.lang.String)"
        ]
    },
    "cn.hutool.core.io.FileUtil:java.lang.Object loadUtf8(java.lang.String,cn.hutool.core.io.file.FileReader$ReaderHandler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.FileUtil:java.io.File writeLines(java.util.Collection,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.FileUtil:java.io.File appendLines(java.util.Collection,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.FileUtil:java.io.File writeLines(java.util.Collection,java.lang.String,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.FileUtil:java.io.File writeUtf8Lines(java.util.Collection,java.lang.String)"
        ]
    },
    "cn.hutool.core.io.FileUtil:java.io.File appendLines(java.util.Collection,java.lang.String,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.FileUtil:java.io.File appendUtf8Lines(java.util.Collection,java.lang.String)"
        ]
    },
    "cn.hutool.core.io.resource.ClassPathResource:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.resource.ResourceUtil:java.lang.String readUtf8Str(java.lang.String)",
            "cn.hutool.core.io.resource.ResourceUtil:java.lang.String readStr(java.lang.String,java.nio.charset.Charset)",
            "cn.hutool.core.io.resource.ResourceUtil:java.io.InputStream getStream(java.lang.String)",
            "cn.hutool.core.io.resource.ResourceUtil:java.io.InputStream getStreamSafe(java.lang.String)",
            "cn.hutool.core.io.resource.ResourceUtil:java.io.BufferedReader getReader(java.lang.String,java.nio.charset.Charset)",
            "cn.hutool.core.io.resource.ResourceUtil:cn.hutool.core.io.resource.Resource getResourceObj(java.lang.String)"
        ]
    },
    "cn.hutool.core.io.resource.ClassPathResource:void <init>(java.lang.String,java.lang.ClassLoader)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.resource.ClassPathResource:void <init>(java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.setting.dialect.Props:void <init>(java.lang.String,java.lang.Class,java.nio.charset.Charset)",
            "cn.hutool.setting.Setting:void <init>(java.lang.String,java.lang.Class,java.nio.charset.Charset,boolean)"
        ]
    },
    "cn.hutool.core.io.resource.ResourceUtil:cn.hutool.core.io.resource.Resource getResourceObj(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.setting.dialect.Props:void <init>(java.lang.String,java.nio.charset.Charset)",
            "cn.hutool.setting.Setting:void <init>(java.lang.String,java.nio.charset.Charset,boolean)"
        ]
    },
    "cn.hutool.core.text.csv.CsvUtil:cn.hutool.core.text.csv.CsvWriter getWriter(java.lang.String,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.text.csv.CsvUtil:cn.hutool.core.text.csv.CsvWriter getWriter(java.lang.String,java.nio.charset.Charset,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ZipUtil:java.io.File zip(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ZipUtil:java.io.File unzip(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ZipUtil:byte[] unzipFileBytes(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.extra.template.engine.freemarker.FreemarkerEngine:void <init>(cn.hutool.extra.template.TemplateConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.template.engine.EngineFactory:cn.hutool.extra.template.Engine doCreate(cn.hutool.extra.template.TemplateConfig)",
            "cn.hutool.extra.template.engine.freemarker.FreemarkerEngine:void <init>()"
        ]
    },
    "cn.hutool.poi.excel.ExcelUtil:cn.hutool.poi.excel.ExcelReader getReader(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.poi.excel.ExcelUtil:cn.hutool.poi.excel.ExcelReader getReader(java.lang.String)"
        ]
    },
    "cn.hutool.poi.excel.ExcelUtil:cn.hutool.poi.excel.ExcelWriter getWriter(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.poi.excel.ExcelWriter:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.poi.excel.ExcelUtil:cn.hutool.poi.excel.ExcelWriter getWriter(java.lang.String)"
        ]
    },
    "cn.hutool.poi.excel.ExcelUtil:cn.hutool.poi.excel.sax.Excel07SaxReader read07BySax(java.lang.String,int,cn.hutool.poi.excel.sax.handler.RowHandler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.poi.excel.ExcelUtil:cn.hutool.poi.excel.sax.Excel03SaxReader read03BySax(java.lang.String,int,cn.hutool.poi.excel.sax.handler.RowHandler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.file.FileCopier:java.lang.Object copy()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.FileUtil:java.io.File copy(java.io.File,java.io.File,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.FileUtil:java.io.File copy(java.lang.String,java.lang.String,boolean)",
            "cn.hutool.core.io.FileUtil:void move(java.io.File,java.io.File,boolean)"
        ]
    },
    "cn.hutool.core.io.FileUtil:java.io.File copyContent(java.io.File,java.io.File,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.FileUtil:java.io.File copyFilesFromDir(java.io.File,java.io.File,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.http.HttpResponse:long writeBody(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HttpResponse:long writeBody(java.lang.String)"
        ]
    },
    "cn.hutool.http.HttpUtil:long downloadFile(java.lang.String,java.io.File,int,cn.hutool.core.io.StreamProgress)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HttpUtil:long downloadFile(java.lang.String,java.io.File,int)",
            "cn.hutool.http.HttpUtil:long downloadFile(java.lang.String,java.io.File,cn.hutool.core.io.StreamProgress)"
        ]
    },
    "cn.hutool.poi.excel.ExcelReader:java.util.List readAll(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.poi.excel.ExcelReader:java.util.List read(int,int,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ZipUtil:java.io.File zip(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.FileUtil:java.io.PrintWriter getPrintWriter(java.lang.String,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.template.engine.velocity.VelocityUtil:void toFile(org.apache.velocity.Template,org.apache.velocity.VelocityContext,java.lang.String)"
        ]
    },
    "cn.hutool.core.util.XmlUtil:void toFile(org.w3c.dom.Document,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.XmlUtil:void toFile(org.w3c.dom.Document,java.lang.String)"
        ]
    },
    "cn.hutool.core.io.FileUtil:java.io.PrintWriter getPrintWriter(java.lang.String,java.nio.charset.Charset,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.setting.SettingLoader:void store(java.lang.String)"
        ]
    },
    "cn.hutool.setting.dialect.Props:void store(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.setting.dialect.Props:void store(java.lang.String,java.lang.Class)"
        ]
    },
    "cn.hutool.core.io.FileUtil:java.io.File writeUtf8String(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.FileUtil:java.io.File appendUtf8String(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.extra.servlet.multipart.MultipartFormData:void parseRequestStream(java.io.InputStream,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.servlet.multipart.MultipartFormData:void parseRequest(javax.servlet.ServletRequest)"
        ]
    },
    "cn.hutool.core.io.FileUtil:java.util.List readUtf8Lines(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.FileUtil:java.io.File writeUtf8Lines(java.util.Collection,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.FileUtil:java.io.File appendUtf8Lines(java.util.Collection,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.resource.ResourceUtil:java.lang.String readUtf8Str(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.resource.ResourceUtil:java.lang.String readStr(java.lang.String,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.resource.ResourceUtil:java.io.InputStream getStream(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.resource.ResourceUtil:java.io.InputStream getStreamSafe(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.dialect.jdk.JdkLogFactory:void readConfig()"
        ]
    },
    "cn.hutool.core.io.resource.ResourceUtil:java.io.BufferedReader getReader(java.lang.String,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.setting.dialect.Props:void <init>(java.lang.String,java.lang.Class,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.setting.dialect.Props:void <init>(java.lang.String,java.lang.Class,java.lang.String)"
        ]
    },
    "cn.hutool.setting.Setting:void <init>(java.lang.String,java.lang.Class,java.nio.charset.Charset,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.setting.dialect.Props:void <init>(java.lang.String,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.setting.dialect.Props:java.util.Properties getProp(java.lang.String,java.nio.charset.Charset)",
            "cn.hutool.setting.dialect.Props:void <init>(java.lang.String)",
            "cn.hutool.setting.dialect.Props:void <init>(java.lang.String,java.lang.String)"
        ]
    },
    "cn.hutool.setting.Setting:void <init>(java.lang.String,java.nio.charset.Charset,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.setting.profile.Profile:cn.hutool.setting.Setting getSetting(java.lang.String)",
            "cn.hutool.setting.Setting:void <init>(java.lang.String,boolean)",
            "cn.hutool.cron.CronUtil:void setCronSetting(java.lang.String)"
        ]
    },
    "cn.hutool.extra.template.engine.EngineFactory:cn.hutool.extra.template.Engine doCreate(cn.hutool.extra.template.TemplateConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.template.engine.EngineFactory:cn.hutool.extra.template.Engine create(cn.hutool.extra.template.TemplateConfig)"
        ]
    },
    "cn.hutool.extra.template.engine.freemarker.FreemarkerEngine:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.poi.excel.ExcelUtil:cn.hutool.poi.excel.ExcelReader getReader(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.poi.excel.ExcelUtil:cn.hutool.poi.excel.ExcelWriter getWriter(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.FileUtil:void move(java.io.File,java.io.File,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.servlet.multipart.UploadFile:java.io.File write(java.io.File)"
        ]
    },
    "cn.hutool.http.HttpUtil:long downloadFile(java.lang.String,java.io.File,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.http.HttpUtil:long downloadFile(java.lang.String,java.io.File,cn.hutool.core.io.StreamProgress)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HttpUtil:long downloadFile(java.lang.String,java.io.File)"
        ]
    },
    "cn.hutool.extra.template.engine.velocity.VelocityUtil:void toFile(org.apache.velocity.Template,org.apache.velocity.VelocityContext,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.template.engine.velocity.VelocityUtil:void toFile(org.apache.velocity.app.VelocityEngine,java.lang.String,org.apache.velocity.VelocityContext,java.lang.String)",
            "cn.hutool.extra.template.engine.velocity.VelocityUtil:void toFile(java.lang.String,org.apache.velocity.VelocityContext,java.lang.String)"
        ]
    },
    "cn.hutool.core.util.XmlUtil:void toFile(org.w3c.dom.Document,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.setting.SettingLoader:void store(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.setting.Setting:void store(java.lang.String)"
        ]
    },
    "cn.hutool.setting.dialect.Props:void store(java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.extra.servlet.multipart.MultipartFormData:void parseRequest(javax.servlet.ServletRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.servlet.ServletUtil:cn.hutool.extra.servlet.multipart.MultipartFormData getMultipart(javax.servlet.ServletRequest,cn.hutool.extra.servlet.multipart.UploadSetting)"
        ]
    },
    "cn.hutool.log.dialect.jdk.JdkLogFactory:void readConfig()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.dialect.jdk.JdkLogFactory:void <init>()"
        ]
    },
    "cn.hutool.setting.dialect.Props:void <init>(java.lang.String,java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.setting.dialect.Props:void <init>(java.lang.String,java.lang.Class)"
        ]
    },
    "cn.hutool.setting.dialect.Props:java.util.Properties getProp(java.lang.String,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.setting.dialect.Props:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.setting.dialect.Props:java.util.Properties getProp(java.lang.String)"
        ]
    },
    "cn.hutool.setting.dialect.Props:void <init>(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.setting.dialect.Props:java.util.Properties getProp(java.lang.String,java.lang.String)"
        ]
    },
    "cn.hutool.setting.profile.Profile:cn.hutool.setting.Setting getSetting(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.setting.profile.GlobalProfile:cn.hutool.setting.Setting getSetting(java.lang.String)"
        ]
    },
    "cn.hutool.setting.Setting:void <init>(java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.ds.DSFactory:void <init>(java.lang.String,java.lang.Class,cn.hutool.setting.Setting)",
            "cn.hutool.db.nosql.mongo.MongoDS:void initSingle()",
            "cn.hutool.db.nosql.mongo.MongoDS:void initCloud()",
            "cn.hutool.db.nosql.redis.RedisDS:cn.hutool.db.nosql.redis.RedisDS init(java.lang.String)",
            "cn.hutool.setting.Setting:void <init>(java.lang.String)",
            "cn.hutool.setting.SettingUtil:cn.hutool.setting.Setting get(java.lang.String)"
        ]
    },
    "cn.hutool.cron.CronUtil:void setCronSetting(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.cron.CronUtil:void start(boolean)"
        ]
    },
    "cn.hutool.extra.template.engine.EngineFactory:cn.hutool.extra.template.Engine create(cn.hutool.extra.template.TemplateConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.template.TemplateUtil:cn.hutool.extra.template.Engine createEngine(cn.hutool.extra.template.TemplateConfig)"
        ]
    },
    "cn.hutool.extra.servlet.multipart.UploadFile:java.io.File write(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.servlet.multipart.UploadFile:java.io.File write(java.lang.String)"
        ]
    },
    "cn.hutool.http.HttpUtil:long downloadFile(java.lang.String,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HttpUtil:long downloadFile(java.lang.String,java.lang.String)"
        ]
    },
    "cn.hutool.extra.template.engine.velocity.VelocityUtil:void toFile(org.apache.velocity.app.VelocityEngine,java.lang.String,org.apache.velocity.VelocityContext,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.extra.template.engine.velocity.VelocityUtil:void toFile(java.lang.String,org.apache.velocity.VelocityContext,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.setting.Setting:void store(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.extra.servlet.ServletUtil:cn.hutool.extra.servlet.multipart.MultipartFormData getMultipart(javax.servlet.ServletRequest,cn.hutool.extra.servlet.multipart.UploadSetting)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.servlet.ServletUtil:cn.hutool.extra.servlet.multipart.MultipartFormData getMultipart(javax.servlet.ServletRequest)"
        ]
    },
    "cn.hutool.log.dialect.jdk.JdkLogFactory:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.LogFactory:cn.hutool.log.LogFactory doCreate()"
        ]
    },
    "cn.hutool.setting.dialect.Props:void <init>(java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.setting.dialect.Props:java.util.Properties getProp(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.setting.dialect.Props:java.util.Properties getProp(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.setting.profile.GlobalProfile:cn.hutool.setting.Setting getSetting(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.ds.DSFactory:void <init>(java.lang.String,java.lang.Class,cn.hutool.setting.Setting)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.ds.c3p0.C3p0DSFactory:void <init>(cn.hutool.setting.Setting)",
            "cn.hutool.db.ds.dbcp.DbcpDSFactory:void <init>(cn.hutool.setting.Setting)",
            "cn.hutool.db.ds.druid.DruidDSFactory:void <init>(cn.hutool.setting.Setting)",
            "cn.hutool.db.ds.hikari.HikariDSFactory:void <init>(cn.hutool.setting.Setting)",
            "cn.hutool.db.ds.jndi.JndiDSFactory:void <init>(cn.hutool.setting.Setting)",
            "cn.hutool.db.ds.pooled.PooledDSFactory:void <init>(cn.hutool.setting.Setting)",
            "cn.hutool.db.ds.simple.SimpleDSFactory:void <init>(cn.hutool.setting.Setting)",
            "cn.hutool.db.ds.tomcat.TomcatDSFactory:void <init>(cn.hutool.setting.Setting)"
        ]
    },
    "cn.hutool.db.nosql.mongo.MongoDS:void initSingle()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.nosql.mongo.MongoDS:void <init>(java.lang.String,int)",
            "cn.hutool.db.nosql.mongo.MongoDS:void <init>(cn.hutool.setting.Setting,java.lang.String,int)",
            "cn.hutool.db.nosql.mongo.MongoDS:void init()"
        ]
    },
    "cn.hutool.db.nosql.mongo.MongoDS:void initCloud()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.nosql.mongo.MongoDS:void init()"
        ]
    },
    "cn.hutool.db.nosql.redis.RedisDS:cn.hutool.db.nosql.redis.RedisDS init(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.nosql.redis.RedisDS:void <init>(cn.hutool.setting.Setting,java.lang.String)"
        ]
    },
    "cn.hutool.setting.Setting:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.ds.pooled.DbSetting:void <init>(cn.hutool.setting.Setting)",
            "cn.hutool.db.ds.simple.SimpleDataSource:void <init>(cn.hutool.setting.Setting,java.lang.String)",
            "cn.hutool.extra.mail.MailAccount:void <init>(java.lang.String)"
        ]
    },
    "cn.hutool.setting.SettingUtil:cn.hutool.setting.Setting get(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.cron.CronUtil:void start(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.cron.CronUtil:void start()"
        ]
    },
    "cn.hutool.extra.template.TemplateUtil:cn.hutool.extra.template.Engine createEngine(cn.hutool.extra.template.TemplateConfig)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.extra.servlet.ServletUtil:cn.hutool.extra.servlet.multipart.MultipartFormData getMultipart(javax.servlet.ServletRequest)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.log.LogFactory:cn.hutool.log.LogFactory doCreate()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.LogFactory:cn.hutool.log.LogFactory create()"
        ]
    },
    "cn.hutool.db.ds.c3p0.C3p0DSFactory:void <init>(cn.hutool.setting.Setting)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.ds.c3p0.C3p0DSFactory:void <init>()",
            "cn.hutool.db.ds.DSFactory:cn.hutool.db.ds.DSFactory doCreate(cn.hutool.setting.Setting)"
        ]
    },
    "cn.hutool.db.ds.dbcp.DbcpDSFactory:void <init>(cn.hutool.setting.Setting)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.ds.dbcp.DbcpDSFactory:void <init>()",
            "cn.hutool.db.ds.DSFactory:cn.hutool.db.ds.DSFactory doCreate(cn.hutool.setting.Setting)"
        ]
    },
    "cn.hutool.db.ds.druid.DruidDSFactory:void <init>(cn.hutool.setting.Setting)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.ds.druid.DruidDSFactory:void <init>()",
            "cn.hutool.db.ds.DSFactory:cn.hutool.db.ds.DSFactory doCreate(cn.hutool.setting.Setting)"
        ]
    },
    "cn.hutool.db.ds.hikari.HikariDSFactory:void <init>(cn.hutool.setting.Setting)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.ds.DSFactory:cn.hutool.db.ds.DSFactory doCreate(cn.hutool.setting.Setting)",
            "cn.hutool.db.ds.hikari.HikariDSFactory:void <init>()"
        ]
    },
    "cn.hutool.db.ds.jndi.JndiDSFactory:void <init>(cn.hutool.setting.Setting)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.ds.jndi.JndiDSFactory:void <init>()"
        ]
    },
    "cn.hutool.db.ds.pooled.PooledDSFactory:void <init>(cn.hutool.setting.Setting)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.ds.DSFactory:cn.hutool.db.ds.DSFactory doCreate(cn.hutool.setting.Setting)",
            "cn.hutool.db.ds.pooled.PooledDSFactory:void <init>()"
        ]
    },
    "cn.hutool.db.ds.simple.SimpleDSFactory:void <init>(cn.hutool.setting.Setting)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.ds.simple.SimpleDSFactory:void <init>()"
        ]
    },
    "cn.hutool.db.ds.tomcat.TomcatDSFactory:void <init>(cn.hutool.setting.Setting)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.ds.DSFactory:cn.hutool.db.ds.DSFactory doCreate(cn.hutool.setting.Setting)",
            "cn.hutool.db.ds.tomcat.TomcatDSFactory:void <init>()"
        ]
    },
    "cn.hutool.db.nosql.mongo.MongoDS:void <init>(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.nosql.mongo.MongoFactory:cn.hutool.db.nosql.mongo.MongoDS getDS(java.lang.String,int)"
        ]
    },
    "cn.hutool.db.nosql.mongo.MongoDS:void <init>(cn.hutool.setting.Setting,java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.nosql.mongo.MongoDS:void init()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.nosql.mongo.MongoDS:void <init>(java.lang.String[])",
            "cn.hutool.db.nosql.mongo.MongoDS:void <init>(cn.hutool.setting.Setting,java.lang.String[])"
        ]
    },
    "cn.hutool.db.nosql.redis.RedisDS:void <init>(cn.hutool.setting.Setting,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.nosql.redis.RedisDS:cn.hutool.db.nosql.redis.RedisDS create(cn.hutool.setting.Setting,java.lang.String)",
            "cn.hutool.db.nosql.redis.RedisDS:void <init>()",
            "cn.hutool.db.nosql.redis.RedisDS:void <init>(java.lang.String)"
        ]
    },
    "cn.hutool.db.ds.pooled.DbSetting:void <init>(cn.hutool.setting.Setting)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.ds.pooled.DbSetting:void <init>()",
            "cn.hutool.db.ds.pooled.PooledDSFactory:cn.hutool.db.ds.pooled.PooledDataSource createDataSource(java.lang.String)"
        ]
    },
    "cn.hutool.db.ds.simple.SimpleDataSource:void <init>(cn.hutool.setting.Setting,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.ds.simple.SimpleDataSource:void <init>(java.lang.String)",
            "cn.hutool.db.ds.simple.SimpleDSFactory:cn.hutool.db.ds.simple.SimpleDataSource createDataSource(java.lang.String)"
        ]
    },
    "cn.hutool.extra.mail.MailAccount:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.mail.GlobalMailAccount:cn.hutool.extra.mail.MailAccount createDefaultAccount()"
        ]
    },
    "cn.hutool.cron.CronUtil:void start()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.log.LogFactory:cn.hutool.log.LogFactory create()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.GlobalLogFactory:cn.hutool.log.LogFactory get()"
        ]
    },
    "cn.hutool.db.ds.c3p0.C3p0DSFactory:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.ds.DSFactory:cn.hutool.db.ds.DSFactory doCreate(cn.hutool.setting.Setting)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.ds.DSFactory:cn.hutool.db.ds.DSFactory create(cn.hutool.setting.Setting)"
        ]
    },
    "cn.hutool.db.ds.dbcp.DbcpDSFactory:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.ds.druid.DruidDSFactory:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.ds.hikari.HikariDSFactory:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.ds.jndi.JndiDSFactory:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.ds.pooled.PooledDSFactory:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.ds.simple.SimpleDSFactory:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.ds.tomcat.TomcatDSFactory:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.nosql.mongo.MongoFactory:cn.hutool.db.nosql.mongo.MongoDS getDS(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.nosql.mongo.MongoDS:void <init>(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.nosql.mongo.MongoFactory:cn.hutool.db.nosql.mongo.MongoDS getDS(java.lang.String[])"
        ]
    },
    "cn.hutool.db.nosql.mongo.MongoDS:void <init>(cn.hutool.setting.Setting,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.nosql.mongo.MongoFactory:cn.hutool.db.nosql.mongo.MongoDS getDS(cn.hutool.setting.Setting,java.lang.String[])"
        ]
    },
    "cn.hutool.db.nosql.redis.RedisDS:cn.hutool.db.nosql.redis.RedisDS create(cn.hutool.setting.Setting,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.nosql.redis.RedisDS:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.nosql.redis.RedisDS:cn.hutool.db.nosql.redis.RedisDS create()"
        ]
    },
    "cn.hutool.db.nosql.redis.RedisDS:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.nosql.redis.RedisDS:cn.hutool.db.nosql.redis.RedisDS create(java.lang.String)"
        ]
    },
    "cn.hutool.db.ds.pooled.DbSetting:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.ds.pooled.PooledDataSource:void <init>(java.lang.String)"
        ]
    },
    "cn.hutool.db.ds.pooled.PooledDSFactory:cn.hutool.db.ds.pooled.PooledDataSource createDataSource(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.ds.pooled.PooledDSFactory:javax.sql.DataSource getDataSource(java.lang.String)"
        ]
    },
    "cn.hutool.db.ds.simple.SimpleDataSource:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.ds.simple.SimpleDataSource:cn.hutool.db.ds.simple.SimpleDataSource getDataSource(java.lang.String)",
            "cn.hutool.db.ds.simple.SimpleDataSource:void <init>()"
        ]
    },
    "cn.hutool.db.ds.simple.SimpleDSFactory:cn.hutool.db.ds.simple.SimpleDataSource createDataSource(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.ds.simple.SimpleDSFactory:javax.sql.DataSource getDataSource(java.lang.String)"
        ]
    },
    "cn.hutool.extra.mail.GlobalMailAccount:cn.hutool.extra.mail.MailAccount createDefaultAccount()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.mail.GlobalMailAccount:void <init>(java.lang.String,int)"
        ]
    },
    "cn.hutool.log.GlobalLogFactory:cn.hutool.log.LogFactory get()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.LogFactory:cn.hutool.log.LogFactory getCurrentLogFactory()"
        ]
    },
    "cn.hutool.db.ds.DSFactory:cn.hutool.db.ds.DSFactory create(cn.hutool.setting.Setting)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.ds.DSFactory:cn.hutool.db.ds.DSFactory getCurrentDSFactory(cn.hutool.setting.Setting)",
            "cn.hutool.db.ds.GlobalDSFactory:cn.hutool.db.ds.DSFactory get()"
        ]
    },
    "cn.hutool.db.nosql.mongo.MongoFactory:cn.hutool.db.nosql.mongo.MongoDS getDS(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.nosql.mongo.MongoFactory:cn.hutool.db.nosql.mongo.MongoDS getDS(java.util.Collection)"
        ]
    },
    "cn.hutool.db.nosql.mongo.MongoFactory:cn.hutool.db.nosql.mongo.MongoDS getDS(cn.hutool.setting.Setting,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.nosql.mongo.MongoFactory:cn.hutool.db.nosql.mongo.MongoDS getDS(cn.hutool.setting.Setting,java.util.Collection)"
        ]
    },
    "cn.hutool.db.nosql.redis.RedisDS:cn.hutool.db.nosql.redis.RedisDS create()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.nosql.redis.RedisDS:cn.hutool.db.nosql.redis.RedisDS create(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.ds.pooled.PooledDataSource:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.ds.pooled.PooledDataSource:cn.hutool.db.ds.pooled.PooledDataSource getDataSource(java.lang.String)",
            "cn.hutool.db.ds.pooled.PooledDataSource:void <init>()"
        ]
    },
    "cn.hutool.db.ds.pooled.PooledDSFactory:javax.sql.DataSource getDataSource(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.ds.DSFactory:javax.sql.DataSource getDataSource()",
            "cn.hutool.db.ds.DSFactory:javax.sql.DataSource get(java.lang.String)"
        ]
    },
    "cn.hutool.db.ds.simple.SimpleDataSource:cn.hutool.db.ds.simple.SimpleDataSource getDataSource(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.ds.simple.SimpleDataSource:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.ds.simple.SimpleDataSource:cn.hutool.db.ds.simple.SimpleDataSource getDataSource()"
        ]
    },
    "cn.hutool.db.ds.simple.SimpleDSFactory:javax.sql.DataSource getDataSource(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.ds.DSFactory:javax.sql.DataSource getDataSource()",
            "cn.hutool.db.ds.DSFactory:javax.sql.DataSource get(java.lang.String)"
        ]
    },
    "cn.hutool.extra.mail.GlobalMailAccount:void <init>(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.mail.GlobalMailAccount:void <clinit>()"
        ]
    },
    "cn.hutool.log.LogFactory:cn.hutool.log.LogFactory getCurrentLogFactory()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.LogFactory:cn.hutool.log.Log get(java.lang.String)",
            "cn.hutool.log.LogFactory:cn.hutool.log.Log get(java.lang.Class)"
        ]
    },
    "cn.hutool.db.ds.DSFactory:cn.hutool.db.ds.DSFactory getCurrentDSFactory(cn.hutool.setting.Setting)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.ds.GlobalDSFactory:cn.hutool.db.ds.DSFactory get()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.ds.DSFactory:javax.sql.DataSource get(java.lang.String)"
        ]
    },
    "cn.hutool.db.nosql.mongo.MongoFactory:cn.hutool.db.nosql.mongo.MongoDS getDS(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.nosql.mongo.MongoFactory:cn.hutool.db.nosql.mongo.MongoDS getDS(cn.hutool.setting.Setting,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.ds.pooled.PooledDataSource:cn.hutool.db.ds.pooled.PooledDataSource getDataSource(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.ds.pooled.PooledDataSource:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.ds.pooled.PooledDataSource:cn.hutool.db.ds.pooled.PooledDataSource getDataSource()"
        ]
    },
    "cn.hutool.db.ds.DSFactory:javax.sql.DataSource getDataSource()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.ds.DSFactory:javax.sql.DataSource get(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.Db:cn.hutool.db.Db use(java.lang.String)",
            "cn.hutool.db.DbUtil:javax.sql.DataSource getDs(java.lang.String)",
            "cn.hutool.db.ds.DSFactory:javax.sql.DataSource get()",
            "cn.hutool.db.Session:cn.hutool.db.Session create(java.lang.String)",
            "cn.hutool.db.SqlRunner:cn.hutool.db.SqlRunner create(java.lang.String)"
        ]
    },
    "cn.hutool.db.ds.simple.SimpleDataSource:cn.hutool.db.ds.simple.SimpleDataSource getDataSource()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.extra.mail.GlobalMailAccount:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.mail.GlobalMailAccount:cn.hutool.extra.mail.GlobalMailAccount[] values()",
            "cn.hutool.extra.mail.GlobalMailAccount:void <clinit>()",
            "cn.hutool.extra.mail.Mail:void <init>()",
            "cn.hutool.extra.mail.Mail:void <init>(cn.hutool.extra.mail.MailAccount)",
            "cn.hutool.extra.mail.MailUtil:void send(java.util.Collection,java.lang.String,java.lang.String,boolean,java.io.File[])",
            "cn.hutool.extra.mail.MailUtil:void send(java.util.Collection,java.util.Collection,java.util.Collection,java.lang.String,java.lang.String,boolean,java.io.File[])"
        ]
    },
    "cn.hutool.log.LogFactory:cn.hutool.log.Log get(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.StaticLog:cn.hutool.log.Log get(java.lang.String)"
        ]
    },
    "cn.hutool.log.LogFactory:cn.hutool.log.Log get(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.LogFactory:cn.hutool.log.Log get()",
            "cn.hutool.log.StaticLog:void trace(java.lang.String,java.lang.Object[])",
            "cn.hutool.log.StaticLog:void debug(java.lang.String,java.lang.Object[])",
            "cn.hutool.log.StaticLog:void info(java.lang.String,java.lang.Object[])",
            "cn.hutool.log.StaticLog:void warn(java.lang.String,java.lang.Object[])",
            "cn.hutool.log.StaticLog:void warn(java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.log.StaticLog:void error(java.lang.Throwable)",
            "cn.hutool.log.StaticLog:void error(java.lang.String,java.lang.Object[])",
            "cn.hutool.log.StaticLog:void error(java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.log.StaticLog:boolean log(cn.hutool.log.level.Level,java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.log.StaticLog:cn.hutool.log.Log get(java.lang.Class)",
            "cn.hutool.log.StaticLog:cn.hutool.log.Log get()"
        ]
    },
    "cn.hutool.db.ds.pooled.PooledDataSource:cn.hutool.db.ds.pooled.PooledDataSource getDataSource()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.Db:cn.hutool.db.Db use(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.DbUtil:javax.sql.DataSource getDs(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.ds.DSFactory:javax.sql.DataSource get()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.DaoTemplate:void <init>(java.lang.String,java.lang.String)",
            "cn.hutool.db.Db:cn.hutool.db.Db use()",
            "cn.hutool.db.DbUtil:javax.sql.DataSource getDs()",
            "cn.hutool.db.Session:cn.hutool.db.Session create()",
            "cn.hutool.db.SqlRunner:cn.hutool.db.SqlRunner create()"
        ]
    },
    "cn.hutool.db.Session:cn.hutool.db.Session create(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.SqlRunner:cn.hutool.db.SqlRunner create(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.extra.mail.GlobalMailAccount:cn.hutool.extra.mail.GlobalMailAccount[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.extra.mail.Mail:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.mail.Mail:cn.hutool.extra.mail.Mail create()"
        ]
    },
    "cn.hutool.extra.mail.Mail:void <init>(cn.hutool.extra.mail.MailAccount)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.mail.Mail:cn.hutool.extra.mail.Mail create(cn.hutool.extra.mail.MailAccount)",
            "cn.hutool.extra.mail.Mail:void <init>()"
        ]
    },
    "cn.hutool.extra.mail.MailUtil:void send(java.util.Collection,java.lang.String,java.lang.String,boolean,java.io.File[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.mail.MailUtil:void send(java.lang.String,java.lang.String,java.lang.String,boolean,java.io.File[])",
            "cn.hutool.extra.mail.MailUtil:void sendText(java.util.Collection,java.lang.String,java.lang.String,java.io.File[])",
            "cn.hutool.extra.mail.MailUtil:void sendHtml(java.util.Collection,java.lang.String,java.lang.String,java.io.File[])"
        ]
    },
    "cn.hutool.extra.mail.MailUtil:void send(java.util.Collection,java.util.Collection,java.util.Collection,java.lang.String,java.lang.String,boolean,java.io.File[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.mail.MailUtil:void send(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,java.io.File[])"
        ]
    },
    "cn.hutool.log.StaticLog:cn.hutool.log.Log get(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.log.LogFactory:cn.hutool.log.Log get()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.DbUtil:void <clinit>()",
            "cn.hutool.db.ds.DSFactory:void <clinit>()",
            "cn.hutool.db.Session:void <clinit>()",
            "cn.hutool.db.sql.SqlLog:void <clinit>()",
            "cn.hutool.extra.servlet.multipart.UploadFile:void <clinit>()",
            "cn.hutool.http.HttpConnection:void <clinit>()",
            "cn.hutool.setting.dialect.Props:void <clinit>()",
            "cn.hutool.setting.SettingLoader:void <clinit>()",
            "cn.hutool.cron.CronTimer:void <clinit>()"
        ]
    },
    "cn.hutool.log.StaticLog:void trace(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.log.StaticLog:void debug(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.dialect.DialectFactory:cn.hutool.db.dialect.Dialect newDialect(java.lang.String)",
            "cn.hutool.db.ds.GlobalDSFactory$1:void run()",
            "cn.hutool.db.ds.GlobalDSFactory:cn.hutool.db.ds.DSFactory set(cn.hutool.db.ds.DSFactory)",
            "cn.hutool.extra.template.engine.EngineFactory:cn.hutool.extra.template.Engine create(cn.hutool.extra.template.TemplateConfig)",
            "cn.hutool.setting.Setting:void autoLoad(boolean)",
            "cn.hutool.cron.Scheduler:cn.hutool.cron.Scheduler schedule(cn.hutool.setting.Setting)"
        ]
    },
    "cn.hutool.log.StaticLog:void info(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.log.StaticLog:void warn(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpResponse sendRedirectIfPosible()"
        ]
    },
    "cn.hutool.log.StaticLog:void warn(java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.log.StaticLog:void error(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.Db:void quietRollback(java.sql.Connection)",
            "cn.hutool.db.Db:void quietSetAutoCommit(java.sql.Connection,java.lang.Boolean)"
        ]
    },
    "cn.hutool.log.StaticLog:void error(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.log.StaticLog:void error(java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.cron.listener.TaskListenerManager:void notifyTaskFailed(cn.hutool.cron.TaskExecutor,java.lang.Throwable)"
        ]
    },
    "cn.hutool.log.StaticLog:boolean log(cn.hutool.log.level.Level,java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.log.StaticLog:cn.hutool.log.Log get(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.log.StaticLog:cn.hutool.log.Log get()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.nosql.mongo.MongoDS:void <clinit>()",
            "cn.hutool.extra.servlet.multipart.UploadSetting:void <clinit>()",
            "cn.hutool.setting.AbsSetting:void <clinit>()"
        ]
    },
    "cn.hutool.db.DaoTemplate:void <init>(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.DaoTemplate:void <init>(java.lang.String)"
        ]
    },
    "cn.hutool.db.Db:cn.hutool.db.Db use()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.ActiveEntity:void <init>()",
            "cn.hutool.db.ActiveEntity:void <init>(java.lang.String)",
            "cn.hutool.db.ActiveEntity:void <init>(cn.hutool.db.Entity)",
            "cn.hutool.db.DbUtil:cn.hutool.db.Db use()"
        ]
    },
    "cn.hutool.db.DbUtil:javax.sql.DataSource getDs()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.DbUtil:cn.hutool.db.SqlRunner newSqlRunner()",
            "cn.hutool.db.DbUtil:cn.hutool.db.Session newSession()"
        ]
    },
    "cn.hutool.db.Session:cn.hutool.db.Session create()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.SqlRunner:cn.hutool.db.SqlRunner create()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.extra.mail.Mail:cn.hutool.extra.mail.Mail create()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.extra.mail.Mail:cn.hutool.extra.mail.Mail create(cn.hutool.extra.mail.MailAccount)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.mail.MailUtil:void send(cn.hutool.extra.mail.MailAccount,java.util.Collection,java.lang.String,java.lang.String,boolean,java.io.File[])",
            "cn.hutool.extra.mail.MailUtil:void send(cn.hutool.extra.mail.MailAccount,java.util.Collection,java.util.Collection,java.util.Collection,java.lang.String,java.lang.String,boolean,java.io.File[])"
        ]
    },
    "cn.hutool.extra.mail.MailUtil:void send(java.lang.String,java.lang.String,java.lang.String,boolean,java.io.File[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.mail.MailUtil:void sendText(java.lang.String,java.lang.String,java.lang.String,java.io.File[])",
            "cn.hutool.extra.mail.MailUtil:void sendHtml(java.lang.String,java.lang.String,java.lang.String,java.io.File[])"
        ]
    },
    "cn.hutool.extra.mail.MailUtil:void sendText(java.util.Collection,java.lang.String,java.lang.String,java.io.File[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.extra.mail.MailUtil:void sendHtml(java.util.Collection,java.lang.String,java.lang.String,java.io.File[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.extra.mail.MailUtil:void send(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,java.io.File[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.DbUtil:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.DbUtil:cn.hutool.db.SqlRunner newSqlRunner()",
            "cn.hutool.db.DbUtil:cn.hutool.db.Session newSession()",
            "cn.hutool.db.DbUtil:void close(java.lang.Object[])",
            "cn.hutool.db.DbUtil:javax.sql.DataSource getJndiDsWithLog(java.lang.String)",
            "cn.hutool.db.DbUtil:void setShowSqlGlobal(cn.hutool.setting.Setting)",
            "cn.hutool.db.DbUtil:void <clinit>()",
            "cn.hutool.db.dialect.DriverUtil:java.lang.String identifyDriver(javax.sql.DataSource)",
            "cn.hutool.db.ds.DSFactory:void <init>(java.lang.String,java.lang.Class,cn.hutool.setting.Setting)",
            "cn.hutool.db.ds.jndi.JndiDSFactory:javax.sql.DataSource createDataSource(java.lang.String)",
            "cn.hutool.db.ds.pooled.PooledConnection:cn.hutool.db.ds.pooled.PooledConnection release()",
            "cn.hutool.db.meta.MetaUtil:java.util.List getTables(javax.sql.DataSource,java.lang.String,java.lang.String,cn.hutool.db.meta.TableType[])",
            "cn.hutool.db.meta.MetaUtil:java.lang.String[] getColumnNames(javax.sql.DataSource,java.lang.String)",
            "cn.hutool.db.meta.MetaUtil:cn.hutool.db.meta.Table getTableMeta(javax.sql.DataSource,java.lang.String)",
            "cn.hutool.db.sql.SqlExecutor:int execute(java.sql.Connection,java.lang.String,java.lang.Object[])",
            "cn.hutool.db.sql.SqlExecutor:boolean call(java.sql.Connection,java.lang.String,java.lang.Object[])",
            "cn.hutool.db.sql.SqlExecutor:java.sql.ResultSet callQuery(java.sql.Connection,java.lang.String,java.lang.Object[])",
            "cn.hutool.db.sql.SqlExecutor:java.lang.Long executeForGeneratedKey(java.sql.Connection,java.lang.String,java.lang.Object[])",
            "cn.hutool.db.sql.SqlExecutor:int[] executeBatch(java.sql.Connection,java.lang.String,java.lang.Object[][])",
            "cn.hutool.db.sql.SqlExecutor:java.lang.Object query(java.sql.Connection,java.lang.String,cn.hutool.db.handler.RsHandler,java.lang.Object[])",
            "cn.hutool.db.sql.SqlExecutor:java.lang.Object query(java.sql.PreparedStatement,cn.hutool.db.handler.RsHandler,java.lang.Object[])",
            "cn.hutool.db.sql.SqlExecutor:java.lang.Object queryAndClosePs(java.sql.PreparedStatement,cn.hutool.db.handler.RsHandler,java.lang.Object[])",
            "cn.hutool.db.SqlConnRunner:int insert(java.sql.Connection,cn.hutool.db.Entity)",
            "cn.hutool.db.SqlConnRunner:int[] insert(java.sql.Connection,cn.hutool.db.Entity[])",
            "cn.hutool.db.SqlConnRunner:java.util.List insertForGeneratedKeys(java.sql.Connection,cn.hutool.db.Entity)",
            "cn.hutool.db.SqlConnRunner:java.lang.Long insertForGeneratedKey(java.sql.Connection,cn.hutool.db.Entity)",
            "cn.hutool.db.SqlConnRunner:int del(java.sql.Connection,cn.hutool.db.Entity)",
            "cn.hutool.db.SqlConnRunner:int update(java.sql.Connection,cn.hutool.db.Entity,cn.hutool.db.Entity)",
            "cn.hutool.db.SqlConnRunner:java.lang.Object find(java.sql.Connection,cn.hutool.db.sql.Query,cn.hutool.db.handler.RsHandler)",
            "cn.hutool.db.SqlConnRunner:int count(java.sql.Connection,cn.hutool.db.Entity)",
            "cn.hutool.db.SqlRunner:void closeConnection(java.sql.Connection)",
            "cn.hutool.db.StatementUtil:java.lang.Long getGeneratedKeyOfLong(java.sql.PreparedStatement)",
            "cn.hutool.db.StatementUtil:java.util.List getGeneratedKeys(java.sql.PreparedStatement)",
            "cn.hutool.db.ThreadLocalConnection$GroupedConnection:cn.hutool.db.ThreadLocalConnection$GroupedConnection close(javax.sql.DataSource)"
        ]
    },
    "cn.hutool.db.ds.DSFactory:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.DaoTemplate:void <init>(java.lang.String,java.lang.String)",
            "cn.hutool.db.Db:cn.hutool.db.Db use()",
            "cn.hutool.db.Db:cn.hutool.db.Db use(java.lang.String)",
            "cn.hutool.db.DbUtil:javax.sql.DataSource getDs()",
            "cn.hutool.db.DbUtil:javax.sql.DataSource getDs(java.lang.String)",
            "cn.hutool.db.ds.DSFactory:javax.sql.DataSource get()",
            "cn.hutool.db.ds.DSFactory:cn.hutool.db.ds.DSFactory getCurrentDSFactory(cn.hutool.setting.Setting)",
            "cn.hutool.db.ds.DSFactory:cn.hutool.db.ds.DSFactory create(cn.hutool.setting.Setting)",
            "cn.hutool.db.ds.DSFactory:void <clinit>()",
            "cn.hutool.db.ds.GlobalDSFactory:cn.hutool.db.ds.DSFactory get()",
            "cn.hutool.db.ds.pooled.DbSetting:cn.hutool.db.ds.pooled.DbConfig getDbConfig(java.lang.String)",
            "cn.hutool.db.ds.simple.SimpleDataSource:void <init>(cn.hutool.setting.Setting,java.lang.String)",
            "cn.hutool.db.Session:cn.hutool.db.Session create()",
            "cn.hutool.db.Session:cn.hutool.db.Session create(java.lang.String)",
            "cn.hutool.db.SqlRunner:cn.hutool.db.SqlRunner create()",
            "cn.hutool.db.SqlRunner:cn.hutool.db.SqlRunner create(java.lang.String)"
        ]
    },
    "cn.hutool.db.Session:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.DbUtil:cn.hutool.db.Session newSession()",
            "cn.hutool.db.DbUtil:cn.hutool.db.Session newSession(javax.sql.DataSource)",
            "cn.hutool.db.Session:cn.hutool.db.Session create()",
            "cn.hutool.db.Session:cn.hutool.db.Session create(java.lang.String)",
            "cn.hutool.db.Session:cn.hutool.db.Session create(javax.sql.DataSource)",
            "cn.hutool.db.Session:void commit()",
            "cn.hutool.db.Session:void rollback()",
            "cn.hutool.db.Session:void quietRollback()",
            "cn.hutool.db.Session:void rollback(java.sql.Savepoint)",
            "cn.hutool.db.Session:void quietRollback(java.sql.Savepoint)",
            "cn.hutool.db.Session:void <clinit>()"
        ]
    },
    "cn.hutool.db.sql.SqlLog:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.DbUtil:void setShowSqlGlobal(boolean,boolean,boolean,cn.hutool.log.level.Level)",
            "cn.hutool.db.sql.SqlLog:cn.hutool.db.sql.SqlLog[] values()",
            "cn.hutool.db.sql.SqlLog:void log(java.lang.String,java.lang.Object)",
            "cn.hutool.db.sql.SqlLog:void <clinit>()",
            "cn.hutool.db.StatementUtil:java.sql.PreparedStatement prepareStatement(java.sql.Connection,java.lang.String,java.lang.Object[])"
        ]
    },
    "cn.hutool.extra.servlet.multipart.UploadFile:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.servlet.multipart.MultipartFormData:void parseRequestStream(java.io.InputStream,java.lang.String)",
            "cn.hutool.extra.servlet.multipart.MultipartFormData:void putFile(java.lang.String,cn.hutool.extra.servlet.multipart.UploadFile)",
            "cn.hutool.extra.servlet.multipart.UploadFile:boolean processStream(cn.hutool.extra.servlet.multipart.MultipartRequestInputStream)",
            "cn.hutool.extra.servlet.multipart.UploadFile:void <clinit>()"
        ]
    },
    "cn.hutool.http.HttpConnection:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HttpConnection:cn.hutool.http.HttpConnection create(java.lang.String,cn.hutool.http.Method)",
            "cn.hutool.http.HttpConnection:cn.hutool.http.HttpConnection create(java.lang.String,cn.hutool.http.Method,int)",
            "cn.hutool.http.HttpConnection:cn.hutool.http.HttpConnection create(java.lang.String,cn.hutool.http.Method,javax.net.ssl.HostnameVerifier,javax.net.ssl.SSLSocketFactory)",
            "cn.hutool.http.HttpConnection:cn.hutool.http.HttpConnection create(java.lang.String,cn.hutool.http.Method,javax.net.ssl.HostnameVerifier,javax.net.ssl.SSLSocketFactory,int,java.net.Proxy)",
            "cn.hutool.http.HttpConnection:cn.hutool.http.HttpConnection setCookie(java.lang.String)",
            "cn.hutool.http.HttpConnection:void <clinit>()",
            "cn.hutool.http.HttpRequest:void initConnecton()"
        ]
    },
    "cn.hutool.setting.dialect.Props:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.setting.dialect.Props:java.util.Properties getProp(java.lang.String)",
            "cn.hutool.setting.dialect.Props:java.util.Properties getProp(java.lang.String,java.lang.String)",
            "cn.hutool.setting.dialect.Props:java.util.Properties getProp(java.lang.String,java.nio.charset.Charset)",
            "cn.hutool.setting.dialect.Props:void load(cn.hutool.core.io.resource.Resource)",
            "cn.hutool.setting.dialect.Props:void <clinit>()"
        ]
    },
    "cn.hutool.setting.SettingLoader:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.setting.Setting:boolean load()",
            "cn.hutool.setting.Setting:void store(java.lang.String)",
            "cn.hutool.setting.SettingLoader:boolean load(cn.hutool.core.io.resource.UrlResource)",
            "cn.hutool.setting.SettingLoader:void <clinit>()"
        ]
    },
    "cn.hutool.cron.CronTimer:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.cron.CronTimer:void run()",
            "cn.hutool.cron.CronTimer:void <clinit>()",
            "cn.hutool.cron.Scheduler:cn.hutool.cron.Scheduler start()"
        ]
    },
    "cn.hutool.db.dialect.DialectFactory:cn.hutool.db.dialect.Dialect newDialect(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.Db:cn.hutool.db.Db use(javax.sql.DataSource,java.lang.String)",
            "cn.hutool.db.Db:void <init>(javax.sql.DataSource,java.lang.String)",
            "cn.hutool.db.dialect.DialectFactory:cn.hutool.db.dialect.Dialect newDialect(javax.sql.DataSource)",
            "cn.hutool.db.dialect.DialectFactory:cn.hutool.db.dialect.Dialect newDialect(java.sql.Connection)",
            "cn.hutool.db.Session:void <init>(javax.sql.DataSource,java.lang.String)",
            "cn.hutool.db.SqlConnRunner:void <init>(java.lang.String)",
            "cn.hutool.db.SqlRunner:cn.hutool.db.SqlRunner create(javax.sql.DataSource,java.lang.String)",
            "cn.hutool.db.SqlRunner:void <init>(javax.sql.DataSource,java.lang.String)"
        ]
    },
    "cn.hutool.db.ds.GlobalDSFactory$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.thread.GlobalThreadPool:void execute(java.lang.Runnable)",
            "cn.hutool.core.thread.ThreadUtil$1:void run()",
            "cn.hutool.cron.task.RunnableTask:void execute()"
        ]
    },
    "cn.hutool.db.ds.GlobalDSFactory:cn.hutool.db.ds.DSFactory set(cn.hutool.db.ds.DSFactory)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.ds.DSFactory:cn.hutool.db.ds.DSFactory setCurrentDSFactory(cn.hutool.db.ds.DSFactory)"
        ]
    },
    "cn.hutool.setting.Setting:void autoLoad(boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.cron.Scheduler:cn.hutool.cron.Scheduler schedule(cn.hutool.setting.Setting)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.cron.CronUtil:void schedule(cn.hutool.setting.Setting)"
        ]
    },
    "cn.hutool.http.HttpRequest:cn.hutool.http.HttpResponse sendRedirectIfPosible()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpResponse execute(boolean)"
        ]
    },
    "cn.hutool.db.Db:void quietRollback(java.sql.Connection)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.Db:cn.hutool.db.Db tx(cn.hutool.db.transaction.TransactionLevel,cn.hutool.db.transaction.TxFunc)"
        ]
    },
    "cn.hutool.db.Db:void quietSetAutoCommit(java.sql.Connection,java.lang.Boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.Db:cn.hutool.db.Db tx(cn.hutool.db.transaction.TransactionLevel,cn.hutool.db.transaction.TxFunc)"
        ]
    },
    "cn.hutool.cron.listener.TaskListenerManager:void notifyTaskFailed(cn.hutool.cron.TaskExecutor,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.cron.TaskExecutor:void run()"
        ]
    },
    "cn.hutool.db.nosql.mongo.MongoDS:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.nosql.mongo.MongoDS:void initSingle()",
            "cn.hutool.db.nosql.mongo.MongoDS:void initCloud()",
            "cn.hutool.db.nosql.mongo.MongoDS:com.mongodb.MongoClientOptions$Builder buildMongoClientOptions(com.mongodb.MongoClientOptions$Builder,java.lang.String)",
            "cn.hutool.db.nosql.mongo.MongoDS:void <clinit>()",
            "cn.hutool.db.nosql.mongo.MongoFactory:cn.hutool.db.nosql.mongo.MongoDS getDS(java.lang.String,int)",
            "cn.hutool.db.nosql.mongo.MongoFactory:cn.hutool.db.nosql.mongo.MongoDS getDS(java.lang.String[])",
            "cn.hutool.db.nosql.mongo.MongoFactory:cn.hutool.db.nosql.mongo.MongoDS getDS(cn.hutool.setting.Setting,java.lang.String[])"
        ]
    },
    "cn.hutool.extra.servlet.multipart.UploadSetting:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.servlet.multipart.MultipartFormData:void <init>(cn.hutool.extra.servlet.multipart.UploadSetting)",
            "cn.hutool.extra.servlet.multipart.UploadSetting:void load(java.lang.String)",
            "cn.hutool.extra.servlet.multipart.UploadSetting:void <clinit>()",
            "cn.hutool.extra.servlet.ServletUtil:cn.hutool.extra.servlet.multipart.MultipartFormData getMultipart(javax.servlet.ServletRequest)"
        ]
    },
    "cn.hutool.setting.AbsSetting:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.ds.DSFactory:void <init>(java.lang.String,java.lang.Class,cn.hutool.setting.Setting)",
            "cn.hutool.db.ds.pooled.DbSetting:void <init>(cn.hutool.setting.Setting)",
            "cn.hutool.db.ds.simple.SimpleDataSource:void <init>(cn.hutool.setting.Setting,java.lang.String)",
            "cn.hutool.db.nosql.mongo.MongoDS:void initSingle()",
            "cn.hutool.db.nosql.mongo.MongoDS:void initCloud()",
            "cn.hutool.db.nosql.redis.RedisDS:cn.hutool.db.nosql.redis.RedisDS init(java.lang.String)",
            "cn.hutool.extra.mail.MailAccount:void <init>(java.lang.String)",
            "cn.hutool.extra.servlet.multipart.UploadSetting:void load(java.lang.String)",
            "cn.hutool.setting.AbsSetting$1:java.lang.Object value(java.lang.String,java.lang.reflect.Type)",
            "cn.hutool.setting.AbsSetting:java.lang.String getWithLog(java.lang.String)",
            "cn.hutool.setting.AbsSetting:java.lang.String getByGroupWithLog(java.lang.String,java.lang.String)",
            "cn.hutool.setting.AbsSetting:cn.hutool.log.Log access$000()",
            "cn.hutool.setting.AbsSetting:void <clinit>()",
            "cn.hutool.setting.profile.Profile:void <init>(java.lang.String)",
            "cn.hutool.setting.profile.Profile:cn.hutool.setting.Setting getSetting(java.lang.String)",
            "cn.hutool.setting.Setting:void <init>(java.lang.String,boolean)",
            "cn.hutool.setting.Setting:cn.hutool.setting.Setting getSetting(java.lang.String)",
            "cn.hutool.setting.Setting:void <clinit>()",
            "cn.hutool.setting.SettingUtil:cn.hutool.setting.Setting get(java.lang.String)",
            "cn.hutool.cron.CronUtil:void setCronSetting(java.lang.String)"
        ]
    },
    "cn.hutool.db.DaoTemplate:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.ActiveEntity:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.ActiveEntity:cn.hutool.db.ActiveEntity create()"
        ]
    },
    "cn.hutool.db.ActiveEntity:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.ActiveEntity:cn.hutool.db.ActiveEntity create(java.lang.String)"
        ]
    },
    "cn.hutool.db.ActiveEntity:void <init>(cn.hutool.db.Entity)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.DbUtil:cn.hutool.db.Db use()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.DbUtil:cn.hutool.db.SqlRunner newSqlRunner()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.DbUtil:cn.hutool.db.Session newSession()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.extra.mail.MailUtil:void send(cn.hutool.extra.mail.MailAccount,java.util.Collection,java.lang.String,java.lang.String,boolean,java.io.File[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.mail.MailUtil:void send(java.util.Collection,java.lang.String,java.lang.String,boolean,java.io.File[])",
            "cn.hutool.extra.mail.MailUtil:void send(cn.hutool.extra.mail.MailAccount,java.lang.String,java.lang.String,java.lang.String,boolean,java.io.File[])"
        ]
    },
    "cn.hutool.extra.mail.MailUtil:void send(cn.hutool.extra.mail.MailAccount,java.util.Collection,java.util.Collection,java.util.Collection,java.lang.String,java.lang.String,boolean,java.io.File[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.mail.MailUtil:void send(java.util.Collection,java.util.Collection,java.util.Collection,java.lang.String,java.lang.String,boolean,java.io.File[])"
        ]
    },
    "cn.hutool.extra.mail.MailUtil:void sendText(java.lang.String,java.lang.String,java.lang.String,java.io.File[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.extra.mail.MailUtil:void sendHtml(java.lang.String,java.lang.String,java.lang.String,java.io.File[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.DbUtil:void close(java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.dialect.DriverUtil:java.lang.String identifyDriver(javax.sql.DataSource)",
            "cn.hutool.db.ds.pooled.PooledConnection:cn.hutool.db.ds.pooled.PooledConnection release()",
            "cn.hutool.db.meta.MetaUtil:java.util.List getTables(javax.sql.DataSource,java.lang.String,java.lang.String,cn.hutool.db.meta.TableType[])",
            "cn.hutool.db.meta.MetaUtil:java.lang.String[] getColumnNames(javax.sql.DataSource,java.lang.String)",
            "cn.hutool.db.meta.MetaUtil:cn.hutool.db.meta.Table getTableMeta(javax.sql.DataSource,java.lang.String)",
            "cn.hutool.db.sql.SqlExecutor:int execute(java.sql.Connection,java.lang.String,java.lang.Object[])",
            "cn.hutool.db.sql.SqlExecutor:boolean call(java.sql.Connection,java.lang.String,java.lang.Object[])",
            "cn.hutool.db.sql.SqlExecutor:java.sql.ResultSet callQuery(java.sql.Connection,java.lang.String,java.lang.Object[])",
            "cn.hutool.db.sql.SqlExecutor:java.lang.Long executeForGeneratedKey(java.sql.Connection,java.lang.String,java.lang.Object[])",
            "cn.hutool.db.sql.SqlExecutor:int[] executeBatch(java.sql.Connection,java.lang.String,java.lang.Object[][])",
            "cn.hutool.db.sql.SqlExecutor:java.lang.Object query(java.sql.Connection,java.lang.String,cn.hutool.db.handler.RsHandler,java.lang.Object[])",
            "cn.hutool.db.sql.SqlExecutor:java.lang.Object query(java.sql.PreparedStatement,cn.hutool.db.handler.RsHandler,java.lang.Object[])",
            "cn.hutool.db.sql.SqlExecutor:java.lang.Object queryAndClosePs(java.sql.PreparedStatement,cn.hutool.db.handler.RsHandler,java.lang.Object[])",
            "cn.hutool.db.SqlConnRunner:int insert(java.sql.Connection,cn.hutool.db.Entity)",
            "cn.hutool.db.SqlConnRunner:int[] insert(java.sql.Connection,cn.hutool.db.Entity[])",
            "cn.hutool.db.SqlConnRunner:java.util.List insertForGeneratedKeys(java.sql.Connection,cn.hutool.db.Entity)",
            "cn.hutool.db.SqlConnRunner:java.lang.Long insertForGeneratedKey(java.sql.Connection,cn.hutool.db.Entity)",
            "cn.hutool.db.SqlConnRunner:int del(java.sql.Connection,cn.hutool.db.Entity)",
            "cn.hutool.db.SqlConnRunner:int update(java.sql.Connection,cn.hutool.db.Entity,cn.hutool.db.Entity)",
            "cn.hutool.db.SqlConnRunner:java.lang.Object find(java.sql.Connection,cn.hutool.db.sql.Query,cn.hutool.db.handler.RsHandler)",
            "cn.hutool.db.SqlConnRunner:int count(java.sql.Connection,cn.hutool.db.Entity)",
            "cn.hutool.db.SqlRunner:void closeConnection(java.sql.Connection)",
            "cn.hutool.db.StatementUtil:java.lang.Long getGeneratedKeyOfLong(java.sql.PreparedStatement)",
            "cn.hutool.db.StatementUtil:java.util.List getGeneratedKeys(java.sql.PreparedStatement)",
            "cn.hutool.db.ThreadLocalConnection$GroupedConnection:cn.hutool.db.ThreadLocalConnection$GroupedConnection close(javax.sql.DataSource)"
        ]
    },
    "cn.hutool.db.DbUtil:javax.sql.DataSource getJndiDsWithLog(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.DbUtil:void setShowSqlGlobal(cn.hutool.setting.Setting)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.ds.DSFactory:void <init>(java.lang.String,java.lang.Class,cn.hutool.setting.Setting)"
        ]
    },
    "cn.hutool.db.dialect.DriverUtil:java.lang.String identifyDriver(javax.sql.DataSource)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.dialect.DialectFactory:cn.hutool.db.dialect.Dialect newDialect(javax.sql.DataSource)"
        ]
    },
    "cn.hutool.db.ds.jndi.JndiDSFactory:javax.sql.DataSource createDataSource(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.ds.jndi.JndiDSFactory:javax.sql.DataSource getDataSource(java.lang.String)"
        ]
    },
    "cn.hutool.db.ds.pooled.PooledConnection:cn.hutool.db.ds.pooled.PooledConnection release()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.ds.pooled.PooledDataSource:void close()"
        ]
    },
    "cn.hutool.db.meta.MetaUtil:java.util.List getTables(javax.sql.DataSource,java.lang.String,java.lang.String,cn.hutool.db.meta.TableType[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.meta.MetaUtil:java.util.List getTables(javax.sql.DataSource,cn.hutool.db.meta.TableType[])",
            "cn.hutool.db.meta.MetaUtil:java.util.List getTables(javax.sql.DataSource,java.lang.String,cn.hutool.db.meta.TableType[])"
        ]
    },
    "cn.hutool.db.meta.MetaUtil:java.lang.String[] getColumnNames(javax.sql.DataSource,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.meta.MetaUtil:cn.hutool.db.Entity createLimitedEntity(javax.sql.DataSource,java.lang.String)"
        ]
    },
    "cn.hutool.db.meta.MetaUtil:cn.hutool.db.meta.Table getTableMeta(javax.sql.DataSource,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.sql.SqlExecutor:int execute(java.sql.Connection,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.AbstractDb:int execute(java.lang.String,java.lang.Object[])",
            "cn.hutool.db.sql.SqlExecutor:int execute(java.sql.Connection,java.lang.String,java.util.Map)"
        ]
    },
    "cn.hutool.db.sql.SqlExecutor:boolean call(java.sql.Connection,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.sql.SqlExecutor:java.sql.ResultSet callQuery(java.sql.Connection,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.sql.SqlExecutor:java.lang.Long executeForGeneratedKey(java.sql.Connection,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.AbstractDb:java.lang.Long executeForGeneratedKey(java.lang.String,java.lang.Object[])",
            "cn.hutool.db.sql.SqlExecutor:java.lang.Long executeForGeneratedKey(java.sql.Connection,java.lang.String,java.util.Map)"
        ]
    },
    "cn.hutool.db.sql.SqlExecutor:int[] executeBatch(java.sql.Connection,java.lang.String,java.lang.Object[][])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.AbstractDb:int[] executeBatch(java.lang.String,java.lang.Object[][])"
        ]
    },
    "cn.hutool.db.sql.SqlExecutor:java.lang.Object query(java.sql.Connection,java.lang.String,cn.hutool.db.handler.RsHandler,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.AbstractDb:java.lang.Object query(java.lang.String,cn.hutool.db.handler.RsHandler,java.lang.Object[])",
            "cn.hutool.db.sql.SqlExecutor:java.lang.Object query(java.sql.Connection,java.lang.String,cn.hutool.db.handler.RsHandler,java.util.Map)"
        ]
    },
    "cn.hutool.db.sql.SqlExecutor:java.lang.Object query(java.sql.PreparedStatement,cn.hutool.db.handler.RsHandler,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.sql.SqlExecutor:java.lang.Object query(java.sql.Connection,java.lang.String,cn.hutool.db.handler.RsHandler,java.lang.Object[])",
            "cn.hutool.db.sql.SqlExecutor:java.lang.Object queryAndClosePs(java.sql.PreparedStatement,cn.hutool.db.handler.RsHandler,java.lang.Object[])",
            "cn.hutool.db.SqlConnRunner:java.lang.Object find(java.sql.Connection,cn.hutool.db.sql.Query,cn.hutool.db.handler.RsHandler)",
            "cn.hutool.db.SqlConnRunner:int count(java.sql.Connection,cn.hutool.db.Entity)"
        ]
    },
    "cn.hutool.db.sql.SqlExecutor:java.lang.Object queryAndClosePs(java.sql.PreparedStatement,cn.hutool.db.handler.RsHandler,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.SqlConnRunner:java.lang.Object page(java.sql.Connection,java.util.Collection,cn.hutool.db.Entity,cn.hutool.db.Page,cn.hutool.db.handler.RsHandler)"
        ]
    },
    "cn.hutool.db.SqlConnRunner:int insert(java.sql.Connection,cn.hutool.db.Entity)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.AbstractDb:int insert(cn.hutool.db.Entity)",
            "cn.hutool.db.SqlConnRunner:int insertOrUpdate(java.sql.Connection,cn.hutool.db.Entity,java.lang.String[])",
            "cn.hutool.db.SqlConnRunner:int[] insert(java.sql.Connection,cn.hutool.db.Entity[])"
        ]
    },
    "cn.hutool.db.SqlConnRunner:int[] insert(java.sql.Connection,cn.hutool.db.Entity[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.SqlConnRunner:int[] insert(java.sql.Connection,java.util.Collection)"
        ]
    },
    "cn.hutool.db.SqlConnRunner:java.util.List insertForGeneratedKeys(java.sql.Connection,cn.hutool.db.Entity)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.AbstractDb:java.util.List insertForGeneratedKeys(cn.hutool.db.Entity)"
        ]
    },
    "cn.hutool.db.SqlConnRunner:java.lang.Long insertForGeneratedKey(java.sql.Connection,cn.hutool.db.Entity)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.AbstractDb:java.lang.Long insertForGeneratedKey(cn.hutool.db.Entity)"
        ]
    },
    "cn.hutool.db.SqlConnRunner:int del(java.sql.Connection,cn.hutool.db.Entity)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.AbstractDb:int del(cn.hutool.db.Entity)"
        ]
    },
    "cn.hutool.db.SqlConnRunner:int update(java.sql.Connection,cn.hutool.db.Entity,cn.hutool.db.Entity)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.AbstractDb:int update(cn.hutool.db.Entity,cn.hutool.db.Entity)",
            "cn.hutool.db.SqlConnRunner:int insertOrUpdate(java.sql.Connection,cn.hutool.db.Entity,java.lang.String[])"
        ]
    },
    "cn.hutool.db.SqlConnRunner:java.lang.Object find(java.sql.Connection,cn.hutool.db.sql.Query,cn.hutool.db.handler.RsHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.AbstractDb:java.lang.Object find(cn.hutool.db.sql.Query,cn.hutool.db.handler.RsHandler)",
            "cn.hutool.db.SqlConnRunner:java.lang.Object find(java.sql.Connection,java.util.Collection,cn.hutool.db.Entity,cn.hutool.db.handler.RsHandler)"
        ]
    },
    "cn.hutool.db.SqlConnRunner:int count(java.sql.Connection,cn.hutool.db.Entity)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.AbstractDb:int count(cn.hutool.db.Entity)",
            "cn.hutool.db.SqlConnRunner:int insertOrUpdate(java.sql.Connection,cn.hutool.db.Entity,java.lang.String[])",
            "cn.hutool.db.SqlConnRunner:cn.hutool.db.PageResult page(java.sql.Connection,java.util.Collection,cn.hutool.db.Entity,int,int)",
            "cn.hutool.db.SqlConnRunner:cn.hutool.db.PageResult page(java.sql.Connection,java.util.Collection,cn.hutool.db.Entity,cn.hutool.db.Page)"
        ]
    },
    "cn.hutool.db.SqlRunner:void closeConnection(java.sql.Connection)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.AbstractDb:java.lang.Object query(java.lang.String,cn.hutool.db.handler.RsHandler,java.lang.Object[])",
            "cn.hutool.db.AbstractDb:int execute(java.lang.String,java.lang.Object[])",
            "cn.hutool.db.AbstractDb:java.lang.Long executeForGeneratedKey(java.lang.String,java.lang.Object[])",
            "cn.hutool.db.AbstractDb:int[] executeBatch(java.lang.String,java.lang.Object[][])",
            "cn.hutool.db.AbstractDb:int insert(cn.hutool.db.Entity)",
            "cn.hutool.db.AbstractDb:int insertOrUpdate(cn.hutool.db.Entity,java.lang.String[])",
            "cn.hutool.db.AbstractDb:int[] insert(java.util.Collection)",
            "cn.hutool.db.AbstractDb:java.util.List insertForGeneratedKeys(cn.hutool.db.Entity)",
            "cn.hutool.db.AbstractDb:java.lang.Long insertForGeneratedKey(cn.hutool.db.Entity)",
            "cn.hutool.db.AbstractDb:int del(cn.hutool.db.Entity)",
            "cn.hutool.db.AbstractDb:int update(cn.hutool.db.Entity,cn.hutool.db.Entity)",
            "cn.hutool.db.AbstractDb:java.lang.Object find(java.util.Collection,cn.hutool.db.Entity,cn.hutool.db.handler.RsHandler)",
            "cn.hutool.db.AbstractDb:java.lang.Object find(cn.hutool.db.sql.Query,cn.hutool.db.handler.RsHandler)",
            "cn.hutool.db.AbstractDb:int count(cn.hutool.db.Entity)",
            "cn.hutool.db.AbstractDb:java.lang.Object page(java.util.Collection,cn.hutool.db.Entity,int,int,cn.hutool.db.handler.RsHandler)",
            "cn.hutool.db.AbstractDb:java.lang.Object page(java.util.Collection,cn.hutool.db.Entity,cn.hutool.db.Page,cn.hutool.db.handler.RsHandler)",
            "cn.hutool.db.AbstractDb:cn.hutool.db.PageResult page(java.util.Collection,cn.hutool.db.Entity,int,int)",
            "cn.hutool.db.AbstractDb:cn.hutool.db.PageResult page(java.util.Collection,cn.hutool.db.Entity,cn.hutool.db.Page)"
        ]
    },
    "cn.hutool.db.StatementUtil:java.lang.Long getGeneratedKeyOfLong(java.sql.PreparedStatement)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.SqlConnRunner:java.lang.Long insertForGeneratedKey(java.sql.Connection,cn.hutool.db.Entity)"
        ]
    },
    "cn.hutool.db.StatementUtil:java.util.List getGeneratedKeys(java.sql.PreparedStatement)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.SqlConnRunner:java.util.List insertForGeneratedKeys(java.sql.Connection,cn.hutool.db.Entity)"
        ]
    },
    "cn.hutool.db.ThreadLocalConnection$GroupedConnection:cn.hutool.db.ThreadLocalConnection$GroupedConnection close(javax.sql.DataSource)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.ThreadLocalConnection:void close(javax.sql.DataSource)"
        ]
    },
    "cn.hutool.db.ds.pooled.DbSetting:cn.hutool.db.ds.pooled.DbConfig getDbConfig(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.ds.pooled.PooledDataSource:void <init>(cn.hutool.db.ds.pooled.DbSetting,java.lang.String)"
        ]
    },
    "cn.hutool.db.DbUtil:cn.hutool.db.Session newSession(javax.sql.DataSource)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.Session:cn.hutool.db.Session create(javax.sql.DataSource)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.DbUtil:cn.hutool.db.Session newSession()",
            "cn.hutool.db.DbUtil:cn.hutool.db.Session newSession(javax.sql.DataSource)"
        ]
    },
    "cn.hutool.db.Session:void commit()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.Session:void trans(cn.hutool.core.lang.VoidFunc)"
        ]
    },
    "cn.hutool.db.Session:void rollback()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.Session:void quietRollback()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.Session:void trans(cn.hutool.core.lang.VoidFunc)"
        ]
    },
    "cn.hutool.db.Session:void rollback(java.sql.Savepoint)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.Session:void quietRollback(java.sql.Savepoint)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.DbUtil:void setShowSqlGlobal(boolean,boolean,boolean,cn.hutool.log.level.Level)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.DbUtil:void setShowSqlGlobal(cn.hutool.setting.Setting)"
        ]
    },
    "cn.hutool.db.sql.SqlLog:cn.hutool.db.sql.SqlLog[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.sql.SqlLog:void log(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.StatementUtil:java.sql.PreparedStatement prepareStatement(java.sql.Connection,java.lang.String,java.lang.Object[])"
        ]
    },
    "cn.hutool.db.StatementUtil:java.sql.PreparedStatement prepareStatement(java.sql.Connection,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.dialect.impl.AnsiSqlDialect:java.sql.PreparedStatement psForInsertBatch(java.sql.Connection,cn.hutool.db.Entity[])",
            "cn.hutool.db.StatementUtil:java.sql.PreparedStatement prepareStatement(java.sql.Connection,cn.hutool.db.sql.SqlBuilder)",
            "cn.hutool.db.StatementUtil:java.sql.PreparedStatement prepareStatement(java.sql.Connection,java.lang.String,java.util.Collection)"
        ]
    },
    "cn.hutool.extra.servlet.multipart.MultipartFormData:void putFile(java.lang.String,cn.hutool.extra.servlet.multipart.UploadFile)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.servlet.multipart.MultipartFormData:void parseRequestStream(java.io.InputStream,java.lang.String)"
        ]
    },
    "cn.hutool.http.HttpConnection:cn.hutool.http.HttpConnection create(java.lang.String,cn.hutool.http.Method)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.http.HttpConnection:cn.hutool.http.HttpConnection create(java.lang.String,cn.hutool.http.Method,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.http.HttpConnection:cn.hutool.http.HttpConnection create(java.lang.String,cn.hutool.http.Method,javax.net.ssl.HostnameVerifier,javax.net.ssl.SSLSocketFactory)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.http.HttpConnection:cn.hutool.http.HttpConnection create(java.lang.String,cn.hutool.http.Method,javax.net.ssl.HostnameVerifier,javax.net.ssl.SSLSocketFactory,int,java.net.Proxy)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HttpRequest:void initConnecton()"
        ]
    },
    "cn.hutool.http.HttpConnection:cn.hutool.http.HttpConnection setCookie(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HttpRequest:void initConnecton()"
        ]
    },
    "cn.hutool.http.HttpRequest:void initConnecton()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpResponse execute(boolean)"
        ]
    },
    "cn.hutool.setting.dialect.Props:void load(cn.hutool.core.io.resource.Resource)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.setting.dialect.Props:void <init>(java.lang.String,java.nio.charset.Charset)",
            "cn.hutool.setting.dialect.Props:void <init>(java.io.File,java.nio.charset.Charset)",
            "cn.hutool.setting.dialect.Props:void <init>(java.lang.String,java.lang.Class,java.nio.charset.Charset)",
            "cn.hutool.setting.dialect.Props:void <init>(java.net.URL,java.nio.charset.Charset)",
            "cn.hutool.setting.dialect.Props:void load()"
        ]
    },
    "cn.hutool.setting.Setting:boolean load()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.setting.Setting$1:void onModify(java.nio.file.WatchEvent,java.nio.file.Path)",
            "cn.hutool.setting.Setting:boolean init(cn.hutool.core.io.resource.Resource,java.nio.charset.Charset,boolean)",
            "cn.hutool.cron.CronUtil:void restart()"
        ]
    },
    "cn.hutool.setting.SettingLoader:boolean load(cn.hutool.core.io.resource.UrlResource)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.setting.Setting:boolean load()"
        ]
    },
    "cn.hutool.cron.CronTimer:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.thread.GlobalThreadPool:void execute(java.lang.Runnable)",
            "cn.hutool.core.thread.ThreadUtil$1:void run()",
            "cn.hutool.cron.Scheduler:cn.hutool.cron.Scheduler start()",
            "cn.hutool.cron.task.RunnableTask:void execute()"
        ]
    },
    "cn.hutool.cron.Scheduler:cn.hutool.cron.Scheduler start()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.cron.CronUtil:void restart()",
            "cn.hutool.cron.Scheduler:cn.hutool.cron.Scheduler start(boolean)"
        ]
    },
    "cn.hutool.db.Db:cn.hutool.db.Db use(javax.sql.DataSource,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.Db:void <init>(javax.sql.DataSource,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.dialect.DialectFactory:cn.hutool.db.dialect.Dialect newDialect(javax.sql.DataSource)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.dialect.DialectFactory:cn.hutool.db.dialect.Dialect getDialect(javax.sql.DataSource)"
        ]
    },
    "cn.hutool.db.dialect.DialectFactory:cn.hutool.db.dialect.Dialect newDialect(java.sql.Connection)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.DbUtil:cn.hutool.db.SqlConnRunner newSqlConnRunner(java.sql.Connection)"
        ]
    },
    "cn.hutool.db.Session:void <init>(javax.sql.DataSource,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.SqlConnRunner:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.SqlConnRunner:cn.hutool.db.SqlConnRunner create(java.lang.String)"
        ]
    },
    "cn.hutool.db.SqlRunner:cn.hutool.db.SqlRunner create(javax.sql.DataSource,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.SqlRunner:void <init>(javax.sql.DataSource,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.thread.GlobalThreadPool:void execute(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.thread.ThreadUtil:void execute(java.lang.Runnable)"
        ]
    },
    "cn.hutool.core.thread.ThreadUtil$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.thread.GlobalThreadPool:void execute(java.lang.Runnable)",
            "cn.hutool.core.thread.ThreadUtil$1:void run()",
            "cn.hutool.core.thread.ThreadUtil:java.lang.Runnable excAsync(java.lang.Runnable,boolean)",
            "cn.hutool.cron.task.RunnableTask:void execute()"
        ]
    },
    "cn.hutool.cron.task.RunnableTask:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.cron.TaskExecutor:void run()"
        ]
    },
    "cn.hutool.db.ds.DSFactory:cn.hutool.db.ds.DSFactory setCurrentDSFactory(cn.hutool.db.ds.DSFactory)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.cron.CronUtil:void schedule(cn.hutool.setting.Setting)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.cron.CronUtil:void start(boolean)",
            "cn.hutool.cron.CronUtil:void restart()"
        ]
    },
    "cn.hutool.http.HttpRequest:cn.hutool.http.HttpResponse execute(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpResponse execute()",
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpResponse executeAsync()"
        ]
    },
    "cn.hutool.db.Db:cn.hutool.db.Db tx(cn.hutool.db.transaction.TransactionLevel,cn.hutool.db.transaction.TxFunc)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.Db:cn.hutool.db.Db tx(cn.hutool.db.transaction.TxFunc)"
        ]
    },
    "cn.hutool.cron.TaskExecutor:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.thread.GlobalThreadPool:void execute(java.lang.Runnable)",
            "cn.hutool.core.thread.ThreadUtil$1:void run()",
            "cn.hutool.cron.task.RunnableTask:void execute()",
            "cn.hutool.cron.TaskExecutorManager:cn.hutool.cron.TaskExecutor spawnExecutor(cn.hutool.cron.task.Task)"
        ]
    },
    "cn.hutool.db.nosql.mongo.MongoDS:com.mongodb.MongoClientOptions$Builder buildMongoClientOptions(com.mongodb.MongoClientOptions$Builder,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.nosql.mongo.MongoDS:com.mongodb.MongoClientOptions buildMongoClientOptions(java.lang.String)"
        ]
    },
    "cn.hutool.extra.servlet.multipart.MultipartFormData:void <init>(cn.hutool.extra.servlet.multipart.UploadSetting)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.servlet.multipart.MultipartFormData:void <init>()",
            "cn.hutool.extra.servlet.ServletUtil:cn.hutool.extra.servlet.multipart.MultipartFormData getMultipart(javax.servlet.ServletRequest,cn.hutool.extra.servlet.multipart.UploadSetting)"
        ]
    },
    "cn.hutool.extra.servlet.multipart.UploadSetting:void load(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.servlet.multipart.UploadSetting:void load()"
        ]
    },
    "cn.hutool.setting.AbsSetting$1:java.lang.Object value(java.lang.String,java.lang.reflect.Type)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.setting.AbsSetting$1:java.lang.Object value(java.lang.Object,java.lang.reflect.Type)"
        ]
    },
    "cn.hutool.setting.AbsSetting:java.lang.String getWithLog(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.setting.AbsSetting:java.lang.String getByGroupWithLog(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.setting.AbsSetting:cn.hutool.log.Log access$000()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.setting.AbsSetting$1:java.lang.Object value(java.lang.String,java.lang.reflect.Type)"
        ]
    },
    "cn.hutool.setting.profile.Profile:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.setting.profile.Profile:void <init>()"
        ]
    },
    "cn.hutool.setting.Setting:cn.hutool.setting.Setting getSetting(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.ds.c3p0.C3p0DSFactory:com.mchange.v2.c3p0.ComboPooledDataSource createDataSource(java.lang.String)",
            "cn.hutool.db.ds.dbcp.DbcpDSFactory:org.apache.commons.dbcp2.BasicDataSource createDataSource(java.lang.String)",
            "cn.hutool.db.ds.druid.DruidDSFactory:com.alibaba.druid.pool.DruidDataSource createDataSource(java.lang.String)",
            "cn.hutool.db.ds.pooled.DbSetting:cn.hutool.db.ds.pooled.DbConfig getDbConfig(java.lang.String)",
            "cn.hutool.db.ds.simple.SimpleDataSource:void <init>(cn.hutool.setting.Setting,java.lang.String)",
            "cn.hutool.db.ds.tomcat.TomcatDSFactory:org.apache.tomcat.jdbc.pool.DataSource createDataSource(java.lang.String)"
        ]
    },
    "cn.hutool.setting.Setting:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.ds.DSFactory:void <init>(java.lang.String,java.lang.Class,cn.hutool.setting.Setting)",
            "cn.hutool.db.ds.pooled.DbSetting:void <init>(cn.hutool.setting.Setting)",
            "cn.hutool.db.ds.simple.SimpleDataSource:void <init>(cn.hutool.setting.Setting,java.lang.String)",
            "cn.hutool.db.nosql.mongo.MongoDS:void initSingle()",
            "cn.hutool.db.nosql.mongo.MongoDS:void initCloud()",
            "cn.hutool.db.nosql.redis.RedisDS:cn.hutool.db.nosql.redis.RedisDS init(java.lang.String)",
            "cn.hutool.extra.mail.MailAccount:void <init>(java.lang.String)",
            "cn.hutool.extra.servlet.multipart.UploadSetting:void load(java.lang.String)",
            "cn.hutool.setting.profile.Profile:void <init>(java.lang.String)",
            "cn.hutool.setting.profile.Profile:cn.hutool.setting.Setting getSetting(java.lang.String)",
            "cn.hutool.setting.Setting:void <init>(java.lang.String,boolean)",
            "cn.hutool.setting.Setting:cn.hutool.setting.Setting getSetting(java.lang.String)",
            "cn.hutool.setting.Setting:void <clinit>()",
            "cn.hutool.setting.SettingUtil:cn.hutool.setting.Setting get(java.lang.String)",
            "cn.hutool.cron.CronUtil:void setCronSetting(java.lang.String)"
        ]
    },
    "cn.hutool.db.ActiveEntity:cn.hutool.db.ActiveEntity create()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.ActiveEntity:cn.hutool.db.ActiveEntity create(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.ActiveEntity:cn.hutool.db.ActiveEntity parse(java.lang.Object)",
            "cn.hutool.db.ActiveEntity:cn.hutool.db.ActiveEntity parse(java.lang.Object,boolean,boolean)",
            "cn.hutool.db.ActiveEntity:cn.hutool.db.ActiveEntity parseWithUnderlineCase(java.lang.Object)"
        ]
    },
    "cn.hutool.extra.mail.MailUtil:void send(cn.hutool.extra.mail.MailAccount,java.lang.String,java.lang.String,java.lang.String,boolean,java.io.File[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.ds.jndi.JndiDSFactory:javax.sql.DataSource getDataSource(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.ds.DSFactory:javax.sql.DataSource getDataSource()",
            "cn.hutool.db.ds.DSFactory:javax.sql.DataSource get(java.lang.String)"
        ]
    },
    "cn.hutool.db.ds.pooled.PooledDataSource:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.IoUtil:void close(java.io.Closeable)",
            "cn.hutool.core.io.IoUtil:void close(java.lang.AutoCloseable)"
        ]
    },
    "cn.hutool.db.meta.MetaUtil:java.util.List getTables(javax.sql.DataSource,cn.hutool.db.meta.TableType[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.meta.MetaUtil:java.util.List getTables(javax.sql.DataSource)"
        ]
    },
    "cn.hutool.db.meta.MetaUtil:java.util.List getTables(javax.sql.DataSource,java.lang.String,cn.hutool.db.meta.TableType[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.meta.MetaUtil:cn.hutool.db.Entity createLimitedEntity(javax.sql.DataSource,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.AbstractDb:int execute(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.sql.SqlExecutor:int execute(java.sql.Connection,java.lang.String,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.AbstractDb:java.lang.Long executeForGeneratedKey(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.sql.SqlExecutor:java.lang.Long executeForGeneratedKey(java.sql.Connection,java.lang.String,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.AbstractDb:int[] executeBatch(java.lang.String,java.lang.Object[][])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.AbstractDb:java.lang.Object query(java.lang.String,cn.hutool.db.handler.RsHandler,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.AbstractDb:java.util.List query(java.lang.String,java.lang.Object[])",
            "cn.hutool.db.AbstractDb:java.util.List query(java.lang.String,java.lang.Class,java.lang.Object[])",
            "cn.hutool.db.AbstractDb:cn.hutool.db.Entity queryOne(java.lang.String,java.lang.Object[])",
            "cn.hutool.db.AbstractDb:java.lang.Number queryNumber(java.lang.String,java.lang.Object[])",
            "cn.hutool.db.AbstractDb:java.lang.String queryString(java.lang.String,java.lang.Object[])",
            "cn.hutool.db.DaoTemplate:java.util.List findBySql(java.lang.String,java.lang.Object[])"
        ]
    },
    "cn.hutool.db.sql.SqlExecutor:java.lang.Object query(java.sql.Connection,java.lang.String,cn.hutool.db.handler.RsHandler,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.SqlConnRunner:java.lang.Object page(java.sql.Connection,java.util.Collection,cn.hutool.db.Entity,cn.hutool.db.Page,cn.hutool.db.handler.RsHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.AbstractDb:java.lang.Object page(java.util.Collection,cn.hutool.db.Entity,cn.hutool.db.Page,cn.hutool.db.handler.RsHandler)",
            "cn.hutool.db.SqlConnRunner:java.lang.Object page(java.sql.Connection,java.util.Collection,cn.hutool.db.Entity,int,int,cn.hutool.db.handler.RsHandler)",
            "cn.hutool.db.SqlConnRunner:cn.hutool.db.PageResult page(java.sql.Connection,java.util.Collection,cn.hutool.db.Entity,cn.hutool.db.Page)"
        ]
    },
    "cn.hutool.db.AbstractDb:int insert(cn.hutool.db.Entity)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.ActiveEntity:cn.hutool.db.ActiveEntity add()",
            "cn.hutool.db.DaoTemplate:int add(cn.hutool.db.Entity)"
        ]
    },
    "cn.hutool.db.SqlConnRunner:int insertOrUpdate(java.sql.Connection,cn.hutool.db.Entity,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.AbstractDb:int insertOrUpdate(cn.hutool.db.Entity,java.lang.String[])"
        ]
    },
    "cn.hutool.db.SqlConnRunner:int[] insert(java.sql.Connection,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.AbstractDb:int[] insert(java.util.Collection)"
        ]
    },
    "cn.hutool.db.AbstractDb:java.util.List insertForGeneratedKeys(cn.hutool.db.Entity)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.DaoTemplate:java.util.List addForGeneratedKeys(cn.hutool.db.Entity)"
        ]
    },
    "cn.hutool.db.AbstractDb:java.lang.Long insertForGeneratedKey(cn.hutool.db.Entity)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.DaoTemplate:java.lang.Long addForGeneratedKey(cn.hutool.db.Entity)"
        ]
    },
    "cn.hutool.db.AbstractDb:int del(cn.hutool.db.Entity)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.AbstractDb:int del(java.lang.String,java.lang.String,java.lang.Object)",
            "cn.hutool.db.ActiveEntity:cn.hutool.db.ActiveEntity del()",
            "cn.hutool.db.DaoTemplate:int del(cn.hutool.db.Entity)"
        ]
    },
    "cn.hutool.db.AbstractDb:int update(cn.hutool.db.Entity,cn.hutool.db.Entity)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.ActiveEntity:cn.hutool.db.ActiveEntity update(java.lang.String)",
            "cn.hutool.db.DaoTemplate:int update(cn.hutool.db.Entity,cn.hutool.db.Entity)",
            "cn.hutool.db.DaoTemplate:int update(cn.hutool.db.Entity)"
        ]
    },
    "cn.hutool.db.AbstractDb:java.lang.Object find(cn.hutool.db.sql.Query,cn.hutool.db.handler.RsHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.AbstractDb:java.util.List findBy(java.lang.String,cn.hutool.db.sql.Condition[])"
        ]
    },
    "cn.hutool.db.SqlConnRunner:java.lang.Object find(java.sql.Connection,java.util.Collection,cn.hutool.db.Entity,cn.hutool.db.handler.RsHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.AbstractDb:java.lang.Object find(java.util.Collection,cn.hutool.db.Entity,cn.hutool.db.handler.RsHandler)",
            "cn.hutool.db.SqlConnRunner:java.lang.Object find(java.sql.Connection,cn.hutool.db.Entity,cn.hutool.db.handler.RsHandler,java.lang.String[])",
            "cn.hutool.db.SqlConnRunner:java.util.List find(java.sql.Connection,cn.hutool.db.Entity)",
            "cn.hutool.db.SqlConnRunner:java.lang.Object page(java.sql.Connection,java.util.Collection,cn.hutool.db.Entity,cn.hutool.db.Page,cn.hutool.db.handler.RsHandler)",
            "cn.hutool.db.SqlConnRunner:cn.hutool.db.PageResult page(java.sql.Connection,java.util.Collection,cn.hutool.db.Entity,cn.hutool.db.Page)"
        ]
    },
    "cn.hutool.db.AbstractDb:int count(cn.hutool.db.Entity)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.DaoTemplate:int count(cn.hutool.db.Entity)"
        ]
    },
    "cn.hutool.db.SqlConnRunner:cn.hutool.db.PageResult page(java.sql.Connection,java.util.Collection,cn.hutool.db.Entity,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.AbstractDb:cn.hutool.db.PageResult page(java.util.Collection,cn.hutool.db.Entity,int,int)"
        ]
    },
    "cn.hutool.db.SqlConnRunner:cn.hutool.db.PageResult page(java.sql.Connection,java.util.Collection,cn.hutool.db.Entity,cn.hutool.db.Page)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.AbstractDb:cn.hutool.db.PageResult page(java.util.Collection,cn.hutool.db.Entity,cn.hutool.db.Page)",
            "cn.hutool.db.SqlConnRunner:cn.hutool.db.PageResult page(java.sql.Connection,cn.hutool.db.Entity,cn.hutool.db.Page)"
        ]
    },
    "cn.hutool.db.AbstractDb:int insertOrUpdate(cn.hutool.db.Entity,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.AbstractDb:int[] insert(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.AbstractDb:java.lang.Object find(java.util.Collection,cn.hutool.db.Entity,cn.hutool.db.handler.RsHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.AbstractDb:cn.hutool.db.Entity get(cn.hutool.db.Entity)",
            "cn.hutool.db.AbstractDb:java.lang.Object find(cn.hutool.db.Entity,cn.hutool.db.handler.RsHandler,java.lang.String[])",
            "cn.hutool.db.AbstractDb:java.util.List find(cn.hutool.db.Entity)",
            "cn.hutool.db.AbstractDb:java.util.List find(cn.hutool.db.Entity,java.lang.Class)",
            "cn.hutool.db.DaoTemplate:cn.hutool.db.Entity get(cn.hutool.db.Entity)",
            "cn.hutool.db.DaoTemplate:java.util.List find(cn.hutool.db.Entity)"
        ]
    },
    "cn.hutool.db.AbstractDb:java.lang.Object page(java.util.Collection,cn.hutool.db.Entity,int,int,cn.hutool.db.handler.RsHandler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.AbstractDb:java.lang.Object page(java.util.Collection,cn.hutool.db.Entity,cn.hutool.db.Page,cn.hutool.db.handler.RsHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.AbstractDb:java.lang.Object page(cn.hutool.db.Entity,cn.hutool.db.Page,cn.hutool.db.handler.RsHandler)"
        ]
    },
    "cn.hutool.db.AbstractDb:cn.hutool.db.PageResult page(java.util.Collection,cn.hutool.db.Entity,int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.AbstractDb:cn.hutool.db.PageResult page(java.util.Collection,cn.hutool.db.Entity,cn.hutool.db.Page)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.AbstractDb:cn.hutool.db.PageResult page(cn.hutool.db.Entity,cn.hutool.db.Page)",
            "cn.hutool.db.DaoTemplate:cn.hutool.db.PageResult page(cn.hutool.db.Entity,cn.hutool.db.Page,java.lang.String[])"
        ]
    },
    "cn.hutool.db.ThreadLocalConnection:void close(javax.sql.DataSource)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.Db:void closeConnection(java.sql.Connection)",
            "cn.hutool.db.Session:void closeConnection(java.sql.Connection)"
        ]
    },
    "cn.hutool.db.ds.pooled.PooledDataSource:void <init>(cn.hutool.db.ds.pooled.DbSetting,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.ds.pooled.PooledDataSource:void <init>(java.lang.String)",
            "cn.hutool.db.ds.pooled.PooledDSFactory:cn.hutool.db.ds.pooled.PooledDataSource createDataSource(java.lang.String)"
        ]
    },
    "cn.hutool.db.Session:void trans(cn.hutool.core.lang.VoidFunc)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.dialect.impl.AnsiSqlDialect:java.sql.PreparedStatement psForInsertBatch(java.sql.Connection,cn.hutool.db.Entity[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.SqlConnRunner:int[] insert(java.sql.Connection,cn.hutool.db.Entity[])"
        ]
    },
    "cn.hutool.db.StatementUtil:java.sql.PreparedStatement prepareStatement(java.sql.Connection,cn.hutool.db.sql.SqlBuilder)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.dialect.impl.AnsiSqlDialect:java.sql.PreparedStatement psForInsert(java.sql.Connection,cn.hutool.db.Entity)",
            "cn.hutool.db.dialect.impl.AnsiSqlDialect:java.sql.PreparedStatement psForDelete(java.sql.Connection,cn.hutool.db.sql.Query)",
            "cn.hutool.db.dialect.impl.AnsiSqlDialect:java.sql.PreparedStatement psForUpdate(java.sql.Connection,cn.hutool.db.Entity,cn.hutool.db.sql.Query)",
            "cn.hutool.db.dialect.impl.AnsiSqlDialect:java.sql.PreparedStatement psForFind(java.sql.Connection,cn.hutool.db.sql.Query)",
            "cn.hutool.db.dialect.impl.AnsiSqlDialect:java.sql.PreparedStatement psForPage(java.sql.Connection,cn.hutool.db.sql.Query)"
        ]
    },
    "cn.hutool.db.StatementUtil:java.sql.PreparedStatement prepareStatement(java.sql.Connection,java.lang.String,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.setting.dialect.Props:void <init>(java.io.File,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.setting.dialect.Props:void <init>(java.io.File)",
            "cn.hutool.setting.dialect.Props:void <init>(java.io.File,java.lang.String)"
        ]
    },
    "cn.hutool.setting.dialect.Props:void <init>(java.net.URL,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.setting.dialect.Props:void <init>(java.net.URL)",
            "cn.hutool.setting.dialect.Props:void <init>(java.net.URL,java.lang.String)"
        ]
    },
    "cn.hutool.setting.dialect.Props:void load()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.setting.dialect.Props$1:void onModify(java.nio.file.WatchEvent,java.nio.file.Path)"
        ]
    },
    "cn.hutool.setting.Setting$1:void onModify(java.nio.file.WatchEvent,java.nio.file.Path)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.watch.watchers.DelayWatcher$1:void run()",
            "cn.hutool.core.io.watch.watchers.DelayWatcher:void onModify(java.nio.file.WatchEvent,java.nio.file.Path)",
            "cn.hutool.core.io.watch.watchers.WatcherChain:void onModify(java.nio.file.WatchEvent,java.nio.file.Path)",
            "cn.hutool.core.io.watch.WatchMonitor:void watch(cn.hutool.core.io.watch.Watcher)"
        ]
    },
    "cn.hutool.setting.Setting:boolean init(cn.hutool.core.io.resource.Resource,java.nio.charset.Charset,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.setting.Setting:void <init>(java.lang.String,java.nio.charset.Charset,boolean)",
            "cn.hutool.setting.Setting:void <init>(java.io.File,java.nio.charset.Charset,boolean)",
            "cn.hutool.setting.Setting:void <init>(java.lang.String,java.lang.Class,java.nio.charset.Charset,boolean)",
            "cn.hutool.setting.Setting:void <init>(java.net.URL,java.nio.charset.Charset,boolean)"
        ]
    },
    "cn.hutool.cron.CronUtil:void restart()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.cron.Scheduler:cn.hutool.cron.Scheduler start(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.cron.CronUtil:void start(boolean)"
        ]
    },
    "cn.hutool.db.dialect.DialectFactory:cn.hutool.db.dialect.Dialect getDialect(javax.sql.DataSource)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.Db:void <init>(javax.sql.DataSource)",
            "cn.hutool.db.Session:void <init>(javax.sql.DataSource)",
            "cn.hutool.db.SqlConnRunner:cn.hutool.db.SqlConnRunner create(javax.sql.DataSource)",
            "cn.hutool.db.SqlRunner:void <init>(javax.sql.DataSource)"
        ]
    },
    "cn.hutool.db.DbUtil:cn.hutool.db.SqlConnRunner newSqlConnRunner(java.sql.Connection)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.SqlConnRunner:cn.hutool.db.SqlConnRunner create(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.thread.ThreadUtil:void execute(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.watch.watchers.DelayWatcher:void startHandleModifyThread(java.nio.file.WatchEvent,java.nio.file.Path)"
        ]
    },
    "cn.hutool.core.thread.ThreadUtil:java.lang.Runnable excAsync(java.lang.Runnable,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.http.HttpRequest:cn.hutool.http.HttpResponse execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpResponse sendRedirectIfPosible()",
            "cn.hutool.http.HttpUtil:java.lang.String get(java.lang.String,java.nio.charset.Charset)",
            "cn.hutool.http.HttpUtil:java.lang.String get(java.lang.String,int)",
            "cn.hutool.http.HttpUtil:java.lang.String get(java.lang.String,java.util.Map)",
            "cn.hutool.http.HttpUtil:java.lang.String get(java.lang.String,java.util.Map,int)",
            "cn.hutool.http.HttpUtil:java.lang.String post(java.lang.String,java.util.Map,int)",
            "cn.hutool.http.HttpUtil:java.lang.String post(java.lang.String,java.lang.String,int)",
            "cn.hutool.http.webservice.SoapRequest:java.lang.String execute()"
        ]
    },
    "cn.hutool.http.HttpRequest:cn.hutool.http.HttpResponse executeAsync()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HttpUtil:long downloadFile(java.lang.String,java.io.File,int,cn.hutool.core.io.StreamProgress)",
            "cn.hutool.http.HttpUtil:long download(java.lang.String,java.io.OutputStream,boolean,cn.hutool.core.io.StreamProgress)"
        ]
    },
    "cn.hutool.db.Db:cn.hutool.db.Db tx(cn.hutool.db.transaction.TxFunc)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.cron.TaskExecutorManager:cn.hutool.cron.TaskExecutor spawnExecutor(cn.hutool.cron.task.Task)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.cron.TaskTable:void executeTaskIfMatchInternal(long)"
        ]
    },
    "cn.hutool.db.nosql.mongo.MongoDS:com.mongodb.MongoClientOptions buildMongoClientOptions(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.nosql.mongo.MongoDS:void initSingle()",
            "cn.hutool.db.nosql.mongo.MongoDS:void initCloud()"
        ]
    },
    "cn.hutool.extra.servlet.multipart.MultipartFormData:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.extra.servlet.multipart.UploadSetting:void load()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.setting.AbsSetting$1:java.lang.Object value(java.lang.Object,java.lang.reflect.Type)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.copier.BeanCopier:void valueProviderToBean(cn.hutool.core.bean.copier.ValueProvider,java.lang.Object)"
        ]
    },
    "cn.hutool.setting.profile.Profile:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.ds.c3p0.C3p0DSFactory:com.mchange.v2.c3p0.ComboPooledDataSource createDataSource(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.ds.c3p0.C3p0DSFactory:javax.sql.DataSource getDataSource(java.lang.String)"
        ]
    },
    "cn.hutool.db.ds.dbcp.DbcpDSFactory:org.apache.commons.dbcp2.BasicDataSource createDataSource(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.ds.dbcp.DbcpDSFactory:javax.sql.DataSource getDataSource(java.lang.String)"
        ]
    },
    "cn.hutool.db.ds.druid.DruidDSFactory:com.alibaba.druid.pool.DruidDataSource createDataSource(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.ds.druid.DruidDSFactory:javax.sql.DataSource getDataSource(java.lang.String)"
        ]
    },
    "cn.hutool.db.ds.tomcat.TomcatDSFactory:org.apache.tomcat.jdbc.pool.DataSource createDataSource(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.ds.tomcat.TomcatDSFactory:org.apache.tomcat.jdbc.pool.DataSource getDataSource(java.lang.String)"
        ]
    },
    "cn.hutool.db.ActiveEntity:cn.hutool.db.ActiveEntity parse(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.ActiveEntity:cn.hutool.db.ActiveEntity parse(java.lang.Object,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.ActiveEntity:cn.hutool.db.ActiveEntity parseWithUnderlineCase(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.IoUtil:void close(java.io.Closeable)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.collection.LineIter:void close()",
            "cn.hutool.core.io.file.FileReader:byte[] readBytes()",
            "cn.hutool.core.io.file.FileReader:java.util.Collection readLines(java.util.Collection)",
            "cn.hutool.core.io.file.FileReader:void readLines(cn.hutool.core.io.LineHandler)",
            "cn.hutool.core.io.file.FileReader:java.lang.Object read(cn.hutool.core.io.file.FileReader$ReaderHandler)",
            "cn.hutool.core.io.file.FileReader:java.io.File writeToStream(java.io.OutputStream)",
            "cn.hutool.core.io.file.FileWriter:java.io.File write(java.lang.String,boolean)",
            "cn.hutool.core.io.file.FileWriter:java.io.File write(byte[],int,int,boolean)",
            "cn.hutool.core.io.file.FileWriter:java.io.File writeFromStream(java.io.InputStream)",
            "cn.hutool.core.io.FileTypeUtil:java.lang.String getType(java.io.File)",
            "cn.hutool.core.io.FileUtil:java.util.List listFileNames(java.lang.String)",
            "cn.hutool.core.io.FileUtil:boolean contentEquals(java.io.File,java.io.File)",
            "cn.hutool.core.io.FileUtil:boolean contentEqualsIgnoreEOL(java.io.File,java.io.File,java.nio.charset.Charset)",
            "cn.hutool.core.io.FileUtil:java.lang.String readString(java.net.URL,java.lang.String)",
            "cn.hutool.core.io.FileUtil:java.util.Collection readLines(java.net.URL,java.nio.charset.Charset,java.util.Collection)",
            "cn.hutool.core.io.IoUtil:void write(java.io.OutputStream,boolean,byte[])",
            "cn.hutool.core.io.IoUtil:void write(java.io.OutputStream,java.nio.charset.Charset,boolean,java.lang.Object[])",
            "cn.hutool.core.io.IoUtil:void writeObjects(java.io.OutputStream,boolean,java.io.Serializable[])",
            "cn.hutool.core.io.IoUtil:java.util.zip.Checksum checksum(java.io.InputStream,java.util.zip.Checksum)",
            "cn.hutool.core.io.resource.InputStreamResource:java.lang.String readStr(java.nio.charset.Charset)",
            "cn.hutool.core.io.resource.InputStreamResource:byte[] readBytes()",
            "cn.hutool.core.io.resource.UrlResource:java.lang.String readStr(java.nio.charset.Charset)",
            "cn.hutool.core.io.resource.UrlResource:byte[] readBytes()",
            "cn.hutool.core.io.watch.WatchMonitor:void close()",
            "cn.hutool.core.lang.JarClassLoader:cn.hutool.core.lang.JarClassLoader loadJar(java.io.File)",
            "cn.hutool.core.text.csv.CsvWriter:void close()",
            "cn.hutool.core.util.ImageUtil:void convert(java.io.File,java.lang.String,java.io.File)",
            "cn.hutool.core.util.NetUtil:void netCat(java.lang.String,int,byte[])",
            "cn.hutool.core.util.ObjectUtil:java.lang.Object cloneByStream(java.lang.Object)",
            "cn.hutool.core.util.ObjectUtil:byte[] serialize(java.lang.Object)",
            "cn.hutool.core.util.RuntimeUtil:java.util.List getResultLines(java.lang.Process,java.nio.charset.Charset)",
            "cn.hutool.core.util.RuntimeUtil:java.lang.String getResult(java.lang.Process,java.nio.charset.Charset)",
            "cn.hutool.core.util.XmlUtil:org.w3c.dom.Document readXML(java.io.File)",
            "cn.hutool.core.util.XmlUtil:void toFile(org.w3c.dom.Document,java.lang.String,java.lang.String)",
            "cn.hutool.core.util.ZipUtil:java.io.File zip(java.io.File,java.lang.String[],java.io.InputStream[],java.nio.charset.Charset)",
            "cn.hutool.core.util.ZipUtil:java.io.File unzip(java.io.File,java.io.File,java.nio.charset.Charset)",
            "cn.hutool.core.util.ZipUtil:byte[] unzipFileBytes(java.io.File,java.nio.charset.Charset,java.lang.String)",
            "cn.hutool.core.util.ZipUtil:byte[] gzip(byte[])",
            "cn.hutool.core.util.ZipUtil:byte[] gzip(java.io.File)",
            "cn.hutool.core.util.ZipUtil:byte[] unGzip(byte[])",
            "cn.hutool.core.util.ZipUtil:byte[] zlib(java.io.File,int)",
            "cn.hutool.core.util.ZipUtil:void addFile(java.io.File,java.lang.String,java.util.zip.ZipOutputStream)",
            "cn.hutool.core.util.ZipUtil:void copy(java.util.zip.ZipFile,java.util.zip.ZipEntry,java.io.File)",
            "cn.hutool.bloomfilter.BitSetBloomFilter:void init(java.lang.String,java.lang.String)",
            "cn.hutool.crypto.digest.Digester:byte[] digest(java.io.File)",
            "cn.hutool.crypto.digest.HMac:byte[] digest(java.io.File)",
            "cn.hutool.db.DbUtil:void close(java.lang.Object[])",
            "cn.hutool.db.ds.druid.DruidDSFactory:void close(java.lang.String)",
            "cn.hutool.db.ds.druid.DruidDSFactory:void destroy()",
            "cn.hutool.db.ds.hikari.HikariDSFactory:void close(java.lang.String)",
            "cn.hutool.db.ds.hikari.HikariDSFactory:void destroy()",
            "cn.hutool.db.ds.pooled.PooledDataSource:void finalize()",
            "cn.hutool.db.ds.pooled.PooledDSFactory:void close(java.lang.String)",
            "cn.hutool.db.ds.pooled.PooledDSFactory:void destroy()",
            "cn.hutool.db.ds.simple.SimpleDSFactory:void close(java.lang.String)",
            "cn.hutool.db.ds.simple.SimpleDSFactory:void destroy()",
            "cn.hutool.db.nosql.redis.RedisDS:void close()",
            "cn.hutool.db.sql.SqlUtil:java.lang.String clobToStr(java.sql.Clob)",
            "cn.hutool.db.sql.SqlUtil:java.lang.String blobToStr(java.sql.Blob,java.nio.charset.Charset)",
            "cn.hutool.extra.servlet.multipart.UploadFile:boolean processStream(cn.hutool.extra.servlet.multipart.MultipartRequestInputStream)",
            "cn.hutool.extra.servlet.ServletUtil:void write(javax.servlet.http.HttpServletResponse,java.lang.String,java.lang.String)",
            "cn.hutool.extra.servlet.ServletUtil:void write(javax.servlet.http.HttpServletResponse,java.io.InputStream,int)",
            "cn.hutool.extra.ssh.JschUtil:java.lang.String exec(com.jcraft.jsch.Session,java.lang.String,java.nio.charset.Charset)",
            "cn.hutool.extra.template.AbstractTemplate:void render(java.util.Map,java.io.File)",
            "cn.hutool.extra.template.engine.velocity.VelocityUtil:void toFile(org.apache.velocity.Template,org.apache.velocity.VelocityContext,java.lang.String)",
            "cn.hutool.extra.template.engine.velocity.VelocityUtil:void toWriter(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "cn.hutool.http.HttpRequest:void sendMultipart()",
            "cn.hutool.http.HttpResponse:long writeBody(java.io.OutputStream,boolean,cn.hutool.core.io.StreamProgress)",
            "cn.hutool.http.HttpResponse:long writeBody(java.io.File,cn.hutool.core.io.StreamProgress)",
            "cn.hutool.http.HttpResponse:void close()",
            "cn.hutool.log.dialect.jdk.JdkLogFactory:void readConfig()",
            "cn.hutool.setting.dialect.Props:void autoLoad(boolean)",
            "cn.hutool.setting.dialect.Props:void store(java.lang.String)",
            "cn.hutool.setting.GroupedSet:boolean load(java.net.URL)",
            "cn.hutool.setting.GroupedSet:boolean load(java.io.InputStream)",
            "cn.hutool.setting.Setting:void autoLoad(boolean)",
            "cn.hutool.setting.SettingLoader:boolean load(cn.hutool.core.io.resource.UrlResource)",
            "cn.hutool.setting.SettingLoader:boolean load(java.io.InputStream)",
            "cn.hutool.setting.SettingLoader:void store(java.lang.String)",
            "cn.hutool.poi.excel.ExcelBase:void close()",
            "cn.hutool.poi.excel.ExcelWriter:cn.hutool.poi.excel.ExcelWriter flush(java.io.File)",
            "cn.hutool.poi.excel.sax.Excel07SaxReader:cn.hutool.poi.excel.sax.Excel07SaxReader read(org.apache.poi.openxml4j.opc.OPCPackage,int)",
            "cn.hutool.poi.excel.WorkbookUtil:org.apache.poi.ss.usermodel.Workbook createBook(java.io.InputStream,java.lang.String,boolean)"
        ]
    },
    "cn.hutool.core.io.IoUtil:void close(java.lang.AutoCloseable)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.XmlUtil:java.lang.Object readObjectFromXml(org.xml.sax.InputSource)",
            "cn.hutool.core.util.XmlUtil:void writeObjectAsXml(java.io.File,java.lang.Object)",
            "cn.hutool.db.DbUtil:void close(java.lang.Object[])",
            "cn.hutool.db.ds.dbcp.DbcpDSFactory:void close(java.lang.String)",
            "cn.hutool.db.ds.dbcp.DbcpDSFactory:void destroy()"
        ]
    },
    "cn.hutool.db.meta.MetaUtil:java.util.List getTables(javax.sql.DataSource)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.AbstractDb:java.util.List query(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.AbstractDb:java.util.List query(java.lang.String,java.lang.Class,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.AbstractDb:cn.hutool.db.Entity queryOne(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.AbstractDb:java.lang.Number queryNumber(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.AbstractDb:java.lang.String queryString(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.DaoTemplate:java.util.List findBySql(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.SqlConnRunner:java.lang.Object page(java.sql.Connection,java.util.Collection,cn.hutool.db.Entity,int,int,cn.hutool.db.handler.RsHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.AbstractDb:java.lang.Object page(java.util.Collection,cn.hutool.db.Entity,int,int,cn.hutool.db.handler.RsHandler)",
            "cn.hutool.db.SqlConnRunner:cn.hutool.db.PageResult page(java.sql.Connection,java.util.Collection,cn.hutool.db.Entity,int,int)"
        ]
    },
    "cn.hutool.db.ActiveEntity:cn.hutool.db.ActiveEntity add()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.DaoTemplate:int add(cn.hutool.db.Entity)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.DaoTemplate:int addOrUpdate(cn.hutool.db.Entity)"
        ]
    },
    "cn.hutool.db.DaoTemplate:java.util.List addForGeneratedKeys(cn.hutool.db.Entity)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.DaoTemplate:java.lang.Long addForGeneratedKey(cn.hutool.db.Entity)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.AbstractDb:int del(java.lang.String,java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.ActiveEntity:cn.hutool.db.ActiveEntity del()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.DaoTemplate:int del(cn.hutool.db.Entity)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.DaoTemplate:int del(java.lang.Object)",
            "cn.hutool.db.DaoTemplate:int del(java.lang.String,java.lang.Object)"
        ]
    },
    "cn.hutool.db.ActiveEntity:cn.hutool.db.ActiveEntity update(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.DaoTemplate:int update(cn.hutool.db.Entity,cn.hutool.db.Entity)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.DaoTemplate:int update(cn.hutool.db.Entity)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.DaoTemplate:int addOrUpdate(cn.hutool.db.Entity)"
        ]
    },
    "cn.hutool.db.AbstractDb:java.util.List findBy(java.lang.String,cn.hutool.db.sql.Condition[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.SqlConnRunner:java.lang.Object find(java.sql.Connection,cn.hutool.db.Entity,cn.hutool.db.handler.RsHandler,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.SqlConnRunner:java.util.List findAll(java.sql.Connection,cn.hutool.db.Entity)"
        ]
    },
    "cn.hutool.db.SqlConnRunner:java.util.List find(java.sql.Connection,cn.hutool.db.Entity)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.DaoTemplate:int count(cn.hutool.db.Entity)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.DaoTemplate:boolean exist(cn.hutool.db.Entity)"
        ]
    },
    "cn.hutool.db.SqlConnRunner:cn.hutool.db.PageResult page(java.sql.Connection,cn.hutool.db.Entity,cn.hutool.db.Page)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.AbstractDb:cn.hutool.db.Entity get(cn.hutool.db.Entity)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.AbstractDb:cn.hutool.db.Entity get(java.lang.String,java.lang.String,java.lang.Object)",
            "cn.hutool.db.ActiveEntity:cn.hutool.db.ActiveEntity load()"
        ]
    },
    "cn.hutool.db.AbstractDb:java.lang.Object find(cn.hutool.db.Entity,cn.hutool.db.handler.RsHandler,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.AbstractDb:java.util.List findAll(cn.hutool.db.Entity)",
            "cn.hutool.db.AbstractDb:java.util.List findAll(cn.hutool.db.Entity,java.lang.Class)"
        ]
    },
    "cn.hutool.db.AbstractDb:java.util.List find(cn.hutool.db.Entity)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.AbstractDb:java.util.List find(cn.hutool.db.Entity,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.DaoTemplate:cn.hutool.db.Entity get(cn.hutool.db.Entity)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.DaoTemplate:cn.hutool.db.Entity get(java.lang.String,java.lang.Object)"
        ]
    },
    "cn.hutool.db.DaoTemplate:java.util.List find(cn.hutool.db.Entity)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.DaoTemplate:java.util.List find(java.lang.String,java.lang.Object)",
            "cn.hutool.db.DaoTemplate:java.util.List findAll()"
        ]
    },
    "cn.hutool.db.AbstractDb:java.lang.Object page(cn.hutool.db.Entity,cn.hutool.db.Page,cn.hutool.db.handler.RsHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.AbstractDb:java.lang.Object page(cn.hutool.db.Entity,int,int,cn.hutool.db.handler.RsHandler)",
            "cn.hutool.db.AbstractDb:java.util.List pageForEntityList(cn.hutool.db.Entity,cn.hutool.db.Page)"
        ]
    },
    "cn.hutool.db.AbstractDb:cn.hutool.db.PageResult page(cn.hutool.db.Entity,cn.hutool.db.Page)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.AbstractDb:cn.hutool.db.PageResult page(cn.hutool.db.Entity,int,int)",
            "cn.hutool.db.DaoTemplate:cn.hutool.db.PageResult page(cn.hutool.db.Entity,cn.hutool.db.Page)"
        ]
    },
    "cn.hutool.db.DaoTemplate:cn.hutool.db.PageResult page(cn.hutool.db.Entity,cn.hutool.db.Page,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.Db:void closeConnection(java.sql.Connection)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.AbstractDb:java.lang.Object query(java.lang.String,cn.hutool.db.handler.RsHandler,java.lang.Object[])",
            "cn.hutool.db.AbstractDb:int execute(java.lang.String,java.lang.Object[])",
            "cn.hutool.db.AbstractDb:java.lang.Long executeForGeneratedKey(java.lang.String,java.lang.Object[])",
            "cn.hutool.db.AbstractDb:int[] executeBatch(java.lang.String,java.lang.Object[][])",
            "cn.hutool.db.AbstractDb:int insert(cn.hutool.db.Entity)",
            "cn.hutool.db.AbstractDb:int insertOrUpdate(cn.hutool.db.Entity,java.lang.String[])",
            "cn.hutool.db.AbstractDb:int[] insert(java.util.Collection)",
            "cn.hutool.db.AbstractDb:java.util.List insertForGeneratedKeys(cn.hutool.db.Entity)",
            "cn.hutool.db.AbstractDb:java.lang.Long insertForGeneratedKey(cn.hutool.db.Entity)",
            "cn.hutool.db.AbstractDb:int del(cn.hutool.db.Entity)",
            "cn.hutool.db.AbstractDb:int update(cn.hutool.db.Entity,cn.hutool.db.Entity)",
            "cn.hutool.db.AbstractDb:java.lang.Object find(java.util.Collection,cn.hutool.db.Entity,cn.hutool.db.handler.RsHandler)",
            "cn.hutool.db.AbstractDb:java.lang.Object find(cn.hutool.db.sql.Query,cn.hutool.db.handler.RsHandler)",
            "cn.hutool.db.AbstractDb:int count(cn.hutool.db.Entity)",
            "cn.hutool.db.AbstractDb:java.lang.Object page(java.util.Collection,cn.hutool.db.Entity,int,int,cn.hutool.db.handler.RsHandler)",
            "cn.hutool.db.AbstractDb:java.lang.Object page(java.util.Collection,cn.hutool.db.Entity,cn.hutool.db.Page,cn.hutool.db.handler.RsHandler)",
            "cn.hutool.db.AbstractDb:cn.hutool.db.PageResult page(java.util.Collection,cn.hutool.db.Entity,int,int)",
            "cn.hutool.db.AbstractDb:cn.hutool.db.PageResult page(java.util.Collection,cn.hutool.db.Entity,cn.hutool.db.Page)",
            "cn.hutool.db.Db:cn.hutool.db.Db tx(cn.hutool.db.transaction.TransactionLevel,cn.hutool.db.transaction.TxFunc)"
        ]
    },
    "cn.hutool.db.Session:void closeConnection(java.sql.Connection)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.AbstractDb:java.lang.Object query(java.lang.String,cn.hutool.db.handler.RsHandler,java.lang.Object[])",
            "cn.hutool.db.AbstractDb:int execute(java.lang.String,java.lang.Object[])",
            "cn.hutool.db.AbstractDb:java.lang.Long executeForGeneratedKey(java.lang.String,java.lang.Object[])",
            "cn.hutool.db.AbstractDb:int[] executeBatch(java.lang.String,java.lang.Object[][])",
            "cn.hutool.db.AbstractDb:int insert(cn.hutool.db.Entity)",
            "cn.hutool.db.AbstractDb:int insertOrUpdate(cn.hutool.db.Entity,java.lang.String[])",
            "cn.hutool.db.AbstractDb:int[] insert(java.util.Collection)",
            "cn.hutool.db.AbstractDb:java.util.List insertForGeneratedKeys(cn.hutool.db.Entity)",
            "cn.hutool.db.AbstractDb:java.lang.Long insertForGeneratedKey(cn.hutool.db.Entity)",
            "cn.hutool.db.AbstractDb:int del(cn.hutool.db.Entity)",
            "cn.hutool.db.AbstractDb:int update(cn.hutool.db.Entity,cn.hutool.db.Entity)",
            "cn.hutool.db.AbstractDb:java.lang.Object find(java.util.Collection,cn.hutool.db.Entity,cn.hutool.db.handler.RsHandler)",
            "cn.hutool.db.AbstractDb:java.lang.Object find(cn.hutool.db.sql.Query,cn.hutool.db.handler.RsHandler)",
            "cn.hutool.db.AbstractDb:int count(cn.hutool.db.Entity)",
            "cn.hutool.db.AbstractDb:java.lang.Object page(java.util.Collection,cn.hutool.db.Entity,int,int,cn.hutool.db.handler.RsHandler)",
            "cn.hutool.db.AbstractDb:java.lang.Object page(java.util.Collection,cn.hutool.db.Entity,cn.hutool.db.Page,cn.hutool.db.handler.RsHandler)",
            "cn.hutool.db.AbstractDb:cn.hutool.db.PageResult page(java.util.Collection,cn.hutool.db.Entity,int,int)",
            "cn.hutool.db.AbstractDb:cn.hutool.db.PageResult page(java.util.Collection,cn.hutool.db.Entity,cn.hutool.db.Page)",
            "cn.hutool.db.Session:void close()"
        ]
    },
    "cn.hutool.db.dialect.impl.AnsiSqlDialect:java.sql.PreparedStatement psForInsert(java.sql.Connection,cn.hutool.db.Entity)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.SqlConnRunner:int insert(java.sql.Connection,cn.hutool.db.Entity)",
            "cn.hutool.db.SqlConnRunner:java.util.List insertForGeneratedKeys(java.sql.Connection,cn.hutool.db.Entity)",
            "cn.hutool.db.SqlConnRunner:java.lang.Long insertForGeneratedKey(java.sql.Connection,cn.hutool.db.Entity)"
        ]
    },
    "cn.hutool.db.dialect.impl.AnsiSqlDialect:java.sql.PreparedStatement psForDelete(java.sql.Connection,cn.hutool.db.sql.Query)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.SqlConnRunner:int del(java.sql.Connection,cn.hutool.db.Entity)"
        ]
    },
    "cn.hutool.db.dialect.impl.AnsiSqlDialect:java.sql.PreparedStatement psForUpdate(java.sql.Connection,cn.hutool.db.Entity,cn.hutool.db.sql.Query)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.SqlConnRunner:int update(java.sql.Connection,cn.hutool.db.Entity,cn.hutool.db.Entity)"
        ]
    },
    "cn.hutool.db.dialect.impl.AnsiSqlDialect:java.sql.PreparedStatement psForFind(java.sql.Connection,cn.hutool.db.sql.Query)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.dialect.impl.AnsiSqlDialect:java.sql.PreparedStatement psForPage(java.sql.Connection,cn.hutool.db.sql.Query)",
            "cn.hutool.db.dialect.impl.AnsiSqlDialect:java.sql.PreparedStatement psForCount(java.sql.Connection,cn.hutool.db.sql.Query)",
            "cn.hutool.db.SqlConnRunner:java.lang.Object find(java.sql.Connection,cn.hutool.db.sql.Query,cn.hutool.db.handler.RsHandler)"
        ]
    },
    "cn.hutool.db.dialect.impl.AnsiSqlDialect:java.sql.PreparedStatement psForPage(java.sql.Connection,cn.hutool.db.sql.Query)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.SqlConnRunner:java.lang.Object page(java.sql.Connection,java.util.Collection,cn.hutool.db.Entity,cn.hutool.db.Page,cn.hutool.db.handler.RsHandler)"
        ]
    },
    "cn.hutool.setting.dialect.Props:void <init>(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.setting.dialect.Props:void <init>(java.io.File,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.setting.dialect.Props:void <init>(java.net.URL)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.setting.dialect.Props:void <init>(java.net.URL,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.setting.dialect.Props$1:void onModify(java.nio.file.WatchEvent,java.nio.file.Path)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.watch.watchers.DelayWatcher$1:void run()",
            "cn.hutool.core.io.watch.watchers.DelayWatcher:void onModify(java.nio.file.WatchEvent,java.nio.file.Path)",
            "cn.hutool.core.io.watch.watchers.WatcherChain:void onModify(java.nio.file.WatchEvent,java.nio.file.Path)",
            "cn.hutool.core.io.watch.WatchMonitor:void watch(cn.hutool.core.io.watch.Watcher)"
        ]
    },
    "cn.hutool.core.io.watch.watchers.DelayWatcher$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.thread.GlobalThreadPool:void execute(java.lang.Runnable)",
            "cn.hutool.core.thread.ThreadUtil$1:void run()",
            "cn.hutool.cron.task.RunnableTask:void execute()"
        ]
    },
    "cn.hutool.core.io.watch.watchers.DelayWatcher:void onModify(java.nio.file.WatchEvent,java.nio.file.Path)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.watch.watchers.DelayWatcher$1:void run()",
            "cn.hutool.core.io.watch.watchers.DelayWatcher:void onModify(java.nio.file.WatchEvent,java.nio.file.Path)",
            "cn.hutool.core.io.watch.watchers.WatcherChain:void onModify(java.nio.file.WatchEvent,java.nio.file.Path)",
            "cn.hutool.core.io.watch.WatchMonitor:void watch(cn.hutool.core.io.watch.Watcher)"
        ]
    },
    "cn.hutool.core.io.watch.watchers.WatcherChain:void onModify(java.nio.file.WatchEvent,java.nio.file.Path)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.watch.watchers.DelayWatcher$1:void run()",
            "cn.hutool.core.io.watch.watchers.DelayWatcher:void onModify(java.nio.file.WatchEvent,java.nio.file.Path)",
            "cn.hutool.core.io.watch.watchers.WatcherChain:void onModify(java.nio.file.WatchEvent,java.nio.file.Path)",
            "cn.hutool.core.io.watch.WatchMonitor:void watch(cn.hutool.core.io.watch.Watcher)"
        ]
    },
    "cn.hutool.core.io.watch.WatchMonitor:void watch(cn.hutool.core.io.watch.Watcher)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.watch.WatchMonitor:void watch()"
        ]
    },
    "cn.hutool.setting.Setting:void <init>(java.io.File,java.nio.charset.Charset,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.setting.Setting:void <init>(java.net.URL,java.nio.charset.Charset,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.servlet.multipart.UploadSetting:void load(java.lang.String)"
        ]
    },
    "cn.hutool.db.Db:void <init>(javax.sql.DataSource)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.Db:cn.hutool.db.Db use(javax.sql.DataSource)"
        ]
    },
    "cn.hutool.db.Session:void <init>(javax.sql.DataSource)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.Session:cn.hutool.db.Session create()",
            "cn.hutool.db.Session:cn.hutool.db.Session create(java.lang.String)",
            "cn.hutool.db.Session:cn.hutool.db.Session create(javax.sql.DataSource)"
        ]
    },
    "cn.hutool.db.SqlConnRunner:cn.hutool.db.SqlConnRunner create(javax.sql.DataSource)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.DbUtil:cn.hutool.db.SqlConnRunner newSqlConnRunner(javax.sql.DataSource)"
        ]
    },
    "cn.hutool.db.SqlRunner:void <init>(javax.sql.DataSource)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.SqlRunner:cn.hutool.db.SqlRunner create(javax.sql.DataSource)"
        ]
    },
    "cn.hutool.core.io.watch.watchers.DelayWatcher:void startHandleModifyThread(java.nio.file.WatchEvent,java.nio.file.Path)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.watch.watchers.DelayWatcher:void onDelayModify(java.nio.file.WatchEvent,java.nio.file.Path)"
        ]
    },
    "cn.hutool.http.HttpUtil:java.lang.String get(java.lang.String,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.http.HttpUtil:java.lang.String get(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HttpUtil:java.lang.String get(java.lang.String)"
        ]
    },
    "cn.hutool.http.HttpUtil:java.lang.String get(java.lang.String,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.http.HttpUtil:java.lang.String get(java.lang.String,java.util.Map,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.http.HttpUtil:java.lang.String post(java.lang.String,java.util.Map,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HttpUtil:java.lang.String post(java.lang.String,java.util.Map)"
        ]
    },
    "cn.hutool.http.HttpUtil:java.lang.String post(java.lang.String,java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HttpUtil:java.lang.String post(java.lang.String,java.lang.String)"
        ]
    },
    "cn.hutool.http.webservice.SoapRequest:java.lang.String execute()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.http.HttpUtil:long download(java.lang.String,java.io.OutputStream,boolean,cn.hutool.core.io.StreamProgress)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HttpUtil:java.lang.String downloadString(java.lang.String,java.nio.charset.Charset,cn.hutool.core.io.StreamProgress)",
            "cn.hutool.http.HttpUtil:long download(java.lang.String,java.io.OutputStream,boolean)"
        ]
    },
    "cn.hutool.cron.TaskTable:void executeTaskIfMatchInternal(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.cron.TaskLauncher:void run()",
            "cn.hutool.cron.TaskTable:void executeTaskIfMatch(long)"
        ]
    },
    "cn.hutool.core.bean.copier.BeanCopier:void valueProviderToBean(cn.hutool.core.bean.copier.ValueProvider,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.copier.BeanCopier:java.lang.Object copy()",
            "cn.hutool.core.bean.copier.BeanCopier:void beanToBean(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.bean.copier.BeanCopier:void mapToBean(java.util.Map,java.lang.Object)"
        ]
    },
    "cn.hutool.db.ds.c3p0.C3p0DSFactory:javax.sql.DataSource getDataSource(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.ds.DSFactory:javax.sql.DataSource getDataSource()",
            "cn.hutool.db.ds.DSFactory:javax.sql.DataSource get(java.lang.String)"
        ]
    },
    "cn.hutool.db.ds.dbcp.DbcpDSFactory:javax.sql.DataSource getDataSource(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.ds.DSFactory:javax.sql.DataSource getDataSource()",
            "cn.hutool.db.ds.DSFactory:javax.sql.DataSource get(java.lang.String)"
        ]
    },
    "cn.hutool.db.ds.druid.DruidDSFactory:javax.sql.DataSource getDataSource(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.ds.DSFactory:javax.sql.DataSource getDataSource()",
            "cn.hutool.db.ds.DSFactory:javax.sql.DataSource get(java.lang.String)"
        ]
    },
    "cn.hutool.db.ds.tomcat.TomcatDSFactory:org.apache.tomcat.jdbc.pool.DataSource getDataSource(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.ds.tomcat.TomcatDSFactory:javax.sql.DataSource getDataSource(java.lang.String)"
        ]
    },
    "cn.hutool.core.collection.LineIter:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.collection.LineIter:boolean hasNext()",
            "cn.hutool.core.io.IoUtil:void close(java.io.Closeable)",
            "cn.hutool.core.io.IoUtil:void close(java.lang.AutoCloseable)"
        ]
    },
    "cn.hutool.core.io.file.FileReader:byte[] readBytes()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.file.FileReader:java.lang.String readString()",
            "cn.hutool.core.io.FileUtil:byte[] readBytes(java.io.File)"
        ]
    },
    "cn.hutool.core.io.file.FileReader:java.util.Collection readLines(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.file.FileReader:java.util.List readLines()",
            "cn.hutool.core.io.FileUtil:java.util.Collection readLines(java.io.File,java.lang.String,java.util.Collection)",
            "cn.hutool.core.io.FileUtil:java.util.Collection readLines(java.io.File,java.nio.charset.Charset,java.util.Collection)"
        ]
    },
    "cn.hutool.core.io.file.FileReader:void readLines(cn.hutool.core.io.LineHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.FileUtil:void readLines(java.io.File,java.nio.charset.Charset,cn.hutool.core.io.LineHandler)"
        ]
    },
    "cn.hutool.core.io.file.FileReader:java.lang.Object read(cn.hutool.core.io.file.FileReader$ReaderHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.FileUtil:java.lang.Object load(cn.hutool.core.io.file.FileReader$ReaderHandler,java.lang.String,java.lang.String)",
            "cn.hutool.core.io.FileUtil:java.lang.Object load(java.lang.String,java.lang.String,cn.hutool.core.io.file.FileReader$ReaderHandler)",
            "cn.hutool.core.io.FileUtil:java.lang.Object load(java.lang.String,java.nio.charset.Charset,cn.hutool.core.io.file.FileReader$ReaderHandler)",
            "cn.hutool.core.io.FileUtil:java.lang.Object load(java.io.File,java.nio.charset.Charset,cn.hutool.core.io.file.FileReader$ReaderHandler)"
        ]
    },
    "cn.hutool.core.io.file.FileReader:java.io.File writeToStream(java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.FileUtil:java.io.File writeToStream(java.io.File,java.io.OutputStream)"
        ]
    },
    "cn.hutool.core.io.file.FileWriter:java.io.File write(java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.file.FileWriter:java.io.File write(java.lang.String)",
            "cn.hutool.core.io.file.FileWriter:java.io.File append(java.lang.String)"
        ]
    },
    "cn.hutool.core.io.file.FileWriter:java.io.File write(byte[],int,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.file.FileWriter:java.io.File write(byte[],int,int)",
            "cn.hutool.core.io.file.FileWriter:java.io.File append(byte[],int,int)",
            "cn.hutool.core.io.FileUtil:java.io.File writeBytes(byte[],java.io.File,int,int,boolean)"
        ]
    },
    "cn.hutool.core.io.file.FileWriter:java.io.File writeFromStream(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.FileUtil:java.io.File writeFromStream(java.io.InputStream,java.io.File)"
        ]
    },
    "cn.hutool.core.io.FileTypeUtil:java.lang.String getType(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.FileTypeUtil:java.lang.String getTypeByPath(java.lang.String)",
            "cn.hutool.core.io.FileUtil:java.lang.String getType(java.io.File)"
        ]
    },
    "cn.hutool.core.io.FileUtil:boolean contentEquals(java.io.File,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.FileUtil:boolean contentEqualsIgnoreEOL(java.io.File,java.io.File,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.FileUtil:java.lang.String readString(java.net.URL,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.FileUtil:java.util.Collection readLines(java.net.URL,java.nio.charset.Charset,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.FileUtil:java.util.Collection readUtf8Lines(java.net.URL,java.util.Collection)",
            "cn.hutool.core.io.FileUtil:java.util.Collection readLines(java.net.URL,java.lang.String,java.util.Collection)",
            "cn.hutool.core.io.FileUtil:java.util.List readLines(java.net.URL,java.nio.charset.Charset)"
        ]
    },
    "cn.hutool.core.io.IoUtil:void write(java.io.OutputStream,boolean,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.codec.Base64:void decodeToStream(java.lang.String,java.io.OutputStream,boolean)",
            "cn.hutool.http.HttpRequest:void sendFormUrlEncoded()",
            "cn.hutool.captcha.AbstractCaptcha:void write(java.io.OutputStream)"
        ]
    },
    "cn.hutool.core.io.IoUtil:void write(java.io.OutputStream,java.nio.charset.Charset,boolean,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.IoUtil:void writeUtf8(java.io.OutputStream,boolean,java.lang.Object[])",
            "cn.hutool.core.io.IoUtil:void write(java.io.OutputStream,java.lang.String,boolean,java.lang.Object[])",
            "cn.hutool.http.HttpRequest:void sendFormUrlEncoded()",
            "cn.hutool.http.HttpRequest:void writeForm(java.io.OutputStream)",
            "cn.hutool.http.HttpRequest:void appendPart(java.lang.String,cn.hutool.core.io.resource.Resource,java.io.OutputStream)"
        ]
    },
    "cn.hutool.core.io.IoUtil:void writeObjects(java.io.OutputStream,boolean,java.io.Serializable[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.IoUtil:java.util.zip.Checksum checksum(java.io.InputStream,java.util.zip.Checksum)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.FileUtil:java.util.zip.Checksum checksum(java.io.File,java.util.zip.Checksum)",
            "cn.hutool.core.io.IoUtil:long checksumCRC32(java.io.InputStream)"
        ]
    },
    "cn.hutool.core.io.resource.InputStreamResource:java.lang.String readStr(java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.resource.InputStreamResource:java.lang.String readUtf8Str()",
            "cn.hutool.core.io.resource.MultiResource:java.lang.String readStr(java.nio.charset.Charset)"
        ]
    },
    "cn.hutool.core.io.resource.InputStreamResource:byte[] readBytes()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.resource.MultiResource:byte[] readBytes()"
        ]
    },
    "cn.hutool.core.io.resource.UrlResource:java.lang.String readStr(java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.resource.MultiResource:java.lang.String readStr(java.nio.charset.Charset)",
            "cn.hutool.core.io.resource.ResourceUtil:java.lang.String readStr(java.lang.String,java.nio.charset.Charset)",
            "cn.hutool.core.io.resource.UrlResource:java.lang.String readUtf8Str()"
        ]
    },
    "cn.hutool.core.io.resource.UrlResource:byte[] readBytes()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.resource.MultiResource:byte[] readBytes()"
        ]
    },
    "cn.hutool.core.io.watch.WatchMonitor:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.IoUtil:void close(java.io.Closeable)",
            "cn.hutool.core.io.IoUtil:void close(java.lang.AutoCloseable)",
            "cn.hutool.setting.dialect.Props:void autoLoad(boolean)",
            "cn.hutool.setting.Setting:void autoLoad(boolean)"
        ]
    },
    "cn.hutool.core.lang.JarClassLoader:cn.hutool.core.lang.JarClassLoader loadJar(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.text.csv.CsvWriter:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.IoUtil:void close(java.io.Closeable)",
            "cn.hutool.core.io.IoUtil:void close(java.lang.AutoCloseable)"
        ]
    },
    "cn.hutool.core.util.ImageUtil:void convert(java.io.File,java.lang.String,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.NetUtil:void netCat(java.lang.String,int,byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ObjectUtil:java.lang.Object cloneByStream(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ObjectUtil:java.lang.Object clone(java.lang.Object)"
        ]
    },
    "cn.hutool.core.util.ObjectUtil:byte[] serialize(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.RuntimeUtil:java.util.List getResultLines(java.lang.Process,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.RuntimeUtil:java.util.List execForLines(java.nio.charset.Charset,java.lang.String[])",
            "cn.hutool.core.util.RuntimeUtil:java.util.List getResultLines(java.lang.Process)"
        ]
    },
    "cn.hutool.core.util.RuntimeUtil:java.lang.String getResult(java.lang.Process,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.RuntimeUtil:java.lang.String execForStr(java.nio.charset.Charset,java.lang.String[])",
            "cn.hutool.core.util.RuntimeUtil:java.lang.String getResult(java.lang.Process)"
        ]
    },
    "cn.hutool.core.util.XmlUtil:org.w3c.dom.Document readXML(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.XmlUtil:org.w3c.dom.Document readXML(java.lang.String)"
        ]
    },
    "cn.hutool.core.util.ZipUtil:java.io.File zip(java.io.File,java.lang.String[],java.io.InputStream[],java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ZipUtil:java.io.File zip(java.io.File,java.lang.String,java.io.InputStream,java.nio.charset.Charset)",
            "cn.hutool.core.util.ZipUtil:java.io.File zip(java.io.File,java.lang.String[],java.io.InputStream[])"
        ]
    },
    "cn.hutool.core.util.ZipUtil:byte[] unzipFileBytes(java.io.File,java.nio.charset.Charset,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ZipUtil:byte[] unzipFileBytes(java.lang.String,java.nio.charset.Charset,java.lang.String)",
            "cn.hutool.core.util.ZipUtil:byte[] unzipFileBytes(java.io.File,java.lang.String)"
        ]
    },
    "cn.hutool.core.util.ZipUtil:byte[] gzip(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ZipUtil:byte[] gzip(java.lang.String,java.lang.String)"
        ]
    },
    "cn.hutool.core.util.ZipUtil:byte[] gzip(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ZipUtil:byte[] unGzip(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ZipUtil:java.lang.String unGzip(byte[],java.lang.String)"
        ]
    },
    "cn.hutool.core.util.ZipUtil:byte[] zlib(java.io.File,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ZipUtil:void addFile(java.io.File,java.lang.String,java.util.zip.ZipOutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ZipUtil:void zip(java.io.File,java.lang.String,java.util.zip.ZipOutputStream)"
        ]
    },
    "cn.hutool.core.util.ZipUtil:void copy(java.util.zip.ZipFile,java.util.zip.ZipEntry,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ZipUtil:java.io.File unzip(java.io.File,java.io.File,java.nio.charset.Charset)"
        ]
    },
    "cn.hutool.crypto.digest.Digester:byte[] digest(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.digest.Digester:java.lang.String digestHex(java.io.File)",
            "cn.hutool.crypto.digest.DigestUtil:byte[] md5(java.io.File)",
            "cn.hutool.crypto.digest.DigestUtil:byte[] sha1(java.io.File)",
            "cn.hutool.crypto.digest.DigestUtil:byte[] sha256(java.io.File)"
        ]
    },
    "cn.hutool.crypto.digest.HMac:byte[] digest(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.digest.HMac:java.lang.String digestHex(java.io.File)"
        ]
    },
    "cn.hutool.db.ds.druid.DruidDSFactory:void close(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.ds.DSFactory:void close()"
        ]
    },
    "cn.hutool.db.ds.druid.DruidDSFactory:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.ds.GlobalDSFactory$1:void run()",
            "cn.hutool.db.ds.GlobalDSFactory:cn.hutool.db.ds.DSFactory set(cn.hutool.db.ds.DSFactory)"
        ]
    },
    "cn.hutool.db.ds.hikari.HikariDSFactory:void close(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.ds.DSFactory:void close()"
        ]
    },
    "cn.hutool.db.ds.hikari.HikariDSFactory:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.ds.GlobalDSFactory$1:void run()",
            "cn.hutool.db.ds.GlobalDSFactory:cn.hutool.db.ds.DSFactory set(cn.hutool.db.ds.DSFactory)"
        ]
    },
    "cn.hutool.db.ds.pooled.PooledDataSource:void finalize()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.ds.pooled.PooledDataSource:void <init>()",
            "cn.hutool.db.ds.pooled.PooledDataSource:void <init>(java.lang.String)",
            "cn.hutool.db.ds.pooled.PooledDataSource:void <init>(cn.hutool.db.ds.pooled.DbSetting,java.lang.String)",
            "cn.hutool.db.ds.pooled.PooledDataSource:void <init>(cn.hutool.db.ds.pooled.DbConfig)"
        ]
    },
    "cn.hutool.db.ds.pooled.PooledDSFactory:void close(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.ds.DSFactory:void close()"
        ]
    },
    "cn.hutool.db.ds.pooled.PooledDSFactory:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.ds.GlobalDSFactory$1:void run()",
            "cn.hutool.db.ds.GlobalDSFactory:cn.hutool.db.ds.DSFactory set(cn.hutool.db.ds.DSFactory)"
        ]
    },
    "cn.hutool.db.ds.simple.SimpleDSFactory:void close(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.ds.DSFactory:void close()"
        ]
    },
    "cn.hutool.db.ds.simple.SimpleDSFactory:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.ds.GlobalDSFactory$1:void run()",
            "cn.hutool.db.ds.GlobalDSFactory:cn.hutool.db.ds.DSFactory set(cn.hutool.db.ds.DSFactory)"
        ]
    },
    "cn.hutool.db.nosql.redis.RedisDS:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.IoUtil:void close(java.io.Closeable)",
            "cn.hutool.core.io.IoUtil:void close(java.lang.AutoCloseable)"
        ]
    },
    "cn.hutool.db.sql.SqlUtil:java.lang.String clobToStr(java.sql.Clob)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.Entity:java.lang.String getStr(java.lang.String,java.nio.charset.Charset)"
        ]
    },
    "cn.hutool.db.sql.SqlUtil:java.lang.String blobToStr(java.sql.Blob,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.Entity:java.lang.String getStr(java.lang.String,java.nio.charset.Charset)"
        ]
    },
    "cn.hutool.extra.servlet.ServletUtil:void write(javax.servlet.http.HttpServletResponse,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.extra.servlet.ServletUtil:void write(javax.servlet.http.HttpServletResponse,java.io.InputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.servlet.ServletUtil:void write(javax.servlet.http.HttpServletResponse,java.io.InputStream)"
        ]
    },
    "cn.hutool.extra.ssh.JschUtil:java.lang.String exec(com.jcraft.jsch.Session,java.lang.String,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.extra.template.AbstractTemplate:void render(java.util.Map,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.extra.template.engine.velocity.VelocityUtil:void toWriter(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.http.HttpRequest:void sendMultipart()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HttpRequest:void send()"
        ]
    },
    "cn.hutool.http.HttpResponse:long writeBody(java.io.OutputStream,boolean,cn.hutool.core.io.StreamProgress)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HttpResponse:long writeBody(java.io.File,cn.hutool.core.io.StreamProgress)",
            "cn.hutool.http.HttpUtil:long download(java.lang.String,java.io.OutputStream,boolean,cn.hutool.core.io.StreamProgress)"
        ]
    },
    "cn.hutool.http.HttpResponse:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.IoUtil:void close(java.io.Closeable)",
            "cn.hutool.core.io.IoUtil:void close(java.lang.AutoCloseable)",
            "cn.hutool.http.HttpResponse:cn.hutool.http.HttpResponse forceSync()"
        ]
    },
    "cn.hutool.setting.dialect.Props:void autoLoad(boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.setting.GroupedSet:boolean load(java.net.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.setting.GroupedSet:boolean init(java.net.URL,java.nio.charset.Charset)",
            "cn.hutool.setting.GroupedSet:void reload()"
        ]
    },
    "cn.hutool.setting.GroupedSet:boolean load(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.setting.GroupedSet:boolean load(java.net.URL)"
        ]
    },
    "cn.hutool.setting.SettingLoader:boolean load(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.setting.SettingLoader:boolean load(cn.hutool.core.io.resource.UrlResource)"
        ]
    },
    "cn.hutool.poi.excel.ExcelBase:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.IoUtil:void close(java.io.Closeable)",
            "cn.hutool.core.io.IoUtil:void close(java.lang.AutoCloseable)",
            "cn.hutool.poi.excel.ExcelWriter:void close()"
        ]
    },
    "cn.hutool.poi.excel.ExcelWriter:cn.hutool.poi.excel.ExcelWriter flush(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.poi.excel.ExcelWriter:cn.hutool.poi.excel.ExcelWriter flush()"
        ]
    },
    "cn.hutool.poi.excel.sax.Excel07SaxReader:cn.hutool.poi.excel.sax.Excel07SaxReader read(org.apache.poi.openxml4j.opc.OPCPackage,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.poi.excel.sax.Excel07SaxReader:cn.hutool.poi.excel.sax.Excel07SaxReader read(java.io.File,int)",
            "cn.hutool.poi.excel.sax.Excel07SaxReader:cn.hutool.poi.excel.sax.Excel07SaxReader read(java.io.InputStream,int)"
        ]
    },
    "cn.hutool.poi.excel.WorkbookUtil:org.apache.poi.ss.usermodel.Workbook createBook(java.io.InputStream,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.poi.excel.WorkbookUtil:org.apache.poi.ss.usermodel.Workbook createBook(java.io.InputStream,boolean)"
        ]
    },
    "cn.hutool.core.util.XmlUtil:java.lang.Object readObjectFromXml(org.xml.sax.InputSource)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.XmlUtil:java.lang.Object readObjectFromXml(java.io.File)",
            "cn.hutool.core.util.XmlUtil:java.lang.Object readObjectFromXml(java.lang.String)"
        ]
    },
    "cn.hutool.core.util.XmlUtil:void writeObjectAsXml(java.io.File,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.ds.dbcp.DbcpDSFactory:void close(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.ds.DSFactory:void close()"
        ]
    },
    "cn.hutool.db.ds.dbcp.DbcpDSFactory:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.ds.GlobalDSFactory$1:void run()",
            "cn.hutool.db.ds.GlobalDSFactory:cn.hutool.db.ds.DSFactory set(cn.hutool.db.ds.DSFactory)"
        ]
    },
    "cn.hutool.db.DaoTemplate:int addOrUpdate(cn.hutool.db.Entity)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.DaoTemplate:int del(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.DaoTemplate:int del(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.SqlConnRunner:java.util.List findAll(java.sql.Connection,cn.hutool.db.Entity)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.SqlConnRunner:java.util.List findAll(java.sql.Connection,java.lang.String)",
            "cn.hutool.db.SqlConnRunner:java.util.List findBy(java.sql.Connection,java.lang.String,java.lang.String,java.lang.Object)",
            "cn.hutool.db.SqlConnRunner:java.util.List findLike(java.sql.Connection,java.lang.String,java.lang.String,java.lang.String,cn.hutool.db.sql.Condition$LikeType)",
            "cn.hutool.db.SqlConnRunner:java.util.List findIn(java.sql.Connection,java.lang.String,java.lang.String,java.lang.Object[])"
        ]
    },
    "cn.hutool.db.DaoTemplate:boolean exist(cn.hutool.db.Entity)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.AbstractDb:cn.hutool.db.Entity get(java.lang.String,java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.ActiveEntity:cn.hutool.db.ActiveEntity load()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.AbstractDb:java.util.List findAll(cn.hutool.db.Entity)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.AbstractDb:java.util.List findAll(java.lang.String)",
            "cn.hutool.db.AbstractDb:java.util.List findBy(java.lang.String,java.lang.String,java.lang.Object)",
            "cn.hutool.db.AbstractDb:java.util.List findLike(java.lang.String,java.lang.String,java.lang.String,cn.hutool.db.sql.Condition$LikeType)"
        ]
    },
    "cn.hutool.db.AbstractDb:java.util.List findAll(cn.hutool.db.Entity,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.DaoTemplate:cn.hutool.db.Entity get(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.DaoTemplate:cn.hutool.db.Entity get(java.lang.Object)"
        ]
    },
    "cn.hutool.db.DaoTemplate:java.util.List find(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.DaoTemplate:java.util.List findAll()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.AbstractDb:java.lang.Object page(cn.hutool.db.Entity,int,int,cn.hutool.db.handler.RsHandler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.AbstractDb:java.util.List pageForEntityList(cn.hutool.db.Entity,cn.hutool.db.Page)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.AbstractDb:java.util.List pageForEntityList(cn.hutool.db.Entity,int,int)"
        ]
    },
    "cn.hutool.db.AbstractDb:cn.hutool.db.PageResult page(cn.hutool.db.Entity,int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.DaoTemplate:cn.hutool.db.PageResult page(cn.hutool.db.Entity,cn.hutool.db.Page)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.Session:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.IoUtil:void close(java.io.Closeable)",
            "cn.hutool.core.io.IoUtil:void close(java.lang.AutoCloseable)"
        ]
    },
    "cn.hutool.db.dialect.impl.AnsiSqlDialect:java.sql.PreparedStatement psForCount(java.sql.Connection,cn.hutool.db.sql.Query)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.SqlConnRunner:int count(java.sql.Connection,cn.hutool.db.Entity)"
        ]
    },
    "cn.hutool.core.io.watch.WatchMonitor:void watch()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.watch.WatchMonitor:void run()"
        ]
    },
    "cn.hutool.db.Db:cn.hutool.db.Db use(javax.sql.DataSource)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.DaoTemplate:void <init>(java.lang.String,java.lang.String,javax.sql.DataSource)",
            "cn.hutool.db.Db:cn.hutool.db.Db use()",
            "cn.hutool.db.Db:cn.hutool.db.Db use(java.lang.String)",
            "cn.hutool.db.DbUtil:cn.hutool.db.Db use(javax.sql.DataSource)"
        ]
    },
    "cn.hutool.db.DbUtil:cn.hutool.db.SqlConnRunner newSqlConnRunner(javax.sql.DataSource)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.SqlRunner:cn.hutool.db.SqlRunner create(javax.sql.DataSource)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.DbUtil:cn.hutool.db.SqlRunner newSqlRunner()",
            "cn.hutool.db.DbUtil:cn.hutool.db.SqlRunner newSqlRunner(javax.sql.DataSource)",
            "cn.hutool.db.SqlRunner:cn.hutool.db.SqlRunner create()",
            "cn.hutool.db.SqlRunner:cn.hutool.db.SqlRunner create(java.lang.String)"
        ]
    },
    "cn.hutool.core.io.watch.watchers.DelayWatcher:void onDelayModify(java.nio.file.WatchEvent,java.nio.file.Path)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.watch.watchers.DelayWatcher:void onModify(java.nio.file.WatchEvent,java.nio.file.Path)"
        ]
    },
    "cn.hutool.http.HttpUtil:java.lang.String get(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.http.HttpUtil:java.lang.String post(java.lang.String,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.http.HttpUtil:java.lang.String post(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.http.HttpUtil:java.lang.String downloadString(java.lang.String,java.nio.charset.Charset,cn.hutool.core.io.StreamProgress)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HttpUtil:java.lang.String downloadString(java.lang.String,java.lang.String)",
            "cn.hutool.http.HttpUtil:java.lang.String downloadString(java.lang.String,java.nio.charset.Charset)"
        ]
    },
    "cn.hutool.http.HttpUtil:long download(java.lang.String,java.io.OutputStream,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.cron.TaskLauncher:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.thread.GlobalThreadPool:void execute(java.lang.Runnable)",
            "cn.hutool.core.thread.ThreadUtil$1:void run()",
            "cn.hutool.cron.task.RunnableTask:void execute()",
            "cn.hutool.cron.TaskLauncherManager:cn.hutool.cron.TaskLauncher spawnLauncher(long)"
        ]
    },
    "cn.hutool.cron.TaskTable:void executeTaskIfMatch(long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.bean.copier.BeanCopier:java.lang.Object copy()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.BeanUtil:java.lang.Object fillBeanWithMap(java.util.Map,java.lang.Object,boolean,cn.hutool.core.bean.copier.CopyOptions)",
            "cn.hutool.core.bean.BeanUtil:java.lang.Object fillBean(java.lang.Object,cn.hutool.core.bean.copier.ValueProvider,cn.hutool.core.bean.copier.CopyOptions)",
            "cn.hutool.core.bean.BeanUtil:void copyProperties(java.lang.Object,java.lang.Object,boolean,cn.hutool.core.bean.copier.CopyOptions)",
            "cn.hutool.core.convert.impl.BeanConverter:java.lang.Object convertInternal(java.lang.Object)"
        ]
    },
    "cn.hutool.core.bean.copier.BeanCopier:void beanToBean(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.copier.BeanCopier:java.lang.Object copy()"
        ]
    },
    "cn.hutool.core.bean.copier.BeanCopier:void mapToBean(java.util.Map,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.copier.BeanCopier:java.lang.Object copy()"
        ]
    },
    "cn.hutool.db.ds.tomcat.TomcatDSFactory:javax.sql.DataSource getDataSource(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.ds.DSFactory:javax.sql.DataSource getDataSource()",
            "cn.hutool.db.ds.DSFactory:javax.sql.DataSource get(java.lang.String)"
        ]
    },
    "cn.hutool.core.collection.LineIter:boolean hasNext()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.BeanUtil:java.util.Map beanToMap(java.lang.Object,java.util.Map,boolean,cn.hutool.core.lang.Editor)",
            "cn.hutool.core.bean.copier.BeanCopier:void valueProviderToBean(cn.hutool.core.bean.copier.ValueProvider,java.lang.Object)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection union(java.util.Collection,java.util.Collection)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection intersection(java.util.Collection,java.util.Collection)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection disjunction(java.util.Collection,java.util.Collection)",
            "cn.hutool.core.collection.CollUtil:boolean containsAny(java.util.Collection,java.util.Collection)",
            "cn.hutool.core.collection.CollUtil:java.util.HashSet newHashSet(boolean,java.util.Iterator)",
            "cn.hutool.core.collection.CollUtil:java.util.List list(boolean,java.util.Iterator)",
            "cn.hutool.core.collection.CollUtil:java.util.List split(java.util.Collection,int)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection filter(java.util.Collection,cn.hutool.core.lang.Editor)",
            "cn.hutool.core.collection.CollUtil:java.util.List filter(java.util.List,cn.hutool.core.lang.Editor)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection filter(java.util.Collection,cn.hutool.core.lang.Filter)",
            "cn.hutool.core.collection.CollUtil:java.util.List filter(java.util.List,cn.hutool.core.lang.Filter)",
            "cn.hutool.core.collection.CollUtil:java.util.List extract(java.lang.Iterable,cn.hutool.core.lang.Editor)",
            "cn.hutool.core.collection.CollUtil:java.lang.Object findOne(java.lang.Iterable,cn.hutool.core.lang.Filter)",
            "cn.hutool.core.collection.CollUtil:int count(java.lang.Iterable,cn.hutool.core.lang.Matcher)",
            "cn.hutool.core.collection.CollUtil:java.util.TreeSet toTreeSet(java.util.Collection,java.util.Comparator)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection addAll(java.util.Collection,java.lang.Object,java.lang.reflect.Type)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection addAll(java.util.Collection,java.util.Iterator)",
            "cn.hutool.core.collection.CollUtil:java.util.List addAllIfNotContains(java.util.List,java.util.List)",
            "cn.hutool.core.collection.CollUtil:java.util.ArrayList valuesOfKeys(java.util.Map,java.util.Iterator)",
            "cn.hutool.core.collection.CollUtil:java.util.LinkedHashMap sortToMap(java.util.Collection,java.util.Comparator)",
            "cn.hutool.core.collection.CollUtil:void forEach(java.util.Iterator,cn.hutool.core.collection.CollUtil$Consumer)",
            "cn.hutool.core.collection.CollUtil:void forEach(java.util.Map,cn.hutool.core.collection.CollUtil$KVConsumer)",
            "cn.hutool.core.collection.CollUtil:java.util.List group(java.util.Collection,cn.hutool.core.collection.CollUtil$Hash)",
            "cn.hutool.core.collection.ConcurrentHashSet:void <init>(java.lang.Iterable)",
            "cn.hutool.core.collection.CopiedIter:void <init>(java.util.Iterator)",
            "cn.hutool.core.collection.CopiedIter:boolean hasNext()",
            "cn.hutool.core.collection.IteratorEnumeration:boolean hasMoreElements()",
            "cn.hutool.core.collection.IterUtil:boolean isEmpty(java.util.Iterator)",
            "cn.hutool.core.collection.IterUtil:boolean isNotEmpty(java.util.Iterator)",
            "cn.hutool.core.collection.IterUtil:boolean hasNull(java.util.Iterator)",
            "cn.hutool.core.collection.IterUtil:boolean isAllNull(java.util.Iterator)",
            "cn.hutool.core.collection.IterUtil:java.util.Map countMap(java.util.Iterator)",
            "cn.hutool.core.collection.IterUtil:java.util.Map fieldValueMap(java.util.Iterator,java.lang.String)",
            "cn.hutool.core.collection.IterUtil:java.util.Map fieldValueAsMap(java.util.Iterator,java.lang.String,java.lang.String)",
            "cn.hutool.core.collection.IterUtil:java.util.List fieldValueList(java.util.Iterator,java.lang.String)",
            "cn.hutool.core.collection.IterUtil:java.lang.String join(java.util.Iterator,java.lang.CharSequence,java.lang.String,java.lang.String)",
            "cn.hutool.core.collection.IterUtil:java.util.HashMap toMap(java.lang.Iterable)",
            "cn.hutool.core.collection.IterUtil:java.util.Map toMap(java.util.Iterator,java.util.Iterator)",
            "cn.hutool.core.collection.IterUtil:java.util.List toList(java.util.Iterator)",
            "cn.hutool.core.collection.IterUtil:java.lang.Object getFirst(java.util.Iterator)",
            "cn.hutool.core.collection.LineIter:java.lang.String nextLine()",
            "cn.hutool.core.comparator.ComparatorChain:int compare(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.convert.BasicType:void <clinit>()",
            "cn.hutool.core.convert.impl.ArrayConverter:java.lang.Object convertObjectToArray(java.lang.Object)",
            "cn.hutool.core.convert.impl.MapConverter:void convertMapToMap(java.util.Map,java.util.Map)",
            "cn.hutool.core.date.format.FastDateParser$TimeZoneStrategy:void <init>(java.util.Locale)",
            "cn.hutool.core.date.format.FastDateParser:java.util.Map appendDisplayNames(java.util.Calendar,java.util.Locale,int,java.lang.StringBuilder)",
            "cn.hutool.core.io.file.FileAppender:cn.hutool.core.io.file.FileAppender flush()",
            "cn.hutool.core.io.file.FileWriter:java.io.File writeLines(java.util.Collection,cn.hutool.core.io.file.LineSeparator,boolean)",
            "cn.hutool.core.io.file.FileWriter:java.io.File writeMap(java.util.Map,cn.hutool.core.io.file.LineSeparator,java.lang.String,boolean)",
            "cn.hutool.core.io.FileTypeUtil:java.lang.String getType(java.lang.String)",
            "cn.hutool.core.io.FileUtil:boolean isDirEmpty(java.nio.file.Path)",
            "cn.hutool.core.io.FileUtil:java.util.List listFileNames(java.lang.String)",
            "cn.hutool.core.io.resource.MultiFileResource:cn.hutool.core.io.resource.MultiFileResource add(java.util.Collection)",
            "cn.hutool.core.io.watch.watchers.WatcherChain:void onCreate(java.nio.file.WatchEvent,java.nio.file.Path)",
            "cn.hutool.core.io.watch.watchers.WatcherChain:void onModify(java.nio.file.WatchEvent,java.nio.file.Path)",
            "cn.hutool.core.io.watch.watchers.WatcherChain:void onDelete(java.nio.file.WatchEvent,java.nio.file.Path)",
            "cn.hutool.core.io.watch.watchers.WatcherChain:void onOverflow(java.nio.file.WatchEvent,java.nio.file.Path)",
            "cn.hutool.core.io.watch.WatchMonitor:void watch(cn.hutool.core.io.watch.Watcher)",
            "cn.hutool.core.lang.ClassScaner:java.util.Set scan()",
            "cn.hutool.core.lang.ClassScaner:void scanJar(java.util.jar.JarFile)",
            "cn.hutool.core.lang.ConsistentHash:void <init>(int,java.util.Collection)",
            "cn.hutool.core.lang.ConsistentHash:void <init>(cn.hutool.core.lang.ConsistentHash$HashFunc,int,java.util.Collection)",
            "cn.hutool.core.lang.Dict:void removeEqual(cn.hutool.core.lang.Dict,java.lang.String[])",
            "cn.hutool.core.lang.JarClassLoader:void loadJar(java.net.URLClassLoader,java.io.File)",
            "cn.hutool.core.lang.JarClassLoader:cn.hutool.core.lang.JarClassLoader addJar(java.io.File)",
            "cn.hutool.core.lang.SyncFinisher:void start()",
            "cn.hutool.core.lang.WeightRandom:void <init>(java.lang.Iterable)",
            "cn.hutool.core.map.CustomKeyLinkedMap:void putAll(java.util.Map)",
            "cn.hutool.core.map.CustomKeyMap:void putAll(java.util.Map)",
            "cn.hutool.core.map.MapUtil:java.util.HashMap of(java.lang.Object[])",
            "cn.hutool.core.map.MapUtil:java.util.Map toListMap(java.lang.Iterable)",
            "cn.hutool.core.map.MapUtil:java.util.List toMapList(java.util.Map)",
            "cn.hutool.core.map.MapUtil:java.lang.String join(java.util.Map,java.lang.String,java.lang.String,boolean)",
            "cn.hutool.core.map.MapUtil:java.util.Map filter(java.util.Map,cn.hutool.core.lang.Editor)",
            "cn.hutool.core.map.MapUtil:java.util.Map filter(java.util.Map,cn.hutool.core.lang.Filter)",
            "cn.hutool.core.map.MapUtil:java.util.Map inverse(java.util.Map)",
            "cn.hutool.core.text.csv.CsvRow:java.util.Map getFieldMap()",
            "cn.hutool.core.text.csv.CsvRow:java.lang.String toString()",
            "cn.hutool.core.text.csv.CsvWriter:cn.hutool.core.text.csv.CsvWriter write(java.util.Collection)",
            "cn.hutool.core.text.replacer.ReplacerChain:int replace(java.lang.CharSequence,int,cn.hutool.core.text.StrBuilder)",
            "cn.hutool.core.util.ClassLoaderUtil:void <clinit>()",
            "cn.hutool.core.util.ImageUtil:javax.imageio.ImageReader getReader(java.lang.String)",
            "cn.hutool.core.util.ObjectUtil:int length(java.lang.Object)",
            "cn.hutool.core.util.ObjectUtil:boolean contains(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.util.ReUtil:java.lang.String extractMulti(java.util.regex.Pattern,java.lang.String,java.lang.String)",
            "cn.hutool.core.util.ReUtil:java.lang.String extractMultiAndDelPre(java.util.regex.Pattern,cn.hutool.core.lang.Holder,java.lang.String)",
            "cn.hutool.core.util.ReUtil:java.lang.String replaceAll(java.lang.String,java.util.regex.Pattern,java.lang.String)",
            "cn.hutool.core.util.StrUtil:java.lang.String format(java.lang.CharSequence,java.util.Map)",
            "cn.hutool.core.util.XmlUtil:void mapToXml(org.w3c.dom.Document,org.w3c.dom.Element,java.util.Map)",
            "cn.hutool.cache.impl.CacheObjIterator:void nextValue()",
            "cn.hutool.cache.impl.FIFOCache:int pruneCache()",
            "cn.hutool.cache.impl.LFUCache:int pruneCache()",
            "cn.hutool.cache.impl.LRUCache:int pruneCache()",
            "cn.hutool.cache.impl.TimedCache:int pruneCache()",
            "cn.hutool.db.ds.c3p0.C3p0DSFactory:void destroy()",
            "cn.hutool.db.ds.dbcp.DbcpDSFactory:void destroy()",
            "cn.hutool.db.ds.druid.DruidDSFactory:void destroy()",
            "cn.hutool.db.ds.druid.DruidDSFactory:com.alibaba.druid.pool.DruidDataSource createDataSource(java.lang.String)",
            "cn.hutool.db.ds.hikari.HikariDSFactory:void destroy()",
            "cn.hutool.db.ds.pooled.PooledDataSource:void close()",
            "cn.hutool.db.ds.pooled.PooledDSFactory:void destroy()",
            "cn.hutool.db.ds.simple.SimpleDSFactory:void destroy()",
            "cn.hutool.db.ds.tomcat.TomcatDSFactory:void destroy()",
            "cn.hutool.db.nosql.mongo.MongoFactory:void closeAll()",
            "cn.hutool.db.sql.SqlBuilder:cn.hutool.db.sql.SqlBuilder insert(cn.hutool.db.Entity,cn.hutool.db.dialect.DialectName)",
            "cn.hutool.db.sql.SqlBuilder:cn.hutool.db.sql.SqlBuilder update(cn.hutool.db.Entity)",
            "cn.hutool.db.sql.SqlUtil:java.lang.String buildEqualsWhere(cn.hutool.db.Entity,java.util.List)",
            "cn.hutool.db.sql.SqlUtil:cn.hutool.db.sql.Condition[] buildConditions(cn.hutool.db.Entity)",
            "cn.hutool.db.sql.Wrapper:cn.hutool.db.Entity wrap(cn.hutool.db.Entity)",
            "cn.hutool.dfa.WordTree:void addWords(java.util.Collection)",
            "cn.hutool.dfa.WordTree:void addWords(java.lang.String[])",
            "cn.hutool.extra.servlet.ServletUtil:java.util.Map getParamMap(javax.servlet.ServletRequest)",
            "cn.hutool.extra.ssh.JschSessionPool:void closeAll()",
            "cn.hutool.extra.ssh.Sftp:boolean delDir(java.lang.String)",
            "cn.hutool.extra.ssh.Sftp:boolean containsIgnoreCase(java.util.List,java.lang.String)",
            "cn.hutool.extra.template.engine.velocity.VelocityUtil:void merge(org.apache.velocity.Template,org.apache.velocity.VelocityContext,java.io.Writer)",
            "cn.hutool.http.GlobalHeaders:cn.hutool.http.GlobalHeaders header(java.util.Map)",
            "cn.hutool.http.HTMLFilter:java.lang.String checkTags(java.lang.String)",
            "cn.hutool.http.HttpBase:java.lang.Object header(java.util.Map,boolean)",
            "cn.hutool.http.HttpBase:java.lang.Object addHeaders(java.util.Map)",
            "cn.hutool.http.HttpBase:java.lang.String toString()",
            "cn.hutool.http.HttpConnection:cn.hutool.http.HttpConnection header(java.util.Map,boolean)",
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest form(java.util.Map)",
            "cn.hutool.http.HttpRequest:void writeForm(java.io.OutputStream)",
            "cn.hutool.http.HttpRequest:void writeFileForm(java.io.OutputStream)",
            "cn.hutool.http.HttpRequest:void appendPart(java.lang.String,cn.hutool.core.io.resource.Resource,java.io.OutputStream)",
            "cn.hutool.http.HttpResponse:java.net.HttpCookie getCookie(java.lang.String)",
            "cn.hutool.http.HttpResponse:java.lang.String toString()",
            "cn.hutool.http.HttpUtil:java.lang.String toParams(java.util.Map,java.nio.charset.Charset)",
            "cn.hutool.http.HttpUtil:java.util.HashMap decodeParamMap(java.lang.String,java.lang.String)",
            "cn.hutool.http.webservice.SoapRequest:java.lang.String toSoapXml()",
            "cn.hutool.setting.GroupedMap:int size()",
            "cn.hutool.setting.GroupedMap:cn.hutool.setting.GroupedMap putAll(java.lang.String,java.util.Map)",
            "cn.hutool.setting.Setting:java.util.Properties toProperties()",
            "cn.hutool.setting.SettingLoader:void store(java.io.PrintWriter)",
            "cn.hutool.setting.SettingLoader:java.lang.String replaceVar(java.lang.String,java.lang.String)",
            "cn.hutool.cron.pattern.CronPattern:void parseGroupPattern(java.lang.String)",
            "cn.hutool.cron.pattern.matcher.BoolArrayValueMatcher:void <init>(java.util.List)",
            "cn.hutool.cron.pattern.matcher.ValueMatcherBuilder:java.util.List parseArray(java.lang.String,cn.hutool.cron.pattern.parser.ValueParser)",
            "cn.hutool.cron.Scheduler:cn.hutool.cron.Scheduler schedule(cn.hutool.setting.Setting)",
            "cn.hutool.json.JSONArray:void <init>(java.lang.Iterable)",
            "cn.hutool.json.JSONArray:void <init>(java.util.Collection)",
            "cn.hutool.json.JSONArray:void <init>(java.lang.Object,boolean)",
            "cn.hutool.json.JSONArray:boolean addAll(java.util.Collection)",
            "cn.hutool.json.JSONArray:boolean addAll(int,java.util.Collection)",
            "cn.hutool.json.JSONObject:void <init>(java.lang.Object,boolean)",
            "cn.hutool.json.JSONObject:cn.hutool.json.JSONArray toJSONArray(java.util.Collection)",
            "cn.hutool.json.JSONObject:void putAll(java.util.Map)",
            "cn.hutool.json.JSONObject:java.io.Writer write(java.io.Writer,int,int)",
            "cn.hutool.json.JSONObject:void populateMap(java.lang.Object)",
            "cn.hutool.json.JSONObjectIter$1:boolean hasNext()",
            "cn.hutool.json.XML:java.lang.String toXml(java.lang.Object,java.lang.String)",
            "cn.hutool.poi.excel.ExcelPicUtil:java.util.Map getPicMapXls(org.apache.poi.hssf.usermodel.HSSFWorkbook,int)",
            "cn.hutool.poi.excel.ExcelPicUtil:java.util.Map getPicMapXlsx(org.apache.poi.xssf.usermodel.XSSFWorkbook,int)",
            "cn.hutool.poi.excel.ExcelReader:java.util.List read(int,int,int,java.lang.Class)",
            "cn.hutool.poi.excel.ExcelReader:java.util.List aliasHeader(java.util.List)",
            "cn.hutool.poi.excel.ExcelWriter:cn.hutool.poi.excel.ExcelWriter write(java.lang.Iterable)",
            "cn.hutool.poi.excel.ExcelWriter:cn.hutool.poi.excel.ExcelWriter write(java.lang.Iterable,java.util.Comparator)",
            "cn.hutool.poi.excel.ExcelWriter:java.util.Collection aliasHeader(java.util.Collection)",
            "cn.hutool.poi.excel.RowUtil:void writeRow(org.apache.poi.ss.usermodel.Row,java.lang.Iterable,cn.hutool.poi.excel.StyleSet,boolean)",
            "cn.hutool.poi.excel.sax.Excel07SaxReader:cn.hutool.poi.excel.sax.Excel07SaxReader read(org.apache.poi.openxml4j.opc.OPCPackage,int)"
        ]
    },
    "cn.hutool.core.io.file.FileReader:java.lang.String readString()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.FileUtil:java.lang.String readString(java.io.File,java.nio.charset.Charset)",
            "cn.hutool.json.JSONUtil:cn.hutool.json.JSON readJSON(java.io.File,java.nio.charset.Charset)",
            "cn.hutool.json.JSONUtil:cn.hutool.json.JSONObject readJSONObject(java.io.File,java.nio.charset.Charset)",
            "cn.hutool.json.JSONUtil:cn.hutool.json.JSONArray readJSONArray(java.io.File,java.nio.charset.Charset)"
        ]
    },
    "cn.hutool.core.io.FileUtil:byte[] readBytes(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.codec.Base64:java.lang.String encode(java.io.File)",
            "cn.hutool.core.codec.Base64:java.lang.String encodeUrlSafe(java.io.File)",
            "cn.hutool.core.io.FileUtil:byte[] readBytes(java.lang.String)",
            "cn.hutool.cache.file.AbstractFileCache:byte[] getFileBytes(java.io.File)",
            "cn.hutool.extra.servlet.multipart.UploadFile:byte[] getFileContent()"
        ]
    },
    "cn.hutool.core.io.file.FileReader:java.util.List readLines()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.FileUtil:java.util.Collection readLines(java.io.File,java.lang.String,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.FileUtil:java.util.Collection readLines(java.lang.String,java.lang.String,java.util.Collection)",
            "cn.hutool.core.io.FileUtil:java.util.List readLines(java.io.File,java.lang.String)"
        ]
    },
    "cn.hutool.core.io.FileUtil:java.util.Collection readLines(java.io.File,java.nio.charset.Charset,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.FileUtil:java.util.Collection readLines(java.lang.String,java.nio.charset.Charset,java.util.Collection)",
            "cn.hutool.core.io.FileUtil:java.util.Collection readUtf8Lines(java.io.File,java.util.Collection)",
            "cn.hutool.core.io.FileUtil:java.util.List readLines(java.io.File,java.nio.charset.Charset)"
        ]
    },
    "cn.hutool.core.io.FileUtil:void readLines(java.io.File,java.nio.charset.Charset,cn.hutool.core.io.LineHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.FileUtil:void readUtf8Lines(java.io.File,cn.hutool.core.io.LineHandler)"
        ]
    },
    "cn.hutool.core.io.FileUtil:java.lang.Object load(java.io.File,java.nio.charset.Charset,cn.hutool.core.io.file.FileReader$ReaderHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.FileUtil:java.lang.Object loadUtf8(java.io.File,cn.hutool.core.io.file.FileReader$ReaderHandler)"
        ]
    },
    "cn.hutool.core.io.FileUtil:java.io.File writeToStream(java.io.File,java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.FileUtil:void writeToStream(java.lang.String,java.io.OutputStream)"
        ]
    },
    "cn.hutool.core.io.file.FileWriter:java.io.File write(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.FileUtil:java.io.File writeString(java.lang.String,java.io.File,java.lang.String)",
            "cn.hutool.core.io.FileUtil:java.io.File writeString(java.lang.String,java.io.File,java.nio.charset.Charset)"
        ]
    },
    "cn.hutool.core.io.file.FileWriter:java.io.File append(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.FileUtil:java.io.File appendString(java.lang.String,java.io.File,java.lang.String)",
            "cn.hutool.core.io.FileUtil:java.io.File appendString(java.lang.String,java.io.File,java.nio.charset.Charset)"
        ]
    },
    "cn.hutool.core.io.file.FileWriter:java.io.File write(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.file.FileWriter:java.io.File append(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.FileUtil:java.io.File writeBytes(byte[],java.io.File,int,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.FileUtil:java.io.File writeBytes(byte[],java.io.File)"
        ]
    },
    "cn.hutool.core.io.FileUtil:java.io.File writeFromStream(java.io.InputStream,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.FileUtil:java.io.File writeFromStream(java.io.InputStream,java.lang.String)"
        ]
    },
    "cn.hutool.core.io.FileUtil:java.lang.String getType(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.FileUtil:java.util.Collection readUtf8Lines(java.net.URL,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.FileUtil:java.util.Collection readLines(java.net.URL,java.lang.String,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.FileUtil:java.util.List readLines(java.net.URL,java.lang.String)"
        ]
    },
    "cn.hutool.core.io.FileUtil:java.util.List readLines(java.net.URL,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.FileUtil:java.util.List readUtf8Lines(java.net.URL)"
        ]
    },
    "cn.hutool.core.codec.Base64:void decodeToStream(java.lang.String,java.io.OutputStream,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.http.HttpRequest:void sendFormUrlEncoded()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HttpRequest:void send()"
        ]
    },
    "cn.hutool.captcha.AbstractCaptcha:void write(java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.captcha.AbstractCaptcha:void write(java.io.File)"
        ]
    },
    "cn.hutool.core.io.IoUtil:void writeUtf8(java.io.OutputStream,boolean,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.IoUtil:void write(java.io.OutputStream,java.lang.String,boolean,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.http.HttpRequest:void writeForm(java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HttpRequest:void sendMultipart()"
        ]
    },
    "cn.hutool.http.HttpRequest:void appendPart(java.lang.String,cn.hutool.core.io.resource.Resource,java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HttpRequest:void writeFileForm(java.io.OutputStream)",
            "cn.hutool.http.HttpRequest:void appendPart(java.lang.String,cn.hutool.core.io.resource.Resource,java.io.OutputStream)"
        ]
    },
    "cn.hutool.core.io.FileUtil:java.util.zip.Checksum checksum(java.io.File,java.util.zip.Checksum)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.FileUtil:long checksumCRC32(java.io.File)"
        ]
    },
    "cn.hutool.core.io.IoUtil:long checksumCRC32(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.resource.InputStreamResource:java.lang.String readUtf8Str()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.resource.MultiResource:java.lang.String readUtf8Str()"
        ]
    },
    "cn.hutool.core.io.resource.MultiResource:java.lang.String readStr(java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.resource.MultiResource:java.lang.String readStr(java.nio.charset.Charset)"
        ]
    },
    "cn.hutool.core.io.resource.MultiResource:byte[] readBytes()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.resource.MultiResource:byte[] readBytes()"
        ]
    },
    "cn.hutool.core.io.resource.UrlResource:java.lang.String readUtf8Str()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.resource.MultiResource:java.lang.String readUtf8Str()",
            "cn.hutool.core.io.resource.ResourceUtil:java.lang.String readUtf8Str(java.lang.String)"
        ]
    },
    "cn.hutool.core.util.ObjectUtil:java.lang.Object clone(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.collection.CollUtil:java.util.Collection filter(java.util.Collection,cn.hutool.core.lang.Editor)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection filter(java.util.Collection,cn.hutool.core.lang.Filter)",
            "cn.hutool.core.collection.CollUtil:java.util.List reverseNew(java.util.List)",
            "cn.hutool.core.date.DateTime:cn.hutool.core.date.DateTime offset(cn.hutool.core.date.DateField,int)",
            "cn.hutool.core.date.DateTime:cn.hutool.core.date.DateTime offsetNew(cn.hutool.core.date.DateField,int)",
            "cn.hutool.core.date.DateTime:cn.hutool.core.date.DateTime setField(int,int)",
            "cn.hutool.core.map.MapUtil:java.util.Map filter(java.util.Map,cn.hutool.core.lang.Editor)",
            "cn.hutool.core.map.MapUtil:java.util.Map filter(java.util.Map,cn.hutool.core.lang.Filter)",
            "cn.hutool.core.map.MapUtil:java.util.Map filter(java.util.Map,java.lang.Object[])",
            "cn.hutool.core.util.ObjectUtil:java.lang.Object cloneIfPossible(java.lang.Object)"
        ]
    },
    "cn.hutool.core.util.RuntimeUtil:java.util.List execForLines(java.nio.charset.Charset,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.RuntimeUtil:java.util.List execForLines(java.lang.String[])"
        ]
    },
    "cn.hutool.core.util.RuntimeUtil:java.util.List getResultLines(java.lang.Process)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.RuntimeUtil:java.lang.String execForStr(java.nio.charset.Charset,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.RuntimeUtil:java.lang.String execForStr(java.lang.String[])"
        ]
    },
    "cn.hutool.core.util.RuntimeUtil:java.lang.String getResult(java.lang.Process)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ZipUtil:java.io.File zip(java.io.File,java.lang.String,java.io.InputStream,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ZipUtil:java.io.File zip(java.io.File,java.lang.String,java.lang.String,java.nio.charset.Charset)",
            "cn.hutool.core.util.ZipUtil:java.io.File zip(java.io.File,java.lang.String,java.io.InputStream)"
        ]
    },
    "cn.hutool.core.util.ZipUtil:java.io.File zip(java.io.File,java.lang.String[],java.io.InputStream[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ZipUtil:byte[] unzipFileBytes(java.io.File,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ZipUtil:byte[] gzip(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ZipUtil:java.lang.String unGzip(byte[],java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ZipUtil:void zip(java.io.File,java.lang.String,java.util.zip.ZipOutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ZipUtil:java.io.File zip(java.io.File,java.nio.charset.Charset,boolean,java.io.File[])",
            "cn.hutool.core.util.ZipUtil:void zip(java.io.File,java.lang.String,java.util.zip.ZipOutputStream)"
        ]
    },
    "cn.hutool.crypto.digest.Digester:java.lang.String digestHex(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.digest.DigestUtil:java.lang.String md5Hex(java.io.File)",
            "cn.hutool.crypto.digest.DigestUtil:java.lang.String sha1Hex(java.io.File)",
            "cn.hutool.crypto.digest.DigestUtil:java.lang.String sha256Hex(java.io.File)",
            "cn.hutool.crypto.SecureUtil:java.lang.String md5(java.io.File)",
            "cn.hutool.crypto.SecureUtil:java.lang.String sha1(java.io.File)"
        ]
    },
    "cn.hutool.crypto.digest.DigestUtil:byte[] md5(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.digest.DigestUtil:byte[] sha1(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.digest.DigestUtil:byte[] sha256(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.digest.HMac:java.lang.String digestHex(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.ds.DSFactory:void close()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.ds.pooled.PooledDataSource:void <init>(cn.hutool.db.ds.pooled.DbConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.ds.pooled.PooledDataSource:void <init>(cn.hutool.db.ds.pooled.DbSetting,java.lang.String)"
        ]
    },
    "cn.hutool.db.Entity:java.lang.String getStr(java.lang.String,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.Entity:java.lang.String getStr(java.lang.String)"
        ]
    },
    "cn.hutool.extra.servlet.ServletUtil:void write(javax.servlet.http.HttpServletResponse,java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.servlet.ServletUtil:void write(javax.servlet.http.HttpServletResponse,java.io.InputStream,java.lang.String)"
        ]
    },
    "cn.hutool.http.HttpRequest:void send()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpResponse execute(boolean)"
        ]
    },
    "cn.hutool.http.HttpResponse:cn.hutool.http.HttpResponse forceSync()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HttpResponse:cn.hutool.http.HttpResponse sync()",
            "cn.hutool.http.HttpResponse:cn.hutool.http.HttpResponse init()"
        ]
    },
    "cn.hutool.setting.GroupedSet:boolean init(java.net.URL,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.setting.GroupedSet:void <init>(java.lang.String,java.nio.charset.Charset)",
            "cn.hutool.setting.GroupedSet:void <init>(java.io.File,java.nio.charset.Charset)",
            "cn.hutool.setting.GroupedSet:void <init>(java.lang.String,java.lang.Class,java.nio.charset.Charset)",
            "cn.hutool.setting.GroupedSet:void <init>(java.net.URL,java.nio.charset.Charset)"
        ]
    },
    "cn.hutool.setting.GroupedSet:void reload()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.poi.excel.ExcelWriter:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.IoUtil:void close(java.io.Closeable)",
            "cn.hutool.core.io.IoUtil:void close(java.lang.AutoCloseable)"
        ]
    },
    "cn.hutool.poi.excel.ExcelWriter:cn.hutool.poi.excel.ExcelWriter flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.poi.excel.ExcelWriter:void close()"
        ]
    },
    "cn.hutool.poi.excel.sax.Excel07SaxReader:cn.hutool.poi.excel.sax.Excel07SaxReader read(java.io.File,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.poi.excel.ExcelUtil:cn.hutool.poi.excel.sax.Excel07SaxReader read07BySax(java.io.File,int,cn.hutool.poi.excel.sax.handler.RowHandler)",
            "cn.hutool.poi.excel.sax.Excel07SaxReader:java.lang.Object read(java.io.File,int)"
        ]
    },
    "cn.hutool.poi.excel.sax.Excel07SaxReader:cn.hutool.poi.excel.sax.Excel07SaxReader read(java.io.InputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.poi.excel.ExcelUtil:cn.hutool.poi.excel.sax.Excel07SaxReader read07BySax(java.io.InputStream,int,cn.hutool.poi.excel.sax.handler.RowHandler)",
            "cn.hutool.poi.excel.sax.Excel07SaxReader:java.lang.Object read(java.io.InputStream,int)"
        ]
    },
    "cn.hutool.poi.excel.WorkbookUtil:org.apache.poi.ss.usermodel.Workbook createBook(java.io.InputStream,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.poi.excel.ExcelReader:void <init>(java.io.InputStream,int,boolean)",
            "cn.hutool.poi.excel.ExcelReader:void <init>(java.io.InputStream,java.lang.String,boolean)",
            "cn.hutool.poi.excel.ExcelWriter:void <init>(java.io.File,java.lang.String)"
        ]
    },
    "cn.hutool.core.util.XmlUtil:java.lang.Object readObjectFromXml(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.XmlUtil:java.lang.Object readObjectFromXml(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.SqlConnRunner:java.util.List findAll(java.sql.Connection,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.SqlConnRunner:java.util.List findBy(java.sql.Connection,java.lang.String,java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.SqlConnRunner:java.util.List findLike(java.sql.Connection,java.lang.String,java.lang.String,java.lang.String,cn.hutool.db.sql.Condition$LikeType)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.SqlConnRunner:java.util.List findIn(java.sql.Connection,java.lang.String,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.AbstractDb:java.util.List findAll(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.AbstractDb:java.util.List findBy(java.lang.String,java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.AbstractDb:java.util.List findLike(java.lang.String,java.lang.String,java.lang.String,cn.hutool.db.sql.Condition$LikeType)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.DaoTemplate:cn.hutool.db.Entity get(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.AbstractDb:java.util.List pageForEntityList(cn.hutool.db.Entity,int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.watch.WatchMonitor:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.thread.GlobalThreadPool:void execute(java.lang.Runnable)",
            "cn.hutool.core.thread.ThreadUtil$1:void run()",
            "cn.hutool.setting.dialect.Props:void autoLoad(boolean)",
            "cn.hutool.setting.Setting:void autoLoad(boolean)",
            "cn.hutool.cron.task.RunnableTask:void execute()"
        ]
    },
    "cn.hutool.db.DaoTemplate:void <init>(java.lang.String,java.lang.String,javax.sql.DataSource)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.DaoTemplate:void <init>(java.lang.String,java.lang.String)",
            "cn.hutool.db.DaoTemplate:void <init>(java.lang.String,javax.sql.DataSource)"
        ]
    },
    "cn.hutool.db.DbUtil:cn.hutool.db.Db use(javax.sql.DataSource)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.DbUtil:cn.hutool.db.SqlRunner newSqlRunner(javax.sql.DataSource)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.http.HttpUtil:java.lang.String downloadString(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.http.HttpUtil:java.lang.String downloadString(java.lang.String,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.cron.TaskLauncherManager:cn.hutool.cron.TaskLauncher spawnLauncher(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.cron.CronTimer:void spawnLauncher(long)"
        ]
    },
    "cn.hutool.core.bean.BeanUtil:java.lang.Object fillBeanWithMap(java.util.Map,java.lang.Object,boolean,cn.hutool.core.bean.copier.CopyOptions)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.BeanUtil:java.lang.Object fillBeanWithMap(java.util.Map,java.lang.Object,boolean,boolean)",
            "cn.hutool.core.bean.BeanUtil:java.lang.Object fillBeanWithMap(java.util.Map,java.lang.Object,cn.hutool.core.bean.copier.CopyOptions)"
        ]
    },
    "cn.hutool.core.bean.BeanUtil:java.lang.Object fillBean(java.lang.Object,cn.hutool.core.bean.copier.ValueProvider,cn.hutool.core.bean.copier.CopyOptions)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.BeanUtil:java.lang.Object toBean(java.lang.Class,cn.hutool.core.bean.copier.ValueProvider,cn.hutool.core.bean.copier.CopyOptions)",
            "cn.hutool.extra.servlet.ServletUtil:java.lang.Object fillBean(javax.servlet.ServletRequest,java.lang.Object,cn.hutool.core.bean.copier.CopyOptions)",
            "cn.hutool.setting.AbsSetting:java.lang.Object toBean(java.lang.String,java.lang.Object)",
            "cn.hutool.json.InternalJSONUtil:java.lang.Object toBean(cn.hutool.json.JSONObject,java.lang.Object,boolean)"
        ]
    },
    "cn.hutool.core.bean.BeanUtil:void copyProperties(java.lang.Object,java.lang.Object,boolean,cn.hutool.core.bean.copier.CopyOptions)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.BeanUtil:void copyProperties(java.lang.Object,java.lang.Object,cn.hutool.core.bean.copier.CopyOptions)"
        ]
    },
    "cn.hutool.core.convert.impl.BeanConverter:java.lang.Object convertInternal(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.AbstractConverter:java.lang.Object convert(java.lang.Object,java.lang.Object)"
        ]
    },
    "cn.hutool.core.bean.BeanUtil:java.util.Map beanToMap(java.lang.Object,java.util.Map,boolean,cn.hutool.core.lang.Editor)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.BeanUtil:java.util.Map beanToMap(java.lang.Object,java.util.Map,boolean,boolean)"
        ]
    },
    "cn.hutool.core.collection.CollUtil:java.util.Collection union(java.util.Collection,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.collection.CollUtil:java.util.Collection union(java.util.Collection,java.util.Collection,java.util.Collection[])"
        ]
    },
    "cn.hutool.core.collection.CollUtil:java.util.Collection intersection(java.util.Collection,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.collection.CollUtil:java.util.Collection intersection(java.util.Collection,java.util.Collection,java.util.Collection[])"
        ]
    },
    "cn.hutool.core.collection.CollUtil:java.util.Collection disjunction(java.util.Collection,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.collection.CollUtil:boolean containsAny(java.util.Collection,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.collection.CollUtil:java.util.HashSet newHashSet(boolean,java.util.Iterator)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.collection.CollUtil:java.util.List list(boolean,java.util.Iterator)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.collection.CollUtil:java.util.List list(boolean,java.lang.Iterable)",
            "cn.hutool.core.collection.CollUtil:java.util.ArrayList newArrayList(java.util.Iterator)"
        ]
    },
    "cn.hutool.core.collection.CollUtil:java.util.List split(java.util.Collection,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.collection.CollUtil:java.util.Collection filter(java.util.Collection,cn.hutool.core.lang.Editor)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.collection.CollUtil:java.util.Collection removeNull(java.util.Collection)"
        ]
    },
    "cn.hutool.core.collection.CollUtil:java.util.List filter(java.util.List,cn.hutool.core.lang.Editor)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.sql.Wrapper:java.lang.String wrap(java.lang.String)"
        ]
    },
    "cn.hutool.core.collection.CollUtil:java.util.Collection filter(java.util.Collection,cn.hutool.core.lang.Filter)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.collection.CollUtil:java.util.Collection removeEmpty(java.util.Collection)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection removeBlank(java.util.Collection)"
        ]
    },
    "cn.hutool.core.collection.CollUtil:java.util.List filter(java.util.List,cn.hutool.core.lang.Filter)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.collection.CollUtil:java.util.List extract(java.lang.Iterable,cn.hutool.core.lang.Editor)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.collection.CollUtil:java.util.List getFieldValues(java.lang.Iterable,java.lang.String)"
        ]
    },
    "cn.hutool.core.collection.CollUtil:java.lang.Object findOne(java.lang.Iterable,cn.hutool.core.lang.Filter)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.collection.CollUtil:java.lang.Object findOneByField(java.lang.Iterable,java.lang.String,java.lang.Object)"
        ]
    },
    "cn.hutool.core.collection.CollUtil:int count(java.lang.Iterable,cn.hutool.core.lang.Matcher)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.collection.CollUtil:java.util.TreeSet toTreeSet(java.util.Collection,java.util.Comparator)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.collection.CollUtil:java.util.Collection addAll(java.util.Collection,java.lang.Object,java.lang.reflect.Type)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.collection.CollUtil:java.util.Collection addAll(java.util.Collection,java.lang.Object)",
            "cn.hutool.core.convert.impl.CollectionConverter:java.util.Collection convertInternal(java.lang.Object)"
        ]
    },
    "cn.hutool.core.collection.CollUtil:java.util.Collection addAll(java.util.Collection,java.util.Iterator)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.collection.CollUtil:java.util.Collection addAll(java.util.Collection,java.lang.Iterable)"
        ]
    },
    "cn.hutool.core.collection.CollUtil:java.util.List addAllIfNotContains(java.util.List,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.cron.pattern.matcher.ValueMatcherBuilder:java.util.List parseArray(java.lang.String,cn.hutool.cron.pattern.parser.ValueParser)"
        ]
    },
    "cn.hutool.core.collection.CollUtil:java.util.ArrayList valuesOfKeys(java.util.Map,java.util.Iterator)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.collection.CollUtil:java.util.ArrayList valuesOfKeys(java.util.Map,java.lang.Iterable)"
        ]
    },
    "cn.hutool.core.collection.CollUtil:java.util.LinkedHashMap sortToMap(java.util.Collection,java.util.Comparator)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.collection.CollUtil:java.util.LinkedHashMap sortByEntry(java.util.Map,java.util.Comparator)"
        ]
    },
    "cn.hutool.core.collection.CollUtil:void forEach(java.util.Iterator,cn.hutool.core.collection.CollUtil$Consumer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.collection.CollUtil:void forEach(java.util.Map,cn.hutool.core.collection.CollUtil$KVConsumer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.collection.CollUtil:java.util.List group(java.util.Collection,cn.hutool.core.collection.CollUtil$Hash)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.collection.CollUtil:java.util.List groupByField(java.util.Collection,java.lang.String)"
        ]
    },
    "cn.hutool.core.collection.ConcurrentHashSet:void <init>(java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.collection.CopiedIter:void <init>(java.util.Iterator)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.collection.CopiedIter:cn.hutool.core.collection.CopiedIter copyOf(java.util.Iterator)",
            "cn.hutool.core.collection.IterUtil:java.lang.Class getElementType(java.util.Iterator)"
        ]
    },
    "cn.hutool.core.collection.CopiedIter:boolean hasNext()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.BeanUtil:java.util.Map beanToMap(java.lang.Object,java.util.Map,boolean,cn.hutool.core.lang.Editor)",
            "cn.hutool.core.bean.copier.BeanCopier:void valueProviderToBean(cn.hutool.core.bean.copier.ValueProvider,java.lang.Object)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection union(java.util.Collection,java.util.Collection)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection intersection(java.util.Collection,java.util.Collection)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection disjunction(java.util.Collection,java.util.Collection)",
            "cn.hutool.core.collection.CollUtil:boolean containsAny(java.util.Collection,java.util.Collection)",
            "cn.hutool.core.collection.CollUtil:java.util.HashSet newHashSet(boolean,java.util.Iterator)",
            "cn.hutool.core.collection.CollUtil:java.util.List list(boolean,java.util.Iterator)",
            "cn.hutool.core.collection.CollUtil:java.util.List split(java.util.Collection,int)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection filter(java.util.Collection,cn.hutool.core.lang.Editor)",
            "cn.hutool.core.collection.CollUtil:java.util.List filter(java.util.List,cn.hutool.core.lang.Editor)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection filter(java.util.Collection,cn.hutool.core.lang.Filter)",
            "cn.hutool.core.collection.CollUtil:java.util.List filter(java.util.List,cn.hutool.core.lang.Filter)",
            "cn.hutool.core.collection.CollUtil:java.util.List extract(java.lang.Iterable,cn.hutool.core.lang.Editor)",
            "cn.hutool.core.collection.CollUtil:java.lang.Object findOne(java.lang.Iterable,cn.hutool.core.lang.Filter)",
            "cn.hutool.core.collection.CollUtil:int count(java.lang.Iterable,cn.hutool.core.lang.Matcher)",
            "cn.hutool.core.collection.CollUtil:java.util.TreeSet toTreeSet(java.util.Collection,java.util.Comparator)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection addAll(java.util.Collection,java.lang.Object,java.lang.reflect.Type)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection addAll(java.util.Collection,java.util.Iterator)",
            "cn.hutool.core.collection.CollUtil:java.util.List addAllIfNotContains(java.util.List,java.util.List)",
            "cn.hutool.core.collection.CollUtil:java.util.ArrayList valuesOfKeys(java.util.Map,java.util.Iterator)",
            "cn.hutool.core.collection.CollUtil:java.util.LinkedHashMap sortToMap(java.util.Collection,java.util.Comparator)",
            "cn.hutool.core.collection.CollUtil:void forEach(java.util.Iterator,cn.hutool.core.collection.CollUtil$Consumer)",
            "cn.hutool.core.collection.CollUtil:void forEach(java.util.Map,cn.hutool.core.collection.CollUtil$KVConsumer)",
            "cn.hutool.core.collection.CollUtil:java.util.List group(java.util.Collection,cn.hutool.core.collection.CollUtil$Hash)",
            "cn.hutool.core.collection.ConcurrentHashSet:void <init>(java.lang.Iterable)",
            "cn.hutool.core.collection.CopiedIter:void <init>(java.util.Iterator)",
            "cn.hutool.core.collection.CopiedIter:boolean hasNext()",
            "cn.hutool.core.collection.IteratorEnumeration:boolean hasMoreElements()",
            "cn.hutool.core.collection.IterUtil:boolean isEmpty(java.util.Iterator)",
            "cn.hutool.core.collection.IterUtil:boolean isNotEmpty(java.util.Iterator)",
            "cn.hutool.core.collection.IterUtil:boolean hasNull(java.util.Iterator)",
            "cn.hutool.core.collection.IterUtil:boolean isAllNull(java.util.Iterator)",
            "cn.hutool.core.collection.IterUtil:java.util.Map countMap(java.util.Iterator)",
            "cn.hutool.core.collection.IterUtil:java.util.Map fieldValueMap(java.util.Iterator,java.lang.String)",
            "cn.hutool.core.collection.IterUtil:java.util.Map fieldValueAsMap(java.util.Iterator,java.lang.String,java.lang.String)",
            "cn.hutool.core.collection.IterUtil:java.util.List fieldValueList(java.util.Iterator,java.lang.String)",
            "cn.hutool.core.collection.IterUtil:java.lang.String join(java.util.Iterator,java.lang.CharSequence,java.lang.String,java.lang.String)",
            "cn.hutool.core.collection.IterUtil:java.util.HashMap toMap(java.lang.Iterable)",
            "cn.hutool.core.collection.IterUtil:java.util.Map toMap(java.util.Iterator,java.util.Iterator)",
            "cn.hutool.core.collection.IterUtil:java.util.List toList(java.util.Iterator)",
            "cn.hutool.core.collection.IterUtil:java.lang.Object getFirst(java.util.Iterator)",
            "cn.hutool.core.collection.IterUtil:java.lang.Class getElementType(java.util.Iterator)",
            "cn.hutool.core.comparator.ComparatorChain:int compare(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.convert.BasicType:void <clinit>()",
            "cn.hutool.core.convert.impl.ArrayConverter:java.lang.Object convertObjectToArray(java.lang.Object)",
            "cn.hutool.core.convert.impl.MapConverter:void convertMapToMap(java.util.Map,java.util.Map)",
            "cn.hutool.core.date.format.FastDateParser$TimeZoneStrategy:void <init>(java.util.Locale)",
            "cn.hutool.core.date.format.FastDateParser:java.util.Map appendDisplayNames(java.util.Calendar,java.util.Locale,int,java.lang.StringBuilder)",
            "cn.hutool.core.io.file.FileAppender:cn.hutool.core.io.file.FileAppender flush()",
            "cn.hutool.core.io.file.FileWriter:java.io.File writeLines(java.util.Collection,cn.hutool.core.io.file.LineSeparator,boolean)",
            "cn.hutool.core.io.file.FileWriter:java.io.File writeMap(java.util.Map,cn.hutool.core.io.file.LineSeparator,java.lang.String,boolean)",
            "cn.hutool.core.io.FileTypeUtil:java.lang.String getType(java.lang.String)",
            "cn.hutool.core.io.FileUtil:boolean isDirEmpty(java.nio.file.Path)",
            "cn.hutool.core.io.FileUtil:java.util.List listFileNames(java.lang.String)",
            "cn.hutool.core.io.resource.MultiFileResource:cn.hutool.core.io.resource.MultiFileResource add(java.util.Collection)",
            "cn.hutool.core.io.watch.watchers.WatcherChain:void onCreate(java.nio.file.WatchEvent,java.nio.file.Path)",
            "cn.hutool.core.io.watch.watchers.WatcherChain:void onModify(java.nio.file.WatchEvent,java.nio.file.Path)",
            "cn.hutool.core.io.watch.watchers.WatcherChain:void onDelete(java.nio.file.WatchEvent,java.nio.file.Path)",
            "cn.hutool.core.io.watch.watchers.WatcherChain:void onOverflow(java.nio.file.WatchEvent,java.nio.file.Path)",
            "cn.hutool.core.io.watch.WatchMonitor:void watch(cn.hutool.core.io.watch.Watcher)",
            "cn.hutool.core.lang.ClassScaner:java.util.Set scan()",
            "cn.hutool.core.lang.ClassScaner:void scanJar(java.util.jar.JarFile)",
            "cn.hutool.core.lang.ConsistentHash:void <init>(int,java.util.Collection)",
            "cn.hutool.core.lang.ConsistentHash:void <init>(cn.hutool.core.lang.ConsistentHash$HashFunc,int,java.util.Collection)",
            "cn.hutool.core.lang.Dict:void removeEqual(cn.hutool.core.lang.Dict,java.lang.String[])",
            "cn.hutool.core.lang.JarClassLoader:void loadJar(java.net.URLClassLoader,java.io.File)",
            "cn.hutool.core.lang.JarClassLoader:cn.hutool.core.lang.JarClassLoader addJar(java.io.File)",
            "cn.hutool.core.lang.SyncFinisher:void start()",
            "cn.hutool.core.lang.WeightRandom:void <init>(java.lang.Iterable)",
            "cn.hutool.core.map.CustomKeyLinkedMap:void putAll(java.util.Map)",
            "cn.hutool.core.map.CustomKeyMap:void putAll(java.util.Map)",
            "cn.hutool.core.map.MapUtil:java.util.HashMap of(java.lang.Object[])",
            "cn.hutool.core.map.MapUtil:java.util.Map toListMap(java.lang.Iterable)",
            "cn.hutool.core.map.MapUtil:java.util.List toMapList(java.util.Map)",
            "cn.hutool.core.map.MapUtil:java.lang.String join(java.util.Map,java.lang.String,java.lang.String,boolean)",
            "cn.hutool.core.map.MapUtil:java.util.Map filter(java.util.Map,cn.hutool.core.lang.Editor)",
            "cn.hutool.core.map.MapUtil:java.util.Map filter(java.util.Map,cn.hutool.core.lang.Filter)",
            "cn.hutool.core.map.MapUtil:java.util.Map inverse(java.util.Map)",
            "cn.hutool.core.text.csv.CsvRow:java.util.Map getFieldMap()",
            "cn.hutool.core.text.csv.CsvRow:java.lang.String toString()",
            "cn.hutool.core.text.csv.CsvWriter:cn.hutool.core.text.csv.CsvWriter write(java.util.Collection)",
            "cn.hutool.core.text.replacer.ReplacerChain:int replace(java.lang.CharSequence,int,cn.hutool.core.text.StrBuilder)",
            "cn.hutool.core.util.ClassLoaderUtil:void <clinit>()",
            "cn.hutool.core.util.ImageUtil:javax.imageio.ImageReader getReader(java.lang.String)",
            "cn.hutool.core.util.ObjectUtil:int length(java.lang.Object)",
            "cn.hutool.core.util.ObjectUtil:boolean contains(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.util.ReUtil:java.lang.String extractMulti(java.util.regex.Pattern,java.lang.String,java.lang.String)",
            "cn.hutool.core.util.ReUtil:java.lang.String extractMultiAndDelPre(java.util.regex.Pattern,cn.hutool.core.lang.Holder,java.lang.String)",
            "cn.hutool.core.util.ReUtil:java.lang.String replaceAll(java.lang.String,java.util.regex.Pattern,java.lang.String)",
            "cn.hutool.core.util.StrUtil:java.lang.String format(java.lang.CharSequence,java.util.Map)",
            "cn.hutool.core.util.XmlUtil:void mapToXml(org.w3c.dom.Document,org.w3c.dom.Element,java.util.Map)",
            "cn.hutool.cache.impl.CacheObjIterator:void nextValue()",
            "cn.hutool.cache.impl.FIFOCache:int pruneCache()",
            "cn.hutool.cache.impl.LFUCache:int pruneCache()",
            "cn.hutool.cache.impl.LRUCache:int pruneCache()",
            "cn.hutool.cache.impl.TimedCache:int pruneCache()",
            "cn.hutool.db.ds.c3p0.C3p0DSFactory:void destroy()",
            "cn.hutool.db.ds.dbcp.DbcpDSFactory:void destroy()",
            "cn.hutool.db.ds.druid.DruidDSFactory:void destroy()",
            "cn.hutool.db.ds.druid.DruidDSFactory:com.alibaba.druid.pool.DruidDataSource createDataSource(java.lang.String)",
            "cn.hutool.db.ds.hikari.HikariDSFactory:void destroy()",
            "cn.hutool.db.ds.pooled.PooledDataSource:void close()",
            "cn.hutool.db.ds.pooled.PooledDSFactory:void destroy()",
            "cn.hutool.db.ds.simple.SimpleDSFactory:void destroy()",
            "cn.hutool.db.ds.tomcat.TomcatDSFactory:void destroy()",
            "cn.hutool.db.nosql.mongo.MongoFactory:void closeAll()",
            "cn.hutool.db.sql.SqlBuilder:cn.hutool.db.sql.SqlBuilder insert(cn.hutool.db.Entity,cn.hutool.db.dialect.DialectName)",
            "cn.hutool.db.sql.SqlBuilder:cn.hutool.db.sql.SqlBuilder update(cn.hutool.db.Entity)",
            "cn.hutool.db.sql.SqlUtil:java.lang.String buildEqualsWhere(cn.hutool.db.Entity,java.util.List)",
            "cn.hutool.db.sql.SqlUtil:cn.hutool.db.sql.Condition[] buildConditions(cn.hutool.db.Entity)",
            "cn.hutool.db.sql.Wrapper:cn.hutool.db.Entity wrap(cn.hutool.db.Entity)",
            "cn.hutool.dfa.WordTree:void addWords(java.util.Collection)",
            "cn.hutool.dfa.WordTree:void addWords(java.lang.String[])",
            "cn.hutool.extra.servlet.ServletUtil:java.util.Map getParamMap(javax.servlet.ServletRequest)",
            "cn.hutool.extra.ssh.JschSessionPool:void closeAll()",
            "cn.hutool.extra.ssh.Sftp:boolean delDir(java.lang.String)",
            "cn.hutool.extra.ssh.Sftp:boolean containsIgnoreCase(java.util.List,java.lang.String)",
            "cn.hutool.extra.template.engine.velocity.VelocityUtil:void merge(org.apache.velocity.Template,org.apache.velocity.VelocityContext,java.io.Writer)",
            "cn.hutool.http.GlobalHeaders:cn.hutool.http.GlobalHeaders header(java.util.Map)",
            "cn.hutool.http.HTMLFilter:java.lang.String checkTags(java.lang.String)",
            "cn.hutool.http.HttpBase:java.lang.Object header(java.util.Map,boolean)",
            "cn.hutool.http.HttpBase:java.lang.Object addHeaders(java.util.Map)",
            "cn.hutool.http.HttpBase:java.lang.String toString()",
            "cn.hutool.http.HttpConnection:cn.hutool.http.HttpConnection header(java.util.Map,boolean)",
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest form(java.util.Map)",
            "cn.hutool.http.HttpRequest:void writeForm(java.io.OutputStream)",
            "cn.hutool.http.HttpRequest:void writeFileForm(java.io.OutputStream)",
            "cn.hutool.http.HttpRequest:void appendPart(java.lang.String,cn.hutool.core.io.resource.Resource,java.io.OutputStream)",
            "cn.hutool.http.HttpResponse:java.net.HttpCookie getCookie(java.lang.String)",
            "cn.hutool.http.HttpResponse:java.lang.String toString()",
            "cn.hutool.http.HttpUtil:java.lang.String toParams(java.util.Map,java.nio.charset.Charset)",
            "cn.hutool.http.HttpUtil:java.util.HashMap decodeParamMap(java.lang.String,java.lang.String)",
            "cn.hutool.http.webservice.SoapRequest:java.lang.String toSoapXml()",
            "cn.hutool.setting.GroupedMap:int size()",
            "cn.hutool.setting.GroupedMap:cn.hutool.setting.GroupedMap putAll(java.lang.String,java.util.Map)",
            "cn.hutool.setting.Setting:java.util.Properties toProperties()",
            "cn.hutool.setting.SettingLoader:void store(java.io.PrintWriter)",
            "cn.hutool.setting.SettingLoader:java.lang.String replaceVar(java.lang.String,java.lang.String)",
            "cn.hutool.cron.pattern.CronPattern:void parseGroupPattern(java.lang.String)",
            "cn.hutool.cron.pattern.matcher.BoolArrayValueMatcher:void <init>(java.util.List)",
            "cn.hutool.cron.pattern.matcher.ValueMatcherBuilder:java.util.List parseArray(java.lang.String,cn.hutool.cron.pattern.parser.ValueParser)",
            "cn.hutool.cron.Scheduler:cn.hutool.cron.Scheduler schedule(cn.hutool.setting.Setting)",
            "cn.hutool.json.JSONArray:void <init>(java.lang.Iterable)",
            "cn.hutool.json.JSONArray:void <init>(java.util.Collection)",
            "cn.hutool.json.JSONArray:void <init>(java.lang.Object,boolean)",
            "cn.hutool.json.JSONArray:boolean addAll(java.util.Collection)",
            "cn.hutool.json.JSONArray:boolean addAll(int,java.util.Collection)",
            "cn.hutool.json.JSONObject:void <init>(java.lang.Object,boolean)",
            "cn.hutool.json.JSONObject:cn.hutool.json.JSONArray toJSONArray(java.util.Collection)",
            "cn.hutool.json.JSONObject:void putAll(java.util.Map)",
            "cn.hutool.json.JSONObject:java.io.Writer write(java.io.Writer,int,int)",
            "cn.hutool.json.JSONObject:void populateMap(java.lang.Object)",
            "cn.hutool.json.JSONObjectIter$1:boolean hasNext()",
            "cn.hutool.json.XML:java.lang.String toXml(java.lang.Object,java.lang.String)",
            "cn.hutool.poi.excel.ExcelPicUtil:java.util.Map getPicMapXls(org.apache.poi.hssf.usermodel.HSSFWorkbook,int)",
            "cn.hutool.poi.excel.ExcelPicUtil:java.util.Map getPicMapXlsx(org.apache.poi.xssf.usermodel.XSSFWorkbook,int)",
            "cn.hutool.poi.excel.ExcelReader:java.util.List read(int,int,int,java.lang.Class)",
            "cn.hutool.poi.excel.ExcelReader:java.util.List aliasHeader(java.util.List)",
            "cn.hutool.poi.excel.ExcelWriter:cn.hutool.poi.excel.ExcelWriter write(java.lang.Iterable)",
            "cn.hutool.poi.excel.ExcelWriter:cn.hutool.poi.excel.ExcelWriter write(java.lang.Iterable,java.util.Comparator)",
            "cn.hutool.poi.excel.ExcelWriter:java.util.Collection aliasHeader(java.util.Collection)",
            "cn.hutool.poi.excel.RowUtil:void writeRow(org.apache.poi.ss.usermodel.Row,java.lang.Iterable,cn.hutool.poi.excel.StyleSet,boolean)",
            "cn.hutool.poi.excel.sax.Excel07SaxReader:cn.hutool.poi.excel.sax.Excel07SaxReader read(org.apache.poi.openxml4j.opc.OPCPackage,int)"
        ]
    },
    "cn.hutool.core.collection.IteratorEnumeration:boolean hasMoreElements()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.collection.CollUtil:java.util.HashSet newHashSet(boolean,java.util.Enumeration)",
            "cn.hutool.core.collection.CollUtil:java.util.List list(boolean,java.util.Enumeration)",
            "cn.hutool.core.collection.CollUtil:boolean isEmpty(java.util.Enumeration)",
            "cn.hutool.core.collection.CollUtil:boolean isNotEmpty(java.util.Enumeration)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection addAll(java.util.Collection,java.util.Enumeration)",
            "cn.hutool.core.collection.CollUtil:void forEach(java.util.Enumeration,cn.hutool.core.collection.CollUtil$Consumer)",
            "cn.hutool.core.collection.EnumerationIter:boolean hasNext()",
            "cn.hutool.core.lang.ObjectId:int getMachinePiece()",
            "cn.hutool.core.util.ClassUtil:java.util.Set getClassPaths(java.lang.String,boolean)",
            "cn.hutool.core.util.NetUtil:java.util.LinkedHashSet localIpv4s()",
            "cn.hutool.core.util.NetUtil:java.net.InetAddress getLocalhost()",
            "cn.hutool.core.util.ObjectUtil:int length(java.lang.Object)",
            "cn.hutool.core.util.ObjectUtil:boolean contains(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.util.ZipUtil:java.io.File unzip(java.io.File,java.io.File,java.nio.charset.Charset)",
            "cn.hutool.core.util.ZipUtil:byte[] unzipFileBytes(java.io.File,java.nio.charset.Charset,java.lang.String)",
            "cn.hutool.extra.servlet.ServletUtil:java.lang.String getHeaderIgnoreCase(javax.servlet.http.HttpServletRequest,java.lang.String)",
            "cn.hutool.extra.template.engine.velocity.VelocityUtil:org.apache.velocity.VelocityContext parseRequest(org.apache.velocity.VelocityContext,javax.servlet.http.HttpServletRequest)",
            "cn.hutool.extra.template.engine.velocity.VelocityUtil:org.apache.velocity.VelocityContext parseSession(org.apache.velocity.VelocityContext,javax.servlet.http.HttpSession)",
            "cn.hutool.json.JSONUtil:cn.hutool.json.JSONObject parseFromResourceBundle(java.util.ResourceBundle)"
        ]
    },
    "cn.hutool.core.collection.IterUtil:boolean isEmpty(java.util.Iterator)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.collection.CollUtil:boolean isEmpty(java.util.Iterator)",
            "cn.hutool.core.collection.IterUtil:boolean isEmpty(java.lang.Iterable)"
        ]
    },
    "cn.hutool.core.collection.IterUtil:boolean isNotEmpty(java.util.Iterator)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.collection.CollUtil:boolean isNotEmpty(java.util.Iterator)",
            "cn.hutool.core.collection.IterUtil:boolean isNotEmpty(java.lang.Iterable)",
            "cn.hutool.core.collection.IterUtil:java.util.Map toMap(java.util.Iterator,java.util.Iterator)"
        ]
    },
    "cn.hutool.core.collection.IterUtil:boolean hasNull(java.util.Iterator)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.collection.IterUtil:boolean hasNull(java.lang.Iterable)"
        ]
    },
    "cn.hutool.core.collection.IterUtil:boolean isAllNull(java.util.Iterator)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.collection.IterUtil:boolean isAllNull(java.lang.Iterable)"
        ]
    },
    "cn.hutool.core.collection.IterUtil:java.util.Map countMap(java.util.Iterator)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.collection.IterUtil:java.util.Map countMap(java.lang.Iterable)"
        ]
    },
    "cn.hutool.core.collection.IterUtil:java.util.Map fieldValueMap(java.util.Iterator,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.collection.IterUtil:java.util.Map fieldValueMap(java.lang.Iterable,java.lang.String)"
        ]
    },
    "cn.hutool.core.collection.IterUtil:java.util.Map fieldValueAsMap(java.util.Iterator,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.collection.IterUtil:java.util.List fieldValueList(java.util.Iterator,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.collection.IterUtil:java.lang.String join(java.util.Iterator,java.lang.CharSequence,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.collection.IterUtil:java.lang.String join(java.lang.Iterable,java.lang.CharSequence,java.lang.String,java.lang.String)",
            "cn.hutool.core.collection.IterUtil:java.lang.String join(java.util.Iterator,java.lang.CharSequence)",
            "cn.hutool.core.collection.IterUtil:java.lang.String join(java.util.Iterator,java.lang.CharSequence,java.lang.String,java.lang.String)",
            "cn.hutool.core.util.ArrayUtil:java.lang.String join(java.lang.Object[],java.lang.CharSequence,java.lang.String,java.lang.String)"
        ]
    },
    "cn.hutool.core.collection.IterUtil:java.util.HashMap toMap(java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.collection.CollUtil:java.util.HashMap toMap(java.lang.Iterable)"
        ]
    },
    "cn.hutool.core.collection.IterUtil:java.util.List toList(java.util.Iterator)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.collection.IterUtil:java.util.List toList(java.lang.Iterable)",
            "cn.hutool.core.convert.impl.ArrayConverter:java.lang.Object convertObjectToArray(java.lang.Object)"
        ]
    },
    "cn.hutool.core.collection.IterUtil:java.lang.Object getFirst(java.util.Iterator)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.collection.CollUtil:java.lang.Object getFirst(java.util.Iterator)",
            "cn.hutool.core.collection.IterUtil:java.lang.Object getFirst(java.lang.Iterable)"
        ]
    },
    "cn.hutool.core.collection.LineIter:java.lang.String nextLine()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.collection.LineIter:java.lang.String next()"
        ]
    },
    "cn.hutool.core.comparator.ComparatorChain:int compare(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.collection.BoundedPriorityQueue$1:int compare(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.collection.BoundedPriorityQueue:boolean offer(java.lang.Object)",
            "cn.hutool.core.comparator.ComparatorChain:int compare(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.comparator.ReverseComparator:int compare(java.lang.Object,java.lang.Object)"
        ]
    },
    "cn.hutool.core.convert.BasicType:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.BasicType:cn.hutool.core.convert.BasicType[] values()",
            "cn.hutool.core.convert.BasicType:java.lang.Class wrap(java.lang.Class)",
            "cn.hutool.core.convert.BasicType:java.lang.Class unWrap(java.lang.Class)",
            "cn.hutool.core.convert.BasicType:void <clinit>()",
            "cn.hutool.core.convert.Convert:java.lang.Class wrap(java.lang.Class)",
            "cn.hutool.core.convert.Convert:java.lang.Class unWrap(java.lang.Class)",
            "cn.hutool.core.util.ClassLoaderUtil:void <clinit>()",
            "cn.hutool.core.util.ClassUtil:boolean isAllAssignableFrom(java.lang.Class[],java.lang.Class[])",
            "cn.hutool.core.util.ClassUtil:boolean isPrimitiveWrapper(java.lang.Class)",
            "cn.hutool.core.util.ClassUtil:boolean isAssignable(java.lang.Class,java.lang.Class)"
        ]
    },
    "cn.hutool.core.convert.impl.ArrayConverter:java.lang.Object convertObjectToArray(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.impl.ArrayConverter:java.lang.Object convertInternal(java.lang.Object)"
        ]
    },
    "cn.hutool.core.convert.impl.MapConverter:void convertMapToMap(java.util.Map,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.impl.MapConverter:java.util.Map convertInternal(java.lang.Object)"
        ]
    },
    "cn.hutool.core.date.format.FastDateParser$TimeZoneStrategy:void <init>(java.util.Locale)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.date.format.FastDateParser:cn.hutool.core.date.format.FastDateParser$Strategy getLocaleSpecificStrategy(int,java.util.Calendar)"
        ]
    },
    "cn.hutool.core.date.format.FastDateParser:java.util.Map appendDisplayNames(java.util.Calendar,java.util.Locale,int,java.lang.StringBuilder)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.date.format.FastDateParser:java.util.Map access$500(java.util.Calendar,java.util.Locale,int,java.lang.StringBuilder)"
        ]
    },
    "cn.hutool.core.io.file.FileAppender:cn.hutool.core.io.file.FileAppender flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.file.FileAppender:cn.hutool.core.io.file.FileAppender append(java.lang.String)"
        ]
    },
    "cn.hutool.core.io.file.FileWriter:java.io.File writeLines(java.util.Collection,cn.hutool.core.io.file.LineSeparator,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.file.FileWriter:java.io.File writeLines(java.util.Collection,boolean)",
            "cn.hutool.core.io.FileUtil:java.io.File convertLineSeparator(java.io.File,java.nio.charset.Charset,cn.hutool.core.io.file.LineSeparator)"
        ]
    },
    "cn.hutool.core.io.file.FileWriter:java.io.File writeMap(java.util.Map,cn.hutool.core.io.file.LineSeparator,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.file.FileWriter:java.io.File writeMap(java.util.Map,java.lang.String,boolean)"
        ]
    },
    "cn.hutool.core.io.FileTypeUtil:java.lang.String getType(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.FileTypeUtil:java.lang.String getType(java.io.InputStream)"
        ]
    },
    "cn.hutool.core.io.FileUtil:boolean isDirEmpty(java.nio.file.Path)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.FileUtil:boolean isDirEmpty(java.io.File)"
        ]
    },
    "cn.hutool.core.io.resource.MultiFileResource:cn.hutool.core.io.resource.MultiFileResource add(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.resource.MultiFileResource:void <init>(java.util.Collection)"
        ]
    },
    "cn.hutool.core.io.watch.watchers.WatcherChain:void onCreate(java.nio.file.WatchEvent,java.nio.file.Path)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.watch.watchers.DelayWatcher:void onCreate(java.nio.file.WatchEvent,java.nio.file.Path)",
            "cn.hutool.core.io.watch.watchers.WatcherChain:void onCreate(java.nio.file.WatchEvent,java.nio.file.Path)",
            "cn.hutool.core.io.watch.WatchMonitor:void watch(cn.hutool.core.io.watch.Watcher)"
        ]
    },
    "cn.hutool.core.io.watch.watchers.WatcherChain:void onDelete(java.nio.file.WatchEvent,java.nio.file.Path)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.watch.watchers.DelayWatcher:void onDelete(java.nio.file.WatchEvent,java.nio.file.Path)",
            "cn.hutool.core.io.watch.watchers.WatcherChain:void onDelete(java.nio.file.WatchEvent,java.nio.file.Path)",
            "cn.hutool.core.io.watch.WatchMonitor:void watch(cn.hutool.core.io.watch.Watcher)"
        ]
    },
    "cn.hutool.core.io.watch.watchers.WatcherChain:void onOverflow(java.nio.file.WatchEvent,java.nio.file.Path)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.watch.watchers.DelayWatcher:void onOverflow(java.nio.file.WatchEvent,java.nio.file.Path)",
            "cn.hutool.core.io.watch.watchers.WatcherChain:void onOverflow(java.nio.file.WatchEvent,java.nio.file.Path)",
            "cn.hutool.core.io.watch.WatchMonitor:void watch(cn.hutool.core.io.watch.Watcher)"
        ]
    },
    "cn.hutool.core.lang.ClassScaner:java.util.Set scan()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.lang.ClassScaner:java.util.Set scanPackage(java.lang.String,cn.hutool.core.lang.Filter)"
        ]
    },
    "cn.hutool.core.lang.ClassScaner:void scanJar(java.util.jar.JarFile)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.lang.ClassScaner:java.util.Set scan()",
            "cn.hutool.core.lang.ClassScaner:void scanFile(java.io.File,java.lang.String)"
        ]
    },
    "cn.hutool.core.lang.ConsistentHash:void <init>(int,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.lang.ConsistentHash:void <init>(cn.hutool.core.lang.ConsistentHash$HashFunc,int,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.lang.Dict:void removeEqual(cn.hutool.core.lang.Dict,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.lang.JarClassLoader:void loadJar(java.net.URLClassLoader,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.lang.JarClassLoader:java.net.URLClassLoader loadJarToSystemClassLoader(java.io.File)"
        ]
    },
    "cn.hutool.core.lang.JarClassLoader:cn.hutool.core.lang.JarClassLoader addJar(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.lang.JarClassLoader:cn.hutool.core.lang.JarClassLoader loadJar(java.io.File)"
        ]
    },
    "cn.hutool.core.lang.SyncFinisher:void start()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.lang.WeightRandom:void <init>(java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.RandomUtil:cn.hutool.core.lang.WeightRandom weightRandom(java.lang.Iterable)"
        ]
    },
    "cn.hutool.core.map.CustomKeyLinkedMap:void putAll(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.map.CustomKeyLinkedMap:void <init>(java.util.Map)",
            "cn.hutool.core.map.CustomKeyLinkedMap:void <init>(float,java.util.Map)",
            "cn.hutool.core.map.MapBuilder:cn.hutool.core.map.MapBuilder putAll(java.util.Map)",
            "cn.hutool.core.map.MapProxy:void putAll(java.util.Map)",
            "cn.hutool.extra.template.engine.velocity.VelocityUtil:void init(java.lang.String,java.lang.String,java.util.Map)",
            "cn.hutool.poi.excel.ExcelWriter:cn.hutool.poi.excel.ExcelWriter write(java.lang.Iterable,java.util.Comparator)"
        ]
    },
    "cn.hutool.core.map.CustomKeyMap:void putAll(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.map.CustomKeyMap:void <init>(java.util.Map)",
            "cn.hutool.core.map.CustomKeyMap:void <init>(float,java.util.Map)",
            "cn.hutool.core.map.MapBuilder:cn.hutool.core.map.MapBuilder putAll(java.util.Map)",
            "cn.hutool.core.map.MapProxy:void putAll(java.util.Map)",
            "cn.hutool.extra.template.engine.velocity.VelocityUtil:void init(java.lang.String,java.lang.String,java.util.Map)",
            "cn.hutool.poi.excel.ExcelWriter:cn.hutool.poi.excel.ExcelWriter write(java.lang.Iterable,java.util.Comparator)"
        ]
    },
    "cn.hutool.core.map.MapUtil:java.util.HashMap of(java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.collection.CollUtil:java.util.HashMap toMap(java.lang.Object[])"
        ]
    },
    "cn.hutool.core.map.MapUtil:java.util.Map toListMap(java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.collection.CollUtil:java.util.Map toListMap(java.lang.Iterable)"
        ]
    },
    "cn.hutool.core.map.MapUtil:java.util.List toMapList(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.collection.CollUtil:java.util.List toMapList(java.util.Map)"
        ]
    },
    "cn.hutool.core.map.MapUtil:java.lang.String join(java.util.Map,java.lang.String,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.map.MapBuilder:java.lang.String join(java.lang.String,java.lang.String,boolean)",
            "cn.hutool.core.map.MapUtil:java.lang.String join(java.util.Map,java.lang.String,java.lang.String)",
            "cn.hutool.core.map.MapUtil:java.lang.String joinIgnoreNull(java.util.Map,java.lang.String,java.lang.String)",
            "cn.hutool.crypto.SecureUtil:java.lang.String signParams(cn.hutool.crypto.symmetric.SymmetricCrypto,java.util.Map,java.lang.String,java.lang.String,boolean)",
            "cn.hutool.crypto.SecureUtil:java.lang.String signParams(cn.hutool.crypto.digest.DigestAlgorithm,java.util.Map,java.lang.String,java.lang.String,boolean)"
        ]
    },
    "cn.hutool.core.map.MapUtil:java.util.Map filter(java.util.Map,cn.hutool.core.lang.Editor)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.collection.CollUtil:java.util.Map filter(java.util.Map,cn.hutool.core.lang.Editor)",
            "cn.hutool.core.map.MapUtil:java.util.Map reverse(java.util.Map)"
        ]
    },
    "cn.hutool.core.map.MapUtil:java.util.Map filter(java.util.Map,cn.hutool.core.lang.Filter)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.collection.CollUtil:java.util.Map filter(java.util.Map,cn.hutool.core.lang.Filter)",
            "cn.hutool.core.map.MapUtil:java.util.Map getAny(java.util.Map,java.lang.Object[])"
        ]
    },
    "cn.hutool.core.map.MapUtil:java.util.Map inverse(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.text.csv.CsvRow:java.util.Map getFieldMap()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.text.csv.CsvRow:java.lang.String toString()"
        ]
    },
    "cn.hutool.core.text.csv.CsvRow:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.DynaBean:java.lang.String toString()",
            "cn.hutool.core.collection.CollUtil$6:int compare(java.util.Map$Entry,java.util.Map$Entry)",
            "cn.hutool.core.convert.AbstractConverter:java.lang.String convertToStr(java.lang.Object)",
            "cn.hutool.core.convert.impl.ArrayConverter:java.lang.Object convertObjectToArray(java.lang.Object)",
            "cn.hutool.core.convert.impl.CurrencyConverter:java.util.Currency convertInternal(java.lang.Object)",
            "cn.hutool.core.convert.NumberWordFormater:java.lang.String format(java.lang.Object)",
            "cn.hutool.core.getter.OptNullBasicTypeFromStringGetter:java.lang.Object getObj(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.io.file.FileWriter:java.io.File writeLines(java.util.Collection,cn.hutool.core.io.file.LineSeparator,boolean)",
            "cn.hutool.core.io.watch.watchers.DelayWatcher$1:void run()",
            "cn.hutool.core.io.watch.watchers.DelayWatcher:void onDelayModify(java.nio.file.WatchEvent,java.nio.file.Path)",
            "cn.hutool.core.io.watch.WatchMonitor:void watch(cn.hutool.core.io.watch.Watcher)",
            "cn.hutool.core.lang.ConsistentHash$1:java.lang.Integer hash(java.lang.Object)",
            "cn.hutool.core.lang.ConsistentHash:void add(java.lang.Object)",
            "cn.hutool.core.lang.ConsistentHash:void remove(java.lang.Object)",
            "cn.hutool.core.lang.mutable.MutableObj:java.lang.String toString()",
            "cn.hutool.core.map.CamelCaseLinkedMap:java.lang.Object customKey(java.lang.Object)",
            "cn.hutool.core.map.CamelCaseMap:java.lang.Object customKey(java.lang.Object)",
            "cn.hutool.core.map.CaseInsensitiveLinkedMap:java.lang.Object customKey(java.lang.Object)",
            "cn.hutool.core.map.CaseInsensitiveMap:java.lang.Object customKey(java.lang.Object)",
            "cn.hutool.core.text.csv.CsvRow:java.lang.String toString()",
            "cn.hutool.core.util.ArrayUtil:java.lang.String toString(java.lang.Object)",
            "cn.hutool.core.util.ObjectUtil:boolean contains(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.util.StrUtil:java.lang.String str(java.lang.Object,java.nio.charset.Charset)",
            "cn.hutool.core.util.StrUtil:java.lang.String toString(java.lang.Object)",
            "cn.hutool.core.util.XmlUtil:void mapToXml(org.w3c.dom.Document,org.w3c.dom.Element,java.util.Map)",
            "cn.hutool.extra.servlet.ServletUtil:void setHeader(javax.servlet.http.HttpServletResponse,java.lang.String,java.lang.Object)",
            "cn.hutool.extra.template.engine.velocity.VelocityUtil:void toFile(org.apache.velocity.Template,org.apache.velocity.VelocityContext,java.lang.String)",
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest form(java.lang.String,java.lang.Object,java.lang.Object[])",
            "cn.hutool.setting.dialect.Props:java.lang.Object getObj(java.lang.String,java.lang.Object)",
            "cn.hutool.setting.dialect.Props:void setProperty(java.lang.String,java.lang.Object)",
            "cn.hutool.json.InternalJSONUtil:java.io.Writer writeValue(java.io.Writer,java.lang.Object,int,int)",
            "cn.hutool.json.InternalJSONUtil:java.lang.String valueToString(java.lang.Object)",
            "cn.hutool.json.JSONObject:java.io.Writer write(java.io.Writer,int,int)",
            "cn.hutool.json.JSONObject:void init(cn.hutool.json.JSONTokener)",
            "cn.hutool.json.JSONUtil:java.lang.Object wrap(java.lang.Object,boolean)",
            "cn.hutool.json.XML:java.lang.String toXml(java.lang.Object,java.lang.String)",
            "cn.hutool.poi.excel.cell.CellUtil:void setCellValue(org.apache.poi.ss.usermodel.Cell,java.lang.Object,cn.hutool.poi.excel.StyleSet,boolean)",
            "cn.hutool.poi.excel.ExcelReader:java.util.List aliasHeader(java.util.List)"
        ]
    },
    "cn.hutool.core.text.csv.CsvWriter:cn.hutool.core.text.csv.CsvWriter write(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.text.replacer.ReplacerChain:int replace(java.lang.CharSequence,int,cn.hutool.core.text.StrBuilder)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.text.replacer.ReplacerChain:int replace(java.lang.CharSequence,int,cn.hutool.core.text.StrBuilder)",
            "cn.hutool.core.text.replacer.StrReplacer:java.lang.CharSequence replace(java.lang.CharSequence)"
        ]
    },
    "cn.hutool.core.util.ClassLoaderUtil:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.resource.ResourceUtil:java.util.List getResources(java.lang.String)",
            "cn.hutool.core.io.resource.ResourceUtil:cn.hutool.core.collection.EnumerationIter getResourceIter(java.lang.String)",
            "cn.hutool.core.io.resource.ResourceUtil:java.net.URL getResource(java.lang.String,java.lang.Class)",
            "cn.hutool.core.lang.ObjectId:int getProcessPiece()",
            "cn.hutool.core.util.ClassLoaderUtil:java.lang.ClassLoader getClassLoader()",
            "cn.hutool.core.util.ClassLoaderUtil:java.lang.Class loadClass(java.lang.String)",
            "cn.hutool.core.util.ClassLoaderUtil:java.lang.Class loadClass(java.lang.String,boolean)",
            "cn.hutool.core.util.ClassLoaderUtil:java.lang.Class loadClass(java.lang.String,java.lang.ClassLoader,boolean)",
            "cn.hutool.core.util.ClassLoaderUtil:java.lang.Class loadPrimitiveClass(java.lang.String)",
            "cn.hutool.core.util.ClassLoaderUtil:boolean isPresent(java.lang.String)",
            "cn.hutool.core.util.ClassLoaderUtil:boolean isPresent(java.lang.String,java.lang.ClassLoader)",
            "cn.hutool.core.util.ClassLoaderUtil:void <clinit>()",
            "cn.hutool.core.util.ClassUtil:java.lang.ClassLoader getContextClassLoader()",
            "cn.hutool.core.util.ClassUtil:java.lang.ClassLoader getClassLoader()",
            "cn.hutool.core.util.ClassUtil:java.lang.Class loadClass(java.lang.String,boolean)",
            "cn.hutool.core.util.URLUtil:java.net.URL url(java.lang.String,java.net.URLStreamHandler)",
            "cn.hutool.db.dialect.DialectFactory:java.lang.String identifyDriver(java.lang.String)",
            "cn.hutool.cron.task.InvokeTask:void <init>(java.lang.String)",
            "cn.hutool.poi.PoiChecker:void checkPoiImport()"
        ]
    },
    "cn.hutool.core.util.ImageUtil:javax.imageio.ImageReader getReader(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ObjectUtil:int length(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ObjectUtil:boolean contains(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ReUtil:java.lang.String extractMulti(java.util.regex.Pattern,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ReUtil:java.lang.String extractMulti(java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "cn.hutool.core.util.ReUtil:java.lang.String extractMultiAndDelPre(java.util.regex.Pattern,cn.hutool.core.lang.Holder,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ReUtil:java.lang.String extractMultiAndDelPre(java.lang.String,cn.hutool.core.lang.Holder,java.lang.String)"
        ]
    },
    "cn.hutool.core.util.ReUtil:java.lang.String replaceAll(java.lang.String,java.util.regex.Pattern,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ReUtil:java.lang.String replaceAll(java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "cn.hutool.core.util.StrUtil:java.lang.String format(java.lang.CharSequence,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.dialect.console.ConsoleLog:void log(cn.hutool.log.level.Level,java.lang.Throwable,java.lang.String,java.lang.Object[])"
        ]
    },
    "cn.hutool.core.util.XmlUtil:void mapToXml(org.w3c.dom.Document,org.w3c.dom.Element,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.XmlUtil:org.w3c.dom.Document mapToXml(java.util.Map,java.lang.String)",
            "cn.hutool.core.util.XmlUtil:void mapToXml(org.w3c.dom.Document,org.w3c.dom.Element,java.util.Map)"
        ]
    },
    "cn.hutool.cache.impl.CacheObjIterator:void nextValue()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.cache.impl.CacheObjIterator:void <init>(java.util.Iterator)",
            "cn.hutool.cache.impl.CacheObjIterator:cn.hutool.cache.impl.CacheObj next()"
        ]
    },
    "cn.hutool.cache.impl.FIFOCache:int pruneCache()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.cache.impl.AbstractCache:void put(java.lang.Object,java.lang.Object,long)",
            "cn.hutool.cache.impl.AbstractCache:int prune()"
        ]
    },
    "cn.hutool.cache.impl.LFUCache:int pruneCache()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.cache.impl.AbstractCache:void put(java.lang.Object,java.lang.Object,long)",
            "cn.hutool.cache.impl.AbstractCache:int prune()"
        ]
    },
    "cn.hutool.cache.impl.LRUCache:int pruneCache()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.cache.impl.AbstractCache:void put(java.lang.Object,java.lang.Object,long)",
            "cn.hutool.cache.impl.AbstractCache:int prune()"
        ]
    },
    "cn.hutool.cache.impl.TimedCache:int pruneCache()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.cache.impl.AbstractCache:void put(java.lang.Object,java.lang.Object,long)",
            "cn.hutool.cache.impl.AbstractCache:int prune()"
        ]
    },
    "cn.hutool.db.ds.c3p0.C3p0DSFactory:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.ds.GlobalDSFactory$1:void run()",
            "cn.hutool.db.ds.GlobalDSFactory:cn.hutool.db.ds.DSFactory set(cn.hutool.db.ds.DSFactory)"
        ]
    },
    "cn.hutool.db.ds.tomcat.TomcatDSFactory:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.ds.GlobalDSFactory$1:void run()",
            "cn.hutool.db.ds.GlobalDSFactory:cn.hutool.db.ds.DSFactory set(cn.hutool.db.ds.DSFactory)"
        ]
    },
    "cn.hutool.db.nosql.mongo.MongoFactory:void closeAll()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.nosql.mongo.MongoFactory$1:void run()"
        ]
    },
    "cn.hutool.db.sql.SqlBuilder:cn.hutool.db.sql.SqlBuilder insert(cn.hutool.db.Entity,cn.hutool.db.dialect.DialectName)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.dialect.impl.AnsiSqlDialect:java.sql.PreparedStatement psForInsert(java.sql.Connection,cn.hutool.db.Entity)",
            "cn.hutool.db.dialect.impl.AnsiSqlDialect:java.sql.PreparedStatement psForInsertBatch(java.sql.Connection,cn.hutool.db.Entity[])",
            "cn.hutool.db.sql.SqlBuilder:cn.hutool.db.sql.SqlBuilder insert(cn.hutool.db.Entity)"
        ]
    },
    "cn.hutool.db.sql.SqlBuilder:cn.hutool.db.sql.SqlBuilder update(cn.hutool.db.Entity)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.dialect.impl.AnsiSqlDialect:java.sql.PreparedStatement psForUpdate(java.sql.Connection,cn.hutool.db.Entity,cn.hutool.db.sql.Query)"
        ]
    },
    "cn.hutool.db.sql.SqlUtil:java.lang.String buildEqualsWhere(cn.hutool.db.Entity,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.sql.SqlUtil:cn.hutool.db.sql.Condition[] buildConditions(cn.hutool.db.Entity)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.SqlConnRunner:int del(java.sql.Connection,cn.hutool.db.Entity)",
            "cn.hutool.db.SqlConnRunner:int update(java.sql.Connection,cn.hutool.db.Entity,cn.hutool.db.Entity)",
            "cn.hutool.db.SqlConnRunner:java.lang.Object find(java.sql.Connection,java.util.Collection,cn.hutool.db.Entity,cn.hutool.db.handler.RsHandler)",
            "cn.hutool.db.SqlConnRunner:int count(java.sql.Connection,cn.hutool.db.Entity)",
            "cn.hutool.db.SqlConnRunner:java.lang.Object page(java.sql.Connection,java.util.Collection,cn.hutool.db.Entity,cn.hutool.db.Page,cn.hutool.db.handler.RsHandler)"
        ]
    },
    "cn.hutool.db.sql.Wrapper:cn.hutool.db.Entity wrap(cn.hutool.db.Entity)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.dfa.WordTree:void addWords(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.dfa.SensitiveUtil:void init(java.util.Collection)"
        ]
    },
    "cn.hutool.dfa.WordTree:void addWords(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.extra.servlet.ServletUtil:java.util.Map getParamMap(javax.servlet.ServletRequest)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.extra.ssh.JschSessionPool:void closeAll()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.ssh.JschUtil:void closeAll()"
        ]
    },
    "cn.hutool.extra.ssh.Sftp:boolean delDir(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.ssh.Sftp:boolean delDir(java.lang.String)"
        ]
    },
    "cn.hutool.extra.ssh.Sftp:boolean containsIgnoreCase(java.util.List,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.ssh.Sftp:boolean exist(java.lang.String,java.lang.String)"
        ]
    },
    "cn.hutool.extra.template.engine.velocity.VelocityUtil:void merge(org.apache.velocity.Template,org.apache.velocity.VelocityContext,java.io.Writer)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.template.engine.velocity.VelocityUtil:void toFile(org.apache.velocity.Template,org.apache.velocity.VelocityContext,java.lang.String)",
            "cn.hutool.extra.template.engine.velocity.VelocityUtil:void toWriter(org.apache.velocity.app.VelocityEngine,java.lang.String,org.apache.velocity.VelocityContext,java.io.Writer)",
            "cn.hutool.extra.template.engine.velocity.VelocityUtil:void toWriter(java.lang.String,org.apache.velocity.VelocityContext,java.io.Writer)"
        ]
    },
    "cn.hutool.http.GlobalHeaders:cn.hutool.http.GlobalHeaders header(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.http.HTMLFilter:java.lang.String checkTags(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HTMLFilter:java.lang.String filter(java.lang.String)"
        ]
    },
    "cn.hutool.http.HttpBase:java.lang.Object header(java.util.Map,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HttpBase:java.lang.Object header(java.util.Map)"
        ]
    },
    "cn.hutool.http.HttpBase:java.lang.Object addHeaders(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.http.HttpBase:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.DynaBean:java.lang.String toString()",
            "cn.hutool.core.collection.CollUtil$6:int compare(java.util.Map$Entry,java.util.Map$Entry)",
            "cn.hutool.core.convert.AbstractConverter:java.lang.String convertToStr(java.lang.Object)",
            "cn.hutool.core.convert.impl.ArrayConverter:java.lang.Object convertObjectToArray(java.lang.Object)",
            "cn.hutool.core.convert.impl.CurrencyConverter:java.util.Currency convertInternal(java.lang.Object)",
            "cn.hutool.core.convert.NumberWordFormater:java.lang.String format(java.lang.Object)",
            "cn.hutool.core.getter.OptNullBasicTypeFromStringGetter:java.lang.Object getObj(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.io.file.FileWriter:java.io.File writeLines(java.util.Collection,cn.hutool.core.io.file.LineSeparator,boolean)",
            "cn.hutool.core.io.watch.watchers.DelayWatcher$1:void run()",
            "cn.hutool.core.io.watch.watchers.DelayWatcher:void onDelayModify(java.nio.file.WatchEvent,java.nio.file.Path)",
            "cn.hutool.core.io.watch.WatchMonitor:void watch(cn.hutool.core.io.watch.Watcher)",
            "cn.hutool.core.lang.ConsistentHash$1:java.lang.Integer hash(java.lang.Object)",
            "cn.hutool.core.lang.ConsistentHash:void add(java.lang.Object)",
            "cn.hutool.core.lang.ConsistentHash:void remove(java.lang.Object)",
            "cn.hutool.core.lang.mutable.MutableObj:java.lang.String toString()",
            "cn.hutool.core.map.CamelCaseLinkedMap:java.lang.Object customKey(java.lang.Object)",
            "cn.hutool.core.map.CamelCaseMap:java.lang.Object customKey(java.lang.Object)",
            "cn.hutool.core.map.CaseInsensitiveLinkedMap:java.lang.Object customKey(java.lang.Object)",
            "cn.hutool.core.map.CaseInsensitiveMap:java.lang.Object customKey(java.lang.Object)",
            "cn.hutool.core.util.ArrayUtil:java.lang.String toString(java.lang.Object)",
            "cn.hutool.core.util.ObjectUtil:boolean contains(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.util.StrUtil:java.lang.String str(java.lang.Object,java.nio.charset.Charset)",
            "cn.hutool.core.util.StrUtil:java.lang.String toString(java.lang.Object)",
            "cn.hutool.core.util.XmlUtil:void mapToXml(org.w3c.dom.Document,org.w3c.dom.Element,java.util.Map)",
            "cn.hutool.extra.servlet.ServletUtil:void setHeader(javax.servlet.http.HttpServletResponse,java.lang.String,java.lang.Object)",
            "cn.hutool.extra.template.engine.velocity.VelocityUtil:void toFile(org.apache.velocity.Template,org.apache.velocity.VelocityContext,java.lang.String)",
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest form(java.lang.String,java.lang.Object,java.lang.Object[])",
            "cn.hutool.setting.dialect.Props:java.lang.Object getObj(java.lang.String,java.lang.Object)",
            "cn.hutool.setting.dialect.Props:void setProperty(java.lang.String,java.lang.Object)",
            "cn.hutool.json.InternalJSONUtil:java.io.Writer writeValue(java.io.Writer,java.lang.Object,int,int)",
            "cn.hutool.json.InternalJSONUtil:java.lang.String valueToString(java.lang.Object)",
            "cn.hutool.json.JSONObject:java.io.Writer write(java.io.Writer,int,int)",
            "cn.hutool.json.JSONObject:void init(cn.hutool.json.JSONTokener)",
            "cn.hutool.json.JSONUtil:java.lang.Object wrap(java.lang.Object,boolean)",
            "cn.hutool.json.XML:java.lang.String toXml(java.lang.Object,java.lang.String)",
            "cn.hutool.poi.excel.cell.CellUtil:void setCellValue(org.apache.poi.ss.usermodel.Cell,java.lang.Object,cn.hutool.poi.excel.StyleSet,boolean)",
            "cn.hutool.poi.excel.ExcelReader:java.util.List aliasHeader(java.util.List)"
        ]
    },
    "cn.hutool.http.HttpConnection:cn.hutool.http.HttpConnection header(java.util.Map,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HttpRequest:void initConnecton()"
        ]
    },
    "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest form(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HttpUtil:java.lang.String get(java.lang.String,java.util.Map)",
            "cn.hutool.http.HttpUtil:java.lang.String get(java.lang.String,java.util.Map,int)",
            "cn.hutool.http.HttpUtil:java.lang.String post(java.lang.String,java.util.Map,int)"
        ]
    },
    "cn.hutool.http.HttpRequest:void writeFileForm(java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HttpRequest:void sendMultipart()"
        ]
    },
    "cn.hutool.http.HttpResponse:java.net.HttpCookie getCookie(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HttpResponse:java.lang.String getCookieValue(java.lang.String)"
        ]
    },
    "cn.hutool.http.HttpResponse:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.DynaBean:java.lang.String toString()",
            "cn.hutool.core.collection.CollUtil$6:int compare(java.util.Map$Entry,java.util.Map$Entry)",
            "cn.hutool.core.convert.AbstractConverter:java.lang.String convertToStr(java.lang.Object)",
            "cn.hutool.core.convert.impl.ArrayConverter:java.lang.Object convertObjectToArray(java.lang.Object)",
            "cn.hutool.core.convert.impl.CurrencyConverter:java.util.Currency convertInternal(java.lang.Object)",
            "cn.hutool.core.convert.NumberWordFormater:java.lang.String format(java.lang.Object)",
            "cn.hutool.core.getter.OptNullBasicTypeFromStringGetter:java.lang.Object getObj(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.io.file.FileWriter:java.io.File writeLines(java.util.Collection,cn.hutool.core.io.file.LineSeparator,boolean)",
            "cn.hutool.core.io.watch.watchers.DelayWatcher$1:void run()",
            "cn.hutool.core.io.watch.watchers.DelayWatcher:void onDelayModify(java.nio.file.WatchEvent,java.nio.file.Path)",
            "cn.hutool.core.io.watch.WatchMonitor:void watch(cn.hutool.core.io.watch.Watcher)",
            "cn.hutool.core.lang.ConsistentHash$1:java.lang.Integer hash(java.lang.Object)",
            "cn.hutool.core.lang.ConsistentHash:void add(java.lang.Object)",
            "cn.hutool.core.lang.ConsistentHash:void remove(java.lang.Object)",
            "cn.hutool.core.lang.mutable.MutableObj:java.lang.String toString()",
            "cn.hutool.core.map.CamelCaseLinkedMap:java.lang.Object customKey(java.lang.Object)",
            "cn.hutool.core.map.CamelCaseMap:java.lang.Object customKey(java.lang.Object)",
            "cn.hutool.core.map.CaseInsensitiveLinkedMap:java.lang.Object customKey(java.lang.Object)",
            "cn.hutool.core.map.CaseInsensitiveMap:java.lang.Object customKey(java.lang.Object)",
            "cn.hutool.core.util.ArrayUtil:java.lang.String toString(java.lang.Object)",
            "cn.hutool.core.util.ObjectUtil:boolean contains(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.util.StrUtil:java.lang.String str(java.lang.Object,java.nio.charset.Charset)",
            "cn.hutool.core.util.StrUtil:java.lang.String toString(java.lang.Object)",
            "cn.hutool.core.util.XmlUtil:void mapToXml(org.w3c.dom.Document,org.w3c.dom.Element,java.util.Map)",
            "cn.hutool.extra.servlet.ServletUtil:void setHeader(javax.servlet.http.HttpServletResponse,java.lang.String,java.lang.Object)",
            "cn.hutool.extra.template.engine.velocity.VelocityUtil:void toFile(org.apache.velocity.Template,org.apache.velocity.VelocityContext,java.lang.String)",
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest form(java.lang.String,java.lang.Object,java.lang.Object[])",
            "cn.hutool.setting.dialect.Props:java.lang.Object getObj(java.lang.String,java.lang.Object)",
            "cn.hutool.setting.dialect.Props:void setProperty(java.lang.String,java.lang.Object)",
            "cn.hutool.json.InternalJSONUtil:java.io.Writer writeValue(java.io.Writer,java.lang.Object,int,int)",
            "cn.hutool.json.InternalJSONUtil:java.lang.String valueToString(java.lang.Object)",
            "cn.hutool.json.JSONObject:java.io.Writer write(java.io.Writer,int,int)",
            "cn.hutool.json.JSONObject:void init(cn.hutool.json.JSONTokener)",
            "cn.hutool.json.JSONUtil:java.lang.Object wrap(java.lang.Object,boolean)",
            "cn.hutool.json.XML:java.lang.String toXml(java.lang.Object,java.lang.String)",
            "cn.hutool.poi.excel.cell.CellUtil:void setCellValue(org.apache.poi.ss.usermodel.Cell,java.lang.Object,cn.hutool.poi.excel.StyleSet,boolean)",
            "cn.hutool.poi.excel.ExcelReader:java.util.List aliasHeader(java.util.List)"
        ]
    },
    "cn.hutool.http.HttpUtil:java.lang.String toParams(java.util.Map,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HttpRequest:void sendFormUrlEncoded()",
            "cn.hutool.http.HttpUtil:java.lang.String toParams(java.util.Map)",
            "cn.hutool.http.HttpUtil:java.lang.String toParams(java.util.Map,java.lang.String)",
            "cn.hutool.http.HttpUtil:java.lang.String urlWithForm(java.lang.String,java.util.Map,java.nio.charset.Charset,boolean)"
        ]
    },
    "cn.hutool.http.HttpUtil:java.util.HashMap decodeParamMap(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.http.webservice.SoapRequest:java.lang.String toSoapXml()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.webservice.SoapRequest:java.lang.String execute()"
        ]
    },
    "cn.hutool.setting.GroupedMap:int size()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.map.CustomKeyLinkedMap:void <init>(java.util.Map)",
            "cn.hutool.core.map.CustomKeyLinkedMap:void <init>(float,java.util.Map)",
            "cn.hutool.core.map.CustomKeyMap:void <init>(java.util.Map)",
            "cn.hutool.core.map.CustomKeyMap:void <init>(float,java.util.Map)",
            "cn.hutool.core.map.MapProxy:int size()",
            "cn.hutool.core.map.MapUtil:java.util.Map inverse(java.util.Map)",
            "cn.hutool.core.text.csv.CsvRow:java.util.Map getFieldMap()",
            "cn.hutool.core.util.ObjectUtil:int length(java.lang.Object)",
            "cn.hutool.cache.impl.AbstractCache:boolean isFull()",
            "cn.hutool.cache.impl.AbstractCache:int size()",
            "cn.hutool.http.HttpUtil:java.util.HashMap decodeParamMap(java.lang.String,java.lang.String)",
            "cn.hutool.setting.GroupedMap:int size()",
            "cn.hutool.setting.GroupedMap:boolean isEmpty()",
            "cn.hutool.setting.Setting:int size()",
            "cn.hutool.json.JSONObject:int size()"
        ]
    },
    "cn.hutool.setting.GroupedMap:cn.hutool.setting.GroupedMap putAll(java.lang.String,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.setting.Setting:cn.hutool.setting.Setting putAll(java.lang.String,java.util.Map)",
            "cn.hutool.setting.Setting:void putAll(java.util.Map)"
        ]
    },
    "cn.hutool.setting.Setting:java.util.Properties toProperties()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.setting.SettingLoader:void store(java.io.PrintWriter)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.setting.SettingLoader:void store(java.lang.String)"
        ]
    },
    "cn.hutool.setting.SettingLoader:java.lang.String replaceVar(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.setting.SettingLoader:boolean load(java.io.InputStream)"
        ]
    },
    "cn.hutool.cron.pattern.CronPattern:void parseGroupPattern(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.cron.pattern.CronPattern:void <init>(java.lang.String)"
        ]
    },
    "cn.hutool.cron.pattern.matcher.BoolArrayValueMatcher:void <init>(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.cron.pattern.matcher.DayOfMonthValueMatcher:void <init>(java.util.List)",
            "cn.hutool.cron.pattern.matcher.ValueMatcherBuilder:cn.hutool.cron.pattern.matcher.ValueMatcher build(java.lang.String,cn.hutool.cron.pattern.parser.ValueParser)"
        ]
    },
    "cn.hutool.cron.pattern.matcher.ValueMatcherBuilder:java.util.List parseArray(java.lang.String,cn.hutool.cron.pattern.parser.ValueParser)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.cron.pattern.matcher.ValueMatcherBuilder:cn.hutool.cron.pattern.matcher.ValueMatcher build(java.lang.String,cn.hutool.cron.pattern.parser.ValueParser)"
        ]
    },
    "cn.hutool.json.JSONArray:void <init>(java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.json.JSONArray:void <init>(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.json.JSONArray:void <init>(java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.json.JSONArray:void <init>(java.lang.Object)",
            "cn.hutool.json.JSONUtil:cn.hutool.json.JSONArray parseArray(java.lang.Object,boolean)",
            "cn.hutool.json.JSONUtil:java.lang.Object wrap(java.lang.Object,boolean)"
        ]
    },
    "cn.hutool.json.JSONArray:boolean addAll(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.text.csv.CsvRow:boolean addAll(java.util.Collection)",
            "cn.hutool.db.sql.SqlBuilder:void buildValuePartForIN(java.lang.StringBuilder,cn.hutool.db.sql.Condition)"
        ]
    },
    "cn.hutool.json.JSONArray:boolean addAll(int,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.text.csv.CsvRow:boolean addAll(int,java.util.Collection)",
            "cn.hutool.json.JSONArray:boolean addAll(int,java.util.Collection)"
        ]
    },
    "cn.hutool.json.JSONObject:void <init>(java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.json.JSONObject:void <init>(java.lang.Object)",
            "cn.hutool.json.JSONUtil:cn.hutool.json.JSONObject parseObj(java.lang.Object,boolean)",
            "cn.hutool.json.JSONUtil:java.lang.Object wrap(java.lang.Object,boolean)"
        ]
    },
    "cn.hutool.json.JSONObject:cn.hutool.json.JSONArray toJSONArray(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.json.JSONObject:void putAll(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.map.MapBuilder:cn.hutool.core.map.MapBuilder putAll(java.util.Map)",
            "cn.hutool.core.map.MapProxy:void putAll(java.util.Map)",
            "cn.hutool.extra.template.engine.velocity.VelocityUtil:void init(java.lang.String,java.lang.String,java.util.Map)",
            "cn.hutool.json.JSONObject:void <init>(cn.hutool.json.JSONObject,java.lang.String[])",
            "cn.hutool.poi.excel.ExcelWriter:cn.hutool.poi.excel.ExcelWriter write(java.lang.Iterable,java.util.Comparator)"
        ]
    },
    "cn.hutool.json.JSONObject:java.io.Writer write(java.io.Writer,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.json.InternalJSONUtil:java.io.Writer writeValue(java.io.Writer,java.lang.Object,int,int)",
            "cn.hutool.json.JSONObject:java.lang.String toJSONString(int)",
            "cn.hutool.json.JSONObject:java.io.Writer write(java.io.Writer)"
        ]
    },
    "cn.hutool.json.JSONObject:void populateMap(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.json.JSONObject:void <init>(java.lang.Object,boolean)"
        ]
    },
    "cn.hutool.json.JSONObjectIter$1:boolean hasNext()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.BeanUtil:java.util.Map beanToMap(java.lang.Object,java.util.Map,boolean,cn.hutool.core.lang.Editor)",
            "cn.hutool.core.bean.copier.BeanCopier:void valueProviderToBean(cn.hutool.core.bean.copier.ValueProvider,java.lang.Object)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection union(java.util.Collection,java.util.Collection)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection intersection(java.util.Collection,java.util.Collection)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection disjunction(java.util.Collection,java.util.Collection)",
            "cn.hutool.core.collection.CollUtil:boolean containsAny(java.util.Collection,java.util.Collection)",
            "cn.hutool.core.collection.CollUtil:java.util.HashSet newHashSet(boolean,java.util.Iterator)",
            "cn.hutool.core.collection.CollUtil:java.util.List list(boolean,java.util.Iterator)",
            "cn.hutool.core.collection.CollUtil:java.util.List split(java.util.Collection,int)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection filter(java.util.Collection,cn.hutool.core.lang.Editor)",
            "cn.hutool.core.collection.CollUtil:java.util.List filter(java.util.List,cn.hutool.core.lang.Editor)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection filter(java.util.Collection,cn.hutool.core.lang.Filter)",
            "cn.hutool.core.collection.CollUtil:java.util.List filter(java.util.List,cn.hutool.core.lang.Filter)",
            "cn.hutool.core.collection.CollUtil:java.util.List extract(java.lang.Iterable,cn.hutool.core.lang.Editor)",
            "cn.hutool.core.collection.CollUtil:java.lang.Object findOne(java.lang.Iterable,cn.hutool.core.lang.Filter)",
            "cn.hutool.core.collection.CollUtil:int count(java.lang.Iterable,cn.hutool.core.lang.Matcher)",
            "cn.hutool.core.collection.CollUtil:java.util.TreeSet toTreeSet(java.util.Collection,java.util.Comparator)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection addAll(java.util.Collection,java.lang.Object,java.lang.reflect.Type)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection addAll(java.util.Collection,java.util.Iterator)",
            "cn.hutool.core.collection.CollUtil:java.util.List addAllIfNotContains(java.util.List,java.util.List)",
            "cn.hutool.core.collection.CollUtil:java.util.ArrayList valuesOfKeys(java.util.Map,java.util.Iterator)",
            "cn.hutool.core.collection.CollUtil:java.util.LinkedHashMap sortToMap(java.util.Collection,java.util.Comparator)",
            "cn.hutool.core.collection.CollUtil:void forEach(java.util.Iterator,cn.hutool.core.collection.CollUtil$Consumer)",
            "cn.hutool.core.collection.CollUtil:void forEach(java.util.Map,cn.hutool.core.collection.CollUtil$KVConsumer)",
            "cn.hutool.core.collection.CollUtil:java.util.List group(java.util.Collection,cn.hutool.core.collection.CollUtil$Hash)",
            "cn.hutool.core.collection.ConcurrentHashSet:void <init>(java.lang.Iterable)",
            "cn.hutool.core.collection.CopiedIter:void <init>(java.util.Iterator)",
            "cn.hutool.core.collection.CopiedIter:boolean hasNext()",
            "cn.hutool.core.collection.IteratorEnumeration:boolean hasMoreElements()",
            "cn.hutool.core.collection.IterUtil:boolean isEmpty(java.util.Iterator)",
            "cn.hutool.core.collection.IterUtil:boolean isNotEmpty(java.util.Iterator)",
            "cn.hutool.core.collection.IterUtil:boolean hasNull(java.util.Iterator)",
            "cn.hutool.core.collection.IterUtil:boolean isAllNull(java.util.Iterator)",
            "cn.hutool.core.collection.IterUtil:java.util.Map countMap(java.util.Iterator)",
            "cn.hutool.core.collection.IterUtil:java.util.Map fieldValueMap(java.util.Iterator,java.lang.String)",
            "cn.hutool.core.collection.IterUtil:java.util.Map fieldValueAsMap(java.util.Iterator,java.lang.String,java.lang.String)",
            "cn.hutool.core.collection.IterUtil:java.util.List fieldValueList(java.util.Iterator,java.lang.String)",
            "cn.hutool.core.collection.IterUtil:java.lang.String join(java.util.Iterator,java.lang.CharSequence,java.lang.String,java.lang.String)",
            "cn.hutool.core.collection.IterUtil:java.util.HashMap toMap(java.lang.Iterable)",
            "cn.hutool.core.collection.IterUtil:java.util.Map toMap(java.util.Iterator,java.util.Iterator)",
            "cn.hutool.core.collection.IterUtil:java.util.List toList(java.util.Iterator)",
            "cn.hutool.core.collection.IterUtil:java.lang.Object getFirst(java.util.Iterator)",
            "cn.hutool.core.comparator.ComparatorChain:int compare(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.convert.BasicType:void <clinit>()",
            "cn.hutool.core.convert.impl.ArrayConverter:java.lang.Object convertObjectToArray(java.lang.Object)",
            "cn.hutool.core.convert.impl.MapConverter:void convertMapToMap(java.util.Map,java.util.Map)",
            "cn.hutool.core.date.format.FastDateParser$TimeZoneStrategy:void <init>(java.util.Locale)",
            "cn.hutool.core.date.format.FastDateParser:java.util.Map appendDisplayNames(java.util.Calendar,java.util.Locale,int,java.lang.StringBuilder)",
            "cn.hutool.core.io.file.FileAppender:cn.hutool.core.io.file.FileAppender flush()",
            "cn.hutool.core.io.file.FileWriter:java.io.File writeLines(java.util.Collection,cn.hutool.core.io.file.LineSeparator,boolean)",
            "cn.hutool.core.io.file.FileWriter:java.io.File writeMap(java.util.Map,cn.hutool.core.io.file.LineSeparator,java.lang.String,boolean)",
            "cn.hutool.core.io.FileTypeUtil:java.lang.String getType(java.lang.String)",
            "cn.hutool.core.io.FileUtil:boolean isDirEmpty(java.nio.file.Path)",
            "cn.hutool.core.io.FileUtil:java.util.List listFileNames(java.lang.String)",
            "cn.hutool.core.io.resource.MultiFileResource:cn.hutool.core.io.resource.MultiFileResource add(java.util.Collection)",
            "cn.hutool.core.io.watch.watchers.WatcherChain:void onCreate(java.nio.file.WatchEvent,java.nio.file.Path)",
            "cn.hutool.core.io.watch.watchers.WatcherChain:void onModify(java.nio.file.WatchEvent,java.nio.file.Path)",
            "cn.hutool.core.io.watch.watchers.WatcherChain:void onDelete(java.nio.file.WatchEvent,java.nio.file.Path)",
            "cn.hutool.core.io.watch.watchers.WatcherChain:void onOverflow(java.nio.file.WatchEvent,java.nio.file.Path)",
            "cn.hutool.core.io.watch.WatchMonitor:void watch(cn.hutool.core.io.watch.Watcher)",
            "cn.hutool.core.lang.ClassScaner:java.util.Set scan()",
            "cn.hutool.core.lang.ClassScaner:void scanJar(java.util.jar.JarFile)",
            "cn.hutool.core.lang.ConsistentHash:void <init>(int,java.util.Collection)",
            "cn.hutool.core.lang.ConsistentHash:void <init>(cn.hutool.core.lang.ConsistentHash$HashFunc,int,java.util.Collection)",
            "cn.hutool.core.lang.Dict:void removeEqual(cn.hutool.core.lang.Dict,java.lang.String[])",
            "cn.hutool.core.lang.JarClassLoader:void loadJar(java.net.URLClassLoader,java.io.File)",
            "cn.hutool.core.lang.JarClassLoader:cn.hutool.core.lang.JarClassLoader addJar(java.io.File)",
            "cn.hutool.core.lang.SyncFinisher:void start()",
            "cn.hutool.core.lang.WeightRandom:void <init>(java.lang.Iterable)",
            "cn.hutool.core.map.CustomKeyLinkedMap:void putAll(java.util.Map)",
            "cn.hutool.core.map.CustomKeyMap:void putAll(java.util.Map)",
            "cn.hutool.core.map.MapUtil:java.util.HashMap of(java.lang.Object[])",
            "cn.hutool.core.map.MapUtil:java.util.Map toListMap(java.lang.Iterable)",
            "cn.hutool.core.map.MapUtil:java.util.List toMapList(java.util.Map)",
            "cn.hutool.core.map.MapUtil:java.lang.String join(java.util.Map,java.lang.String,java.lang.String,boolean)",
            "cn.hutool.core.map.MapUtil:java.util.Map filter(java.util.Map,cn.hutool.core.lang.Editor)",
            "cn.hutool.core.map.MapUtil:java.util.Map filter(java.util.Map,cn.hutool.core.lang.Filter)",
            "cn.hutool.core.map.MapUtil:java.util.Map inverse(java.util.Map)",
            "cn.hutool.core.text.csv.CsvRow:java.util.Map getFieldMap()",
            "cn.hutool.core.text.csv.CsvRow:java.lang.String toString()",
            "cn.hutool.core.text.csv.CsvWriter:cn.hutool.core.text.csv.CsvWriter write(java.util.Collection)",
            "cn.hutool.core.text.replacer.ReplacerChain:int replace(java.lang.CharSequence,int,cn.hutool.core.text.StrBuilder)",
            "cn.hutool.core.util.ClassLoaderUtil:void <clinit>()",
            "cn.hutool.core.util.ImageUtil:javax.imageio.ImageReader getReader(java.lang.String)",
            "cn.hutool.core.util.ObjectUtil:int length(java.lang.Object)",
            "cn.hutool.core.util.ObjectUtil:boolean contains(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.util.ReUtil:java.lang.String extractMulti(java.util.regex.Pattern,java.lang.String,java.lang.String)",
            "cn.hutool.core.util.ReUtil:java.lang.String extractMultiAndDelPre(java.util.regex.Pattern,cn.hutool.core.lang.Holder,java.lang.String)",
            "cn.hutool.core.util.ReUtil:java.lang.String replaceAll(java.lang.String,java.util.regex.Pattern,java.lang.String)",
            "cn.hutool.core.util.StrUtil:java.lang.String format(java.lang.CharSequence,java.util.Map)",
            "cn.hutool.core.util.XmlUtil:void mapToXml(org.w3c.dom.Document,org.w3c.dom.Element,java.util.Map)",
            "cn.hutool.cache.impl.CacheObjIterator:void nextValue()",
            "cn.hutool.cache.impl.FIFOCache:int pruneCache()",
            "cn.hutool.cache.impl.LFUCache:int pruneCache()",
            "cn.hutool.cache.impl.LRUCache:int pruneCache()",
            "cn.hutool.cache.impl.TimedCache:int pruneCache()",
            "cn.hutool.db.ds.c3p0.C3p0DSFactory:void destroy()",
            "cn.hutool.db.ds.dbcp.DbcpDSFactory:void destroy()",
            "cn.hutool.db.ds.druid.DruidDSFactory:void destroy()",
            "cn.hutool.db.ds.druid.DruidDSFactory:com.alibaba.druid.pool.DruidDataSource createDataSource(java.lang.String)",
            "cn.hutool.db.ds.hikari.HikariDSFactory:void destroy()",
            "cn.hutool.db.ds.pooled.PooledDataSource:void close()",
            "cn.hutool.db.ds.pooled.PooledDSFactory:void destroy()",
            "cn.hutool.db.ds.simple.SimpleDSFactory:void destroy()",
            "cn.hutool.db.ds.tomcat.TomcatDSFactory:void destroy()",
            "cn.hutool.db.nosql.mongo.MongoFactory:void closeAll()",
            "cn.hutool.db.sql.SqlBuilder:cn.hutool.db.sql.SqlBuilder insert(cn.hutool.db.Entity,cn.hutool.db.dialect.DialectName)",
            "cn.hutool.db.sql.SqlBuilder:cn.hutool.db.sql.SqlBuilder update(cn.hutool.db.Entity)",
            "cn.hutool.db.sql.SqlUtil:java.lang.String buildEqualsWhere(cn.hutool.db.Entity,java.util.List)",
            "cn.hutool.db.sql.SqlUtil:cn.hutool.db.sql.Condition[] buildConditions(cn.hutool.db.Entity)",
            "cn.hutool.db.sql.Wrapper:cn.hutool.db.Entity wrap(cn.hutool.db.Entity)",
            "cn.hutool.dfa.WordTree:void addWords(java.util.Collection)",
            "cn.hutool.dfa.WordTree:void addWords(java.lang.String[])",
            "cn.hutool.extra.servlet.ServletUtil:java.util.Map getParamMap(javax.servlet.ServletRequest)",
            "cn.hutool.extra.ssh.JschSessionPool:void closeAll()",
            "cn.hutool.extra.ssh.Sftp:boolean delDir(java.lang.String)",
            "cn.hutool.extra.ssh.Sftp:boolean containsIgnoreCase(java.util.List,java.lang.String)",
            "cn.hutool.extra.template.engine.velocity.VelocityUtil:void merge(org.apache.velocity.Template,org.apache.velocity.VelocityContext,java.io.Writer)",
            "cn.hutool.http.GlobalHeaders:cn.hutool.http.GlobalHeaders header(java.util.Map)",
            "cn.hutool.http.HTMLFilter:java.lang.String checkTags(java.lang.String)",
            "cn.hutool.http.HttpBase:java.lang.Object header(java.util.Map,boolean)",
            "cn.hutool.http.HttpBase:java.lang.Object addHeaders(java.util.Map)",
            "cn.hutool.http.HttpBase:java.lang.String toString()",
            "cn.hutool.http.HttpConnection:cn.hutool.http.HttpConnection header(java.util.Map,boolean)",
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest form(java.util.Map)",
            "cn.hutool.http.HttpRequest:void writeForm(java.io.OutputStream)",
            "cn.hutool.http.HttpRequest:void writeFileForm(java.io.OutputStream)",
            "cn.hutool.http.HttpRequest:void appendPart(java.lang.String,cn.hutool.core.io.resource.Resource,java.io.OutputStream)",
            "cn.hutool.http.HttpResponse:java.net.HttpCookie getCookie(java.lang.String)",
            "cn.hutool.http.HttpResponse:java.lang.String toString()",
            "cn.hutool.http.HttpUtil:java.lang.String toParams(java.util.Map,java.nio.charset.Charset)",
            "cn.hutool.http.HttpUtil:java.util.HashMap decodeParamMap(java.lang.String,java.lang.String)",
            "cn.hutool.http.webservice.SoapRequest:java.lang.String toSoapXml()",
            "cn.hutool.setting.GroupedMap:int size()",
            "cn.hutool.setting.GroupedMap:cn.hutool.setting.GroupedMap putAll(java.lang.String,java.util.Map)",
            "cn.hutool.setting.Setting:java.util.Properties toProperties()",
            "cn.hutool.setting.SettingLoader:void store(java.io.PrintWriter)",
            "cn.hutool.setting.SettingLoader:java.lang.String replaceVar(java.lang.String,java.lang.String)",
            "cn.hutool.cron.pattern.CronPattern:void parseGroupPattern(java.lang.String)",
            "cn.hutool.cron.pattern.matcher.BoolArrayValueMatcher:void <init>(java.util.List)",
            "cn.hutool.cron.pattern.matcher.ValueMatcherBuilder:java.util.List parseArray(java.lang.String,cn.hutool.cron.pattern.parser.ValueParser)",
            "cn.hutool.cron.Scheduler:cn.hutool.cron.Scheduler schedule(cn.hutool.setting.Setting)",
            "cn.hutool.json.JSONArray:void <init>(java.lang.Iterable)",
            "cn.hutool.json.JSONArray:void <init>(java.util.Collection)",
            "cn.hutool.json.JSONArray:void <init>(java.lang.Object,boolean)",
            "cn.hutool.json.JSONArray:boolean addAll(java.util.Collection)",
            "cn.hutool.json.JSONArray:boolean addAll(int,java.util.Collection)",
            "cn.hutool.json.JSONObject:void <init>(java.lang.Object,boolean)",
            "cn.hutool.json.JSONObject:cn.hutool.json.JSONArray toJSONArray(java.util.Collection)",
            "cn.hutool.json.JSONObject:void putAll(java.util.Map)",
            "cn.hutool.json.JSONObject:java.io.Writer write(java.io.Writer,int,int)",
            "cn.hutool.json.JSONObject:void populateMap(java.lang.Object)",
            "cn.hutool.json.JSONObjectIter$1:boolean hasNext()",
            "cn.hutool.json.XML:java.lang.String toXml(java.lang.Object,java.lang.String)",
            "cn.hutool.poi.excel.ExcelPicUtil:java.util.Map getPicMapXls(org.apache.poi.hssf.usermodel.HSSFWorkbook,int)",
            "cn.hutool.poi.excel.ExcelPicUtil:java.util.Map getPicMapXlsx(org.apache.poi.xssf.usermodel.XSSFWorkbook,int)",
            "cn.hutool.poi.excel.ExcelReader:java.util.List read(int,int,int,java.lang.Class)",
            "cn.hutool.poi.excel.ExcelReader:java.util.List aliasHeader(java.util.List)",
            "cn.hutool.poi.excel.ExcelWriter:cn.hutool.poi.excel.ExcelWriter write(java.lang.Iterable)",
            "cn.hutool.poi.excel.ExcelWriter:cn.hutool.poi.excel.ExcelWriter write(java.lang.Iterable,java.util.Comparator)",
            "cn.hutool.poi.excel.ExcelWriter:java.util.Collection aliasHeader(java.util.Collection)",
            "cn.hutool.poi.excel.RowUtil:void writeRow(org.apache.poi.ss.usermodel.Row,java.lang.Iterable,cn.hutool.poi.excel.StyleSet,boolean)",
            "cn.hutool.poi.excel.sax.Excel07SaxReader:cn.hutool.poi.excel.sax.Excel07SaxReader read(org.apache.poi.openxml4j.opc.OPCPackage,int)"
        ]
    },
    "cn.hutool.json.XML:java.lang.String toXml(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.json.XML:java.lang.String toXml(java.lang.Object)",
            "cn.hutool.json.XML:java.lang.String toXml(java.lang.Object,java.lang.String)"
        ]
    },
    "cn.hutool.poi.excel.ExcelPicUtil:java.util.Map getPicMapXls(org.apache.poi.hssf.usermodel.HSSFWorkbook,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.poi.excel.ExcelPicUtil:java.util.Map getPicMap(org.apache.poi.ss.usermodel.Workbook,int)"
        ]
    },
    "cn.hutool.poi.excel.ExcelPicUtil:java.util.Map getPicMapXlsx(org.apache.poi.xssf.usermodel.XSSFWorkbook,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.poi.excel.ExcelPicUtil:java.util.Map getPicMap(org.apache.poi.ss.usermodel.Workbook,int)"
        ]
    },
    "cn.hutool.poi.excel.ExcelReader:java.util.List aliasHeader(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.poi.excel.ExcelReader:java.util.List read(int,int)",
            "cn.hutool.poi.excel.ExcelReader:java.util.List read(int,int,int)"
        ]
    },
    "cn.hutool.poi.excel.ExcelWriter:cn.hutool.poi.excel.ExcelWriter write(java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.poi.excel.ExcelWriter:cn.hutool.poi.excel.ExcelWriter write(java.lang.Iterable,java.util.Comparator)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.poi.excel.ExcelWriter:java.util.Collection aliasHeader(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.poi.excel.ExcelWriter:cn.hutool.poi.excel.ExcelWriter writeRow(java.util.Map,boolean)"
        ]
    },
    "cn.hutool.poi.excel.RowUtil:void writeRow(org.apache.poi.ss.usermodel.Row,java.lang.Iterable,cn.hutool.poi.excel.StyleSet,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.poi.excel.ExcelWriter:cn.hutool.poi.excel.ExcelWriter writeHeadRow(java.lang.Iterable)",
            "cn.hutool.poi.excel.ExcelWriter:cn.hutool.poi.excel.ExcelWriter writeRow(java.lang.Iterable)"
        ]
    },
    "cn.hutool.core.io.FileUtil:java.lang.String readString(java.io.File,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.FileUtil:java.lang.String readUtf8String(java.io.File)",
            "cn.hutool.core.io.FileUtil:java.lang.String readString(java.io.File,java.lang.String)",
            "cn.hutool.core.io.FileUtil:java.lang.String readString(java.lang.String,java.nio.charset.Charset)",
            "cn.hutool.core.util.CharsetUtil:java.io.File convert(java.io.File,java.nio.charset.Charset,java.nio.charset.Charset)"
        ]
    },
    "cn.hutool.json.JSONUtil:cn.hutool.json.JSON readJSON(java.io.File,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.json.JSONUtil:cn.hutool.json.JSONObject readJSONObject(java.io.File,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.json.JSONUtil:cn.hutool.json.JSONArray readJSONArray(java.io.File,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.codec.Base64:java.lang.String encode(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.codec.Base64:java.lang.String encodeUrlSafe(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.cache.file.AbstractFileCache:byte[] getFileBytes(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.cache.file.AbstractFileCache:byte[] getFileBytes(java.lang.String)"
        ]
    },
    "cn.hutool.extra.servlet.multipart.UploadFile:byte[] getFileContent()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.FileUtil:java.util.List readLines(java.io.File,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.FileUtil:java.util.Collection readUtf8Lines(java.io.File,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.FileUtil:java.util.List readLines(java.io.File,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.FileUtil:java.util.List readUtf8Lines(java.io.File)",
            "cn.hutool.core.io.FileUtil:java.io.File convertLineSeparator(java.io.File,java.nio.charset.Charset,cn.hutool.core.io.file.LineSeparator)"
        ]
    },
    "cn.hutool.core.io.FileUtil:void readUtf8Lines(java.io.File,cn.hutool.core.io.LineHandler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.FileUtil:java.lang.Object loadUtf8(java.io.File,cn.hutool.core.io.file.FileReader$ReaderHandler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.FileUtil:java.io.File writeString(java.lang.String,java.io.File,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.FileUtil:java.io.File writeString(java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "cn.hutool.core.io.FileUtil:java.io.File writeString(java.lang.String,java.io.File,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.FileUtil:java.io.File writeUtf8String(java.lang.String,java.io.File)",
            "cn.hutool.core.io.FileUtil:java.io.File writeString(java.lang.String,java.lang.String,java.nio.charset.Charset)",
            "cn.hutool.core.util.CharsetUtil:java.io.File convert(java.io.File,java.nio.charset.Charset,java.nio.charset.Charset)"
        ]
    },
    "cn.hutool.core.io.FileUtil:java.io.File appendString(java.lang.String,java.io.File,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.FileUtil:java.io.File appendString(java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "cn.hutool.core.io.FileUtil:java.io.File appendString(java.lang.String,java.io.File,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.FileUtil:java.io.File appendString(java.lang.String,java.lang.String,java.nio.charset.Charset)",
            "cn.hutool.core.io.FileUtil:java.io.File appendUtf8String(java.lang.String,java.io.File)"
        ]
    },
    "cn.hutool.core.io.FileUtil:java.io.File writeBytes(byte[],java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.codec.Base64:java.io.File decodeToFile(java.lang.String,java.io.File)",
            "cn.hutool.core.io.FileUtil:java.io.File writeBytes(byte[],java.lang.String)",
            "cn.hutool.extra.servlet.multipart.UploadFile:java.io.File write(java.io.File)"
        ]
    },
    "cn.hutool.core.io.FileUtil:java.util.List readLines(java.net.URL,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.FileUtil:java.util.List readUtf8Lines(java.net.URL)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.captcha.AbstractCaptcha:void write(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.captcha.AbstractCaptcha:void write(java.lang.String)"
        ]
    },
    "cn.hutool.core.io.FileUtil:long checksumCRC32(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.resource.MultiResource:java.lang.String readUtf8Str()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.resource.MultiResource:java.lang.String readUtf8Str()"
        ]
    },
    "cn.hutool.core.collection.CollUtil:java.util.List reverseNew(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.date.DateTime:cn.hutool.core.date.DateTime offset(cn.hutool.core.date.DateField,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.date.DateTime:cn.hutool.core.date.DateTime offsetNew(cn.hutool.core.date.DateField,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.date.DateRange$1:cn.hutool.core.date.DateTime step(cn.hutool.core.date.DateTime,cn.hutool.core.date.DateTime,int)"
        ]
    },
    "cn.hutool.core.date.DateTime:cn.hutool.core.date.DateTime setField(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.date.DateTime:cn.hutool.core.date.DateTime setField(cn.hutool.core.date.DateField,int)"
        ]
    },
    "cn.hutool.core.map.MapUtil:java.util.Map filter(java.util.Map,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ObjectUtil:java.lang.Object cloneIfPossible(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.RuntimeUtil:java.util.List execForLines(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.RuntimeUtil:java.lang.String execForStr(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ZipUtil:java.io.File zip(java.io.File,java.lang.String,java.lang.String,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ZipUtil:java.io.File zip(java.io.File,java.lang.String,java.lang.String)"
        ]
    },
    "cn.hutool.core.util.ZipUtil:java.io.File zip(java.io.File,java.lang.String,java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.digest.DigestUtil:java.lang.String md5Hex(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.digest.DigestUtil:java.lang.String sha1Hex(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.digest.DigestUtil:java.lang.String sha256Hex(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.SecureUtil:java.lang.String md5(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.SecureUtil:java.lang.String sha1(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.Entity:java.lang.String getStr(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.lang.Dict:java.lang.String getStr(java.lang.Object)",
            "cn.hutool.db.Entity:java.lang.String getStr(java.lang.Object)"
        ]
    },
    "cn.hutool.extra.servlet.ServletUtil:void write(javax.servlet.http.HttpServletResponse,java.io.InputStream,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.http.HttpResponse:cn.hutool.http.HttpResponse sync()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HttpResponse:byte[] bodyBytes()"
        ]
    },
    "cn.hutool.http.HttpResponse:cn.hutool.http.HttpResponse init()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HttpResponse:void <init>(cn.hutool.http.HttpConnection,java.nio.charset.Charset,boolean,boolean)"
        ]
    },
    "cn.hutool.setting.GroupedSet:void <init>(java.lang.String,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.setting.GroupedSet:void <init>(java.lang.String)"
        ]
    },
    "cn.hutool.setting.GroupedSet:void <init>(java.io.File,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.setting.GroupedSet:void <init>(java.lang.String,java.lang.Class,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.setting.GroupedSet:void <init>(java.net.URL,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.poi.excel.ExcelUtil:cn.hutool.poi.excel.sax.Excel07SaxReader read07BySax(java.io.File,int,cn.hutool.poi.excel.sax.handler.RowHandler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.poi.excel.sax.Excel07SaxReader:java.lang.Object read(java.io.File,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.poi.excel.sax.AbstractExcelSaxReader:java.lang.Object read(java.io.File)",
            "cn.hutool.poi.excel.sax.AbstractExcelSaxReader:java.lang.Object read(java.lang.String,int)"
        ]
    },
    "cn.hutool.poi.excel.ExcelUtil:cn.hutool.poi.excel.sax.Excel07SaxReader read07BySax(java.io.InputStream,int,cn.hutool.poi.excel.sax.handler.RowHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.poi.excel.ExcelUtil:void readBySax(java.io.InputStream,int,cn.hutool.poi.excel.sax.handler.RowHandler)"
        ]
    },
    "cn.hutool.poi.excel.sax.Excel07SaxReader:java.lang.Object read(java.io.InputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.poi.excel.sax.AbstractExcelSaxReader:java.lang.Object read(java.io.InputStream)"
        ]
    },
    "cn.hutool.poi.excel.ExcelReader:void <init>(java.io.InputStream,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.poi.excel.ExcelUtil:cn.hutool.poi.excel.ExcelReader getReader(java.io.InputStream,int)",
            "cn.hutool.poi.excel.ExcelUtil:cn.hutool.poi.excel.ExcelReader getReader(java.io.InputStream,int,boolean)"
        ]
    },
    "cn.hutool.poi.excel.ExcelReader:void <init>(java.io.InputStream,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.poi.excel.ExcelUtil:cn.hutool.poi.excel.ExcelReader getReader(java.io.InputStream,java.lang.String)",
            "cn.hutool.poi.excel.ExcelUtil:cn.hutool.poi.excel.ExcelReader getReader(java.io.InputStream,java.lang.String,boolean)"
        ]
    },
    "cn.hutool.poi.excel.ExcelWriter:void <init>(java.io.File,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.poi.excel.ExcelUtil:cn.hutool.poi.excel.ExcelWriter getWriter(java.io.File,java.lang.String)",
            "cn.hutool.poi.excel.ExcelWriter:void <init>(java.lang.String,java.lang.String)",
            "cn.hutool.poi.excel.ExcelWriter:void <init>(java.io.File)"
        ]
    },
    "cn.hutool.db.DaoTemplate:void <init>(java.lang.String,javax.sql.DataSource)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.cron.CronTimer:void spawnLauncher(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.cron.CronTimer:void run()"
        ]
    },
    "cn.hutool.core.bean.BeanUtil:java.lang.Object fillBeanWithMap(java.util.Map,java.lang.Object,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.BeanUtil:java.lang.Object fillBeanWithMap(java.util.Map,java.lang.Object,boolean)",
            "cn.hutool.core.lang.Dict:java.lang.Object toBean(java.lang.Object,boolean)",
            "cn.hutool.core.lang.Dict:java.lang.Object toBeanWithCamelCase(java.lang.Object)"
        ]
    },
    "cn.hutool.core.bean.BeanUtil:java.lang.Object fillBeanWithMap(java.util.Map,java.lang.Object,cn.hutool.core.bean.copier.CopyOptions)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.BeanUtil:java.lang.Object mapToBean(java.util.Map,java.lang.Class,cn.hutool.core.bean.copier.CopyOptions)",
            "cn.hutool.core.bean.BeanUtil:java.lang.Object fillBeanWithMapIgnoreCase(java.util.Map,java.lang.Object,boolean)"
        ]
    },
    "cn.hutool.core.bean.BeanUtil:java.lang.Object toBean(java.lang.Class,cn.hutool.core.bean.copier.ValueProvider,cn.hutool.core.bean.copier.CopyOptions)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.extra.servlet.ServletUtil:java.lang.Object fillBean(javax.servlet.ServletRequest,java.lang.Object,cn.hutool.core.bean.copier.CopyOptions)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.servlet.ServletUtil:java.lang.Object fillBean(javax.servlet.ServletRequest,java.lang.Object,boolean)"
        ]
    },
    "cn.hutool.setting.AbsSetting:java.lang.Object toBean(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.nosql.redis.RedisDS:cn.hutool.db.nosql.redis.RedisDS init(java.lang.String)",
            "cn.hutool.setting.AbsSetting:java.lang.Object toBean(java.lang.Object)"
        ]
    },
    "cn.hutool.json.InternalJSONUtil:java.lang.Object toBean(cn.hutool.json.JSONObject,java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.json.JSONObject:java.lang.Object toBean(java.lang.Object,boolean)"
        ]
    },
    "cn.hutool.core.bean.BeanUtil:void copyProperties(java.lang.Object,java.lang.Object,cn.hutool.core.bean.copier.CopyOptions)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.BeanUtil:void copyProperties(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.bean.BeanUtil:void copyProperties(java.lang.Object,java.lang.Object,java.lang.String[])"
        ]
    },
    "cn.hutool.core.convert.AbstractConverter:java.lang.Object convert(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.Convert:java.lang.Enum toEnum(java.lang.Class,java.lang.Object,java.lang.Enum)",
            "cn.hutool.core.convert.ConverterRegistry:java.lang.Object convert(java.lang.reflect.Type,java.lang.Object,java.lang.Object,boolean)",
            "cn.hutool.core.convert.ConverterRegistry:java.lang.Object convertSpecial(java.lang.reflect.Type,java.lang.Class,java.lang.Object,java.lang.Object)"
        ]
    },
    "cn.hutool.core.bean.BeanUtil:java.util.Map beanToMap(java.lang.Object,java.util.Map,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.BeanUtil:java.util.Map beanToMap(java.lang.Object,boolean,boolean)",
            "cn.hutool.poi.excel.ExcelWriter:cn.hutool.poi.excel.ExcelWriter write(java.lang.Iterable,java.util.Comparator)",
            "cn.hutool.poi.excel.ExcelWriter:cn.hutool.poi.excel.ExcelWriter writeRow(java.lang.Object,boolean)"
        ]
    },
    "cn.hutool.core.collection.CollUtil:java.util.Collection union(java.util.Collection,java.util.Collection,java.util.Collection[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.collection.CollUtil:java.util.Collection intersection(java.util.Collection,java.util.Collection,java.util.Collection[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.collection.CollUtil:java.util.List list(boolean,java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.collection.CollUtil:java.util.ArrayList newArrayList(java.lang.Iterable)"
        ]
    },
    "cn.hutool.core.collection.CollUtil:java.util.ArrayList newArrayList(java.util.Iterator)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.collection.CollUtil:java.util.Collection toCollection(java.lang.Iterable)",
            "cn.hutool.core.util.ArrayUtil:java.lang.Object[] toArray(java.util.Iterator,java.lang.Class)"
        ]
    },
    "cn.hutool.core.collection.CollUtil:java.util.Collection removeNull(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.sql.Wrapper:java.lang.String wrap(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.sql.SqlBuilder:cn.hutool.db.sql.SqlBuilder insert(cn.hutool.db.Entity,cn.hutool.db.dialect.DialectName)",
            "cn.hutool.db.sql.SqlBuilder:cn.hutool.db.sql.SqlBuilder delete(java.lang.String)",
            "cn.hutool.db.sql.SqlBuilder:cn.hutool.db.sql.SqlBuilder update(cn.hutool.db.Entity)",
            "cn.hutool.db.sql.SqlBuilder:cn.hutool.db.sql.SqlBuilder in(java.lang.String,java.lang.Object[])",
            "cn.hutool.db.sql.SqlBuilder:cn.hutool.db.sql.SqlBuilder orderBy(cn.hutool.db.sql.Order[])",
            "cn.hutool.db.sql.SqlBuilder:cn.hutool.db.sql.SqlBuilder join(java.lang.String,cn.hutool.db.sql.SqlBuilder$Join)",
            "cn.hutool.db.sql.Wrapper:java.lang.String[] wrap(java.lang.String[])",
            "cn.hutool.db.sql.Wrapper:cn.hutool.db.Entity wrap(cn.hutool.db.Entity)",
            "cn.hutool.db.sql.Wrapper:cn.hutool.db.sql.Condition[] wrap(cn.hutool.db.sql.Condition[])"
        ]
    },
    "cn.hutool.core.collection.CollUtil:java.util.Collection removeEmpty(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.collection.CollUtil:java.util.Collection removeBlank(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.collection.CollUtil:java.util.List getFieldValues(java.lang.Iterable,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.collection.CollUtil:java.lang.Object findOneByField(java.lang.Iterable,java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.collection.CollUtil:java.util.Collection addAll(java.util.Collection,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.convert.impl.CollectionConverter:java.util.Collection convertInternal(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.impl.CollectionConverter:java.util.Collection convert(java.lang.Object,java.util.Collection)"
        ]
    },
    "cn.hutool.core.collection.CollUtil:java.util.Collection addAll(java.util.Collection,java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.collection.CollUtil:java.util.ArrayList valuesOfKeys(java.util.Map,java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.dialect.impl.AnsiSqlDialect:java.sql.PreparedStatement psForInsertBatch(java.sql.Connection,cn.hutool.db.Entity[])"
        ]
    },
    "cn.hutool.core.collection.CollUtil:java.util.LinkedHashMap sortByEntry(java.util.Map,java.util.Comparator)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.collection.CollUtil:java.util.List groupByField(java.util.Collection,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.collection.CopiedIter:cn.hutool.core.collection.CopiedIter copyOf(java.util.Iterator)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.cache.impl.AbstractCache:java.util.Iterator cacheObjIterator()"
        ]
    },
    "cn.hutool.core.collection.IterUtil:java.lang.Class getElementType(java.util.Iterator)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.collection.CollUtil:java.lang.Class getElementType(java.util.Iterator)",
            "cn.hutool.core.collection.IterUtil:java.lang.Class getElementType(java.lang.Iterable)"
        ]
    },
    "cn.hutool.core.collection.CollUtil:java.util.HashSet newHashSet(boolean,java.util.Enumeration)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.collection.CollUtil:java.util.List list(boolean,java.util.Enumeration)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.collection.CollUtil:java.util.ArrayList newArrayList(java.util.Enumeration)"
        ]
    },
    "cn.hutool.core.collection.CollUtil:boolean isEmpty(java.util.Enumeration)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.collection.CollUtil:boolean isNotEmpty(java.util.Enumeration)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.collection.CollUtil:java.util.Collection addAll(java.util.Collection,java.util.Enumeration)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.NetUtil:java.util.Collection getNetworkInterfaces()"
        ]
    },
    "cn.hutool.core.collection.CollUtil:void forEach(java.util.Enumeration,cn.hutool.core.collection.CollUtil$Consumer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.collection.EnumerationIter:boolean hasNext()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.BeanUtil:java.util.Map beanToMap(java.lang.Object,java.util.Map,boolean,cn.hutool.core.lang.Editor)",
            "cn.hutool.core.bean.copier.BeanCopier:void valueProviderToBean(cn.hutool.core.bean.copier.ValueProvider,java.lang.Object)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection union(java.util.Collection,java.util.Collection)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection intersection(java.util.Collection,java.util.Collection)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection disjunction(java.util.Collection,java.util.Collection)",
            "cn.hutool.core.collection.CollUtil:boolean containsAny(java.util.Collection,java.util.Collection)",
            "cn.hutool.core.collection.CollUtil:java.util.HashSet newHashSet(boolean,java.util.Iterator)",
            "cn.hutool.core.collection.CollUtil:java.util.List list(boolean,java.util.Iterator)",
            "cn.hutool.core.collection.CollUtil:java.util.List split(java.util.Collection,int)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection filter(java.util.Collection,cn.hutool.core.lang.Editor)",
            "cn.hutool.core.collection.CollUtil:java.util.List filter(java.util.List,cn.hutool.core.lang.Editor)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection filter(java.util.Collection,cn.hutool.core.lang.Filter)",
            "cn.hutool.core.collection.CollUtil:java.util.List filter(java.util.List,cn.hutool.core.lang.Filter)",
            "cn.hutool.core.collection.CollUtil:java.util.List extract(java.lang.Iterable,cn.hutool.core.lang.Editor)",
            "cn.hutool.core.collection.CollUtil:java.lang.Object findOne(java.lang.Iterable,cn.hutool.core.lang.Filter)",
            "cn.hutool.core.collection.CollUtil:int count(java.lang.Iterable,cn.hutool.core.lang.Matcher)",
            "cn.hutool.core.collection.CollUtil:java.util.TreeSet toTreeSet(java.util.Collection,java.util.Comparator)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection addAll(java.util.Collection,java.lang.Object,java.lang.reflect.Type)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection addAll(java.util.Collection,java.util.Iterator)",
            "cn.hutool.core.collection.CollUtil:java.util.List addAllIfNotContains(java.util.List,java.util.List)",
            "cn.hutool.core.collection.CollUtil:java.util.ArrayList valuesOfKeys(java.util.Map,java.util.Iterator)",
            "cn.hutool.core.collection.CollUtil:java.util.LinkedHashMap sortToMap(java.util.Collection,java.util.Comparator)",
            "cn.hutool.core.collection.CollUtil:void forEach(java.util.Iterator,cn.hutool.core.collection.CollUtil$Consumer)",
            "cn.hutool.core.collection.CollUtil:void forEach(java.util.Map,cn.hutool.core.collection.CollUtil$KVConsumer)",
            "cn.hutool.core.collection.CollUtil:java.util.List group(java.util.Collection,cn.hutool.core.collection.CollUtil$Hash)",
            "cn.hutool.core.collection.ConcurrentHashSet:void <init>(java.lang.Iterable)",
            "cn.hutool.core.collection.CopiedIter:void <init>(java.util.Iterator)",
            "cn.hutool.core.collection.CopiedIter:boolean hasNext()",
            "cn.hutool.core.collection.IteratorEnumeration:boolean hasMoreElements()",
            "cn.hutool.core.collection.IterUtil:boolean isEmpty(java.util.Iterator)",
            "cn.hutool.core.collection.IterUtil:boolean isNotEmpty(java.util.Iterator)",
            "cn.hutool.core.collection.IterUtil:boolean hasNull(java.util.Iterator)",
            "cn.hutool.core.collection.IterUtil:boolean isAllNull(java.util.Iterator)",
            "cn.hutool.core.collection.IterUtil:java.util.Map countMap(java.util.Iterator)",
            "cn.hutool.core.collection.IterUtil:java.util.Map fieldValueMap(java.util.Iterator,java.lang.String)",
            "cn.hutool.core.collection.IterUtil:java.util.Map fieldValueAsMap(java.util.Iterator,java.lang.String,java.lang.String)",
            "cn.hutool.core.collection.IterUtil:java.util.List fieldValueList(java.util.Iterator,java.lang.String)",
            "cn.hutool.core.collection.IterUtil:java.lang.String join(java.util.Iterator,java.lang.CharSequence,java.lang.String,java.lang.String)",
            "cn.hutool.core.collection.IterUtil:java.util.HashMap toMap(java.lang.Iterable)",
            "cn.hutool.core.collection.IterUtil:java.util.Map toMap(java.util.Iterator,java.util.Iterator)",
            "cn.hutool.core.collection.IterUtil:java.util.List toList(java.util.Iterator)",
            "cn.hutool.core.collection.IterUtil:java.lang.Object getFirst(java.util.Iterator)",
            "cn.hutool.core.comparator.ComparatorChain:int compare(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.convert.BasicType:void <clinit>()",
            "cn.hutool.core.convert.impl.ArrayConverter:java.lang.Object convertObjectToArray(java.lang.Object)",
            "cn.hutool.core.convert.impl.MapConverter:void convertMapToMap(java.util.Map,java.util.Map)",
            "cn.hutool.core.date.format.FastDateParser$TimeZoneStrategy:void <init>(java.util.Locale)",
            "cn.hutool.core.date.format.FastDateParser:java.util.Map appendDisplayNames(java.util.Calendar,java.util.Locale,int,java.lang.StringBuilder)",
            "cn.hutool.core.io.file.FileAppender:cn.hutool.core.io.file.FileAppender flush()",
            "cn.hutool.core.io.file.FileWriter:java.io.File writeLines(java.util.Collection,cn.hutool.core.io.file.LineSeparator,boolean)",
            "cn.hutool.core.io.file.FileWriter:java.io.File writeMap(java.util.Map,cn.hutool.core.io.file.LineSeparator,java.lang.String,boolean)",
            "cn.hutool.core.io.FileTypeUtil:java.lang.String getType(java.lang.String)",
            "cn.hutool.core.io.FileUtil:boolean isDirEmpty(java.nio.file.Path)",
            "cn.hutool.core.io.FileUtil:java.util.List listFileNames(java.lang.String)",
            "cn.hutool.core.io.resource.MultiFileResource:cn.hutool.core.io.resource.MultiFileResource add(java.util.Collection)",
            "cn.hutool.core.io.watch.watchers.WatcherChain:void onCreate(java.nio.file.WatchEvent,java.nio.file.Path)",
            "cn.hutool.core.io.watch.watchers.WatcherChain:void onModify(java.nio.file.WatchEvent,java.nio.file.Path)",
            "cn.hutool.core.io.watch.watchers.WatcherChain:void onDelete(java.nio.file.WatchEvent,java.nio.file.Path)",
            "cn.hutool.core.io.watch.watchers.WatcherChain:void onOverflow(java.nio.file.WatchEvent,java.nio.file.Path)",
            "cn.hutool.core.io.watch.WatchMonitor:void watch(cn.hutool.core.io.watch.Watcher)",
            "cn.hutool.core.lang.ClassScaner:java.util.Set scan()",
            "cn.hutool.core.lang.ClassScaner:void scanJar(java.util.jar.JarFile)",
            "cn.hutool.core.lang.ConsistentHash:void <init>(int,java.util.Collection)",
            "cn.hutool.core.lang.ConsistentHash:void <init>(cn.hutool.core.lang.ConsistentHash$HashFunc,int,java.util.Collection)",
            "cn.hutool.core.lang.Dict:void removeEqual(cn.hutool.core.lang.Dict,java.lang.String[])",
            "cn.hutool.core.lang.JarClassLoader:void loadJar(java.net.URLClassLoader,java.io.File)",
            "cn.hutool.core.lang.JarClassLoader:cn.hutool.core.lang.JarClassLoader addJar(java.io.File)",
            "cn.hutool.core.lang.SyncFinisher:void start()",
            "cn.hutool.core.lang.WeightRandom:void <init>(java.lang.Iterable)",
            "cn.hutool.core.map.CustomKeyLinkedMap:void putAll(java.util.Map)",
            "cn.hutool.core.map.CustomKeyMap:void putAll(java.util.Map)",
            "cn.hutool.core.map.MapUtil:java.util.HashMap of(java.lang.Object[])",
            "cn.hutool.core.map.MapUtil:java.util.Map toListMap(java.lang.Iterable)",
            "cn.hutool.core.map.MapUtil:java.util.List toMapList(java.util.Map)",
            "cn.hutool.core.map.MapUtil:java.lang.String join(java.util.Map,java.lang.String,java.lang.String,boolean)",
            "cn.hutool.core.map.MapUtil:java.util.Map filter(java.util.Map,cn.hutool.core.lang.Editor)",
            "cn.hutool.core.map.MapUtil:java.util.Map filter(java.util.Map,cn.hutool.core.lang.Filter)",
            "cn.hutool.core.map.MapUtil:java.util.Map inverse(java.util.Map)",
            "cn.hutool.core.text.csv.CsvRow:java.util.Map getFieldMap()",
            "cn.hutool.core.text.csv.CsvRow:java.lang.String toString()",
            "cn.hutool.core.text.csv.CsvWriter:cn.hutool.core.text.csv.CsvWriter write(java.util.Collection)",
            "cn.hutool.core.text.replacer.ReplacerChain:int replace(java.lang.CharSequence,int,cn.hutool.core.text.StrBuilder)",
            "cn.hutool.core.util.ClassLoaderUtil:void <clinit>()",
            "cn.hutool.core.util.ImageUtil:javax.imageio.ImageReader getReader(java.lang.String)",
            "cn.hutool.core.util.ObjectUtil:int length(java.lang.Object)",
            "cn.hutool.core.util.ObjectUtil:boolean contains(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.util.ReUtil:java.lang.String extractMulti(java.util.regex.Pattern,java.lang.String,java.lang.String)",
            "cn.hutool.core.util.ReUtil:java.lang.String extractMultiAndDelPre(java.util.regex.Pattern,cn.hutool.core.lang.Holder,java.lang.String)",
            "cn.hutool.core.util.ReUtil:java.lang.String replaceAll(java.lang.String,java.util.regex.Pattern,java.lang.String)",
            "cn.hutool.core.util.StrUtil:java.lang.String format(java.lang.CharSequence,java.util.Map)",
            "cn.hutool.core.util.XmlUtil:void mapToXml(org.w3c.dom.Document,org.w3c.dom.Element,java.util.Map)",
            "cn.hutool.cache.impl.CacheObjIterator:void nextValue()",
            "cn.hutool.cache.impl.FIFOCache:int pruneCache()",
            "cn.hutool.cache.impl.LFUCache:int pruneCache()",
            "cn.hutool.cache.impl.LRUCache:int pruneCache()",
            "cn.hutool.cache.impl.TimedCache:int pruneCache()",
            "cn.hutool.db.ds.c3p0.C3p0DSFactory:void destroy()",
            "cn.hutool.db.ds.dbcp.DbcpDSFactory:void destroy()",
            "cn.hutool.db.ds.druid.DruidDSFactory:void destroy()",
            "cn.hutool.db.ds.druid.DruidDSFactory:com.alibaba.druid.pool.DruidDataSource createDataSource(java.lang.String)",
            "cn.hutool.db.ds.hikari.HikariDSFactory:void destroy()",
            "cn.hutool.db.ds.pooled.PooledDataSource:void close()",
            "cn.hutool.db.ds.pooled.PooledDSFactory:void destroy()",
            "cn.hutool.db.ds.simple.SimpleDSFactory:void destroy()",
            "cn.hutool.db.ds.tomcat.TomcatDSFactory:void destroy()",
            "cn.hutool.db.nosql.mongo.MongoFactory:void closeAll()",
            "cn.hutool.db.sql.SqlBuilder:cn.hutool.db.sql.SqlBuilder insert(cn.hutool.db.Entity,cn.hutool.db.dialect.DialectName)",
            "cn.hutool.db.sql.SqlBuilder:cn.hutool.db.sql.SqlBuilder update(cn.hutool.db.Entity)",
            "cn.hutool.db.sql.SqlUtil:java.lang.String buildEqualsWhere(cn.hutool.db.Entity,java.util.List)",
            "cn.hutool.db.sql.SqlUtil:cn.hutool.db.sql.Condition[] buildConditions(cn.hutool.db.Entity)",
            "cn.hutool.db.sql.Wrapper:cn.hutool.db.Entity wrap(cn.hutool.db.Entity)",
            "cn.hutool.dfa.WordTree:void addWords(java.util.Collection)",
            "cn.hutool.dfa.WordTree:void addWords(java.lang.String[])",
            "cn.hutool.extra.servlet.ServletUtil:java.util.Map getParamMap(javax.servlet.ServletRequest)",
            "cn.hutool.extra.ssh.JschSessionPool:void closeAll()",
            "cn.hutool.extra.ssh.Sftp:boolean delDir(java.lang.String)",
            "cn.hutool.extra.ssh.Sftp:boolean containsIgnoreCase(java.util.List,java.lang.String)",
            "cn.hutool.extra.template.engine.velocity.VelocityUtil:void merge(org.apache.velocity.Template,org.apache.velocity.VelocityContext,java.io.Writer)",
            "cn.hutool.http.GlobalHeaders:cn.hutool.http.GlobalHeaders header(java.util.Map)",
            "cn.hutool.http.HTMLFilter:java.lang.String checkTags(java.lang.String)",
            "cn.hutool.http.HttpBase:java.lang.Object header(java.util.Map,boolean)",
            "cn.hutool.http.HttpBase:java.lang.Object addHeaders(java.util.Map)",
            "cn.hutool.http.HttpBase:java.lang.String toString()",
            "cn.hutool.http.HttpConnection:cn.hutool.http.HttpConnection header(java.util.Map,boolean)",
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest form(java.util.Map)",
            "cn.hutool.http.HttpRequest:void writeForm(java.io.OutputStream)",
            "cn.hutool.http.HttpRequest:void writeFileForm(java.io.OutputStream)",
            "cn.hutool.http.HttpRequest:void appendPart(java.lang.String,cn.hutool.core.io.resource.Resource,java.io.OutputStream)",
            "cn.hutool.http.HttpResponse:java.net.HttpCookie getCookie(java.lang.String)",
            "cn.hutool.http.HttpResponse:java.lang.String toString()",
            "cn.hutool.http.HttpUtil:java.lang.String toParams(java.util.Map,java.nio.charset.Charset)",
            "cn.hutool.http.HttpUtil:java.util.HashMap decodeParamMap(java.lang.String,java.lang.String)",
            "cn.hutool.http.webservice.SoapRequest:java.lang.String toSoapXml()",
            "cn.hutool.setting.GroupedMap:int size()",
            "cn.hutool.setting.GroupedMap:cn.hutool.setting.GroupedMap putAll(java.lang.String,java.util.Map)",
            "cn.hutool.setting.Setting:java.util.Properties toProperties()",
            "cn.hutool.setting.SettingLoader:void store(java.io.PrintWriter)",
            "cn.hutool.setting.SettingLoader:java.lang.String replaceVar(java.lang.String,java.lang.String)",
            "cn.hutool.cron.pattern.CronPattern:void parseGroupPattern(java.lang.String)",
            "cn.hutool.cron.pattern.matcher.BoolArrayValueMatcher:void <init>(java.util.List)",
            "cn.hutool.cron.pattern.matcher.ValueMatcherBuilder:java.util.List parseArray(java.lang.String,cn.hutool.cron.pattern.parser.ValueParser)",
            "cn.hutool.cron.Scheduler:cn.hutool.cron.Scheduler schedule(cn.hutool.setting.Setting)",
            "cn.hutool.json.JSONArray:void <init>(java.lang.Iterable)",
            "cn.hutool.json.JSONArray:void <init>(java.util.Collection)",
            "cn.hutool.json.JSONArray:void <init>(java.lang.Object,boolean)",
            "cn.hutool.json.JSONArray:boolean addAll(java.util.Collection)",
            "cn.hutool.json.JSONArray:boolean addAll(int,java.util.Collection)",
            "cn.hutool.json.JSONObject:void <init>(java.lang.Object,boolean)",
            "cn.hutool.json.JSONObject:cn.hutool.json.JSONArray toJSONArray(java.util.Collection)",
            "cn.hutool.json.JSONObject:void putAll(java.util.Map)",
            "cn.hutool.json.JSONObject:java.io.Writer write(java.io.Writer,int,int)",
            "cn.hutool.json.JSONObject:void populateMap(java.lang.Object)",
            "cn.hutool.json.JSONObjectIter$1:boolean hasNext()",
            "cn.hutool.json.XML:java.lang.String toXml(java.lang.Object,java.lang.String)",
            "cn.hutool.poi.excel.ExcelPicUtil:java.util.Map getPicMapXls(org.apache.poi.hssf.usermodel.HSSFWorkbook,int)",
            "cn.hutool.poi.excel.ExcelPicUtil:java.util.Map getPicMapXlsx(org.apache.poi.xssf.usermodel.XSSFWorkbook,int)",
            "cn.hutool.poi.excel.ExcelReader:java.util.List read(int,int,int,java.lang.Class)",
            "cn.hutool.poi.excel.ExcelReader:java.util.List aliasHeader(java.util.List)",
            "cn.hutool.poi.excel.ExcelWriter:cn.hutool.poi.excel.ExcelWriter write(java.lang.Iterable)",
            "cn.hutool.poi.excel.ExcelWriter:cn.hutool.poi.excel.ExcelWriter write(java.lang.Iterable,java.util.Comparator)",
            "cn.hutool.poi.excel.ExcelWriter:java.util.Collection aliasHeader(java.util.Collection)",
            "cn.hutool.poi.excel.RowUtil:void writeRow(org.apache.poi.ss.usermodel.Row,java.lang.Iterable,cn.hutool.poi.excel.StyleSet,boolean)",
            "cn.hutool.poi.excel.sax.Excel07SaxReader:cn.hutool.poi.excel.sax.Excel07SaxReader read(org.apache.poi.openxml4j.opc.OPCPackage,int)"
        ]
    },
    "cn.hutool.core.lang.ObjectId:int getMachinePiece()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.lang.ObjectId:void <clinit>()"
        ]
    },
    "cn.hutool.core.util.ClassUtil:java.util.Set getClassPaths(java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ClassUtil:java.util.Set getClassPathResources(boolean)",
            "cn.hutool.core.util.ClassUtil:java.util.Set getClassPaths(java.lang.String)"
        ]
    },
    "cn.hutool.core.util.NetUtil:java.util.LinkedHashSet localIpv4s()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.NetUtil:java.net.InetAddress getLocalhost()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.NetUtil:java.lang.String getLocalhostStr()",
            "cn.hutool.core.util.NetUtil:java.lang.String getLocalMacAddress()"
        ]
    },
    "cn.hutool.extra.servlet.ServletUtil:java.lang.String getHeaderIgnoreCase(javax.servlet.http.HttpServletRequest,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.servlet.ServletUtil:boolean isIE(javax.servlet.http.HttpServletRequest)"
        ]
    },
    "cn.hutool.extra.template.engine.velocity.VelocityUtil:org.apache.velocity.VelocityContext parseRequest(org.apache.velocity.VelocityContext,javax.servlet.http.HttpServletRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.template.engine.velocity.VelocityUtil:void toWriter(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "cn.hutool.extra.template.engine.velocity.VelocityUtil:org.apache.velocity.VelocityContext parseSession(org.apache.velocity.VelocityContext,javax.servlet.http.HttpSession)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.template.engine.velocity.VelocityUtil:void toWriter(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "cn.hutool.json.JSONUtil:cn.hutool.json.JSONObject parseFromResourceBundle(java.util.ResourceBundle)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.collection.CollUtil:boolean isEmpty(java.util.Iterator)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.collection.IterUtil:boolean isEmpty(java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.collection.CollUtil:boolean isEmpty(java.lang.Iterable)"
        ]
    },
    "cn.hutool.core.collection.CollUtil:boolean isNotEmpty(java.util.Iterator)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.collection.IterUtil:boolean isNotEmpty(java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.collection.CollUtil:boolean isNotEmpty(java.lang.Iterable)",
            "cn.hutool.core.collection.IterUtil:java.util.HashMap toMap(java.lang.Iterable)"
        ]
    },
    "cn.hutool.core.collection.IterUtil:boolean hasNull(java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.collection.CollUtil:boolean hasNull(java.lang.Iterable)"
        ]
    },
    "cn.hutool.core.collection.IterUtil:boolean isAllNull(java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.collection.IterUtil:java.util.Map countMap(java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.collection.CollUtil:java.util.Map countMap(java.lang.Iterable)"
        ]
    },
    "cn.hutool.core.collection.IterUtil:java.util.Map fieldValueMap(java.lang.Iterable,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.collection.IterUtil:java.lang.String join(java.lang.Iterable,java.lang.CharSequence,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.collection.IterUtil:java.lang.String join(java.util.Iterator,java.lang.CharSequence,java.lang.String,java.lang.String)",
            "cn.hutool.core.util.ArrayUtil:java.lang.String join(java.lang.Object[],java.lang.CharSequence,java.lang.String,java.lang.String)"
        ]
    },
    "cn.hutool.core.collection.IterUtil:java.lang.String join(java.util.Iterator,java.lang.CharSequence)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.collection.CollUtil:java.lang.String join(java.util.Iterator,java.lang.CharSequence)",
            "cn.hutool.core.collection.IterUtil:java.lang.String join(java.lang.Iterable,java.lang.CharSequence)"
        ]
    },
    "cn.hutool.core.util.ArrayUtil:java.lang.String join(java.lang.Object[],java.lang.CharSequence,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.collection.IterUtil:java.lang.String join(java.util.Iterator,java.lang.CharSequence,java.lang.String,java.lang.String)",
            "cn.hutool.core.util.ArrayUtil:java.lang.String join(java.lang.Object[],java.lang.CharSequence)",
            "cn.hutool.core.util.ArrayUtil:java.lang.String join(java.lang.Object[],java.lang.CharSequence,java.lang.String,java.lang.String)"
        ]
    },
    "cn.hutool.core.collection.CollUtil:java.util.HashMap toMap(java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.collection.IterUtil:java.util.List toList(java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.impl.ArrayConverter:java.lang.Object convertObjectToArray(java.lang.Object)"
        ]
    },
    "cn.hutool.core.collection.CollUtil:java.lang.Object getFirst(java.util.Iterator)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.collection.IterUtil:java.lang.Object getFirst(java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.collection.CollUtil:java.lang.Object getFirst(java.lang.Iterable)"
        ]
    },
    "cn.hutool.core.collection.LineIter:java.lang.String next()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.collection.LineIter:java.lang.Object next()"
        ]
    },
    "cn.hutool.core.collection.BoundedPriorityQueue$1:int compare(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.collection.BoundedPriorityQueue$1:int compare(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.collection.BoundedPriorityQueue:boolean offer(java.lang.Object)",
            "cn.hutool.core.comparator.ComparatorChain:int compare(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.comparator.ReverseComparator:int compare(java.lang.Object,java.lang.Object)"
        ]
    },
    "cn.hutool.core.collection.BoundedPriorityQueue:boolean offer(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.ds.pooled.PooledDataSource:void <init>(cn.hutool.db.ds.pooled.DbConfig)",
            "cn.hutool.db.ds.pooled.PooledDataSource:boolean free(cn.hutool.db.ds.pooled.PooledConnection)"
        ]
    },
    "cn.hutool.core.comparator.ReverseComparator:int compare(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.collection.BoundedPriorityQueue$1:int compare(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.collection.BoundedPriorityQueue:boolean offer(java.lang.Object)",
            "cn.hutool.core.comparator.ComparatorChain:int compare(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.comparator.ReverseComparator:int compare(java.lang.Object,java.lang.Object)"
        ]
    },
    "cn.hutool.core.convert.BasicType:cn.hutool.core.convert.BasicType[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.convert.BasicType:java.lang.Class wrap(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.Convert:java.lang.Class wrap(java.lang.Class)"
        ]
    },
    "cn.hutool.core.convert.BasicType:java.lang.Class unWrap(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.Convert:java.lang.Class unWrap(java.lang.Class)",
            "cn.hutool.core.util.ClassUtil:boolean isAllAssignableFrom(java.lang.Class[],java.lang.Class[])"
        ]
    },
    "cn.hutool.core.convert.Convert:java.lang.Class wrap(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.convert.Convert:java.lang.Class unWrap(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ClassUtil:boolean isAllAssignableFrom(java.lang.Class[],java.lang.Class[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ReflectUtil:java.lang.reflect.Constructor getConstructor(java.lang.Class,java.lang.Class[])",
            "cn.hutool.core.util.ReflectUtil:java.lang.reflect.Method getMethod(java.lang.Class,boolean,java.lang.String,java.lang.Class[])"
        ]
    },
    "cn.hutool.core.util.ClassUtil:boolean isPrimitiveWrapper(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ClassUtil:boolean isBasicType(java.lang.Class)"
        ]
    },
    "cn.hutool.core.util.ClassUtil:boolean isAssignable(java.lang.Class,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.convert.impl.ArrayConverter:java.lang.Object convertInternal(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.AbstractConverter:java.lang.Object convert(java.lang.Object,java.lang.Object)"
        ]
    },
    "cn.hutool.core.convert.impl.MapConverter:java.util.Map convertInternal(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.impl.MapConverter:java.lang.Object convertInternal(java.lang.Object)"
        ]
    },
    "cn.hutool.core.date.format.FastDateParser:cn.hutool.core.date.format.FastDateParser$Strategy getLocaleSpecificStrategy(int,java.util.Calendar)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.date.format.FastDateParser:cn.hutool.core.date.format.FastDateParser$Strategy getStrategy(char,int,java.util.Calendar)"
        ]
    },
    "cn.hutool.core.date.format.FastDateParser:java.util.Map access$500(java.util.Calendar,java.util.Locale,int,java.lang.StringBuilder)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.date.format.FastDateParser$CaseInsensitiveTextStrategy:void <init>(int,java.util.Calendar,java.util.Locale)"
        ]
    },
    "cn.hutool.core.io.file.FileAppender:cn.hutool.core.io.file.FileAppender append(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.file.FileWriter:java.io.File writeLines(java.util.Collection,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.file.FileWriter:java.io.File writeLines(java.util.Collection)",
            "cn.hutool.core.io.file.FileWriter:java.io.File appendLines(java.util.Collection)",
            "cn.hutool.core.io.FileUtil:java.io.File writeLines(java.util.Collection,java.io.File,java.lang.String,boolean)",
            "cn.hutool.core.io.FileUtil:java.io.File writeLines(java.util.Collection,java.io.File,java.nio.charset.Charset,boolean)"
        ]
    },
    "cn.hutool.core.io.FileUtil:java.io.File convertLineSeparator(java.io.File,java.nio.charset.Charset,cn.hutool.core.io.file.LineSeparator)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.file.FileWriter:java.io.File writeMap(java.util.Map,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.FileUtil:java.io.File writeUtf8Map(java.util.Map,java.io.File,java.lang.String,boolean)",
            "cn.hutool.core.io.FileUtil:java.io.File writeMap(java.util.Map,java.io.File,java.nio.charset.Charset,java.lang.String,boolean)"
        ]
    },
    "cn.hutool.core.io.FileTypeUtil:java.lang.String getType(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.FileTypeUtil:java.lang.String getType(java.io.File)"
        ]
    },
    "cn.hutool.core.io.FileUtil:boolean isDirEmpty(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.resource.MultiFileResource:void <init>(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.watch.watchers.DelayWatcher:void onCreate(java.nio.file.WatchEvent,java.nio.file.Path)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.watch.watchers.DelayWatcher:void onCreate(java.nio.file.WatchEvent,java.nio.file.Path)",
            "cn.hutool.core.io.watch.watchers.WatcherChain:void onCreate(java.nio.file.WatchEvent,java.nio.file.Path)",
            "cn.hutool.core.io.watch.WatchMonitor:void watch(cn.hutool.core.io.watch.Watcher)"
        ]
    },
    "cn.hutool.core.io.watch.watchers.DelayWatcher:void onDelete(java.nio.file.WatchEvent,java.nio.file.Path)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.watch.watchers.DelayWatcher:void onDelete(java.nio.file.WatchEvent,java.nio.file.Path)",
            "cn.hutool.core.io.watch.watchers.WatcherChain:void onDelete(java.nio.file.WatchEvent,java.nio.file.Path)",
            "cn.hutool.core.io.watch.WatchMonitor:void watch(cn.hutool.core.io.watch.Watcher)"
        ]
    },
    "cn.hutool.core.io.watch.watchers.DelayWatcher:void onOverflow(java.nio.file.WatchEvent,java.nio.file.Path)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.watch.watchers.DelayWatcher:void onOverflow(java.nio.file.WatchEvent,java.nio.file.Path)",
            "cn.hutool.core.io.watch.watchers.WatcherChain:void onOverflow(java.nio.file.WatchEvent,java.nio.file.Path)",
            "cn.hutool.core.io.watch.WatchMonitor:void watch(cn.hutool.core.io.watch.Watcher)"
        ]
    },
    "cn.hutool.core.lang.ClassScaner:java.util.Set scanPackage(java.lang.String,cn.hutool.core.lang.Filter)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.lang.ClassScaner:java.util.Set scanPackageByAnnotation(java.lang.String,java.lang.Class)",
            "cn.hutool.core.lang.ClassScaner:java.util.Set scanPackageBySuper(java.lang.String,java.lang.Class)",
            "cn.hutool.core.lang.ClassScaner:java.util.Set scanPackage()",
            "cn.hutool.core.lang.ClassScaner:java.util.Set scanPackage(java.lang.String)",
            "cn.hutool.core.util.ClassUtil:java.util.Set scanPackage(java.lang.String,cn.hutool.core.lang.Filter)"
        ]
    },
    "cn.hutool.core.lang.ClassScaner:void scanFile(java.io.File,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.lang.ClassScaner:java.util.Set scan()",
            "cn.hutool.core.lang.ClassScaner:void scanJavaClassPaths()",
            "cn.hutool.core.lang.ClassScaner:void scanFile(java.io.File,java.lang.String)"
        ]
    },
    "cn.hutool.core.lang.JarClassLoader:java.net.URLClassLoader loadJarToSystemClassLoader(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.RandomUtil:cn.hutool.core.lang.WeightRandom weightRandom(java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.map.CustomKeyLinkedMap:void <init>(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.map.CamelCaseLinkedMap:void <init>(java.util.Map)",
            "cn.hutool.core.map.CaseInsensitiveLinkedMap:void <init>(java.util.Map)"
        ]
    },
    "cn.hutool.core.map.CustomKeyLinkedMap:void <init>(float,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.map.CaseInsensitiveLinkedMap:void <init>(float,java.util.Map)"
        ]
    },
    "cn.hutool.core.map.MapBuilder:cn.hutool.core.map.MapBuilder putAll(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.map.MapProxy:void putAll(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.map.MapBuilder:cn.hutool.core.map.MapBuilder putAll(java.util.Map)",
            "cn.hutool.core.map.MapProxy:void putAll(java.util.Map)",
            "cn.hutool.extra.template.engine.velocity.VelocityUtil:void init(java.lang.String,java.lang.String,java.util.Map)",
            "cn.hutool.poi.excel.ExcelWriter:cn.hutool.poi.excel.ExcelWriter write(java.lang.Iterable,java.util.Comparator)"
        ]
    },
    "cn.hutool.extra.template.engine.velocity.VelocityUtil:void init(java.lang.String,java.lang.String,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.map.CustomKeyMap:void <init>(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.map.CamelCaseMap:void <init>(java.util.Map)",
            "cn.hutool.core.map.CaseInsensitiveMap:void <init>(java.util.Map)"
        ]
    },
    "cn.hutool.core.map.CustomKeyMap:void <init>(float,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.map.CaseInsensitiveMap:void <init>(float,java.util.Map)"
        ]
    },
    "cn.hutool.core.collection.CollUtil:java.util.HashMap toMap(java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.collection.CollUtil:java.util.Map toListMap(java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.collection.CollUtil:java.util.List toMapList(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.map.MapBuilder:java.lang.String join(java.lang.String,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.map.MapUtil:java.lang.String join(java.util.Map,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.map.MapBuilder:java.lang.String join(java.lang.String,java.lang.String)"
        ]
    },
    "cn.hutool.core.map.MapUtil:java.lang.String joinIgnoreNull(java.util.Map,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.map.MapBuilder:java.lang.String joinIgnoreNull(java.lang.String,java.lang.String)"
        ]
    },
    "cn.hutool.crypto.SecureUtil:java.lang.String signParams(cn.hutool.crypto.symmetric.SymmetricCrypto,java.util.Map,java.lang.String,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.SecureUtil:java.lang.String signParams(cn.hutool.crypto.symmetric.SymmetricCrypto,java.util.Map)"
        ]
    },
    "cn.hutool.crypto.SecureUtil:java.lang.String signParams(cn.hutool.crypto.digest.DigestAlgorithm,java.util.Map,java.lang.String,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.SecureUtil:java.lang.String signParams(cn.hutool.crypto.digest.DigestAlgorithm,java.util.Map)"
        ]
    },
    "cn.hutool.core.collection.CollUtil:java.util.Map filter(java.util.Map,cn.hutool.core.lang.Editor)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.map.MapUtil:java.util.Map reverse(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.copier.BeanCopier:void valueProviderToBean(cn.hutool.core.bean.copier.ValueProvider,java.lang.Object)"
        ]
    },
    "cn.hutool.core.collection.CollUtil:java.util.Map filter(java.util.Map,cn.hutool.core.lang.Filter)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.map.MapUtil:java.util.Map getAny(java.util.Map,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.BeanPath:java.lang.Object getFieldValue(java.lang.Object,java.lang.String)"
        ]
    },
    "cn.hutool.core.bean.DynaBean:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.DynaBean:java.lang.String toString()",
            "cn.hutool.core.collection.CollUtil$6:int compare(java.util.Map$Entry,java.util.Map$Entry)",
            "cn.hutool.core.convert.AbstractConverter:java.lang.String convertToStr(java.lang.Object)",
            "cn.hutool.core.convert.impl.ArrayConverter:java.lang.Object convertObjectToArray(java.lang.Object)",
            "cn.hutool.core.convert.impl.CurrencyConverter:java.util.Currency convertInternal(java.lang.Object)",
            "cn.hutool.core.convert.NumberWordFormater:java.lang.String format(java.lang.Object)",
            "cn.hutool.core.getter.OptNullBasicTypeFromStringGetter:java.lang.Object getObj(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.io.file.FileWriter:java.io.File writeLines(java.util.Collection,cn.hutool.core.io.file.LineSeparator,boolean)",
            "cn.hutool.core.io.watch.watchers.DelayWatcher$1:void run()",
            "cn.hutool.core.io.watch.watchers.DelayWatcher:void onDelayModify(java.nio.file.WatchEvent,java.nio.file.Path)",
            "cn.hutool.core.io.watch.WatchMonitor:void watch(cn.hutool.core.io.watch.Watcher)",
            "cn.hutool.core.lang.ConsistentHash$1:java.lang.Integer hash(java.lang.Object)",
            "cn.hutool.core.lang.ConsistentHash:void add(java.lang.Object)",
            "cn.hutool.core.lang.ConsistentHash:void remove(java.lang.Object)",
            "cn.hutool.core.lang.mutable.MutableObj:java.lang.String toString()",
            "cn.hutool.core.map.CamelCaseLinkedMap:java.lang.Object customKey(java.lang.Object)",
            "cn.hutool.core.map.CamelCaseMap:java.lang.Object customKey(java.lang.Object)",
            "cn.hutool.core.map.CaseInsensitiveLinkedMap:java.lang.Object customKey(java.lang.Object)",
            "cn.hutool.core.map.CaseInsensitiveMap:java.lang.Object customKey(java.lang.Object)",
            "cn.hutool.core.util.ArrayUtil:java.lang.String toString(java.lang.Object)",
            "cn.hutool.core.util.ObjectUtil:boolean contains(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.util.StrUtil:java.lang.String str(java.lang.Object,java.nio.charset.Charset)",
            "cn.hutool.core.util.StrUtil:java.lang.String toString(java.lang.Object)",
            "cn.hutool.core.util.XmlUtil:void mapToXml(org.w3c.dom.Document,org.w3c.dom.Element,java.util.Map)",
            "cn.hutool.extra.servlet.ServletUtil:void setHeader(javax.servlet.http.HttpServletResponse,java.lang.String,java.lang.Object)",
            "cn.hutool.extra.template.engine.velocity.VelocityUtil:void toFile(org.apache.velocity.Template,org.apache.velocity.VelocityContext,java.lang.String)",
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest form(java.lang.String,java.lang.Object,java.lang.Object[])",
            "cn.hutool.setting.dialect.Props:java.lang.Object getObj(java.lang.String,java.lang.Object)",
            "cn.hutool.setting.dialect.Props:void setProperty(java.lang.String,java.lang.Object)",
            "cn.hutool.json.InternalJSONUtil:java.io.Writer writeValue(java.io.Writer,java.lang.Object,int,int)",
            "cn.hutool.json.InternalJSONUtil:java.lang.String valueToString(java.lang.Object)",
            "cn.hutool.json.JSONObject:java.io.Writer write(java.io.Writer,int,int)",
            "cn.hutool.json.JSONObject:void init(cn.hutool.json.JSONTokener)",
            "cn.hutool.json.JSONUtil:java.lang.Object wrap(java.lang.Object,boolean)",
            "cn.hutool.json.XML:java.lang.String toXml(java.lang.Object,java.lang.String)",
            "cn.hutool.poi.excel.cell.CellUtil:void setCellValue(org.apache.poi.ss.usermodel.Cell,java.lang.Object,cn.hutool.poi.excel.StyleSet,boolean)",
            "cn.hutool.poi.excel.ExcelReader:java.util.List aliasHeader(java.util.List)"
        ]
    },
    "cn.hutool.core.collection.CollUtil$6:int compare(java.util.Map$Entry,java.util.Map$Entry)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.collection.CollUtil$6:int compare(java.lang.Object,java.lang.Object)"
        ]
    },
    "cn.hutool.core.convert.AbstractConverter:java.lang.String convertToStr(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.impl.AtomicBooleanConverter:java.util.concurrent.atomic.AtomicBoolean convertInternal(java.lang.Object)",
            "cn.hutool.core.convert.impl.BooleanConverter:java.lang.Boolean convertInternal(java.lang.Object)",
            "cn.hutool.core.convert.impl.CalendarConverter:java.util.Calendar convertInternal(java.lang.Object)",
            "cn.hutool.core.convert.impl.CharacterConverter:java.lang.Character convertInternal(java.lang.Object)",
            "cn.hutool.core.convert.impl.CharsetConverter:java.nio.charset.Charset convertInternal(java.lang.Object)",
            "cn.hutool.core.convert.impl.ClassConverter:java.lang.Class convertInternal(java.lang.Object)",
            "cn.hutool.core.convert.impl.DateConverter:java.util.Date convertInternal(java.lang.Object)",
            "cn.hutool.core.convert.impl.EnumConverter:java.lang.Object convertInternal(java.lang.Object)",
            "cn.hutool.core.convert.impl.GenericEnumConverter:java.lang.Enum convertInternal(java.lang.Object)",
            "cn.hutool.core.convert.impl.NumberConverter:java.lang.String convertToStr(java.lang.Object)",
            "cn.hutool.core.convert.impl.PathConverter:java.nio.file.Path convertInternal(java.lang.Object)",
            "cn.hutool.core.convert.impl.PrimitiveConverter:java.lang.Object convertInternal(java.lang.Object)",
            "cn.hutool.core.convert.impl.StringConverter:java.lang.String convertInternal(java.lang.Object)",
            "cn.hutool.core.convert.impl.TimeZoneConverter:java.util.TimeZone convertInternal(java.lang.Object)",
            "cn.hutool.core.convert.impl.URIConverter:java.net.URI convertInternal(java.lang.Object)",
            "cn.hutool.core.convert.impl.URLConverter:java.net.URL convertInternal(java.lang.Object)",
            "cn.hutool.core.convert.impl.UUIDConverter:java.util.UUID convertInternal(java.lang.Object)"
        ]
    },
    "cn.hutool.core.convert.impl.CurrencyConverter:java.util.Currency convertInternal(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.impl.CurrencyConverter:java.lang.Object convertInternal(java.lang.Object)"
        ]
    },
    "cn.hutool.core.convert.NumberWordFormater:java.lang.String format(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.Convert:java.lang.String numberToWord(java.lang.Number)"
        ]
    },
    "cn.hutool.core.getter.OptNullBasicTypeFromStringGetter:java.lang.Object getObj(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.getter.OptNullBasicTypeGetter:java.lang.Object getObj(java.lang.Object)"
        ]
    },
    "cn.hutool.core.lang.ConsistentHash$1:java.lang.Integer hash(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.lang.ConsistentHash:void add(java.lang.Object)",
            "cn.hutool.core.lang.ConsistentHash:void remove(java.lang.Object)",
            "cn.hutool.core.lang.ConsistentHash:java.lang.Object get(java.lang.Object)"
        ]
    },
    "cn.hutool.core.lang.ConsistentHash:void add(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.lang.ConsistentHash:void <init>(int,java.util.Collection)",
            "cn.hutool.core.lang.ConsistentHash:void <init>(cn.hutool.core.lang.ConsistentHash$HashFunc,int,java.util.Collection)"
        ]
    },
    "cn.hutool.core.lang.ConsistentHash:void remove(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.lang.mutable.MutableObj:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.DynaBean:java.lang.String toString()",
            "cn.hutool.core.collection.CollUtil$6:int compare(java.util.Map$Entry,java.util.Map$Entry)",
            "cn.hutool.core.convert.AbstractConverter:java.lang.String convertToStr(java.lang.Object)",
            "cn.hutool.core.convert.impl.ArrayConverter:java.lang.Object convertObjectToArray(java.lang.Object)",
            "cn.hutool.core.convert.impl.CurrencyConverter:java.util.Currency convertInternal(java.lang.Object)",
            "cn.hutool.core.convert.NumberWordFormater:java.lang.String format(java.lang.Object)",
            "cn.hutool.core.getter.OptNullBasicTypeFromStringGetter:java.lang.Object getObj(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.io.file.FileWriter:java.io.File writeLines(java.util.Collection,cn.hutool.core.io.file.LineSeparator,boolean)",
            "cn.hutool.core.io.watch.watchers.DelayWatcher$1:void run()",
            "cn.hutool.core.io.watch.watchers.DelayWatcher:void onDelayModify(java.nio.file.WatchEvent,java.nio.file.Path)",
            "cn.hutool.core.io.watch.WatchMonitor:void watch(cn.hutool.core.io.watch.Watcher)",
            "cn.hutool.core.lang.ConsistentHash$1:java.lang.Integer hash(java.lang.Object)",
            "cn.hutool.core.lang.ConsistentHash:void add(java.lang.Object)",
            "cn.hutool.core.lang.ConsistentHash:void remove(java.lang.Object)",
            "cn.hutool.core.lang.mutable.MutableObj:java.lang.String toString()",
            "cn.hutool.core.map.CamelCaseLinkedMap:java.lang.Object customKey(java.lang.Object)",
            "cn.hutool.core.map.CamelCaseMap:java.lang.Object customKey(java.lang.Object)",
            "cn.hutool.core.map.CaseInsensitiveLinkedMap:java.lang.Object customKey(java.lang.Object)",
            "cn.hutool.core.map.CaseInsensitiveMap:java.lang.Object customKey(java.lang.Object)",
            "cn.hutool.core.util.ArrayUtil:java.lang.String toString(java.lang.Object)",
            "cn.hutool.core.util.ObjectUtil:boolean contains(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.util.StrUtil:java.lang.String str(java.lang.Object,java.nio.charset.Charset)",
            "cn.hutool.core.util.StrUtil:java.lang.String toString(java.lang.Object)",
            "cn.hutool.core.util.XmlUtil:void mapToXml(org.w3c.dom.Document,org.w3c.dom.Element,java.util.Map)",
            "cn.hutool.extra.servlet.ServletUtil:void setHeader(javax.servlet.http.HttpServletResponse,java.lang.String,java.lang.Object)",
            "cn.hutool.extra.template.engine.velocity.VelocityUtil:void toFile(org.apache.velocity.Template,org.apache.velocity.VelocityContext,java.lang.String)",
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest form(java.lang.String,java.lang.Object,java.lang.Object[])",
            "cn.hutool.setting.dialect.Props:java.lang.Object getObj(java.lang.String,java.lang.Object)",
            "cn.hutool.setting.dialect.Props:void setProperty(java.lang.String,java.lang.Object)",
            "cn.hutool.json.InternalJSONUtil:java.io.Writer writeValue(java.io.Writer,java.lang.Object,int,int)",
            "cn.hutool.json.InternalJSONUtil:java.lang.String valueToString(java.lang.Object)",
            "cn.hutool.json.JSONObject:java.io.Writer write(java.io.Writer,int,int)",
            "cn.hutool.json.JSONObject:void init(cn.hutool.json.JSONTokener)",
            "cn.hutool.json.JSONUtil:java.lang.Object wrap(java.lang.Object,boolean)",
            "cn.hutool.json.XML:java.lang.String toXml(java.lang.Object,java.lang.String)",
            "cn.hutool.poi.excel.cell.CellUtil:void setCellValue(org.apache.poi.ss.usermodel.Cell,java.lang.Object,cn.hutool.poi.excel.StyleSet,boolean)",
            "cn.hutool.poi.excel.ExcelReader:java.util.List aliasHeader(java.util.List)"
        ]
    },
    "cn.hutool.core.map.CamelCaseLinkedMap:java.lang.Object customKey(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.map.CustomKeyLinkedMap:java.lang.Object get(java.lang.Object)",
            "cn.hutool.core.map.CustomKeyLinkedMap:java.lang.Object put(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.map.CustomKeyLinkedMap:boolean containsKey(java.lang.Object)"
        ]
    },
    "cn.hutool.core.map.CamelCaseMap:java.lang.Object customKey(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.map.CustomKeyMap:java.lang.Object get(java.lang.Object)",
            "cn.hutool.core.map.CustomKeyMap:java.lang.Object put(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.map.CustomKeyMap:boolean containsKey(java.lang.Object)"
        ]
    },
    "cn.hutool.core.map.CaseInsensitiveLinkedMap:java.lang.Object customKey(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.map.CustomKeyLinkedMap:java.lang.Object get(java.lang.Object)",
            "cn.hutool.core.map.CustomKeyLinkedMap:java.lang.Object put(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.map.CustomKeyLinkedMap:boolean containsKey(java.lang.Object)"
        ]
    },
    "cn.hutool.core.map.CaseInsensitiveMap:java.lang.Object customKey(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.map.CustomKeyMap:java.lang.Object get(java.lang.Object)",
            "cn.hutool.core.map.CustomKeyMap:java.lang.Object put(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.map.CustomKeyMap:boolean containsKey(java.lang.Object)"
        ]
    },
    "cn.hutool.core.util.ArrayUtil:java.lang.String toString(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.AbstractConverter:java.lang.String convertToStr(java.lang.Object)",
            "cn.hutool.core.util.StrUtil:java.lang.String str(java.lang.Object,java.nio.charset.Charset)"
        ]
    },
    "cn.hutool.core.util.StrUtil:java.lang.String str(java.lang.Object,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.StrUtil:java.lang.String utf8Str(java.lang.Object)",
            "cn.hutool.core.util.StrUtil:java.lang.String str(java.lang.Object,java.lang.String)"
        ]
    },
    "cn.hutool.core.util.StrUtil:java.lang.String toString(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ArrayUtil:java.lang.String join(java.lang.Object[],java.lang.CharSequence,java.lang.String,java.lang.String)"
        ]
    },
    "cn.hutool.extra.servlet.ServletUtil:void setHeader(javax.servlet.http.HttpServletResponse,java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest form(java.lang.String,java.lang.Object,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.setting.dialect.Props:java.lang.Object getObj(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.setting.dialect.Props:java.lang.Object getObj(java.lang.String)",
            "cn.hutool.setting.dialect.Props:java.lang.Object getObj(java.lang.Object,java.lang.Object)"
        ]
    },
    "cn.hutool.setting.dialect.Props:void setProperty(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.json.InternalJSONUtil:java.io.Writer writeValue(java.io.Writer,java.lang.Object,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.json.JSONArray:java.io.Writer write(java.io.Writer,int,int)",
            "cn.hutool.json.JSONObject:java.io.Writer write(java.io.Writer,int,int)"
        ]
    },
    "cn.hutool.json.InternalJSONUtil:java.lang.String valueToString(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.json.JSONArray:java.lang.String join(java.lang.String)"
        ]
    },
    "cn.hutool.json.JSONObject:void init(cn.hutool.json.JSONTokener)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.json.JSONObject:void <init>(cn.hutool.json.JSONTokener,boolean)",
            "cn.hutool.json.JSONObject:void init(java.lang.CharSequence)"
        ]
    },
    "cn.hutool.json.JSONUtil:java.lang.Object wrap(java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.json.JSONArray:boolean add(java.lang.Object)",
            "cn.hutool.json.JSONArray:boolean addAll(int,java.util.Collection)",
            "cn.hutool.json.JSONArray:java.lang.Object set(int,java.lang.Object)",
            "cn.hutool.json.JSONArray:void add(int,java.lang.Object)",
            "cn.hutool.json.JSONObject:void <init>(java.lang.Object,boolean)",
            "cn.hutool.json.JSONObject:cn.hutool.json.JSONObject put(java.lang.String,java.lang.Object)",
            "cn.hutool.json.JSONObject:void populateMap(java.lang.Object)"
        ]
    },
    "cn.hutool.poi.excel.cell.CellUtil:void setCellValue(org.apache.poi.ss.usermodel.Cell,java.lang.Object,cn.hutool.poi.excel.StyleSet,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.poi.excel.ExcelWriter:cn.hutool.poi.excel.ExcelWriter merge(int,int,int,int,java.lang.Object,boolean)",
            "cn.hutool.poi.excel.ExcelWriter:cn.hutool.poi.excel.ExcelWriter writeCellValue(int,int,java.lang.Object)",
            "cn.hutool.poi.excel.RowUtil:void writeRow(org.apache.poi.ss.usermodel.Row,java.lang.Iterable,cn.hutool.poi.excel.StyleSet,boolean)"
        ]
    },
    "cn.hutool.core.text.replacer.StrReplacer:java.lang.CharSequence replace(java.lang.CharSequence)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.text.replacer.StrReplacer:java.lang.Object replace(java.lang.Object)",
            "cn.hutool.core.util.EscapeUtil:java.lang.String escapeHtml4(java.lang.String)",
            "cn.hutool.core.util.EscapeUtil:java.lang.String unescapeHtml4(java.lang.String)"
        ]
    },
    "cn.hutool.core.io.resource.ResourceUtil:java.util.List getResources(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ClassUtil:java.util.List getResources(java.lang.String)"
        ]
    },
    "cn.hutool.core.io.resource.ResourceUtil:cn.hutool.core.collection.EnumerationIter getResourceIter(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.lang.ClassScaner:java.util.Set scan()"
        ]
    },
    "cn.hutool.core.io.resource.ResourceUtil:java.net.URL getResource(java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.FileUtil:java.lang.String getAbsolutePath(java.lang.String,java.lang.Class)",
            "cn.hutool.core.io.resource.ResourceUtil:java.net.URL getResource(java.lang.String)",
            "cn.hutool.core.util.ClassUtil:java.net.URL getResourceUrl(java.lang.String,java.lang.Class)",
            "cn.hutool.core.util.URLUtil:java.net.URL getURL(java.lang.String,java.lang.Class)"
        ]
    },
    "cn.hutool.core.lang.ObjectId:int getProcessPiece()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.lang.ObjectId:void <clinit>()"
        ]
    },
    "cn.hutool.core.util.ClassLoaderUtil:java.lang.ClassLoader getClassLoader()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.resource.ResourceUtil:java.util.List getResources(java.lang.String)",
            "cn.hutool.core.io.resource.ResourceUtil:cn.hutool.core.collection.EnumerationIter getResourceIter(java.lang.String)",
            "cn.hutool.core.io.resource.ResourceUtil:java.net.URL getResource(java.lang.String,java.lang.Class)",
            "cn.hutool.core.lang.ObjectId:int getProcessPiece()",
            "cn.hutool.core.util.ClassLoaderUtil:java.lang.Class loadClass(java.lang.String,java.lang.ClassLoader,boolean)",
            "cn.hutool.core.util.ClassUtil:java.lang.ClassLoader getClassLoader()",
            "cn.hutool.core.util.URLUtil:java.net.URL url(java.lang.String,java.net.URLStreamHandler)",
            "cn.hutool.poi.PoiChecker:void checkPoiImport()"
        ]
    },
    "cn.hutool.core.util.ClassLoaderUtil:java.lang.Class loadClass(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.cron.task.InvokeTask:void <init>(java.lang.String)"
        ]
    },
    "cn.hutool.core.util.ClassLoaderUtil:java.lang.Class loadClass(java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ClassLoaderUtil:java.lang.Class loadClass(java.lang.String)",
            "cn.hutool.core.util.ClassUtil:java.lang.Class loadClass(java.lang.String,boolean)"
        ]
    },
    "cn.hutool.core.util.ClassLoaderUtil:java.lang.Class loadClass(java.lang.String,java.lang.ClassLoader,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ClassLoaderUtil:java.lang.Class loadClass(java.lang.String,boolean)",
            "cn.hutool.core.util.ClassLoaderUtil:java.lang.Class loadClass(java.lang.String,java.lang.ClassLoader,boolean)",
            "cn.hutool.core.util.ClassLoaderUtil:boolean isPresent(java.lang.String,java.lang.ClassLoader)"
        ]
    },
    "cn.hutool.core.util.ClassLoaderUtil:java.lang.Class loadPrimitiveClass(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ClassLoaderUtil:java.lang.Class loadClass(java.lang.String,java.lang.ClassLoader,boolean)"
        ]
    },
    "cn.hutool.core.util.ClassLoaderUtil:boolean isPresent(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.dialect.DialectFactory:java.lang.String identifyDriver(java.lang.String)"
        ]
    },
    "cn.hutool.core.util.ClassLoaderUtil:boolean isPresent(java.lang.String,java.lang.ClassLoader)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ClassLoaderUtil:boolean isPresent(java.lang.String)"
        ]
    },
    "cn.hutool.core.util.ClassUtil:java.lang.ClassLoader getContextClassLoader()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ClassUtil:java.lang.ClassLoader getClassLoader()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.impl.ClassConverter:java.lang.Class convertInternal(java.lang.Object)",
            "cn.hutool.core.io.resource.ClassPathResource:void <init>(java.lang.String,java.lang.ClassLoader,java.lang.Class)",
            "cn.hutool.core.lang.ClassScaner:java.lang.Class loadClass(java.lang.String)",
            "cn.hutool.core.lang.JarClassLoader:void <init>(java.net.URL[])",
            "cn.hutool.core.util.ClassUtil:java.util.Set getClassPaths(java.lang.String,boolean)",
            "cn.hutool.aop.ProxyUtil:java.lang.Object newProxyInstance(java.lang.reflect.InvocationHandler,java.lang.Class[])",
            "cn.hutool.extra.template.engine.freemarker.FreemarkerEngine:freemarker.template.Configuration createCfg(cn.hutool.extra.template.TemplateConfig)"
        ]
    },
    "cn.hutool.core.util.ClassUtil:java.lang.Class loadClass(java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ClassUtil:java.lang.Class loadClass(java.lang.String)"
        ]
    },
    "cn.hutool.core.util.URLUtil:java.net.URL url(java.lang.String,java.net.URLStreamHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.URLUtil:java.net.URL url(java.lang.String)"
        ]
    },
    "cn.hutool.db.dialect.DialectFactory:java.lang.String identifyDriver(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.dialect.DriverUtil:java.lang.String identifyDriver(java.lang.String)"
        ]
    },
    "cn.hutool.cron.task.InvokeTask:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.cron.Scheduler:cn.hutool.cron.Scheduler schedule(cn.hutool.setting.Setting)"
        ]
    },
    "cn.hutool.poi.PoiChecker:void checkPoiImport()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ReUtil:java.lang.String extractMulti(java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ReUtil:java.lang.String extractMultiAndDelPre(java.lang.String,cn.hutool.core.lang.Holder,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ReUtil:java.lang.String replaceAll(java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.log.dialect.console.ConsoleLog:void log(cn.hutool.log.level.Level,java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.dialect.console.ConsoleLog:void trace(java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.log.dialect.console.ConsoleLog:void debug(java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.log.dialect.console.ConsoleLog:void info(java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.log.dialect.console.ConsoleLog:void warn(java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.log.dialect.console.ConsoleLog:void error(java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.log.dialect.console.ConsoleLog:void log(cn.hutool.log.level.Level,java.lang.String,java.lang.Object[])"
        ]
    },
    "cn.hutool.core.util.XmlUtil:org.w3c.dom.Document mapToXml(java.util.Map,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.XmlUtil:java.lang.String mapToXmlStr(java.util.Map,java.lang.String)"
        ]
    },
    "cn.hutool.cache.impl.CacheObjIterator:void <init>(java.util.Iterator)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.cache.impl.AbstractCache:java.util.Iterator cacheObjIterator()"
        ]
    },
    "cn.hutool.cache.impl.CacheObjIterator:cn.hutool.cache.impl.CacheObj next()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.cache.impl.CacheObjIterator:java.lang.Object next()",
            "cn.hutool.cache.impl.CacheValuesIterator:java.lang.Object next()"
        ]
    },
    "cn.hutool.cache.impl.AbstractCache:void put(java.lang.Object,java.lang.Object,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.cache.impl.AbstractCache:void put(java.lang.Object,java.lang.Object)"
        ]
    },
    "cn.hutool.cache.impl.AbstractCache:int prune()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.cache.impl.TimedCache$1:void run()"
        ]
    },
    "cn.hutool.db.nosql.mongo.MongoFactory$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.thread.GlobalThreadPool:void execute(java.lang.Runnable)",
            "cn.hutool.core.thread.ThreadUtil$1:void run()",
            "cn.hutool.cron.task.RunnableTask:void execute()"
        ]
    },
    "cn.hutool.db.sql.SqlBuilder:cn.hutool.db.sql.SqlBuilder insert(cn.hutool.db.Entity)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.dfa.SensitiveUtil:void init(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.dfa.SensitiveUtil$1:java.lang.Boolean call()",
            "cn.hutool.dfa.SensitiveUtil:void init(java.util.Collection,boolean)"
        ]
    },
    "cn.hutool.extra.ssh.JschUtil:void closeAll()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.extra.ssh.Sftp:boolean exist(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.extra.template.engine.velocity.VelocityUtil:void toWriter(org.apache.velocity.app.VelocityEngine,java.lang.String,org.apache.velocity.VelocityContext,java.io.Writer)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.template.engine.velocity.VelocityUtil:java.lang.String getContent(org.apache.velocity.app.VelocityEngine,java.lang.String,org.apache.velocity.VelocityContext)"
        ]
    },
    "cn.hutool.extra.template.engine.velocity.VelocityUtil:void toWriter(java.lang.String,org.apache.velocity.VelocityContext,java.io.Writer)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.template.engine.velocity.VelocityUtil:java.lang.String getContent(java.lang.String,org.apache.velocity.VelocityContext)",
            "cn.hutool.extra.template.engine.velocity.VelocityUtil:void toWriter(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "cn.hutool.http.HTMLFilter:java.lang.String filter(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HtmlUtil:java.lang.String filter(java.lang.String)"
        ]
    },
    "cn.hutool.http.HttpBase:java.lang.Object header(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HttpRequest:void <init>(java.lang.String)"
        ]
    },
    "cn.hutool.http.HttpResponse:java.lang.String getCookieValue(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.http.HttpUtil:java.lang.String toParams(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.http.HttpUtil:java.lang.String toParams(java.util.Map,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.http.HttpUtil:java.lang.String urlWithForm(java.lang.String,java.util.Map,java.nio.charset.Charset,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HttpRequest:void urlWithParamIfGet()"
        ]
    },
    "cn.hutool.core.map.MapProxy:int size()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.map.CustomKeyLinkedMap:void <init>(java.util.Map)",
            "cn.hutool.core.map.CustomKeyLinkedMap:void <init>(float,java.util.Map)",
            "cn.hutool.core.map.CustomKeyMap:void <init>(java.util.Map)",
            "cn.hutool.core.map.CustomKeyMap:void <init>(float,java.util.Map)",
            "cn.hutool.core.map.MapProxy:int size()",
            "cn.hutool.core.map.MapUtil:java.util.Map inverse(java.util.Map)",
            "cn.hutool.core.text.csv.CsvRow:java.util.Map getFieldMap()",
            "cn.hutool.core.util.ObjectUtil:int length(java.lang.Object)",
            "cn.hutool.cache.impl.AbstractCache:boolean isFull()",
            "cn.hutool.cache.impl.AbstractCache:int size()",
            "cn.hutool.http.HttpUtil:java.util.HashMap decodeParamMap(java.lang.String,java.lang.String)",
            "cn.hutool.json.JSONObject:int size()"
        ]
    },
    "cn.hutool.cache.impl.AbstractCache:boolean isFull()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.cache.impl.AbstractCache:void put(java.lang.Object,java.lang.Object,long)",
            "cn.hutool.cache.impl.FIFOCache:int pruneCache()",
            "cn.hutool.cache.impl.LFUCache:int pruneCache()"
        ]
    },
    "cn.hutool.cache.impl.AbstractCache:int size()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.cache.file.AbstractFileCache:int getCachedFilesCount()"
        ]
    },
    "cn.hutool.setting.GroupedMap:boolean isEmpty()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.map.MapProxy:boolean isEmpty()",
            "cn.hutool.core.map.MapUtil:boolean isEmpty(java.util.Map)",
            "cn.hutool.core.map.MapUtil:boolean isNotEmpty(java.util.Map)",
            "cn.hutool.core.map.MapUtil:java.util.List toMapList(java.util.Map)",
            "cn.hutool.core.util.StrUtil:java.lang.String format(java.lang.CharSequence,java.util.Map)",
            "cn.hutool.cache.impl.AbstractCache:boolean isEmpty()",
            "cn.hutool.http.HTMLFilter:boolean allowed(java.lang.String)",
            "cn.hutool.http.HTMLFilter:boolean allowedAttribute(java.lang.String,java.lang.String)",
            "cn.hutool.setting.GroupedMap:boolean isEmpty(java.lang.String)",
            "cn.hutool.setting.Setting:boolean isEmpty()",
            "cn.hutool.json.JSONObject:boolean isEmpty()"
        ]
    },
    "cn.hutool.setting.Setting:int size()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.map.CustomKeyLinkedMap:void <init>(java.util.Map)",
            "cn.hutool.core.map.CustomKeyLinkedMap:void <init>(float,java.util.Map)",
            "cn.hutool.core.map.CustomKeyMap:void <init>(java.util.Map)",
            "cn.hutool.core.map.CustomKeyMap:void <init>(float,java.util.Map)",
            "cn.hutool.core.map.MapProxy:int size()",
            "cn.hutool.core.map.MapUtil:java.util.Map inverse(java.util.Map)",
            "cn.hutool.core.text.csv.CsvRow:java.util.Map getFieldMap()",
            "cn.hutool.core.util.ObjectUtil:int length(java.lang.Object)",
            "cn.hutool.cache.impl.AbstractCache:boolean isFull()",
            "cn.hutool.cache.impl.AbstractCache:int size()",
            "cn.hutool.http.HttpUtil:java.util.HashMap decodeParamMap(java.lang.String,java.lang.String)",
            "cn.hutool.json.JSONObject:int size()"
        ]
    },
    "cn.hutool.json.JSONObject:int size()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.map.CustomKeyLinkedMap:void <init>(java.util.Map)",
            "cn.hutool.core.map.CustomKeyLinkedMap:void <init>(float,java.util.Map)",
            "cn.hutool.core.map.CustomKeyMap:void <init>(java.util.Map)",
            "cn.hutool.core.map.CustomKeyMap:void <init>(float,java.util.Map)",
            "cn.hutool.core.map.MapProxy:int size()",
            "cn.hutool.core.map.MapUtil:java.util.Map inverse(java.util.Map)",
            "cn.hutool.core.text.csv.CsvRow:java.util.Map getFieldMap()",
            "cn.hutool.core.util.ObjectUtil:int length(java.lang.Object)",
            "cn.hutool.cache.impl.AbstractCache:boolean isFull()",
            "cn.hutool.cache.impl.AbstractCache:int size()",
            "cn.hutool.http.HttpUtil:java.util.HashMap decodeParamMap(java.lang.String,java.lang.String)",
            "cn.hutool.json.JSONObject:int size()",
            "cn.hutool.json.JSONObject:java.io.Writer write(java.io.Writer,int,int)",
            "cn.hutool.json.XML:boolean parse(cn.hutool.json.XMLTokener,cn.hutool.json.JSONObject,java.lang.String,boolean)"
        ]
    },
    "cn.hutool.setting.Setting:cn.hutool.setting.Setting putAll(java.lang.String,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.setting.Setting:void putAll(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.map.MapBuilder:cn.hutool.core.map.MapBuilder putAll(java.util.Map)",
            "cn.hutool.core.map.MapProxy:void putAll(java.util.Map)",
            "cn.hutool.extra.template.engine.velocity.VelocityUtil:void init(java.lang.String,java.lang.String,java.util.Map)",
            "cn.hutool.setting.Setting:cn.hutool.setting.Setting getSetting(java.lang.String)",
            "cn.hutool.poi.excel.ExcelWriter:cn.hutool.poi.excel.ExcelWriter write(java.lang.Iterable,java.util.Comparator)"
        ]
    },
    "cn.hutool.cron.pattern.CronPattern:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.cron.Scheduler:cn.hutool.cron.Scheduler schedule(java.lang.String,java.lang.String,java.lang.Runnable)",
            "cn.hutool.cron.Scheduler:cn.hutool.cron.Scheduler schedule(java.lang.String,java.lang.String,cn.hutool.cron.task.Task)"
        ]
    },
    "cn.hutool.cron.pattern.matcher.DayOfMonthValueMatcher:void <init>(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.cron.pattern.matcher.ValueMatcherBuilder:cn.hutool.cron.pattern.matcher.ValueMatcher build(java.lang.String,cn.hutool.cron.pattern.parser.ValueParser)"
        ]
    },
    "cn.hutool.cron.pattern.matcher.ValueMatcherBuilder:cn.hutool.cron.pattern.matcher.ValueMatcher build(java.lang.String,cn.hutool.cron.pattern.parser.ValueParser)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.cron.pattern.CronPattern:void parseSinglePattern(java.lang.String)"
        ]
    },
    "cn.hutool.json.JSONArray:void <init>(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.json.InternalJSONUtil:java.io.Writer writeValue(java.io.Writer,java.lang.Object,int,int)",
            "cn.hutool.json.InternalJSONUtil:java.lang.String valueToString(java.lang.Object)",
            "cn.hutool.json.JSONGetter:cn.hutool.json.JSONArray getJSONArray(java.lang.Object)",
            "cn.hutool.json.JSONUtil:cn.hutool.json.JSONArray parseArray(java.lang.Object)",
            "cn.hutool.json.JSONUtil:cn.hutool.json.JSON parse(java.lang.Object)",
            "cn.hutool.json.XML:java.lang.String toXml(java.lang.Object,java.lang.String)"
        ]
    },
    "cn.hutool.json.JSONUtil:cn.hutool.json.JSONArray parseArray(java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.text.csv.CsvRow:boolean addAll(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.text.csv.CsvRow:boolean addAll(java.util.Collection)",
            "cn.hutool.db.sql.SqlBuilder:void buildValuePartForIN(java.lang.StringBuilder,cn.hutool.db.sql.Condition)"
        ]
    },
    "cn.hutool.db.sql.SqlBuilder:void buildValuePartForIN(java.lang.StringBuilder,cn.hutool.db.sql.Condition)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.sql.SqlBuilder:void buildConditionPart(java.lang.StringBuilder,cn.hutool.db.sql.Condition)"
        ]
    },
    "cn.hutool.core.text.csv.CsvRow:boolean addAll(int,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.text.csv.CsvRow:boolean addAll(int,java.util.Collection)",
            "cn.hutool.json.JSONArray:boolean addAll(int,java.util.Collection)"
        ]
    },
    "cn.hutool.json.JSONObject:void <init>(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.json.InternalJSONUtil:java.io.Writer writeValue(java.io.Writer,java.lang.Object,int,int)",
            "cn.hutool.json.InternalJSONUtil:java.lang.String valueToString(java.lang.Object)",
            "cn.hutool.json.JSONGetter:cn.hutool.json.JSONObject getJSONObject(java.lang.Object)",
            "cn.hutool.json.JSONSupport:cn.hutool.json.JSONObject toJSON()",
            "cn.hutool.json.JSONUtil:cn.hutool.json.JSONObject parseObj(java.lang.Object)",
            "cn.hutool.json.JSONUtil:cn.hutool.json.JSON parse(java.lang.Object)",
            "cn.hutool.json.JSONUtil:cn.hutool.json.JSONObject parseFromMap(java.util.Map)"
        ]
    },
    "cn.hutool.json.JSONUtil:cn.hutool.json.JSONObject parseObj(java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.json.JSONObject:void <init>(cn.hutool.json.JSONObject,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.json.JSONObject:java.lang.String toJSONString(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.json.JSONObject:java.lang.String toString()",
            "cn.hutool.json.JSONObject:java.lang.String toStringPretty()",
            "cn.hutool.json.JSONSupport:java.lang.String toPrettyString()",
            "cn.hutool.json.JSONUtil:java.lang.String toJsonStr(cn.hutool.json.JSON,int)",
            "cn.hutool.json.JSONUtil:java.lang.String toJsonStr(cn.hutool.json.JSON)",
            "cn.hutool.json.JSONUtil:java.lang.String toJsonPrettyStr(cn.hutool.json.JSON)"
        ]
    },
    "cn.hutool.json.JSONObject:java.io.Writer write(java.io.Writer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.json.XML:java.lang.String toXml(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.json.JSONUtil:java.lang.String toXmlStr(cn.hutool.json.JSON)",
            "cn.hutool.json.XML:java.lang.String toXml(java.lang.Object,java.lang.String)"
        ]
    },
    "cn.hutool.poi.excel.ExcelPicUtil:java.util.Map getPicMap(org.apache.poi.ss.usermodel.Workbook,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.poi.excel.ExcelReader:java.util.List read(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.poi.excel.ExcelReader:java.util.List read(int)"
        ]
    },
    "cn.hutool.poi.excel.ExcelWriter:cn.hutool.poi.excel.ExcelWriter writeRow(java.util.Map,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.poi.excel.ExcelWriter:cn.hutool.poi.excel.ExcelWriter write(java.lang.Iterable,java.util.Comparator)",
            "cn.hutool.poi.excel.ExcelWriter:cn.hutool.poi.excel.ExcelWriter writeRow(java.lang.Object,boolean)"
        ]
    },
    "cn.hutool.poi.excel.ExcelWriter:cn.hutool.poi.excel.ExcelWriter writeHeadRow(java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.poi.excel.ExcelWriter:cn.hutool.poi.excel.ExcelWriter writeRow(java.util.Map,boolean)"
        ]
    },
    "cn.hutool.poi.excel.ExcelWriter:cn.hutool.poi.excel.ExcelWriter writeRow(java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.poi.excel.ExcelWriter:cn.hutool.poi.excel.ExcelWriter writeRow(java.lang.Object,boolean)",
            "cn.hutool.poi.excel.ExcelWriter:cn.hutool.poi.excel.ExcelWriter writeRow(java.util.Map,boolean)"
        ]
    },
    "cn.hutool.core.io.FileUtil:java.lang.String readUtf8String(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.FileUtil:java.lang.String readString(java.io.File,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.FileUtil:java.lang.String readString(java.lang.String,java.lang.String)"
        ]
    },
    "cn.hutool.core.util.CharsetUtil:java.io.File convert(java.io.File,java.nio.charset.Charset,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.FileUtil:java.io.File convertCharset(java.io.File,java.nio.charset.Charset,java.nio.charset.Charset)"
        ]
    },
    "cn.hutool.cache.file.AbstractFileCache:byte[] getFileBytes(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.FileUtil:java.util.List readUtf8Lines(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.FileUtil:java.io.File writeUtf8String(java.lang.String,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.FileUtil:java.io.File appendUtf8String(java.lang.String,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.codec.Base64:java.io.File decodeToFile(java.lang.String,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.date.DateRange$1:cn.hutool.core.date.DateTime step(cn.hutool.core.date.DateTime,cn.hutool.core.date.DateTime,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.date.DateRange$1:java.lang.Object step(java.lang.Object,java.lang.Object,int)"
        ]
    },
    "cn.hutool.core.date.DateTime:cn.hutool.core.date.DateTime setField(cn.hutool.core.date.DateField,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ZipUtil:java.io.File zip(java.io.File,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.lang.Dict:java.lang.String getStr(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.Entity:java.lang.String getStr(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.http.HttpResponse:byte[] bodyBytes()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HttpResponse:java.lang.String body()"
        ]
    },
    "cn.hutool.http.HttpResponse:void <init>(cn.hutool.http.HttpConnection,java.nio.charset.Charset,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpResponse execute(boolean)"
        ]
    },
    "cn.hutool.setting.GroupedSet:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.poi.excel.sax.AbstractExcelSaxReader:java.lang.Object read(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.poi.excel.sax.AbstractExcelSaxReader:java.lang.Object read(java.lang.String)"
        ]
    },
    "cn.hutool.poi.excel.ExcelUtil:void readBySax(java.io.InputStream,int,cn.hutool.poi.excel.sax.handler.RowHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.poi.excel.ExcelUtil:void readBySax(java.lang.String,int,cn.hutool.poi.excel.sax.handler.RowHandler)",
            "cn.hutool.poi.excel.ExcelUtil:void readBySax(java.io.File,int,cn.hutool.poi.excel.sax.handler.RowHandler)"
        ]
    },
    "cn.hutool.poi.excel.sax.AbstractExcelSaxReader:java.lang.Object read(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.poi.excel.ExcelUtil:cn.hutool.poi.excel.ExcelReader getReader(java.io.InputStream,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.poi.excel.ExcelUtil:cn.hutool.poi.excel.ExcelReader getReader(java.io.InputStream,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.poi.excel.ExcelUtil:cn.hutool.poi.excel.ExcelReader getReader(java.io.InputStream)",
            "cn.hutool.poi.excel.ExcelUtil:cn.hutool.poi.excel.ExcelReader getReader(java.io.InputStream,boolean)"
        ]
    },
    "cn.hutool.poi.excel.ExcelUtil:cn.hutool.poi.excel.ExcelReader getReader(java.io.InputStream,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.poi.excel.ExcelUtil:cn.hutool.poi.excel.ExcelReader getReader(java.io.InputStream,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.poi.excel.ExcelUtil:cn.hutool.poi.excel.ExcelWriter getWriter(java.io.File,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.poi.excel.ExcelWriter:void <init>(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.poi.excel.ExcelUtil:cn.hutool.poi.excel.ExcelWriter getWriter(java.io.File)"
        ]
    },
    "cn.hutool.core.bean.BeanUtil:java.lang.Object fillBeanWithMap(java.util.Map,java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.BeanUtil:java.lang.Object mapToBean(java.util.Map,java.lang.Class,boolean)"
        ]
    },
    "cn.hutool.core.lang.Dict:java.lang.Object toBean(java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.lang.Dict:java.lang.Object toBean(java.lang.Object)"
        ]
    },
    "cn.hutool.core.lang.Dict:java.lang.Object toBeanWithCamelCase(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.bean.BeanUtil:java.lang.Object mapToBean(java.util.Map,java.lang.Class,cn.hutool.core.bean.copier.CopyOptions)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.bean.BeanUtil:java.lang.Object fillBeanWithMapIgnoreCase(java.util.Map,java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.BeanUtil:java.lang.Object mapToBeanIgnoreCase(java.util.Map,java.lang.Class,boolean)",
            "cn.hutool.core.lang.Dict:java.lang.Object toBeanIgnoreCase(java.lang.Object)"
        ]
    },
    "cn.hutool.extra.servlet.ServletUtil:java.lang.Object fillBean(javax.servlet.ServletRequest,java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.servlet.ServletUtil:java.lang.Object toBean(javax.servlet.ServletRequest,java.lang.Class,boolean)"
        ]
    },
    "cn.hutool.setting.AbsSetting:java.lang.Object toBean(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.ds.c3p0.C3p0DSFactory:com.mchange.v2.c3p0.ComboPooledDataSource createDataSource(java.lang.String)",
            "cn.hutool.db.ds.dbcp.DbcpDSFactory:org.apache.commons.dbcp2.BasicDataSource createDataSource(java.lang.String)",
            "cn.hutool.db.ds.tomcat.TomcatDSFactory:org.apache.tomcat.jdbc.pool.DataSource createDataSource(java.lang.String)",
            "cn.hutool.db.nosql.redis.RedisDS:cn.hutool.db.nosql.redis.RedisDS init(java.lang.String)",
            "cn.hutool.extra.mail.MailAccount:void <init>(cn.hutool.setting.Setting)"
        ]
    },
    "cn.hutool.json.JSONObject:java.lang.Object toBean(java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.json.JSONObject:java.lang.Object toBean(java.lang.Class,boolean)",
            "cn.hutool.json.JSONObject:java.lang.Object toBean(java.lang.reflect.Type,boolean)",
            "cn.hutool.json.JSONObject:java.lang.Object toBean(java.lang.Object)",
            "cn.hutool.json.JSONSupport:void parse(java.lang.String,boolean)"
        ]
    },
    "cn.hutool.core.bean.BeanUtil:void copyProperties(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.bean.BeanUtil:void copyProperties(java.lang.Object,java.lang.Object,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.convert.Convert:java.lang.Enum toEnum(java.lang.Class,java.lang.Object,java.lang.Enum)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.Convert:java.lang.Enum toEnum(java.lang.Class,java.lang.Object)",
            "cn.hutool.core.getter.OptNullBasicTypeFromObjectGetter:java.lang.Enum getEnum(java.lang.Class,java.lang.Object,java.lang.Enum)",
            "cn.hutool.core.getter.OptNullBasicTypeFromStringGetter:java.lang.Enum getEnum(java.lang.Class,java.lang.Object,java.lang.Enum)",
            "cn.hutool.db.DbUtil:void setShowSqlGlobal(cn.hutool.setting.Setting)",
            "cn.hutool.setting.dialect.Props:java.lang.Enum getEnum(java.lang.Class,java.lang.String,java.lang.Enum)"
        ]
    },
    "cn.hutool.core.convert.ConverterRegistry:java.lang.Object convert(java.lang.reflect.Type,java.lang.Object,java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.ConverterRegistry:java.lang.Object convert(java.lang.reflect.Type,java.lang.Object,java.lang.Object)"
        ]
    },
    "cn.hutool.core.convert.ConverterRegistry:java.lang.Object convertSpecial(java.lang.reflect.Type,java.lang.Class,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.ConverterRegistry:java.lang.Object convert(java.lang.reflect.Type,java.lang.Object,java.lang.Object,boolean)"
        ]
    },
    "cn.hutool.core.bean.BeanUtil:java.util.Map beanToMap(java.lang.Object,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.BeanUtil:java.util.Map beanToMap(java.lang.Object)",
            "cn.hutool.core.lang.Dict:cn.hutool.core.lang.Dict parseBean(java.lang.Object,boolean,boolean)"
        ]
    },
    "cn.hutool.poi.excel.ExcelWriter:cn.hutool.poi.excel.ExcelWriter writeRow(java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.poi.excel.ExcelWriter:cn.hutool.poi.excel.ExcelWriter write(java.lang.Iterable)"
        ]
    },
    "cn.hutool.core.collection.CollUtil:java.util.ArrayList newArrayList(java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.date.DateUtil:java.util.List rangeToList(java.util.Date,java.util.Date,cn.hutool.core.date.DateField)",
            "cn.hutool.core.map.MapUtil:java.util.List toMapList(java.util.Map)"
        ]
    },
    "cn.hutool.core.collection.CollUtil:java.util.Collection toCollection(java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ArrayUtil:java.lang.Object[] toArray(java.lang.Iterable,java.lang.Class)"
        ]
    },
    "cn.hutool.core.util.ArrayUtil:java.lang.Object[] toArray(java.util.Iterator,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.sql.SqlBuilder:cn.hutool.db.sql.SqlBuilder delete(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.dialect.impl.AnsiSqlDialect:java.sql.PreparedStatement psForDelete(java.sql.Connection,cn.hutool.db.sql.Query)"
        ]
    },
    "cn.hutool.db.sql.SqlBuilder:cn.hutool.db.sql.SqlBuilder in(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.sql.SqlBuilder:cn.hutool.db.sql.SqlBuilder orderBy(cn.hutool.db.sql.Order[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.dialect.impl.AnsiSqlDialect:java.sql.PreparedStatement psForPage(java.sql.Connection,cn.hutool.db.sql.Query)"
        ]
    },
    "cn.hutool.db.sql.SqlBuilder:cn.hutool.db.sql.SqlBuilder join(java.lang.String,cn.hutool.db.sql.SqlBuilder$Join)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.sql.Wrapper:java.lang.String[] wrap(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.sql.SqlBuilder:cn.hutool.db.sql.SqlBuilder 'from'(java.lang.String[])",
            "cn.hutool.db.sql.SqlBuilder:cn.hutool.db.sql.SqlBuilder groupBy(java.lang.String[])",
            "cn.hutool.db.sql.Wrapper:java.util.Collection wrap(java.util.Collection)"
        ]
    },
    "cn.hutool.db.sql.Wrapper:cn.hutool.db.sql.Condition[] wrap(cn.hutool.db.sql.Condition[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.sql.SqlBuilder:cn.hutool.db.sql.SqlBuilder where(cn.hutool.db.sql.LogicalOperator,cn.hutool.db.sql.Condition[])",
            "cn.hutool.db.sql.SqlBuilder:cn.hutool.db.sql.SqlBuilder having(cn.hutool.db.sql.LogicalOperator,cn.hutool.db.sql.Condition[])",
            "cn.hutool.db.sql.SqlBuilder:cn.hutool.db.sql.SqlBuilder on(cn.hutool.db.sql.LogicalOperator,cn.hutool.db.sql.Condition[])"
        ]
    },
    "cn.hutool.core.convert.impl.CollectionConverter:java.util.Collection convert(java.lang.Object,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.Convert:java.util.Collection toCollection(java.lang.Class,java.lang.Class,java.lang.Object)",
            "cn.hutool.core.convert.ConverterRegistry:java.lang.Object convertSpecial(java.lang.reflect.Type,java.lang.Class,java.lang.Object,java.lang.Object)",
            "cn.hutool.core.convert.impl.CollectionConverter:java.lang.Object convert(java.lang.Object,java.lang.Object)",
            "cn.hutool.json.InternalJSONUtil:java.lang.Object jsonConvert(java.lang.reflect.Type,java.lang.Object,boolean)",
            "cn.hutool.json.JSONArray:java.util.ArrayList toList(java.lang.Class)"
        ]
    },
    "cn.hutool.cache.impl.AbstractCache:java.util.Iterator cacheObjIterator()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.cache.impl.AbstractCache:java.util.Iterator iterator()"
        ]
    },
    "cn.hutool.core.collection.CollUtil:java.lang.Class getElementType(java.util.Iterator)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.collection.IterUtil:java.lang.Class getElementType(java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.collection.CollUtil:java.lang.Class getElementType(java.lang.Iterable)"
        ]
    },
    "cn.hutool.core.collection.CollUtil:java.util.ArrayList newArrayList(java.util.Enumeration)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.resource.ResourceUtil:java.util.List getResources(java.lang.String)"
        ]
    },
    "cn.hutool.core.util.NetUtil:java.util.Collection getNetworkInterfaces()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.lang.ObjectId:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.lang.ObjectId:java.lang.String next()",
            "cn.hutool.core.lang.ObjectId:java.lang.String next(boolean)",
            "cn.hutool.core.lang.ObjectId:void <clinit>()"
        ]
    },
    "cn.hutool.core.util.ClassUtil:java.util.Set getClassPathResources(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ClassUtil:java.util.Set getClassPathResources()"
        ]
    },
    "cn.hutool.core.util.ClassUtil:java.util.Set getClassPaths(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.NetUtil:java.lang.String getLocalhostStr()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.NetUtil:java.lang.String getLocalMacAddress()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.extra.servlet.ServletUtil:boolean isIE(javax.servlet.http.HttpServletRequest)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.collection.CollUtil:boolean isEmpty(java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.map.MapUtil:java.util.Map toListMap(java.lang.Iterable)"
        ]
    },
    "cn.hutool.core.collection.CollUtil:boolean isNotEmpty(java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.lang.WeightRandom:void <init>(java.lang.Iterable)"
        ]
    },
    "cn.hutool.core.collection.CollUtil:boolean hasNull(java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.collection.CollUtil:java.util.Map countMap(java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.collection.CollUtil:java.util.Collection union(java.util.Collection,java.util.Collection)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection intersection(java.util.Collection,java.util.Collection)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection disjunction(java.util.Collection,java.util.Collection)"
        ]
    },
    "cn.hutool.core.collection.CollUtil:java.lang.String join(java.util.Iterator,java.lang.CharSequence)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HttpUtil:java.lang.String toParams(java.util.Map,java.nio.charset.Charset)"
        ]
    },
    "cn.hutool.core.collection.IterUtil:java.lang.String join(java.lang.Iterable,java.lang.CharSequence)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.collection.CollUtil:java.lang.String join(java.lang.Iterable,java.lang.CharSequence)"
        ]
    },
    "cn.hutool.core.util.ArrayUtil:java.lang.String join(java.lang.Object[],java.lang.CharSequence)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ArrayUtil:java.lang.String join(java.lang.Object,java.lang.CharSequence)",
            "cn.hutool.core.util.StrUtil:java.lang.String join(java.lang.CharSequence,java.lang.Object[])",
            "cn.hutool.db.nosql.mongo.MongoFactory:cn.hutool.db.nosql.mongo.MongoDS getDS(java.lang.String[])",
            "cn.hutool.db.nosql.mongo.MongoFactory:cn.hutool.db.nosql.mongo.MongoDS getDS(cn.hutool.setting.Setting,java.lang.String[])",
            "cn.hutool.db.sql.SqlBuilder:cn.hutool.db.sql.SqlBuilder 'from'(java.lang.String[])",
            "cn.hutool.db.sql.SqlBuilder:cn.hutool.db.sql.SqlBuilder in(java.lang.String,java.lang.Object[])",
            "cn.hutool.db.sql.SqlBuilder:cn.hutool.db.sql.SqlBuilder groupBy(java.lang.String[])",
            "cn.hutool.extra.servlet.ServletUtil:java.util.Map getParamMap(javax.servlet.ServletRequest)",
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest cookie(java.net.HttpCookie[])",
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest form(java.lang.String,java.lang.Object)"
        ]
    },
    "cn.hutool.core.collection.CollUtil:java.lang.Object getFirst(java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.collection.LineIter:java.lang.Object next()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.BeanUtil:java.util.Map beanToMap(java.lang.Object,java.util.Map,boolean,cn.hutool.core.lang.Editor)",
            "cn.hutool.core.bean.copier.BeanCopier:void valueProviderToBean(cn.hutool.core.bean.copier.ValueProvider,java.lang.Object)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection union(java.util.Collection,java.util.Collection)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection intersection(java.util.Collection,java.util.Collection)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection disjunction(java.util.Collection,java.util.Collection)",
            "cn.hutool.core.collection.CollUtil:boolean containsAny(java.util.Collection,java.util.Collection)",
            "cn.hutool.core.collection.CollUtil:java.util.HashSet newHashSet(boolean,java.util.Iterator)",
            "cn.hutool.core.collection.CollUtil:java.util.List list(boolean,java.util.Iterator)",
            "cn.hutool.core.collection.CollUtil:java.util.List split(java.util.Collection,int)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection filter(java.util.Collection,cn.hutool.core.lang.Editor)",
            "cn.hutool.core.collection.CollUtil:java.util.List filter(java.util.List,cn.hutool.core.lang.Editor)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection filter(java.util.Collection,cn.hutool.core.lang.Filter)",
            "cn.hutool.core.collection.CollUtil:java.util.List filter(java.util.List,cn.hutool.core.lang.Filter)",
            "cn.hutool.core.collection.CollUtil:java.util.List extract(java.lang.Iterable,cn.hutool.core.lang.Editor)",
            "cn.hutool.core.collection.CollUtil:java.lang.Object findOne(java.lang.Iterable,cn.hutool.core.lang.Filter)",
            "cn.hutool.core.collection.CollUtil:int count(java.lang.Iterable,cn.hutool.core.lang.Matcher)",
            "cn.hutool.core.collection.CollUtil:java.util.TreeSet toTreeSet(java.util.Collection,java.util.Comparator)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection addAll(java.util.Collection,java.lang.Object,java.lang.reflect.Type)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection addAll(java.util.Collection,java.util.Iterator)",
            "cn.hutool.core.collection.CollUtil:java.util.List addAllIfNotContains(java.util.List,java.util.List)",
            "cn.hutool.core.collection.CollUtil:java.util.ArrayList valuesOfKeys(java.util.Map,java.util.Iterator)",
            "cn.hutool.core.collection.CollUtil:java.util.LinkedHashMap sortToMap(java.util.Collection,java.util.Comparator)",
            "cn.hutool.core.collection.CollUtil:void forEach(java.util.Iterator,cn.hutool.core.collection.CollUtil$Consumer)",
            "cn.hutool.core.collection.CollUtil:void forEach(java.util.Map,cn.hutool.core.collection.CollUtil$KVConsumer)",
            "cn.hutool.core.collection.CollUtil:java.util.List group(java.util.Collection,cn.hutool.core.collection.CollUtil$Hash)",
            "cn.hutool.core.collection.ConcurrentHashSet:void <init>(java.lang.Iterable)",
            "cn.hutool.core.collection.CopiedIter:void <init>(java.util.Iterator)",
            "cn.hutool.core.collection.CopiedIter:java.lang.Object next()",
            "cn.hutool.core.collection.IteratorEnumeration:java.lang.Object nextElement()",
            "cn.hutool.core.collection.IterUtil:boolean hasNull(java.util.Iterator)",
            "cn.hutool.core.collection.IterUtil:boolean isAllNull(java.util.Iterator)",
            "cn.hutool.core.collection.IterUtil:java.util.Map countMap(java.util.Iterator)",
            "cn.hutool.core.collection.IterUtil:java.util.Map fieldValueMap(java.util.Iterator,java.lang.String)",
            "cn.hutool.core.collection.IterUtil:java.util.Map fieldValueAsMap(java.util.Iterator,java.lang.String,java.lang.String)",
            "cn.hutool.core.collection.IterUtil:java.util.List fieldValueList(java.util.Iterator,java.lang.String)",
            "cn.hutool.core.collection.IterUtil:java.lang.String join(java.util.Iterator,java.lang.CharSequence,java.lang.String,java.lang.String)",
            "cn.hutool.core.collection.IterUtil:java.util.HashMap toMap(java.lang.Iterable)",
            "cn.hutool.core.collection.IterUtil:java.util.Map toMap(java.util.Iterator,java.util.Iterator)",
            "cn.hutool.core.collection.IterUtil:java.util.List toList(java.util.Iterator)",
            "cn.hutool.core.collection.IterUtil:java.lang.Object getFirst(java.util.Iterator)",
            "cn.hutool.core.comparator.ComparatorChain:int compare(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.convert.BasicType:void <clinit>()",
            "cn.hutool.core.convert.impl.ArrayConverter:java.lang.Object convertObjectToArray(java.lang.Object)",
            "cn.hutool.core.convert.impl.MapConverter:void convertMapToMap(java.util.Map,java.util.Map)",
            "cn.hutool.core.date.format.FastDateParser$TimeZoneStrategy:void <init>(java.util.Locale)",
            "cn.hutool.core.date.format.FastDateParser:java.util.Map appendDisplayNames(java.util.Calendar,java.util.Locale,int,java.lang.StringBuilder)",
            "cn.hutool.core.io.file.FileAppender:cn.hutool.core.io.file.FileAppender flush()",
            "cn.hutool.core.io.file.FileWriter:java.io.File writeLines(java.util.Collection,cn.hutool.core.io.file.LineSeparator,boolean)",
            "cn.hutool.core.io.file.FileWriter:java.io.File writeMap(java.util.Map,cn.hutool.core.io.file.LineSeparator,java.lang.String,boolean)",
            "cn.hutool.core.io.FileTypeUtil:java.lang.String getType(java.lang.String)",
            "cn.hutool.core.io.FileUtil:java.util.List listFileNames(java.lang.String)",
            "cn.hutool.core.io.resource.MultiFileResource:cn.hutool.core.io.resource.MultiFileResource add(java.util.Collection)",
            "cn.hutool.core.io.watch.watchers.WatcherChain:void onCreate(java.nio.file.WatchEvent,java.nio.file.Path)",
            "cn.hutool.core.io.watch.watchers.WatcherChain:void onModify(java.nio.file.WatchEvent,java.nio.file.Path)",
            "cn.hutool.core.io.watch.watchers.WatcherChain:void onDelete(java.nio.file.WatchEvent,java.nio.file.Path)",
            "cn.hutool.core.io.watch.watchers.WatcherChain:void onOverflow(java.nio.file.WatchEvent,java.nio.file.Path)",
            "cn.hutool.core.io.watch.WatchMonitor:void watch(cn.hutool.core.io.watch.Watcher)",
            "cn.hutool.core.lang.ClassScaner:java.util.Set scan()",
            "cn.hutool.core.lang.ClassScaner:void scanJar(java.util.jar.JarFile)",
            "cn.hutool.core.lang.ConsistentHash:void <init>(int,java.util.Collection)",
            "cn.hutool.core.lang.ConsistentHash:void <init>(cn.hutool.core.lang.ConsistentHash$HashFunc,int,java.util.Collection)",
            "cn.hutool.core.lang.Dict:void removeEqual(cn.hutool.core.lang.Dict,java.lang.String[])",
            "cn.hutool.core.lang.JarClassLoader:void loadJar(java.net.URLClassLoader,java.io.File)",
            "cn.hutool.core.lang.JarClassLoader:cn.hutool.core.lang.JarClassLoader addJar(java.io.File)",
            "cn.hutool.core.lang.SyncFinisher:void start()",
            "cn.hutool.core.lang.WeightRandom:void <init>(java.lang.Iterable)",
            "cn.hutool.core.map.CustomKeyLinkedMap:void putAll(java.util.Map)",
            "cn.hutool.core.map.CustomKeyMap:void putAll(java.util.Map)",
            "cn.hutool.core.map.MapUtil:java.util.HashMap of(java.lang.Object[])",
            "cn.hutool.core.map.MapUtil:java.util.Map toListMap(java.lang.Iterable)",
            "cn.hutool.core.map.MapUtil:java.util.List toMapList(java.util.Map)",
            "cn.hutool.core.map.MapUtil:java.lang.String join(java.util.Map,java.lang.String,java.lang.String,boolean)",
            "cn.hutool.core.map.MapUtil:java.util.Map filter(java.util.Map,cn.hutool.core.lang.Editor)",
            "cn.hutool.core.map.MapUtil:java.util.Map filter(java.util.Map,cn.hutool.core.lang.Filter)",
            "cn.hutool.core.map.MapUtil:java.util.Map inverse(java.util.Map)",
            "cn.hutool.core.text.csv.CsvRow:java.util.Map getFieldMap()",
            "cn.hutool.core.text.csv.CsvRow:java.lang.String toString()",
            "cn.hutool.core.text.csv.CsvWriter:cn.hutool.core.text.csv.CsvWriter write(java.util.Collection)",
            "cn.hutool.core.text.replacer.ReplacerChain:int replace(java.lang.CharSequence,int,cn.hutool.core.text.StrBuilder)",
            "cn.hutool.core.util.ClassLoaderUtil:void <clinit>()",
            "cn.hutool.core.util.ImageUtil:javax.imageio.ImageReader getReader(java.lang.String)",
            "cn.hutool.core.util.ObjectUtil:int length(java.lang.Object)",
            "cn.hutool.core.util.ObjectUtil:boolean contains(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.util.ReUtil:java.lang.String extractMulti(java.util.regex.Pattern,java.lang.String,java.lang.String)",
            "cn.hutool.core.util.ReUtil:java.lang.String extractMultiAndDelPre(java.util.regex.Pattern,cn.hutool.core.lang.Holder,java.lang.String)",
            "cn.hutool.core.util.ReUtil:java.lang.String replaceAll(java.lang.String,java.util.regex.Pattern,java.lang.String)",
            "cn.hutool.core.util.StrUtil:java.lang.String format(java.lang.CharSequence,java.util.Map)",
            "cn.hutool.core.util.XmlUtil:void mapToXml(org.w3c.dom.Document,org.w3c.dom.Element,java.util.Map)",
            "cn.hutool.cache.impl.CacheObjIterator:void nextValue()",
            "cn.hutool.cache.impl.FIFOCache:int pruneCache()",
            "cn.hutool.cache.impl.LFUCache:int pruneCache()",
            "cn.hutool.cache.impl.LRUCache:int pruneCache()",
            "cn.hutool.cache.impl.TimedCache:int pruneCache()",
            "cn.hutool.db.ds.c3p0.C3p0DSFactory:void destroy()",
            "cn.hutool.db.ds.dbcp.DbcpDSFactory:void destroy()",
            "cn.hutool.db.ds.druid.DruidDSFactory:void destroy()",
            "cn.hutool.db.ds.druid.DruidDSFactory:com.alibaba.druid.pool.DruidDataSource createDataSource(java.lang.String)",
            "cn.hutool.db.ds.hikari.HikariDSFactory:void destroy()",
            "cn.hutool.db.ds.pooled.PooledDataSource:void close()",
            "cn.hutool.db.ds.pooled.PooledDSFactory:void destroy()",
            "cn.hutool.db.ds.simple.SimpleDSFactory:void destroy()",
            "cn.hutool.db.ds.tomcat.TomcatDSFactory:void destroy()",
            "cn.hutool.db.nosql.mongo.MongoFactory:void closeAll()",
            "cn.hutool.db.sql.SqlBuilder:cn.hutool.db.sql.SqlBuilder insert(cn.hutool.db.Entity,cn.hutool.db.dialect.DialectName)",
            "cn.hutool.db.sql.SqlBuilder:cn.hutool.db.sql.SqlBuilder update(cn.hutool.db.Entity)",
            "cn.hutool.db.sql.SqlUtil:java.lang.String buildEqualsWhere(cn.hutool.db.Entity,java.util.List)",
            "cn.hutool.db.sql.SqlUtil:cn.hutool.db.sql.Condition[] buildConditions(cn.hutool.db.Entity)",
            "cn.hutool.db.sql.Wrapper:cn.hutool.db.Entity wrap(cn.hutool.db.Entity)",
            "cn.hutool.dfa.WordTree:void addWords(java.util.Collection)",
            "cn.hutool.dfa.WordTree:void addWords(java.lang.String[])",
            "cn.hutool.extra.servlet.ServletUtil:java.util.Map getParamMap(javax.servlet.ServletRequest)",
            "cn.hutool.extra.ssh.JschSessionPool:void closeAll()",
            "cn.hutool.extra.ssh.Sftp:boolean delDir(java.lang.String)",
            "cn.hutool.extra.ssh.Sftp:boolean containsIgnoreCase(java.util.List,java.lang.String)",
            "cn.hutool.extra.template.engine.velocity.VelocityUtil:void merge(org.apache.velocity.Template,org.apache.velocity.VelocityContext,java.io.Writer)",
            "cn.hutool.http.GlobalHeaders:cn.hutool.http.GlobalHeaders header(java.util.Map)",
            "cn.hutool.http.HTMLFilter:java.lang.String checkTags(java.lang.String)",
            "cn.hutool.http.HttpBase:java.lang.Object header(java.util.Map,boolean)",
            "cn.hutool.http.HttpBase:java.lang.Object addHeaders(java.util.Map)",
            "cn.hutool.http.HttpBase:java.lang.String toString()",
            "cn.hutool.http.HttpConnection:cn.hutool.http.HttpConnection header(java.util.Map,boolean)",
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest form(java.util.Map)",
            "cn.hutool.http.HttpRequest:void writeForm(java.io.OutputStream)",
            "cn.hutool.http.HttpRequest:void writeFileForm(java.io.OutputStream)",
            "cn.hutool.http.HttpRequest:void appendPart(java.lang.String,cn.hutool.core.io.resource.Resource,java.io.OutputStream)",
            "cn.hutool.http.HttpResponse:java.net.HttpCookie getCookie(java.lang.String)",
            "cn.hutool.http.HttpResponse:java.lang.String toString()",
            "cn.hutool.http.HttpUtil:java.lang.String toParams(java.util.Map,java.nio.charset.Charset)",
            "cn.hutool.http.HttpUtil:java.util.HashMap decodeParamMap(java.lang.String,java.lang.String)",
            "cn.hutool.http.webservice.SoapRequest:java.lang.String toSoapXml()",
            "cn.hutool.setting.GroupedMap:int size()",
            "cn.hutool.setting.GroupedMap:cn.hutool.setting.GroupedMap putAll(java.lang.String,java.util.Map)",
            "cn.hutool.setting.Setting:java.util.Properties toProperties()",
            "cn.hutool.setting.SettingLoader:void store(java.io.PrintWriter)",
            "cn.hutool.setting.SettingLoader:java.lang.String replaceVar(java.lang.String,java.lang.String)",
            "cn.hutool.cron.pattern.CronPattern:void parseGroupPattern(java.lang.String)",
            "cn.hutool.cron.pattern.matcher.BoolArrayValueMatcher:void <init>(java.util.List)",
            "cn.hutool.cron.pattern.matcher.ValueMatcherBuilder:java.util.List parseArray(java.lang.String,cn.hutool.cron.pattern.parser.ValueParser)",
            "cn.hutool.cron.Scheduler:cn.hutool.cron.Scheduler schedule(cn.hutool.setting.Setting)",
            "cn.hutool.json.JSONArray:void <init>(java.lang.Iterable)",
            "cn.hutool.json.JSONArray:void <init>(java.util.Collection)",
            "cn.hutool.json.JSONArray:void <init>(java.lang.Object,boolean)",
            "cn.hutool.json.JSONArray:boolean addAll(java.util.Collection)",
            "cn.hutool.json.JSONArray:boolean addAll(int,java.util.Collection)",
            "cn.hutool.json.JSONObject:void <init>(java.lang.Object,boolean)",
            "cn.hutool.json.JSONObject:cn.hutool.json.JSONArray toJSONArray(java.util.Collection)",
            "cn.hutool.json.JSONObject:void putAll(java.util.Map)",
            "cn.hutool.json.JSONObject:java.io.Writer write(java.io.Writer,int,int)",
            "cn.hutool.json.JSONObject:void populateMap(java.lang.Object)",
            "cn.hutool.json.JSONObjectIter$1:cn.hutool.json.JSONObject next()",
            "cn.hutool.json.XML:java.lang.String toXml(java.lang.Object,java.lang.String)",
            "cn.hutool.poi.excel.ExcelPicUtil:java.util.Map getPicMapXls(org.apache.poi.hssf.usermodel.HSSFWorkbook,int)",
            "cn.hutool.poi.excel.ExcelPicUtil:java.util.Map getPicMapXlsx(org.apache.poi.xssf.usermodel.XSSFWorkbook,int)",
            "cn.hutool.poi.excel.ExcelReader:java.util.List read(int,int,int,java.lang.Class)",
            "cn.hutool.poi.excel.ExcelReader:java.util.List aliasHeader(java.util.List)",
            "cn.hutool.poi.excel.ExcelWriter:cn.hutool.poi.excel.ExcelWriter write(java.lang.Iterable)",
            "cn.hutool.poi.excel.ExcelWriter:cn.hutool.poi.excel.ExcelWriter write(java.lang.Iterable,java.util.Comparator)",
            "cn.hutool.poi.excel.ExcelWriter:java.util.Collection aliasHeader(java.util.Collection)",
            "cn.hutool.poi.excel.RowUtil:void writeRow(org.apache.poi.ss.usermodel.Row,java.lang.Iterable,cn.hutool.poi.excel.StyleSet,boolean)",
            "cn.hutool.poi.excel.sax.Excel07SaxReader:cn.hutool.poi.excel.sax.Excel07SaxReader read(org.apache.poi.openxml4j.opc.OPCPackage,int)"
        ]
    },
    "cn.hutool.db.ds.pooled.PooledDataSource:boolean free(cn.hutool.db.ds.pooled.PooledConnection)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.ds.pooled.PooledConnection:void close()"
        ]
    },
    "cn.hutool.core.util.ReflectUtil:java.lang.reflect.Constructor getConstructor(java.lang.Class,java.lang.Class[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ReflectUtil:java.lang.Object newInstance(java.lang.Class,java.lang.Object[])"
        ]
    },
    "cn.hutool.core.util.ReflectUtil:java.lang.reflect.Method getMethod(java.lang.Class,boolean,java.lang.String,java.lang.Class[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ReflectUtil:java.lang.reflect.Method getMethodIgnoreCase(java.lang.Class,java.lang.String,java.lang.Class[])",
            "cn.hutool.core.util.ReflectUtil:java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[])"
        ]
    },
    "cn.hutool.core.util.ClassUtil:boolean isBasicType(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ClassUtil:boolean isAllAssignableFrom(java.lang.Class[],java.lang.Class[])",
            "cn.hutool.core.util.ClassUtil:boolean isSimpleValueType(java.lang.Class)",
            "cn.hutool.core.util.ObjectUtil:boolean isBasicType(java.lang.Object)"
        ]
    },
    "cn.hutool.core.convert.impl.MapConverter:java.lang.Object convertInternal(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.AbstractConverter:java.lang.Object convert(java.lang.Object,java.lang.Object)"
        ]
    },
    "cn.hutool.core.date.format.FastDateParser:cn.hutool.core.date.format.FastDateParser$Strategy getStrategy(char,int,java.util.Calendar)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.date.format.FastDateParser:cn.hutool.core.date.format.FastDateParser$Strategy access$100(cn.hutool.core.date.format.FastDateParser,char,int,java.util.Calendar)"
        ]
    },
    "cn.hutool.core.date.format.FastDateParser$CaseInsensitiveTextStrategy:void <init>(int,java.util.Calendar,java.util.Locale)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.date.format.FastDateParser:cn.hutool.core.date.format.FastDateParser$Strategy getLocaleSpecificStrategy(int,java.util.Calendar)"
        ]
    },
    "cn.hutool.core.io.file.FileWriter:java.io.File writeLines(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.file.FileWriter:java.io.File appendLines(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.FileUtil:java.io.File writeLines(java.util.Collection,java.io.File,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.FileUtil:java.io.File writeLines(java.util.Collection,java.io.File,java.lang.String)",
            "cn.hutool.core.io.FileUtil:java.io.File appendLines(java.util.Collection,java.io.File,java.lang.String)",
            "cn.hutool.core.io.FileUtil:java.io.File writeLines(java.util.Collection,java.lang.String,java.lang.String,boolean)"
        ]
    },
    "cn.hutool.core.io.FileUtil:java.io.File writeLines(java.util.Collection,java.io.File,java.nio.charset.Charset,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.FileUtil:java.io.File writeLines(java.util.Collection,java.io.File,java.nio.charset.Charset)",
            "cn.hutool.core.io.FileUtil:java.io.File appendLines(java.util.Collection,java.io.File,java.nio.charset.Charset)",
            "cn.hutool.core.io.FileUtil:java.io.File writeLines(java.util.Collection,java.lang.String,java.nio.charset.Charset,boolean)"
        ]
    },
    "cn.hutool.core.io.FileUtil:java.io.File writeUtf8Map(java.util.Map,java.io.File,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.FileUtil:java.io.File writeMap(java.util.Map,java.io.File,java.nio.charset.Charset,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.lang.ClassScaner:java.util.Set scanPackageByAnnotation(java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ClassUtil:java.util.Set scanPackageByAnnotation(java.lang.String,java.lang.Class)"
        ]
    },
    "cn.hutool.core.lang.ClassScaner:java.util.Set scanPackageBySuper(java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ClassUtil:java.util.Set scanPackageBySuper(java.lang.String,java.lang.Class)"
        ]
    },
    "cn.hutool.core.lang.ClassScaner:java.util.Set scanPackage()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ClassUtil:java.util.Set scanPackage()"
        ]
    },
    "cn.hutool.core.lang.ClassScaner:java.util.Set scanPackage(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ClassUtil:java.util.Set scanPackage(java.lang.String)"
        ]
    },
    "cn.hutool.core.util.ClassUtil:java.util.Set scanPackage(java.lang.String,cn.hutool.core.lang.Filter)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.lang.ClassScaner:void scanJavaClassPaths()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.lang.ClassScaner:java.util.Set scan()"
        ]
    },
    "cn.hutool.core.map.CamelCaseLinkedMap:void <init>(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.map.MapUtil:java.util.Map toCamelCaseMap(java.util.Map)"
        ]
    },
    "cn.hutool.core.map.CaseInsensitiveLinkedMap:void <init>(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.map.CaseInsensitiveLinkedMap:void <init>(float,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.map.CamelCaseMap:void <init>(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.map.MapUtil:java.util.Map toCamelCaseMap(java.util.Map)"
        ]
    },
    "cn.hutool.core.map.CaseInsensitiveMap:void <init>(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.copier.provider.MapValueProvider:void <init>(java.util.Map,boolean)",
            "cn.hutool.http.HttpBase:java.util.List headerList(java.lang.String)"
        ]
    },
    "cn.hutool.core.map.CaseInsensitiveMap:void <init>(float,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.BeanDesc:java.util.Map getPropMap(boolean)"
        ]
    },
    "cn.hutool.core.map.MapBuilder:java.lang.String join(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.map.MapBuilder:java.lang.String joinIgnoreNull(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.SecureUtil:java.lang.String signParams(cn.hutool.crypto.symmetric.SymmetricCrypto,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.SecureUtil:java.lang.String signParams(cn.hutool.crypto.digest.DigestAlgorithm,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.SecureUtil:java.lang.String signParamsMd5(java.util.Map)",
            "cn.hutool.crypto.SecureUtil:java.lang.String signParamsSha1(java.util.Map)",
            "cn.hutool.crypto.SecureUtil:java.lang.String signParamsSha256(java.util.Map)"
        ]
    },
    "cn.hutool.core.bean.BeanPath:java.lang.Object getFieldValue(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.BeanPath:java.lang.Object get(java.util.List,java.lang.Object,boolean)"
        ]
    },
    "cn.hutool.core.collection.CollUtil$6:int compare(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.collection.BoundedPriorityQueue$1:int compare(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.collection.BoundedPriorityQueue:boolean offer(java.lang.Object)",
            "cn.hutool.core.comparator.ComparatorChain:int compare(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.comparator.ReverseComparator:int compare(java.lang.Object,java.lang.Object)"
        ]
    },
    "cn.hutool.core.convert.impl.AtomicBooleanConverter:java.util.concurrent.atomic.AtomicBoolean convertInternal(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.impl.AtomicBooleanConverter:java.lang.Object convertInternal(java.lang.Object)"
        ]
    },
    "cn.hutool.core.convert.impl.BooleanConverter:java.lang.Boolean convertInternal(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.impl.BooleanConverter:java.lang.Object convertInternal(java.lang.Object)"
        ]
    },
    "cn.hutool.core.convert.impl.CalendarConverter:java.util.Calendar convertInternal(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.impl.CalendarConverter:java.lang.Object convertInternal(java.lang.Object)"
        ]
    },
    "cn.hutool.core.convert.impl.CharacterConverter:java.lang.Character convertInternal(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.impl.CharacterConverter:java.lang.Object convertInternal(java.lang.Object)"
        ]
    },
    "cn.hutool.core.convert.impl.CharsetConverter:java.nio.charset.Charset convertInternal(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.impl.CharsetConverter:java.lang.Object convertInternal(java.lang.Object)"
        ]
    },
    "cn.hutool.core.convert.impl.ClassConverter:java.lang.Class convertInternal(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.impl.ClassConverter:java.lang.Object convertInternal(java.lang.Object)"
        ]
    },
    "cn.hutool.core.convert.impl.DateConverter:java.util.Date convertInternal(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.impl.DateConverter:java.lang.Object convertInternal(java.lang.Object)"
        ]
    },
    "cn.hutool.core.convert.impl.EnumConverter:java.lang.Object convertInternal(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.AbstractConverter:java.lang.Object convert(java.lang.Object,java.lang.Object)"
        ]
    },
    "cn.hutool.core.convert.impl.GenericEnumConverter:java.lang.Enum convertInternal(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.impl.GenericEnumConverter:java.lang.Object convertInternal(java.lang.Object)"
        ]
    },
    "cn.hutool.core.convert.impl.NumberConverter:java.lang.String convertToStr(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.impl.NumberConverter:java.lang.Number convertInternal(java.lang.Object)",
            "cn.hutool.core.convert.impl.NumberConverter:java.math.BigDecimal toBigDecimal(java.lang.Object)",
            "cn.hutool.core.convert.impl.NumberConverter:java.math.BigInteger toBigInteger(java.lang.Object)"
        ]
    },
    "cn.hutool.core.convert.impl.PathConverter:java.nio.file.Path convertInternal(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.impl.PathConverter:java.lang.Object convertInternal(java.lang.Object)"
        ]
    },
    "cn.hutool.core.convert.impl.PrimitiveConverter:java.lang.Object convertInternal(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.AbstractConverter:java.lang.Object convert(java.lang.Object,java.lang.Object)"
        ]
    },
    "cn.hutool.core.convert.impl.StringConverter:java.lang.String convertInternal(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.impl.StringConverter:java.lang.Object convertInternal(java.lang.Object)"
        ]
    },
    "cn.hutool.core.convert.impl.TimeZoneConverter:java.util.TimeZone convertInternal(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.impl.TimeZoneConverter:java.lang.Object convertInternal(java.lang.Object)"
        ]
    },
    "cn.hutool.core.convert.impl.URIConverter:java.net.URI convertInternal(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.impl.URIConverter:java.lang.Object convertInternal(java.lang.Object)"
        ]
    },
    "cn.hutool.core.convert.impl.URLConverter:java.net.URL convertInternal(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.impl.URLConverter:java.lang.Object convertInternal(java.lang.Object)"
        ]
    },
    "cn.hutool.core.convert.impl.UUIDConverter:java.util.UUID convertInternal(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.impl.UUIDConverter:java.lang.Object convertInternal(java.lang.Object)"
        ]
    },
    "cn.hutool.core.convert.impl.CurrencyConverter:java.lang.Object convertInternal(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.AbstractConverter:java.lang.Object convert(java.lang.Object,java.lang.Object)"
        ]
    },
    "cn.hutool.core.convert.Convert:java.lang.String numberToWord(java.lang.Number)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.getter.OptNullBasicTypeGetter:java.lang.Object getObj(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.getter.OptNullBasicTypeFromObjectGetter:java.lang.String getStr(java.lang.Object,java.lang.String)",
            "cn.hutool.core.getter.OptNullBasicTypeFromObjectGetter:java.lang.Integer getInt(java.lang.Object,java.lang.Integer)",
            "cn.hutool.core.getter.OptNullBasicTypeFromObjectGetter:java.lang.Short getShort(java.lang.Object,java.lang.Short)",
            "cn.hutool.core.getter.OptNullBasicTypeFromObjectGetter:java.lang.Boolean getBool(java.lang.Object,java.lang.Boolean)",
            "cn.hutool.core.getter.OptNullBasicTypeFromObjectGetter:java.lang.Long getLong(java.lang.Object,java.lang.Long)",
            "cn.hutool.core.getter.OptNullBasicTypeFromObjectGetter:java.lang.Character getChar(java.lang.Object,java.lang.Character)",
            "cn.hutool.core.getter.OptNullBasicTypeFromObjectGetter:java.lang.Float getFloat(java.lang.Object,java.lang.Float)",
            "cn.hutool.core.getter.OptNullBasicTypeFromObjectGetter:java.lang.Double getDouble(java.lang.Object,java.lang.Double)",
            "cn.hutool.core.getter.OptNullBasicTypeFromObjectGetter:java.lang.Byte getByte(java.lang.Object,java.lang.Byte)",
            "cn.hutool.core.getter.OptNullBasicTypeFromObjectGetter:java.math.BigDecimal getBigDecimal(java.lang.Object,java.math.BigDecimal)",
            "cn.hutool.core.getter.OptNullBasicTypeFromObjectGetter:java.math.BigInteger getBigInteger(java.lang.Object,java.math.BigInteger)",
            "cn.hutool.core.getter.OptNullBasicTypeFromObjectGetter:java.lang.Enum getEnum(java.lang.Class,java.lang.Object,java.lang.Enum)",
            "cn.hutool.core.getter.OptNullBasicTypeFromObjectGetter:java.util.Date getDate(java.lang.Object,java.util.Date)",
            "cn.hutool.json.JSONArray:boolean isNull(int)",
            "cn.hutool.json.JSONArray:cn.hutool.json.JSONObject toJSONObject(cn.hutool.json.JSONArray)",
            "cn.hutool.json.JSONGetter:cn.hutool.json.JSONArray getJSONArray(java.lang.Object)",
            "cn.hutool.json.JSONGetter:cn.hutool.json.JSONObject getJSONObject(java.lang.Object)",
            "cn.hutool.json.JSONGetter:java.lang.Object get(java.lang.Object,java.lang.Class,boolean)",
            "cn.hutool.json.JSONObject:void <init>(cn.hutool.json.JSONObject,java.lang.String[])",
            "cn.hutool.json.JSONObject:boolean isNull(java.lang.String)",
            "cn.hutool.json.JSONObject:cn.hutool.json.JSONObject accumulate(java.lang.String,java.lang.Object)",
            "cn.hutool.json.JSONObject:cn.hutool.json.JSONObject append(java.lang.String,java.lang.Object)",
            "cn.hutool.json.JSONObject:cn.hutool.json.JSONObject increment(java.lang.String)"
        ]
    },
    "cn.hutool.core.lang.ConsistentHash:java.lang.Object get(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.map.CustomKeyLinkedMap:java.lang.Object get(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.annotation.CombinationAnnotationElement:java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)",
            "cn.hutool.core.bean.BeanDesc:cn.hutool.core.bean.BeanDesc$PropDesc getProp(java.lang.String)",
            "cn.hutool.core.bean.BeanDesc:java.lang.reflect.Field getField(java.lang.String)",
            "cn.hutool.core.bean.BeanDesc:java.lang.reflect.Method getGetter(java.lang.String)",
            "cn.hutool.core.bean.BeanDesc:java.lang.reflect.Method getSetter(java.lang.String)",
            "cn.hutool.core.bean.BeanUtil:java.beans.PropertyDescriptor getPropertyDescriptor(java.lang.Class,java.lang.String,boolean)",
            "cn.hutool.core.bean.BeanUtil:java.lang.Object getFieldValue(java.lang.Object,java.lang.String)",
            "cn.hutool.core.bean.copier.BeanCopier:void valueProviderToBean(cn.hutool.core.bean.copier.ValueProvider,java.lang.Object)",
            "cn.hutool.core.bean.copier.provider.BeanValueProvider:java.lang.Object value(java.lang.String,java.lang.reflect.Type)",
            "cn.hutool.core.bean.copier.provider.MapValueProvider:java.lang.Object value(java.lang.String,java.lang.reflect.Type)",
            "cn.hutool.core.bean.DynaBean:java.lang.Object get(java.lang.String)",
            "cn.hutool.core.collection.CollUtil$4:java.lang.Object edit(java.lang.Object)",
            "cn.hutool.core.collection.CollUtil$5:boolean accept(java.lang.Object)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection union(java.util.Collection,java.util.Collection)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection intersection(java.util.Collection,java.util.Collection)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection disjunction(java.util.Collection,java.util.Collection)",
            "cn.hutool.core.collection.CollUtil:java.util.ArrayList valuesOfKeys(java.util.Map,java.lang.Object[])",
            "cn.hutool.core.collection.CollUtil:java.util.ArrayList valuesOfKeys(java.util.Map,java.util.Iterator)",
            "cn.hutool.core.collection.IterUtil:java.util.Map countMap(java.util.Iterator)",
            "cn.hutool.core.convert.BasicType:java.lang.Class wrap(java.lang.Class)",
            "cn.hutool.core.convert.BasicType:java.lang.Class unWrap(java.lang.Class)",
            "cn.hutool.core.convert.ConverterRegistry:cn.hutool.core.convert.Converter getDefaultConverter(java.lang.reflect.Type)",
            "cn.hutool.core.convert.ConverterRegistry:cn.hutool.core.convert.Converter getCustomConverter(java.lang.reflect.Type)",
            "cn.hutool.core.date.format.FastDateParser$CaseInsensitiveTextStrategy:void setCalendar(cn.hutool.core.date.format.FastDateParser,java.util.Calendar,java.lang.String)",
            "cn.hutool.core.date.format.FastDateParser$TimeZoneStrategy:void setCalendar(cn.hutool.core.date.format.FastDateParser,java.util.Calendar,java.lang.String)",
            "cn.hutool.core.exceptions.ExceptionUtil:java.lang.String stacktraceToString(java.lang.Throwable,int,java.util.Map)",
            "cn.hutool.core.io.watch.WatchMonitor:void watch(cn.hutool.core.io.watch.Watcher)",
            "cn.hutool.core.lang.SimpleCache:java.lang.Object get(java.lang.Object)",
            "cn.hutool.core.lang.Singleton:java.lang.Object get(java.lang.Class,java.lang.Object[])",
            "cn.hutool.core.map.MapProxy:java.lang.Object getObj(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.map.MapProxy:java.lang.Object get(java.lang.Object)",
            "cn.hutool.core.map.MapUtil:java.util.Map toListMap(java.lang.Iterable)",
            "cn.hutool.core.map.MapUtil:java.util.Map filter(java.util.Map,java.lang.Object[])",
            "cn.hutool.core.map.MapUtil:java.lang.Object get(java.util.Map,java.lang.Object,java.lang.Class)",
            "cn.hutool.core.text.csv.CsvRow:java.lang.String getByName(java.lang.String)",
            "cn.hutool.core.text.csv.CsvRow:java.util.Map getFieldMap()",
            "cn.hutool.core.text.replacer.LookupReplacer:int replace(java.lang.CharSequence,int,cn.hutool.core.text.StrBuilder)",
            "cn.hutool.core.util.ClassLoaderUtil:java.lang.Class loadPrimitiveClass(java.lang.String)",
            "cn.hutool.core.util.ClassUtil:boolean isAssignable(java.lang.Class,java.lang.Class)",
            "cn.hutool.core.util.IdcardUtil:boolean isvalidCard15(java.lang.String)",
            "cn.hutool.core.util.IdcardUtil:boolean isValidTWCard(java.lang.String)",
            "cn.hutool.core.util.IdcardUtil:java.lang.String getProvinceByIdCard(java.lang.String)",
            "cn.hutool.cache.impl.AbstractCache:boolean containsKey(java.lang.Object)",
            "cn.hutool.cache.impl.AbstractCache:java.lang.Object get(java.lang.Object,boolean)",
            "cn.hutool.db.dialect.DialectFactory:cn.hutool.db.dialect.Dialect getDialect(javax.sql.DataSource)",
            "cn.hutool.db.ds.c3p0.C3p0DSFactory:javax.sql.DataSource getDataSource(java.lang.String)",
            "cn.hutool.db.ds.c3p0.C3p0DSFactory:void close(java.lang.String)",
            "cn.hutool.db.ds.dbcp.DbcpDSFactory:javax.sql.DataSource getDataSource(java.lang.String)",
            "cn.hutool.db.ds.dbcp.DbcpDSFactory:void close(java.lang.String)",
            "cn.hutool.db.ds.druid.DruidDSFactory:javax.sql.DataSource getDataSource(java.lang.String)",
            "cn.hutool.db.ds.druid.DruidDSFactory:void close(java.lang.String)",
            "cn.hutool.db.ds.hikari.HikariDSFactory:javax.sql.DataSource getDataSource(java.lang.String)",
            "cn.hutool.db.ds.hikari.HikariDSFactory:void close(java.lang.String)",
            "cn.hutool.db.ds.jndi.JndiDSFactory:javax.sql.DataSource getDataSource(java.lang.String)",
            "cn.hutool.db.ds.pooled.PooledDSFactory:javax.sql.DataSource getDataSource(java.lang.String)",
            "cn.hutool.db.ds.pooled.PooledDSFactory:void close(java.lang.String)",
            "cn.hutool.db.ds.simple.SimpleDSFactory:javax.sql.DataSource getDataSource(java.lang.String)",
            "cn.hutool.db.ds.simple.SimpleDSFactory:void close(java.lang.String)",
            "cn.hutool.db.ds.tomcat.TomcatDSFactory:org.apache.tomcat.jdbc.pool.DataSource getDataSource(java.lang.String)",
            "cn.hutool.db.ds.tomcat.TomcatDSFactory:void close(java.lang.String)",
            "cn.hutool.db.handler.HandleHelper:java.lang.Object handleRow(int,java.sql.ResultSetMetaData,java.sql.ResultSet,java.lang.Class)",
            "cn.hutool.db.nosql.mongo.MongoFactory:cn.hutool.db.nosql.mongo.MongoDS getDS(java.lang.String,int)",
            "cn.hutool.db.nosql.mongo.MongoFactory:cn.hutool.db.nosql.mongo.MongoDS getDS(java.lang.String[])",
            "cn.hutool.db.nosql.mongo.MongoFactory:cn.hutool.db.nosql.mongo.MongoDS getDS(cn.hutool.setting.Setting,java.lang.String[])",
            "cn.hutool.db.sql.NamedSql:void parse(java.lang.String,java.util.Map)",
            "cn.hutool.db.ThreadLocalConnection$GroupedConnection:java.sql.Connection get(javax.sql.DataSource)",
            "cn.hutool.db.ThreadLocalConnection$GroupedConnection:cn.hutool.db.ThreadLocalConnection$GroupedConnection close(javax.sql.DataSource)",
            "cn.hutool.extra.servlet.multipart.MultipartFormData:java.lang.String getParam(java.lang.String)",
            "cn.hutool.extra.servlet.multipart.MultipartFormData:java.lang.String[] getArrayParam(java.lang.String)",
            "cn.hutool.extra.servlet.multipart.MultipartFormData:cn.hutool.extra.servlet.multipart.UploadFile[] getFiles(java.lang.String)",
            "cn.hutool.extra.servlet.multipart.MultipartFormData:void putFile(java.lang.String,cn.hutool.extra.servlet.multipart.UploadFile)",
            "cn.hutool.extra.servlet.multipart.MultipartFormData:void putParameter(java.lang.String,java.lang.String)",
            "cn.hutool.extra.servlet.ServletUtil:javax.servlet.http.Cookie getCookie(javax.servlet.http.HttpServletRequest,java.lang.String)",
            "cn.hutool.extra.ssh.JschSessionPool:com.jcraft.jsch.Session get(java.lang.String)",
            "cn.hutool.extra.ssh.JschSessionPool:void close(java.lang.String)",
            "cn.hutool.http.GlobalHeaders:java.util.List headerList(java.lang.String)",
            "cn.hutool.http.GlobalHeaders:cn.hutool.http.GlobalHeaders header(java.lang.String,java.lang.String,boolean)",
            "cn.hutool.http.HTMLFilter:void <init>(java.util.Map)",
            "cn.hutool.http.HTMLFilter:java.lang.String checkTags(java.lang.String)",
            "cn.hutool.http.HTMLFilter:java.lang.String processTag(java.lang.String)",
            "cn.hutool.http.HTMLFilter:boolean allowedAttribute(java.lang.String,java.lang.String)",
            "cn.hutool.http.HttpBase:java.lang.Object header(java.lang.String,java.lang.String,boolean)",
            "cn.hutool.http.HttpUtil:void addParam(java.util.Map,java.lang.String,java.lang.String,java.lang.String)",
            "cn.hutool.log.LogFactory:cn.hutool.log.Log getLog(java.lang.String)",
            "cn.hutool.log.LogFactory:cn.hutool.log.Log getLog(java.lang.Class)",
            "cn.hutool.setting.profile.Profile:cn.hutool.setting.Setting getSetting(java.lang.String)",
            "cn.hutool.setting.SettingUtil:cn.hutool.setting.Setting get(java.lang.String)",
            "cn.hutool.json.JSONObject:java.lang.Object get(java.lang.Object)",
            "cn.hutool.json.JSONObject:java.lang.Object getObj(java.lang.String,java.lang.Object)",
            "cn.hutool.json.JSONObject:java.io.Writer write(java.io.Writer,int,int)",
            "cn.hutool.json.XMLTokener:java.lang.Object nextEntity(char)",
            "cn.hutool.poi.excel.ExcelReader:java.util.List aliasHeader(java.util.List)",
            "cn.hutool.poi.excel.ExcelWriter:java.util.Collection aliasHeader(java.util.Collection)"
        ]
    },
    "cn.hutool.core.map.CustomKeyLinkedMap:java.lang.Object put(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.annotation.AnnotationUtil:java.util.Map getAnnotationValueMap(java.lang.reflect.AnnotatedElement,java.lang.Class)",
            "cn.hutool.core.annotation.CombinationAnnotationElement:void parseDeclared(java.lang.'annotation'.Annotation[])",
            "cn.hutool.core.annotation.CombinationAnnotationElement:void parse(java.lang.'annotation'.Annotation[])",
            "cn.hutool.core.bean.BeanDesc:cn.hutool.core.bean.BeanDesc init()",
            "cn.hutool.core.bean.BeanUtil:java.util.Map internalGetPropertyDescriptorMap(java.lang.Class,boolean)",
            "cn.hutool.core.bean.BeanUtil:void setFieldValue(java.lang.Object,java.lang.String,java.lang.Object)",
            "cn.hutool.core.bean.BeanUtil:java.util.Map beanToMap(java.lang.Object,java.util.Map,boolean,cn.hutool.core.lang.Editor)",
            "cn.hutool.core.bean.DynaBean:void set(java.lang.String,java.lang.Object)",
            "cn.hutool.core.collection.CollUtil:java.util.Map zip(java.util.Collection,java.util.Collection)",
            "cn.hutool.core.collection.IterUtil:java.util.Map countMap(java.util.Iterator)",
            "cn.hutool.core.collection.IterUtil:java.util.Map fieldValueMap(java.util.Iterator,java.lang.String)",
            "cn.hutool.core.collection.IterUtil:java.util.Map fieldValueAsMap(java.util.Iterator,java.lang.String,java.lang.String)",
            "cn.hutool.core.collection.IterUtil:java.util.HashMap toMap(java.lang.Iterable)",
            "cn.hutool.core.collection.IterUtil:java.util.Map toMap(java.util.Iterator,java.util.Iterator)",
            "cn.hutool.core.convert.BasicType:void <clinit>()",
            "cn.hutool.core.convert.ConverterRegistry:cn.hutool.core.convert.ConverterRegistry putCustom(java.lang.reflect.Type,cn.hutool.core.convert.Converter)",
            "cn.hutool.core.convert.ConverterRegistry:cn.hutool.core.convert.ConverterRegistry defaultConverter()",
            "cn.hutool.core.convert.impl.MapConverter:void convertMapToMap(java.util.Map,java.util.Map)",
            "cn.hutool.core.date.format.FastDateParser$TimeZoneStrategy:void <init>(java.util.Locale)",
            "cn.hutool.core.date.format.FastDateParser:java.util.Map appendDisplayNames(java.util.Calendar,java.util.Locale,int,java.lang.StringBuilder)",
            "cn.hutool.core.exceptions.ExceptionUtil:java.lang.String stacktraceToOneLineString(java.lang.Throwable,int)",
            "cn.hutool.core.io.FileTypeUtil:java.lang.String putFileType(java.lang.String,java.lang.String)",
            "cn.hutool.core.io.FileTypeUtil:void <clinit>()",
            "cn.hutool.core.io.watch.WatchMonitor:void registerPath(java.nio.file.Path,int)",
            "cn.hutool.core.lang.SimpleCache:java.lang.Object put(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.lang.Singleton:java.lang.Object get(java.lang.Class,java.lang.Object[])",
            "cn.hutool.core.lang.Singleton:void put(java.lang.Object)",
            "cn.hutool.core.map.CustomKeyLinkedMap:void putAll(java.util.Map)",
            "cn.hutool.core.map.MapBuilder:cn.hutool.core.map.MapBuilder put(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.map.MapProxy:java.lang.Object put(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.map.MapUtil:java.util.HashMap of(java.lang.Object,java.lang.Object,boolean)",
            "cn.hutool.core.map.MapUtil:java.util.HashMap of(java.lang.Object[])",
            "cn.hutool.core.map.MapUtil:java.util.Map toListMap(java.lang.Iterable)",
            "cn.hutool.core.map.MapUtil:java.util.List toMapList(java.util.Map)",
            "cn.hutool.core.map.MapUtil:java.util.Map filter(java.util.Map,cn.hutool.core.lang.Editor)",
            "cn.hutool.core.map.MapUtil:java.util.Map filter(java.util.Map,cn.hutool.core.lang.Filter)",
            "cn.hutool.core.map.MapUtil:java.util.Map filter(java.util.Map,java.lang.Object[])",
            "cn.hutool.core.map.MapUtil:java.util.Map inverse(java.util.Map)",
            "cn.hutool.core.text.replacer.LookupReplacer:void <init>(java.lang.String[][])",
            "cn.hutool.core.util.ArrayUtil:java.util.Map zip(java.lang.Object[],java.lang.Object[],boolean)",
            "cn.hutool.core.util.ClassLoaderUtil:void <clinit>()",
            "cn.hutool.core.util.EnumUtil:java.util.Map getNameFieldMap(java.lang.Class,java.lang.String)",
            "cn.hutool.core.util.IdcardUtil:void <clinit>()",
            "cn.hutool.core.util.XmlUtil:java.util.Map xmlToMap(org.w3c.dom.Node,java.util.Map)",
            "cn.hutool.cache.impl.AbstractCache:void put(java.lang.Object,java.lang.Object,long)",
            "cn.hutool.db.dialect.DialectFactory:cn.hutool.db.dialect.Dialect getDialect(javax.sql.DataSource)",
            "cn.hutool.db.ds.c3p0.C3p0DSFactory:javax.sql.DataSource getDataSource(java.lang.String)",
            "cn.hutool.db.ds.dbcp.DbcpDSFactory:javax.sql.DataSource getDataSource(java.lang.String)",
            "cn.hutool.db.ds.druid.DruidDSFactory:javax.sql.DataSource getDataSource(java.lang.String)",
            "cn.hutool.db.ds.hikari.HikariDSFactory:javax.sql.DataSource getDataSource(java.lang.String)",
            "cn.hutool.db.ds.jndi.JndiDSFactory:javax.sql.DataSource getDataSource(java.lang.String)",
            "cn.hutool.db.ds.pooled.PooledDSFactory:javax.sql.DataSource getDataSource(java.lang.String)",
            "cn.hutool.db.ds.simple.SimpleDSFactory:javax.sql.DataSource getDataSource(java.lang.String)",
            "cn.hutool.db.ds.tomcat.TomcatDSFactory:org.apache.tomcat.jdbc.pool.DataSource getDataSource(java.lang.String)",
            "cn.hutool.db.nosql.mongo.MongoFactory:cn.hutool.db.nosql.mongo.MongoDS getDS(java.lang.String,int)",
            "cn.hutool.db.nosql.mongo.MongoFactory:cn.hutool.db.nosql.mongo.MongoDS getDS(java.lang.String[])",
            "cn.hutool.db.nosql.mongo.MongoFactory:cn.hutool.db.nosql.mongo.MongoDS getDS(cn.hutool.setting.Setting,java.lang.String[])",
            "cn.hutool.db.ThreadLocalConnection$GroupedConnection:java.sql.Connection get(javax.sql.DataSource)",
            "cn.hutool.extra.qrcode.QrCodeUtil:java.lang.String decode(java.awt.Image)",
            "cn.hutool.extra.qrcode.QrConfig:java.util.HashMap toHints()",
            "cn.hutool.extra.servlet.multipart.MultipartFormData:void putFile(java.lang.String,cn.hutool.extra.servlet.multipart.UploadFile)",
            "cn.hutool.extra.servlet.multipart.MultipartFormData:void putParameter(java.lang.String,java.lang.String)",
            "cn.hutool.extra.servlet.ServletUtil:java.util.Map getParamMap(javax.servlet.ServletRequest)",
            "cn.hutool.extra.servlet.ServletUtil:java.util.Map readCookieMap(javax.servlet.http.HttpServletRequest)",
            "cn.hutool.extra.ssh.JschSessionPool:void put(java.lang.String,com.jcraft.jsch.Session)",
            "cn.hutool.extra.template.engine.velocity.VelocityUtil:void putGlobalContext(java.lang.String,java.lang.Object)",
            "cn.hutool.http.GlobalHeaders:cn.hutool.http.GlobalHeaders header(java.lang.String,java.lang.String,boolean)",
            "cn.hutool.http.HTMLFilter:void <init>()",
            "cn.hutool.http.HTMLFilter:java.lang.String processTag(java.lang.String)",
            "cn.hutool.http.HttpBase:java.lang.Object header(java.lang.String,java.lang.String,boolean)",
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest form(java.lang.String,java.lang.Object)",
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest form(java.lang.String,cn.hutool.core.io.resource.Resource)",
            "cn.hutool.http.HttpUtil:java.util.HashMap decodeParamMap(java.lang.String,java.lang.String)",
            "cn.hutool.http.HttpUtil:void addParam(java.util.Map,java.lang.String,java.lang.String,java.lang.String)",
            "cn.hutool.http.webservice.SoapRequest:cn.hutool.http.webservice.SoapRequest addParam(java.lang.String,java.lang.String)",
            "cn.hutool.log.LogFactory:cn.hutool.log.Log getLog(java.lang.String)",
            "cn.hutool.log.LogFactory:cn.hutool.log.Log getLog(java.lang.Class)",
            "cn.hutool.setting.profile.Profile:cn.hutool.setting.Setting getSetting(java.lang.String)",
            "cn.hutool.setting.SettingUtil:cn.hutool.setting.Setting get(java.lang.String)",
            "cn.hutool.json.JSONObject:void <init>(java.lang.Object,boolean)",
            "cn.hutool.json.JSONObject:cn.hutool.json.JSONObject put(java.lang.String,java.lang.Object)",
            "cn.hutool.json.JSONObject:void populateMap(java.lang.Object)",
            "cn.hutool.json.XMLTokener:void <clinit>()",
            "cn.hutool.poi.excel.ExcelPicUtil:java.util.Map getPicMapXls(org.apache.poi.hssf.usermodel.HSSFWorkbook,int)",
            "cn.hutool.poi.excel.ExcelPicUtil:java.util.Map getPicMapXlsx(org.apache.poi.xssf.usermodel.XSSFWorkbook,int)",
            "cn.hutool.poi.excel.ExcelReader:cn.hutool.poi.excel.ExcelReader addHeaderAlias(java.lang.String,java.lang.String)",
            "cn.hutool.poi.excel.ExcelWriter:cn.hutool.poi.excel.ExcelWriter addHeaderAlias(java.lang.String,java.lang.String)"
        ]
    },
    "cn.hutool.core.map.CustomKeyLinkedMap:boolean containsKey(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.annotation.CombinationAnnotationElement:boolean isAnnotationPresent(java.lang.Class)",
            "cn.hutool.core.bean.copier.provider.BeanValueProvider:boolean containsKey(java.lang.String)",
            "cn.hutool.core.bean.copier.provider.MapValueProvider:boolean containsKey(java.lang.String)",
            "cn.hutool.core.map.MapProxy:boolean containsKey(java.lang.Object)",
            "cn.hutool.core.map.MapUtil:java.util.Map filter(java.util.Map,java.lang.Object[])",
            "cn.hutool.core.util.ClassUtil:boolean isPrimitiveWrapper(java.lang.Class)",
            "cn.hutool.db.sql.NamedSql:void parse(java.lang.String,java.util.Map)",
            "cn.hutool.http.HTMLFilter:void <init>(java.util.Map)",
            "cn.hutool.http.HTMLFilter:java.lang.String processTag(java.lang.String)",
            "cn.hutool.http.HTMLFilter:boolean allowed(java.lang.String)",
            "cn.hutool.json.JSONObject:boolean containsKey(java.lang.Object)",
            "cn.hutool.json.JSONObject:cn.hutool.json.JSONObject putOnce(java.lang.String,java.lang.Object)"
        ]
    },
    "cn.hutool.core.map.CustomKeyMap:java.lang.Object get(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.annotation.CombinationAnnotationElement:java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)",
            "cn.hutool.core.bean.BeanDesc:cn.hutool.core.bean.BeanDesc$PropDesc getProp(java.lang.String)",
            "cn.hutool.core.bean.BeanDesc:java.lang.reflect.Field getField(java.lang.String)",
            "cn.hutool.core.bean.BeanDesc:java.lang.reflect.Method getGetter(java.lang.String)",
            "cn.hutool.core.bean.BeanDesc:java.lang.reflect.Method getSetter(java.lang.String)",
            "cn.hutool.core.bean.BeanUtil:java.beans.PropertyDescriptor getPropertyDescriptor(java.lang.Class,java.lang.String,boolean)",
            "cn.hutool.core.bean.BeanUtil:java.lang.Object getFieldValue(java.lang.Object,java.lang.String)",
            "cn.hutool.core.bean.copier.BeanCopier:void valueProviderToBean(cn.hutool.core.bean.copier.ValueProvider,java.lang.Object)",
            "cn.hutool.core.bean.copier.provider.BeanValueProvider:java.lang.Object value(java.lang.String,java.lang.reflect.Type)",
            "cn.hutool.core.bean.copier.provider.MapValueProvider:java.lang.Object value(java.lang.String,java.lang.reflect.Type)",
            "cn.hutool.core.bean.DynaBean:java.lang.Object get(java.lang.String)",
            "cn.hutool.core.collection.CollUtil$4:java.lang.Object edit(java.lang.Object)",
            "cn.hutool.core.collection.CollUtil$5:boolean accept(java.lang.Object)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection union(java.util.Collection,java.util.Collection)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection intersection(java.util.Collection,java.util.Collection)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection disjunction(java.util.Collection,java.util.Collection)",
            "cn.hutool.core.collection.CollUtil:java.util.ArrayList valuesOfKeys(java.util.Map,java.lang.Object[])",
            "cn.hutool.core.collection.CollUtil:java.util.ArrayList valuesOfKeys(java.util.Map,java.util.Iterator)",
            "cn.hutool.core.collection.IterUtil:java.util.Map countMap(java.util.Iterator)",
            "cn.hutool.core.convert.BasicType:java.lang.Class wrap(java.lang.Class)",
            "cn.hutool.core.convert.BasicType:java.lang.Class unWrap(java.lang.Class)",
            "cn.hutool.core.convert.ConverterRegistry:cn.hutool.core.convert.Converter getDefaultConverter(java.lang.reflect.Type)",
            "cn.hutool.core.convert.ConverterRegistry:cn.hutool.core.convert.Converter getCustomConverter(java.lang.reflect.Type)",
            "cn.hutool.core.date.format.FastDateParser$CaseInsensitiveTextStrategy:void setCalendar(cn.hutool.core.date.format.FastDateParser,java.util.Calendar,java.lang.String)",
            "cn.hutool.core.date.format.FastDateParser$TimeZoneStrategy:void setCalendar(cn.hutool.core.date.format.FastDateParser,java.util.Calendar,java.lang.String)",
            "cn.hutool.core.exceptions.ExceptionUtil:java.lang.String stacktraceToString(java.lang.Throwable,int,java.util.Map)",
            "cn.hutool.core.io.watch.WatchMonitor:void watch(cn.hutool.core.io.watch.Watcher)",
            "cn.hutool.core.lang.SimpleCache:java.lang.Object get(java.lang.Object)",
            "cn.hutool.core.lang.Singleton:java.lang.Object get(java.lang.Class,java.lang.Object[])",
            "cn.hutool.core.map.MapProxy:java.lang.Object getObj(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.map.MapProxy:java.lang.Object get(java.lang.Object)",
            "cn.hutool.core.map.MapUtil:java.util.Map toListMap(java.lang.Iterable)",
            "cn.hutool.core.map.MapUtil:java.util.Map filter(java.util.Map,java.lang.Object[])",
            "cn.hutool.core.map.MapUtil:java.lang.Object get(java.util.Map,java.lang.Object,java.lang.Class)",
            "cn.hutool.core.text.csv.CsvRow:java.lang.String getByName(java.lang.String)",
            "cn.hutool.core.text.csv.CsvRow:java.util.Map getFieldMap()",
            "cn.hutool.core.text.replacer.LookupReplacer:int replace(java.lang.CharSequence,int,cn.hutool.core.text.StrBuilder)",
            "cn.hutool.core.util.ClassLoaderUtil:java.lang.Class loadPrimitiveClass(java.lang.String)",
            "cn.hutool.core.util.ClassUtil:boolean isAssignable(java.lang.Class,java.lang.Class)",
            "cn.hutool.core.util.IdcardUtil:boolean isvalidCard15(java.lang.String)",
            "cn.hutool.core.util.IdcardUtil:boolean isValidTWCard(java.lang.String)",
            "cn.hutool.core.util.IdcardUtil:java.lang.String getProvinceByIdCard(java.lang.String)",
            "cn.hutool.cache.impl.AbstractCache:boolean containsKey(java.lang.Object)",
            "cn.hutool.cache.impl.AbstractCache:java.lang.Object get(java.lang.Object,boolean)",
            "cn.hutool.db.dialect.DialectFactory:cn.hutool.db.dialect.Dialect getDialect(javax.sql.DataSource)",
            "cn.hutool.db.ds.c3p0.C3p0DSFactory:javax.sql.DataSource getDataSource(java.lang.String)",
            "cn.hutool.db.ds.c3p0.C3p0DSFactory:void close(java.lang.String)",
            "cn.hutool.db.ds.dbcp.DbcpDSFactory:javax.sql.DataSource getDataSource(java.lang.String)",
            "cn.hutool.db.ds.dbcp.DbcpDSFactory:void close(java.lang.String)",
            "cn.hutool.db.ds.druid.DruidDSFactory:javax.sql.DataSource getDataSource(java.lang.String)",
            "cn.hutool.db.ds.druid.DruidDSFactory:void close(java.lang.String)",
            "cn.hutool.db.ds.hikari.HikariDSFactory:javax.sql.DataSource getDataSource(java.lang.String)",
            "cn.hutool.db.ds.hikari.HikariDSFactory:void close(java.lang.String)",
            "cn.hutool.db.ds.jndi.JndiDSFactory:javax.sql.DataSource getDataSource(java.lang.String)",
            "cn.hutool.db.ds.pooled.PooledDSFactory:javax.sql.DataSource getDataSource(java.lang.String)",
            "cn.hutool.db.ds.pooled.PooledDSFactory:void close(java.lang.String)",
            "cn.hutool.db.ds.simple.SimpleDSFactory:javax.sql.DataSource getDataSource(java.lang.String)",
            "cn.hutool.db.ds.simple.SimpleDSFactory:void close(java.lang.String)",
            "cn.hutool.db.ds.tomcat.TomcatDSFactory:org.apache.tomcat.jdbc.pool.DataSource getDataSource(java.lang.String)",
            "cn.hutool.db.ds.tomcat.TomcatDSFactory:void close(java.lang.String)",
            "cn.hutool.db.handler.HandleHelper:java.lang.Object handleRow(int,java.sql.ResultSetMetaData,java.sql.ResultSet,java.lang.Class)",
            "cn.hutool.db.nosql.mongo.MongoFactory:cn.hutool.db.nosql.mongo.MongoDS getDS(java.lang.String,int)",
            "cn.hutool.db.nosql.mongo.MongoFactory:cn.hutool.db.nosql.mongo.MongoDS getDS(java.lang.String[])",
            "cn.hutool.db.nosql.mongo.MongoFactory:cn.hutool.db.nosql.mongo.MongoDS getDS(cn.hutool.setting.Setting,java.lang.String[])",
            "cn.hutool.db.sql.NamedSql:void parse(java.lang.String,java.util.Map)",
            "cn.hutool.db.ThreadLocalConnection$GroupedConnection:java.sql.Connection get(javax.sql.DataSource)",
            "cn.hutool.db.ThreadLocalConnection$GroupedConnection:cn.hutool.db.ThreadLocalConnection$GroupedConnection close(javax.sql.DataSource)",
            "cn.hutool.extra.servlet.multipart.MultipartFormData:java.lang.String getParam(java.lang.String)",
            "cn.hutool.extra.servlet.multipart.MultipartFormData:java.lang.String[] getArrayParam(java.lang.String)",
            "cn.hutool.extra.servlet.multipart.MultipartFormData:cn.hutool.extra.servlet.multipart.UploadFile[] getFiles(java.lang.String)",
            "cn.hutool.extra.servlet.multipart.MultipartFormData:void putFile(java.lang.String,cn.hutool.extra.servlet.multipart.UploadFile)",
            "cn.hutool.extra.servlet.multipart.MultipartFormData:void putParameter(java.lang.String,java.lang.String)",
            "cn.hutool.extra.servlet.ServletUtil:javax.servlet.http.Cookie getCookie(javax.servlet.http.HttpServletRequest,java.lang.String)",
            "cn.hutool.extra.ssh.JschSessionPool:com.jcraft.jsch.Session get(java.lang.String)",
            "cn.hutool.extra.ssh.JschSessionPool:void close(java.lang.String)",
            "cn.hutool.http.GlobalHeaders:java.util.List headerList(java.lang.String)",
            "cn.hutool.http.GlobalHeaders:cn.hutool.http.GlobalHeaders header(java.lang.String,java.lang.String,boolean)",
            "cn.hutool.http.HTMLFilter:void <init>(java.util.Map)",
            "cn.hutool.http.HTMLFilter:java.lang.String checkTags(java.lang.String)",
            "cn.hutool.http.HTMLFilter:java.lang.String processTag(java.lang.String)",
            "cn.hutool.http.HTMLFilter:boolean allowedAttribute(java.lang.String,java.lang.String)",
            "cn.hutool.http.HttpBase:java.util.List headerList(java.lang.String)",
            "cn.hutool.http.HttpBase:java.lang.Object header(java.lang.String,java.lang.String,boolean)",
            "cn.hutool.http.HttpUtil:void addParam(java.util.Map,java.lang.String,java.lang.String,java.lang.String)",
            "cn.hutool.log.LogFactory:cn.hutool.log.Log getLog(java.lang.String)",
            "cn.hutool.log.LogFactory:cn.hutool.log.Log getLog(java.lang.Class)",
            "cn.hutool.setting.profile.Profile:cn.hutool.setting.Setting getSetting(java.lang.String)",
            "cn.hutool.setting.SettingUtil:cn.hutool.setting.Setting get(java.lang.String)",
            "cn.hutool.json.JSONObject:java.lang.Object get(java.lang.Object)",
            "cn.hutool.json.JSONObject:java.lang.Object getObj(java.lang.String,java.lang.Object)",
            "cn.hutool.json.JSONObject:java.io.Writer write(java.io.Writer,int,int)",
            "cn.hutool.json.XMLTokener:java.lang.Object nextEntity(char)",
            "cn.hutool.poi.excel.ExcelReader:java.util.List aliasHeader(java.util.List)",
            "cn.hutool.poi.excel.ExcelWriter:java.util.Collection aliasHeader(java.util.Collection)"
        ]
    },
    "cn.hutool.core.map.CustomKeyMap:java.lang.Object put(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.annotation.AnnotationUtil:java.util.Map getAnnotationValueMap(java.lang.reflect.AnnotatedElement,java.lang.Class)",
            "cn.hutool.core.annotation.CombinationAnnotationElement:void parseDeclared(java.lang.'annotation'.Annotation[])",
            "cn.hutool.core.annotation.CombinationAnnotationElement:void parse(java.lang.'annotation'.Annotation[])",
            "cn.hutool.core.bean.BeanDesc:cn.hutool.core.bean.BeanDesc init()",
            "cn.hutool.core.bean.BeanUtil:java.util.Map internalGetPropertyDescriptorMap(java.lang.Class,boolean)",
            "cn.hutool.core.bean.BeanUtil:void setFieldValue(java.lang.Object,java.lang.String,java.lang.Object)",
            "cn.hutool.core.bean.BeanUtil:java.util.Map beanToMap(java.lang.Object,java.util.Map,boolean,cn.hutool.core.lang.Editor)",
            "cn.hutool.core.bean.DynaBean:void set(java.lang.String,java.lang.Object)",
            "cn.hutool.core.collection.CollUtil:java.util.Map zip(java.util.Collection,java.util.Collection)",
            "cn.hutool.core.collection.IterUtil:java.util.Map countMap(java.util.Iterator)",
            "cn.hutool.core.collection.IterUtil:java.util.Map fieldValueMap(java.util.Iterator,java.lang.String)",
            "cn.hutool.core.collection.IterUtil:java.util.Map fieldValueAsMap(java.util.Iterator,java.lang.String,java.lang.String)",
            "cn.hutool.core.collection.IterUtil:java.util.HashMap toMap(java.lang.Iterable)",
            "cn.hutool.core.collection.IterUtil:java.util.Map toMap(java.util.Iterator,java.util.Iterator)",
            "cn.hutool.core.convert.BasicType:void <clinit>()",
            "cn.hutool.core.convert.ConverterRegistry:cn.hutool.core.convert.ConverterRegistry putCustom(java.lang.reflect.Type,cn.hutool.core.convert.Converter)",
            "cn.hutool.core.convert.ConverterRegistry:cn.hutool.core.convert.ConverterRegistry defaultConverter()",
            "cn.hutool.core.convert.impl.MapConverter:void convertMapToMap(java.util.Map,java.util.Map)",
            "cn.hutool.core.date.format.FastDateParser$TimeZoneStrategy:void <init>(java.util.Locale)",
            "cn.hutool.core.date.format.FastDateParser:java.util.Map appendDisplayNames(java.util.Calendar,java.util.Locale,int,java.lang.StringBuilder)",
            "cn.hutool.core.exceptions.ExceptionUtil:java.lang.String stacktraceToOneLineString(java.lang.Throwable,int)",
            "cn.hutool.core.io.FileTypeUtil:java.lang.String putFileType(java.lang.String,java.lang.String)",
            "cn.hutool.core.io.FileTypeUtil:void <clinit>()",
            "cn.hutool.core.io.watch.WatchMonitor:void registerPath(java.nio.file.Path,int)",
            "cn.hutool.core.lang.SimpleCache:java.lang.Object put(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.lang.Singleton:java.lang.Object get(java.lang.Class,java.lang.Object[])",
            "cn.hutool.core.lang.Singleton:void put(java.lang.Object)",
            "cn.hutool.core.map.CustomKeyMap:void putAll(java.util.Map)",
            "cn.hutool.core.map.MapBuilder:cn.hutool.core.map.MapBuilder put(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.map.MapProxy:java.lang.Object put(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.map.MapUtil:java.util.HashMap of(java.lang.Object,java.lang.Object,boolean)",
            "cn.hutool.core.map.MapUtil:java.util.HashMap of(java.lang.Object[])",
            "cn.hutool.core.map.MapUtil:java.util.Map toListMap(java.lang.Iterable)",
            "cn.hutool.core.map.MapUtil:java.util.List toMapList(java.util.Map)",
            "cn.hutool.core.map.MapUtil:java.util.Map filter(java.util.Map,cn.hutool.core.lang.Editor)",
            "cn.hutool.core.map.MapUtil:java.util.Map filter(java.util.Map,cn.hutool.core.lang.Filter)",
            "cn.hutool.core.map.MapUtil:java.util.Map filter(java.util.Map,java.lang.Object[])",
            "cn.hutool.core.map.MapUtil:java.util.Map inverse(java.util.Map)",
            "cn.hutool.core.text.replacer.LookupReplacer:void <init>(java.lang.String[][])",
            "cn.hutool.core.util.ArrayUtil:java.util.Map zip(java.lang.Object[],java.lang.Object[],boolean)",
            "cn.hutool.core.util.ClassLoaderUtil:void <clinit>()",
            "cn.hutool.core.util.EnumUtil:java.util.Map getNameFieldMap(java.lang.Class,java.lang.String)",
            "cn.hutool.core.util.IdcardUtil:void <clinit>()",
            "cn.hutool.core.util.XmlUtil:java.util.Map xmlToMap(org.w3c.dom.Node,java.util.Map)",
            "cn.hutool.cache.impl.AbstractCache:void put(java.lang.Object,java.lang.Object,long)",
            "cn.hutool.db.dialect.DialectFactory:cn.hutool.db.dialect.Dialect getDialect(javax.sql.DataSource)",
            "cn.hutool.db.ds.c3p0.C3p0DSFactory:javax.sql.DataSource getDataSource(java.lang.String)",
            "cn.hutool.db.ds.dbcp.DbcpDSFactory:javax.sql.DataSource getDataSource(java.lang.String)",
            "cn.hutool.db.ds.druid.DruidDSFactory:javax.sql.DataSource getDataSource(java.lang.String)",
            "cn.hutool.db.ds.hikari.HikariDSFactory:javax.sql.DataSource getDataSource(java.lang.String)",
            "cn.hutool.db.ds.jndi.JndiDSFactory:javax.sql.DataSource getDataSource(java.lang.String)",
            "cn.hutool.db.ds.pooled.PooledDSFactory:javax.sql.DataSource getDataSource(java.lang.String)",
            "cn.hutool.db.ds.simple.SimpleDSFactory:javax.sql.DataSource getDataSource(java.lang.String)",
            "cn.hutool.db.ds.tomcat.TomcatDSFactory:org.apache.tomcat.jdbc.pool.DataSource getDataSource(java.lang.String)",
            "cn.hutool.db.nosql.mongo.MongoFactory:cn.hutool.db.nosql.mongo.MongoDS getDS(java.lang.String,int)",
            "cn.hutool.db.nosql.mongo.MongoFactory:cn.hutool.db.nosql.mongo.MongoDS getDS(java.lang.String[])",
            "cn.hutool.db.nosql.mongo.MongoFactory:cn.hutool.db.nosql.mongo.MongoDS getDS(cn.hutool.setting.Setting,java.lang.String[])",
            "cn.hutool.db.ThreadLocalConnection$GroupedConnection:java.sql.Connection get(javax.sql.DataSource)",
            "cn.hutool.extra.qrcode.QrCodeUtil:java.lang.String decode(java.awt.Image)",
            "cn.hutool.extra.qrcode.QrConfig:java.util.HashMap toHints()",
            "cn.hutool.extra.servlet.multipart.MultipartFormData:void putFile(java.lang.String,cn.hutool.extra.servlet.multipart.UploadFile)",
            "cn.hutool.extra.servlet.multipart.MultipartFormData:void putParameter(java.lang.String,java.lang.String)",
            "cn.hutool.extra.servlet.ServletUtil:java.util.Map getParamMap(javax.servlet.ServletRequest)",
            "cn.hutool.extra.servlet.ServletUtil:java.util.Map readCookieMap(javax.servlet.http.HttpServletRequest)",
            "cn.hutool.extra.ssh.JschSessionPool:void put(java.lang.String,com.jcraft.jsch.Session)",
            "cn.hutool.extra.template.engine.velocity.VelocityUtil:void putGlobalContext(java.lang.String,java.lang.Object)",
            "cn.hutool.http.GlobalHeaders:cn.hutool.http.GlobalHeaders header(java.lang.String,java.lang.String,boolean)",
            "cn.hutool.http.HTMLFilter:void <init>()",
            "cn.hutool.http.HTMLFilter:java.lang.String processTag(java.lang.String)",
            "cn.hutool.http.HttpBase:java.lang.Object header(java.lang.String,java.lang.String,boolean)",
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest form(java.lang.String,java.lang.Object)",
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest form(java.lang.String,cn.hutool.core.io.resource.Resource)",
            "cn.hutool.http.HttpUtil:java.util.HashMap decodeParamMap(java.lang.String,java.lang.String)",
            "cn.hutool.http.HttpUtil:void addParam(java.util.Map,java.lang.String,java.lang.String,java.lang.String)",
            "cn.hutool.http.webservice.SoapRequest:cn.hutool.http.webservice.SoapRequest addParam(java.lang.String,java.lang.String)",
            "cn.hutool.log.LogFactory:cn.hutool.log.Log getLog(java.lang.String)",
            "cn.hutool.log.LogFactory:cn.hutool.log.Log getLog(java.lang.Class)",
            "cn.hutool.setting.profile.Profile:cn.hutool.setting.Setting getSetting(java.lang.String)",
            "cn.hutool.setting.SettingUtil:cn.hutool.setting.Setting get(java.lang.String)",
            "cn.hutool.json.JSONObject:void <init>(java.lang.Object,boolean)",
            "cn.hutool.json.JSONObject:cn.hutool.json.JSONObject put(java.lang.String,java.lang.Object)",
            "cn.hutool.json.JSONObject:void populateMap(java.lang.Object)",
            "cn.hutool.json.XMLTokener:void <clinit>()",
            "cn.hutool.poi.excel.ExcelPicUtil:java.util.Map getPicMapXls(org.apache.poi.hssf.usermodel.HSSFWorkbook,int)",
            "cn.hutool.poi.excel.ExcelPicUtil:java.util.Map getPicMapXlsx(org.apache.poi.xssf.usermodel.XSSFWorkbook,int)",
            "cn.hutool.poi.excel.ExcelReader:cn.hutool.poi.excel.ExcelReader addHeaderAlias(java.lang.String,java.lang.String)",
            "cn.hutool.poi.excel.ExcelWriter:cn.hutool.poi.excel.ExcelWriter addHeaderAlias(java.lang.String,java.lang.String)"
        ]
    },
    "cn.hutool.core.map.CustomKeyMap:boolean containsKey(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.annotation.CombinationAnnotationElement:boolean isAnnotationPresent(java.lang.Class)",
            "cn.hutool.core.bean.copier.provider.BeanValueProvider:boolean containsKey(java.lang.String)",
            "cn.hutool.core.bean.copier.provider.MapValueProvider:boolean containsKey(java.lang.String)",
            "cn.hutool.core.map.MapProxy:boolean containsKey(java.lang.Object)",
            "cn.hutool.core.map.MapUtil:java.util.Map filter(java.util.Map,java.lang.Object[])",
            "cn.hutool.core.util.ClassUtil:boolean isPrimitiveWrapper(java.lang.Class)",
            "cn.hutool.db.sql.NamedSql:void parse(java.lang.String,java.util.Map)",
            "cn.hutool.http.HTMLFilter:void <init>(java.util.Map)",
            "cn.hutool.http.HTMLFilter:java.lang.String processTag(java.lang.String)",
            "cn.hutool.http.HTMLFilter:boolean allowed(java.lang.String)",
            "cn.hutool.json.JSONObject:boolean containsKey(java.lang.Object)",
            "cn.hutool.json.JSONObject:cn.hutool.json.JSONObject putOnce(java.lang.String,java.lang.Object)"
        ]
    },
    "cn.hutool.core.util.StrUtil:java.lang.String utf8Str(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.text.StrFormatter:java.lang.String format(java.lang.String,java.lang.Object[])",
            "cn.hutool.core.util.StrUtil:java.lang.String format(java.lang.CharSequence,java.util.Map)"
        ]
    },
    "cn.hutool.core.util.StrUtil:java.lang.String str(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.setting.dialect.Props:java.lang.Object getObj(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.setting.dialect.Props:java.lang.Object getObj(java.lang.Object)"
        ]
    },
    "cn.hutool.setting.dialect.Props:java.lang.Object getObj(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.json.JSONArray:java.io.Writer write(java.io.Writer,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.json.InternalJSONUtil:java.io.Writer writeValue(java.io.Writer,java.lang.Object,int,int)",
            "cn.hutool.json.JSONArray:java.lang.String toJSONString(int)",
            "cn.hutool.json.JSONArray:java.io.Writer write(java.io.Writer)"
        ]
    },
    "cn.hutool.json.JSONArray:java.lang.String join(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.json.JSONObject:void <init>(cn.hutool.json.JSONTokener,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.json.JSONObject:void <init>(cn.hutool.json.JSONTokener)"
        ]
    },
    "cn.hutool.json.JSONObject:void init(java.lang.CharSequence)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.json.JSONObject:void <init>(java.lang.Object,boolean)"
        ]
    },
    "cn.hutool.json.JSONArray:boolean add(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.collection.CollUtil$8:int hash(java.lang.Object)",
            "cn.hutool.core.collection.CollUtil:java.util.List list(boolean,java.lang.Object[])",
            "cn.hutool.core.collection.CollUtil:java.util.List list(boolean,java.util.Iterator)",
            "cn.hutool.core.collection.CollUtil:java.util.List list(boolean,java.util.Enumeration)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection filter(java.util.Collection,cn.hutool.core.lang.Editor)",
            "cn.hutool.core.collection.CollUtil:java.util.List filter(java.util.List,cn.hutool.core.lang.Editor)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection filter(java.util.Collection,cn.hutool.core.lang.Filter)",
            "cn.hutool.core.collection.CollUtil:java.util.List filter(java.util.List,cn.hutool.core.lang.Filter)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection addAll(java.util.Collection,java.lang.Object,java.lang.reflect.Type)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection addAll(java.util.Collection,java.util.Iterator)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection addAll(java.util.Collection,java.util.Enumeration)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection addAll(java.util.Collection,java.lang.Object[])",
            "cn.hutool.core.collection.CollUtil:java.util.List addAllIfNotContains(java.util.List,java.util.List)",
            "cn.hutool.core.collection.CollUtil:java.util.List group(java.util.Collection,cn.hutool.core.collection.CollUtil$Hash)",
            "cn.hutool.core.collection.CollUtil:java.util.List setOrAppend(java.util.List,int,java.lang.Object)",
            "cn.hutool.core.collection.CopiedIter:void <init>(java.util.Iterator)",
            "cn.hutool.core.comparator.ComparatorChain:void <init>(java.util.Comparator,boolean)",
            "cn.hutool.core.comparator.ComparatorChain:cn.hutool.core.comparator.ComparatorChain addComparator(java.util.Comparator,boolean)",
            "cn.hutool.core.date.format.FastDateParser:void init(java.util.Calendar)",
            "cn.hutool.core.io.file.FileAppender:cn.hutool.core.io.file.FileAppender append(java.lang.String)",
            "cn.hutool.core.io.file.FileReader:java.util.Collection readLines(java.util.Collection)",
            "cn.hutool.core.io.IoUtil$1:void handle(java.lang.String)",
            "cn.hutool.core.io.resource.MultiResource:cn.hutool.core.io.resource.MultiResource add(cn.hutool.core.io.resource.Resource)",
            "cn.hutool.core.io.watch.watchers.WatcherChain:cn.hutool.core.io.watch.watchers.WatcherChain addChain(cn.hutool.core.io.watch.Watcher)",
            "cn.hutool.core.map.MapUtil:java.util.Map toListMap(java.lang.Iterable)",
            "cn.hutool.core.math.Arrangement:void select(java.lang.String[],int,java.util.List)",
            "cn.hutool.core.math.Combination:void select(int,java.lang.String[],int,java.util.List)",
            "cn.hutool.core.text.csv.CsvRow:boolean add(java.lang.String)",
            "cn.hutool.core.text.replacer.ReplacerChain:cn.hutool.core.text.replacer.ReplacerChain addChain(cn.hutool.core.text.replacer.StrReplacer)",
            "cn.hutool.core.text.StrSpliter:java.util.List addToList(java.util.List,java.lang.String,boolean,boolean)",
            "cn.hutool.core.util.NumberUtil:java.util.Collection appendRange(int,int,int,java.util.Collection)",
            "cn.hutool.core.util.ReUtil:java.util.Collection findAll(java.util.regex.Pattern,java.lang.String,int,java.util.Collection)",
            "cn.hutool.db.handler.HandleHelper:java.util.Collection handleRs(java.sql.ResultSet,java.util.Collection)",
            "cn.hutool.db.handler.HandleHelper:java.util.Collection handleRsToBeanList(java.sql.ResultSet,java.util.Collection,java.lang.Class)",
            "cn.hutool.db.sql.NamedSql:void parse(java.lang.String,java.util.Map)",
            "cn.hutool.db.sql.SqlBuilder:cn.hutool.db.sql.SqlBuilder insert(cn.hutool.db.Entity,cn.hutool.db.dialect.DialectName)",
            "cn.hutool.db.sql.SqlBuilder:cn.hutool.db.sql.SqlBuilder update(cn.hutool.db.Entity)",
            "cn.hutool.db.sql.SqlBuilder:void buildConditionPart(java.lang.StringBuilder,cn.hutool.db.sql.Condition)",
            "cn.hutool.db.sql.SqlBuilder:void buildValuePartForBETWEEN(java.lang.StringBuilder,cn.hutool.db.sql.Condition)",
            "cn.hutool.db.sql.SqlUtil:java.lang.String buildEqualsWhere(cn.hutool.db.Entity,java.util.List)",
            "cn.hutool.extra.ssh.Sftp$3:int select(com.jcraft.jsch.ChannelSftp$LsEntry)",
            "cn.hutool.http.GlobalHeaders:cn.hutool.http.GlobalHeaders header(java.lang.String,java.lang.String,boolean)",
            "cn.hutool.http.HttpBase:java.lang.Object header(java.lang.String,java.lang.String,boolean)",
            "cn.hutool.http.HttpUtil:void addParam(java.util.Map,java.lang.String,java.lang.String,java.lang.String)",
            "cn.hutool.setting.GroupedSet:boolean contains(java.lang.String,java.lang.String,java.lang.String[])",
            "cn.hutool.cron.listener.TaskListenerManager:cn.hutool.cron.listener.TaskListenerManager addListener(cn.hutool.cron.listener.TaskListener)",
            "cn.hutool.cron.pattern.CronPattern:void parseSinglePattern(java.lang.String)",
            "cn.hutool.cron.TaskExecutorManager:cn.hutool.cron.TaskExecutor spawnExecutor(cn.hutool.cron.task.Task)",
            "cn.hutool.cron.TaskLauncherManager:cn.hutool.cron.TaskLauncher spawnLauncher(long)",
            "cn.hutool.json.JSONArray:void <init>(java.lang.Iterable)",
            "cn.hutool.json.JSONArray:void <init>(java.util.Collection)",
            "cn.hutool.json.JSONArray:void <init>(java.lang.Object,boolean)",
            "cn.hutool.json.JSONArray:cn.hutool.json.JSONArray put(java.lang.Object)",
            "cn.hutool.json.JSONArray:boolean add(java.lang.Object)",
            "cn.hutool.json.JSONArray:boolean addAll(java.util.Collection)",
            "cn.hutool.json.JSONArray:void add(int,java.lang.Object)",
            "cn.hutool.json.JSONArray:void init(cn.hutool.json.JSONTokener)",
            "cn.hutool.json.JSONTokener:cn.hutool.json.JSONArray toJSONArray()",
            "cn.hutool.poi.excel.sax.Excel03SaxReader:void processRecord(org.apache.poi.hssf.record.Record)"
        ]
    },
    "cn.hutool.json.JSONArray:java.lang.Object set(int,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.collection.CollUtil:java.util.List setOrAppend(java.util.List,int,java.lang.Object)",
            "cn.hutool.core.comparator.ComparatorChain:cn.hutool.core.comparator.ComparatorChain setComparator(int,java.util.Comparator,boolean)",
            "cn.hutool.core.text.csv.CsvRow:java.lang.String set(int,java.lang.String)",
            "cn.hutool.json.JSONArray:java.lang.Object set(int,java.lang.Object)",
            "cn.hutool.json.JSONArray:void add(int,java.lang.Object)"
        ]
    },
    "cn.hutool.json.JSONArray:void add(int,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.text.csv.CsvRow:void add(int,java.lang.String)",
            "cn.hutool.json.JSONArray:cn.hutool.json.JSONArray put(int,java.lang.Object)",
            "cn.hutool.poi.excel.sax.Excel03SaxReader:void processRecord(org.apache.poi.hssf.record.Record)",
            "cn.hutool.poi.excel.sax.Excel03SaxReader:void processCellValue(org.apache.poi.hssf.record.Record)",
            "cn.hutool.poi.excel.sax.Excel07SaxReader:void endElement(java.lang.String,java.lang.String,java.lang.String)",
            "cn.hutool.poi.excel.sax.Excel07SaxReader:void fillBlankCell(java.lang.String,java.lang.String,boolean)"
        ]
    },
    "cn.hutool.json.JSONObject:cn.hutool.json.JSONObject put(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.json.InternalJSONUtil:cn.hutool.json.JSONObject propertyPut(cn.hutool.json.JSONObject,java.lang.Object,java.lang.Object)",
            "cn.hutool.json.JSONArray:cn.hutool.json.JSONObject toJSONObject(cn.hutool.json.JSONArray)",
            "cn.hutool.json.JSONObject:cn.hutool.json.JSONObject putOnce(java.lang.String,java.lang.Object)",
            "cn.hutool.json.JSONObject:cn.hutool.json.JSONObject putOpt(java.lang.String,java.lang.Object)",
            "cn.hutool.json.JSONObject:void putAll(java.util.Map)",
            "cn.hutool.json.JSONObject:cn.hutool.json.JSONObject accumulate(java.lang.String,java.lang.Object)",
            "cn.hutool.json.JSONObject:cn.hutool.json.JSONObject append(java.lang.String,java.lang.Object)",
            "cn.hutool.json.JSONObject:cn.hutool.json.JSONObject increment(java.lang.String)",
            "cn.hutool.json.JSONObject:java.lang.Object put(java.lang.Object,java.lang.Object)"
        ]
    },
    "cn.hutool.poi.excel.ExcelWriter:cn.hutool.poi.excel.ExcelWriter merge(int,int,int,int,java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.poi.excel.ExcelWriter:cn.hutool.poi.excel.ExcelWriter merge(int,java.lang.Object,boolean)"
        ]
    },
    "cn.hutool.poi.excel.ExcelWriter:cn.hutool.poi.excel.ExcelWriter writeCellValue(int,int,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.text.replacer.StrReplacer:java.lang.Object replace(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.EscapeUtil:java.lang.String escapeHtml4(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.EscapeUtil:java.lang.String unescapeHtml4(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ClassUtil:java.util.List getResources(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.FileUtil:java.lang.String getAbsolutePath(java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.FileUtil:java.lang.String getAbsolutePath(java.lang.String)",
            "cn.hutool.setting.dialect.Props:void store(java.lang.String,java.lang.Class)"
        ]
    },
    "cn.hutool.core.io.resource.ResourceUtil:java.net.URL getResource(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ClassUtil:java.net.URL getResourceURL(java.lang.String)",
            "cn.hutool.core.util.URLUtil:java.net.URL getURL(java.lang.String)",
            "cn.hutool.log.LogFactory:cn.hutool.log.LogFactory doCreate()"
        ]
    },
    "cn.hutool.core.util.ClassUtil:java.net.URL getResourceUrl(java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.URLUtil:java.net.URL getURL(java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.setting.GroupedSet:void <init>(java.lang.String,java.lang.Class,java.nio.charset.Charset)"
        ]
    },
    "cn.hutool.core.lang.ClassScaner:java.lang.Class loadClass(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.lang.ClassScaner:void scanJar(java.util.jar.JarFile)",
            "cn.hutool.core.lang.ClassScaner:void addIfAccept(java.lang.String)"
        ]
    },
    "cn.hutool.core.lang.JarClassLoader:void <init>(java.net.URL[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.lang.JarClassLoader:void <init>()"
        ]
    },
    "cn.hutool.aop.ProxyUtil:java.lang.Object newProxyInstance(java.lang.reflect.InvocationHandler,java.lang.Class[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ClassUtil:java.lang.Class loadClass(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.Convert:java.lang.Object convertByClassName(java.lang.String,java.lang.Object)",
            "cn.hutool.core.lang.Singleton:java.lang.Object get(java.lang.String,java.lang.Object[])",
            "cn.hutool.core.util.ClassUtil:java.lang.Object invoke(java.lang.String,java.lang.String,boolean,java.lang.Object[])"
        ]
    },
    "cn.hutool.core.util.URLUtil:java.net.URL url(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HttpConnection:void <init>(java.lang.String,cn.hutool.http.Method,javax.net.ssl.HostnameVerifier,javax.net.ssl.SSLSocketFactory,int,java.net.Proxy)"
        ]
    },
    "cn.hutool.db.dialect.DriverUtil:java.lang.String identifyDriver(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.dialect.DriverUtil:java.lang.String identifyDriver(java.sql.Connection)",
            "cn.hutool.db.ds.c3p0.C3p0DSFactory:com.mchange.v2.c3p0.ComboPooledDataSource createDataSource(java.lang.String)",
            "cn.hutool.db.ds.dbcp.DbcpDSFactory:org.apache.commons.dbcp2.BasicDataSource createDataSource(java.lang.String)",
            "cn.hutool.db.ds.pooled.DbConfig:void init(java.lang.String,java.lang.String,java.lang.String)",
            "cn.hutool.db.ds.pooled.DbSetting:cn.hutool.db.ds.pooled.DbConfig getDbConfig(java.lang.String)",
            "cn.hutool.db.ds.simple.SimpleDataSource:void init(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
            "cn.hutool.db.ds.tomcat.TomcatDSFactory:org.apache.tomcat.jdbc.pool.DataSource createDataSource(java.lang.String)"
        ]
    },
    "cn.hutool.log.dialect.console.ConsoleLog:void trace(java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.AbstractLog:void trace(java.lang.Throwable)"
        ]
    },
    "cn.hutool.log.dialect.console.ConsoleLog:void debug(java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.AbstractLog:void debug(java.lang.Throwable)"
        ]
    },
    "cn.hutool.log.dialect.console.ConsoleLog:void info(java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.AbstractLog:void info(java.lang.Throwable)"
        ]
    },
    "cn.hutool.log.dialect.console.ConsoleLog:void warn(java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.AbstractLog:void warn(java.lang.Throwable)",
            "cn.hutool.log.StaticLog:void warn(cn.hutool.log.Log,java.lang.Throwable,java.lang.String,java.lang.Object[])"
        ]
    },
    "cn.hutool.log.dialect.console.ConsoleLog:void error(java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.DbUtil:javax.sql.DataSource getJndiDsWithLog(java.lang.String)",
            "cn.hutool.db.nosql.mongo.MongoDS:void initCloud()",
            "cn.hutool.log.AbstractLog:void error(java.lang.Throwable)",
            "cn.hutool.log.StaticLog:void error(cn.hutool.log.Log,java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.setting.dialect.Props:void load(cn.hutool.core.io.resource.Resource)",
            "cn.hutool.setting.SettingLoader:boolean load(cn.hutool.core.io.resource.UrlResource)"
        ]
    },
    "cn.hutool.log.dialect.console.ConsoleLog:void log(cn.hutool.log.level.Level,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.sql.SqlLog:void log(java.lang.String,java.lang.Object)",
            "cn.hutool.log.dialect.console.ConsoleLog:void trace(java.lang.String,java.lang.Object[])",
            "cn.hutool.log.dialect.console.ConsoleLog:void debug(java.lang.String,java.lang.Object[])",
            "cn.hutool.log.dialect.console.ConsoleLog:void info(java.lang.String,java.lang.Object[])",
            "cn.hutool.log.dialect.console.ConsoleLog:void warn(java.lang.String,java.lang.Object[])",
            "cn.hutool.log.dialect.console.ConsoleLog:void error(java.lang.String,java.lang.Object[])"
        ]
    },
    "cn.hutool.core.util.XmlUtil:java.lang.String mapToXmlStr(java.util.Map,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.cache.impl.CacheObjIterator:java.lang.Object next()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.BeanUtil:java.util.Map beanToMap(java.lang.Object,java.util.Map,boolean,cn.hutool.core.lang.Editor)",
            "cn.hutool.core.bean.copier.BeanCopier:void valueProviderToBean(cn.hutool.core.bean.copier.ValueProvider,java.lang.Object)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection union(java.util.Collection,java.util.Collection)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection intersection(java.util.Collection,java.util.Collection)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection disjunction(java.util.Collection,java.util.Collection)",
            "cn.hutool.core.collection.CollUtil:boolean containsAny(java.util.Collection,java.util.Collection)",
            "cn.hutool.core.collection.CollUtil:java.util.HashSet newHashSet(boolean,java.util.Iterator)",
            "cn.hutool.core.collection.CollUtil:java.util.List list(boolean,java.util.Iterator)",
            "cn.hutool.core.collection.CollUtil:java.util.List split(java.util.Collection,int)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection filter(java.util.Collection,cn.hutool.core.lang.Editor)",
            "cn.hutool.core.collection.CollUtil:java.util.List filter(java.util.List,cn.hutool.core.lang.Editor)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection filter(java.util.Collection,cn.hutool.core.lang.Filter)",
            "cn.hutool.core.collection.CollUtil:java.util.List filter(java.util.List,cn.hutool.core.lang.Filter)",
            "cn.hutool.core.collection.CollUtil:java.util.List extract(java.lang.Iterable,cn.hutool.core.lang.Editor)",
            "cn.hutool.core.collection.CollUtil:java.lang.Object findOne(java.lang.Iterable,cn.hutool.core.lang.Filter)",
            "cn.hutool.core.collection.CollUtil:int count(java.lang.Iterable,cn.hutool.core.lang.Matcher)",
            "cn.hutool.core.collection.CollUtil:java.util.TreeSet toTreeSet(java.util.Collection,java.util.Comparator)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection addAll(java.util.Collection,java.lang.Object,java.lang.reflect.Type)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection addAll(java.util.Collection,java.util.Iterator)",
            "cn.hutool.core.collection.CollUtil:java.util.List addAllIfNotContains(java.util.List,java.util.List)",
            "cn.hutool.core.collection.CollUtil:java.util.ArrayList valuesOfKeys(java.util.Map,java.util.Iterator)",
            "cn.hutool.core.collection.CollUtil:java.util.LinkedHashMap sortToMap(java.util.Collection,java.util.Comparator)",
            "cn.hutool.core.collection.CollUtil:void forEach(java.util.Iterator,cn.hutool.core.collection.CollUtil$Consumer)",
            "cn.hutool.core.collection.CollUtil:void forEach(java.util.Map,cn.hutool.core.collection.CollUtil$KVConsumer)",
            "cn.hutool.core.collection.CollUtil:java.util.List group(java.util.Collection,cn.hutool.core.collection.CollUtil$Hash)",
            "cn.hutool.core.collection.ConcurrentHashSet:void <init>(java.lang.Iterable)",
            "cn.hutool.core.collection.CopiedIter:void <init>(java.util.Iterator)",
            "cn.hutool.core.collection.CopiedIter:java.lang.Object next()",
            "cn.hutool.core.collection.IteratorEnumeration:java.lang.Object nextElement()",
            "cn.hutool.core.collection.IterUtil:boolean hasNull(java.util.Iterator)",
            "cn.hutool.core.collection.IterUtil:boolean isAllNull(java.util.Iterator)",
            "cn.hutool.core.collection.IterUtil:java.util.Map countMap(java.util.Iterator)",
            "cn.hutool.core.collection.IterUtil:java.util.Map fieldValueMap(java.util.Iterator,java.lang.String)",
            "cn.hutool.core.collection.IterUtil:java.util.Map fieldValueAsMap(java.util.Iterator,java.lang.String,java.lang.String)",
            "cn.hutool.core.collection.IterUtil:java.util.List fieldValueList(java.util.Iterator,java.lang.String)",
            "cn.hutool.core.collection.IterUtil:java.lang.String join(java.util.Iterator,java.lang.CharSequence,java.lang.String,java.lang.String)",
            "cn.hutool.core.collection.IterUtil:java.util.HashMap toMap(java.lang.Iterable)",
            "cn.hutool.core.collection.IterUtil:java.util.Map toMap(java.util.Iterator,java.util.Iterator)",
            "cn.hutool.core.collection.IterUtil:java.util.List toList(java.util.Iterator)",
            "cn.hutool.core.collection.IterUtil:java.lang.Object getFirst(java.util.Iterator)",
            "cn.hutool.core.comparator.ComparatorChain:int compare(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.convert.BasicType:void <clinit>()",
            "cn.hutool.core.convert.impl.ArrayConverter:java.lang.Object convertObjectToArray(java.lang.Object)",
            "cn.hutool.core.convert.impl.MapConverter:void convertMapToMap(java.util.Map,java.util.Map)",
            "cn.hutool.core.date.format.FastDateParser$TimeZoneStrategy:void <init>(java.util.Locale)",
            "cn.hutool.core.date.format.FastDateParser:java.util.Map appendDisplayNames(java.util.Calendar,java.util.Locale,int,java.lang.StringBuilder)",
            "cn.hutool.core.io.file.FileAppender:cn.hutool.core.io.file.FileAppender flush()",
            "cn.hutool.core.io.file.FileWriter:java.io.File writeLines(java.util.Collection,cn.hutool.core.io.file.LineSeparator,boolean)",
            "cn.hutool.core.io.file.FileWriter:java.io.File writeMap(java.util.Map,cn.hutool.core.io.file.LineSeparator,java.lang.String,boolean)",
            "cn.hutool.core.io.FileTypeUtil:java.lang.String getType(java.lang.String)",
            "cn.hutool.core.io.FileUtil:java.util.List listFileNames(java.lang.String)",
            "cn.hutool.core.io.resource.MultiFileResource:cn.hutool.core.io.resource.MultiFileResource add(java.util.Collection)",
            "cn.hutool.core.io.watch.watchers.WatcherChain:void onCreate(java.nio.file.WatchEvent,java.nio.file.Path)",
            "cn.hutool.core.io.watch.watchers.WatcherChain:void onModify(java.nio.file.WatchEvent,java.nio.file.Path)",
            "cn.hutool.core.io.watch.watchers.WatcherChain:void onDelete(java.nio.file.WatchEvent,java.nio.file.Path)",
            "cn.hutool.core.io.watch.watchers.WatcherChain:void onOverflow(java.nio.file.WatchEvent,java.nio.file.Path)",
            "cn.hutool.core.io.watch.WatchMonitor:void watch(cn.hutool.core.io.watch.Watcher)",
            "cn.hutool.core.lang.ClassScaner:java.util.Set scan()",
            "cn.hutool.core.lang.ClassScaner:void scanJar(java.util.jar.JarFile)",
            "cn.hutool.core.lang.ConsistentHash:void <init>(int,java.util.Collection)",
            "cn.hutool.core.lang.ConsistentHash:void <init>(cn.hutool.core.lang.ConsistentHash$HashFunc,int,java.util.Collection)",
            "cn.hutool.core.lang.Dict:void removeEqual(cn.hutool.core.lang.Dict,java.lang.String[])",
            "cn.hutool.core.lang.JarClassLoader:void loadJar(java.net.URLClassLoader,java.io.File)",
            "cn.hutool.core.lang.JarClassLoader:cn.hutool.core.lang.JarClassLoader addJar(java.io.File)",
            "cn.hutool.core.lang.SyncFinisher:void start()",
            "cn.hutool.core.lang.WeightRandom:void <init>(java.lang.Iterable)",
            "cn.hutool.core.map.CustomKeyLinkedMap:void putAll(java.util.Map)",
            "cn.hutool.core.map.CustomKeyMap:void putAll(java.util.Map)",
            "cn.hutool.core.map.MapUtil:java.util.HashMap of(java.lang.Object[])",
            "cn.hutool.core.map.MapUtil:java.util.Map toListMap(java.lang.Iterable)",
            "cn.hutool.core.map.MapUtil:java.util.List toMapList(java.util.Map)",
            "cn.hutool.core.map.MapUtil:java.lang.String join(java.util.Map,java.lang.String,java.lang.String,boolean)",
            "cn.hutool.core.map.MapUtil:java.util.Map filter(java.util.Map,cn.hutool.core.lang.Editor)",
            "cn.hutool.core.map.MapUtil:java.util.Map filter(java.util.Map,cn.hutool.core.lang.Filter)",
            "cn.hutool.core.map.MapUtil:java.util.Map inverse(java.util.Map)",
            "cn.hutool.core.text.csv.CsvRow:java.util.Map getFieldMap()",
            "cn.hutool.core.text.csv.CsvRow:java.lang.String toString()",
            "cn.hutool.core.text.csv.CsvWriter:cn.hutool.core.text.csv.CsvWriter write(java.util.Collection)",
            "cn.hutool.core.text.replacer.ReplacerChain:int replace(java.lang.CharSequence,int,cn.hutool.core.text.StrBuilder)",
            "cn.hutool.core.util.ClassLoaderUtil:void <clinit>()",
            "cn.hutool.core.util.ImageUtil:javax.imageio.ImageReader getReader(java.lang.String)",
            "cn.hutool.core.util.ObjectUtil:int length(java.lang.Object)",
            "cn.hutool.core.util.ObjectUtil:boolean contains(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.util.ReUtil:java.lang.String extractMulti(java.util.regex.Pattern,java.lang.String,java.lang.String)",
            "cn.hutool.core.util.ReUtil:java.lang.String extractMultiAndDelPre(java.util.regex.Pattern,cn.hutool.core.lang.Holder,java.lang.String)",
            "cn.hutool.core.util.ReUtil:java.lang.String replaceAll(java.lang.String,java.util.regex.Pattern,java.lang.String)",
            "cn.hutool.core.util.StrUtil:java.lang.String format(java.lang.CharSequence,java.util.Map)",
            "cn.hutool.core.util.XmlUtil:void mapToXml(org.w3c.dom.Document,org.w3c.dom.Element,java.util.Map)",
            "cn.hutool.cache.impl.CacheObjIterator:void nextValue()",
            "cn.hutool.cache.impl.FIFOCache:int pruneCache()",
            "cn.hutool.cache.impl.LFUCache:int pruneCache()",
            "cn.hutool.cache.impl.LRUCache:int pruneCache()",
            "cn.hutool.cache.impl.TimedCache:int pruneCache()",
            "cn.hutool.db.ds.c3p0.C3p0DSFactory:void destroy()",
            "cn.hutool.db.ds.dbcp.DbcpDSFactory:void destroy()",
            "cn.hutool.db.ds.druid.DruidDSFactory:void destroy()",
            "cn.hutool.db.ds.druid.DruidDSFactory:com.alibaba.druid.pool.DruidDataSource createDataSource(java.lang.String)",
            "cn.hutool.db.ds.hikari.HikariDSFactory:void destroy()",
            "cn.hutool.db.ds.pooled.PooledDataSource:void close()",
            "cn.hutool.db.ds.pooled.PooledDSFactory:void destroy()",
            "cn.hutool.db.ds.simple.SimpleDSFactory:void destroy()",
            "cn.hutool.db.ds.tomcat.TomcatDSFactory:void destroy()",
            "cn.hutool.db.nosql.mongo.MongoFactory:void closeAll()",
            "cn.hutool.db.sql.SqlBuilder:cn.hutool.db.sql.SqlBuilder insert(cn.hutool.db.Entity,cn.hutool.db.dialect.DialectName)",
            "cn.hutool.db.sql.SqlBuilder:cn.hutool.db.sql.SqlBuilder update(cn.hutool.db.Entity)",
            "cn.hutool.db.sql.SqlUtil:java.lang.String buildEqualsWhere(cn.hutool.db.Entity,java.util.List)",
            "cn.hutool.db.sql.SqlUtil:cn.hutool.db.sql.Condition[] buildConditions(cn.hutool.db.Entity)",
            "cn.hutool.db.sql.Wrapper:cn.hutool.db.Entity wrap(cn.hutool.db.Entity)",
            "cn.hutool.dfa.WordTree:void addWords(java.util.Collection)",
            "cn.hutool.dfa.WordTree:void addWords(java.lang.String[])",
            "cn.hutool.extra.servlet.ServletUtil:java.util.Map getParamMap(javax.servlet.ServletRequest)",
            "cn.hutool.extra.ssh.JschSessionPool:void closeAll()",
            "cn.hutool.extra.ssh.Sftp:boolean delDir(java.lang.String)",
            "cn.hutool.extra.ssh.Sftp:boolean containsIgnoreCase(java.util.List,java.lang.String)",
            "cn.hutool.extra.template.engine.velocity.VelocityUtil:void merge(org.apache.velocity.Template,org.apache.velocity.VelocityContext,java.io.Writer)",
            "cn.hutool.http.GlobalHeaders:cn.hutool.http.GlobalHeaders header(java.util.Map)",
            "cn.hutool.http.HTMLFilter:java.lang.String checkTags(java.lang.String)",
            "cn.hutool.http.HttpBase:java.lang.Object header(java.util.Map,boolean)",
            "cn.hutool.http.HttpBase:java.lang.Object addHeaders(java.util.Map)",
            "cn.hutool.http.HttpBase:java.lang.String toString()",
            "cn.hutool.http.HttpConnection:cn.hutool.http.HttpConnection header(java.util.Map,boolean)",
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest form(java.util.Map)",
            "cn.hutool.http.HttpRequest:void writeForm(java.io.OutputStream)",
            "cn.hutool.http.HttpRequest:void writeFileForm(java.io.OutputStream)",
            "cn.hutool.http.HttpRequest:void appendPart(java.lang.String,cn.hutool.core.io.resource.Resource,java.io.OutputStream)",
            "cn.hutool.http.HttpResponse:java.net.HttpCookie getCookie(java.lang.String)",
            "cn.hutool.http.HttpResponse:java.lang.String toString()",
            "cn.hutool.http.HttpUtil:java.lang.String toParams(java.util.Map,java.nio.charset.Charset)",
            "cn.hutool.http.HttpUtil:java.util.HashMap decodeParamMap(java.lang.String,java.lang.String)",
            "cn.hutool.http.webservice.SoapRequest:java.lang.String toSoapXml()",
            "cn.hutool.setting.GroupedMap:int size()",
            "cn.hutool.setting.GroupedMap:cn.hutool.setting.GroupedMap putAll(java.lang.String,java.util.Map)",
            "cn.hutool.setting.Setting:java.util.Properties toProperties()",
            "cn.hutool.setting.SettingLoader:void store(java.io.PrintWriter)",
            "cn.hutool.setting.SettingLoader:java.lang.String replaceVar(java.lang.String,java.lang.String)",
            "cn.hutool.cron.pattern.CronPattern:void parseGroupPattern(java.lang.String)",
            "cn.hutool.cron.pattern.matcher.BoolArrayValueMatcher:void <init>(java.util.List)",
            "cn.hutool.cron.pattern.matcher.ValueMatcherBuilder:java.util.List parseArray(java.lang.String,cn.hutool.cron.pattern.parser.ValueParser)",
            "cn.hutool.cron.Scheduler:cn.hutool.cron.Scheduler schedule(cn.hutool.setting.Setting)",
            "cn.hutool.json.JSONArray:void <init>(java.lang.Iterable)",
            "cn.hutool.json.JSONArray:void <init>(java.util.Collection)",
            "cn.hutool.json.JSONArray:void <init>(java.lang.Object,boolean)",
            "cn.hutool.json.JSONArray:boolean addAll(java.util.Collection)",
            "cn.hutool.json.JSONArray:boolean addAll(int,java.util.Collection)",
            "cn.hutool.json.JSONObject:void <init>(java.lang.Object,boolean)",
            "cn.hutool.json.JSONObject:cn.hutool.json.JSONArray toJSONArray(java.util.Collection)",
            "cn.hutool.json.JSONObject:void putAll(java.util.Map)",
            "cn.hutool.json.JSONObject:java.io.Writer write(java.io.Writer,int,int)",
            "cn.hutool.json.JSONObject:void populateMap(java.lang.Object)",
            "cn.hutool.json.JSONObjectIter$1:cn.hutool.json.JSONObject next()",
            "cn.hutool.json.XML:java.lang.String toXml(java.lang.Object,java.lang.String)",
            "cn.hutool.poi.excel.ExcelPicUtil:java.util.Map getPicMapXls(org.apache.poi.hssf.usermodel.HSSFWorkbook,int)",
            "cn.hutool.poi.excel.ExcelPicUtil:java.util.Map getPicMapXlsx(org.apache.poi.xssf.usermodel.XSSFWorkbook,int)",
            "cn.hutool.poi.excel.ExcelReader:java.util.List read(int,int,int,java.lang.Class)",
            "cn.hutool.poi.excel.ExcelReader:java.util.List aliasHeader(java.util.List)",
            "cn.hutool.poi.excel.ExcelWriter:cn.hutool.poi.excel.ExcelWriter write(java.lang.Iterable)",
            "cn.hutool.poi.excel.ExcelWriter:cn.hutool.poi.excel.ExcelWriter write(java.lang.Iterable,java.util.Comparator)",
            "cn.hutool.poi.excel.ExcelWriter:java.util.Collection aliasHeader(java.util.Collection)",
            "cn.hutool.poi.excel.RowUtil:void writeRow(org.apache.poi.ss.usermodel.Row,java.lang.Iterable,cn.hutool.poi.excel.StyleSet,boolean)",
            "cn.hutool.poi.excel.sax.Excel07SaxReader:cn.hutool.poi.excel.sax.Excel07SaxReader read(org.apache.poi.openxml4j.opc.OPCPackage,int)"
        ]
    },
    "cn.hutool.cache.impl.CacheValuesIterator:java.lang.Object next()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.BeanUtil:java.util.Map beanToMap(java.lang.Object,java.util.Map,boolean,cn.hutool.core.lang.Editor)",
            "cn.hutool.core.bean.copier.BeanCopier:void valueProviderToBean(cn.hutool.core.bean.copier.ValueProvider,java.lang.Object)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection union(java.util.Collection,java.util.Collection)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection intersection(java.util.Collection,java.util.Collection)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection disjunction(java.util.Collection,java.util.Collection)",
            "cn.hutool.core.collection.CollUtil:boolean containsAny(java.util.Collection,java.util.Collection)",
            "cn.hutool.core.collection.CollUtil:java.util.HashSet newHashSet(boolean,java.util.Iterator)",
            "cn.hutool.core.collection.CollUtil:java.util.List list(boolean,java.util.Iterator)",
            "cn.hutool.core.collection.CollUtil:java.util.List split(java.util.Collection,int)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection filter(java.util.Collection,cn.hutool.core.lang.Editor)",
            "cn.hutool.core.collection.CollUtil:java.util.List filter(java.util.List,cn.hutool.core.lang.Editor)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection filter(java.util.Collection,cn.hutool.core.lang.Filter)",
            "cn.hutool.core.collection.CollUtil:java.util.List filter(java.util.List,cn.hutool.core.lang.Filter)",
            "cn.hutool.core.collection.CollUtil:java.util.List extract(java.lang.Iterable,cn.hutool.core.lang.Editor)",
            "cn.hutool.core.collection.CollUtil:java.lang.Object findOne(java.lang.Iterable,cn.hutool.core.lang.Filter)",
            "cn.hutool.core.collection.CollUtil:int count(java.lang.Iterable,cn.hutool.core.lang.Matcher)",
            "cn.hutool.core.collection.CollUtil:java.util.TreeSet toTreeSet(java.util.Collection,java.util.Comparator)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection addAll(java.util.Collection,java.lang.Object,java.lang.reflect.Type)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection addAll(java.util.Collection,java.util.Iterator)",
            "cn.hutool.core.collection.CollUtil:java.util.List addAllIfNotContains(java.util.List,java.util.List)",
            "cn.hutool.core.collection.CollUtil:java.util.ArrayList valuesOfKeys(java.util.Map,java.util.Iterator)",
            "cn.hutool.core.collection.CollUtil:java.util.LinkedHashMap sortToMap(java.util.Collection,java.util.Comparator)",
            "cn.hutool.core.collection.CollUtil:void forEach(java.util.Iterator,cn.hutool.core.collection.CollUtil$Consumer)",
            "cn.hutool.core.collection.CollUtil:void forEach(java.util.Map,cn.hutool.core.collection.CollUtil$KVConsumer)",
            "cn.hutool.core.collection.CollUtil:java.util.List group(java.util.Collection,cn.hutool.core.collection.CollUtil$Hash)",
            "cn.hutool.core.collection.ConcurrentHashSet:void <init>(java.lang.Iterable)",
            "cn.hutool.core.collection.CopiedIter:void <init>(java.util.Iterator)",
            "cn.hutool.core.collection.CopiedIter:java.lang.Object next()",
            "cn.hutool.core.collection.IteratorEnumeration:java.lang.Object nextElement()",
            "cn.hutool.core.collection.IterUtil:boolean hasNull(java.util.Iterator)",
            "cn.hutool.core.collection.IterUtil:boolean isAllNull(java.util.Iterator)",
            "cn.hutool.core.collection.IterUtil:java.util.Map countMap(java.util.Iterator)",
            "cn.hutool.core.collection.IterUtil:java.util.Map fieldValueMap(java.util.Iterator,java.lang.String)",
            "cn.hutool.core.collection.IterUtil:java.util.Map fieldValueAsMap(java.util.Iterator,java.lang.String,java.lang.String)",
            "cn.hutool.core.collection.IterUtil:java.util.List fieldValueList(java.util.Iterator,java.lang.String)",
            "cn.hutool.core.collection.IterUtil:java.lang.String join(java.util.Iterator,java.lang.CharSequence,java.lang.String,java.lang.String)",
            "cn.hutool.core.collection.IterUtil:java.util.HashMap toMap(java.lang.Iterable)",
            "cn.hutool.core.collection.IterUtil:java.util.Map toMap(java.util.Iterator,java.util.Iterator)",
            "cn.hutool.core.collection.IterUtil:java.util.List toList(java.util.Iterator)",
            "cn.hutool.core.collection.IterUtil:java.lang.Object getFirst(java.util.Iterator)",
            "cn.hutool.core.comparator.ComparatorChain:int compare(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.convert.BasicType:void <clinit>()",
            "cn.hutool.core.convert.impl.ArrayConverter:java.lang.Object convertObjectToArray(java.lang.Object)",
            "cn.hutool.core.convert.impl.MapConverter:void convertMapToMap(java.util.Map,java.util.Map)",
            "cn.hutool.core.date.format.FastDateParser$TimeZoneStrategy:void <init>(java.util.Locale)",
            "cn.hutool.core.date.format.FastDateParser:java.util.Map appendDisplayNames(java.util.Calendar,java.util.Locale,int,java.lang.StringBuilder)",
            "cn.hutool.core.io.file.FileAppender:cn.hutool.core.io.file.FileAppender flush()",
            "cn.hutool.core.io.file.FileWriter:java.io.File writeLines(java.util.Collection,cn.hutool.core.io.file.LineSeparator,boolean)",
            "cn.hutool.core.io.file.FileWriter:java.io.File writeMap(java.util.Map,cn.hutool.core.io.file.LineSeparator,java.lang.String,boolean)",
            "cn.hutool.core.io.FileTypeUtil:java.lang.String getType(java.lang.String)",
            "cn.hutool.core.io.FileUtil:java.util.List listFileNames(java.lang.String)",
            "cn.hutool.core.io.resource.MultiFileResource:cn.hutool.core.io.resource.MultiFileResource add(java.util.Collection)",
            "cn.hutool.core.io.watch.watchers.WatcherChain:void onCreate(java.nio.file.WatchEvent,java.nio.file.Path)",
            "cn.hutool.core.io.watch.watchers.WatcherChain:void onModify(java.nio.file.WatchEvent,java.nio.file.Path)",
            "cn.hutool.core.io.watch.watchers.WatcherChain:void onDelete(java.nio.file.WatchEvent,java.nio.file.Path)",
            "cn.hutool.core.io.watch.watchers.WatcherChain:void onOverflow(java.nio.file.WatchEvent,java.nio.file.Path)",
            "cn.hutool.core.io.watch.WatchMonitor:void watch(cn.hutool.core.io.watch.Watcher)",
            "cn.hutool.core.lang.ClassScaner:java.util.Set scan()",
            "cn.hutool.core.lang.ClassScaner:void scanJar(java.util.jar.JarFile)",
            "cn.hutool.core.lang.ConsistentHash:void <init>(int,java.util.Collection)",
            "cn.hutool.core.lang.ConsistentHash:void <init>(cn.hutool.core.lang.ConsistentHash$HashFunc,int,java.util.Collection)",
            "cn.hutool.core.lang.Dict:void removeEqual(cn.hutool.core.lang.Dict,java.lang.String[])",
            "cn.hutool.core.lang.JarClassLoader:void loadJar(java.net.URLClassLoader,java.io.File)",
            "cn.hutool.core.lang.JarClassLoader:cn.hutool.core.lang.JarClassLoader addJar(java.io.File)",
            "cn.hutool.core.lang.SyncFinisher:void start()",
            "cn.hutool.core.lang.WeightRandom:void <init>(java.lang.Iterable)",
            "cn.hutool.core.map.CustomKeyLinkedMap:void putAll(java.util.Map)",
            "cn.hutool.core.map.CustomKeyMap:void putAll(java.util.Map)",
            "cn.hutool.core.map.MapUtil:java.util.HashMap of(java.lang.Object[])",
            "cn.hutool.core.map.MapUtil:java.util.Map toListMap(java.lang.Iterable)",
            "cn.hutool.core.map.MapUtil:java.util.List toMapList(java.util.Map)",
            "cn.hutool.core.map.MapUtil:java.lang.String join(java.util.Map,java.lang.String,java.lang.String,boolean)",
            "cn.hutool.core.map.MapUtil:java.util.Map filter(java.util.Map,cn.hutool.core.lang.Editor)",
            "cn.hutool.core.map.MapUtil:java.util.Map filter(java.util.Map,cn.hutool.core.lang.Filter)",
            "cn.hutool.core.map.MapUtil:java.util.Map inverse(java.util.Map)",
            "cn.hutool.core.text.csv.CsvRow:java.util.Map getFieldMap()",
            "cn.hutool.core.text.csv.CsvRow:java.lang.String toString()",
            "cn.hutool.core.text.csv.CsvWriter:cn.hutool.core.text.csv.CsvWriter write(java.util.Collection)",
            "cn.hutool.core.text.replacer.ReplacerChain:int replace(java.lang.CharSequence,int,cn.hutool.core.text.StrBuilder)",
            "cn.hutool.core.util.ClassLoaderUtil:void <clinit>()",
            "cn.hutool.core.util.ImageUtil:javax.imageio.ImageReader getReader(java.lang.String)",
            "cn.hutool.core.util.ObjectUtil:int length(java.lang.Object)",
            "cn.hutool.core.util.ObjectUtil:boolean contains(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.util.ReUtil:java.lang.String extractMulti(java.util.regex.Pattern,java.lang.String,java.lang.String)",
            "cn.hutool.core.util.ReUtil:java.lang.String extractMultiAndDelPre(java.util.regex.Pattern,cn.hutool.core.lang.Holder,java.lang.String)",
            "cn.hutool.core.util.ReUtil:java.lang.String replaceAll(java.lang.String,java.util.regex.Pattern,java.lang.String)",
            "cn.hutool.core.util.StrUtil:java.lang.String format(java.lang.CharSequence,java.util.Map)",
            "cn.hutool.core.util.XmlUtil:void mapToXml(org.w3c.dom.Document,org.w3c.dom.Element,java.util.Map)",
            "cn.hutool.cache.impl.CacheObjIterator:void nextValue()",
            "cn.hutool.cache.impl.FIFOCache:int pruneCache()",
            "cn.hutool.cache.impl.LFUCache:int pruneCache()",
            "cn.hutool.cache.impl.LRUCache:int pruneCache()",
            "cn.hutool.cache.impl.TimedCache:int pruneCache()",
            "cn.hutool.db.ds.c3p0.C3p0DSFactory:void destroy()",
            "cn.hutool.db.ds.dbcp.DbcpDSFactory:void destroy()",
            "cn.hutool.db.ds.druid.DruidDSFactory:void destroy()",
            "cn.hutool.db.ds.druid.DruidDSFactory:com.alibaba.druid.pool.DruidDataSource createDataSource(java.lang.String)",
            "cn.hutool.db.ds.hikari.HikariDSFactory:void destroy()",
            "cn.hutool.db.ds.pooled.PooledDataSource:void close()",
            "cn.hutool.db.ds.pooled.PooledDSFactory:void destroy()",
            "cn.hutool.db.ds.simple.SimpleDSFactory:void destroy()",
            "cn.hutool.db.ds.tomcat.TomcatDSFactory:void destroy()",
            "cn.hutool.db.nosql.mongo.MongoFactory:void closeAll()",
            "cn.hutool.db.sql.SqlBuilder:cn.hutool.db.sql.SqlBuilder insert(cn.hutool.db.Entity,cn.hutool.db.dialect.DialectName)",
            "cn.hutool.db.sql.SqlBuilder:cn.hutool.db.sql.SqlBuilder update(cn.hutool.db.Entity)",
            "cn.hutool.db.sql.SqlUtil:java.lang.String buildEqualsWhere(cn.hutool.db.Entity,java.util.List)",
            "cn.hutool.db.sql.SqlUtil:cn.hutool.db.sql.Condition[] buildConditions(cn.hutool.db.Entity)",
            "cn.hutool.db.sql.Wrapper:cn.hutool.db.Entity wrap(cn.hutool.db.Entity)",
            "cn.hutool.dfa.WordTree:void addWords(java.util.Collection)",
            "cn.hutool.dfa.WordTree:void addWords(java.lang.String[])",
            "cn.hutool.extra.servlet.ServletUtil:java.util.Map getParamMap(javax.servlet.ServletRequest)",
            "cn.hutool.extra.ssh.JschSessionPool:void closeAll()",
            "cn.hutool.extra.ssh.Sftp:boolean delDir(java.lang.String)",
            "cn.hutool.extra.ssh.Sftp:boolean containsIgnoreCase(java.util.List,java.lang.String)",
            "cn.hutool.extra.template.engine.velocity.VelocityUtil:void merge(org.apache.velocity.Template,org.apache.velocity.VelocityContext,java.io.Writer)",
            "cn.hutool.http.GlobalHeaders:cn.hutool.http.GlobalHeaders header(java.util.Map)",
            "cn.hutool.http.HTMLFilter:java.lang.String checkTags(java.lang.String)",
            "cn.hutool.http.HttpBase:java.lang.Object header(java.util.Map,boolean)",
            "cn.hutool.http.HttpBase:java.lang.Object addHeaders(java.util.Map)",
            "cn.hutool.http.HttpBase:java.lang.String toString()",
            "cn.hutool.http.HttpConnection:cn.hutool.http.HttpConnection header(java.util.Map,boolean)",
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest form(java.util.Map)",
            "cn.hutool.http.HttpRequest:void writeForm(java.io.OutputStream)",
            "cn.hutool.http.HttpRequest:void writeFileForm(java.io.OutputStream)",
            "cn.hutool.http.HttpRequest:void appendPart(java.lang.String,cn.hutool.core.io.resource.Resource,java.io.OutputStream)",
            "cn.hutool.http.HttpResponse:java.net.HttpCookie getCookie(java.lang.String)",
            "cn.hutool.http.HttpResponse:java.lang.String toString()",
            "cn.hutool.http.HttpUtil:java.lang.String toParams(java.util.Map,java.nio.charset.Charset)",
            "cn.hutool.http.HttpUtil:java.util.HashMap decodeParamMap(java.lang.String,java.lang.String)",
            "cn.hutool.http.webservice.SoapRequest:java.lang.String toSoapXml()",
            "cn.hutool.setting.GroupedMap:int size()",
            "cn.hutool.setting.GroupedMap:cn.hutool.setting.GroupedMap putAll(java.lang.String,java.util.Map)",
            "cn.hutool.setting.Setting:java.util.Properties toProperties()",
            "cn.hutool.setting.SettingLoader:void store(java.io.PrintWriter)",
            "cn.hutool.setting.SettingLoader:java.lang.String replaceVar(java.lang.String,java.lang.String)",
            "cn.hutool.cron.pattern.CronPattern:void parseGroupPattern(java.lang.String)",
            "cn.hutool.cron.pattern.matcher.BoolArrayValueMatcher:void <init>(java.util.List)",
            "cn.hutool.cron.pattern.matcher.ValueMatcherBuilder:java.util.List parseArray(java.lang.String,cn.hutool.cron.pattern.parser.ValueParser)",
            "cn.hutool.cron.Scheduler:cn.hutool.cron.Scheduler schedule(cn.hutool.setting.Setting)",
            "cn.hutool.json.JSONArray:void <init>(java.lang.Iterable)",
            "cn.hutool.json.JSONArray:void <init>(java.util.Collection)",
            "cn.hutool.json.JSONArray:void <init>(java.lang.Object,boolean)",
            "cn.hutool.json.JSONArray:boolean addAll(java.util.Collection)",
            "cn.hutool.json.JSONArray:boolean addAll(int,java.util.Collection)",
            "cn.hutool.json.JSONObject:void <init>(java.lang.Object,boolean)",
            "cn.hutool.json.JSONObject:cn.hutool.json.JSONArray toJSONArray(java.util.Collection)",
            "cn.hutool.json.JSONObject:void putAll(java.util.Map)",
            "cn.hutool.json.JSONObject:java.io.Writer write(java.io.Writer,int,int)",
            "cn.hutool.json.JSONObject:void populateMap(java.lang.Object)",
            "cn.hutool.json.JSONObjectIter$1:cn.hutool.json.JSONObject next()",
            "cn.hutool.json.XML:java.lang.String toXml(java.lang.Object,java.lang.String)",
            "cn.hutool.poi.excel.ExcelPicUtil:java.util.Map getPicMapXls(org.apache.poi.hssf.usermodel.HSSFWorkbook,int)",
            "cn.hutool.poi.excel.ExcelPicUtil:java.util.Map getPicMapXlsx(org.apache.poi.xssf.usermodel.XSSFWorkbook,int)",
            "cn.hutool.poi.excel.ExcelReader:java.util.List read(int,int,int,java.lang.Class)",
            "cn.hutool.poi.excel.ExcelReader:java.util.List aliasHeader(java.util.List)",
            "cn.hutool.poi.excel.ExcelWriter:cn.hutool.poi.excel.ExcelWriter write(java.lang.Iterable)",
            "cn.hutool.poi.excel.ExcelWriter:cn.hutool.poi.excel.ExcelWriter write(java.lang.Iterable,java.util.Comparator)",
            "cn.hutool.poi.excel.ExcelWriter:java.util.Collection aliasHeader(java.util.Collection)",
            "cn.hutool.poi.excel.RowUtil:void writeRow(org.apache.poi.ss.usermodel.Row,java.lang.Iterable,cn.hutool.poi.excel.StyleSet,boolean)",
            "cn.hutool.poi.excel.sax.Excel07SaxReader:cn.hutool.poi.excel.sax.Excel07SaxReader read(org.apache.poi.openxml4j.opc.OPCPackage,int)"
        ]
    },
    "cn.hutool.cache.impl.AbstractCache:void put(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.cache.file.AbstractFileCache:byte[] getFileBytes(java.io.File)"
        ]
    },
    "cn.hutool.cache.impl.TimedCache$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.thread.GlobalThreadPool:void execute(java.lang.Runnable)",
            "cn.hutool.core.thread.ThreadUtil$1:void run()",
            "cn.hutool.cron.task.RunnableTask:void execute()"
        ]
    },
    "cn.hutool.dfa.SensitiveUtil$1:java.lang.Boolean call()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.dfa.SensitiveUtil$1:java.lang.Object call()"
        ]
    },
    "cn.hutool.dfa.SensitiveUtil:void init(java.util.Collection,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.dfa.SensitiveUtil:void init(java.lang.String,char,boolean)"
        ]
    },
    "cn.hutool.extra.template.engine.velocity.VelocityUtil:java.lang.String getContent(org.apache.velocity.app.VelocityEngine,java.lang.String,org.apache.velocity.VelocityContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.template.engine.velocity.VelocityUtil:java.lang.String getContent(java.lang.String,java.lang.String,org.apache.velocity.VelocityContext,java.lang.String)"
        ]
    },
    "cn.hutool.extra.template.engine.velocity.VelocityUtil:java.lang.String getContent(java.lang.String,org.apache.velocity.VelocityContext)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.http.HtmlUtil:java.lang.String filter(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.http.HttpRequest:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest post(java.lang.String)",
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest get(java.lang.String)",
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest head(java.lang.String)",
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest options(java.lang.String)",
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest put(java.lang.String)",
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest patch(java.lang.String)",
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest delete(java.lang.String)",
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest trace(java.lang.String)",
            "cn.hutool.http.HttpUtil:cn.hutool.http.HttpRequest createRequest(cn.hutool.http.Method,java.lang.String)"
        ]
    },
    "cn.hutool.http.HttpRequest:void urlWithParamIfGet()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpResponse execute(boolean)"
        ]
    },
    "cn.hutool.cache.file.AbstractFileCache:int getCachedFilesCount()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.map.MapProxy:boolean isEmpty()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.map.MapProxy:boolean isEmpty()",
            "cn.hutool.core.map.MapUtil:boolean isEmpty(java.util.Map)",
            "cn.hutool.core.map.MapUtil:boolean isNotEmpty(java.util.Map)",
            "cn.hutool.core.util.StrUtil:java.lang.String format(java.lang.CharSequence,java.util.Map)",
            "cn.hutool.cache.impl.AbstractCache:boolean isEmpty()",
            "cn.hutool.http.HTMLFilter:boolean allowed(java.lang.String)",
            "cn.hutool.http.HTMLFilter:boolean allowedAttribute(java.lang.String,java.lang.String)",
            "cn.hutool.json.JSONObject:boolean isEmpty()"
        ]
    },
    "cn.hutool.core.map.MapUtil:boolean isEmpty(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.BeanUtil:java.lang.Object fillBeanWithMap(java.util.Map,java.lang.Object,boolean,cn.hutool.core.bean.copier.CopyOptions)",
            "cn.hutool.core.collection.CollUtil:boolean isEmpty(java.util.Map)",
            "cn.hutool.core.lang.WeightRandom:java.lang.Object next()",
            "cn.hutool.core.map.MapUtil:java.util.TreeMap newTreeMap(java.util.Map,java.util.Comparator)",
            "cn.hutool.core.map.MapUtil:java.util.List toMapList(java.util.Map)",
            "cn.hutool.core.map.MapUtil:java.util.Map filter(java.util.Map,cn.hutool.core.lang.Editor)",
            "cn.hutool.core.map.MapUtil:java.util.Map filter(java.util.Map,cn.hutool.core.lang.Filter)",
            "cn.hutool.core.map.MapUtil:java.util.Map filter(java.util.Map,java.lang.Object[])",
            "cn.hutool.crypto.SecureUtil:java.lang.String signParams(cn.hutool.crypto.symmetric.SymmetricCrypto,java.util.Map,java.lang.String,java.lang.String,boolean)",
            "cn.hutool.crypto.SecureUtil:java.lang.String signParams(cn.hutool.crypto.digest.DigestAlgorithm,java.util.Map,java.lang.String,java.lang.String,boolean)",
            "cn.hutool.poi.excel.ExcelWriter:cn.hutool.poi.excel.ExcelWriter writeRow(java.lang.Object,boolean)",
            "cn.hutool.poi.excel.ExcelWriter:cn.hutool.poi.excel.ExcelWriter writeRow(java.util.Map,boolean)",
            "cn.hutool.poi.excel.ExcelWriter:java.util.Collection aliasHeader(java.util.Collection)",
            "cn.hutool.poi.excel.ExcelWriter:java.util.Comparator getInitedAliasComparator()"
        ]
    },
    "cn.hutool.core.map.MapUtil:boolean isNotEmpty(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.collection.CollUtil:boolean isNotEmpty(java.util.Map)",
            "cn.hutool.db.ActiveEntity:cn.hutool.db.ActiveEntity load()",
            "cn.hutool.db.SqlConnRunner:int insertOrUpdate(java.sql.Connection,cn.hutool.db.Entity,java.lang.String[])",
            "cn.hutool.http.HttpConnection:cn.hutool.http.HttpConnection header(java.util.Map,boolean)",
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest form(java.util.Map)",
            "cn.hutool.setting.GroupedMap:java.lang.String get(java.lang.String,java.lang.String)",
            "cn.hutool.setting.GroupedMap:java.lang.String remove(java.lang.String,java.lang.String)",
            "cn.hutool.setting.GroupedMap:boolean isEmpty(java.lang.String)",
            "cn.hutool.setting.GroupedMap:boolean containsKey(java.lang.String,java.lang.String)",
            "cn.hutool.setting.GroupedMap:boolean containsValue(java.lang.String,java.lang.String)",
            "cn.hutool.setting.GroupedMap:cn.hutool.setting.GroupedMap clear(java.lang.String)",
            "cn.hutool.setting.GroupedMap:java.util.Set keySet(java.lang.String)",
            "cn.hutool.setting.GroupedMap:java.util.Collection values(java.lang.String)",
            "cn.hutool.setting.GroupedMap:java.util.Set entrySet(java.lang.String)",
            "cn.hutool.poi.excel.ExcelReader:java.util.List read(int,int)"
        ]
    },
    "cn.hutool.cache.impl.AbstractCache:boolean isEmpty()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.http.HTMLFilter:boolean allowed(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HTMLFilter:java.lang.String processTag(java.lang.String)",
            "cn.hutool.http.HTMLFilter:boolean allowedAttribute(java.lang.String,java.lang.String)"
        ]
    },
    "cn.hutool.http.HTMLFilter:boolean allowedAttribute(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HTMLFilter:java.lang.String processTag(java.lang.String)"
        ]
    },
    "cn.hutool.setting.GroupedMap:boolean isEmpty(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.setting.Setting:boolean isEmpty(java.lang.String)"
        ]
    },
    "cn.hutool.setting.Setting:boolean isEmpty()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.map.MapProxy:boolean isEmpty()",
            "cn.hutool.core.map.MapUtil:boolean isEmpty(java.util.Map)",
            "cn.hutool.core.map.MapUtil:boolean isNotEmpty(java.util.Map)",
            "cn.hutool.core.util.StrUtil:java.lang.String format(java.lang.CharSequence,java.util.Map)",
            "cn.hutool.cache.impl.AbstractCache:boolean isEmpty()",
            "cn.hutool.http.HTMLFilter:boolean allowed(java.lang.String)",
            "cn.hutool.http.HTMLFilter:boolean allowedAttribute(java.lang.String,java.lang.String)",
            "cn.hutool.json.JSONObject:boolean isEmpty()"
        ]
    },
    "cn.hutool.json.JSONObject:boolean isEmpty()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.map.MapProxy:boolean isEmpty()",
            "cn.hutool.core.map.MapUtil:boolean isEmpty(java.util.Map)",
            "cn.hutool.core.map.MapUtil:boolean isNotEmpty(java.util.Map)",
            "cn.hutool.core.util.StrUtil:java.lang.String format(java.lang.CharSequence,java.util.Map)",
            "cn.hutool.cache.impl.AbstractCache:boolean isEmpty()",
            "cn.hutool.http.HTMLFilter:boolean allowed(java.lang.String)",
            "cn.hutool.http.HTMLFilter:boolean allowedAttribute(java.lang.String,java.lang.String)",
            "cn.hutool.json.JSONObject:boolean isEmpty()"
        ]
    },
    "cn.hutool.json.XML:boolean parse(cn.hutool.json.XMLTokener,cn.hutool.json.JSONObject,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.json.XML:boolean parse(cn.hutool.json.XMLTokener,cn.hutool.json.JSONObject,java.lang.String,boolean)",
            "cn.hutool.json.XML:cn.hutool.json.JSONObject toJSONObject(java.lang.String,boolean)"
        ]
    },
    "cn.hutool.cron.Scheduler:cn.hutool.cron.Scheduler schedule(java.lang.String,java.lang.String,java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.cron.Scheduler:cn.hutool.cron.Scheduler schedule(java.lang.String,java.lang.String,cn.hutool.cron.task.Task)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.cron.CronUtil:java.lang.String schedule(java.lang.String,java.lang.String,cn.hutool.cron.task.Task)",
            "cn.hutool.cron.Scheduler:java.lang.String schedule(java.lang.String,cn.hutool.cron.task.Task)"
        ]
    },
    "cn.hutool.cron.pattern.CronPattern:void parseSinglePattern(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.cron.pattern.CronPattern:void parseGroupPattern(java.lang.String)"
        ]
    },
    "cn.hutool.json.JSONGetter:cn.hutool.json.JSONArray getJSONArray(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.json.JSONUtil:cn.hutool.json.JSONArray parseArray(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.json.JSONUtil:cn.hutool.json.JSON parse(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.json.InternalJSONUtil:java.lang.Object jsonConvert(java.lang.reflect.Type,java.lang.Object,boolean)",
            "cn.hutool.json.JSONUtil:cn.hutool.json.JSON readJSON(java.io.File,java.nio.charset.Charset)",
            "cn.hutool.json.JSONUtil:java.lang.String toJsonStr(java.lang.Object)",
            "cn.hutool.json.JSONUtil:java.lang.String toJsonPrettyStr(java.lang.Object)"
        ]
    },
    "cn.hutool.db.sql.SqlBuilder:void buildConditionPart(java.lang.StringBuilder,cn.hutool.db.sql.Condition)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.sql.SqlBuilder:java.lang.String buildCondition(cn.hutool.db.sql.LogicalOperator,cn.hutool.db.sql.Condition[])"
        ]
    },
    "cn.hutool.json.JSONGetter:cn.hutool.json.JSONObject getJSONObject(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.json.InternalJSONUtil:cn.hutool.json.JSONObject propertyPut(cn.hutool.json.JSONObject,java.lang.Object,java.lang.Object)",
            "cn.hutool.json.JSONGetter:java.lang.Object getBean(java.lang.Object,java.lang.Class)"
        ]
    },
    "cn.hutool.json.JSONSupport:cn.hutool.json.JSONObject toJSON()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.json.JSONSupport:java.lang.String toJSONString()",
            "cn.hutool.json.JSONSupport:java.lang.String toPrettyString()"
        ]
    },
    "cn.hutool.json.JSONUtil:cn.hutool.json.JSONObject parseObj(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.json.JSONUtil:cn.hutool.json.JSONObject parseFromMap(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.json.JSONObject:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.DynaBean:java.lang.String toString()",
            "cn.hutool.core.collection.CollUtil$6:int compare(java.util.Map$Entry,java.util.Map$Entry)",
            "cn.hutool.core.convert.AbstractConverter:java.lang.String convertToStr(java.lang.Object)",
            "cn.hutool.core.convert.impl.ArrayConverter:java.lang.Object convertObjectToArray(java.lang.Object)",
            "cn.hutool.core.convert.impl.CurrencyConverter:java.util.Currency convertInternal(java.lang.Object)",
            "cn.hutool.core.convert.NumberWordFormater:java.lang.String format(java.lang.Object)",
            "cn.hutool.core.getter.OptNullBasicTypeFromStringGetter:java.lang.Object getObj(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.io.file.FileWriter:java.io.File writeLines(java.util.Collection,cn.hutool.core.io.file.LineSeparator,boolean)",
            "cn.hutool.core.io.watch.watchers.DelayWatcher$1:void run()",
            "cn.hutool.core.io.watch.watchers.DelayWatcher:void onDelayModify(java.nio.file.WatchEvent,java.nio.file.Path)",
            "cn.hutool.core.io.watch.WatchMonitor:void watch(cn.hutool.core.io.watch.Watcher)",
            "cn.hutool.core.lang.ConsistentHash$1:java.lang.Integer hash(java.lang.Object)",
            "cn.hutool.core.lang.ConsistentHash:void add(java.lang.Object)",
            "cn.hutool.core.lang.ConsistentHash:void remove(java.lang.Object)",
            "cn.hutool.core.lang.mutable.MutableObj:java.lang.String toString()",
            "cn.hutool.core.map.CamelCaseLinkedMap:java.lang.Object customKey(java.lang.Object)",
            "cn.hutool.core.map.CamelCaseMap:java.lang.Object customKey(java.lang.Object)",
            "cn.hutool.core.map.CaseInsensitiveLinkedMap:java.lang.Object customKey(java.lang.Object)",
            "cn.hutool.core.map.CaseInsensitiveMap:java.lang.Object customKey(java.lang.Object)",
            "cn.hutool.core.util.ArrayUtil:java.lang.String toString(java.lang.Object)",
            "cn.hutool.core.util.ObjectUtil:boolean contains(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.util.ObjectUtil:java.lang.String toString(java.lang.Object)",
            "cn.hutool.core.util.StrUtil:java.lang.String str(java.lang.Object,java.nio.charset.Charset)",
            "cn.hutool.core.util.StrUtil:java.lang.String toString(java.lang.Object)",
            "cn.hutool.core.util.XmlUtil:void mapToXml(org.w3c.dom.Document,org.w3c.dom.Element,java.util.Map)",
            "cn.hutool.cache.impl.AbstractCache:java.lang.String toString()",
            "cn.hutool.extra.servlet.ServletUtil:void setHeader(javax.servlet.http.HttpServletResponse,java.lang.String,java.lang.Object)",
            "cn.hutool.extra.template.engine.velocity.VelocityUtil:void toFile(org.apache.velocity.Template,org.apache.velocity.VelocityContext,java.lang.String)",
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest form(java.lang.String,java.lang.Object,java.lang.Object[])",
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest body(cn.hutool.json.JSON)",
            "cn.hutool.setting.dialect.Props:java.lang.Object getObj(java.lang.String,java.lang.Object)",
            "cn.hutool.setting.dialect.Props:void setProperty(java.lang.String,java.lang.Object)",
            "cn.hutool.json.InternalJSONUtil:java.io.Writer writeValue(java.io.Writer,java.lang.Object,int,int)",
            "cn.hutool.json.InternalJSONUtil:java.lang.String valueToString(java.lang.Object)",
            "cn.hutool.json.JSONObject:java.io.Writer write(java.io.Writer,int,int)",
            "cn.hutool.json.JSONObject:void init(cn.hutool.json.JSONTokener)",
            "cn.hutool.json.JSONSupport:java.lang.String toJSONString()",
            "cn.hutool.json.JSONUtil:java.lang.Object wrap(java.lang.Object,boolean)",
            "cn.hutool.json.XML:java.lang.String toXml(java.lang.Object,java.lang.String)",
            "cn.hutool.poi.excel.cell.CellUtil:void setCellValue(org.apache.poi.ss.usermodel.Cell,java.lang.Object,cn.hutool.poi.excel.StyleSet,boolean)",
            "cn.hutool.poi.excel.ExcelReader:java.util.List aliasHeader(java.util.List)"
        ]
    },
    "cn.hutool.json.JSONObject:java.lang.String toStringPretty()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.json.JSONSupport:java.lang.String toPrettyString()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.json.JSONUtil:java.lang.String toJsonStr(cn.hutool.json.JSON,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.json.JSONUtil:java.lang.String toJsonStr(cn.hutool.json.JSON)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.json.JSONUtil:java.lang.String toJsonStr(java.lang.Object)"
        ]
    },
    "cn.hutool.json.JSONUtil:java.lang.String toJsonPrettyStr(cn.hutool.json.JSON)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.json.JSONUtil:java.lang.String toJsonPrettyStr(java.lang.Object)"
        ]
    },
    "cn.hutool.json.JSONUtil:java.lang.String toXmlStr(cn.hutool.json.JSON)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.poi.excel.ExcelReader:java.util.List read(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.poi.excel.ExcelReader:java.util.List read()"
        ]
    },
    "cn.hutool.core.io.FileUtil:java.io.File convertCharset(java.io.File,java.nio.charset.Charset,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.date.DateRange$1:java.lang.Object step(java.lang.Object,java.lang.Object,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.lang.Range:java.lang.Object safeStep(java.lang.Object)"
        ]
    },
    "cn.hutool.http.HttpResponse:java.lang.String body()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HttpResponse:java.lang.String toString()",
            "cn.hutool.http.HttpUtil:java.lang.String get(java.lang.String,java.nio.charset.Charset)",
            "cn.hutool.http.HttpUtil:java.lang.String get(java.lang.String,int)",
            "cn.hutool.http.HttpUtil:java.lang.String get(java.lang.String,java.util.Map)",
            "cn.hutool.http.HttpUtil:java.lang.String get(java.lang.String,java.util.Map,int)",
            "cn.hutool.http.HttpUtil:java.lang.String post(java.lang.String,java.util.Map,int)",
            "cn.hutool.http.HttpUtil:java.lang.String post(java.lang.String,java.lang.String,int)",
            "cn.hutool.http.webservice.SoapRequest:java.lang.String execute()"
        ]
    },
    "cn.hutool.poi.excel.ExcelUtil:void readBySax(java.io.File,int,cn.hutool.poi.excel.sax.handler.RowHandler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.poi.excel.ExcelUtil:cn.hutool.poi.excel.ExcelReader getReader(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.poi.excel.ExcelUtil:cn.hutool.poi.excel.ExcelReader getReader(java.io.InputStream,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.poi.excel.ExcelUtil:cn.hutool.poi.excel.ExcelWriter getWriter(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.bean.BeanUtil:java.lang.Object mapToBean(java.util.Map,java.lang.Class,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.lang.Dict:java.lang.Object toBean(java.lang.Class)",
            "cn.hutool.poi.excel.ExcelReader:java.util.List read(int,int,int,java.lang.Class)"
        ]
    },
    "cn.hutool.core.lang.Dict:java.lang.Object toBean(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.bean.BeanUtil:java.lang.Object mapToBeanIgnoreCase(java.util.Map,java.lang.Class,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.lang.Dict:java.lang.Object toBeanIgnoreCase(java.lang.Class)"
        ]
    },
    "cn.hutool.core.lang.Dict:java.lang.Object toBeanIgnoreCase(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.handler.HandleHelper:java.lang.Object handleRow(int,java.sql.ResultSetMetaData,java.sql.ResultSet,java.lang.Object)"
        ]
    },
    "cn.hutool.extra.servlet.ServletUtil:java.lang.Object toBean(javax.servlet.ServletRequest,java.lang.Class,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.extra.mail.MailAccount:void <init>(cn.hutool.setting.Setting)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.mail.MailAccount:void <init>(java.lang.String)"
        ]
    },
    "cn.hutool.json.JSONObject:java.lang.Object toBean(java.lang.Class,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.json.JSONObject:java.lang.Object toBean(java.lang.Class)",
            "cn.hutool.json.JSONUtil:java.lang.Object toBean(cn.hutool.json.JSONObject,java.lang.Class,boolean)"
        ]
    },
    "cn.hutool.json.JSONObject:java.lang.Object toBean(java.lang.reflect.Type,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.json.InternalJSONUtil:java.lang.Object jsonConvert(java.lang.reflect.Type,java.lang.Object,boolean)",
            "cn.hutool.json.JSONObject:java.lang.Object toBean(java.lang.reflect.Type)"
        ]
    },
    "cn.hutool.json.JSONObject:java.lang.Object toBean(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.json.JSONSupport:void parse(java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.convert.Convert:java.lang.Enum toEnum(java.lang.Class,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.lang.Dict:java.lang.Enum getEnum(java.lang.Class,java.lang.String)"
        ]
    },
    "cn.hutool.core.getter.OptNullBasicTypeFromObjectGetter:java.lang.Enum getEnum(java.lang.Class,java.lang.Object,java.lang.Enum)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.getter.OptNullBasicTypeGetter:java.lang.Enum getEnum(java.lang.Class,java.lang.Object)"
        ]
    },
    "cn.hutool.core.getter.OptNullBasicTypeFromStringGetter:java.lang.Enum getEnum(java.lang.Class,java.lang.Object,java.lang.Enum)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.getter.OptNullBasicTypeGetter:java.lang.Enum getEnum(java.lang.Class,java.lang.Object)"
        ]
    },
    "cn.hutool.setting.dialect.Props:java.lang.Enum getEnum(java.lang.Class,java.lang.String,java.lang.Enum)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.setting.dialect.Props:java.lang.Enum getEnum(java.lang.Class,java.lang.String)",
            "cn.hutool.setting.dialect.Props:java.lang.Enum getEnum(java.lang.Class,java.lang.Object,java.lang.Enum)"
        ]
    },
    "cn.hutool.core.convert.ConverterRegistry:java.lang.Object convert(java.lang.reflect.Type,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.Convert:java.lang.Object convert(java.lang.reflect.Type,java.lang.Object,java.lang.Object)",
            "cn.hutool.core.convert.ConverterRegistry:java.lang.Object convert(java.lang.reflect.Type,java.lang.Object)"
        ]
    },
    "cn.hutool.core.bean.BeanUtil:java.util.Map beanToMap(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.BeanPath:java.lang.Object getFieldValue(java.lang.Object,java.lang.String)",
            "cn.hutool.core.convert.impl.MapConverter:java.util.Map convertInternal(java.lang.Object)",
            "cn.hutool.core.lang.Dict:cn.hutool.core.lang.Dict parseBean(java.lang.Object)",
            "cn.hutool.core.util.ObjectUtil:java.lang.String toString(java.lang.Object)"
        ]
    },
    "cn.hutool.core.lang.Dict:cn.hutool.core.lang.Dict parseBean(java.lang.Object,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.Entity:cn.hutool.db.Entity parseBean(java.lang.Object,boolean,boolean)"
        ]
    },
    "cn.hutool.core.date.DateUtil:java.util.List rangeToList(java.util.Date,java.util.Date,cn.hutool.core.date.DateField)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ArrayUtil:java.lang.Object[] toArray(java.lang.Iterable,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.sql.SqlBuilder:cn.hutool.db.sql.SqlBuilder 'from'(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.sql.SqlBuilder:cn.hutool.db.sql.SqlBuilder query(cn.hutool.db.sql.Query)"
        ]
    },
    "cn.hutool.db.sql.SqlBuilder:cn.hutool.db.sql.SqlBuilder groupBy(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.sql.Wrapper:java.util.Collection wrap(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.sql.SqlBuilder:cn.hutool.db.sql.SqlBuilder select(boolean,java.util.Collection)"
        ]
    },
    "cn.hutool.db.sql.SqlBuilder:cn.hutool.db.sql.SqlBuilder where(cn.hutool.db.sql.LogicalOperator,cn.hutool.db.sql.Condition[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.dialect.impl.AnsiSqlDialect:java.sql.PreparedStatement psForDelete(java.sql.Connection,cn.hutool.db.sql.Query)",
            "cn.hutool.db.dialect.impl.AnsiSqlDialect:java.sql.PreparedStatement psForUpdate(java.sql.Connection,cn.hutool.db.Entity,cn.hutool.db.sql.Query)",
            "cn.hutool.db.sql.SqlBuilder:cn.hutool.db.sql.SqlBuilder query(cn.hutool.db.sql.Query)"
        ]
    },
    "cn.hutool.db.sql.SqlBuilder:cn.hutool.db.sql.SqlBuilder having(cn.hutool.db.sql.LogicalOperator,cn.hutool.db.sql.Condition[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.sql.SqlBuilder:cn.hutool.db.sql.SqlBuilder on(cn.hutool.db.sql.LogicalOperator,cn.hutool.db.sql.Condition[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.convert.Convert:java.util.Collection toCollection(java.lang.Class,java.lang.Class,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.Convert:java.util.List toList(java.lang.Class,java.lang.Object)"
        ]
    },
    "cn.hutool.core.convert.impl.CollectionConverter:java.lang.Object convert(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.ConverterRegistry:java.lang.Object convert(java.lang.reflect.Type,java.lang.Object,java.lang.Object,boolean)"
        ]
    },
    "cn.hutool.json.InternalJSONUtil:java.lang.Object jsonConvert(java.lang.reflect.Type,java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.json.InternalJSONUtil$1:java.lang.Object value(java.lang.String,java.lang.reflect.Type)",
            "cn.hutool.json.InternalJSONUtil:java.lang.Object toArray(cn.hutool.json.JSONArray,java.lang.Class,boolean)",
            "cn.hutool.json.JSONArray:java.lang.Object getByPath(java.lang.String,java.lang.Class)",
            "cn.hutool.json.JSONGetter:java.lang.Object get(java.lang.Object,java.lang.Class,boolean)",
            "cn.hutool.json.JSONObject:java.lang.Object getByPath(java.lang.String,java.lang.Class)"
        ]
    },
    "cn.hutool.json.JSONArray:java.util.ArrayList toList(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.json.JSONUtil:java.util.List toList(cn.hutool.json.JSONArray,java.lang.Class)"
        ]
    },
    "cn.hutool.cache.impl.AbstractCache:java.util.Iterator iterator()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.collection.CollUtil:java.util.List list(boolean,java.lang.Iterable)",
            "cn.hutool.core.collection.CollUtil:java.util.List extract(java.lang.Iterable,cn.hutool.core.lang.Editor)",
            "cn.hutool.core.collection.CollUtil:java.lang.Object findOne(java.lang.Iterable,cn.hutool.core.lang.Filter)",
            "cn.hutool.core.collection.CollUtil:int count(java.lang.Iterable,cn.hutool.core.lang.Matcher)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection toCollection(java.lang.Iterable)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection addAll(java.util.Collection,java.lang.Object,java.lang.reflect.Type)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection addAll(java.util.Collection,java.lang.Iterable)",
            "cn.hutool.core.collection.CollUtil:java.util.ArrayList valuesOfKeys(java.util.Map,java.lang.Iterable)",
            "cn.hutool.core.collection.ConcurrentHashSet:void <init>(java.lang.Iterable)",
            "cn.hutool.core.collection.IterUtil:boolean isEmpty(java.lang.Iterable)",
            "cn.hutool.core.collection.IterUtil:boolean isNotEmpty(java.lang.Iterable)",
            "cn.hutool.core.collection.IterUtil:boolean hasNull(java.lang.Iterable)",
            "cn.hutool.core.collection.IterUtil:boolean isAllNull(java.lang.Iterable)",
            "cn.hutool.core.collection.IterUtil:java.util.Map countMap(java.lang.Iterable)",
            "cn.hutool.core.collection.IterUtil:java.util.Map fieldValueMap(java.lang.Iterable,java.lang.String)",
            "cn.hutool.core.collection.IterUtil:java.lang.String join(java.lang.Iterable,java.lang.CharSequence)",
            "cn.hutool.core.collection.IterUtil:java.lang.String join(java.lang.Iterable,java.lang.CharSequence,java.lang.String,java.lang.String)",
            "cn.hutool.core.collection.IterUtil:java.util.HashMap toMap(java.lang.Iterable)",
            "cn.hutool.core.collection.IterUtil:java.util.Map toMap(java.lang.Iterable,java.lang.Iterable)",
            "cn.hutool.core.collection.IterUtil:java.util.List toList(java.lang.Iterable)",
            "cn.hutool.core.collection.IterUtil:java.lang.Object getFirst(java.lang.Iterable)",
            "cn.hutool.core.collection.IterUtil:java.lang.Class getElementType(java.lang.Iterable)",
            "cn.hutool.core.lang.WeightRandom:void <init>(java.lang.Iterable)",
            "cn.hutool.core.map.MapUtil:java.util.HashMap of(java.lang.Object[])",
            "cn.hutool.core.map.MapUtil:java.util.Map toListMap(java.lang.Iterable)",
            "cn.hutool.json.JSONArray:void <init>(java.lang.Iterable)",
            "cn.hutool.json.JSONArray:void <init>(java.lang.Object,boolean)",
            "cn.hutool.poi.excel.ExcelWriter:cn.hutool.poi.excel.ExcelWriter write(java.lang.Iterable)",
            "cn.hutool.poi.excel.ExcelWriter:cn.hutool.poi.excel.ExcelWriter write(java.lang.Iterable,java.util.Comparator)",
            "cn.hutool.poi.excel.RowUtil:void writeRow(org.apache.poi.ss.usermodel.Row,java.lang.Iterable,cn.hutool.poi.excel.StyleSet,boolean)"
        ]
    },
    "cn.hutool.core.collection.CollUtil:java.lang.Class getElementType(java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.lang.ObjectId:java.lang.String next()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.lang.ObjectId:java.lang.String next(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.lang.ObjectId:java.lang.String next()"
        ]
    },
    "cn.hutool.core.util.ClassUtil:java.util.Set getClassPathResources()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.collection.CollUtil:java.lang.String join(java.lang.Iterable,java.lang.CharSequence)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.FileUtil:java.lang.String normalize(java.lang.String)",
            "cn.hutool.db.sql.SqlBuilder:cn.hutool.db.sql.SqlBuilder select(boolean,java.util.Collection)",
            "cn.hutool.db.sql.Wrapper:java.lang.String wrap(java.lang.String)",
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest form(java.lang.String,java.lang.Object)",
            "cn.hutool.http.HttpUtil:java.lang.String toParams(java.util.Map,java.nio.charset.Charset)"
        ]
    },
    "cn.hutool.core.util.ArrayUtil:java.lang.String join(java.lang.Object,java.lang.CharSequence)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.StrUtil:java.lang.String join(java.lang.CharSequence,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.handler.HandleHelper:java.lang.Object handleRow(int,java.sql.ResultSetMetaData,java.sql.ResultSet,java.lang.Class)",
            "cn.hutool.db.sql.SqlBuilder:void buildValuePartForIN(java.lang.StringBuilder,cn.hutool.db.sql.Condition)"
        ]
    },
    "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest cookie(java.net.HttpCookie[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest form(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest form(java.lang.String,java.lang.Object,java.lang.Object[])",
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest form(java.util.Map)"
        ]
    },
    "cn.hutool.core.collection.CopiedIter:java.lang.Object next()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.BeanUtil:java.util.Map beanToMap(java.lang.Object,java.util.Map,boolean,cn.hutool.core.lang.Editor)",
            "cn.hutool.core.bean.copier.BeanCopier:void valueProviderToBean(cn.hutool.core.bean.copier.ValueProvider,java.lang.Object)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection union(java.util.Collection,java.util.Collection)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection intersection(java.util.Collection,java.util.Collection)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection disjunction(java.util.Collection,java.util.Collection)",
            "cn.hutool.core.collection.CollUtil:boolean containsAny(java.util.Collection,java.util.Collection)",
            "cn.hutool.core.collection.CollUtil:java.util.HashSet newHashSet(boolean,java.util.Iterator)",
            "cn.hutool.core.collection.CollUtil:java.util.List list(boolean,java.util.Iterator)",
            "cn.hutool.core.collection.CollUtil:java.util.List split(java.util.Collection,int)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection filter(java.util.Collection,cn.hutool.core.lang.Editor)",
            "cn.hutool.core.collection.CollUtil:java.util.List filter(java.util.List,cn.hutool.core.lang.Editor)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection filter(java.util.Collection,cn.hutool.core.lang.Filter)",
            "cn.hutool.core.collection.CollUtil:java.util.List filter(java.util.List,cn.hutool.core.lang.Filter)",
            "cn.hutool.core.collection.CollUtil:java.util.List extract(java.lang.Iterable,cn.hutool.core.lang.Editor)",
            "cn.hutool.core.collection.CollUtil:java.lang.Object findOne(java.lang.Iterable,cn.hutool.core.lang.Filter)",
            "cn.hutool.core.collection.CollUtil:int count(java.lang.Iterable,cn.hutool.core.lang.Matcher)",
            "cn.hutool.core.collection.CollUtil:java.util.TreeSet toTreeSet(java.util.Collection,java.util.Comparator)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection addAll(java.util.Collection,java.lang.Object,java.lang.reflect.Type)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection addAll(java.util.Collection,java.util.Iterator)",
            "cn.hutool.core.collection.CollUtil:java.util.List addAllIfNotContains(java.util.List,java.util.List)",
            "cn.hutool.core.collection.CollUtil:java.util.ArrayList valuesOfKeys(java.util.Map,java.util.Iterator)",
            "cn.hutool.core.collection.CollUtil:java.util.LinkedHashMap sortToMap(java.util.Collection,java.util.Comparator)",
            "cn.hutool.core.collection.CollUtil:void forEach(java.util.Iterator,cn.hutool.core.collection.CollUtil$Consumer)",
            "cn.hutool.core.collection.CollUtil:void forEach(java.util.Map,cn.hutool.core.collection.CollUtil$KVConsumer)",
            "cn.hutool.core.collection.CollUtil:java.util.List group(java.util.Collection,cn.hutool.core.collection.CollUtil$Hash)",
            "cn.hutool.core.collection.ConcurrentHashSet:void <init>(java.lang.Iterable)",
            "cn.hutool.core.collection.CopiedIter:void <init>(java.util.Iterator)",
            "cn.hutool.core.collection.CopiedIter:java.lang.Object next()",
            "cn.hutool.core.collection.IteratorEnumeration:java.lang.Object nextElement()",
            "cn.hutool.core.collection.IterUtil:boolean hasNull(java.util.Iterator)",
            "cn.hutool.core.collection.IterUtil:boolean isAllNull(java.util.Iterator)",
            "cn.hutool.core.collection.IterUtil:java.util.Map countMap(java.util.Iterator)",
            "cn.hutool.core.collection.IterUtil:java.util.Map fieldValueMap(java.util.Iterator,java.lang.String)",
            "cn.hutool.core.collection.IterUtil:java.util.Map fieldValueAsMap(java.util.Iterator,java.lang.String,java.lang.String)",
            "cn.hutool.core.collection.IterUtil:java.util.List fieldValueList(java.util.Iterator,java.lang.String)",
            "cn.hutool.core.collection.IterUtil:java.lang.String join(java.util.Iterator,java.lang.CharSequence,java.lang.String,java.lang.String)",
            "cn.hutool.core.collection.IterUtil:java.util.HashMap toMap(java.lang.Iterable)",
            "cn.hutool.core.collection.IterUtil:java.util.Map toMap(java.util.Iterator,java.util.Iterator)",
            "cn.hutool.core.collection.IterUtil:java.util.List toList(java.util.Iterator)",
            "cn.hutool.core.collection.IterUtil:java.lang.Object getFirst(java.util.Iterator)",
            "cn.hutool.core.collection.IterUtil:java.lang.Class getElementType(java.util.Iterator)",
            "cn.hutool.core.comparator.ComparatorChain:int compare(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.convert.BasicType:void <clinit>()",
            "cn.hutool.core.convert.impl.ArrayConverter:java.lang.Object convertObjectToArray(java.lang.Object)",
            "cn.hutool.core.convert.impl.MapConverter:void convertMapToMap(java.util.Map,java.util.Map)",
            "cn.hutool.core.date.format.FastDateParser$TimeZoneStrategy:void <init>(java.util.Locale)",
            "cn.hutool.core.date.format.FastDateParser:java.util.Map appendDisplayNames(java.util.Calendar,java.util.Locale,int,java.lang.StringBuilder)",
            "cn.hutool.core.io.file.FileAppender:cn.hutool.core.io.file.FileAppender flush()",
            "cn.hutool.core.io.file.FileWriter:java.io.File writeLines(java.util.Collection,cn.hutool.core.io.file.LineSeparator,boolean)",
            "cn.hutool.core.io.file.FileWriter:java.io.File writeMap(java.util.Map,cn.hutool.core.io.file.LineSeparator,java.lang.String,boolean)",
            "cn.hutool.core.io.FileTypeUtil:java.lang.String getType(java.lang.String)",
            "cn.hutool.core.io.FileUtil:java.util.List listFileNames(java.lang.String)",
            "cn.hutool.core.io.resource.MultiFileResource:cn.hutool.core.io.resource.MultiFileResource add(java.util.Collection)",
            "cn.hutool.core.io.watch.watchers.WatcherChain:void onCreate(java.nio.file.WatchEvent,java.nio.file.Path)",
            "cn.hutool.core.io.watch.watchers.WatcherChain:void onModify(java.nio.file.WatchEvent,java.nio.file.Path)",
            "cn.hutool.core.io.watch.watchers.WatcherChain:void onDelete(java.nio.file.WatchEvent,java.nio.file.Path)",
            "cn.hutool.core.io.watch.watchers.WatcherChain:void onOverflow(java.nio.file.WatchEvent,java.nio.file.Path)",
            "cn.hutool.core.io.watch.WatchMonitor:void watch(cn.hutool.core.io.watch.Watcher)",
            "cn.hutool.core.lang.ClassScaner:java.util.Set scan()",
            "cn.hutool.core.lang.ClassScaner:void scanJar(java.util.jar.JarFile)",
            "cn.hutool.core.lang.ConsistentHash:void <init>(int,java.util.Collection)",
            "cn.hutool.core.lang.ConsistentHash:void <init>(cn.hutool.core.lang.ConsistentHash$HashFunc,int,java.util.Collection)",
            "cn.hutool.core.lang.Dict:void removeEqual(cn.hutool.core.lang.Dict,java.lang.String[])",
            "cn.hutool.core.lang.JarClassLoader:void loadJar(java.net.URLClassLoader,java.io.File)",
            "cn.hutool.core.lang.JarClassLoader:cn.hutool.core.lang.JarClassLoader addJar(java.io.File)",
            "cn.hutool.core.lang.SyncFinisher:void start()",
            "cn.hutool.core.lang.WeightRandom:void <init>(java.lang.Iterable)",
            "cn.hutool.core.map.CustomKeyLinkedMap:void putAll(java.util.Map)",
            "cn.hutool.core.map.CustomKeyMap:void putAll(java.util.Map)",
            "cn.hutool.core.map.MapUtil:java.util.HashMap of(java.lang.Object[])",
            "cn.hutool.core.map.MapUtil:java.util.Map toListMap(java.lang.Iterable)",
            "cn.hutool.core.map.MapUtil:java.util.List toMapList(java.util.Map)",
            "cn.hutool.core.map.MapUtil:java.lang.String join(java.util.Map,java.lang.String,java.lang.String,boolean)",
            "cn.hutool.core.map.MapUtil:java.util.Map filter(java.util.Map,cn.hutool.core.lang.Editor)",
            "cn.hutool.core.map.MapUtil:java.util.Map filter(java.util.Map,cn.hutool.core.lang.Filter)",
            "cn.hutool.core.map.MapUtil:java.util.Map inverse(java.util.Map)",
            "cn.hutool.core.text.csv.CsvRow:java.util.Map getFieldMap()",
            "cn.hutool.core.text.csv.CsvRow:java.lang.String toString()",
            "cn.hutool.core.text.csv.CsvWriter:cn.hutool.core.text.csv.CsvWriter write(java.util.Collection)",
            "cn.hutool.core.text.replacer.ReplacerChain:int replace(java.lang.CharSequence,int,cn.hutool.core.text.StrBuilder)",
            "cn.hutool.core.util.ClassLoaderUtil:void <clinit>()",
            "cn.hutool.core.util.ImageUtil:javax.imageio.ImageReader getReader(java.lang.String)",
            "cn.hutool.core.util.ObjectUtil:int length(java.lang.Object)",
            "cn.hutool.core.util.ObjectUtil:boolean contains(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.util.ReUtil:java.lang.String extractMulti(java.util.regex.Pattern,java.lang.String,java.lang.String)",
            "cn.hutool.core.util.ReUtil:java.lang.String extractMultiAndDelPre(java.util.regex.Pattern,cn.hutool.core.lang.Holder,java.lang.String)",
            "cn.hutool.core.util.ReUtil:java.lang.String replaceAll(java.lang.String,java.util.regex.Pattern,java.lang.String)",
            "cn.hutool.core.util.StrUtil:java.lang.String format(java.lang.CharSequence,java.util.Map)",
            "cn.hutool.core.util.XmlUtil:void mapToXml(org.w3c.dom.Document,org.w3c.dom.Element,java.util.Map)",
            "cn.hutool.cache.impl.CacheObjIterator:void nextValue()",
            "cn.hutool.cache.impl.FIFOCache:int pruneCache()",
            "cn.hutool.cache.impl.LFUCache:int pruneCache()",
            "cn.hutool.cache.impl.LRUCache:int pruneCache()",
            "cn.hutool.cache.impl.TimedCache:int pruneCache()",
            "cn.hutool.db.ds.c3p0.C3p0DSFactory:void destroy()",
            "cn.hutool.db.ds.dbcp.DbcpDSFactory:void destroy()",
            "cn.hutool.db.ds.druid.DruidDSFactory:void destroy()",
            "cn.hutool.db.ds.druid.DruidDSFactory:com.alibaba.druid.pool.DruidDataSource createDataSource(java.lang.String)",
            "cn.hutool.db.ds.hikari.HikariDSFactory:void destroy()",
            "cn.hutool.db.ds.pooled.PooledDataSource:void close()",
            "cn.hutool.db.ds.pooled.PooledDSFactory:void destroy()",
            "cn.hutool.db.ds.simple.SimpleDSFactory:void destroy()",
            "cn.hutool.db.ds.tomcat.TomcatDSFactory:void destroy()",
            "cn.hutool.db.nosql.mongo.MongoFactory:void closeAll()",
            "cn.hutool.db.sql.SqlBuilder:cn.hutool.db.sql.SqlBuilder insert(cn.hutool.db.Entity,cn.hutool.db.dialect.DialectName)",
            "cn.hutool.db.sql.SqlBuilder:cn.hutool.db.sql.SqlBuilder update(cn.hutool.db.Entity)",
            "cn.hutool.db.sql.SqlUtil:java.lang.String buildEqualsWhere(cn.hutool.db.Entity,java.util.List)",
            "cn.hutool.db.sql.SqlUtil:cn.hutool.db.sql.Condition[] buildConditions(cn.hutool.db.Entity)",
            "cn.hutool.db.sql.Wrapper:cn.hutool.db.Entity wrap(cn.hutool.db.Entity)",
            "cn.hutool.dfa.WordTree:void addWords(java.util.Collection)",
            "cn.hutool.dfa.WordTree:void addWords(java.lang.String[])",
            "cn.hutool.extra.servlet.ServletUtil:java.util.Map getParamMap(javax.servlet.ServletRequest)",
            "cn.hutool.extra.ssh.JschSessionPool:void closeAll()",
            "cn.hutool.extra.ssh.Sftp:boolean delDir(java.lang.String)",
            "cn.hutool.extra.ssh.Sftp:boolean containsIgnoreCase(java.util.List,java.lang.String)",
            "cn.hutool.extra.template.engine.velocity.VelocityUtil:void merge(org.apache.velocity.Template,org.apache.velocity.VelocityContext,java.io.Writer)",
            "cn.hutool.http.GlobalHeaders:cn.hutool.http.GlobalHeaders header(java.util.Map)",
            "cn.hutool.http.HTMLFilter:java.lang.String checkTags(java.lang.String)",
            "cn.hutool.http.HttpBase:java.lang.Object header(java.util.Map,boolean)",
            "cn.hutool.http.HttpBase:java.lang.Object addHeaders(java.util.Map)",
            "cn.hutool.http.HttpBase:java.lang.String toString()",
            "cn.hutool.http.HttpConnection:cn.hutool.http.HttpConnection header(java.util.Map,boolean)",
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest form(java.util.Map)",
            "cn.hutool.http.HttpRequest:void writeForm(java.io.OutputStream)",
            "cn.hutool.http.HttpRequest:void writeFileForm(java.io.OutputStream)",
            "cn.hutool.http.HttpRequest:void appendPart(java.lang.String,cn.hutool.core.io.resource.Resource,java.io.OutputStream)",
            "cn.hutool.http.HttpResponse:java.net.HttpCookie getCookie(java.lang.String)",
            "cn.hutool.http.HttpResponse:java.lang.String toString()",
            "cn.hutool.http.HttpUtil:java.lang.String toParams(java.util.Map,java.nio.charset.Charset)",
            "cn.hutool.http.HttpUtil:java.util.HashMap decodeParamMap(java.lang.String,java.lang.String)",
            "cn.hutool.http.webservice.SoapRequest:java.lang.String toSoapXml()",
            "cn.hutool.setting.GroupedMap:int size()",
            "cn.hutool.setting.GroupedMap:cn.hutool.setting.GroupedMap putAll(java.lang.String,java.util.Map)",
            "cn.hutool.setting.Setting:java.util.Properties toProperties()",
            "cn.hutool.setting.SettingLoader:void store(java.io.PrintWriter)",
            "cn.hutool.setting.SettingLoader:java.lang.String replaceVar(java.lang.String,java.lang.String)",
            "cn.hutool.cron.pattern.CronPattern:void parseGroupPattern(java.lang.String)",
            "cn.hutool.cron.pattern.matcher.BoolArrayValueMatcher:void <init>(java.util.List)",
            "cn.hutool.cron.pattern.matcher.ValueMatcherBuilder:java.util.List parseArray(java.lang.String,cn.hutool.cron.pattern.parser.ValueParser)",
            "cn.hutool.cron.Scheduler:cn.hutool.cron.Scheduler schedule(cn.hutool.setting.Setting)",
            "cn.hutool.json.JSONArray:void <init>(java.lang.Iterable)",
            "cn.hutool.json.JSONArray:void <init>(java.util.Collection)",
            "cn.hutool.json.JSONArray:void <init>(java.lang.Object,boolean)",
            "cn.hutool.json.JSONArray:boolean addAll(java.util.Collection)",
            "cn.hutool.json.JSONArray:boolean addAll(int,java.util.Collection)",
            "cn.hutool.json.JSONObject:void <init>(java.lang.Object,boolean)",
            "cn.hutool.json.JSONObject:cn.hutool.json.JSONArray toJSONArray(java.util.Collection)",
            "cn.hutool.json.JSONObject:void putAll(java.util.Map)",
            "cn.hutool.json.JSONObject:java.io.Writer write(java.io.Writer,int,int)",
            "cn.hutool.json.JSONObject:void populateMap(java.lang.Object)",
            "cn.hutool.json.JSONObjectIter$1:cn.hutool.json.JSONObject next()",
            "cn.hutool.json.XML:java.lang.String toXml(java.lang.Object,java.lang.String)",
            "cn.hutool.poi.excel.ExcelPicUtil:java.util.Map getPicMapXls(org.apache.poi.hssf.usermodel.HSSFWorkbook,int)",
            "cn.hutool.poi.excel.ExcelPicUtil:java.util.Map getPicMapXlsx(org.apache.poi.xssf.usermodel.XSSFWorkbook,int)",
            "cn.hutool.poi.excel.ExcelReader:java.util.List read(int,int,int,java.lang.Class)",
            "cn.hutool.poi.excel.ExcelReader:java.util.List aliasHeader(java.util.List)",
            "cn.hutool.poi.excel.ExcelWriter:cn.hutool.poi.excel.ExcelWriter write(java.lang.Iterable)",
            "cn.hutool.poi.excel.ExcelWriter:cn.hutool.poi.excel.ExcelWriter write(java.lang.Iterable,java.util.Comparator)",
            "cn.hutool.poi.excel.ExcelWriter:java.util.Collection aliasHeader(java.util.Collection)",
            "cn.hutool.poi.excel.RowUtil:void writeRow(org.apache.poi.ss.usermodel.Row,java.lang.Iterable,cn.hutool.poi.excel.StyleSet,boolean)",
            "cn.hutool.poi.excel.sax.Excel07SaxReader:cn.hutool.poi.excel.sax.Excel07SaxReader read(org.apache.poi.openxml4j.opc.OPCPackage,int)"
        ]
    },
    "cn.hutool.core.collection.IteratorEnumeration:java.lang.Object nextElement()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.collection.CollUtil:java.util.HashSet newHashSet(boolean,java.util.Enumeration)",
            "cn.hutool.core.collection.CollUtil:java.util.List list(boolean,java.util.Enumeration)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection addAll(java.util.Collection,java.util.Enumeration)",
            "cn.hutool.core.collection.CollUtil:void forEach(java.util.Enumeration,cn.hutool.core.collection.CollUtil$Consumer)",
            "cn.hutool.core.collection.EnumerationIter:java.lang.Object next()",
            "cn.hutool.core.lang.ObjectId:int getMachinePiece()",
            "cn.hutool.core.util.ClassUtil:java.util.Set getClassPaths(java.lang.String,boolean)",
            "cn.hutool.core.util.NetUtil:java.util.LinkedHashSet localIpv4s()",
            "cn.hutool.core.util.NetUtil:java.net.InetAddress getLocalhost()",
            "cn.hutool.core.util.ObjectUtil:int length(java.lang.Object)",
            "cn.hutool.core.util.ObjectUtil:boolean contains(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.util.ZipUtil:java.io.File unzip(java.io.File,java.io.File,java.nio.charset.Charset)",
            "cn.hutool.core.util.ZipUtil:byte[] unzipFileBytes(java.io.File,java.nio.charset.Charset,java.lang.String)",
            "cn.hutool.extra.servlet.ServletUtil:java.lang.String getHeaderIgnoreCase(javax.servlet.http.HttpServletRequest,java.lang.String)",
            "cn.hutool.extra.template.engine.velocity.VelocityUtil:org.apache.velocity.VelocityContext parseRequest(org.apache.velocity.VelocityContext,javax.servlet.http.HttpServletRequest)",
            "cn.hutool.extra.template.engine.velocity.VelocityUtil:org.apache.velocity.VelocityContext parseSession(org.apache.velocity.VelocityContext,javax.servlet.http.HttpSession)",
            "cn.hutool.json.JSONUtil:cn.hutool.json.JSONObject parseFromResourceBundle(java.util.ResourceBundle)"
        ]
    },
    "cn.hutool.json.JSONObjectIter$1:cn.hutool.json.JSONObject next()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.json.JSONObjectIter$1:java.lang.Object next()"
        ]
    },
    "cn.hutool.db.ds.pooled.PooledConnection:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.IoUtil:void close(java.lang.AutoCloseable)",
            "cn.hutool.db.DbUtil:void close(java.lang.Object[])"
        ]
    },
    "cn.hutool.core.util.ReflectUtil:java.lang.Object newInstance(java.lang.Class,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.BeanUtil:java.lang.Object mapToBean(java.util.Map,java.lang.Class,boolean)",
            "cn.hutool.core.bean.BeanUtil:java.lang.Object mapToBeanIgnoreCase(java.util.Map,java.lang.Class,boolean)",
            "cn.hutool.core.bean.BeanUtil:java.lang.Object mapToBean(java.util.Map,java.lang.Class,cn.hutool.core.bean.copier.CopyOptions)",
            "cn.hutool.core.bean.BeanUtil:java.lang.Object toBean(java.lang.Class,cn.hutool.core.bean.copier.ValueProvider,cn.hutool.core.bean.copier.CopyOptions)",
            "cn.hutool.core.bean.DynaBean:void <init>(java.lang.Class,java.lang.Object[])",
            "cn.hutool.core.collection.CollUtil:java.util.Collection create(java.lang.Class)",
            "cn.hutool.core.convert.ConverterRegistry:cn.hutool.core.convert.ConverterRegistry putCustom(java.lang.reflect.Type,java.lang.Class)",
            "cn.hutool.core.exceptions.ExceptionUtil:java.lang.Throwable wrap(java.lang.Throwable,java.lang.Class)",
            "cn.hutool.core.lang.Singleton:java.lang.Object get(java.lang.Class,java.lang.Object[])",
            "cn.hutool.core.map.MapUtil:java.util.Map createMap(java.lang.Class)",
            "cn.hutool.core.util.ReflectUtil:java.lang.Object newInstanceIfPossible(java.lang.Class)",
            "cn.hutool.aop.proxy.ProxyFactory:java.lang.Object createProxy(java.lang.Object,java.lang.Class)",
            "cn.hutool.extra.servlet.ServletUtil:java.lang.Object toBean(javax.servlet.ServletRequest,java.lang.Class,boolean)",
            "cn.hutool.json.JSONObject:java.lang.Object toBean(java.lang.Class,boolean)",
            "cn.hutool.json.JSONObject:java.lang.Object toBean(java.lang.reflect.Type,boolean)"
        ]
    },
    "cn.hutool.core.util.ReflectUtil:java.lang.reflect.Method getMethodIgnoreCase(java.lang.Class,java.lang.String,java.lang.Class[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ReflectUtil:java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ClassUtil:java.lang.reflect.Method getDeclaredMethod(java.lang.Class,java.lang.String,java.lang.Class[])",
            "cn.hutool.core.util.ReflectUtil:java.lang.reflect.Method getMethodOfObj(java.lang.Object,java.lang.String,java.lang.Object[])"
        ]
    },
    "cn.hutool.core.util.ClassUtil:boolean isSimpleValueType(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ClassUtil:boolean isSimpleTypeOrArray(java.lang.Class)"
        ]
    },
    "cn.hutool.core.util.ObjectUtil:boolean isBasicType(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.json.JSONUtil:java.lang.Object wrap(java.lang.Object,boolean)"
        ]
    },
    "cn.hutool.core.date.format.FastDateParser:cn.hutool.core.date.format.FastDateParser$Strategy access$100(cn.hutool.core.date.format.FastDateParser,char,int,java.util.Calendar)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.date.format.FastDateParser$StrategyParser:cn.hutool.core.date.format.FastDateParser$StrategyAndWidth letterPattern(char)"
        ]
    },
    "cn.hutool.core.io.FileUtil:java.io.File writeLines(java.util.Collection,java.io.File,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.FileUtil:java.io.File appendLines(java.util.Collection,java.io.File,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.FileUtil:java.io.File writeLines(java.util.Collection,java.io.File,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.FileUtil:java.io.File writeUtf8Lines(java.util.Collection,java.io.File)"
        ]
    },
    "cn.hutool.core.io.FileUtil:java.io.File appendLines(java.util.Collection,java.io.File,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.FileUtil:java.io.File appendUtf8Lines(java.util.Collection,java.io.File)"
        ]
    },
    "cn.hutool.core.util.ClassUtil:java.util.Set scanPackageByAnnotation(java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ClassUtil:java.util.Set scanPackageBySuper(java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ClassUtil:java.util.Set scanPackage()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ClassUtil:java.util.Set scanPackage(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.map.MapUtil:java.util.Map toCamelCaseMap(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.BeanUtil:java.lang.Object fillBeanWithMap(java.util.Map,java.lang.Object,boolean,cn.hutool.core.bean.copier.CopyOptions)"
        ]
    },
    "cn.hutool.core.bean.copier.provider.MapValueProvider:void <init>(java.util.Map,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.copier.BeanCopier:void mapToBean(java.util.Map,java.lang.Object)"
        ]
    },
    "cn.hutool.http.HttpBase:java.util.List headerList(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HttpBase:java.lang.String header(java.lang.String)"
        ]
    },
    "cn.hutool.core.bean.BeanDesc:java.util.Map getPropMap(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.copier.provider.BeanValueProvider:void <init>(java.lang.Object,boolean,boolean)",
            "cn.hutool.db.handler.HandleHelper:java.lang.Object handleRow(int,java.sql.ResultSetMetaData,java.sql.ResultSet,java.lang.Class)"
        ]
    },
    "cn.hutool.crypto.SecureUtil:java.lang.String signParamsMd5(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.SecureUtil:java.lang.String signParamsSha1(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.SecureUtil:java.lang.String signParamsSha256(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.bean.BeanPath:java.lang.Object get(java.util.List,java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.BeanPath:java.lang.Object get(java.lang.Object)",
            "cn.hutool.core.bean.BeanPath:void set(java.lang.Object,java.util.List,java.lang.Object)"
        ]
    },
    "cn.hutool.core.convert.impl.AtomicBooleanConverter:java.lang.Object convertInternal(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.AbstractConverter:java.lang.Object convert(java.lang.Object,java.lang.Object)"
        ]
    },
    "cn.hutool.core.convert.impl.BooleanConverter:java.lang.Object convertInternal(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.AbstractConverter:java.lang.Object convert(java.lang.Object,java.lang.Object)"
        ]
    },
    "cn.hutool.core.convert.impl.CalendarConverter:java.lang.Object convertInternal(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.AbstractConverter:java.lang.Object convert(java.lang.Object,java.lang.Object)"
        ]
    },
    "cn.hutool.core.convert.impl.CharacterConverter:java.lang.Object convertInternal(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.AbstractConverter:java.lang.Object convert(java.lang.Object,java.lang.Object)"
        ]
    },
    "cn.hutool.core.convert.impl.CharsetConverter:java.lang.Object convertInternal(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.AbstractConverter:java.lang.Object convert(java.lang.Object,java.lang.Object)"
        ]
    },
    "cn.hutool.core.convert.impl.ClassConverter:java.lang.Object convertInternal(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.AbstractConverter:java.lang.Object convert(java.lang.Object,java.lang.Object)"
        ]
    },
    "cn.hutool.core.convert.impl.DateConverter:java.lang.Object convertInternal(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.AbstractConverter:java.lang.Object convert(java.lang.Object,java.lang.Object)"
        ]
    },
    "cn.hutool.core.convert.impl.GenericEnumConverter:java.lang.Object convertInternal(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.AbstractConverter:java.lang.Object convert(java.lang.Object,java.lang.Object)"
        ]
    },
    "cn.hutool.core.convert.impl.NumberConverter:java.lang.Number convertInternal(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.impl.NumberConverter:java.lang.Object convertInternal(java.lang.Object)"
        ]
    },
    "cn.hutool.core.convert.impl.NumberConverter:java.math.BigDecimal toBigDecimal(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.impl.NumberConverter:java.lang.Number convertInternal(java.lang.Object)"
        ]
    },
    "cn.hutool.core.convert.impl.NumberConverter:java.math.BigInteger toBigInteger(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.impl.NumberConverter:java.lang.Number convertInternal(java.lang.Object)"
        ]
    },
    "cn.hutool.core.convert.impl.PathConverter:java.lang.Object convertInternal(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.AbstractConverter:java.lang.Object convert(java.lang.Object,java.lang.Object)"
        ]
    },
    "cn.hutool.core.convert.impl.StringConverter:java.lang.Object convertInternal(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.AbstractConverter:java.lang.Object convert(java.lang.Object,java.lang.Object)"
        ]
    },
    "cn.hutool.core.convert.impl.TimeZoneConverter:java.lang.Object convertInternal(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.AbstractConverter:java.lang.Object convert(java.lang.Object,java.lang.Object)"
        ]
    },
    "cn.hutool.core.convert.impl.URIConverter:java.lang.Object convertInternal(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.AbstractConverter:java.lang.Object convert(java.lang.Object,java.lang.Object)"
        ]
    },
    "cn.hutool.core.convert.impl.URLConverter:java.lang.Object convertInternal(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.AbstractConverter:java.lang.Object convert(java.lang.Object,java.lang.Object)"
        ]
    },
    "cn.hutool.core.convert.impl.UUIDConverter:java.lang.Object convertInternal(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.AbstractConverter:java.lang.Object convert(java.lang.Object,java.lang.Object)"
        ]
    },
    "cn.hutool.core.getter.OptNullBasicTypeFromObjectGetter:java.lang.String getStr(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.getter.OptNullBasicTypeGetter:java.lang.String getStr(java.lang.Object)",
            "cn.hutool.json.JSONGetter:java.lang.String getStr(java.lang.Object,java.lang.String)"
        ]
    },
    "cn.hutool.core.getter.OptNullBasicTypeFromObjectGetter:java.lang.Integer getInt(java.lang.Object,java.lang.Integer)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.getter.OptNullBasicTypeGetter:java.lang.Integer getInt(java.lang.Object)"
        ]
    },
    "cn.hutool.core.getter.OptNullBasicTypeFromObjectGetter:java.lang.Short getShort(java.lang.Object,java.lang.Short)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.getter.OptNullBasicTypeGetter:java.lang.Short getShort(java.lang.Object)"
        ]
    },
    "cn.hutool.core.getter.OptNullBasicTypeFromObjectGetter:java.lang.Boolean getBool(java.lang.Object,java.lang.Boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.getter.OptNullBasicTypeGetter:java.lang.Boolean getBool(java.lang.Object)"
        ]
    },
    "cn.hutool.core.getter.OptNullBasicTypeFromObjectGetter:java.lang.Long getLong(java.lang.Object,java.lang.Long)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.getter.OptNullBasicTypeGetter:java.lang.Long getLong(java.lang.Object)"
        ]
    },
    "cn.hutool.core.getter.OptNullBasicTypeFromObjectGetter:java.lang.Character getChar(java.lang.Object,java.lang.Character)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.getter.OptNullBasicTypeGetter:java.lang.Character getChar(java.lang.Object)"
        ]
    },
    "cn.hutool.core.getter.OptNullBasicTypeFromObjectGetter:java.lang.Float getFloat(java.lang.Object,java.lang.Float)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.getter.OptNullBasicTypeGetter:java.lang.Float getFloat(java.lang.Object)"
        ]
    },
    "cn.hutool.core.getter.OptNullBasicTypeFromObjectGetter:java.lang.Double getDouble(java.lang.Object,java.lang.Double)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.getter.OptNullBasicTypeGetter:java.lang.Double getDouble(java.lang.Object)"
        ]
    },
    "cn.hutool.core.getter.OptNullBasicTypeFromObjectGetter:java.lang.Byte getByte(java.lang.Object,java.lang.Byte)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.getter.OptNullBasicTypeGetter:java.lang.Byte getByte(java.lang.Object)"
        ]
    },
    "cn.hutool.core.getter.OptNullBasicTypeFromObjectGetter:java.math.BigDecimal getBigDecimal(java.lang.Object,java.math.BigDecimal)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.getter.OptNullBasicTypeGetter:java.math.BigDecimal getBigDecimal(java.lang.Object)"
        ]
    },
    "cn.hutool.core.getter.OptNullBasicTypeFromObjectGetter:java.math.BigInteger getBigInteger(java.lang.Object,java.math.BigInteger)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.getter.OptNullBasicTypeGetter:java.math.BigInteger getBigInteger(java.lang.Object)"
        ]
    },
    "cn.hutool.core.getter.OptNullBasicTypeFromObjectGetter:java.util.Date getDate(java.lang.Object,java.util.Date)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.getter.OptNullBasicTypeGetter:java.util.Date getDate(java.lang.Object)"
        ]
    },
    "cn.hutool.json.JSONArray:boolean isNull(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.json.JSONArray:cn.hutool.json.JSONObject toJSONObject(cn.hutool.json.JSONArray)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.json.JSONGetter:java.lang.Object get(java.lang.Object,java.lang.Class,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.json.JSONGetter:java.lang.Object get(java.lang.Object,java.lang.Class)"
        ]
    },
    "cn.hutool.json.JSONObject:boolean isNull(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.json.JSONObject:cn.hutool.json.JSONObject accumulate(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.json.XML:boolean parse(cn.hutool.json.XMLTokener,cn.hutool.json.JSONObject,java.lang.String,boolean)"
        ]
    },
    "cn.hutool.json.JSONObject:cn.hutool.json.JSONObject append(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.json.JSONObject:cn.hutool.json.JSONObject increment(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.annotation.CombinationAnnotationElement:java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.annotation.AnnotationUtil:java.lang.'annotation'.Annotation getAnnotation(java.lang.reflect.AnnotatedElement,java.lang.Class)"
        ]
    },
    "cn.hutool.core.bean.BeanDesc:cn.hutool.core.bean.BeanDesc$PropDesc getProp(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.bean.BeanDesc:java.lang.reflect.Field getField(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.bean.BeanDesc:java.lang.reflect.Method getGetter(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.DynaBean:java.lang.Object get(java.lang.String)"
        ]
    },
    "cn.hutool.core.bean.BeanDesc:java.lang.reflect.Method getSetter(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.DynaBean:void set(java.lang.String,java.lang.Object)"
        ]
    },
    "cn.hutool.core.bean.BeanUtil:java.beans.PropertyDescriptor getPropertyDescriptor(java.lang.Class,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.BeanUtil:java.beans.PropertyDescriptor getPropertyDescriptor(java.lang.Class,java.lang.String)"
        ]
    },
    "cn.hutool.core.bean.BeanUtil:java.lang.Object getFieldValue(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.BeanPath:java.lang.Object getFieldValue(java.lang.Object,java.lang.String)"
        ]
    },
    "cn.hutool.core.bean.copier.provider.BeanValueProvider:java.lang.Object value(java.lang.String,java.lang.reflect.Type)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.copier.provider.BeanValueProvider:java.lang.Object value(java.lang.Object,java.lang.reflect.Type)"
        ]
    },
    "cn.hutool.core.bean.copier.provider.MapValueProvider:java.lang.Object value(java.lang.String,java.lang.reflect.Type)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.copier.provider.MapValueProvider:java.lang.Object value(java.lang.Object,java.lang.reflect.Type)"
        ]
    },
    "cn.hutool.core.bean.DynaBean:java.lang.Object get(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.DynaBean:java.lang.Object safeGet(java.lang.String)"
        ]
    },
    "cn.hutool.core.collection.CollUtil$4:java.lang.Object edit(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.BeanUtil:java.util.Map beanToMap(java.lang.Object,java.util.Map,boolean,cn.hutool.core.lang.Editor)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection filter(java.util.Collection,cn.hutool.core.lang.Editor)",
            "cn.hutool.core.collection.CollUtil:java.util.List filter(java.util.List,cn.hutool.core.lang.Editor)",
            "cn.hutool.core.collection.CollUtil:java.util.List extract(java.lang.Iterable,cn.hutool.core.lang.Editor)",
            "cn.hutool.core.map.MapUtil:java.util.Map filter(java.util.Map,cn.hutool.core.lang.Editor)",
            "cn.hutool.core.util.ArrayUtil:java.lang.Object[] filter(java.lang.Object[],cn.hutool.core.lang.Editor)"
        ]
    },
    "cn.hutool.core.collection.CollUtil$5:boolean accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.collection.CollUtil:java.util.Collection filter(java.util.Collection,cn.hutool.core.lang.Filter)",
            "cn.hutool.core.collection.CollUtil:java.util.List filter(java.util.List,cn.hutool.core.lang.Filter)",
            "cn.hutool.core.collection.CollUtil:java.lang.Object findOne(java.lang.Iterable,cn.hutool.core.lang.Filter)",
            "cn.hutool.core.io.file.FileCopier:void internalCopyDirContent(java.io.File,java.io.File)",
            "cn.hutool.core.io.file.FileCopier:void internalCopyFile(java.io.File,java.io.File)",
            "cn.hutool.core.lang.ClassScaner:void addIfAccept(java.lang.Class)",
            "cn.hutool.core.map.MapUtil:java.util.Map filter(java.util.Map,cn.hutool.core.lang.Filter)",
            "cn.hutool.core.util.ArrayUtil:java.lang.Object[] filter(java.lang.Object[],cn.hutool.core.lang.Filter)",
            "cn.hutool.core.util.ClassUtil:java.util.List getPublicMethods(java.lang.Class,cn.hutool.core.lang.Filter)",
            "cn.hutool.core.util.ReflectUtil:java.lang.reflect.Method[] getMethods(java.lang.Class,cn.hutool.core.lang.Filter)",
            "cn.hutool.extra.ssh.Sftp$3:int select(com.jcraft.jsch.ChannelSftp$LsEntry)"
        ]
    },
    "cn.hutool.core.collection.CollUtil:java.util.ArrayList valuesOfKeys(java.util.Map,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.convert.ConverterRegistry:cn.hutool.core.convert.Converter getDefaultConverter(java.lang.reflect.Type)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.ConverterRegistry:cn.hutool.core.convert.Converter getConverter(java.lang.reflect.Type,boolean)"
        ]
    },
    "cn.hutool.core.convert.ConverterRegistry:cn.hutool.core.convert.Converter getCustomConverter(java.lang.reflect.Type)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.ConverterRegistry:cn.hutool.core.convert.Converter getConverter(java.lang.reflect.Type,boolean)"
        ]
    },
    "cn.hutool.core.date.format.FastDateParser$CaseInsensitiveTextStrategy:void setCalendar(cn.hutool.core.date.format.FastDateParser,java.util.Calendar,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.date.format.FastDateParser$PatternStrategy:boolean parse(cn.hutool.core.date.format.FastDateParser,java.util.Calendar,java.lang.String,java.text.ParsePosition,int)"
        ]
    },
    "cn.hutool.core.date.format.FastDateParser$TimeZoneStrategy:void setCalendar(cn.hutool.core.date.format.FastDateParser,java.util.Calendar,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.date.format.FastDateParser$PatternStrategy:boolean parse(cn.hutool.core.date.format.FastDateParser,java.util.Calendar,java.lang.String,java.text.ParsePosition,int)"
        ]
    },
    "cn.hutool.core.exceptions.ExceptionUtil:java.lang.String stacktraceToString(java.lang.Throwable,int,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.exceptions.ExceptionUtil:java.lang.String stacktraceToOneLineString(java.lang.Throwable,int)",
            "cn.hutool.core.exceptions.ExceptionUtil:java.lang.String stacktraceToString(java.lang.Throwable,int)"
        ]
    },
    "cn.hutool.core.lang.SimpleCache:java.lang.Object get(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.BeanDescCache:cn.hutool.core.bean.BeanDesc getBeanDesc(java.lang.Class)",
            "cn.hutool.core.bean.BeanInfoCache:java.util.Map getPropertyDescriptorMap(java.lang.Class,boolean)",
            "cn.hutool.core.lang.PatternPool:java.util.regex.Pattern get(java.lang.String,int)",
            "cn.hutool.core.util.ClassLoaderUtil:java.lang.Class loadClass(java.lang.String,java.lang.ClassLoader,boolean)",
            "cn.hutool.core.util.ReflectUtil:java.lang.reflect.Constructor[] getConstructors(java.lang.Class)",
            "cn.hutool.core.util.ReflectUtil:java.lang.reflect.Field[] getFields(java.lang.Class)",
            "cn.hutool.core.util.ReflectUtil:java.lang.reflect.Method[] getMethods(java.lang.Class)"
        ]
    },
    "cn.hutool.core.lang.Singleton:java.lang.Object get(java.lang.Class,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.lang.Singleton:java.lang.Object get(java.lang.String,java.lang.Object[])",
            "cn.hutool.core.util.ClassUtil:java.lang.Object invoke(java.lang.String,java.lang.String,boolean,java.lang.Object[])",
            "cn.hutool.setting.profile.GlobalProfile:cn.hutool.setting.profile.Profile setProfile(java.lang.String)",
            "cn.hutool.setting.profile.GlobalProfile:cn.hutool.setting.Setting getSetting(java.lang.String)",
            "cn.hutool.system.SystemUtil:cn.hutool.system.JvmSpecInfo getJvmSpecInfo()",
            "cn.hutool.system.SystemUtil:cn.hutool.system.JvmInfo getJvmInfo()",
            "cn.hutool.system.SystemUtil:cn.hutool.system.JavaSpecInfo getJavaSpecInfo()",
            "cn.hutool.system.SystemUtil:cn.hutool.system.JavaInfo getJavaInfo()",
            "cn.hutool.system.SystemUtil:cn.hutool.system.JavaRuntimeInfo getJavaRuntimeInfo()",
            "cn.hutool.system.SystemUtil:cn.hutool.system.OsInfo getOsInfo()",
            "cn.hutool.system.SystemUtil:cn.hutool.system.UserInfo getUserInfo()",
            "cn.hutool.system.SystemUtil:cn.hutool.system.HostInfo getHostInfo()",
            "cn.hutool.system.SystemUtil:cn.hutool.system.RuntimeInfo getRuntimeInfo()"
        ]
    },
    "cn.hutool.core.map.MapProxy:java.lang.Object getObj(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.getter.OptNullBasicTypeGetter:java.lang.Object getObj(java.lang.Object)"
        ]
    },
    "cn.hutool.core.map.MapProxy:java.lang.Object get(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.annotation.CombinationAnnotationElement:java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)",
            "cn.hutool.core.bean.BeanDesc:cn.hutool.core.bean.BeanDesc$PropDesc getProp(java.lang.String)",
            "cn.hutool.core.bean.BeanDesc:java.lang.reflect.Field getField(java.lang.String)",
            "cn.hutool.core.bean.BeanDesc:java.lang.reflect.Method getGetter(java.lang.String)",
            "cn.hutool.core.bean.BeanDesc:java.lang.reflect.Method getSetter(java.lang.String)",
            "cn.hutool.core.bean.BeanUtil:java.beans.PropertyDescriptor getPropertyDescriptor(java.lang.Class,java.lang.String,boolean)",
            "cn.hutool.core.bean.BeanUtil:java.lang.Object getFieldValue(java.lang.Object,java.lang.String)",
            "cn.hutool.core.bean.copier.BeanCopier:void valueProviderToBean(cn.hutool.core.bean.copier.ValueProvider,java.lang.Object)",
            "cn.hutool.core.bean.copier.provider.BeanValueProvider:java.lang.Object value(java.lang.String,java.lang.reflect.Type)",
            "cn.hutool.core.bean.copier.provider.MapValueProvider:java.lang.Object value(java.lang.String,java.lang.reflect.Type)",
            "cn.hutool.core.bean.DynaBean:java.lang.Object get(java.lang.String)",
            "cn.hutool.core.collection.CollUtil$4:java.lang.Object edit(java.lang.Object)",
            "cn.hutool.core.collection.CollUtil$5:boolean accept(java.lang.Object)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection union(java.util.Collection,java.util.Collection)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection intersection(java.util.Collection,java.util.Collection)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection disjunction(java.util.Collection,java.util.Collection)",
            "cn.hutool.core.collection.CollUtil:java.util.ArrayList valuesOfKeys(java.util.Map,java.lang.Object[])",
            "cn.hutool.core.collection.CollUtil:java.util.ArrayList valuesOfKeys(java.util.Map,java.util.Iterator)",
            "cn.hutool.core.convert.BasicType:java.lang.Class wrap(java.lang.Class)",
            "cn.hutool.core.convert.BasicType:java.lang.Class unWrap(java.lang.Class)",
            "cn.hutool.core.convert.ConverterRegistry:cn.hutool.core.convert.Converter getDefaultConverter(java.lang.reflect.Type)",
            "cn.hutool.core.convert.ConverterRegistry:cn.hutool.core.convert.Converter getCustomConverter(java.lang.reflect.Type)",
            "cn.hutool.core.date.format.FastDateParser$CaseInsensitiveTextStrategy:void setCalendar(cn.hutool.core.date.format.FastDateParser,java.util.Calendar,java.lang.String)",
            "cn.hutool.core.date.format.FastDateParser$TimeZoneStrategy:void setCalendar(cn.hutool.core.date.format.FastDateParser,java.util.Calendar,java.lang.String)",
            "cn.hutool.core.exceptions.ExceptionUtil:java.lang.String stacktraceToString(java.lang.Throwable,int,java.util.Map)",
            "cn.hutool.core.io.watch.WatchMonitor:void watch(cn.hutool.core.io.watch.Watcher)",
            "cn.hutool.core.lang.SimpleCache:java.lang.Object get(java.lang.Object)",
            "cn.hutool.core.lang.Singleton:java.lang.Object get(java.lang.Class,java.lang.Object[])",
            "cn.hutool.core.map.MapProxy:java.lang.Object getObj(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.map.MapProxy:java.lang.Object get(java.lang.Object)",
            "cn.hutool.core.map.MapUtil:java.util.Map filter(java.util.Map,java.lang.Object[])",
            "cn.hutool.core.map.MapUtil:java.lang.Object get(java.util.Map,java.lang.Object,java.lang.Class)",
            "cn.hutool.core.text.csv.CsvRow:java.lang.String getByName(java.lang.String)",
            "cn.hutool.core.text.csv.CsvRow:java.util.Map getFieldMap()",
            "cn.hutool.core.text.replacer.LookupReplacer:int replace(java.lang.CharSequence,int,cn.hutool.core.text.StrBuilder)",
            "cn.hutool.core.util.ClassLoaderUtil:java.lang.Class loadPrimitiveClass(java.lang.String)",
            "cn.hutool.core.util.ClassUtil:boolean isAssignable(java.lang.Class,java.lang.Class)",
            "cn.hutool.core.util.IdcardUtil:boolean isvalidCard15(java.lang.String)",
            "cn.hutool.core.util.IdcardUtil:boolean isValidTWCard(java.lang.String)",
            "cn.hutool.core.util.IdcardUtil:java.lang.String getProvinceByIdCard(java.lang.String)",
            "cn.hutool.cache.impl.AbstractCache:boolean containsKey(java.lang.Object)",
            "cn.hutool.cache.impl.AbstractCache:java.lang.Object get(java.lang.Object,boolean)",
            "cn.hutool.db.dialect.DialectFactory:cn.hutool.db.dialect.Dialect getDialect(javax.sql.DataSource)",
            "cn.hutool.db.ds.c3p0.C3p0DSFactory:javax.sql.DataSource getDataSource(java.lang.String)",
            "cn.hutool.db.ds.c3p0.C3p0DSFactory:void close(java.lang.String)",
            "cn.hutool.db.ds.dbcp.DbcpDSFactory:javax.sql.DataSource getDataSource(java.lang.String)",
            "cn.hutool.db.ds.dbcp.DbcpDSFactory:void close(java.lang.String)",
            "cn.hutool.db.ds.druid.DruidDSFactory:javax.sql.DataSource getDataSource(java.lang.String)",
            "cn.hutool.db.ds.druid.DruidDSFactory:void close(java.lang.String)",
            "cn.hutool.db.ds.hikari.HikariDSFactory:javax.sql.DataSource getDataSource(java.lang.String)",
            "cn.hutool.db.ds.hikari.HikariDSFactory:void close(java.lang.String)",
            "cn.hutool.db.ds.jndi.JndiDSFactory:javax.sql.DataSource getDataSource(java.lang.String)",
            "cn.hutool.db.ds.pooled.PooledDSFactory:javax.sql.DataSource getDataSource(java.lang.String)",
            "cn.hutool.db.ds.pooled.PooledDSFactory:void close(java.lang.String)",
            "cn.hutool.db.ds.simple.SimpleDSFactory:javax.sql.DataSource getDataSource(java.lang.String)",
            "cn.hutool.db.ds.simple.SimpleDSFactory:void close(java.lang.String)",
            "cn.hutool.db.ds.tomcat.TomcatDSFactory:org.apache.tomcat.jdbc.pool.DataSource getDataSource(java.lang.String)",
            "cn.hutool.db.ds.tomcat.TomcatDSFactory:void close(java.lang.String)",
            "cn.hutool.db.handler.HandleHelper:java.lang.Object handleRow(int,java.sql.ResultSetMetaData,java.sql.ResultSet,java.lang.Class)",
            "cn.hutool.db.nosql.mongo.MongoFactory:cn.hutool.db.nosql.mongo.MongoDS getDS(java.lang.String,int)",
            "cn.hutool.db.nosql.mongo.MongoFactory:cn.hutool.db.nosql.mongo.MongoDS getDS(java.lang.String[])",
            "cn.hutool.db.nosql.mongo.MongoFactory:cn.hutool.db.nosql.mongo.MongoDS getDS(cn.hutool.setting.Setting,java.lang.String[])",
            "cn.hutool.db.sql.NamedSql:void parse(java.lang.String,java.util.Map)",
            "cn.hutool.db.ThreadLocalConnection$GroupedConnection:java.sql.Connection get(javax.sql.DataSource)",
            "cn.hutool.db.ThreadLocalConnection$GroupedConnection:cn.hutool.db.ThreadLocalConnection$GroupedConnection close(javax.sql.DataSource)",
            "cn.hutool.extra.servlet.multipart.MultipartFormData:java.lang.String getParam(java.lang.String)",
            "cn.hutool.extra.servlet.multipart.MultipartFormData:java.lang.String[] getArrayParam(java.lang.String)",
            "cn.hutool.extra.servlet.multipart.MultipartFormData:cn.hutool.extra.servlet.multipart.UploadFile[] getFiles(java.lang.String)",
            "cn.hutool.extra.servlet.multipart.MultipartFormData:void putFile(java.lang.String,cn.hutool.extra.servlet.multipart.UploadFile)",
            "cn.hutool.extra.servlet.multipart.MultipartFormData:void putParameter(java.lang.String,java.lang.String)",
            "cn.hutool.extra.servlet.ServletUtil:javax.servlet.http.Cookie getCookie(javax.servlet.http.HttpServletRequest,java.lang.String)",
            "cn.hutool.extra.ssh.JschSessionPool:com.jcraft.jsch.Session get(java.lang.String)",
            "cn.hutool.extra.ssh.JschSessionPool:void close(java.lang.String)",
            "cn.hutool.http.GlobalHeaders:java.util.List headerList(java.lang.String)",
            "cn.hutool.http.GlobalHeaders:cn.hutool.http.GlobalHeaders header(java.lang.String,java.lang.String,boolean)",
            "cn.hutool.http.HTMLFilter:void <init>(java.util.Map)",
            "cn.hutool.http.HTMLFilter:java.lang.String checkTags(java.lang.String)",
            "cn.hutool.http.HTMLFilter:java.lang.String processTag(java.lang.String)",
            "cn.hutool.http.HTMLFilter:boolean allowedAttribute(java.lang.String,java.lang.String)",
            "cn.hutool.http.HttpBase:java.lang.Object header(java.lang.String,java.lang.String,boolean)",
            "cn.hutool.http.HttpUtil:void addParam(java.util.Map,java.lang.String,java.lang.String,java.lang.String)",
            "cn.hutool.log.LogFactory:cn.hutool.log.Log getLog(java.lang.String)",
            "cn.hutool.log.LogFactory:cn.hutool.log.Log getLog(java.lang.Class)",
            "cn.hutool.setting.profile.Profile:cn.hutool.setting.Setting getSetting(java.lang.String)",
            "cn.hutool.setting.SettingUtil:cn.hutool.setting.Setting get(java.lang.String)",
            "cn.hutool.json.JSONObject:java.lang.Object get(java.lang.Object)",
            "cn.hutool.json.JSONObject:java.lang.Object getObj(java.lang.String,java.lang.Object)",
            "cn.hutool.json.JSONObject:java.io.Writer write(java.io.Writer,int,int)",
            "cn.hutool.poi.excel.ExcelReader:java.util.List aliasHeader(java.util.List)",
            "cn.hutool.poi.excel.ExcelWriter:java.util.Collection aliasHeader(java.util.Collection)"
        ]
    },
    "cn.hutool.core.map.MapUtil:java.lang.Object get(java.util.Map,java.lang.Object,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.map.MapUtil:java.lang.String getStr(java.util.Map,java.lang.Object)",
            "cn.hutool.core.map.MapUtil:java.lang.Integer getInt(java.util.Map,java.lang.Object)",
            "cn.hutool.core.map.MapUtil:java.lang.Double getDouble(java.util.Map,java.lang.Object)",
            "cn.hutool.core.map.MapUtil:java.lang.Float getFloat(java.util.Map,java.lang.Object)",
            "cn.hutool.core.map.MapUtil:java.lang.Short getShort(java.util.Map,java.lang.Object)",
            "cn.hutool.core.map.MapUtil:java.lang.Boolean getBool(java.util.Map,java.lang.Object)",
            "cn.hutool.core.map.MapUtil:java.lang.Character getChar(java.util.Map,java.lang.Object)",
            "cn.hutool.core.map.MapUtil:java.lang.Long getLong(java.util.Map,java.lang.Object)",
            "cn.hutool.core.map.MapUtil:java.util.Date getDate(java.util.Map,java.lang.Object)"
        ]
    },
    "cn.hutool.core.text.csv.CsvRow:java.lang.String getByName(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.text.replacer.LookupReplacer:int replace(java.lang.CharSequence,int,cn.hutool.core.text.StrBuilder)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.text.replacer.ReplacerChain:int replace(java.lang.CharSequence,int,cn.hutool.core.text.StrBuilder)",
            "cn.hutool.core.text.replacer.StrReplacer:java.lang.CharSequence replace(java.lang.CharSequence)"
        ]
    },
    "cn.hutool.core.util.IdcardUtil:boolean isvalidCard15(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.IdcardUtil:boolean isValidCard(java.lang.String)"
        ]
    },
    "cn.hutool.core.util.IdcardUtil:boolean isValidTWCard(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.IdcardUtil:java.lang.String[] isValidCard10(java.lang.String)"
        ]
    },
    "cn.hutool.core.util.IdcardUtil:java.lang.String getProvinceByIdCard(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.cache.impl.AbstractCache:boolean containsKey(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.cache.impl.AbstractCache:java.lang.Object get(java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.cache.impl.AbstractCache:java.lang.Object get(java.lang.Object)"
        ]
    },
    "cn.hutool.db.ds.c3p0.C3p0DSFactory:void close(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.ds.DSFactory:void close()"
        ]
    },
    "cn.hutool.db.ds.hikari.HikariDSFactory:javax.sql.DataSource getDataSource(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.ds.DSFactory:javax.sql.DataSource getDataSource()",
            "cn.hutool.db.ds.DSFactory:javax.sql.DataSource get(java.lang.String)"
        ]
    },
    "cn.hutool.db.ds.tomcat.TomcatDSFactory:void close(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.ds.DSFactory:void close()"
        ]
    },
    "cn.hutool.db.handler.HandleHelper:java.lang.Object handleRow(int,java.sql.ResultSetMetaData,java.sql.ResultSet,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.handler.BeanHandler:java.lang.Object handle(java.sql.ResultSet)",
            "cn.hutool.db.handler.HandleHelper:java.lang.Object handleRow(int,java.sql.ResultSetMetaData,java.sql.ResultSet,java.lang.Class)",
            "cn.hutool.db.handler.HandleHelper:java.util.Collection handleRsToBeanList(java.sql.ResultSet,java.util.Collection,java.lang.Class)"
        ]
    },
    "cn.hutool.db.sql.NamedSql:void parse(java.lang.String,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.sql.NamedSql:void <init>(java.lang.String,java.util.Map)"
        ]
    },
    "cn.hutool.db.ThreadLocalConnection$GroupedConnection:java.sql.Connection get(javax.sql.DataSource)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.ThreadLocalConnection:java.sql.Connection get(javax.sql.DataSource)"
        ]
    },
    "cn.hutool.extra.servlet.multipart.MultipartFormData:java.lang.String getParam(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.extra.servlet.multipart.MultipartFormData:java.lang.String[] getArrayParam(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.extra.servlet.multipart.MultipartFormData:cn.hutool.extra.servlet.multipart.UploadFile[] getFiles(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.servlet.multipart.MultipartFormData:cn.hutool.extra.servlet.multipart.UploadFile getFile(java.lang.String)"
        ]
    },
    "cn.hutool.extra.servlet.multipart.MultipartFormData:void putParameter(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.servlet.multipart.MultipartFormData:void parseRequestStream(java.io.InputStream,java.lang.String)"
        ]
    },
    "cn.hutool.extra.servlet.ServletUtil:javax.servlet.http.Cookie getCookie(javax.servlet.http.HttpServletRequest,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.extra.ssh.JschSessionPool:com.jcraft.jsch.Session get(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.ssh.JschUtil:com.jcraft.jsch.Session getSession(java.lang.String,int,java.lang.String,java.lang.String)"
        ]
    },
    "cn.hutool.extra.ssh.JschSessionPool:void close(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.ssh.JschUtil:void close(java.lang.String)"
        ]
    },
    "cn.hutool.http.GlobalHeaders:java.util.List headerList(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.GlobalHeaders:java.lang.String header(java.lang.String)"
        ]
    },
    "cn.hutool.http.GlobalHeaders:cn.hutool.http.GlobalHeaders header(java.lang.String,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.GlobalHeaders:cn.hutool.http.GlobalHeaders header(cn.hutool.http.Header,java.lang.String,boolean)",
            "cn.hutool.http.GlobalHeaders:cn.hutool.http.GlobalHeaders header(cn.hutool.http.Header,java.lang.String)",
            "cn.hutool.http.GlobalHeaders:cn.hutool.http.GlobalHeaders header(java.lang.String,java.lang.String)",
            "cn.hutool.http.GlobalHeaders:cn.hutool.http.GlobalHeaders header(java.util.Map)"
        ]
    },
    "cn.hutool.http.HTMLFilter:void <init>(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.http.HTMLFilter:java.lang.String processTag(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HTMLFilter:java.lang.String checkTags(java.lang.String)"
        ]
    },
    "cn.hutool.http.HttpBase:java.lang.Object header(java.lang.String,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HttpBase:java.lang.Object header(cn.hutool.http.Header,java.lang.String,boolean)",
            "cn.hutool.http.HttpBase:java.lang.Object header(cn.hutool.http.Header,java.lang.String)",
            "cn.hutool.http.HttpBase:java.lang.Object header(java.lang.String,java.lang.String)",
            "cn.hutool.http.HttpBase:java.lang.Object header(java.util.Map,boolean)",
            "cn.hutool.http.HttpBase:java.lang.Object addHeaders(java.util.Map)",
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest basicAuth(java.lang.String,java.lang.String)"
        ]
    },
    "cn.hutool.http.HttpUtil:void addParam(java.util.Map,java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HttpUtil:java.util.Map decodeParams(java.lang.String,java.lang.String)"
        ]
    },
    "cn.hutool.log.LogFactory:cn.hutool.log.Log getLog(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.LogFactory:cn.hutool.log.Log get(java.lang.String)"
        ]
    },
    "cn.hutool.log.LogFactory:cn.hutool.log.Log getLog(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.dialect.commons.ApacheCommonsLogFactory:void checkLogExist(java.lang.Object)",
            "cn.hutool.log.GlobalLogFactory:cn.hutool.log.LogFactory set(cn.hutool.log.LogFactory)",
            "cn.hutool.log.LogFactory:cn.hutool.log.Log get(java.lang.Class)",
            "cn.hutool.log.LogFactory:cn.hutool.log.LogFactory create()"
        ]
    },
    "cn.hutool.json.JSONObject:java.lang.Object get(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.annotation.CombinationAnnotationElement:java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)",
            "cn.hutool.core.bean.BeanDesc:cn.hutool.core.bean.BeanDesc$PropDesc getProp(java.lang.String)",
            "cn.hutool.core.bean.BeanDesc:java.lang.reflect.Field getField(java.lang.String)",
            "cn.hutool.core.bean.BeanDesc:java.lang.reflect.Method getGetter(java.lang.String)",
            "cn.hutool.core.bean.BeanDesc:java.lang.reflect.Method getSetter(java.lang.String)",
            "cn.hutool.core.bean.BeanUtil:java.beans.PropertyDescriptor getPropertyDescriptor(java.lang.Class,java.lang.String,boolean)",
            "cn.hutool.core.bean.BeanUtil:java.lang.Object getFieldValue(java.lang.Object,java.lang.String)",
            "cn.hutool.core.bean.copier.BeanCopier:void valueProviderToBean(cn.hutool.core.bean.copier.ValueProvider,java.lang.Object)",
            "cn.hutool.core.bean.copier.provider.BeanValueProvider:java.lang.Object value(java.lang.String,java.lang.reflect.Type)",
            "cn.hutool.core.bean.copier.provider.MapValueProvider:java.lang.Object value(java.lang.String,java.lang.reflect.Type)",
            "cn.hutool.core.bean.DynaBean:java.lang.Object get(java.lang.String)",
            "cn.hutool.core.collection.CollUtil$4:java.lang.Object edit(java.lang.Object)",
            "cn.hutool.core.collection.CollUtil$5:boolean accept(java.lang.Object)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection union(java.util.Collection,java.util.Collection)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection intersection(java.util.Collection,java.util.Collection)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection disjunction(java.util.Collection,java.util.Collection)",
            "cn.hutool.core.collection.CollUtil:java.util.ArrayList valuesOfKeys(java.util.Map,java.lang.Object[])",
            "cn.hutool.core.collection.CollUtil:java.util.ArrayList valuesOfKeys(java.util.Map,java.util.Iterator)",
            "cn.hutool.core.convert.BasicType:java.lang.Class wrap(java.lang.Class)",
            "cn.hutool.core.convert.BasicType:java.lang.Class unWrap(java.lang.Class)",
            "cn.hutool.core.convert.ConverterRegistry:cn.hutool.core.convert.Converter getDefaultConverter(java.lang.reflect.Type)",
            "cn.hutool.core.convert.ConverterRegistry:cn.hutool.core.convert.Converter getCustomConverter(java.lang.reflect.Type)",
            "cn.hutool.core.date.format.FastDateParser$CaseInsensitiveTextStrategy:void setCalendar(cn.hutool.core.date.format.FastDateParser,java.util.Calendar,java.lang.String)",
            "cn.hutool.core.date.format.FastDateParser$TimeZoneStrategy:void setCalendar(cn.hutool.core.date.format.FastDateParser,java.util.Calendar,java.lang.String)",
            "cn.hutool.core.exceptions.ExceptionUtil:java.lang.String stacktraceToString(java.lang.Throwable,int,java.util.Map)",
            "cn.hutool.core.io.watch.WatchMonitor:void watch(cn.hutool.core.io.watch.Watcher)",
            "cn.hutool.core.lang.SimpleCache:java.lang.Object get(java.lang.Object)",
            "cn.hutool.core.lang.Singleton:java.lang.Object get(java.lang.Class,java.lang.Object[])",
            "cn.hutool.core.map.MapProxy:java.lang.Object getObj(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.map.MapProxy:java.lang.Object get(java.lang.Object)",
            "cn.hutool.core.map.MapUtil:java.util.Map filter(java.util.Map,java.lang.Object[])",
            "cn.hutool.core.map.MapUtil:java.lang.Object get(java.util.Map,java.lang.Object,java.lang.Class)",
            "cn.hutool.core.text.csv.CsvRow:java.lang.String getByName(java.lang.String)",
            "cn.hutool.core.text.csv.CsvRow:java.util.Map getFieldMap()",
            "cn.hutool.core.text.replacer.LookupReplacer:int replace(java.lang.CharSequence,int,cn.hutool.core.text.StrBuilder)",
            "cn.hutool.core.util.ClassLoaderUtil:java.lang.Class loadPrimitiveClass(java.lang.String)",
            "cn.hutool.core.util.ClassUtil:boolean isAssignable(java.lang.Class,java.lang.Class)",
            "cn.hutool.core.util.IdcardUtil:boolean isvalidCard15(java.lang.String)",
            "cn.hutool.core.util.IdcardUtil:boolean isValidTWCard(java.lang.String)",
            "cn.hutool.core.util.IdcardUtil:java.lang.String getProvinceByIdCard(java.lang.String)",
            "cn.hutool.cache.impl.AbstractCache:boolean containsKey(java.lang.Object)",
            "cn.hutool.cache.impl.AbstractCache:java.lang.Object get(java.lang.Object,boolean)",
            "cn.hutool.db.dialect.DialectFactory:cn.hutool.db.dialect.Dialect getDialect(javax.sql.DataSource)",
            "cn.hutool.db.ds.c3p0.C3p0DSFactory:javax.sql.DataSource getDataSource(java.lang.String)",
            "cn.hutool.db.ds.c3p0.C3p0DSFactory:void close(java.lang.String)",
            "cn.hutool.db.ds.dbcp.DbcpDSFactory:javax.sql.DataSource getDataSource(java.lang.String)",
            "cn.hutool.db.ds.dbcp.DbcpDSFactory:void close(java.lang.String)",
            "cn.hutool.db.ds.druid.DruidDSFactory:javax.sql.DataSource getDataSource(java.lang.String)",
            "cn.hutool.db.ds.druid.DruidDSFactory:void close(java.lang.String)",
            "cn.hutool.db.ds.hikari.HikariDSFactory:javax.sql.DataSource getDataSource(java.lang.String)",
            "cn.hutool.db.ds.hikari.HikariDSFactory:void close(java.lang.String)",
            "cn.hutool.db.ds.jndi.JndiDSFactory:javax.sql.DataSource getDataSource(java.lang.String)",
            "cn.hutool.db.ds.pooled.PooledDSFactory:javax.sql.DataSource getDataSource(java.lang.String)",
            "cn.hutool.db.ds.pooled.PooledDSFactory:void close(java.lang.String)",
            "cn.hutool.db.ds.simple.SimpleDSFactory:javax.sql.DataSource getDataSource(java.lang.String)",
            "cn.hutool.db.ds.simple.SimpleDSFactory:void close(java.lang.String)",
            "cn.hutool.db.ds.tomcat.TomcatDSFactory:org.apache.tomcat.jdbc.pool.DataSource getDataSource(java.lang.String)",
            "cn.hutool.db.ds.tomcat.TomcatDSFactory:void close(java.lang.String)",
            "cn.hutool.db.handler.HandleHelper:java.lang.Object handleRow(int,java.sql.ResultSetMetaData,java.sql.ResultSet,java.lang.Class)",
            "cn.hutool.db.nosql.mongo.MongoFactory:cn.hutool.db.nosql.mongo.MongoDS getDS(java.lang.String,int)",
            "cn.hutool.db.nosql.mongo.MongoFactory:cn.hutool.db.nosql.mongo.MongoDS getDS(java.lang.String[])",
            "cn.hutool.db.nosql.mongo.MongoFactory:cn.hutool.db.nosql.mongo.MongoDS getDS(cn.hutool.setting.Setting,java.lang.String[])",
            "cn.hutool.db.sql.NamedSql:void parse(java.lang.String,java.util.Map)",
            "cn.hutool.db.ThreadLocalConnection$GroupedConnection:java.sql.Connection get(javax.sql.DataSource)",
            "cn.hutool.db.ThreadLocalConnection$GroupedConnection:cn.hutool.db.ThreadLocalConnection$GroupedConnection close(javax.sql.DataSource)",
            "cn.hutool.extra.servlet.multipart.MultipartFormData:java.lang.String getParam(java.lang.String)",
            "cn.hutool.extra.servlet.multipart.MultipartFormData:java.lang.String[] getArrayParam(java.lang.String)",
            "cn.hutool.extra.servlet.multipart.MultipartFormData:cn.hutool.extra.servlet.multipart.UploadFile[] getFiles(java.lang.String)",
            "cn.hutool.extra.servlet.multipart.MultipartFormData:void putFile(java.lang.String,cn.hutool.extra.servlet.multipart.UploadFile)",
            "cn.hutool.extra.servlet.multipart.MultipartFormData:void putParameter(java.lang.String,java.lang.String)",
            "cn.hutool.extra.servlet.ServletUtil:javax.servlet.http.Cookie getCookie(javax.servlet.http.HttpServletRequest,java.lang.String)",
            "cn.hutool.extra.ssh.JschSessionPool:com.jcraft.jsch.Session get(java.lang.String)",
            "cn.hutool.extra.ssh.JschSessionPool:void close(java.lang.String)",
            "cn.hutool.http.GlobalHeaders:java.util.List headerList(java.lang.String)",
            "cn.hutool.http.GlobalHeaders:cn.hutool.http.GlobalHeaders header(java.lang.String,java.lang.String,boolean)",
            "cn.hutool.http.HTMLFilter:void <init>(java.util.Map)",
            "cn.hutool.http.HTMLFilter:java.lang.String checkTags(java.lang.String)",
            "cn.hutool.http.HTMLFilter:java.lang.String processTag(java.lang.String)",
            "cn.hutool.http.HTMLFilter:boolean allowedAttribute(java.lang.String,java.lang.String)",
            "cn.hutool.http.HttpBase:java.lang.Object header(java.lang.String,java.lang.String,boolean)",
            "cn.hutool.http.HttpUtil:void addParam(java.util.Map,java.lang.String,java.lang.String,java.lang.String)",
            "cn.hutool.log.LogFactory:cn.hutool.log.Log getLog(java.lang.String)",
            "cn.hutool.log.LogFactory:cn.hutool.log.Log getLog(java.lang.Class)",
            "cn.hutool.setting.profile.Profile:cn.hutool.setting.Setting getSetting(java.lang.String)",
            "cn.hutool.setting.SettingUtil:cn.hutool.setting.Setting get(java.lang.String)",
            "cn.hutool.json.InternalJSONUtil$1:java.lang.Object value(java.lang.String,java.lang.reflect.Type)",
            "cn.hutool.json.JSONObject:cn.hutool.json.JSONArray toJSONArray(java.util.Collection)",
            "cn.hutool.json.JSONObject:java.lang.Object get(java.lang.Object)",
            "cn.hutool.json.JSONObject:java.lang.Object getObj(java.lang.String,java.lang.Object)",
            "cn.hutool.json.JSONObject:java.io.Writer write(java.io.Writer,int,int)",
            "cn.hutool.json.XML:boolean parse(cn.hutool.json.XMLTokener,cn.hutool.json.JSONObject,java.lang.String,boolean)",
            "cn.hutool.json.XML:java.lang.String toXml(java.lang.Object,java.lang.String)",
            "cn.hutool.poi.excel.ExcelReader:java.util.List aliasHeader(java.util.List)",
            "cn.hutool.poi.excel.ExcelWriter:java.util.Collection aliasHeader(java.util.Collection)"
        ]
    },
    "cn.hutool.json.JSONObject:java.lang.Object getObj(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.json.JSONObject:java.lang.Object getObj(java.lang.Object,java.lang.Object)"
        ]
    },
    "cn.hutool.json.XMLTokener:java.lang.Object nextEntity(char)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.json.XMLTokener:java.lang.Object nextContent()",
            "cn.hutool.json.XMLTokener:java.lang.Object nextToken()"
        ]
    },
    "cn.hutool.core.annotation.AnnotationUtil:java.util.Map getAnnotationValueMap(java.lang.reflect.AnnotatedElement,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.annotation.CombinationAnnotationElement:void parseDeclared(java.lang.'annotation'.Annotation[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.annotation.CombinationAnnotationElement:void init(java.lang.reflect.AnnotatedElement)",
            "cn.hutool.core.annotation.CombinationAnnotationElement:void parseDeclared(java.lang.'annotation'.Annotation[])"
        ]
    },
    "cn.hutool.core.annotation.CombinationAnnotationElement:void parse(java.lang.'annotation'.Annotation[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.annotation.CombinationAnnotationElement:void init(java.lang.reflect.AnnotatedElement)",
            "cn.hutool.core.annotation.CombinationAnnotationElement:void parse(java.lang.'annotation'.Annotation[])"
        ]
    },
    "cn.hutool.core.bean.BeanDesc:cn.hutool.core.bean.BeanDesc init()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.BeanDesc:void <init>(java.lang.Class)"
        ]
    },
    "cn.hutool.core.bean.BeanUtil:java.util.Map internalGetPropertyDescriptorMap(java.lang.Class,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.BeanUtil:java.util.Map getPropertyDescriptorMap(java.lang.Class,boolean)"
        ]
    },
    "cn.hutool.core.bean.BeanUtil:void setFieldValue(java.lang.Object,java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.BeanPath:void set(java.lang.Object,java.util.List,java.lang.Object)"
        ]
    },
    "cn.hutool.core.bean.DynaBean:void set(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.collection.CollUtil:java.util.Map zip(java.util.Collection,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.convert.ConverterRegistry:cn.hutool.core.convert.ConverterRegistry putCustom(java.lang.reflect.Type,cn.hutool.core.convert.Converter)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.ConverterRegistry:cn.hutool.core.convert.ConverterRegistry putCustom(java.lang.reflect.Type,java.lang.Class)"
        ]
    },
    "cn.hutool.core.convert.ConverterRegistry:cn.hutool.core.convert.ConverterRegistry defaultConverter()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.ConverterRegistry:void <init>()"
        ]
    },
    "cn.hutool.core.exceptions.ExceptionUtil:java.lang.String stacktraceToOneLineString(java.lang.Throwable,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.exceptions.ExceptionUtil:java.lang.String stacktraceToOneLineString(java.lang.Throwable)"
        ]
    },
    "cn.hutool.core.io.FileTypeUtil:java.lang.String putFileType(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.FileTypeUtil:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.FileTypeUtil:java.lang.String putFileType(java.lang.String,java.lang.String)",
            "cn.hutool.core.io.FileTypeUtil:java.lang.String removeFileType(java.lang.String)",
            "cn.hutool.core.io.FileTypeUtil:java.lang.String getType(java.lang.String)",
            "cn.hutool.core.io.FileTypeUtil:java.lang.String getType(java.io.InputStream)",
            "cn.hutool.core.io.FileTypeUtil:java.lang.String getType(java.io.File)",
            "cn.hutool.core.io.FileTypeUtil:java.lang.String getTypeByPath(java.lang.String)",
            "cn.hutool.core.io.FileTypeUtil:void <clinit>()",
            "cn.hutool.core.io.FileUtil:java.lang.String getType(java.io.File)"
        ]
    },
    "cn.hutool.core.io.watch.WatchMonitor:void registerPath(java.nio.file.Path,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.watch.WatchMonitor:void registerPath()",
            "cn.hutool.core.io.watch.WatchMonitor:void access$000(cn.hutool.core.io.watch.WatchMonitor,java.nio.file.Path,int)"
        ]
    },
    "cn.hutool.core.lang.SimpleCache:java.lang.Object put(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.BeanDescCache:void putBeanDesc(java.lang.Class,cn.hutool.core.bean.BeanDesc)",
            "cn.hutool.core.bean.BeanInfoCache:void putPropertyDescriptorMap(java.lang.Class,java.util.Map,boolean)",
            "cn.hutool.core.lang.PatternPool:java.util.regex.Pattern get(java.lang.String,int)",
            "cn.hutool.core.util.ClassLoaderUtil:java.lang.Class loadClass(java.lang.String,java.lang.ClassLoader,boolean)",
            "cn.hutool.core.util.ReflectUtil:java.lang.reflect.Constructor[] getConstructors(java.lang.Class)",
            "cn.hutool.core.util.ReflectUtil:java.lang.reflect.Field[] getFields(java.lang.Class)",
            "cn.hutool.core.util.ReflectUtil:java.lang.reflect.Method[] getMethods(java.lang.Class)"
        ]
    },
    "cn.hutool.core.lang.Singleton:void put(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.map.MapBuilder:cn.hutool.core.map.MapBuilder put(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.map.MapUtil:cn.hutool.core.map.MapBuilder builder(java.lang.Object,java.lang.Object)"
        ]
    },
    "cn.hutool.core.map.MapProxy:java.lang.Object put(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.annotation.CombinationAnnotationElement:void parseDeclared(java.lang.'annotation'.Annotation[])",
            "cn.hutool.core.annotation.CombinationAnnotationElement:void parse(java.lang.'annotation'.Annotation[])",
            "cn.hutool.core.bean.BeanDesc:cn.hutool.core.bean.BeanDesc init()",
            "cn.hutool.core.bean.BeanUtil:java.util.Map internalGetPropertyDescriptorMap(java.lang.Class,boolean)",
            "cn.hutool.core.bean.BeanUtil:void setFieldValue(java.lang.Object,java.lang.String,java.lang.Object)",
            "cn.hutool.core.bean.BeanUtil:java.util.Map beanToMap(java.lang.Object,java.util.Map,boolean,cn.hutool.core.lang.Editor)",
            "cn.hutool.core.bean.DynaBean:void set(java.lang.String,java.lang.Object)",
            "cn.hutool.core.convert.BasicType:void <clinit>()",
            "cn.hutool.core.convert.ConverterRegistry:cn.hutool.core.convert.ConverterRegistry putCustom(java.lang.reflect.Type,cn.hutool.core.convert.Converter)",
            "cn.hutool.core.convert.ConverterRegistry:cn.hutool.core.convert.ConverterRegistry defaultConverter()",
            "cn.hutool.core.convert.impl.MapConverter:void convertMapToMap(java.util.Map,java.util.Map)",
            "cn.hutool.core.date.format.FastDateParser$TimeZoneStrategy:void <init>(java.util.Locale)",
            "cn.hutool.core.io.FileTypeUtil:java.lang.String putFileType(java.lang.String,java.lang.String)",
            "cn.hutool.core.io.FileTypeUtil:void <clinit>()",
            "cn.hutool.core.io.watch.WatchMonitor:void registerPath(java.nio.file.Path,int)",
            "cn.hutool.core.lang.SimpleCache:java.lang.Object put(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.lang.Singleton:java.lang.Object get(java.lang.Class,java.lang.Object[])",
            "cn.hutool.core.lang.Singleton:void put(java.lang.Object)",
            "cn.hutool.core.map.MapBuilder:cn.hutool.core.map.MapBuilder put(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.map.MapProxy:java.lang.Object put(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.map.MapUtil:java.util.Map filter(java.util.Map,cn.hutool.core.lang.Editor)",
            "cn.hutool.core.map.MapUtil:java.util.Map filter(java.util.Map,cn.hutool.core.lang.Filter)",
            "cn.hutool.core.map.MapUtil:java.util.Map filter(java.util.Map,java.lang.Object[])",
            "cn.hutool.core.map.MapUtil:java.util.Map inverse(java.util.Map)",
            "cn.hutool.core.text.replacer.LookupReplacer:void <init>(java.lang.String[][])",
            "cn.hutool.core.util.ClassLoaderUtil:void <clinit>()",
            "cn.hutool.core.util.IdcardUtil:void <clinit>()",
            "cn.hutool.core.util.XmlUtil:java.util.Map xmlToMap(org.w3c.dom.Node,java.util.Map)",
            "cn.hutool.cache.impl.AbstractCache:void put(java.lang.Object,java.lang.Object,long)",
            "cn.hutool.db.dialect.DialectFactory:cn.hutool.db.dialect.Dialect getDialect(javax.sql.DataSource)",
            "cn.hutool.db.ds.c3p0.C3p0DSFactory:javax.sql.DataSource getDataSource(java.lang.String)",
            "cn.hutool.db.ds.dbcp.DbcpDSFactory:javax.sql.DataSource getDataSource(java.lang.String)",
            "cn.hutool.db.ds.druid.DruidDSFactory:javax.sql.DataSource getDataSource(java.lang.String)",
            "cn.hutool.db.ds.hikari.HikariDSFactory:javax.sql.DataSource getDataSource(java.lang.String)",
            "cn.hutool.db.ds.jndi.JndiDSFactory:javax.sql.DataSource getDataSource(java.lang.String)",
            "cn.hutool.db.ds.pooled.PooledDSFactory:javax.sql.DataSource getDataSource(java.lang.String)",
            "cn.hutool.db.ds.simple.SimpleDSFactory:javax.sql.DataSource getDataSource(java.lang.String)",
            "cn.hutool.db.ds.tomcat.TomcatDSFactory:org.apache.tomcat.jdbc.pool.DataSource getDataSource(java.lang.String)",
            "cn.hutool.db.nosql.mongo.MongoFactory:cn.hutool.db.nosql.mongo.MongoDS getDS(java.lang.String,int)",
            "cn.hutool.db.nosql.mongo.MongoFactory:cn.hutool.db.nosql.mongo.MongoDS getDS(java.lang.String[])",
            "cn.hutool.db.nosql.mongo.MongoFactory:cn.hutool.db.nosql.mongo.MongoDS getDS(cn.hutool.setting.Setting,java.lang.String[])",
            "cn.hutool.db.ThreadLocalConnection$GroupedConnection:java.sql.Connection get(javax.sql.DataSource)",
            "cn.hutool.extra.servlet.multipart.MultipartFormData:void putFile(java.lang.String,cn.hutool.extra.servlet.multipart.UploadFile)",
            "cn.hutool.extra.servlet.multipart.MultipartFormData:void putParameter(java.lang.String,java.lang.String)",
            "cn.hutool.extra.ssh.JschSessionPool:void put(java.lang.String,com.jcraft.jsch.Session)",
            "cn.hutool.extra.template.engine.velocity.VelocityUtil:void putGlobalContext(java.lang.String,java.lang.Object)",
            "cn.hutool.http.GlobalHeaders:cn.hutool.http.GlobalHeaders header(java.lang.String,java.lang.String,boolean)",
            "cn.hutool.http.HTMLFilter:void <init>()",
            "cn.hutool.http.HTMLFilter:java.lang.String processTag(java.lang.String)",
            "cn.hutool.http.HttpBase:java.lang.Object header(java.lang.String,java.lang.String,boolean)",
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest form(java.lang.String,java.lang.Object)",
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest form(java.lang.String,cn.hutool.core.io.resource.Resource)",
            "cn.hutool.http.HttpUtil:void addParam(java.util.Map,java.lang.String,java.lang.String,java.lang.String)",
            "cn.hutool.http.webservice.SoapRequest:cn.hutool.http.webservice.SoapRequest addParam(java.lang.String,java.lang.String)",
            "cn.hutool.log.LogFactory:cn.hutool.log.Log getLog(java.lang.String)",
            "cn.hutool.log.LogFactory:cn.hutool.log.Log getLog(java.lang.Class)",
            "cn.hutool.setting.profile.Profile:cn.hutool.setting.Setting getSetting(java.lang.String)",
            "cn.hutool.setting.SettingUtil:cn.hutool.setting.Setting get(java.lang.String)",
            "cn.hutool.json.JSONObject:void <init>(java.lang.Object,boolean)",
            "cn.hutool.json.JSONObject:cn.hutool.json.JSONObject put(java.lang.String,java.lang.Object)",
            "cn.hutool.json.JSONObject:void populateMap(java.lang.Object)",
            "cn.hutool.poi.excel.ExcelReader:cn.hutool.poi.excel.ExcelReader addHeaderAlias(java.lang.String,java.lang.String)",
            "cn.hutool.poi.excel.ExcelWriter:cn.hutool.poi.excel.ExcelWriter addHeaderAlias(java.lang.String,java.lang.String)"
        ]
    },
    "cn.hutool.core.map.MapUtil:java.util.HashMap of(java.lang.Object,java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.map.MapUtil:java.util.HashMap of(java.lang.Object,java.lang.Object)"
        ]
    },
    "cn.hutool.core.text.replacer.LookupReplacer:void <init>(java.lang.String[][])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.text.escape.Html4Escape:void <init>()",
            "cn.hutool.core.text.escape.Html4Unescape:void <init>()"
        ]
    },
    "cn.hutool.core.util.ArrayUtil:java.util.Map zip(java.lang.Object[],java.lang.Object[],boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.collection.CollUtil:java.util.Map zip(java.lang.String,java.lang.String,java.lang.String,boolean)",
            "cn.hutool.core.util.ArrayUtil:java.util.Map zip(java.lang.Object[],java.lang.Object[])"
        ]
    },
    "cn.hutool.core.util.EnumUtil:java.util.Map getNameFieldMap(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.IdcardUtil:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.IdcardUtil:java.lang.String convert15To18(java.lang.String)",
            "cn.hutool.core.util.IdcardUtil:boolean isValidCard(java.lang.String)",
            "cn.hutool.core.util.IdcardUtil:boolean isvalidCard18(java.lang.String)",
            "cn.hutool.core.util.IdcardUtil:boolean isvalidCard15(java.lang.String)",
            "cn.hutool.core.util.IdcardUtil:java.lang.String[] isValidCard10(java.lang.String)",
            "cn.hutool.core.util.IdcardUtil:boolean isValidTWCard(java.lang.String)",
            "cn.hutool.core.util.IdcardUtil:java.lang.String getBirthByIdCard(java.lang.String)",
            "cn.hutool.core.util.IdcardUtil:java.lang.String getBirth(java.lang.String)",
            "cn.hutool.core.util.IdcardUtil:cn.hutool.core.date.DateTime getBirthDate(java.lang.String)",
            "cn.hutool.core.util.IdcardUtil:int getAgeByIdCard(java.lang.String)",
            "cn.hutool.core.util.IdcardUtil:int getAgeByIdCard(java.lang.String,java.util.Date)",
            "cn.hutool.core.util.IdcardUtil:java.lang.Short getYearByIdCard(java.lang.String)",
            "cn.hutool.core.util.IdcardUtil:java.lang.Short getMonthByIdCard(java.lang.String)",
            "cn.hutool.core.util.IdcardUtil:java.lang.Short getDayByIdCard(java.lang.String)",
            "cn.hutool.core.util.IdcardUtil:int getGenderByIdCard(java.lang.String)",
            "cn.hutool.core.util.IdcardUtil:java.lang.String getProvinceByIdCard(java.lang.String)",
            "cn.hutool.core.util.IdcardUtil:char getCheckCode18(java.lang.String)",
            "cn.hutool.core.util.IdcardUtil:int getPowerSum(char[])",
            "cn.hutool.core.util.IdcardUtil:void <clinit>()"
        ]
    },
    "cn.hutool.core.util.XmlUtil:java.util.Map xmlToMap(org.w3c.dom.Node,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.XmlUtil:java.util.Map xmlToMap(org.w3c.dom.Node)",
            "cn.hutool.core.util.XmlUtil:java.util.Map xmlToMap(java.lang.String,java.util.Map)"
        ]
    },
    "cn.hutool.extra.qrcode.QrCodeUtil:java.lang.String decode(java.awt.Image)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.qrcode.QrCodeUtil:java.lang.String decode(java.io.InputStream)",
            "cn.hutool.extra.qrcode.QrCodeUtil:java.lang.String decode(java.io.File)"
        ]
    },
    "cn.hutool.extra.qrcode.QrConfig:java.util.HashMap toHints()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.qrcode.QrCodeUtil:com.google.zxing.common.BitMatrix encode(java.lang.String,com.google.zxing.BarcodeFormat,cn.hutool.extra.qrcode.QrConfig)"
        ]
    },
    "cn.hutool.extra.servlet.ServletUtil:java.util.Map readCookieMap(javax.servlet.http.HttpServletRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.servlet.ServletUtil:javax.servlet.http.Cookie getCookie(javax.servlet.http.HttpServletRequest,java.lang.String)"
        ]
    },
    "cn.hutool.extra.ssh.JschSessionPool:void put(java.lang.String,com.jcraft.jsch.Session)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.ssh.JschUtil:com.jcraft.jsch.Session getSession(java.lang.String,int,java.lang.String,java.lang.String)"
        ]
    },
    "cn.hutool.extra.template.engine.velocity.VelocityUtil:void putGlobalContext(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.http.HTMLFilter:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HTMLFilter:void <init>(boolean)",
            "cn.hutool.http.HtmlUtil:java.lang.String filter(java.lang.String)"
        ]
    },
    "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest form(java.lang.String,cn.hutool.core.io.resource.Resource)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest form(java.lang.String,java.lang.Object)",
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest form(java.lang.String,java.io.File[])",
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest form(java.lang.String,java.io.File,java.lang.String)",
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest form(java.lang.String,byte[],java.lang.String)"
        ]
    },
    "cn.hutool.http.webservice.SoapRequest:cn.hutool.http.webservice.SoapRequest addParam(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.json.XMLTokener:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.json.XML:cn.hutool.json.JSONObject toJSONObject(java.lang.String,boolean)",
            "cn.hutool.json.XMLTokener:java.lang.Object nextEntity(char)",
            "cn.hutool.json.XMLTokener:void <clinit>()"
        ]
    },
    "cn.hutool.poi.excel.ExcelReader:cn.hutool.poi.excel.ExcelReader addHeaderAlias(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.poi.excel.ExcelWriter:cn.hutool.poi.excel.ExcelWriter addHeaderAlias(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.annotation.CombinationAnnotationElement:boolean isAnnotationPresent(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.bean.copier.provider.BeanValueProvider:boolean containsKey(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.copier.provider.BeanValueProvider:boolean containsKey(java.lang.Object)"
        ]
    },
    "cn.hutool.core.bean.copier.provider.MapValueProvider:boolean containsKey(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.copier.provider.MapValueProvider:boolean containsKey(java.lang.Object)"
        ]
    },
    "cn.hutool.core.map.MapProxy:boolean containsKey(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.annotation.CombinationAnnotationElement:boolean isAnnotationPresent(java.lang.Class)",
            "cn.hutool.core.bean.copier.provider.BeanValueProvider:boolean containsKey(java.lang.String)",
            "cn.hutool.core.bean.copier.provider.MapValueProvider:boolean containsKey(java.lang.String)",
            "cn.hutool.core.map.MapProxy:boolean containsKey(java.lang.Object)",
            "cn.hutool.core.map.MapUtil:java.util.Map filter(java.util.Map,java.lang.Object[])",
            "cn.hutool.core.util.ClassUtil:boolean isPrimitiveWrapper(java.lang.Class)",
            "cn.hutool.db.sql.NamedSql:void parse(java.lang.String,java.util.Map)",
            "cn.hutool.http.HTMLFilter:void <init>(java.util.Map)",
            "cn.hutool.http.HTMLFilter:java.lang.String processTag(java.lang.String)",
            "cn.hutool.http.HTMLFilter:boolean allowed(java.lang.String)",
            "cn.hutool.json.JSONObject:boolean containsKey(java.lang.Object)",
            "cn.hutool.json.JSONObject:cn.hutool.json.JSONObject putOnce(java.lang.String,java.lang.Object)"
        ]
    },
    "cn.hutool.json.JSONObject:boolean containsKey(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.annotation.CombinationAnnotationElement:boolean isAnnotationPresent(java.lang.Class)",
            "cn.hutool.core.bean.copier.provider.BeanValueProvider:boolean containsKey(java.lang.String)",
            "cn.hutool.core.bean.copier.provider.MapValueProvider:boolean containsKey(java.lang.String)",
            "cn.hutool.core.map.MapProxy:boolean containsKey(java.lang.Object)",
            "cn.hutool.core.map.MapUtil:java.util.Map filter(java.util.Map,java.lang.Object[])",
            "cn.hutool.core.util.ClassUtil:boolean isPrimitiveWrapper(java.lang.Class)",
            "cn.hutool.db.sql.NamedSql:void parse(java.lang.String,java.util.Map)",
            "cn.hutool.http.HTMLFilter:void <init>(java.util.Map)",
            "cn.hutool.http.HTMLFilter:java.lang.String processTag(java.lang.String)",
            "cn.hutool.http.HTMLFilter:boolean allowed(java.lang.String)",
            "cn.hutool.json.InternalJSONUtil$1:boolean containsKey(java.lang.String)",
            "cn.hutool.json.JSONObject:boolean containsKey(java.lang.Object)",
            "cn.hutool.json.JSONObject:cn.hutool.json.JSONObject putOnce(java.lang.String,java.lang.Object)"
        ]
    },
    "cn.hutool.json.JSONObject:cn.hutool.json.JSONObject putOnce(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.json.JSONObject:void <init>(cn.hutool.json.JSONObject,java.lang.String[])",
            "cn.hutool.json.JSONObject:void init(cn.hutool.json.JSONTokener)"
        ]
    },
    "cn.hutool.core.text.StrFormatter:java.lang.String format(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.StrUtil:java.lang.String format(java.lang.CharSequence,java.lang.Object[])"
        ]
    },
    "cn.hutool.setting.dialect.Props:java.lang.Object getObj(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.json.JSONArray:java.lang.String toJSONString(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.json.JSONArray:java.lang.String toString()",
            "cn.hutool.json.JSONArray:java.lang.String toStringPretty()",
            "cn.hutool.json.JSONUtil:java.lang.String toJsonStr(cn.hutool.json.JSON,int)",
            "cn.hutool.json.JSONUtil:java.lang.String toJsonStr(cn.hutool.json.JSON)",
            "cn.hutool.json.JSONUtil:java.lang.String toJsonPrettyStr(cn.hutool.json.JSON)"
        ]
    },
    "cn.hutool.json.JSONArray:java.io.Writer write(java.io.Writer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.json.JSONObject:void <init>(cn.hutool.json.JSONTokener)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.json.JSONObject:void <init>(java.lang.CharSequence)",
            "cn.hutool.json.JSONTokener:java.lang.Object nextValue()"
        ]
    },
    "cn.hutool.core.collection.CollUtil$8:int hash(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.collection.CollUtil:java.util.List group(java.util.Collection,cn.hutool.core.collection.CollUtil$Hash)"
        ]
    },
    "cn.hutool.core.collection.CollUtil:java.util.List list(boolean,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.collection.CollUtil:java.util.ArrayList newArrayList(java.lang.Object[])",
            "cn.hutool.core.collection.CollUtil:java.util.LinkedList newLinkedList(java.lang.Object[])"
        ]
    },
    "cn.hutool.core.collection.CollUtil:java.util.Collection addAll(java.util.Collection,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.collection.CollUtil:java.util.List setOrAppend(java.util.List,int,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.BeanUtil:void setFieldValue(java.lang.Object,java.lang.String,java.lang.Object)"
        ]
    },
    "cn.hutool.core.comparator.ComparatorChain:void <init>(java.util.Comparator,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.comparator.ComparatorChain:void <init>(java.util.Comparator)"
        ]
    },
    "cn.hutool.core.comparator.ComparatorChain:cn.hutool.core.comparator.ComparatorChain addComparator(java.util.Comparator,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.comparator.ComparatorChain:cn.hutool.core.comparator.ComparatorChain addComparator(java.util.Comparator)"
        ]
    },
    "cn.hutool.core.date.format.FastDateParser:void init(java.util.Calendar)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.date.format.FastDateParser:void <init>(java.lang.String,java.util.TimeZone,java.util.Locale,java.util.Date)",
            "cn.hutool.core.date.format.FastDateParser:void readObject(java.io.ObjectInputStream)"
        ]
    },
    "cn.hutool.core.io.IoUtil$1:void handle(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.IoUtil:void readLines(java.io.Reader,cn.hutool.core.io.LineHandler)"
        ]
    },
    "cn.hutool.core.io.resource.MultiResource:cn.hutool.core.io.resource.MultiResource add(cn.hutool.core.io.resource.Resource)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.resource.MultiFileResource:cn.hutool.core.io.resource.MultiFileResource add(cn.hutool.core.io.resource.Resource)"
        ]
    },
    "cn.hutool.core.io.watch.watchers.WatcherChain:cn.hutool.core.io.watch.watchers.WatcherChain addChain(cn.hutool.core.io.watch.Watcher)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.watch.watchers.WatcherChain:java.lang.Object addChain(java.lang.Object)"
        ]
    },
    "cn.hutool.core.math.Arrangement:void select(java.lang.String[],int,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.math.Arrangement:java.util.List select(int)",
            "cn.hutool.core.math.Arrangement:void select(java.lang.String[],int,java.util.List)"
        ]
    },
    "cn.hutool.core.math.Combination:void select(int,java.lang.String[],int,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.math.Combination:java.util.List select(int)",
            "cn.hutool.core.math.Combination:void select(int,java.lang.String[],int,java.util.List)"
        ]
    },
    "cn.hutool.core.text.csv.CsvRow:boolean add(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.text.csv.CsvRow:boolean add(java.lang.Object)"
        ]
    },
    "cn.hutool.core.text.replacer.ReplacerChain:cn.hutool.core.text.replacer.ReplacerChain addChain(cn.hutool.core.text.replacer.StrReplacer)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.text.escape.Html4Escape:void <init>()",
            "cn.hutool.core.text.escape.Html4Unescape:void <init>()",
            "cn.hutool.core.text.replacer.ReplacerChain:void <init>(cn.hutool.core.text.replacer.StrReplacer[])",
            "cn.hutool.core.text.replacer.ReplacerChain:java.lang.Object addChain(java.lang.Object)"
        ]
    },
    "cn.hutool.core.text.StrSpliter:java.util.List addToList(java.util.List,java.lang.String,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.text.StrSpliter:java.util.List split(java.lang.String,char,int,boolean,boolean,boolean)",
            "cn.hutool.core.text.StrSpliter:java.util.List split(java.lang.String,java.lang.String,int,boolean,boolean,boolean)",
            "cn.hutool.core.text.StrSpliter:java.util.List split(java.lang.String,int)",
            "cn.hutool.core.text.StrSpliter:java.util.List split(java.lang.String,java.util.regex.Pattern,int,boolean,boolean)"
        ]
    },
    "cn.hutool.core.util.NumberUtil:java.util.Collection appendRange(int,int,int,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.NumberUtil:java.util.Collection appendRange(int,int,java.util.Collection)",
            "cn.hutool.cron.pattern.matcher.ValueMatcherBuilder:java.util.List parseRange(java.lang.String,int,cn.hutool.cron.pattern.parser.ValueParser)"
        ]
    },
    "cn.hutool.core.util.ReUtil:java.util.Collection findAll(java.util.regex.Pattern,java.lang.String,int,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ReUtil:java.lang.String extractMultiAndDelPre(java.util.regex.Pattern,cn.hutool.core.lang.Holder,java.lang.String)",
            "cn.hutool.core.util.ReUtil:java.util.Collection findAll(java.lang.String,java.lang.String,int,java.util.Collection)",
            "cn.hutool.core.util.ReUtil:java.util.List findAll(java.util.regex.Pattern,java.lang.String,int)",
            "cn.hutool.core.util.ReUtil:java.lang.String replaceAll(java.lang.String,java.util.regex.Pattern,java.lang.String)"
        ]
    },
    "cn.hutool.db.handler.HandleHelper:java.util.Collection handleRs(java.sql.ResultSet,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.handler.EntityListHandler:java.util.List handle(java.sql.ResultSet)",
            "cn.hutool.db.handler.EntitySetHandler:java.util.LinkedHashSet handle(java.sql.ResultSet)",
            "cn.hutool.db.handler.PageResultHandler:cn.hutool.db.PageResult handle(java.sql.ResultSet)"
        ]
    },
    "cn.hutool.db.handler.HandleHelper:java.util.Collection handleRsToBeanList(java.sql.ResultSet,java.util.Collection,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.handler.BeanListHandler:java.util.List handle(java.sql.ResultSet)"
        ]
    },
    "cn.hutool.db.sql.SqlBuilder:void buildValuePartForBETWEEN(java.lang.StringBuilder,cn.hutool.db.sql.Condition)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.sql.SqlBuilder:void buildConditionPart(java.lang.StringBuilder,cn.hutool.db.sql.Condition)"
        ]
    },
    "cn.hutool.extra.ssh.Sftp$3:int select(com.jcraft.jsch.ChannelSftp$LsEntry)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.setting.GroupedSet:boolean contains(java.lang.String,java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.cron.listener.TaskListenerManager:cn.hutool.cron.listener.TaskListenerManager addListener(cn.hutool.cron.listener.TaskListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.cron.Scheduler:cn.hutool.cron.Scheduler addListener(cn.hutool.cron.listener.TaskListener)"
        ]
    },
    "cn.hutool.json.JSONArray:cn.hutool.json.JSONArray put(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.json.JSONArray:void add(int,java.lang.Object)",
            "cn.hutool.json.JSONObject:cn.hutool.json.JSONArray toJSONArray(java.util.Collection)",
            "cn.hutool.json.JSONObject:cn.hutool.json.JSONObject accumulate(java.lang.String,java.lang.Object)",
            "cn.hutool.json.JSONObject:cn.hutool.json.JSONObject append(java.lang.String,java.lang.Object)"
        ]
    },
    "cn.hutool.json.JSONArray:void init(cn.hutool.json.JSONTokener)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.json.JSONArray:void <init>(cn.hutool.json.JSONTokener)",
            "cn.hutool.json.JSONArray:void init(java.lang.CharSequence)"
        ]
    },
    "cn.hutool.json.JSONTokener:cn.hutool.json.JSONArray toJSONArray()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.poi.excel.sax.Excel03SaxReader:void processRecord(org.apache.poi.hssf.record.Record)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.comparator.ComparatorChain:cn.hutool.core.comparator.ComparatorChain setComparator(int,java.util.Comparator,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.comparator.ComparatorChain:cn.hutool.core.comparator.ComparatorChain setComparator(int,java.util.Comparator)"
        ]
    },
    "cn.hutool.core.text.csv.CsvRow:java.lang.String set(int,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.text.csv.CsvRow:java.lang.Object set(int,java.lang.Object)"
        ]
    },
    "cn.hutool.core.text.csv.CsvRow:void add(int,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.text.csv.CsvRow:void add(int,java.lang.Object)"
        ]
    },
    "cn.hutool.json.JSONArray:cn.hutool.json.JSONArray put(int,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.poi.excel.sax.Excel03SaxReader:void processCellValue(org.apache.poi.hssf.record.Record)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.poi.excel.sax.Excel03SaxReader:void processRecord(org.apache.poi.hssf.record.Record)"
        ]
    },
    "cn.hutool.poi.excel.sax.Excel07SaxReader:void endElement(java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.poi.excel.sax.Excel07SaxReader:void fillBlankCell(java.lang.String,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.poi.excel.sax.Excel07SaxReader:void endElement(java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "cn.hutool.json.InternalJSONUtil:cn.hutool.json.JSONObject propertyPut(cn.hutool.json.JSONObject,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.json.JSONUtil:cn.hutool.json.JSONObject parseFromResourceBundle(java.util.ResourceBundle)"
        ]
    },
    "cn.hutool.json.JSONObject:cn.hutool.json.JSONObject putOpt(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.json.JSONObject:void <init>(java.lang.Object,java.lang.String[])"
        ]
    },
    "cn.hutool.json.JSONObject:java.lang.Object put(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.annotation.CombinationAnnotationElement:void parseDeclared(java.lang.'annotation'.Annotation[])",
            "cn.hutool.core.annotation.CombinationAnnotationElement:void parse(java.lang.'annotation'.Annotation[])",
            "cn.hutool.core.bean.BeanDesc:cn.hutool.core.bean.BeanDesc init()",
            "cn.hutool.core.bean.BeanUtil:java.util.Map internalGetPropertyDescriptorMap(java.lang.Class,boolean)",
            "cn.hutool.core.bean.BeanUtil:void setFieldValue(java.lang.Object,java.lang.String,java.lang.Object)",
            "cn.hutool.core.bean.BeanUtil:java.util.Map beanToMap(java.lang.Object,java.util.Map,boolean,cn.hutool.core.lang.Editor)",
            "cn.hutool.core.bean.DynaBean:void set(java.lang.String,java.lang.Object)",
            "cn.hutool.core.convert.BasicType:void <clinit>()",
            "cn.hutool.core.convert.ConverterRegistry:cn.hutool.core.convert.ConverterRegistry putCustom(java.lang.reflect.Type,cn.hutool.core.convert.Converter)",
            "cn.hutool.core.convert.ConverterRegistry:cn.hutool.core.convert.ConverterRegistry defaultConverter()",
            "cn.hutool.core.convert.impl.MapConverter:void convertMapToMap(java.util.Map,java.util.Map)",
            "cn.hutool.core.date.format.FastDateParser$TimeZoneStrategy:void <init>(java.util.Locale)",
            "cn.hutool.core.io.FileTypeUtil:java.lang.String putFileType(java.lang.String,java.lang.String)",
            "cn.hutool.core.io.FileTypeUtil:void <clinit>()",
            "cn.hutool.core.io.watch.WatchMonitor:void registerPath(java.nio.file.Path,int)",
            "cn.hutool.core.lang.SimpleCache:java.lang.Object put(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.lang.Singleton:java.lang.Object get(java.lang.Class,java.lang.Object[])",
            "cn.hutool.core.lang.Singleton:void put(java.lang.Object)",
            "cn.hutool.core.map.MapBuilder:cn.hutool.core.map.MapBuilder put(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.map.MapProxy:java.lang.Object put(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.map.MapUtil:java.util.Map filter(java.util.Map,cn.hutool.core.lang.Editor)",
            "cn.hutool.core.map.MapUtil:java.util.Map filter(java.util.Map,cn.hutool.core.lang.Filter)",
            "cn.hutool.core.map.MapUtil:java.util.Map filter(java.util.Map,java.lang.Object[])",
            "cn.hutool.core.map.MapUtil:java.util.Map inverse(java.util.Map)",
            "cn.hutool.core.text.replacer.LookupReplacer:void <init>(java.lang.String[][])",
            "cn.hutool.core.util.ClassLoaderUtil:void <clinit>()",
            "cn.hutool.core.util.IdcardUtil:void <clinit>()",
            "cn.hutool.core.util.XmlUtil:java.util.Map xmlToMap(org.w3c.dom.Node,java.util.Map)",
            "cn.hutool.cache.impl.AbstractCache:void put(java.lang.Object,java.lang.Object,long)",
            "cn.hutool.db.dialect.DialectFactory:cn.hutool.db.dialect.Dialect getDialect(javax.sql.DataSource)",
            "cn.hutool.db.ds.c3p0.C3p0DSFactory:javax.sql.DataSource getDataSource(java.lang.String)",
            "cn.hutool.db.ds.dbcp.DbcpDSFactory:javax.sql.DataSource getDataSource(java.lang.String)",
            "cn.hutool.db.ds.druid.DruidDSFactory:javax.sql.DataSource getDataSource(java.lang.String)",
            "cn.hutool.db.ds.hikari.HikariDSFactory:javax.sql.DataSource getDataSource(java.lang.String)",
            "cn.hutool.db.ds.jndi.JndiDSFactory:javax.sql.DataSource getDataSource(java.lang.String)",
            "cn.hutool.db.ds.pooled.PooledDSFactory:javax.sql.DataSource getDataSource(java.lang.String)",
            "cn.hutool.db.ds.simple.SimpleDSFactory:javax.sql.DataSource getDataSource(java.lang.String)",
            "cn.hutool.db.ds.tomcat.TomcatDSFactory:org.apache.tomcat.jdbc.pool.DataSource getDataSource(java.lang.String)",
            "cn.hutool.db.nosql.mongo.MongoFactory:cn.hutool.db.nosql.mongo.MongoDS getDS(java.lang.String,int)",
            "cn.hutool.db.nosql.mongo.MongoFactory:cn.hutool.db.nosql.mongo.MongoDS getDS(java.lang.String[])",
            "cn.hutool.db.nosql.mongo.MongoFactory:cn.hutool.db.nosql.mongo.MongoDS getDS(cn.hutool.setting.Setting,java.lang.String[])",
            "cn.hutool.db.ThreadLocalConnection$GroupedConnection:java.sql.Connection get(javax.sql.DataSource)",
            "cn.hutool.extra.servlet.multipart.MultipartFormData:void putFile(java.lang.String,cn.hutool.extra.servlet.multipart.UploadFile)",
            "cn.hutool.extra.servlet.multipart.MultipartFormData:void putParameter(java.lang.String,java.lang.String)",
            "cn.hutool.extra.ssh.JschSessionPool:void put(java.lang.String,com.jcraft.jsch.Session)",
            "cn.hutool.extra.template.engine.velocity.VelocityUtil:void putGlobalContext(java.lang.String,java.lang.Object)",
            "cn.hutool.http.GlobalHeaders:cn.hutool.http.GlobalHeaders header(java.lang.String,java.lang.String,boolean)",
            "cn.hutool.http.HTMLFilter:void <init>()",
            "cn.hutool.http.HTMLFilter:java.lang.String processTag(java.lang.String)",
            "cn.hutool.http.HttpBase:java.lang.Object header(java.lang.String,java.lang.String,boolean)",
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest form(java.lang.String,java.lang.Object)",
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest form(java.lang.String,cn.hutool.core.io.resource.Resource)",
            "cn.hutool.http.HttpUtil:void addParam(java.util.Map,java.lang.String,java.lang.String,java.lang.String)",
            "cn.hutool.http.webservice.SoapRequest:cn.hutool.http.webservice.SoapRequest addParam(java.lang.String,java.lang.String)",
            "cn.hutool.log.LogFactory:cn.hutool.log.Log getLog(java.lang.String)",
            "cn.hutool.log.LogFactory:cn.hutool.log.Log getLog(java.lang.Class)",
            "cn.hutool.setting.profile.Profile:cn.hutool.setting.Setting getSetting(java.lang.String)",
            "cn.hutool.setting.SettingUtil:cn.hutool.setting.Setting get(java.lang.String)",
            "cn.hutool.json.JSONObject:void <init>(java.lang.Object,boolean)",
            "cn.hutool.json.JSONObject:cn.hutool.json.JSONObject put(java.lang.String,java.lang.Object)",
            "cn.hutool.json.JSONObject:void populateMap(java.lang.Object)",
            "cn.hutool.poi.excel.ExcelReader:cn.hutool.poi.excel.ExcelReader addHeaderAlias(java.lang.String,java.lang.String)",
            "cn.hutool.poi.excel.ExcelWriter:cn.hutool.poi.excel.ExcelWriter addHeaderAlias(java.lang.String,java.lang.String)"
        ]
    },
    "cn.hutool.poi.excel.ExcelWriter:cn.hutool.poi.excel.ExcelWriter merge(int,java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.poi.excel.ExcelWriter:cn.hutool.poi.excel.ExcelWriter merge(int,java.lang.Object)"
        ]
    },
    "cn.hutool.core.io.FileUtil:java.lang.String getAbsolutePath(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.FileUtil:java.io.File[] ls(java.lang.String)",
            "cn.hutool.core.io.FileUtil:java.util.List listFileNames(java.lang.String)",
            "cn.hutool.core.io.FileUtil:java.io.File file(java.lang.String)"
        ]
    },
    "cn.hutool.core.util.ClassUtil:java.net.URL getResourceURL(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ClassUtil:java.net.URL getClassPathURL()"
        ]
    },
    "cn.hutool.core.util.URLUtil:java.net.URL getURL(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.servlet.multipart.UploadSetting:void load(java.lang.String)",
            "cn.hutool.setting.GroupedSet:void <init>(java.lang.String,java.nio.charset.Charset)"
        ]
    },
    "cn.hutool.core.lang.ClassScaner:void addIfAccept(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.lang.ClassScaner:void scanFile(java.io.File,java.lang.String)"
        ]
    },
    "cn.hutool.core.lang.JarClassLoader:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.lang.JarClassLoader:cn.hutool.core.lang.JarClassLoader loadJar(java.io.File)"
        ]
    },
    "cn.hutool.core.convert.Convert:java.lang.Object convertByClassName(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.lang.Singleton:java.lang.Object get(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ClassUtil:java.lang.Object invoke(java.lang.String,java.lang.String,boolean,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ClassUtil:java.lang.Object invoke(java.lang.String,boolean,java.lang.Object[])",
            "cn.hutool.core.util.ClassUtil:java.lang.Object invoke(java.lang.String,java.lang.String,java.lang.Object[])"
        ]
    },
    "cn.hutool.http.HttpConnection:void <init>(java.lang.String,cn.hutool.http.Method,javax.net.ssl.HostnameVerifier,javax.net.ssl.SSLSocketFactory,int,java.net.Proxy)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HttpConnection:cn.hutool.http.HttpConnection create(java.lang.String,cn.hutool.http.Method,javax.net.ssl.HostnameVerifier,javax.net.ssl.SSLSocketFactory)",
            "cn.hutool.http.HttpConnection:cn.hutool.http.HttpConnection create(java.lang.String,cn.hutool.http.Method,javax.net.ssl.HostnameVerifier,javax.net.ssl.SSLSocketFactory,int,java.net.Proxy)",
            "cn.hutool.http.HttpConnection:void <init>(java.lang.String,cn.hutool.http.Method)",
            "cn.hutool.http.HttpConnection:void <init>(java.lang.String,cn.hutool.http.Method,int)"
        ]
    },
    "cn.hutool.db.dialect.DriverUtil:java.lang.String identifyDriver(java.sql.Connection)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.dialect.DialectFactory:cn.hutool.db.dialect.Dialect newDialect(java.sql.Connection)",
            "cn.hutool.db.dialect.DriverUtil:java.lang.String identifyDriver(javax.sql.DataSource)"
        ]
    },
    "cn.hutool.db.ds.pooled.DbConfig:void init(java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.ds.pooled.DbConfig:void <init>(java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "cn.hutool.db.ds.simple.SimpleDataSource:void init(java.lang.String,java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.ds.simple.SimpleDataSource:void <init>(cn.hutool.setting.Setting,java.lang.String)",
            "cn.hutool.db.ds.simple.SimpleDataSource:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
            "cn.hutool.db.ds.simple.SimpleDataSource:void init(java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "cn.hutool.log.AbstractLog:void trace(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.log.AbstractLog:void debug(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.log.AbstractLog:void info(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.log.AbstractLog:void warn(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.log.StaticLog:void warn(cn.hutool.log.Log,java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.StaticLog:void warn(java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.log.StaticLog:void warn(cn.hutool.log.Log,java.lang.String,java.lang.Object[])"
        ]
    },
    "cn.hutool.log.AbstractLog:void error(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.Session:void commit()",
            "cn.hutool.db.Session:void rollback()",
            "cn.hutool.db.Session:void quietRollback()",
            "cn.hutool.db.Session:void rollback(java.sql.Savepoint)",
            "cn.hutool.db.Session:void quietRollback(java.sql.Savepoint)"
        ]
    },
    "cn.hutool.log.StaticLog:void error(cn.hutool.log.Log,java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.StaticLog:void error(java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.log.StaticLog:void error(cn.hutool.log.Log,java.lang.Throwable)",
            "cn.hutool.log.StaticLog:void error(cn.hutool.log.Log,java.lang.String,java.lang.Object[])"
        ]
    },
    "cn.hutool.log.dialect.console.ConsoleLog:void trace(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.StaticLog:void trace(cn.hutool.log.Log,java.lang.String,java.lang.Object[])"
        ]
    },
    "cn.hutool.log.dialect.console.ConsoleLog:void debug(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.DbUtil:void setShowSqlGlobal(cn.hutool.setting.Setting)",
            "cn.hutool.db.ds.DSFactory:cn.hutool.db.ds.DSFactory create(cn.hutool.setting.Setting)",
            "cn.hutool.db.nosql.mongo.MongoDS:com.mongodb.MongoClientOptions$Builder buildMongoClientOptions(com.mongodb.MongoClientOptions$Builder,java.lang.String)",
            "cn.hutool.extra.servlet.multipart.UploadFile:boolean processStream(cn.hutool.extra.servlet.multipart.MultipartRequestInputStream)",
            "cn.hutool.http.HttpConnection:cn.hutool.http.HttpConnection setCookie(java.lang.String)",
            "cn.hutool.log.GlobalLogFactory:cn.hutool.log.LogFactory set(cn.hutool.log.LogFactory)",
            "cn.hutool.log.LogFactory:cn.hutool.log.LogFactory create()",
            "cn.hutool.log.StaticLog:void debug(cn.hutool.log.Log,java.lang.String,java.lang.Object[])",
            "cn.hutool.setting.AbsSetting$1:java.lang.Object value(java.lang.String,java.lang.reflect.Type)",
            "cn.hutool.setting.AbsSetting:java.lang.String getWithLog(java.lang.String)",
            "cn.hutool.setting.AbsSetting:java.lang.String getByGroupWithLog(java.lang.String,java.lang.String)",
            "cn.hutool.setting.dialect.Props:void load(cn.hutool.core.io.resource.Resource)",
            "cn.hutool.setting.SettingLoader:boolean load(cn.hutool.core.io.resource.UrlResource)",
            "cn.hutool.cron.CronTimer:void run()"
        ]
    },
    "cn.hutool.log.dialect.console.ConsoleLog:void info(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.nosql.mongo.MongoDS:void initSingle()",
            "cn.hutool.db.nosql.mongo.MongoDS:void initCloud()",
            "cn.hutool.extra.servlet.multipart.UploadSetting:void load(java.lang.String)",
            "cn.hutool.log.StaticLog:void info(cn.hutool.log.Log,java.lang.String,java.lang.Object[])"
        ]
    },
    "cn.hutool.log.dialect.console.ConsoleLog:void warn(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.DbUtil:void close(java.lang.Object[])"
        ]
    },
    "cn.hutool.log.dialect.console.ConsoleLog:void error(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.dfa.SensitiveUtil$1:java.lang.Object call()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.dfa.SensitiveUtil:void init(java.lang.String,char,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.dfa.SensitiveUtil:void init(java.lang.String,boolean)"
        ]
    },
    "cn.hutool.extra.template.engine.velocity.VelocityUtil:java.lang.String getContent(java.lang.String,java.lang.String,org.apache.velocity.VelocityContext,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest post(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HttpUtil:cn.hutool.http.HttpRequest createPost(java.lang.String)",
            "cn.hutool.http.HttpUtil:java.lang.String post(java.lang.String,java.util.Map,int)",
            "cn.hutool.http.HttpUtil:java.lang.String post(java.lang.String,java.lang.String,int)",
            "cn.hutool.http.webservice.SoapRequest:java.lang.String execute()"
        ]
    },
    "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest get(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HttpUtil:cn.hutool.http.HttpRequest createGet(java.lang.String)",
            "cn.hutool.http.HttpUtil:java.lang.String get(java.lang.String,java.nio.charset.Charset)",
            "cn.hutool.http.HttpUtil:java.lang.String get(java.lang.String,int)",
            "cn.hutool.http.HttpUtil:java.lang.String get(java.lang.String,java.util.Map)",
            "cn.hutool.http.HttpUtil:java.lang.String get(java.lang.String,java.util.Map,int)",
            "cn.hutool.http.HttpUtil:long downloadFile(java.lang.String,java.io.File,int,cn.hutool.core.io.StreamProgress)",
            "cn.hutool.http.HttpUtil:long download(java.lang.String,java.io.OutputStream,boolean,cn.hutool.core.io.StreamProgress)"
        ]
    },
    "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest head(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest options(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest put(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest patch(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest delete(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest trace(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.http.HttpUtil:cn.hutool.http.HttpRequest createRequest(cn.hutool.http.Method,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.collection.CollUtil:boolean isEmpty(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.lang.Assert:java.util.Map notEmpty(java.util.Map,java.lang.String,java.lang.Object[])",
            "cn.hutool.db.DaoTemplate:int del(cn.hutool.db.Entity)",
            "cn.hutool.db.DaoTemplate:int update(cn.hutool.db.Entity,cn.hutool.db.Entity)",
            "cn.hutool.db.DaoTemplate:int update(cn.hutool.db.Entity)",
            "cn.hutool.db.ds.c3p0.C3p0DSFactory:com.mchange.v2.c3p0.ComboPooledDataSource createDataSource(java.lang.String)",
            "cn.hutool.db.ds.dbcp.DbcpDSFactory:org.apache.commons.dbcp2.BasicDataSource createDataSource(java.lang.String)",
            "cn.hutool.db.ds.druid.DruidDSFactory:com.alibaba.druid.pool.DruidDataSource createDataSource(java.lang.String)",
            "cn.hutool.db.ds.hikari.HikariDSFactory:com.zaxxer.hikari.HikariDataSource createDataSource(java.lang.String)",
            "cn.hutool.db.ds.pooled.DbSetting:cn.hutool.db.ds.pooled.DbConfig getDbConfig(java.lang.String)",
            "cn.hutool.db.ds.simple.SimpleDataSource:void <init>(cn.hutool.setting.Setting,java.lang.String)",
            "cn.hutool.db.ds.tomcat.TomcatDSFactory:org.apache.tomcat.jdbc.pool.DataSource createDataSource(java.lang.String)",
            "cn.hutool.db.SqlConnRunner:int insert(java.sql.Connection,cn.hutool.db.Entity)",
            "cn.hutool.db.SqlConnRunner:java.util.List insertForGeneratedKeys(java.sql.Connection,cn.hutool.db.Entity)",
            "cn.hutool.db.SqlConnRunner:java.lang.Long insertForGeneratedKey(java.sql.Connection,cn.hutool.db.Entity)",
            "cn.hutool.db.SqlConnRunner:int del(java.sql.Connection,cn.hutool.db.Entity)",
            "cn.hutool.db.SqlConnRunner:int update(java.sql.Connection,cn.hutool.db.Entity,cn.hutool.db.Entity)",
            "cn.hutool.http.GlobalHeaders:cn.hutool.http.GlobalHeaders header(java.util.Map)",
            "cn.hutool.http.HttpBase:java.lang.Object header(java.util.Map,boolean)",
            "cn.hutool.http.HttpBase:java.lang.Object addHeaders(java.util.Map)",
            "cn.hutool.http.HttpRequest:void send()",
            "cn.hutool.http.HttpUtil:java.lang.String toParams(java.util.Map,java.nio.charset.Charset)"
        ]
    },
    "cn.hutool.core.lang.WeightRandom:java.lang.Object next()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.map.MapUtil:java.util.TreeMap newTreeMap(java.util.Map,java.util.Comparator)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.map.MapUtil:java.util.TreeMap sort(java.util.Map,java.util.Comparator)"
        ]
    },
    "cn.hutool.poi.excel.ExcelWriter:java.util.Comparator getInitedAliasComparator()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.poi.excel.ExcelWriter:cn.hutool.poi.excel.ExcelWriter writeRow(java.lang.Object,boolean)"
        ]
    },
    "cn.hutool.core.collection.CollUtil:boolean isNotEmpty(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.exceptions.ExceptionUtil:java.lang.String stacktraceToString(java.lang.Throwable,int,java.util.Map)",
            "cn.hutool.db.ds.c3p0.C3p0DSFactory:void destroy()",
            "cn.hutool.db.ds.dbcp.DbcpDSFactory:void destroy()",
            "cn.hutool.db.ds.druid.DruidDSFactory:void destroy()",
            "cn.hutool.db.ds.hikari.HikariDSFactory:void destroy()",
            "cn.hutool.db.ds.pooled.PooledDSFactory:void destroy()",
            "cn.hutool.db.ds.simple.SimpleDSFactory:void destroy()",
            "cn.hutool.db.ds.tomcat.TomcatDSFactory:void destroy()",
            "cn.hutool.db.nosql.mongo.MongoFactory:void closeAll()",
            "cn.hutool.http.HttpRequest:void writeForm(java.io.OutputStream)",
            "cn.hutool.setting.dialect.Props:void <init>(java.util.Properties)",
            "cn.hutool.cron.Scheduler:cn.hutool.cron.Scheduler schedule(cn.hutool.setting.Setting)"
        ]
    },
    "cn.hutool.setting.GroupedMap:java.lang.String get(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.setting.Setting:java.lang.String getByGroup(java.lang.String,java.lang.String)",
            "cn.hutool.setting.Setting:java.lang.String get(java.lang.String,java.lang.String)",
            "cn.hutool.setting.Setting:java.lang.String get(java.lang.Object)",
            "cn.hutool.setting.SettingLoader:java.lang.String replaceVar(java.lang.String,java.lang.String)"
        ]
    },
    "cn.hutool.setting.GroupedMap:java.lang.String remove(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.setting.Setting:java.lang.String remove(java.lang.String,java.lang.Object)",
            "cn.hutool.setting.Setting:java.lang.String remove(java.lang.Object)"
        ]
    },
    "cn.hutool.setting.GroupedMap:boolean containsKey(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.setting.Setting:boolean containsKey(java.lang.String,java.lang.String)",
            "cn.hutool.setting.Setting:boolean containsKey(java.lang.Object)"
        ]
    },
    "cn.hutool.setting.GroupedMap:boolean containsValue(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.setting.Setting:boolean containsValue(java.lang.String,java.lang.String)",
            "cn.hutool.setting.Setting:boolean containsValue(java.lang.Object)"
        ]
    },
    "cn.hutool.setting.GroupedMap:cn.hutool.setting.GroupedMap clear(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.setting.Setting:cn.hutool.setting.Setting clear(java.lang.String)",
            "cn.hutool.setting.Setting:void clear()"
        ]
    },
    "cn.hutool.setting.GroupedMap:java.util.Set keySet(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.setting.Setting:java.util.Set keySet(java.lang.String)",
            "cn.hutool.setting.Setting:java.util.Set keySet()"
        ]
    },
    "cn.hutool.setting.GroupedMap:java.util.Collection values(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.setting.Setting:java.util.Collection values(java.lang.String)",
            "cn.hutool.setting.Setting:java.util.Collection values()"
        ]
    },
    "cn.hutool.setting.GroupedMap:java.util.Set entrySet(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.setting.Setting:java.util.Set entrySet(java.lang.String)",
            "cn.hutool.setting.Setting:java.util.Set entrySet()"
        ]
    },
    "cn.hutool.setting.Setting:boolean isEmpty(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.json.XML:cn.hutool.json.JSONObject toJSONObject(java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.json.XML:cn.hutool.json.JSONObject toJSONObject(java.lang.String)"
        ]
    },
    "cn.hutool.cron.CronUtil:java.lang.String schedule(java.lang.String,java.lang.String,cn.hutool.cron.task.Task)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.cron.Scheduler:java.lang.String schedule(java.lang.String,cn.hutool.cron.task.Task)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.cron.CronUtil:java.lang.String schedule(java.lang.String,cn.hutool.cron.task.Task)",
            "cn.hutool.cron.Scheduler:cn.hutool.cron.Scheduler schedule(cn.hutool.setting.Setting)",
            "cn.hutool.cron.Scheduler:java.lang.String schedule(java.lang.String,java.lang.Runnable)"
        ]
    },
    "cn.hutool.json.JSONUtil:java.lang.String toJsonStr(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.dfa.SensitiveUtil:boolean containsSensitive(java.lang.Object)",
            "cn.hutool.dfa.SensitiveUtil:java.lang.String getFindedFirstSensitive(java.lang.Object)",
            "cn.hutool.dfa.SensitiveUtil:java.util.List getFindedAllSensitive(java.lang.Object)",
            "cn.hutool.dfa.SensitiveUtil:java.util.List getFindedAllSensitive(java.lang.Object,boolean,boolean)"
        ]
    },
    "cn.hutool.json.JSONUtil:java.lang.String toJsonPrettyStr(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.sql.SqlBuilder:java.lang.String buildCondition(cn.hutool.db.sql.LogicalOperator,cn.hutool.db.sql.Condition[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.sql.SqlBuilder:cn.hutool.db.sql.SqlBuilder where(cn.hutool.db.sql.LogicalOperator,cn.hutool.db.sql.Condition[])",
            "cn.hutool.db.sql.SqlBuilder:cn.hutool.db.sql.SqlBuilder having(cn.hutool.db.sql.LogicalOperator,cn.hutool.db.sql.Condition[])",
            "cn.hutool.db.sql.SqlBuilder:cn.hutool.db.sql.SqlBuilder on(cn.hutool.db.sql.LogicalOperator,cn.hutool.db.sql.Condition[])"
        ]
    },
    "cn.hutool.json.JSONGetter:java.lang.Object getBean(java.lang.Object,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.json.JSONSupport:java.lang.String toJSONString()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.json.InternalJSONUtil:java.io.Writer writeValue(java.io.Writer,java.lang.Object,int,int)",
            "cn.hutool.json.InternalJSONUtil:java.lang.String valueToString(java.lang.Object)",
            "cn.hutool.json.JSONSupport:java.lang.String toString()"
        ]
    },
    "cn.hutool.core.util.ObjectUtil:java.lang.String toString(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.cache.impl.AbstractCache:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.DynaBean:java.lang.String toString()",
            "cn.hutool.core.collection.CollUtil$6:int compare(java.util.Map$Entry,java.util.Map$Entry)",
            "cn.hutool.core.convert.AbstractConverter:java.lang.String convertToStr(java.lang.Object)",
            "cn.hutool.core.convert.impl.ArrayConverter:java.lang.Object convertObjectToArray(java.lang.Object)",
            "cn.hutool.core.convert.impl.CurrencyConverter:java.util.Currency convertInternal(java.lang.Object)",
            "cn.hutool.core.convert.NumberWordFormater:java.lang.String format(java.lang.Object)",
            "cn.hutool.core.getter.OptNullBasicTypeFromStringGetter:java.lang.Object getObj(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.io.file.FileWriter:java.io.File writeLines(java.util.Collection,cn.hutool.core.io.file.LineSeparator,boolean)",
            "cn.hutool.core.io.watch.watchers.DelayWatcher$1:void run()",
            "cn.hutool.core.io.watch.watchers.DelayWatcher:void onDelayModify(java.nio.file.WatchEvent,java.nio.file.Path)",
            "cn.hutool.core.io.watch.WatchMonitor:void watch(cn.hutool.core.io.watch.Watcher)",
            "cn.hutool.core.lang.ConsistentHash$1:java.lang.Integer hash(java.lang.Object)",
            "cn.hutool.core.lang.ConsistentHash:void add(java.lang.Object)",
            "cn.hutool.core.lang.ConsistentHash:void remove(java.lang.Object)",
            "cn.hutool.core.lang.mutable.MutableObj:java.lang.String toString()",
            "cn.hutool.core.map.CamelCaseLinkedMap:java.lang.Object customKey(java.lang.Object)",
            "cn.hutool.core.map.CamelCaseMap:java.lang.Object customKey(java.lang.Object)",
            "cn.hutool.core.map.CaseInsensitiveLinkedMap:java.lang.Object customKey(java.lang.Object)",
            "cn.hutool.core.map.CaseInsensitiveMap:java.lang.Object customKey(java.lang.Object)",
            "cn.hutool.core.util.ArrayUtil:java.lang.String toString(java.lang.Object)",
            "cn.hutool.core.util.ObjectUtil:boolean contains(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.util.StrUtil:java.lang.String str(java.lang.Object,java.nio.charset.Charset)",
            "cn.hutool.core.util.StrUtil:java.lang.String toString(java.lang.Object)",
            "cn.hutool.core.util.XmlUtil:void mapToXml(org.w3c.dom.Document,org.w3c.dom.Element,java.util.Map)",
            "cn.hutool.extra.servlet.ServletUtil:void setHeader(javax.servlet.http.HttpServletResponse,java.lang.String,java.lang.Object)",
            "cn.hutool.extra.template.engine.velocity.VelocityUtil:void toFile(org.apache.velocity.Template,org.apache.velocity.VelocityContext,java.lang.String)",
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest form(java.lang.String,java.lang.Object,java.lang.Object[])",
            "cn.hutool.setting.dialect.Props:java.lang.Object getObj(java.lang.String,java.lang.Object)",
            "cn.hutool.setting.dialect.Props:void setProperty(java.lang.String,java.lang.Object)",
            "cn.hutool.json.InternalJSONUtil:java.io.Writer writeValue(java.io.Writer,java.lang.Object,int,int)",
            "cn.hutool.json.InternalJSONUtil:java.lang.String valueToString(java.lang.Object)",
            "cn.hutool.json.JSONObject:java.io.Writer write(java.io.Writer,int,int)",
            "cn.hutool.json.JSONObject:void init(cn.hutool.json.JSONTokener)",
            "cn.hutool.json.JSONUtil:java.lang.Object wrap(java.lang.Object,boolean)",
            "cn.hutool.json.XML:java.lang.String toXml(java.lang.Object,java.lang.String)",
            "cn.hutool.poi.excel.cell.CellUtil:void setCellValue(org.apache.poi.ss.usermodel.Cell,java.lang.Object,cn.hutool.poi.excel.StyleSet,boolean)",
            "cn.hutool.poi.excel.ExcelReader:java.util.List aliasHeader(java.util.List)"
        ]
    },
    "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest body(cn.hutool.json.JSON)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.poi.excel.ExcelReader:java.util.List read()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.lang.Range:java.lang.Object safeStep(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.lang.Range:void <init>(java.lang.Object,java.lang.Object,cn.hutool.core.lang.Range$Steper,boolean,boolean)",
            "cn.hutool.core.lang.Range:java.lang.Object nextUncheck()"
        ]
    },
    "cn.hutool.core.lang.Dict:java.lang.Object toBean(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.lang.Dict:java.lang.Object toBeanIgnoreCase(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.handler.HandleHelper:java.lang.Object handleRow(int,java.sql.ResultSetMetaData,java.sql.ResultSet,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.json.JSONObject:java.lang.Object toBean(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.json.JSONGetter:java.lang.Object getBean(java.lang.Object,java.lang.Class)"
        ]
    },
    "cn.hutool.json.JSONUtil:java.lang.Object toBean(cn.hutool.json.JSONObject,java.lang.Class,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.json.JSONUtil:java.lang.Object toBean(java.lang.String,java.lang.Class)",
            "cn.hutool.json.JSONUtil:java.lang.Object toBean(cn.hutool.json.JSONObject,java.lang.Class)"
        ]
    },
    "cn.hutool.json.JSONObject:java.lang.Object toBean(java.lang.reflect.Type)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.lang.Dict:java.lang.Enum getEnum(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.lang.Dict:java.lang.Enum getEnum(java.lang.Class,java.lang.Object)"
        ]
    },
    "cn.hutool.core.getter.OptNullBasicTypeGetter:java.lang.Enum getEnum(java.lang.Class,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.setting.dialect.Props:java.lang.Enum getEnum(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.setting.dialect.Props:java.lang.Enum getEnum(java.lang.Class,java.lang.Object)"
        ]
    },
    "cn.hutool.setting.dialect.Props:java.lang.Enum getEnum(java.lang.Class,java.lang.Object,java.lang.Enum)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.convert.Convert:java.lang.Object convert(java.lang.reflect.Type,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.Convert:java.lang.Object convert(java.lang.reflect.Type,java.lang.Object)",
            "cn.hutool.core.convert.Convert:java.lang.Object convert(java.lang.Class,java.lang.Object,java.lang.Object)"
        ]
    },
    "cn.hutool.core.convert.ConverterRegistry:java.lang.Object convert(java.lang.reflect.Type,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.collection.CollUtil:java.util.Collection addAll(java.util.Collection,java.lang.Object,java.lang.reflect.Type)",
            "cn.hutool.core.convert.impl.ArrayConverter:java.lang.Object convertArrayToArray(java.lang.Object)",
            "cn.hutool.core.convert.impl.ArrayConverter:java.lang.Object convertObjectToArray(java.lang.Object)",
            "cn.hutool.core.convert.impl.ArrayConverter:java.lang.Object[] convertToSingleElementArray(java.lang.Object)",
            "cn.hutool.core.convert.impl.AtomicReferenceConverter:java.util.concurrent.atomic.AtomicReference convertInternal(java.lang.Object)",
            "cn.hutool.core.convert.impl.ByteArrayConverter:byte[] convertInternal(java.lang.Object)",
            "cn.hutool.core.convert.impl.MapConverter:void convertMapToMap(java.util.Map,java.util.Map)",
            "cn.hutool.core.convert.impl.ReferenceConverter:java.lang.ref.Reference convertInternal(java.lang.Object)",
            "cn.hutool.json.InternalJSONUtil:java.lang.Object jsonConvert(java.lang.reflect.Type,java.lang.Object,boolean)"
        ]
    },
    "cn.hutool.core.lang.Dict:cn.hutool.core.lang.Dict parseBean(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.lang.Dict:cn.hutool.core.lang.Dict parse(java.lang.Object)",
            "cn.hutool.db.Entity:cn.hutool.db.Entity parseBean(java.lang.Object)"
        ]
    },
    "cn.hutool.db.Entity:cn.hutool.db.Entity parseBean(java.lang.Object,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.ActiveEntity:cn.hutool.db.ActiveEntity parseBean(java.lang.Object,boolean,boolean)",
            "cn.hutool.db.Entity:cn.hutool.db.Entity parse(java.lang.Object,boolean,boolean)",
            "cn.hutool.db.Entity:cn.hutool.db.Entity parseWithUnderlineCase(java.lang.Object)",
            "cn.hutool.db.Entity:cn.hutool.core.lang.Dict parseBean(java.lang.Object,boolean,boolean)"
        ]
    },
    "cn.hutool.db.sql.SqlBuilder:cn.hutool.db.sql.SqlBuilder query(cn.hutool.db.sql.Query)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.dialect.impl.AnsiSqlDialect:java.sql.PreparedStatement psForFind(java.sql.Connection,cn.hutool.db.sql.Query)",
            "cn.hutool.db.dialect.impl.AnsiSqlDialect:java.sql.PreparedStatement psForPage(java.sql.Connection,cn.hutool.db.sql.Query)"
        ]
    },
    "cn.hutool.db.sql.SqlBuilder:cn.hutool.db.sql.SqlBuilder select(boolean,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.sql.SqlBuilder:cn.hutool.db.sql.SqlBuilder select(boolean,java.lang.String[])",
            "cn.hutool.db.sql.SqlBuilder:cn.hutool.db.sql.SqlBuilder select(java.util.Collection)"
        ]
    },
    "cn.hutool.core.convert.Convert:java.util.List toList(java.lang.Class,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.json.InternalJSONUtil$1:java.lang.Object value(java.lang.String,java.lang.reflect.Type)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.json.InternalJSONUtil$1:java.lang.Object value(java.lang.Object,java.lang.reflect.Type)"
        ]
    },
    "cn.hutool.json.InternalJSONUtil:java.lang.Object toArray(cn.hutool.json.JSONArray,java.lang.Class,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.json.JSONArray:java.lang.Object toArray(java.lang.Class,boolean)"
        ]
    },
    "cn.hutool.json.JSONArray:java.lang.Object getByPath(java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.json.JSONArray:java.lang.Object getByExp(java.lang.String,java.lang.Class)"
        ]
    },
    "cn.hutool.json.JSONObject:java.lang.Object getByPath(java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.json.JSONObject:java.lang.Object getByExp(java.lang.String,java.lang.Class)"
        ]
    },
    "cn.hutool.json.JSONUtil:java.util.List toList(cn.hutool.json.JSONArray,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.FileUtil:java.lang.String normalize(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.FileUtil:java.lang.String getAbsolutePath(java.lang.String,java.lang.Class)",
            "cn.hutool.core.io.FileUtil:java.lang.String subPath(java.lang.String,java.lang.String)",
            "cn.hutool.core.io.resource.ClassPathResource:java.lang.String getAbsolutePath()",
            "cn.hutool.core.io.resource.ClassPathResource:java.lang.String normalizePath(java.lang.String)",
            "cn.hutool.core.util.ClassUtil:java.lang.String getClassPath(boolean)"
        ]
    },
    "cn.hutool.core.collection.EnumerationIter:java.lang.Object next()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.BeanUtil:java.util.Map beanToMap(java.lang.Object,java.util.Map,boolean,cn.hutool.core.lang.Editor)",
            "cn.hutool.core.bean.copier.BeanCopier:void valueProviderToBean(cn.hutool.core.bean.copier.ValueProvider,java.lang.Object)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection union(java.util.Collection,java.util.Collection)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection intersection(java.util.Collection,java.util.Collection)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection disjunction(java.util.Collection,java.util.Collection)",
            "cn.hutool.core.collection.CollUtil:boolean containsAny(java.util.Collection,java.util.Collection)",
            "cn.hutool.core.collection.CollUtil:java.util.HashSet newHashSet(boolean,java.util.Iterator)",
            "cn.hutool.core.collection.CollUtil:java.util.List list(boolean,java.util.Iterator)",
            "cn.hutool.core.collection.CollUtil:java.util.List split(java.util.Collection,int)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection filter(java.util.Collection,cn.hutool.core.lang.Editor)",
            "cn.hutool.core.collection.CollUtil:java.util.List filter(java.util.List,cn.hutool.core.lang.Editor)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection filter(java.util.Collection,cn.hutool.core.lang.Filter)",
            "cn.hutool.core.collection.CollUtil:java.util.List filter(java.util.List,cn.hutool.core.lang.Filter)",
            "cn.hutool.core.collection.CollUtil:java.util.List extract(java.lang.Iterable,cn.hutool.core.lang.Editor)",
            "cn.hutool.core.collection.CollUtil:java.lang.Object findOne(java.lang.Iterable,cn.hutool.core.lang.Filter)",
            "cn.hutool.core.collection.CollUtil:int count(java.lang.Iterable,cn.hutool.core.lang.Matcher)",
            "cn.hutool.core.collection.CollUtil:java.util.TreeSet toTreeSet(java.util.Collection,java.util.Comparator)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection addAll(java.util.Collection,java.lang.Object,java.lang.reflect.Type)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection addAll(java.util.Collection,java.util.Iterator)",
            "cn.hutool.core.collection.CollUtil:java.util.List addAllIfNotContains(java.util.List,java.util.List)",
            "cn.hutool.core.collection.CollUtil:java.util.ArrayList valuesOfKeys(java.util.Map,java.util.Iterator)",
            "cn.hutool.core.collection.CollUtil:java.util.LinkedHashMap sortToMap(java.util.Collection,java.util.Comparator)",
            "cn.hutool.core.collection.CollUtil:void forEach(java.util.Iterator,cn.hutool.core.collection.CollUtil$Consumer)",
            "cn.hutool.core.collection.CollUtil:void forEach(java.util.Map,cn.hutool.core.collection.CollUtil$KVConsumer)",
            "cn.hutool.core.collection.CollUtil:java.util.List group(java.util.Collection,cn.hutool.core.collection.CollUtil$Hash)",
            "cn.hutool.core.collection.ConcurrentHashSet:void <init>(java.lang.Iterable)",
            "cn.hutool.core.collection.CopiedIter:void <init>(java.util.Iterator)",
            "cn.hutool.core.collection.CopiedIter:java.lang.Object next()",
            "cn.hutool.core.collection.IteratorEnumeration:java.lang.Object nextElement()",
            "cn.hutool.core.collection.IterUtil:boolean hasNull(java.util.Iterator)",
            "cn.hutool.core.collection.IterUtil:boolean isAllNull(java.util.Iterator)",
            "cn.hutool.core.collection.IterUtil:java.util.Map countMap(java.util.Iterator)",
            "cn.hutool.core.collection.IterUtil:java.util.Map fieldValueMap(java.util.Iterator,java.lang.String)",
            "cn.hutool.core.collection.IterUtil:java.util.Map fieldValueAsMap(java.util.Iterator,java.lang.String,java.lang.String)",
            "cn.hutool.core.collection.IterUtil:java.util.List fieldValueList(java.util.Iterator,java.lang.String)",
            "cn.hutool.core.collection.IterUtil:java.lang.String join(java.util.Iterator,java.lang.CharSequence,java.lang.String,java.lang.String)",
            "cn.hutool.core.collection.IterUtil:java.util.HashMap toMap(java.lang.Iterable)",
            "cn.hutool.core.collection.IterUtil:java.util.Map toMap(java.util.Iterator,java.util.Iterator)",
            "cn.hutool.core.collection.IterUtil:java.util.List toList(java.util.Iterator)",
            "cn.hutool.core.collection.IterUtil:java.lang.Object getFirst(java.util.Iterator)",
            "cn.hutool.core.comparator.ComparatorChain:int compare(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.convert.BasicType:void <clinit>()",
            "cn.hutool.core.convert.impl.ArrayConverter:java.lang.Object convertObjectToArray(java.lang.Object)",
            "cn.hutool.core.convert.impl.MapConverter:void convertMapToMap(java.util.Map,java.util.Map)",
            "cn.hutool.core.date.format.FastDateParser$TimeZoneStrategy:void <init>(java.util.Locale)",
            "cn.hutool.core.date.format.FastDateParser:java.util.Map appendDisplayNames(java.util.Calendar,java.util.Locale,int,java.lang.StringBuilder)",
            "cn.hutool.core.io.file.FileAppender:cn.hutool.core.io.file.FileAppender flush()",
            "cn.hutool.core.io.file.FileWriter:java.io.File writeLines(java.util.Collection,cn.hutool.core.io.file.LineSeparator,boolean)",
            "cn.hutool.core.io.file.FileWriter:java.io.File writeMap(java.util.Map,cn.hutool.core.io.file.LineSeparator,java.lang.String,boolean)",
            "cn.hutool.core.io.FileTypeUtil:java.lang.String getType(java.lang.String)",
            "cn.hutool.core.io.FileUtil:java.util.List listFileNames(java.lang.String)",
            "cn.hutool.core.io.resource.MultiFileResource:cn.hutool.core.io.resource.MultiFileResource add(java.util.Collection)",
            "cn.hutool.core.io.watch.watchers.WatcherChain:void onCreate(java.nio.file.WatchEvent,java.nio.file.Path)",
            "cn.hutool.core.io.watch.watchers.WatcherChain:void onModify(java.nio.file.WatchEvent,java.nio.file.Path)",
            "cn.hutool.core.io.watch.watchers.WatcherChain:void onDelete(java.nio.file.WatchEvent,java.nio.file.Path)",
            "cn.hutool.core.io.watch.watchers.WatcherChain:void onOverflow(java.nio.file.WatchEvent,java.nio.file.Path)",
            "cn.hutool.core.io.watch.WatchMonitor:void watch(cn.hutool.core.io.watch.Watcher)",
            "cn.hutool.core.lang.ClassScaner:java.util.Set scan()",
            "cn.hutool.core.lang.ClassScaner:void scanJar(java.util.jar.JarFile)",
            "cn.hutool.core.lang.ConsistentHash:void <init>(int,java.util.Collection)",
            "cn.hutool.core.lang.ConsistentHash:void <init>(cn.hutool.core.lang.ConsistentHash$HashFunc,int,java.util.Collection)",
            "cn.hutool.core.lang.Dict:void removeEqual(cn.hutool.core.lang.Dict,java.lang.String[])",
            "cn.hutool.core.lang.JarClassLoader:void loadJar(java.net.URLClassLoader,java.io.File)",
            "cn.hutool.core.lang.JarClassLoader:cn.hutool.core.lang.JarClassLoader addJar(java.io.File)",
            "cn.hutool.core.lang.SyncFinisher:void start()",
            "cn.hutool.core.lang.WeightRandom:void <init>(java.lang.Iterable)",
            "cn.hutool.core.map.CustomKeyLinkedMap:void putAll(java.util.Map)",
            "cn.hutool.core.map.CustomKeyMap:void putAll(java.util.Map)",
            "cn.hutool.core.map.MapUtil:java.util.HashMap of(java.lang.Object[])",
            "cn.hutool.core.map.MapUtil:java.util.Map toListMap(java.lang.Iterable)",
            "cn.hutool.core.map.MapUtil:java.util.List toMapList(java.util.Map)",
            "cn.hutool.core.map.MapUtil:java.lang.String join(java.util.Map,java.lang.String,java.lang.String,boolean)",
            "cn.hutool.core.map.MapUtil:java.util.Map filter(java.util.Map,cn.hutool.core.lang.Editor)",
            "cn.hutool.core.map.MapUtil:java.util.Map filter(java.util.Map,cn.hutool.core.lang.Filter)",
            "cn.hutool.core.map.MapUtil:java.util.Map inverse(java.util.Map)",
            "cn.hutool.core.text.csv.CsvRow:java.util.Map getFieldMap()",
            "cn.hutool.core.text.csv.CsvRow:java.lang.String toString()",
            "cn.hutool.core.text.csv.CsvWriter:cn.hutool.core.text.csv.CsvWriter write(java.util.Collection)",
            "cn.hutool.core.text.replacer.ReplacerChain:int replace(java.lang.CharSequence,int,cn.hutool.core.text.StrBuilder)",
            "cn.hutool.core.util.ClassLoaderUtil:void <clinit>()",
            "cn.hutool.core.util.ImageUtil:javax.imageio.ImageReader getReader(java.lang.String)",
            "cn.hutool.core.util.ObjectUtil:int length(java.lang.Object)",
            "cn.hutool.core.util.ObjectUtil:boolean contains(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.util.ReUtil:java.lang.String extractMulti(java.util.regex.Pattern,java.lang.String,java.lang.String)",
            "cn.hutool.core.util.ReUtil:java.lang.String extractMultiAndDelPre(java.util.regex.Pattern,cn.hutool.core.lang.Holder,java.lang.String)",
            "cn.hutool.core.util.ReUtil:java.lang.String replaceAll(java.lang.String,java.util.regex.Pattern,java.lang.String)",
            "cn.hutool.core.util.StrUtil:java.lang.String format(java.lang.CharSequence,java.util.Map)",
            "cn.hutool.core.util.XmlUtil:void mapToXml(org.w3c.dom.Document,org.w3c.dom.Element,java.util.Map)",
            "cn.hutool.cache.impl.CacheObjIterator:void nextValue()",
            "cn.hutool.cache.impl.FIFOCache:int pruneCache()",
            "cn.hutool.cache.impl.LFUCache:int pruneCache()",
            "cn.hutool.cache.impl.LRUCache:int pruneCache()",
            "cn.hutool.cache.impl.TimedCache:int pruneCache()",
            "cn.hutool.db.ds.c3p0.C3p0DSFactory:void destroy()",
            "cn.hutool.db.ds.dbcp.DbcpDSFactory:void destroy()",
            "cn.hutool.db.ds.druid.DruidDSFactory:void destroy()",
            "cn.hutool.db.ds.druid.DruidDSFactory:com.alibaba.druid.pool.DruidDataSource createDataSource(java.lang.String)",
            "cn.hutool.db.ds.hikari.HikariDSFactory:void destroy()",
            "cn.hutool.db.ds.pooled.PooledDataSource:void close()",
            "cn.hutool.db.ds.pooled.PooledDSFactory:void destroy()",
            "cn.hutool.db.ds.simple.SimpleDSFactory:void destroy()",
            "cn.hutool.db.ds.tomcat.TomcatDSFactory:void destroy()",
            "cn.hutool.db.nosql.mongo.MongoFactory:void closeAll()",
            "cn.hutool.db.sql.SqlBuilder:cn.hutool.db.sql.SqlBuilder insert(cn.hutool.db.Entity,cn.hutool.db.dialect.DialectName)",
            "cn.hutool.db.sql.SqlBuilder:cn.hutool.db.sql.SqlBuilder update(cn.hutool.db.Entity)",
            "cn.hutool.db.sql.SqlUtil:java.lang.String buildEqualsWhere(cn.hutool.db.Entity,java.util.List)",
            "cn.hutool.db.sql.SqlUtil:cn.hutool.db.sql.Condition[] buildConditions(cn.hutool.db.Entity)",
            "cn.hutool.db.sql.Wrapper:cn.hutool.db.Entity wrap(cn.hutool.db.Entity)",
            "cn.hutool.dfa.WordTree:void addWords(java.util.Collection)",
            "cn.hutool.dfa.WordTree:void addWords(java.lang.String[])",
            "cn.hutool.extra.servlet.ServletUtil:java.util.Map getParamMap(javax.servlet.ServletRequest)",
            "cn.hutool.extra.ssh.JschSessionPool:void closeAll()",
            "cn.hutool.extra.ssh.Sftp:boolean delDir(java.lang.String)",
            "cn.hutool.extra.ssh.Sftp:boolean containsIgnoreCase(java.util.List,java.lang.String)",
            "cn.hutool.extra.template.engine.velocity.VelocityUtil:void merge(org.apache.velocity.Template,org.apache.velocity.VelocityContext,java.io.Writer)",
            "cn.hutool.http.GlobalHeaders:cn.hutool.http.GlobalHeaders header(java.util.Map)",
            "cn.hutool.http.HTMLFilter:java.lang.String checkTags(java.lang.String)",
            "cn.hutool.http.HttpBase:java.lang.Object header(java.util.Map,boolean)",
            "cn.hutool.http.HttpBase:java.lang.Object addHeaders(java.util.Map)",
            "cn.hutool.http.HttpBase:java.lang.String toString()",
            "cn.hutool.http.HttpConnection:cn.hutool.http.HttpConnection header(java.util.Map,boolean)",
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest form(java.util.Map)",
            "cn.hutool.http.HttpRequest:void writeForm(java.io.OutputStream)",
            "cn.hutool.http.HttpRequest:void writeFileForm(java.io.OutputStream)",
            "cn.hutool.http.HttpRequest:void appendPart(java.lang.String,cn.hutool.core.io.resource.Resource,java.io.OutputStream)",
            "cn.hutool.http.HttpResponse:java.net.HttpCookie getCookie(java.lang.String)",
            "cn.hutool.http.HttpResponse:java.lang.String toString()",
            "cn.hutool.http.HttpUtil:java.lang.String toParams(java.util.Map,java.nio.charset.Charset)",
            "cn.hutool.http.HttpUtil:java.util.HashMap decodeParamMap(java.lang.String,java.lang.String)",
            "cn.hutool.http.webservice.SoapRequest:java.lang.String toSoapXml()",
            "cn.hutool.setting.GroupedMap:int size()",
            "cn.hutool.setting.GroupedMap:cn.hutool.setting.GroupedMap putAll(java.lang.String,java.util.Map)",
            "cn.hutool.setting.Setting:java.util.Properties toProperties()",
            "cn.hutool.setting.SettingLoader:void store(java.io.PrintWriter)",
            "cn.hutool.setting.SettingLoader:java.lang.String replaceVar(java.lang.String,java.lang.String)",
            "cn.hutool.cron.pattern.CronPattern:void parseGroupPattern(java.lang.String)",
            "cn.hutool.cron.pattern.matcher.BoolArrayValueMatcher:void <init>(java.util.List)",
            "cn.hutool.cron.pattern.matcher.ValueMatcherBuilder:java.util.List parseArray(java.lang.String,cn.hutool.cron.pattern.parser.ValueParser)",
            "cn.hutool.cron.Scheduler:cn.hutool.cron.Scheduler schedule(cn.hutool.setting.Setting)",
            "cn.hutool.json.JSONArray:void <init>(java.lang.Iterable)",
            "cn.hutool.json.JSONArray:void <init>(java.util.Collection)",
            "cn.hutool.json.JSONArray:void <init>(java.lang.Object,boolean)",
            "cn.hutool.json.JSONArray:boolean addAll(java.util.Collection)",
            "cn.hutool.json.JSONArray:boolean addAll(int,java.util.Collection)",
            "cn.hutool.json.JSONObject:void <init>(java.lang.Object,boolean)",
            "cn.hutool.json.JSONObject:cn.hutool.json.JSONArray toJSONArray(java.util.Collection)",
            "cn.hutool.json.JSONObject:void putAll(java.util.Map)",
            "cn.hutool.json.JSONObject:java.io.Writer write(java.io.Writer,int,int)",
            "cn.hutool.json.JSONObject:void populateMap(java.lang.Object)",
            "cn.hutool.json.JSONObjectIter$1:cn.hutool.json.JSONObject next()",
            "cn.hutool.json.XML:java.lang.String toXml(java.lang.Object,java.lang.String)",
            "cn.hutool.poi.excel.ExcelPicUtil:java.util.Map getPicMapXls(org.apache.poi.hssf.usermodel.HSSFWorkbook,int)",
            "cn.hutool.poi.excel.ExcelPicUtil:java.util.Map getPicMapXlsx(org.apache.poi.xssf.usermodel.XSSFWorkbook,int)",
            "cn.hutool.poi.excel.ExcelReader:java.util.List read(int,int,int,java.lang.Class)",
            "cn.hutool.poi.excel.ExcelReader:java.util.List aliasHeader(java.util.List)",
            "cn.hutool.poi.excel.ExcelWriter:cn.hutool.poi.excel.ExcelWriter write(java.lang.Iterable)",
            "cn.hutool.poi.excel.ExcelWriter:cn.hutool.poi.excel.ExcelWriter write(java.lang.Iterable,java.util.Comparator)",
            "cn.hutool.poi.excel.ExcelWriter:java.util.Collection aliasHeader(java.util.Collection)",
            "cn.hutool.poi.excel.RowUtil:void writeRow(org.apache.poi.ss.usermodel.Row,java.lang.Iterable,cn.hutool.poi.excel.StyleSet,boolean)",
            "cn.hutool.poi.excel.sax.Excel07SaxReader:cn.hutool.poi.excel.sax.Excel07SaxReader read(org.apache.poi.openxml4j.opc.OPCPackage,int)"
        ]
    },
    "cn.hutool.json.JSONObjectIter$1:java.lang.Object next()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.BeanUtil:java.util.Map beanToMap(java.lang.Object,java.util.Map,boolean,cn.hutool.core.lang.Editor)",
            "cn.hutool.core.bean.copier.BeanCopier:void valueProviderToBean(cn.hutool.core.bean.copier.ValueProvider,java.lang.Object)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection union(java.util.Collection,java.util.Collection)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection intersection(java.util.Collection,java.util.Collection)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection disjunction(java.util.Collection,java.util.Collection)",
            "cn.hutool.core.collection.CollUtil:boolean containsAny(java.util.Collection,java.util.Collection)",
            "cn.hutool.core.collection.CollUtil:java.util.HashSet newHashSet(boolean,java.util.Iterator)",
            "cn.hutool.core.collection.CollUtil:java.util.List list(boolean,java.util.Iterator)",
            "cn.hutool.core.collection.CollUtil:java.util.List split(java.util.Collection,int)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection filter(java.util.Collection,cn.hutool.core.lang.Editor)",
            "cn.hutool.core.collection.CollUtil:java.util.List filter(java.util.List,cn.hutool.core.lang.Editor)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection filter(java.util.Collection,cn.hutool.core.lang.Filter)",
            "cn.hutool.core.collection.CollUtil:java.util.List filter(java.util.List,cn.hutool.core.lang.Filter)",
            "cn.hutool.core.collection.CollUtil:java.util.List extract(java.lang.Iterable,cn.hutool.core.lang.Editor)",
            "cn.hutool.core.collection.CollUtil:java.lang.Object findOne(java.lang.Iterable,cn.hutool.core.lang.Filter)",
            "cn.hutool.core.collection.CollUtil:int count(java.lang.Iterable,cn.hutool.core.lang.Matcher)",
            "cn.hutool.core.collection.CollUtil:java.util.TreeSet toTreeSet(java.util.Collection,java.util.Comparator)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection addAll(java.util.Collection,java.lang.Object,java.lang.reflect.Type)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection addAll(java.util.Collection,java.util.Iterator)",
            "cn.hutool.core.collection.CollUtil:java.util.List addAllIfNotContains(java.util.List,java.util.List)",
            "cn.hutool.core.collection.CollUtil:java.util.ArrayList valuesOfKeys(java.util.Map,java.util.Iterator)",
            "cn.hutool.core.collection.CollUtil:java.util.LinkedHashMap sortToMap(java.util.Collection,java.util.Comparator)",
            "cn.hutool.core.collection.CollUtil:void forEach(java.util.Iterator,cn.hutool.core.collection.CollUtil$Consumer)",
            "cn.hutool.core.collection.CollUtil:void forEach(java.util.Map,cn.hutool.core.collection.CollUtil$KVConsumer)",
            "cn.hutool.core.collection.CollUtil:java.util.List group(java.util.Collection,cn.hutool.core.collection.CollUtil$Hash)",
            "cn.hutool.core.collection.ConcurrentHashSet:void <init>(java.lang.Iterable)",
            "cn.hutool.core.collection.CopiedIter:void <init>(java.util.Iterator)",
            "cn.hutool.core.collection.CopiedIter:java.lang.Object next()",
            "cn.hutool.core.collection.IteratorEnumeration:java.lang.Object nextElement()",
            "cn.hutool.core.collection.IterUtil:boolean hasNull(java.util.Iterator)",
            "cn.hutool.core.collection.IterUtil:boolean isAllNull(java.util.Iterator)",
            "cn.hutool.core.collection.IterUtil:java.util.Map countMap(java.util.Iterator)",
            "cn.hutool.core.collection.IterUtil:java.util.Map fieldValueMap(java.util.Iterator,java.lang.String)",
            "cn.hutool.core.collection.IterUtil:java.util.Map fieldValueAsMap(java.util.Iterator,java.lang.String,java.lang.String)",
            "cn.hutool.core.collection.IterUtil:java.util.List fieldValueList(java.util.Iterator,java.lang.String)",
            "cn.hutool.core.collection.IterUtil:java.lang.String join(java.util.Iterator,java.lang.CharSequence,java.lang.String,java.lang.String)",
            "cn.hutool.core.collection.IterUtil:java.util.HashMap toMap(java.lang.Iterable)",
            "cn.hutool.core.collection.IterUtil:java.util.Map toMap(java.util.Iterator,java.util.Iterator)",
            "cn.hutool.core.collection.IterUtil:java.util.List toList(java.util.Iterator)",
            "cn.hutool.core.collection.IterUtil:java.lang.Object getFirst(java.util.Iterator)",
            "cn.hutool.core.comparator.ComparatorChain:int compare(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.convert.BasicType:void <clinit>()",
            "cn.hutool.core.convert.impl.ArrayConverter:java.lang.Object convertObjectToArray(java.lang.Object)",
            "cn.hutool.core.convert.impl.MapConverter:void convertMapToMap(java.util.Map,java.util.Map)",
            "cn.hutool.core.date.format.FastDateParser$TimeZoneStrategy:void <init>(java.util.Locale)",
            "cn.hutool.core.date.format.FastDateParser:java.util.Map appendDisplayNames(java.util.Calendar,java.util.Locale,int,java.lang.StringBuilder)",
            "cn.hutool.core.io.file.FileAppender:cn.hutool.core.io.file.FileAppender flush()",
            "cn.hutool.core.io.file.FileWriter:java.io.File writeLines(java.util.Collection,cn.hutool.core.io.file.LineSeparator,boolean)",
            "cn.hutool.core.io.file.FileWriter:java.io.File writeMap(java.util.Map,cn.hutool.core.io.file.LineSeparator,java.lang.String,boolean)",
            "cn.hutool.core.io.FileTypeUtil:java.lang.String getType(java.lang.String)",
            "cn.hutool.core.io.FileUtil:java.util.List listFileNames(java.lang.String)",
            "cn.hutool.core.io.resource.MultiFileResource:cn.hutool.core.io.resource.MultiFileResource add(java.util.Collection)",
            "cn.hutool.core.io.watch.watchers.WatcherChain:void onCreate(java.nio.file.WatchEvent,java.nio.file.Path)",
            "cn.hutool.core.io.watch.watchers.WatcherChain:void onModify(java.nio.file.WatchEvent,java.nio.file.Path)",
            "cn.hutool.core.io.watch.watchers.WatcherChain:void onDelete(java.nio.file.WatchEvent,java.nio.file.Path)",
            "cn.hutool.core.io.watch.watchers.WatcherChain:void onOverflow(java.nio.file.WatchEvent,java.nio.file.Path)",
            "cn.hutool.core.io.watch.WatchMonitor:void watch(cn.hutool.core.io.watch.Watcher)",
            "cn.hutool.core.lang.ClassScaner:java.util.Set scan()",
            "cn.hutool.core.lang.ClassScaner:void scanJar(java.util.jar.JarFile)",
            "cn.hutool.core.lang.ConsistentHash:void <init>(int,java.util.Collection)",
            "cn.hutool.core.lang.ConsistentHash:void <init>(cn.hutool.core.lang.ConsistentHash$HashFunc,int,java.util.Collection)",
            "cn.hutool.core.lang.Dict:void removeEqual(cn.hutool.core.lang.Dict,java.lang.String[])",
            "cn.hutool.core.lang.JarClassLoader:void loadJar(java.net.URLClassLoader,java.io.File)",
            "cn.hutool.core.lang.JarClassLoader:cn.hutool.core.lang.JarClassLoader addJar(java.io.File)",
            "cn.hutool.core.lang.SyncFinisher:void start()",
            "cn.hutool.core.lang.WeightRandom:void <init>(java.lang.Iterable)",
            "cn.hutool.core.map.CustomKeyLinkedMap:void putAll(java.util.Map)",
            "cn.hutool.core.map.CustomKeyMap:void putAll(java.util.Map)",
            "cn.hutool.core.map.MapUtil:java.util.HashMap of(java.lang.Object[])",
            "cn.hutool.core.map.MapUtil:java.util.Map toListMap(java.lang.Iterable)",
            "cn.hutool.core.map.MapUtil:java.util.List toMapList(java.util.Map)",
            "cn.hutool.core.map.MapUtil:java.lang.String join(java.util.Map,java.lang.String,java.lang.String,boolean)",
            "cn.hutool.core.map.MapUtil:java.util.Map filter(java.util.Map,cn.hutool.core.lang.Editor)",
            "cn.hutool.core.map.MapUtil:java.util.Map filter(java.util.Map,cn.hutool.core.lang.Filter)",
            "cn.hutool.core.map.MapUtil:java.util.Map inverse(java.util.Map)",
            "cn.hutool.core.text.csv.CsvRow:java.util.Map getFieldMap()",
            "cn.hutool.core.text.csv.CsvRow:java.lang.String toString()",
            "cn.hutool.core.text.csv.CsvWriter:cn.hutool.core.text.csv.CsvWriter write(java.util.Collection)",
            "cn.hutool.core.text.replacer.ReplacerChain:int replace(java.lang.CharSequence,int,cn.hutool.core.text.StrBuilder)",
            "cn.hutool.core.util.ClassLoaderUtil:void <clinit>()",
            "cn.hutool.core.util.ImageUtil:javax.imageio.ImageReader getReader(java.lang.String)",
            "cn.hutool.core.util.ObjectUtil:int length(java.lang.Object)",
            "cn.hutool.core.util.ObjectUtil:boolean contains(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.util.ReUtil:java.lang.String extractMulti(java.util.regex.Pattern,java.lang.String,java.lang.String)",
            "cn.hutool.core.util.ReUtil:java.lang.String extractMultiAndDelPre(java.util.regex.Pattern,cn.hutool.core.lang.Holder,java.lang.String)",
            "cn.hutool.core.util.ReUtil:java.lang.String replaceAll(java.lang.String,java.util.regex.Pattern,java.lang.String)",
            "cn.hutool.core.util.StrUtil:java.lang.String format(java.lang.CharSequence,java.util.Map)",
            "cn.hutool.core.util.XmlUtil:void mapToXml(org.w3c.dom.Document,org.w3c.dom.Element,java.util.Map)",
            "cn.hutool.cache.impl.CacheObjIterator:void nextValue()",
            "cn.hutool.cache.impl.FIFOCache:int pruneCache()",
            "cn.hutool.cache.impl.LFUCache:int pruneCache()",
            "cn.hutool.cache.impl.LRUCache:int pruneCache()",
            "cn.hutool.cache.impl.TimedCache:int pruneCache()",
            "cn.hutool.db.ds.c3p0.C3p0DSFactory:void destroy()",
            "cn.hutool.db.ds.dbcp.DbcpDSFactory:void destroy()",
            "cn.hutool.db.ds.druid.DruidDSFactory:void destroy()",
            "cn.hutool.db.ds.druid.DruidDSFactory:com.alibaba.druid.pool.DruidDataSource createDataSource(java.lang.String)",
            "cn.hutool.db.ds.hikari.HikariDSFactory:void destroy()",
            "cn.hutool.db.ds.pooled.PooledDataSource:void close()",
            "cn.hutool.db.ds.pooled.PooledDSFactory:void destroy()",
            "cn.hutool.db.ds.simple.SimpleDSFactory:void destroy()",
            "cn.hutool.db.ds.tomcat.TomcatDSFactory:void destroy()",
            "cn.hutool.db.nosql.mongo.MongoFactory:void closeAll()",
            "cn.hutool.db.sql.SqlBuilder:cn.hutool.db.sql.SqlBuilder insert(cn.hutool.db.Entity,cn.hutool.db.dialect.DialectName)",
            "cn.hutool.db.sql.SqlBuilder:cn.hutool.db.sql.SqlBuilder update(cn.hutool.db.Entity)",
            "cn.hutool.db.sql.SqlUtil:java.lang.String buildEqualsWhere(cn.hutool.db.Entity,java.util.List)",
            "cn.hutool.db.sql.SqlUtil:cn.hutool.db.sql.Condition[] buildConditions(cn.hutool.db.Entity)",
            "cn.hutool.db.sql.Wrapper:cn.hutool.db.Entity wrap(cn.hutool.db.Entity)",
            "cn.hutool.dfa.WordTree:void addWords(java.util.Collection)",
            "cn.hutool.dfa.WordTree:void addWords(java.lang.String[])",
            "cn.hutool.extra.servlet.ServletUtil:java.util.Map getParamMap(javax.servlet.ServletRequest)",
            "cn.hutool.extra.ssh.JschSessionPool:void closeAll()",
            "cn.hutool.extra.ssh.Sftp:boolean delDir(java.lang.String)",
            "cn.hutool.extra.ssh.Sftp:boolean containsIgnoreCase(java.util.List,java.lang.String)",
            "cn.hutool.extra.template.engine.velocity.VelocityUtil:void merge(org.apache.velocity.Template,org.apache.velocity.VelocityContext,java.io.Writer)",
            "cn.hutool.http.GlobalHeaders:cn.hutool.http.GlobalHeaders header(java.util.Map)",
            "cn.hutool.http.HTMLFilter:java.lang.String checkTags(java.lang.String)",
            "cn.hutool.http.HttpBase:java.lang.Object header(java.util.Map,boolean)",
            "cn.hutool.http.HttpBase:java.lang.Object addHeaders(java.util.Map)",
            "cn.hutool.http.HttpBase:java.lang.String toString()",
            "cn.hutool.http.HttpConnection:cn.hutool.http.HttpConnection header(java.util.Map,boolean)",
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest form(java.util.Map)",
            "cn.hutool.http.HttpRequest:void writeForm(java.io.OutputStream)",
            "cn.hutool.http.HttpRequest:void writeFileForm(java.io.OutputStream)",
            "cn.hutool.http.HttpRequest:void appendPart(java.lang.String,cn.hutool.core.io.resource.Resource,java.io.OutputStream)",
            "cn.hutool.http.HttpResponse:java.net.HttpCookie getCookie(java.lang.String)",
            "cn.hutool.http.HttpResponse:java.lang.String toString()",
            "cn.hutool.http.HttpUtil:java.lang.String toParams(java.util.Map,java.nio.charset.Charset)",
            "cn.hutool.http.HttpUtil:java.util.HashMap decodeParamMap(java.lang.String,java.lang.String)",
            "cn.hutool.http.webservice.SoapRequest:java.lang.String toSoapXml()",
            "cn.hutool.setting.GroupedMap:int size()",
            "cn.hutool.setting.GroupedMap:cn.hutool.setting.GroupedMap putAll(java.lang.String,java.util.Map)",
            "cn.hutool.setting.Setting:java.util.Properties toProperties()",
            "cn.hutool.setting.SettingLoader:void store(java.io.PrintWriter)",
            "cn.hutool.setting.SettingLoader:java.lang.String replaceVar(java.lang.String,java.lang.String)",
            "cn.hutool.cron.pattern.CronPattern:void parseGroupPattern(java.lang.String)",
            "cn.hutool.cron.pattern.matcher.BoolArrayValueMatcher:void <init>(java.util.List)",
            "cn.hutool.cron.pattern.matcher.ValueMatcherBuilder:java.util.List parseArray(java.lang.String,cn.hutool.cron.pattern.parser.ValueParser)",
            "cn.hutool.cron.Scheduler:cn.hutool.cron.Scheduler schedule(cn.hutool.setting.Setting)",
            "cn.hutool.json.JSONArray:void <init>(java.lang.Iterable)",
            "cn.hutool.json.JSONArray:void <init>(java.util.Collection)",
            "cn.hutool.json.JSONArray:void <init>(java.lang.Object,boolean)",
            "cn.hutool.json.JSONArray:boolean addAll(java.util.Collection)",
            "cn.hutool.json.JSONArray:boolean addAll(int,java.util.Collection)",
            "cn.hutool.json.JSONObject:void <init>(java.lang.Object,boolean)",
            "cn.hutool.json.JSONObject:cn.hutool.json.JSONArray toJSONArray(java.util.Collection)",
            "cn.hutool.json.JSONObject:void putAll(java.util.Map)",
            "cn.hutool.json.JSONObject:java.io.Writer write(java.io.Writer,int,int)",
            "cn.hutool.json.JSONObject:void populateMap(java.lang.Object)",
            "cn.hutool.json.JSONObjectIter$1:cn.hutool.json.JSONObject next()",
            "cn.hutool.json.XML:java.lang.String toXml(java.lang.Object,java.lang.String)",
            "cn.hutool.poi.excel.ExcelPicUtil:java.util.Map getPicMapXls(org.apache.poi.hssf.usermodel.HSSFWorkbook,int)",
            "cn.hutool.poi.excel.ExcelPicUtil:java.util.Map getPicMapXlsx(org.apache.poi.xssf.usermodel.XSSFWorkbook,int)",
            "cn.hutool.poi.excel.ExcelReader:java.util.List read(int,int,int,java.lang.Class)",
            "cn.hutool.poi.excel.ExcelReader:java.util.List aliasHeader(java.util.List)",
            "cn.hutool.poi.excel.ExcelWriter:cn.hutool.poi.excel.ExcelWriter write(java.lang.Iterable)",
            "cn.hutool.poi.excel.ExcelWriter:cn.hutool.poi.excel.ExcelWriter write(java.lang.Iterable,java.util.Comparator)",
            "cn.hutool.poi.excel.ExcelWriter:java.util.Collection aliasHeader(java.util.Collection)",
            "cn.hutool.poi.excel.RowUtil:void writeRow(org.apache.poi.ss.usermodel.Row,java.lang.Iterable,cn.hutool.poi.excel.StyleSet,boolean)",
            "cn.hutool.poi.excel.sax.Excel07SaxReader:cn.hutool.poi.excel.sax.Excel07SaxReader read(org.apache.poi.openxml4j.opc.OPCPackage,int)"
        ]
    },
    "cn.hutool.core.bean.DynaBean:void <init>(java.lang.Class,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.DynaBean:cn.hutool.core.bean.DynaBean create(java.lang.Class,java.lang.Object[])"
        ]
    },
    "cn.hutool.core.collection.CollUtil:java.util.Collection create(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.impl.CollectionConverter:java.util.Collection convertInternal(java.lang.Object)"
        ]
    },
    "cn.hutool.core.convert.ConverterRegistry:cn.hutool.core.convert.ConverterRegistry putCustom(java.lang.reflect.Type,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.exceptions.ExceptionUtil:java.lang.Throwable wrap(java.lang.Throwable,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.poi.excel.sax.Excel07SaxReader:cn.hutool.poi.excel.sax.Excel07SaxReader read(java.io.InputStream,int)",
            "cn.hutool.poi.excel.sax.Excel07SaxReader:cn.hutool.poi.excel.sax.Excel07SaxReader read(org.apache.poi.openxml4j.opc.OPCPackage,int)"
        ]
    },
    "cn.hutool.core.map.MapUtil:java.util.Map createMap(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.collection.CollUtil:java.util.Map createMap(java.lang.Class)",
            "cn.hutool.core.convert.impl.MapConverter:java.util.Map convertInternal(java.lang.Object)"
        ]
    },
    "cn.hutool.core.util.ReflectUtil:java.lang.Object newInstanceIfPossible(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.impl.BeanConverter:java.lang.Object convertInternal(java.lang.Object)",
            "cn.hutool.db.handler.HandleHelper:java.lang.Object handleRow(int,java.sql.ResultSetMetaData,java.sql.ResultSet,java.lang.Class)",
            "cn.hutool.cron.task.InvokeTask:void <init>(java.lang.String)"
        ]
    },
    "cn.hutool.aop.proxy.ProxyFactory:java.lang.Object createProxy(java.lang.Object,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.aop.ProxyUtil:java.lang.Object proxy(java.lang.Object,java.lang.Class)"
        ]
    },
    "cn.hutool.core.util.ClassUtil:java.lang.reflect.Method getDeclaredMethod(java.lang.Class,java.lang.String,java.lang.Class[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.lang.JarClassLoader:void loadJar(java.net.URLClassLoader,java.io.File)",
            "cn.hutool.core.util.ClassUtil:java.lang.reflect.Method getDeclaredMethodOfObj(java.lang.Object,java.lang.String,java.lang.Object[])",
            "cn.hutool.core.util.ClassUtil:java.lang.Object invoke(java.lang.String,java.lang.String,boolean,java.lang.Object[])"
        ]
    },
    "cn.hutool.core.util.ReflectUtil:java.lang.reflect.Method getMethodOfObj(java.lang.Object,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.annotation.AnnotationUtil:java.lang.Object getAnnotationValue(java.lang.reflect.AnnotatedElement,java.lang.Class,java.lang.String)",
            "cn.hutool.core.util.ReflectUtil:java.lang.Object invoke(java.lang.Object,java.lang.String,java.lang.Object[])"
        ]
    },
    "cn.hutool.core.util.ClassUtil:boolean isSimpleTypeOrArray(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.date.format.FastDateParser$StrategyParser:cn.hutool.core.date.format.FastDateParser$StrategyAndWidth letterPattern(char)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.date.format.FastDateParser$StrategyParser:cn.hutool.core.date.format.FastDateParser$StrategyAndWidth getNextStrategy()"
        ]
    },
    "cn.hutool.core.io.FileUtil:java.io.File writeUtf8Lines(java.util.Collection,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.FileUtil:java.io.File appendUtf8Lines(java.util.Collection,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.http.HttpBase:java.lang.String header(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HttpBase:java.lang.String header(cn.hutool.http.Header)"
        ]
    },
    "cn.hutool.core.bean.copier.provider.BeanValueProvider:void <init>(java.lang.Object,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.copier.BeanCopier:void beanToBean(java.lang.Object,java.lang.Object)"
        ]
    },
    "cn.hutool.core.bean.BeanPath:java.lang.Object get(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.BeanResolver:java.lang.Object resolve()",
            "cn.hutool.core.bean.BeanUtil:java.lang.Object getProperty(java.lang.Object,java.lang.String)",
            "cn.hutool.json.JSONArray:java.lang.Object getByPath(java.lang.String)",
            "cn.hutool.json.JSONObject:java.lang.Object getByPath(java.lang.String)"
        ]
    },
    "cn.hutool.core.bean.BeanPath:void set(java.lang.Object,java.util.List,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.BeanPath:void set(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.bean.BeanPath:void set(java.lang.Object,java.util.List,java.lang.Object)"
        ]
    },
    "cn.hutool.core.convert.impl.NumberConverter:java.lang.Object convertInternal(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.AbstractConverter:java.lang.Object convert(java.lang.Object,java.lang.Object)"
        ]
    },
    "cn.hutool.core.getter.OptNullBasicTypeGetter:java.lang.String getStr(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.getter.OptNullBasicTypeFromStringGetter:java.lang.Integer getInt(java.lang.Object,java.lang.Integer)",
            "cn.hutool.core.getter.OptNullBasicTypeFromStringGetter:java.lang.Short getShort(java.lang.Object,java.lang.Short)",
            "cn.hutool.core.getter.OptNullBasicTypeFromStringGetter:java.lang.Boolean getBool(java.lang.Object,java.lang.Boolean)",
            "cn.hutool.core.getter.OptNullBasicTypeFromStringGetter:java.lang.Long getLong(java.lang.Object,java.lang.Long)",
            "cn.hutool.core.getter.OptNullBasicTypeFromStringGetter:java.lang.Character getChar(java.lang.Object,java.lang.Character)",
            "cn.hutool.core.getter.OptNullBasicTypeFromStringGetter:java.lang.Float getFloat(java.lang.Object,java.lang.Float)",
            "cn.hutool.core.getter.OptNullBasicTypeFromStringGetter:java.lang.Double getDouble(java.lang.Object,java.lang.Double)",
            "cn.hutool.core.getter.OptNullBasicTypeFromStringGetter:java.lang.Byte getByte(java.lang.Object,java.lang.Byte)",
            "cn.hutool.core.getter.OptNullBasicTypeFromStringGetter:java.math.BigDecimal getBigDecimal(java.lang.Object,java.math.BigDecimal)",
            "cn.hutool.core.getter.OptNullBasicTypeFromStringGetter:java.math.BigInteger getBigInteger(java.lang.Object,java.math.BigInteger)",
            "cn.hutool.core.getter.OptNullBasicTypeFromStringGetter:java.lang.Enum getEnum(java.lang.Class,java.lang.Object,java.lang.Enum)",
            "cn.hutool.core.getter.OptNullBasicTypeFromStringGetter:java.util.Date getDate(java.lang.Object,java.util.Date)",
            "cn.hutool.extra.servlet.multipart.UploadSetting:void load(java.lang.String)",
            "cn.hutool.setting.AbsSetting:java.lang.String getWithLog(java.lang.String)",
            "cn.hutool.json.JSONArray:cn.hutool.json.JSONObject toJSONObject(cn.hutool.json.JSONArray)"
        ]
    },
    "cn.hutool.json.JSONGetter:java.lang.String getStr(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.getter.OptNullBasicTypeGetter:java.lang.String getStr(java.lang.Object)"
        ]
    },
    "cn.hutool.core.getter.OptNullBasicTypeGetter:java.lang.Integer getInt(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.nosql.mongo.MongoDS:com.mongodb.MongoClientOptions$Builder buildMongoClientOptions(com.mongodb.MongoClientOptions$Builder,java.lang.String)",
            "cn.hutool.extra.servlet.multipart.UploadSetting:void load(java.lang.String)"
        ]
    },
    "cn.hutool.core.getter.OptNullBasicTypeGetter:java.lang.Short getShort(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.getter.OptNullBasicTypeGetter:java.lang.Boolean getBool(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.servlet.multipart.UploadSetting:void load(java.lang.String)"
        ]
    },
    "cn.hutool.core.getter.OptNullBasicTypeGetter:java.lang.Long getLong(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.getter.OptNullBasicTypeGetter:java.lang.Character getChar(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.getter.OptNullBasicTypeGetter:java.lang.Float getFloat(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.getter.OptNullBasicTypeGetter:java.lang.Double getDouble(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.getter.OptNullBasicTypeGetter:java.lang.Byte getByte(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.getter.OptNullBasicTypeGetter:java.math.BigDecimal getBigDecimal(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.getter.OptNullBasicTypeGetter:java.math.BigInteger getBigInteger(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.getter.OptNullBasicTypeGetter:java.util.Date getDate(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.json.JSONGetter:java.lang.Object get(java.lang.Object,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.annotation.AnnotationUtil:java.lang.'annotation'.Annotation getAnnotation(java.lang.reflect.AnnotatedElement,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.annotation.AnnotationUtil:java.lang.Object getAnnotationValue(java.lang.reflect.AnnotatedElement,java.lang.Class,java.lang.String)",
            "cn.hutool.core.annotation.AnnotationUtil:java.util.Map getAnnotationValueMap(java.lang.reflect.AnnotatedElement,java.lang.Class)"
        ]
    },
    "cn.hutool.core.bean.BeanUtil:java.beans.PropertyDescriptor getPropertyDescriptor(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.bean.copier.provider.BeanValueProvider:java.lang.Object value(java.lang.Object,java.lang.reflect.Type)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.copier.BeanCopier:void valueProviderToBean(cn.hutool.core.bean.copier.ValueProvider,java.lang.Object)"
        ]
    },
    "cn.hutool.core.bean.copier.provider.MapValueProvider:java.lang.Object value(java.lang.Object,java.lang.reflect.Type)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.copier.BeanCopier:void valueProviderToBean(cn.hutool.core.bean.copier.ValueProvider,java.lang.Object)"
        ]
    },
    "cn.hutool.core.bean.DynaBean:java.lang.Object safeGet(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ArrayUtil:java.lang.Object[] filter(java.lang.Object[],cn.hutool.core.lang.Editor)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ArrayUtil:java.lang.Object[] removeNull(java.lang.Object[])",
            "cn.hutool.core.util.ArrayUtil:java.lang.String[] nullToEmpty(java.lang.String[])"
        ]
    },
    "cn.hutool.core.io.file.FileCopier:void internalCopyDirContent(java.io.File,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.file.FileCopier:java.io.File copy()",
            "cn.hutool.core.io.file.FileCopier:void internalCopyDirContent(java.io.File,java.io.File)"
        ]
    },
    "cn.hutool.core.io.file.FileCopier:void internalCopyFile(java.io.File,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.file.FileCopier:java.io.File copy()",
            "cn.hutool.core.io.file.FileCopier:void internalCopyDirContent(java.io.File,java.io.File)"
        ]
    },
    "cn.hutool.core.lang.ClassScaner:void addIfAccept(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.lang.ClassScaner:void scanJar(java.util.jar.JarFile)",
            "cn.hutool.core.lang.ClassScaner:void addIfAccept(java.lang.String)"
        ]
    },
    "cn.hutool.core.util.ArrayUtil:java.lang.Object[] filter(java.lang.Object[],cn.hutool.core.lang.Filter)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.BeanUtil:java.beans.PropertyDescriptor[] getPropertyDescriptors(java.lang.Class)",
            "cn.hutool.core.util.ArrayUtil:java.lang.CharSequence[] removeEmpty(java.lang.CharSequence[])",
            "cn.hutool.core.util.ArrayUtil:java.lang.CharSequence[] removeBlank(java.lang.CharSequence[])"
        ]
    },
    "cn.hutool.core.util.ClassUtil:java.util.List getPublicMethods(java.lang.Class,cn.hutool.core.lang.Filter)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ClassUtil:java.util.List getPublicMethods(java.lang.Class,java.lang.reflect.Method[])",
            "cn.hutool.core.util.ClassUtil:java.util.List getPublicMethods(java.lang.Class,java.lang.String[])"
        ]
    },
    "cn.hutool.core.util.ReflectUtil:java.lang.reflect.Method[] getMethods(java.lang.Class,cn.hutool.core.lang.Filter)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.annotation.AnnotationUtil:java.util.Map getAnnotationValueMap(java.lang.reflect.AnnotatedElement,java.lang.Class)"
        ]
    },
    "cn.hutool.core.convert.ConverterRegistry:cn.hutool.core.convert.Converter getConverter(java.lang.reflect.Type,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.ConverterRegistry:java.lang.Object convert(java.lang.reflect.Type,java.lang.Object,java.lang.Object,boolean)"
        ]
    },
    "cn.hutool.core.date.format.FastDateParser$PatternStrategy:boolean parse(cn.hutool.core.date.format.FastDateParser,java.util.Calendar,java.lang.String,java.text.ParsePosition,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.date.format.FastDateParser:boolean parse(java.lang.String,java.text.ParsePosition,java.util.Calendar)"
        ]
    },
    "cn.hutool.core.exceptions.ExceptionUtil:java.lang.String stacktraceToString(java.lang.Throwable,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.exceptions.ExceptionUtil:java.lang.String stacktraceToString(java.lang.Throwable)"
        ]
    },
    "cn.hutool.core.bean.BeanDescCache:cn.hutool.core.bean.BeanDesc getBeanDesc(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.BeanUtil:cn.hutool.core.bean.BeanDesc getBeanDesc(java.lang.Class)"
        ]
    },
    "cn.hutool.core.bean.BeanInfoCache:java.util.Map getPropertyDescriptorMap(java.lang.Class,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.BeanUtil:java.util.Map getPropertyDescriptorMap(java.lang.Class,boolean)"
        ]
    },
    "cn.hutool.core.lang.PatternPool:java.util.regex.Pattern get(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.lang.PatternPool:java.util.regex.Pattern get(java.lang.String)",
            "cn.hutool.core.util.ReUtil:java.lang.String get(java.lang.String,java.lang.String,int)",
            "cn.hutool.core.util.ReUtil:java.lang.String extractMulti(java.lang.String,java.lang.String,java.lang.String)",
            "cn.hutool.core.util.ReUtil:java.lang.String extractMultiAndDelPre(java.lang.String,cn.hutool.core.lang.Holder,java.lang.String)",
            "cn.hutool.core.util.ReUtil:java.lang.String delFirst(java.lang.String,java.lang.String)",
            "cn.hutool.core.util.ReUtil:java.lang.String delAll(java.lang.String,java.lang.String)",
            "cn.hutool.core.util.ReUtil:java.lang.String delPre(java.lang.String,java.lang.String)",
            "cn.hutool.core.util.ReUtil:int count(java.lang.String,java.lang.String)",
            "cn.hutool.core.util.ReUtil:boolean contains(java.lang.String,java.lang.String)",
            "cn.hutool.core.util.ReUtil:boolean isMatch(java.lang.String,java.lang.String)"
        ]
    },
    "cn.hutool.core.util.ReflectUtil:java.lang.reflect.Constructor[] getConstructors(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ReflectUtil:java.lang.reflect.Constructor getConstructor(java.lang.Class,java.lang.Class[])",
            "cn.hutool.core.util.ReflectUtil:java.lang.Object newInstanceIfPossible(java.lang.Class)"
        ]
    },
    "cn.hutool.core.util.ReflectUtil:java.lang.reflect.Field[] getFields(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.BeanDesc:cn.hutool.core.bean.BeanDesc init()",
            "cn.hutool.core.bean.BeanUtil:java.lang.Object trimStrFields(java.lang.Object,java.lang.String[])",
            "cn.hutool.core.util.ReflectUtil:java.lang.reflect.Field getField(java.lang.Class,java.lang.String)"
        ]
    },
    "cn.hutool.core.util.ReflectUtil:java.lang.reflect.Method[] getMethods(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.BeanDesc:cn.hutool.core.bean.BeanDesc$PropDesc createProp(java.lang.reflect.Field)",
            "cn.hutool.core.util.ClassUtil:java.lang.reflect.Method[] getDeclaredMethods(java.lang.Class)",
            "cn.hutool.core.util.ReflectUtil:java.lang.reflect.Method getMethod(java.lang.Class,boolean,java.lang.String,java.lang.Class[])",
            "cn.hutool.core.util.ReflectUtil:java.util.Set getMethodNames(java.lang.Class)",
            "cn.hutool.core.util.ReflectUtil:java.lang.reflect.Method[] getMethods(java.lang.Class,cn.hutool.core.lang.Filter)"
        ]
    },
    "cn.hutool.setting.profile.GlobalProfile:cn.hutool.setting.profile.Profile setProfile(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.system.SystemUtil:cn.hutool.system.JvmSpecInfo getJvmSpecInfo()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.system.SystemUtil:void dumpSystemInfo(java.io.PrintWriter)"
        ]
    },
    "cn.hutool.system.SystemUtil:cn.hutool.system.JvmInfo getJvmInfo()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.system.SystemUtil:void dumpSystemInfo(java.io.PrintWriter)"
        ]
    },
    "cn.hutool.system.SystemUtil:cn.hutool.system.JavaSpecInfo getJavaSpecInfo()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.system.SystemUtil:void dumpSystemInfo(java.io.PrintWriter)"
        ]
    },
    "cn.hutool.system.SystemUtil:cn.hutool.system.JavaInfo getJavaInfo()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.system.SystemUtil:void dumpSystemInfo(java.io.PrintWriter)"
        ]
    },
    "cn.hutool.system.SystemUtil:cn.hutool.system.JavaRuntimeInfo getJavaRuntimeInfo()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.system.SystemUtil:void dumpSystemInfo(java.io.PrintWriter)"
        ]
    },
    "cn.hutool.system.SystemUtil:cn.hutool.system.OsInfo getOsInfo()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.system.SystemUtil:void dumpSystemInfo(java.io.PrintWriter)"
        ]
    },
    "cn.hutool.system.SystemUtil:cn.hutool.system.UserInfo getUserInfo()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.system.SystemUtil:void dumpSystemInfo(java.io.PrintWriter)"
        ]
    },
    "cn.hutool.system.SystemUtil:cn.hutool.system.HostInfo getHostInfo()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.system.SystemUtil:void dumpSystemInfo(java.io.PrintWriter)"
        ]
    },
    "cn.hutool.system.SystemUtil:cn.hutool.system.RuntimeInfo getRuntimeInfo()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.system.SystemUtil:void dumpSystemInfo(java.io.PrintWriter)"
        ]
    },
    "cn.hutool.core.map.MapUtil:java.lang.String getStr(java.util.Map,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.map.MapUtil:java.lang.Integer getInt(java.util.Map,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.map.MapUtil:java.lang.Double getDouble(java.util.Map,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.map.MapUtil:java.lang.Float getFloat(java.util.Map,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.map.MapUtil:java.lang.Short getShort(java.util.Map,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.map.MapUtil:java.lang.Boolean getBool(java.util.Map,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.map.MapUtil:java.lang.Character getChar(java.util.Map,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.map.MapUtil:java.lang.Long getLong(java.util.Map,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.map.MapUtil:java.util.Date getDate(java.util.Map,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.IdcardUtil:boolean isValidCard(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.IdcardUtil:java.lang.String[] isValidCard10(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.IdcardUtil:boolean isValidCard(java.lang.String)"
        ]
    },
    "cn.hutool.cache.impl.AbstractCache:java.lang.Object get(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.cache.file.AbstractFileCache:byte[] getFileBytes(java.io.File)"
        ]
    },
    "cn.hutool.db.handler.BeanHandler:java.lang.Object handle(java.sql.ResultSet)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.sql.SqlExecutor:java.lang.Object query(java.sql.PreparedStatement,cn.hutool.db.handler.RsHandler,java.lang.Object[])"
        ]
    },
    "cn.hutool.db.sql.NamedSql:void <init>(java.lang.String,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.sql.SqlExecutor:int execute(java.sql.Connection,java.lang.String,java.util.Map)",
            "cn.hutool.db.sql.SqlExecutor:java.lang.Long executeForGeneratedKey(java.sql.Connection,java.lang.String,java.util.Map)",
            "cn.hutool.db.sql.SqlExecutor:java.lang.Object query(java.sql.Connection,java.lang.String,cn.hutool.db.handler.RsHandler,java.util.Map)"
        ]
    },
    "cn.hutool.db.ThreadLocalConnection:java.sql.Connection get(javax.sql.DataSource)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.Db:java.sql.Connection getConnection()",
            "cn.hutool.db.Session:java.sql.Connection getConnection()"
        ]
    },
    "cn.hutool.extra.servlet.multipart.MultipartFormData:cn.hutool.extra.servlet.multipart.UploadFile getFile(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.extra.ssh.JschUtil:com.jcraft.jsch.Session getSession(java.lang.String,int,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.ssh.Sftp:void <init>(java.lang.String,int,java.lang.String,java.lang.String)"
        ]
    },
    "cn.hutool.extra.ssh.JschUtil:void close(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.http.GlobalHeaders:java.lang.String header(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.GlobalHeaders:java.lang.String header(cn.hutool.http.Header)"
        ]
    },
    "cn.hutool.http.GlobalHeaders:cn.hutool.http.GlobalHeaders header(cn.hutool.http.Header,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.GlobalHeaders:cn.hutool.http.GlobalHeaders putDefault(boolean)"
        ]
    },
    "cn.hutool.http.GlobalHeaders:cn.hutool.http.GlobalHeaders header(cn.hutool.http.Header,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.http.GlobalHeaders:cn.hutool.http.GlobalHeaders header(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.http.HttpBase:java.lang.Object header(cn.hutool.http.Header,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.http.HttpBase:java.lang.Object header(cn.hutool.http.Header,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest contentType(java.lang.String)",
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest keepAlive(boolean)",
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest contentLength(int)"
        ]
    },
    "cn.hutool.http.HttpBase:java.lang.Object header(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest method(cn.hutool.http.Method)"
        ]
    },
    "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest basicAuth(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.http.HttpUtil:java.util.Map decodeParams(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HttpUtil:java.util.HashMap decodeParamMap(java.lang.String,java.lang.String)"
        ]
    },
    "cn.hutool.log.dialect.commons.ApacheCommonsLogFactory:void checkLogExist(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.dialect.commons.ApacheCommonsLogFactory:void <init>()"
        ]
    },
    "cn.hutool.log.GlobalLogFactory:cn.hutool.log.LogFactory set(cn.hutool.log.LogFactory)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.GlobalLogFactory:cn.hutool.log.LogFactory set(java.lang.Class)",
            "cn.hutool.log.LogFactory:cn.hutool.log.LogFactory setCurrentLogFactory(cn.hutool.log.LogFactory)"
        ]
    },
    "cn.hutool.json.JSONObject:java.lang.Object getObj(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.getter.OptNullBasicTypeGetter:java.lang.Object getObj(java.lang.Object)"
        ]
    },
    "cn.hutool.json.XMLTokener:java.lang.Object nextContent()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.json.XML:boolean parse(cn.hutool.json.XMLTokener,cn.hutool.json.JSONObject,java.lang.String,boolean)"
        ]
    },
    "cn.hutool.json.XMLTokener:java.lang.Object nextToken()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.json.XML:boolean parse(cn.hutool.json.XMLTokener,cn.hutool.json.JSONObject,java.lang.String,boolean)"
        ]
    },
    "cn.hutool.core.annotation.CombinationAnnotationElement:void init(java.lang.reflect.AnnotatedElement)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.annotation.CombinationAnnotationElement:void <init>(java.lang.reflect.AnnotatedElement)"
        ]
    },
    "cn.hutool.core.bean.BeanDesc:void <init>(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.BeanUtil:cn.hutool.core.bean.BeanDesc getBeanDesc(java.lang.Class)"
        ]
    },
    "cn.hutool.core.bean.BeanUtil:java.util.Map getPropertyDescriptorMap(java.lang.Class,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.BeanUtil:java.beans.PropertyDescriptor getPropertyDescriptor(java.lang.Class,java.lang.String,boolean)"
        ]
    },
    "cn.hutool.core.convert.ConverterRegistry:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.ConverterRegistry$SingletonHolder:void <clinit>()"
        ]
    },
    "cn.hutool.core.exceptions.ExceptionUtil:java.lang.String stacktraceToOneLineString(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.FileTypeUtil:java.lang.String removeFileType(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.watch.WatchMonitor:void registerPath()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.watch.WatchMonitor:void watch(cn.hutool.core.io.watch.Watcher)"
        ]
    },
    "cn.hutool.core.io.watch.WatchMonitor:void access$000(cn.hutool.core.io.watch.WatchMonitor,java.nio.file.Path,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.watch.WatchMonitor$1:java.nio.file.FileVisitResult postVisitDirectory(java.nio.file.Path,java.io.IOException)"
        ]
    },
    "cn.hutool.core.bean.BeanDescCache:void putBeanDesc(java.lang.Class,cn.hutool.core.bean.BeanDesc)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.BeanUtil:cn.hutool.core.bean.BeanDesc getBeanDesc(java.lang.Class)"
        ]
    },
    "cn.hutool.core.bean.BeanInfoCache:void putPropertyDescriptorMap(java.lang.Class,java.util.Map,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.BeanUtil:java.util.Map getPropertyDescriptorMap(java.lang.Class,boolean)"
        ]
    },
    "cn.hutool.core.map.MapUtil:cn.hutool.core.map.MapBuilder builder(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.map.MapUtil:java.util.HashMap of(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.text.escape.Html4Escape:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.EscapeUtil:java.lang.String escapeHtml4(java.lang.String)"
        ]
    },
    "cn.hutool.core.text.escape.Html4Unescape:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.EscapeUtil:java.lang.String unescapeHtml4(java.lang.String)"
        ]
    },
    "cn.hutool.core.collection.CollUtil:java.util.Map zip(java.lang.String,java.lang.String,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.collection.CollUtil:java.util.Map zip(java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "cn.hutool.core.util.ArrayUtil:java.util.Map zip(java.lang.Object[],java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.IdcardUtil:java.lang.String convert15To18(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.IdcardUtil:java.lang.String getBirth(java.lang.String)",
            "cn.hutool.core.util.IdcardUtil:java.lang.Short getYearByIdCard(java.lang.String)",
            "cn.hutool.core.util.IdcardUtil:java.lang.Short getMonthByIdCard(java.lang.String)",
            "cn.hutool.core.util.IdcardUtil:java.lang.Short getDayByIdCard(java.lang.String)",
            "cn.hutool.core.util.IdcardUtil:int getGenderByIdCard(java.lang.String)"
        ]
    },
    "cn.hutool.core.util.IdcardUtil:boolean isvalidCard18(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.IdcardUtil:boolean isValidCard(java.lang.String)"
        ]
    },
    "cn.hutool.core.util.IdcardUtil:java.lang.String getBirthByIdCard(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.IdcardUtil:cn.hutool.core.date.DateTime getBirthDate(java.lang.String)",
            "cn.hutool.core.util.IdcardUtil:int getAgeByIdCard(java.lang.String,java.util.Date)"
        ]
    },
    "cn.hutool.core.util.IdcardUtil:java.lang.String getBirth(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.IdcardUtil:java.lang.String getBirthByIdCard(java.lang.String)"
        ]
    },
    "cn.hutool.core.util.IdcardUtil:cn.hutool.core.date.DateTime getBirthDate(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.IdcardUtil:int getAgeByIdCard(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.IdcardUtil:int getAgeByIdCard(java.lang.String,java.util.Date)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.IdcardUtil:int getAgeByIdCard(java.lang.String)"
        ]
    },
    "cn.hutool.core.util.IdcardUtil:java.lang.Short getYearByIdCard(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.IdcardUtil:java.lang.Short getMonthByIdCard(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.IdcardUtil:java.lang.Short getDayByIdCard(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.IdcardUtil:int getGenderByIdCard(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.IdcardUtil:char getCheckCode18(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.IdcardUtil:java.lang.String convert15To18(java.lang.String)",
            "cn.hutool.core.util.IdcardUtil:boolean isvalidCard18(java.lang.String)"
        ]
    },
    "cn.hutool.core.util.IdcardUtil:int getPowerSum(char[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.IdcardUtil:char getCheckCode18(java.lang.String)"
        ]
    },
    "cn.hutool.core.util.XmlUtil:java.util.Map xmlToMap(org.w3c.dom.Node)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.XmlUtil:java.util.Map xmlToMap(java.lang.String,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.XmlUtil:java.util.Map xmlToMap(java.lang.String)"
        ]
    },
    "cn.hutool.extra.qrcode.QrCodeUtil:java.lang.String decode(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.extra.qrcode.QrCodeUtil:java.lang.String decode(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.extra.qrcode.QrCodeUtil:com.google.zxing.common.BitMatrix encode(java.lang.String,com.google.zxing.BarcodeFormat,cn.hutool.extra.qrcode.QrConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.qrcode.QrCodeUtil:com.google.zxing.common.BitMatrix encode(java.lang.String,cn.hutool.extra.qrcode.QrConfig)",
            "cn.hutool.extra.qrcode.QrCodeUtil:com.google.zxing.common.BitMatrix encode(java.lang.String,com.google.zxing.BarcodeFormat,int,int)"
        ]
    },
    "cn.hutool.http.HTMLFilter:void <init>(boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest form(java.lang.String,java.io.File[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest form(java.lang.String,java.lang.Object)"
        ]
    },
    "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest form(java.lang.String,java.io.File,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest form(java.lang.String,java.io.File[])",
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest form(java.lang.String,java.io.File)"
        ]
    },
    "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest form(java.lang.String,byte[],java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.bean.copier.provider.BeanValueProvider:boolean containsKey(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.copier.BeanCopier:void valueProviderToBean(cn.hutool.core.bean.copier.ValueProvider,java.lang.Object)"
        ]
    },
    "cn.hutool.core.bean.copier.provider.MapValueProvider:boolean containsKey(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.copier.BeanCopier:void valueProviderToBean(cn.hutool.core.bean.copier.ValueProvider,java.lang.Object)"
        ]
    },
    "cn.hutool.json.InternalJSONUtil$1:boolean containsKey(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.json.InternalJSONUtil$1:boolean containsKey(java.lang.Object)"
        ]
    },
    "cn.hutool.core.util.StrUtil:java.lang.String format(java.lang.CharSequence,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.BeanException:void <init>(java.lang.String,java.lang.Object[])",
            "cn.hutool.core.bean.BeanException:void <init>(java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.core.bean.BeanPath:void init(java.lang.String)",
            "cn.hutool.core.bean.copier.BeanCopier:void valueProviderToBean(cn.hutool.core.bean.copier.ValueProvider,java.lang.Object)",
            "cn.hutool.core.clone.CloneRuntimeException:void <init>(java.lang.String,java.lang.Object[])",
            "cn.hutool.core.clone.CloneRuntimeException:void <init>(java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.core.comparator.ComparatorException:void <init>(java.lang.String,java.lang.Object[])",
            "cn.hutool.core.comparator.ComparatorException:void <init>(java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.core.comparator.FieldComparator:void <init>(java.lang.Class,java.lang.String)",
            "cn.hutool.core.convert.AbstractConverter:java.lang.Object convert(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.convert.ConvertException:void <init>(java.lang.String,java.lang.Object[])",
            "cn.hutool.core.convert.ConvertException:void <init>(java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.core.convert.impl.DateConverter:java.util.Date convertInternal(java.lang.Object)",
            "cn.hutool.core.convert.impl.MapConverter:java.util.Map convertInternal(java.lang.Object)",
            "cn.hutool.core.convert.impl.NumberConverter:java.lang.Number convertInternal(java.lang.Object)",
            "cn.hutool.core.convert.impl.ReferenceConverter:java.lang.ref.Reference convertInternal(java.lang.Object)",
            "cn.hutool.core.date.DateException:void <init>(java.lang.String,java.lang.Object[])",
            "cn.hutool.core.date.DateException:void <init>(java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.core.date.DateTime:java.util.Date parse(java.lang.String,java.text.DateFormat)",
            "cn.hutool.core.date.DateUtil:cn.hutool.core.date.DateTime parseTimeToday(java.lang.String)",
            "cn.hutool.core.date.DateUtil:int age(java.util.Date,java.util.Date)",
            "cn.hutool.core.exceptions.DependencyException:void <init>(java.lang.String,java.lang.Object[])",
            "cn.hutool.core.exceptions.DependencyException:void <init>(java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.core.exceptions.ExceptionUtil:java.lang.String getMessage(java.lang.Throwable)",
            "cn.hutool.core.exceptions.NotInitedException:void <init>(java.lang.String,java.lang.Object[])",
            "cn.hutool.core.exceptions.NotInitedException:void <init>(java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.core.exceptions.StatefulException:void <init>(java.lang.String,java.lang.Object[])",
            "cn.hutool.core.exceptions.UtilException:void <init>(java.lang.String,java.lang.Object[])",
            "cn.hutool.core.exceptions.UtilException:void <init>(java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.core.exceptions.ValidateException:void <init>(java.lang.String,java.lang.Object[])",
            "cn.hutool.core.io.BufferUtil:int lineEnd(java.nio.ByteBuffer,int)",
            "cn.hutool.core.io.file.FileCopier:void internalCopyDirContent(java.io.File,java.io.File)",
            "cn.hutool.core.io.file.FileReader:byte[] readBytes()",
            "cn.hutool.core.io.file.FileWriter:java.io.File writeMap(java.util.Map,cn.hutool.core.io.file.LineSeparator,java.lang.String,boolean)",
            "cn.hutool.core.io.FileUtil:java.io.File[] ls(java.lang.String)",
            "cn.hutool.core.io.FileUtil:java.util.List listFileNames(java.lang.String)",
            "cn.hutool.core.io.FileUtil:long size(java.io.File)",
            "cn.hutool.core.io.FileUtil:void move(java.io.File,java.io.File,boolean)",
            "cn.hutool.core.io.IORuntimeException:void <init>(java.lang.String,java.lang.Object[])",
            "cn.hutool.core.io.IORuntimeException:void <init>(java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.core.io.resource.NoResourceException:void <init>(java.lang.String,java.lang.Object[])",
            "cn.hutool.core.io.resource.NoResourceException:void <init>(java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.core.io.watch.WatchException:void <init>(java.lang.String,java.lang.Object[])",
            "cn.hutool.core.io.watch.WatchException:void <init>(java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.core.lang.Assert:void isTrue(boolean,java.lang.String,java.lang.Object[])",
            "cn.hutool.core.lang.Assert:void isFalse(boolean,java.lang.String,java.lang.Object[])",
            "cn.hutool.core.lang.Assert:void isNull(java.lang.Object,java.lang.String,java.lang.Object[])",
            "cn.hutool.core.lang.Assert:java.lang.Object notNull(java.lang.Object,java.lang.String,java.lang.Object[])",
            "cn.hutool.core.lang.Assert:java.lang.String notEmpty(java.lang.String,java.lang.String,java.lang.Object[])",
            "cn.hutool.core.lang.Assert:java.lang.String notBlank(java.lang.String,java.lang.String,java.lang.Object[])",
            "cn.hutool.core.lang.Assert:java.lang.String notContain(java.lang.String,java.lang.String,java.lang.String,java.lang.Object[])",
            "cn.hutool.core.lang.Assert:java.lang.Object[] notEmpty(java.lang.Object[],java.lang.String,java.lang.Object[])",
            "cn.hutool.core.lang.Assert:java.lang.Object[] noNullElements(java.lang.Object[],java.lang.String,java.lang.Object[])",
            "cn.hutool.core.lang.Assert:java.util.Collection notEmpty(java.util.Collection,java.lang.String,java.lang.Object[])",
            "cn.hutool.core.lang.Assert:java.util.Map notEmpty(java.util.Map,java.lang.String,java.lang.Object[])",
            "cn.hutool.core.lang.Assert:java.lang.Object isInstanceOf(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])",
            "cn.hutool.core.lang.Assert:void isAssignable(java.lang.Class,java.lang.Class,java.lang.String,java.lang.Object[])",
            "cn.hutool.core.lang.Assert:void state(boolean,java.lang.String,java.lang.Object[])",
            "cn.hutool.core.lang.Console:void print(java.lang.String,java.lang.Object[])",
            "cn.hutool.core.lang.Console:void log(java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.core.lang.Console:void error(java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.core.map.MapUtil:java.util.HashMap of(java.lang.Object[])",
            "cn.hutool.core.thread.NamedThreadFactory:java.lang.Thread newThread(java.lang.Runnable)",
            "cn.hutool.core.util.ArrayUtil:java.lang.Object[] wrap(java.lang.Object)",
            "cn.hutool.core.util.ArrayUtil:java.lang.String join(java.lang.Object,java.lang.CharSequence)",
            "cn.hutool.core.util.ClassUtil:java.lang.Object invoke(java.lang.String,java.lang.String,boolean,java.lang.Object[])",
            "cn.hutool.core.util.ReflectUtil:java.lang.Object invoke(java.lang.Object,java.lang.String,java.lang.Object[])",
            "cn.hutool.core.util.StrUtil:java.lang.String brief(java.lang.CharSequence,int)",
            "cn.hutool.core.util.ZipUtil:void validateFiles(java.io.File,java.io.File[])",
            "cn.hutool.cache.GlobalPruneTimer$1:java.lang.Thread newThread(java.lang.Runnable)",
            "cn.hutool.crypto.CryptoException:void <init>(java.lang.String,java.lang.Object[])",
            "cn.hutool.crypto.CryptoException:void <init>(java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.crypto.SecureUtil:java.security.Signature generateSignature(cn.hutool.crypto.asymmetric.AsymmetricAlgorithm,cn.hutool.crypto.digest.DigestAlgorithm)",
            "cn.hutool.crypto.symmetric.AES:void <init>(java.lang.String,java.lang.String,javax.crypto.SecretKey,javax.crypto.spec.IvParameterSpec)",
            "cn.hutool.crypto.symmetric.DES:void <init>(java.lang.String,java.lang.String,javax.crypto.SecretKey,javax.crypto.spec.IvParameterSpec)",
            "cn.hutool.crypto.symmetric.DESede:void <init>(java.lang.String,java.lang.String,javax.crypto.SecretKey,javax.crypto.spec.IvParameterSpec)",
            "cn.hutool.db.DaoTemplate:int update(cn.hutool.db.Entity)",
            "cn.hutool.db.DbRuntimeException:void <init>(java.lang.String,java.lang.Object[])",
            "cn.hutool.db.DbRuntimeException:void <init>(java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.db.meta.Column:void <init>(java.lang.String,java.sql.ResultSet)",
            "cn.hutool.db.nosql.mongo.MongoDS:void initSingle()",
            "cn.hutool.db.nosql.mongo.MongoDS:com.mongodb.ServerAddress createServerAddress(java.lang.String)",
            "cn.hutool.db.Session:void setTransactionIsolation(int)",
            "cn.hutool.db.sql.Condition:java.lang.String toString()",
            "cn.hutool.db.sql.Direction:cn.hutool.db.sql.Direction fromString(java.lang.String)",
            "cn.hutool.db.sql.Wrapper$1:java.lang.String edit(java.lang.String)",
            "cn.hutool.db.sql.Wrapper:java.lang.String wrap(java.lang.String)",
            "cn.hutool.extra.ftp.Ftp:boolean mkdir(java.lang.String)",
            "cn.hutool.extra.ftp.FtpException:void <init>(java.lang.String,java.lang.Object[])",
            "cn.hutool.extra.ftp.FtpException:void <init>(java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.extra.mail.Mail:javax.mail.Multipart buildContent(java.nio.charset.Charset)",
            "cn.hutool.extra.mail.MailAccount:cn.hutool.extra.mail.MailAccount defaultIfEmpty()",
            "cn.hutool.extra.mail.MailException:void <init>(java.lang.String,java.lang.Object[])",
            "cn.hutool.extra.mail.MailException:void <init>(java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.extra.qrcode.QrCodeException:void <init>(java.lang.String,java.lang.Object[])",
            "cn.hutool.extra.qrcode.QrCodeException:void <init>(java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.extra.servlet.multipart.UploadFile:void assertValid()",
            "cn.hutool.extra.servlet.multipart.UploadFileHeader:java.lang.String getDataFieldValue(java.lang.String,java.lang.String)",
            "cn.hutool.extra.servlet.ServletUtil:java.lang.String getHeader(javax.servlet.http.HttpServletRequest,java.lang.String,java.lang.String)",
            "cn.hutool.extra.ssh.JschRuntimeException:void <init>(java.lang.String,java.lang.Object[])",
            "cn.hutool.extra.ssh.JschRuntimeException:void <init>(java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.extra.ssh.JschUtil:com.jcraft.jsch.Session getSession(java.lang.String,int,java.lang.String,java.lang.String)",
            "cn.hutool.extra.template.TemplateException:void <init>(java.lang.String,java.lang.Object[])",
            "cn.hutool.extra.template.TemplateException:void <init>(java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.http.HtmlUtil:java.lang.String removeHtmlTag(java.lang.String,boolean,java.lang.String[])",
            "cn.hutool.http.HtmlUtil:java.lang.String removeHtmlAttr(java.lang.String,java.lang.String[])",
            "cn.hutool.http.HtmlUtil:java.lang.String removeAllHtmlAttr(java.lang.String,java.lang.String[])",
            "cn.hutool.http.HttpException:void <init>(java.lang.String,java.lang.Object[])",
            "cn.hutool.http.HttpException:void <init>(java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest body(java.lang.String,java.lang.String)",
            "cn.hutool.http.HttpRequest:void writeForm(java.io.OutputStream)",
            "cn.hutool.http.HttpRequest:void appendPart(java.lang.String,cn.hutool.core.io.resource.Resource,java.io.OutputStream)",
            "cn.hutool.http.HttpRequest:void <clinit>()",
            "cn.hutool.http.HttpResponse:cn.hutool.http.HttpResponse init()",
            "cn.hutool.http.HttpUtil:java.lang.String encode(java.lang.String,java.lang.String)",
            "cn.hutool.http.HttpUtil:java.lang.String decode(java.lang.String,java.lang.String)",
            "cn.hutool.log.AbstractLog:boolean isEnabled(cn.hutool.log.level.Level)",
            "cn.hutool.log.dialect.commons.ApacheCommonsLog:void trace(java.lang.String,java.lang.Object[])",
            "cn.hutool.log.dialect.commons.ApacheCommonsLog:void trace(java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.log.dialect.commons.ApacheCommonsLog:void debug(java.lang.String,java.lang.Object[])",
            "cn.hutool.log.dialect.commons.ApacheCommonsLog:void debug(java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.log.dialect.commons.ApacheCommonsLog:void info(java.lang.String,java.lang.Object[])",
            "cn.hutool.log.dialect.commons.ApacheCommonsLog:void info(java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.log.dialect.commons.ApacheCommonsLog:void warn(java.lang.String,java.lang.Object[])",
            "cn.hutool.log.dialect.commons.ApacheCommonsLog:void warn(java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.log.dialect.commons.ApacheCommonsLog:void error(java.lang.String,java.lang.Object[])",
            "cn.hutool.log.dialect.commons.ApacheCommonsLog:void error(java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.log.dialect.commons.ApacheCommonsLog:void log(cn.hutool.log.level.Level,java.lang.String,java.lang.Object[])",
            "cn.hutool.log.dialect.commons.ApacheCommonsLog:void log(cn.hutool.log.level.Level,java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.log.dialect.commons.ApacheCommonsLog4JLog:void trace(java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.log.dialect.commons.ApacheCommonsLog4JLog:void debug(java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.log.dialect.commons.ApacheCommonsLog4JLog:void info(java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.log.dialect.commons.ApacheCommonsLog4JLog:void warn(java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.log.dialect.commons.ApacheCommonsLog4JLog:void error(java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.log.dialect.commons.ApacheCommonsLog4JLog:void log(java.lang.String,cn.hutool.log.level.Level,java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.log.dialect.console.ConsoleLog:void log(cn.hutool.log.level.Level,java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.log.dialect.jdk.JdkLog:void log(java.lang.String,cn.hutool.log.level.Level,java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.log.dialect.jdk.JdkLog:void logIfEnabled(java.lang.String,java.util.logging.Level,java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.log.dialect.log4j.Log4jLog:void trace(java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.log.dialect.log4j.Log4jLog:void debug(java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.log.dialect.log4j.Log4jLog:void info(java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.log.dialect.log4j.Log4jLog:void warn(java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.log.dialect.log4j.Log4jLog:void error(java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.log.dialect.log4j.Log4jLog:void log(java.lang.String,cn.hutool.log.level.Level,java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.log.dialect.log4j2.Log4j2Log:void trace(java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.log.dialect.log4j2.Log4j2Log:void debug(java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.log.dialect.log4j2.Log4j2Log:void info(java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.log.dialect.log4j2.Log4j2Log:void warn(java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.log.dialect.log4j2.Log4j2Log:void error(java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.log.dialect.log4j2.Log4j2Log:void log(java.lang.String,cn.hutool.log.level.Level,java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.log.dialect.log4j2.Log4j2Log:boolean logIfEnabled(java.lang.String,org.apache.logging.log4j.Level,java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.log.dialect.slf4j.Slf4jLog:void trace(java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.log.dialect.slf4j.Slf4jLog:void debug(java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.log.dialect.slf4j.Slf4jLog:void info(java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.log.dialect.slf4j.Slf4jLog:void warn(java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.log.dialect.slf4j.Slf4jLog:void error(java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.log.dialect.slf4j.Slf4jLog:void log(java.lang.String,cn.hutool.log.level.Level,java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.log.dialect.slf4j.Slf4jLog:boolean locationAwareLog(java.lang.String,int,java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.log.dialect.tinylog.TinyLog:org.pmw.tinylog.Level toTinyLevel(cn.hutool.log.level.Level)",
            "cn.hutool.log.StaticLog:void warn(java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.script.FullSupportScriptEngine:void <init>(java.lang.String)",
            "cn.hutool.script.ScriptRuntimeException:void <init>(java.lang.String,java.lang.Object[])",
            "cn.hutool.script.ScriptRuntimeException:void <init>(java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.setting.GroupedSet:void <init>(java.lang.String,java.nio.charset.Charset)",
            "cn.hutool.setting.GroupedSet:void <init>(java.io.File,java.nio.charset.Charset)",
            "cn.hutool.setting.GroupedSet:void <init>(java.lang.String,java.lang.Class,java.nio.charset.Charset)",
            "cn.hutool.setting.profile.Profile:java.lang.String fixNameForProfile(java.lang.String)",
            "cn.hutool.setting.SettingLoader:void store(java.io.PrintWriter)",
            "cn.hutool.setting.SettingRuntimeException:void <init>(java.lang.String,java.lang.Object[])",
            "cn.hutool.setting.SettingRuntimeException:void <init>(java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.cron.CronException:void <init>(java.lang.String,java.lang.Object[])",
            "cn.hutool.cron.CronException:void <init>(java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.cron.pattern.matcher.AlwaysTrueValueMatcher:java.lang.String toString()",
            "cn.hutool.cron.pattern.matcher.BoolArrayValueMatcher:java.lang.String toString()",
            "cn.hutool.json.InternalJSONUtil:java.lang.Object jsonConvert(java.lang.reflect.Type,java.lang.Object,boolean)",
            "cn.hutool.json.JSONException:void <init>(java.lang.String,java.lang.Object[])",
            "cn.hutool.json.JSONException:void <init>(java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.json.JSONObject:java.lang.Object toBean(java.lang.reflect.Type,boolean)",
            "cn.hutool.json.JSONObject:cn.hutool.json.JSONObject putOnce(java.lang.String,java.lang.Object)",
            "cn.hutool.poi.excel.ExcelPicUtil:java.util.Map getPicMap(org.apache.poi.ss.usermodel.Workbook,int)",
            "cn.hutool.poi.excel.ExcelPicUtil:java.util.Map getPicMapXls(org.apache.poi.hssf.usermodel.HSSFWorkbook,int)",
            "cn.hutool.poi.excel.ExcelPicUtil:java.util.Map getPicMapXlsx(org.apache.poi.xssf.usermodel.XSSFWorkbook,int)",
            "cn.hutool.poi.excel.ExcelReader:java.util.List read(int,int,int)",
            "cn.hutool.poi.excel.sax.ExcelSaxUtil:java.lang.Object getDataValue(cn.hutool.poi.excel.sax.CellDataType,java.lang.String,org.apache.poi.xssf.model.SharedStringsTable,java.lang.String)",
            "cn.hutool.poi.exceptions.POIException:void <init>(java.lang.String,java.lang.Object[])",
            "cn.hutool.poi.exceptions.POIException:void <init>(java.lang.Throwable,java.lang.String,java.lang.Object[])"
        ]
    },
    "cn.hutool.json.JSONArray:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.DynaBean:java.lang.String toString()",
            "cn.hutool.core.collection.CollUtil$6:int compare(java.util.Map$Entry,java.util.Map$Entry)",
            "cn.hutool.core.convert.AbstractConverter:java.lang.String convertToStr(java.lang.Object)",
            "cn.hutool.core.convert.impl.ArrayConverter:java.lang.Object convertObjectToArray(java.lang.Object)",
            "cn.hutool.core.convert.impl.CurrencyConverter:java.util.Currency convertInternal(java.lang.Object)",
            "cn.hutool.core.convert.NumberWordFormater:java.lang.String format(java.lang.Object)",
            "cn.hutool.core.getter.OptNullBasicTypeFromStringGetter:java.lang.Object getObj(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.io.file.FileWriter:java.io.File writeLines(java.util.Collection,cn.hutool.core.io.file.LineSeparator,boolean)",
            "cn.hutool.core.io.watch.watchers.DelayWatcher$1:void run()",
            "cn.hutool.core.io.watch.watchers.DelayWatcher:void onDelayModify(java.nio.file.WatchEvent,java.nio.file.Path)",
            "cn.hutool.core.io.watch.WatchMonitor:void watch(cn.hutool.core.io.watch.Watcher)",
            "cn.hutool.core.lang.ConsistentHash$1:java.lang.Integer hash(java.lang.Object)",
            "cn.hutool.core.lang.ConsistentHash:void add(java.lang.Object)",
            "cn.hutool.core.lang.ConsistentHash:void remove(java.lang.Object)",
            "cn.hutool.core.lang.mutable.MutableObj:java.lang.String toString()",
            "cn.hutool.core.map.CamelCaseLinkedMap:java.lang.Object customKey(java.lang.Object)",
            "cn.hutool.core.map.CamelCaseMap:java.lang.Object customKey(java.lang.Object)",
            "cn.hutool.core.map.CaseInsensitiveLinkedMap:java.lang.Object customKey(java.lang.Object)",
            "cn.hutool.core.map.CaseInsensitiveMap:java.lang.Object customKey(java.lang.Object)",
            "cn.hutool.core.text.csv.CsvRow:java.lang.String toString()",
            "cn.hutool.core.util.ArrayUtil:java.lang.String toString(java.lang.Object)",
            "cn.hutool.core.util.ObjectUtil:boolean contains(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.util.StrUtil:java.lang.String str(java.lang.Object,java.nio.charset.Charset)",
            "cn.hutool.core.util.StrUtil:java.lang.String toString(java.lang.Object)",
            "cn.hutool.core.util.XmlUtil:void mapToXml(org.w3c.dom.Document,org.w3c.dom.Element,java.util.Map)",
            "cn.hutool.extra.servlet.ServletUtil:void setHeader(javax.servlet.http.HttpServletResponse,java.lang.String,java.lang.Object)",
            "cn.hutool.extra.template.engine.velocity.VelocityUtil:void toFile(org.apache.velocity.Template,org.apache.velocity.VelocityContext,java.lang.String)",
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest form(java.lang.String,java.lang.Object,java.lang.Object[])",
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest body(cn.hutool.json.JSON)",
            "cn.hutool.setting.dialect.Props:java.lang.Object getObj(java.lang.String,java.lang.Object)",
            "cn.hutool.setting.dialect.Props:void setProperty(java.lang.String,java.lang.Object)",
            "cn.hutool.json.InternalJSONUtil:java.io.Writer writeValue(java.io.Writer,java.lang.Object,int,int)",
            "cn.hutool.json.InternalJSONUtil:java.lang.String valueToString(java.lang.Object)",
            "cn.hutool.json.JSONObject:java.io.Writer write(java.io.Writer,int,int)",
            "cn.hutool.json.JSONObject:void init(cn.hutool.json.JSONTokener)",
            "cn.hutool.json.JSONUtil:java.lang.Object wrap(java.lang.Object,boolean)",
            "cn.hutool.json.XML:java.lang.String toXml(java.lang.Object,java.lang.String)",
            "cn.hutool.poi.excel.cell.CellUtil:void setCellValue(org.apache.poi.ss.usermodel.Cell,java.lang.Object,cn.hutool.poi.excel.StyleSet,boolean)",
            "cn.hutool.poi.excel.ExcelReader:java.util.List aliasHeader(java.util.List)"
        ]
    },
    "cn.hutool.json.JSONArray:java.lang.String toStringPretty()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.json.JSONObject:void <init>(java.lang.CharSequence)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.json.JSONSupport:void parse(java.lang.String,boolean)",
            "cn.hutool.json.JSONUtil:cn.hutool.json.JSONObject parseObj(java.lang.String)"
        ]
    },
    "cn.hutool.json.JSONTokener:java.lang.Object nextValue()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.json.JSONArray:void init(cn.hutool.json.JSONTokener)",
            "cn.hutool.json.JSONObject:void init(cn.hutool.json.JSONTokener)",
            "cn.hutool.json.JSONTokener:cn.hutool.json.JSONArray toJSONArray()"
        ]
    },
    "cn.hutool.core.collection.CollUtil:java.util.ArrayList newArrayList(java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.collection.CollUtil:java.util.ArrayList toList(java.lang.Object[])",
            "cn.hutool.core.collection.CollUtil:java.util.List group(java.util.Collection,cn.hutool.core.collection.CollUtil$Hash)",
            "cn.hutool.core.io.resource.MultiResource:void <init>(cn.hutool.core.io.resource.Resource[])",
            "cn.hutool.core.io.watch.watchers.WatcherChain:void <init>(cn.hutool.core.io.watch.Watcher[])",
            "cn.hutool.core.map.MapUtil:java.util.Map toListMap(java.lang.Iterable)",
            "cn.hutool.core.util.ClassUtil:java.util.List getPublicMethods(java.lang.Class,cn.hutool.core.lang.Filter)",
            "cn.hutool.core.util.ReflectUtil:java.lang.Object newInstance(java.lang.Class,java.lang.Object[])",
            "cn.hutool.db.AbstractDb:java.lang.Object find(cn.hutool.db.Entity,cn.hutool.db.handler.RsHandler,java.lang.String[])",
            "cn.hutool.db.dialect.impl.AnsiSqlDialect:java.sql.PreparedStatement psForCount(java.sql.Connection,cn.hutool.db.sql.Query)",
            "cn.hutool.db.sql.Query:cn.hutool.db.sql.Query setFields(java.lang.String[])",
            "cn.hutool.db.sql.SqlBuilder:void buildValuePartForIN(java.lang.StringBuilder,cn.hutool.db.sql.Condition)",
            "cn.hutool.db.SqlConnRunner:java.lang.Object find(java.sql.Connection,cn.hutool.db.Entity,cn.hutool.db.handler.RsHandler,java.lang.String[])",
            "cn.hutool.extra.mail.MailUtil:java.util.List splitAddress(java.lang.String)"
        ]
    },
    "cn.hutool.core.collection.CollUtil:java.util.LinkedList newLinkedList(java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.comparator.ComparatorChain:void <init>(java.util.Comparator)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.comparator.ComparatorChain:cn.hutool.core.comparator.ComparatorChain addComparator(java.util.Comparator)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.comparator.ComparatorChain:cn.hutool.core.comparator.ComparatorChain addChain(java.util.Comparator)"
        ]
    },
    "cn.hutool.core.date.format.FastDateParser:void <init>(java.lang.String,java.util.TimeZone,java.util.Locale,java.util.Date)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.date.format.FastDateFormat:void <init>(java.lang.String,java.util.TimeZone,java.util.Locale,java.util.Date)",
            "cn.hutool.core.date.format.FastDateParser:void <init>(java.lang.String,java.util.TimeZone,java.util.Locale)"
        ]
    },
    "cn.hutool.core.date.format.FastDateParser:void readObject(java.io.ObjectInputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.IoUtil:void readLines(java.io.Reader,cn.hutool.core.io.LineHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.file.FileReader:void readLines(cn.hutool.core.io.LineHandler)",
            "cn.hutool.core.io.IoUtil:java.util.Collection readLines(java.io.Reader,java.util.Collection)",
            "cn.hutool.core.io.IoUtil:void readLines(java.io.InputStream,java.nio.charset.Charset,cn.hutool.core.io.LineHandler)"
        ]
    },
    "cn.hutool.core.io.resource.MultiFileResource:cn.hutool.core.io.resource.MultiFileResource add(cn.hutool.core.io.resource.Resource)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.resource.MultiFileResource:cn.hutool.core.io.resource.MultiFileResource add(java.io.File[])",
            "cn.hutool.core.io.resource.MultiFileResource:cn.hutool.core.io.resource.MultiFileResource add(java.util.Collection)",
            "cn.hutool.core.io.resource.MultiFileResource:cn.hutool.core.io.resource.MultiResource add(cn.hutool.core.io.resource.Resource)"
        ]
    },
    "cn.hutool.core.io.watch.watchers.WatcherChain:java.lang.Object addChain(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.math.Arrangement:java.util.List select(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.math.Arrangement:java.util.List select()",
            "cn.hutool.core.math.Arrangement:java.util.List selectAll()",
            "cn.hutool.core.math.MathUtil:java.util.List arrangementSelect(java.lang.String[],int)"
        ]
    },
    "cn.hutool.core.math.Combination:java.util.List select(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.math.Combination:java.util.List selectAll()",
            "cn.hutool.core.math.MathUtil:java.util.List combinationSelect(java.lang.String[],int)"
        ]
    },
    "cn.hutool.core.text.csv.CsvRow:boolean add(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.collection.CollUtil$8:int hash(java.lang.Object)",
            "cn.hutool.core.collection.CollUtil:java.util.List list(boolean,java.lang.Object[])",
            "cn.hutool.core.collection.CollUtil:java.util.List list(boolean,java.util.Iterator)",
            "cn.hutool.core.collection.CollUtil:java.util.List list(boolean,java.util.Enumeration)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection filter(java.util.Collection,cn.hutool.core.lang.Editor)",
            "cn.hutool.core.collection.CollUtil:java.util.List filter(java.util.List,cn.hutool.core.lang.Editor)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection filter(java.util.Collection,cn.hutool.core.lang.Filter)",
            "cn.hutool.core.collection.CollUtil:java.util.List filter(java.util.List,cn.hutool.core.lang.Filter)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection addAll(java.util.Collection,java.lang.Object,java.lang.reflect.Type)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection addAll(java.util.Collection,java.util.Iterator)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection addAll(java.util.Collection,java.util.Enumeration)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection addAll(java.util.Collection,java.lang.Object[])",
            "cn.hutool.core.collection.CollUtil:java.util.List addAllIfNotContains(java.util.List,java.util.List)",
            "cn.hutool.core.collection.CollUtil:java.util.List group(java.util.Collection,cn.hutool.core.collection.CollUtil$Hash)",
            "cn.hutool.core.collection.CollUtil:java.util.List setOrAppend(java.util.List,int,java.lang.Object)",
            "cn.hutool.core.collection.CopiedIter:void <init>(java.util.Iterator)",
            "cn.hutool.core.comparator.ComparatorChain:void <init>(java.util.Comparator,boolean)",
            "cn.hutool.core.comparator.ComparatorChain:cn.hutool.core.comparator.ComparatorChain addComparator(java.util.Comparator,boolean)",
            "cn.hutool.core.date.format.FastDateParser:void init(java.util.Calendar)",
            "cn.hutool.core.io.file.FileAppender:cn.hutool.core.io.file.FileAppender append(java.lang.String)",
            "cn.hutool.core.io.file.FileReader:java.util.Collection readLines(java.util.Collection)",
            "cn.hutool.core.io.IoUtil$1:void handle(java.lang.String)",
            "cn.hutool.core.io.resource.MultiResource:cn.hutool.core.io.resource.MultiResource add(cn.hutool.core.io.resource.Resource)",
            "cn.hutool.core.io.watch.watchers.WatcherChain:cn.hutool.core.io.watch.watchers.WatcherChain addChain(cn.hutool.core.io.watch.Watcher)",
            "cn.hutool.core.map.MapUtil:java.util.Map toListMap(java.lang.Iterable)",
            "cn.hutool.core.math.Arrangement:void select(java.lang.String[],int,java.util.List)",
            "cn.hutool.core.math.Combination:void select(int,java.lang.String[],int,java.util.List)",
            "cn.hutool.core.text.csv.CsvRow:boolean add(java.lang.String)",
            "cn.hutool.core.text.replacer.ReplacerChain:cn.hutool.core.text.replacer.ReplacerChain addChain(cn.hutool.core.text.replacer.StrReplacer)",
            "cn.hutool.core.text.StrSpliter:java.util.List addToList(java.util.List,java.lang.String,boolean,boolean)",
            "cn.hutool.core.util.NumberUtil:java.util.Collection appendRange(int,int,int,java.util.Collection)",
            "cn.hutool.core.util.ReUtil:java.util.Collection findAll(java.util.regex.Pattern,java.lang.String,int,java.util.Collection)",
            "cn.hutool.db.handler.HandleHelper:java.util.Collection handleRs(java.sql.ResultSet,java.util.Collection)",
            "cn.hutool.db.handler.HandleHelper:java.util.Collection handleRsToBeanList(java.sql.ResultSet,java.util.Collection,java.lang.Class)",
            "cn.hutool.db.sql.NamedSql:void parse(java.lang.String,java.util.Map)",
            "cn.hutool.db.sql.SqlBuilder:cn.hutool.db.sql.SqlBuilder insert(cn.hutool.db.Entity,cn.hutool.db.dialect.DialectName)",
            "cn.hutool.db.sql.SqlBuilder:cn.hutool.db.sql.SqlBuilder update(cn.hutool.db.Entity)",
            "cn.hutool.db.sql.SqlBuilder:void buildConditionPart(java.lang.StringBuilder,cn.hutool.db.sql.Condition)",
            "cn.hutool.db.sql.SqlBuilder:void buildValuePartForBETWEEN(java.lang.StringBuilder,cn.hutool.db.sql.Condition)",
            "cn.hutool.db.sql.SqlUtil:java.lang.String buildEqualsWhere(cn.hutool.db.Entity,java.util.List)",
            "cn.hutool.extra.ssh.Sftp$3:int select(com.jcraft.jsch.ChannelSftp$LsEntry)",
            "cn.hutool.http.GlobalHeaders:cn.hutool.http.GlobalHeaders header(java.lang.String,java.lang.String,boolean)",
            "cn.hutool.http.HttpBase:java.lang.Object header(java.lang.String,java.lang.String,boolean)",
            "cn.hutool.http.HttpUtil:void addParam(java.util.Map,java.lang.String,java.lang.String,java.lang.String)",
            "cn.hutool.setting.GroupedSet:boolean contains(java.lang.String,java.lang.String,java.lang.String[])",
            "cn.hutool.cron.listener.TaskListenerManager:cn.hutool.cron.listener.TaskListenerManager addListener(cn.hutool.cron.listener.TaskListener)",
            "cn.hutool.cron.pattern.CronPattern:void parseSinglePattern(java.lang.String)",
            "cn.hutool.cron.TaskExecutorManager:cn.hutool.cron.TaskExecutor spawnExecutor(cn.hutool.cron.task.Task)",
            "cn.hutool.cron.TaskLauncherManager:cn.hutool.cron.TaskLauncher spawnLauncher(long)",
            "cn.hutool.json.JSONArray:boolean add(java.lang.Object)",
            "cn.hutool.json.JSONArray:void init(cn.hutool.json.JSONTokener)",
            "cn.hutool.poi.excel.sax.Excel03SaxReader:void processRecord(org.apache.poi.hssf.record.Record)"
        ]
    },
    "cn.hutool.core.text.replacer.ReplacerChain:void <init>(cn.hutool.core.text.replacer.StrReplacer[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.text.escape.Html4Escape:void <init>()",
            "cn.hutool.core.text.escape.Html4Unescape:void <init>()"
        ]
    },
    "cn.hutool.core.text.replacer.ReplacerChain:java.lang.Object addChain(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.text.StrSpliter:java.util.List split(java.lang.String,char,int,boolean,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.text.StrSpliter:java.util.List splitTrim(java.lang.String,char,int,boolean)",
            "cn.hutool.core.text.StrSpliter:java.util.List split(java.lang.String,char,int,boolean,boolean)",
            "cn.hutool.core.text.StrSpliter:java.util.List splitIgnoreCase(java.lang.String,char,int,boolean,boolean)",
            "cn.hutool.core.text.StrSpliter:java.util.List split(java.lang.String,java.lang.String,int,boolean,boolean,boolean)"
        ]
    },
    "cn.hutool.core.text.StrSpliter:java.util.List split(java.lang.String,java.lang.String,int,boolean,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.text.StrSpliter:java.util.List split(java.lang.String,java.lang.String,boolean,boolean)",
            "cn.hutool.core.text.StrSpliter:java.util.List split(java.lang.String,java.lang.String,int,boolean,boolean)",
            "cn.hutool.core.text.StrSpliter:java.util.List splitIgnoreCase(java.lang.String,java.lang.String,int,boolean,boolean)",
            "cn.hutool.core.text.StrSpliter:java.util.List splitTrimIgnoreCase(java.lang.String,java.lang.String,int,boolean)"
        ]
    },
    "cn.hutool.core.text.StrSpliter:java.util.List split(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.text.StrSpliter:java.util.List split(java.lang.String,java.lang.String,int,boolean,boolean,boolean)",
            "cn.hutool.core.text.StrSpliter:java.lang.String[] splitToArray(java.lang.String,int)",
            "cn.hutool.core.text.StrSpliter:java.util.List split(java.lang.String,java.util.regex.Pattern,int,boolean,boolean)"
        ]
    },
    "cn.hutool.core.text.StrSpliter:java.util.List split(java.lang.String,java.util.regex.Pattern,int,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.text.StrSpliter:java.util.List splitByRegex(java.lang.String,java.lang.String,int,boolean,boolean)",
            "cn.hutool.core.text.StrSpliter:java.lang.String[] splitToArray(java.lang.String,java.util.regex.Pattern,int,boolean,boolean)"
        ]
    },
    "cn.hutool.core.util.NumberUtil:java.util.Collection appendRange(int,int,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.cron.pattern.matcher.ValueMatcherBuilder:java.util.List parseRange(java.lang.String,int,cn.hutool.cron.pattern.parser.ValueParser)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.cron.pattern.matcher.ValueMatcherBuilder:java.util.List parseStep(java.lang.String,cn.hutool.cron.pattern.parser.ValueParser)"
        ]
    },
    "cn.hutool.core.util.ReUtil:java.util.Collection findAll(java.lang.String,java.lang.String,int,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ReUtil:java.util.List findAll(java.lang.String,java.lang.String,int)",
            "cn.hutool.setting.SettingLoader:java.lang.String replaceVar(java.lang.String,java.lang.String)"
        ]
    },
    "cn.hutool.core.util.ReUtil:java.util.List findAll(java.util.regex.Pattern,java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ReUtil:java.util.List findAllGroup0(java.util.regex.Pattern,java.lang.String)",
            "cn.hutool.core.util.ReUtil:java.util.List findAllGroup1(java.util.regex.Pattern,java.lang.String)"
        ]
    },
    "cn.hutool.db.handler.EntityListHandler:java.util.List handle(java.sql.ResultSet)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.handler.EntityListHandler:java.lang.Object handle(java.sql.ResultSet)"
        ]
    },
    "cn.hutool.db.handler.EntitySetHandler:java.util.LinkedHashSet handle(java.sql.ResultSet)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.handler.EntitySetHandler:java.lang.Object handle(java.sql.ResultSet)"
        ]
    },
    "cn.hutool.db.handler.PageResultHandler:cn.hutool.db.PageResult handle(java.sql.ResultSet)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.handler.PageResultHandler:java.lang.Object handle(java.sql.ResultSet)"
        ]
    },
    "cn.hutool.db.handler.BeanListHandler:java.util.List handle(java.sql.ResultSet)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.handler.BeanListHandler:java.lang.Object handle(java.sql.ResultSet)"
        ]
    },
    "cn.hutool.cron.Scheduler:cn.hutool.cron.Scheduler addListener(cn.hutool.cron.listener.TaskListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.json.JSONArray:void <init>(cn.hutool.json.JSONTokener)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.json.JSONTokener:java.lang.Object nextValue()"
        ]
    },
    "cn.hutool.json.JSONArray:void init(java.lang.CharSequence)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.json.JSONArray:void <init>(java.lang.CharSequence)",
            "cn.hutool.json.JSONArray:void <init>(java.lang.Object,boolean)"
        ]
    },
    "cn.hutool.core.comparator.ComparatorChain:cn.hutool.core.comparator.ComparatorChain setComparator(int,java.util.Comparator)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.text.csv.CsvRow:java.lang.Object set(int,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.collection.CollUtil:java.util.List setOrAppend(java.util.List,int,java.lang.Object)",
            "cn.hutool.core.comparator.ComparatorChain:cn.hutool.core.comparator.ComparatorChain setComparator(int,java.util.Comparator,boolean)",
            "cn.hutool.core.text.csv.CsvRow:java.lang.String set(int,java.lang.String)",
            "cn.hutool.json.JSONArray:java.lang.Object set(int,java.lang.Object)",
            "cn.hutool.json.JSONArray:void add(int,java.lang.Object)"
        ]
    },
    "cn.hutool.core.text.csv.CsvRow:void add(int,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.text.csv.CsvRow:void add(int,java.lang.String)",
            "cn.hutool.poi.excel.sax.Excel03SaxReader:void processRecord(org.apache.poi.hssf.record.Record)",
            "cn.hutool.poi.excel.sax.Excel03SaxReader:void processCellValue(org.apache.poi.hssf.record.Record)",
            "cn.hutool.poi.excel.sax.Excel07SaxReader:void endElement(java.lang.String,java.lang.String,java.lang.String)",
            "cn.hutool.poi.excel.sax.Excel07SaxReader:void fillBlankCell(java.lang.String,java.lang.String,boolean)"
        ]
    },
    "cn.hutool.json.JSONObject:void <init>(java.lang.Object,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.poi.excel.ExcelWriter:cn.hutool.poi.excel.ExcelWriter merge(int,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.poi.excel.ExcelWriter:cn.hutool.poi.excel.ExcelWriter merge(int)"
        ]
    },
    "cn.hutool.core.util.ClassUtil:java.net.URL getClassPathURL()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ClassUtil:java.lang.String getClassPath(boolean)"
        ]
    },
    "cn.hutool.core.util.ClassUtil:java.lang.Object invoke(java.lang.String,boolean,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ClassUtil:java.lang.Object invoke(java.lang.String,java.lang.Object[])"
        ]
    },
    "cn.hutool.core.util.ClassUtil:java.lang.Object invoke(java.lang.String,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.http.HttpConnection:void <init>(java.lang.String,cn.hutool.http.Method)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HttpConnection:cn.hutool.http.HttpConnection create(java.lang.String,cn.hutool.http.Method)"
        ]
    },
    "cn.hutool.http.HttpConnection:void <init>(java.lang.String,cn.hutool.http.Method,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HttpConnection:cn.hutool.http.HttpConnection create(java.lang.String,cn.hutool.http.Method,int)"
        ]
    },
    "cn.hutool.db.ds.pooled.DbConfig:void <init>(java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.ds.simple.SimpleDataSource:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.ds.simple.SimpleDataSource:void init(java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.ds.simple.SimpleDataSource:void <init>(java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "cn.hutool.log.StaticLog:void warn(cn.hutool.log.Log,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.StaticLog:void warn(java.lang.String,java.lang.Object[])"
        ]
    },
    "cn.hutool.log.StaticLog:void error(cn.hutool.log.Log,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.StaticLog:void error(java.lang.Throwable)"
        ]
    },
    "cn.hutool.log.StaticLog:void error(cn.hutool.log.Log,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.StaticLog:void error(java.lang.String,java.lang.Object[])"
        ]
    },
    "cn.hutool.log.StaticLog:void trace(cn.hutool.log.Log,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.StaticLog:void trace(java.lang.String,java.lang.Object[])"
        ]
    },
    "cn.hutool.log.StaticLog:void debug(cn.hutool.log.Log,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.StaticLog:void debug(java.lang.String,java.lang.Object[])"
        ]
    },
    "cn.hutool.log.StaticLog:void info(cn.hutool.log.Log,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.StaticLog:void info(java.lang.String,java.lang.Object[])"
        ]
    },
    "cn.hutool.dfa.SensitiveUtil:void init(java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.http.HttpUtil:cn.hutool.http.HttpRequest createPost(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.http.HttpUtil:cn.hutool.http.HttpRequest createGet(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.lang.Assert:java.util.Map notEmpty(java.util.Map,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.lang.Assert:java.util.Map notEmpty(java.util.Map)"
        ]
    },
    "cn.hutool.db.ds.hikari.HikariDSFactory:com.zaxxer.hikari.HikariDataSource createDataSource(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.ds.hikari.HikariDSFactory:javax.sql.DataSource getDataSource(java.lang.String)"
        ]
    },
    "cn.hutool.core.map.MapUtil:java.util.TreeMap sort(java.util.Map,java.util.Comparator)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.map.MapUtil:java.util.TreeMap sort(java.util.Map)"
        ]
    },
    "cn.hutool.setting.dialect.Props:void <init>(java.util.Properties)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.setting.Setting:java.lang.String getByGroup(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.ds.jndi.JndiDSFactory:javax.sql.DataSource createDataSource(java.lang.String)",
            "cn.hutool.db.nosql.mongo.MongoDS:com.mongodb.ServerAddress createServerAddress(java.lang.String)",
            "cn.hutool.setting.AbsSetting$1:java.lang.Object value(java.lang.String,java.lang.reflect.Type)",
            "cn.hutool.setting.AbsSetting$1:boolean containsKey(java.lang.String)",
            "cn.hutool.setting.AbsSetting:java.lang.String getStr(java.lang.String,java.lang.String)",
            "cn.hutool.setting.AbsSetting:java.lang.String getStr(java.lang.String,java.lang.String,java.lang.String)",
            "cn.hutool.setting.AbsSetting:java.lang.String getByGroupWithLog(java.lang.String,java.lang.String)",
            "cn.hutool.setting.AbsSetting:java.lang.String[] getStrings(java.lang.String,java.lang.String,java.lang.String)",
            "cn.hutool.setting.AbsSetting:java.lang.Integer getInt(java.lang.String,java.lang.String,java.lang.Integer)",
            "cn.hutool.setting.AbsSetting:java.lang.Boolean getBool(java.lang.String,java.lang.String,java.lang.Boolean)",
            "cn.hutool.setting.AbsSetting:java.lang.Long getLong(java.lang.String,java.lang.String,java.lang.Long)",
            "cn.hutool.setting.AbsSetting:java.lang.Character getChar(java.lang.String,java.lang.String)",
            "cn.hutool.setting.AbsSetting:java.lang.Double getDouble(java.lang.String,java.lang.String,java.lang.Double)"
        ]
    },
    "cn.hutool.setting.Setting:java.lang.String get(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.setting.Setting:java.lang.String get(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.setting.Setting:java.lang.Object get(java.lang.Object)"
        ]
    },
    "cn.hutool.setting.Setting:java.lang.String remove(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.setting.Setting:java.lang.String remove(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.DbUtil:void setShowSqlGlobal(cn.hutool.setting.Setting)",
            "cn.hutool.db.ds.tomcat.TomcatDSFactory:java.lang.String getAndRemoveProperty(cn.hutool.setting.Setting,java.lang.String,java.lang.String)",
            "cn.hutool.setting.Setting:java.lang.Object getAndRemove(java.lang.String[])",
            "cn.hutool.setting.Setting:java.lang.String getAndRemoveStr(java.lang.String[])",
            "cn.hutool.setting.Setting:java.lang.Object remove(java.lang.Object)"
        ]
    },
    "cn.hutool.setting.Setting:boolean containsKey(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.setting.Setting:boolean containsKey(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.annotation.CombinationAnnotationElement:boolean isAnnotationPresent(java.lang.Class)",
            "cn.hutool.core.bean.copier.provider.BeanValueProvider:boolean containsKey(java.lang.String)",
            "cn.hutool.core.bean.copier.provider.MapValueProvider:boolean containsKey(java.lang.String)",
            "cn.hutool.core.map.MapProxy:boolean containsKey(java.lang.Object)",
            "cn.hutool.core.map.MapUtil:java.util.Map filter(java.util.Map,java.lang.Object[])",
            "cn.hutool.core.util.ClassUtil:boolean isPrimitiveWrapper(java.lang.Class)",
            "cn.hutool.db.sql.NamedSql:void parse(java.lang.String,java.util.Map)",
            "cn.hutool.http.HTMLFilter:void <init>(java.util.Map)",
            "cn.hutool.http.HTMLFilter:java.lang.String processTag(java.lang.String)",
            "cn.hutool.http.HTMLFilter:boolean allowed(java.lang.String)",
            "cn.hutool.json.JSONObject:boolean containsKey(java.lang.Object)",
            "cn.hutool.json.JSONObject:cn.hutool.json.JSONObject putOnce(java.lang.String,java.lang.Object)"
        ]
    },
    "cn.hutool.setting.Setting:boolean containsValue(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.setting.Setting:boolean containsValue(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.map.MapProxy:boolean containsValue(java.lang.Object)",
            "cn.hutool.json.JSONObject:boolean containsValue(java.lang.Object)"
        ]
    },
    "cn.hutool.setting.Setting:cn.hutool.setting.Setting clear(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.setting.Setting:void clear()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.lang.SimpleCache:void clear()",
            "cn.hutool.core.lang.Singleton:void destroy()",
            "cn.hutool.core.map.MapProxy:void clear()",
            "cn.hutool.core.map.MapUtil:java.util.Map filter(java.util.Map,cn.hutool.core.lang.Editor)",
            "cn.hutool.core.map.MapUtil:java.util.Map filter(java.util.Map,cn.hutool.core.lang.Filter)",
            "cn.hutool.core.map.MapUtil:java.util.Map filter(java.util.Map,java.lang.Object[])",
            "cn.hutool.cache.impl.AbstractCache:void clear()",
            "cn.hutool.db.ds.c3p0.C3p0DSFactory:void destroy()",
            "cn.hutool.db.ds.dbcp.DbcpDSFactory:void destroy()",
            "cn.hutool.db.ds.druid.DruidDSFactory:void destroy()",
            "cn.hutool.db.ds.hikari.HikariDSFactory:void destroy()",
            "cn.hutool.db.ds.pooled.PooledDSFactory:void destroy()",
            "cn.hutool.db.ds.simple.SimpleDSFactory:void destroy()",
            "cn.hutool.db.ds.tomcat.TomcatDSFactory:void destroy()",
            "cn.hutool.db.nosql.mongo.MongoFactory:void closeAll()",
            "cn.hutool.extra.ssh.JschSessionPool:void closeAll()",
            "cn.hutool.http.GlobalHeaders:cn.hutool.http.GlobalHeaders putDefault(boolean)",
            "cn.hutool.http.HTMLFilter:void reset()",
            "cn.hutool.setting.profile.Profile:cn.hutool.setting.profile.Profile clear()",
            "cn.hutool.json.JSONObject:void clear()"
        ]
    },
    "cn.hutool.setting.Setting:java.util.Set keySet(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.setting.Setting:java.util.Set keySet()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.map.MapProxy:java.util.Set keySet()",
            "cn.hutool.core.util.ClassLoaderUtil:void <clinit>()",
            "cn.hutool.extra.servlet.multipart.MultipartFormData:java.util.Set getParamNames()",
            "cn.hutool.extra.servlet.multipart.MultipartFormData:java.util.Set getFileParamNames()",
            "cn.hutool.http.HTMLFilter:java.lang.String checkTags(java.lang.String)",
            "cn.hutool.json.JSONObject:java.util.Set keySet()",
            "cn.hutool.poi.excel.ExcelWriter:cn.hutool.poi.excel.ExcelWriter writeRow(java.util.Map,boolean)",
            "cn.hutool.poi.excel.ExcelWriter:java.util.Comparator getInitedAliasComparator()"
        ]
    },
    "cn.hutool.setting.Setting:java.util.Collection values(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.setting.Setting:java.util.Collection values()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.annotation.CombinationAnnotationElement:java.lang.'annotation'.Annotation[] getAnnotations()",
            "cn.hutool.core.annotation.CombinationAnnotationElement:java.lang.'annotation'.Annotation[] getDeclaredAnnotations()",
            "cn.hutool.core.bean.BeanDesc:java.util.Collection getProps()",
            "cn.hutool.core.map.MapProxy:java.util.Collection values()",
            "cn.hutool.core.util.ObjectUtil:boolean contains(java.lang.Object,java.lang.Object)",
            "cn.hutool.cache.impl.AbstractCache:java.util.Iterator cacheObjIterator()",
            "cn.hutool.cache.impl.FIFOCache:int pruneCache()",
            "cn.hutool.cache.impl.LFUCache:int pruneCache()",
            "cn.hutool.cache.impl.LRUCache:int pruneCache()",
            "cn.hutool.cache.impl.TimedCache:int pruneCache()",
            "cn.hutool.db.ds.c3p0.C3p0DSFactory:void destroy()",
            "cn.hutool.db.ds.dbcp.DbcpDSFactory:void destroy()",
            "cn.hutool.db.ds.druid.DruidDSFactory:void destroy()",
            "cn.hutool.db.ds.hikari.HikariDSFactory:void destroy()",
            "cn.hutool.db.ds.pooled.PooledDSFactory:void destroy()",
            "cn.hutool.db.ds.simple.SimpleDSFactory:void destroy()",
            "cn.hutool.db.ds.tomcat.TomcatDSFactory:void destroy()",
            "cn.hutool.db.nosql.mongo.MongoFactory:void closeAll()",
            "cn.hutool.extra.ssh.JschSessionPool:void closeAll()",
            "cn.hutool.json.JSONObject:java.util.Collection values()",
            "cn.hutool.poi.excel.ExcelWriter:cn.hutool.poi.excel.ExcelWriter writeRow(java.util.Map,boolean)"
        ]
    },
    "cn.hutool.setting.Setting:java.util.Set entrySet(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.setting.Setting:java.util.Set entrySet()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.collection.CollUtil:java.util.LinkedHashMap sortByEntry(java.util.Map,java.util.Comparator)",
            "cn.hutool.core.collection.CollUtil:void forEach(java.util.Map,cn.hutool.core.collection.CollUtil$KVConsumer)",
            "cn.hutool.core.convert.BasicType:void <clinit>()",
            "cn.hutool.core.convert.impl.MapConverter:void convertMapToMap(java.util.Map,java.util.Map)",
            "cn.hutool.core.date.format.FastDateParser:java.util.Map appendDisplayNames(java.util.Calendar,java.util.Locale,int,java.lang.StringBuilder)",
            "cn.hutool.core.io.file.FileWriter:java.io.File writeMap(java.util.Map,cn.hutool.core.io.file.LineSeparator,java.lang.String,boolean)",
            "cn.hutool.core.io.FileTypeUtil:java.lang.String getType(java.lang.String)",
            "cn.hutool.core.map.CustomKeyLinkedMap:void putAll(java.util.Map)",
            "cn.hutool.core.map.CustomKeyMap:void putAll(java.util.Map)",
            "cn.hutool.core.map.MapProxy:java.util.Set entrySet()",
            "cn.hutool.core.map.MapUtil:java.util.Map toListMap(java.lang.Iterable)",
            "cn.hutool.core.map.MapUtil:java.util.List toMapList(java.util.Map)",
            "cn.hutool.core.map.MapUtil:java.lang.String join(java.util.Map,java.lang.String,java.lang.String,boolean)",
            "cn.hutool.core.map.MapUtil:java.util.Map filter(java.util.Map,cn.hutool.core.lang.Editor)",
            "cn.hutool.core.map.MapUtil:java.util.Map filter(java.util.Map,cn.hutool.core.lang.Filter)",
            "cn.hutool.core.map.MapUtil:java.util.Map inverse(java.util.Map)",
            "cn.hutool.core.text.csv.CsvRow:java.util.Map getFieldMap()",
            "cn.hutool.core.text.csv.CsvRow:java.lang.String toString()",
            "cn.hutool.core.util.StrUtil:java.lang.String format(java.lang.CharSequence,java.util.Map)",
            "cn.hutool.core.util.XmlUtil:void mapToXml(org.w3c.dom.Document,org.w3c.dom.Element,java.util.Map)",
            "cn.hutool.db.ds.druid.DruidDSFactory:com.alibaba.druid.pool.DruidDataSource createDataSource(java.lang.String)",
            "cn.hutool.extra.servlet.ServletUtil:java.util.Map getParamMap(javax.servlet.ServletRequest)",
            "cn.hutool.extra.template.engine.velocity.VelocityUtil:void merge(org.apache.velocity.Template,org.apache.velocity.VelocityContext,java.io.Writer)",
            "cn.hutool.http.GlobalHeaders:cn.hutool.http.GlobalHeaders header(java.util.Map)",
            "cn.hutool.http.HttpBase:java.lang.Object header(java.util.Map,boolean)",
            "cn.hutool.http.HttpBase:java.lang.Object addHeaders(java.util.Map)",
            "cn.hutool.http.HttpBase:java.lang.String toString()",
            "cn.hutool.http.HttpConnection:cn.hutool.http.HttpConnection header(java.util.Map,boolean)",
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest form(java.util.Map)",
            "cn.hutool.http.HttpRequest:void writeForm(java.io.OutputStream)",
            "cn.hutool.http.HttpRequest:void writeFileForm(java.io.OutputStream)",
            "cn.hutool.http.HttpResponse:java.lang.String toString()",
            "cn.hutool.http.HttpUtil:java.lang.String toParams(java.util.Map,java.nio.charset.Charset)",
            "cn.hutool.http.HttpUtil:java.util.HashMap decodeParamMap(java.lang.String,java.lang.String)",
            "cn.hutool.http.webservice.SoapRequest:java.lang.String toSoapXml()",
            "cn.hutool.setting.GroupedMap:cn.hutool.setting.GroupedMap putAll(java.lang.String,java.util.Map)",
            "cn.hutool.json.JSONObject:void <init>(java.lang.Object,boolean)",
            "cn.hutool.json.JSONObject:void putAll(java.util.Map)",
            "cn.hutool.json.JSONObject:java.util.Set entrySet()"
        ]
    },
    "cn.hutool.json.XML:cn.hutool.json.JSONObject toJSONObject(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.json.JSONUtil:cn.hutool.json.JSONObject parseFromXml(java.lang.String)",
            "cn.hutool.json.JSONUtil:cn.hutool.json.JSONObject xmlToJson(java.lang.String)"
        ]
    },
    "cn.hutool.cron.CronUtil:java.lang.String schedule(java.lang.String,cn.hutool.cron.task.Task)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.cron.Scheduler:java.lang.String schedule(java.lang.String,java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.cron.CronUtil:java.lang.String schedule(java.lang.String,java.lang.Runnable)"
        ]
    },
    "cn.hutool.dfa.SensitiveUtil:boolean containsSensitive(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.dfa.SensitiveUtil:java.lang.String getFindedFirstSensitive(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.dfa.SensitiveUtil:java.util.List getFindedAllSensitive(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.dfa.SensitiveUtil:java.util.List getFindedAllSensitive(java.lang.Object,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.json.JSONSupport:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.DynaBean:java.lang.String toString()",
            "cn.hutool.core.collection.CollUtil$6:int compare(java.util.Map$Entry,java.util.Map$Entry)",
            "cn.hutool.core.convert.AbstractConverter:java.lang.String convertToStr(java.lang.Object)",
            "cn.hutool.core.convert.impl.ArrayConverter:java.lang.Object convertObjectToArray(java.lang.Object)",
            "cn.hutool.core.convert.impl.CurrencyConverter:java.util.Currency convertInternal(java.lang.Object)",
            "cn.hutool.core.convert.NumberWordFormater:java.lang.String format(java.lang.Object)",
            "cn.hutool.core.getter.OptNullBasicTypeFromStringGetter:java.lang.Object getObj(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.io.file.FileWriter:java.io.File writeLines(java.util.Collection,cn.hutool.core.io.file.LineSeparator,boolean)",
            "cn.hutool.core.io.watch.watchers.DelayWatcher$1:void run()",
            "cn.hutool.core.io.watch.watchers.DelayWatcher:void onDelayModify(java.nio.file.WatchEvent,java.nio.file.Path)",
            "cn.hutool.core.io.watch.WatchMonitor:void watch(cn.hutool.core.io.watch.Watcher)",
            "cn.hutool.core.lang.ConsistentHash$1:java.lang.Integer hash(java.lang.Object)",
            "cn.hutool.core.lang.ConsistentHash:void add(java.lang.Object)",
            "cn.hutool.core.lang.ConsistentHash:void remove(java.lang.Object)",
            "cn.hutool.core.lang.mutable.MutableObj:java.lang.String toString()",
            "cn.hutool.core.map.CamelCaseLinkedMap:java.lang.Object customKey(java.lang.Object)",
            "cn.hutool.core.map.CamelCaseMap:java.lang.Object customKey(java.lang.Object)",
            "cn.hutool.core.map.CaseInsensitiveLinkedMap:java.lang.Object customKey(java.lang.Object)",
            "cn.hutool.core.map.CaseInsensitiveMap:java.lang.Object customKey(java.lang.Object)",
            "cn.hutool.core.util.ArrayUtil:java.lang.String toString(java.lang.Object)",
            "cn.hutool.core.util.ObjectUtil:boolean contains(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.util.StrUtil:java.lang.String str(java.lang.Object,java.nio.charset.Charset)",
            "cn.hutool.core.util.StrUtil:java.lang.String toString(java.lang.Object)",
            "cn.hutool.core.util.XmlUtil:void mapToXml(org.w3c.dom.Document,org.w3c.dom.Element,java.util.Map)",
            "cn.hutool.extra.servlet.ServletUtil:void setHeader(javax.servlet.http.HttpServletResponse,java.lang.String,java.lang.Object)",
            "cn.hutool.extra.template.engine.velocity.VelocityUtil:void toFile(org.apache.velocity.Template,org.apache.velocity.VelocityContext,java.lang.String)",
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest form(java.lang.String,java.lang.Object,java.lang.Object[])",
            "cn.hutool.setting.dialect.Props:java.lang.Object getObj(java.lang.String,java.lang.Object)",
            "cn.hutool.setting.dialect.Props:void setProperty(java.lang.String,java.lang.Object)",
            "cn.hutool.json.InternalJSONUtil:java.io.Writer writeValue(java.io.Writer,java.lang.Object,int,int)",
            "cn.hutool.json.InternalJSONUtil:java.lang.String valueToString(java.lang.Object)",
            "cn.hutool.json.JSONObject:java.io.Writer write(java.io.Writer,int,int)",
            "cn.hutool.json.JSONObject:void init(cn.hutool.json.JSONTokener)",
            "cn.hutool.json.JSONUtil:java.lang.Object wrap(java.lang.Object,boolean)",
            "cn.hutool.json.XML:java.lang.String toXml(java.lang.Object,java.lang.String)",
            "cn.hutool.poi.excel.cell.CellUtil:void setCellValue(org.apache.poi.ss.usermodel.Cell,java.lang.Object,cn.hutool.poi.excel.StyleSet,boolean)",
            "cn.hutool.poi.excel.ExcelReader:java.util.List aliasHeader(java.util.List)"
        ]
    },
    "cn.hutool.core.lang.Range:void <init>(java.lang.Object,java.lang.Object,cn.hutool.core.lang.Range$Steper,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.date.DateRange:void <init>(java.util.Date,java.util.Date,cn.hutool.core.date.DateField,int,boolean,boolean)",
            "cn.hutool.core.lang.Range:void <init>(java.lang.Object,java.lang.Object,cn.hutool.core.lang.Range$Steper)"
        ]
    },
    "cn.hutool.core.lang.Range:java.lang.Object nextUncheck()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.lang.Range:java.lang.Object next()"
        ]
    },
    "cn.hutool.json.JSONUtil:java.lang.Object toBean(java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.json.JSONUtil:java.lang.Object toBean(cn.hutool.json.JSONObject,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.lang.Dict:java.lang.Enum getEnum(java.lang.Class,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.setting.dialect.Props:java.lang.Enum getEnum(java.lang.Class,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.convert.Convert:java.lang.Object convert(java.lang.reflect.Type,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.Convert:java.lang.Object convert(java.lang.Class,java.lang.Object)",
            "cn.hutool.db.handler.HandleHelper:java.lang.Object getColumnValue(java.sql.ResultSet,java.lang.String,int,java.lang.reflect.Type)",
            "cn.hutool.db.handler.HandleHelper:java.lang.Object getColumnValue(java.sql.ResultSet,int,int,java.lang.reflect.Type)"
        ]
    },
    "cn.hutool.core.convert.Convert:java.lang.Object convert(java.lang.Class,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.Convert:java.lang.String toStr(java.lang.Object,java.lang.String)",
            "cn.hutool.core.convert.Convert:java.lang.Character toChar(java.lang.Object,java.lang.Character)",
            "cn.hutool.core.convert.Convert:java.lang.Byte toByte(java.lang.Object,java.lang.Byte)",
            "cn.hutool.core.convert.Convert:java.lang.Short toShort(java.lang.Object,java.lang.Short)",
            "cn.hutool.core.convert.Convert:java.lang.Number toNumber(java.lang.Object,java.lang.Number)",
            "cn.hutool.core.convert.Convert:java.lang.Integer toInt(java.lang.Object,java.lang.Integer)",
            "cn.hutool.core.convert.Convert:java.lang.Long toLong(java.lang.Object,java.lang.Long)",
            "cn.hutool.core.convert.Convert:java.lang.Double toDouble(java.lang.Object,java.lang.Double)",
            "cn.hutool.core.convert.Convert:java.lang.Float toFloat(java.lang.Object,java.lang.Float)",
            "cn.hutool.core.convert.Convert:java.lang.Boolean toBool(java.lang.Object,java.lang.Boolean)",
            "cn.hutool.core.convert.Convert:java.math.BigInteger toBigInteger(java.lang.Object,java.math.BigInteger)",
            "cn.hutool.core.convert.Convert:java.math.BigDecimal toBigDecimal(java.lang.Object,java.math.BigDecimal)",
            "cn.hutool.core.convert.Convert:java.util.Date toDate(java.lang.Object,java.util.Date)"
        ]
    },
    "cn.hutool.core.convert.impl.ArrayConverter:java.lang.Object convertArrayToArray(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.impl.ArrayConverter:java.lang.Object convertInternal(java.lang.Object)",
            "cn.hutool.core.convert.impl.ArrayConverter:java.lang.Object convertObjectToArray(java.lang.Object)"
        ]
    },
    "cn.hutool.core.convert.impl.ArrayConverter:java.lang.Object[] convertToSingleElementArray(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.impl.ArrayConverter:java.lang.Object convertObjectToArray(java.lang.Object)"
        ]
    },
    "cn.hutool.core.convert.impl.AtomicReferenceConverter:java.util.concurrent.atomic.AtomicReference convertInternal(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.impl.AtomicReferenceConverter:java.lang.Object convertInternal(java.lang.Object)"
        ]
    },
    "cn.hutool.core.convert.impl.ByteArrayConverter:byte[] convertInternal(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.impl.ByteArrayConverter:java.lang.Object convertInternal(java.lang.Object)"
        ]
    },
    "cn.hutool.core.convert.impl.ReferenceConverter:java.lang.ref.Reference convertInternal(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.impl.ReferenceConverter:java.lang.Object convertInternal(java.lang.Object)"
        ]
    },
    "cn.hutool.core.lang.Dict:cn.hutool.core.lang.Dict parse(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.Entity:cn.hutool.db.Entity parseBean(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.ActiveEntity:cn.hutool.db.ActiveEntity parseBean(java.lang.Object)",
            "cn.hutool.db.Entity:cn.hutool.db.Entity parse(java.lang.Object)",
            "cn.hutool.db.Entity:cn.hutool.core.lang.Dict parseBean(java.lang.Object)"
        ]
    },
    "cn.hutool.db.ActiveEntity:cn.hutool.db.ActiveEntity parseBean(java.lang.Object,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.ActiveEntity:cn.hutool.db.ActiveEntity parse(java.lang.Object,boolean,boolean)",
            "cn.hutool.db.ActiveEntity:cn.hutool.db.ActiveEntity parseWithUnderlineCase(java.lang.Object)",
            "cn.hutool.db.ActiveEntity:cn.hutool.db.Entity parseBean(java.lang.Object,boolean,boolean)",
            "cn.hutool.db.ActiveEntity:cn.hutool.core.lang.Dict parseBean(java.lang.Object,boolean,boolean)"
        ]
    },
    "cn.hutool.db.Entity:cn.hutool.db.Entity parse(java.lang.Object,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.Entity:cn.hutool.db.Entity parseWithUnderlineCase(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.Entity:cn.hutool.core.lang.Dict parseBean(java.lang.Object,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.sql.SqlBuilder:cn.hutool.db.sql.SqlBuilder select(boolean,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.sql.SqlBuilder:cn.hutool.db.sql.SqlBuilder select(java.lang.String[])"
        ]
    },
    "cn.hutool.db.sql.SqlBuilder:cn.hutool.db.sql.SqlBuilder select(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.sql.SqlBuilder:cn.hutool.db.sql.SqlBuilder query(cn.hutool.db.sql.Query)"
        ]
    },
    "cn.hutool.json.InternalJSONUtil$1:java.lang.Object value(java.lang.Object,java.lang.reflect.Type)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.copier.BeanCopier:void valueProviderToBean(cn.hutool.core.bean.copier.ValueProvider,java.lang.Object)"
        ]
    },
    "cn.hutool.json.JSONArray:java.lang.Object toArray(java.lang.Class,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.json.InternalJSONUtil:java.lang.Object jsonConvert(java.lang.reflect.Type,java.lang.Object,boolean)",
            "cn.hutool.json.JSONArray:java.lang.Object toArray(java.lang.Class)"
        ]
    },
    "cn.hutool.json.JSONArray:java.lang.Object getByExp(java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.json.JSONObject:java.lang.Object getByExp(java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.FileUtil:java.lang.String subPath(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.FileUtil:java.lang.String subPath(java.lang.String,java.io.File)"
        ]
    },
    "cn.hutool.core.io.resource.ClassPathResource:java.lang.String getAbsolutePath()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.resource.ClassPathResource:java.lang.String normalizePath(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.resource.ClassPathResource:void <init>(java.lang.String,java.lang.ClassLoader,java.lang.Class)"
        ]
    },
    "cn.hutool.core.util.ClassUtil:java.lang.String getClassPath(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ClassUtil:java.lang.String getClassPath()"
        ]
    },
    "cn.hutool.core.bean.DynaBean:cn.hutool.core.bean.DynaBean create(java.lang.Class,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.collection.CollUtil:java.util.Map createMap(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.aop.ProxyUtil:java.lang.Object proxy(java.lang.Object,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ClassUtil:java.lang.reflect.Method getDeclaredMethodOfObj(java.lang.Object,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.annotation.AnnotationUtil:java.lang.Object getAnnotationValue(java.lang.reflect.AnnotatedElement,java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.annotation.AnnotationUtil:java.lang.Object getAnnotationValue(java.lang.reflect.AnnotatedElement,java.lang.Class)"
        ]
    },
    "cn.hutool.core.util.ReflectUtil:java.lang.Object invoke(java.lang.Object,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.DynaBean:java.lang.Object invoke(java.lang.String,java.lang.Object[])",
            "cn.hutool.core.util.ObjectUtil:java.lang.Object clone(java.lang.Object)",
            "cn.hutool.db.Entity:java.sql.Time getTime(java.lang.String)",
            "cn.hutool.db.Entity:java.util.Date getDate(java.lang.String)",
            "cn.hutool.db.Entity:java.sql.Timestamp getTimestamp(java.lang.String)"
        ]
    },
    "cn.hutool.core.date.format.FastDateParser$StrategyParser:cn.hutool.core.date.format.FastDateParser$StrategyAndWidth getNextStrategy()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.date.format.FastDateParser:void init(java.util.Calendar)"
        ]
    },
    "cn.hutool.http.HttpBase:java.lang.String header(cn.hutool.http.Header)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HttpRequest:boolean isKeepAlive()",
            "cn.hutool.http.HttpRequest:java.lang.String contentLength()",
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest body(java.lang.String,java.lang.String)",
            "cn.hutool.http.HttpRequest:void sendFormUrlEncoded()",
            "cn.hutool.http.HttpResponse:java.lang.String contentEncoding()",
            "cn.hutool.http.HttpResponse:java.lang.String getCookieStr()",
            "cn.hutool.http.HttpResponse:void readBody(java.io.InputStream)",
            "cn.hutool.http.HttpResponse:java.lang.String getFileNameFromDisposition()"
        ]
    },
    "cn.hutool.core.bean.BeanResolver:java.lang.Object resolve()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.BeanResolver:java.lang.Object resolveBean(java.lang.Object,java.lang.String)"
        ]
    },
    "cn.hutool.core.bean.BeanUtil:java.lang.Object getProperty(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.comparator.PropertyComparator:int compare(java.lang.Object,java.lang.Object)"
        ]
    },
    "cn.hutool.json.JSONArray:java.lang.Object getByPath(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.json.JSONArray:java.lang.Object getByExp(java.lang.String)",
            "cn.hutool.json.JSONArray:java.lang.Object getByPath(java.lang.String,java.lang.Class)",
            "cn.hutool.json.JSONUtil:java.lang.Object getByExp(cn.hutool.json.JSON,java.lang.String)",
            "cn.hutool.json.JSONUtil:java.lang.Object getByPath(cn.hutool.json.JSON,java.lang.String)"
        ]
    },
    "cn.hutool.json.JSONObject:java.lang.Object getByPath(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.json.JSONObject:java.lang.Object getByExp(java.lang.String)",
            "cn.hutool.json.JSONObject:java.lang.Object getByPath(java.lang.String,java.lang.Class)",
            "cn.hutool.json.JSONUtil:java.lang.Object getByExp(cn.hutool.json.JSON,java.lang.String)",
            "cn.hutool.json.JSONUtil:java.lang.Object getByPath(cn.hutool.json.JSON,java.lang.String)"
        ]
    },
    "cn.hutool.core.bean.BeanPath:void set(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.BeanUtil:void setProperty(java.lang.Object,java.lang.String,java.lang.Object)",
            "cn.hutool.json.JSONArray:void putByPath(java.lang.String,java.lang.Object)",
            "cn.hutool.json.JSONObject:void putByPath(java.lang.String,java.lang.Object)"
        ]
    },
    "cn.hutool.core.getter.OptNullBasicTypeFromStringGetter:java.lang.Integer getInt(java.lang.Object,java.lang.Integer)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.getter.OptNullBasicTypeGetter:java.lang.Integer getInt(java.lang.Object)"
        ]
    },
    "cn.hutool.core.getter.OptNullBasicTypeFromStringGetter:java.lang.Short getShort(java.lang.Object,java.lang.Short)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.getter.OptNullBasicTypeGetter:java.lang.Short getShort(java.lang.Object)"
        ]
    },
    "cn.hutool.core.getter.OptNullBasicTypeFromStringGetter:java.lang.Boolean getBool(java.lang.Object,java.lang.Boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.getter.OptNullBasicTypeGetter:java.lang.Boolean getBool(java.lang.Object)"
        ]
    },
    "cn.hutool.core.getter.OptNullBasicTypeFromStringGetter:java.lang.Long getLong(java.lang.Object,java.lang.Long)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.getter.OptNullBasicTypeGetter:java.lang.Long getLong(java.lang.Object)"
        ]
    },
    "cn.hutool.core.getter.OptNullBasicTypeFromStringGetter:java.lang.Character getChar(java.lang.Object,java.lang.Character)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.getter.OptNullBasicTypeGetter:java.lang.Character getChar(java.lang.Object)"
        ]
    },
    "cn.hutool.core.getter.OptNullBasicTypeFromStringGetter:java.lang.Float getFloat(java.lang.Object,java.lang.Float)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.getter.OptNullBasicTypeGetter:java.lang.Float getFloat(java.lang.Object)"
        ]
    },
    "cn.hutool.core.getter.OptNullBasicTypeFromStringGetter:java.lang.Double getDouble(java.lang.Object,java.lang.Double)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.getter.OptNullBasicTypeGetter:java.lang.Double getDouble(java.lang.Object)"
        ]
    },
    "cn.hutool.core.getter.OptNullBasicTypeFromStringGetter:java.lang.Byte getByte(java.lang.Object,java.lang.Byte)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.getter.OptNullBasicTypeGetter:java.lang.Byte getByte(java.lang.Object)"
        ]
    },
    "cn.hutool.core.getter.OptNullBasicTypeFromStringGetter:java.math.BigDecimal getBigDecimal(java.lang.Object,java.math.BigDecimal)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.getter.OptNullBasicTypeGetter:java.math.BigDecimal getBigDecimal(java.lang.Object)"
        ]
    },
    "cn.hutool.core.getter.OptNullBasicTypeFromStringGetter:java.math.BigInteger getBigInteger(java.lang.Object,java.math.BigInteger)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.getter.OptNullBasicTypeGetter:java.math.BigInteger getBigInteger(java.lang.Object)"
        ]
    },
    "cn.hutool.core.getter.OptNullBasicTypeFromStringGetter:java.util.Date getDate(java.lang.Object,java.util.Date)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.getter.OptNullBasicTypeGetter:java.util.Date getDate(java.lang.Object)"
        ]
    },
    "cn.hutool.core.util.ArrayUtil:java.lang.Object[] removeNull(java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ArrayUtil:java.lang.String[] nullToEmpty(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.bean.BeanUtil:java.beans.PropertyDescriptor[] getPropertyDescriptors(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.BeanUtil:java.util.Map internalGetPropertyDescriptorMap(java.lang.Class,boolean)"
        ]
    },
    "cn.hutool.core.util.ArrayUtil:java.lang.CharSequence[] removeEmpty(java.lang.CharSequence[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ArrayUtil:java.lang.CharSequence[] removeBlank(java.lang.CharSequence[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ClassUtil:java.util.List getPublicMethods(java.lang.Class,java.lang.reflect.Method[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ClassUtil:java.util.List getPublicMethods(java.lang.Class,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.date.format.FastDateParser:boolean parse(java.lang.String,java.text.ParsePosition,java.util.Calendar)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.date.format.FastDateFormat:boolean parse(java.lang.String,java.text.ParsePosition,java.util.Calendar)",
            "cn.hutool.core.date.format.FastDateParser:java.util.Date parse(java.lang.String,java.text.ParsePosition)"
        ]
    },
    "cn.hutool.core.exceptions.ExceptionUtil:java.lang.String stacktraceToString(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.bean.BeanUtil:cn.hutool.core.bean.BeanDesc getBeanDesc(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.BeanUtil:java.util.Map beanToMap(java.lang.Object,java.util.Map,boolean,cn.hutool.core.lang.Editor)",
            "cn.hutool.core.bean.copier.BeanCopier:void valueProviderToBean(cn.hutool.core.bean.copier.ValueProvider,java.lang.Object)",
            "cn.hutool.core.bean.copier.provider.BeanValueProvider:void <init>(java.lang.Object,boolean,boolean)",
            "cn.hutool.core.bean.DynaBean:java.lang.Object get(java.lang.String)",
            "cn.hutool.core.bean.DynaBean:void set(java.lang.String,java.lang.Object)",
            "cn.hutool.db.handler.HandleHelper:java.lang.Object handleRow(int,java.sql.ResultSetMetaData,java.sql.ResultSet,java.lang.Class)",
            "cn.hutool.json.JSONObject:void populateMap(java.lang.Object)"
        ]
    },
    "cn.hutool.core.lang.PatternPool:java.util.regex.Pattern get(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.text.StrSpliter:java.util.List splitByRegex(java.lang.String,java.lang.String,int,boolean,boolean)"
        ]
    },
    "cn.hutool.core.util.ReUtil:java.lang.String get(java.lang.String,java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ReUtil:java.lang.String getGroup0(java.lang.String,java.lang.String)",
            "cn.hutool.core.util.ReUtil:java.lang.String getGroup1(java.lang.String,java.lang.String)",
            "cn.hutool.http.HttpResponse:java.lang.String getFileNameFromDisposition()",
            "cn.hutool.setting.SettingLoader:java.lang.String replaceVar(java.lang.String,java.lang.String)"
        ]
    },
    "cn.hutool.core.util.ReUtil:java.lang.String delFirst(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ReUtil:java.lang.String delAll(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HtmlUtil:java.lang.String removeHtmlTag(java.lang.String,boolean,java.lang.String[])"
        ]
    },
    "cn.hutool.core.util.ReUtil:java.lang.String delPre(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ReUtil:int count(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ReUtil:boolean contains(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ReUtil:boolean isMatch(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.lang.Validator:boolean isMactchRegex(java.lang.String,java.lang.String)"
        ]
    },
    "cn.hutool.core.bean.BeanUtil:java.lang.Object trimStrFields(java.lang.Object,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ReflectUtil:java.lang.reflect.Field getField(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ReflectUtil:java.lang.Object getFieldValue(java.lang.Object,java.lang.String)",
            "cn.hutool.core.util.ReflectUtil:void setFieldValue(java.lang.Object,java.lang.String,java.lang.Object)"
        ]
    },
    "cn.hutool.core.bean.BeanDesc:cn.hutool.core.bean.BeanDesc$PropDesc createProp(java.lang.reflect.Field)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.BeanDesc:cn.hutool.core.bean.BeanDesc init()"
        ]
    },
    "cn.hutool.core.util.ClassUtil:java.lang.reflect.Method[] getDeclaredMethods(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ReflectUtil:java.util.Set getMethodNames(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ClassUtil:java.util.Set getDeclaredMethodNames(java.lang.Class)"
        ]
    },
    "cn.hutool.system.SystemUtil:void dumpSystemInfo(java.io.PrintWriter)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.system.SystemUtil:void dumpSystemInfo()"
        ]
    },
    "cn.hutool.db.Db:java.sql.Connection getConnection()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.AbstractDb:java.lang.Object query(java.lang.String,cn.hutool.db.handler.RsHandler,java.lang.Object[])",
            "cn.hutool.db.AbstractDb:int execute(java.lang.String,java.lang.Object[])",
            "cn.hutool.db.AbstractDb:java.lang.Long executeForGeneratedKey(java.lang.String,java.lang.Object[])",
            "cn.hutool.db.AbstractDb:int[] executeBatch(java.lang.String,java.lang.Object[][])",
            "cn.hutool.db.AbstractDb:int insert(cn.hutool.db.Entity)",
            "cn.hutool.db.AbstractDb:int insertOrUpdate(cn.hutool.db.Entity,java.lang.String[])",
            "cn.hutool.db.AbstractDb:int[] insert(java.util.Collection)",
            "cn.hutool.db.AbstractDb:java.util.List insertForGeneratedKeys(cn.hutool.db.Entity)",
            "cn.hutool.db.AbstractDb:java.lang.Long insertForGeneratedKey(cn.hutool.db.Entity)",
            "cn.hutool.db.AbstractDb:int del(cn.hutool.db.Entity)",
            "cn.hutool.db.AbstractDb:int update(cn.hutool.db.Entity,cn.hutool.db.Entity)",
            "cn.hutool.db.AbstractDb:java.lang.Object find(java.util.Collection,cn.hutool.db.Entity,cn.hutool.db.handler.RsHandler)",
            "cn.hutool.db.AbstractDb:java.lang.Object find(cn.hutool.db.sql.Query,cn.hutool.db.handler.RsHandler)",
            "cn.hutool.db.AbstractDb:int count(cn.hutool.db.Entity)",
            "cn.hutool.db.AbstractDb:java.lang.Object page(java.util.Collection,cn.hutool.db.Entity,int,int,cn.hutool.db.handler.RsHandler)",
            "cn.hutool.db.AbstractDb:java.lang.Object page(java.util.Collection,cn.hutool.db.Entity,cn.hutool.db.Page,cn.hutool.db.handler.RsHandler)",
            "cn.hutool.db.AbstractDb:cn.hutool.db.PageResult page(java.util.Collection,cn.hutool.db.Entity,int,int)",
            "cn.hutool.db.AbstractDb:cn.hutool.db.PageResult page(java.util.Collection,cn.hutool.db.Entity,cn.hutool.db.Page)",
            "cn.hutool.db.Db:cn.hutool.db.Db tx(cn.hutool.db.transaction.TransactionLevel,cn.hutool.db.transaction.TxFunc)"
        ]
    },
    "cn.hutool.db.Session:java.sql.Connection getConnection()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.AbstractDb:java.lang.Object query(java.lang.String,cn.hutool.db.handler.RsHandler,java.lang.Object[])",
            "cn.hutool.db.AbstractDb:int execute(java.lang.String,java.lang.Object[])",
            "cn.hutool.db.AbstractDb:java.lang.Long executeForGeneratedKey(java.lang.String,java.lang.Object[])",
            "cn.hutool.db.AbstractDb:int[] executeBatch(java.lang.String,java.lang.Object[][])",
            "cn.hutool.db.AbstractDb:int insert(cn.hutool.db.Entity)",
            "cn.hutool.db.AbstractDb:int insertOrUpdate(cn.hutool.db.Entity,java.lang.String[])",
            "cn.hutool.db.AbstractDb:int[] insert(java.util.Collection)",
            "cn.hutool.db.AbstractDb:java.util.List insertForGeneratedKeys(cn.hutool.db.Entity)",
            "cn.hutool.db.AbstractDb:java.lang.Long insertForGeneratedKey(cn.hutool.db.Entity)",
            "cn.hutool.db.AbstractDb:int del(cn.hutool.db.Entity)",
            "cn.hutool.db.AbstractDb:int update(cn.hutool.db.Entity,cn.hutool.db.Entity)",
            "cn.hutool.db.AbstractDb:java.lang.Object find(java.util.Collection,cn.hutool.db.Entity,cn.hutool.db.handler.RsHandler)",
            "cn.hutool.db.AbstractDb:java.lang.Object find(cn.hutool.db.sql.Query,cn.hutool.db.handler.RsHandler)",
            "cn.hutool.db.AbstractDb:int count(cn.hutool.db.Entity)",
            "cn.hutool.db.AbstractDb:java.lang.Object page(java.util.Collection,cn.hutool.db.Entity,int,int,cn.hutool.db.handler.RsHandler)",
            "cn.hutool.db.AbstractDb:java.lang.Object page(java.util.Collection,cn.hutool.db.Entity,cn.hutool.db.Page,cn.hutool.db.handler.RsHandler)",
            "cn.hutool.db.AbstractDb:cn.hutool.db.PageResult page(java.util.Collection,cn.hutool.db.Entity,int,int)",
            "cn.hutool.db.AbstractDb:cn.hutool.db.PageResult page(java.util.Collection,cn.hutool.db.Entity,cn.hutool.db.Page)",
            "cn.hutool.db.Session:void beginTransaction()",
            "cn.hutool.db.Session:void commit()",
            "cn.hutool.db.Session:void rollback()",
            "cn.hutool.db.Session:void quietRollback()",
            "cn.hutool.db.Session:void rollback(java.sql.Savepoint)",
            "cn.hutool.db.Session:void quietRollback(java.sql.Savepoint)",
            "cn.hutool.db.Session:java.sql.Savepoint setSavepoint()",
            "cn.hutool.db.Session:java.sql.Savepoint setSavepoint(java.lang.String)",
            "cn.hutool.db.Session:void setTransactionIsolation(int)"
        ]
    },
    "cn.hutool.extra.ssh.Sftp:void <init>(java.lang.String,int,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.ssh.JschUtil:cn.hutool.extra.ssh.Sftp createSftp(java.lang.String,int,java.lang.String,java.lang.String)"
        ]
    },
    "cn.hutool.http.GlobalHeaders:java.lang.String header(cn.hutool.http.Header)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.http.GlobalHeaders:cn.hutool.http.GlobalHeaders putDefault(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.GlobalHeaders:void <init>(java.lang.String,int)"
        ]
    },
    "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest contentType(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest body(java.lang.String,java.lang.String)",
            "cn.hutool.http.webservice.SoapRequest:java.lang.String execute()"
        ]
    },
    "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest keepAlive(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest form(java.lang.String,cn.hutool.core.io.resource.Resource)"
        ]
    },
    "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest contentLength(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest body(java.lang.String,java.lang.String)"
        ]
    },
    "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest method(cn.hutool.http.Method)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest post(java.lang.String)",
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest get(java.lang.String)",
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest head(java.lang.String)",
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest options(java.lang.String)",
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest put(java.lang.String)",
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest patch(java.lang.String)",
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest delete(java.lang.String)",
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest trace(java.lang.String)",
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest setMethod(cn.hutool.http.Method)",
            "cn.hutool.http.HttpUtil:cn.hutool.http.HttpRequest createRequest(cn.hutool.http.Method,java.lang.String)"
        ]
    },
    "cn.hutool.log.dialect.commons.ApacheCommonsLogFactory:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.LogFactory:cn.hutool.log.LogFactory doCreate()"
        ]
    },
    "cn.hutool.log.GlobalLogFactory:cn.hutool.log.LogFactory set(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.LogFactory:cn.hutool.log.LogFactory setCurrentLogFactory(java.lang.Class)"
        ]
    },
    "cn.hutool.log.LogFactory:cn.hutool.log.LogFactory setCurrentLogFactory(cn.hutool.log.LogFactory)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.annotation.CombinationAnnotationElement:void <init>(java.lang.reflect.AnnotatedElement)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.annotation.AnnotationUtil:cn.hutool.core.'annotation'.CombinationAnnotationElement toCombination(java.lang.reflect.AnnotatedElement)"
        ]
    },
    "cn.hutool.core.convert.ConverterRegistry$SingletonHolder:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.ConverterRegistry$SingletonHolder:cn.hutool.core.convert.ConverterRegistry access$000()",
            "cn.hutool.core.convert.ConverterRegistry$SingletonHolder:void <clinit>()",
            "cn.hutool.core.convert.ConverterRegistry:cn.hutool.core.convert.ConverterRegistry getInstance()"
        ]
    },
    "cn.hutool.core.io.watch.WatchMonitor$1:java.nio.file.FileVisitResult postVisitDirectory(java.nio.file.Path,java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.watch.WatchMonitor$1:java.nio.file.FileVisitResult postVisitDirectory(java.lang.Object,java.io.IOException)"
        ]
    },
    "cn.hutool.core.collection.CollUtil:java.util.Map zip(java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.XmlUtil:java.util.Map xmlToMap(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.extra.qrcode.QrCodeUtil:com.google.zxing.common.BitMatrix encode(java.lang.String,cn.hutool.extra.qrcode.QrConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.qrcode.QrCodeUtil:java.awt.image.BufferedImage generate(java.lang.String,cn.hutool.extra.qrcode.QrConfig)"
        ]
    },
    "cn.hutool.extra.qrcode.QrCodeUtil:com.google.zxing.common.BitMatrix encode(java.lang.String,com.google.zxing.BarcodeFormat,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.qrcode.QrCodeUtil:com.google.zxing.common.BitMatrix encode(java.lang.String,int,int)"
        ]
    },
    "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest form(java.lang.String,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest form(java.lang.String,java.lang.Object)"
        ]
    },
    "cn.hutool.json.InternalJSONUtil$1:boolean containsKey(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.copier.BeanCopier:void valueProviderToBean(cn.hutool.core.bean.copier.ValueProvider,java.lang.Object)"
        ]
    },
    "cn.hutool.core.bean.BeanException:void <init>(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.DynaBean:java.lang.Object get(java.lang.String)",
            "cn.hutool.core.bean.DynaBean:void set(java.lang.String,java.lang.Object)"
        ]
    },
    "cn.hutool.core.bean.BeanException:void <init>(java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.bean.BeanPath:void init(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.BeanPath:void <init>(java.lang.String)"
        ]
    },
    "cn.hutool.core.clone.CloneRuntimeException:void <init>(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.clone.CloneRuntimeException:void <init>(java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.comparator.ComparatorException:void <init>(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.comparator.ComparatorException:void <init>(java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.comparator.FieldComparator:void <init>(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.convert.ConvertException:void <init>(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.ConverterRegistry:java.lang.Object convert(java.lang.reflect.Type,java.lang.Object,java.lang.Object,boolean)",
            "cn.hutool.core.convert.impl.CastConverter:java.lang.Object convertInternal(java.lang.Object)",
            "cn.hutool.json.InternalJSONUtil:java.lang.Object jsonConvert(java.lang.reflect.Type,java.lang.Object,boolean)"
        ]
    },
    "cn.hutool.core.convert.ConvertException:void <init>(java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.date.DateException:void <init>(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.date.DateTime:java.util.Date parse(java.lang.String,cn.hutool.core.date.format.DateParser)",
            "cn.hutool.core.date.DateUtil:cn.hutool.core.date.DateTime parse(java.lang.String)"
        ]
    },
    "cn.hutool.core.date.DateException:void <init>(java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.date.DateTime:java.util.Date parse(java.lang.String,java.text.DateFormat)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.date.DateTime:void <init>(java.lang.String,java.text.DateFormat)"
        ]
    },
    "cn.hutool.core.date.DateUtil:cn.hutool.core.date.DateTime parseTimeToday(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.date.DateUtil:int age(java.util.Date,java.util.Date)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.date.DateUtil:int ageOfNow(java.util.Date)",
            "cn.hutool.core.util.IdcardUtil:int getAgeByIdCard(java.lang.String,java.util.Date)"
        ]
    },
    "cn.hutool.core.exceptions.DependencyException:void <init>(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.exceptions.DependencyException:void <init>(java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.poi.excel.sax.Excel07SaxReader:org.xml.sax.XMLReader fetchSheetReader()",
            "cn.hutool.poi.PoiChecker:void checkPoiImport()",
            "cn.hutool.poi.PoiChecker:cn.hutool.core.exceptions.DependencyException transError(java.lang.NoClassDefFoundError)"
        ]
    },
    "cn.hutool.core.exceptions.ExceptionUtil:java.lang.String getMessage(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.BeanException:void <init>(java.lang.Throwable)",
            "cn.hutool.core.clone.CloneRuntimeException:void <init>(java.lang.Throwable)",
            "cn.hutool.core.comparator.ComparatorException:void <init>(java.lang.Throwable)",
            "cn.hutool.core.convert.ConvertException:void <init>(java.lang.Throwable)",
            "cn.hutool.core.date.DateException:void <init>(java.lang.Throwable)",
            "cn.hutool.core.exceptions.DependencyException:void <init>(java.lang.Throwable)",
            "cn.hutool.core.exceptions.UtilException:void <init>(java.lang.Throwable)",
            "cn.hutool.core.io.IORuntimeException:void <init>(java.lang.Throwable)",
            "cn.hutool.core.io.resource.NoResourceException:void <init>(java.lang.Throwable)",
            "cn.hutool.core.io.watch.WatchException:void <init>(java.lang.Throwable)",
            "cn.hutool.crypto.CryptoException:void <init>(java.lang.Throwable)",
            "cn.hutool.db.DbRuntimeException:void <init>(java.lang.Throwable)",
            "cn.hutool.extra.ftp.FtpException:void <init>(java.lang.Throwable)",
            "cn.hutool.extra.mail.MailException:void <init>(java.lang.Throwable)",
            "cn.hutool.extra.qrcode.QrCodeException:void <init>(java.lang.Throwable)",
            "cn.hutool.extra.ssh.JschRuntimeException:void <init>(java.lang.Throwable)",
            "cn.hutool.extra.template.TemplateException:void <init>(java.lang.Throwable)",
            "cn.hutool.script.ScriptRuntimeException:void <init>(java.lang.Throwable)",
            "cn.hutool.json.JSONException:void <init>(java.lang.Throwable)",
            "cn.hutool.poi.exceptions.POIException:void <init>(java.lang.Throwable)"
        ]
    },
    "cn.hutool.core.exceptions.NotInitedException:void <init>(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.exceptions.NotInitedException:void <init>(java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.exceptions.StatefulException:void <init>(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.exceptions.UtilException:void <init>(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.collection.CollUtil:java.util.Collection addAll(java.util.Collection,java.lang.Object,java.lang.reflect.Type)",
            "cn.hutool.core.util.ArrayUtil:java.lang.String join(java.lang.Object,java.lang.CharSequence)",
            "cn.hutool.core.util.ClassUtil:java.lang.Object invoke(java.lang.String,boolean,java.lang.Object[])",
            "cn.hutool.core.util.ReflectUtil:java.lang.Object newInstance(java.lang.Class,java.lang.Object[])",
            "cn.hutool.core.util.XmlUtil:org.w3c.dom.Document readXML(java.io.File)",
            "cn.hutool.cron.task.InvokeTask:void <init>(java.lang.String)"
        ]
    },
    "cn.hutool.core.exceptions.UtilException:void <init>(java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.copier.BeanCopier:void valueProviderToBean(cn.hutool.core.bean.copier.ValueProvider,java.lang.Object)",
            "cn.hutool.core.bean.copier.provider.BeanValueProvider:java.lang.Object value(java.lang.String,java.lang.reflect.Type)",
            "cn.hutool.core.lang.caller.StackTraceCaller:java.lang.Class getCaller()",
            "cn.hutool.core.lang.caller.StackTraceCaller:java.lang.Class getCallerCaller()",
            "cn.hutool.core.lang.caller.StackTraceCaller:java.lang.Class getCaller(int)",
            "cn.hutool.core.thread.GlobalThreadPool:void execute(java.lang.Runnable)",
            "cn.hutool.core.util.ClassUtil:java.util.Set getClassPaths(java.lang.String,boolean)",
            "cn.hutool.core.util.NetUtil:java.lang.String toAbsoluteUrl(java.lang.String,java.lang.String)",
            "cn.hutool.core.util.ReflectUtil:java.lang.Object getFieldValue(java.lang.Object,java.lang.reflect.Field)",
            "cn.hutool.core.util.ReflectUtil:void setFieldValue(java.lang.Object,java.lang.reflect.Field,java.lang.Object)",
            "cn.hutool.core.util.ReflectUtil:java.lang.Object newInstance(java.lang.String)",
            "cn.hutool.core.util.ReflectUtil:java.lang.Object newInstance(java.lang.Class,java.lang.Object[])",
            "cn.hutool.core.util.URLUtil:java.net.URL getURL(java.io.File)",
            "cn.hutool.core.util.URLUtil:java.net.URL[] getURLs(java.io.File[])",
            "cn.hutool.core.util.XmlUtil:org.w3c.dom.Document readXML(org.xml.sax.InputSource)",
            "cn.hutool.core.util.XmlUtil:java.lang.String toStr(org.w3c.dom.Document,boolean)",
            "cn.hutool.core.util.XmlUtil:java.lang.String toStr(org.w3c.dom.Document,java.lang.String,boolean)",
            "cn.hutool.core.util.XmlUtil:void transform(javax.xml.transform.Source,javax.xml.transform.Result,java.lang.String,boolean)",
            "cn.hutool.core.util.XmlUtil:javax.xml.parsers.DocumentBuilder createDocumentBuilder()",
            "cn.hutool.extra.template.engine.velocity.VelocityUtil:void toFile(org.apache.velocity.Template,org.apache.velocity.VelocityContext,java.lang.String)",
            "cn.hutool.extra.template.engine.velocity.VelocityUtil:void toWriter(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "cn.hutool.core.exceptions.ValidateException:void <init>(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.lang.Validator:java.lang.Object validateNotNull(java.lang.Object,java.lang.String,java.lang.Object[])"
        ]
    },
    "cn.hutool.core.io.BufferUtil:int lineEnd(java.nio.ByteBuffer,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.BufferUtil:int lineEnd(java.nio.ByteBuffer)"
        ]
    },
    "cn.hutool.core.io.FileUtil:long size(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.FileUtil:long size(java.io.File)"
        ]
    },
    "cn.hutool.core.io.IORuntimeException:void <init>(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.file.FileCopier:java.io.File copy()",
            "cn.hutool.core.io.file.FileWriter:void checkFile()",
            "cn.hutool.core.io.FileUtil:java.io.File copyFile(java.io.File,java.io.File,java.nio.file.StandardCopyOption[])"
        ]
    },
    "cn.hutool.core.io.IORuntimeException:void <init>(java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.setting.dialect.Props:void store(java.lang.String)",
            "cn.hutool.setting.SettingLoader:void store(java.lang.String)"
        ]
    },
    "cn.hutool.core.io.resource.NoResourceException:void <init>(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.resource.ClassPathResource:void initUrl()",
            "cn.hutool.core.io.resource.UrlResource:java.io.InputStream getStream()",
            "cn.hutool.db.ds.DSFactory:void <init>(java.lang.String,java.lang.Class,cn.hutool.setting.Setting)"
        ]
    },
    "cn.hutool.core.io.resource.NoResourceException:void <init>(java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.watch.WatchException:void <init>(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.watch.WatchException:void <init>(java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.lang.Assert:void isTrue(boolean,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.impl.ArrayConverter:void <init>(java.lang.Class)",
            "cn.hutool.core.lang.Assert:void isTrue(boolean)",
            "cn.hutool.core.util.ReflectUtil:java.lang.Object invokeWithCheck(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])"
        ]
    },
    "cn.hutool.core.lang.Assert:void isFalse(boolean,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.resource.ClassPathResource:java.lang.String normalizePath(java.lang.String)",
            "cn.hutool.core.lang.Assert:void isFalse(boolean)",
            "cn.hutool.poi.excel.ExcelReader:void checkNotClosed()",
            "cn.hutool.poi.excel.ExcelWriter:cn.hutool.poi.excel.ExcelWriter merge(int,java.lang.Object,boolean)",
            "cn.hutool.poi.excel.ExcelWriter:cn.hutool.poi.excel.ExcelWriter merge(int,int,int,int,java.lang.Object,boolean)",
            "cn.hutool.poi.excel.ExcelWriter:cn.hutool.poi.excel.ExcelWriter write(java.lang.Iterable)",
            "cn.hutool.poi.excel.ExcelWriter:cn.hutool.poi.excel.ExcelWriter write(java.lang.Iterable,java.util.Comparator)",
            "cn.hutool.poi.excel.ExcelWriter:cn.hutool.poi.excel.ExcelWriter writeHeadRow(java.lang.Iterable)",
            "cn.hutool.poi.excel.ExcelWriter:cn.hutool.poi.excel.ExcelWriter writeRow(java.util.Map,boolean)",
            "cn.hutool.poi.excel.ExcelWriter:cn.hutool.poi.excel.ExcelWriter writeRow(java.lang.Iterable)",
            "cn.hutool.poi.excel.ExcelWriter:cn.hutool.poi.excel.ExcelWriter flush(java.io.OutputStream)"
        ]
    },
    "cn.hutool.core.lang.Assert:void isNull(java.lang.Object,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.lang.Assert:void isNull(java.lang.Object)"
        ]
    },
    "cn.hutool.core.lang.Assert:java.lang.Object notNull(java.lang.Object,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.collection.LineIter:void <init>(java.io.Reader)",
            "cn.hutool.core.convert.Convert:long convertTime(long,java.util.concurrent.TimeUnit,java.util.concurrent.TimeUnit)",
            "cn.hutool.core.date.DateTime:java.util.Date parse(java.lang.String,cn.hutool.core.date.format.DateParser)",
            "cn.hutool.core.io.file.FileCopier:java.io.File copy()",
            "cn.hutool.core.io.file.FileWriter:void checkFile()",
            "cn.hutool.core.io.FileUtil:java.io.File file(java.io.File,java.lang.String[])",
            "cn.hutool.core.io.FileUtil:long size(java.io.File)",
            "cn.hutool.core.io.FileUtil:java.io.File copyFile(java.lang.String,java.lang.String,java.nio.file.StandardCopyOption[])",
            "cn.hutool.core.io.FileUtil:java.io.File copyFile(java.io.File,java.io.File,java.nio.file.StandardCopyOption[])",
            "cn.hutool.core.io.FileUtil:java.nio.file.Path copyFile(java.nio.file.Path,java.nio.file.Path,java.nio.file.StandardCopyOption[])",
            "cn.hutool.core.io.FileUtil:java.util.zip.Checksum checksum(java.io.File,java.util.zip.Checksum)",
            "cn.hutool.core.io.IoUtil:long copy(java.io.InputStream,java.io.OutputStream,int,cn.hutool.core.io.StreamProgress)",
            "cn.hutool.core.io.IoUtil:long copy(java.io.FileInputStream,java.io.FileOutputStream)",
            "cn.hutool.core.io.IoUtil:long copy(java.nio.channels.ReadableByteChannel,java.nio.channels.WritableByteChannel,int,cn.hutool.core.io.StreamProgress)",
            "cn.hutool.core.io.IoUtil:java.util.zip.Checksum checksum(java.io.InputStream,java.util.zip.Checksum)",
            "cn.hutool.core.io.resource.ClassPathResource:void <init>(java.lang.String,java.lang.ClassLoader,java.lang.Class)",
            "cn.hutool.core.lang.Assert:java.lang.Object notNull(java.lang.Object)",
            "cn.hutool.core.lang.Assert:java.lang.Object isInstanceOf(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])",
            "cn.hutool.core.lang.Assert:void isAssignable(java.lang.Class,java.lang.Class,java.lang.String,java.lang.Object[])",
            "cn.hutool.core.lang.Dict:cn.hutool.core.lang.Dict parseBean(java.lang.Object)",
            "cn.hutool.core.lang.Dict:cn.hutool.core.lang.Dict parseBean(java.lang.Object,boolean,boolean)",
            "cn.hutool.core.text.csv.CsvReader:cn.hutool.core.text.csv.CsvData read(java.nio.file.Path,java.nio.charset.Charset)",
            "cn.hutool.core.util.ClassLoaderUtil:java.lang.Class loadClass(java.lang.String,java.lang.ClassLoader,boolean)",
            "cn.hutool.core.util.NumberUtil:java.math.BigDecimal div(java.math.BigDecimal,java.math.BigDecimal,int,java.math.RoundingMode)",
            "cn.hutool.core.util.URLUtil:java.net.URL url(java.lang.String,java.net.URLStreamHandler)",
            "cn.hutool.core.util.URLUtil:java.net.URL getURL(java.io.File)",
            "cn.hutool.core.util.XmlUtil:org.w3c.dom.Document readXML(java.io.File)",
            "cn.hutool.crypto.SecureUtil:java.lang.String getAlgorithmAfterWith(java.lang.String)",
            "cn.hutool.db.dialect.impl.AnsiSqlDialect:java.sql.PreparedStatement psForDelete(java.sql.Connection,cn.hutool.db.sql.Query)",
            "cn.hutool.db.dialect.impl.AnsiSqlDialect:java.sql.PreparedStatement psForUpdate(java.sql.Connection,cn.hutool.db.Entity,cn.hutool.db.sql.Query)",
            "cn.hutool.db.dialect.impl.AnsiSqlDialect:java.sql.PreparedStatement psForFind(java.sql.Connection,cn.hutool.db.sql.Query)",
            "cn.hutool.db.handler.HandleHelper:java.lang.Object handleRow(int,java.sql.ResultSetMetaData,java.sql.ResultSet,java.lang.Class)",
            "cn.hutool.db.SqlConnRunner:java.lang.Object find(java.sql.Connection,cn.hutool.db.sql.Query,cn.hutool.db.handler.RsHandler)",
            "cn.hutool.extra.ftp.Ftp:boolean upload(java.lang.String,java.io.File)",
            "cn.hutool.setting.dialect.Props:void <init>(java.io.File,java.nio.charset.Charset)",
            "cn.hutool.setting.dialect.Props:void <init>(java.net.URL,java.nio.charset.Charset)",
            "cn.hutool.setting.Setting:void <init>(java.io.File,java.nio.charset.Charset,boolean)",
            "cn.hutool.setting.Setting:void <init>(java.net.URL,java.nio.charset.Charset,boolean)",
            "cn.hutool.poi.excel.ExcelBase:void <init>(org.apache.poi.ss.usermodel.Sheet)",
            "cn.hutool.poi.excel.ExcelPicUtil:java.util.Map getPicMap(org.apache.poi.ss.usermodel.Workbook,int)",
            "cn.hutool.poi.excel.ExcelWriter:cn.hutool.poi.excel.ExcelWriter flush(java.io.File)"
        ]
    },
    "cn.hutool.core.lang.Assert:java.lang.String notEmpty(java.lang.String,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.lang.Assert:java.lang.String notEmpty(java.lang.String)"
        ]
    },
    "cn.hutool.core.lang.Assert:java.lang.String notBlank(java.lang.String,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.date.DateTime:java.util.Date parse(java.lang.String,cn.hutool.core.date.format.DateParser)",
            "cn.hutool.core.io.FileUtil:java.io.File copyFile(java.lang.String,java.lang.String,java.nio.file.StandardCopyOption[])",
            "cn.hutool.core.lang.Assert:java.lang.String notBlank(java.lang.String)",
            "cn.hutool.crypto.SecureUtil:javax.crypto.SecretKey generateKey(java.lang.String,byte[])",
            "cn.hutool.db.StatementUtil:java.sql.PreparedStatement prepareStatement(java.sql.Connection,java.lang.String,java.lang.Object[])",
            "cn.hutool.http.HttpRequest:void <init>(java.lang.String)",
            "cn.hutool.setting.dialect.Props:void <init>(java.lang.String,java.nio.charset.Charset)",
            "cn.hutool.setting.dialect.Props:void <init>(java.lang.String,java.lang.Class,java.nio.charset.Charset)",
            "cn.hutool.setting.Setting:void <init>(java.lang.String,java.nio.charset.Charset,boolean)",
            "cn.hutool.setting.Setting:void <init>(java.lang.String,java.lang.Class,java.nio.charset.Charset,boolean)"
        ]
    },
    "cn.hutool.core.lang.Assert:java.lang.String notContain(java.lang.String,java.lang.String,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.lang.Assert:java.lang.String notContain(java.lang.String,java.lang.String)"
        ]
    },
    "cn.hutool.core.lang.Assert:java.lang.Object[] notEmpty(java.lang.Object[],java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.lang.Assert:java.lang.Object[] notEmpty(java.lang.Object[])"
        ]
    },
    "cn.hutool.core.lang.Assert:java.lang.Object[] noNullElements(java.lang.Object[],java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.lang.Assert:java.lang.Object[] noNullElements(java.lang.Object[])"
        ]
    },
    "cn.hutool.core.lang.Assert:java.util.Collection notEmpty(java.util.Collection,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.lang.Assert:java.util.Collection notEmpty(java.util.Collection)"
        ]
    },
    "cn.hutool.core.lang.Assert:java.lang.Object isInstanceOf(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.lang.Assert:java.lang.Object isInstanceOf(java.lang.Class,java.lang.Object)"
        ]
    },
    "cn.hutool.core.lang.Assert:void isAssignable(java.lang.Class,java.lang.Class,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.lang.Assert:void isAssignable(java.lang.Class,java.lang.Class)"
        ]
    },
    "cn.hutool.core.lang.Assert:void state(boolean,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.lang.Assert:void state(boolean)"
        ]
    },
    "cn.hutool.core.lang.Console:void print(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.lang.Console:void print(java.lang.Object)"
        ]
    },
    "cn.hutool.core.lang.Console:void log(java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.lang.Console:void log(java.lang.Object)",
            "cn.hutool.core.lang.Console:void log(java.lang.String,java.lang.Object[])",
            "cn.hutool.log.dialect.console.ConsoleLog:void log(cn.hutool.log.level.Level,java.lang.Throwable,java.lang.String,java.lang.Object[])"
        ]
    },
    "cn.hutool.core.lang.Console:void error(java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.lang.Console:void error(java.lang.Object)",
            "cn.hutool.core.lang.Console:void error(java.lang.String,java.lang.Object[])",
            "cn.hutool.log.dialect.console.ConsoleLog:void log(cn.hutool.log.level.Level,java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.log.dialect.jdk.JdkLogFactory:void readConfig()"
        ]
    },
    "cn.hutool.core.thread.NamedThreadFactory:java.lang.Thread newThread(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ArrayUtil:java.lang.Object[] wrap(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.collection.IterUtil:java.lang.String join(java.util.Iterator,java.lang.CharSequence,java.lang.String,java.lang.String)",
            "cn.hutool.core.util.ArrayUtil:java.lang.String join(java.lang.Object[],java.lang.CharSequence,java.lang.String,java.lang.String)"
        ]
    },
    "cn.hutool.core.util.StrUtil:java.lang.String brief(java.lang.CharSequence,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.cache.GlobalPruneTimer$1:java.lang.Thread newThread(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.CryptoException:void <init>(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.CryptoException:void <init>(java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.SecureUtil:java.security.Signature generateSignature(cn.hutool.crypto.asymmetric.AsymmetricAlgorithm,cn.hutool.crypto.digest.DigestAlgorithm)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.symmetric.AES:void <init>(java.lang.String,java.lang.String,javax.crypto.SecretKey,javax.crypto.spec.IvParameterSpec)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.symmetric.AES:void <init>(cn.hutool.crypto.Mode,cn.hutool.crypto.Padding,javax.crypto.SecretKey,javax.crypto.spec.IvParameterSpec)",
            "cn.hutool.crypto.symmetric.AES:void <init>(java.lang.String,java.lang.String,byte[])",
            "cn.hutool.crypto.symmetric.AES:void <init>(java.lang.String,java.lang.String,byte[],byte[])",
            "cn.hutool.crypto.symmetric.AES:void <init>(java.lang.String,java.lang.String,javax.crypto.SecretKey)"
        ]
    },
    "cn.hutool.crypto.symmetric.DES:void <init>(java.lang.String,java.lang.String,javax.crypto.SecretKey,javax.crypto.spec.IvParameterSpec)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.symmetric.DES:void <init>(cn.hutool.crypto.Mode,cn.hutool.crypto.Padding,javax.crypto.SecretKey,javax.crypto.spec.IvParameterSpec)",
            "cn.hutool.crypto.symmetric.DES:void <init>(java.lang.String,java.lang.String,byte[])",
            "cn.hutool.crypto.symmetric.DES:void <init>(java.lang.String,java.lang.String,byte[],byte[])",
            "cn.hutool.crypto.symmetric.DES:void <init>(java.lang.String,java.lang.String,javax.crypto.SecretKey)"
        ]
    },
    "cn.hutool.crypto.symmetric.DESede:void <init>(java.lang.String,java.lang.String,javax.crypto.SecretKey,javax.crypto.spec.IvParameterSpec)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.symmetric.DESede:void <init>(cn.hutool.crypto.Mode,cn.hutool.crypto.Padding,javax.crypto.SecretKey,javax.crypto.spec.IvParameterSpec)",
            "cn.hutool.crypto.symmetric.DESede:void <init>(java.lang.String,java.lang.String,byte[],byte[])",
            "cn.hutool.crypto.symmetric.DESede:void <init>(java.lang.String,java.lang.String,javax.crypto.SecretKey)"
        ]
    },
    "cn.hutool.db.DbRuntimeException:void <init>(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.ds.c3p0.C3p0DSFactory:com.mchange.v2.c3p0.ComboPooledDataSource createDataSource(java.lang.String)",
            "cn.hutool.db.ds.dbcp.DbcpDSFactory:org.apache.commons.dbcp2.BasicDataSource createDataSource(java.lang.String)",
            "cn.hutool.db.ds.druid.DruidDSFactory:com.alibaba.druid.pool.DruidDataSource createDataSource(java.lang.String)",
            "cn.hutool.db.ds.hikari.HikariDSFactory:com.zaxxer.hikari.HikariDataSource createDataSource(java.lang.String)",
            "cn.hutool.db.ds.jndi.JndiDSFactory:javax.sql.DataSource createDataSource(java.lang.String)",
            "cn.hutool.db.ds.pooled.DbSetting:cn.hutool.db.ds.pooled.DbConfig getDbConfig(java.lang.String)",
            "cn.hutool.db.ds.simple.SimpleDataSource:void <init>(cn.hutool.setting.Setting,java.lang.String)",
            "cn.hutool.db.ds.tomcat.TomcatDSFactory:org.apache.tomcat.jdbc.pool.DataSource createDataSource(java.lang.String)",
            "cn.hutool.db.Entity:java.sql.RowId getRowId(java.lang.String)"
        ]
    },
    "cn.hutool.db.DbRuntimeException:void <init>(java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.ds.pooled.DbConfig:void init(java.lang.String,java.lang.String,java.lang.String)",
            "cn.hutool.db.ds.simple.SimpleDataSource:void init(java.lang.String,java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "cn.hutool.db.meta.Column:void <init>(java.lang.String,java.sql.ResultSet)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.meta.Column:cn.hutool.db.meta.Column create(java.lang.String,java.sql.ResultSet)"
        ]
    },
    "cn.hutool.db.nosql.mongo.MongoDS:com.mongodb.ServerAddress createServerAddress(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.nosql.mongo.MongoDS:void initSingle()",
            "cn.hutool.db.nosql.mongo.MongoDS:void initCloud()"
        ]
    },
    "cn.hutool.db.Session:void setTransactionIsolation(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.sql.Condition:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.DynaBean:java.lang.String toString()",
            "cn.hutool.core.collection.CollUtil$6:int compare(java.util.Map$Entry,java.util.Map$Entry)",
            "cn.hutool.core.convert.AbstractConverter:java.lang.String convertToStr(java.lang.Object)",
            "cn.hutool.core.convert.impl.ArrayConverter:java.lang.Object convertObjectToArray(java.lang.Object)",
            "cn.hutool.core.convert.impl.CurrencyConverter:java.util.Currency convertInternal(java.lang.Object)",
            "cn.hutool.core.convert.NumberWordFormater:java.lang.String format(java.lang.Object)",
            "cn.hutool.core.getter.OptNullBasicTypeFromStringGetter:java.lang.Object getObj(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.io.file.FileWriter:java.io.File writeLines(java.util.Collection,cn.hutool.core.io.file.LineSeparator,boolean)",
            "cn.hutool.core.io.watch.watchers.DelayWatcher$1:void run()",
            "cn.hutool.core.io.watch.watchers.DelayWatcher:void onDelayModify(java.nio.file.WatchEvent,java.nio.file.Path)",
            "cn.hutool.core.io.watch.WatchMonitor:void watch(cn.hutool.core.io.watch.Watcher)",
            "cn.hutool.core.lang.ConsistentHash$1:java.lang.Integer hash(java.lang.Object)",
            "cn.hutool.core.lang.ConsistentHash:void add(java.lang.Object)",
            "cn.hutool.core.lang.ConsistentHash:void remove(java.lang.Object)",
            "cn.hutool.core.lang.mutable.MutableObj:java.lang.String toString()",
            "cn.hutool.core.map.CamelCaseLinkedMap:java.lang.Object customKey(java.lang.Object)",
            "cn.hutool.core.map.CamelCaseMap:java.lang.Object customKey(java.lang.Object)",
            "cn.hutool.core.map.CaseInsensitiveLinkedMap:java.lang.Object customKey(java.lang.Object)",
            "cn.hutool.core.map.CaseInsensitiveMap:java.lang.Object customKey(java.lang.Object)",
            "cn.hutool.core.util.ArrayUtil:java.lang.String toString(java.lang.Object)",
            "cn.hutool.core.util.ObjectUtil:boolean contains(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.util.StrUtil:java.lang.String str(java.lang.Object,java.nio.charset.Charset)",
            "cn.hutool.core.util.StrUtil:java.lang.String toString(java.lang.Object)",
            "cn.hutool.core.util.XmlUtil:void mapToXml(org.w3c.dom.Document,org.w3c.dom.Element,java.util.Map)",
            "cn.hutool.extra.servlet.ServletUtil:void setHeader(javax.servlet.http.HttpServletResponse,java.lang.String,java.lang.Object)",
            "cn.hutool.extra.template.engine.velocity.VelocityUtil:void toFile(org.apache.velocity.Template,org.apache.velocity.VelocityContext,java.lang.String)",
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest form(java.lang.String,java.lang.Object,java.lang.Object[])",
            "cn.hutool.setting.dialect.Props:java.lang.Object getObj(java.lang.String,java.lang.Object)",
            "cn.hutool.setting.dialect.Props:void setProperty(java.lang.String,java.lang.Object)",
            "cn.hutool.json.InternalJSONUtil:java.io.Writer writeValue(java.io.Writer,java.lang.Object,int,int)",
            "cn.hutool.json.InternalJSONUtil:java.lang.String valueToString(java.lang.Object)",
            "cn.hutool.json.JSONObject:java.io.Writer write(java.io.Writer,int,int)",
            "cn.hutool.json.JSONObject:void init(cn.hutool.json.JSONTokener)",
            "cn.hutool.json.JSONUtil:java.lang.Object wrap(java.lang.Object,boolean)",
            "cn.hutool.json.XML:java.lang.String toXml(java.lang.Object,java.lang.String)",
            "cn.hutool.poi.excel.cell.CellUtil:void setCellValue(org.apache.poi.ss.usermodel.Cell,java.lang.Object,cn.hutool.poi.excel.StyleSet,boolean)",
            "cn.hutool.poi.excel.ExcelReader:java.util.List aliasHeader(java.util.List)"
        ]
    },
    "cn.hutool.db.sql.Direction:cn.hutool.db.sql.Direction fromString(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.sql.Wrapper$1:java.lang.String edit(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.sql.Wrapper$1:java.lang.Object edit(java.lang.Object)"
        ]
    },
    "cn.hutool.extra.ftp.Ftp:boolean mkdir(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.ftp.Ftp:boolean upload(java.lang.String,java.lang.String,java.io.InputStream)"
        ]
    },
    "cn.hutool.extra.ftp.FtpException:void <init>(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.ftp.Ftp:cn.hutool.extra.ftp.Ftp init(java.lang.String,int,java.lang.String,java.lang.String)"
        ]
    },
    "cn.hutool.extra.ftp.FtpException:void <init>(java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.extra.mail.Mail:javax.mail.Multipart buildContent(java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.mail.Mail:javax.mail.internet.MimeMessage buildMsg()"
        ]
    },
    "cn.hutool.extra.mail.MailAccount:cn.hutool.extra.mail.MailAccount defaultIfEmpty()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.mail.Mail:void <init>(cn.hutool.extra.mail.MailAccount)"
        ]
    },
    "cn.hutool.extra.mail.MailException:void <init>(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.extra.mail.MailException:void <init>(java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.extra.qrcode.QrCodeException:void <init>(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.extra.qrcode.QrCodeException:void <init>(java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.extra.servlet.multipart.UploadFile:void assertValid()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.servlet.multipart.UploadFile:java.io.File write(java.io.File)",
            "cn.hutool.extra.servlet.multipart.UploadFile:byte[] getFileContent()",
            "cn.hutool.extra.servlet.multipart.UploadFile:java.io.InputStream getFileInputStream()"
        ]
    },
    "cn.hutool.extra.servlet.multipart.UploadFileHeader:java.lang.String getDataFieldValue(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.servlet.multipart.UploadFileHeader:void processHeaderString(java.lang.String)"
        ]
    },
    "cn.hutool.extra.servlet.ServletUtil:java.lang.String getHeader(javax.servlet.http.HttpServletRequest,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.extra.ssh.JschRuntimeException:void <init>(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.extra.ssh.JschRuntimeException:void <init>(java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.extra.template.TemplateException:void <init>(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.extra.template.TemplateException:void <init>(java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.http.HtmlUtil:java.lang.String removeHtmlTag(java.lang.String,boolean,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HtmlUtil:java.lang.String removeHtmlTag(java.lang.String,java.lang.String[])",
            "cn.hutool.http.HtmlUtil:java.lang.String unwrapHtmlTag(java.lang.String,java.lang.String[])"
        ]
    },
    "cn.hutool.http.HtmlUtil:java.lang.String removeHtmlAttr(java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.http.HtmlUtil:java.lang.String removeAllHtmlAttr(java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.http.HttpException:void <init>(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HttpConnection:void <init>(java.lang.String,cn.hutool.http.Method,javax.net.ssl.HostnameVerifier,javax.net.ssl.SSLSocketFactory,int,java.net.Proxy)"
        ]
    },
    "cn.hutool.http.HttpException:void <init>(java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest body(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest body(java.lang.String)"
        ]
    },
    "cn.hutool.http.HttpRequest:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest post(java.lang.String)",
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest get(java.lang.String)",
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest head(java.lang.String)",
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest options(java.lang.String)",
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest put(java.lang.String)",
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest patch(java.lang.String)",
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest delete(java.lang.String)",
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest trace(java.lang.String)",
            "cn.hutool.http.HttpRequest:void writeForm(java.io.OutputStream)",
            "cn.hutool.http.HttpRequest:void appendPart(java.lang.String,cn.hutool.core.io.resource.Resource,java.io.OutputStream)",
            "cn.hutool.http.HttpRequest:void formEnd(java.io.OutputStream)",
            "cn.hutool.http.HttpRequest:void setMultipart()",
            "cn.hutool.http.HttpRequest:void <clinit>()",
            "cn.hutool.http.HttpResponse:java.util.List getCookies()",
            "cn.hutool.http.HttpUtil:cn.hutool.http.HttpRequest createRequest(cn.hutool.http.Method,java.lang.String)",
            "cn.hutool.http.HttpUtil:cn.hutool.http.HttpRequest createGet(java.lang.String)",
            "cn.hutool.http.HttpUtil:cn.hutool.http.HttpRequest createPost(java.lang.String)",
            "cn.hutool.http.HttpUtil:java.lang.String get(java.lang.String,java.nio.charset.Charset)",
            "cn.hutool.http.HttpUtil:java.lang.String get(java.lang.String,int)",
            "cn.hutool.http.HttpUtil:java.lang.String get(java.lang.String,java.util.Map)",
            "cn.hutool.http.HttpUtil:java.lang.String get(java.lang.String,java.util.Map,int)",
            "cn.hutool.http.HttpUtil:java.lang.String post(java.lang.String,java.util.Map,int)",
            "cn.hutool.http.HttpUtil:java.lang.String post(java.lang.String,java.lang.String,int)",
            "cn.hutool.http.HttpUtil:long downloadFile(java.lang.String,java.io.File,int,cn.hutool.core.io.StreamProgress)",
            "cn.hutool.http.HttpUtil:long download(java.lang.String,java.io.OutputStream,boolean,cn.hutool.core.io.StreamProgress)",
            "cn.hutool.http.webservice.SoapRequest:java.lang.String execute()"
        ]
    },
    "cn.hutool.http.HttpUtil:java.lang.String encode(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HttpUtil:java.lang.String encodeUtf8(java.lang.String)",
            "cn.hutool.http.HttpUtil:java.lang.String encode(java.lang.String,java.nio.charset.Charset)"
        ]
    },
    "cn.hutool.http.HttpUtil:java.lang.String decode(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HttpUtil:java.lang.String decode(java.lang.String,java.nio.charset.Charset)",
            "cn.hutool.http.HttpUtil:void addParam(java.util.Map,java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "cn.hutool.log.AbstractLog:boolean isEnabled(cn.hutool.log.level.Level)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.dialect.console.ConsoleLog:void log(cn.hutool.log.level.Level,java.lang.Throwable,java.lang.String,java.lang.Object[])"
        ]
    },
    "cn.hutool.log.dialect.commons.ApacheCommonsLog:void trace(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.dialect.commons.ApacheCommonsLog:void log(cn.hutool.log.level.Level,java.lang.String,java.lang.Object[])",
            "cn.hutool.log.StaticLog:void trace(cn.hutool.log.Log,java.lang.String,java.lang.Object[])"
        ]
    },
    "cn.hutool.log.dialect.commons.ApacheCommonsLog:void trace(java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.AbstractLog:void trace(java.lang.Throwable)",
            "cn.hutool.log.dialect.commons.ApacheCommonsLog:void log(cn.hutool.log.level.Level,java.lang.Throwable,java.lang.String,java.lang.Object[])"
        ]
    },
    "cn.hutool.log.dialect.commons.ApacheCommonsLog:void debug(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.DbUtil:void setShowSqlGlobal(cn.hutool.setting.Setting)",
            "cn.hutool.db.ds.DSFactory:cn.hutool.db.ds.DSFactory create(cn.hutool.setting.Setting)",
            "cn.hutool.db.nosql.mongo.MongoDS:com.mongodb.MongoClientOptions$Builder buildMongoClientOptions(com.mongodb.MongoClientOptions$Builder,java.lang.String)",
            "cn.hutool.extra.servlet.multipart.UploadFile:boolean processStream(cn.hutool.extra.servlet.multipart.MultipartRequestInputStream)",
            "cn.hutool.http.HttpConnection:cn.hutool.http.HttpConnection setCookie(java.lang.String)",
            "cn.hutool.log.dialect.commons.ApacheCommonsLog:void log(cn.hutool.log.level.Level,java.lang.String,java.lang.Object[])",
            "cn.hutool.log.GlobalLogFactory:cn.hutool.log.LogFactory set(cn.hutool.log.LogFactory)",
            "cn.hutool.log.LogFactory:cn.hutool.log.LogFactory create()",
            "cn.hutool.log.StaticLog:void debug(cn.hutool.log.Log,java.lang.String,java.lang.Object[])",
            "cn.hutool.setting.AbsSetting$1:java.lang.Object value(java.lang.String,java.lang.reflect.Type)",
            "cn.hutool.setting.AbsSetting:java.lang.String getWithLog(java.lang.String)",
            "cn.hutool.setting.AbsSetting:java.lang.String getByGroupWithLog(java.lang.String,java.lang.String)",
            "cn.hutool.setting.dialect.Props:void load(cn.hutool.core.io.resource.Resource)",
            "cn.hutool.setting.SettingLoader:boolean load(cn.hutool.core.io.resource.UrlResource)",
            "cn.hutool.cron.CronTimer:void run()"
        ]
    },
    "cn.hutool.log.dialect.commons.ApacheCommonsLog:void debug(java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.AbstractLog:void debug(java.lang.Throwable)",
            "cn.hutool.log.dialect.commons.ApacheCommonsLog:void log(cn.hutool.log.level.Level,java.lang.Throwable,java.lang.String,java.lang.Object[])"
        ]
    },
    "cn.hutool.log.dialect.commons.ApacheCommonsLog:void info(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.nosql.mongo.MongoDS:void initSingle()",
            "cn.hutool.db.nosql.mongo.MongoDS:void initCloud()",
            "cn.hutool.extra.servlet.multipart.UploadSetting:void load(java.lang.String)",
            "cn.hutool.log.dialect.commons.ApacheCommonsLog:void log(cn.hutool.log.level.Level,java.lang.String,java.lang.Object[])",
            "cn.hutool.log.StaticLog:void info(cn.hutool.log.Log,java.lang.String,java.lang.Object[])"
        ]
    },
    "cn.hutool.log.dialect.commons.ApacheCommonsLog:void info(java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.AbstractLog:void info(java.lang.Throwable)",
            "cn.hutool.log.dialect.commons.ApacheCommonsLog:void log(cn.hutool.log.level.Level,java.lang.Throwable,java.lang.String,java.lang.Object[])"
        ]
    },
    "cn.hutool.log.dialect.commons.ApacheCommonsLog:void warn(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.DbUtil:void close(java.lang.Object[])",
            "cn.hutool.log.dialect.commons.ApacheCommonsLog:void log(cn.hutool.log.level.Level,java.lang.String,java.lang.Object[])"
        ]
    },
    "cn.hutool.log.dialect.commons.ApacheCommonsLog:void warn(java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.AbstractLog:void warn(java.lang.Throwable)",
            "cn.hutool.log.dialect.commons.ApacheCommonsLog:void log(cn.hutool.log.level.Level,java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.log.StaticLog:void warn(cn.hutool.log.Log,java.lang.Throwable,java.lang.String,java.lang.Object[])"
        ]
    },
    "cn.hutool.log.dialect.commons.ApacheCommonsLog:void error(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.dialect.commons.ApacheCommonsLog:void log(cn.hutool.log.level.Level,java.lang.String,java.lang.Object[])"
        ]
    },
    "cn.hutool.log.dialect.commons.ApacheCommonsLog:void error(java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.DbUtil:javax.sql.DataSource getJndiDsWithLog(java.lang.String)",
            "cn.hutool.db.nosql.mongo.MongoDS:void initCloud()",
            "cn.hutool.log.AbstractLog:void error(java.lang.Throwable)",
            "cn.hutool.log.dialect.commons.ApacheCommonsLog:void log(cn.hutool.log.level.Level,java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.log.StaticLog:void error(cn.hutool.log.Log,java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.setting.dialect.Props:void load(cn.hutool.core.io.resource.Resource)",
            "cn.hutool.setting.SettingLoader:boolean load(cn.hutool.core.io.resource.UrlResource)"
        ]
    },
    "cn.hutool.log.dialect.commons.ApacheCommonsLog:void log(cn.hutool.log.level.Level,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.sql.SqlLog:void log(java.lang.String,java.lang.Object)"
        ]
    },
    "cn.hutool.log.dialect.commons.ApacheCommonsLog:void log(cn.hutool.log.level.Level,java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.log.dialect.commons.ApacheCommonsLog4JLog:void trace(java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.AbstractLog:void trace(java.lang.Throwable)",
            "cn.hutool.log.dialect.commons.ApacheCommonsLog4JLog:void trace(java.lang.String,java.lang.Object[])"
        ]
    },
    "cn.hutool.log.dialect.commons.ApacheCommonsLog4JLog:void debug(java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.AbstractLog:void debug(java.lang.Throwable)",
            "cn.hutool.log.dialect.commons.ApacheCommonsLog4JLog:void debug(java.lang.String,java.lang.Object[])"
        ]
    },
    "cn.hutool.log.dialect.commons.ApacheCommonsLog4JLog:void info(java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.AbstractLog:void info(java.lang.Throwable)",
            "cn.hutool.log.dialect.commons.ApacheCommonsLog4JLog:void info(java.lang.String,java.lang.Object[])"
        ]
    },
    "cn.hutool.log.dialect.commons.ApacheCommonsLog4JLog:void warn(java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.AbstractLog:void warn(java.lang.Throwable)",
            "cn.hutool.log.dialect.commons.ApacheCommonsLog4JLog:void warn(java.lang.String,java.lang.Object[])",
            "cn.hutool.log.StaticLog:void warn(cn.hutool.log.Log,java.lang.Throwable,java.lang.String,java.lang.Object[])"
        ]
    },
    "cn.hutool.log.dialect.commons.ApacheCommonsLog4JLog:void error(java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.DbUtil:javax.sql.DataSource getJndiDsWithLog(java.lang.String)",
            "cn.hutool.db.nosql.mongo.MongoDS:void initCloud()",
            "cn.hutool.log.AbstractLog:void error(java.lang.Throwable)",
            "cn.hutool.log.dialect.commons.ApacheCommonsLog4JLog:void error(java.lang.String,java.lang.Object[])",
            "cn.hutool.log.StaticLog:void error(cn.hutool.log.Log,java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.setting.dialect.Props:void load(cn.hutool.core.io.resource.Resource)",
            "cn.hutool.setting.SettingLoader:boolean load(cn.hutool.core.io.resource.UrlResource)"
        ]
    },
    "cn.hutool.log.dialect.commons.ApacheCommonsLog4JLog:void log(java.lang.String,cn.hutool.log.level.Level,java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.dialect.commons.ApacheCommonsLog4JLog:void log(cn.hutool.log.level.Level,java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.log.StaticLog:boolean log(cn.hutool.log.Log,cn.hutool.log.level.Level,java.lang.Throwable,java.lang.String,java.lang.Object[])"
        ]
    },
    "cn.hutool.log.dialect.jdk.JdkLog:void log(java.lang.String,cn.hutool.log.level.Level,java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.dialect.jdk.JdkLog:void log(cn.hutool.log.level.Level,java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.log.StaticLog:boolean log(cn.hutool.log.Log,cn.hutool.log.level.Level,java.lang.Throwable,java.lang.String,java.lang.Object[])"
        ]
    },
    "cn.hutool.log.dialect.jdk.JdkLog:void logIfEnabled(java.lang.String,java.util.logging.Level,java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.dialect.jdk.JdkLog:void log(java.lang.String,cn.hutool.log.level.Level,java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.log.dialect.jdk.JdkLog:void logIfEnabled(java.util.logging.Level,java.lang.Throwable,java.lang.String,java.lang.Object[])"
        ]
    },
    "cn.hutool.log.dialect.log4j.Log4jLog:void trace(java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.AbstractLog:void trace(java.lang.Throwable)",
            "cn.hutool.log.dialect.log4j.Log4jLog:void trace(java.lang.String,java.lang.Object[])"
        ]
    },
    "cn.hutool.log.dialect.log4j.Log4jLog:void debug(java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.AbstractLog:void debug(java.lang.Throwable)",
            "cn.hutool.log.dialect.log4j.Log4jLog:void debug(java.lang.String,java.lang.Object[])"
        ]
    },
    "cn.hutool.log.dialect.log4j.Log4jLog:void info(java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.AbstractLog:void info(java.lang.Throwable)",
            "cn.hutool.log.dialect.log4j.Log4jLog:void info(java.lang.String,java.lang.Object[])"
        ]
    },
    "cn.hutool.log.dialect.log4j.Log4jLog:void warn(java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.AbstractLog:void warn(java.lang.Throwable)",
            "cn.hutool.log.dialect.log4j.Log4jLog:void warn(java.lang.String,java.lang.Object[])",
            "cn.hutool.log.StaticLog:void warn(cn.hutool.log.Log,java.lang.Throwable,java.lang.String,java.lang.Object[])"
        ]
    },
    "cn.hutool.log.dialect.log4j.Log4jLog:void error(java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.DbUtil:javax.sql.DataSource getJndiDsWithLog(java.lang.String)",
            "cn.hutool.db.nosql.mongo.MongoDS:void initCloud()",
            "cn.hutool.log.AbstractLog:void error(java.lang.Throwable)",
            "cn.hutool.log.dialect.log4j.Log4jLog:void error(java.lang.String,java.lang.Object[])",
            "cn.hutool.log.StaticLog:void error(cn.hutool.log.Log,java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.setting.dialect.Props:void load(cn.hutool.core.io.resource.Resource)",
            "cn.hutool.setting.SettingLoader:boolean load(cn.hutool.core.io.resource.UrlResource)"
        ]
    },
    "cn.hutool.log.dialect.log4j.Log4jLog:void log(java.lang.String,cn.hutool.log.level.Level,java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.dialect.log4j.Log4jLog:void log(cn.hutool.log.level.Level,java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.log.StaticLog:boolean log(cn.hutool.log.Log,cn.hutool.log.level.Level,java.lang.Throwable,java.lang.String,java.lang.Object[])"
        ]
    },
    "cn.hutool.log.dialect.log4j2.Log4j2Log:void trace(java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.AbstractLog:void trace(java.lang.Throwable)",
            "cn.hutool.log.dialect.log4j2.Log4j2Log:void trace(java.lang.String,java.lang.Object[])"
        ]
    },
    "cn.hutool.log.dialect.log4j2.Log4j2Log:void debug(java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.AbstractLog:void debug(java.lang.Throwable)",
            "cn.hutool.log.dialect.log4j2.Log4j2Log:void debug(java.lang.String,java.lang.Object[])"
        ]
    },
    "cn.hutool.log.dialect.log4j2.Log4j2Log:void info(java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.AbstractLog:void info(java.lang.Throwable)",
            "cn.hutool.log.dialect.log4j2.Log4j2Log:void info(java.lang.String,java.lang.Object[])"
        ]
    },
    "cn.hutool.log.dialect.log4j2.Log4j2Log:void warn(java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.AbstractLog:void warn(java.lang.Throwable)",
            "cn.hutool.log.dialect.log4j2.Log4j2Log:void warn(java.lang.String,java.lang.Object[])",
            "cn.hutool.log.StaticLog:void warn(cn.hutool.log.Log,java.lang.Throwable,java.lang.String,java.lang.Object[])"
        ]
    },
    "cn.hutool.log.dialect.log4j2.Log4j2Log:void error(java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.DbUtil:javax.sql.DataSource getJndiDsWithLog(java.lang.String)",
            "cn.hutool.db.nosql.mongo.MongoDS:void initCloud()",
            "cn.hutool.log.AbstractLog:void error(java.lang.Throwable)",
            "cn.hutool.log.dialect.log4j2.Log4j2Log:void error(java.lang.String,java.lang.Object[])",
            "cn.hutool.log.StaticLog:void error(cn.hutool.log.Log,java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.setting.dialect.Props:void load(cn.hutool.core.io.resource.Resource)",
            "cn.hutool.setting.SettingLoader:boolean load(cn.hutool.core.io.resource.UrlResource)"
        ]
    },
    "cn.hutool.log.dialect.log4j2.Log4j2Log:void log(java.lang.String,cn.hutool.log.level.Level,java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.dialect.log4j2.Log4j2Log:void log(cn.hutool.log.level.Level,java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.log.StaticLog:boolean log(cn.hutool.log.Log,cn.hutool.log.level.Level,java.lang.Throwable,java.lang.String,java.lang.Object[])"
        ]
    },
    "cn.hutool.log.dialect.log4j2.Log4j2Log:boolean logIfEnabled(java.lang.String,org.apache.logging.log4j.Level,java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.dialect.log4j2.Log4j2Log:void log(java.lang.String,cn.hutool.log.level.Level,java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.log.dialect.log4j2.Log4j2Log:boolean logIfEnabled(org.apache.logging.log4j.Level,java.lang.Throwable,java.lang.String,java.lang.Object[])"
        ]
    },
    "cn.hutool.log.dialect.slf4j.Slf4jLog:void trace(java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.AbstractLog:void trace(java.lang.Throwable)"
        ]
    },
    "cn.hutool.log.dialect.slf4j.Slf4jLog:void debug(java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.AbstractLog:void debug(java.lang.Throwable)"
        ]
    },
    "cn.hutool.log.dialect.slf4j.Slf4jLog:void info(java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.AbstractLog:void info(java.lang.Throwable)"
        ]
    },
    "cn.hutool.log.dialect.slf4j.Slf4jLog:void warn(java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.AbstractLog:void warn(java.lang.Throwable)",
            "cn.hutool.log.StaticLog:void warn(cn.hutool.log.Log,java.lang.Throwable,java.lang.String,java.lang.Object[])"
        ]
    },
    "cn.hutool.log.dialect.slf4j.Slf4jLog:void error(java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.DbUtil:javax.sql.DataSource getJndiDsWithLog(java.lang.String)",
            "cn.hutool.db.nosql.mongo.MongoDS:void initCloud()",
            "cn.hutool.log.AbstractLog:void error(java.lang.Throwable)",
            "cn.hutool.log.StaticLog:void error(cn.hutool.log.Log,java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.setting.dialect.Props:void load(cn.hutool.core.io.resource.Resource)",
            "cn.hutool.setting.SettingLoader:boolean load(cn.hutool.core.io.resource.UrlResource)"
        ]
    },
    "cn.hutool.log.dialect.slf4j.Slf4jLog:void log(java.lang.String,cn.hutool.log.level.Level,java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.dialect.slf4j.Slf4jLog:void log(cn.hutool.log.level.Level,java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.log.StaticLog:boolean log(cn.hutool.log.Log,cn.hutool.log.level.Level,java.lang.Throwable,java.lang.String,java.lang.Object[])"
        ]
    },
    "cn.hutool.log.dialect.slf4j.Slf4jLog:boolean locationAwareLog(java.lang.String,int,java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.dialect.slf4j.Slf4jLog:void log(java.lang.String,cn.hutool.log.level.Level,java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.log.dialect.slf4j.Slf4jLog:boolean locationAwareLog(int,java.lang.Throwable,java.lang.String,java.lang.Object[])"
        ]
    },
    "cn.hutool.log.dialect.tinylog.TinyLog:org.pmw.tinylog.Level toTinyLevel(cn.hutool.log.level.Level)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.dialect.tinylog.TinyLog:void log(cn.hutool.log.level.Level,java.lang.String,java.lang.Object[])",
            "cn.hutool.log.dialect.tinylog.TinyLog:void log(cn.hutool.log.level.Level,java.lang.Throwable,java.lang.String,java.lang.Object[])"
        ]
    },
    "cn.hutool.script.FullSupportScriptEngine:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.script.ScriptRuntimeException:void <init>(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.script.ScriptRuntimeException:void <init>(java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.setting.profile.Profile:java.lang.String fixNameForProfile(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.setting.profile.Profile:cn.hutool.setting.Setting getSetting(java.lang.String)"
        ]
    },
    "cn.hutool.setting.SettingRuntimeException:void <init>(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.setting.dialect.Props:void load(cn.hutool.core.io.resource.Resource)"
        ]
    },
    "cn.hutool.setting.SettingRuntimeException:void <init>(java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.setting.dialect.Props:void autoLoad(boolean)",
            "cn.hutool.setting.Setting:void autoLoad(boolean)"
        ]
    },
    "cn.hutool.cron.CronException:void <init>(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.cron.pattern.CronPattern:void parseSinglePattern(java.lang.String)",
            "cn.hutool.cron.pattern.matcher.ValueMatcherBuilder:cn.hutool.cron.pattern.matcher.ValueMatcher build(java.lang.String,cn.hutool.cron.pattern.parser.ValueParser)",
            "cn.hutool.cron.pattern.matcher.ValueMatcherBuilder:java.util.List parseStep(java.lang.String,cn.hutool.cron.pattern.parser.ValueParser)",
            "cn.hutool.cron.pattern.matcher.ValueMatcherBuilder:java.util.List parseRange(java.lang.String,int,cn.hutool.cron.pattern.parser.ValueParser)",
            "cn.hutool.cron.pattern.parser.DayOfWeekValueParser:int parseAlias(java.lang.String)",
            "cn.hutool.cron.pattern.parser.MonthValueParser:int parseAlias(java.lang.String)",
            "cn.hutool.cron.pattern.parser.SimpleValueParser:int parse(java.lang.String)",
            "cn.hutool.cron.TaskTable:cn.hutool.cron.TaskTable add(java.lang.String,cn.hutool.cron.pattern.CronPattern,cn.hutool.cron.task.Task)"
        ]
    },
    "cn.hutool.cron.CronException:void <init>(java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.cron.pattern.CronPattern:void parseSinglePattern(java.lang.String)",
            "cn.hutool.cron.pattern.parser.SimpleValueParser:int parse(java.lang.String)",
            "cn.hutool.cron.Scheduler:cn.hutool.cron.Scheduler schedule(cn.hutool.setting.Setting)"
        ]
    },
    "cn.hutool.cron.pattern.matcher.AlwaysTrueValueMatcher:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.DynaBean:java.lang.String toString()",
            "cn.hutool.core.collection.CollUtil$6:int compare(java.util.Map$Entry,java.util.Map$Entry)",
            "cn.hutool.core.convert.AbstractConverter:java.lang.String convertToStr(java.lang.Object)",
            "cn.hutool.core.convert.impl.ArrayConverter:java.lang.Object convertObjectToArray(java.lang.Object)",
            "cn.hutool.core.convert.impl.CurrencyConverter:java.util.Currency convertInternal(java.lang.Object)",
            "cn.hutool.core.convert.NumberWordFormater:java.lang.String format(java.lang.Object)",
            "cn.hutool.core.getter.OptNullBasicTypeFromStringGetter:java.lang.Object getObj(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.io.file.FileWriter:java.io.File writeLines(java.util.Collection,cn.hutool.core.io.file.LineSeparator,boolean)",
            "cn.hutool.core.io.watch.watchers.DelayWatcher$1:void run()",
            "cn.hutool.core.io.watch.watchers.DelayWatcher:void onDelayModify(java.nio.file.WatchEvent,java.nio.file.Path)",
            "cn.hutool.core.io.watch.WatchMonitor:void watch(cn.hutool.core.io.watch.Watcher)",
            "cn.hutool.core.lang.ConsistentHash$1:java.lang.Integer hash(java.lang.Object)",
            "cn.hutool.core.lang.ConsistentHash:void add(java.lang.Object)",
            "cn.hutool.core.lang.ConsistentHash:void remove(java.lang.Object)",
            "cn.hutool.core.lang.mutable.MutableObj:java.lang.String toString()",
            "cn.hutool.core.map.CamelCaseLinkedMap:java.lang.Object customKey(java.lang.Object)",
            "cn.hutool.core.map.CamelCaseMap:java.lang.Object customKey(java.lang.Object)",
            "cn.hutool.core.map.CaseInsensitiveLinkedMap:java.lang.Object customKey(java.lang.Object)",
            "cn.hutool.core.map.CaseInsensitiveMap:java.lang.Object customKey(java.lang.Object)",
            "cn.hutool.core.util.ArrayUtil:java.lang.String toString(java.lang.Object)",
            "cn.hutool.core.util.ObjectUtil:boolean contains(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.util.StrUtil:java.lang.String str(java.lang.Object,java.nio.charset.Charset)",
            "cn.hutool.core.util.StrUtil:java.lang.String toString(java.lang.Object)",
            "cn.hutool.core.util.XmlUtil:void mapToXml(org.w3c.dom.Document,org.w3c.dom.Element,java.util.Map)",
            "cn.hutool.extra.servlet.ServletUtil:void setHeader(javax.servlet.http.HttpServletResponse,java.lang.String,java.lang.Object)",
            "cn.hutool.extra.template.engine.velocity.VelocityUtil:void toFile(org.apache.velocity.Template,org.apache.velocity.VelocityContext,java.lang.String)",
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest form(java.lang.String,java.lang.Object,java.lang.Object[])",
            "cn.hutool.setting.dialect.Props:java.lang.Object getObj(java.lang.String,java.lang.Object)",
            "cn.hutool.setting.dialect.Props:void setProperty(java.lang.String,java.lang.Object)",
            "cn.hutool.json.InternalJSONUtil:java.io.Writer writeValue(java.io.Writer,java.lang.Object,int,int)",
            "cn.hutool.json.InternalJSONUtil:java.lang.String valueToString(java.lang.Object)",
            "cn.hutool.json.JSONObject:java.io.Writer write(java.io.Writer,int,int)",
            "cn.hutool.json.JSONObject:void init(cn.hutool.json.JSONTokener)",
            "cn.hutool.json.JSONUtil:java.lang.Object wrap(java.lang.Object,boolean)",
            "cn.hutool.json.XML:java.lang.String toXml(java.lang.Object,java.lang.String)",
            "cn.hutool.poi.excel.cell.CellUtil:void setCellValue(org.apache.poi.ss.usermodel.Cell,java.lang.Object,cn.hutool.poi.excel.StyleSet,boolean)",
            "cn.hutool.poi.excel.ExcelReader:java.util.List aliasHeader(java.util.List)"
        ]
    },
    "cn.hutool.cron.pattern.matcher.BoolArrayValueMatcher:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.DynaBean:java.lang.String toString()",
            "cn.hutool.core.collection.CollUtil$6:int compare(java.util.Map$Entry,java.util.Map$Entry)",
            "cn.hutool.core.convert.AbstractConverter:java.lang.String convertToStr(java.lang.Object)",
            "cn.hutool.core.convert.impl.ArrayConverter:java.lang.Object convertObjectToArray(java.lang.Object)",
            "cn.hutool.core.convert.impl.CurrencyConverter:java.util.Currency convertInternal(java.lang.Object)",
            "cn.hutool.core.convert.NumberWordFormater:java.lang.String format(java.lang.Object)",
            "cn.hutool.core.getter.OptNullBasicTypeFromStringGetter:java.lang.Object getObj(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.io.file.FileWriter:java.io.File writeLines(java.util.Collection,cn.hutool.core.io.file.LineSeparator,boolean)",
            "cn.hutool.core.io.watch.watchers.DelayWatcher$1:void run()",
            "cn.hutool.core.io.watch.watchers.DelayWatcher:void onDelayModify(java.nio.file.WatchEvent,java.nio.file.Path)",
            "cn.hutool.core.io.watch.WatchMonitor:void watch(cn.hutool.core.io.watch.Watcher)",
            "cn.hutool.core.lang.ConsistentHash$1:java.lang.Integer hash(java.lang.Object)",
            "cn.hutool.core.lang.ConsistentHash:void add(java.lang.Object)",
            "cn.hutool.core.lang.ConsistentHash:void remove(java.lang.Object)",
            "cn.hutool.core.lang.mutable.MutableObj:java.lang.String toString()",
            "cn.hutool.core.map.CamelCaseLinkedMap:java.lang.Object customKey(java.lang.Object)",
            "cn.hutool.core.map.CamelCaseMap:java.lang.Object customKey(java.lang.Object)",
            "cn.hutool.core.map.CaseInsensitiveLinkedMap:java.lang.Object customKey(java.lang.Object)",
            "cn.hutool.core.map.CaseInsensitiveMap:java.lang.Object customKey(java.lang.Object)",
            "cn.hutool.core.util.ArrayUtil:java.lang.String toString(java.lang.Object)",
            "cn.hutool.core.util.ObjectUtil:boolean contains(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.util.StrUtil:java.lang.String str(java.lang.Object,java.nio.charset.Charset)",
            "cn.hutool.core.util.StrUtil:java.lang.String toString(java.lang.Object)",
            "cn.hutool.core.util.XmlUtil:void mapToXml(org.w3c.dom.Document,org.w3c.dom.Element,java.util.Map)",
            "cn.hutool.extra.servlet.ServletUtil:void setHeader(javax.servlet.http.HttpServletResponse,java.lang.String,java.lang.Object)",
            "cn.hutool.extra.template.engine.velocity.VelocityUtil:void toFile(org.apache.velocity.Template,org.apache.velocity.VelocityContext,java.lang.String)",
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest form(java.lang.String,java.lang.Object,java.lang.Object[])",
            "cn.hutool.setting.dialect.Props:java.lang.Object getObj(java.lang.String,java.lang.Object)",
            "cn.hutool.setting.dialect.Props:void setProperty(java.lang.String,java.lang.Object)",
            "cn.hutool.json.InternalJSONUtil:java.io.Writer writeValue(java.io.Writer,java.lang.Object,int,int)",
            "cn.hutool.json.InternalJSONUtil:java.lang.String valueToString(java.lang.Object)",
            "cn.hutool.json.JSONObject:java.io.Writer write(java.io.Writer,int,int)",
            "cn.hutool.json.JSONObject:void init(cn.hutool.json.JSONTokener)",
            "cn.hutool.json.JSONUtil:java.lang.Object wrap(java.lang.Object,boolean)",
            "cn.hutool.json.XML:java.lang.String toXml(java.lang.Object,java.lang.String)",
            "cn.hutool.poi.excel.cell.CellUtil:void setCellValue(org.apache.poi.ss.usermodel.Cell,java.lang.Object,cn.hutool.poi.excel.StyleSet,boolean)",
            "cn.hutool.poi.excel.ExcelReader:java.util.List aliasHeader(java.util.List)"
        ]
    },
    "cn.hutool.json.JSONException:void <init>(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.json.JSONException:void <init>(java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.poi.excel.sax.ExcelSaxUtil:java.lang.Object getDataValue(cn.hutool.poi.excel.sax.CellDataType,java.lang.String,org.apache.poi.xssf.model.SharedStringsTable,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.poi.excel.sax.Excel07SaxReader:void endElement(java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "cn.hutool.poi.exceptions.POIException:void <init>(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.poi.exceptions.POIException:void <init>(java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.json.JSONUtil:cn.hutool.json.JSONObject parseObj(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.json.JSONUtil:cn.hutool.json.JSON parse(java.lang.Object)",
            "cn.hutool.json.JSONUtil:cn.hutool.json.JSONObject readJSONObject(java.io.File,java.nio.charset.Charset)",
            "cn.hutool.json.JSONUtil:java.lang.Object toBean(java.lang.String,java.lang.Class)"
        ]
    },
    "cn.hutool.core.collection.CollUtil:java.util.ArrayList toList(java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.resource.MultiResource:void <init>(cn.hutool.core.io.resource.Resource[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.resource.MultiFileResource:void <init>(java.util.Collection)",
            "cn.hutool.core.io.resource.MultiFileResource:void <init>(java.io.File[])"
        ]
    },
    "cn.hutool.core.io.watch.watchers.WatcherChain:void <init>(cn.hutool.core.io.watch.Watcher[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.watch.watchers.WatcherChain:cn.hutool.core.io.watch.watchers.WatcherChain create(cn.hutool.core.io.watch.Watcher[])"
        ]
    },
    "cn.hutool.db.sql.Query:cn.hutool.db.sql.Query setFields(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.extra.mail.MailUtil:java.util.List splitAddress(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.mail.MailUtil:void send(java.lang.String,java.lang.String,java.lang.String,boolean,java.io.File[])",
            "cn.hutool.extra.mail.MailUtil:void send(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,java.io.File[])",
            "cn.hutool.extra.mail.MailUtil:void send(cn.hutool.extra.mail.MailAccount,java.lang.String,java.lang.String,java.lang.String,boolean,java.io.File[])"
        ]
    },
    "cn.hutool.core.comparator.ComparatorChain:cn.hutool.core.comparator.ComparatorChain addChain(java.util.Comparator)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.comparator.ComparatorChain:java.lang.Object addChain(java.lang.Object)"
        ]
    },
    "cn.hutool.core.date.format.FastDateFormat:void <init>(java.lang.String,java.util.TimeZone,java.util.Locale,java.util.Date)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.date.format.FastDateFormat:void <init>(java.lang.String,java.util.TimeZone,java.util.Locale)"
        ]
    },
    "cn.hutool.core.date.format.FastDateParser:void <init>(java.lang.String,java.util.TimeZone,java.util.Locale)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.IoUtil:java.util.Collection readLines(java.io.Reader,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.IoUtil:java.util.Collection readLines(java.io.InputStream,java.nio.charset.Charset,java.util.Collection)"
        ]
    },
    "cn.hutool.core.io.IoUtil:void readLines(java.io.InputStream,java.nio.charset.Charset,cn.hutool.core.io.LineHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.IoUtil:void readUtf8Lines(java.io.InputStream,cn.hutool.core.io.LineHandler)"
        ]
    },
    "cn.hutool.core.io.resource.MultiFileResource:cn.hutool.core.io.resource.MultiFileResource add(java.io.File[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.resource.MultiFileResource:void <init>(java.io.File[])"
        ]
    },
    "cn.hutool.core.io.resource.MultiFileResource:cn.hutool.core.io.resource.MultiResource add(cn.hutool.core.io.resource.Resource)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.math.Arrangement:java.util.List select()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.math.MathUtil:java.util.List arrangementSelect(java.lang.String[])"
        ]
    },
    "cn.hutool.core.math.Arrangement:java.util.List selectAll()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.math.MathUtil:java.util.List arrangementSelect(java.lang.String[],int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.math.Combination:java.util.List selectAll()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.math.MathUtil:java.util.List combinationSelect(java.lang.String[],int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.text.StrSpliter:java.util.List splitTrim(java.lang.String,char,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.text.StrSpliter:java.util.List split(java.lang.String,char,int,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.text.StrSpliter:java.util.List splitPath(java.lang.String,int)",
            "cn.hutool.core.text.StrSpliter:java.util.List splitTrim(java.lang.String,char,boolean)",
            "cn.hutool.core.text.StrSpliter:java.util.List split(java.lang.String,char,boolean,boolean)",
            "cn.hutool.core.text.StrSpliter:java.lang.String[] splitToArray(java.lang.String,char,int,boolean,boolean)",
            "cn.hutool.core.util.StrUtil:java.util.List split(java.lang.CharSequence,char,int,boolean,boolean)"
        ]
    },
    "cn.hutool.core.text.StrSpliter:java.util.List splitIgnoreCase(java.lang.String,char,int,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.text.StrSpliter:java.util.List split(java.lang.String,java.lang.String,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.text.StrSpliter:java.util.List splitTrim(java.lang.String,java.lang.String,boolean)"
        ]
    },
    "cn.hutool.core.text.StrSpliter:java.util.List split(java.lang.String,java.lang.String,int,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.text.StrSpliter:java.util.List splitTrim(java.lang.String,java.lang.String,int,boolean)",
            "cn.hutool.core.text.StrSpliter:java.lang.String[] splitToArray(java.lang.String,java.lang.String,int,boolean,boolean)",
            "cn.hutool.core.util.StrUtil:java.util.List split(java.lang.CharSequence,java.lang.CharSequence,int,boolean,boolean)"
        ]
    },
    "cn.hutool.core.text.StrSpliter:java.util.List splitIgnoreCase(java.lang.String,java.lang.String,int,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.text.StrSpliter:java.util.List splitTrimIgnoreCase(java.lang.String,java.lang.String,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.sql.Condition:void parseValue()"
        ]
    },
    "cn.hutool.core.text.StrSpliter:java.lang.String[] splitToArray(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.text.StrSpliter:java.util.List splitByRegex(java.lang.String,java.lang.String,int,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.text.StrSpliter:java.lang.String[] splitToArray(java.lang.String,java.util.regex.Pattern,int,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.cron.pattern.matcher.ValueMatcherBuilder:java.util.List parseStep(java.lang.String,cn.hutool.cron.pattern.parser.ValueParser)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.cron.pattern.matcher.ValueMatcherBuilder:java.util.List parseArray(java.lang.String,cn.hutool.cron.pattern.parser.ValueParser)"
        ]
    },
    "cn.hutool.core.util.ReUtil:java.util.List findAll(java.lang.String,java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ReUtil:java.util.List findAllGroup0(java.lang.String,java.lang.String)",
            "cn.hutool.core.util.ReUtil:java.util.List findAllGroup1(java.lang.String,java.lang.String)"
        ]
    },
    "cn.hutool.core.util.ReUtil:java.util.List findAllGroup0(java.util.regex.Pattern,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ReUtil:java.util.List findAllGroup1(java.util.regex.Pattern,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.handler.EntityListHandler:java.lang.Object handle(java.sql.ResultSet)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.sql.SqlExecutor:java.lang.Object query(java.sql.PreparedStatement,cn.hutool.db.handler.RsHandler,java.lang.Object[])"
        ]
    },
    "cn.hutool.db.handler.EntitySetHandler:java.lang.Object handle(java.sql.ResultSet)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.sql.SqlExecutor:java.lang.Object query(java.sql.PreparedStatement,cn.hutool.db.handler.RsHandler,java.lang.Object[])"
        ]
    },
    "cn.hutool.db.handler.PageResultHandler:java.lang.Object handle(java.sql.ResultSet)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.sql.SqlExecutor:java.lang.Object query(java.sql.PreparedStatement,cn.hutool.db.handler.RsHandler,java.lang.Object[])"
        ]
    },
    "cn.hutool.db.handler.BeanListHandler:java.lang.Object handle(java.sql.ResultSet)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.sql.SqlExecutor:java.lang.Object query(java.sql.PreparedStatement,cn.hutool.db.handler.RsHandler,java.lang.Object[])"
        ]
    },
    "cn.hutool.json.JSONArray:void <init>(java.lang.CharSequence)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.json.JSONUtil:cn.hutool.json.JSONArray parseArray(java.lang.String)"
        ]
    },
    "cn.hutool.poi.excel.ExcelWriter:cn.hutool.poi.excel.ExcelWriter merge(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ClassUtil:java.lang.Object invoke(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.ds.simple.SimpleDataSource:void <init>(java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.lang.Assert:java.util.Map notEmpty(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.map.MapUtil:java.util.TreeMap sort(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.SecureUtil:java.lang.String signParams(cn.hutool.crypto.symmetric.SymmetricCrypto,java.util.Map,java.lang.String,java.lang.String,boolean)",
            "cn.hutool.crypto.SecureUtil:java.lang.String signParams(cn.hutool.crypto.digest.DigestAlgorithm,java.util.Map,java.lang.String,java.lang.String,boolean)"
        ]
    },
    "cn.hutool.setting.AbsSetting$1:boolean containsKey(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.setting.AbsSetting$1:boolean containsKey(java.lang.Object)"
        ]
    },
    "cn.hutool.setting.AbsSetting:java.lang.String getStr(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.setting.AbsSetting:java.lang.String getStr(java.lang.Object,java.lang.String)"
        ]
    },
    "cn.hutool.setting.AbsSetting:java.lang.String getStr(java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.nosql.redis.RedisDS:cn.hutool.db.nosql.redis.RedisDS init(java.lang.String)"
        ]
    },
    "cn.hutool.setting.AbsSetting:java.lang.String[] getStrings(java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.setting.AbsSetting:java.lang.String[] getStrings(java.lang.String,java.lang.String)"
        ]
    },
    "cn.hutool.setting.AbsSetting:java.lang.Integer getInt(java.lang.String,java.lang.String,java.lang.Integer)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.ds.pooled.DbSetting:cn.hutool.db.ds.pooled.DbConfig getDbConfig(java.lang.String)",
            "cn.hutool.db.nosql.mongo.MongoDS:com.mongodb.ServerAddress createServerAddress(java.lang.String)",
            "cn.hutool.db.nosql.redis.RedisDS:cn.hutool.db.nosql.redis.RedisDS init(java.lang.String)",
            "cn.hutool.setting.AbsSetting:java.lang.Integer getInt(java.lang.String,java.lang.String)"
        ]
    },
    "cn.hutool.setting.AbsSetting:java.lang.Boolean getBool(java.lang.String,java.lang.String,java.lang.Boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.nosql.redis.RedisDS:cn.hutool.db.nosql.redis.RedisDS init(java.lang.String)",
            "cn.hutool.setting.AbsSetting:java.lang.Boolean getBool(java.lang.String,java.lang.String)"
        ]
    },
    "cn.hutool.setting.AbsSetting:java.lang.Long getLong(java.lang.String,java.lang.String,java.lang.Long)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.ds.pooled.DbSetting:cn.hutool.db.ds.pooled.DbConfig getDbConfig(java.lang.String)",
            "cn.hutool.setting.AbsSetting:java.lang.Long getLong(java.lang.String,java.lang.String)"
        ]
    },
    "cn.hutool.setting.AbsSetting:java.lang.Character getChar(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.setting.AbsSetting:java.lang.Double getDouble(java.lang.String,java.lang.String,java.lang.Double)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.setting.AbsSetting:java.lang.Double getDouble(java.lang.String,java.lang.String)"
        ]
    },
    "cn.hutool.setting.Setting:java.lang.Object get(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.annotation.CombinationAnnotationElement:java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)",
            "cn.hutool.core.bean.BeanDesc:cn.hutool.core.bean.BeanDesc$PropDesc getProp(java.lang.String)",
            "cn.hutool.core.bean.BeanDesc:java.lang.reflect.Field getField(java.lang.String)",
            "cn.hutool.core.bean.BeanDesc:java.lang.reflect.Method getGetter(java.lang.String)",
            "cn.hutool.core.bean.BeanDesc:java.lang.reflect.Method getSetter(java.lang.String)",
            "cn.hutool.core.bean.BeanUtil:java.beans.PropertyDescriptor getPropertyDescriptor(java.lang.Class,java.lang.String,boolean)",
            "cn.hutool.core.bean.BeanUtil:java.lang.Object getFieldValue(java.lang.Object,java.lang.String)",
            "cn.hutool.core.bean.copier.BeanCopier:void valueProviderToBean(cn.hutool.core.bean.copier.ValueProvider,java.lang.Object)",
            "cn.hutool.core.bean.copier.provider.BeanValueProvider:java.lang.Object value(java.lang.String,java.lang.reflect.Type)",
            "cn.hutool.core.bean.copier.provider.MapValueProvider:java.lang.Object value(java.lang.String,java.lang.reflect.Type)",
            "cn.hutool.core.bean.DynaBean:java.lang.Object get(java.lang.String)",
            "cn.hutool.core.collection.CollUtil$4:java.lang.Object edit(java.lang.Object)",
            "cn.hutool.core.collection.CollUtil$5:boolean accept(java.lang.Object)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection union(java.util.Collection,java.util.Collection)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection intersection(java.util.Collection,java.util.Collection)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection disjunction(java.util.Collection,java.util.Collection)",
            "cn.hutool.core.collection.CollUtil:java.util.ArrayList valuesOfKeys(java.util.Map,java.lang.Object[])",
            "cn.hutool.core.collection.CollUtil:java.util.ArrayList valuesOfKeys(java.util.Map,java.util.Iterator)",
            "cn.hutool.core.convert.BasicType:java.lang.Class wrap(java.lang.Class)",
            "cn.hutool.core.convert.BasicType:java.lang.Class unWrap(java.lang.Class)",
            "cn.hutool.core.convert.ConverterRegistry:cn.hutool.core.convert.Converter getDefaultConverter(java.lang.reflect.Type)",
            "cn.hutool.core.convert.ConverterRegistry:cn.hutool.core.convert.Converter getCustomConverter(java.lang.reflect.Type)",
            "cn.hutool.core.date.format.FastDateParser$CaseInsensitiveTextStrategy:void setCalendar(cn.hutool.core.date.format.FastDateParser,java.util.Calendar,java.lang.String)",
            "cn.hutool.core.date.format.FastDateParser$TimeZoneStrategy:void setCalendar(cn.hutool.core.date.format.FastDateParser,java.util.Calendar,java.lang.String)",
            "cn.hutool.core.exceptions.ExceptionUtil:java.lang.String stacktraceToString(java.lang.Throwable,int,java.util.Map)",
            "cn.hutool.core.io.watch.WatchMonitor:void watch(cn.hutool.core.io.watch.Watcher)",
            "cn.hutool.core.lang.SimpleCache:java.lang.Object get(java.lang.Object)",
            "cn.hutool.core.lang.Singleton:java.lang.Object get(java.lang.Class,java.lang.Object[])",
            "cn.hutool.core.map.MapProxy:java.lang.Object getObj(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.map.MapProxy:java.lang.Object get(java.lang.Object)",
            "cn.hutool.core.map.MapUtil:java.util.Map filter(java.util.Map,java.lang.Object[])",
            "cn.hutool.core.map.MapUtil:java.lang.Object get(java.util.Map,java.lang.Object,java.lang.Class)",
            "cn.hutool.core.text.csv.CsvRow:java.lang.String getByName(java.lang.String)",
            "cn.hutool.core.text.csv.CsvRow:java.util.Map getFieldMap()",
            "cn.hutool.core.text.replacer.LookupReplacer:int replace(java.lang.CharSequence,int,cn.hutool.core.text.StrBuilder)",
            "cn.hutool.core.util.ClassLoaderUtil:java.lang.Class loadPrimitiveClass(java.lang.String)",
            "cn.hutool.core.util.ClassUtil:boolean isAssignable(java.lang.Class,java.lang.Class)",
            "cn.hutool.core.util.IdcardUtil:boolean isvalidCard15(java.lang.String)",
            "cn.hutool.core.util.IdcardUtil:boolean isValidTWCard(java.lang.String)",
            "cn.hutool.core.util.IdcardUtil:java.lang.String getProvinceByIdCard(java.lang.String)",
            "cn.hutool.cache.impl.AbstractCache:boolean containsKey(java.lang.Object)",
            "cn.hutool.cache.impl.AbstractCache:java.lang.Object get(java.lang.Object,boolean)",
            "cn.hutool.db.dialect.DialectFactory:cn.hutool.db.dialect.Dialect getDialect(javax.sql.DataSource)",
            "cn.hutool.db.ds.c3p0.C3p0DSFactory:javax.sql.DataSource getDataSource(java.lang.String)",
            "cn.hutool.db.ds.c3p0.C3p0DSFactory:void close(java.lang.String)",
            "cn.hutool.db.ds.dbcp.DbcpDSFactory:javax.sql.DataSource getDataSource(java.lang.String)",
            "cn.hutool.db.ds.dbcp.DbcpDSFactory:void close(java.lang.String)",
            "cn.hutool.db.ds.druid.DruidDSFactory:javax.sql.DataSource getDataSource(java.lang.String)",
            "cn.hutool.db.ds.druid.DruidDSFactory:void close(java.lang.String)",
            "cn.hutool.db.ds.hikari.HikariDSFactory:javax.sql.DataSource getDataSource(java.lang.String)",
            "cn.hutool.db.ds.hikari.HikariDSFactory:void close(java.lang.String)",
            "cn.hutool.db.ds.jndi.JndiDSFactory:javax.sql.DataSource getDataSource(java.lang.String)",
            "cn.hutool.db.ds.pooled.PooledDSFactory:javax.sql.DataSource getDataSource(java.lang.String)",
            "cn.hutool.db.ds.pooled.PooledDSFactory:void close(java.lang.String)",
            "cn.hutool.db.ds.simple.SimpleDSFactory:javax.sql.DataSource getDataSource(java.lang.String)",
            "cn.hutool.db.ds.simple.SimpleDSFactory:void close(java.lang.String)",
            "cn.hutool.db.ds.tomcat.TomcatDSFactory:org.apache.tomcat.jdbc.pool.DataSource getDataSource(java.lang.String)",
            "cn.hutool.db.ds.tomcat.TomcatDSFactory:void close(java.lang.String)",
            "cn.hutool.db.handler.HandleHelper:java.lang.Object handleRow(int,java.sql.ResultSetMetaData,java.sql.ResultSet,java.lang.Class)",
            "cn.hutool.db.nosql.mongo.MongoFactory:cn.hutool.db.nosql.mongo.MongoDS getDS(java.lang.String,int)",
            "cn.hutool.db.nosql.mongo.MongoFactory:cn.hutool.db.nosql.mongo.MongoDS getDS(java.lang.String[])",
            "cn.hutool.db.nosql.mongo.MongoFactory:cn.hutool.db.nosql.mongo.MongoDS getDS(cn.hutool.setting.Setting,java.lang.String[])",
            "cn.hutool.db.sql.NamedSql:void parse(java.lang.String,java.util.Map)",
            "cn.hutool.db.ThreadLocalConnection$GroupedConnection:java.sql.Connection get(javax.sql.DataSource)",
            "cn.hutool.db.ThreadLocalConnection$GroupedConnection:cn.hutool.db.ThreadLocalConnection$GroupedConnection close(javax.sql.DataSource)",
            "cn.hutool.extra.servlet.multipart.MultipartFormData:java.lang.String getParam(java.lang.String)",
            "cn.hutool.extra.servlet.multipart.MultipartFormData:java.lang.String[] getArrayParam(java.lang.String)",
            "cn.hutool.extra.servlet.multipart.MultipartFormData:cn.hutool.extra.servlet.multipart.UploadFile[] getFiles(java.lang.String)",
            "cn.hutool.extra.servlet.multipart.MultipartFormData:void putFile(java.lang.String,cn.hutool.extra.servlet.multipart.UploadFile)",
            "cn.hutool.extra.servlet.multipart.MultipartFormData:void putParameter(java.lang.String,java.lang.String)",
            "cn.hutool.extra.servlet.ServletUtil:javax.servlet.http.Cookie getCookie(javax.servlet.http.HttpServletRequest,java.lang.String)",
            "cn.hutool.extra.ssh.JschSessionPool:com.jcraft.jsch.Session get(java.lang.String)",
            "cn.hutool.extra.ssh.JschSessionPool:void close(java.lang.String)",
            "cn.hutool.http.GlobalHeaders:java.util.List headerList(java.lang.String)",
            "cn.hutool.http.GlobalHeaders:cn.hutool.http.GlobalHeaders header(java.lang.String,java.lang.String,boolean)",
            "cn.hutool.http.HTMLFilter:void <init>(java.util.Map)",
            "cn.hutool.http.HTMLFilter:java.lang.String checkTags(java.lang.String)",
            "cn.hutool.http.HTMLFilter:java.lang.String processTag(java.lang.String)",
            "cn.hutool.http.HTMLFilter:boolean allowedAttribute(java.lang.String,java.lang.String)",
            "cn.hutool.http.HttpBase:java.lang.Object header(java.lang.String,java.lang.String,boolean)",
            "cn.hutool.http.HttpUtil:void addParam(java.util.Map,java.lang.String,java.lang.String,java.lang.String)",
            "cn.hutool.log.LogFactory:cn.hutool.log.Log getLog(java.lang.String)",
            "cn.hutool.log.LogFactory:cn.hutool.log.Log getLog(java.lang.Class)",
            "cn.hutool.setting.profile.Profile:cn.hutool.setting.Setting getSetting(java.lang.String)",
            "cn.hutool.setting.SettingUtil:cn.hutool.setting.Setting get(java.lang.String)",
            "cn.hutool.json.JSONObject:java.lang.Object get(java.lang.Object)",
            "cn.hutool.json.JSONObject:java.lang.Object getObj(java.lang.String,java.lang.Object)",
            "cn.hutool.json.JSONObject:java.io.Writer write(java.io.Writer,int,int)",
            "cn.hutool.poi.excel.ExcelReader:java.util.List aliasHeader(java.util.List)",
            "cn.hutool.poi.excel.ExcelWriter:java.util.Collection aliasHeader(java.util.Collection)"
        ]
    },
    "cn.hutool.db.ds.tomcat.TomcatDSFactory:java.lang.String getAndRemoveProperty(cn.hutool.setting.Setting,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.ds.tomcat.TomcatDSFactory:org.apache.tomcat.jdbc.pool.DataSource createDataSource(java.lang.String)"
        ]
    },
    "cn.hutool.setting.Setting:java.lang.Object getAndRemove(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.setting.Setting:java.lang.String getAndRemoveStr(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.ds.c3p0.C3p0DSFactory:com.mchange.v2.c3p0.ComboPooledDataSource createDataSource(java.lang.String)",
            "cn.hutool.db.ds.dbcp.DbcpDSFactory:org.apache.commons.dbcp2.BasicDataSource createDataSource(java.lang.String)",
            "cn.hutool.db.ds.druid.DruidDSFactory:com.alibaba.druid.pool.DruidDataSource createDataSource(java.lang.String)",
            "cn.hutool.db.ds.pooled.DbSetting:cn.hutool.db.ds.pooled.DbConfig getDbConfig(java.lang.String)",
            "cn.hutool.db.ds.simple.SimpleDataSource:void <init>(cn.hutool.setting.Setting,java.lang.String)"
        ]
    },
    "cn.hutool.setting.Setting:java.lang.Object remove(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.FileTypeUtil:java.lang.String removeFileType(java.lang.String)",
            "cn.hutool.core.lang.SimpleCache:java.lang.Object remove(java.lang.Object)",
            "cn.hutool.core.lang.Singleton:void remove(java.lang.Class)",
            "cn.hutool.core.map.MapProxy:java.lang.Object remove(java.lang.Object)",
            "cn.hutool.cache.impl.AbstractCache:void remove(java.lang.Object)",
            "cn.hutool.cache.impl.AbstractCache:void removeWithoutLock(java.lang.Object)",
            "cn.hutool.cache.impl.FIFOCache:int pruneCache()",
            "cn.hutool.db.ds.c3p0.C3p0DSFactory:void close(java.lang.String)",
            "cn.hutool.db.ds.dbcp.DbcpDSFactory:void close(java.lang.String)",
            "cn.hutool.db.ds.druid.DruidDSFactory:void close(java.lang.String)",
            "cn.hutool.db.ds.hikari.HikariDSFactory:void close(java.lang.String)",
            "cn.hutool.db.ds.pooled.PooledDSFactory:void close(java.lang.String)",
            "cn.hutool.db.ds.simple.SimpleDSFactory:void close(java.lang.String)",
            "cn.hutool.db.ds.tomcat.TomcatDSFactory:void close(java.lang.String)",
            "cn.hutool.db.ThreadLocalConnection$GroupedConnection:cn.hutool.db.ThreadLocalConnection$GroupedConnection close(javax.sql.DataSource)",
            "cn.hutool.extra.ssh.JschSessionPool:void close(java.lang.String)",
            "cn.hutool.http.GlobalHeaders:cn.hutool.http.GlobalHeaders removeHeader(java.lang.String)",
            "cn.hutool.http.HttpBase:java.lang.Object removeHeader(java.lang.String)",
            "cn.hutool.json.JSONObject:java.lang.Object remove(java.lang.Object)",
            "cn.hutool.poi.excel.ExcelReader:cn.hutool.poi.excel.ExcelReader removeHeaderAlias(java.lang.String)"
        ]
    },
    "cn.hutool.core.map.MapProxy:boolean containsValue(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.map.MapProxy:boolean containsValue(java.lang.Object)",
            "cn.hutool.json.JSONObject:boolean containsValue(java.lang.Object)"
        ]
    },
    "cn.hutool.json.JSONObject:boolean containsValue(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.map.MapProxy:boolean containsValue(java.lang.Object)",
            "cn.hutool.json.JSONObject:boolean containsValue(java.lang.Object)"
        ]
    },
    "cn.hutool.core.lang.SimpleCache:void clear()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.lang.PatternPool:void clear()"
        ]
    },
    "cn.hutool.core.lang.Singleton:void destroy()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.map.MapProxy:void clear()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.lang.SimpleCache:void clear()",
            "cn.hutool.core.lang.Singleton:void destroy()",
            "cn.hutool.core.map.MapProxy:void clear()",
            "cn.hutool.core.map.MapUtil:java.util.Map filter(java.util.Map,cn.hutool.core.lang.Editor)",
            "cn.hutool.core.map.MapUtil:java.util.Map filter(java.util.Map,cn.hutool.core.lang.Filter)",
            "cn.hutool.core.map.MapUtil:java.util.Map filter(java.util.Map,java.lang.Object[])",
            "cn.hutool.cache.impl.AbstractCache:void clear()",
            "cn.hutool.db.ds.c3p0.C3p0DSFactory:void destroy()",
            "cn.hutool.db.ds.dbcp.DbcpDSFactory:void destroy()",
            "cn.hutool.db.ds.druid.DruidDSFactory:void destroy()",
            "cn.hutool.db.ds.hikari.HikariDSFactory:void destroy()",
            "cn.hutool.db.ds.pooled.PooledDSFactory:void destroy()",
            "cn.hutool.db.ds.simple.SimpleDSFactory:void destroy()",
            "cn.hutool.db.ds.tomcat.TomcatDSFactory:void destroy()",
            "cn.hutool.db.nosql.mongo.MongoFactory:void closeAll()",
            "cn.hutool.extra.ssh.JschSessionPool:void closeAll()",
            "cn.hutool.http.GlobalHeaders:cn.hutool.http.GlobalHeaders putDefault(boolean)",
            "cn.hutool.http.HTMLFilter:void reset()",
            "cn.hutool.setting.profile.Profile:cn.hutool.setting.profile.Profile clear()",
            "cn.hutool.json.JSONObject:void clear()"
        ]
    },
    "cn.hutool.cache.impl.AbstractCache:void clear()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.cache.file.AbstractFileCache:void clear()"
        ]
    },
    "cn.hutool.http.HTMLFilter:void reset()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HTMLFilter:java.lang.String filter(java.lang.String)"
        ]
    },
    "cn.hutool.setting.profile.Profile:cn.hutool.setting.profile.Profile clear()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.json.JSONObject:void clear()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.lang.SimpleCache:void clear()",
            "cn.hutool.core.lang.Singleton:void destroy()",
            "cn.hutool.core.map.MapProxy:void clear()",
            "cn.hutool.core.map.MapUtil:java.util.Map filter(java.util.Map,cn.hutool.core.lang.Editor)",
            "cn.hutool.core.map.MapUtil:java.util.Map filter(java.util.Map,cn.hutool.core.lang.Filter)",
            "cn.hutool.core.map.MapUtil:java.util.Map filter(java.util.Map,java.lang.Object[])",
            "cn.hutool.cache.impl.AbstractCache:void clear()",
            "cn.hutool.db.ds.c3p0.C3p0DSFactory:void destroy()",
            "cn.hutool.db.ds.dbcp.DbcpDSFactory:void destroy()",
            "cn.hutool.db.ds.druid.DruidDSFactory:void destroy()",
            "cn.hutool.db.ds.hikari.HikariDSFactory:void destroy()",
            "cn.hutool.db.ds.pooled.PooledDSFactory:void destroy()",
            "cn.hutool.db.ds.simple.SimpleDSFactory:void destroy()",
            "cn.hutool.db.ds.tomcat.TomcatDSFactory:void destroy()",
            "cn.hutool.db.nosql.mongo.MongoFactory:void closeAll()",
            "cn.hutool.extra.ssh.JschSessionPool:void closeAll()",
            "cn.hutool.http.GlobalHeaders:cn.hutool.http.GlobalHeaders putDefault(boolean)",
            "cn.hutool.http.HTMLFilter:void reset()",
            "cn.hutool.setting.profile.Profile:cn.hutool.setting.profile.Profile clear()",
            "cn.hutool.json.JSONObject:void clear()"
        ]
    },
    "cn.hutool.core.map.MapProxy:java.util.Set keySet()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.map.MapProxy:java.util.Set keySet()",
            "cn.hutool.core.util.ClassLoaderUtil:void <clinit>()",
            "cn.hutool.extra.servlet.multipart.MultipartFormData:java.util.Set getParamNames()",
            "cn.hutool.extra.servlet.multipart.MultipartFormData:java.util.Set getFileParamNames()",
            "cn.hutool.http.HTMLFilter:java.lang.String checkTags(java.lang.String)",
            "cn.hutool.json.JSONObject:java.util.Set keySet()",
            "cn.hutool.poi.excel.ExcelWriter:cn.hutool.poi.excel.ExcelWriter writeRow(java.util.Map,boolean)",
            "cn.hutool.poi.excel.ExcelWriter:java.util.Comparator getInitedAliasComparator()"
        ]
    },
    "cn.hutool.extra.servlet.multipart.MultipartFormData:java.util.Set getParamNames()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.extra.servlet.multipart.MultipartFormData:java.util.Set getFileParamNames()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.json.JSONObject:java.util.Set keySet()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.map.MapProxy:java.util.Set keySet()",
            "cn.hutool.core.util.ClassLoaderUtil:void <clinit>()",
            "cn.hutool.extra.servlet.multipart.MultipartFormData:java.util.Set getParamNames()",
            "cn.hutool.extra.servlet.multipart.MultipartFormData:java.util.Set getFileParamNames()",
            "cn.hutool.http.HTMLFilter:java.lang.String checkTags(java.lang.String)",
            "cn.hutool.json.JSONObject:java.util.Set keySet()",
            "cn.hutool.json.JSONObject:java.io.Writer write(java.io.Writer,int,int)",
            "cn.hutool.json.XML:java.lang.String toXml(java.lang.Object,java.lang.String)",
            "cn.hutool.poi.excel.ExcelWriter:cn.hutool.poi.excel.ExcelWriter writeRow(java.util.Map,boolean)",
            "cn.hutool.poi.excel.ExcelWriter:java.util.Comparator getInitedAliasComparator()"
        ]
    },
    "cn.hutool.core.annotation.CombinationAnnotationElement:java.lang.'annotation'.Annotation[] getAnnotations()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.annotation.AnnotationUtil:java.lang.'annotation'.Annotation[] getAnnotations(java.lang.reflect.AnnotatedElement,boolean)",
            "cn.hutool.core.annotation.CombinationAnnotationElement:void init(java.lang.reflect.AnnotatedElement)"
        ]
    },
    "cn.hutool.core.annotation.CombinationAnnotationElement:java.lang.'annotation'.Annotation[] getDeclaredAnnotations()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.annotation.CombinationAnnotationElement:void init(java.lang.reflect.AnnotatedElement)"
        ]
    },
    "cn.hutool.core.bean.BeanDesc:java.util.Collection getProps()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.BeanUtil:java.util.Map beanToMap(java.lang.Object,java.util.Map,boolean,cn.hutool.core.lang.Editor)",
            "cn.hutool.core.bean.copier.BeanCopier:void valueProviderToBean(cn.hutool.core.bean.copier.ValueProvider,java.lang.Object)",
            "cn.hutool.json.JSONObject:void populateMap(java.lang.Object)"
        ]
    },
    "cn.hutool.core.map.MapProxy:java.util.Collection values()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.annotation.CombinationAnnotationElement:java.lang.'annotation'.Annotation[] getAnnotations()",
            "cn.hutool.core.annotation.CombinationAnnotationElement:java.lang.'annotation'.Annotation[] getDeclaredAnnotations()",
            "cn.hutool.core.bean.BeanDesc:java.util.Collection getProps()",
            "cn.hutool.core.map.MapProxy:java.util.Collection values()",
            "cn.hutool.core.util.ObjectUtil:boolean contains(java.lang.Object,java.lang.Object)",
            "cn.hutool.cache.impl.AbstractCache:java.util.Iterator cacheObjIterator()",
            "cn.hutool.cache.impl.FIFOCache:int pruneCache()",
            "cn.hutool.cache.impl.LFUCache:int pruneCache()",
            "cn.hutool.cache.impl.LRUCache:int pruneCache()",
            "cn.hutool.cache.impl.TimedCache:int pruneCache()",
            "cn.hutool.db.ds.c3p0.C3p0DSFactory:void destroy()",
            "cn.hutool.db.ds.dbcp.DbcpDSFactory:void destroy()",
            "cn.hutool.db.ds.druid.DruidDSFactory:void destroy()",
            "cn.hutool.db.ds.hikari.HikariDSFactory:void destroy()",
            "cn.hutool.db.ds.pooled.PooledDSFactory:void destroy()",
            "cn.hutool.db.ds.simple.SimpleDSFactory:void destroy()",
            "cn.hutool.db.ds.tomcat.TomcatDSFactory:void destroy()",
            "cn.hutool.db.nosql.mongo.MongoFactory:void closeAll()",
            "cn.hutool.extra.ssh.JschSessionPool:void closeAll()",
            "cn.hutool.json.JSONObject:java.util.Collection values()",
            "cn.hutool.poi.excel.ExcelWriter:cn.hutool.poi.excel.ExcelWriter writeRow(java.util.Map,boolean)"
        ]
    },
    "cn.hutool.json.JSONObject:java.util.Collection values()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.annotation.CombinationAnnotationElement:java.lang.'annotation'.Annotation[] getAnnotations()",
            "cn.hutool.core.annotation.CombinationAnnotationElement:java.lang.'annotation'.Annotation[] getDeclaredAnnotations()",
            "cn.hutool.core.bean.BeanDesc:java.util.Collection getProps()",
            "cn.hutool.core.map.MapProxy:java.util.Collection values()",
            "cn.hutool.core.util.ObjectUtil:boolean contains(java.lang.Object,java.lang.Object)",
            "cn.hutool.cache.impl.AbstractCache:java.util.Iterator cacheObjIterator()",
            "cn.hutool.cache.impl.FIFOCache:int pruneCache()",
            "cn.hutool.cache.impl.LFUCache:int pruneCache()",
            "cn.hutool.cache.impl.LRUCache:int pruneCache()",
            "cn.hutool.cache.impl.TimedCache:int pruneCache()",
            "cn.hutool.db.ds.c3p0.C3p0DSFactory:void destroy()",
            "cn.hutool.db.ds.dbcp.DbcpDSFactory:void destroy()",
            "cn.hutool.db.ds.druid.DruidDSFactory:void destroy()",
            "cn.hutool.db.ds.hikari.HikariDSFactory:void destroy()",
            "cn.hutool.db.ds.pooled.PooledDSFactory:void destroy()",
            "cn.hutool.db.ds.simple.SimpleDSFactory:void destroy()",
            "cn.hutool.db.ds.tomcat.TomcatDSFactory:void destroy()",
            "cn.hutool.db.nosql.mongo.MongoFactory:void closeAll()",
            "cn.hutool.extra.ssh.JschSessionPool:void closeAll()",
            "cn.hutool.json.JSONObject:java.util.Collection values()",
            "cn.hutool.poi.excel.ExcelWriter:cn.hutool.poi.excel.ExcelWriter writeRow(java.util.Map,boolean)"
        ]
    },
    "cn.hutool.core.map.MapProxy:java.util.Set entrySet()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.collection.CollUtil:java.util.LinkedHashMap sortByEntry(java.util.Map,java.util.Comparator)",
            "cn.hutool.core.collection.CollUtil:void forEach(java.util.Map,cn.hutool.core.collection.CollUtil$KVConsumer)",
            "cn.hutool.core.convert.BasicType:void <clinit>()",
            "cn.hutool.core.convert.impl.MapConverter:void convertMapToMap(java.util.Map,java.util.Map)",
            "cn.hutool.core.date.format.FastDateParser:java.util.Map appendDisplayNames(java.util.Calendar,java.util.Locale,int,java.lang.StringBuilder)",
            "cn.hutool.core.io.file.FileWriter:java.io.File writeMap(java.util.Map,cn.hutool.core.io.file.LineSeparator,java.lang.String,boolean)",
            "cn.hutool.core.io.FileTypeUtil:java.lang.String getType(java.lang.String)",
            "cn.hutool.core.map.CustomKeyLinkedMap:void putAll(java.util.Map)",
            "cn.hutool.core.map.CustomKeyMap:void putAll(java.util.Map)",
            "cn.hutool.core.map.MapProxy:java.util.Set entrySet()",
            "cn.hutool.core.map.MapUtil:java.util.Map toListMap(java.lang.Iterable)",
            "cn.hutool.core.map.MapUtil:java.util.List toMapList(java.util.Map)",
            "cn.hutool.core.map.MapUtil:java.lang.String join(java.util.Map,java.lang.String,java.lang.String,boolean)",
            "cn.hutool.core.map.MapUtil:java.util.Map filter(java.util.Map,cn.hutool.core.lang.Editor)",
            "cn.hutool.core.map.MapUtil:java.util.Map filter(java.util.Map,cn.hutool.core.lang.Filter)",
            "cn.hutool.core.map.MapUtil:java.util.Map inverse(java.util.Map)",
            "cn.hutool.core.text.csv.CsvRow:java.util.Map getFieldMap()",
            "cn.hutool.core.text.csv.CsvRow:java.lang.String toString()",
            "cn.hutool.core.util.StrUtil:java.lang.String format(java.lang.CharSequence,java.util.Map)",
            "cn.hutool.core.util.XmlUtil:void mapToXml(org.w3c.dom.Document,org.w3c.dom.Element,java.util.Map)",
            "cn.hutool.extra.servlet.ServletUtil:java.util.Map getParamMap(javax.servlet.ServletRequest)",
            "cn.hutool.extra.template.engine.velocity.VelocityUtil:void merge(org.apache.velocity.Template,org.apache.velocity.VelocityContext,java.io.Writer)",
            "cn.hutool.http.GlobalHeaders:cn.hutool.http.GlobalHeaders header(java.util.Map)",
            "cn.hutool.http.HttpBase:java.lang.Object header(java.util.Map,boolean)",
            "cn.hutool.http.HttpBase:java.lang.Object addHeaders(java.util.Map)",
            "cn.hutool.http.HttpBase:java.lang.String toString()",
            "cn.hutool.http.HttpConnection:cn.hutool.http.HttpConnection header(java.util.Map,boolean)",
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest form(java.util.Map)",
            "cn.hutool.http.HttpRequest:void writeForm(java.io.OutputStream)",
            "cn.hutool.http.HttpRequest:void writeFileForm(java.io.OutputStream)",
            "cn.hutool.http.HttpResponse:java.lang.String toString()",
            "cn.hutool.http.HttpUtil:java.lang.String toParams(java.util.Map,java.nio.charset.Charset)",
            "cn.hutool.http.HttpUtil:java.util.HashMap decodeParamMap(java.lang.String,java.lang.String)",
            "cn.hutool.http.webservice.SoapRequest:java.lang.String toSoapXml()",
            "cn.hutool.setting.GroupedMap:cn.hutool.setting.GroupedMap putAll(java.lang.String,java.util.Map)",
            "cn.hutool.json.JSONObject:void <init>(java.lang.Object,boolean)",
            "cn.hutool.json.JSONObject:void putAll(java.util.Map)",
            "cn.hutool.json.JSONObject:java.util.Set entrySet()"
        ]
    },
    "cn.hutool.json.JSONObject:java.util.Set entrySet()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.collection.CollUtil:java.util.LinkedHashMap sortByEntry(java.util.Map,java.util.Comparator)",
            "cn.hutool.core.collection.CollUtil:void forEach(java.util.Map,cn.hutool.core.collection.CollUtil$KVConsumer)",
            "cn.hutool.core.convert.BasicType:void <clinit>()",
            "cn.hutool.core.convert.impl.MapConverter:void convertMapToMap(java.util.Map,java.util.Map)",
            "cn.hutool.core.date.format.FastDateParser:java.util.Map appendDisplayNames(java.util.Calendar,java.util.Locale,int,java.lang.StringBuilder)",
            "cn.hutool.core.io.file.FileWriter:java.io.File writeMap(java.util.Map,cn.hutool.core.io.file.LineSeparator,java.lang.String,boolean)",
            "cn.hutool.core.io.FileTypeUtil:java.lang.String getType(java.lang.String)",
            "cn.hutool.core.map.CustomKeyLinkedMap:void putAll(java.util.Map)",
            "cn.hutool.core.map.CustomKeyMap:void putAll(java.util.Map)",
            "cn.hutool.core.map.MapProxy:java.util.Set entrySet()",
            "cn.hutool.core.map.MapUtil:java.util.Map toListMap(java.lang.Iterable)",
            "cn.hutool.core.map.MapUtil:java.util.List toMapList(java.util.Map)",
            "cn.hutool.core.map.MapUtil:java.lang.String join(java.util.Map,java.lang.String,java.lang.String,boolean)",
            "cn.hutool.core.map.MapUtil:java.util.Map filter(java.util.Map,cn.hutool.core.lang.Editor)",
            "cn.hutool.core.map.MapUtil:java.util.Map filter(java.util.Map,cn.hutool.core.lang.Filter)",
            "cn.hutool.core.map.MapUtil:java.util.Map inverse(java.util.Map)",
            "cn.hutool.core.text.csv.CsvRow:java.util.Map getFieldMap()",
            "cn.hutool.core.text.csv.CsvRow:java.lang.String toString()",
            "cn.hutool.core.util.StrUtil:java.lang.String format(java.lang.CharSequence,java.util.Map)",
            "cn.hutool.core.util.XmlUtil:void mapToXml(org.w3c.dom.Document,org.w3c.dom.Element,java.util.Map)",
            "cn.hutool.extra.servlet.ServletUtil:java.util.Map getParamMap(javax.servlet.ServletRequest)",
            "cn.hutool.extra.template.engine.velocity.VelocityUtil:void merge(org.apache.velocity.Template,org.apache.velocity.VelocityContext,java.io.Writer)",
            "cn.hutool.http.GlobalHeaders:cn.hutool.http.GlobalHeaders header(java.util.Map)",
            "cn.hutool.http.HttpBase:java.lang.Object header(java.util.Map,boolean)",
            "cn.hutool.http.HttpBase:java.lang.Object addHeaders(java.util.Map)",
            "cn.hutool.http.HttpBase:java.lang.String toString()",
            "cn.hutool.http.HttpConnection:cn.hutool.http.HttpConnection header(java.util.Map,boolean)",
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest form(java.util.Map)",
            "cn.hutool.http.HttpRequest:void writeForm(java.io.OutputStream)",
            "cn.hutool.http.HttpRequest:void writeFileForm(java.io.OutputStream)",
            "cn.hutool.http.HttpResponse:java.lang.String toString()",
            "cn.hutool.http.HttpUtil:java.lang.String toParams(java.util.Map,java.nio.charset.Charset)",
            "cn.hutool.http.HttpUtil:java.util.HashMap decodeParamMap(java.lang.String,java.lang.String)",
            "cn.hutool.http.webservice.SoapRequest:java.lang.String toSoapXml()",
            "cn.hutool.setting.GroupedMap:cn.hutool.setting.GroupedMap putAll(java.lang.String,java.util.Map)",
            "cn.hutool.json.JSONObject:void <init>(java.lang.Object,boolean)",
            "cn.hutool.json.JSONObject:void putAll(java.util.Map)",
            "cn.hutool.json.JSONObject:java.util.Set entrySet()"
        ]
    },
    "cn.hutool.json.JSONUtil:cn.hutool.json.JSONObject parseFromXml(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.json.JSONUtil:cn.hutool.json.JSONObject xmlToJson(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.cron.CronUtil:java.lang.String schedule(java.lang.String,java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.date.DateRange:void <init>(java.util.Date,java.util.Date,cn.hutool.core.date.DateField,int,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.date.DateRange:void <init>(java.util.Date,java.util.Date,cn.hutool.core.date.DateField,int)"
        ]
    },
    "cn.hutool.core.lang.Range:void <init>(java.lang.Object,java.lang.Object,cn.hutool.core.lang.Range$Steper)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.lang.Range:void <init>(java.lang.Object,cn.hutool.core.lang.Range$Steper)"
        ]
    },
    "cn.hutool.core.lang.Range:java.lang.Object next()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.BeanUtil:java.util.Map beanToMap(java.lang.Object,java.util.Map,boolean,cn.hutool.core.lang.Editor)",
            "cn.hutool.core.bean.copier.BeanCopier:void valueProviderToBean(cn.hutool.core.bean.copier.ValueProvider,java.lang.Object)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection union(java.util.Collection,java.util.Collection)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection intersection(java.util.Collection,java.util.Collection)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection disjunction(java.util.Collection,java.util.Collection)",
            "cn.hutool.core.collection.CollUtil:boolean containsAny(java.util.Collection,java.util.Collection)",
            "cn.hutool.core.collection.CollUtil:java.util.HashSet newHashSet(boolean,java.util.Iterator)",
            "cn.hutool.core.collection.CollUtil:java.util.List list(boolean,java.util.Iterator)",
            "cn.hutool.core.collection.CollUtil:java.util.List split(java.util.Collection,int)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection filter(java.util.Collection,cn.hutool.core.lang.Editor)",
            "cn.hutool.core.collection.CollUtil:java.util.List filter(java.util.List,cn.hutool.core.lang.Editor)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection filter(java.util.Collection,cn.hutool.core.lang.Filter)",
            "cn.hutool.core.collection.CollUtil:java.util.List filter(java.util.List,cn.hutool.core.lang.Filter)",
            "cn.hutool.core.collection.CollUtil:java.util.List extract(java.lang.Iterable,cn.hutool.core.lang.Editor)",
            "cn.hutool.core.collection.CollUtil:java.lang.Object findOne(java.lang.Iterable,cn.hutool.core.lang.Filter)",
            "cn.hutool.core.collection.CollUtil:int count(java.lang.Iterable,cn.hutool.core.lang.Matcher)",
            "cn.hutool.core.collection.CollUtil:java.util.TreeSet toTreeSet(java.util.Collection,java.util.Comparator)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection addAll(java.util.Collection,java.lang.Object,java.lang.reflect.Type)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection addAll(java.util.Collection,java.util.Iterator)",
            "cn.hutool.core.collection.CollUtil:java.util.List addAllIfNotContains(java.util.List,java.util.List)",
            "cn.hutool.core.collection.CollUtil:java.util.ArrayList valuesOfKeys(java.util.Map,java.util.Iterator)",
            "cn.hutool.core.collection.CollUtil:java.util.LinkedHashMap sortToMap(java.util.Collection,java.util.Comparator)",
            "cn.hutool.core.collection.CollUtil:void forEach(java.util.Iterator,cn.hutool.core.collection.CollUtil$Consumer)",
            "cn.hutool.core.collection.CollUtil:void forEach(java.util.Map,cn.hutool.core.collection.CollUtil$KVConsumer)",
            "cn.hutool.core.collection.CollUtil:java.util.List group(java.util.Collection,cn.hutool.core.collection.CollUtil$Hash)",
            "cn.hutool.core.collection.ConcurrentHashSet:void <init>(java.lang.Iterable)",
            "cn.hutool.core.collection.CopiedIter:void <init>(java.util.Iterator)",
            "cn.hutool.core.collection.CopiedIter:java.lang.Object next()",
            "cn.hutool.core.collection.IteratorEnumeration:java.lang.Object nextElement()",
            "cn.hutool.core.collection.IterUtil:boolean hasNull(java.util.Iterator)",
            "cn.hutool.core.collection.IterUtil:boolean isAllNull(java.util.Iterator)",
            "cn.hutool.core.collection.IterUtil:java.util.Map countMap(java.util.Iterator)",
            "cn.hutool.core.collection.IterUtil:java.util.Map fieldValueMap(java.util.Iterator,java.lang.String)",
            "cn.hutool.core.collection.IterUtil:java.util.Map fieldValueAsMap(java.util.Iterator,java.lang.String,java.lang.String)",
            "cn.hutool.core.collection.IterUtil:java.util.List fieldValueList(java.util.Iterator,java.lang.String)",
            "cn.hutool.core.collection.IterUtil:java.lang.String join(java.util.Iterator,java.lang.CharSequence,java.lang.String,java.lang.String)",
            "cn.hutool.core.collection.IterUtil:java.util.HashMap toMap(java.lang.Iterable)",
            "cn.hutool.core.collection.IterUtil:java.util.Map toMap(java.util.Iterator,java.util.Iterator)",
            "cn.hutool.core.collection.IterUtil:java.util.List toList(java.util.Iterator)",
            "cn.hutool.core.collection.IterUtil:java.lang.Object getFirst(java.util.Iterator)",
            "cn.hutool.core.comparator.ComparatorChain:int compare(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.convert.BasicType:void <clinit>()",
            "cn.hutool.core.convert.impl.ArrayConverter:java.lang.Object convertObjectToArray(java.lang.Object)",
            "cn.hutool.core.convert.impl.MapConverter:void convertMapToMap(java.util.Map,java.util.Map)",
            "cn.hutool.core.date.format.FastDateParser$TimeZoneStrategy:void <init>(java.util.Locale)",
            "cn.hutool.core.date.format.FastDateParser:java.util.Map appendDisplayNames(java.util.Calendar,java.util.Locale,int,java.lang.StringBuilder)",
            "cn.hutool.core.io.file.FileAppender:cn.hutool.core.io.file.FileAppender flush()",
            "cn.hutool.core.io.file.FileWriter:java.io.File writeLines(java.util.Collection,cn.hutool.core.io.file.LineSeparator,boolean)",
            "cn.hutool.core.io.file.FileWriter:java.io.File writeMap(java.util.Map,cn.hutool.core.io.file.LineSeparator,java.lang.String,boolean)",
            "cn.hutool.core.io.FileTypeUtil:java.lang.String getType(java.lang.String)",
            "cn.hutool.core.io.FileUtil:java.util.List listFileNames(java.lang.String)",
            "cn.hutool.core.io.resource.MultiFileResource:cn.hutool.core.io.resource.MultiFileResource add(java.util.Collection)",
            "cn.hutool.core.io.watch.watchers.WatcherChain:void onCreate(java.nio.file.WatchEvent,java.nio.file.Path)",
            "cn.hutool.core.io.watch.watchers.WatcherChain:void onModify(java.nio.file.WatchEvent,java.nio.file.Path)",
            "cn.hutool.core.io.watch.watchers.WatcherChain:void onDelete(java.nio.file.WatchEvent,java.nio.file.Path)",
            "cn.hutool.core.io.watch.watchers.WatcherChain:void onOverflow(java.nio.file.WatchEvent,java.nio.file.Path)",
            "cn.hutool.core.io.watch.WatchMonitor:void watch(cn.hutool.core.io.watch.Watcher)",
            "cn.hutool.core.lang.ClassScaner:java.util.Set scan()",
            "cn.hutool.core.lang.ClassScaner:void scanJar(java.util.jar.JarFile)",
            "cn.hutool.core.lang.ConsistentHash:void <init>(int,java.util.Collection)",
            "cn.hutool.core.lang.ConsistentHash:void <init>(cn.hutool.core.lang.ConsistentHash$HashFunc,int,java.util.Collection)",
            "cn.hutool.core.lang.Dict:void removeEqual(cn.hutool.core.lang.Dict,java.lang.String[])",
            "cn.hutool.core.lang.JarClassLoader:void loadJar(java.net.URLClassLoader,java.io.File)",
            "cn.hutool.core.lang.JarClassLoader:cn.hutool.core.lang.JarClassLoader addJar(java.io.File)",
            "cn.hutool.core.lang.SyncFinisher:void start()",
            "cn.hutool.core.lang.WeightRandom:void <init>(java.lang.Iterable)",
            "cn.hutool.core.map.CustomKeyLinkedMap:void putAll(java.util.Map)",
            "cn.hutool.core.map.CustomKeyMap:void putAll(java.util.Map)",
            "cn.hutool.core.map.MapUtil:java.util.HashMap of(java.lang.Object[])",
            "cn.hutool.core.map.MapUtil:java.util.Map toListMap(java.lang.Iterable)",
            "cn.hutool.core.map.MapUtil:java.util.List toMapList(java.util.Map)",
            "cn.hutool.core.map.MapUtil:java.lang.String join(java.util.Map,java.lang.String,java.lang.String,boolean)",
            "cn.hutool.core.map.MapUtil:java.util.Map filter(java.util.Map,cn.hutool.core.lang.Editor)",
            "cn.hutool.core.map.MapUtil:java.util.Map filter(java.util.Map,cn.hutool.core.lang.Filter)",
            "cn.hutool.core.map.MapUtil:java.util.Map inverse(java.util.Map)",
            "cn.hutool.core.text.csv.CsvRow:java.util.Map getFieldMap()",
            "cn.hutool.core.text.csv.CsvRow:java.lang.String toString()",
            "cn.hutool.core.text.csv.CsvWriter:cn.hutool.core.text.csv.CsvWriter write(java.util.Collection)",
            "cn.hutool.core.text.replacer.ReplacerChain:int replace(java.lang.CharSequence,int,cn.hutool.core.text.StrBuilder)",
            "cn.hutool.core.util.ClassLoaderUtil:void <clinit>()",
            "cn.hutool.core.util.ImageUtil:javax.imageio.ImageReader getReader(java.lang.String)",
            "cn.hutool.core.util.ObjectUtil:int length(java.lang.Object)",
            "cn.hutool.core.util.ObjectUtil:boolean contains(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.util.ReUtil:java.lang.String extractMulti(java.util.regex.Pattern,java.lang.String,java.lang.String)",
            "cn.hutool.core.util.ReUtil:java.lang.String extractMultiAndDelPre(java.util.regex.Pattern,cn.hutool.core.lang.Holder,java.lang.String)",
            "cn.hutool.core.util.ReUtil:java.lang.String replaceAll(java.lang.String,java.util.regex.Pattern,java.lang.String)",
            "cn.hutool.core.util.StrUtil:java.lang.String format(java.lang.CharSequence,java.util.Map)",
            "cn.hutool.core.util.XmlUtil:void mapToXml(org.w3c.dom.Document,org.w3c.dom.Element,java.util.Map)",
            "cn.hutool.cache.impl.CacheObjIterator:void nextValue()",
            "cn.hutool.cache.impl.FIFOCache:int pruneCache()",
            "cn.hutool.cache.impl.LFUCache:int pruneCache()",
            "cn.hutool.cache.impl.LRUCache:int pruneCache()",
            "cn.hutool.cache.impl.TimedCache:int pruneCache()",
            "cn.hutool.db.ds.c3p0.C3p0DSFactory:void destroy()",
            "cn.hutool.db.ds.dbcp.DbcpDSFactory:void destroy()",
            "cn.hutool.db.ds.druid.DruidDSFactory:void destroy()",
            "cn.hutool.db.ds.druid.DruidDSFactory:com.alibaba.druid.pool.DruidDataSource createDataSource(java.lang.String)",
            "cn.hutool.db.ds.hikari.HikariDSFactory:void destroy()",
            "cn.hutool.db.ds.pooled.PooledDataSource:void close()",
            "cn.hutool.db.ds.pooled.PooledDSFactory:void destroy()",
            "cn.hutool.db.ds.simple.SimpleDSFactory:void destroy()",
            "cn.hutool.db.ds.tomcat.TomcatDSFactory:void destroy()",
            "cn.hutool.db.nosql.mongo.MongoFactory:void closeAll()",
            "cn.hutool.db.sql.SqlBuilder:cn.hutool.db.sql.SqlBuilder insert(cn.hutool.db.Entity,cn.hutool.db.dialect.DialectName)",
            "cn.hutool.db.sql.SqlBuilder:cn.hutool.db.sql.SqlBuilder update(cn.hutool.db.Entity)",
            "cn.hutool.db.sql.SqlUtil:java.lang.String buildEqualsWhere(cn.hutool.db.Entity,java.util.List)",
            "cn.hutool.db.sql.SqlUtil:cn.hutool.db.sql.Condition[] buildConditions(cn.hutool.db.Entity)",
            "cn.hutool.db.sql.Wrapper:cn.hutool.db.Entity wrap(cn.hutool.db.Entity)",
            "cn.hutool.dfa.WordTree:void addWords(java.util.Collection)",
            "cn.hutool.dfa.WordTree:void addWords(java.lang.String[])",
            "cn.hutool.extra.servlet.ServletUtil:java.util.Map getParamMap(javax.servlet.ServletRequest)",
            "cn.hutool.extra.ssh.JschSessionPool:void closeAll()",
            "cn.hutool.extra.ssh.Sftp:boolean delDir(java.lang.String)",
            "cn.hutool.extra.ssh.Sftp:boolean containsIgnoreCase(java.util.List,java.lang.String)",
            "cn.hutool.extra.template.engine.velocity.VelocityUtil:void merge(org.apache.velocity.Template,org.apache.velocity.VelocityContext,java.io.Writer)",
            "cn.hutool.http.GlobalHeaders:cn.hutool.http.GlobalHeaders header(java.util.Map)",
            "cn.hutool.http.HTMLFilter:java.lang.String checkTags(java.lang.String)",
            "cn.hutool.http.HttpBase:java.lang.Object header(java.util.Map,boolean)",
            "cn.hutool.http.HttpBase:java.lang.Object addHeaders(java.util.Map)",
            "cn.hutool.http.HttpBase:java.lang.String toString()",
            "cn.hutool.http.HttpConnection:cn.hutool.http.HttpConnection header(java.util.Map,boolean)",
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest form(java.util.Map)",
            "cn.hutool.http.HttpRequest:void writeForm(java.io.OutputStream)",
            "cn.hutool.http.HttpRequest:void writeFileForm(java.io.OutputStream)",
            "cn.hutool.http.HttpRequest:void appendPart(java.lang.String,cn.hutool.core.io.resource.Resource,java.io.OutputStream)",
            "cn.hutool.http.HttpResponse:java.net.HttpCookie getCookie(java.lang.String)",
            "cn.hutool.http.HttpResponse:java.lang.String toString()",
            "cn.hutool.http.HttpUtil:java.lang.String toParams(java.util.Map,java.nio.charset.Charset)",
            "cn.hutool.http.HttpUtil:java.util.HashMap decodeParamMap(java.lang.String,java.lang.String)",
            "cn.hutool.http.webservice.SoapRequest:java.lang.String toSoapXml()",
            "cn.hutool.setting.GroupedMap:int size()",
            "cn.hutool.setting.GroupedMap:cn.hutool.setting.GroupedMap putAll(java.lang.String,java.util.Map)",
            "cn.hutool.setting.Setting:java.util.Properties toProperties()",
            "cn.hutool.setting.SettingLoader:void store(java.io.PrintWriter)",
            "cn.hutool.setting.SettingLoader:java.lang.String replaceVar(java.lang.String,java.lang.String)",
            "cn.hutool.cron.pattern.CronPattern:void parseGroupPattern(java.lang.String)",
            "cn.hutool.cron.pattern.matcher.BoolArrayValueMatcher:void <init>(java.util.List)",
            "cn.hutool.cron.pattern.matcher.ValueMatcherBuilder:java.util.List parseArray(java.lang.String,cn.hutool.cron.pattern.parser.ValueParser)",
            "cn.hutool.cron.Scheduler:cn.hutool.cron.Scheduler schedule(cn.hutool.setting.Setting)",
            "cn.hutool.json.JSONArray:void <init>(java.lang.Iterable)",
            "cn.hutool.json.JSONArray:void <init>(java.util.Collection)",
            "cn.hutool.json.JSONArray:void <init>(java.lang.Object,boolean)",
            "cn.hutool.json.JSONArray:boolean addAll(java.util.Collection)",
            "cn.hutool.json.JSONArray:boolean addAll(int,java.util.Collection)",
            "cn.hutool.json.JSONObject:void <init>(java.lang.Object,boolean)",
            "cn.hutool.json.JSONObject:cn.hutool.json.JSONArray toJSONArray(java.util.Collection)",
            "cn.hutool.json.JSONObject:void putAll(java.util.Map)",
            "cn.hutool.json.JSONObject:java.io.Writer write(java.io.Writer,int,int)",
            "cn.hutool.json.JSONObject:void populateMap(java.lang.Object)",
            "cn.hutool.json.JSONObjectIter$1:cn.hutool.json.JSONObject next()",
            "cn.hutool.json.XML:java.lang.String toXml(java.lang.Object,java.lang.String)",
            "cn.hutool.poi.excel.ExcelPicUtil:java.util.Map getPicMapXls(org.apache.poi.hssf.usermodel.HSSFWorkbook,int)",
            "cn.hutool.poi.excel.ExcelPicUtil:java.util.Map getPicMapXlsx(org.apache.poi.xssf.usermodel.XSSFWorkbook,int)",
            "cn.hutool.poi.excel.ExcelReader:java.util.List read(int,int,int,java.lang.Class)",
            "cn.hutool.poi.excel.ExcelReader:java.util.List aliasHeader(java.util.List)",
            "cn.hutool.poi.excel.ExcelWriter:cn.hutool.poi.excel.ExcelWriter write(java.lang.Iterable)",
            "cn.hutool.poi.excel.ExcelWriter:cn.hutool.poi.excel.ExcelWriter write(java.lang.Iterable,java.util.Comparator)",
            "cn.hutool.poi.excel.ExcelWriter:java.util.Collection aliasHeader(java.util.Collection)",
            "cn.hutool.poi.excel.RowUtil:void writeRow(org.apache.poi.ss.usermodel.Row,java.lang.Iterable,cn.hutool.poi.excel.StyleSet,boolean)",
            "cn.hutool.poi.excel.sax.Excel07SaxReader:cn.hutool.poi.excel.sax.Excel07SaxReader read(org.apache.poi.openxml4j.opc.OPCPackage,int)"
        ]
    },
    "cn.hutool.core.convert.Convert:java.lang.Object convert(java.lang.Class,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.BeanPath:java.lang.Object getFieldValue(java.lang.Object,java.lang.String)",
            "cn.hutool.core.bean.copier.BeanCopier:void valueProviderToBean(cn.hutool.core.bean.copier.ValueProvider,java.lang.Object)",
            "cn.hutool.core.convert.Convert:java.lang.String[] toStrArray(java.lang.Object)",
            "cn.hutool.core.convert.Convert:java.lang.Character[] toCharArray(java.lang.Object)",
            "cn.hutool.core.convert.Convert:java.lang.Byte[] toByteArray(java.lang.Object)",
            "cn.hutool.core.convert.Convert:java.lang.Short[] toShortArray(java.lang.Object)",
            "cn.hutool.core.convert.Convert:java.lang.Number[] toNumberArray(java.lang.Object)",
            "cn.hutool.core.convert.Convert:java.lang.Integer[] toIntArray(java.lang.Object)",
            "cn.hutool.core.convert.Convert:java.lang.Long[] toLongArray(java.lang.Object)",
            "cn.hutool.core.convert.Convert:java.lang.Double[] toDoubleArray(java.lang.Object)",
            "cn.hutool.core.convert.Convert:java.lang.Float[] toFloatArray(java.lang.Object)",
            "cn.hutool.core.convert.Convert:java.lang.Boolean[] toBooleanArray(java.lang.Object)",
            "cn.hutool.core.convert.Convert:java.lang.Object convertByClassName(java.lang.String,java.lang.Object)",
            "cn.hutool.core.map.MapUtil:java.lang.Object get(java.util.Map,java.lang.Object,java.lang.Class)",
            "cn.hutool.core.util.StrUtil:long[] splitToLong(java.lang.CharSequence,char)",
            "cn.hutool.core.util.StrUtil:long[] splitToLong(java.lang.CharSequence,java.lang.CharSequence)",
            "cn.hutool.core.util.StrUtil:int[] splitToInt(java.lang.CharSequence,char)",
            "cn.hutool.core.util.StrUtil:int[] splitToInt(java.lang.CharSequence,java.lang.CharSequence)",
            "cn.hutool.db.handler.HandleHelper:java.lang.Object handleRow(int,java.sql.ResultSetMetaData,java.sql.ResultSet,java.lang.Class)",
            "cn.hutool.db.sql.SqlBuilder:void buildValuePartForIN(java.lang.StringBuilder,cn.hutool.db.sql.Condition)"
        ]
    },
    "cn.hutool.db.handler.HandleHelper:java.lang.Object getColumnValue(java.sql.ResultSet,java.lang.String,int,java.lang.reflect.Type)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.handler.HandleHelper:java.lang.Object handleRow(int,java.sql.ResultSetMetaData,java.sql.ResultSet,java.lang.Class)",
            "cn.hutool.db.handler.HandleHelper:cn.hutool.db.Entity handleRow(cn.hutool.db.Entity,int,java.sql.ResultSetMetaData,java.sql.ResultSet,boolean)"
        ]
    },
    "cn.hutool.db.handler.HandleHelper:java.lang.Object getColumnValue(java.sql.ResultSet,int,int,java.lang.reflect.Type)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.handler.HandleHelper:java.lang.Object handleRow(int,java.sql.ResultSetMetaData,java.sql.ResultSet,java.lang.Class)"
        ]
    },
    "cn.hutool.core.convert.Convert:java.lang.String toStr(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.Convert:java.lang.String toStr(java.lang.Object)",
            "cn.hutool.core.getter.OptNullBasicTypeFromObjectGetter:java.lang.String getStr(java.lang.Object,java.lang.String)",
            "cn.hutool.core.io.IoUtil:void write(java.io.OutputStream,java.nio.charset.Charset,boolean,java.lang.Object[])",
            "cn.hutool.core.lang.Dict:java.lang.String getStr(java.lang.String)",
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest form(java.lang.String,java.lang.Object)"
        ]
    },
    "cn.hutool.core.convert.Convert:java.lang.Character toChar(java.lang.Object,java.lang.Character)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.Convert:java.lang.Character toChar(java.lang.Object)",
            "cn.hutool.core.getter.OptNullBasicTypeFromObjectGetter:java.lang.Character getChar(java.lang.Object,java.lang.Character)",
            "cn.hutool.core.getter.OptNullBasicTypeFromStringGetter:java.lang.Character getChar(java.lang.Object,java.lang.Character)",
            "cn.hutool.core.lang.Dict:java.lang.Character getChar(java.lang.String)"
        ]
    },
    "cn.hutool.core.convert.Convert:java.lang.Byte toByte(java.lang.Object,java.lang.Byte)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.Convert:java.lang.Byte toByte(java.lang.Object)",
            "cn.hutool.core.getter.OptNullBasicTypeFromObjectGetter:java.lang.Byte getByte(java.lang.Object,java.lang.Byte)",
            "cn.hutool.core.getter.OptNullBasicTypeFromStringGetter:java.lang.Byte getByte(java.lang.Object,java.lang.Byte)",
            "cn.hutool.core.lang.Dict:java.lang.Byte getByte(java.lang.String)",
            "cn.hutool.setting.dialect.Props:java.lang.Byte getByte(java.lang.String,java.lang.Byte)"
        ]
    },
    "cn.hutool.core.convert.Convert:java.lang.Short toShort(java.lang.Object,java.lang.Short)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.Convert:java.lang.Short toShort(java.lang.Object)",
            "cn.hutool.core.getter.OptNullBasicTypeFromObjectGetter:java.lang.Short getShort(java.lang.Object,java.lang.Short)",
            "cn.hutool.core.getter.OptNullBasicTypeFromStringGetter:java.lang.Short getShort(java.lang.Object,java.lang.Short)",
            "cn.hutool.core.lang.Dict:java.lang.Short getShort(java.lang.String)",
            "cn.hutool.setting.dialect.Props:java.lang.Short getShort(java.lang.String,java.lang.Short)"
        ]
    },
    "cn.hutool.core.convert.Convert:java.lang.Number toNumber(java.lang.Object,java.lang.Number)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.Convert:java.lang.Number toNumber(java.lang.Object)"
        ]
    },
    "cn.hutool.core.convert.Convert:java.lang.Integer toInt(java.lang.Object,java.lang.Integer)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.collection.CollUtil:java.util.Collection union(java.util.Collection,java.util.Collection)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection intersection(java.util.Collection,java.util.Collection)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection disjunction(java.util.Collection,java.util.Collection)",
            "cn.hutool.core.convert.Convert:java.lang.Integer toInt(java.lang.Object)",
            "cn.hutool.core.getter.OptNullBasicTypeFromObjectGetter:java.lang.Integer getInt(java.lang.Object,java.lang.Integer)",
            "cn.hutool.core.getter.OptNullBasicTypeFromStringGetter:java.lang.Integer getInt(java.lang.Object,java.lang.Integer)",
            "cn.hutool.core.lang.Dict:java.lang.Integer getInt(java.lang.String)",
            "cn.hutool.core.util.ReUtil:java.lang.Integer getFirstNumber(java.lang.String)",
            "cn.hutool.http.HttpResponse:void readBody(java.io.InputStream)",
            "cn.hutool.setting.AbsSetting:java.lang.Integer getInt(java.lang.String,java.lang.String,java.lang.Integer)",
            "cn.hutool.setting.dialect.Props:java.lang.Integer getInt(java.lang.String,java.lang.Integer)",
            "cn.hutool.system.SystemUtil:long getInt(java.lang.String,int)"
        ]
    },
    "cn.hutool.core.convert.Convert:java.lang.Long toLong(java.lang.Object,java.lang.Long)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.Convert:java.lang.Long toLong(java.lang.Object)",
            "cn.hutool.core.getter.OptNullBasicTypeFromObjectGetter:java.lang.Long getLong(java.lang.Object,java.lang.Long)",
            "cn.hutool.core.getter.OptNullBasicTypeFromStringGetter:java.lang.Long getLong(java.lang.Object,java.lang.Long)",
            "cn.hutool.core.lang.Dict:java.lang.Long getLong(java.lang.String)",
            "cn.hutool.setting.AbsSetting:java.lang.Long getLong(java.lang.String,java.lang.String,java.lang.Long)",
            "cn.hutool.setting.dialect.Props:java.lang.Long getLong(java.lang.String,java.lang.Long)",
            "cn.hutool.system.SystemUtil:long getLong(java.lang.String,long)"
        ]
    },
    "cn.hutool.core.convert.Convert:java.lang.Double toDouble(java.lang.Object,java.lang.Double)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.Convert:java.lang.Double toDouble(java.lang.Object)",
            "cn.hutool.core.getter.OptNullBasicTypeFromObjectGetter:java.lang.Double getDouble(java.lang.Object,java.lang.Double)",
            "cn.hutool.core.getter.OptNullBasicTypeFromStringGetter:java.lang.Double getDouble(java.lang.Object,java.lang.Double)",
            "cn.hutool.core.lang.Dict:java.lang.Double getDouble(java.lang.String)",
            "cn.hutool.setting.AbsSetting:java.lang.Double getDouble(java.lang.String,java.lang.String,java.lang.Double)",
            "cn.hutool.setting.dialect.Props:java.lang.Double getDouble(java.lang.String,java.lang.Double)"
        ]
    },
    "cn.hutool.core.convert.Convert:java.lang.Float toFloat(java.lang.Object,java.lang.Float)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.Convert:java.lang.Float toFloat(java.lang.Object)",
            "cn.hutool.core.getter.OptNullBasicTypeFromObjectGetter:java.lang.Float getFloat(java.lang.Object,java.lang.Float)",
            "cn.hutool.core.getter.OptNullBasicTypeFromStringGetter:java.lang.Float getFloat(java.lang.Object,java.lang.Float)",
            "cn.hutool.core.lang.Dict:java.lang.Float getFloat(java.lang.String)",
            "cn.hutool.setting.dialect.Props:java.lang.Float getFloat(java.lang.String,java.lang.Float)"
        ]
    },
    "cn.hutool.core.convert.Convert:java.lang.Boolean toBool(java.lang.Object,java.lang.Boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.Convert:java.lang.Boolean toBool(java.lang.Object)",
            "cn.hutool.core.getter.OptNullBasicTypeFromObjectGetter:java.lang.Boolean getBool(java.lang.Object,java.lang.Boolean)",
            "cn.hutool.core.getter.OptNullBasicTypeFromStringGetter:java.lang.Boolean getBool(java.lang.Object,java.lang.Boolean)",
            "cn.hutool.core.lang.Dict:java.lang.Boolean getBool(java.lang.String)",
            "cn.hutool.db.DbUtil:void setShowSqlGlobal(cn.hutool.setting.Setting)",
            "cn.hutool.setting.AbsSetting:java.lang.Boolean getBool(java.lang.String,java.lang.String,java.lang.Boolean)",
            "cn.hutool.setting.dialect.Props:java.lang.Boolean getBool(java.lang.String,java.lang.Boolean)"
        ]
    },
    "cn.hutool.core.convert.Convert:java.math.BigInteger toBigInteger(java.lang.Object,java.math.BigInteger)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.Convert:java.math.BigInteger toBigInteger(java.lang.Object)",
            "cn.hutool.core.getter.OptNullBasicTypeFromObjectGetter:java.math.BigInteger getBigInteger(java.lang.Object,java.math.BigInteger)",
            "cn.hutool.core.getter.OptNullBasicTypeFromStringGetter:java.math.BigInteger getBigInteger(java.lang.Object,java.math.BigInteger)"
        ]
    },
    "cn.hutool.core.convert.Convert:java.math.BigDecimal toBigDecimal(java.lang.Object,java.math.BigDecimal)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.Convert:java.math.BigDecimal toBigDecimal(java.lang.Object)",
            "cn.hutool.core.getter.OptNullBasicTypeFromObjectGetter:java.math.BigDecimal getBigDecimal(java.lang.Object,java.math.BigDecimal)",
            "cn.hutool.core.getter.OptNullBasicTypeFromStringGetter:java.math.BigDecimal getBigDecimal(java.lang.Object,java.math.BigDecimal)"
        ]
    },
    "cn.hutool.core.convert.Convert:java.util.Date toDate(java.lang.Object,java.util.Date)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.Convert:java.util.Date toDate(java.lang.Object)",
            "cn.hutool.core.getter.OptNullBasicTypeFromObjectGetter:java.util.Date getDate(java.lang.Object,java.util.Date)",
            "cn.hutool.core.getter.OptNullBasicTypeFromStringGetter:java.util.Date getDate(java.lang.Object,java.util.Date)",
            "cn.hutool.setting.dialect.Props:java.util.Date getDate(java.lang.String,java.util.Date)"
        ]
    },
    "cn.hutool.core.convert.impl.AtomicReferenceConverter:java.lang.Object convertInternal(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.AbstractConverter:java.lang.Object convert(java.lang.Object,java.lang.Object)"
        ]
    },
    "cn.hutool.core.convert.impl.ByteArrayConverter:java.lang.Object convertInternal(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.AbstractConverter:java.lang.Object convert(java.lang.Object,java.lang.Object)"
        ]
    },
    "cn.hutool.core.convert.impl.ReferenceConverter:java.lang.Object convertInternal(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.AbstractConverter:java.lang.Object convert(java.lang.Object,java.lang.Object)"
        ]
    },
    "cn.hutool.db.ActiveEntity:cn.hutool.db.ActiveEntity parseBean(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.ActiveEntity:cn.hutool.db.ActiveEntity parse(java.lang.Object)",
            "cn.hutool.db.ActiveEntity:cn.hutool.db.Entity parseBean(java.lang.Object)",
            "cn.hutool.db.ActiveEntity:cn.hutool.core.lang.Dict parseBean(java.lang.Object)"
        ]
    },
    "cn.hutool.db.Entity:cn.hutool.db.Entity parse(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.Entity:cn.hutool.core.lang.Dict parseBean(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.lang.Dict:cn.hutool.core.lang.Dict parse(java.lang.Object)"
        ]
    },
    "cn.hutool.db.ActiveEntity:cn.hutool.db.Entity parseBean(java.lang.Object,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.Entity:cn.hutool.db.Entity parse(java.lang.Object,boolean,boolean)",
            "cn.hutool.db.Entity:cn.hutool.db.Entity parseWithUnderlineCase(java.lang.Object)",
            "cn.hutool.db.Entity:cn.hutool.core.lang.Dict parseBean(java.lang.Object,boolean,boolean)"
        ]
    },
    "cn.hutool.db.ActiveEntity:cn.hutool.core.lang.Dict parseBean(java.lang.Object,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.sql.SqlBuilder:cn.hutool.db.sql.SqlBuilder select(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.json.JSONArray:java.lang.Object toArray(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.FileUtil:java.lang.String subPath(java.lang.String,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ZipUtil:void zip(java.io.File,java.lang.String,java.util.zip.ZipOutputStream)"
        ]
    },
    "cn.hutool.core.util.ClassUtil:java.lang.String getClassPath()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.FileUtil:java.lang.String getAbsolutePath(java.lang.String,java.lang.Class)",
            "cn.hutool.core.io.FileUtil:java.io.File getWebRoot()"
        ]
    },
    "cn.hutool.core.annotation.AnnotationUtil:java.lang.Object getAnnotationValue(java.lang.reflect.AnnotatedElement,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.bean.DynaBean:java.lang.Object invoke(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.Entity:java.sql.Time getTime(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.Entity:java.util.Date getDate(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.lang.Dict:java.util.Date getDate(java.lang.Object)",
            "cn.hutool.db.Entity:java.util.Date getDate(java.lang.Object)"
        ]
    },
    "cn.hutool.db.Entity:java.sql.Timestamp getTimestamp(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.http.HttpRequest:boolean isKeepAlive()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest form(java.lang.String,cn.hutool.core.io.resource.Resource)"
        ]
    },
    "cn.hutool.http.HttpRequest:java.lang.String contentLength()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.http.HttpResponse:java.lang.String contentEncoding()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HttpResponse:boolean isGzip()"
        ]
    },
    "cn.hutool.http.HttpResponse:java.lang.String getCookieStr()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.http.HttpResponse:void readBody(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HttpResponse:cn.hutool.http.HttpResponse forceSync()"
        ]
    },
    "cn.hutool.http.HttpResponse:java.lang.String getFileNameFromDisposition()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HttpResponse:long writeBody(java.io.File,cn.hutool.core.io.StreamProgress)"
        ]
    },
    "cn.hutool.core.bean.BeanResolver:java.lang.Object resolveBean(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.comparator.PropertyComparator:int compare(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.collection.BoundedPriorityQueue$1:int compare(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.collection.BoundedPriorityQueue:boolean offer(java.lang.Object)",
            "cn.hutool.core.comparator.ComparatorChain:int compare(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.comparator.ReverseComparator:int compare(java.lang.Object,java.lang.Object)"
        ]
    },
    "cn.hutool.json.JSONArray:java.lang.Object getByExp(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.json.JSONUtil:java.lang.Object getByExp(cn.hutool.json.JSON,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.json.JSONUtil:java.lang.Object getByPath(cn.hutool.json.JSON,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.json.JSONObject:java.lang.Object getByExp(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.bean.BeanUtil:void setProperty(java.lang.Object,java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.json.JSONArray:void putByPath(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.json.JSONUtil:void putByPath(cn.hutool.json.JSON,java.lang.String,java.lang.Object)"
        ]
    },
    "cn.hutool.json.JSONObject:void putByPath(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.json.JSONUtil:void putByPath(cn.hutool.json.JSON,java.lang.String,java.lang.Object)"
        ]
    },
    "cn.hutool.core.date.format.FastDateFormat:boolean parse(java.lang.String,java.text.ParsePosition,java.util.Calendar)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.date.format.FastDateParser:java.util.Date parse(java.lang.String,java.text.ParsePosition)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.date.format.FastDateFormat:java.util.Date parse(java.lang.String,java.text.ParsePosition)",
            "cn.hutool.core.date.format.FastDateParser:java.util.Date parse(java.lang.String)",
            "cn.hutool.core.date.format.FastDateParser:java.lang.Object parseObject(java.lang.String,java.text.ParsePosition)"
        ]
    },
    "cn.hutool.core.util.ReUtil:java.lang.String getGroup0(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ReUtil:java.lang.String getGroup1(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.lang.Validator:boolean isMactchRegex(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.lang.Validator:void validateMatchRegex(java.lang.String,java.lang.String,java.lang.String)",
            "cn.hutool.core.lang.Validator:boolean isGeneral(java.lang.String,int,int)",
            "cn.hutool.core.lang.Validator:boolean isChinese(java.lang.String)"
        ]
    },
    "cn.hutool.core.util.ReflectUtil:java.lang.Object getFieldValue(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.BeanUtil:java.lang.Object getFieldValue(java.lang.Object,java.lang.String)",
            "cn.hutool.core.collection.CollUtil$4:java.lang.Object edit(java.lang.Object)",
            "cn.hutool.core.collection.CollUtil$5:boolean accept(java.lang.Object)",
            "cn.hutool.core.collection.CollUtil$8:int hash(java.lang.Object)",
            "cn.hutool.core.collection.IterUtil:java.util.Map fieldValueMap(java.util.Iterator,java.lang.String)",
            "cn.hutool.core.collection.IterUtil:java.util.Map fieldValueAsMap(java.util.Iterator,java.lang.String,java.lang.String)",
            "cn.hutool.core.collection.IterUtil:java.util.List fieldValueList(java.util.Iterator,java.lang.String)",
            "cn.hutool.core.util.EnumUtil:java.util.List getFieldValues(java.lang.Class,java.lang.String)",
            "cn.hutool.core.util.EnumUtil:java.util.Map getNameFieldMap(java.lang.Class,java.lang.String)"
        ]
    },
    "cn.hutool.core.util.ReflectUtil:void setFieldValue(java.lang.Object,java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.BeanUtil:void setFieldValue(java.lang.Object,java.lang.String,java.lang.Object)"
        ]
    },
    "cn.hutool.core.util.ClassUtil:java.util.Set getDeclaredMethodNames(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.system.SystemUtil:void dumpSystemInfo()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.Session:void beginTransaction()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.Session:void trans(cn.hutool.core.lang.VoidFunc)"
        ]
    },
    "cn.hutool.db.Session:java.sql.Savepoint setSavepoint()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.Session:java.sql.Savepoint setSavepoint(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.extra.ssh.JschUtil:cn.hutool.extra.ssh.Sftp createSftp(java.lang.String,int,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.http.GlobalHeaders:void <init>(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.GlobalHeaders:void <clinit>()"
        ]
    },
    "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest setMethod(cn.hutool.http.Method)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.log.LogFactory:cn.hutool.log.LogFactory setCurrentLogFactory(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.annotation.AnnotationUtil:cn.hutool.core.'annotation'.CombinationAnnotationElement toCombination(java.lang.reflect.AnnotatedElement)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.annotation.AnnotationUtil:java.lang.'annotation'.Annotation[] getAnnotations(java.lang.reflect.AnnotatedElement,boolean)",
            "cn.hutool.core.annotation.AnnotationUtil:java.lang.'annotation'.Annotation getAnnotation(java.lang.reflect.AnnotatedElement,java.lang.Class)"
        ]
    },
    "cn.hutool.core.convert.ConverterRegistry$SingletonHolder:cn.hutool.core.convert.ConverterRegistry access$000()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.ConverterRegistry:cn.hutool.core.convert.ConverterRegistry getInstance()"
        ]
    },
    "cn.hutool.core.convert.ConverterRegistry:cn.hutool.core.convert.ConverterRegistry getInstance()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.collection.CollUtil:java.util.Collection addAll(java.util.Collection,java.lang.Object,java.lang.reflect.Type)",
            "cn.hutool.core.convert.Convert:java.lang.Object convert(java.lang.reflect.Type,java.lang.Object,java.lang.Object)",
            "cn.hutool.core.convert.impl.ArrayConverter:java.lang.Object convertArrayToArray(java.lang.Object)",
            "cn.hutool.core.convert.impl.ArrayConverter:java.lang.Object convertObjectToArray(java.lang.Object)",
            "cn.hutool.core.convert.impl.ArrayConverter:java.lang.Object[] convertToSingleElementArray(java.lang.Object)",
            "cn.hutool.core.convert.impl.AtomicReferenceConverter:java.util.concurrent.atomic.AtomicReference convertInternal(java.lang.Object)",
            "cn.hutool.core.convert.impl.ByteArrayConverter:byte[] convertInternal(java.lang.Object)",
            "cn.hutool.core.convert.impl.MapConverter:void convertMapToMap(java.util.Map,java.util.Map)",
            "cn.hutool.core.convert.impl.ReferenceConverter:java.lang.ref.Reference convertInternal(java.lang.Object)",
            "cn.hutool.json.InternalJSONUtil:java.lang.Object jsonConvert(java.lang.reflect.Type,java.lang.Object,boolean)"
        ]
    },
    "cn.hutool.core.io.watch.WatchMonitor$1:java.nio.file.FileVisitResult postVisitDirectory(java.lang.Object,java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.extra.qrcode.QrCodeUtil:java.awt.image.BufferedImage generate(java.lang.String,cn.hutool.extra.qrcode.QrConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.qrcode.QrCodeUtil:java.io.File generate(java.lang.String,cn.hutool.extra.qrcode.QrConfig,java.io.File)",
            "cn.hutool.extra.qrcode.QrCodeUtil:void generate(java.lang.String,cn.hutool.extra.qrcode.QrConfig,java.lang.String,java.io.OutputStream)",
            "cn.hutool.extra.qrcode.QrCodeUtil:java.awt.image.BufferedImage generate(java.lang.String,int,int)"
        ]
    },
    "cn.hutool.extra.qrcode.QrCodeUtil:com.google.zxing.common.BitMatrix encode(java.lang.String,int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.bean.BeanPath:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.BeanPath:cn.hutool.core.bean.BeanPath create(java.lang.String)"
        ]
    },
    "cn.hutool.core.convert.impl.CastConverter:java.lang.Object convertInternal(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.AbstractConverter:java.lang.Object convert(java.lang.Object,java.lang.Object)"
        ]
    },
    "cn.hutool.core.date.DateTime:java.util.Date parse(java.lang.String,cn.hutool.core.date.format.DateParser)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.date.DateTime:void <init>(java.lang.String,cn.hutool.core.date.format.DateParser)"
        ]
    },
    "cn.hutool.core.date.DateUtil:cn.hutool.core.date.DateTime parse(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.impl.CalendarConverter:java.util.Calendar convertInternal(java.lang.Object)",
            "cn.hutool.core.convert.impl.DateConverter:java.util.Date convertInternal(java.lang.Object)",
            "cn.hutool.core.date.DateUtil:int ageOfNow(java.lang.String)"
        ]
    },
    "cn.hutool.core.date.DateTime:void <init>(java.lang.String,java.text.DateFormat)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.date.DateTime:void <init>(java.lang.String,java.lang.String)",
            "cn.hutool.core.date.DateUtil:cn.hutool.core.date.DateTime parse(java.lang.String,java.text.DateFormat)"
        ]
    },
    "cn.hutool.core.date.DateUtil:int ageOfNow(java.util.Date)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.date.DateUtil:int ageOfNow(java.lang.String)"
        ]
    },
    "cn.hutool.poi.excel.sax.Excel07SaxReader:org.xml.sax.XMLReader fetchSheetReader()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.poi.excel.sax.Excel07SaxReader:void parse(java.io.InputStream)"
        ]
    },
    "cn.hutool.poi.PoiChecker:cn.hutool.core.exceptions.DependencyException transError(java.lang.NoClassDefFoundError)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.poi.excel.ExcelUtil:cn.hutool.poi.excel.sax.Excel07SaxReader read07BySax(java.io.InputStream,int,cn.hutool.poi.excel.sax.handler.RowHandler)",
            "cn.hutool.poi.excel.ExcelUtil:cn.hutool.poi.excel.sax.Excel07SaxReader read07BySax(java.io.File,int,cn.hutool.poi.excel.sax.handler.RowHandler)",
            "cn.hutool.poi.excel.ExcelUtil:cn.hutool.poi.excel.sax.Excel07SaxReader read07BySax(java.lang.String,int,cn.hutool.poi.excel.sax.handler.RowHandler)",
            "cn.hutool.poi.excel.ExcelUtil:cn.hutool.poi.excel.sax.Excel03SaxReader read03BySax(java.io.InputStream,int,cn.hutool.poi.excel.sax.handler.RowHandler)",
            "cn.hutool.poi.excel.ExcelUtil:cn.hutool.poi.excel.sax.Excel03SaxReader read03BySax(java.io.File,int,cn.hutool.poi.excel.sax.handler.RowHandler)",
            "cn.hutool.poi.excel.ExcelUtil:cn.hutool.poi.excel.sax.Excel03SaxReader read03BySax(java.lang.String,int,cn.hutool.poi.excel.sax.handler.RowHandler)",
            "cn.hutool.poi.excel.ExcelUtil:cn.hutool.poi.excel.ExcelReader getReader(java.lang.String,int)",
            "cn.hutool.poi.excel.ExcelUtil:cn.hutool.poi.excel.ExcelReader getReader(java.io.File,int)",
            "cn.hutool.poi.excel.ExcelUtil:cn.hutool.poi.excel.ExcelReader getReader(java.io.File,java.lang.String)",
            "cn.hutool.poi.excel.ExcelUtil:cn.hutool.poi.excel.ExcelReader getReader(java.io.InputStream,boolean)",
            "cn.hutool.poi.excel.ExcelUtil:cn.hutool.poi.excel.ExcelReader getReader(java.io.InputStream,int)",
            "cn.hutool.poi.excel.ExcelUtil:cn.hutool.poi.excel.ExcelReader getReader(java.io.InputStream,int,boolean)",
            "cn.hutool.poi.excel.ExcelUtil:cn.hutool.poi.excel.ExcelReader getReader(java.io.InputStream,java.lang.String)",
            "cn.hutool.poi.excel.ExcelUtil:cn.hutool.poi.excel.ExcelReader getReader(java.io.InputStream,java.lang.String,boolean)",
            "cn.hutool.poi.excel.ExcelUtil:cn.hutool.poi.excel.ExcelWriter getWriter()",
            "cn.hutool.poi.excel.ExcelUtil:cn.hutool.poi.excel.ExcelWriter getWriter(boolean)",
            "cn.hutool.poi.excel.ExcelUtil:cn.hutool.poi.excel.ExcelWriter getWriter(java.lang.String)",
            "cn.hutool.poi.excel.ExcelUtil:cn.hutool.poi.excel.ExcelWriter getWriter(java.io.File)",
            "cn.hutool.poi.excel.ExcelUtil:cn.hutool.poi.excel.ExcelWriter getWriter(java.lang.String,java.lang.String)",
            "cn.hutool.poi.excel.ExcelUtil:cn.hutool.poi.excel.ExcelWriter getWriter(java.io.File,java.lang.String)",
            "cn.hutool.poi.excel.ExcelUtil:boolean isXlsx(java.io.InputStream)"
        ]
    },
    "cn.hutool.core.bean.BeanException:void <init>(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.BeanUtil:java.beans.PropertyDescriptor[] getPropertyDescriptors(java.lang.Class)",
            "cn.hutool.core.bean.DynaBean:java.lang.Object get(java.lang.String)",
            "cn.hutool.core.bean.DynaBean:void set(java.lang.String,java.lang.Object)"
        ]
    },
    "cn.hutool.core.clone.CloneRuntimeException:void <init>(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.clone.CloneSupport:java.lang.Object clone()"
        ]
    },
    "cn.hutool.core.comparator.ComparatorException:void <init>(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.comparator.FieldComparator:int compare(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.comparator.PropertyComparator:int compare(java.lang.Object,java.lang.Object)"
        ]
    },
    "cn.hutool.core.convert.ConvertException:void <init>(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.impl.NumberConverter:java.lang.Number convertInternal(java.lang.Object)"
        ]
    },
    "cn.hutool.core.date.DateException:void <init>(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.date.format.FastDatePrinter:java.lang.Appendable applyRules(java.util.Calendar,java.lang.Appendable)"
        ]
    },
    "cn.hutool.core.exceptions.DependencyException:void <init>(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.poi.PoiChecker:cn.hutool.core.exceptions.DependencyException transError(java.lang.NoClassDefFoundError)"
        ]
    },
    "cn.hutool.core.exceptions.UtilException:void <init>(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.collection.CollUtil:java.util.Collection create(java.lang.Class)",
            "cn.hutool.core.io.IoUtil:java.lang.Object readObj(java.io.InputStream)",
            "cn.hutool.core.lang.JarClassLoader:void loadJar(java.net.URLClassLoader,java.io.File)",
            "cn.hutool.core.lang.JarClassLoader:cn.hutool.core.lang.JarClassLoader addJar(java.io.File)",
            "cn.hutool.core.map.MapUtil:java.util.Map createMap(java.lang.Class)",
            "cn.hutool.core.util.ArrayUtil:java.lang.Object[] wrap(java.lang.Object)",
            "cn.hutool.core.util.ArrayUtil:java.lang.String toString(java.lang.Object)",
            "cn.hutool.core.util.ClassLoaderUtil:java.lang.Class loadClass(java.lang.String,java.lang.ClassLoader,boolean)",
            "cn.hutool.core.util.ClassUtil:java.lang.Object invoke(java.lang.String,java.lang.String,boolean,java.lang.Object[])",
            "cn.hutool.core.util.ClipboardUtil:java.lang.Object get(java.awt.datatransfer.DataFlavor,java.awt.datatransfer.ClipboardOwner)",
            "cn.hutool.core.util.ImageUtil:java.awt.Font createFont(java.io.File)",
            "cn.hutool.core.util.ImageUtil:java.awt.Font createFont(java.io.InputStream)",
            "cn.hutool.core.util.NetUtil:java.util.LinkedHashSet localIpv4s()",
            "cn.hutool.core.util.NetUtil:java.lang.String getMacAddress(java.net.InetAddress,java.lang.String)",
            "cn.hutool.core.util.ObjectUtil:java.lang.Object cloneByStream(java.lang.Object)",
            "cn.hutool.core.util.ObjectUtil:byte[] serialize(java.lang.Object)",
            "cn.hutool.core.util.ObjectUtil:java.lang.Object unserialize(byte[])",
            "cn.hutool.core.util.RandomUtil:java.security.SecureRandom getSecureRandom()",
            "cn.hutool.core.util.ReflectUtil:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "cn.hutool.core.util.URLUtil:java.net.URL url(java.lang.String,java.net.URLStreamHandler)",
            "cn.hutool.core.util.URLUtil:java.lang.String complateUrl(java.lang.String,java.lang.String)",
            "cn.hutool.core.util.URLUtil:java.lang.String encode(java.lang.String,java.lang.String)",
            "cn.hutool.core.util.URLUtil:java.lang.String decode(java.lang.String,java.lang.String)",
            "cn.hutool.core.util.URLUtil:java.lang.String getPath(java.lang.String)",
            "cn.hutool.core.util.URLUtil:java.net.URI toURI(java.net.URL)",
            "cn.hutool.core.util.URLUtil:java.net.URI toURI(java.lang.String)",
            "cn.hutool.core.util.XmlUtil:java.lang.Object getByXPath(java.lang.String,java.lang.Object,javax.xml.namespace.QName)",
            "cn.hutool.core.util.ZipUtil:java.io.File zip(java.io.File,java.nio.charset.Charset,boolean,java.io.File[])",
            "cn.hutool.core.util.ZipUtil:java.io.File unzip(java.io.File,java.io.File,java.nio.charset.Charset)",
            "cn.hutool.core.util.ZipUtil:byte[] unzipFileBytes(java.io.File,java.nio.charset.Charset,java.lang.String)",
            "cn.hutool.core.util.ZipUtil:byte[] gzip(byte[])",
            "cn.hutool.core.util.ZipUtil:byte[] gzip(java.io.File)",
            "cn.hutool.core.util.ZipUtil:byte[] unGzip(byte[])",
            "cn.hutool.core.util.ZipUtil:void addFile(java.io.InputStream,java.lang.String,java.util.zip.ZipOutputStream)",
            "cn.hutool.core.util.ZipUtil:void addDir(java.lang.String,java.util.zip.ZipOutputStream)",
            "cn.hutool.core.util.ZipUtil:void validateFiles(java.io.File,java.io.File[])",
            "cn.hutool.extra.servlet.ServletUtil:void write(javax.servlet.http.HttpServletResponse,java.lang.String,java.lang.String)",
            "cn.hutool.extra.servlet.ServletUtil:void write(javax.servlet.http.HttpServletResponse,java.io.InputStream,int)",
            "cn.hutool.extra.template.engine.velocity.VelocityUtil:java.lang.String merge(java.lang.String,org.apache.velocity.VelocityContext)"
        ]
    },
    "cn.hutool.core.io.IORuntimeException:void <init>(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.collection.LineIter:boolean hasNext()",
            "cn.hutool.core.img.Img:void write(javax.imageio.stream.ImageOutputStream)",
            "cn.hutool.core.img.Img:void write(java.io.File)",
            "cn.hutool.core.io.BOMInputStream:java.lang.String getCharset()",
            "cn.hutool.core.io.FastByteArrayOutputStream:void writeTo(java.io.OutputStream)",
            "cn.hutool.core.io.file.FileCopier:void internalCopyFile(java.io.File,java.io.File)",
            "cn.hutool.core.io.file.FileReader:byte[] readBytes()",
            "cn.hutool.core.io.file.FileReader:java.util.Collection readLines(java.util.Collection)",
            "cn.hutool.core.io.file.FileReader:java.lang.Object read(cn.hutool.core.io.file.FileReader$ReaderHandler)",
            "cn.hutool.core.io.file.FileReader:java.io.BufferedInputStream getInputStream()",
            "cn.hutool.core.io.file.FileReader:java.io.File writeToStream(java.io.OutputStream)",
            "cn.hutool.core.io.file.FileWriter:java.io.File write(java.lang.String,boolean)",
            "cn.hutool.core.io.file.FileWriter:java.io.File write(byte[],int,int,boolean)",
            "cn.hutool.core.io.file.FileWriter:java.io.File writeFromStream(java.io.InputStream)",
            "cn.hutool.core.io.file.FileWriter:java.io.BufferedOutputStream getOutputStream()",
            "cn.hutool.core.io.file.FileWriter:java.io.BufferedWriter getWriter(boolean)",
            "cn.hutool.core.io.FileUtil:boolean isDirEmpty(java.nio.file.Path)",
            "cn.hutool.core.io.FileUtil:java.io.File touch(java.io.File)",
            "cn.hutool.core.io.FileUtil:boolean del(java.io.File)",
            "cn.hutool.core.io.FileUtil:java.io.File createTempFile(java.lang.String,java.lang.String,java.io.File,boolean)",
            "cn.hutool.core.io.FileUtil:java.nio.file.Path copyFile(java.nio.file.Path,java.nio.file.Path,java.nio.file.StandardCopyOption[])",
            "cn.hutool.core.io.FileUtil:java.io.File rename(java.io.File,java.lang.String,boolean,boolean)",
            "cn.hutool.core.io.FileUtil:java.lang.String getCanonicalPath(java.io.File)",
            "cn.hutool.core.io.FileUtil:boolean equals(java.io.File,java.io.File)",
            "cn.hutool.core.io.FileUtil:java.lang.String subPath(java.lang.String,java.io.File)",
            "cn.hutool.core.io.FileUtil:java.nio.file.attribute.BasicFileAttributes getAttributes(java.nio.file.Path,boolean)",
            "cn.hutool.core.io.FileUtil:java.io.BufferedInputStream getInputStream(java.nio.file.Path)",
            "cn.hutool.core.io.FileUtil:cn.hutool.core.io.BOMInputStream getBOMInputStream(java.io.File)",
            "cn.hutool.core.io.FileUtil:java.lang.String readString(java.net.URL,java.lang.String)",
            "cn.hutool.core.io.FileUtil:java.util.Collection readLines(java.net.URL,java.nio.charset.Charset,java.util.Collection)",
            "cn.hutool.core.io.FileUtil:java.io.BufferedOutputStream getOutputStream(java.io.File)",
            "cn.hutool.core.io.FileUtil:java.util.zip.Checksum checksum(java.io.File,java.util.zip.Checksum)",
            "cn.hutool.core.io.IoUtil:long copy(java.io.Reader,java.io.Writer,int,cn.hutool.core.io.StreamProgress)",
            "cn.hutool.core.io.IoUtil:long copy(java.io.InputStream,java.io.OutputStream,int,cn.hutool.core.io.StreamProgress)",
            "cn.hutool.core.io.IoUtil:long copy(java.io.FileInputStream,java.io.FileOutputStream)",
            "cn.hutool.core.io.IoUtil:long copy(java.nio.channels.ReadableByteChannel,java.nio.channels.WritableByteChannel,int,cn.hutool.core.io.StreamProgress)",
            "cn.hutool.core.io.IoUtil:java.lang.String read(java.io.Reader)",
            "cn.hutool.core.io.IoUtil:java.lang.String read(java.nio.channels.FileChannel,java.nio.charset.Charset)",
            "cn.hutool.core.io.IoUtil:byte[] readBytes(java.io.InputStream,int)",
            "cn.hutool.core.io.IoUtil:java.lang.Object readObj(java.io.InputStream)",
            "cn.hutool.core.io.IoUtil:void readLines(java.io.Reader,cn.hutool.core.io.LineHandler)",
            "cn.hutool.core.io.IoUtil:java.io.FileInputStream toStream(java.io.File)",
            "cn.hutool.core.io.IoUtil:void write(java.io.OutputStream,boolean,byte[])",
            "cn.hutool.core.io.IoUtil:void write(java.io.OutputStream,java.nio.charset.Charset,boolean,java.lang.Object[])",
            "cn.hutool.core.io.IoUtil:void writeObjects(java.io.OutputStream,boolean,java.io.Serializable[])",
            "cn.hutool.core.io.IoUtil:boolean contentEquals(java.io.InputStream,java.io.InputStream)",
            "cn.hutool.core.io.IoUtil:boolean contentEquals(java.io.Reader,java.io.Reader)",
            "cn.hutool.core.io.IoUtil:boolean contentEqualsIgnoreEOL(java.io.Reader,java.io.Reader)",
            "cn.hutool.core.io.resource.ResourceUtil:java.util.List getResources(java.lang.String)",
            "cn.hutool.core.io.resource.ResourceUtil:cn.hutool.core.collection.EnumerationIter getResourceIter(java.lang.String)",
            "cn.hutool.core.io.watch.WatchMonitor:void init()",
            "cn.hutool.core.lang.ClassScaner:void scanFile(java.io.File,java.lang.String)",
            "cn.hutool.core.text.csv.CsvParser:java.util.List readLine()",
            "cn.hutool.core.text.csv.CsvReader:cn.hutool.core.text.csv.CsvData read(java.nio.file.Path,java.nio.charset.Charset)",
            "cn.hutool.core.text.csv.CsvWriter:void writeLine()",
            "cn.hutool.core.text.csv.CsvWriter:void flush()",
            "cn.hutool.core.text.csv.CsvWriter:void appendLine(java.lang.String[])",
            "cn.hutool.core.util.ImageUtil:void slice(java.awt.Image,java.io.File,int,int)",
            "cn.hutool.core.util.ImageUtil:void sliceByRowsAndCols(java.io.File,java.io.File,int,int)",
            "cn.hutool.core.util.ImageUtil:void sliceByRowsAndCols(java.awt.Image,java.io.File,int,int)",
            "cn.hutool.core.util.ImageUtil:void convert(java.io.File,java.lang.String,java.io.File)",
            "cn.hutool.core.util.ImageUtil:void convert(java.io.InputStream,java.lang.String,java.io.OutputStream)",
            "cn.hutool.core.util.ImageUtil:void convert(javax.imageio.stream.ImageInputStream,java.lang.String,javax.imageio.stream.ImageOutputStream)",
            "cn.hutool.core.util.ImageUtil:void convert(java.awt.Image,java.lang.String,javax.imageio.stream.ImageOutputStream)",
            "cn.hutool.core.util.ImageUtil:java.awt.Font createFont(java.io.File)",
            "cn.hutool.core.util.ImageUtil:java.awt.Font createFont(java.io.InputStream)",
            "cn.hutool.core.util.ImageUtil:void write(java.awt.Image,java.lang.String,javax.imageio.stream.ImageOutputStream)",
            "cn.hutool.core.util.ImageUtil:void write(java.awt.Image,java.io.File)",
            "cn.hutool.core.util.ImageUtil:java.awt.image.BufferedImage read(java.io.File)",
            "cn.hutool.core.util.ImageUtil:java.awt.image.BufferedImage read(java.io.InputStream)",
            "cn.hutool.core.util.ImageUtil:java.awt.image.BufferedImage read(javax.imageio.stream.ImageInputStream)",
            "cn.hutool.core.util.ImageUtil:java.awt.image.BufferedImage read(java.net.URL)",
            "cn.hutool.core.util.ImageUtil:javax.imageio.stream.ImageOutputStream getImageOutputStream(java.io.OutputStream)",
            "cn.hutool.core.util.ImageUtil:javax.imageio.stream.ImageOutputStream getImageOutputStream(java.io.File)",
            "cn.hutool.core.util.ImageUtil:javax.imageio.stream.ImageInputStream getImageInputStream(java.io.InputStream)",
            "cn.hutool.core.util.NetUtil:void netCat(java.lang.String,int,boolean,java.nio.ByteBuffer)",
            "cn.hutool.core.util.NetUtil:void netCat(java.lang.String,int,byte[])",
            "cn.hutool.core.util.RuntimeUtil:java.lang.Process exec(java.lang.String[])",
            "cn.hutool.core.util.RuntimeUtil:java.lang.Process exec(java.lang.String[],java.io.File,java.lang.String[])",
            "cn.hutool.core.util.URLUtil:java.io.InputStream getStream(java.net.URL)",
            "cn.hutool.core.util.URLUtil:java.util.jar.JarFile getJarFile(java.net.URL)",
            "cn.hutool.extra.servlet.ServletUtil:java.lang.String getBody(javax.servlet.ServletRequest)",
            "cn.hutool.extra.servlet.ServletUtil:byte[] getBodyBytes(javax.servlet.ServletRequest)",
            "cn.hutool.extra.servlet.ServletUtil:cn.hutool.extra.servlet.multipart.MultipartFormData getMultipart(javax.servlet.ServletRequest,cn.hutool.extra.servlet.multipart.UploadSetting)",
            "cn.hutool.extra.servlet.ServletUtil:java.io.PrintWriter getWriter(javax.servlet.http.HttpServletResponse)",
            "cn.hutool.extra.ssh.JschUtil:java.lang.String exec(com.jcraft.jsch.Session,java.lang.String,java.nio.charset.Charset)",
            "cn.hutool.extra.template.engine.beetl.BeetlEngine:org.beetl.core.GroupTemplate createGroupTemplate(org.beetl.core.ResourceLoader)",
            "cn.hutool.extra.template.engine.beetl.BeetlUtil:org.beetl.core.GroupTemplate createGroupTemplate(org.beetl.core.ResourceLoader)",
            "cn.hutool.extra.template.engine.freemarker.FreemarkerEngine:cn.hutool.extra.template.Template getTemplate(java.lang.String)",
            "cn.hutool.extra.template.engine.freemarker.FreemarkerEngine:freemarker.template.Configuration createCfg(cn.hutool.extra.template.TemplateConfig)",
            "cn.hutool.extra.template.engine.freemarker.FreemarkerTemplate:void render(java.util.Map,java.io.Writer)",
            "cn.hutool.poi.excel.ExcelUtil:boolean isXls(java.io.InputStream)",
            "cn.hutool.poi.excel.ExcelUtil:boolean isXlsx(java.io.InputStream)",
            "cn.hutool.poi.excel.ExcelWriter:cn.hutool.poi.excel.ExcelWriter flush(java.io.OutputStream)",
            "cn.hutool.poi.excel.WorkbookUtil:void writeBook(org.apache.poi.ss.usermodel.Workbook,java.io.OutputStream)",
            "cn.hutool.captcha.AbstractCaptcha:void write(java.io.File)"
        ]
    },
    "cn.hutool.core.io.resource.NoResourceException:void <init>(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.watch.WatchException:void <init>(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.watch.WatchMonitor:cn.hutool.core.io.watch.WatchMonitor createAll(java.net.URL,cn.hutool.core.io.watch.Watcher)",
            "cn.hutool.core.io.watch.WatchMonitor:void init()",
            "cn.hutool.core.io.watch.WatchMonitor:void registerPath(java.nio.file.Path,int)"
        ]
    },
    "cn.hutool.crypto.CryptoException:void <init>(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.asymmetric.AsymmetricCrypto:cn.hutool.crypto.asymmetric.AsymmetricCrypto init(java.lang.String,java.security.PrivateKey,java.security.PublicKey)",
            "cn.hutool.crypto.asymmetric.AsymmetricCrypto:byte[] encrypt(byte[],cn.hutool.crypto.asymmetric.KeyType)",
            "cn.hutool.crypto.asymmetric.AsymmetricCrypto:byte[] decrypt(byte[],cn.hutool.crypto.asymmetric.KeyType)",
            "cn.hutool.crypto.asymmetric.Sign:cn.hutool.crypto.asymmetric.Sign init(java.lang.String,java.security.PrivateKey,java.security.PublicKey)",
            "cn.hutool.crypto.asymmetric.Sign:byte[] sign(byte[])",
            "cn.hutool.crypto.asymmetric.Sign:boolean verify(byte[],byte[])",
            "cn.hutool.crypto.digest.Digester:cn.hutool.crypto.digest.Digester init(java.lang.String)",
            "cn.hutool.crypto.digest.Digester:byte[] digest(java.io.InputStream,int)",
            "cn.hutool.crypto.digest.HMac:cn.hutool.crypto.digest.HMac init(java.lang.String,javax.crypto.SecretKey)",
            "cn.hutool.crypto.digest.HMac:byte[] digest(java.io.InputStream,int)",
            "cn.hutool.crypto.SecureUtil:javax.crypto.SecretKey generateKey(java.lang.String,int)",
            "cn.hutool.crypto.SecureUtil:javax.crypto.SecretKey generateDESKey(java.lang.String,byte[])",
            "cn.hutool.crypto.SecureUtil:javax.crypto.SecretKey generateKey(java.lang.String,java.security.spec.KeySpec)",
            "cn.hutool.crypto.SecureUtil:java.security.PrivateKey generatePrivateKey(java.lang.String,java.security.spec.KeySpec)",
            "cn.hutool.crypto.SecureUtil:java.security.PrivateKey generatePrivateKey(java.security.KeyStore,java.lang.String,char[])",
            "cn.hutool.crypto.SecureUtil:java.security.PublicKey generatePublicKey(java.lang.String,java.security.spec.KeySpec)",
            "cn.hutool.crypto.SecureUtil:java.security.KeyPair generateKeyPair(java.lang.String,int,byte[])",
            "cn.hutool.crypto.SecureUtil:java.security.Signature generateSignature(cn.hutool.crypto.asymmetric.AsymmetricAlgorithm,cn.hutool.crypto.digest.DigestAlgorithm)",
            "cn.hutool.crypto.SecureUtil:java.security.KeyStore readKeyStore(java.lang.String,java.io.InputStream,char[])",
            "cn.hutool.crypto.SecureUtil:java.security.cert.Certificate readCertificate(java.lang.String,java.io.InputStream,char[])",
            "cn.hutool.crypto.SecureUtil:java.security.cert.Certificate getCertificate(java.security.KeyStore,java.lang.String)",
            "cn.hutool.crypto.symmetric.SymmetricCrypto:cn.hutool.crypto.symmetric.SymmetricCrypto init(java.lang.String,javax.crypto.SecretKey)",
            "cn.hutool.crypto.symmetric.SymmetricCrypto:byte[] encrypt(byte[])",
            "cn.hutool.crypto.symmetric.SymmetricCrypto:byte[] decrypt(byte[])"
        ]
    },
    "cn.hutool.db.DbRuntimeException:void <init>(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.ActiveEntity:cn.hutool.db.ActiveEntity add()",
            "cn.hutool.db.ActiveEntity:cn.hutool.db.ActiveEntity load()",
            "cn.hutool.db.ActiveEntity:cn.hutool.db.ActiveEntity del()",
            "cn.hutool.db.ActiveEntity:cn.hutool.db.ActiveEntity update(java.lang.String)",
            "cn.hutool.db.DbUtil:javax.sql.DataSource getJndiDs(java.lang.String)",
            "cn.hutool.db.ds.c3p0.C3p0DSFactory:com.mchange.v2.c3p0.ComboPooledDataSource createDataSource(java.lang.String)",
            "cn.hutool.db.ds.pooled.PooledDataSource:void <init>(cn.hutool.db.ds.pooled.DbConfig)",
            "cn.hutool.db.Session:void trans(cn.hutool.core.lang.VoidFunc)",
            "cn.hutool.db.sql.SqlUtil:java.lang.String clobToStr(java.sql.Clob)",
            "cn.hutool.db.sql.SqlUtil:java.lang.String blobToStr(java.sql.Blob,java.nio.charset.Charset)"
        ]
    },
    "cn.hutool.extra.ftp.FtpException:void <init>(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.ftp.Ftp:cn.hutool.extra.ftp.Ftp init(java.lang.String,int,java.lang.String,java.lang.String)",
            "cn.hutool.extra.ftp.Ftp:boolean cd(java.lang.String)",
            "cn.hutool.extra.ftp.Ftp:boolean existFile(java.lang.String)",
            "cn.hutool.extra.ftp.Ftp:boolean del(java.lang.String,java.lang.String)",
            "cn.hutool.extra.ftp.Ftp:boolean upload(java.lang.String,java.lang.String,java.io.File)",
            "cn.hutool.extra.ftp.Ftp:boolean upload(java.lang.String,java.lang.String,java.io.InputStream)",
            "cn.hutool.extra.ftp.Ftp:void download(java.lang.String,java.lang.String,java.io.File)",
            "cn.hutool.extra.ftp.Ftp:void download(java.lang.String,java.lang.String,java.io.OutputStream)",
            "cn.hutool.extra.ftp.Ftp:boolean makeDirectory(java.lang.String)"
        ]
    },
    "cn.hutool.extra.mail.MailException:void <init>(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.mail.InternalMailUtil:javax.mail.internet.InternetAddress parseFirstAddress(java.lang.String,java.nio.charset.Charset)",
            "cn.hutool.extra.mail.InternalMailUtil:javax.mail.internet.InternetAddress[] parseAddress(java.lang.String,java.nio.charset.Charset)",
            "cn.hutool.extra.mail.Mail:cn.hutool.extra.mail.Mail send()"
        ]
    },
    "cn.hutool.extra.qrcode.QrCodeException:void <init>(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.qrcode.QrCodeUtil:com.google.zxing.common.BitMatrix encode(java.lang.String,com.google.zxing.BarcodeFormat,cn.hutool.extra.qrcode.QrConfig)",
            "cn.hutool.extra.qrcode.QrCodeUtil:java.lang.String decode(java.awt.Image)"
        ]
    },
    "cn.hutool.extra.ssh.JschRuntimeException:void <init>(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.ssh.JschUtil:com.jcraft.jsch.Session openSession(java.lang.String,int,java.lang.String,java.lang.String)",
            "cn.hutool.extra.ssh.JschUtil:boolean unBindPort(com.jcraft.jsch.Session,int)",
            "cn.hutool.extra.ssh.JschUtil:com.jcraft.jsch.ChannelSftp openSftp(com.jcraft.jsch.Session)",
            "cn.hutool.extra.ssh.JschUtil:com.jcraft.jsch.ChannelShell openShell(com.jcraft.jsch.Session)",
            "cn.hutool.extra.ssh.JschUtil:java.lang.String exec(com.jcraft.jsch.Session,java.lang.String,java.nio.charset.Charset)",
            "cn.hutool.extra.ssh.Sftp:java.lang.String pwd()",
            "cn.hutool.extra.ssh.Sftp:java.lang.String home()",
            "cn.hutool.extra.ssh.Sftp:java.util.List ls(java.lang.String,cn.hutool.core.lang.Filter)",
            "cn.hutool.extra.ssh.Sftp:void mkDirs(java.lang.String)",
            "cn.hutool.extra.ssh.Sftp:cn.hutool.extra.ssh.Sftp delFile(java.lang.String)",
            "cn.hutool.extra.ssh.Sftp:boolean delDir(java.lang.String)",
            "cn.hutool.extra.ssh.Sftp:cn.hutool.extra.ssh.Sftp put(java.lang.String,java.lang.String,cn.hutool.extra.ssh.Sftp$Mode)",
            "cn.hutool.extra.ssh.Sftp:cn.hutool.extra.ssh.Sftp get(java.lang.String,java.lang.String)"
        ]
    },
    "cn.hutool.extra.template.TemplateException:void <init>(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.template.engine.freemarker.FreemarkerEngine:cn.hutool.extra.template.Template getTemplate(java.lang.String)",
            "cn.hutool.extra.template.engine.freemarker.FreemarkerTemplate:void render(java.util.Map,java.io.Writer)"
        ]
    },
    "cn.hutool.script.ScriptRuntimeException:void <init>(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.json.JSONException:void <init>(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.json.InternalJSONUtil:java.io.Writer writeValue(java.io.Writer,java.lang.Object,int,int)",
            "cn.hutool.json.InternalJSONUtil:java.lang.String valueToString(java.lang.Object)",
            "cn.hutool.json.JSONArray:java.io.Writer write(java.io.Writer,int,int)",
            "cn.hutool.json.JSONObject:java.io.Writer write(java.io.Writer,int,int)",
            "cn.hutool.json.JSONTokener:char next()",
            "cn.hutool.json.JSONTokener:char skipTo(char)"
        ]
    },
    "cn.hutool.poi.exceptions.POIException:void <init>(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.poi.excel.sax.Excel03SaxReader:cn.hutool.poi.excel.sax.Excel03SaxReader read(java.io.File,int)",
            "cn.hutool.poi.excel.sax.Excel03SaxReader:cn.hutool.poi.excel.sax.Excel03SaxReader read(java.io.InputStream,int)",
            "cn.hutool.poi.excel.sax.Excel03SaxReader:cn.hutool.poi.excel.sax.Excel03SaxReader read(org.apache.poi.poifs.filesystem.POIFSFileSystem,int)",
            "cn.hutool.poi.excel.sax.Excel07SaxReader:cn.hutool.poi.excel.sax.Excel07SaxReader read(java.io.File,int)",
            "cn.hutool.poi.excel.WorkbookUtil:org.apache.poi.ss.usermodel.Workbook createBook(java.io.File,java.lang.String)",
            "cn.hutool.poi.excel.WorkbookUtil:org.apache.poi.ss.usermodel.Workbook createBook(java.io.InputStream,java.lang.String,boolean)"
        ]
    },
    "cn.hutool.core.lang.caller.StackTraceCaller:java.lang.Class getCaller()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.lang.caller.CallerUtil:java.lang.Class getCaller()"
        ]
    },
    "cn.hutool.core.lang.caller.StackTraceCaller:java.lang.Class getCallerCaller()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.lang.caller.CallerUtil:java.lang.Class getCallerCaller()"
        ]
    },
    "cn.hutool.core.lang.caller.StackTraceCaller:java.lang.Class getCaller(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.lang.caller.CallerUtil:java.lang.Class getCaller(int)"
        ]
    },
    "cn.hutool.core.util.NetUtil:java.lang.String toAbsoluteUrl(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ReflectUtil:java.lang.Object getFieldValue(java.lang.Object,java.lang.reflect.Field)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.BeanDesc$PropDesc:java.lang.Object getValue(java.lang.Object)",
            "cn.hutool.core.bean.BeanUtil:java.lang.Object trimStrFields(java.lang.Object,java.lang.String[])",
            "cn.hutool.core.util.ReflectUtil:java.lang.Object getFieldValue(java.lang.Object,java.lang.String)"
        ]
    },
    "cn.hutool.core.util.ReflectUtil:void setFieldValue(java.lang.Object,java.lang.reflect.Field,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.BeanDesc$PropDesc:cn.hutool.core.bean.BeanDesc$PropDesc setValue(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.bean.BeanUtil:java.lang.Object trimStrFields(java.lang.Object,java.lang.String[])",
            "cn.hutool.core.util.ReflectUtil:void setFieldValue(java.lang.Object,java.lang.String,java.lang.Object)"
        ]
    },
    "cn.hutool.core.util.ReflectUtil:java.lang.Object newInstance(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.URLUtil:java.net.URL getURL(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.resource.FileResource:void <init>(java.io.File,java.lang.String)",
            "cn.hutool.core.io.resource.UrlResource:void <init>(java.io.File)",
            "cn.hutool.setting.GroupedSet:void <init>(java.io.File,java.nio.charset.Charset)"
        ]
    },
    "cn.hutool.core.util.URLUtil:java.net.URL[] getURLs(java.io.File[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.XmlUtil:org.w3c.dom.Document readXML(org.xml.sax.InputSource)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.XmlUtil:org.w3c.dom.Document readXML(java.io.InputStream)",
            "cn.hutool.core.util.XmlUtil:org.w3c.dom.Document readXML(java.io.Reader)",
            "cn.hutool.core.util.XmlUtil:org.w3c.dom.Document parseXml(java.lang.String)"
        ]
    },
    "cn.hutool.core.util.XmlUtil:java.lang.String toStr(org.w3c.dom.Document,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.XmlUtil:java.lang.String toStr(org.w3c.dom.Document)"
        ]
    },
    "cn.hutool.core.util.XmlUtil:java.lang.String toStr(org.w3c.dom.Document,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.XmlUtil:void transform(javax.xml.transform.Source,javax.xml.transform.Result,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.XmlUtil:void write(org.w3c.dom.Node,java.io.Writer,boolean)",
            "cn.hutool.core.util.XmlUtil:void write(org.w3c.dom.Node,java.io.OutputStream,java.lang.String,boolean)"
        ]
    },
    "cn.hutool.core.util.XmlUtil:javax.xml.parsers.DocumentBuilder createDocumentBuilder()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.XmlUtil:org.w3c.dom.Document readXML(org.xml.sax.InputSource)",
            "cn.hutool.core.util.XmlUtil:org.w3c.dom.Document createXml()"
        ]
    },
    "cn.hutool.core.lang.Validator:java.lang.Object validateNotNull(java.lang.Object,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.BufferUtil:int lineEnd(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.BufferUtil:java.lang.String readLine(java.nio.ByteBuffer,java.nio.charset.Charset)"
        ]
    },
    "cn.hutool.core.io.file.FileWriter:void checkFile()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.file.FileWriter:void <init>(java.io.File,java.nio.charset.Charset)"
        ]
    },
    "cn.hutool.core.io.FileUtil:java.io.File copyFile(java.io.File,java.io.File,java.nio.file.StandardCopyOption[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.resource.ClassPathResource:void initUrl()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.resource.ClassPathResource:void <init>(java.lang.String,java.lang.ClassLoader,java.lang.Class)"
        ]
    },
    "cn.hutool.core.io.resource.UrlResource:java.io.InputStream getStream()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.resource.MultiResource:java.io.InputStream getStream()",
            "cn.hutool.core.io.resource.ResourceUtil:java.io.InputStream getStream(java.lang.String)",
            "cn.hutool.core.io.resource.ResourceUtil:java.io.InputStream getStreamSafe(java.lang.String)",
            "cn.hutool.core.io.resource.UrlResource:byte[] readBytes()",
            "cn.hutool.http.HttpRequest:void appendPart(java.lang.String,cn.hutool.core.io.resource.Resource,java.io.OutputStream)",
            "cn.hutool.setting.SettingLoader:boolean load(cn.hutool.core.io.resource.UrlResource)"
        ]
    },
    "cn.hutool.core.convert.impl.ArrayConverter:void <init>(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.ConverterRegistry:java.lang.Object convertSpecial(java.lang.reflect.Type,java.lang.Class,java.lang.Object,java.lang.Object)"
        ]
    },
    "cn.hutool.core.lang.Assert:void isTrue(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.StrUtil:java.lang.String maxLength(java.lang.CharSequence,int)"
        ]
    },
    "cn.hutool.core.util.ReflectUtil:java.lang.Object invokeWithCheck(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.handler.HandleHelper:java.lang.Object handleRow(int,java.sql.ResultSetMetaData,java.sql.ResultSet,java.lang.Class)"
        ]
    },
    "cn.hutool.core.lang.Assert:void isFalse(boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.poi.excel.ExcelReader:void checkNotClosed()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.poi.excel.ExcelReader:java.util.List read(int,int)",
            "cn.hutool.poi.excel.ExcelReader:java.util.List read(int,int,int)",
            "cn.hutool.poi.excel.ExcelReader:java.util.List read(int,int,int,java.lang.Class)"
        ]
    },
    "cn.hutool.poi.excel.ExcelWriter:cn.hutool.poi.excel.ExcelWriter flush(java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.poi.excel.ExcelWriter:cn.hutool.poi.excel.ExcelWriter flush(java.io.File)"
        ]
    },
    "cn.hutool.core.lang.Assert:void isNull(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.collection.LineIter:void <init>(java.io.Reader)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.collection.LineIter:void <init>(java.io.InputStream,java.nio.charset.Charset)"
        ]
    },
    "cn.hutool.core.convert.Convert:long convertTime(long,java.util.concurrent.TimeUnit,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.FileUtil:java.io.File file(java.io.File,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.FileUtil:java.io.File copyFile(java.lang.String,java.lang.String,java.nio.file.StandardCopyOption[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.FileUtil:java.nio.file.Path copyFile(java.nio.file.Path,java.nio.file.Path,java.nio.file.StandardCopyOption[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.FileUtil:java.io.File copyFile(java.lang.String,java.lang.String,java.nio.file.StandardCopyOption[])",
            "cn.hutool.core.io.FileUtil:java.io.File copyFile(java.io.File,java.io.File,java.nio.file.StandardCopyOption[])"
        ]
    },
    "cn.hutool.core.io.IoUtil:long copy(java.io.InputStream,java.io.OutputStream,int,cn.hutool.core.io.StreamProgress)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.IoUtil:long copy(java.io.InputStream,java.io.OutputStream,int)"
        ]
    },
    "cn.hutool.core.io.IoUtil:long copy(java.io.FileInputStream,java.io.FileOutputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.IoUtil:long copy(java.nio.channels.ReadableByteChannel,java.nio.channels.WritableByteChannel,int,cn.hutool.core.io.StreamProgress)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.IoUtil:long copyByNIO(java.io.InputStream,java.io.OutputStream,int,cn.hutool.core.io.StreamProgress)"
        ]
    },
    "cn.hutool.core.lang.Assert:java.lang.Object notNull(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.BeanDesc:void <init>(java.lang.Class)",
            "cn.hutool.core.bean.DynaBean:void <init>(java.lang.Object)",
            "cn.hutool.core.io.FileUtil:boolean equals(java.io.File,java.io.File)",
            "cn.hutool.core.io.IoUtil:void readLines(java.io.Reader,cn.hutool.core.io.LineHandler)",
            "cn.hutool.core.io.watch.watchers.DelayWatcher:void <init>(cn.hutool.core.io.watch.Watcher,long)",
            "cn.hutool.core.util.NumberUtil:boolean isGreater(java.math.BigDecimal,java.math.BigDecimal)",
            "cn.hutool.core.util.NumberUtil:boolean isGreaterOrEqual(java.math.BigDecimal,java.math.BigDecimal)",
            "cn.hutool.core.util.NumberUtil:boolean isLess(java.math.BigDecimal,java.math.BigDecimal)",
            "cn.hutool.core.util.NumberUtil:boolean isLessOrEqual(java.math.BigDecimal,java.math.BigDecimal)",
            "cn.hutool.core.util.NumberUtil:boolean equals(java.math.BigDecimal,java.math.BigDecimal)",
            "cn.hutool.core.util.ReflectUtil:java.lang.reflect.Constructor[] getConstructors(java.lang.Class)",
            "cn.hutool.core.util.ReflectUtil:java.lang.reflect.Constructor[] getConstructorsDirectly(java.lang.Class)",
            "cn.hutool.core.util.ReflectUtil:java.lang.reflect.Field[] getFieldsDirectly(java.lang.Class,boolean)",
            "cn.hutool.core.util.ReflectUtil:void setFieldValue(java.lang.Object,java.lang.String,java.lang.Object)",
            "cn.hutool.core.util.ReflectUtil:void setFieldValue(java.lang.Object,java.lang.reflect.Field,java.lang.Object)",
            "cn.hutool.core.util.ReflectUtil:java.lang.reflect.Method[] getMethodsDirectly(java.lang.Class,boolean)",
            "cn.hutool.core.util.ReflectUtil:java.lang.Object newInstanceIfPossible(java.lang.Class)",
            "cn.hutool.core.util.URLUtil:java.io.InputStream getStream(java.net.URL)"
        ]
    },
    "cn.hutool.core.text.csv.CsvReader:cn.hutool.core.text.csv.CsvData read(java.nio.file.Path,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.text.csv.CsvReader:cn.hutool.core.text.csv.CsvData read(java.io.File,java.nio.charset.Charset)",
            "cn.hutool.core.text.csv.CsvReader:cn.hutool.core.text.csv.CsvData read(java.nio.file.Path)"
        ]
    },
    "cn.hutool.core.util.NumberUtil:java.math.BigDecimal div(java.math.BigDecimal,java.math.BigDecimal,int,java.math.RoundingMode)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.NumberUtil:java.math.BigDecimal div(java.lang.String,java.lang.String,int,java.math.RoundingMode)"
        ]
    },
    "cn.hutool.crypto.SecureUtil:java.lang.String getAlgorithmAfterWith(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.SecureUtil:java.security.PrivateKey generatePrivateKey(java.lang.String,java.security.spec.KeySpec)",
            "cn.hutool.crypto.SecureUtil:java.security.PublicKey generatePublicKey(java.lang.String,java.security.spec.KeySpec)",
            "cn.hutool.crypto.SecureUtil:java.security.KeyPair generateKeyPair(java.lang.String,int,byte[])"
        ]
    },
    "cn.hutool.extra.ftp.Ftp:boolean upload(java.lang.String,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.poi.excel.ExcelBase:void <init>(org.apache.poi.ss.usermodel.Sheet)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.poi.excel.ExcelReader:void <init>(org.apache.poi.ss.usermodel.Sheet)",
            "cn.hutool.poi.excel.ExcelWriter:void <init>(org.apache.poi.ss.usermodel.Sheet)"
        ]
    },
    "cn.hutool.core.lang.Assert:java.lang.String notEmpty(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.lang.Assert:java.lang.String notBlank(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.IdcardUtil:int getGenderByIdCard(java.lang.String)",
            "cn.hutool.core.util.NumberUtil:java.math.BigDecimal round(java.lang.String,int,java.math.RoundingMode)",
            "cn.hutool.core.util.ReflectUtil:void setFieldValue(java.lang.Object,java.lang.String,java.lang.Object)"
        ]
    },
    "cn.hutool.crypto.SecureUtil:javax.crypto.SecretKey generateKey(java.lang.String,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.symmetric.AES:void <init>(java.lang.String,java.lang.String,byte[])",
            "cn.hutool.crypto.symmetric.AES:void <init>(java.lang.String,java.lang.String,byte[],byte[])",
            "cn.hutool.crypto.symmetric.DES:void <init>(java.lang.String,java.lang.String,byte[])",
            "cn.hutool.crypto.symmetric.DES:void <init>(java.lang.String,java.lang.String,byte[],byte[])",
            "cn.hutool.crypto.symmetric.DESede:void <init>(java.lang.String,java.lang.String,byte[],byte[])",
            "cn.hutool.crypto.symmetric.SymmetricCrypto:void <init>(java.lang.String,byte[])"
        ]
    },
    "cn.hutool.core.lang.Assert:java.lang.String notContain(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.lang.Assert:java.lang.Object[] notEmpty(java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.lang.Assert:java.lang.Object[] noNullElements(java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.lang.Assert:java.util.Collection notEmpty(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.lang.Assert:java.lang.Object isInstanceOf(java.lang.Class,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.lang.Assert:void isAssignable(java.lang.Class,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.lang.Assert:void state(boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.lang.Console:void print(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.lang.Console:void log(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.lang.Console:void log(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.lang.Console:void log(java.lang.Object)",
            "cn.hutool.aop.aspects.TimeIntervalAspect:boolean after(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])"
        ]
    },
    "cn.hutool.core.lang.Console:void error(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.lang.Console:void error(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.lang.Console:void error(java.lang.Object)",
            "cn.hutool.system.SystemUtil:java.lang.String get(java.lang.String,boolean)"
        ]
    },
    "cn.hutool.crypto.symmetric.AES:void <init>(cn.hutool.crypto.Mode,cn.hutool.crypto.Padding,javax.crypto.SecretKey,javax.crypto.spec.IvParameterSpec)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.symmetric.AES:void <init>(cn.hutool.crypto.Mode,cn.hutool.crypto.Padding,javax.crypto.SecretKey)"
        ]
    },
    "cn.hutool.crypto.symmetric.AES:void <init>(java.lang.String,java.lang.String,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.symmetric.AES:void <init>(java.lang.String,java.lang.String)"
        ]
    },
    "cn.hutool.crypto.symmetric.AES:void <init>(java.lang.String,java.lang.String,byte[],byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.symmetric.AES:void <init>(cn.hutool.crypto.Mode,cn.hutool.crypto.Padding,byte[],byte[])"
        ]
    },
    "cn.hutool.crypto.symmetric.AES:void <init>(java.lang.String,java.lang.String,javax.crypto.SecretKey)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.symmetric.DES:void <init>(cn.hutool.crypto.Mode,cn.hutool.crypto.Padding,javax.crypto.SecretKey,javax.crypto.spec.IvParameterSpec)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.symmetric.DES:void <init>(cn.hutool.crypto.Mode,cn.hutool.crypto.Padding,javax.crypto.SecretKey)"
        ]
    },
    "cn.hutool.crypto.symmetric.DES:void <init>(java.lang.String,java.lang.String,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.symmetric.DES:void <init>(java.lang.String,java.lang.String)"
        ]
    },
    "cn.hutool.crypto.symmetric.DES:void <init>(java.lang.String,java.lang.String,byte[],byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.symmetric.DES:void <init>(cn.hutool.crypto.Mode,cn.hutool.crypto.Padding,byte[],byte[])"
        ]
    },
    "cn.hutool.crypto.symmetric.DES:void <init>(java.lang.String,java.lang.String,javax.crypto.SecretKey)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.symmetric.DESede:void <init>(cn.hutool.crypto.Mode,cn.hutool.crypto.Padding,javax.crypto.SecretKey,javax.crypto.spec.IvParameterSpec)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.symmetric.DESede:void <init>(cn.hutool.crypto.Mode,cn.hutool.crypto.Padding,javax.crypto.SecretKey)"
        ]
    },
    "cn.hutool.crypto.symmetric.DESede:void <init>(java.lang.String,java.lang.String,byte[],byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.symmetric.DESede:void <init>(cn.hutool.crypto.Mode,cn.hutool.crypto.Padding,byte[],byte[])",
            "cn.hutool.crypto.symmetric.DESede:void <init>(java.lang.String,java.lang.String,byte[])"
        ]
    },
    "cn.hutool.crypto.symmetric.DESede:void <init>(java.lang.String,java.lang.String,javax.crypto.SecretKey)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.Entity:java.sql.RowId getRowId(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.Entity:java.sql.RowId getRowId()"
        ]
    },
    "cn.hutool.db.meta.Column:cn.hutool.db.meta.Column create(java.lang.String,java.sql.ResultSet)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.meta.MetaUtil:cn.hutool.db.meta.Table getTableMeta(javax.sql.DataSource,java.lang.String)"
        ]
    },
    "cn.hutool.db.sql.Wrapper$1:java.lang.Object edit(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.BeanUtil:java.util.Map beanToMap(java.lang.Object,java.util.Map,boolean,cn.hutool.core.lang.Editor)",
            "cn.hutool.core.collection.CollUtil:java.util.Collection filter(java.util.Collection,cn.hutool.core.lang.Editor)",
            "cn.hutool.core.collection.CollUtil:java.util.List filter(java.util.List,cn.hutool.core.lang.Editor)",
            "cn.hutool.core.collection.CollUtil:java.util.List extract(java.lang.Iterable,cn.hutool.core.lang.Editor)",
            "cn.hutool.core.map.MapUtil:java.util.Map filter(java.util.Map,cn.hutool.core.lang.Editor)",
            "cn.hutool.core.util.ArrayUtil:java.lang.Object[] filter(java.lang.Object[],cn.hutool.core.lang.Editor)"
        ]
    },
    "cn.hutool.extra.ftp.Ftp:boolean upload(java.lang.String,java.lang.String,java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.ftp.Ftp:boolean upload(java.lang.String,java.lang.String,java.io.File)"
        ]
    },
    "cn.hutool.extra.ftp.Ftp:cn.hutool.extra.ftp.Ftp init(java.lang.String,int,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.ftp.Ftp:void <init>(java.lang.String,int,java.lang.String,java.lang.String,java.nio.charset.Charset)"
        ]
    },
    "cn.hutool.extra.mail.Mail:javax.mail.internet.MimeMessage buildMsg()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.mail.Mail:cn.hutool.extra.mail.Mail doSend()"
        ]
    },
    "cn.hutool.extra.servlet.multipart.UploadFile:java.io.InputStream getFileInputStream()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.extra.servlet.multipart.UploadFileHeader:void processHeaderString(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.servlet.multipart.UploadFileHeader:void <init>(java.lang.String)"
        ]
    },
    "cn.hutool.http.HtmlUtil:java.lang.String removeHtmlTag(java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.http.HtmlUtil:java.lang.String unwrapHtmlTag(java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest body(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest body(cn.hutool.json.JSON)",
            "cn.hutool.http.HttpUtil:java.lang.String post(java.lang.String,java.lang.String,int)",
            "cn.hutool.http.webservice.SoapRequest:java.lang.String execute()"
        ]
    },
    "cn.hutool.http.HttpRequest:void formEnd(java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HttpRequest:void sendMultipart()"
        ]
    },
    "cn.hutool.http.HttpRequest:void setMultipart()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HttpRequest:void sendMultipart()"
        ]
    },
    "cn.hutool.http.HttpResponse:java.util.List getCookies()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HttpResponse:java.net.HttpCookie getCookie(java.lang.String)"
        ]
    },
    "cn.hutool.http.HttpUtil:java.lang.String encodeUtf8(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.http.HttpUtil:java.lang.String encode(java.lang.String,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HttpResponse:long writeBody(java.io.File,cn.hutool.core.io.StreamProgress)",
            "cn.hutool.http.HttpUtil:java.lang.String toParams(java.util.Map,java.nio.charset.Charset)",
            "cn.hutool.http.HttpUtil:java.lang.String encodeParams(java.lang.String,java.nio.charset.Charset)"
        ]
    },
    "cn.hutool.http.HttpUtil:java.lang.String decode(java.lang.String,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.log.dialect.commons.ApacheCommonsLog4JLog:void trace(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.StaticLog:void trace(cn.hutool.log.Log,java.lang.String,java.lang.Object[])"
        ]
    },
    "cn.hutool.log.dialect.commons.ApacheCommonsLog4JLog:void debug(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.DbUtil:void setShowSqlGlobal(cn.hutool.setting.Setting)",
            "cn.hutool.db.ds.DSFactory:cn.hutool.db.ds.DSFactory create(cn.hutool.setting.Setting)",
            "cn.hutool.db.nosql.mongo.MongoDS:com.mongodb.MongoClientOptions$Builder buildMongoClientOptions(com.mongodb.MongoClientOptions$Builder,java.lang.String)",
            "cn.hutool.extra.servlet.multipart.UploadFile:boolean processStream(cn.hutool.extra.servlet.multipart.MultipartRequestInputStream)",
            "cn.hutool.http.HttpConnection:cn.hutool.http.HttpConnection setCookie(java.lang.String)",
            "cn.hutool.log.GlobalLogFactory:cn.hutool.log.LogFactory set(cn.hutool.log.LogFactory)",
            "cn.hutool.log.LogFactory:cn.hutool.log.LogFactory create()",
            "cn.hutool.log.StaticLog:void debug(cn.hutool.log.Log,java.lang.String,java.lang.Object[])",
            "cn.hutool.setting.AbsSetting$1:java.lang.Object value(java.lang.String,java.lang.reflect.Type)",
            "cn.hutool.setting.AbsSetting:java.lang.String getWithLog(java.lang.String)",
            "cn.hutool.setting.AbsSetting:java.lang.String getByGroupWithLog(java.lang.String,java.lang.String)",
            "cn.hutool.setting.dialect.Props:void load(cn.hutool.core.io.resource.Resource)",
            "cn.hutool.setting.SettingLoader:boolean load(cn.hutool.core.io.resource.UrlResource)",
            "cn.hutool.cron.CronTimer:void run()"
        ]
    },
    "cn.hutool.log.dialect.commons.ApacheCommonsLog4JLog:void info(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.nosql.mongo.MongoDS:void initSingle()",
            "cn.hutool.db.nosql.mongo.MongoDS:void initCloud()",
            "cn.hutool.extra.servlet.multipart.UploadSetting:void load(java.lang.String)",
            "cn.hutool.log.StaticLog:void info(cn.hutool.log.Log,java.lang.String,java.lang.Object[])"
        ]
    },
    "cn.hutool.log.dialect.commons.ApacheCommonsLog4JLog:void warn(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.DbUtil:void close(java.lang.Object[])"
        ]
    },
    "cn.hutool.log.dialect.commons.ApacheCommonsLog4JLog:void error(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.log.dialect.commons.ApacheCommonsLog4JLog:void log(cn.hutool.log.level.Level,java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.dialect.commons.ApacheCommonsLog4JLog:void log(cn.hutool.log.level.Level,java.lang.String,java.lang.Object[])"
        ]
    },
    "cn.hutool.log.StaticLog:boolean log(cn.hutool.log.Log,cn.hutool.log.level.Level,java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.StaticLog:void trace(cn.hutool.log.Log,java.lang.String,java.lang.Object[])",
            "cn.hutool.log.StaticLog:void debug(cn.hutool.log.Log,java.lang.String,java.lang.Object[])",
            "cn.hutool.log.StaticLog:void info(cn.hutool.log.Log,java.lang.String,java.lang.Object[])",
            "cn.hutool.log.StaticLog:void warn(cn.hutool.log.Log,java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.log.StaticLog:void error(cn.hutool.log.Log,java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.log.StaticLog:boolean log(cn.hutool.log.level.Level,java.lang.Throwable,java.lang.String,java.lang.Object[])"
        ]
    },
    "cn.hutool.log.dialect.jdk.JdkLog:void log(cn.hutool.log.level.Level,java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.dialect.jdk.JdkLog:void log(cn.hutool.log.level.Level,java.lang.String,java.lang.Object[])"
        ]
    },
    "cn.hutool.log.dialect.jdk.JdkLog:void logIfEnabled(java.util.logging.Level,java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.dialect.jdk.JdkLog:void trace(java.lang.String,java.lang.Object[])",
            "cn.hutool.log.dialect.jdk.JdkLog:void trace(java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.log.dialect.jdk.JdkLog:void debug(java.lang.String,java.lang.Object[])",
            "cn.hutool.log.dialect.jdk.JdkLog:void debug(java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.log.dialect.jdk.JdkLog:void info(java.lang.String,java.lang.Object[])",
            "cn.hutool.log.dialect.jdk.JdkLog:void info(java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.log.dialect.jdk.JdkLog:void warn(java.lang.String,java.lang.Object[])",
            "cn.hutool.log.dialect.jdk.JdkLog:void warn(java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.log.dialect.jdk.JdkLog:void error(java.lang.String,java.lang.Object[])",
            "cn.hutool.log.dialect.jdk.JdkLog:void error(java.lang.Throwable,java.lang.String,java.lang.Object[])"
        ]
    },
    "cn.hutool.log.dialect.log4j.Log4jLog:void trace(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.StaticLog:void trace(cn.hutool.log.Log,java.lang.String,java.lang.Object[])"
        ]
    },
    "cn.hutool.log.dialect.log4j.Log4jLog:void debug(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.DbUtil:void setShowSqlGlobal(cn.hutool.setting.Setting)",
            "cn.hutool.db.ds.DSFactory:cn.hutool.db.ds.DSFactory create(cn.hutool.setting.Setting)",
            "cn.hutool.db.nosql.mongo.MongoDS:com.mongodb.MongoClientOptions$Builder buildMongoClientOptions(com.mongodb.MongoClientOptions$Builder,java.lang.String)",
            "cn.hutool.extra.servlet.multipart.UploadFile:boolean processStream(cn.hutool.extra.servlet.multipart.MultipartRequestInputStream)",
            "cn.hutool.http.HttpConnection:cn.hutool.http.HttpConnection setCookie(java.lang.String)",
            "cn.hutool.log.GlobalLogFactory:cn.hutool.log.LogFactory set(cn.hutool.log.LogFactory)",
            "cn.hutool.log.LogFactory:cn.hutool.log.LogFactory create()",
            "cn.hutool.log.StaticLog:void debug(cn.hutool.log.Log,java.lang.String,java.lang.Object[])",
            "cn.hutool.setting.AbsSetting$1:java.lang.Object value(java.lang.String,java.lang.reflect.Type)",
            "cn.hutool.setting.AbsSetting:java.lang.String getWithLog(java.lang.String)",
            "cn.hutool.setting.AbsSetting:java.lang.String getByGroupWithLog(java.lang.String,java.lang.String)",
            "cn.hutool.setting.dialect.Props:void load(cn.hutool.core.io.resource.Resource)",
            "cn.hutool.setting.SettingLoader:boolean load(cn.hutool.core.io.resource.UrlResource)",
            "cn.hutool.cron.CronTimer:void run()"
        ]
    },
    "cn.hutool.log.dialect.log4j.Log4jLog:void info(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.nosql.mongo.MongoDS:void initSingle()",
            "cn.hutool.db.nosql.mongo.MongoDS:void initCloud()",
            "cn.hutool.extra.servlet.multipart.UploadSetting:void load(java.lang.String)",
            "cn.hutool.log.StaticLog:void info(cn.hutool.log.Log,java.lang.String,java.lang.Object[])"
        ]
    },
    "cn.hutool.log.dialect.log4j.Log4jLog:void warn(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.DbUtil:void close(java.lang.Object[])"
        ]
    },
    "cn.hutool.log.dialect.log4j.Log4jLog:void error(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.log.dialect.log4j.Log4jLog:void log(cn.hutool.log.level.Level,java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.dialect.log4j.Log4jLog:void log(cn.hutool.log.level.Level,java.lang.String,java.lang.Object[])"
        ]
    },
    "cn.hutool.log.dialect.log4j2.Log4j2Log:void trace(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.StaticLog:void trace(cn.hutool.log.Log,java.lang.String,java.lang.Object[])"
        ]
    },
    "cn.hutool.log.dialect.log4j2.Log4j2Log:void debug(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.DbUtil:void setShowSqlGlobal(cn.hutool.setting.Setting)",
            "cn.hutool.db.ds.DSFactory:cn.hutool.db.ds.DSFactory create(cn.hutool.setting.Setting)",
            "cn.hutool.db.nosql.mongo.MongoDS:com.mongodb.MongoClientOptions$Builder buildMongoClientOptions(com.mongodb.MongoClientOptions$Builder,java.lang.String)",
            "cn.hutool.extra.servlet.multipart.UploadFile:boolean processStream(cn.hutool.extra.servlet.multipart.MultipartRequestInputStream)",
            "cn.hutool.http.HttpConnection:cn.hutool.http.HttpConnection setCookie(java.lang.String)",
            "cn.hutool.log.GlobalLogFactory:cn.hutool.log.LogFactory set(cn.hutool.log.LogFactory)",
            "cn.hutool.log.LogFactory:cn.hutool.log.LogFactory create()",
            "cn.hutool.log.StaticLog:void debug(cn.hutool.log.Log,java.lang.String,java.lang.Object[])",
            "cn.hutool.setting.AbsSetting$1:java.lang.Object value(java.lang.String,java.lang.reflect.Type)",
            "cn.hutool.setting.AbsSetting:java.lang.String getWithLog(java.lang.String)",
            "cn.hutool.setting.AbsSetting:java.lang.String getByGroupWithLog(java.lang.String,java.lang.String)",
            "cn.hutool.setting.dialect.Props:void load(cn.hutool.core.io.resource.Resource)",
            "cn.hutool.setting.SettingLoader:boolean load(cn.hutool.core.io.resource.UrlResource)",
            "cn.hutool.cron.CronTimer:void run()"
        ]
    },
    "cn.hutool.log.dialect.log4j2.Log4j2Log:void info(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.nosql.mongo.MongoDS:void initSingle()",
            "cn.hutool.db.nosql.mongo.MongoDS:void initCloud()",
            "cn.hutool.extra.servlet.multipart.UploadSetting:void load(java.lang.String)",
            "cn.hutool.log.StaticLog:void info(cn.hutool.log.Log,java.lang.String,java.lang.Object[])"
        ]
    },
    "cn.hutool.log.dialect.log4j2.Log4j2Log:void warn(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.DbUtil:void close(java.lang.Object[])"
        ]
    },
    "cn.hutool.log.dialect.log4j2.Log4j2Log:void error(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.log.dialect.log4j2.Log4j2Log:void log(cn.hutool.log.level.Level,java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.dialect.log4j2.Log4j2Log:void log(cn.hutool.log.level.Level,java.lang.String,java.lang.Object[])"
        ]
    },
    "cn.hutool.log.dialect.log4j2.Log4j2Log:boolean logIfEnabled(org.apache.logging.log4j.Level,java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.dialect.log4j2.Log4j2Log:void trace(java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.log.dialect.log4j2.Log4j2Log:void debug(java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.log.dialect.log4j2.Log4j2Log:void info(java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.log.dialect.log4j2.Log4j2Log:void warn(java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.log.dialect.log4j2.Log4j2Log:void error(java.lang.Throwable,java.lang.String,java.lang.Object[])"
        ]
    },
    "cn.hutool.log.dialect.slf4j.Slf4jLog:void log(cn.hutool.log.level.Level,java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.dialect.slf4j.Slf4jLog:void log(cn.hutool.log.level.Level,java.lang.String,java.lang.Object[])"
        ]
    },
    "cn.hutool.log.dialect.slf4j.Slf4jLog:boolean locationAwareLog(int,java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.dialect.slf4j.Slf4jLog:void trace(java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.log.dialect.slf4j.Slf4jLog:void debug(java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.log.dialect.slf4j.Slf4jLog:void info(java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.log.dialect.slf4j.Slf4jLog:void warn(java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.log.dialect.slf4j.Slf4jLog:void error(java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.log.dialect.slf4j.Slf4jLog:boolean locationAwareLog(int,java.lang.String,java.lang.Object[])"
        ]
    },
    "cn.hutool.log.dialect.tinylog.TinyLog:void log(cn.hutool.log.level.Level,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.sql.SqlLog:void log(java.lang.String,java.lang.Object)",
            "cn.hutool.log.dialect.tinylog.TinyLog:void trace(java.lang.String,java.lang.Object[])",
            "cn.hutool.log.dialect.tinylog.TinyLog:void debug(java.lang.String,java.lang.Object[])",
            "cn.hutool.log.dialect.tinylog.TinyLog:void info(java.lang.String,java.lang.Object[])",
            "cn.hutool.log.dialect.tinylog.TinyLog:void warn(java.lang.String,java.lang.Object[])",
            "cn.hutool.log.dialect.tinylog.TinyLog:void error(java.lang.String,java.lang.Object[])"
        ]
    },
    "cn.hutool.log.dialect.tinylog.TinyLog:void log(cn.hutool.log.level.Level,java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.dialect.tinylog.TinyLog:void trace(java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.log.dialect.tinylog.TinyLog:void debug(java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.log.dialect.tinylog.TinyLog:void info(java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.log.dialect.tinylog.TinyLog:void warn(java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.log.dialect.tinylog.TinyLog:void error(java.lang.Throwable,java.lang.String,java.lang.Object[])"
        ]
    },
    "cn.hutool.cron.pattern.parser.DayOfWeekValueParser:int parseAlias(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.cron.pattern.parser.DayOfWeekValueParser:int parse(java.lang.String)"
        ]
    },
    "cn.hutool.cron.pattern.parser.MonthValueParser:int parseAlias(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.cron.pattern.parser.MonthValueParser:int parse(java.lang.String)"
        ]
    },
    "cn.hutool.cron.pattern.parser.SimpleValueParser:int parse(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.cron.pattern.matcher.ValueMatcherBuilder:java.util.List parseStep(java.lang.String,cn.hutool.cron.pattern.parser.ValueParser)",
            "cn.hutool.cron.pattern.matcher.ValueMatcherBuilder:java.util.List parseRange(java.lang.String,int,cn.hutool.cron.pattern.parser.ValueParser)",
            "cn.hutool.cron.pattern.parser.DayOfMonthValueParser:int parse(java.lang.String)",
            "cn.hutool.cron.pattern.parser.DayOfWeekValueParser:int parse(java.lang.String)",
            "cn.hutool.cron.pattern.parser.MonthValueParser:int parse(java.lang.String)"
        ]
    },
    "cn.hutool.cron.TaskTable:cn.hutool.cron.TaskTable add(java.lang.String,cn.hutool.cron.pattern.CronPattern,cn.hutool.cron.task.Task)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.cron.Scheduler:cn.hutool.cron.Scheduler schedule(java.lang.String,cn.hutool.cron.pattern.CronPattern,cn.hutool.cron.task.Task)"
        ]
    },
    "cn.hutool.core.io.resource.MultiFileResource:void <init>(java.io.File[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest form(java.lang.String,java.io.File[])"
        ]
    },
    "cn.hutool.core.io.watch.watchers.WatcherChain:cn.hutool.core.io.watch.watchers.WatcherChain create(cn.hutool.core.io.watch.Watcher[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.comparator.ComparatorChain:java.lang.Object addChain(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.date.format.FastDateFormat:void <init>(java.lang.String,java.util.TimeZone,java.util.Locale)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.date.format.FastDateFormat$1:cn.hutool.core.date.format.FastDateFormat createInstance(java.lang.String,java.util.TimeZone,java.util.Locale)"
        ]
    },
    "cn.hutool.core.io.IoUtil:java.util.Collection readLines(java.io.InputStream,java.nio.charset.Charset,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.FileUtil:java.util.Collection readLines(java.net.URL,java.nio.charset.Charset,java.util.Collection)",
            "cn.hutool.core.io.IoUtil:java.util.Collection readUtf8Lines(java.io.InputStream,java.util.Collection)",
            "cn.hutool.core.io.IoUtil:java.util.Collection readLines(java.io.InputStream,java.lang.String,java.util.Collection)",
            "cn.hutool.core.util.RuntimeUtil:java.util.List getResultLines(java.lang.Process,java.nio.charset.Charset)"
        ]
    },
    "cn.hutool.core.io.IoUtil:void readUtf8Lines(java.io.InputStream,cn.hutool.core.io.LineHandler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.math.MathUtil:java.util.List arrangementSelect(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.text.StrSpliter:java.util.List splitPath(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.text.StrSpliter:java.util.List splitPath(java.lang.String)",
            "cn.hutool.core.text.StrSpliter:java.lang.String[] splitPathToArray(java.lang.String,int)"
        ]
    },
    "cn.hutool.core.text.StrSpliter:java.util.List splitTrim(java.lang.String,char,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.text.StrSpliter:java.util.List split(java.lang.String,char,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.text.StrSpliter:java.lang.String[] splitToArray(java.lang.String,char,int,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.StrUtil:java.lang.String[] splitToArray(java.lang.CharSequence,char,int)"
        ]
    },
    "cn.hutool.core.util.StrUtil:java.util.List split(java.lang.CharSequence,char,int,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.StrUtil:java.util.List split(java.lang.CharSequence,char,int)",
            "cn.hutool.core.util.StrUtil:java.util.List splitTrim(java.lang.CharSequence,char,int)",
            "cn.hutool.core.util.StrUtil:java.util.List split(java.lang.CharSequence,char,boolean,boolean)"
        ]
    },
    "cn.hutool.core.text.StrSpliter:java.util.List splitTrim(java.lang.String,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.text.StrSpliter:java.util.List splitTrim(java.lang.String,java.lang.String,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.text.StrSpliter:java.lang.String[] splitToArray(java.lang.String,java.lang.String,int,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.StrUtil:java.lang.String[] split(java.lang.CharSequence,java.lang.CharSequence)"
        ]
    },
    "cn.hutool.core.util.StrUtil:java.util.List split(java.lang.CharSequence,java.lang.CharSequence,int,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.StrUtil:java.util.List splitTrim(java.lang.CharSequence,java.lang.CharSequence,int)"
        ]
    },
    "cn.hutool.db.sql.Condition:void parseValue()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.sql.Condition:void <init>(java.lang.String,java.lang.Object)",
            "cn.hutool.db.sql.Condition:void setValue(java.lang.Object,boolean)"
        ]
    },
    "cn.hutool.core.util.ReUtil:java.util.List findAllGroup0(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ReUtil:java.util.List findAllGroup1(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.json.JSONUtil:cn.hutool.json.JSONArray parseArray(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.json.JSONUtil:cn.hutool.json.JSON parse(java.lang.Object)",
            "cn.hutool.json.JSONUtil:cn.hutool.json.JSONArray readJSONArray(java.io.File,java.nio.charset.Charset)"
        ]
    },
    "cn.hutool.setting.AbsSetting$1:boolean containsKey(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.copier.BeanCopier:void valueProviderToBean(cn.hutool.core.bean.copier.ValueProvider,java.lang.Object)"
        ]
    },
    "cn.hutool.setting.AbsSetting:java.lang.String getStr(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.getter.OptNullBasicTypeFromStringGetter:java.lang.Object getObj(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.getter.OptNullBasicTypeGetter:java.lang.String getStr(java.lang.Object)"
        ]
    },
    "cn.hutool.setting.AbsSetting:java.lang.String[] getStrings(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.setting.AbsSetting:java.lang.String[] getStrings(java.lang.String)",
            "cn.hutool.setting.AbsSetting:java.lang.String[] getStringsWithDefault(java.lang.String,java.lang.String[])"
        ]
    },
    "cn.hutool.setting.AbsSetting:java.lang.Integer getInt(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.setting.AbsSetting:java.lang.Boolean getBool(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.setting.AbsSetting:java.lang.Long getLong(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.setting.AbsSetting:java.lang.Double getDouble(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.lang.SimpleCache:java.lang.Object remove(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.lang.PatternPool:java.util.regex.Pattern remove(java.lang.String,int)"
        ]
    },
    "cn.hutool.core.lang.Singleton:void remove(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.map.MapProxy:java.lang.Object remove(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.FileTypeUtil:java.lang.String removeFileType(java.lang.String)",
            "cn.hutool.core.lang.SimpleCache:java.lang.Object remove(java.lang.Object)",
            "cn.hutool.core.lang.Singleton:void remove(java.lang.Class)",
            "cn.hutool.core.map.MapProxy:java.lang.Object remove(java.lang.Object)",
            "cn.hutool.cache.impl.AbstractCache:void remove(java.lang.Object)",
            "cn.hutool.cache.impl.AbstractCache:void removeWithoutLock(java.lang.Object)",
            "cn.hutool.cache.impl.FIFOCache:int pruneCache()",
            "cn.hutool.db.ds.c3p0.C3p0DSFactory:void close(java.lang.String)",
            "cn.hutool.db.ds.dbcp.DbcpDSFactory:void close(java.lang.String)",
            "cn.hutool.db.ds.druid.DruidDSFactory:void close(java.lang.String)",
            "cn.hutool.db.ds.hikari.HikariDSFactory:void close(java.lang.String)",
            "cn.hutool.db.ds.pooled.PooledDSFactory:void close(java.lang.String)",
            "cn.hutool.db.ds.simple.SimpleDSFactory:void close(java.lang.String)",
            "cn.hutool.db.ds.tomcat.TomcatDSFactory:void close(java.lang.String)",
            "cn.hutool.db.ThreadLocalConnection$GroupedConnection:cn.hutool.db.ThreadLocalConnection$GroupedConnection close(javax.sql.DataSource)",
            "cn.hutool.extra.ssh.JschSessionPool:void close(java.lang.String)",
            "cn.hutool.http.GlobalHeaders:cn.hutool.http.GlobalHeaders removeHeader(java.lang.String)",
            "cn.hutool.http.HttpBase:java.lang.Object removeHeader(java.lang.String)",
            "cn.hutool.json.JSONObject:java.lang.Object remove(java.lang.Object)",
            "cn.hutool.poi.excel.ExcelReader:cn.hutool.poi.excel.ExcelReader removeHeaderAlias(java.lang.String)"
        ]
    },
    "cn.hutool.cache.impl.AbstractCache:void remove(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.cache.impl.AbstractCache:void removeWithoutLock(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.cache.impl.AbstractCache:boolean containsKey(java.lang.Object)",
            "cn.hutool.cache.impl.AbstractCache:java.lang.Object get(java.lang.Object,boolean)"
        ]
    },
    "cn.hutool.http.GlobalHeaders:cn.hutool.http.GlobalHeaders removeHeader(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.GlobalHeaders:cn.hutool.http.GlobalHeaders removeHeader(cn.hutool.http.Header)"
        ]
    },
    "cn.hutool.http.HttpBase:java.lang.Object removeHeader(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HttpBase:java.lang.Object removeHeader(cn.hutool.http.Header)"
        ]
    },
    "cn.hutool.json.JSONObject:java.lang.Object remove(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.FileTypeUtil:java.lang.String removeFileType(java.lang.String)",
            "cn.hutool.core.lang.SimpleCache:java.lang.Object remove(java.lang.Object)",
            "cn.hutool.core.lang.Singleton:void remove(java.lang.Class)",
            "cn.hutool.core.map.MapProxy:java.lang.Object remove(java.lang.Object)",
            "cn.hutool.cache.impl.AbstractCache:void remove(java.lang.Object)",
            "cn.hutool.cache.impl.AbstractCache:void removeWithoutLock(java.lang.Object)",
            "cn.hutool.cache.impl.FIFOCache:int pruneCache()",
            "cn.hutool.db.ds.c3p0.C3p0DSFactory:void close(java.lang.String)",
            "cn.hutool.db.ds.dbcp.DbcpDSFactory:void close(java.lang.String)",
            "cn.hutool.db.ds.druid.DruidDSFactory:void close(java.lang.String)",
            "cn.hutool.db.ds.hikari.HikariDSFactory:void close(java.lang.String)",
            "cn.hutool.db.ds.pooled.PooledDSFactory:void close(java.lang.String)",
            "cn.hutool.db.ds.simple.SimpleDSFactory:void close(java.lang.String)",
            "cn.hutool.db.ds.tomcat.TomcatDSFactory:void close(java.lang.String)",
            "cn.hutool.db.ThreadLocalConnection$GroupedConnection:cn.hutool.db.ThreadLocalConnection$GroupedConnection close(javax.sql.DataSource)",
            "cn.hutool.extra.ssh.JschSessionPool:void close(java.lang.String)",
            "cn.hutool.http.GlobalHeaders:cn.hutool.http.GlobalHeaders removeHeader(java.lang.String)",
            "cn.hutool.http.HttpBase:java.lang.Object removeHeader(java.lang.String)",
            "cn.hutool.json.JSONObject:cn.hutool.json.JSONObject put(java.lang.String,java.lang.Object)",
            "cn.hutool.json.JSONObject:java.lang.Object remove(java.lang.Object)",
            "cn.hutool.poi.excel.ExcelReader:cn.hutool.poi.excel.ExcelReader removeHeaderAlias(java.lang.String)"
        ]
    },
    "cn.hutool.poi.excel.ExcelReader:cn.hutool.poi.excel.ExcelReader removeHeaderAlias(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.lang.PatternPool:void clear()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.cache.file.AbstractFileCache:void clear()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.annotation.AnnotationUtil:java.lang.'annotation'.Annotation[] getAnnotations(java.lang.reflect.AnnotatedElement,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.date.DateRange:void <init>(java.util.Date,java.util.Date,cn.hutool.core.date.DateField,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.date.DateRange:void <init>(java.util.Date,java.util.Date,cn.hutool.core.date.DateField)"
        ]
    },
    "cn.hutool.core.lang.Range:void <init>(java.lang.Object,cn.hutool.core.lang.Range$Steper)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.convert.Convert:java.lang.String[] toStrArray(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.meta.MetaUtil:java.util.List getTables(javax.sql.DataSource,java.lang.String,java.lang.String,cn.hutool.db.meta.TableType[])"
        ]
    },
    "cn.hutool.core.convert.Convert:java.lang.Character[] toCharArray(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.convert.Convert:java.lang.Byte[] toByteArray(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.convert.Convert:java.lang.Short[] toShortArray(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.convert.Convert:java.lang.Number[] toNumberArray(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.convert.Convert:java.lang.Integer[] toIntArray(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.convert.Convert:java.lang.Long[] toLongArray(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.convert.Convert:java.lang.Double[] toDoubleArray(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.convert.Convert:java.lang.Float[] toFloatArray(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.convert.Convert:java.lang.Boolean[] toBooleanArray(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.StrUtil:long[] splitToLong(java.lang.CharSequence,char)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.StrUtil:long[] splitToLong(java.lang.CharSequence,java.lang.CharSequence)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.StrUtil:int[] splitToInt(java.lang.CharSequence,char)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.StrUtil:int[] splitToInt(java.lang.CharSequence,java.lang.CharSequence)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.handler.HandleHelper:cn.hutool.db.Entity handleRow(cn.hutool.db.Entity,int,java.sql.ResultSetMetaData,java.sql.ResultSet,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.handler.HandleHelper:cn.hutool.db.Entity handleRow(int,java.sql.ResultSetMetaData,java.sql.ResultSet)"
        ]
    },
    "cn.hutool.core.convert.Convert:java.lang.String toStr(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.map.MapUtil:java.lang.String join(java.util.Map,java.lang.String,java.lang.String,boolean)",
            "cn.hutool.core.text.StrBuilder:cn.hutool.core.text.StrBuilder insert(int,java.lang.Object)",
            "cn.hutool.db.sql.SqlBuilder:void buildValuePartForIN(java.lang.StringBuilder,cn.hutool.db.sql.Condition)",
            "cn.hutool.http.HttpUtil:java.lang.String toParams(java.util.Map,java.nio.charset.Charset)",
            "cn.hutool.setting.Setting:java.lang.String remove(java.lang.String,java.lang.Object)",
            "cn.hutool.setting.Setting:boolean containsKey(java.lang.Object)",
            "cn.hutool.setting.Setting:boolean containsValue(java.lang.Object)",
            "cn.hutool.setting.Setting:java.lang.String get(java.lang.Object)",
            "cn.hutool.setting.Setting:java.lang.String remove(java.lang.Object)",
            "cn.hutool.system.SystemUtil:void append(java.lang.StringBuilder,java.lang.String,java.lang.Object)",
            "cn.hutool.json.InternalJSONUtil:cn.hutool.json.JSONObject propertyPut(cn.hutool.json.JSONObject,java.lang.Object,java.lang.Object)",
            "cn.hutool.json.JSONObject:void <init>(java.lang.Object,boolean)"
        ]
    },
    "cn.hutool.core.lang.Dict:java.lang.String getStr(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.lang.Dict:java.lang.String getStr(java.lang.Object)",
            "cn.hutool.db.Entity:java.lang.String getStr(java.lang.String,java.nio.charset.Charset)"
        ]
    },
    "cn.hutool.core.convert.Convert:java.lang.Character toChar(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.lang.Dict:java.lang.Character getChar(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.lang.Dict:java.lang.Character getChar(java.lang.Object)"
        ]
    },
    "cn.hutool.core.convert.Convert:java.lang.Byte toByte(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.lang.Dict:java.lang.Byte getByte(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.lang.Dict:java.lang.Byte getByte(java.lang.Object)"
        ]
    },
    "cn.hutool.setting.dialect.Props:java.lang.Byte getByte(java.lang.String,java.lang.Byte)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.setting.dialect.Props:java.lang.Byte getByte(java.lang.String)",
            "cn.hutool.setting.dialect.Props:java.lang.Byte getByte(java.lang.Object,java.lang.Byte)"
        ]
    },
    "cn.hutool.core.convert.Convert:java.lang.Short toShort(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.lang.Dict:java.lang.Short getShort(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.lang.Dict:java.lang.Short getShort(java.lang.Object)"
        ]
    },
    "cn.hutool.setting.dialect.Props:java.lang.Short getShort(java.lang.String,java.lang.Short)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.setting.dialect.Props:java.lang.Short getShort(java.lang.String)",
            "cn.hutool.setting.dialect.Props:java.lang.Short getShort(java.lang.Object,java.lang.Short)"
        ]
    },
    "cn.hutool.core.convert.Convert:java.lang.Number toNumber(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.convert.Convert:java.lang.Integer toInt(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.BeanUtil:void setFieldValue(java.lang.Object,java.lang.String,java.lang.Object)",
            "cn.hutool.core.lang.Validator:boolean isBirthday(java.lang.String)"
        ]
    },
    "cn.hutool.core.lang.Dict:java.lang.Integer getInt(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.lang.Dict:java.lang.Integer getInt(java.lang.Object)"
        ]
    },
    "cn.hutool.core.util.ReUtil:java.lang.Integer getFirstNumber(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.setting.dialect.Props:java.lang.Integer getInt(java.lang.String,java.lang.Integer)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.setting.dialect.Props:java.lang.Integer getInt(java.lang.String)",
            "cn.hutool.setting.dialect.Props:java.lang.Integer getInt(java.lang.Object,java.lang.Integer)"
        ]
    },
    "cn.hutool.system.SystemUtil:long getInt(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.convert.Convert:java.lang.Long toLong(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.lang.Dict:java.lang.Long getLong(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.lang.Dict:java.lang.Long getLong(java.lang.Object)"
        ]
    },
    "cn.hutool.setting.dialect.Props:java.lang.Long getLong(java.lang.String,java.lang.Long)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.setting.dialect.Props:java.lang.Long getLong(java.lang.String)",
            "cn.hutool.setting.dialect.Props:java.lang.Long getLong(java.lang.Object,java.lang.Long)"
        ]
    },
    "cn.hutool.system.SystemUtil:long getLong(java.lang.String,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.convert.Convert:java.lang.Double toDouble(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.lang.Dict:java.lang.Double getDouble(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.lang.Dict:java.lang.Double getDouble(java.lang.Object)"
        ]
    },
    "cn.hutool.setting.dialect.Props:java.lang.Double getDouble(java.lang.String,java.lang.Double)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.setting.dialect.Props:java.lang.Double getDouble(java.lang.String)",
            "cn.hutool.setting.dialect.Props:java.lang.Double getDouble(java.lang.Object,java.lang.Double)"
        ]
    },
    "cn.hutool.core.convert.Convert:java.lang.Float toFloat(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.lang.Dict:java.lang.Float getFloat(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.lang.Dict:java.lang.Float getFloat(java.lang.Object)"
        ]
    },
    "cn.hutool.setting.dialect.Props:java.lang.Float getFloat(java.lang.String,java.lang.Float)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.setting.dialect.Props:java.lang.Float getFloat(java.lang.String)",
            "cn.hutool.setting.dialect.Props:java.lang.Float getFloat(java.lang.Object,java.lang.Float)"
        ]
    },
    "cn.hutool.core.convert.Convert:java.lang.Boolean toBool(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.lang.Dict:java.lang.Boolean getBool(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.lang.Dict:java.lang.Boolean getBool(java.lang.Object)"
        ]
    },
    "cn.hutool.setting.dialect.Props:java.lang.Boolean getBool(java.lang.String,java.lang.Boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.setting.dialect.Props:java.lang.Boolean getBool(java.lang.String)",
            "cn.hutool.setting.dialect.Props:java.lang.Boolean getBool(java.lang.Object,java.lang.Boolean)"
        ]
    },
    "cn.hutool.core.convert.Convert:java.math.BigInteger toBigInteger(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.lang.Dict:java.math.BigInteger getBigInteger(java.lang.String)"
        ]
    },
    "cn.hutool.core.convert.Convert:java.math.BigDecimal toBigDecimal(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.lang.Dict:java.math.BigDecimal getBigDecimal(java.lang.String)"
        ]
    },
    "cn.hutool.core.convert.Convert:java.util.Date toDate(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.setting.dialect.Props:java.util.Date getDate(java.lang.String,java.util.Date)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.setting.dialect.Props:java.util.Date getDate(java.lang.String)",
            "cn.hutool.setting.dialect.Props:java.util.Date getDate(java.lang.Object,java.util.Date)"
        ]
    },
    "cn.hutool.db.ActiveEntity:cn.hutool.db.Entity parseBean(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.Entity:cn.hutool.db.Entity parse(java.lang.Object)",
            "cn.hutool.db.Entity:cn.hutool.core.lang.Dict parseBean(java.lang.Object)"
        ]
    },
    "cn.hutool.db.ActiveEntity:cn.hutool.core.lang.Dict parseBean(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.lang.Dict:cn.hutool.core.lang.Dict parse(java.lang.Object)"
        ]
    },
    "cn.hutool.core.lang.Dict:java.util.Date getDate(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.Entity:java.util.Date getDate(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.http.HttpResponse:boolean isGzip()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HttpResponse:cn.hutool.http.HttpResponse init()"
        ]
    },
    "cn.hutool.json.JSONUtil:void putByPath(cn.hutool.json.JSON,java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.date.format.FastDateFormat:java.util.Date parse(java.lang.String,java.text.ParsePosition)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.date.format.FastDateParser:java.util.Date parse(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.date.DateTime:java.util.Date parse(java.lang.String,cn.hutool.core.date.format.DateParser)",
            "cn.hutool.core.date.format.FastDateFormat:java.util.Date parse(java.lang.String)",
            "cn.hutool.core.date.format.FastDateParser:java.lang.Object parseObject(java.lang.String)"
        ]
    },
    "cn.hutool.core.date.format.FastDateParser:java.lang.Object parseObject(java.lang.String,java.text.ParsePosition)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.date.format.FastDateFormat:java.lang.Object parseObject(java.lang.String,java.text.ParsePosition)"
        ]
    },
    "cn.hutool.core.lang.Validator:void validateMatchRegex(java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.lang.Validator:boolean isGeneral(java.lang.String,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.lang.Validator:void validateGeneral(java.lang.String,int,int,java.lang.String)",
            "cn.hutool.core.lang.Validator:boolean isGeneral(java.lang.String,int)"
        ]
    },
    "cn.hutool.core.lang.Validator:boolean isChinese(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.lang.Validator:void validateChinese(java.lang.String,java.lang.String)"
        ]
    },
    "cn.hutool.core.util.EnumUtil:java.util.List getFieldValues(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.http.GlobalHeaders:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.GlobalHeaders:cn.hutool.http.GlobalHeaders[] values()",
            "cn.hutool.http.GlobalHeaders:void <clinit>()",
            "cn.hutool.http.HttpRequest:void <init>(java.lang.String)"
        ]
    },
    "cn.hutool.extra.qrcode.QrCodeUtil:java.io.File generate(java.lang.String,cn.hutool.extra.qrcode.QrConfig,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.extra.qrcode.QrCodeUtil:void generate(java.lang.String,cn.hutool.extra.qrcode.QrConfig,java.lang.String,java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.qrcode.QrCodeUtil:byte[] generatePng(java.lang.String,cn.hutool.extra.qrcode.QrConfig)"
        ]
    },
    "cn.hutool.extra.qrcode.QrCodeUtil:java.awt.image.BufferedImage generate(java.lang.String,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.qrcode.QrCodeUtil:java.io.File generate(java.lang.String,int,int,java.io.File)",
            "cn.hutool.extra.qrcode.QrCodeUtil:void generate(java.lang.String,int,int,java.lang.String,java.io.OutputStream)"
        ]
    },
    "cn.hutool.core.bean.BeanPath:cn.hutool.core.bean.BeanPath create(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.BeanResolver:void <init>(java.lang.Object,java.lang.String)",
            "cn.hutool.core.bean.BeanUtil:java.lang.Object getProperty(java.lang.Object,java.lang.String)",
            "cn.hutool.core.bean.BeanUtil:void setProperty(java.lang.Object,java.lang.String,java.lang.Object)",
            "cn.hutool.json.JSONArray:java.lang.Object getByPath(java.lang.String)",
            "cn.hutool.json.JSONArray:void putByPath(java.lang.String,java.lang.Object)",
            "cn.hutool.json.JSONObject:java.lang.Object getByPath(java.lang.String)",
            "cn.hutool.json.JSONObject:void putByPath(java.lang.String,java.lang.Object)"
        ]
    },
    "cn.hutool.core.date.DateTime:void <init>(java.lang.String,cn.hutool.core.date.format.DateParser)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.date.DateUtil:cn.hutool.core.date.DateTime parse(java.lang.String,cn.hutool.core.date.format.DateParser)"
        ]
    },
    "cn.hutool.core.date.DateUtil:int ageOfNow(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.date.DateTime:void <init>(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.date.DateTime:cn.hutool.core.date.DateTime of(java.lang.String,java.lang.String)",
            "cn.hutool.core.date.DateUtil:cn.hutool.core.date.DateTime parse(java.lang.String,java.lang.String)"
        ]
    },
    "cn.hutool.core.date.DateUtil:cn.hutool.core.date.DateTime parse(java.lang.String,java.text.DateFormat)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.poi.excel.sax.Excel07SaxReader:void parse(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.poi.excel.sax.Excel07SaxReader:cn.hutool.poi.excel.sax.Excel07SaxReader read(org.apache.poi.openxml4j.opc.OPCPackage,int)"
        ]
    },
    "cn.hutool.poi.excel.ExcelUtil:cn.hutool.poi.excel.sax.Excel03SaxReader read03BySax(java.io.InputStream,int,cn.hutool.poi.excel.sax.handler.RowHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.poi.excel.ExcelUtil:void readBySax(java.io.InputStream,int,cn.hutool.poi.excel.sax.handler.RowHandler)"
        ]
    },
    "cn.hutool.poi.excel.ExcelUtil:cn.hutool.poi.excel.sax.Excel03SaxReader read03BySax(java.io.File,int,cn.hutool.poi.excel.sax.handler.RowHandler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.poi.excel.ExcelUtil:cn.hutool.poi.excel.ExcelReader getReader(java.io.File,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.poi.excel.ExcelUtil:cn.hutool.poi.excel.ExcelReader getReader(java.io.File)"
        ]
    },
    "cn.hutool.poi.excel.ExcelUtil:cn.hutool.poi.excel.ExcelReader getReader(java.io.File,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.poi.excel.ExcelUtil:cn.hutool.poi.excel.ExcelWriter getWriter()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.poi.excel.ExcelUtil:cn.hutool.poi.excel.ExcelWriter getWriter(boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.poi.excel.ExcelUtil:boolean isXlsx(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.poi.excel.ExcelUtil:void readBySax(java.io.InputStream,int,cn.hutool.poi.excel.sax.handler.RowHandler)"
        ]
    },
    "cn.hutool.core.clone.CloneSupport:java.lang.Object clone()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.BeanDescCache:cn.hutool.core.bean.BeanDescCache[] values()",
            "cn.hutool.core.bean.BeanInfoCache:cn.hutool.core.bean.BeanInfoCache[] values()",
            "cn.hutool.core.convert.BasicType:cn.hutool.core.convert.BasicType[] values()",
            "cn.hutool.core.date.BetweenFormater$Level:cn.hutool.core.date.BetweenFormater$Level[] values()",
            "cn.hutool.core.date.DateField:cn.hutool.core.date.DateField[] values()",
            "cn.hutool.core.date.DateUnit:cn.hutool.core.date.DateUnit[] values()",
            "cn.hutool.core.date.Month:cn.hutool.core.date.Month[] values()",
            "cn.hutool.core.date.Quarter:cn.hutool.core.date.Quarter[] values()",
            "cn.hutool.core.date.Season:cn.hutool.core.date.Season[] values()",
            "cn.hutool.core.date.Week:cn.hutool.core.date.Week[] values()",
            "cn.hutool.core.io.file.LineSeparator:cn.hutool.core.io.file.LineSeparator[] values()",
            "cn.hutool.core.util.ArrayUtil:java.lang.Object[] clone(java.lang.Object[])",
            "cn.hutool.core.util.ArrayUtil:java.lang.Object clone(java.lang.Object)",
            "cn.hutool.core.util.ModifierUtil$ModifierType:cn.hutool.core.util.ModifierUtil$ModifierType[] values()",
            "cn.hutool.core.util.ReferenceUtil$ReferenceType:cn.hutool.core.util.ReferenceUtil$ReferenceType[] values()",
            "cn.hutool.cache.GlobalPruneTimer:cn.hutool.cache.GlobalPruneTimer[] values()",
            "cn.hutool.crypto.asymmetric.AsymmetricAlgorithm:cn.hutool.crypto.asymmetric.AsymmetricAlgorithm[] values()",
            "cn.hutool.crypto.asymmetric.KeyType:cn.hutool.crypto.asymmetric.KeyType[] values()",
            "cn.hutool.crypto.asymmetric.SignAlgorithm:cn.hutool.crypto.asymmetric.SignAlgorithm[] values()",
            "cn.hutool.crypto.digest.BCrypt:void init_key()",
            "cn.hutool.crypto.digest.BCrypt:java.lang.String hashpw(java.lang.String,java.lang.String)",
            "cn.hutool.crypto.digest.DigestAlgorithm:cn.hutool.crypto.digest.DigestAlgorithm[] values()",
            "cn.hutool.crypto.digest.HmacAlgorithm:cn.hutool.crypto.digest.HmacAlgorithm[] values()",
            "cn.hutool.crypto.Mode:cn.hutool.crypto.Mode[] values()",
            "cn.hutool.crypto.Padding:cn.hutool.crypto.Padding[] values()",
            "cn.hutool.crypto.symmetric.SymmetricAlgorithm:cn.hutool.crypto.symmetric.SymmetricAlgorithm[] values()",
            "cn.hutool.db.dialect.DialectName:cn.hutool.db.dialect.DialectName[] values()",
            "cn.hutool.db.meta.TableType:cn.hutool.db.meta.TableType[] values()",
            "cn.hutool.db.sql.Condition$LikeType:cn.hutool.db.sql.Condition$LikeType[] values()",
            "cn.hutool.db.sql.Direction:cn.hutool.db.sql.Direction[] values()",
            "cn.hutool.db.sql.LogicalOperator:cn.hutool.db.sql.LogicalOperator[] values()",
            "cn.hutool.db.sql.SqlBuilder$Join:cn.hutool.db.sql.SqlBuilder$Join[] values()",
            "cn.hutool.db.sql.SqlLog:cn.hutool.db.sql.SqlLog[] values()",
            "cn.hutool.db.ThreadLocalConnection:cn.hutool.db.ThreadLocalConnection[] values()",
            "cn.hutool.db.transaction.TransactionLevel:cn.hutool.db.transaction.TransactionLevel[] values()",
            "cn.hutool.extra.mail.GlobalMailAccount:cn.hutool.extra.mail.GlobalMailAccount[] values()",
            "cn.hutool.extra.ssh.JschSessionPool:cn.hutool.extra.ssh.JschSessionPool[] values()",
            "cn.hutool.extra.ssh.Sftp$Mode:cn.hutool.extra.ssh.Sftp$Mode[] values()",
            "cn.hutool.extra.template.TemplateConfig$ResourceMode:cn.hutool.extra.template.TemplateConfig$ResourceMode[] values()",
            "cn.hutool.http.ContentType:cn.hutool.http.ContentType[] values()",
            "cn.hutool.http.GlobalHeaders:cn.hutool.http.GlobalHeaders[] values()",
            "cn.hutool.http.Header:cn.hutool.http.Header[] values()",
            "cn.hutool.http.Method:cn.hutool.http.Method[] values()",
            "cn.hutool.log.level.Level:cn.hutool.log.level.Level[] values()",
            "cn.hutool.poi.excel.sax.CellDataType:cn.hutool.poi.excel.sax.CellDataType[] values()",
            "cn.hutool.poi.excel.style.Align:cn.hutool.poi.excel.style.Align[] values()"
        ]
    },
    "cn.hutool.core.comparator.FieldComparator:int compare(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.collection.BoundedPriorityQueue$1:int compare(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.collection.BoundedPriorityQueue:boolean offer(java.lang.Object)",
            "cn.hutool.core.comparator.ComparatorChain:int compare(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.comparator.ReverseComparator:int compare(java.lang.Object,java.lang.Object)"
        ]
    },
    "cn.hutool.core.date.format.FastDatePrinter:java.lang.Appendable applyRules(java.util.Calendar,java.lang.Appendable)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.date.format.FastDatePrinter:java.lang.Appendable format(long,java.lang.Appendable)",
            "cn.hutool.core.date.format.FastDatePrinter:java.lang.Appendable format(java.util.Date,java.lang.Appendable)",
            "cn.hutool.core.date.format.FastDatePrinter:java.lang.Appendable format(java.util.Calendar,java.lang.Appendable)",
            "cn.hutool.core.date.format.FastDatePrinter:java.lang.String applyRulesToString(java.util.Calendar)"
        ]
    },
    "cn.hutool.core.io.IoUtil:java.lang.Object readObj(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ClipboardUtil:java.lang.Object get(java.awt.datatransfer.DataFlavor,java.awt.datatransfer.ClipboardOwner)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ClipboardUtil:java.lang.Object get(java.awt.datatransfer.DataFlavor)"
        ]
    },
    "cn.hutool.core.util.ImageUtil:java.awt.Font createFont(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ImageUtil:java.awt.Font createFont(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.NetUtil:java.lang.String getMacAddress(java.net.InetAddress,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.NetUtil:java.lang.String getMacAddress(java.net.InetAddress)"
        ]
    },
    "cn.hutool.core.util.ObjectUtil:java.lang.Object unserialize(byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.RandomUtil:java.security.SecureRandom getSecureRandom()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ReflectUtil:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.annotation.AnnotationUtil:java.lang.Object getAnnotationValue(java.lang.reflect.AnnotatedElement,java.lang.Class,java.lang.String)",
            "cn.hutool.core.annotation.AnnotationUtil:java.util.Map getAnnotationValueMap(java.lang.reflect.AnnotatedElement,java.lang.Class)",
            "cn.hutool.core.bean.BeanDesc$PropDesc:java.lang.Object getValue(java.lang.Object)",
            "cn.hutool.core.bean.BeanDesc$PropDesc:cn.hutool.core.bean.BeanDesc$PropDesc setValue(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.lang.JarClassLoader:void loadJar(java.net.URLClassLoader,java.io.File)",
            "cn.hutool.core.util.ClassUtil:java.lang.Object invoke(java.lang.String,java.lang.String,boolean,java.lang.Object[])",
            "cn.hutool.core.util.ReflectUtil:java.lang.Object invokeStatic(java.lang.reflect.Method,java.lang.Object[])",
            "cn.hutool.core.util.ReflectUtil:java.lang.Object invokeWithCheck(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "cn.hutool.core.util.ReflectUtil:java.lang.Object invoke(java.lang.Object,java.lang.String,java.lang.Object[])",
            "cn.hutool.aop.interceptor.JdkInterceptor:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "cn.hutool.cron.task.InvokeTask:void execute()"
        ]
    },
    "cn.hutool.core.util.URLUtil:java.lang.String complateUrl(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.URLUtil:java.lang.String encode(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.URLUtil:java.lang.String encode(java.lang.String)"
        ]
    },
    "cn.hutool.core.util.URLUtil:java.lang.String decode(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.lang.ClassScaner:java.util.Set scan()",
            "cn.hutool.core.lang.ClassScaner:void scanJavaClassPaths()",
            "cn.hutool.core.util.ClassUtil:java.util.Set getClassPaths(java.lang.String,boolean)",
            "cn.hutool.core.util.URLUtil:java.lang.String decode(java.lang.String)"
        ]
    },
    "cn.hutool.core.util.URLUtil:java.lang.String getPath(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.URLUtil:java.net.URI toURI(java.net.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.FileUtil:java.io.File file(java.net.URL)",
            "cn.hutool.core.io.watch.WatchMonitor:cn.hutool.core.io.watch.WatchMonitor create(java.net.URL,int,java.nio.file.WatchEvent$Kind[])",
            "cn.hutool.core.io.watch.WatchUtil:cn.hutool.core.io.watch.WatchMonitor create(java.net.URL,int,java.nio.file.WatchEvent$Kind[])",
            "cn.hutool.core.io.watch.WatchUtil:cn.hutool.core.io.watch.WatchMonitor createAll(java.net.URL,int,cn.hutool.core.io.watch.Watcher)",
            "cn.hutool.core.util.URLUtil:java.lang.String getDecodedPath(java.net.URL)"
        ]
    },
    "cn.hutool.core.util.URLUtil:java.net.URI toURI(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.XmlUtil:java.lang.Object getByXPath(java.lang.String,java.lang.Object,javax.xml.namespace.QName)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.XmlUtil:org.w3c.dom.NodeList getNodeListByXPath(java.lang.String,java.lang.Object)",
            "cn.hutool.core.util.XmlUtil:org.w3c.dom.Node getNodeByXPath(java.lang.String,java.lang.Object)"
        ]
    },
    "cn.hutool.core.util.ZipUtil:void addFile(java.io.InputStream,java.lang.String,java.util.zip.ZipOutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ZipUtil:java.io.File zip(java.io.File,java.lang.String[],java.io.InputStream[],java.nio.charset.Charset)",
            "cn.hutool.core.util.ZipUtil:void addFile(java.io.File,java.lang.String,java.util.zip.ZipOutputStream)"
        ]
    },
    "cn.hutool.core.util.ZipUtil:void addDir(java.lang.String,java.util.zip.ZipOutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ZipUtil:void zip(java.io.File,java.lang.String,java.util.zip.ZipOutputStream)"
        ]
    },
    "cn.hutool.extra.template.engine.velocity.VelocityUtil:java.lang.String merge(java.lang.String,org.apache.velocity.VelocityContext)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.img.Img:void write(javax.imageio.stream.ImageOutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.img.Img:void write(java.io.OutputStream)"
        ]
    },
    "cn.hutool.core.img.Img:void write(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.BOMInputStream:java.lang.String getCharset()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.FastByteArrayOutputStream:void writeTo(java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.file.FileReader:java.io.BufferedInputStream getInputStream()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.file.FileReader:java.io.BufferedReader getReader()"
        ]
    },
    "cn.hutool.core.io.file.FileWriter:java.io.BufferedOutputStream getOutputStream()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.file.FileWriter:java.io.BufferedWriter getWriter(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.file.FileWriter:java.io.File write(java.lang.String,boolean)",
            "cn.hutool.core.io.file.FileWriter:java.io.PrintWriter getPrintWriter(boolean)",
            "cn.hutool.core.io.FileUtil:java.io.BufferedWriter getWriter(java.io.File,java.nio.charset.Charset,boolean)"
        ]
    },
    "cn.hutool.core.io.FileUtil:java.io.File touch(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.file.FileWriter:java.io.File write(byte[],int,int,boolean)",
            "cn.hutool.core.io.file.FileWriter:java.io.File writeFromStream(java.io.InputStream)",
            "cn.hutool.core.io.file.FileWriter:java.io.BufferedOutputStream getOutputStream()",
            "cn.hutool.core.io.file.FileWriter:java.io.BufferedWriter getWriter(boolean)",
            "cn.hutool.core.io.FileUtil:java.io.File touch(java.lang.String)",
            "cn.hutool.core.io.FileUtil:java.io.File touch(java.io.File,java.lang.String)",
            "cn.hutool.core.io.FileUtil:java.io.File touch(java.lang.String,java.lang.String)",
            "cn.hutool.core.io.FileUtil:java.io.BufferedOutputStream getOutputStream(java.io.File)",
            "cn.hutool.core.util.ZipUtil:java.io.File unzip(java.io.File,java.io.File,java.nio.charset.Charset)",
            "cn.hutool.core.util.ZipUtil:void validateFiles(java.io.File,java.io.File[])",
            "cn.hutool.extra.ftp.Ftp:void download(java.lang.String,java.lang.String,java.io.File)"
        ]
    },
    "cn.hutool.core.io.FileUtil:boolean del(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.FileUtil:boolean del(java.lang.String)",
            "cn.hutool.core.io.FileUtil:boolean clean(java.io.File)"
        ]
    },
    "cn.hutool.core.io.FileUtil:java.io.File createTempFile(java.lang.String,java.lang.String,java.io.File,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.FileUtil:java.io.File createTempFile(java.io.File)",
            "cn.hutool.core.io.FileUtil:java.io.File createTempFile(java.io.File,boolean)",
            "cn.hutool.extra.servlet.multipart.UploadFile:boolean processStream(cn.hutool.extra.servlet.multipart.MultipartRequestInputStream)"
        ]
    },
    "cn.hutool.core.io.FileUtil:java.io.File rename(java.io.File,java.lang.String,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.FileUtil:java.lang.String getCanonicalPath(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.FileUtil:boolean equals(java.io.File,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.file.FileCopier:java.io.File copy()",
            "cn.hutool.core.io.FileUtil:java.io.File copyFile(java.io.File,java.io.File,java.nio.file.StandardCopyOption[])",
            "cn.hutool.core.io.FileUtil:boolean contentEquals(java.io.File,java.io.File)",
            "cn.hutool.core.io.FileUtil:boolean contentEqualsIgnoreEOL(java.io.File,java.io.File,java.nio.charset.Charset)"
        ]
    },
    "cn.hutool.core.io.FileUtil:java.nio.file.attribute.BasicFileAttributes getAttributes(java.nio.file.Path,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.FileUtil:java.io.BufferedInputStream getInputStream(java.nio.file.Path)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.FileUtil:java.io.BufferedReader getReader(java.nio.file.Path,java.nio.charset.Charset)"
        ]
    },
    "cn.hutool.core.io.FileUtil:cn.hutool.core.io.BOMInputStream getBOMInputStream(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.FileUtil:java.io.BufferedOutputStream getOutputStream(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.FileUtil:java.io.BufferedOutputStream getOutputStream(java.lang.String)",
            "cn.hutool.core.util.XmlUtil:void writeObjectAsXml(java.io.File,java.lang.Object)",
            "cn.hutool.core.util.ZipUtil:java.util.zip.ZipOutputStream getZipOutputStream(java.io.File,java.nio.charset.Charset)",
            "cn.hutool.core.util.ZipUtil:void copy(java.util.zip.ZipFile,java.util.zip.ZipEntry,java.io.File)",
            "cn.hutool.extra.ftp.Ftp:void download(java.lang.String,java.lang.String,java.io.File)",
            "cn.hutool.extra.template.AbstractTemplate:void render(java.util.Map,java.io.File)",
            "cn.hutool.http.HttpResponse:long writeBody(java.io.File,cn.hutool.core.io.StreamProgress)",
            "cn.hutool.poi.excel.ExcelWriter:cn.hutool.poi.excel.ExcelWriter flush(java.io.File)",
            "cn.hutool.captcha.AbstractCaptcha:void write(java.io.File)"
        ]
    },
    "cn.hutool.core.io.IoUtil:long copy(java.io.Reader,java.io.Writer,int,cn.hutool.core.io.StreamProgress)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.IoUtil:long copy(java.io.Reader,java.io.Writer,int)"
        ]
    },
    "cn.hutool.core.io.IoUtil:java.lang.String read(java.io.Reader)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.resource.InputStreamResource:java.lang.String readStr(java.nio.charset.Charset)",
            "cn.hutool.core.io.resource.UrlResource:java.lang.String readStr(java.nio.charset.Charset)",
            "cn.hutool.db.sql.SqlUtil:java.lang.String clobToStr(java.sql.Clob)",
            "cn.hutool.extra.servlet.ServletUtil:java.lang.String getBody(javax.servlet.ServletRequest)"
        ]
    },
    "cn.hutool.core.io.IoUtil:java.lang.String read(java.nio.channels.FileChannel,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.IoUtil:java.lang.String readUtf8(java.nio.channels.FileChannel)",
            "cn.hutool.core.io.IoUtil:java.lang.String read(java.nio.channels.FileChannel,java.lang.String)"
        ]
    },
    "cn.hutool.core.io.IoUtil:byte[] readBytes(java.io.InputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.IoUtil:java.lang.String readHex(java.io.InputStream,int,boolean)"
        ]
    },
    "cn.hutool.core.io.IoUtil:java.io.FileInputStream toStream(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.FileTypeUtil:java.lang.String getType(java.io.File)",
            "cn.hutool.core.io.FileUtil:java.io.BufferedInputStream getInputStream(java.io.File)"
        ]
    },
    "cn.hutool.core.io.IoUtil:boolean contentEquals(java.io.InputStream,java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.FileUtil:boolean contentEquals(java.io.File,java.io.File)"
        ]
    },
    "cn.hutool.core.io.IoUtil:boolean contentEquals(java.io.Reader,java.io.Reader)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.IoUtil:boolean contentEqualsIgnoreEOL(java.io.Reader,java.io.Reader)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.FileUtil:boolean contentEqualsIgnoreEOL(java.io.File,java.io.File,java.nio.charset.Charset)"
        ]
    },
    "cn.hutool.core.io.watch.WatchMonitor:void init()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.watch.WatchMonitor:void <init>(java.nio.file.Path,int,java.nio.file.WatchEvent$Kind[])"
        ]
    },
    "cn.hutool.core.text.csv.CsvParser:java.util.List readLine()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.text.csv.CsvParser:cn.hutool.core.text.csv.CsvRow nextRow()"
        ]
    },
    "cn.hutool.core.text.csv.CsvWriter:void writeLine()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.text.csv.CsvWriter:void flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.text.csv.CsvWriter:cn.hutool.core.text.csv.CsvWriter write(java.lang.String[][])",
            "cn.hutool.core.text.csv.CsvWriter:cn.hutool.core.text.csv.CsvWriter write(java.util.Collection)"
        ]
    },
    "cn.hutool.core.text.csv.CsvWriter:void appendLine(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.text.csv.CsvWriter:cn.hutool.core.text.csv.CsvWriter write(java.lang.String[][])",
            "cn.hutool.core.text.csv.CsvWriter:cn.hutool.core.text.csv.CsvWriter write(java.util.Collection)"
        ]
    },
    "cn.hutool.core.util.ImageUtil:void slice(java.awt.Image,java.io.File,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ImageUtil:void slice(java.io.File,java.io.File,int,int)"
        ]
    },
    "cn.hutool.core.util.ImageUtil:void sliceByRowsAndCols(java.io.File,java.io.File,int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ImageUtil:void sliceByRowsAndCols(java.awt.Image,java.io.File,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ImageUtil:void sliceByRowsAndCols(java.io.File,java.io.File,int,int)"
        ]
    },
    "cn.hutool.core.util.ImageUtil:void convert(java.io.InputStream,java.lang.String,java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ImageUtil:void convert(javax.imageio.stream.ImageInputStream,java.lang.String,javax.imageio.stream.ImageOutputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ImageUtil:void convert(java.awt.Image,java.lang.String,javax.imageio.stream.ImageOutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ImageUtil:void convert(java.io.File,java.lang.String,java.io.File)",
            "cn.hutool.core.util.ImageUtil:void convert(java.io.InputStream,java.lang.String,java.io.OutputStream)",
            "cn.hutool.core.util.ImageUtil:void convert(javax.imageio.stream.ImageInputStream,java.lang.String,javax.imageio.stream.ImageOutputStream)"
        ]
    },
    "cn.hutool.core.util.ImageUtil:void write(java.awt.Image,java.lang.String,javax.imageio.stream.ImageOutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ImageUtil:void binary(java.awt.Image,javax.imageio.stream.ImageOutputStream,java.lang.String)",
            "cn.hutool.core.util.ImageUtil:void writeJpg(java.awt.Image,javax.imageio.stream.ImageOutputStream)",
            "cn.hutool.core.util.ImageUtil:void writePng(java.awt.Image,javax.imageio.stream.ImageOutputStream)",
            "cn.hutool.core.util.ImageUtil:void write(java.awt.Image,java.lang.String,java.io.OutputStream)"
        ]
    },
    "cn.hutool.core.util.ImageUtil:void write(java.awt.Image,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ImageUtil:void scale(java.awt.Image,java.io.File,float)",
            "cn.hutool.core.util.ImageUtil:void scale(java.io.File,java.io.File,int,int,java.awt.Color)",
            "cn.hutool.core.util.ImageUtil:void cut(java.awt.Image,java.io.File,java.awt.Rectangle)",
            "cn.hutool.core.util.ImageUtil:void gray(java.awt.Image,java.io.File)",
            "cn.hutool.core.util.ImageUtil:void binary(java.awt.Image,java.io.File)",
            "cn.hutool.core.util.ImageUtil:void pressText(java.awt.Image,java.io.File,java.lang.String,java.awt.Color,java.awt.Font,int,int,float)",
            "cn.hutool.core.util.ImageUtil:void pressImage(java.awt.Image,java.io.File,java.awt.Image,int,int,float)",
            "cn.hutool.core.util.ImageUtil:void rotate(java.awt.Image,int,java.io.File)",
            "cn.hutool.core.util.ImageUtil:void flip(java.awt.Image,java.io.File)",
            "cn.hutool.extra.qrcode.QrCodeUtil:java.io.File generate(java.lang.String,int,int,java.io.File)",
            "cn.hutool.extra.qrcode.QrCodeUtil:java.io.File generate(java.lang.String,cn.hutool.extra.qrcode.QrConfig,java.io.File)"
        ]
    },
    "cn.hutool.core.util.ImageUtil:java.awt.image.BufferedImage read(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.img.Img:cn.hutool.core.img.Img 'from'(java.io.File)",
            "cn.hutool.core.util.ImageUtil:void scale(java.io.File,java.io.File,float)",
            "cn.hutool.core.util.ImageUtil:void scale(java.io.File,java.io.File,int,int,java.awt.Color)",
            "cn.hutool.core.util.ImageUtil:void cut(java.io.File,java.io.File,java.awt.Rectangle)",
            "cn.hutool.core.util.ImageUtil:void slice(java.io.File,java.io.File,int,int)",
            "cn.hutool.core.util.ImageUtil:void gray(java.io.File,java.io.File)",
            "cn.hutool.core.util.ImageUtil:void binary(java.io.File,java.io.File)",
            "cn.hutool.core.util.ImageUtil:void pressText(java.io.File,java.io.File,java.lang.String,java.awt.Color,java.awt.Font,int,int,float)",
            "cn.hutool.core.util.ImageUtil:void pressImage(java.io.File,java.io.File,java.awt.Image,int,int,float)",
            "cn.hutool.core.util.ImageUtil:void rotate(java.io.File,int,java.io.File)",
            "cn.hutool.core.util.ImageUtil:void flip(java.io.File,java.io.File)",
            "cn.hutool.extra.qrcode.QrCodeUtil:java.lang.String decode(java.io.File)"
        ]
    },
    "cn.hutool.core.util.ImageUtil:java.awt.image.BufferedImage read(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.img.Img:cn.hutool.core.img.Img 'from'(java.io.InputStream)",
            "cn.hutool.core.util.ImageUtil:void scale(java.io.InputStream,java.io.OutputStream,float)",
            "cn.hutool.core.util.ImageUtil:void scale(java.io.InputStream,java.io.OutputStream,int,int,java.awt.Color)",
            "cn.hutool.core.util.ImageUtil:void cut(java.io.InputStream,java.io.OutputStream,java.awt.Rectangle)",
            "cn.hutool.core.util.ImageUtil:void gray(java.io.InputStream,java.io.OutputStream)",
            "cn.hutool.core.util.ImageUtil:void binary(java.io.InputStream,java.io.OutputStream,java.lang.String)",
            "cn.hutool.core.util.ImageUtil:void pressText(java.io.InputStream,java.io.OutputStream,java.lang.String,java.awt.Color,java.awt.Font,int,int,float)",
            "cn.hutool.core.util.ImageUtil:void pressImage(java.io.InputStream,java.io.OutputStream,java.awt.Image,int,int,float)",
            "cn.hutool.core.util.ImageUtil:java.awt.image.BufferedImage toImage(byte[])",
            "cn.hutool.extra.qrcode.QrCodeUtil:java.lang.String decode(java.io.InputStream)",
            "cn.hutool.captcha.AbstractCaptcha:java.awt.image.BufferedImage getImage()"
        ]
    },
    "cn.hutool.core.util.ImageUtil:java.awt.image.BufferedImage read(javax.imageio.stream.ImageInputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.img.Img:cn.hutool.core.img.Img 'from'(javax.imageio.stream.ImageInputStream)",
            "cn.hutool.core.util.ImageUtil:void scale(javax.imageio.stream.ImageInputStream,javax.imageio.stream.ImageOutputStream,float)",
            "cn.hutool.core.util.ImageUtil:void scale(javax.imageio.stream.ImageInputStream,javax.imageio.stream.ImageOutputStream,int,int,java.awt.Color)",
            "cn.hutool.core.util.ImageUtil:void cut(javax.imageio.stream.ImageInputStream,javax.imageio.stream.ImageOutputStream,java.awt.Rectangle)",
            "cn.hutool.core.util.ImageUtil:void gray(javax.imageio.stream.ImageInputStream,javax.imageio.stream.ImageOutputStream)",
            "cn.hutool.core.util.ImageUtil:void binary(javax.imageio.stream.ImageInputStream,javax.imageio.stream.ImageOutputStream,java.lang.String)",
            "cn.hutool.core.util.ImageUtil:void pressText(javax.imageio.stream.ImageInputStream,javax.imageio.stream.ImageOutputStream,java.lang.String,java.awt.Color,java.awt.Font,int,int,float)",
            "cn.hutool.core.util.ImageUtil:void pressImage(javax.imageio.stream.ImageInputStream,javax.imageio.stream.ImageOutputStream,java.awt.Image,int,int,float)"
        ]
    },
    "cn.hutool.core.util.ImageUtil:java.awt.image.BufferedImage read(java.net.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.img.Img:cn.hutool.core.img.Img 'from'(java.net.URL)"
        ]
    },
    "cn.hutool.core.util.ImageUtil:javax.imageio.stream.ImageOutputStream getImageOutputStream(java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.img.Img:void write(java.io.OutputStream)",
            "cn.hutool.core.util.ImageUtil:void scale(java.awt.Image,java.io.OutputStream,float)",
            "cn.hutool.core.util.ImageUtil:void scale(java.io.InputStream,java.io.OutputStream,int,int,java.awt.Color)",
            "cn.hutool.core.util.ImageUtil:void cut(java.awt.Image,java.io.OutputStream,java.awt.Rectangle)",
            "cn.hutool.core.util.ImageUtil:void gray(java.io.InputStream,java.io.OutputStream)",
            "cn.hutool.core.util.ImageUtil:void gray(java.awt.Image,java.io.OutputStream)",
            "cn.hutool.core.util.ImageUtil:void binary(java.io.InputStream,java.io.OutputStream,java.lang.String)",
            "cn.hutool.core.util.ImageUtil:void binary(java.awt.Image,java.io.OutputStream,java.lang.String)",
            "cn.hutool.core.util.ImageUtil:void pressText(java.io.InputStream,java.io.OutputStream,java.lang.String,java.awt.Color,java.awt.Font,int,int,float)",
            "cn.hutool.core.util.ImageUtil:void pressText(java.awt.Image,java.io.OutputStream,java.lang.String,java.awt.Color,java.awt.Font,int,int,float)",
            "cn.hutool.core.util.ImageUtil:void pressImage(java.io.InputStream,java.io.OutputStream,java.awt.Image,int,int,float)",
            "cn.hutool.core.util.ImageUtil:void pressImage(java.awt.Image,java.io.OutputStream,java.awt.Image,int,int,float)",
            "cn.hutool.core.util.ImageUtil:void rotate(java.awt.Image,int,java.io.OutputStream)",
            "cn.hutool.core.util.ImageUtil:void flip(java.awt.Image,java.io.OutputStream)",
            "cn.hutool.core.util.ImageUtil:void write(java.awt.Image,java.lang.String,java.io.OutputStream)"
        ]
    },
    "cn.hutool.core.util.ImageUtil:javax.imageio.stream.ImageOutputStream getImageOutputStream(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ImageUtil:javax.imageio.stream.ImageInputStream getImageInputStream(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.NetUtil:void netCat(java.lang.String,int,boolean,java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.RuntimeUtil:java.lang.Process exec(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.RuntimeUtil:java.lang.String execForStr(java.nio.charset.Charset,java.lang.String[])",
            "cn.hutool.core.util.RuntimeUtil:java.util.List execForLines(java.nio.charset.Charset,java.lang.String[])"
        ]
    },
    "cn.hutool.core.util.RuntimeUtil:java.lang.Process exec(java.lang.String[],java.io.File,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.URLUtil:java.io.InputStream getStream(java.net.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.resource.UrlResource:java.io.InputStream getStream()",
            "cn.hutool.core.util.URLUtil:java.io.BufferedReader getReader(java.net.URL,java.nio.charset.Charset)"
        ]
    },
    "cn.hutool.core.util.URLUtil:java.util.jar.JarFile getJarFile(java.net.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.lang.ClassScaner:java.util.Set scan()"
        ]
    },
    "cn.hutool.extra.servlet.ServletUtil:java.lang.String getBody(javax.servlet.ServletRequest)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.extra.servlet.ServletUtil:byte[] getBodyBytes(javax.servlet.ServletRequest)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.extra.servlet.ServletUtil:java.io.PrintWriter getWriter(javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.extra.template.engine.beetl.BeetlEngine:org.beetl.core.GroupTemplate createGroupTemplate(org.beetl.core.ResourceLoader)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.template.engine.beetl.BeetlEngine:org.beetl.core.GroupTemplate createEngine(cn.hutool.extra.template.TemplateConfig)"
        ]
    },
    "cn.hutool.extra.template.engine.beetl.BeetlUtil:org.beetl.core.GroupTemplate createGroupTemplate(org.beetl.core.ResourceLoader)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.template.engine.beetl.BeetlUtil:org.beetl.core.GroupTemplate createStrGroupTemplate()",
            "cn.hutool.extra.template.engine.beetl.BeetlUtil:org.beetl.core.GroupTemplate createWebAppGroupTemplate()",
            "cn.hutool.extra.template.engine.beetl.BeetlUtil:org.beetl.core.GroupTemplate createClassPathGroupTemplate(java.lang.String)",
            "cn.hutool.extra.template.engine.beetl.BeetlUtil:org.beetl.core.GroupTemplate createFileGroupTemplate(java.lang.String,java.nio.charset.Charset)"
        ]
    },
    "cn.hutool.extra.template.engine.freemarker.FreemarkerEngine:cn.hutool.extra.template.Template getTemplate(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.extra.template.engine.freemarker.FreemarkerTemplate:void render(java.util.Map,java.io.Writer)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.template.AbstractTemplate:java.lang.String render(java.util.Map)",
            "cn.hutool.extra.template.engine.freemarker.FreemarkerTemplate:void render(java.util.Map,java.io.OutputStream)"
        ]
    },
    "cn.hutool.poi.excel.ExcelUtil:boolean isXls(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.poi.excel.WorkbookUtil:void writeBook(org.apache.poi.ss.usermodel.Workbook,java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.watch.WatchMonitor:cn.hutool.core.io.watch.WatchMonitor createAll(java.net.URL,cn.hutool.core.io.watch.Watcher)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.asymmetric.AsymmetricCrypto:cn.hutool.crypto.asymmetric.AsymmetricCrypto init(java.lang.String,java.security.PrivateKey,java.security.PublicKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.asymmetric.AsymmetricCrypto:cn.hutool.crypto.asymmetric.BaseAsymmetric init(java.lang.String,java.security.PrivateKey,java.security.PublicKey)"
        ]
    },
    "cn.hutool.crypto.asymmetric.AsymmetricCrypto:byte[] encrypt(byte[],cn.hutool.crypto.asymmetric.KeyType)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.asymmetric.AsymmetricCrypto:java.lang.String encryptHex(byte[],cn.hutool.crypto.asymmetric.KeyType)",
            "cn.hutool.crypto.asymmetric.AsymmetricCrypto:java.lang.String encryptBase64(byte[],cn.hutool.crypto.asymmetric.KeyType)",
            "cn.hutool.crypto.asymmetric.AsymmetricCrypto:byte[] encrypt(java.lang.String,java.lang.String,cn.hutool.crypto.asymmetric.KeyType)",
            "cn.hutool.crypto.asymmetric.AsymmetricCrypto:byte[] encrypt(java.lang.String,java.nio.charset.Charset,cn.hutool.crypto.asymmetric.KeyType)",
            "cn.hutool.crypto.asymmetric.AsymmetricCrypto:byte[] encrypt(java.lang.String,cn.hutool.crypto.asymmetric.KeyType)",
            "cn.hutool.crypto.asymmetric.AsymmetricCrypto:byte[] encrypt(java.io.InputStream,cn.hutool.crypto.asymmetric.KeyType)",
            "cn.hutool.crypto.asymmetric.RSA:byte[] encrypt(byte[],cn.hutool.crypto.asymmetric.KeyType)"
        ]
    },
    "cn.hutool.crypto.asymmetric.AsymmetricCrypto:byte[] decrypt(byte[],cn.hutool.crypto.asymmetric.KeyType)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.asymmetric.AsymmetricCrypto:byte[] decrypt(java.io.InputStream,cn.hutool.crypto.asymmetric.KeyType)",
            "cn.hutool.crypto.asymmetric.AsymmetricCrypto:byte[] decryptFromHex(java.lang.String,cn.hutool.crypto.asymmetric.KeyType)",
            "cn.hutool.crypto.asymmetric.AsymmetricCrypto:byte[] decryptFromBase64(java.lang.String,cn.hutool.crypto.asymmetric.KeyType)",
            "cn.hutool.crypto.asymmetric.AsymmetricCrypto:byte[] decryptFromBcd(java.lang.String,cn.hutool.crypto.asymmetric.KeyType,java.nio.charset.Charset)",
            "cn.hutool.crypto.asymmetric.RSA:byte[] decrypt(byte[],cn.hutool.crypto.asymmetric.KeyType)"
        ]
    },
    "cn.hutool.crypto.asymmetric.Sign:cn.hutool.crypto.asymmetric.Sign init(java.lang.String,java.security.PrivateKey,java.security.PublicKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.asymmetric.Sign:cn.hutool.crypto.asymmetric.BaseAsymmetric init(java.lang.String,java.security.PrivateKey,java.security.PublicKey)"
        ]
    },
    "cn.hutool.crypto.asymmetric.Sign:byte[] sign(byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.asymmetric.Sign:boolean verify(byte[],byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.digest.Digester:cn.hutool.crypto.digest.Digester init(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.digest.Digester:void <init>(java.lang.String)"
        ]
    },
    "cn.hutool.crypto.digest.Digester:byte[] digest(java.io.InputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.digest.Digester:byte[] digest(java.io.InputStream)",
            "cn.hutool.crypto.digest.Digester:java.lang.String digestHex(java.io.InputStream,int)"
        ]
    },
    "cn.hutool.crypto.digest.HMac:cn.hutool.crypto.digest.HMac init(java.lang.String,javax.crypto.SecretKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.digest.HMac:void <init>(cn.hutool.crypto.digest.HmacAlgorithm,javax.crypto.SecretKey)",
            "cn.hutool.crypto.digest.HMac:cn.hutool.crypto.digest.HMac init(java.lang.String,byte[])"
        ]
    },
    "cn.hutool.crypto.digest.HMac:byte[] digest(java.io.InputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.digest.HMac:byte[] digest(java.io.InputStream)",
            "cn.hutool.crypto.digest.HMac:java.lang.String digestHex(java.io.InputStream,int)"
        ]
    },
    "cn.hutool.crypto.SecureUtil:javax.crypto.SecretKey generateKey(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.SecureUtil:javax.crypto.SecretKey generateKey(java.lang.String)"
        ]
    },
    "cn.hutool.crypto.SecureUtil:javax.crypto.SecretKey generateDESKey(java.lang.String,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.SecureUtil:javax.crypto.SecretKey generateKey(java.lang.String,byte[])"
        ]
    },
    "cn.hutool.crypto.SecureUtil:javax.crypto.SecretKey generateKey(java.lang.String,java.security.spec.KeySpec)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.SecureUtil:javax.crypto.SecretKey generateDESKey(java.lang.String,byte[])",
            "cn.hutool.crypto.SecureUtil:javax.crypto.SecretKey generatePBEKey(java.lang.String,char[])"
        ]
    },
    "cn.hutool.crypto.SecureUtil:java.security.PrivateKey generatePrivateKey(java.lang.String,java.security.spec.KeySpec)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.asymmetric.RSA:java.security.PrivateKey generatePrivateKey(java.math.BigInteger,java.math.BigInteger)",
            "cn.hutool.crypto.SecureUtil:java.security.PrivateKey generatePrivateKey(java.lang.String,byte[])"
        ]
    },
    "cn.hutool.crypto.SecureUtil:java.security.PrivateKey generatePrivateKey(java.security.KeyStore,java.lang.String,char[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.SecureUtil:java.security.PublicKey generatePublicKey(java.lang.String,java.security.spec.KeySpec)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.asymmetric.RSA:java.security.PublicKey generatePublicKey(java.math.BigInteger,java.math.BigInteger)",
            "cn.hutool.crypto.SecureUtil:java.security.PublicKey generatePublicKey(java.lang.String,byte[])"
        ]
    },
    "cn.hutool.crypto.SecureUtil:java.security.KeyPair generateKeyPair(java.lang.String,int,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.SecureUtil:java.security.KeyPair generateKeyPair(java.lang.String)",
            "cn.hutool.crypto.SecureUtil:java.security.KeyPair generateKeyPair(java.lang.String,int)"
        ]
    },
    "cn.hutool.crypto.SecureUtil:java.security.KeyStore readKeyStore(java.lang.String,java.io.InputStream,char[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.SecureUtil:java.security.KeyStore readJKSKeyStore(java.io.InputStream,char[])"
        ]
    },
    "cn.hutool.crypto.SecureUtil:java.security.cert.Certificate readCertificate(java.lang.String,java.io.InputStream,char[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.SecureUtil:java.security.cert.Certificate readX509Certificate(java.io.InputStream,char[])"
        ]
    },
    "cn.hutool.crypto.SecureUtil:java.security.cert.Certificate getCertificate(java.security.KeyStore,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.symmetric.SymmetricCrypto:cn.hutool.crypto.symmetric.SymmetricCrypto init(java.lang.String,javax.crypto.SecretKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.symmetric.SymmetricCrypto:void <init>(java.lang.String,javax.crypto.SecretKey,java.security.spec.AlgorithmParameterSpec)"
        ]
    },
    "cn.hutool.crypto.symmetric.SymmetricCrypto:byte[] encrypt(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.symmetric.SymmetricCrypto:java.lang.String encryptHex(byte[])",
            "cn.hutool.crypto.symmetric.SymmetricCrypto:java.lang.String encryptBase64(byte[])",
            "cn.hutool.crypto.symmetric.SymmetricCrypto:byte[] encrypt(java.lang.String,java.lang.String)",
            "cn.hutool.crypto.symmetric.SymmetricCrypto:byte[] encrypt(java.lang.String)",
            "cn.hutool.crypto.symmetric.SymmetricCrypto:byte[] encrypt(java.io.InputStream)"
        ]
    },
    "cn.hutool.crypto.symmetric.SymmetricCrypto:byte[] decrypt(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.symmetric.SymmetricCrypto:java.lang.String decryptStr(byte[],java.nio.charset.Charset)",
            "cn.hutool.crypto.symmetric.SymmetricCrypto:byte[] decrypt(java.lang.String)",
            "cn.hutool.crypto.symmetric.SymmetricCrypto:byte[] decryptFromBase64(java.lang.String)",
            "cn.hutool.crypto.symmetric.SymmetricCrypto:java.lang.String decryptStrFromBase64(java.lang.String,java.nio.charset.Charset)",
            "cn.hutool.crypto.symmetric.SymmetricCrypto:byte[] decrypt(java.io.InputStream)"
        ]
    },
    "cn.hutool.db.DbUtil:javax.sql.DataSource getJndiDs(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.DbUtil:javax.sql.DataSource getJndiDsWithLog(java.lang.String)",
            "cn.hutool.db.ds.jndi.JndiDSFactory:javax.sql.DataSource createDataSource(java.lang.String)"
        ]
    },
    "cn.hutool.extra.ftp.Ftp:boolean cd(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.ftp.Ftp:boolean mkdir(java.lang.String)",
            "cn.hutool.extra.ftp.Ftp:boolean del(java.lang.String,java.lang.String)",
            "cn.hutool.extra.ftp.Ftp:boolean upload(java.lang.String,java.lang.String,java.io.InputStream)",
            "cn.hutool.extra.ftp.Ftp:void download(java.lang.String,java.lang.String,java.io.OutputStream)"
        ]
    },
    "cn.hutool.extra.ftp.Ftp:boolean existFile(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.ftp.Ftp:boolean mkdir(java.lang.String)"
        ]
    },
    "cn.hutool.extra.ftp.Ftp:boolean del(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.extra.ftp.Ftp:boolean upload(java.lang.String,java.lang.String,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.ftp.Ftp:boolean upload(java.lang.String,java.io.File)"
        ]
    },
    "cn.hutool.extra.ftp.Ftp:void download(java.lang.String,java.lang.String,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.extra.ftp.Ftp:void download(java.lang.String,java.lang.String,java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.ftp.Ftp:void download(java.lang.String,java.lang.String,java.io.File)"
        ]
    },
    "cn.hutool.extra.ftp.Ftp:boolean makeDirectory(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.ftp.Ftp:boolean mkdir(java.lang.String)"
        ]
    },
    "cn.hutool.extra.mail.InternalMailUtil:javax.mail.internet.InternetAddress parseFirstAddress(java.lang.String,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.mail.Mail:javax.mail.internet.MimeMessage buildMsg()",
            "cn.hutool.extra.mail.MailAccount:cn.hutool.extra.mail.MailAccount defaultIfEmpty()"
        ]
    },
    "cn.hutool.extra.mail.InternalMailUtil:javax.mail.internet.InternetAddress[] parseAddress(java.lang.String,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.mail.InternalMailUtil:javax.mail.internet.InternetAddress[] parseAddressFromStrs(java.lang.String[],java.nio.charset.Charset)",
            "cn.hutool.extra.mail.InternalMailUtil:javax.mail.internet.InternetAddress parseFirstAddress(java.lang.String,java.nio.charset.Charset)"
        ]
    },
    "cn.hutool.extra.mail.Mail:cn.hutool.extra.mail.Mail send()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.mail.MailUtil:void send(cn.hutool.extra.mail.MailAccount,java.util.Collection,java.lang.String,java.lang.String,boolean,java.io.File[])",
            "cn.hutool.extra.mail.MailUtil:void send(cn.hutool.extra.mail.MailAccount,java.util.Collection,java.util.Collection,java.util.Collection,java.lang.String,java.lang.String,boolean,java.io.File[])"
        ]
    },
    "cn.hutool.extra.ssh.JschUtil:com.jcraft.jsch.Session openSession(java.lang.String,int,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.ssh.JschUtil:com.jcraft.jsch.Session getSession(java.lang.String,int,java.lang.String,java.lang.String)",
            "cn.hutool.extra.ssh.JschUtil:int openAndBindPortToLocal(cn.hutool.extra.ssh.Connector,java.lang.String,int)"
        ]
    },
    "cn.hutool.extra.ssh.JschUtil:boolean unBindPort(com.jcraft.jsch.Session,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.extra.ssh.JschUtil:com.jcraft.jsch.ChannelSftp openSftp(com.jcraft.jsch.Session)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.ssh.Sftp:void <init>(java.lang.String,int,java.lang.String,java.lang.String)",
            "cn.hutool.extra.ssh.Sftp:void <init>(com.jcraft.jsch.Session)"
        ]
    },
    "cn.hutool.extra.ssh.JschUtil:com.jcraft.jsch.ChannelShell openShell(com.jcraft.jsch.Session)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.extra.ssh.Sftp:java.lang.String pwd()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.extra.ssh.Sftp:java.lang.String home()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.extra.ssh.Sftp:java.util.List ls(java.lang.String,cn.hutool.core.lang.Filter)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.ssh.Sftp:java.util.List ls(java.lang.String)",
            "cn.hutool.extra.ssh.Sftp:java.util.List lsDirs(java.lang.String)",
            "cn.hutool.extra.ssh.Sftp:java.util.List lsFiles(java.lang.String)"
        ]
    },
    "cn.hutool.extra.ssh.Sftp:void mkDirs(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.extra.ssh.Sftp:cn.hutool.extra.ssh.Sftp delFile(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.ssh.Sftp:boolean delDir(java.lang.String)"
        ]
    },
    "cn.hutool.extra.ssh.Sftp:cn.hutool.extra.ssh.Sftp put(java.lang.String,java.lang.String,cn.hutool.extra.ssh.Sftp$Mode)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.ssh.Sftp:cn.hutool.extra.ssh.Sftp put(java.lang.String,java.lang.String)"
        ]
    },
    "cn.hutool.extra.ssh.Sftp:cn.hutool.extra.ssh.Sftp get(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.json.JSONTokener:char next()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.json.JSONTokener:boolean more()",
            "cn.hutool.json.JSONTokener:char next(char)",
            "cn.hutool.json.JSONTokener:java.lang.String next(int)",
            "cn.hutool.json.JSONTokener:char nextClean()",
            "cn.hutool.json.JSONTokener:java.lang.String nextString(char)",
            "cn.hutool.json.JSONTokener:java.lang.String nextTo(char)",
            "cn.hutool.json.JSONTokener:java.lang.String nextTo(java.lang.String)",
            "cn.hutool.json.JSONTokener:java.lang.Object nextValue()",
            "cn.hutool.json.JSONTokener:char skipTo(char)",
            "cn.hutool.json.XML:boolean parse(cn.hutool.json.XMLTokener,cn.hutool.json.JSONObject,java.lang.String,boolean)",
            "cn.hutool.json.XMLTokener:java.lang.String nextCDATA()",
            "cn.hutool.json.XMLTokener:java.lang.Object nextContent()",
            "cn.hutool.json.XMLTokener:java.lang.Object nextEntity(char)",
            "cn.hutool.json.XMLTokener:java.lang.Object nextMeta()",
            "cn.hutool.json.XMLTokener:java.lang.Object nextToken()",
            "cn.hutool.json.XMLTokener:boolean skipPast(java.lang.String)"
        ]
    },
    "cn.hutool.json.JSONTokener:char skipTo(char)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.poi.excel.sax.Excel03SaxReader:cn.hutool.poi.excel.sax.Excel03SaxReader read(java.io.File,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.poi.excel.ExcelUtil:cn.hutool.poi.excel.sax.Excel03SaxReader read03BySax(java.io.File,int,cn.hutool.poi.excel.sax.handler.RowHandler)",
            "cn.hutool.poi.excel.sax.Excel03SaxReader:java.lang.Object read(java.io.File,int)"
        ]
    },
    "cn.hutool.poi.excel.sax.Excel03SaxReader:cn.hutool.poi.excel.sax.Excel03SaxReader read(java.io.InputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.poi.excel.ExcelUtil:cn.hutool.poi.excel.sax.Excel03SaxReader read03BySax(java.io.InputStream,int,cn.hutool.poi.excel.sax.handler.RowHandler)",
            "cn.hutool.poi.excel.sax.Excel03SaxReader:java.lang.Object read(java.io.InputStream,int)"
        ]
    },
    "cn.hutool.poi.excel.sax.Excel03SaxReader:cn.hutool.poi.excel.sax.Excel03SaxReader read(org.apache.poi.poifs.filesystem.POIFSFileSystem,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.poi.excel.sax.Excel03SaxReader:cn.hutool.poi.excel.sax.Excel03SaxReader read(java.io.File,int)",
            "cn.hutool.poi.excel.sax.Excel03SaxReader:cn.hutool.poi.excel.sax.Excel03SaxReader read(java.io.InputStream,int)"
        ]
    },
    "cn.hutool.poi.excel.WorkbookUtil:org.apache.poi.ss.usermodel.Workbook createBook(java.io.File,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.poi.excel.WorkbookUtil:org.apache.poi.ss.usermodel.Workbook createBook(java.lang.String)",
            "cn.hutool.poi.excel.WorkbookUtil:org.apache.poi.ss.usermodel.Workbook createBook(java.io.File)"
        ]
    },
    "cn.hutool.core.lang.caller.CallerUtil:java.lang.Class getCaller()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.lang.caller.CallerUtil:java.lang.Class getCallerCaller()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.LogFactory:cn.hutool.log.Log get()",
            "cn.hutool.log.StaticLog:void trace(java.lang.String,java.lang.Object[])",
            "cn.hutool.log.StaticLog:void debug(java.lang.String,java.lang.Object[])",
            "cn.hutool.log.StaticLog:void info(java.lang.String,java.lang.Object[])",
            "cn.hutool.log.StaticLog:void warn(java.lang.String,java.lang.Object[])",
            "cn.hutool.log.StaticLog:void warn(java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.log.StaticLog:void error(java.lang.Throwable)",
            "cn.hutool.log.StaticLog:void error(java.lang.String,java.lang.Object[])",
            "cn.hutool.log.StaticLog:void error(java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.log.StaticLog:boolean log(cn.hutool.log.level.Level,java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.log.StaticLog:cn.hutool.log.Log get()"
        ]
    },
    "cn.hutool.core.lang.caller.CallerUtil:java.lang.Class getCaller(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.bean.BeanDesc$PropDesc:java.lang.Object getValue(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.bean.BeanDesc$PropDesc:cn.hutool.core.bean.BeanDesc$PropDesc setValue(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.resource.FileResource:void <init>(java.io.File,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.resource.FileResource:void <init>(java.io.File)",
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest form(java.lang.String,java.io.File,java.lang.String)"
        ]
    },
    "cn.hutool.core.io.resource.UrlResource:void <init>(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.XmlUtil:org.w3c.dom.Document readXML(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.XmlUtil:org.w3c.dom.Document readXML(java.io.File)"
        ]
    },
    "cn.hutool.core.util.XmlUtil:org.w3c.dom.Document readXML(java.io.Reader)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.XmlUtil:org.w3c.dom.Document parseXml(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.XmlUtil:org.w3c.dom.Document readXML(java.lang.String)",
            "cn.hutool.core.util.XmlUtil:java.util.Map xmlToMap(java.lang.String,java.util.Map)"
        ]
    },
    "cn.hutool.core.util.XmlUtil:java.lang.String toStr(org.w3c.dom.Document)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.XmlUtil:java.lang.String mapToXmlStr(java.util.Map,java.lang.String)"
        ]
    },
    "cn.hutool.core.util.XmlUtil:void write(org.w3c.dom.Node,java.io.Writer,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.XmlUtil:java.lang.String toStr(org.w3c.dom.Document,boolean)",
            "cn.hutool.core.util.XmlUtil:void toFile(org.w3c.dom.Document,java.lang.String,java.lang.String)"
        ]
    },
    "cn.hutool.core.util.XmlUtil:void write(org.w3c.dom.Node,java.io.OutputStream,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.XmlUtil:java.lang.String toStr(org.w3c.dom.Document,java.lang.String,boolean)"
        ]
    },
    "cn.hutool.core.util.XmlUtil:org.w3c.dom.Document createXml()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.XmlUtil:org.w3c.dom.Document createXml(java.lang.String)",
            "cn.hutool.core.util.XmlUtil:org.w3c.dom.Document mapToXml(java.util.Map,java.lang.String)"
        ]
    },
    "cn.hutool.core.io.BufferUtil:java.lang.String readLine(java.nio.ByteBuffer,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.file.FileWriter:void <init>(java.io.File,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.file.FileWriter:cn.hutool.core.io.file.FileWriter create(java.io.File,java.nio.charset.Charset)",
            "cn.hutool.core.io.file.FileWriter:void <init>(java.io.File,java.lang.String)",
            "cn.hutool.core.io.file.FileWriter:void <init>(java.lang.String,java.nio.charset.Charset)",
            "cn.hutool.core.io.file.FileWriter:void <init>(java.lang.String,java.lang.String)",
            "cn.hutool.core.io.file.FileWriter:void <init>(java.io.File)"
        ]
    },
    "cn.hutool.core.io.resource.MultiResource:java.io.InputStream getStream()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.resource.MultiResource:java.io.InputStream getStream()",
            "cn.hutool.http.HttpRequest:void appendPart(java.lang.String,cn.hutool.core.io.resource.Resource,java.io.OutputStream)"
        ]
    },
    "cn.hutool.core.util.StrUtil:java.lang.String maxLength(java.lang.CharSequence,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.collection.LineIter:void <init>(java.io.InputStream,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.IoUtil:long copy(java.io.InputStream,java.io.OutputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.IoUtil:long copy(java.io.InputStream,java.io.OutputStream)",
            "cn.hutool.extra.servlet.ServletUtil:void write(javax.servlet.http.HttpServletResponse,java.io.InputStream,int)"
        ]
    },
    "cn.hutool.core.io.IoUtil:long copyByNIO(java.io.InputStream,java.io.OutputStream,int,cn.hutool.core.io.StreamProgress)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HttpResponse:long writeBody(java.io.OutputStream,boolean,cn.hutool.core.io.StreamProgress)"
        ]
    },
    "cn.hutool.core.bean.DynaBean:void <init>(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.BeanUtil:cn.hutool.core.bean.DynaBean createDynaBean(java.lang.Object)",
            "cn.hutool.core.bean.DynaBean:cn.hutool.core.bean.DynaBean create(java.lang.Object)",
            "cn.hutool.core.bean.DynaBean:void <init>(java.lang.Class,java.lang.Object[])"
        ]
    },
    "cn.hutool.core.io.watch.watchers.DelayWatcher:void <init>(cn.hutool.core.io.watch.Watcher,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.NumberUtil:boolean isGreater(java.math.BigDecimal,java.math.BigDecimal)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.NumberUtil:boolean isGreaterOrEqual(java.math.BigDecimal,java.math.BigDecimal)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.NumberUtil:boolean isLess(java.math.BigDecimal,java.math.BigDecimal)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.NumberUtil:boolean isLessOrEqual(java.math.BigDecimal,java.math.BigDecimal)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.NumberUtil:boolean equals(java.math.BigDecimal,java.math.BigDecimal)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ReflectUtil:java.lang.reflect.Constructor[] getConstructorsDirectly(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ReflectUtil:java.lang.reflect.Constructor[] getConstructors(java.lang.Class)"
        ]
    },
    "cn.hutool.core.util.ReflectUtil:java.lang.reflect.Field[] getFieldsDirectly(java.lang.Class,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ReflectUtil:java.lang.reflect.Field[] getFields(java.lang.Class)"
        ]
    },
    "cn.hutool.core.util.ReflectUtil:java.lang.reflect.Method[] getMethodsDirectly(java.lang.Class,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ReflectUtil:java.lang.reflect.Method[] getMethods(java.lang.Class)"
        ]
    },
    "cn.hutool.core.text.csv.CsvReader:cn.hutool.core.text.csv.CsvData read(java.io.File,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.text.csv.CsvReader:cn.hutool.core.text.csv.CsvData read(java.io.File)"
        ]
    },
    "cn.hutool.core.text.csv.CsvReader:cn.hutool.core.text.csv.CsvData read(java.nio.file.Path)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.NumberUtil:java.math.BigDecimal div(java.lang.String,java.lang.String,int,java.math.RoundingMode)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.NumberUtil:java.math.BigDecimal div(java.lang.String,java.lang.String,int)",
            "cn.hutool.core.util.NumberUtil:double div(float,float,int,java.math.RoundingMode)",
            "cn.hutool.core.util.NumberUtil:double div(float,double,int,java.math.RoundingMode)",
            "cn.hutool.core.util.NumberUtil:double div(double,float,int,java.math.RoundingMode)",
            "cn.hutool.core.util.NumberUtil:double div(double,double,int,java.math.RoundingMode)",
            "cn.hutool.core.util.NumberUtil:java.math.BigDecimal div(java.lang.Number,java.lang.Number,int,java.math.RoundingMode)"
        ]
    },
    "cn.hutool.poi.excel.ExcelReader:void <init>(org.apache.poi.ss.usermodel.Sheet)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.poi.excel.ExcelReader:void <init>(org.apache.poi.ss.usermodel.Workbook,int)",
            "cn.hutool.poi.excel.ExcelReader:void <init>(org.apache.poi.ss.usermodel.Workbook,java.lang.String)"
        ]
    },
    "cn.hutool.poi.excel.ExcelWriter:void <init>(org.apache.poi.ss.usermodel.Sheet)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.poi.excel.ExcelReader:cn.hutool.poi.excel.ExcelWriter getWriter()",
            "cn.hutool.poi.excel.ExcelWriter:void <init>(org.apache.poi.ss.usermodel.Workbook,java.lang.String)"
        ]
    },
    "cn.hutool.core.util.NumberUtil:java.math.BigDecimal round(java.lang.String,int,java.math.RoundingMode)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.NumberUtil:java.math.BigDecimal round(java.lang.String,int)",
            "cn.hutool.core.util.NumberUtil:java.math.BigDecimal round(double,int,java.math.RoundingMode)",
            "cn.hutool.core.util.NumberUtil:java.lang.String roundStr(java.lang.String,int,java.math.RoundingMode)"
        ]
    },
    "cn.hutool.crypto.symmetric.SymmetricCrypto:void <init>(java.lang.String,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.symmetric.SymmetricCrypto:void <init>(java.lang.String)",
            "cn.hutool.crypto.symmetric.SymmetricCrypto:void <init>(cn.hutool.crypto.symmetric.SymmetricAlgorithm,byte[])"
        ]
    },
    "cn.hutool.aop.aspects.TimeIntervalAspect:boolean after(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.aop.interceptor.CglibInterceptor:java.lang.Object intercept(java.lang.Object,java.lang.reflect.Method,java.lang.Object[],net.sf.cglib.proxy.MethodProxy)",
            "cn.hutool.aop.interceptor.JdkInterceptor:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])"
        ]
    },
    "cn.hutool.system.SystemUtil:java.lang.String get(java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.system.JavaInfo:void <init>()",
            "cn.hutool.system.JavaRuntimeInfo:void <init>()",
            "cn.hutool.system.JavaRuntimeInfo:java.lang.String[] getClassPathArray()",
            "cn.hutool.system.JavaRuntimeInfo:java.lang.String[] getLibraryPathArray()",
            "cn.hutool.system.JavaRuntimeInfo:java.lang.String getProtocolPackages()",
            "cn.hutool.system.JavaSpecInfo:void <init>()",
            "cn.hutool.system.JvmInfo:void <init>()",
            "cn.hutool.system.JvmSpecInfo:void <init>()",
            "cn.hutool.system.OsInfo:void <init>()",
            "cn.hutool.system.SystemUtil:java.lang.String get(java.lang.String,java.lang.String)",
            "cn.hutool.system.UserInfo:void <init>()"
        ]
    },
    "cn.hutool.crypto.symmetric.AES:void <init>(cn.hutool.crypto.Mode,cn.hutool.crypto.Padding,javax.crypto.SecretKey)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.symmetric.AES:void <init>(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.symmetric.AES:void <init>(cn.hutool.crypto.Mode,cn.hutool.crypto.Padding)"
        ]
    },
    "cn.hutool.crypto.symmetric.AES:void <init>(cn.hutool.crypto.Mode,cn.hutool.crypto.Padding,byte[],byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.symmetric.AES:void <init>(cn.hutool.crypto.Mode,cn.hutool.crypto.Padding,byte[])"
        ]
    },
    "cn.hutool.crypto.symmetric.DES:void <init>(cn.hutool.crypto.Mode,cn.hutool.crypto.Padding,javax.crypto.SecretKey)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.symmetric.DES:void <init>(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.symmetric.DES:void <init>(cn.hutool.crypto.Mode,cn.hutool.crypto.Padding)"
        ]
    },
    "cn.hutool.crypto.symmetric.DES:void <init>(cn.hutool.crypto.Mode,cn.hutool.crypto.Padding,byte[],byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.symmetric.DES:void <init>(cn.hutool.crypto.Mode,cn.hutool.crypto.Padding,byte[])"
        ]
    },
    "cn.hutool.crypto.symmetric.DESede:void <init>(cn.hutool.crypto.Mode,cn.hutool.crypto.Padding,javax.crypto.SecretKey)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.symmetric.DESede:void <init>(cn.hutool.crypto.Mode,cn.hutool.crypto.Padding,byte[],byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.symmetric.DESede:void <init>(cn.hutool.crypto.Mode,cn.hutool.crypto.Padding,byte[])"
        ]
    },
    "cn.hutool.crypto.symmetric.DESede:void <init>(java.lang.String,java.lang.String,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.symmetric.DESede:void <init>(java.lang.String,java.lang.String)"
        ]
    },
    "cn.hutool.db.Entity:java.sql.RowId getRowId()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.extra.ftp.Ftp:void <init>(java.lang.String,int,java.lang.String,java.lang.String,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.ftp.Ftp:void <init>(java.lang.String,int,java.lang.String,java.lang.String)"
        ]
    },
    "cn.hutool.extra.mail.Mail:cn.hutool.extra.mail.Mail doSend()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.mail.Mail:cn.hutool.extra.mail.Mail send()"
        ]
    },
    "cn.hutool.extra.servlet.multipart.UploadFileHeader:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.servlet.multipart.MultipartRequestInputStream:cn.hutool.extra.servlet.multipart.UploadFileHeader readDataHeader(java.lang.String)"
        ]
    },
    "cn.hutool.http.HttpUtil:java.lang.String encodeParams(java.lang.String,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HttpUtil:java.lang.String urlWithForm(java.lang.String,java.util.Map,java.nio.charset.Charset,boolean)",
            "cn.hutool.http.HttpUtil:java.lang.String urlWithForm(java.lang.String,java.lang.String,java.nio.charset.Charset,boolean)"
        ]
    },
    "cn.hutool.log.dialect.commons.ApacheCommonsLog4JLog:void log(cn.hutool.log.level.Level,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.sql.SqlLog:void log(java.lang.String,java.lang.Object)"
        ]
    },
    "cn.hutool.log.dialect.jdk.JdkLog:void log(cn.hutool.log.level.Level,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.sql.SqlLog:void log(java.lang.String,java.lang.Object)"
        ]
    },
    "cn.hutool.log.dialect.jdk.JdkLog:void trace(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.StaticLog:void trace(cn.hutool.log.Log,java.lang.String,java.lang.Object[])"
        ]
    },
    "cn.hutool.log.dialect.jdk.JdkLog:void trace(java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.AbstractLog:void trace(java.lang.Throwable)"
        ]
    },
    "cn.hutool.log.dialect.jdk.JdkLog:void debug(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.DbUtil:void setShowSqlGlobal(cn.hutool.setting.Setting)",
            "cn.hutool.db.ds.DSFactory:cn.hutool.db.ds.DSFactory create(cn.hutool.setting.Setting)",
            "cn.hutool.db.nosql.mongo.MongoDS:com.mongodb.MongoClientOptions$Builder buildMongoClientOptions(com.mongodb.MongoClientOptions$Builder,java.lang.String)",
            "cn.hutool.extra.servlet.multipart.UploadFile:boolean processStream(cn.hutool.extra.servlet.multipart.MultipartRequestInputStream)",
            "cn.hutool.http.HttpConnection:cn.hutool.http.HttpConnection setCookie(java.lang.String)",
            "cn.hutool.log.GlobalLogFactory:cn.hutool.log.LogFactory set(cn.hutool.log.LogFactory)",
            "cn.hutool.log.LogFactory:cn.hutool.log.LogFactory create()",
            "cn.hutool.log.StaticLog:void debug(cn.hutool.log.Log,java.lang.String,java.lang.Object[])",
            "cn.hutool.setting.AbsSetting$1:java.lang.Object value(java.lang.String,java.lang.reflect.Type)",
            "cn.hutool.setting.AbsSetting:java.lang.String getWithLog(java.lang.String)",
            "cn.hutool.setting.AbsSetting:java.lang.String getByGroupWithLog(java.lang.String,java.lang.String)",
            "cn.hutool.setting.dialect.Props:void load(cn.hutool.core.io.resource.Resource)",
            "cn.hutool.setting.SettingLoader:boolean load(cn.hutool.core.io.resource.UrlResource)",
            "cn.hutool.cron.CronTimer:void run()"
        ]
    },
    "cn.hutool.log.dialect.jdk.JdkLog:void debug(java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.AbstractLog:void debug(java.lang.Throwable)"
        ]
    },
    "cn.hutool.log.dialect.jdk.JdkLog:void info(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.nosql.mongo.MongoDS:void initSingle()",
            "cn.hutool.db.nosql.mongo.MongoDS:void initCloud()",
            "cn.hutool.extra.servlet.multipart.UploadSetting:void load(java.lang.String)",
            "cn.hutool.log.StaticLog:void info(cn.hutool.log.Log,java.lang.String,java.lang.Object[])"
        ]
    },
    "cn.hutool.log.dialect.jdk.JdkLog:void info(java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.AbstractLog:void info(java.lang.Throwable)"
        ]
    },
    "cn.hutool.log.dialect.jdk.JdkLog:void warn(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.DbUtil:void close(java.lang.Object[])"
        ]
    },
    "cn.hutool.log.dialect.jdk.JdkLog:void warn(java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.AbstractLog:void warn(java.lang.Throwable)",
            "cn.hutool.log.StaticLog:void warn(cn.hutool.log.Log,java.lang.Throwable,java.lang.String,java.lang.Object[])"
        ]
    },
    "cn.hutool.log.dialect.jdk.JdkLog:void error(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.log.dialect.jdk.JdkLog:void error(java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.DbUtil:javax.sql.DataSource getJndiDsWithLog(java.lang.String)",
            "cn.hutool.db.nosql.mongo.MongoDS:void initCloud()",
            "cn.hutool.log.AbstractLog:void error(java.lang.Throwable)",
            "cn.hutool.log.StaticLog:void error(cn.hutool.log.Log,java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.setting.dialect.Props:void load(cn.hutool.core.io.resource.Resource)",
            "cn.hutool.setting.SettingLoader:boolean load(cn.hutool.core.io.resource.UrlResource)"
        ]
    },
    "cn.hutool.log.dialect.log4j.Log4jLog:void log(cn.hutool.log.level.Level,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.sql.SqlLog:void log(java.lang.String,java.lang.Object)"
        ]
    },
    "cn.hutool.log.dialect.log4j2.Log4j2Log:void log(cn.hutool.log.level.Level,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.sql.SqlLog:void log(java.lang.String,java.lang.Object)"
        ]
    },
    "cn.hutool.log.dialect.slf4j.Slf4jLog:void log(cn.hutool.log.level.Level,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.sql.SqlLog:void log(java.lang.String,java.lang.Object)"
        ]
    },
    "cn.hutool.log.dialect.slf4j.Slf4jLog:boolean locationAwareLog(int,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.dialect.slf4j.Slf4jLog:void trace(java.lang.String,java.lang.Object[])",
            "cn.hutool.log.dialect.slf4j.Slf4jLog:void debug(java.lang.String,java.lang.Object[])",
            "cn.hutool.log.dialect.slf4j.Slf4jLog:void info(java.lang.String,java.lang.Object[])",
            "cn.hutool.log.dialect.slf4j.Slf4jLog:void warn(java.lang.String,java.lang.Object[])",
            "cn.hutool.log.dialect.slf4j.Slf4jLog:void error(java.lang.String,java.lang.Object[])"
        ]
    },
    "cn.hutool.log.dialect.tinylog.TinyLog:void trace(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.StaticLog:void trace(cn.hutool.log.Log,java.lang.String,java.lang.Object[])"
        ]
    },
    "cn.hutool.log.dialect.tinylog.TinyLog:void debug(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.DbUtil:void setShowSqlGlobal(cn.hutool.setting.Setting)",
            "cn.hutool.db.ds.DSFactory:cn.hutool.db.ds.DSFactory create(cn.hutool.setting.Setting)",
            "cn.hutool.db.nosql.mongo.MongoDS:com.mongodb.MongoClientOptions$Builder buildMongoClientOptions(com.mongodb.MongoClientOptions$Builder,java.lang.String)",
            "cn.hutool.extra.servlet.multipart.UploadFile:boolean processStream(cn.hutool.extra.servlet.multipart.MultipartRequestInputStream)",
            "cn.hutool.http.HttpConnection:cn.hutool.http.HttpConnection setCookie(java.lang.String)",
            "cn.hutool.log.GlobalLogFactory:cn.hutool.log.LogFactory set(cn.hutool.log.LogFactory)",
            "cn.hutool.log.LogFactory:cn.hutool.log.LogFactory create()",
            "cn.hutool.log.StaticLog:void debug(cn.hutool.log.Log,java.lang.String,java.lang.Object[])",
            "cn.hutool.setting.AbsSetting$1:java.lang.Object value(java.lang.String,java.lang.reflect.Type)",
            "cn.hutool.setting.AbsSetting:java.lang.String getWithLog(java.lang.String)",
            "cn.hutool.setting.AbsSetting:java.lang.String getByGroupWithLog(java.lang.String,java.lang.String)",
            "cn.hutool.setting.dialect.Props:void load(cn.hutool.core.io.resource.Resource)",
            "cn.hutool.setting.SettingLoader:boolean load(cn.hutool.core.io.resource.UrlResource)",
            "cn.hutool.cron.CronTimer:void run()"
        ]
    },
    "cn.hutool.log.dialect.tinylog.TinyLog:void info(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.nosql.mongo.MongoDS:void initSingle()",
            "cn.hutool.db.nosql.mongo.MongoDS:void initCloud()",
            "cn.hutool.extra.servlet.multipart.UploadSetting:void load(java.lang.String)",
            "cn.hutool.log.StaticLog:void info(cn.hutool.log.Log,java.lang.String,java.lang.Object[])"
        ]
    },
    "cn.hutool.log.dialect.tinylog.TinyLog:void warn(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.DbUtil:void close(java.lang.Object[])"
        ]
    },
    "cn.hutool.log.dialect.tinylog.TinyLog:void error(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.log.dialect.tinylog.TinyLog:void trace(java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.AbstractLog:void trace(java.lang.Throwable)"
        ]
    },
    "cn.hutool.log.dialect.tinylog.TinyLog:void debug(java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.AbstractLog:void debug(java.lang.Throwable)"
        ]
    },
    "cn.hutool.log.dialect.tinylog.TinyLog:void info(java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.AbstractLog:void info(java.lang.Throwable)"
        ]
    },
    "cn.hutool.log.dialect.tinylog.TinyLog:void warn(java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.AbstractLog:void warn(java.lang.Throwable)",
            "cn.hutool.log.StaticLog:void warn(cn.hutool.log.Log,java.lang.Throwable,java.lang.String,java.lang.Object[])"
        ]
    },
    "cn.hutool.log.dialect.tinylog.TinyLog:void error(java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.DbUtil:javax.sql.DataSource getJndiDsWithLog(java.lang.String)",
            "cn.hutool.db.nosql.mongo.MongoDS:void initCloud()",
            "cn.hutool.log.AbstractLog:void error(java.lang.Throwable)",
            "cn.hutool.log.StaticLog:void error(cn.hutool.log.Log,java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "cn.hutool.setting.dialect.Props:void load(cn.hutool.core.io.resource.Resource)",
            "cn.hutool.setting.SettingLoader:boolean load(cn.hutool.core.io.resource.UrlResource)"
        ]
    },
    "cn.hutool.cron.pattern.parser.DayOfWeekValueParser:int parse(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.cron.pattern.matcher.ValueMatcherBuilder:java.util.List parseStep(java.lang.String,cn.hutool.cron.pattern.parser.ValueParser)",
            "cn.hutool.cron.pattern.matcher.ValueMatcherBuilder:java.util.List parseRange(java.lang.String,int,cn.hutool.cron.pattern.parser.ValueParser)"
        ]
    },
    "cn.hutool.cron.pattern.parser.MonthValueParser:int parse(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.cron.pattern.matcher.ValueMatcherBuilder:java.util.List parseStep(java.lang.String,cn.hutool.cron.pattern.parser.ValueParser)",
            "cn.hutool.cron.pattern.matcher.ValueMatcherBuilder:java.util.List parseRange(java.lang.String,int,cn.hutool.cron.pattern.parser.ValueParser)"
        ]
    },
    "cn.hutool.cron.pattern.parser.DayOfMonthValueParser:int parse(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.cron.pattern.matcher.ValueMatcherBuilder:java.util.List parseStep(java.lang.String,cn.hutool.cron.pattern.parser.ValueParser)",
            "cn.hutool.cron.pattern.matcher.ValueMatcherBuilder:java.util.List parseRange(java.lang.String,int,cn.hutool.cron.pattern.parser.ValueParser)"
        ]
    },
    "cn.hutool.cron.Scheduler:cn.hutool.cron.Scheduler schedule(java.lang.String,cn.hutool.cron.pattern.CronPattern,cn.hutool.cron.task.Task)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.cron.Scheduler:cn.hutool.cron.Scheduler schedule(java.lang.String,java.lang.String,java.lang.Runnable)",
            "cn.hutool.cron.Scheduler:cn.hutool.cron.Scheduler schedule(java.lang.String,java.lang.String,cn.hutool.cron.task.Task)"
        ]
    },
    "cn.hutool.core.date.format.FastDateFormat$1:cn.hutool.core.date.format.FastDateFormat createInstance(java.lang.String,java.util.TimeZone,java.util.Locale)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.date.format.FastDateFormat$1:java.text.Format createInstance(java.lang.String,java.util.TimeZone,java.util.Locale)"
        ]
    },
    "cn.hutool.core.io.IoUtil:java.util.Collection readUtf8Lines(java.io.InputStream,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.IoUtil:java.util.Collection readLines(java.io.InputStream,java.lang.String,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.text.StrSpliter:java.util.List splitPath(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.text.StrSpliter:java.lang.String[] splitPathToArray(java.lang.String)"
        ]
    },
    "cn.hutool.core.text.StrSpliter:java.lang.String[] splitPathToArray(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.StrUtil:java.lang.String[] splitToArray(java.lang.CharSequence,char,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.StrUtil:java.lang.String[] splitToArray(java.lang.CharSequence,char)",
            "cn.hutool.setting.SettingLoader:boolean load(java.io.InputStream)"
        ]
    },
    "cn.hutool.core.util.StrUtil:java.util.List split(java.lang.CharSequence,char,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.StrUtil:java.util.List split(java.lang.CharSequence,char)",
            "cn.hutool.db.sql.Condition:void parseValue()",
            "cn.hutool.setting.SettingLoader:java.lang.String replaceVar(java.lang.String,java.lang.String)"
        ]
    },
    "cn.hutool.core.util.StrUtil:java.util.List splitTrim(java.lang.CharSequence,char,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.date.DateUtil:int timeToSecond(java.lang.String)",
            "cn.hutool.core.util.StrUtil:java.util.List splitTrim(java.lang.CharSequence,char)"
        ]
    },
    "cn.hutool.core.util.StrUtil:java.util.List split(java.lang.CharSequence,char,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.StrUtil:java.lang.String[] split(java.lang.CharSequence,java.lang.CharSequence)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.collection.CollUtil:java.util.Map zip(java.lang.String,java.lang.String,java.lang.String,boolean)",
            "cn.hutool.core.convert.impl.ArrayConverter:java.lang.Object convertObjectToArray(java.lang.Object)",
            "cn.hutool.setting.AbsSetting:java.lang.String[] getStrings(java.lang.String,java.lang.String,java.lang.String)",
            "cn.hutool.system.JavaRuntimeInfo:java.lang.String[] getClassPathArray()",
            "cn.hutool.system.JavaRuntimeInfo:java.lang.String[] getLibraryPathArray()",
            "cn.hutool.json.InternalJSONUtil:cn.hutool.json.JSONObject propertyPut(cn.hutool.json.JSONObject,java.lang.Object,java.lang.Object)"
        ]
    },
    "cn.hutool.core.util.StrUtil:java.util.List splitTrim(java.lang.CharSequence,java.lang.CharSequence,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.StrUtil:java.util.List splitTrim(java.lang.CharSequence,java.lang.CharSequence)"
        ]
    },
    "cn.hutool.db.sql.Condition:void <init>(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.sql.Condition:cn.hutool.db.sql.Condition parse(java.lang.String,java.lang.Object)",
            "cn.hutool.db.sql.SqlUtil:cn.hutool.db.sql.Condition[] buildConditions(cn.hutool.db.Entity)"
        ]
    },
    "cn.hutool.db.sql.Condition:void setValue(java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.sql.Condition:void setValue(java.lang.Object)"
        ]
    },
    "cn.hutool.setting.AbsSetting:java.lang.String[] getStrings(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.servlet.multipart.UploadSetting:void load(java.lang.String)"
        ]
    },
    "cn.hutool.setting.AbsSetting:java.lang.String[] getStringsWithDefault(java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.lang.PatternPool:java.util.regex.Pattern remove(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.http.GlobalHeaders:cn.hutool.http.GlobalHeaders removeHeader(cn.hutool.http.Header)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.http.HttpBase:java.lang.Object removeHeader(cn.hutool.http.Header)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.date.DateRange:void <init>(java.util.Date,java.util.Date,cn.hutool.core.date.DateField)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.date.DateUtil:cn.hutool.core.date.DateRange range(java.util.Date,java.util.Date,cn.hutool.core.date.DateField)"
        ]
    },
    "cn.hutool.db.handler.HandleHelper:cn.hutool.db.Entity handleRow(int,java.sql.ResultSetMetaData,java.sql.ResultSet)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.handler.EntityHandler:cn.hutool.db.Entity handle(java.sql.ResultSet)",
            "cn.hutool.db.handler.HandleHelper:java.lang.Object handleRow(int,java.sql.ResultSetMetaData,java.sql.ResultSet,java.lang.Object)",
            "cn.hutool.db.handler.HandleHelper:java.lang.Object handleRow(int,java.sql.ResultSetMetaData,java.sql.ResultSet,java.lang.Class)",
            "cn.hutool.db.handler.HandleHelper:cn.hutool.db.Entity handleRow(java.sql.ResultSet)",
            "cn.hutool.db.handler.HandleHelper:java.util.Collection handleRs(java.sql.ResultSet,java.util.Collection)"
        ]
    },
    "cn.hutool.core.text.StrBuilder:cn.hutool.core.text.StrBuilder insert(int,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.text.StrBuilder:cn.hutool.core.text.StrBuilder append(java.lang.Object)"
        ]
    },
    "cn.hutool.system.SystemUtil:void append(java.lang.StringBuilder,java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.system.HostInfo:java.lang.String toString()",
            "cn.hutool.system.JavaInfo:java.lang.String toString()",
            "cn.hutool.system.JavaRuntimeInfo:java.lang.String toString()",
            "cn.hutool.system.JavaSpecInfo:java.lang.String toString()",
            "cn.hutool.system.JvmInfo:java.lang.String toString()",
            "cn.hutool.system.JvmSpecInfo:java.lang.String toString()",
            "cn.hutool.system.OsInfo:java.lang.String toString()",
            "cn.hutool.system.RuntimeInfo:java.lang.String toString()",
            "cn.hutool.system.UserInfo:java.lang.String toString()"
        ]
    },
    "cn.hutool.core.lang.Dict:java.lang.Character getChar(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.lang.Dict:java.lang.Byte getByte(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.setting.dialect.Props:java.lang.Byte getByte(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.setting.dialect.Props:java.lang.Byte getByte(java.lang.Object)"
        ]
    },
    "cn.hutool.setting.dialect.Props:java.lang.Byte getByte(java.lang.Object,java.lang.Byte)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.lang.Dict:java.lang.Short getShort(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.setting.dialect.Props:java.lang.Short getShort(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.setting.dialect.Props:java.lang.Short getShort(java.lang.Object)"
        ]
    },
    "cn.hutool.setting.dialect.Props:java.lang.Short getShort(java.lang.Object,java.lang.Short)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.lang.Validator:boolean isBirthday(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.lang.Validator:void validateBirthday(java.lang.String,java.lang.String)"
        ]
    },
    "cn.hutool.core.lang.Dict:java.lang.Integer getInt(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.setting.dialect.Props:java.lang.Integer getInt(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.setting.dialect.Props:java.lang.Integer getInt(java.lang.Object)"
        ]
    },
    "cn.hutool.setting.dialect.Props:java.lang.Integer getInt(java.lang.Object,java.lang.Integer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.lang.Dict:java.lang.Long getLong(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.setting.dialect.Props:java.lang.Long getLong(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.setting.dialect.Props:java.lang.Long getLong(java.lang.Object)"
        ]
    },
    "cn.hutool.setting.dialect.Props:java.lang.Long getLong(java.lang.Object,java.lang.Long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.lang.Dict:java.lang.Double getDouble(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.setting.dialect.Props:java.lang.Double getDouble(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.setting.dialect.Props:java.lang.Double getDouble(java.lang.Object)"
        ]
    },
    "cn.hutool.setting.dialect.Props:java.lang.Double getDouble(java.lang.Object,java.lang.Double)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.lang.Dict:java.lang.Float getFloat(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.setting.dialect.Props:java.lang.Float getFloat(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.setting.dialect.Props:java.lang.Float getFloat(java.lang.Object)"
        ]
    },
    "cn.hutool.setting.dialect.Props:java.lang.Float getFloat(java.lang.Object,java.lang.Float)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.lang.Dict:java.lang.Boolean getBool(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.setting.dialect.Props:java.lang.Boolean getBool(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.setting.dialect.Props:java.lang.Boolean getBool(java.lang.Object)"
        ]
    },
    "cn.hutool.setting.dialect.Props:java.lang.Boolean getBool(java.lang.Object,java.lang.Boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.lang.Dict:java.math.BigInteger getBigInteger(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.lang.Dict:java.math.BigInteger getBigInteger(java.lang.Object)"
        ]
    },
    "cn.hutool.core.lang.Dict:java.math.BigDecimal getBigDecimal(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.lang.Dict:java.math.BigDecimal getBigDecimal(java.lang.Object)"
        ]
    },
    "cn.hutool.setting.dialect.Props:java.util.Date getDate(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.setting.dialect.Props:java.util.Date getDate(java.lang.Object)"
        ]
    },
    "cn.hutool.setting.dialect.Props:java.util.Date getDate(java.lang.Object,java.util.Date)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.date.format.FastDateFormat:java.util.Date parse(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.date.DateTime:java.util.Date parse(java.lang.String,cn.hutool.core.date.format.DateParser)"
        ]
    },
    "cn.hutool.core.date.format.FastDateParser:java.lang.Object parseObject(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.date.format.FastDateFormat:java.lang.Object parseObject(java.lang.String,java.text.ParsePosition)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.lang.Validator:void validateGeneral(java.lang.String,int,int,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.lang.Validator:void validateGeneral(java.lang.String,int,java.lang.String)"
        ]
    },
    "cn.hutool.core.lang.Validator:boolean isGeneral(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.lang.Validator:void validateChinese(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.http.GlobalHeaders:cn.hutool.http.GlobalHeaders[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.extra.qrcode.QrCodeUtil:byte[] generatePng(java.lang.String,cn.hutool.extra.qrcode.QrConfig)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.extra.qrcode.QrCodeUtil:java.io.File generate(java.lang.String,int,int,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.extra.qrcode.QrCodeUtil:void generate(java.lang.String,int,int,java.lang.String,java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.qrcode.QrCodeUtil:byte[] generatePng(java.lang.String,int,int)"
        ]
    },
    "cn.hutool.core.bean.BeanResolver:void <init>(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.BeanResolver:java.lang.Object resolveBean(java.lang.Object,java.lang.String)"
        ]
    },
    "cn.hutool.core.date.DateUtil:cn.hutool.core.date.DateTime parse(java.lang.String,cn.hutool.core.date.format.DateParser)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.date.DateUtil:cn.hutool.core.date.DateTime parseDateTime(java.lang.String)",
            "cn.hutool.core.date.DateUtil:cn.hutool.core.date.DateTime parseDate(java.lang.String)",
            "cn.hutool.core.date.DateUtil:cn.hutool.core.date.DateTime parseTime(java.lang.String)",
            "cn.hutool.core.date.DateUtil:cn.hutool.core.date.DateTime parse(java.lang.String)",
            "cn.hutool.core.util.IdcardUtil:cn.hutool.core.date.DateTime getBirthDate(java.lang.String)"
        ]
    },
    "cn.hutool.core.date.DateTime:cn.hutool.core.date.DateTime of(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.date.DateUtil:cn.hutool.core.date.DateTime parse(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.convert.impl.CalendarConverter:java.util.Calendar convertInternal(java.lang.Object)",
            "cn.hutool.core.convert.impl.DateConverter:java.util.Date convertInternal(java.lang.Object)",
            "cn.hutool.core.date.DateUtil:cn.hutool.core.date.DateTime parseTimeToday(java.lang.String)",
            "cn.hutool.core.util.IdcardUtil:java.lang.String convert15To18(java.lang.String)",
            "cn.hutool.core.util.IdcardUtil:boolean isvalidCard15(java.lang.String)",
            "cn.hutool.core.util.IdcardUtil:int getAgeByIdCard(java.lang.String,java.util.Date)"
        ]
    },
    "cn.hutool.poi.excel.ExcelUtil:cn.hutool.poi.excel.ExcelReader getReader(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.bean.BeanDescCache:cn.hutool.core.bean.BeanDescCache[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.bean.BeanInfoCache:cn.hutool.core.bean.BeanInfoCache[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.date.BetweenFormater$Level:cn.hutool.core.date.BetweenFormater$Level[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.date.DateField:cn.hutool.core.date.DateField[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.date.DateUnit:cn.hutool.core.date.DateUnit[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.date.Month:cn.hutool.core.date.Month[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.date.Quarter:cn.hutool.core.date.Quarter[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.date.Season:cn.hutool.core.date.Season[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.date.Week:cn.hutool.core.date.Week[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.date.Week$1:void <clinit>()"
        ]
    },
    "cn.hutool.core.io.file.LineSeparator:cn.hutool.core.io.file.LineSeparator[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ArrayUtil:java.lang.Object[] clone(java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ArrayUtil:java.lang.Object clone(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ObjectUtil:java.lang.Object clone(java.lang.Object)"
        ]
    },
    "cn.hutool.core.util.ModifierUtil$ModifierType:cn.hutool.core.util.ModifierUtil$ModifierType[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ReferenceUtil$ReferenceType:cn.hutool.core.util.ReferenceUtil$ReferenceType[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ReferenceUtil$1:void <clinit>()"
        ]
    },
    "cn.hutool.cache.GlobalPruneTimer:cn.hutool.cache.GlobalPruneTimer[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.asymmetric.AsymmetricAlgorithm:cn.hutool.crypto.asymmetric.AsymmetricAlgorithm[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.asymmetric.KeyType:cn.hutool.crypto.asymmetric.KeyType[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.asymmetric.BaseAsymmetric$1:void <clinit>()"
        ]
    },
    "cn.hutool.crypto.asymmetric.SignAlgorithm:cn.hutool.crypto.asymmetric.SignAlgorithm[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.digest.BCrypt:void init_key()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.digest.BCrypt:byte[] crypt(byte[],byte[],int,int[])"
        ]
    },
    "cn.hutool.crypto.digest.BCrypt:java.lang.String hashpw(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.digest.BCrypt:java.lang.String hashpw(java.lang.String)",
            "cn.hutool.crypto.digest.BCrypt:boolean checkpw(java.lang.String,java.lang.String)"
        ]
    },
    "cn.hutool.crypto.digest.DigestAlgorithm:cn.hutool.crypto.digest.DigestAlgorithm[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.digest.HmacAlgorithm:cn.hutool.crypto.digest.HmacAlgorithm[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.Mode:cn.hutool.crypto.Mode[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.Padding:cn.hutool.crypto.Padding[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.symmetric.SymmetricAlgorithm:cn.hutool.crypto.symmetric.SymmetricAlgorithm[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.dialect.DialectName:cn.hutool.db.dialect.DialectName[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.meta.TableType:cn.hutool.db.meta.TableType[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.sql.Condition$LikeType:cn.hutool.db.sql.Condition$LikeType[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.sql.SqlUtil$1:void <clinit>()"
        ]
    },
    "cn.hutool.db.sql.Direction:cn.hutool.db.sql.Direction[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.sql.LogicalOperator:cn.hutool.db.sql.LogicalOperator[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.sql.SqlBuilder$Join:cn.hutool.db.sql.SqlBuilder$Join[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.ThreadLocalConnection:cn.hutool.db.ThreadLocalConnection[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.transaction.TransactionLevel:cn.hutool.db.transaction.TransactionLevel[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.extra.ssh.JschSessionPool:cn.hutool.extra.ssh.JschSessionPool[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.extra.ssh.Sftp$Mode:cn.hutool.extra.ssh.Sftp$Mode[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.extra.template.TemplateConfig$ResourceMode:cn.hutool.extra.template.TemplateConfig$ResourceMode[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.template.engine.beetl.BeetlEngine$1:void <clinit>()",
            "cn.hutool.extra.template.engine.freemarker.FreemarkerEngine$1:void <clinit>()",
            "cn.hutool.extra.template.engine.velocity.VelocityEngine$1:void <clinit>()"
        ]
    },
    "cn.hutool.http.ContentType:cn.hutool.http.ContentType[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.http.Header:cn.hutool.http.Header[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.http.Method:cn.hutool.http.Method[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.log.level.Level:cn.hutool.log.level.Level[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.AbstractLog$1:void <clinit>()",
            "cn.hutool.log.dialect.commons.ApacheCommonsLog$1:void <clinit>()",
            "cn.hutool.log.dialect.commons.ApacheCommonsLog4JLog$1:void <clinit>()",
            "cn.hutool.log.dialect.jdk.JdkLog$1:void <clinit>()",
            "cn.hutool.log.dialect.log4j.Log4jLog$1:void <clinit>()",
            "cn.hutool.log.dialect.log4j2.Log4j2Log$1:void <clinit>()",
            "cn.hutool.log.dialect.slf4j.Slf4jLog$1:void <clinit>()",
            "cn.hutool.log.dialect.tinylog.TinyLog$1:void <clinit>()"
        ]
    },
    "cn.hutool.poi.excel.sax.CellDataType:cn.hutool.poi.excel.sax.CellDataType[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.poi.excel.sax.ExcelSaxUtil$1:void <clinit>()"
        ]
    },
    "cn.hutool.poi.excel.style.Align:cn.hutool.poi.excel.style.Align[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.poi.excel.ExcelWriter$1:void <clinit>()"
        ]
    },
    "cn.hutool.core.date.format.FastDatePrinter:java.lang.Appendable format(long,java.lang.Appendable)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.date.format.FastDateFormat:java.lang.Appendable format(long,java.lang.Appendable)"
        ]
    },
    "cn.hutool.core.date.format.FastDatePrinter:java.lang.Appendable format(java.util.Date,java.lang.Appendable)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.date.format.FastDateFormat:java.lang.Appendable format(java.util.Date,java.lang.Appendable)"
        ]
    },
    "cn.hutool.core.date.format.FastDatePrinter:java.lang.Appendable format(java.util.Calendar,java.lang.Appendable)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.date.format.FastDateFormat:java.lang.Appendable format(java.util.Calendar,java.lang.Appendable)",
            "cn.hutool.core.date.format.FastDatePrinter:java.lang.String format(java.util.Calendar)"
        ]
    },
    "cn.hutool.core.date.format.FastDatePrinter:java.lang.String applyRulesToString(java.util.Calendar)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.date.format.FastDatePrinter:java.lang.String format(long)",
            "cn.hutool.core.date.format.FastDatePrinter:java.lang.String format(java.util.Date)"
        ]
    },
    "cn.hutool.core.util.ClipboardUtil:java.lang.Object get(java.awt.datatransfer.DataFlavor)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ClipboardUtil:java.lang.String getStr()",
            "cn.hutool.core.util.ClipboardUtil:java.awt.Image getImage()"
        ]
    },
    "cn.hutool.core.util.NetUtil:java.lang.String getMacAddress(java.net.InetAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.NetUtil:java.lang.String getLocalMacAddress()"
        ]
    },
    "cn.hutool.core.util.ReflectUtil:java.lang.Object invokeStatic(java.lang.reflect.Method,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.aop.interceptor.JdkInterceptor:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.cron.task.InvokeTask:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.cron.TaskExecutor:void run()"
        ]
    },
    "cn.hutool.core.util.URLUtil:java.lang.String encode(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.URLUtil:java.lang.String decode(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.FileUtil:java.io.File file(java.net.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.resource.UrlResource:java.io.File getFile()"
        ]
    },
    "cn.hutool.core.io.watch.WatchMonitor:cn.hutool.core.io.watch.WatchMonitor create(java.net.URL,int,java.nio.file.WatchEvent$Kind[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.watch.WatchMonitor:cn.hutool.core.io.watch.WatchMonitor create(java.net.URL,java.nio.file.WatchEvent$Kind[])"
        ]
    },
    "cn.hutool.core.io.watch.WatchUtil:cn.hutool.core.io.watch.WatchMonitor create(java.net.URL,int,java.nio.file.WatchEvent$Kind[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.watch.WatchUtil:cn.hutool.core.io.watch.WatchMonitor create(java.net.URL,java.nio.file.WatchEvent$Kind[])"
        ]
    },
    "cn.hutool.core.io.watch.WatchUtil:cn.hutool.core.io.watch.WatchMonitor createAll(java.net.URL,int,cn.hutool.core.io.watch.Watcher)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.watch.WatchUtil:cn.hutool.core.io.watch.WatchMonitor createAll(java.net.URL,cn.hutool.core.io.watch.Watcher)"
        ]
    },
    "cn.hutool.core.util.URLUtil:java.lang.String getDecodedPath(java.net.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.FileUtil:java.lang.String getAbsolutePath(java.lang.String,java.lang.Class)",
            "cn.hutool.core.io.resource.ClassPathResource:java.lang.String getAbsolutePath()",
            "cn.hutool.core.util.ClassUtil:java.lang.String getClassPath(boolean)"
        ]
    },
    "cn.hutool.core.util.XmlUtil:org.w3c.dom.NodeList getNodeListByXPath(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.XmlUtil:org.w3c.dom.Node getNodeByXPath(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.XmlUtil:org.w3c.dom.Element getElementByXPath(java.lang.String,java.lang.Object)"
        ]
    },
    "cn.hutool.core.img.Img:void write(java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.file.FileReader:java.io.BufferedReader getReader()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.file.FileWriter:java.io.PrintWriter getPrintWriter(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.file.FileAppender:cn.hutool.core.io.file.FileAppender flush()",
            "cn.hutool.core.io.file.FileWriter:java.io.File writeLines(java.util.Collection,cn.hutool.core.io.file.LineSeparator,boolean)",
            "cn.hutool.core.io.file.FileWriter:java.io.File writeMap(java.util.Map,cn.hutool.core.io.file.LineSeparator,java.lang.String,boolean)"
        ]
    },
    "cn.hutool.core.io.FileUtil:java.io.BufferedWriter getWriter(java.io.File,java.nio.charset.Charset,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.FileUtil:java.io.BufferedWriter getWriter(java.lang.String,java.lang.String,boolean)",
            "cn.hutool.core.io.FileUtil:java.io.BufferedWriter getWriter(java.lang.String,java.nio.charset.Charset,boolean)",
            "cn.hutool.core.io.FileUtil:java.io.BufferedWriter getWriter(java.io.File,java.lang.String,boolean)",
            "cn.hutool.core.text.csv.CsvWriter:void <init>(java.io.File,java.nio.charset.Charset,boolean,cn.hutool.core.text.csv.CsvWriteConfig)"
        ]
    },
    "cn.hutool.core.io.FileUtil:java.io.File touch(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.FileUtil:boolean clean(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.FileUtil:boolean del(java.io.File)",
            "cn.hutool.core.io.FileUtil:boolean clean(java.lang.String)"
        ]
    },
    "cn.hutool.core.io.FileUtil:java.io.File createTempFile(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.FileUtil:java.io.File createTempFile(java.io.File,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.FileUtil:java.io.BufferedReader getReader(java.nio.file.Path,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.FileUtil:java.io.BufferedReader getUtf8Reader(java.nio.file.Path)",
            "cn.hutool.core.text.csv.CsvReader:cn.hutool.core.text.csv.CsvData read(java.nio.file.Path,java.nio.charset.Charset)"
        ]
    },
    "cn.hutool.core.util.ZipUtil:java.util.zip.ZipOutputStream getZipOutputStream(java.io.File,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ZipUtil:java.io.File zip(java.io.File,java.nio.charset.Charset,boolean,java.io.File[])",
            "cn.hutool.core.util.ZipUtil:java.io.File zip(java.io.File,java.lang.String[],java.io.InputStream[],java.nio.charset.Charset)"
        ]
    },
    "cn.hutool.core.io.IoUtil:long copy(java.io.Reader,java.io.Writer,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.IoUtil:long copy(java.io.Reader,java.io.Writer)"
        ]
    },
    "cn.hutool.core.io.IoUtil:java.lang.String readUtf8(java.nio.channels.FileChannel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.IoUtil:java.lang.String read(java.nio.channels.FileChannel,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.IoUtil:java.lang.String readHex(java.io.InputStream,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.IoUtil:java.lang.String readHex28Upper(java.io.InputStream)",
            "cn.hutool.core.io.IoUtil:java.lang.String readHex28Lower(java.io.InputStream)"
        ]
    },
    "cn.hutool.core.io.FileUtil:java.io.BufferedInputStream getInputStream(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.FileUtil:boolean contentEquals(java.io.File,java.io.File)",
            "cn.hutool.core.io.FileUtil:java.io.BufferedInputStream getInputStream(java.lang.String)",
            "cn.hutool.core.io.FileUtil:java.io.BufferedReader getReader(java.io.File,java.lang.String)",
            "cn.hutool.core.io.FileUtil:java.io.BufferedReader getReader(java.io.File,java.nio.charset.Charset)",
            "cn.hutool.core.util.XmlUtil:org.w3c.dom.Document readXML(java.io.File)",
            "cn.hutool.core.util.XmlUtil:java.lang.Object readObjectFromXml(java.io.File)",
            "cn.hutool.core.util.ZipUtil:byte[] gzip(java.io.File)",
            "cn.hutool.core.util.ZipUtil:byte[] zlib(java.io.File,int)",
            "cn.hutool.core.util.ZipUtil:void addFile(java.io.File,java.lang.String,java.util.zip.ZipOutputStream)",
            "cn.hutool.crypto.digest.Digester:byte[] digest(java.io.File)",
            "cn.hutool.crypto.digest.HMac:byte[] digest(java.io.File)",
            "cn.hutool.extra.ftp.Ftp:boolean upload(java.lang.String,java.lang.String,java.io.File)",
            "cn.hutool.poi.excel.ExcelUtil:void readBySax(java.io.File,int,cn.hutool.poi.excel.sax.handler.RowHandler)",
            "cn.hutool.poi.excel.ExcelWriter:void <init>(java.io.File,java.lang.String)"
        ]
    },
    "cn.hutool.core.io.watch.WatchMonitor:void <init>(java.nio.file.Path,int,java.nio.file.WatchEvent$Kind[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.watch.WatchMonitor:cn.hutool.core.io.watch.WatchMonitor create(java.nio.file.Path,int,java.nio.file.WatchEvent$Kind[])",
            "cn.hutool.core.io.watch.WatchMonitor:void <init>(java.nio.file.Path,java.nio.file.WatchEvent$Kind[])",
            "cn.hutool.core.io.watch.WatchUtil:cn.hutool.core.io.watch.WatchMonitor create(java.nio.file.Path,int,java.nio.file.WatchEvent$Kind[])"
        ]
    },
    "cn.hutool.core.text.csv.CsvParser:cn.hutool.core.text.csv.CsvRow nextRow()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.text.csv.CsvReader:cn.hutool.core.text.csv.CsvData read(java.io.Reader)"
        ]
    },
    "cn.hutool.core.text.csv.CsvWriter:cn.hutool.core.text.csv.CsvWriter write(java.lang.String[][])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ImageUtil:void slice(java.io.File,java.io.File,int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ImageUtil:void binary(java.awt.Image,javax.imageio.stream.ImageOutputStream,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ImageUtil:void binary(java.io.InputStream,java.io.OutputStream,java.lang.String)",
            "cn.hutool.core.util.ImageUtil:void binary(javax.imageio.stream.ImageInputStream,javax.imageio.stream.ImageOutputStream,java.lang.String)",
            "cn.hutool.core.util.ImageUtil:void binary(java.awt.Image,java.io.OutputStream,java.lang.String)"
        ]
    },
    "cn.hutool.core.util.ImageUtil:void writeJpg(java.awt.Image,javax.imageio.stream.ImageOutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ImageUtil:void scale(java.awt.Image,javax.imageio.stream.ImageOutputStream,float)",
            "cn.hutool.core.util.ImageUtil:void scale(java.awt.Image,javax.imageio.stream.ImageOutputStream,int,int,java.awt.Color)",
            "cn.hutool.core.util.ImageUtil:void cut(java.awt.Image,javax.imageio.stream.ImageOutputStream,java.awt.Rectangle)",
            "cn.hutool.core.util.ImageUtil:void gray(java.awt.Image,javax.imageio.stream.ImageOutputStream)",
            "cn.hutool.core.util.ImageUtil:void pressText(java.awt.Image,javax.imageio.stream.ImageOutputStream,java.lang.String,java.awt.Color,java.awt.Font,int,int,float)",
            "cn.hutool.core.util.ImageUtil:void pressImage(java.awt.Image,javax.imageio.stream.ImageOutputStream,java.awt.Image,int,int,float)",
            "cn.hutool.core.util.ImageUtil:void rotate(java.awt.Image,int,java.io.OutputStream)",
            "cn.hutool.core.util.ImageUtil:void rotate(java.awt.Image,int,javax.imageio.stream.ImageOutputStream)",
            "cn.hutool.core.util.ImageUtil:void flip(java.awt.Image,javax.imageio.stream.ImageOutputStream)"
        ]
    },
    "cn.hutool.core.util.ImageUtil:void writePng(java.awt.Image,javax.imageio.stream.ImageOutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ImageUtil:void createImage(java.lang.String,java.awt.Font,java.awt.Color,java.awt.Color,javax.imageio.stream.ImageOutputStream)"
        ]
    },
    "cn.hutool.core.util.ImageUtil:void write(java.awt.Image,java.lang.String,java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ImageUtil:java.lang.String toBase64(java.awt.Image,java.lang.String)",
            "cn.hutool.core.util.ImageUtil:void writeJpg(java.awt.Image,java.io.OutputStream)",
            "cn.hutool.core.util.ImageUtil:void writePng(java.awt.Image,java.io.OutputStream)",
            "cn.hutool.extra.qrcode.QrCodeUtil:void generate(java.lang.String,int,int,java.lang.String,java.io.OutputStream)",
            "cn.hutool.extra.qrcode.QrCodeUtil:void generate(java.lang.String,cn.hutool.extra.qrcode.QrConfig,java.lang.String,java.io.OutputStream)"
        ]
    },
    "cn.hutool.core.util.ImageUtil:void scale(java.awt.Image,java.io.File,float)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ImageUtil:void scale(java.io.File,java.io.File,float)"
        ]
    },
    "cn.hutool.core.util.ImageUtil:void scale(java.io.File,java.io.File,int,int,java.awt.Color)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ImageUtil:void cut(java.awt.Image,java.io.File,java.awt.Rectangle)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ImageUtil:void cut(java.io.File,java.io.File,java.awt.Rectangle)"
        ]
    },
    "cn.hutool.core.util.ImageUtil:void gray(java.awt.Image,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ImageUtil:void gray(java.io.File,java.io.File)"
        ]
    },
    "cn.hutool.core.util.ImageUtil:void binary(java.awt.Image,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ImageUtil:void binary(java.io.File,java.io.File)"
        ]
    },
    "cn.hutool.core.util.ImageUtil:void pressText(java.awt.Image,java.io.File,java.lang.String,java.awt.Color,java.awt.Font,int,int,float)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ImageUtil:void pressText(java.io.File,java.io.File,java.lang.String,java.awt.Color,java.awt.Font,int,int,float)"
        ]
    },
    "cn.hutool.core.util.ImageUtil:void pressImage(java.awt.Image,java.io.File,java.awt.Image,int,int,float)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ImageUtil:void pressImage(java.io.File,java.io.File,java.awt.Image,int,int,float)"
        ]
    },
    "cn.hutool.core.util.ImageUtil:void rotate(java.awt.Image,int,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ImageUtil:void rotate(java.io.File,int,java.io.File)"
        ]
    },
    "cn.hutool.core.util.ImageUtil:void flip(java.awt.Image,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ImageUtil:void flip(java.io.File,java.io.File)"
        ]
    },
    "cn.hutool.core.img.Img:cn.hutool.core.img.Img 'from'(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ImageUtil:void scale(java.io.File,java.io.File,float)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ImageUtil:void cut(java.io.File,java.io.File,java.awt.Rectangle)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ImageUtil:void gray(java.io.File,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ImageUtil:void binary(java.io.File,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ImageUtil:void pressText(java.io.File,java.io.File,java.lang.String,java.awt.Color,java.awt.Font,int,int,float)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ImageUtil:void pressImage(java.io.File,java.io.File,java.awt.Image,int,int,float)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ImageUtil:void rotate(java.io.File,int,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ImageUtil:void flip(java.io.File,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.img.Img:cn.hutool.core.img.Img 'from'(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ImageUtil:void scale(java.io.InputStream,java.io.OutputStream,float)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ImageUtil:void scale(java.io.InputStream,java.io.OutputStream,int,int,java.awt.Color)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ImageUtil:void cut(java.io.InputStream,java.io.OutputStream,java.awt.Rectangle)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ImageUtil:void gray(java.io.InputStream,java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ImageUtil:void binary(java.io.InputStream,java.io.OutputStream,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ImageUtil:void pressText(java.io.InputStream,java.io.OutputStream,java.lang.String,java.awt.Color,java.awt.Font,int,int,float)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ImageUtil:void pressImage(java.io.InputStream,java.io.OutputStream,java.awt.Image,int,int,float)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ImageUtil:java.awt.image.BufferedImage toImage(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ImageUtil:java.awt.image.BufferedImage toImage(java.lang.String)"
        ]
    },
    "cn.hutool.captcha.AbstractCaptcha:java.awt.image.BufferedImage getImage()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.img.Img:cn.hutool.core.img.Img 'from'(javax.imageio.stream.ImageInputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ImageUtil:void scale(javax.imageio.stream.ImageInputStream,javax.imageio.stream.ImageOutputStream,float)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ImageUtil:void scale(javax.imageio.stream.ImageInputStream,javax.imageio.stream.ImageOutputStream,int,int,java.awt.Color)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ImageUtil:void cut(javax.imageio.stream.ImageInputStream,javax.imageio.stream.ImageOutputStream,java.awt.Rectangle)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ImageUtil:void gray(javax.imageio.stream.ImageInputStream,javax.imageio.stream.ImageOutputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ImageUtil:void binary(javax.imageio.stream.ImageInputStream,javax.imageio.stream.ImageOutputStream,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ImageUtil:void pressText(javax.imageio.stream.ImageInputStream,javax.imageio.stream.ImageOutputStream,java.lang.String,java.awt.Color,java.awt.Font,int,int,float)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ImageUtil:void pressImage(javax.imageio.stream.ImageInputStream,javax.imageio.stream.ImageOutputStream,java.awt.Image,int,int,float)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.img.Img:cn.hutool.core.img.Img 'from'(java.net.URL)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ImageUtil:void scale(java.awt.Image,java.io.OutputStream,float)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ImageUtil:void scale(java.io.InputStream,java.io.OutputStream,float)"
        ]
    },
    "cn.hutool.core.util.ImageUtil:void cut(java.awt.Image,java.io.OutputStream,java.awt.Rectangle)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ImageUtil:void cut(java.io.InputStream,java.io.OutputStream,java.awt.Rectangle)"
        ]
    },
    "cn.hutool.core.util.ImageUtil:void gray(java.awt.Image,java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ImageUtil:void binary(java.awt.Image,java.io.OutputStream,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ImageUtil:void pressText(java.awt.Image,java.io.OutputStream,java.lang.String,java.awt.Color,java.awt.Font,int,int,float)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ImageUtil:void pressImage(java.awt.Image,java.io.OutputStream,java.awt.Image,int,int,float)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ImageUtil:void rotate(java.awt.Image,int,java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ImageUtil:void flip(java.awt.Image,java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.URLUtil:java.io.BufferedReader getReader(java.net.URL,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.resource.UrlResource:java.io.BufferedReader getReader(java.nio.charset.Charset)"
        ]
    },
    "cn.hutool.extra.template.engine.beetl.BeetlEngine:org.beetl.core.GroupTemplate createEngine(cn.hutool.extra.template.TemplateConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.template.engine.beetl.BeetlEngine:void <init>(cn.hutool.extra.template.TemplateConfig)"
        ]
    },
    "cn.hutool.extra.template.engine.beetl.BeetlUtil:org.beetl.core.GroupTemplate createStrGroupTemplate()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.template.engine.beetl.BeetlUtil:org.beetl.core.Template getStrTemplate(java.lang.String)"
        ]
    },
    "cn.hutool.extra.template.engine.beetl.BeetlUtil:org.beetl.core.GroupTemplate createWebAppGroupTemplate()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.extra.template.engine.beetl.BeetlUtil:org.beetl.core.GroupTemplate createClassPathGroupTemplate(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.template.engine.beetl.BeetlUtil:org.beetl.core.Template getClassPathTemplate(java.lang.String,java.lang.String)"
        ]
    },
    "cn.hutool.extra.template.engine.beetl.BeetlUtil:org.beetl.core.GroupTemplate createFileGroupTemplate(java.lang.String,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.template.engine.beetl.BeetlUtil:org.beetl.core.GroupTemplate createFileGroupTemplate(java.lang.String)"
        ]
    },
    "cn.hutool.extra.template.AbstractTemplate:java.lang.String render(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.extra.template.engine.freemarker.FreemarkerTemplate:void render(java.util.Map,java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.template.AbstractTemplate:void render(java.util.Map,java.io.File)"
        ]
    },
    "cn.hutool.crypto.asymmetric.AsymmetricCrypto:cn.hutool.crypto.asymmetric.BaseAsymmetric init(java.lang.String,java.security.PrivateKey,java.security.PublicKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.asymmetric.BaseAsymmetric:void <init>(java.lang.String,java.security.PrivateKey,java.security.PublicKey)",
            "cn.hutool.crypto.asymmetric.BaseAsymmetric:cn.hutool.crypto.asymmetric.BaseAsymmetric init(java.lang.String,byte[],byte[])"
        ]
    },
    "cn.hutool.crypto.asymmetric.AsymmetricCrypto:java.lang.String encryptHex(byte[],cn.hutool.crypto.asymmetric.KeyType)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.asymmetric.AsymmetricCrypto:java.lang.String encryptBase64(byte[],cn.hutool.crypto.asymmetric.KeyType)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.asymmetric.AsymmetricCrypto:byte[] encrypt(java.lang.String,java.lang.String,cn.hutool.crypto.asymmetric.KeyType)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.asymmetric.AsymmetricCrypto:byte[] encrypt(java.lang.String,java.nio.charset.Charset,cn.hutool.crypto.asymmetric.KeyType)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.asymmetric.AsymmetricCrypto:java.lang.String encryptHex(java.lang.String,java.nio.charset.Charset,cn.hutool.crypto.asymmetric.KeyType)",
            "cn.hutool.crypto.asymmetric.AsymmetricCrypto:java.lang.String encryptBase64(java.lang.String,java.nio.charset.Charset,cn.hutool.crypto.asymmetric.KeyType)",
            "cn.hutool.crypto.asymmetric.AsymmetricCrypto:java.lang.String encryptBcd(java.lang.String,cn.hutool.crypto.asymmetric.KeyType,java.nio.charset.Charset)"
        ]
    },
    "cn.hutool.crypto.asymmetric.AsymmetricCrypto:byte[] encrypt(java.lang.String,cn.hutool.crypto.asymmetric.KeyType)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.asymmetric.AsymmetricCrypto:java.lang.String encryptHex(java.lang.String,cn.hutool.crypto.asymmetric.KeyType)",
            "cn.hutool.crypto.asymmetric.AsymmetricCrypto:java.lang.String encryptBase64(java.lang.String,cn.hutool.crypto.asymmetric.KeyType)"
        ]
    },
    "cn.hutool.crypto.asymmetric.AsymmetricCrypto:byte[] encrypt(java.io.InputStream,cn.hutool.crypto.asymmetric.KeyType)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.asymmetric.AsymmetricCrypto:java.lang.String encryptHex(java.io.InputStream,cn.hutool.crypto.asymmetric.KeyType)",
            "cn.hutool.crypto.asymmetric.AsymmetricCrypto:java.lang.String encryptBase64(java.io.InputStream,cn.hutool.crypto.asymmetric.KeyType)"
        ]
    },
    "cn.hutool.crypto.asymmetric.RSA:byte[] encrypt(byte[],cn.hutool.crypto.asymmetric.KeyType)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.asymmetric.AsymmetricCrypto:java.lang.String encryptHex(byte[],cn.hutool.crypto.asymmetric.KeyType)",
            "cn.hutool.crypto.asymmetric.AsymmetricCrypto:java.lang.String encryptBase64(byte[],cn.hutool.crypto.asymmetric.KeyType)",
            "cn.hutool.crypto.asymmetric.AsymmetricCrypto:byte[] encrypt(java.lang.String,java.lang.String,cn.hutool.crypto.asymmetric.KeyType)",
            "cn.hutool.crypto.asymmetric.AsymmetricCrypto:byte[] encrypt(java.lang.String,java.nio.charset.Charset,cn.hutool.crypto.asymmetric.KeyType)",
            "cn.hutool.crypto.asymmetric.AsymmetricCrypto:byte[] encrypt(java.lang.String,cn.hutool.crypto.asymmetric.KeyType)",
            "cn.hutool.crypto.asymmetric.AsymmetricCrypto:byte[] encrypt(java.io.InputStream,cn.hutool.crypto.asymmetric.KeyType)"
        ]
    },
    "cn.hutool.crypto.asymmetric.AsymmetricCrypto:byte[] decrypt(java.io.InputStream,cn.hutool.crypto.asymmetric.KeyType)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.asymmetric.AsymmetricCrypto:byte[] decryptFromHex(java.lang.String,cn.hutool.crypto.asymmetric.KeyType)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.asymmetric.AsymmetricCrypto:byte[] decryptFromBase64(java.lang.String,cn.hutool.crypto.asymmetric.KeyType)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.asymmetric.AsymmetricCrypto:byte[] decryptFromBcd(java.lang.String,cn.hutool.crypto.asymmetric.KeyType,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.asymmetric.AsymmetricCrypto:byte[] decryptFromBcd(java.lang.String,cn.hutool.crypto.asymmetric.KeyType)",
            "cn.hutool.crypto.asymmetric.RSA:java.lang.String decryptStr(java.lang.String,cn.hutool.crypto.asymmetric.KeyType,java.nio.charset.Charset)"
        ]
    },
    "cn.hutool.crypto.asymmetric.RSA:byte[] decrypt(byte[],cn.hutool.crypto.asymmetric.KeyType)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.asymmetric.AsymmetricCrypto:byte[] decrypt(java.io.InputStream,cn.hutool.crypto.asymmetric.KeyType)",
            "cn.hutool.crypto.asymmetric.AsymmetricCrypto:byte[] decryptFromHex(java.lang.String,cn.hutool.crypto.asymmetric.KeyType)",
            "cn.hutool.crypto.asymmetric.AsymmetricCrypto:byte[] decryptFromBase64(java.lang.String,cn.hutool.crypto.asymmetric.KeyType)",
            "cn.hutool.crypto.asymmetric.AsymmetricCrypto:byte[] decryptFromBcd(java.lang.String,cn.hutool.crypto.asymmetric.KeyType,java.nio.charset.Charset)"
        ]
    },
    "cn.hutool.crypto.asymmetric.Sign:cn.hutool.crypto.asymmetric.BaseAsymmetric init(java.lang.String,java.security.PrivateKey,java.security.PublicKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.asymmetric.BaseAsymmetric:void <init>(java.lang.String,java.security.PrivateKey,java.security.PublicKey)",
            "cn.hutool.crypto.asymmetric.BaseAsymmetric:cn.hutool.crypto.asymmetric.BaseAsymmetric init(java.lang.String,byte[],byte[])"
        ]
    },
    "cn.hutool.crypto.digest.Digester:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.digest.Digester:void <init>(cn.hutool.crypto.digest.DigestAlgorithm)"
        ]
    },
    "cn.hutool.crypto.digest.Digester:byte[] digest(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.digest.Digester:byte[] digest(java.io.File)",
            "cn.hutool.crypto.digest.Digester:java.lang.String digestHex(java.io.InputStream)",
            "cn.hutool.crypto.digest.DigestUtil:byte[] md5(java.io.InputStream)",
            "cn.hutool.crypto.digest.DigestUtil:byte[] sha1(java.io.InputStream)",
            "cn.hutool.crypto.digest.DigestUtil:byte[] sha256(java.io.InputStream)"
        ]
    },
    "cn.hutool.crypto.digest.Digester:java.lang.String digestHex(java.io.InputStream,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.digest.HMac:void <init>(cn.hutool.crypto.digest.HmacAlgorithm,javax.crypto.SecretKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.digest.DigestUtil:cn.hutool.crypto.digest.HMac hmac(cn.hutool.crypto.digest.HmacAlgorithm,javax.crypto.SecretKey)",
            "cn.hutool.crypto.digest.HMac:void <init>(cn.hutool.crypto.digest.HmacAlgorithm)",
            "cn.hutool.crypto.SecureUtil:cn.hutool.crypto.digest.HMac hmac(cn.hutool.crypto.digest.HmacAlgorithm,javax.crypto.SecretKey)"
        ]
    },
    "cn.hutool.crypto.digest.HMac:cn.hutool.crypto.digest.HMac init(java.lang.String,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.digest.HMac:void <init>(cn.hutool.crypto.digest.HmacAlgorithm,byte[])"
        ]
    },
    "cn.hutool.crypto.digest.HMac:byte[] digest(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.digest.HMac:byte[] digest(java.io.File)",
            "cn.hutool.crypto.digest.HMac:java.lang.String digestHex(java.io.InputStream)"
        ]
    },
    "cn.hutool.crypto.digest.HMac:java.lang.String digestHex(java.io.InputStream,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.SecureUtil:javax.crypto.SecretKey generateKey(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.digest.HMac:cn.hutool.crypto.digest.HMac init(java.lang.String,javax.crypto.SecretKey)",
            "cn.hutool.crypto.SecureUtil:javax.crypto.SecretKey generateKey(java.lang.String,byte[])",
            "cn.hutool.crypto.SecureUtil:javax.crypto.SecretKey generateDESKey(java.lang.String,byte[])"
        ]
    },
    "cn.hutool.crypto.SecureUtil:javax.crypto.SecretKey generatePBEKey(java.lang.String,char[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.SecureUtil:javax.crypto.SecretKey generateKey(java.lang.String,byte[])"
        ]
    },
    "cn.hutool.crypto.asymmetric.RSA:java.security.PrivateKey generatePrivateKey(java.math.BigInteger,java.math.BigInteger)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.asymmetric.RSA:void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)"
        ]
    },
    "cn.hutool.crypto.SecureUtil:java.security.PrivateKey generatePrivateKey(java.lang.String,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.asymmetric.BaseAsymmetric:cn.hutool.crypto.asymmetric.BaseAsymmetric init(java.lang.String,byte[],byte[])"
        ]
    },
    "cn.hutool.crypto.asymmetric.RSA:java.security.PublicKey generatePublicKey(java.math.BigInteger,java.math.BigInteger)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.asymmetric.RSA:void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)"
        ]
    },
    "cn.hutool.crypto.SecureUtil:java.security.PublicKey generatePublicKey(java.lang.String,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.asymmetric.BaseAsymmetric:cn.hutool.crypto.asymmetric.BaseAsymmetric init(java.lang.String,byte[],byte[])"
        ]
    },
    "cn.hutool.crypto.SecureUtil:java.security.KeyPair generateKeyPair(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.asymmetric.BaseAsymmetric:cn.hutool.crypto.asymmetric.BaseAsymmetric initKeys()"
        ]
    },
    "cn.hutool.crypto.SecureUtil:java.security.KeyPair generateKeyPair(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.SecureUtil:java.security.KeyStore readJKSKeyStore(java.io.InputStream,char[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.SecureUtil:java.security.cert.Certificate readX509Certificate(java.io.InputStream,char[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.symmetric.SymmetricCrypto:void <init>(java.lang.String,javax.crypto.SecretKey,java.security.spec.AlgorithmParameterSpec)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.symmetric.AES:void <init>(java.lang.String,java.lang.String,javax.crypto.SecretKey,javax.crypto.spec.IvParameterSpec)",
            "cn.hutool.crypto.symmetric.DES:void <init>(java.lang.String,java.lang.String,javax.crypto.SecretKey,javax.crypto.spec.IvParameterSpec)",
            "cn.hutool.crypto.symmetric.DESede:void <init>(java.lang.String,java.lang.String,javax.crypto.SecretKey,javax.crypto.spec.IvParameterSpec)",
            "cn.hutool.crypto.symmetric.SymmetricCrypto:void <init>(java.lang.String,javax.crypto.SecretKey)"
        ]
    },
    "cn.hutool.crypto.symmetric.SymmetricCrypto:java.lang.String encryptHex(byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.symmetric.SymmetricCrypto:java.lang.String encryptBase64(byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.symmetric.SymmetricCrypto:byte[] encrypt(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.symmetric.SymmetricCrypto:java.lang.String encryptHex(java.lang.String,java.lang.String)",
            "cn.hutool.crypto.symmetric.SymmetricCrypto:java.lang.String encryptBase64(java.lang.String,java.lang.String)"
        ]
    },
    "cn.hutool.crypto.symmetric.SymmetricCrypto:byte[] encrypt(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.symmetric.SymmetricCrypto:java.lang.String encryptHex(java.lang.String)",
            "cn.hutool.crypto.symmetric.SymmetricCrypto:java.lang.String encryptBase64(java.lang.String)"
        ]
    },
    "cn.hutool.crypto.symmetric.SymmetricCrypto:byte[] encrypt(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.symmetric.SymmetricCrypto:java.lang.String encryptHex(java.io.InputStream)",
            "cn.hutool.crypto.symmetric.SymmetricCrypto:java.lang.String encryptBase64(java.io.InputStream)"
        ]
    },
    "cn.hutool.crypto.symmetric.SymmetricCrypto:java.lang.String decryptStr(byte[],java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.symmetric.SymmetricCrypto:java.lang.String decryptStr(byte[])"
        ]
    },
    "cn.hutool.crypto.symmetric.SymmetricCrypto:byte[] decrypt(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.symmetric.SymmetricCrypto:java.lang.String decryptStr(java.lang.String,java.nio.charset.Charset)"
        ]
    },
    "cn.hutool.crypto.symmetric.SymmetricCrypto:byte[] decryptFromBase64(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.symmetric.SymmetricCrypto:java.lang.String decryptStrFromBase64(java.lang.String,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.symmetric.SymmetricCrypto:java.lang.String decryptStrFromBase64(java.lang.String)"
        ]
    },
    "cn.hutool.crypto.symmetric.SymmetricCrypto:byte[] decrypt(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.symmetric.SymmetricCrypto:java.lang.String decryptStr(java.io.InputStream,java.nio.charset.Charset)"
        ]
    },
    "cn.hutool.extra.mail.InternalMailUtil:javax.mail.internet.InternetAddress[] parseAddressFromStrs(java.lang.String[],java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.mail.Mail:javax.mail.internet.MimeMessage buildMsg()"
        ]
    },
    "cn.hutool.extra.ssh.JschUtil:int openAndBindPortToLocal(cn.hutool.extra.ssh.Connector,java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.extra.ssh.Sftp:void <init>(com.jcraft.jsch.Session)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.ssh.JschUtil:cn.hutool.extra.ssh.Sftp createSftp(com.jcraft.jsch.Session)"
        ]
    },
    "cn.hutool.extra.ssh.Sftp:java.util.List ls(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.ssh.Sftp:boolean exist(java.lang.String,java.lang.String)"
        ]
    },
    "cn.hutool.extra.ssh.Sftp:java.util.List lsDirs(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.extra.ssh.Sftp:java.util.List lsFiles(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.extra.ssh.Sftp:cn.hutool.extra.ssh.Sftp put(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.json.JSONTokener:boolean more()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.json.XML:cn.hutool.json.JSONObject toJSONObject(java.lang.String,boolean)"
        ]
    },
    "cn.hutool.json.JSONTokener:char next(char)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.json.JSONTokener:java.lang.String next(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.json.JSONTokener:java.lang.String nextString(char)"
        ]
    },
    "cn.hutool.json.JSONTokener:char nextClean()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.json.JSONArray:void init(cn.hutool.json.JSONTokener)",
            "cn.hutool.json.JSONObject:void init(cn.hutool.json.JSONTokener)",
            "cn.hutool.json.JSONTokener:java.lang.Object nextValue()",
            "cn.hutool.json.JSONTokener:cn.hutool.json.JSONArray toJSONArray()"
        ]
    },
    "cn.hutool.json.JSONTokener:java.lang.String nextString(char)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.json.JSONTokener:java.lang.Object nextValue()"
        ]
    },
    "cn.hutool.json.JSONTokener:java.lang.String nextTo(char)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.json.JSONTokener:java.lang.String nextTo(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.json.XMLTokener:java.lang.String nextCDATA()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.json.XML:boolean parse(cn.hutool.json.XMLTokener,cn.hutool.json.JSONObject,java.lang.String,boolean)"
        ]
    },
    "cn.hutool.json.XMLTokener:java.lang.Object nextMeta()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.json.XML:boolean parse(cn.hutool.json.XMLTokener,cn.hutool.json.JSONObject,java.lang.String,boolean)"
        ]
    },
    "cn.hutool.json.XMLTokener:boolean skipPast(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.json.XML:boolean parse(cn.hutool.json.XMLTokener,cn.hutool.json.JSONObject,java.lang.String,boolean)",
            "cn.hutool.json.XML:cn.hutool.json.JSONObject toJSONObject(java.lang.String,boolean)"
        ]
    },
    "cn.hutool.poi.excel.sax.Excel03SaxReader:java.lang.Object read(java.io.File,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.poi.excel.sax.AbstractExcelSaxReader:java.lang.Object read(java.io.File)",
            "cn.hutool.poi.excel.sax.AbstractExcelSaxReader:java.lang.Object read(java.lang.String,int)"
        ]
    },
    "cn.hutool.poi.excel.sax.Excel03SaxReader:java.lang.Object read(java.io.InputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.poi.excel.sax.AbstractExcelSaxReader:java.lang.Object read(java.io.InputStream)"
        ]
    },
    "cn.hutool.poi.excel.WorkbookUtil:org.apache.poi.ss.usermodel.Workbook createBook(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.poi.excel.ExcelReader:void <init>(java.io.File,int)",
            "cn.hutool.poi.excel.ExcelReader:void <init>(java.io.File,java.lang.String)"
        ]
    },
    "cn.hutool.core.io.resource.FileResource:void <init>(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.resource.FileResource:void <init>(java.lang.String)",
            "cn.hutool.core.io.resource.MultiFileResource:cn.hutool.core.io.resource.MultiFileResource add(java.io.File[])",
            "cn.hutool.core.io.resource.MultiFileResource:cn.hutool.core.io.resource.MultiFileResource add(java.util.Collection)",
            "cn.hutool.setting.dialect.Props:void <init>(java.io.File,java.nio.charset.Charset)",
            "cn.hutool.setting.Setting:void <init>(java.io.File,java.nio.charset.Charset,boolean)"
        ]
    },
    "cn.hutool.core.util.XmlUtil:org.w3c.dom.Document createXml(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.file.FileWriter:cn.hutool.core.io.file.FileWriter create(java.io.File,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.file.FileAppender:void <init>(java.io.File,java.nio.charset.Charset,int,boolean)",
            "cn.hutool.core.io.FileUtil:java.io.BufferedWriter getWriter(java.io.File,java.nio.charset.Charset,boolean)",
            "cn.hutool.core.io.FileUtil:java.io.File writeString(java.lang.String,java.io.File,java.lang.String)",
            "cn.hutool.core.io.FileUtil:java.io.File writeString(java.lang.String,java.io.File,java.nio.charset.Charset)",
            "cn.hutool.core.io.FileUtil:java.io.File appendString(java.lang.String,java.io.File,java.lang.String)",
            "cn.hutool.core.io.FileUtil:java.io.File appendString(java.lang.String,java.io.File,java.nio.charset.Charset)",
            "cn.hutool.core.io.FileUtil:java.io.File writeLines(java.util.Collection,java.io.File,java.lang.String,boolean)",
            "cn.hutool.core.io.FileUtil:java.io.File writeLines(java.util.Collection,java.io.File,java.nio.charset.Charset,boolean)",
            "cn.hutool.core.io.FileUtil:java.io.File writeUtf8Map(java.util.Map,java.io.File,java.lang.String,boolean)",
            "cn.hutool.core.io.FileUtil:java.io.File writeMap(java.util.Map,java.io.File,java.nio.charset.Charset,java.lang.String,boolean)",
            "cn.hutool.core.io.FileUtil:java.io.File convertLineSeparator(java.io.File,java.nio.charset.Charset,cn.hutool.core.io.file.LineSeparator)"
        ]
    },
    "cn.hutool.core.io.file.FileWriter:void <init>(java.io.File,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.file.FileWriter:void <init>(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.file.FileWriter:cn.hutool.core.io.file.FileWriter create(java.io.File)"
        ]
    },
    "cn.hutool.core.io.IoUtil:long copy(java.io.InputStream,java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.file.FileReader:java.io.File writeToStream(java.io.OutputStream)",
            "cn.hutool.core.io.file.FileWriter:java.io.File writeFromStream(java.io.InputStream)",
            "cn.hutool.core.io.IoUtil:cn.hutool.core.io.FastByteArrayOutputStream read(java.io.InputStream)",
            "cn.hutool.core.io.IoUtil:byte[] readBytes(java.io.InputStream)",
            "cn.hutool.core.io.IoUtil:java.util.zip.Checksum checksum(java.io.InputStream,java.util.zip.Checksum)",
            "cn.hutool.core.util.ZipUtil:byte[] gzip(java.io.File)",
            "cn.hutool.core.util.ZipUtil:byte[] unGzip(byte[])",
            "cn.hutool.core.util.ZipUtil:void addFile(java.io.InputStream,java.lang.String,java.util.zip.ZipOutputStream)",
            "cn.hutool.core.util.ZipUtil:void copy(java.util.zip.ZipFile,java.util.zip.ZipEntry,java.io.File)",
            "cn.hutool.core.util.ZipUtil:void inflater(java.io.InputStream,java.io.OutputStream)",
            "cn.hutool.core.util.ZipUtil:void deflater(java.io.InputStream,java.io.OutputStream,int)",
            "cn.hutool.http.HttpRequest:void appendPart(java.lang.String,cn.hutool.core.io.resource.Resource,java.io.OutputStream)",
            "cn.hutool.http.HttpResponse:void readBody(java.io.InputStream)"
        ]
    },
    "cn.hutool.core.bean.BeanUtil:cn.hutool.core.bean.DynaBean createDynaBean(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.bean.DynaBean:cn.hutool.core.bean.DynaBean create(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.text.csv.CsvReader:cn.hutool.core.text.csv.CsvData read(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.NumberUtil:java.math.BigDecimal div(java.lang.String,java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.NumberUtil:java.math.BigDecimal div(java.lang.String,java.lang.String)"
        ]
    },
    "cn.hutool.core.util.NumberUtil:double div(float,float,int,java.math.RoundingMode)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.NumberUtil:double div(float,float,int)"
        ]
    },
    "cn.hutool.core.util.NumberUtil:double div(float,double,int,java.math.RoundingMode)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.NumberUtil:double div(float,double,int)"
        ]
    },
    "cn.hutool.core.util.NumberUtil:double div(double,float,int,java.math.RoundingMode)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.NumberUtil:double div(double,float,int)"
        ]
    },
    "cn.hutool.core.util.NumberUtil:double div(double,double,int,java.math.RoundingMode)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.NumberUtil:double div(double,double,int)"
        ]
    },
    "cn.hutool.core.util.NumberUtil:java.math.BigDecimal div(java.lang.Number,java.lang.Number,int,java.math.RoundingMode)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.NumberUtil:java.math.BigDecimal div(java.lang.Number,java.lang.Number,int)",
            "cn.hutool.core.util.NumberUtil:double div(java.lang.Double,java.lang.Double,int,java.math.RoundingMode)"
        ]
    },
    "cn.hutool.poi.excel.ExcelReader:void <init>(org.apache.poi.ss.usermodel.Workbook,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.poi.excel.ExcelReader:void <init>(java.io.File,int)",
            "cn.hutool.poi.excel.ExcelReader:void <init>(java.io.InputStream,int,boolean)"
        ]
    },
    "cn.hutool.poi.excel.ExcelReader:void <init>(org.apache.poi.ss.usermodel.Workbook,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.poi.excel.ExcelReader:void <init>(java.io.File,java.lang.String)",
            "cn.hutool.poi.excel.ExcelReader:void <init>(java.io.InputStream,java.lang.String,boolean)"
        ]
    },
    "cn.hutool.poi.excel.ExcelReader:cn.hutool.poi.excel.ExcelWriter getWriter()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.poi.excel.ExcelWriter:void <init>(org.apache.poi.ss.usermodel.Workbook,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.poi.excel.ExcelWriter:void <init>(boolean)",
            "cn.hutool.poi.excel.ExcelWriter:void <init>(boolean,java.lang.String)",
            "cn.hutool.poi.excel.ExcelWriter:void <init>(java.io.File,java.lang.String)"
        ]
    },
    "cn.hutool.core.util.NumberUtil:java.math.BigDecimal round(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.NumberUtil:java.lang.String roundStr(java.lang.String,int)"
        ]
    },
    "cn.hutool.core.util.NumberUtil:java.math.BigDecimal round(double,int,java.math.RoundingMode)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.NumberUtil:java.math.BigDecimal round(double,int)",
            "cn.hutool.core.util.NumberUtil:java.lang.String roundStr(double,int,java.math.RoundingMode)",
            "cn.hutool.core.util.RandomUtil:double randomDouble(double,double,int,java.math.RoundingMode)",
            "cn.hutool.core.util.RandomUtil:double randomDouble(int,java.math.RoundingMode)",
            "cn.hutool.core.util.RandomUtil:double randomDouble(double,int,java.math.RoundingMode)"
        ]
    },
    "cn.hutool.core.util.NumberUtil:java.lang.String roundStr(java.lang.String,int,java.math.RoundingMode)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.symmetric.SymmetricCrypto:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.symmetric.SymmetricCrypto:void <init>(cn.hutool.crypto.symmetric.SymmetricAlgorithm,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.symmetric.AES:void <init>(byte[])",
            "cn.hutool.crypto.symmetric.DES:void <init>(byte[])",
            "cn.hutool.crypto.symmetric.DESede:void <init>(byte[])",
            "cn.hutool.crypto.symmetric.SymmetricCrypto:void <init>(cn.hutool.crypto.symmetric.SymmetricAlgorithm)"
        ]
    },
    "cn.hutool.aop.interceptor.CglibInterceptor:java.lang.Object intercept(java.lang.Object,java.lang.reflect.Method,java.lang.Object[],net.sf.cglib.proxy.MethodProxy)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.system.JavaInfo:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.system.JavaRuntimeInfo:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.system.JavaRuntimeInfo:java.lang.String[] getClassPathArray()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.system.JavaRuntimeInfo:java.lang.String[] getLibraryPathArray()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.system.JavaRuntimeInfo:java.lang.String getProtocolPackages()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.system.JavaRuntimeInfo:java.lang.String toString()"
        ]
    },
    "cn.hutool.system.JavaSpecInfo:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.system.JvmInfo:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.system.JvmSpecInfo:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.system.OsInfo:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.system.SystemUtil:java.lang.String get(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.system.SystemUtil:java.lang.String get(java.lang.String)"
        ]
    },
    "cn.hutool.system.UserInfo:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.symmetric.AES:void <init>(cn.hutool.crypto.Mode,cn.hutool.crypto.Padding)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.symmetric.AES:void <init>(cn.hutool.crypto.Mode,cn.hutool.crypto.Padding,byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.symmetric.DES:void <init>(cn.hutool.crypto.Mode,cn.hutool.crypto.Padding)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.symmetric.DES:void <init>(cn.hutool.crypto.Mode,cn.hutool.crypto.Padding,byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.symmetric.DESede:void <init>(cn.hutool.crypto.Mode,cn.hutool.crypto.Padding,byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.symmetric.DESede:void <init>(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.symmetric.DESede:void <init>(cn.hutool.crypto.Mode,cn.hutool.crypto.Padding)"
        ]
    },
    "cn.hutool.extra.ftp.Ftp:void <init>(java.lang.String,int,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.ftp.Ftp:void <init>(java.lang.String,int)"
        ]
    },
    "cn.hutool.extra.servlet.multipart.MultipartRequestInputStream:cn.hutool.extra.servlet.multipart.UploadFileHeader readDataHeader(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.servlet.multipart.MultipartFormData:void parseRequestStream(java.io.InputStream,java.lang.String)"
        ]
    },
    "cn.hutool.http.HttpUtil:java.lang.String urlWithForm(java.lang.String,java.lang.String,java.nio.charset.Charset,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.http.HttpRequest:void urlWithParamIfGet()",
            "cn.hutool.http.HttpUtil:java.lang.String urlWithForm(java.lang.String,java.util.Map,java.nio.charset.Charset,boolean)"
        ]
    },
    "cn.hutool.log.dialect.slf4j.Slf4jLog:void trace(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.StaticLog:void trace(cn.hutool.log.Log,java.lang.String,java.lang.Object[])"
        ]
    },
    "cn.hutool.log.dialect.slf4j.Slf4jLog:void debug(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.DbUtil:void setShowSqlGlobal(cn.hutool.setting.Setting)",
            "cn.hutool.db.ds.DSFactory:cn.hutool.db.ds.DSFactory create(cn.hutool.setting.Setting)",
            "cn.hutool.db.nosql.mongo.MongoDS:com.mongodb.MongoClientOptions$Builder buildMongoClientOptions(com.mongodb.MongoClientOptions$Builder,java.lang.String)",
            "cn.hutool.extra.servlet.multipart.UploadFile:boolean processStream(cn.hutool.extra.servlet.multipart.MultipartRequestInputStream)",
            "cn.hutool.http.HttpConnection:cn.hutool.http.HttpConnection setCookie(java.lang.String)",
            "cn.hutool.log.GlobalLogFactory:cn.hutool.log.LogFactory set(cn.hutool.log.LogFactory)",
            "cn.hutool.log.LogFactory:cn.hutool.log.LogFactory create()",
            "cn.hutool.log.StaticLog:void debug(cn.hutool.log.Log,java.lang.String,java.lang.Object[])",
            "cn.hutool.setting.AbsSetting$1:java.lang.Object value(java.lang.String,java.lang.reflect.Type)",
            "cn.hutool.setting.AbsSetting:java.lang.String getWithLog(java.lang.String)",
            "cn.hutool.setting.AbsSetting:java.lang.String getByGroupWithLog(java.lang.String,java.lang.String)",
            "cn.hutool.setting.dialect.Props:void load(cn.hutool.core.io.resource.Resource)",
            "cn.hutool.setting.SettingLoader:boolean load(cn.hutool.core.io.resource.UrlResource)",
            "cn.hutool.cron.CronTimer:void run()"
        ]
    },
    "cn.hutool.log.dialect.slf4j.Slf4jLog:void info(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.nosql.mongo.MongoDS:void initSingle()",
            "cn.hutool.db.nosql.mongo.MongoDS:void initCloud()",
            "cn.hutool.extra.servlet.multipart.UploadSetting:void load(java.lang.String)",
            "cn.hutool.log.StaticLog:void info(cn.hutool.log.Log,java.lang.String,java.lang.Object[])"
        ]
    },
    "cn.hutool.log.dialect.slf4j.Slf4jLog:void warn(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.DbUtil:void close(java.lang.Object[])"
        ]
    },
    "cn.hutool.log.dialect.slf4j.Slf4jLog:void error(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.date.format.FastDateFormat$1:java.text.Format createInstance(java.lang.String,java.util.TimeZone,java.util.Locale)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.date.format.FormatCache:java.text.Format getInstance(java.lang.String,java.util.TimeZone,java.util.Locale)"
        ]
    },
    "cn.hutool.core.text.StrSpliter:java.lang.String[] splitPathToArray(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.StrUtil:java.lang.String[] splitToArray(java.lang.CharSequence,char)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.NetUtil:boolean isInRange(java.lang.String,java.lang.String)",
            "cn.hutool.core.util.RuntimeUtil:java.lang.Process exec(java.lang.String[])",
            "cn.hutool.core.util.RuntimeUtil:java.lang.Process exec(java.lang.String[],java.io.File,java.lang.String[])"
        ]
    },
    "cn.hutool.core.util.StrUtil:java.util.List split(java.lang.CharSequence,char)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.comparator.VersionComparator:int compare(java.lang.String,java.lang.String)",
            "cn.hutool.core.io.FileUtil:java.lang.String normalize(java.lang.String)",
            "cn.hutool.db.sql.SqlBuilder:void buildValuePartForIN(java.lang.StringBuilder,cn.hutool.db.sql.Condition)",
            "cn.hutool.db.sql.Wrapper:java.lang.String wrap(java.lang.String)",
            "cn.hutool.dfa.SensitiveUtil:void init(java.lang.String,char,boolean)",
            "cn.hutool.cron.pattern.CronPattern:void parseGroupPattern(java.lang.String)",
            "cn.hutool.cron.pattern.matcher.ValueMatcherBuilder:java.util.List parseArray(java.lang.String,cn.hutool.cron.pattern.parser.ValueParser)",
            "cn.hutool.cron.pattern.matcher.ValueMatcherBuilder:java.util.List parseStep(java.lang.String,cn.hutool.cron.pattern.parser.ValueParser)",
            "cn.hutool.cron.pattern.matcher.ValueMatcherBuilder:java.util.List parseRange(java.lang.String,int,cn.hutool.cron.pattern.parser.ValueParser)"
        ]
    },
    "cn.hutool.core.date.DateUtil:int timeToSecond(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.StrUtil:java.util.List splitTrim(java.lang.CharSequence,char)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.BeanPath:java.lang.Object getFieldValue(java.lang.Object,java.lang.String)",
            "cn.hutool.core.date.DateUtil:java.lang.String normalize(java.lang.String)",
            "cn.hutool.core.util.StrUtil:long[] splitToLong(java.lang.CharSequence,char)",
            "cn.hutool.core.util.StrUtil:int[] splitToInt(java.lang.CharSequence,char)",
            "cn.hutool.extra.mail.MailUtil:java.util.List splitAddress(java.lang.String)"
        ]
    },
    "cn.hutool.core.util.StrUtil:java.util.List splitTrim(java.lang.CharSequence,java.lang.CharSequence)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.StrUtil:long[] splitToLong(java.lang.CharSequence,java.lang.CharSequence)",
            "cn.hutool.core.util.StrUtil:int[] splitToInt(java.lang.CharSequence,java.lang.CharSequence)"
        ]
    },
    "cn.hutool.db.sql.Condition:cn.hutool.db.sql.Condition parse(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.sql.Condition:void setValue(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.date.DateUtil:cn.hutool.core.date.DateRange range(java.util.Date,java.util.Date,cn.hutool.core.date.DateField)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.date.DateUtil:java.util.List rangeToList(java.util.Date,java.util.Date,cn.hutool.core.date.DateField)"
        ]
    },
    "cn.hutool.db.handler.EntityHandler:cn.hutool.db.Entity handle(java.sql.ResultSet)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.handler.EntityHandler:java.lang.Object handle(java.sql.ResultSet)"
        ]
    },
    "cn.hutool.db.handler.HandleHelper:cn.hutool.db.Entity handleRow(java.sql.ResultSet)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.text.StrBuilder:cn.hutool.core.text.StrBuilder append(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.sql.NamedSql:void parse(java.lang.String,java.util.Map)"
        ]
    },
    "cn.hutool.system.HostInfo:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.DynaBean:java.lang.String toString()",
            "cn.hutool.core.collection.CollUtil$6:int compare(java.util.Map$Entry,java.util.Map$Entry)",
            "cn.hutool.core.convert.AbstractConverter:java.lang.String convertToStr(java.lang.Object)",
            "cn.hutool.core.convert.impl.ArrayConverter:java.lang.Object convertObjectToArray(java.lang.Object)",
            "cn.hutool.core.convert.impl.CurrencyConverter:java.util.Currency convertInternal(java.lang.Object)",
            "cn.hutool.core.convert.NumberWordFormater:java.lang.String format(java.lang.Object)",
            "cn.hutool.core.getter.OptNullBasicTypeFromStringGetter:java.lang.Object getObj(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.io.file.FileWriter:java.io.File writeLines(java.util.Collection,cn.hutool.core.io.file.LineSeparator,boolean)",
            "cn.hutool.core.io.watch.watchers.DelayWatcher$1:void run()",
            "cn.hutool.core.io.watch.watchers.DelayWatcher:void onDelayModify(java.nio.file.WatchEvent,java.nio.file.Path)",
            "cn.hutool.core.io.watch.WatchMonitor:void watch(cn.hutool.core.io.watch.Watcher)",
            "cn.hutool.core.lang.ConsistentHash$1:java.lang.Integer hash(java.lang.Object)",
            "cn.hutool.core.lang.ConsistentHash:void add(java.lang.Object)",
            "cn.hutool.core.lang.ConsistentHash:void remove(java.lang.Object)",
            "cn.hutool.core.lang.mutable.MutableObj:java.lang.String toString()",
            "cn.hutool.core.map.CamelCaseLinkedMap:java.lang.Object customKey(java.lang.Object)",
            "cn.hutool.core.map.CamelCaseMap:java.lang.Object customKey(java.lang.Object)",
            "cn.hutool.core.map.CaseInsensitiveLinkedMap:java.lang.Object customKey(java.lang.Object)",
            "cn.hutool.core.map.CaseInsensitiveMap:java.lang.Object customKey(java.lang.Object)",
            "cn.hutool.core.util.ArrayUtil:java.lang.String toString(java.lang.Object)",
            "cn.hutool.core.util.ObjectUtil:boolean contains(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.util.StrUtil:java.lang.String str(java.lang.Object,java.nio.charset.Charset)",
            "cn.hutool.core.util.StrUtil:java.lang.String toString(java.lang.Object)",
            "cn.hutool.core.util.XmlUtil:void mapToXml(org.w3c.dom.Document,org.w3c.dom.Element,java.util.Map)",
            "cn.hutool.extra.servlet.ServletUtil:void setHeader(javax.servlet.http.HttpServletResponse,java.lang.String,java.lang.Object)",
            "cn.hutool.extra.template.engine.velocity.VelocityUtil:void toFile(org.apache.velocity.Template,org.apache.velocity.VelocityContext,java.lang.String)",
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest form(java.lang.String,java.lang.Object,java.lang.Object[])",
            "cn.hutool.setting.dialect.Props:java.lang.Object getObj(java.lang.String,java.lang.Object)",
            "cn.hutool.setting.dialect.Props:void setProperty(java.lang.String,java.lang.Object)",
            "cn.hutool.json.InternalJSONUtil:java.io.Writer writeValue(java.io.Writer,java.lang.Object,int,int)",
            "cn.hutool.json.InternalJSONUtil:java.lang.String valueToString(java.lang.Object)",
            "cn.hutool.json.JSONObject:java.io.Writer write(java.io.Writer,int,int)",
            "cn.hutool.json.JSONObject:void init(cn.hutool.json.JSONTokener)",
            "cn.hutool.json.JSONUtil:java.lang.Object wrap(java.lang.Object,boolean)",
            "cn.hutool.json.XML:java.lang.String toXml(java.lang.Object,java.lang.String)",
            "cn.hutool.poi.excel.cell.CellUtil:void setCellValue(org.apache.poi.ss.usermodel.Cell,java.lang.Object,cn.hutool.poi.excel.StyleSet,boolean)",
            "cn.hutool.poi.excel.ExcelReader:java.util.List aliasHeader(java.util.List)"
        ]
    },
    "cn.hutool.system.JavaInfo:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.DynaBean:java.lang.String toString()",
            "cn.hutool.core.collection.CollUtil$6:int compare(java.util.Map$Entry,java.util.Map$Entry)",
            "cn.hutool.core.convert.AbstractConverter:java.lang.String convertToStr(java.lang.Object)",
            "cn.hutool.core.convert.impl.ArrayConverter:java.lang.Object convertObjectToArray(java.lang.Object)",
            "cn.hutool.core.convert.impl.CurrencyConverter:java.util.Currency convertInternal(java.lang.Object)",
            "cn.hutool.core.convert.NumberWordFormater:java.lang.String format(java.lang.Object)",
            "cn.hutool.core.getter.OptNullBasicTypeFromStringGetter:java.lang.Object getObj(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.io.file.FileWriter:java.io.File writeLines(java.util.Collection,cn.hutool.core.io.file.LineSeparator,boolean)",
            "cn.hutool.core.io.watch.watchers.DelayWatcher$1:void run()",
            "cn.hutool.core.io.watch.watchers.DelayWatcher:void onDelayModify(java.nio.file.WatchEvent,java.nio.file.Path)",
            "cn.hutool.core.io.watch.WatchMonitor:void watch(cn.hutool.core.io.watch.Watcher)",
            "cn.hutool.core.lang.ConsistentHash$1:java.lang.Integer hash(java.lang.Object)",
            "cn.hutool.core.lang.ConsistentHash:void add(java.lang.Object)",
            "cn.hutool.core.lang.ConsistentHash:void remove(java.lang.Object)",
            "cn.hutool.core.lang.mutable.MutableObj:java.lang.String toString()",
            "cn.hutool.core.map.CamelCaseLinkedMap:java.lang.Object customKey(java.lang.Object)",
            "cn.hutool.core.map.CamelCaseMap:java.lang.Object customKey(java.lang.Object)",
            "cn.hutool.core.map.CaseInsensitiveLinkedMap:java.lang.Object customKey(java.lang.Object)",
            "cn.hutool.core.map.CaseInsensitiveMap:java.lang.Object customKey(java.lang.Object)",
            "cn.hutool.core.util.ArrayUtil:java.lang.String toString(java.lang.Object)",
            "cn.hutool.core.util.ObjectUtil:boolean contains(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.util.StrUtil:java.lang.String str(java.lang.Object,java.nio.charset.Charset)",
            "cn.hutool.core.util.StrUtil:java.lang.String toString(java.lang.Object)",
            "cn.hutool.core.util.XmlUtil:void mapToXml(org.w3c.dom.Document,org.w3c.dom.Element,java.util.Map)",
            "cn.hutool.extra.servlet.ServletUtil:void setHeader(javax.servlet.http.HttpServletResponse,java.lang.String,java.lang.Object)",
            "cn.hutool.extra.template.engine.velocity.VelocityUtil:void toFile(org.apache.velocity.Template,org.apache.velocity.VelocityContext,java.lang.String)",
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest form(java.lang.String,java.lang.Object,java.lang.Object[])",
            "cn.hutool.setting.dialect.Props:java.lang.Object getObj(java.lang.String,java.lang.Object)",
            "cn.hutool.setting.dialect.Props:void setProperty(java.lang.String,java.lang.Object)",
            "cn.hutool.json.InternalJSONUtil:java.io.Writer writeValue(java.io.Writer,java.lang.Object,int,int)",
            "cn.hutool.json.InternalJSONUtil:java.lang.String valueToString(java.lang.Object)",
            "cn.hutool.json.JSONObject:java.io.Writer write(java.io.Writer,int,int)",
            "cn.hutool.json.JSONObject:void init(cn.hutool.json.JSONTokener)",
            "cn.hutool.json.JSONUtil:java.lang.Object wrap(java.lang.Object,boolean)",
            "cn.hutool.json.XML:java.lang.String toXml(java.lang.Object,java.lang.String)",
            "cn.hutool.poi.excel.cell.CellUtil:void setCellValue(org.apache.poi.ss.usermodel.Cell,java.lang.Object,cn.hutool.poi.excel.StyleSet,boolean)",
            "cn.hutool.poi.excel.ExcelReader:java.util.List aliasHeader(java.util.List)"
        ]
    },
    "cn.hutool.system.JavaRuntimeInfo:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.DynaBean:java.lang.String toString()",
            "cn.hutool.core.collection.CollUtil$6:int compare(java.util.Map$Entry,java.util.Map$Entry)",
            "cn.hutool.core.convert.AbstractConverter:java.lang.String convertToStr(java.lang.Object)",
            "cn.hutool.core.convert.impl.ArrayConverter:java.lang.Object convertObjectToArray(java.lang.Object)",
            "cn.hutool.core.convert.impl.CurrencyConverter:java.util.Currency convertInternal(java.lang.Object)",
            "cn.hutool.core.convert.NumberWordFormater:java.lang.String format(java.lang.Object)",
            "cn.hutool.core.getter.OptNullBasicTypeFromStringGetter:java.lang.Object getObj(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.io.file.FileWriter:java.io.File writeLines(java.util.Collection,cn.hutool.core.io.file.LineSeparator,boolean)",
            "cn.hutool.core.io.watch.watchers.DelayWatcher$1:void run()",
            "cn.hutool.core.io.watch.watchers.DelayWatcher:void onDelayModify(java.nio.file.WatchEvent,java.nio.file.Path)",
            "cn.hutool.core.io.watch.WatchMonitor:void watch(cn.hutool.core.io.watch.Watcher)",
            "cn.hutool.core.lang.ConsistentHash$1:java.lang.Integer hash(java.lang.Object)",
            "cn.hutool.core.lang.ConsistentHash:void add(java.lang.Object)",
            "cn.hutool.core.lang.ConsistentHash:void remove(java.lang.Object)",
            "cn.hutool.core.lang.mutable.MutableObj:java.lang.String toString()",
            "cn.hutool.core.map.CamelCaseLinkedMap:java.lang.Object customKey(java.lang.Object)",
            "cn.hutool.core.map.CamelCaseMap:java.lang.Object customKey(java.lang.Object)",
            "cn.hutool.core.map.CaseInsensitiveLinkedMap:java.lang.Object customKey(java.lang.Object)",
            "cn.hutool.core.map.CaseInsensitiveMap:java.lang.Object customKey(java.lang.Object)",
            "cn.hutool.core.util.ArrayUtil:java.lang.String toString(java.lang.Object)",
            "cn.hutool.core.util.ObjectUtil:boolean contains(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.util.StrUtil:java.lang.String str(java.lang.Object,java.nio.charset.Charset)",
            "cn.hutool.core.util.StrUtil:java.lang.String toString(java.lang.Object)",
            "cn.hutool.core.util.XmlUtil:void mapToXml(org.w3c.dom.Document,org.w3c.dom.Element,java.util.Map)",
            "cn.hutool.extra.servlet.ServletUtil:void setHeader(javax.servlet.http.HttpServletResponse,java.lang.String,java.lang.Object)",
            "cn.hutool.extra.template.engine.velocity.VelocityUtil:void toFile(org.apache.velocity.Template,org.apache.velocity.VelocityContext,java.lang.String)",
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest form(java.lang.String,java.lang.Object,java.lang.Object[])",
            "cn.hutool.setting.dialect.Props:java.lang.Object getObj(java.lang.String,java.lang.Object)",
            "cn.hutool.setting.dialect.Props:void setProperty(java.lang.String,java.lang.Object)",
            "cn.hutool.json.InternalJSONUtil:java.io.Writer writeValue(java.io.Writer,java.lang.Object,int,int)",
            "cn.hutool.json.InternalJSONUtil:java.lang.String valueToString(java.lang.Object)",
            "cn.hutool.json.JSONObject:java.io.Writer write(java.io.Writer,int,int)",
            "cn.hutool.json.JSONObject:void init(cn.hutool.json.JSONTokener)",
            "cn.hutool.json.JSONUtil:java.lang.Object wrap(java.lang.Object,boolean)",
            "cn.hutool.json.XML:java.lang.String toXml(java.lang.Object,java.lang.String)",
            "cn.hutool.poi.excel.cell.CellUtil:void setCellValue(org.apache.poi.ss.usermodel.Cell,java.lang.Object,cn.hutool.poi.excel.StyleSet,boolean)",
            "cn.hutool.poi.excel.ExcelReader:java.util.List aliasHeader(java.util.List)"
        ]
    },
    "cn.hutool.system.JavaSpecInfo:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.DynaBean:java.lang.String toString()",
            "cn.hutool.core.collection.CollUtil$6:int compare(java.util.Map$Entry,java.util.Map$Entry)",
            "cn.hutool.core.convert.AbstractConverter:java.lang.String convertToStr(java.lang.Object)",
            "cn.hutool.core.convert.impl.ArrayConverter:java.lang.Object convertObjectToArray(java.lang.Object)",
            "cn.hutool.core.convert.impl.CurrencyConverter:java.util.Currency convertInternal(java.lang.Object)",
            "cn.hutool.core.convert.NumberWordFormater:java.lang.String format(java.lang.Object)",
            "cn.hutool.core.getter.OptNullBasicTypeFromStringGetter:java.lang.Object getObj(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.io.file.FileWriter:java.io.File writeLines(java.util.Collection,cn.hutool.core.io.file.LineSeparator,boolean)",
            "cn.hutool.core.io.watch.watchers.DelayWatcher$1:void run()",
            "cn.hutool.core.io.watch.watchers.DelayWatcher:void onDelayModify(java.nio.file.WatchEvent,java.nio.file.Path)",
            "cn.hutool.core.io.watch.WatchMonitor:void watch(cn.hutool.core.io.watch.Watcher)",
            "cn.hutool.core.lang.ConsistentHash$1:java.lang.Integer hash(java.lang.Object)",
            "cn.hutool.core.lang.ConsistentHash:void add(java.lang.Object)",
            "cn.hutool.core.lang.ConsistentHash:void remove(java.lang.Object)",
            "cn.hutool.core.lang.mutable.MutableObj:java.lang.String toString()",
            "cn.hutool.core.map.CamelCaseLinkedMap:java.lang.Object customKey(java.lang.Object)",
            "cn.hutool.core.map.CamelCaseMap:java.lang.Object customKey(java.lang.Object)",
            "cn.hutool.core.map.CaseInsensitiveLinkedMap:java.lang.Object customKey(java.lang.Object)",
            "cn.hutool.core.map.CaseInsensitiveMap:java.lang.Object customKey(java.lang.Object)",
            "cn.hutool.core.util.ArrayUtil:java.lang.String toString(java.lang.Object)",
            "cn.hutool.core.util.ObjectUtil:boolean contains(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.util.StrUtil:java.lang.String str(java.lang.Object,java.nio.charset.Charset)",
            "cn.hutool.core.util.StrUtil:java.lang.String toString(java.lang.Object)",
            "cn.hutool.core.util.XmlUtil:void mapToXml(org.w3c.dom.Document,org.w3c.dom.Element,java.util.Map)",
            "cn.hutool.extra.servlet.ServletUtil:void setHeader(javax.servlet.http.HttpServletResponse,java.lang.String,java.lang.Object)",
            "cn.hutool.extra.template.engine.velocity.VelocityUtil:void toFile(org.apache.velocity.Template,org.apache.velocity.VelocityContext,java.lang.String)",
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest form(java.lang.String,java.lang.Object,java.lang.Object[])",
            "cn.hutool.setting.dialect.Props:java.lang.Object getObj(java.lang.String,java.lang.Object)",
            "cn.hutool.setting.dialect.Props:void setProperty(java.lang.String,java.lang.Object)",
            "cn.hutool.json.InternalJSONUtil:java.io.Writer writeValue(java.io.Writer,java.lang.Object,int,int)",
            "cn.hutool.json.InternalJSONUtil:java.lang.String valueToString(java.lang.Object)",
            "cn.hutool.json.JSONObject:java.io.Writer write(java.io.Writer,int,int)",
            "cn.hutool.json.JSONObject:void init(cn.hutool.json.JSONTokener)",
            "cn.hutool.json.JSONUtil:java.lang.Object wrap(java.lang.Object,boolean)",
            "cn.hutool.json.XML:java.lang.String toXml(java.lang.Object,java.lang.String)",
            "cn.hutool.poi.excel.cell.CellUtil:void setCellValue(org.apache.poi.ss.usermodel.Cell,java.lang.Object,cn.hutool.poi.excel.StyleSet,boolean)",
            "cn.hutool.poi.excel.ExcelReader:java.util.List aliasHeader(java.util.List)"
        ]
    },
    "cn.hutool.system.JvmInfo:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.DynaBean:java.lang.String toString()",
            "cn.hutool.core.collection.CollUtil$6:int compare(java.util.Map$Entry,java.util.Map$Entry)",
            "cn.hutool.core.convert.AbstractConverter:java.lang.String convertToStr(java.lang.Object)",
            "cn.hutool.core.convert.impl.ArrayConverter:java.lang.Object convertObjectToArray(java.lang.Object)",
            "cn.hutool.core.convert.impl.CurrencyConverter:java.util.Currency convertInternal(java.lang.Object)",
            "cn.hutool.core.convert.NumberWordFormater:java.lang.String format(java.lang.Object)",
            "cn.hutool.core.getter.OptNullBasicTypeFromStringGetter:java.lang.Object getObj(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.io.file.FileWriter:java.io.File writeLines(java.util.Collection,cn.hutool.core.io.file.LineSeparator,boolean)",
            "cn.hutool.core.io.watch.watchers.DelayWatcher$1:void run()",
            "cn.hutool.core.io.watch.watchers.DelayWatcher:void onDelayModify(java.nio.file.WatchEvent,java.nio.file.Path)",
            "cn.hutool.core.io.watch.WatchMonitor:void watch(cn.hutool.core.io.watch.Watcher)",
            "cn.hutool.core.lang.ConsistentHash$1:java.lang.Integer hash(java.lang.Object)",
            "cn.hutool.core.lang.ConsistentHash:void add(java.lang.Object)",
            "cn.hutool.core.lang.ConsistentHash:void remove(java.lang.Object)",
            "cn.hutool.core.lang.mutable.MutableObj:java.lang.String toString()",
            "cn.hutool.core.map.CamelCaseLinkedMap:java.lang.Object customKey(java.lang.Object)",
            "cn.hutool.core.map.CamelCaseMap:java.lang.Object customKey(java.lang.Object)",
            "cn.hutool.core.map.CaseInsensitiveLinkedMap:java.lang.Object customKey(java.lang.Object)",
            "cn.hutool.core.map.CaseInsensitiveMap:java.lang.Object customKey(java.lang.Object)",
            "cn.hutool.core.util.ArrayUtil:java.lang.String toString(java.lang.Object)",
            "cn.hutool.core.util.ObjectUtil:boolean contains(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.util.StrUtil:java.lang.String str(java.lang.Object,java.nio.charset.Charset)",
            "cn.hutool.core.util.StrUtil:java.lang.String toString(java.lang.Object)",
            "cn.hutool.core.util.XmlUtil:void mapToXml(org.w3c.dom.Document,org.w3c.dom.Element,java.util.Map)",
            "cn.hutool.extra.servlet.ServletUtil:void setHeader(javax.servlet.http.HttpServletResponse,java.lang.String,java.lang.Object)",
            "cn.hutool.extra.template.engine.velocity.VelocityUtil:void toFile(org.apache.velocity.Template,org.apache.velocity.VelocityContext,java.lang.String)",
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest form(java.lang.String,java.lang.Object,java.lang.Object[])",
            "cn.hutool.setting.dialect.Props:java.lang.Object getObj(java.lang.String,java.lang.Object)",
            "cn.hutool.setting.dialect.Props:void setProperty(java.lang.String,java.lang.Object)",
            "cn.hutool.json.InternalJSONUtil:java.io.Writer writeValue(java.io.Writer,java.lang.Object,int,int)",
            "cn.hutool.json.InternalJSONUtil:java.lang.String valueToString(java.lang.Object)",
            "cn.hutool.json.JSONObject:java.io.Writer write(java.io.Writer,int,int)",
            "cn.hutool.json.JSONObject:void init(cn.hutool.json.JSONTokener)",
            "cn.hutool.json.JSONUtil:java.lang.Object wrap(java.lang.Object,boolean)",
            "cn.hutool.json.XML:java.lang.String toXml(java.lang.Object,java.lang.String)",
            "cn.hutool.poi.excel.cell.CellUtil:void setCellValue(org.apache.poi.ss.usermodel.Cell,java.lang.Object,cn.hutool.poi.excel.StyleSet,boolean)",
            "cn.hutool.poi.excel.ExcelReader:java.util.List aliasHeader(java.util.List)"
        ]
    },
    "cn.hutool.system.JvmSpecInfo:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.DynaBean:java.lang.String toString()",
            "cn.hutool.core.collection.CollUtil$6:int compare(java.util.Map$Entry,java.util.Map$Entry)",
            "cn.hutool.core.convert.AbstractConverter:java.lang.String convertToStr(java.lang.Object)",
            "cn.hutool.core.convert.impl.ArrayConverter:java.lang.Object convertObjectToArray(java.lang.Object)",
            "cn.hutool.core.convert.impl.CurrencyConverter:java.util.Currency convertInternal(java.lang.Object)",
            "cn.hutool.core.convert.NumberWordFormater:java.lang.String format(java.lang.Object)",
            "cn.hutool.core.getter.OptNullBasicTypeFromStringGetter:java.lang.Object getObj(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.io.file.FileWriter:java.io.File writeLines(java.util.Collection,cn.hutool.core.io.file.LineSeparator,boolean)",
            "cn.hutool.core.io.watch.watchers.DelayWatcher$1:void run()",
            "cn.hutool.core.io.watch.watchers.DelayWatcher:void onDelayModify(java.nio.file.WatchEvent,java.nio.file.Path)",
            "cn.hutool.core.io.watch.WatchMonitor:void watch(cn.hutool.core.io.watch.Watcher)",
            "cn.hutool.core.lang.ConsistentHash$1:java.lang.Integer hash(java.lang.Object)",
            "cn.hutool.core.lang.ConsistentHash:void add(java.lang.Object)",
            "cn.hutool.core.lang.ConsistentHash:void remove(java.lang.Object)",
            "cn.hutool.core.lang.mutable.MutableObj:java.lang.String toString()",
            "cn.hutool.core.map.CamelCaseLinkedMap:java.lang.Object customKey(java.lang.Object)",
            "cn.hutool.core.map.CamelCaseMap:java.lang.Object customKey(java.lang.Object)",
            "cn.hutool.core.map.CaseInsensitiveLinkedMap:java.lang.Object customKey(java.lang.Object)",
            "cn.hutool.core.map.CaseInsensitiveMap:java.lang.Object customKey(java.lang.Object)",
            "cn.hutool.core.util.ArrayUtil:java.lang.String toString(java.lang.Object)",
            "cn.hutool.core.util.ObjectUtil:boolean contains(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.util.StrUtil:java.lang.String str(java.lang.Object,java.nio.charset.Charset)",
            "cn.hutool.core.util.StrUtil:java.lang.String toString(java.lang.Object)",
            "cn.hutool.core.util.XmlUtil:void mapToXml(org.w3c.dom.Document,org.w3c.dom.Element,java.util.Map)",
            "cn.hutool.extra.servlet.ServletUtil:void setHeader(javax.servlet.http.HttpServletResponse,java.lang.String,java.lang.Object)",
            "cn.hutool.extra.template.engine.velocity.VelocityUtil:void toFile(org.apache.velocity.Template,org.apache.velocity.VelocityContext,java.lang.String)",
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest form(java.lang.String,java.lang.Object,java.lang.Object[])",
            "cn.hutool.setting.dialect.Props:java.lang.Object getObj(java.lang.String,java.lang.Object)",
            "cn.hutool.setting.dialect.Props:void setProperty(java.lang.String,java.lang.Object)",
            "cn.hutool.json.InternalJSONUtil:java.io.Writer writeValue(java.io.Writer,java.lang.Object,int,int)",
            "cn.hutool.json.InternalJSONUtil:java.lang.String valueToString(java.lang.Object)",
            "cn.hutool.json.JSONObject:java.io.Writer write(java.io.Writer,int,int)",
            "cn.hutool.json.JSONObject:void init(cn.hutool.json.JSONTokener)",
            "cn.hutool.json.JSONUtil:java.lang.Object wrap(java.lang.Object,boolean)",
            "cn.hutool.json.XML:java.lang.String toXml(java.lang.Object,java.lang.String)",
            "cn.hutool.poi.excel.cell.CellUtil:void setCellValue(org.apache.poi.ss.usermodel.Cell,java.lang.Object,cn.hutool.poi.excel.StyleSet,boolean)",
            "cn.hutool.poi.excel.ExcelReader:java.util.List aliasHeader(java.util.List)"
        ]
    },
    "cn.hutool.system.OsInfo:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.DynaBean:java.lang.String toString()",
            "cn.hutool.core.collection.CollUtil$6:int compare(java.util.Map$Entry,java.util.Map$Entry)",
            "cn.hutool.core.convert.AbstractConverter:java.lang.String convertToStr(java.lang.Object)",
            "cn.hutool.core.convert.impl.ArrayConverter:java.lang.Object convertObjectToArray(java.lang.Object)",
            "cn.hutool.core.convert.impl.CurrencyConverter:java.util.Currency convertInternal(java.lang.Object)",
            "cn.hutool.core.convert.NumberWordFormater:java.lang.String format(java.lang.Object)",
            "cn.hutool.core.getter.OptNullBasicTypeFromStringGetter:java.lang.Object getObj(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.io.file.FileWriter:java.io.File writeLines(java.util.Collection,cn.hutool.core.io.file.LineSeparator,boolean)",
            "cn.hutool.core.io.watch.watchers.DelayWatcher$1:void run()",
            "cn.hutool.core.io.watch.watchers.DelayWatcher:void onDelayModify(java.nio.file.WatchEvent,java.nio.file.Path)",
            "cn.hutool.core.io.watch.WatchMonitor:void watch(cn.hutool.core.io.watch.Watcher)",
            "cn.hutool.core.lang.ConsistentHash$1:java.lang.Integer hash(java.lang.Object)",
            "cn.hutool.core.lang.ConsistentHash:void add(java.lang.Object)",
            "cn.hutool.core.lang.ConsistentHash:void remove(java.lang.Object)",
            "cn.hutool.core.lang.mutable.MutableObj:java.lang.String toString()",
            "cn.hutool.core.map.CamelCaseLinkedMap:java.lang.Object customKey(java.lang.Object)",
            "cn.hutool.core.map.CamelCaseMap:java.lang.Object customKey(java.lang.Object)",
            "cn.hutool.core.map.CaseInsensitiveLinkedMap:java.lang.Object customKey(java.lang.Object)",
            "cn.hutool.core.map.CaseInsensitiveMap:java.lang.Object customKey(java.lang.Object)",
            "cn.hutool.core.util.ArrayUtil:java.lang.String toString(java.lang.Object)",
            "cn.hutool.core.util.ObjectUtil:boolean contains(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.util.StrUtil:java.lang.String str(java.lang.Object,java.nio.charset.Charset)",
            "cn.hutool.core.util.StrUtil:java.lang.String toString(java.lang.Object)",
            "cn.hutool.core.util.XmlUtil:void mapToXml(org.w3c.dom.Document,org.w3c.dom.Element,java.util.Map)",
            "cn.hutool.extra.servlet.ServletUtil:void setHeader(javax.servlet.http.HttpServletResponse,java.lang.String,java.lang.Object)",
            "cn.hutool.extra.template.engine.velocity.VelocityUtil:void toFile(org.apache.velocity.Template,org.apache.velocity.VelocityContext,java.lang.String)",
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest form(java.lang.String,java.lang.Object,java.lang.Object[])",
            "cn.hutool.setting.dialect.Props:java.lang.Object getObj(java.lang.String,java.lang.Object)",
            "cn.hutool.setting.dialect.Props:void setProperty(java.lang.String,java.lang.Object)",
            "cn.hutool.json.InternalJSONUtil:java.io.Writer writeValue(java.io.Writer,java.lang.Object,int,int)",
            "cn.hutool.json.InternalJSONUtil:java.lang.String valueToString(java.lang.Object)",
            "cn.hutool.json.JSONObject:java.io.Writer write(java.io.Writer,int,int)",
            "cn.hutool.json.JSONObject:void init(cn.hutool.json.JSONTokener)",
            "cn.hutool.json.JSONUtil:java.lang.Object wrap(java.lang.Object,boolean)",
            "cn.hutool.json.XML:java.lang.String toXml(java.lang.Object,java.lang.String)",
            "cn.hutool.poi.excel.cell.CellUtil:void setCellValue(org.apache.poi.ss.usermodel.Cell,java.lang.Object,cn.hutool.poi.excel.StyleSet,boolean)",
            "cn.hutool.poi.excel.ExcelReader:java.util.List aliasHeader(java.util.List)"
        ]
    },
    "cn.hutool.system.RuntimeInfo:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.DynaBean:java.lang.String toString()",
            "cn.hutool.core.collection.CollUtil$6:int compare(java.util.Map$Entry,java.util.Map$Entry)",
            "cn.hutool.core.convert.AbstractConverter:java.lang.String convertToStr(java.lang.Object)",
            "cn.hutool.core.convert.impl.ArrayConverter:java.lang.Object convertObjectToArray(java.lang.Object)",
            "cn.hutool.core.convert.impl.CurrencyConverter:java.util.Currency convertInternal(java.lang.Object)",
            "cn.hutool.core.convert.NumberWordFormater:java.lang.String format(java.lang.Object)",
            "cn.hutool.core.getter.OptNullBasicTypeFromStringGetter:java.lang.Object getObj(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.io.file.FileWriter:java.io.File writeLines(java.util.Collection,cn.hutool.core.io.file.LineSeparator,boolean)",
            "cn.hutool.core.io.watch.watchers.DelayWatcher$1:void run()",
            "cn.hutool.core.io.watch.watchers.DelayWatcher:void onDelayModify(java.nio.file.WatchEvent,java.nio.file.Path)",
            "cn.hutool.core.io.watch.WatchMonitor:void watch(cn.hutool.core.io.watch.Watcher)",
            "cn.hutool.core.lang.ConsistentHash$1:java.lang.Integer hash(java.lang.Object)",
            "cn.hutool.core.lang.ConsistentHash:void add(java.lang.Object)",
            "cn.hutool.core.lang.ConsistentHash:void remove(java.lang.Object)",
            "cn.hutool.core.lang.mutable.MutableObj:java.lang.String toString()",
            "cn.hutool.core.map.CamelCaseLinkedMap:java.lang.Object customKey(java.lang.Object)",
            "cn.hutool.core.map.CamelCaseMap:java.lang.Object customKey(java.lang.Object)",
            "cn.hutool.core.map.CaseInsensitiveLinkedMap:java.lang.Object customKey(java.lang.Object)",
            "cn.hutool.core.map.CaseInsensitiveMap:java.lang.Object customKey(java.lang.Object)",
            "cn.hutool.core.util.ArrayUtil:java.lang.String toString(java.lang.Object)",
            "cn.hutool.core.util.ObjectUtil:boolean contains(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.util.StrUtil:java.lang.String str(java.lang.Object,java.nio.charset.Charset)",
            "cn.hutool.core.util.StrUtil:java.lang.String toString(java.lang.Object)",
            "cn.hutool.core.util.XmlUtil:void mapToXml(org.w3c.dom.Document,org.w3c.dom.Element,java.util.Map)",
            "cn.hutool.extra.servlet.ServletUtil:void setHeader(javax.servlet.http.HttpServletResponse,java.lang.String,java.lang.Object)",
            "cn.hutool.extra.template.engine.velocity.VelocityUtil:void toFile(org.apache.velocity.Template,org.apache.velocity.VelocityContext,java.lang.String)",
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest form(java.lang.String,java.lang.Object,java.lang.Object[])",
            "cn.hutool.setting.dialect.Props:java.lang.Object getObj(java.lang.String,java.lang.Object)",
            "cn.hutool.setting.dialect.Props:void setProperty(java.lang.String,java.lang.Object)",
            "cn.hutool.json.InternalJSONUtil:java.io.Writer writeValue(java.io.Writer,java.lang.Object,int,int)",
            "cn.hutool.json.InternalJSONUtil:java.lang.String valueToString(java.lang.Object)",
            "cn.hutool.json.JSONObject:java.io.Writer write(java.io.Writer,int,int)",
            "cn.hutool.json.JSONObject:void init(cn.hutool.json.JSONTokener)",
            "cn.hutool.json.JSONUtil:java.lang.Object wrap(java.lang.Object,boolean)",
            "cn.hutool.json.XML:java.lang.String toXml(java.lang.Object,java.lang.String)",
            "cn.hutool.poi.excel.cell.CellUtil:void setCellValue(org.apache.poi.ss.usermodel.Cell,java.lang.Object,cn.hutool.poi.excel.StyleSet,boolean)",
            "cn.hutool.poi.excel.ExcelReader:java.util.List aliasHeader(java.util.List)"
        ]
    },
    "cn.hutool.system.UserInfo:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.DynaBean:java.lang.String toString()",
            "cn.hutool.core.collection.CollUtil$6:int compare(java.util.Map$Entry,java.util.Map$Entry)",
            "cn.hutool.core.convert.AbstractConverter:java.lang.String convertToStr(java.lang.Object)",
            "cn.hutool.core.convert.impl.ArrayConverter:java.lang.Object convertObjectToArray(java.lang.Object)",
            "cn.hutool.core.convert.impl.CurrencyConverter:java.util.Currency convertInternal(java.lang.Object)",
            "cn.hutool.core.convert.NumberWordFormater:java.lang.String format(java.lang.Object)",
            "cn.hutool.core.getter.OptNullBasicTypeFromStringGetter:java.lang.Object getObj(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.io.file.FileWriter:java.io.File writeLines(java.util.Collection,cn.hutool.core.io.file.LineSeparator,boolean)",
            "cn.hutool.core.io.watch.watchers.DelayWatcher$1:void run()",
            "cn.hutool.core.io.watch.watchers.DelayWatcher:void onDelayModify(java.nio.file.WatchEvent,java.nio.file.Path)",
            "cn.hutool.core.io.watch.WatchMonitor:void watch(cn.hutool.core.io.watch.Watcher)",
            "cn.hutool.core.lang.ConsistentHash$1:java.lang.Integer hash(java.lang.Object)",
            "cn.hutool.core.lang.ConsistentHash:void add(java.lang.Object)",
            "cn.hutool.core.lang.ConsistentHash:void remove(java.lang.Object)",
            "cn.hutool.core.lang.mutable.MutableObj:java.lang.String toString()",
            "cn.hutool.core.map.CamelCaseLinkedMap:java.lang.Object customKey(java.lang.Object)",
            "cn.hutool.core.map.CamelCaseMap:java.lang.Object customKey(java.lang.Object)",
            "cn.hutool.core.map.CaseInsensitiveLinkedMap:java.lang.Object customKey(java.lang.Object)",
            "cn.hutool.core.map.CaseInsensitiveMap:java.lang.Object customKey(java.lang.Object)",
            "cn.hutool.core.util.ArrayUtil:java.lang.String toString(java.lang.Object)",
            "cn.hutool.core.util.ObjectUtil:boolean contains(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.util.StrUtil:java.lang.String str(java.lang.Object,java.nio.charset.Charset)",
            "cn.hutool.core.util.StrUtil:java.lang.String toString(java.lang.Object)",
            "cn.hutool.core.util.XmlUtil:void mapToXml(org.w3c.dom.Document,org.w3c.dom.Element,java.util.Map)",
            "cn.hutool.extra.servlet.ServletUtil:void setHeader(javax.servlet.http.HttpServletResponse,java.lang.String,java.lang.Object)",
            "cn.hutool.extra.template.engine.velocity.VelocityUtil:void toFile(org.apache.velocity.Template,org.apache.velocity.VelocityContext,java.lang.String)",
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest form(java.lang.String,java.lang.Object,java.lang.Object[])",
            "cn.hutool.setting.dialect.Props:java.lang.Object getObj(java.lang.String,java.lang.Object)",
            "cn.hutool.setting.dialect.Props:void setProperty(java.lang.String,java.lang.Object)",
            "cn.hutool.json.InternalJSONUtil:java.io.Writer writeValue(java.io.Writer,java.lang.Object,int,int)",
            "cn.hutool.json.InternalJSONUtil:java.lang.String valueToString(java.lang.Object)",
            "cn.hutool.json.JSONObject:java.io.Writer write(java.io.Writer,int,int)",
            "cn.hutool.json.JSONObject:void init(cn.hutool.json.JSONTokener)",
            "cn.hutool.json.JSONUtil:java.lang.Object wrap(java.lang.Object,boolean)",
            "cn.hutool.json.XML:java.lang.String toXml(java.lang.Object,java.lang.String)",
            "cn.hutool.poi.excel.cell.CellUtil:void setCellValue(org.apache.poi.ss.usermodel.Cell,java.lang.Object,cn.hutool.poi.excel.StyleSet,boolean)",
            "cn.hutool.poi.excel.ExcelReader:java.util.List aliasHeader(java.util.List)"
        ]
    },
    "cn.hutool.setting.dialect.Props:java.lang.Byte getByte(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.setting.dialect.Props:java.lang.Short getShort(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.lang.Validator:void validateBirthday(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.setting.dialect.Props:java.lang.Integer getInt(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.setting.dialect.Props:java.lang.Long getLong(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.setting.dialect.Props:java.lang.Double getDouble(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.setting.dialect.Props:java.lang.Float getFloat(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.setting.dialect.Props:java.lang.Boolean getBool(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.lang.Dict:java.math.BigInteger getBigInteger(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.lang.Dict:java.math.BigDecimal getBigDecimal(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.setting.dialect.Props:java.util.Date getDate(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.lang.Validator:void validateGeneral(java.lang.String,int,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.extra.qrcode.QrCodeUtil:byte[] generatePng(java.lang.String,int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.date.DateUtil:cn.hutool.core.date.DateTime parseDateTime(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.date.DateUtil:cn.hutool.core.date.DateTime parse(java.lang.String)"
        ]
    },
    "cn.hutool.core.date.DateUtil:cn.hutool.core.date.DateTime parseDate(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.date.DateUtil:cn.hutool.core.date.DateTime parse(java.lang.String)"
        ]
    },
    "cn.hutool.core.date.DateUtil:cn.hutool.core.date.DateTime parseTime(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.date.DateUtil:cn.hutool.core.date.DateTime parse(java.lang.String)"
        ]
    },
    "cn.hutool.core.date.Week$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.date.Week$1:void <clinit>()",
            "cn.hutool.core.date.Week:java.lang.String toChinese(java.lang.String)"
        ]
    },
    "cn.hutool.core.util.ReferenceUtil$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ReferenceUtil$1:void <clinit>()",
            "cn.hutool.core.util.ReferenceUtil:java.lang.ref.Reference create(cn.hutool.core.util.ReferenceUtil$ReferenceType,java.lang.Object,java.lang.ref.ReferenceQueue)"
        ]
    },
    "cn.hutool.crypto.asymmetric.BaseAsymmetric$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.asymmetric.BaseAsymmetric$1:void <clinit>()",
            "cn.hutool.crypto.asymmetric.BaseAsymmetric:java.security.Key getKeyByType(cn.hutool.crypto.asymmetric.KeyType)"
        ]
    },
    "cn.hutool.crypto.digest.BCrypt:byte[] crypt(byte[],byte[],int,int[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.digest.BCrypt:java.lang.String hashpw(java.lang.String,java.lang.String)"
        ]
    },
    "cn.hutool.crypto.digest.BCrypt:java.lang.String hashpw(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.digest.DigestUtil:java.lang.String bcrypt(java.lang.String)"
        ]
    },
    "cn.hutool.crypto.digest.BCrypt:boolean checkpw(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.digest.DigestUtil:boolean bcryptCheck(java.lang.String,java.lang.String)"
        ]
    },
    "cn.hutool.db.sql.SqlUtil$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.sql.SqlUtil$1:void <clinit>()",
            "cn.hutool.db.sql.SqlUtil:java.lang.String buildLikeValue(java.lang.String,cn.hutool.db.sql.Condition$LikeType,boolean)"
        ]
    },
    "cn.hutool.extra.template.engine.beetl.BeetlEngine$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.template.engine.beetl.BeetlEngine$1:void <clinit>()",
            "cn.hutool.extra.template.engine.beetl.BeetlEngine:org.beetl.core.GroupTemplate createEngine(cn.hutool.extra.template.TemplateConfig)"
        ]
    },
    "cn.hutool.extra.template.engine.freemarker.FreemarkerEngine$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.template.engine.freemarker.FreemarkerEngine$1:void <clinit>()",
            "cn.hutool.extra.template.engine.freemarker.FreemarkerEngine:freemarker.template.Configuration createCfg(cn.hutool.extra.template.TemplateConfig)"
        ]
    },
    "cn.hutool.extra.template.engine.velocity.VelocityEngine$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.template.engine.velocity.VelocityEngine$1:void <clinit>()",
            "cn.hutool.extra.template.engine.velocity.VelocityEngine:org.apache.velocity.app.VelocityEngine createEngine(cn.hutool.extra.template.TemplateConfig)"
        ]
    },
    "cn.hutool.log.AbstractLog$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.AbstractLog$1:void <clinit>()",
            "cn.hutool.log.AbstractLog:boolean isEnabled(cn.hutool.log.level.Level)"
        ]
    },
    "cn.hutool.log.dialect.commons.ApacheCommonsLog$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.dialect.commons.ApacheCommonsLog$1:void <clinit>()",
            "cn.hutool.log.dialect.commons.ApacheCommonsLog:void log(cn.hutool.log.level.Level,java.lang.String,java.lang.Object[])",
            "cn.hutool.log.dialect.commons.ApacheCommonsLog:void log(cn.hutool.log.level.Level,java.lang.Throwable,java.lang.String,java.lang.Object[])"
        ]
    },
    "cn.hutool.log.dialect.commons.ApacheCommonsLog4JLog$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.dialect.commons.ApacheCommonsLog4JLog$1:void <clinit>()",
            "cn.hutool.log.dialect.commons.ApacheCommonsLog4JLog:void log(java.lang.String,cn.hutool.log.level.Level,java.lang.Throwable,java.lang.String,java.lang.Object[])"
        ]
    },
    "cn.hutool.log.dialect.jdk.JdkLog$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.dialect.jdk.JdkLog$1:void <clinit>()",
            "cn.hutool.log.dialect.jdk.JdkLog:void log(java.lang.String,cn.hutool.log.level.Level,java.lang.Throwable,java.lang.String,java.lang.Object[])"
        ]
    },
    "cn.hutool.log.dialect.log4j.Log4jLog$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.dialect.log4j.Log4jLog$1:void <clinit>()",
            "cn.hutool.log.dialect.log4j.Log4jLog:void log(java.lang.String,cn.hutool.log.level.Level,java.lang.Throwable,java.lang.String,java.lang.Object[])"
        ]
    },
    "cn.hutool.log.dialect.log4j2.Log4j2Log$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.dialect.log4j2.Log4j2Log$1:void <clinit>()",
            "cn.hutool.log.dialect.log4j2.Log4j2Log:void log(java.lang.String,cn.hutool.log.level.Level,java.lang.Throwable,java.lang.String,java.lang.Object[])"
        ]
    },
    "cn.hutool.log.dialect.slf4j.Slf4jLog$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.dialect.slf4j.Slf4jLog$1:void <clinit>()",
            "cn.hutool.log.dialect.slf4j.Slf4jLog:void log(java.lang.String,cn.hutool.log.level.Level,java.lang.Throwable,java.lang.String,java.lang.Object[])"
        ]
    },
    "cn.hutool.log.dialect.tinylog.TinyLog$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.dialect.tinylog.TinyLog$1:void <clinit>()",
            "cn.hutool.log.dialect.tinylog.TinyLog:org.pmw.tinylog.Level toTinyLevel(cn.hutool.log.level.Level)"
        ]
    },
    "cn.hutool.poi.excel.sax.ExcelSaxUtil$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.poi.excel.sax.ExcelSaxUtil$1:void <clinit>()",
            "cn.hutool.poi.excel.sax.ExcelSaxUtil:java.lang.Object getDataValue(cn.hutool.poi.excel.sax.CellDataType,java.lang.String,org.apache.poi.xssf.model.SharedStringsTable,java.lang.String)"
        ]
    },
    "cn.hutool.poi.excel.ExcelWriter$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.poi.excel.ExcelWriter$1:void <clinit>()",
            "cn.hutool.poi.excel.ExcelWriter:cn.hutool.poi.excel.ExcelWriter setHeaderOrFooter(java.lang.String,cn.hutool.poi.excel.style.Align,boolean)"
        ]
    },
    "cn.hutool.core.date.format.FastDateFormat:java.lang.Appendable format(long,java.lang.Appendable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.date.format.FastDateFormat:java.lang.Appendable format(java.util.Date,java.lang.Appendable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.date.format.FastDateFormat:java.lang.Appendable format(java.util.Calendar,java.lang.Appendable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.date.format.FastDatePrinter:java.lang.String format(java.util.Calendar)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.date.format.FastDateFormat:java.lang.String format(java.util.Calendar)",
            "cn.hutool.core.date.format.FastDatePrinter:java.lang.String format(java.lang.Object)"
        ]
    },
    "cn.hutool.core.date.format.FastDatePrinter:java.lang.String format(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.date.format.FastDateFormat:java.lang.String format(long)",
            "cn.hutool.core.date.format.FastDatePrinter:java.lang.String format(java.lang.Object)"
        ]
    },
    "cn.hutool.core.date.format.FastDatePrinter:java.lang.String format(java.util.Date)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.date.DateTime:java.lang.String toString(cn.hutool.core.date.format.DatePrinter)",
            "cn.hutool.core.date.DateUtil:java.lang.String format(java.util.Date,cn.hutool.core.date.format.DatePrinter)",
            "cn.hutool.core.date.format.FastDateFormat:java.lang.String format(java.util.Date)",
            "cn.hutool.core.date.format.FastDatePrinter:java.lang.String format(java.lang.Object)"
        ]
    },
    "cn.hutool.core.util.ClipboardUtil:java.lang.String getStr()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ClipboardUtil:java.awt.Image getImage()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.resource.UrlResource:java.io.File getFile()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.watch.WatchMonitor:cn.hutool.core.io.watch.WatchMonitor create(java.net.URL,java.nio.file.WatchEvent$Kind[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.setting.Setting:void autoLoad(boolean)"
        ]
    },
    "cn.hutool.core.io.watch.WatchUtil:cn.hutool.core.io.watch.WatchMonitor create(java.net.URL,java.nio.file.WatchEvent$Kind[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.watch.WatchUtil:cn.hutool.core.io.watch.WatchMonitor createAll(java.net.URL,cn.hutool.core.io.watch.Watcher)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.XmlUtil:org.w3c.dom.Element getElementByXPath(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.FileUtil:java.io.BufferedWriter getWriter(java.io.File,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.FileUtil:java.io.PrintWriter getPrintWriter(java.io.File,java.lang.String,boolean)"
        ]
    },
    "cn.hutool.core.text.csv.CsvWriter:void <init>(java.io.File,java.nio.charset.Charset,boolean,cn.hutool.core.text.csv.CsvWriteConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.text.csv.CsvUtil:cn.hutool.core.text.csv.CsvWriter getWriter(java.io.File,java.nio.charset.Charset,boolean,cn.hutool.core.text.csv.CsvWriteConfig)",
            "cn.hutool.core.text.csv.CsvWriter:void <init>(java.io.File,java.nio.charset.Charset,boolean)",
            "cn.hutool.core.text.csv.CsvWriter:void <init>(java.lang.String,java.nio.charset.Charset,boolean,cn.hutool.core.text.csv.CsvWriteConfig)"
        ]
    },
    "cn.hutool.core.io.FileUtil:java.io.BufferedReader getUtf8Reader(java.nio.file.Path)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.IoUtil:long copy(java.io.Reader,java.io.Writer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.IoUtil:java.lang.String readHex28Upper(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.FileTypeUtil:java.lang.String getType(java.io.InputStream)"
        ]
    },
    "cn.hutool.core.io.IoUtil:java.lang.String readHex28Lower(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.FileUtil:java.io.BufferedReader getReader(java.io.File,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.FileUtil:java.io.BufferedReader getReader(java.lang.String,java.lang.String)"
        ]
    },
    "cn.hutool.core.io.FileUtil:java.io.BufferedReader getReader(java.io.File,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.file.FileReader:java.util.Collection readLines(java.util.Collection)",
            "cn.hutool.core.io.file.FileReader:void readLines(cn.hutool.core.io.LineHandler)",
            "cn.hutool.core.io.file.FileReader:java.lang.Object read(cn.hutool.core.io.file.FileReader$ReaderHandler)",
            "cn.hutool.core.io.FileUtil:boolean contentEqualsIgnoreEOL(java.io.File,java.io.File,java.nio.charset.Charset)",
            "cn.hutool.core.io.FileUtil:java.io.BufferedReader getUtf8Reader(java.io.File)",
            "cn.hutool.core.io.FileUtil:java.io.BufferedReader getReader(java.lang.String,java.nio.charset.Charset)"
        ]
    },
    "cn.hutool.core.io.watch.WatchMonitor:cn.hutool.core.io.watch.WatchMonitor create(java.nio.file.Path,int,java.nio.file.WatchEvent$Kind[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.watch.WatchMonitor:cn.hutool.core.io.watch.WatchMonitor create(java.net.URI,int,java.nio.file.WatchEvent$Kind[])",
            "cn.hutool.core.io.watch.WatchMonitor:cn.hutool.core.io.watch.WatchMonitor create(java.io.File,int,java.nio.file.WatchEvent$Kind[])",
            "cn.hutool.core.io.watch.WatchMonitor:cn.hutool.core.io.watch.WatchMonitor create(java.lang.String,int,java.nio.file.WatchEvent$Kind[])",
            "cn.hutool.core.io.watch.WatchMonitor:cn.hutool.core.io.watch.WatchMonitor create(java.nio.file.Path,java.nio.file.WatchEvent$Kind[])"
        ]
    },
    "cn.hutool.core.io.watch.WatchMonitor:void <init>(java.nio.file.Path,java.nio.file.WatchEvent$Kind[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.watch.WatchMonitor:void <init>(java.io.File,java.nio.file.WatchEvent$Kind[])",
            "cn.hutool.core.io.watch.WatchMonitor:void <init>(java.lang.String,java.nio.file.WatchEvent$Kind[])"
        ]
    },
    "cn.hutool.core.io.watch.WatchUtil:cn.hutool.core.io.watch.WatchMonitor create(java.nio.file.Path,int,java.nio.file.WatchEvent$Kind[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.watch.WatchUtil:cn.hutool.core.io.watch.WatchMonitor create(java.net.URI,int,java.nio.file.WatchEvent$Kind[])",
            "cn.hutool.core.io.watch.WatchUtil:cn.hutool.core.io.watch.WatchMonitor create(java.io.File,int,java.nio.file.WatchEvent$Kind[])",
            "cn.hutool.core.io.watch.WatchUtil:cn.hutool.core.io.watch.WatchMonitor create(java.lang.String,int,java.nio.file.WatchEvent$Kind[])",
            "cn.hutool.core.io.watch.WatchUtil:cn.hutool.core.io.watch.WatchMonitor create(java.nio.file.Path,java.nio.file.WatchEvent$Kind[])",
            "cn.hutool.core.io.watch.WatchUtil:cn.hutool.core.io.watch.WatchMonitor createAll(java.nio.file.Path,int,cn.hutool.core.io.watch.Watcher)"
        ]
    },
    "cn.hutool.core.text.csv.CsvReader:cn.hutool.core.text.csv.CsvData read(java.io.Reader)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.text.csv.CsvReader:cn.hutool.core.text.csv.CsvData read(java.nio.file.Path,java.nio.charset.Charset)"
        ]
    },
    "cn.hutool.core.util.ImageUtil:void scale(java.awt.Image,javax.imageio.stream.ImageOutputStream,float)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ImageUtil:void scale(javax.imageio.stream.ImageInputStream,javax.imageio.stream.ImageOutputStream,float)",
            "cn.hutool.core.util.ImageUtil:void scale(java.awt.Image,java.io.OutputStream,float)"
        ]
    },
    "cn.hutool.core.util.ImageUtil:void scale(java.awt.Image,javax.imageio.stream.ImageOutputStream,int,int,java.awt.Color)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ImageUtil:void scale(java.io.InputStream,java.io.OutputStream,int,int,java.awt.Color)",
            "cn.hutool.core.util.ImageUtil:void scale(javax.imageio.stream.ImageInputStream,javax.imageio.stream.ImageOutputStream,int,int,java.awt.Color)"
        ]
    },
    "cn.hutool.core.util.ImageUtil:void cut(java.awt.Image,javax.imageio.stream.ImageOutputStream,java.awt.Rectangle)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ImageUtil:void cut(javax.imageio.stream.ImageInputStream,javax.imageio.stream.ImageOutputStream,java.awt.Rectangle)",
            "cn.hutool.core.util.ImageUtil:void cut(java.awt.Image,java.io.OutputStream,java.awt.Rectangle)"
        ]
    },
    "cn.hutool.core.util.ImageUtil:void gray(java.awt.Image,javax.imageio.stream.ImageOutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ImageUtil:void gray(java.io.InputStream,java.io.OutputStream)",
            "cn.hutool.core.util.ImageUtil:void gray(javax.imageio.stream.ImageInputStream,javax.imageio.stream.ImageOutputStream)",
            "cn.hutool.core.util.ImageUtil:void gray(java.awt.Image,java.io.OutputStream)"
        ]
    },
    "cn.hutool.core.util.ImageUtil:void pressText(java.awt.Image,javax.imageio.stream.ImageOutputStream,java.lang.String,java.awt.Color,java.awt.Font,int,int,float)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ImageUtil:void pressText(java.io.InputStream,java.io.OutputStream,java.lang.String,java.awt.Color,java.awt.Font,int,int,float)",
            "cn.hutool.core.util.ImageUtil:void pressText(javax.imageio.stream.ImageInputStream,javax.imageio.stream.ImageOutputStream,java.lang.String,java.awt.Color,java.awt.Font,int,int,float)",
            "cn.hutool.core.util.ImageUtil:void pressText(java.awt.Image,java.io.OutputStream,java.lang.String,java.awt.Color,java.awt.Font,int,int,float)"
        ]
    },
    "cn.hutool.core.util.ImageUtil:void pressImage(java.awt.Image,javax.imageio.stream.ImageOutputStream,java.awt.Image,int,int,float)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ImageUtil:void pressImage(java.io.InputStream,java.io.OutputStream,java.awt.Image,int,int,float)",
            "cn.hutool.core.util.ImageUtil:void pressImage(javax.imageio.stream.ImageInputStream,javax.imageio.stream.ImageOutputStream,java.awt.Image,int,int,float)",
            "cn.hutool.core.util.ImageUtil:void pressImage(java.awt.Image,java.io.OutputStream,java.awt.Image,int,int,float)"
        ]
    },
    "cn.hutool.core.util.ImageUtil:void rotate(java.awt.Image,int,javax.imageio.stream.ImageOutputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ImageUtil:void flip(java.awt.Image,javax.imageio.stream.ImageOutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ImageUtil:void flip(java.awt.Image,java.io.OutputStream)"
        ]
    },
    "cn.hutool.core.util.ImageUtil:void createImage(java.lang.String,java.awt.Font,java.awt.Color,java.awt.Color,javax.imageio.stream.ImageOutputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ImageUtil:java.lang.String toBase64(java.awt.Image,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ImageUtil:void writeJpg(java.awt.Image,java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ImageUtil:void writePng(java.awt.Image,java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.captcha.AbstractCaptcha:void createCode()"
        ]
    },
    "cn.hutool.core.util.ImageUtil:java.awt.image.BufferedImage toImage(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.resource.UrlResource:java.io.BufferedReader getReader(java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.resource.MultiResource:java.io.BufferedReader getReader(java.nio.charset.Charset)",
            "cn.hutool.core.io.resource.ResourceUtil:java.io.BufferedReader getReader(java.lang.String,java.nio.charset.Charset)",
            "cn.hutool.core.io.resource.UrlResource:java.lang.String readStr(java.nio.charset.Charset)",
            "cn.hutool.setting.dialect.Props:void load(cn.hutool.core.io.resource.Resource)"
        ]
    },
    "cn.hutool.extra.template.engine.beetl.BeetlEngine:void <init>(cn.hutool.extra.template.TemplateConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.template.engine.beetl.BeetlEngine:void <init>()",
            "cn.hutool.extra.template.engine.EngineFactory:cn.hutool.extra.template.Engine doCreate(cn.hutool.extra.template.TemplateConfig)"
        ]
    },
    "cn.hutool.extra.template.engine.beetl.BeetlUtil:org.beetl.core.Template getStrTemplate(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.template.engine.beetl.BeetlUtil:java.lang.String renderFromStr(java.lang.String,java.util.Map)",
            "cn.hutool.extra.template.engine.beetl.BeetlUtil:java.io.Writer renderFromStr(java.lang.String,java.util.Map,java.io.Writer)"
        ]
    },
    "cn.hutool.extra.template.engine.beetl.BeetlUtil:org.beetl.core.Template getClassPathTemplate(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.template.engine.beetl.BeetlUtil:java.lang.String render(java.lang.String,java.lang.String,java.util.Map)"
        ]
    },
    "cn.hutool.extra.template.engine.beetl.BeetlUtil:org.beetl.core.GroupTemplate createFileGroupTemplate(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.template.engine.beetl.BeetlUtil:org.beetl.core.Template getFileTemplate(java.lang.String,java.lang.String)"
        ]
    },
    "cn.hutool.crypto.asymmetric.BaseAsymmetric:void <init>(java.lang.String,java.security.PrivateKey,java.security.PublicKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.asymmetric.AsymmetricCrypto:void <init>(java.lang.String,java.security.PrivateKey,java.security.PublicKey)",
            "cn.hutool.crypto.asymmetric.BaseAsymmetric:void <init>(cn.hutool.crypto.asymmetric.AsymmetricAlgorithm,java.security.PrivateKey,java.security.PublicKey)",
            "cn.hutool.crypto.asymmetric.Sign:void <init>(java.lang.String,java.security.PrivateKey,java.security.PublicKey)"
        ]
    },
    "cn.hutool.crypto.asymmetric.BaseAsymmetric:cn.hutool.crypto.asymmetric.BaseAsymmetric init(java.lang.String,byte[],byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.asymmetric.BaseAsymmetric:void <init>(java.lang.String,byte[],byte[])"
        ]
    },
    "cn.hutool.crypto.asymmetric.AsymmetricCrypto:java.lang.String encryptHex(java.lang.String,java.nio.charset.Charset,cn.hutool.crypto.asymmetric.KeyType)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.asymmetric.AsymmetricCrypto:java.lang.String encryptBase64(java.lang.String,java.nio.charset.Charset,cn.hutool.crypto.asymmetric.KeyType)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.asymmetric.AsymmetricCrypto:java.lang.String encryptBcd(java.lang.String,cn.hutool.crypto.asymmetric.KeyType,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.asymmetric.AsymmetricCrypto:java.lang.String encryptBcd(java.lang.String,cn.hutool.crypto.asymmetric.KeyType)",
            "cn.hutool.crypto.asymmetric.RSA:java.lang.String encryptStr(java.lang.String,cn.hutool.crypto.asymmetric.KeyType,java.nio.charset.Charset)"
        ]
    },
    "cn.hutool.crypto.asymmetric.AsymmetricCrypto:java.lang.String encryptHex(java.lang.String,cn.hutool.crypto.asymmetric.KeyType)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.asymmetric.AsymmetricCrypto:java.lang.String encryptBase64(java.lang.String,cn.hutool.crypto.asymmetric.KeyType)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.asymmetric.AsymmetricCrypto:java.lang.String encryptHex(java.io.InputStream,cn.hutool.crypto.asymmetric.KeyType)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.asymmetric.AsymmetricCrypto:java.lang.String encryptBase64(java.io.InputStream,cn.hutool.crypto.asymmetric.KeyType)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.asymmetric.AsymmetricCrypto:byte[] decryptFromBcd(java.lang.String,cn.hutool.crypto.asymmetric.KeyType)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.asymmetric.RSA:java.lang.String decryptStr(java.lang.String,cn.hutool.crypto.asymmetric.KeyType,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.asymmetric.RSA:java.lang.String decryptStr(java.lang.String,cn.hutool.crypto.asymmetric.KeyType)"
        ]
    },
    "cn.hutool.crypto.digest.Digester:void <init>(cn.hutool.crypto.digest.DigestAlgorithm)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.digest.DigestUtil:byte[] md5(byte[])",
            "cn.hutool.crypto.digest.DigestUtil:byte[] md5(java.lang.String,java.lang.String)",
            "cn.hutool.crypto.digest.DigestUtil:byte[] md5(java.io.InputStream)",
            "cn.hutool.crypto.digest.DigestUtil:byte[] md5(java.io.File)",
            "cn.hutool.crypto.digest.DigestUtil:java.lang.String md5Hex(byte[])",
            "cn.hutool.crypto.digest.DigestUtil:java.lang.String md5Hex(java.lang.String,java.lang.String)",
            "cn.hutool.crypto.digest.DigestUtil:java.lang.String md5Hex(java.io.InputStream)",
            "cn.hutool.crypto.digest.DigestUtil:java.lang.String md5Hex(java.io.File)",
            "cn.hutool.crypto.digest.DigestUtil:byte[] sha1(byte[])",
            "cn.hutool.crypto.digest.DigestUtil:byte[] sha1(java.lang.String,java.lang.String)",
            "cn.hutool.crypto.digest.DigestUtil:byte[] sha1(java.io.InputStream)",
            "cn.hutool.crypto.digest.DigestUtil:byte[] sha1(java.io.File)",
            "cn.hutool.crypto.digest.DigestUtil:java.lang.String sha1Hex(byte[])",
            "cn.hutool.crypto.digest.DigestUtil:java.lang.String sha1Hex(java.lang.String,java.lang.String)",
            "cn.hutool.crypto.digest.DigestUtil:java.lang.String sha1Hex(java.io.InputStream)",
            "cn.hutool.crypto.digest.DigestUtil:java.lang.String sha1Hex(java.io.File)",
            "cn.hutool.crypto.digest.DigestUtil:byte[] sha256(byte[])",
            "cn.hutool.crypto.digest.DigestUtil:byte[] sha256(java.lang.String,java.lang.String)",
            "cn.hutool.crypto.digest.DigestUtil:byte[] sha256(java.io.InputStream)",
            "cn.hutool.crypto.digest.DigestUtil:byte[] sha256(java.io.File)",
            "cn.hutool.crypto.digest.DigestUtil:java.lang.String sha256Hex(byte[])",
            "cn.hutool.crypto.digest.DigestUtil:java.lang.String sha256Hex(java.lang.String,java.lang.String)",
            "cn.hutool.crypto.digest.DigestUtil:java.lang.String sha256Hex(java.io.InputStream)",
            "cn.hutool.crypto.digest.DigestUtil:java.lang.String sha256Hex(java.io.File)",
            "cn.hutool.crypto.digest.DigestUtil:cn.hutool.crypto.digest.Digester digester(cn.hutool.crypto.digest.DigestAlgorithm)",
            "cn.hutool.crypto.SecureUtil:cn.hutool.crypto.digest.Digester md5()",
            "cn.hutool.crypto.SecureUtil:java.lang.String md5(java.lang.String)",
            "cn.hutool.crypto.SecureUtil:java.lang.String md5(java.io.InputStream)",
            "cn.hutool.crypto.SecureUtil:java.lang.String md5(java.io.File)",
            "cn.hutool.crypto.SecureUtil:cn.hutool.crypto.digest.Digester sha1()",
            "cn.hutool.crypto.SecureUtil:java.lang.String sha1(java.lang.String)",
            "cn.hutool.crypto.SecureUtil:java.lang.String sha1(java.io.InputStream)",
            "cn.hutool.crypto.SecureUtil:java.lang.String sha1(java.io.File)",
            "cn.hutool.crypto.SecureUtil:java.lang.String signParams(cn.hutool.crypto.digest.DigestAlgorithm,java.util.Map,java.lang.String,java.lang.String,boolean)"
        ]
    },
    "cn.hutool.crypto.digest.Digester:java.lang.String digestHex(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.digest.DigestUtil:java.lang.String md5Hex(java.io.InputStream)",
            "cn.hutool.crypto.digest.DigestUtil:java.lang.String sha1Hex(java.io.InputStream)",
            "cn.hutool.crypto.digest.DigestUtil:java.lang.String sha256Hex(java.io.InputStream)",
            "cn.hutool.crypto.SecureUtil:java.lang.String md5(java.io.InputStream)",
            "cn.hutool.crypto.SecureUtil:java.lang.String sha1(java.io.InputStream)"
        ]
    },
    "cn.hutool.crypto.digest.DigestUtil:byte[] md5(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.digest.DigestUtil:byte[] sha1(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.digest.DigestUtil:byte[] sha256(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.digest.DigestUtil:cn.hutool.crypto.digest.HMac hmac(cn.hutool.crypto.digest.HmacAlgorithm,javax.crypto.SecretKey)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.digest.HMac:void <init>(cn.hutool.crypto.digest.HmacAlgorithm)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.SecureUtil:cn.hutool.crypto.digest.HMac hmacMd5()",
            "cn.hutool.crypto.SecureUtil:cn.hutool.crypto.digest.HMac hmacSha1()"
        ]
    },
    "cn.hutool.crypto.SecureUtil:cn.hutool.crypto.digest.HMac hmac(cn.hutool.crypto.digest.HmacAlgorithm,javax.crypto.SecretKey)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.digest.HMac:void <init>(cn.hutool.crypto.digest.HmacAlgorithm,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.digest.DigestUtil:cn.hutool.crypto.digest.HMac hmac(cn.hutool.crypto.digest.HmacAlgorithm,byte[])",
            "cn.hutool.crypto.SecureUtil:cn.hutool.crypto.digest.HMac hmac(cn.hutool.crypto.digest.HmacAlgorithm,java.lang.String)",
            "cn.hutool.crypto.SecureUtil:cn.hutool.crypto.digest.HMac hmac(cn.hutool.crypto.digest.HmacAlgorithm,byte[])",
            "cn.hutool.crypto.SecureUtil:cn.hutool.crypto.digest.HMac hmacMd5(byte[])",
            "cn.hutool.crypto.SecureUtil:cn.hutool.crypto.digest.HMac hmacSha1(byte[])"
        ]
    },
    "cn.hutool.crypto.digest.HMac:java.lang.String digestHex(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.asymmetric.RSA:void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.asymmetric.BaseAsymmetric:cn.hutool.crypto.asymmetric.BaseAsymmetric initKeys()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.asymmetric.BaseAsymmetric:cn.hutool.crypto.asymmetric.BaseAsymmetric init(java.lang.String,java.security.PrivateKey,java.security.PublicKey)"
        ]
    },
    "cn.hutool.crypto.symmetric.SymmetricCrypto:void <init>(java.lang.String,javax.crypto.SecretKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.symmetric.SymmetricCrypto:void <init>(cn.hutool.crypto.symmetric.SymmetricAlgorithm,javax.crypto.SecretKey)",
            "cn.hutool.crypto.symmetric.SymmetricCrypto:void <init>(java.lang.String,byte[])"
        ]
    },
    "cn.hutool.crypto.symmetric.SymmetricCrypto:java.lang.String encryptHex(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.symmetric.SymmetricCrypto:java.lang.String encryptBase64(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.symmetric.SymmetricCrypto:java.lang.String encryptHex(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.SecureUtil:java.lang.String signParams(cn.hutool.crypto.symmetric.SymmetricCrypto,java.util.Map,java.lang.String,java.lang.String,boolean)"
        ]
    },
    "cn.hutool.crypto.symmetric.SymmetricCrypto:java.lang.String encryptBase64(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.symmetric.SymmetricCrypto:java.lang.String encryptHex(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.symmetric.SymmetricCrypto:java.lang.String encryptBase64(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.symmetric.SymmetricCrypto:java.lang.String decryptStr(byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.symmetric.SymmetricCrypto:java.lang.String decryptStr(java.lang.String,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.symmetric.SymmetricCrypto:java.lang.String decryptStr(java.lang.String)"
        ]
    },
    "cn.hutool.crypto.symmetric.SymmetricCrypto:java.lang.String decryptStrFromBase64(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.symmetric.SymmetricCrypto:java.lang.String decryptStr(java.io.InputStream,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.symmetric.SymmetricCrypto:java.lang.String decryptStr(java.io.InputStream)"
        ]
    },
    "cn.hutool.extra.ssh.JschUtil:cn.hutool.extra.ssh.Sftp createSftp(com.jcraft.jsch.Session)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.poi.excel.ExcelReader:void <init>(java.io.File,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.poi.excel.ExcelReader:void <init>(java.lang.String,int)",
            "cn.hutool.poi.excel.ExcelUtil:cn.hutool.poi.excel.ExcelReader getReader(java.io.File,int)"
        ]
    },
    "cn.hutool.poi.excel.ExcelReader:void <init>(java.io.File,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.poi.excel.ExcelUtil:cn.hutool.poi.excel.ExcelReader getReader(java.io.File,java.lang.String)"
        ]
    },
    "cn.hutool.core.io.file.FileAppender:void <init>(java.io.File,java.nio.charset.Charset,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.file.FileAppender:void <init>(java.io.File,int,boolean)"
        ]
    },
    "cn.hutool.core.io.file.FileWriter:cn.hutool.core.io.file.FileWriter create(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.FileUtil:java.io.File writeBytes(byte[],java.io.File,int,int,boolean)",
            "cn.hutool.core.io.FileUtil:java.io.File writeFromStream(java.io.InputStream,java.io.File)"
        ]
    },
    "cn.hutool.core.io.IoUtil:cn.hutool.core.io.FastByteArrayOutputStream read(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.IoUtil:java.lang.String read(java.io.InputStream,java.lang.String)",
            "cn.hutool.core.io.IoUtil:java.lang.String read(java.io.InputStream,java.nio.charset.Charset)"
        ]
    },
    "cn.hutool.core.io.IoUtil:byte[] readBytes(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.codec.Base64:java.lang.String encode(java.io.InputStream)",
            "cn.hutool.core.codec.Base64:java.lang.String encodeUrlSafe(java.io.InputStream)",
            "cn.hutool.core.io.resource.InputStreamResource:byte[] readBytes()",
            "cn.hutool.core.io.resource.UrlResource:byte[] readBytes()",
            "cn.hutool.core.util.ZipUtil:byte[] unzipFileBytes(java.io.File,java.nio.charset.Charset,java.lang.String)",
            "cn.hutool.crypto.asymmetric.AsymmetricCrypto:byte[] encrypt(java.io.InputStream,cn.hutool.crypto.asymmetric.KeyType)",
            "cn.hutool.crypto.asymmetric.AsymmetricCrypto:byte[] decrypt(java.io.InputStream,cn.hutool.crypto.asymmetric.KeyType)",
            "cn.hutool.crypto.symmetric.SymmetricCrypto:byte[] encrypt(java.io.InputStream)",
            "cn.hutool.crypto.symmetric.SymmetricCrypto:byte[] decrypt(java.io.InputStream)",
            "cn.hutool.extra.servlet.ServletUtil:byte[] getBodyBytes(javax.servlet.ServletRequest)",
            "cn.hutool.http.HttpUtil:java.lang.String getString(java.io.InputStream,java.nio.charset.Charset,boolean)"
        ]
    },
    "cn.hutool.core.util.ZipUtil:void inflater(java.io.InputStream,java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ZipUtil:byte[] unZlib(byte[])"
        ]
    },
    "cn.hutool.core.util.ZipUtil:void deflater(java.io.InputStream,java.io.OutputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ZipUtil:byte[] zlib(java.io.File,int)",
            "cn.hutool.core.util.ZipUtil:byte[] zlib(byte[],int)"
        ]
    },
    "cn.hutool.core.util.NumberUtil:java.math.BigDecimal div(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.NumberUtil:double div(float,float,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.NumberUtil:double div(float,float)"
        ]
    },
    "cn.hutool.core.util.NumberUtil:double div(float,double,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.NumberUtil:double div(float,double)"
        ]
    },
    "cn.hutool.core.util.NumberUtil:double div(double,float,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.NumberUtil:double div(double,float)"
        ]
    },
    "cn.hutool.core.util.NumberUtil:double div(double,double,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.NumberUtil:double div(double,double)"
        ]
    },
    "cn.hutool.core.util.NumberUtil:java.math.BigDecimal div(java.lang.Number,java.lang.Number,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.NumberUtil:java.math.BigDecimal div(java.lang.Number,java.lang.Number)"
        ]
    },
    "cn.hutool.core.util.NumberUtil:double div(java.lang.Double,java.lang.Double,int,java.math.RoundingMode)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.NumberUtil:double div(java.lang.Double,java.lang.Double,int)"
        ]
    },
    "cn.hutool.poi.excel.ExcelWriter:void <init>(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.poi.excel.ExcelUtil:cn.hutool.poi.excel.ExcelWriter getWriter(boolean)",
            "cn.hutool.poi.excel.ExcelWriter:void <init>()"
        ]
    },
    "cn.hutool.poi.excel.ExcelWriter:void <init>(boolean,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.NumberUtil:java.lang.String roundStr(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.NumberUtil:java.math.BigDecimal round(double,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.NumberUtil:java.lang.String roundStr(double,int)"
        ]
    },
    "cn.hutool.core.util.NumberUtil:java.lang.String roundStr(double,int,java.math.RoundingMode)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.RandomUtil:double randomDouble(double,double,int,java.math.RoundingMode)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.RandomUtil:double randomDouble(int,java.math.RoundingMode)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.RandomUtil:double randomDouble(double,int,java.math.RoundingMode)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.symmetric.AES:void <init>(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.SecureUtil:cn.hutool.crypto.symmetric.AES aes(byte[])"
        ]
    },
    "cn.hutool.crypto.symmetric.DES:void <init>(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.SecureUtil:cn.hutool.crypto.symmetric.DES des(byte[])"
        ]
    },
    "cn.hutool.crypto.symmetric.DESede:void <init>(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.SecureUtil:cn.hutool.crypto.symmetric.DESede desede(byte[])"
        ]
    },
    "cn.hutool.crypto.symmetric.SymmetricCrypto:void <init>(cn.hutool.crypto.symmetric.SymmetricAlgorithm)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.symmetric.AES:void <init>()",
            "cn.hutool.crypto.symmetric.DES:void <init>()",
            "cn.hutool.crypto.symmetric.DESede:void <init>()"
        ]
    },
    "cn.hutool.system.SystemUtil:java.lang.String get(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.system.SystemUtil:boolean getBoolean(java.lang.String,boolean)",
            "cn.hutool.system.SystemUtil:long getInt(java.lang.String,int)",
            "cn.hutool.system.SystemUtil:long getLong(java.lang.String,long)"
        ]
    },
    "cn.hutool.crypto.symmetric.DESede:void <init>(cn.hutool.crypto.Mode,cn.hutool.crypto.Padding)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.extra.ftp.Ftp:void <init>(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.ftp.Ftp:void <init>(java.lang.String)"
        ]
    },
    "cn.hutool.core.date.format.FormatCache:java.text.Format getInstance(java.lang.String,java.util.TimeZone,java.util.Locale)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.date.format.FastDateFormat:cn.hutool.core.date.format.FastDateFormat getInstance(java.lang.String)",
            "cn.hutool.core.date.format.FastDateFormat:cn.hutool.core.date.format.FastDateFormat getInstance(java.lang.String,java.util.TimeZone)",
            "cn.hutool.core.date.format.FastDateFormat:cn.hutool.core.date.format.FastDateFormat getInstance(java.lang.String,java.util.Locale)",
            "cn.hutool.core.date.format.FastDateFormat:cn.hutool.core.date.format.FastDateFormat getInstance(java.lang.String,java.util.TimeZone,java.util.Locale)",
            "cn.hutool.core.date.format.FormatCache:java.text.Format getDateTimeInstance(java.lang.Integer,java.lang.Integer,java.util.TimeZone,java.util.Locale)"
        ]
    },
    "cn.hutool.core.util.NetUtil:boolean isInRange(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.comparator.VersionComparator:int compare(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.comparator.VersionComparator:int compare(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.util.StrUtil:int compareVersion(java.lang.CharSequence,java.lang.CharSequence)"
        ]
    },
    "cn.hutool.core.date.DateUtil:java.lang.String normalize(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.date.DateUtil:cn.hutool.core.date.DateTime parseDateTime(java.lang.String)",
            "cn.hutool.core.date.DateUtil:cn.hutool.core.date.DateTime parseDate(java.lang.String)",
            "cn.hutool.core.date.DateUtil:cn.hutool.core.date.DateTime parseTime(java.lang.String)",
            "cn.hutool.core.date.DateUtil:cn.hutool.core.date.DateTime parse(java.lang.String)"
        ]
    },
    "cn.hutool.db.handler.EntityHandler:java.lang.Object handle(java.sql.ResultSet)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.sql.SqlExecutor:java.lang.Object query(java.sql.PreparedStatement,cn.hutool.db.handler.RsHandler,java.lang.Object[])"
        ]
    },
    "cn.hutool.core.date.Week:java.lang.String toChinese(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.date.Week:java.lang.String toChinese()"
        ]
    },
    "cn.hutool.core.util.ReferenceUtil:java.lang.ref.Reference create(cn.hutool.core.util.ReferenceUtil$ReferenceType,java.lang.Object,java.lang.ref.ReferenceQueue)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ReferenceUtil:java.lang.ref.Reference create(cn.hutool.core.util.ReferenceUtil$ReferenceType,java.lang.Object)"
        ]
    },
    "cn.hutool.crypto.asymmetric.BaseAsymmetric:java.security.Key getKeyByType(cn.hutool.crypto.asymmetric.KeyType)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.asymmetric.AsymmetricCrypto:byte[] encrypt(byte[],cn.hutool.crypto.asymmetric.KeyType)",
            "cn.hutool.crypto.asymmetric.AsymmetricCrypto:byte[] decrypt(byte[],cn.hutool.crypto.asymmetric.KeyType)",
            "cn.hutool.crypto.asymmetric.RSA:byte[] encrypt(byte[],cn.hutool.crypto.asymmetric.KeyType)",
            "cn.hutool.crypto.asymmetric.RSA:byte[] decrypt(byte[],cn.hutool.crypto.asymmetric.KeyType)"
        ]
    },
    "cn.hutool.crypto.digest.DigestUtil:java.lang.String bcrypt(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.digest.DigestUtil:boolean bcryptCheck(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.sql.SqlUtil:java.lang.String buildLikeValue(java.lang.String,cn.hutool.db.sql.Condition$LikeType,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.db.AbstractDb:java.util.List findLike(java.lang.String,java.lang.String,java.lang.String,cn.hutool.db.sql.Condition$LikeType)",
            "cn.hutool.db.sql.Condition:void <init>(java.lang.String,java.lang.String,cn.hutool.db.sql.Condition$LikeType)",
            "cn.hutool.db.SqlConnRunner:java.util.List findLike(java.sql.Connection,java.lang.String,java.lang.String,java.lang.String,cn.hutool.db.sql.Condition$LikeType)"
        ]
    },
    "cn.hutool.extra.template.engine.velocity.VelocityEngine:org.apache.velocity.app.VelocityEngine createEngine(cn.hutool.extra.template.TemplateConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.template.engine.velocity.VelocityEngine:void <init>(cn.hutool.extra.template.TemplateConfig)"
        ]
    },
    "cn.hutool.poi.excel.ExcelWriter:cn.hutool.poi.excel.ExcelWriter setHeaderOrFooter(java.lang.String,cn.hutool.poi.excel.style.Align,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.date.format.FastDateFormat:java.lang.String format(java.util.Calendar)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.date.format.FastDatePrinter:java.lang.String format(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.date.format.FastDateFormat:java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)"
        ]
    },
    "cn.hutool.core.date.format.FastDateFormat:java.lang.String format(long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.date.DateTime:java.lang.String toString(cn.hutool.core.date.format.DatePrinter)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.date.DateTime:java.lang.String toString()",
            "cn.hutool.core.date.DateTime:java.lang.String toDateStr()",
            "cn.hutool.core.date.DateTime:java.lang.String toTimeStr()",
            "cn.hutool.core.date.DateTime:java.lang.String toString(java.lang.String)",
            "cn.hutool.core.date.DateTime:java.lang.String toMsStr()"
        ]
    },
    "cn.hutool.core.date.DateUtil:java.lang.String format(java.util.Date,cn.hutool.core.date.format.DatePrinter)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.date.DateUtil:java.lang.String format(java.util.Date,java.lang.String)"
        ]
    },
    "cn.hutool.core.date.format.FastDateFormat:java.lang.String format(java.util.Date)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.date.DateTime:java.lang.String toString(cn.hutool.core.date.format.DatePrinter)",
            "cn.hutool.core.date.DateUtil:java.lang.String format(java.util.Date,cn.hutool.core.date.format.DatePrinter)",
            "cn.hutool.core.date.DateUtil:java.lang.String formatDateTime(java.util.Date)",
            "cn.hutool.core.date.DateUtil:java.lang.String formatDate(java.util.Date)",
            "cn.hutool.core.date.DateUtil:java.lang.String formatTime(java.util.Date)",
            "cn.hutool.core.date.DateUtil:java.lang.String formatHttpDate(java.util.Date)"
        ]
    },
    "cn.hutool.core.io.FileUtil:java.io.PrintWriter getPrintWriter(java.io.File,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.text.csv.CsvUtil:cn.hutool.core.text.csv.CsvWriter getWriter(java.io.File,java.nio.charset.Charset,boolean,cn.hutool.core.text.csv.CsvWriteConfig)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.text.csv.CsvWriter:void <init>(java.io.File,java.nio.charset.Charset,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.text.csv.CsvUtil:cn.hutool.core.text.csv.CsvWriter getWriter(java.io.File,java.nio.charset.Charset,boolean)",
            "cn.hutool.core.text.csv.CsvWriter:void <init>(java.io.File,java.nio.charset.Charset)",
            "cn.hutool.core.text.csv.CsvWriter:void <init>(java.lang.String,java.nio.charset.Charset,boolean)"
        ]
    },
    "cn.hutool.core.io.FileUtil:java.io.BufferedReader getUtf8Reader(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.watch.WatchMonitor:cn.hutool.core.io.watch.WatchMonitor create(java.net.URI,int,java.nio.file.WatchEvent$Kind[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.watch.WatchMonitor:cn.hutool.core.io.watch.WatchMonitor create(java.net.URL,int,java.nio.file.WatchEvent$Kind[])",
            "cn.hutool.core.io.watch.WatchMonitor:cn.hutool.core.io.watch.WatchMonitor create(java.net.URI,java.nio.file.WatchEvent$Kind[])"
        ]
    },
    "cn.hutool.core.io.watch.WatchMonitor:cn.hutool.core.io.watch.WatchMonitor create(java.io.File,int,java.nio.file.WatchEvent$Kind[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.watch.WatchMonitor:cn.hutool.core.io.watch.WatchMonitor create(java.io.File,java.nio.file.WatchEvent$Kind[])"
        ]
    },
    "cn.hutool.core.io.watch.WatchMonitor:cn.hutool.core.io.watch.WatchMonitor create(java.lang.String,int,java.nio.file.WatchEvent$Kind[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.watch.WatchMonitor:cn.hutool.core.io.watch.WatchMonitor create(java.lang.String,java.nio.file.WatchEvent$Kind[])"
        ]
    },
    "cn.hutool.core.io.watch.WatchMonitor:cn.hutool.core.io.watch.WatchMonitor create(java.nio.file.Path,java.nio.file.WatchEvent$Kind[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.watch.WatchMonitor:cn.hutool.core.io.watch.WatchMonitor createAll(java.nio.file.Path,cn.hutool.core.io.watch.Watcher)",
            "cn.hutool.setting.dialect.Props:void autoLoad(boolean)"
        ]
    },
    "cn.hutool.core.io.watch.WatchMonitor:void <init>(java.io.File,java.nio.file.WatchEvent$Kind[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.watch.WatchMonitor:void <init>(java.lang.String,java.nio.file.WatchEvent$Kind[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.watch.WatchUtil:cn.hutool.core.io.watch.WatchMonitor create(java.net.URI,int,java.nio.file.WatchEvent$Kind[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.watch.WatchUtil:cn.hutool.core.io.watch.WatchMonitor create(java.net.URL,int,java.nio.file.WatchEvent$Kind[])",
            "cn.hutool.core.io.watch.WatchUtil:cn.hutool.core.io.watch.WatchMonitor create(java.net.URI,java.nio.file.WatchEvent$Kind[])"
        ]
    },
    "cn.hutool.core.io.watch.WatchUtil:cn.hutool.core.io.watch.WatchMonitor create(java.io.File,int,java.nio.file.WatchEvent$Kind[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.watch.WatchUtil:cn.hutool.core.io.watch.WatchMonitor create(java.io.File,java.nio.file.WatchEvent$Kind[])"
        ]
    },
    "cn.hutool.core.io.watch.WatchUtil:cn.hutool.core.io.watch.WatchMonitor create(java.lang.String,int,java.nio.file.WatchEvent$Kind[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.watch.WatchUtil:cn.hutool.core.io.watch.WatchMonitor create(java.lang.String,java.nio.file.WatchEvent$Kind[])"
        ]
    },
    "cn.hutool.core.io.watch.WatchUtil:cn.hutool.core.io.watch.WatchMonitor create(java.nio.file.Path,java.nio.file.WatchEvent$Kind[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.watch.WatchUtil:cn.hutool.core.io.watch.WatchMonitor createAll(java.nio.file.Path,int,cn.hutool.core.io.watch.Watcher)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.watch.WatchUtil:cn.hutool.core.io.watch.WatchMonitor createAll(java.net.URI,int,cn.hutool.core.io.watch.Watcher)",
            "cn.hutool.core.io.watch.WatchUtil:cn.hutool.core.io.watch.WatchMonitor createAll(java.io.File,int,cn.hutool.core.io.watch.Watcher)",
            "cn.hutool.core.io.watch.WatchUtil:cn.hutool.core.io.watch.WatchMonitor createAll(java.lang.String,int,cn.hutool.core.io.watch.Watcher)",
            "cn.hutool.core.io.watch.WatchUtil:cn.hutool.core.io.watch.WatchMonitor createAll(java.nio.file.Path,cn.hutool.core.io.watch.Watcher)"
        ]
    },
    "cn.hutool.captcha.AbstractCaptcha:void createCode()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.captcha.AbstractCaptcha:void <init>(int,int,cn.hutool.captcha.generator.CodeGenerator,int)",
            "cn.hutool.captcha.AbstractCaptcha:java.awt.image.BufferedImage getImage()"
        ]
    },
    "cn.hutool.core.io.resource.MultiResource:java.io.BufferedReader getReader(java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.resource.MultiResource:java.io.BufferedReader getReader(java.nio.charset.Charset)",
            "cn.hutool.setting.dialect.Props:void load(cn.hutool.core.io.resource.Resource)"
        ]
    },
    "cn.hutool.extra.template.engine.beetl.BeetlEngine:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.extra.template.engine.beetl.BeetlUtil:java.lang.String renderFromStr(java.lang.String,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.extra.template.engine.beetl.BeetlUtil:java.io.Writer renderFromStr(java.lang.String,java.util.Map,java.io.Writer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.extra.template.engine.beetl.BeetlUtil:java.lang.String render(java.lang.String,java.lang.String,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.extra.template.engine.beetl.BeetlUtil:org.beetl.core.Template getFileTemplate(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.template.engine.beetl.BeetlUtil:java.lang.String render(java.lang.String,java.lang.String,java.util.Map)"
        ]
    },
    "cn.hutool.crypto.asymmetric.AsymmetricCrypto:void <init>(java.lang.String,java.security.PrivateKey,java.security.PublicKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.asymmetric.AsymmetricCrypto:void <init>(cn.hutool.crypto.asymmetric.AsymmetricAlgorithm,java.security.PrivateKey,java.security.PublicKey)"
        ]
    },
    "cn.hutool.crypto.asymmetric.BaseAsymmetric:void <init>(cn.hutool.crypto.asymmetric.AsymmetricAlgorithm,java.security.PrivateKey,java.security.PublicKey)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.asymmetric.Sign:void <init>(java.lang.String,java.security.PrivateKey,java.security.PublicKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.asymmetric.Sign:void <init>(cn.hutool.crypto.asymmetric.SignAlgorithm,java.security.PrivateKey,java.security.PublicKey)"
        ]
    },
    "cn.hutool.crypto.asymmetric.BaseAsymmetric:void <init>(java.lang.String,byte[],byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.asymmetric.AsymmetricCrypto:void <init>(java.lang.String,byte[],byte[])",
            "cn.hutool.crypto.asymmetric.BaseAsymmetric:void <init>(java.lang.String)",
            "cn.hutool.crypto.asymmetric.BaseAsymmetric:void <init>(java.lang.String,java.lang.String,java.lang.String)",
            "cn.hutool.crypto.asymmetric.Sign:void <init>(java.lang.String,byte[],byte[])"
        ]
    },
    "cn.hutool.crypto.asymmetric.AsymmetricCrypto:java.lang.String encryptBcd(java.lang.String,cn.hutool.crypto.asymmetric.KeyType)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.asymmetric.RSA:java.lang.String encryptStr(java.lang.String,cn.hutool.crypto.asymmetric.KeyType,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.asymmetric.RSA:java.lang.String encryptStr(java.lang.String,cn.hutool.crypto.asymmetric.KeyType)"
        ]
    },
    "cn.hutool.crypto.asymmetric.RSA:java.lang.String decryptStr(java.lang.String,cn.hutool.crypto.asymmetric.KeyType)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.digest.DigestUtil:byte[] md5(byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.digest.DigestUtil:byte[] md5(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.digest.DigestUtil:byte[] md5(java.lang.String)"
        ]
    },
    "cn.hutool.crypto.digest.DigestUtil:java.lang.String md5Hex(byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.digest.DigestUtil:java.lang.String md5Hex(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.digest.DigestUtil:java.lang.String md5Hex(java.lang.String)"
        ]
    },
    "cn.hutool.crypto.digest.DigestUtil:java.lang.String md5Hex(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.digest.DigestUtil:byte[] sha1(byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.digest.DigestUtil:byte[] sha1(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.digest.DigestUtil:byte[] sha1(java.lang.String)"
        ]
    },
    "cn.hutool.crypto.digest.DigestUtil:java.lang.String sha1Hex(byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.digest.DigestUtil:java.lang.String sha1Hex(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.digest.DigestUtil:java.lang.String sha1Hex(java.lang.String)"
        ]
    },
    "cn.hutool.crypto.digest.DigestUtil:java.lang.String sha1Hex(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.digest.DigestUtil:byte[] sha256(byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.digest.DigestUtil:byte[] sha256(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.digest.DigestUtil:byte[] sha256(java.lang.String)"
        ]
    },
    "cn.hutool.crypto.digest.DigestUtil:java.lang.String sha256Hex(byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.digest.DigestUtil:java.lang.String sha256Hex(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.digest.DigestUtil:java.lang.String sha256Hex(java.lang.String)"
        ]
    },
    "cn.hutool.crypto.digest.DigestUtil:java.lang.String sha256Hex(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.digest.DigestUtil:cn.hutool.crypto.digest.Digester digester(cn.hutool.crypto.digest.DigestAlgorithm)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.SecureUtil:cn.hutool.crypto.digest.Digester md5()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.SecureUtil:java.lang.String md5(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.SecureUtil:java.lang.String md5(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.SecureUtil:cn.hutool.crypto.digest.Digester sha1()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.SecureUtil:java.lang.String sha1(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.SecureUtil:java.lang.String sha1(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.SecureUtil:cn.hutool.crypto.digest.HMac hmacMd5()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.SecureUtil:cn.hutool.crypto.digest.HMac hmacSha1()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.digest.DigestUtil:cn.hutool.crypto.digest.HMac hmac(cn.hutool.crypto.digest.HmacAlgorithm,byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.SecureUtil:cn.hutool.crypto.digest.HMac hmac(cn.hutool.crypto.digest.HmacAlgorithm,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.SecureUtil:cn.hutool.crypto.digest.HMac hmac(cn.hutool.crypto.digest.HmacAlgorithm,byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.SecureUtil:cn.hutool.crypto.digest.HMac hmacMd5(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.SecureUtil:cn.hutool.crypto.digest.HMac hmacMd5(java.lang.String)"
        ]
    },
    "cn.hutool.crypto.SecureUtil:cn.hutool.crypto.digest.HMac hmacSha1(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.SecureUtil:cn.hutool.crypto.digest.HMac hmacSha1(java.lang.String)"
        ]
    },
    "cn.hutool.crypto.asymmetric.BaseAsymmetric:cn.hutool.crypto.asymmetric.BaseAsymmetric init(java.lang.String,java.security.PrivateKey,java.security.PublicKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.asymmetric.AsymmetricCrypto:cn.hutool.crypto.asymmetric.AsymmetricCrypto init(java.lang.String,java.security.PrivateKey,java.security.PublicKey)",
            "cn.hutool.crypto.asymmetric.BaseAsymmetric:void <init>(java.lang.String,java.security.PrivateKey,java.security.PublicKey)",
            "cn.hutool.crypto.asymmetric.BaseAsymmetric:cn.hutool.crypto.asymmetric.BaseAsymmetric init(java.lang.String,byte[],byte[])",
            "cn.hutool.crypto.asymmetric.Sign:cn.hutool.crypto.asymmetric.Sign init(java.lang.String,java.security.PrivateKey,java.security.PublicKey)"
        ]
    },
    "cn.hutool.crypto.symmetric.SymmetricCrypto:void <init>(cn.hutool.crypto.symmetric.SymmetricAlgorithm,javax.crypto.SecretKey)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.symmetric.SymmetricCrypto:java.lang.String decryptStr(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.symmetric.SymmetricCrypto:java.lang.String decryptStr(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.file.FileAppender:void <init>(java.io.File,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.IoUtil:java.lang.String read(java.io.InputStream,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.FileUtil:java.lang.String readString(java.net.URL,java.lang.String)"
        ]
    },
    "cn.hutool.core.io.IoUtil:java.lang.String read(java.io.InputStream,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.RuntimeUtil:java.lang.String getResult(java.lang.Process,java.nio.charset.Charset)",
            "cn.hutool.db.sql.SqlUtil:java.lang.String blobToStr(java.sql.Blob,java.nio.charset.Charset)",
            "cn.hutool.extra.ssh.JschUtil:java.lang.String exec(com.jcraft.jsch.Session,java.lang.String,java.nio.charset.Charset)"
        ]
    },
    "cn.hutool.core.codec.Base64:java.lang.String encode(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.codec.Base64:java.lang.String encodeUrlSafe(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.http.HttpUtil:java.lang.String getString(java.io.InputStream,java.nio.charset.Charset,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ZipUtil:byte[] unZlib(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ZipUtil:java.lang.String unZlib(byte[],java.lang.String)"
        ]
    },
    "cn.hutool.core.util.ZipUtil:byte[] zlib(byte[],int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ZipUtil:byte[] zlib(java.lang.String,java.lang.String,int)"
        ]
    },
    "cn.hutool.core.util.NumberUtil:double div(float,float)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.img.Img:cn.hutool.core.img.Img scale(int,int,java.awt.Color)",
            "cn.hutool.core.text.TextSimilarity:double similar(java.lang.String,java.lang.String)"
        ]
    },
    "cn.hutool.core.util.NumberUtil:double div(float,double)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.NumberUtil:double div(double,float)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.NumberUtil:double div(double,double)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.NumberUtil:java.math.BigDecimal div(java.lang.Number,java.lang.Number)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.NumberUtil:double div(java.lang.Double,java.lang.Double,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.NumberUtil:double div(java.lang.Double,java.lang.Double)"
        ]
    },
    "cn.hutool.poi.excel.ExcelWriter:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.poi.excel.ExcelUtil:cn.hutool.poi.excel.ExcelWriter getWriter()"
        ]
    },
    "cn.hutool.core.util.NumberUtil:java.lang.String roundStr(double,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.SecureUtil:cn.hutool.crypto.symmetric.AES aes(byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.SecureUtil:cn.hutool.crypto.symmetric.DES des(byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.SecureUtil:cn.hutool.crypto.symmetric.DESede desede(byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.symmetric.AES:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.SecureUtil:cn.hutool.crypto.symmetric.AES aes()"
        ]
    },
    "cn.hutool.crypto.symmetric.DES:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.SecureUtil:cn.hutool.crypto.symmetric.DES des()"
        ]
    },
    "cn.hutool.crypto.symmetric.DESede:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.SecureUtil:cn.hutool.crypto.symmetric.DESede desede()"
        ]
    },
    "cn.hutool.system.SystemUtil:boolean getBoolean(java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.extra.ftp.Ftp:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.date.format.FastDateFormat:cn.hutool.core.date.format.FastDateFormat getInstance(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.date.DatePattern:void <clinit>()",
            "cn.hutool.core.date.DateTime:java.lang.String toString(java.lang.String)",
            "cn.hutool.core.date.DateUtil:java.lang.String format(java.util.Date,java.lang.String)"
        ]
    },
    "cn.hutool.core.date.format.FastDateFormat:cn.hutool.core.date.format.FastDateFormat getInstance(java.lang.String,java.util.TimeZone)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.date.format.FastDateFormat:cn.hutool.core.date.format.FastDateFormat getInstance(java.lang.String,java.util.Locale)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.date.format.FastDateFormat:cn.hutool.core.date.format.FastDateFormat getInstance(java.lang.String,java.util.TimeZone,java.util.Locale)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.date.format.FormatCache:java.text.Format getDateTimeInstance(java.lang.Integer,java.lang.Integer,java.util.TimeZone,java.util.Locale)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.date.format.FormatCache:java.text.Format getDateTimeInstance(int,int,java.util.TimeZone,java.util.Locale)",
            "cn.hutool.core.date.format.FormatCache:java.text.Format getDateInstance(int,java.util.TimeZone,java.util.Locale)",
            "cn.hutool.core.date.format.FormatCache:java.text.Format getTimeInstance(int,java.util.TimeZone,java.util.Locale)"
        ]
    },
    "cn.hutool.core.comparator.VersionComparator:int compare(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.collection.BoundedPriorityQueue$1:int compare(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.collection.BoundedPriorityQueue:boolean offer(java.lang.Object)",
            "cn.hutool.core.comparator.ComparatorChain:int compare(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.comparator.ReverseComparator:int compare(java.lang.Object,java.lang.Object)"
        ]
    },
    "cn.hutool.core.util.StrUtil:int compareVersion(java.lang.CharSequence,java.lang.CharSequence)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.date.Week:java.lang.String toChinese()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ReferenceUtil:java.lang.ref.Reference create(cn.hutool.core.util.ReferenceUtil$ReferenceType,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.db.sql.Condition:void <init>(java.lang.String,java.lang.String,cn.hutool.db.sql.Condition$LikeType)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.extra.template.engine.velocity.VelocityEngine:void <init>(cn.hutool.extra.template.TemplateConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.extra.template.engine.EngineFactory:cn.hutool.extra.template.Engine doCreate(cn.hutool.extra.template.TemplateConfig)",
            "cn.hutool.extra.template.engine.velocity.VelocityEngine:void <init>()"
        ]
    },
    "cn.hutool.core.date.format.FastDateFormat:java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.date.DateTime:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.bean.DynaBean:java.lang.String toString()",
            "cn.hutool.core.collection.CollUtil$6:int compare(java.util.Map$Entry,java.util.Map$Entry)",
            "cn.hutool.core.convert.AbstractConverter:java.lang.String convertToStr(java.lang.Object)",
            "cn.hutool.core.convert.impl.ArrayConverter:java.lang.Object convertObjectToArray(java.lang.Object)",
            "cn.hutool.core.convert.impl.CurrencyConverter:java.util.Currency convertInternal(java.lang.Object)",
            "cn.hutool.core.convert.NumberWordFormater:java.lang.String format(java.lang.Object)",
            "cn.hutool.core.getter.OptNullBasicTypeFromStringGetter:java.lang.Object getObj(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.io.file.FileWriter:java.io.File writeLines(java.util.Collection,cn.hutool.core.io.file.LineSeparator,boolean)",
            "cn.hutool.core.io.watch.watchers.DelayWatcher$1:void run()",
            "cn.hutool.core.io.watch.watchers.DelayWatcher:void onDelayModify(java.nio.file.WatchEvent,java.nio.file.Path)",
            "cn.hutool.core.io.watch.WatchMonitor:void watch(cn.hutool.core.io.watch.Watcher)",
            "cn.hutool.core.lang.ConsistentHash$1:java.lang.Integer hash(java.lang.Object)",
            "cn.hutool.core.lang.ConsistentHash:void add(java.lang.Object)",
            "cn.hutool.core.lang.ConsistentHash:void remove(java.lang.Object)",
            "cn.hutool.core.lang.mutable.MutableObj:java.lang.String toString()",
            "cn.hutool.core.map.CamelCaseLinkedMap:java.lang.Object customKey(java.lang.Object)",
            "cn.hutool.core.map.CamelCaseMap:java.lang.Object customKey(java.lang.Object)",
            "cn.hutool.core.map.CaseInsensitiveLinkedMap:java.lang.Object customKey(java.lang.Object)",
            "cn.hutool.core.map.CaseInsensitiveMap:java.lang.Object customKey(java.lang.Object)",
            "cn.hutool.core.util.ArrayUtil:java.lang.String toString(java.lang.Object)",
            "cn.hutool.core.util.ObjectUtil:boolean contains(java.lang.Object,java.lang.Object)",
            "cn.hutool.core.util.StrUtil:java.lang.String str(java.lang.Object,java.nio.charset.Charset)",
            "cn.hutool.core.util.StrUtil:java.lang.String toString(java.lang.Object)",
            "cn.hutool.core.util.XmlUtil:void mapToXml(org.w3c.dom.Document,org.w3c.dom.Element,java.util.Map)",
            "cn.hutool.extra.servlet.ServletUtil:void setHeader(javax.servlet.http.HttpServletResponse,java.lang.String,java.lang.Object)",
            "cn.hutool.extra.template.engine.velocity.VelocityUtil:void toFile(org.apache.velocity.Template,org.apache.velocity.VelocityContext,java.lang.String)",
            "cn.hutool.http.HttpRequest:cn.hutool.http.HttpRequest form(java.lang.String,java.lang.Object,java.lang.Object[])",
            "cn.hutool.setting.dialect.Props:java.lang.Object getObj(java.lang.String,java.lang.Object)",
            "cn.hutool.setting.dialect.Props:void setProperty(java.lang.String,java.lang.Object)",
            "cn.hutool.json.InternalJSONUtil:java.io.Writer writeValue(java.io.Writer,java.lang.Object,int,int)",
            "cn.hutool.json.InternalJSONUtil:java.lang.String valueToString(java.lang.Object)",
            "cn.hutool.json.JSONObject:java.io.Writer write(java.io.Writer,int,int)",
            "cn.hutool.json.JSONObject:void init(cn.hutool.json.JSONTokener)",
            "cn.hutool.json.JSONUtil:java.lang.Object wrap(java.lang.Object,boolean)",
            "cn.hutool.json.XML:java.lang.String toXml(java.lang.Object,java.lang.String)",
            "cn.hutool.poi.excel.cell.CellUtil:void setCellValue(org.apache.poi.ss.usermodel.Cell,java.lang.Object,cn.hutool.poi.excel.StyleSet,boolean)",
            "cn.hutool.poi.excel.ExcelReader:java.util.List aliasHeader(java.util.List)"
        ]
    },
    "cn.hutool.core.date.DateTime:java.lang.String toDateStr()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.date.DateTime:java.lang.String toTimeStr()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.date.DateTime:java.lang.String toString(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.date.DateTime:java.lang.String toMsStr()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.date.DateUtil:java.lang.String format(java.util.Date,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.date.DateUtil:int toIntSecond(java.util.Date)"
        ]
    },
    "cn.hutool.core.date.DateUtil:java.lang.String formatDateTime(java.util.Date)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.date.DateUtil:java.lang.String now()"
        ]
    },
    "cn.hutool.core.date.DateUtil:java.lang.String formatDate(java.util.Date)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.date.DateUtil:java.lang.String today()",
            "cn.hutool.core.date.DateUtil:int age(java.util.Date,java.util.Date)"
        ]
    },
    "cn.hutool.core.date.DateUtil:java.lang.String formatTime(java.util.Date)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.date.DateUtil:java.lang.String formatHttpDate(java.util.Date)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.text.csv.CsvUtil:cn.hutool.core.text.csv.CsvWriter getWriter(java.io.File,java.nio.charset.Charset,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.text.csv.CsvWriter:void <init>(java.io.File,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.text.csv.CsvUtil:cn.hutool.core.text.csv.CsvWriter getWriter(java.io.File,java.nio.charset.Charset)",
            "cn.hutool.core.text.csv.CsvWriter:void <init>(java.io.File)",
            "cn.hutool.core.text.csv.CsvWriter:void <init>(java.lang.String,java.nio.charset.Charset)"
        ]
    },
    "cn.hutool.core.io.watch.WatchMonitor:cn.hutool.core.io.watch.WatchMonitor create(java.net.URI,java.nio.file.WatchEvent$Kind[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.watch.WatchMonitor:cn.hutool.core.io.watch.WatchMonitor create(java.io.File,java.nio.file.WatchEvent$Kind[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.watch.WatchMonitor:cn.hutool.core.io.watch.WatchMonitor create(java.lang.String,java.nio.file.WatchEvent$Kind[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.watch.WatchMonitor:cn.hutool.core.io.watch.WatchMonitor createAll(java.nio.file.Path,cn.hutool.core.io.watch.Watcher)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.watch.WatchMonitor:cn.hutool.core.io.watch.WatchMonitor createAll(java.net.URI,cn.hutool.core.io.watch.Watcher)",
            "cn.hutool.core.io.watch.WatchMonitor:cn.hutool.core.io.watch.WatchMonitor createAll(java.net.URL,cn.hutool.core.io.watch.Watcher)",
            "cn.hutool.core.io.watch.WatchMonitor:cn.hutool.core.io.watch.WatchMonitor createAll(java.io.File,cn.hutool.core.io.watch.Watcher)",
            "cn.hutool.core.io.watch.WatchMonitor:cn.hutool.core.io.watch.WatchMonitor createAll(java.lang.String,cn.hutool.core.io.watch.Watcher)"
        ]
    },
    "cn.hutool.core.io.watch.WatchUtil:cn.hutool.core.io.watch.WatchMonitor create(java.net.URI,java.nio.file.WatchEvent$Kind[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.watch.WatchUtil:cn.hutool.core.io.watch.WatchMonitor create(java.io.File,java.nio.file.WatchEvent$Kind[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.watch.WatchUtil:cn.hutool.core.io.watch.WatchMonitor create(java.lang.String,java.nio.file.WatchEvent$Kind[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.watch.WatchUtil:cn.hutool.core.io.watch.WatchMonitor createAll(java.net.URI,int,cn.hutool.core.io.watch.Watcher)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.watch.WatchUtil:cn.hutool.core.io.watch.WatchMonitor createAll(java.net.URL,int,cn.hutool.core.io.watch.Watcher)",
            "cn.hutool.core.io.watch.WatchUtil:cn.hutool.core.io.watch.WatchMonitor createAll(java.net.URI,cn.hutool.core.io.watch.Watcher)"
        ]
    },
    "cn.hutool.core.io.watch.WatchUtil:cn.hutool.core.io.watch.WatchMonitor createAll(java.io.File,int,cn.hutool.core.io.watch.Watcher)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.watch.WatchUtil:cn.hutool.core.io.watch.WatchMonitor createAll(java.io.File,cn.hutool.core.io.watch.Watcher)"
        ]
    },
    "cn.hutool.core.io.watch.WatchUtil:cn.hutool.core.io.watch.WatchMonitor createAll(java.lang.String,int,cn.hutool.core.io.watch.Watcher)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.io.watch.WatchUtil:cn.hutool.core.io.watch.WatchMonitor createAll(java.lang.String,cn.hutool.core.io.watch.Watcher)"
        ]
    },
    "cn.hutool.core.io.watch.WatchUtil:cn.hutool.core.io.watch.WatchMonitor createAll(java.nio.file.Path,cn.hutool.core.io.watch.Watcher)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.captcha.AbstractCaptcha:void <init>(int,int,cn.hutool.captcha.generator.CodeGenerator,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.captcha.AbstractCaptcha:void <init>(int,int,int,int)"
        ]
    },
    "cn.hutool.crypto.asymmetric.AsymmetricCrypto:void <init>(cn.hutool.crypto.asymmetric.AsymmetricAlgorithm,java.security.PrivateKey,java.security.PublicKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.asymmetric.RSA:void <init>(java.security.PrivateKey,java.security.PublicKey)"
        ]
    },
    "cn.hutool.crypto.asymmetric.Sign:void <init>(cn.hutool.crypto.asymmetric.SignAlgorithm,java.security.PrivateKey,java.security.PublicKey)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.asymmetric.AsymmetricCrypto:void <init>(java.lang.String,byte[],byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.asymmetric.AsymmetricCrypto:void <init>(java.lang.String)",
            "cn.hutool.crypto.asymmetric.AsymmetricCrypto:void <init>(cn.hutool.crypto.asymmetric.AsymmetricAlgorithm,java.lang.String,java.lang.String)",
            "cn.hutool.crypto.asymmetric.AsymmetricCrypto:void <init>(cn.hutool.crypto.asymmetric.AsymmetricAlgorithm,byte[],byte[])"
        ]
    },
    "cn.hutool.crypto.asymmetric.BaseAsymmetric:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.asymmetric.BaseAsymmetric:void <init>(java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.asymmetric.AsymmetricCrypto:void <init>(java.lang.String,java.lang.String,java.lang.String)",
            "cn.hutool.crypto.asymmetric.Sign:void <init>(java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "cn.hutool.crypto.asymmetric.Sign:void <init>(java.lang.String,byte[],byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.asymmetric.Sign:void <init>(java.lang.String)",
            "cn.hutool.crypto.asymmetric.Sign:void <init>(cn.hutool.crypto.asymmetric.SignAlgorithm,java.lang.String,java.lang.String)",
            "cn.hutool.crypto.asymmetric.Sign:void <init>(cn.hutool.crypto.asymmetric.SignAlgorithm,byte[],byte[])"
        ]
    },
    "cn.hutool.crypto.asymmetric.RSA:java.lang.String encryptStr(java.lang.String,cn.hutool.crypto.asymmetric.KeyType)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.digest.DigestUtil:byte[] md5(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.digest.DigestUtil:java.lang.String md5Hex(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.digest.DigestUtil:byte[] sha1(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.digest.DigestUtil:java.lang.String sha1Hex(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.digest.DigestUtil:byte[] sha256(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.digest.DigestUtil:java.lang.String sha256Hex(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.SecureUtil:cn.hutool.crypto.digest.HMac hmacMd5(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.SecureUtil:cn.hutool.crypto.digest.HMac hmacSha1(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ZipUtil:java.lang.String unZlib(byte[],java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.ZipUtil:byte[] zlib(java.lang.String,java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.img.Img:cn.hutool.core.img.Img scale(int,int,java.awt.Color)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ImageUtil:java.awt.Image scale(java.awt.Image,int,int,java.awt.Color)"
        ]
    },
    "cn.hutool.core.text.TextSimilarity:double similar(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.text.TextSimilarity:java.lang.String similar(java.lang.String,java.lang.String,int)",
            "cn.hutool.core.util.StrUtil:double similar(java.lang.String,java.lang.String)"
        ]
    },
    "cn.hutool.core.util.NumberUtil:double div(java.lang.Double,java.lang.Double)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.SecureUtil:cn.hutool.crypto.symmetric.AES aes()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.SecureUtil:cn.hutool.crypto.symmetric.DES des()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.SecureUtil:cn.hutool.crypto.symmetric.DESede desede()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.date.DatePattern:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.date.DatePattern:void <clinit>()",
            "cn.hutool.core.date.DateTime:java.lang.String toString()",
            "cn.hutool.core.date.DateTime:java.lang.String toDateStr()",
            "cn.hutool.core.date.DateTime:java.lang.String toTimeStr()",
            "cn.hutool.core.date.DateTime:java.lang.String toMsStr()",
            "cn.hutool.core.date.DateUtil:java.lang.String formatDateTime(java.util.Date)",
            "cn.hutool.core.date.DateUtil:java.lang.String formatDate(java.util.Date)",
            "cn.hutool.core.date.DateUtil:java.lang.String formatTime(java.util.Date)",
            "cn.hutool.core.date.DateUtil:java.lang.String formatHttpDate(java.util.Date)",
            "cn.hutool.core.date.DateUtil:cn.hutool.core.date.DateTime parseDateTime(java.lang.String)",
            "cn.hutool.core.date.DateUtil:cn.hutool.core.date.DateTime parseDate(java.lang.String)",
            "cn.hutool.core.date.DateUtil:cn.hutool.core.date.DateTime parseTime(java.lang.String)",
            "cn.hutool.core.date.DateUtil:cn.hutool.core.date.DateTime parse(java.lang.String)",
            "cn.hutool.core.util.IdcardUtil:cn.hutool.core.date.DateTime getBirthDate(java.lang.String)"
        ]
    },
    "cn.hutool.core.date.format.FormatCache:java.text.Format getDateTimeInstance(int,int,java.util.TimeZone,java.util.Locale)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.date.format.FastDateFormat:cn.hutool.core.date.format.FastDateFormat getDateTimeInstance(int,int)",
            "cn.hutool.core.date.format.FastDateFormat:cn.hutool.core.date.format.FastDateFormat getDateTimeInstance(int,int,java.util.Locale)",
            "cn.hutool.core.date.format.FastDateFormat:cn.hutool.core.date.format.FastDateFormat getDateTimeInstance(int,int,java.util.TimeZone,java.util.Locale)",
            "cn.hutool.core.date.format.FormatCache:java.text.Format getInstance()"
        ]
    },
    "cn.hutool.core.date.format.FormatCache:java.text.Format getDateInstance(int,java.util.TimeZone,java.util.Locale)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.date.format.FastDateFormat:cn.hutool.core.date.format.FastDateFormat getDateInstance(int)",
            "cn.hutool.core.date.format.FastDateFormat:cn.hutool.core.date.format.FastDateFormat getDateInstance(int,java.util.Locale)",
            "cn.hutool.core.date.format.FastDateFormat:cn.hutool.core.date.format.FastDateFormat getDateInstance(int,java.util.TimeZone)",
            "cn.hutool.core.date.format.FastDateFormat:cn.hutool.core.date.format.FastDateFormat getDateInstance(int,java.util.TimeZone,java.util.Locale)"
        ]
    },
    "cn.hutool.core.date.format.FormatCache:java.text.Format getTimeInstance(int,java.util.TimeZone,java.util.Locale)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.date.format.FastDateFormat:cn.hutool.core.date.format.FastDateFormat getTimeInstance(int)",
            "cn.hutool.core.date.format.FastDateFormat:cn.hutool.core.date.format.FastDateFormat getTimeInstance(int,java.util.Locale)",
            "cn.hutool.core.date.format.FastDateFormat:cn.hutool.core.date.format.FastDateFormat getTimeInstance(int,java.util.TimeZone)",
            "cn.hutool.core.date.format.FastDateFormat:cn.hutool.core.date.format.FastDateFormat getTimeInstance(int,java.util.TimeZone,java.util.Locale)"
        ]
    },
    "cn.hutool.extra.template.engine.velocity.VelocityEngine:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.date.DateUtil:int toIntSecond(java.util.Date)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.date.DateUtil:java.lang.String now()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.log.dialect.console.ConsoleLog:void log(cn.hutool.log.level.Level,java.lang.Throwable,java.lang.String,java.lang.Object[])"
        ]
    },
    "cn.hutool.core.date.DateUtil:java.lang.String today()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.date.DateUtil:cn.hutool.core.date.DateTime parseTimeToday(java.lang.String)"
        ]
    },
    "cn.hutool.core.text.csv.CsvUtil:cn.hutool.core.text.csv.CsvWriter getWriter(java.io.File,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.text.csv.CsvWriter:void <init>(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.text.csv.CsvWriter:void <init>(java.lang.String)"
        ]
    },
    "cn.hutool.core.io.watch.WatchMonitor:cn.hutool.core.io.watch.WatchMonitor createAll(java.net.URI,cn.hutool.core.io.watch.Watcher)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.watch.WatchMonitor:cn.hutool.core.io.watch.WatchMonitor createAll(java.io.File,cn.hutool.core.io.watch.Watcher)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.watch.WatchMonitor:cn.hutool.core.io.watch.WatchMonitor createAll(java.lang.String,cn.hutool.core.io.watch.Watcher)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.watch.WatchUtil:cn.hutool.core.io.watch.WatchMonitor createAll(java.net.URI,cn.hutool.core.io.watch.Watcher)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.watch.WatchUtil:cn.hutool.core.io.watch.WatchMonitor createAll(java.io.File,cn.hutool.core.io.watch.Watcher)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.io.watch.WatchUtil:cn.hutool.core.io.watch.WatchMonitor createAll(java.lang.String,cn.hutool.core.io.watch.Watcher)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.captcha.AbstractCaptcha:void <init>(int,int,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.captcha.CircleCaptcha:void <init>(int,int,int,int)",
            "cn.hutool.captcha.LineCaptcha:void <init>(int,int,int,int)",
            "cn.hutool.captcha.ShearCaptcha:void <init>(int,int,int,int)"
        ]
    },
    "cn.hutool.crypto.asymmetric.RSA:void <init>(java.security.PrivateKey,java.security.PublicKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.asymmetric.RSA:void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)"
        ]
    },
    "cn.hutool.crypto.asymmetric.AsymmetricCrypto:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.asymmetric.AsymmetricCrypto:void <init>(cn.hutool.crypto.asymmetric.AsymmetricAlgorithm,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.asymmetric.RSA:void <init>(java.lang.String,java.lang.String)"
        ]
    },
    "cn.hutool.crypto.asymmetric.AsymmetricCrypto:void <init>(cn.hutool.crypto.asymmetric.AsymmetricAlgorithm,byte[],byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.asymmetric.AsymmetricCrypto:void <init>(cn.hutool.crypto.asymmetric.AsymmetricAlgorithm)",
            "cn.hutool.crypto.asymmetric.RSA:void <init>(byte[],byte[])"
        ]
    },
    "cn.hutool.crypto.asymmetric.AsymmetricCrypto:void <init>(java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.asymmetric.Sign:void <init>(java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.asymmetric.Sign:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.asymmetric.Sign:void <init>(cn.hutool.crypto.asymmetric.SignAlgorithm,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.SecureUtil:cn.hutool.crypto.asymmetric.Sign sign(cn.hutool.crypto.asymmetric.SignAlgorithm,java.lang.String,java.lang.String)"
        ]
    },
    "cn.hutool.crypto.asymmetric.Sign:void <init>(cn.hutool.crypto.asymmetric.SignAlgorithm,byte[],byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.asymmetric.Sign:void <init>(cn.hutool.crypto.asymmetric.SignAlgorithm)",
            "cn.hutool.crypto.SecureUtil:cn.hutool.crypto.asymmetric.Sign sign(cn.hutool.crypto.asymmetric.SignAlgorithm,byte[],byte[])"
        ]
    },
    "cn.hutool.core.util.ImageUtil:java.awt.Image scale(java.awt.Image,int,int,java.awt.Color)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.ImageUtil:void scale(java.io.File,java.io.File,int,int,java.awt.Color)",
            "cn.hutool.core.util.ImageUtil:void scale(java.awt.Image,javax.imageio.stream.ImageOutputStream,int,int,java.awt.Color)"
        ]
    },
    "cn.hutool.core.text.TextSimilarity:java.lang.String similar(java.lang.String,java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.util.StrUtil:java.lang.String similar(java.lang.String,java.lang.String,int)"
        ]
    },
    "cn.hutool.core.util.StrUtil:double similar(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.date.format.FastDateFormat:cn.hutool.core.date.format.FastDateFormat getDateTimeInstance(int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.date.format.FastDateFormat:cn.hutool.core.date.format.FastDateFormat getDateTimeInstance(int,int,java.util.Locale)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.date.format.FastDateFormat:cn.hutool.core.date.format.FastDateFormat getDateTimeInstance(int,int,java.util.TimeZone,java.util.Locale)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.date.format.FastDateFormat:cn.hutool.core.date.format.FastDateFormat getDateTimeInstance(int,int,java.util.TimeZone)"
        ]
    },
    "cn.hutool.core.date.format.FormatCache:java.text.Format getInstance()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.core.date.format.FastDateFormat:cn.hutool.core.date.format.FastDateFormat getInstance()"
        ]
    },
    "cn.hutool.core.date.format.FastDateFormat:cn.hutool.core.date.format.FastDateFormat getDateInstance(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.date.format.FastDateFormat:cn.hutool.core.date.format.FastDateFormat getDateInstance(int,java.util.Locale)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.date.format.FastDateFormat:cn.hutool.core.date.format.FastDateFormat getDateInstance(int,java.util.TimeZone)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.date.format.FastDateFormat:cn.hutool.core.date.format.FastDateFormat getDateInstance(int,java.util.TimeZone,java.util.Locale)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.date.format.FastDateFormat:cn.hutool.core.date.format.FastDateFormat getTimeInstance(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.date.format.FastDateFormat:cn.hutool.core.date.format.FastDateFormat getTimeInstance(int,java.util.Locale)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.date.format.FastDateFormat:cn.hutool.core.date.format.FastDateFormat getTimeInstance(int,java.util.TimeZone)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.date.format.FastDateFormat:cn.hutool.core.date.format.FastDateFormat getTimeInstance(int,java.util.TimeZone,java.util.Locale)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.captcha.CircleCaptcha:void <init>(int,int,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.captcha.CaptchaUtil:cn.hutool.captcha.CircleCaptcha createCircleCaptcha(int,int,int,int)",
            "cn.hutool.captcha.CircleCaptcha:void <init>(int,int,int)"
        ]
    },
    "cn.hutool.captcha.LineCaptcha:void <init>(int,int,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.captcha.CaptchaUtil:cn.hutool.captcha.LineCaptcha createLineCaptcha(int,int,int,int)",
            "cn.hutool.captcha.LineCaptcha:void <init>(int,int)"
        ]
    },
    "cn.hutool.captcha.ShearCaptcha:void <init>(int,int,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.captcha.CaptchaUtil:cn.hutool.captcha.ShearCaptcha createShearCaptcha(int,int,int,int)",
            "cn.hutool.captcha.ShearCaptcha:void <init>(int,int,int)"
        ]
    },
    "cn.hutool.crypto.asymmetric.RSA:void <init>(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.SecureUtil:cn.hutool.crypto.asymmetric.RSA rsa(java.lang.String,java.lang.String)"
        ]
    },
    "cn.hutool.crypto.asymmetric.AsymmetricCrypto:void <init>(cn.hutool.crypto.asymmetric.AsymmetricAlgorithm)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.asymmetric.RSA:void <init>()"
        ]
    },
    "cn.hutool.crypto.asymmetric.RSA:void <init>(byte[],byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.SecureUtil:cn.hutool.crypto.asymmetric.RSA rsa(byte[],byte[])"
        ]
    },
    "cn.hutool.crypto.SecureUtil:cn.hutool.crypto.asymmetric.Sign sign(cn.hutool.crypto.asymmetric.SignAlgorithm,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.asymmetric.Sign:void <init>(cn.hutool.crypto.asymmetric.SignAlgorithm)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.SecureUtil:cn.hutool.crypto.asymmetric.Sign sign(cn.hutool.crypto.asymmetric.SignAlgorithm)"
        ]
    },
    "cn.hutool.crypto.SecureUtil:cn.hutool.crypto.asymmetric.Sign sign(cn.hutool.crypto.asymmetric.SignAlgorithm,byte[],byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.util.StrUtil:java.lang.String similar(java.lang.String,java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.date.format.FastDateFormat:cn.hutool.core.date.format.FastDateFormat getDateTimeInstance(int,int,java.util.TimeZone)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.core.date.format.FastDateFormat:cn.hutool.core.date.format.FastDateFormat getInstance()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.captcha.CaptchaUtil:cn.hutool.captcha.CircleCaptcha createCircleCaptcha(int,int,int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.captcha.CircleCaptcha:void <init>(int,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.captcha.CircleCaptcha:void <init>(int,int)"
        ]
    },
    "cn.hutool.captcha.CaptchaUtil:cn.hutool.captcha.LineCaptcha createLineCaptcha(int,int,int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.captcha.LineCaptcha:void <init>(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.captcha.CaptchaUtil:cn.hutool.captcha.LineCaptcha createLineCaptcha(int,int)"
        ]
    },
    "cn.hutool.captcha.CaptchaUtil:cn.hutool.captcha.ShearCaptcha createShearCaptcha(int,int,int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.captcha.ShearCaptcha:void <init>(int,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.captcha.ShearCaptcha:void <init>(int,int)"
        ]
    },
    "cn.hutool.crypto.SecureUtil:cn.hutool.crypto.asymmetric.RSA rsa(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.asymmetric.RSA:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.crypto.SecureUtil:cn.hutool.crypto.asymmetric.RSA rsa()"
        ]
    },
    "cn.hutool.crypto.SecureUtil:cn.hutool.crypto.asymmetric.RSA rsa(byte[],byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.crypto.SecureUtil:cn.hutool.crypto.asymmetric.Sign sign(cn.hutool.crypto.asymmetric.SignAlgorithm)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.captcha.CircleCaptcha:void <init>(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.captcha.CaptchaUtil:cn.hutool.captcha.CircleCaptcha createCircleCaptcha(int,int)"
        ]
    },
    "cn.hutool.captcha.CaptchaUtil:cn.hutool.captcha.LineCaptcha createLineCaptcha(int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.captcha.ShearCaptcha:void <init>(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "cn.hutool.captcha.CaptchaUtil:cn.hutool.captcha.ShearCaptcha createShearCaptcha(int,int)"
        ]
    },
    "cn.hutool.crypto.SecureUtil:cn.hutool.crypto.asymmetric.RSA rsa()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.captcha.CaptchaUtil:cn.hutool.captcha.CircleCaptcha createCircleCaptcha(int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "cn.hutool.captcha.CaptchaUtil:cn.hutool.captcha.ShearCaptcha createShearCaptcha(int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    }
}