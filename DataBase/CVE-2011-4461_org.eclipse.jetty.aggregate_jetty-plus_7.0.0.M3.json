{
    "org.eclipse.jetty.server.Request:void extractParameters()": {
        "isVulRoot": true,
        "vulCaller": [
            "org.eclipse.jetty.server.Request:java.lang.String getParameter(java.lang.String)",
            "org.eclipse.jetty.server.Request:java.util.Map getParameterMap()",
            "org.eclipse.jetty.server.Request:java.util.Enumeration getParameterNames()",
            "org.eclipse.jetty.server.Request:java.lang.String[] getParameterValues(java.lang.String)"
        ]
    },
    "org.eclipse.jetty.server.Request:java.lang.String getParameter(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.security.authentication.FormAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)",
            "org.eclipse.jetty.servlet.StatisticsServlet:void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.Request:java.util.Map getParameterMap()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.Request:java.util.Enumeration getParameterNames()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.Dispatcher:void forward(javax.servlet.ServletRequest,javax.servlet.ServletResponse,org.eclipse.jetty.server.DispatcherType)"
        ]
    },
    "org.eclipse.jetty.server.Request:java.lang.String[] getParameterValues(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.plus.jaas.callback.DefaultCallbackHandler:void handle(javax.security.auth.callback.Callback[])"
        ]
    },
    "org.eclipse.jetty.security.authentication.FormAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.security.authentication.DeferredAuthenticator$DeferredAuthentication:org.eclipse.jetty.server.Authentication authenticate()",
            "org.eclipse.jetty.security.authentication.DeferredAuthenticator$DeferredAuthentication:org.eclipse.jetty.server.Authentication authenticate(javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "org.eclipse.jetty.security.authentication.DeferredAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)",
            "org.eclipse.jetty.security.authentication.DelegateAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)",
            "org.eclipse.jetty.security.authentication.SessionCachingAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)",
            "org.eclipse.jetty.security.authentication.XCPSCachingAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)",
            "org.eclipse.jetty.security.SecurityHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.servlet.StatisticsServlet:void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.Dispatcher:void forward(javax.servlet.ServletRequest,javax.servlet.ServletResponse,org.eclipse.jetty.server.DispatcherType)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.Dispatcher:void forward(javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "org.eclipse.jetty.server.Dispatcher:void error(javax.servlet.ServletRequest,javax.servlet.ServletResponse)"
        ]
    },
    "org.eclipse.jetty.plus.jaas.callback.DefaultCallbackHandler:void handle(javax.security.auth.callback.Callback[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.plus.jaas.spi.AbstractLoginModule:boolean login()",
            "org.eclipse.jetty.plus.jaas.spi.LdapLoginModule:boolean login()",
            "org.eclipse.jetty.plus.jaas.JAASLoginService:java.lang.String getUserName(javax.security.auth.callback.CallbackHandler)"
        ]
    },
    "org.eclipse.jetty.security.authentication.DeferredAuthenticator$DeferredAuthentication:org.eclipse.jetty.server.Authentication authenticate()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.Request:java.lang.String getAuthType()",
            "org.eclipse.jetty.server.Request:org.eclipse.jetty.server.UserIdentity getUserIdentity()",
            "org.eclipse.jetty.server.Request:java.security.Principal getUserPrincipal()",
            "org.eclipse.jetty.server.Request:boolean isUserInRole(java.lang.String)"
        ]
    },
    "org.eclipse.jetty.security.authentication.DeferredAuthenticator$DeferredAuthentication:org.eclipse.jetty.server.Authentication authenticate(javax.servlet.ServletRequest,javax.servlet.ServletResponse)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.security.authentication.DeferredAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.security.authentication.DeferredAuthenticator$DeferredAuthentication:org.eclipse.jetty.server.Authentication authenticate()",
            "org.eclipse.jetty.security.authentication.DeferredAuthenticator$DeferredAuthentication:org.eclipse.jetty.server.Authentication authenticate(javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "org.eclipse.jetty.security.authentication.DeferredAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)",
            "org.eclipse.jetty.security.authentication.DelegateAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)",
            "org.eclipse.jetty.security.authentication.SessionCachingAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)",
            "org.eclipse.jetty.security.authentication.XCPSCachingAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)",
            "org.eclipse.jetty.security.SecurityHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.security.authentication.DelegateAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.security.authentication.DeferredAuthenticator$DeferredAuthentication:org.eclipse.jetty.server.Authentication authenticate()",
            "org.eclipse.jetty.security.authentication.DeferredAuthenticator$DeferredAuthentication:org.eclipse.jetty.server.Authentication authenticate(javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "org.eclipse.jetty.security.authentication.DeferredAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)",
            "org.eclipse.jetty.security.authentication.DelegateAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)",
            "org.eclipse.jetty.security.authentication.SessionCachingAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)",
            "org.eclipse.jetty.security.authentication.XCPSCachingAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)",
            "org.eclipse.jetty.security.SecurityHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.security.authentication.SessionCachingAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.security.authentication.DeferredAuthenticator$DeferredAuthentication:org.eclipse.jetty.server.Authentication authenticate()",
            "org.eclipse.jetty.security.authentication.DeferredAuthenticator$DeferredAuthentication:org.eclipse.jetty.server.Authentication authenticate(javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "org.eclipse.jetty.security.authentication.DeferredAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)",
            "org.eclipse.jetty.security.authentication.DelegateAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)",
            "org.eclipse.jetty.security.authentication.SessionCachingAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)",
            "org.eclipse.jetty.security.authentication.XCPSCachingAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)",
            "org.eclipse.jetty.security.SecurityHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.security.authentication.XCPSCachingAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.security.authentication.DeferredAuthenticator$DeferredAuthentication:org.eclipse.jetty.server.Authentication authenticate()",
            "org.eclipse.jetty.security.authentication.DeferredAuthenticator$DeferredAuthentication:org.eclipse.jetty.server.Authentication authenticate(javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "org.eclipse.jetty.security.authentication.DeferredAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)",
            "org.eclipse.jetty.security.authentication.DelegateAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)",
            "org.eclipse.jetty.security.authentication.SessionCachingAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)",
            "org.eclipse.jetty.security.authentication.XCPSCachingAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)",
            "org.eclipse.jetty.security.SecurityHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.security.SecurityHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.security.SecurityHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerList:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerWrapper:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HotSwapHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ScopedHandler:void nextHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.session.SessionHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.Dispatcher:void forward(javax.servlet.ServletRequest,javax.servlet.ServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.security.authentication.FormAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)",
            "org.eclipse.jetty.servlet.DefaultServlet:void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.Dispatcher:void error(javax.servlet.ServletRequest,javax.servlet.ServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ErrorPageErrorHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.plus.jaas.spi.AbstractLoginModule:boolean login()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.plus.jaas.spi.LdapLoginModule:boolean login()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.plus.jaas.JAASLoginService:java.lang.String getUserName(javax.security.auth.callback.CallbackHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.plus.jaas.JAASLoginService:org.eclipse.jetty.server.UserIdentity login(java.lang.String,java.lang.Object)"
        ]
    },
    "org.eclipse.jetty.server.Request:java.lang.String getAuthType()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.security.ConstraintSecurityHandler:boolean checkWebResourcePermissions(java.lang.String,org.eclipse.jetty.server.Request,org.eclipse.jetty.server.Response,java.lang.Object,org.eclipse.jetty.server.UserIdentity)"
        ]
    },
    "org.eclipse.jetty.server.Request:org.eclipse.jetty.server.UserIdentity getUserIdentity()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletHolder:void handle(org.eclipse.jetty.server.Request,javax.servlet.ServletRequest,javax.servlet.ServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.Request:java.security.Principal getUserPrincipal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.Request:java.lang.String getRemoteUser()"
        ]
    },
    "org.eclipse.jetty.server.Request:boolean isUserInRole(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.handler.ContextHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ContextHandler:void doScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ScopedHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ScopedHandler:void nextScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ScopedHandler:void nextHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.servlet.ServletHandler:void doScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.handler.ContextHandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.security.SecurityHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerList:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerWrapper:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HotSwapHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ScopedHandler:void nextHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.session.SessionHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.handler.HandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.security.SecurityHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerList:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerWrapper:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HotSwapHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ScopedHandler:void nextHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.session.SessionHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.handler.HandlerList:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.security.SecurityHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerList:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerWrapper:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HotSwapHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ScopedHandler:void nextHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.session.SessionHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.handler.HandlerWrapper:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.security.SecurityHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerList:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerWrapper:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HotSwapHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.RequestLogHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ScopedHandler:void nextHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.StatisticsHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.session.SessionHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.Server:void handle(org.eclipse.jetty.server.HttpConnection)",
            "org.eclipse.jetty.server.Server:void handleAsync(org.eclipse.jetty.server.HttpConnection)"
        ]
    },
    "org.eclipse.jetty.server.handler.HotSwapHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.security.SecurityHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerList:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerWrapper:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HotSwapHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ScopedHandler:void nextHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.session.SessionHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.handler.ScopedHandler:void nextHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.session.SessionHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.security.SecurityHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerList:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerWrapper:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HotSwapHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ScopedHandler:void nextHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.session.SessionHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.servlet.DefaultServlet:void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.servlet.ErrorPageErrorHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.security.SecurityHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerList:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerWrapper:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HotSwapHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ScopedHandler:void nextHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.session.SessionHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.Response:void sendError(int,java.lang.String)"
        ]
    },
    "org.eclipse.jetty.plus.jaas.JAASLoginService:org.eclipse.jetty.server.UserIdentity login(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.security.authentication.BasicAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)",
            "org.eclipse.jetty.security.authentication.ClientCertAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)",
            "org.eclipse.jetty.security.authentication.DigestAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)",
            "org.eclipse.jetty.security.authentication.FormAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)"
        ]
    },
    "org.eclipse.jetty.security.ConstraintSecurityHandler:boolean checkWebResourcePermissions(java.lang.String,org.eclipse.jetty.server.Request,org.eclipse.jetty.server.Response,java.lang.Object,org.eclipse.jetty.server.UserIdentity)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.security.SecurityHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.servlet.ServletHolder:void handle(org.eclipse.jetty.server.Request,javax.servlet.ServletRequest,javax.servlet.ServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.Invoker:void service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.servlet.ServletHandler$CachedChain:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "org.eclipse.jetty.servlet.ServletHandler$Chain:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "org.eclipse.jetty.servlet.ServletHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.Request:java.lang.String getRemoteUser()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.handler.ContextHandler:void doScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ContextHandler:void doScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ScopedHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ScopedHandler:void nextScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.servlet.ServletHandler:void doScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.handler.ScopedHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.security.SecurityHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerList:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerWrapper:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HotSwapHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ScopedHandler:void nextHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.session.SessionHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.Dispatcher:void include(javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "org.eclipse.jetty.server.Dispatcher:void forward(javax.servlet.ServletRequest,javax.servlet.ServletResponse,org.eclipse.jetty.server.DispatcherType)"
        ]
    },
    "org.eclipse.jetty.server.handler.ScopedHandler:void nextScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.servlet.ServletHandler:void doScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ContextHandler:void doScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ScopedHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ScopedHandler:void nextScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.servlet.ServletHandler:void doScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.handler.RequestLogHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.security.SecurityHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerList:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerWrapper:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HotSwapHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ScopedHandler:void nextHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.session.SessionHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.handler.StatisticsHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.security.SecurityHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerList:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerWrapper:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HotSwapHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ScopedHandler:void nextHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.session.SessionHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.Server:void handle(org.eclipse.jetty.server.HttpConnection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.HttpConnection:void handleRequest()"
        ]
    },
    "org.eclipse.jetty.server.Server:void handleAsync(org.eclipse.jetty.server.HttpConnection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.HttpConnection:void handleRequest()"
        ]
    },
    "org.eclipse.jetty.server.Response:void sendError(int,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.security.SecurityHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.HttpConnection:void handleRequest()",
            "org.eclipse.jetty.server.Response:void sendError(int)",
            "org.eclipse.jetty.servlet.DefaultServlet:void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.servlet.DefaultServlet:boolean passConditionalHeaders(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.eclipse.jetty.util.resource.Resource,org.eclipse.jetty.http.HttpContent)",
            "org.eclipse.jetty.servlet.DefaultServlet:void sendDirectory(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.eclipse.jetty.util.resource.Resource,boolean)",
            "org.eclipse.jetty.servlet.NoJspServlet:void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.servlet.ServletHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.security.authentication.BasicAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.security.authentication.DeferredAuthenticator$DeferredAuthentication:org.eclipse.jetty.server.Authentication authenticate()",
            "org.eclipse.jetty.security.authentication.DeferredAuthenticator$DeferredAuthentication:org.eclipse.jetty.server.Authentication authenticate(javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "org.eclipse.jetty.security.authentication.DeferredAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)",
            "org.eclipse.jetty.security.authentication.DelegateAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)",
            "org.eclipse.jetty.security.authentication.SessionCachingAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)",
            "org.eclipse.jetty.security.authentication.XCPSCachingAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)",
            "org.eclipse.jetty.security.SecurityHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.security.authentication.ClientCertAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.security.authentication.DeferredAuthenticator$DeferredAuthentication:org.eclipse.jetty.server.Authentication authenticate()",
            "org.eclipse.jetty.security.authentication.DeferredAuthenticator$DeferredAuthentication:org.eclipse.jetty.server.Authentication authenticate(javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "org.eclipse.jetty.security.authentication.DeferredAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)",
            "org.eclipse.jetty.security.authentication.DelegateAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)",
            "org.eclipse.jetty.security.authentication.SessionCachingAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)",
            "org.eclipse.jetty.security.authentication.XCPSCachingAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)",
            "org.eclipse.jetty.security.SecurityHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.security.authentication.DigestAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.security.authentication.DeferredAuthenticator$DeferredAuthentication:org.eclipse.jetty.server.Authentication authenticate()",
            "org.eclipse.jetty.security.authentication.DeferredAuthenticator$DeferredAuthentication:org.eclipse.jetty.server.Authentication authenticate(javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "org.eclipse.jetty.security.authentication.DeferredAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)",
            "org.eclipse.jetty.security.authentication.DelegateAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)",
            "org.eclipse.jetty.security.authentication.SessionCachingAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)",
            "org.eclipse.jetty.security.authentication.XCPSCachingAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)",
            "org.eclipse.jetty.security.SecurityHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.servlet.Invoker:void service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.servlet.ServletHandler$CachedChain:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.continuation.ContinuationFilter:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)",
            "org.eclipse.jetty.servlet.ServletHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.servlet.ServletHandler$Chain:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.continuation.ContinuationFilter:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)",
            "org.eclipse.jetty.servlet.ServletHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.servlet.ServletHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ContextHandler:void doScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ScopedHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ScopedHandler:void nextScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ScopedHandler:void nextHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.servlet.ServletHandler:void doScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.Dispatcher:void include(javax.servlet.ServletRequest,javax.servlet.ServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.DefaultServlet:void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.HttpConnection:void handleRequest()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.HttpConnection$RequestHandler:void headerComplete()",
            "org.eclipse.jetty.server.HttpConnection$RequestHandler:void content(org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.server.HttpConnection$RequestHandler:void messageComplete(long)",
            "org.eclipse.jetty.server.HttpConnection:void handle()"
        ]
    },
    "org.eclipse.jetty.server.Response:void sendError(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.security.authentication.BasicAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)",
            "org.eclipse.jetty.security.authentication.ClientCertAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)",
            "org.eclipse.jetty.security.authentication.DigestAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)",
            "org.eclipse.jetty.security.authentication.FormAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)",
            "org.eclipse.jetty.security.SecurityHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandler:boolean checkContext(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.DefaultHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ResourceHandler:void doDirectory(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.eclipse.jetty.util.resource.Resource)",
            "org.eclipse.jetty.server.HttpConnection:void handleRequest()",
            "org.eclipse.jetty.servlet.DefaultServlet:void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.servlet.DefaultServlet:void doTrace(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.servlet.DefaultServlet:boolean passConditionalHeaders(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.eclipse.jetty.util.resource.Resource,org.eclipse.jetty.http.HttpContent)",
            "org.eclipse.jetty.servlet.DefaultServlet:void sendDirectory(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.eclipse.jetty.util.resource.Resource,boolean)",
            "org.eclipse.jetty.servlet.Invoker:void service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.servlet.ServletHandler:void notFound(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.servlet.StatisticsServlet:void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.servlet.DefaultServlet:boolean passConditionalHeaders(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.eclipse.jetty.util.resource.Resource,org.eclipse.jetty.http.HttpContent)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.servlet.DefaultServlet:void sendDirectory(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.eclipse.jetty.util.resource.Resource,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.servlet.NoJspServlet:void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.continuation.ContinuationFilter:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletHandler$CachedChain:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "org.eclipse.jetty.servlet.ServletHandler$Chain:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.HttpConnection$RequestHandler:void headerComplete()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.http.HttpParser:long parseNext()"
        ]
    },
    "org.eclipse.jetty.server.HttpConnection$RequestHandler:void content(org.eclipse.jetty.io.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.http.HttpParser:long parseNext()"
        ]
    },
    "org.eclipse.jetty.server.HttpConnection$RequestHandler:void messageComplete(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.http.HttpParser:long parseNext()"
        ]
    },
    "org.eclipse.jetty.server.HttpConnection:void handle()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.io.nio.SelectChannelEndPoint:void run()",
            "org.eclipse.jetty.server.bio.SocketConnector$Connection:void run()",
            "org.eclipse.jetty.server.nio.BlockingChannelConnector$Connection:void run()",
            "org.eclipse.jetty.server.LocalConnector:void accept(int)"
        ]
    },
    "org.eclipse.jetty.server.handler.ContextHandler:boolean checkContext(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ContextHandler:void doScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.handler.DefaultHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.security.SecurityHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerList:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerWrapper:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HotSwapHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ScopedHandler:void nextHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.session.SessionHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.handler.ResourceHandler:void doDirectory(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.eclipse.jetty.util.resource.Resource)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ResourceHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.servlet.DefaultServlet:void doTrace(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.servlet.ServletHandler:void notFound(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletHandler$CachedChain:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "org.eclipse.jetty.servlet.ServletHandler$Chain:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "org.eclipse.jetty.servlet.ServletHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.http.HttpParser:long parseNext()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.http.HttpParser:void parse()",
            "org.eclipse.jetty.http.HttpParser:long parseAvailable()",
            "org.eclipse.jetty.http.HttpParser:org.eclipse.jetty.io.Buffer blockForContent(long)",
            "org.eclipse.jetty.http.HttpParser:int available()"
        ]
    },
    "org.eclipse.jetty.io.nio.SelectChannelEndPoint:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.http.ssl.SslSelectChannelEndPoint:void close()",
            "org.eclipse.jetty.http.ssl.SslSelectChannelEndPoint:int fill(org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.http.ssl.SslSelectChannelEndPoint:int flush(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.server.handler.ContextHandler:void handle(java.lang.Runnable)",
            "org.eclipse.jetty.util.thread.ExecutorThreadPool:boolean dispatch(java.lang.Runnable)",
            "org.eclipse.jetty.util.thread.OldQueuedThreadPool$PoolThread:void run()",
            "org.eclipse.jetty.util.thread.QueuedThreadPool$2:void run()"
        ]
    },
    "org.eclipse.jetty.server.bio.SocketConnector$Connection:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.http.ssl.SslSelectChannelEndPoint:void close()",
            "org.eclipse.jetty.http.ssl.SslSelectChannelEndPoint:int fill(org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.http.ssl.SslSelectChannelEndPoint:int flush(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.server.handler.ContextHandler:void handle(java.lang.Runnable)",
            "org.eclipse.jetty.server.ssl.SslSocketConnector$SslConnection:void run()",
            "org.eclipse.jetty.util.thread.ExecutorThreadPool:boolean dispatch(java.lang.Runnable)",
            "org.eclipse.jetty.util.thread.OldQueuedThreadPool$PoolThread:void run()",
            "org.eclipse.jetty.util.thread.QueuedThreadPool$2:void run()"
        ]
    },
    "org.eclipse.jetty.server.nio.BlockingChannelConnector$Connection:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.http.ssl.SslSelectChannelEndPoint:void close()",
            "org.eclipse.jetty.http.ssl.SslSelectChannelEndPoint:int fill(org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.http.ssl.SslSelectChannelEndPoint:int flush(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.server.handler.ContextHandler:void handle(java.lang.Runnable)",
            "org.eclipse.jetty.util.thread.ExecutorThreadPool:boolean dispatch(java.lang.Runnable)",
            "org.eclipse.jetty.util.thread.OldQueuedThreadPool$PoolThread:void run()",
            "org.eclipse.jetty.util.thread.QueuedThreadPool$2:void run()"
        ]
    },
    "org.eclipse.jetty.server.LocalConnector:void accept(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.AbstractConnector$Acceptor:void run()"
        ]
    },
    "org.eclipse.jetty.server.handler.ResourceHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.security.SecurityHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerList:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerWrapper:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HotSwapHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ScopedHandler:void nextHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.session.SessionHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.http.HttpParser:void parse()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.http.HttpParser:long parseAvailable()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.HttpConnection:void handle()"
        ]
    },
    "org.eclipse.jetty.http.HttpParser:org.eclipse.jetty.io.Buffer blockForContent(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.HttpInput:int read()",
            "org.eclipse.jetty.server.HttpInput:int read(byte[],int,int)"
        ]
    },
    "org.eclipse.jetty.http.HttpParser:int available()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.http.ssl.SslSelectChannelEndPoint:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.http.AbstractGenerator:void blockForOutput(long)",
            "org.eclipse.jetty.http.HttpGenerator:long flushBuffer()",
            "org.eclipse.jetty.http.HttpParser:org.eclipse.jetty.io.Buffer blockForContent(long)",
            "org.eclipse.jetty.io.nio.SelectChannelEndPoint:void idleExpired()",
            "org.eclipse.jetty.io.nio.SelectChannelEndPoint:void run()",
            "org.eclipse.jetty.io.nio.SelectorManager$SelectSet:void stop()",
            "org.eclipse.jetty.server.HttpConnection:void handle()",
            "org.eclipse.jetty.server.HttpConnection:void handleRequest()"
        ]
    },
    "org.eclipse.jetty.http.ssl.SslSelectChannelEndPoint:int fill(org.eclipse.jetty.io.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.http.HttpParser:long parseNext()",
            "org.eclipse.jetty.http.HttpParser:long fill()"
        ]
    },
    "org.eclipse.jetty.http.ssl.SslSelectChannelEndPoint:int flush(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.http.ssl.SslSelectChannelEndPoint:int flush(org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.http.HttpGenerator:long flushBuffer()"
        ]
    },
    "org.eclipse.jetty.server.handler.ContextHandler:void handle(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.AsyncContinuation:void start(java.lang.Runnable)"
        ]
    },
    "org.eclipse.jetty.util.thread.ExecutorThreadPool:boolean dispatch(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.bio.SocketConnector$Connection:void dispatch()",
            "org.eclipse.jetty.server.nio.BlockingChannelConnector$Connection:void dispatch()",
            "org.eclipse.jetty.server.nio.SelectChannelConnector$1:boolean dispatch(java.lang.Runnable)",
            "org.eclipse.jetty.server.AbstractConnector:void doStart()"
        ]
    },
    "org.eclipse.jetty.util.thread.OldQueuedThreadPool$PoolThread:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.http.ssl.SslSelectChannelEndPoint:void close()",
            "org.eclipse.jetty.http.ssl.SslSelectChannelEndPoint:int fill(org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.http.ssl.SslSelectChannelEndPoint:int flush(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.server.handler.ContextHandler:void handle(java.lang.Runnable)",
            "org.eclipse.jetty.util.thread.ExecutorThreadPool:boolean dispatch(java.lang.Runnable)",
            "org.eclipse.jetty.util.thread.OldQueuedThreadPool$PoolThread:void run()",
            "org.eclipse.jetty.util.thread.OldQueuedThreadPool:void newThread()",
            "org.eclipse.jetty.util.thread.QueuedThreadPool$2:void run()",
            "org.eclipse.jetty.util.thread.QueuedThreadPool:boolean startThread(int)"
        ]
    },
    "org.eclipse.jetty.util.thread.QueuedThreadPool$2:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.http.ssl.SslSelectChannelEndPoint:void close()",
            "org.eclipse.jetty.http.ssl.SslSelectChannelEndPoint:int fill(org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.http.ssl.SslSelectChannelEndPoint:int flush(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.server.handler.ContextHandler:void handle(java.lang.Runnable)",
            "org.eclipse.jetty.util.thread.ExecutorThreadPool:boolean dispatch(java.lang.Runnable)",
            "org.eclipse.jetty.util.thread.OldQueuedThreadPool$PoolThread:void run()",
            "org.eclipse.jetty.util.thread.QueuedThreadPool$2:void run()"
        ]
    },
    "org.eclipse.jetty.server.ssl.SslSocketConnector$SslConnection:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.http.ssl.SslSelectChannelEndPoint:void close()",
            "org.eclipse.jetty.http.ssl.SslSelectChannelEndPoint:int fill(org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.http.ssl.SslSelectChannelEndPoint:int flush(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.server.handler.ContextHandler:void handle(java.lang.Runnable)",
            "org.eclipse.jetty.util.thread.ExecutorThreadPool:boolean dispatch(java.lang.Runnable)",
            "org.eclipse.jetty.util.thread.OldQueuedThreadPool$PoolThread:void run()",
            "org.eclipse.jetty.util.thread.QueuedThreadPool$2:void run()"
        ]
    },
    "org.eclipse.jetty.server.AbstractConnector$Acceptor:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.http.ssl.SslSelectChannelEndPoint:void close()",
            "org.eclipse.jetty.http.ssl.SslSelectChannelEndPoint:int fill(org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.http.ssl.SslSelectChannelEndPoint:int flush(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.server.handler.ContextHandler:void handle(java.lang.Runnable)",
            "org.eclipse.jetty.util.thread.ExecutorThreadPool:boolean dispatch(java.lang.Runnable)",
            "org.eclipse.jetty.util.thread.OldQueuedThreadPool$PoolThread:void run()",
            "org.eclipse.jetty.util.thread.QueuedThreadPool$2:void run()"
        ]
    },
    "org.eclipse.jetty.server.HttpInput:int read()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.HttpInput:int read(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.http.AbstractGenerator:void blockForOutput(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.http.AbstractGenerator:void flush(long)",
            "org.eclipse.jetty.server.HttpOutput:void write(int)",
            "org.eclipse.jetty.server.HttpOutput:void write(org.eclipse.jetty.io.Buffer)"
        ]
    },
    "org.eclipse.jetty.http.HttpGenerator:long flushBuffer()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.http.AbstractGenerator:void flush(long)",
            "org.eclipse.jetty.http.AbstractGenerator:void blockForOutput(long)",
            "org.eclipse.jetty.http.HttpGenerator:void addContent(org.eclipse.jetty.io.Buffer,boolean)",
            "org.eclipse.jetty.http.HttpGenerator:boolean addContent(byte)",
            "org.eclipse.jetty.http.HttpGenerator:int prepareUncheckedAddContent()",
            "org.eclipse.jetty.http.HttpGenerator:void complete()",
            "org.eclipse.jetty.server.HttpConnection:void handle()",
            "org.eclipse.jetty.server.HttpConnection:void flushResponse()",
            "org.eclipse.jetty.server.Response:void sendProcessing()"
        ]
    },
    "org.eclipse.jetty.io.nio.SelectChannelEndPoint:void idleExpired()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.http.ssl.SslSelectChannelEndPoint:void doIdleExpired()",
            "org.eclipse.jetty.io.nio.SelectChannelEndPoint$IdleTask:void expired()"
        ]
    },
    "org.eclipse.jetty.io.nio.SelectorManager$SelectSet:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.io.nio.SelectorManager:void doStop()"
        ]
    },
    "org.eclipse.jetty.http.HttpParser:long fill()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.http.ssl.SslSelectChannelEndPoint:int flush(org.eclipse.jetty.io.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.http.HttpGenerator:long flushBuffer()",
            "org.eclipse.jetty.io.nio.ChannelEndPoint:int flush(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)"
        ]
    },
    "org.eclipse.jetty.server.AsyncContinuation:void start(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.bio.SocketConnector$Connection:void dispatch()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.bio.SocketConnector:void accept(int)",
            "org.eclipse.jetty.server.ssl.SslSocketConnector:void accept(int)"
        ]
    },
    "org.eclipse.jetty.server.nio.BlockingChannelConnector$Connection:void dispatch()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.nio.BlockingChannelConnector:void accept(int)"
        ]
    },
    "org.eclipse.jetty.server.nio.SelectChannelConnector$1:boolean dispatch(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.http.ssl.SslSelectChannelEndPoint:void idleExpired()",
            "org.eclipse.jetty.io.nio.SelectChannelEndPoint:void dispatch()",
            "org.eclipse.jetty.io.nio.SelectorManager$SelectSet:void doSelect()"
        ]
    },
    "org.eclipse.jetty.server.AbstractConnector:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.bio.SocketConnector:void doStart()",
            "org.eclipse.jetty.server.nio.SelectChannelConnector:void doStart()",
            "org.eclipse.jetty.server.LocalConnector:void doStart()",
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()"
        ]
    },
    "org.eclipse.jetty.util.thread.OldQueuedThreadPool:void newThread()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.thread.OldQueuedThreadPool:boolean dispatch(java.lang.Runnable)",
            "org.eclipse.jetty.util.thread.OldQueuedThreadPool:void setMinThreads(int)",
            "org.eclipse.jetty.util.thread.OldQueuedThreadPool:void doStart()"
        ]
    },
    "org.eclipse.jetty.util.thread.QueuedThreadPool:boolean startThread(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.thread.QueuedThreadPool:void doStart()",
            "org.eclipse.jetty.util.thread.QueuedThreadPool:void setMinThreads(int)",
            "org.eclipse.jetty.util.thread.QueuedThreadPool:boolean dispatch(java.lang.Runnable)"
        ]
    },
    "org.eclipse.jetty.http.AbstractGenerator:void flush(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.HttpOutput:void flush()"
        ]
    },
    "org.eclipse.jetty.server.HttpOutput:void write(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.HttpOutput:void write(org.eclipse.jetty.io.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.HttpOutput:void write(byte[],int,int)",
            "org.eclipse.jetty.server.HttpOutput:void write(byte[])"
        ]
    },
    "org.eclipse.jetty.http.HttpGenerator:void addContent(org.eclipse.jetty.io.Buffer,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.http.AbstractGenerator:void sendError(int,java.lang.String,java.lang.String,boolean)",
            "org.eclipse.jetty.server.HttpConnection$Output:void sendContent(java.lang.Object)",
            "org.eclipse.jetty.server.HttpOutput:void write(org.eclipse.jetty.io.Buffer)"
        ]
    },
    "org.eclipse.jetty.http.HttpGenerator:boolean addContent(byte)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.HttpOutput:void write(int)"
        ]
    },
    "org.eclipse.jetty.http.HttpGenerator:int prepareUncheckedAddContent()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.HttpConnection$Output:void sendContent(java.lang.Object)"
        ]
    },
    "org.eclipse.jetty.http.HttpGenerator:void complete()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.http.AbstractGenerator:void sendError(int,java.lang.String,java.lang.String,boolean)",
            "org.eclipse.jetty.server.HttpConnection$RequestHandler:void headerComplete()",
            "org.eclipse.jetty.server.HttpConnection:javax.servlet.ServletInputStream getInputStream()",
            "org.eclipse.jetty.server.HttpConnection:void commitResponse(boolean)",
            "org.eclipse.jetty.server.HttpConnection:void completeResponse()",
            "org.eclipse.jetty.server.Response:void sendProcessing()"
        ]
    },
    "org.eclipse.jetty.server.HttpConnection:void flushResponse()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.HttpConnection$Output:void close()",
            "org.eclipse.jetty.server.Response:void flushBuffer()"
        ]
    },
    "org.eclipse.jetty.server.Response:void sendProcessing()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.Response:void sendError(int)"
        ]
    },
    "org.eclipse.jetty.http.ssl.SslSelectChannelEndPoint:void doIdleExpired()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.http.ssl.SslSelectChannelEndPoint$1:void run()"
        ]
    },
    "org.eclipse.jetty.io.nio.SelectChannelEndPoint$IdleTask:void expired()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.thread.Timeout:void tick(long)"
        ]
    },
    "org.eclipse.jetty.io.nio.SelectorManager:void doStop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void stop()"
        ]
    },
    "org.eclipse.jetty.io.nio.ChannelEndPoint:int flush(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.http.HttpGenerator:long flushBuffer()",
            "org.eclipse.jetty.io.nio.SelectChannelEndPoint:int flush(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)"
        ]
    },
    "org.eclipse.jetty.server.bio.SocketConnector:void accept(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.AbstractConnector$Acceptor:void run()"
        ]
    },
    "org.eclipse.jetty.server.ssl.SslSocketConnector:void accept(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.AbstractConnector$Acceptor:void run()"
        ]
    },
    "org.eclipse.jetty.server.nio.BlockingChannelConnector:void accept(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.AbstractConnector$Acceptor:void run()"
        ]
    },
    "org.eclipse.jetty.http.ssl.SslSelectChannelEndPoint:void idleExpired()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.io.nio.SelectChannelEndPoint$IdleTask:void expired()"
        ]
    },
    "org.eclipse.jetty.io.nio.SelectChannelEndPoint:void dispatch()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.io.nio.SelectChannelEndPoint:void schedule()",
            "org.eclipse.jetty.server.AsyncContinuation:void scheduleDispatch()"
        ]
    },
    "org.eclipse.jetty.io.nio.SelectorManager$SelectSet:void doSelect()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.io.nio.SelectorManager:void doSelect(int)"
        ]
    },
    "org.eclipse.jetty.server.bio.SocketConnector:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()"
        ]
    },
    "org.eclipse.jetty.server.nio.SelectChannelConnector:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.ssl.SslSelectChannelConnector:void doStart()",
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()"
        ]
    },
    "org.eclipse.jetty.server.LocalConnector:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()"
        ]
    },
    "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.security.SecurityHandler:void doStart()",
            "org.eclipse.jetty.server.handler.ContextHandler:void startContext()",
            "org.eclipse.jetty.server.handler.HandlerCollection:void doStart()",
            "org.eclipse.jetty.server.handler.HandlerWrapper:void doStart()",
            "org.eclipse.jetty.server.handler.HotSwapHandler:void setHandler(org.eclipse.jetty.server.Handler)",
            "org.eclipse.jetty.server.handler.HotSwapHandler:void doStart()",
            "org.eclipse.jetty.server.handler.RequestLogHandler:void setRequestLog(org.eclipse.jetty.server.RequestLog)",
            "org.eclipse.jetty.server.handler.RequestLogHandler:void doStart()",
            "org.eclipse.jetty.server.nio.SelectChannelConnector:void doStart()",
            "org.eclipse.jetty.server.session.AbstractSessionManager:void doStart()",
            "org.eclipse.jetty.server.session.SessionHandler:void doStart()",
            "org.eclipse.jetty.server.AbstractConnector:void doStart()",
            "org.eclipse.jetty.server.Server:void doStart()",
            "org.eclipse.jetty.server.Server:void addBean(java.lang.Object)",
            "org.eclipse.jetty.servlet.DefaultServlet:void init()",
            "org.eclipse.jetty.servlet.Invoker:void service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.servlet.ServletHandler:void initialize()",
            "org.eclipse.jetty.util.IO$Singleton:void <clinit>()",
            "org.eclipse.jetty.xml.XmlConfiguration$1:java.lang.Object run()"
        ]
    },
    "org.eclipse.jetty.util.thread.OldQueuedThreadPool:boolean dispatch(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.bio.SocketConnector$Connection:void dispatch()",
            "org.eclipse.jetty.server.nio.BlockingChannelConnector$Connection:void dispatch()",
            "org.eclipse.jetty.server.nio.SelectChannelConnector$1:boolean dispatch(java.lang.Runnable)",
            "org.eclipse.jetty.server.AbstractConnector:void doStart()",
            "org.eclipse.jetty.util.thread.OldQueuedThreadPool$PoolThread:void run()"
        ]
    },
    "org.eclipse.jetty.util.thread.OldQueuedThreadPool:void setMinThreads(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.util.thread.OldQueuedThreadPool:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()"
        ]
    },
    "org.eclipse.jetty.util.thread.QueuedThreadPool:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()"
        ]
    },
    "org.eclipse.jetty.util.thread.QueuedThreadPool:void setMinThreads(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.util.thread.QueuedThreadPool:boolean dispatch(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.bio.SocketConnector$Connection:void dispatch()",
            "org.eclipse.jetty.server.nio.BlockingChannelConnector$Connection:void dispatch()",
            "org.eclipse.jetty.server.nio.SelectChannelConnector$1:boolean dispatch(java.lang.Runnable)",
            "org.eclipse.jetty.server.AbstractConnector:void doStart()",
            "org.eclipse.jetty.util.thread.QueuedThreadPool:void execute(java.lang.Runnable)",
            "org.eclipse.jetty.util.IO:void copyThread(java.io.InputStream,java.io.OutputStream)",
            "org.eclipse.jetty.util.IO:void copyThread(java.io.Reader,java.io.Writer)"
        ]
    },
    "org.eclipse.jetty.server.HttpOutput:void flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.HttpConnection$Output:void flush()"
        ]
    },
    "org.eclipse.jetty.server.HttpOutput:void write(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.HttpOutput:void write(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.DefaultHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.HttpOutput:void print(java.lang.String)",
            "org.eclipse.jetty.servlet.DefaultServlet:void sendDirectory(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.eclipse.jetty.util.resource.Resource,boolean)"
        ]
    },
    "org.eclipse.jetty.http.AbstractGenerator:void sendError(int,java.lang.String,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.HttpConnection$RequestHandler:void headerComplete()",
            "org.eclipse.jetty.server.HttpConnection:void handle()",
            "org.eclipse.jetty.server.HttpConnection:void handleRequest()"
        ]
    },
    "org.eclipse.jetty.server.HttpConnection$Output:void sendContent(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ResourceHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.Request:void setAttribute(java.lang.String,java.lang.Object)",
            "org.eclipse.jetty.servlet.DefaultServlet:void sendData(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,boolean,org.eclipse.jetty.util.resource.Resource,org.eclipse.jetty.http.HttpContent,java.util.Enumeration)"
        ]
    },
    "org.eclipse.jetty.server.HttpConnection:javax.servlet.ServletInputStream getInputStream()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.Request:javax.servlet.ServletInputStream getInputStream()"
        ]
    },
    "org.eclipse.jetty.server.HttpConnection:void commitResponse(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.HttpConnection$Output:void close()",
            "org.eclipse.jetty.server.HttpConnection$Output:void flush()",
            "org.eclipse.jetty.server.HttpConnection$Output:void sendContent(java.lang.Object)",
            "org.eclipse.jetty.server.HttpConnection:void flushResponse()"
        ]
    },
    "org.eclipse.jetty.server.HttpConnection:void completeResponse()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.Response:void complete()"
        ]
    },
    "org.eclipse.jetty.server.HttpConnection$Output:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.Dispatcher:void forward(javax.servlet.ServletRequest,javax.servlet.ServletResponse,org.eclipse.jetty.server.DispatcherType)",
            "org.eclipse.jetty.server.HttpOutput:void write(int)",
            "org.eclipse.jetty.server.HttpOutput:void write(org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.server.HttpWriter:void close()",
            "org.eclipse.jetty.server.Response:void setContentLength(int)"
        ]
    },
    "org.eclipse.jetty.server.Response:void flushBuffer()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.DefaultServlet:boolean passConditionalHeaders(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.eclipse.jetty.util.resource.Resource,org.eclipse.jetty.http.HttpContent)"
        ]
    },
    "org.eclipse.jetty.http.ssl.SslSelectChannelEndPoint$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.http.ssl.SslSelectChannelEndPoint:void close()",
            "org.eclipse.jetty.http.ssl.SslSelectChannelEndPoint:int fill(org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.http.ssl.SslSelectChannelEndPoint:int flush(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.server.handler.ContextHandler:void handle(java.lang.Runnable)",
            "org.eclipse.jetty.util.thread.ExecutorThreadPool:boolean dispatch(java.lang.Runnable)",
            "org.eclipse.jetty.util.thread.OldQueuedThreadPool$PoolThread:void run()",
            "org.eclipse.jetty.util.thread.QueuedThreadPool$2:void run()"
        ]
    },
    "org.eclipse.jetty.util.thread.Timeout:void tick(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.io.nio.SelectorManager$SelectSet:void doSelect()",
            "org.eclipse.jetty.util.thread.Timeout:void tick()"
        ]
    },
    "org.eclipse.jetty.util.component.AbstractLifeCycle:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.security.SecurityHandler:void doStop()",
            "org.eclipse.jetty.server.handler.ContextHandler:void doStop()",
            "org.eclipse.jetty.server.handler.HandlerCollection:void setHandlers(org.eclipse.jetty.server.Handler[])",
            "org.eclipse.jetty.server.handler.HandlerCollection:void doStop()",
            "org.eclipse.jetty.server.handler.HandlerWrapper:void doStop()",
            "org.eclipse.jetty.server.handler.HotSwapHandler:void setHandler(org.eclipse.jetty.server.Handler)",
            "org.eclipse.jetty.server.handler.HotSwapHandler:void doStop()",
            "org.eclipse.jetty.server.handler.RequestLogHandler:void setRequestLog(org.eclipse.jetty.server.RequestLog)",
            "org.eclipse.jetty.server.handler.RequestLogHandler:void doStop()",
            "org.eclipse.jetty.server.nio.SelectChannelConnector:void close()",
            "org.eclipse.jetty.server.session.SessionHandler:void doStop()",
            "org.eclipse.jetty.server.AbstractConnector:void doStop()",
            "org.eclipse.jetty.server.Server$ShutdownHookThread:void run()",
            "org.eclipse.jetty.server.Server:void doStop()",
            "org.eclipse.jetty.servlet.DefaultServlet:void destroy()",
            "org.eclipse.jetty.servlet.FilterHolder:void doStart()",
            "org.eclipse.jetty.servlet.Invoker:void service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.servlet.ServletHandler:void doStop()"
        ]
    },
    "org.eclipse.jetty.io.nio.SelectChannelEndPoint:int flush(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.http.HttpGenerator:long flushBuffer()"
        ]
    },
    "org.eclipse.jetty.io.nio.SelectChannelEndPoint:void schedule()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.io.nio.SelectorManager$SelectSet:void doSelect()"
        ]
    },
    "org.eclipse.jetty.server.AsyncContinuation:void scheduleDispatch()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.AsyncContinuation:void dispatch()",
            "org.eclipse.jetty.server.AsyncContinuation:void expired()",
            "org.eclipse.jetty.server.AsyncContinuation:void complete()"
        ]
    },
    "org.eclipse.jetty.io.nio.SelectorManager:void doSelect(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.nio.SelectChannelConnector:void accept(int)"
        ]
    },
    "org.eclipse.jetty.server.ssl.SslSelectChannelConnector:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()"
        ]
    },
    "org.eclipse.jetty.security.SecurityHandler:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.security.ConstraintSecurityHandler:void doStart()"
        ]
    },
    "org.eclipse.jetty.server.handler.ContextHandler:void startContext()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ContextHandler:void doStart()",
            "org.eclipse.jetty.servlet.ServletContextHandler:void startContext()"
        ]
    },
    "org.eclipse.jetty.server.handler.HandlerCollection:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ContextHandlerCollection:void doStart()",
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()"
        ]
    },
    "org.eclipse.jetty.server.handler.HandlerWrapper:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.security.SecurityHandler:void doStart()",
            "org.eclipse.jetty.server.handler.RequestLogHandler:void doStart()",
            "org.eclipse.jetty.server.handler.ScopedHandler:void doStart()",
            "org.eclipse.jetty.server.handler.StatisticsHandler:void doStart()",
            "org.eclipse.jetty.server.session.SessionHandler:void doStart()",
            "org.eclipse.jetty.server.Server:void doStart()",
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()"
        ]
    },
    "org.eclipse.jetty.server.handler.HotSwapHandler:void setHandler(org.eclipse.jetty.server.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.handler.HotSwapHandler:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()"
        ]
    },
    "org.eclipse.jetty.server.handler.RequestLogHandler:void setRequestLog(org.eclipse.jetty.server.RequestLog)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.handler.RequestLogHandler:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()"
        ]
    },
    "org.eclipse.jetty.server.session.AbstractSessionManager:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.HashSessionManager:void doStart()",
            "org.eclipse.jetty.server.session.JDBCSessionManager:void doStart()"
        ]
    },
    "org.eclipse.jetty.server.session.SessionHandler:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()"
        ]
    },
    "org.eclipse.jetty.server.Server:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()"
        ]
    },
    "org.eclipse.jetty.server.Server:void addBean(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.Server:void addLifeCycle(org.eclipse.jetty.util.component.LifeCycle)"
        ]
    },
    "org.eclipse.jetty.servlet.DefaultServlet:void init()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.servlet.ServletHandler:void initialize()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletContextHandler:void startContext()",
            "org.eclipse.jetty.servlet.ServletHandler:void doStart()",
            "org.eclipse.jetty.servlet.ServletHandler:void updateMappings()"
        ]
    },
    "org.eclipse.jetty.util.IO$Singleton:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.IO$Singleton:void <clinit>()",
            "org.eclipse.jetty.util.IO:void copyThread(java.io.InputStream,java.io.OutputStream)",
            "org.eclipse.jetty.util.IO:void copyThread(java.io.Reader,java.io.Writer)"
        ]
    },
    "org.eclipse.jetty.xml.XmlConfiguration$1:java.lang.Object run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.xml.XmlConfiguration:void main(java.lang.String[])"
        ]
    },
    "org.eclipse.jetty.util.thread.QueuedThreadPool:void execute(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.util.IO:void copyThread(java.io.InputStream,java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.util.IO:void copyThread(java.io.Reader,java.io.Writer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.HttpConnection$Output:void flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.HttpConnection$Output:void sendContent(java.lang.Object)",
            "org.eclipse.jetty.server.HttpOutput:void write(int)",
            "org.eclipse.jetty.server.HttpOutput:void write(org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.server.HttpWriter:void flush()"
        ]
    },
    "org.eclipse.jetty.server.HttpOutput:void print(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.Request:void setAttribute(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.StatisticsHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.session.AbstractSessionIdManager:java.lang.String newSessionId(javax.servlet.http.HttpServletRequest,long)",
            "org.eclipse.jetty.server.session.HashSessionIdManager:java.lang.String newSessionId(javax.servlet.http.HttpServletRequest,long)",
            "org.eclipse.jetty.server.ssl.SslSelectChannelConnector:void customize(org.eclipse.jetty.io.EndPoint,org.eclipse.jetty.server.Request)",
            "org.eclipse.jetty.server.ssl.SslSocketConnector:void customize(org.eclipse.jetty.io.EndPoint,org.eclipse.jetty.server.Request)",
            "org.eclipse.jetty.server.AsyncContinuation:void setAttribute(java.lang.String,java.lang.Object)",
            "org.eclipse.jetty.server.Response:void sendError(int,java.lang.String)",
            "org.eclipse.jetty.server.Server:void handleAsync(org.eclipse.jetty.server.HttpConnection)",
            "org.eclipse.jetty.servlet.DefaultServlet:void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.servlet.ErrorPageErrorHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.servlet.ServletHandler:void doScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.servlet.ServletHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.servlet.DefaultServlet:void sendData(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,boolean,org.eclipse.jetty.util.resource.Resource,org.eclipse.jetty.http.HttpContent,java.util.Enumeration)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.Request:javax.servlet.ServletInputStream getInputStream()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.Request:void extractParameters()",
            "org.eclipse.jetty.server.Request:java.io.BufferedReader getReader()"
        ]
    },
    "org.eclipse.jetty.server.Response:void complete()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.HttpConnection:void handleRequest()",
            "org.eclipse.jetty.server.Response:void sendError(int,java.lang.String)",
            "org.eclipse.jetty.server.Response:void sendRedirect(java.lang.String)"
        ]
    },
    "org.eclipse.jetty.server.HttpWriter:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.io.WriterOutputStream:void close()",
            "org.eclipse.jetty.server.HttpConnection$1:void close()",
            "org.eclipse.jetty.util.IO$Job:void run()",
            "org.eclipse.jetty.util.IO:void close(java.io.Writer)"
        ]
    },
    "org.eclipse.jetty.server.Response:void setContentLength(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.security.authentication.FormAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)",
            "org.eclipse.jetty.security.ConstraintSecurityHandler:boolean checkUserDataPermissions(java.lang.String,org.eclipse.jetty.server.Request,org.eclipse.jetty.server.Response,java.lang.Object)",
            "org.eclipse.jetty.server.handler.DefaultHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ErrorHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.MovedContextHandler$Redirector:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.Response:void sendError(int,java.lang.String)",
            "org.eclipse.jetty.servlet.DefaultServlet:void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.servlet.DefaultServlet:void sendDirectory(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.eclipse.jetty.util.resource.Resource,boolean)",
            "org.eclipse.jetty.servlet.DefaultServlet:void writeHeaders(javax.servlet.http.HttpServletResponse,org.eclipse.jetty.http.HttpContent,long)"
        ]
    },
    "org.eclipse.jetty.util.thread.Timeout:void tick()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.security.SecurityHandler:void doStop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void stop()"
        ]
    },
    "org.eclipse.jetty.server.handler.ContextHandler:void doStop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void stop()",
            "org.eclipse.jetty.webapp.WebAppContext:void doStop()"
        ]
    },
    "org.eclipse.jetty.server.handler.HandlerCollection:void setHandlers(org.eclipse.jetty.server.Handler[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ContextHandlerCollection:void setHandlers(org.eclipse.jetty.server.Handler[])",
            "org.eclipse.jetty.server.handler.HandlerCollection:void addHandler(org.eclipse.jetty.server.Handler)",
            "org.eclipse.jetty.server.handler.HandlerCollection:void removeHandler(org.eclipse.jetty.server.Handler)"
        ]
    },
    "org.eclipse.jetty.server.handler.HandlerCollection:void doStop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void stop()"
        ]
    },
    "org.eclipse.jetty.server.handler.HandlerWrapper:void doStop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.security.SecurityHandler:void doStop()",
            "org.eclipse.jetty.server.handler.ContextHandler:void doStop()",
            "org.eclipse.jetty.server.handler.RequestLogHandler:void doStop()",
            "org.eclipse.jetty.server.handler.StatisticsHandler:void doStop()",
            "org.eclipse.jetty.server.session.SessionHandler:void doStop()",
            "org.eclipse.jetty.server.Server:void doStop()",
            "org.eclipse.jetty.servlet.ServletHandler:void doStop()",
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void stop()"
        ]
    },
    "org.eclipse.jetty.server.handler.HotSwapHandler:void doStop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void stop()"
        ]
    },
    "org.eclipse.jetty.server.handler.RequestLogHandler:void doStop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void stop()"
        ]
    },
    "org.eclipse.jetty.server.nio.SelectChannelConnector:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.ssl.SslSelectChannelConnector:javax.net.ssl.SSLEngine createSSLEngine()",
            "org.eclipse.jetty.server.AbstractConnector$Acceptor:void run()",
            "org.eclipse.jetty.server.AbstractConnector:void doStop()",
            "org.eclipse.jetty.server.Server:void doStop()"
        ]
    },
    "org.eclipse.jetty.server.session.SessionHandler:void doStop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void stop()"
        ]
    },
    "org.eclipse.jetty.server.AbstractConnector:void doStop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.bio.SocketConnector:void doStop()",
            "org.eclipse.jetty.server.nio.SelectChannelConnector:void doStop()",
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void stop()"
        ]
    },
    "org.eclipse.jetty.server.Server$ShutdownHookThread:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.http.ssl.SslSelectChannelEndPoint:void close()",
            "org.eclipse.jetty.http.ssl.SslSelectChannelEndPoint:int fill(org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.http.ssl.SslSelectChannelEndPoint:int flush(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.server.handler.ContextHandler:void handle(java.lang.Runnable)",
            "org.eclipse.jetty.util.thread.ExecutorThreadPool:boolean dispatch(java.lang.Runnable)",
            "org.eclipse.jetty.util.thread.OldQueuedThreadPool$PoolThread:void run()",
            "org.eclipse.jetty.util.thread.QueuedThreadPool$2:void run()",
            "org.eclipse.jetty.util.thread.QueuedThreadPool:boolean startThread(int)"
        ]
    },
    "org.eclipse.jetty.server.Server:void doStop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void stop()"
        ]
    },
    "org.eclipse.jetty.servlet.DefaultServlet:void destroy()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.servlet.FilterHolder:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()"
        ]
    },
    "org.eclipse.jetty.servlet.ServletHandler:void doStop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void stop()"
        ]
    },
    "org.eclipse.jetty.server.AsyncContinuation:void dispatch()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.AsyncContinuation:void expired()",
            "org.eclipse.jetty.server.AsyncContinuation:void dispatch(javax.servlet.ServletContext,java.lang.String)",
            "org.eclipse.jetty.server.AsyncContinuation:void dispatch(java.lang.String)",
            "org.eclipse.jetty.server.AsyncContinuation:void resume()"
        ]
    },
    "org.eclipse.jetty.server.AsyncContinuation:void expired()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.AsyncContinuation$AsyncEventState$1:void expired()",
            "org.eclipse.jetty.server.AsyncContinuation:void scheduleTimeout()"
        ]
    },
    "org.eclipse.jetty.server.AsyncContinuation:void complete()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.nio.SelectChannelConnector:void accept(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.AbstractConnector$Acceptor:void run()"
        ]
    },
    "org.eclipse.jetty.security.ConstraintSecurityHandler:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()"
        ]
    },
    "org.eclipse.jetty.server.handler.ContextHandler:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()",
            "org.eclipse.jetty.webapp.WebAppContext:void doStart()"
        ]
    },
    "org.eclipse.jetty.servlet.ServletContextHandler:void startContext()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ContextHandler:void doStart()",
            "org.eclipse.jetty.webapp.WebAppContext:void startContext()"
        ]
    },
    "org.eclipse.jetty.server.handler.ContextHandlerCollection:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()"
        ]
    },
    "org.eclipse.jetty.server.handler.ScopedHandler:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ContextHandler:void startContext()",
            "org.eclipse.jetty.servlet.ServletHandler:void doStart()"
        ]
    },
    "org.eclipse.jetty.server.handler.StatisticsHandler:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()"
        ]
    },
    "org.eclipse.jetty.server.session.HashSessionManager:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()"
        ]
    },
    "org.eclipse.jetty.server.session.JDBCSessionManager:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()"
        ]
    },
    "org.eclipse.jetty.server.Server:void addLifeCycle(org.eclipse.jetty.util.component.LifeCycle)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.servlet.ServletHandler:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()"
        ]
    },
    "org.eclipse.jetty.servlet.ServletHandler:void updateMappings()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletHandler:void doStart()",
            "org.eclipse.jetty.servlet.ServletHandler:void setFilterMappings(org.eclipse.jetty.servlet.FilterMapping[])",
            "org.eclipse.jetty.servlet.ServletHandler:void setServletMappings(org.eclipse.jetty.servlet.ServletMapping[])"
        ]
    },
    "org.eclipse.jetty.xml.XmlConfiguration:void main(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.HttpWriter:void flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.io.WriterOutputStream:void flush()",
            "org.eclipse.jetty.server.HttpWriter:void write(char[],int,int)",
            "org.eclipse.jetty.server.NCSARequestLog:void log(org.eclipse.jetty.server.Request,org.eclipse.jetty.server.Response)",
            "org.eclipse.jetty.server.NCSARequestLog:void doStop()"
        ]
    },
    "org.eclipse.jetty.server.session.AbstractSessionIdManager:java.lang.String newSessionId(javax.servlet.http.HttpServletRequest,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.AbstractSessionManager$Session:void <init>(org.eclipse.jetty.server.session.AbstractSessionManager,javax.servlet.http.HttpServletRequest)"
        ]
    },
    "org.eclipse.jetty.server.session.HashSessionIdManager:java.lang.String newSessionId(javax.servlet.http.HttpServletRequest,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.AbstractSessionManager$Session:void <init>(org.eclipse.jetty.server.session.AbstractSessionManager,javax.servlet.http.HttpServletRequest)"
        ]
    },
    "org.eclipse.jetty.server.ssl.SslSelectChannelConnector:void customize(org.eclipse.jetty.io.EndPoint,org.eclipse.jetty.server.Request)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.HttpConnection:void handleRequest()"
        ]
    },
    "org.eclipse.jetty.server.ssl.SslSocketConnector:void customize(org.eclipse.jetty.io.EndPoint,org.eclipse.jetty.server.Request)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.HttpConnection:void handleRequest()"
        ]
    },
    "org.eclipse.jetty.server.AsyncContinuation:void setAttribute(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.Request:java.io.BufferedReader getReader()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.Response:void sendRedirect(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.security.authentication.FormAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)",
            "org.eclipse.jetty.security.ConstraintSecurityHandler:boolean checkUserDataPermissions(java.lang.String,org.eclipse.jetty.server.Request,org.eclipse.jetty.server.Response,java.lang.Object)",
            "org.eclipse.jetty.server.handler.ContextHandler:boolean checkContext(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.MovedContextHandler$Redirector:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ResourceHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.servlet.DefaultServlet:void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.io.WriterOutputStream:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.io.bio.StreamEndPoint:void close()",
            "org.eclipse.jetty.server.handler.DefaultHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.NCSARequestLog:void doStop()",
            "org.eclipse.jetty.util.IO$Job:void run()",
            "org.eclipse.jetty.util.IO:void close(java.io.OutputStream)",
            "org.eclipse.jetty.util.RolloverFileOutputStream:void setFile()"
        ]
    },
    "org.eclipse.jetty.server.HttpConnection$1:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.io.WriterOutputStream:void close()",
            "org.eclipse.jetty.server.Dispatcher:void forward(javax.servlet.ServletRequest,javax.servlet.ServletResponse,org.eclipse.jetty.server.DispatcherType)",
            "org.eclipse.jetty.server.HttpConnection$1:void close()",
            "org.eclipse.jetty.server.Response:void setContentLength(int)",
            "org.eclipse.jetty.util.IO$Job:void run()",
            "org.eclipse.jetty.util.IO:void close(java.io.Writer)"
        ]
    },
    "org.eclipse.jetty.util.IO$Job:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.http.ssl.SslSelectChannelEndPoint:void close()",
            "org.eclipse.jetty.http.ssl.SslSelectChannelEndPoint:int fill(org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.http.ssl.SslSelectChannelEndPoint:int flush(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.server.handler.ContextHandler:void handle(java.lang.Runnable)",
            "org.eclipse.jetty.util.thread.ExecutorThreadPool:boolean dispatch(java.lang.Runnable)",
            "org.eclipse.jetty.util.thread.OldQueuedThreadPool$PoolThread:void run()",
            "org.eclipse.jetty.util.thread.QueuedThreadPool$2:void run()",
            "org.eclipse.jetty.util.IO:void copyThread(java.io.InputStream,java.io.OutputStream)",
            "org.eclipse.jetty.util.IO:void copyThread(java.io.Reader,java.io.Writer)"
        ]
    },
    "org.eclipse.jetty.util.IO:void close(java.io.Writer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.security.ConstraintSecurityHandler:boolean checkUserDataPermissions(java.lang.String,org.eclipse.jetty.server.Request,org.eclipse.jetty.server.Response,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.security.SecurityHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.handler.ErrorHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.security.SecurityHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerList:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerWrapper:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HotSwapHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ScopedHandler:void nextHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.session.SessionHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.Response:void sendError(int,java.lang.String)",
            "org.eclipse.jetty.servlet.ErrorPageErrorHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.handler.MovedContextHandler$Redirector:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.security.SecurityHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerList:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerWrapper:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HotSwapHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ScopedHandler:void nextHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.session.SessionHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.servlet.DefaultServlet:void writeHeaders(javax.servlet.http.HttpServletResponse,org.eclipse.jetty.http.HttpContent,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.webapp.WebAppContext:void doStop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void stop()"
        ]
    },
    "org.eclipse.jetty.server.handler.ContextHandlerCollection:void setHandlers(org.eclipse.jetty.server.Handler[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.HandlerCollection:void addHandler(org.eclipse.jetty.server.Handler)",
            "org.eclipse.jetty.server.handler.HandlerCollection:void removeHandler(org.eclipse.jetty.server.Handler)"
        ]
    },
    "org.eclipse.jetty.server.handler.HandlerCollection:void addHandler(org.eclipse.jetty.server.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ContextHandler:void <init>(org.eclipse.jetty.server.HandlerContainer,java.lang.String)",
            "org.eclipse.jetty.server.handler.ContextHandlerCollection:org.eclipse.jetty.server.handler.ContextHandler addContext(java.lang.String,java.lang.String)",
            "org.eclipse.jetty.servlet.ServletContextHandler:void <init>(org.eclipse.jetty.server.HandlerContainer,java.lang.String,org.eclipse.jetty.server.session.SessionHandler,org.eclipse.jetty.security.SecurityHandler,org.eclipse.jetty.servlet.ServletHandler,org.eclipse.jetty.server.handler.ErrorHandler)"
        ]
    },
    "org.eclipse.jetty.server.handler.HandlerCollection:void removeHandler(org.eclipse.jetty.server.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.handler.StatisticsHandler:void doStop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void stop()"
        ]
    },
    "org.eclipse.jetty.server.ssl.SslSelectChannelConnector:javax.net.ssl.SSLEngine createSSLEngine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.ssl.SslSelectChannelConnector:org.eclipse.jetty.io.nio.SelectChannelEndPoint newEndPoint(java.nio.channels.SocketChannel,org.eclipse.jetty.io.nio.SelectorManager$SelectSet,java.nio.channels.SelectionKey)",
            "org.eclipse.jetty.server.ssl.SslSelectChannelConnector:void doStart()"
        ]
    },
    "org.eclipse.jetty.server.bio.SocketConnector:void doStop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void stop()"
        ]
    },
    "org.eclipse.jetty.server.nio.SelectChannelConnector:void doStop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void stop()"
        ]
    },
    "org.eclipse.jetty.server.AsyncContinuation:void dispatch(javax.servlet.ServletContext,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.AsyncContinuation:void dispatch(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.AsyncContinuation:void resume()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.AsyncContinuation$AsyncEventState$1:void expired()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.thread.Timeout:void tick(long)"
        ]
    },
    "org.eclipse.jetty.server.AsyncContinuation:void scheduleTimeout()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.AsyncContinuation:boolean unhandle()"
        ]
    },
    "org.eclipse.jetty.webapp.WebAppContext:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()"
        ]
    },
    "org.eclipse.jetty.webapp.WebAppContext:void startContext()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ContextHandler:void doStart()"
        ]
    },
    "org.eclipse.jetty.servlet.ServletHandler:void setFilterMappings(org.eclipse.jetty.servlet.FilterMapping[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.plus.webapp.AbstractConfiguration:void preConfigure(org.eclipse.jetty.webapp.WebAppContext)",
            "org.eclipse.jetty.servlet.ServletHandler:void addFilterWithMapping(org.eclipse.jetty.servlet.FilterHolder,java.lang.String,int)",
            "org.eclipse.jetty.servlet.ServletHandler:void addFilter(org.eclipse.jetty.servlet.FilterHolder,org.eclipse.jetty.servlet.FilterMapping)",
            "org.eclipse.jetty.servlet.ServletHandler:void addFilterMapping(org.eclipse.jetty.servlet.FilterMapping)",
            "org.eclipse.jetty.servlet.ServletHandler:void prependFilterMapping(org.eclipse.jetty.servlet.FilterMapping)",
            "org.eclipse.jetty.webapp.WebXmlConfiguration:void deconfigure(org.eclipse.jetty.webapp.WebAppContext)",
            "org.eclipse.jetty.webapp.WebXmlProcessor:void process(org.eclipse.jetty.xml.XmlParser$Node)"
        ]
    },
    "org.eclipse.jetty.servlet.ServletHandler:void setServletMappings(org.eclipse.jetty.servlet.ServletMapping[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.plus.webapp.AbstractConfiguration:void preConfigure(org.eclipse.jetty.webapp.WebAppContext)",
            "org.eclipse.jetty.servlet.Invoker:void service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.servlet.ServletHandler:void addServletWithMapping(org.eclipse.jetty.servlet.ServletHolder,java.lang.String)",
            "org.eclipse.jetty.servlet.ServletHandler:void addServletMapping(org.eclipse.jetty.servlet.ServletMapping)",
            "org.eclipse.jetty.webapp.WebXmlConfiguration:void deconfigure(org.eclipse.jetty.webapp.WebAppContext)",
            "org.eclipse.jetty.webapp.WebXmlProcessor:void process(org.eclipse.jetty.xml.XmlParser$Node)"
        ]
    },
    "org.eclipse.jetty.io.WriterOutputStream:void flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.io.bio.StreamEndPoint:void flush()"
        ]
    },
    "org.eclipse.jetty.server.HttpWriter:void write(char[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.HttpWriter:void write(java.lang.String,int,int)",
            "org.eclipse.jetty.server.HttpWriter:void write(char[],int,int)",
            "org.eclipse.jetty.server.NCSARequestLog:void log(org.eclipse.jetty.server.Request,org.eclipse.jetty.server.Response)",
            "org.eclipse.jetty.util.IO:void copy(java.io.Reader,java.io.Writer,long)"
        ]
    },
    "org.eclipse.jetty.server.NCSARequestLog:void log(org.eclipse.jetty.server.Request,org.eclipse.jetty.server.Response)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.RequestLogHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.NCSARequestLog:void doStop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void stop()"
        ]
    },
    "org.eclipse.jetty.server.session.AbstractSessionManager$Session:void <init>(org.eclipse.jetty.server.session.AbstractSessionManager,javax.servlet.http.HttpServletRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.HashSessionManager$Session:void <init>(org.eclipse.jetty.server.session.HashSessionManager,javax.servlet.http.HttpServletRequest)",
            "org.eclipse.jetty.server.session.JDBCSessionManager$Session:void <init>(org.eclipse.jetty.server.session.JDBCSessionManager,javax.servlet.http.HttpServletRequest)"
        ]
    },
    "org.eclipse.jetty.io.bio.StreamEndPoint:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.http.AbstractGenerator:void blockForOutput(long)",
            "org.eclipse.jetty.http.HttpGenerator:long flushBuffer()",
            "org.eclipse.jetty.http.HttpParser:org.eclipse.jetty.io.Buffer blockForContent(long)",
            "org.eclipse.jetty.io.nio.SelectorManager$SelectSet:void stop()",
            "org.eclipse.jetty.server.HttpConnection:void handle()",
            "org.eclipse.jetty.server.HttpConnection:void handleRequest()"
        ]
    },
    "org.eclipse.jetty.util.IO:void close(java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.resource.JarResource:void extract(org.eclipse.jetty.util.resource.Resource,java.io.File,boolean)",
            "org.eclipse.jetty.webapp.WebAppClassLoader:void addClassPath(java.lang.String)"
        ]
    },
    "org.eclipse.jetty.util.RolloverFileOutputStream:void setFile()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.RolloverFileOutputStream:void <init>(java.lang.String,boolean,int,java.util.TimeZone,java.lang.String,java.lang.String)",
            "org.eclipse.jetty.util.RolloverFileOutputStream:void access$100(org.eclipse.jetty.util.RolloverFileOutputStream)"
        ]
    },
    "org.eclipse.jetty.server.handler.ContextHandler:void <init>(org.eclipse.jetty.server.HandlerContainer,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.MovedContextHandler:void <init>(org.eclipse.jetty.server.HandlerContainer,java.lang.String,java.lang.String)"
        ]
    },
    "org.eclipse.jetty.server.handler.ContextHandlerCollection:org.eclipse.jetty.server.handler.ContextHandler addContext(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.servlet.ServletContextHandler:void <init>(org.eclipse.jetty.server.HandlerContainer,java.lang.String,org.eclipse.jetty.server.session.SessionHandler,org.eclipse.jetty.security.SecurityHandler,org.eclipse.jetty.servlet.ServletHandler,org.eclipse.jetty.server.handler.ErrorHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletContextHandler:void <init>(org.eclipse.jetty.server.HandlerContainer,java.lang.String)",
            "org.eclipse.jetty.servlet.ServletContextHandler:void <init>(org.eclipse.jetty.server.HandlerContainer,java.lang.String,int)",
            "org.eclipse.jetty.servlet.ServletContextHandler:void <init>(org.eclipse.jetty.server.HandlerContainer,org.eclipse.jetty.server.session.SessionHandler,org.eclipse.jetty.security.SecurityHandler,org.eclipse.jetty.servlet.ServletHandler,org.eclipse.jetty.server.handler.ErrorHandler)"
        ]
    },
    "org.eclipse.jetty.server.ssl.SslSelectChannelConnector:org.eclipse.jetty.io.nio.SelectChannelEndPoint newEndPoint(java.nio.channels.SocketChannel,org.eclipse.jetty.io.nio.SelectorManager$SelectSet,java.nio.channels.SelectionKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.nio.SelectChannelConnector$1:org.eclipse.jetty.io.nio.SelectChannelEndPoint newEndPoint(java.nio.channels.SocketChannel,org.eclipse.jetty.io.nio.SelectorManager$SelectSet,java.nio.channels.SelectionKey)"
        ]
    },
    "org.eclipse.jetty.server.AsyncContinuation:boolean unhandle()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.HttpConnection:void handleRequest()"
        ]
    },
    "org.eclipse.jetty.plus.webapp.AbstractConfiguration:void preConfigure(org.eclipse.jetty.webapp.WebAppContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.plus.webapp.Configuration:void preConfigure(org.eclipse.jetty.webapp.WebAppContext)"
        ]
    },
    "org.eclipse.jetty.servlet.ServletHandler:void addFilterWithMapping(org.eclipse.jetty.servlet.FilterHolder,java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletContextHandler:void addFilter(org.eclipse.jetty.servlet.FilterHolder,java.lang.String,int)",
            "org.eclipse.jetty.servlet.ServletHandler:org.eclipse.jetty.servlet.FilterHolder addFilterWithMapping(java.lang.Class,java.lang.String,int)",
            "org.eclipse.jetty.servlet.ServletHandler:org.eclipse.jetty.servlet.FilterHolder addFilterWithMapping(java.lang.String,java.lang.String,int)"
        ]
    },
    "org.eclipse.jetty.servlet.ServletHandler:void addFilter(org.eclipse.jetty.servlet.FilterHolder,org.eclipse.jetty.servlet.FilterMapping)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.servlet.ServletHandler:void addFilterMapping(org.eclipse.jetty.servlet.FilterMapping)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletContextHandler$Context:void addFilterMappingForServletNames(java.lang.String,java.util.EnumSet,boolean,java.lang.String[])"
        ]
    },
    "org.eclipse.jetty.servlet.ServletHandler:void prependFilterMapping(org.eclipse.jetty.servlet.FilterMapping)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.webapp.WebXmlConfiguration:void deconfigure(org.eclipse.jetty.webapp.WebAppContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.webapp.WebAppContext:void doStop()"
        ]
    },
    "org.eclipse.jetty.webapp.WebXmlProcessor:void process(org.eclipse.jetty.xml.XmlParser$Node)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.webapp.WebXmlProcessor:void processDefaults()",
            "org.eclipse.jetty.webapp.WebXmlProcessor:void processWebXml()",
            "org.eclipse.jetty.webapp.WebXmlProcessor:void processFragments()",
            "org.eclipse.jetty.webapp.WebXmlProcessor:void processOverride()"
        ]
    },
    "org.eclipse.jetty.servlet.ServletHandler:void addServletWithMapping(org.eclipse.jetty.servlet.ServletHolder,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletContextHandler:void addServlet(org.eclipse.jetty.servlet.ServletHolder,java.lang.String)",
            "org.eclipse.jetty.servlet.ServletHandler:org.eclipse.jetty.servlet.ServletHolder addServletWithMapping(java.lang.String,java.lang.String)",
            "org.eclipse.jetty.servlet.ServletHandler:org.eclipse.jetty.servlet.ServletHolder addServletWithMapping(java.lang.Class,java.lang.String)"
        ]
    },
    "org.eclipse.jetty.servlet.ServletHandler:void addServletMapping(org.eclipse.jetty.servlet.ServletMapping)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.io.bio.StreamEndPoint:void flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.HttpConnection:void handle()"
        ]
    },
    "org.eclipse.jetty.server.HttpWriter:void write(java.lang.String,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.HttpWriter:void write(java.lang.String,int,int)"
        ]
    },
    "org.eclipse.jetty.util.IO:void copy(java.io.Reader,java.io.Writer,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.IO$Job:void run()",
            "org.eclipse.jetty.util.IO:void copy(java.io.Reader,java.io.Writer)"
        ]
    },
    "org.eclipse.jetty.server.session.HashSessionManager$Session:void <init>(org.eclipse.jetty.server.session.HashSessionManager,javax.servlet.http.HttpServletRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.HashSessionManager:org.eclipse.jetty.server.session.AbstractSessionManager$Session newSession(javax.servlet.http.HttpServletRequest)"
        ]
    },
    "org.eclipse.jetty.server.session.JDBCSessionManager$Session:void <init>(org.eclipse.jetty.server.session.JDBCSessionManager,javax.servlet.http.HttpServletRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.JDBCSessionManager:org.eclipse.jetty.server.session.AbstractSessionManager$Session newSession(javax.servlet.http.HttpServletRequest)"
        ]
    },
    "org.eclipse.jetty.util.resource.JarResource:void extract(org.eclipse.jetty.util.resource.Resource,java.io.File,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.resource.JarResource:void extract(java.io.File,boolean)",
            "org.eclipse.jetty.webapp.WebInfConfiguration:void unpack(org.eclipse.jetty.webapp.WebAppContext)"
        ]
    },
    "org.eclipse.jetty.webapp.WebAppClassLoader:void addClassPath(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.webapp.WebAppClassLoader:void <init>(java.lang.ClassLoader,org.eclipse.jetty.webapp.WebAppContext)",
            "org.eclipse.jetty.webapp.WebAppClassLoader:void addJars(org.eclipse.jetty.util.resource.Resource)",
            "org.eclipse.jetty.webapp.WebInfConfiguration:void configure(org.eclipse.jetty.webapp.WebAppContext)"
        ]
    },
    "org.eclipse.jetty.util.RolloverFileOutputStream:void <init>(java.lang.String,boolean,int,java.util.TimeZone,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.NCSARequestLog:void doStart()",
            "org.eclipse.jetty.util.RolloverFileOutputStream:void <init>(java.lang.String,boolean,int,java.util.TimeZone)"
        ]
    },
    "org.eclipse.jetty.util.RolloverFileOutputStream:void access$100(org.eclipse.jetty.util.RolloverFileOutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.RolloverFileOutputStream$RollTask:void run()"
        ]
    },
    "org.eclipse.jetty.server.handler.MovedContextHandler:void <init>(org.eclipse.jetty.server.HandlerContainer,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.servlet.ServletContextHandler:void <init>(org.eclipse.jetty.server.HandlerContainer,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.servlet.ServletContextHandler:void <init>(org.eclipse.jetty.server.HandlerContainer,java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletContextHandler:void <init>(int)",
            "org.eclipse.jetty.servlet.ServletContextHandler:void <init>(org.eclipse.jetty.server.HandlerContainer,java.lang.String,boolean,boolean)",
            "org.eclipse.jetty.webapp.WebAppContext:void <init>(java.lang.String,java.lang.String)",
            "org.eclipse.jetty.webapp.WebAppContext:void <init>(org.eclipse.jetty.server.HandlerContainer,java.lang.String,java.lang.String)"
        ]
    },
    "org.eclipse.jetty.servlet.ServletContextHandler:void <init>(org.eclipse.jetty.server.HandlerContainer,org.eclipse.jetty.server.session.SessionHandler,org.eclipse.jetty.security.SecurityHandler,org.eclipse.jetty.servlet.ServletHandler,org.eclipse.jetty.server.handler.ErrorHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletContextHandler:void <init>()",
            "org.eclipse.jetty.webapp.WebAppContext:void <init>(org.eclipse.jetty.server.session.SessionHandler,org.eclipse.jetty.security.SecurityHandler,org.eclipse.jetty.servlet.ServletHandler,org.eclipse.jetty.server.handler.ErrorHandler)"
        ]
    },
    "org.eclipse.jetty.server.nio.SelectChannelConnector$1:org.eclipse.jetty.io.nio.SelectChannelEndPoint newEndPoint(java.nio.channels.SocketChannel,org.eclipse.jetty.io.nio.SelectorManager$SelectSet,java.nio.channels.SelectionKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.io.nio.SelectorManager$SelectSet:void doSelect()"
        ]
    },
    "org.eclipse.jetty.plus.webapp.Configuration:void preConfigure(org.eclipse.jetty.webapp.WebAppContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.webapp.WebAppContext:void doStart()"
        ]
    },
    "org.eclipse.jetty.servlet.ServletContextHandler:void addFilter(org.eclipse.jetty.servlet.FilterHolder,java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.servlet.ServletHandler:org.eclipse.jetty.servlet.FilterHolder addFilterWithMapping(java.lang.Class,java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletContextHandler:org.eclipse.jetty.servlet.FilterHolder addFilter(java.lang.Class,java.lang.String,int)"
        ]
    },
    "org.eclipse.jetty.servlet.ServletHandler:org.eclipse.jetty.servlet.FilterHolder addFilterWithMapping(java.lang.String,java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletContextHandler:org.eclipse.jetty.servlet.FilterHolder addFilter(java.lang.String,java.lang.String,int)",
            "org.eclipse.jetty.servlet.ServletHandler:org.eclipse.jetty.servlet.FilterHolder addFilter(java.lang.String,java.lang.String,int)"
        ]
    },
    "org.eclipse.jetty.servlet.ServletContextHandler$Context:void addFilterMappingForServletNames(java.lang.String,java.util.EnumSet,boolean,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.webapp.WebXmlProcessor:void processDefaults()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.webapp.WebXmlConfiguration:void preConfigure(org.eclipse.jetty.webapp.WebAppContext)"
        ]
    },
    "org.eclipse.jetty.webapp.WebXmlProcessor:void processWebXml()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.webapp.WebXmlConfiguration:void configure(org.eclipse.jetty.webapp.WebAppContext)"
        ]
    },
    "org.eclipse.jetty.webapp.WebXmlProcessor:void processFragments()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.webapp.FragmentConfiguration:void configure(org.eclipse.jetty.webapp.WebAppContext)"
        ]
    },
    "org.eclipse.jetty.webapp.WebXmlProcessor:void processOverride()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.webapp.WebXmlConfiguration:void configure(org.eclipse.jetty.webapp.WebAppContext)"
        ]
    },
    "org.eclipse.jetty.servlet.ServletContextHandler:void addServlet(org.eclipse.jetty.servlet.ServletHolder,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.servlet.ServletHandler:org.eclipse.jetty.servlet.ServletHolder addServletWithMapping(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.Invoker:void service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.servlet.ServletContextHandler:org.eclipse.jetty.servlet.ServletHolder addServlet(java.lang.String,java.lang.String)",
            "org.eclipse.jetty.servlet.ServletContextHandler:org.eclipse.jetty.servlet.ServletHolder addServlet(java.lang.Class,java.lang.String)",
            "org.eclipse.jetty.servlet.ServletHandler:org.eclipse.jetty.servlet.ServletHolder addServlet(java.lang.String,java.lang.String)"
        ]
    },
    "org.eclipse.jetty.servlet.ServletHandler:org.eclipse.jetty.servlet.ServletHolder addServletWithMapping(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.util.IO:void copy(java.io.Reader,java.io.Writer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.IO:java.lang.String toString(java.io.InputStream,java.lang.String)",
            "org.eclipse.jetty.util.IO:java.lang.String toString(java.io.Reader)"
        ]
    },
    "org.eclipse.jetty.server.session.HashSessionManager:org.eclipse.jetty.server.session.AbstractSessionManager$Session newSession(javax.servlet.http.HttpServletRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.AbstractSessionManager:javax.servlet.http.HttpSession newHttpSession(javax.servlet.http.HttpServletRequest)"
        ]
    },
    "org.eclipse.jetty.server.session.JDBCSessionManager:org.eclipse.jetty.server.session.AbstractSessionManager$Session newSession(javax.servlet.http.HttpServletRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.AbstractSessionManager:javax.servlet.http.HttpSession newHttpSession(javax.servlet.http.HttpServletRequest)"
        ]
    },
    "org.eclipse.jetty.util.resource.JarResource:void extract(java.io.File,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.webapp.WebInfConfiguration:void unpack(org.eclipse.jetty.webapp.WebAppContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.webapp.WebInfConfiguration:void preConfigure(org.eclipse.jetty.webapp.WebAppContext)"
        ]
    },
    "org.eclipse.jetty.webapp.WebAppClassLoader:void <init>(java.lang.ClassLoader,org.eclipse.jetty.webapp.WebAppContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.webapp.WebAppClassLoader:void <init>(org.eclipse.jetty.webapp.WebAppContext)"
        ]
    },
    "org.eclipse.jetty.webapp.WebAppClassLoader:void addJars(org.eclipse.jetty.util.resource.Resource)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.webapp.WebInfConfiguration:void configure(org.eclipse.jetty.webapp.WebAppContext)"
        ]
    },
    "org.eclipse.jetty.webapp.WebInfConfiguration:void configure(org.eclipse.jetty.webapp.WebAppContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.webapp.WebAppContext:void startContext()"
        ]
    },
    "org.eclipse.jetty.server.NCSARequestLog:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()"
        ]
    },
    "org.eclipse.jetty.util.RolloverFileOutputStream:void <init>(java.lang.String,boolean,int,java.util.TimeZone)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.RolloverFileOutputStream:void <init>(java.lang.String,boolean,int)"
        ]
    },
    "org.eclipse.jetty.util.RolloverFileOutputStream$RollTask:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.http.ssl.SslSelectChannelEndPoint:void close()",
            "org.eclipse.jetty.http.ssl.SslSelectChannelEndPoint:int fill(org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.http.ssl.SslSelectChannelEndPoint:int flush(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.server.handler.ContextHandler:void handle(java.lang.Runnable)",
            "org.eclipse.jetty.util.thread.ExecutorThreadPool:boolean dispatch(java.lang.Runnable)",
            "org.eclipse.jetty.util.thread.OldQueuedThreadPool$PoolThread:void run()",
            "org.eclipse.jetty.util.thread.QueuedThreadPool$2:void run()"
        ]
    },
    "org.eclipse.jetty.servlet.ServletContextHandler:void <init>(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.webapp.WebAppContext:void <init>()"
        ]
    },
    "org.eclipse.jetty.servlet.ServletContextHandler:void <init>(org.eclipse.jetty.server.HandlerContainer,java.lang.String,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.webapp.WebAppContext:void <init>(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.webapp.WebAppContext:void <init>(org.eclipse.jetty.server.HandlerContainer,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.servlet.ServletContextHandler:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.webapp.WebAppContext:void <init>(org.eclipse.jetty.server.session.SessionHandler,org.eclipse.jetty.security.SecurityHandler,org.eclipse.jetty.servlet.ServletHandler,org.eclipse.jetty.server.handler.ErrorHandler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.servlet.ServletContextHandler:org.eclipse.jetty.servlet.FilterHolder addFilter(java.lang.Class,java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.servlet.ServletContextHandler:org.eclipse.jetty.servlet.FilterHolder addFilter(java.lang.String,java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.servlet.ServletHandler:org.eclipse.jetty.servlet.FilterHolder addFilter(java.lang.String,java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.webapp.WebXmlConfiguration:void preConfigure(org.eclipse.jetty.webapp.WebAppContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.webapp.WebAppContext:void doStart()"
        ]
    },
    "org.eclipse.jetty.webapp.WebXmlConfiguration:void configure(org.eclipse.jetty.webapp.WebAppContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.webapp.WebAppContext:void startContext()"
        ]
    },
    "org.eclipse.jetty.webapp.FragmentConfiguration:void configure(org.eclipse.jetty.webapp.WebAppContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.webapp.WebAppContext:void startContext()"
        ]
    },
    "org.eclipse.jetty.servlet.ServletContextHandler:org.eclipse.jetty.servlet.ServletHolder addServlet(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.servlet.ServletContextHandler:org.eclipse.jetty.servlet.ServletHolder addServlet(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.servlet.ServletHandler:org.eclipse.jetty.servlet.ServletHolder addServlet(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.util.IO:java.lang.String toString(java.io.InputStream,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.IO:java.lang.String toString(java.io.InputStream)"
        ]
    },
    "org.eclipse.jetty.util.IO:java.lang.String toString(java.io.Reader)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.session.AbstractSessionManager:javax.servlet.http.HttpSession newHttpSession(javax.servlet.http.HttpServletRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.Request:javax.servlet.http.HttpSession getSession(boolean)"
        ]
    },
    "org.eclipse.jetty.webapp.WebInfConfiguration:void preConfigure(org.eclipse.jetty.webapp.WebAppContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.webapp.WebAppContext:void doStart()"
        ]
    },
    "org.eclipse.jetty.webapp.WebAppClassLoader:void <init>(org.eclipse.jetty.webapp.WebAppContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.webapp.WebAppContext:void doStart()"
        ]
    },
    "org.eclipse.jetty.util.RolloverFileOutputStream:void <init>(java.lang.String,boolean,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.RolloverFileOutputStream:void <init>(java.lang.String)",
            "org.eclipse.jetty.util.RolloverFileOutputStream:void <init>(java.lang.String,boolean)"
        ]
    },
    "org.eclipse.jetty.webapp.WebAppContext:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.util.IO:java.lang.String toString(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.ajax.JSON:java.lang.Object parse(java.io.InputStream)",
            "org.eclipse.jetty.util.ajax.JSON:java.lang.Object parse(java.io.InputStream,boolean)"
        ]
    },
    "org.eclipse.jetty.server.Request:javax.servlet.http.HttpSession getSession(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.security.authentication.FormAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)",
            "org.eclipse.jetty.security.authentication.SessionCachingAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)",
            "org.eclipse.jetty.server.session.SessionHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.Request:javax.servlet.http.HttpSession getSession()",
            "org.eclipse.jetty.server.Request:boolean isRequestedSessionIdValid()",
            "org.eclipse.jetty.server.Response:java.lang.String encodeURL(java.lang.String)"
        ]
    },
    "org.eclipse.jetty.util.RolloverFileOutputStream:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.util.RolloverFileOutputStream:void <init>(java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.util.ajax.JSON:java.lang.Object parse(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.util.ajax.JSON:java.lang.Object parse(java.io.InputStream,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.Request:javax.servlet.http.HttpSession getSession()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.Request:boolean isRequestedSessionIdValid()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.Response:java.lang.String encodeURL(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.Response:java.lang.String encodeRedirectURL(java.lang.String)",
            "org.eclipse.jetty.server.Response:java.lang.String encodeUrl(java.lang.String)",
            "org.eclipse.jetty.server.Response:java.lang.String encodeRedirectUrl(java.lang.String)"
        ]
    },
    "org.eclipse.jetty.server.Response:java.lang.String encodeRedirectURL(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.security.authentication.FormAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)",
            "org.eclipse.jetty.servlet.DefaultServlet:void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.Response:java.lang.String encodeUrl(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.Response:java.lang.String encodeRedirectUrl(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    }
}