{
    "org.jboss.netty.handler.codec.http.websocketx.UTF8Output:void write(byte[])": {
        "isVulRoot": true,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.websocketx.UTF8Output:void <init>(byte[])",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void checkUTF8String(org.jboss.netty.channel.Channel,byte[])"
        ]
    },
    "org.jboss.netty.handler.codec.http.websocketx.UTF8Output:void write(int)": {
        "isVulRoot": true,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.websocketx.UTF8Output:void write(byte[])"
        ]
    },
    "org.jboss.netty.handler.codec.http.websocketx.UTF8Output:void <init>(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void checkUTF8String(org.jboss.netty.channel.Channel,byte[])",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void checkCloseFrameBody(org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)"
        ]
    },
    "org.jboss.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void checkUTF8String(org.jboss.netty.channel.Channel,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder$State)"
        ]
    },
    "org.jboss.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void checkCloseFrameBody(org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder$State)"
        ]
    },
    "org.jboss.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder$State)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,java.lang.Enum)"
        ]
    },
    "org.jboss.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,java.lang.Enum)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.replay.ReplayingDecoder:java.lang.Object decodeLast(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,java.lang.Enum)",
            "org.jboss.netty.handler.codec.replay.ReplayingDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.replay.ReplayingDecoder:void callDecode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.buffer.ChannelBuffer,java.net.SocketAddress)"
        ]
    },
    "org.jboss.netty.handler.codec.replay.ReplayingDecoder:java.lang.Object decodeLast(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,java.lang.Enum)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.replay.ReplayingDecoder:java.lang.Object decodeLast(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.replay.ReplayingDecoder:void cleanup(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.replay.ReplayingDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.frame.FrameDecoder:java.lang.Object decodeLast(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.frame.FrameDecoder:void callDecode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,java.net.SocketAddress)"
        ]
    },
    "org.jboss.netty.handler.codec.replay.ReplayingDecoder:void callDecode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.buffer.ChannelBuffer,java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.replay.ReplayingDecoder:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.codec.replay.ReplayingDecoder:void cleanup(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.replay.ReplayingDecoder:java.lang.Object decodeLast(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.frame.FrameDecoder:void cleanup(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.replay.ReplayingDecoder:void cleanup(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.frame.FrameDecoder:void channelDisconnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.handler.codec.frame.FrameDecoder:void channelClosed(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.frame.FrameDecoder:java.lang.Object decodeLast(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.frame.FrameDecoder:void cleanup(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.frame.FrameDecoder:void callDecode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.frame.FrameDecoder:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.codec.frame.FrameDecoder:void cleanup(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.replay.ReplayingDecoder:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.frame.FrameDecoder:void cleanup(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.frame.FrameDecoder:void channelDisconnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.handler.codec.frame.FrameDecoder:void channelClosed(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.handler.codec.spdy.SpdyFrameDecoder:void cleanup(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.frame.FrameDecoder:void channelDisconnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.ssl.SslHandler:void channelDisconnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.frame.FrameDecoder:void channelClosed(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.codec.http.HttpClientCodec$Decoder:void channelClosed(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.handler.ssl.SslHandler:void channelClosed(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.frame.FrameDecoder:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.DefaultChannelPipeline:void sendUpstream(org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.StaticChannelPipeline:void sendUpstream(org.jboss.netty.channel.StaticChannelPipeline$StaticChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.codec.http.HttpClientCodec:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.codec.http.HttpServerCodec:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.codec.spdy.SpdyFrameCodec:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.timeout.IdleStateAwareChannelUpstreamHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.SpdyFrameDecoder:void cleanup(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.frame.FrameDecoder:void channelDisconnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.handler.codec.frame.FrameDecoder:void channelClosed(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)"
        ]
    },
    "org.jboss.netty.handler.ssl.SslHandler:void channelDisconnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.http.HttpClientCodec$Decoder:void channelClosed(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.ssl.SslHandler:void channelClosed(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.DefaultChannelPipeline:void sendUpstream(org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext:void sendUpstream(org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.DefaultChannelPipeline:void sendUpstream(org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.StaticChannelPipeline:void sendUpstream(org.jboss.netty.channel.StaticChannelPipeline$StaticChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.StaticChannelPipeline$StaticChannelHandlerContext:void sendUpstream(org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.StaticChannelPipeline:void sendUpstream(org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.http.HttpClientCodec:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.DefaultChannelPipeline:void sendUpstream(org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.StaticChannelPipeline:void sendUpstream(org.jboss.netty.channel.StaticChannelPipeline$StaticChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.http.HttpServerCodec:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.DefaultChannelPipeline:void sendUpstream(org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.StaticChannelPipeline:void sendUpstream(org.jboss.netty.channel.StaticChannelPipeline$StaticChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.SpdyFrameCodec:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.DefaultChannelPipeline:void sendUpstream(org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.StaticChannelPipeline:void sendUpstream(org.jboss.netty.channel.StaticChannelPipeline$StaticChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.timeout.IdleStateAwareChannelUpstreamHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.DefaultChannelPipeline:void sendUpstream(org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.StaticChannelPipeline:void sendUpstream(org.jboss.netty.channel.StaticChannelPipeline$StaticChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext:void sendUpstream(org.jboss.netty.channel.ChannelEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.bootstrap.ServerBootstrap$Binder:void channelOpen(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.bootstrap.ServerBootstrap$Binder:void childChannelOpen(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChildChannelStateEvent)",
            "org.jboss.netty.bootstrap.ServerBootstrap$Binder:void exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ExceptionEvent)",
            "org.jboss.netty.channel.Channels:void fireChannelOpen(org.jboss.netty.channel.ChannelHandlerContext)",
            "org.jboss.netty.channel.Channels:void fireChannelBound(org.jboss.netty.channel.ChannelHandlerContext,java.net.SocketAddress)",
            "org.jboss.netty.channel.Channels:void fireChannelConnected(org.jboss.netty.channel.ChannelHandlerContext,java.net.SocketAddress)",
            "org.jboss.netty.channel.Channels:void fireMessageReceived(org.jboss.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "org.jboss.netty.channel.Channels:void fireMessageReceived(org.jboss.netty.channel.ChannelHandlerContext,java.lang.Object,java.net.SocketAddress)",
            "org.jboss.netty.channel.Channels:void fireWriteComplete(org.jboss.netty.channel.ChannelHandlerContext,long)",
            "org.jboss.netty.channel.Channels:void fireChannelInterestChanged(org.jboss.netty.channel.ChannelHandlerContext)",
            "org.jboss.netty.channel.Channels:void fireChannelDisconnected(org.jboss.netty.channel.ChannelHandlerContext)",
            "org.jboss.netty.channel.Channels:void fireChannelUnbound(org.jboss.netty.channel.ChannelHandlerContext)",
            "org.jboss.netty.channel.Channels:void fireChannelClosed(org.jboss.netty.channel.ChannelHandlerContext)",
            "org.jboss.netty.channel.Channels:void fireExceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "org.jboss.netty.channel.SimpleChannelHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.SimpleChannelHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.channel.SimpleChannelHandler:void exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ExceptionEvent)",
            "org.jboss.netty.channel.SimpleChannelHandler:void channelOpen(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.channel.SimpleChannelHandler:void channelBound(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.channel.SimpleChannelHandler:void channelConnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.channel.SimpleChannelHandler:void channelInterestChanged(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.channel.SimpleChannelHandler:void channelDisconnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.channel.SimpleChannelHandler:void channelUnbound(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.channel.SimpleChannelHandler:void channelClosed(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.channel.SimpleChannelHandler:void writeComplete(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.WriteCompletionEvent)",
            "org.jboss.netty.channel.SimpleChannelHandler:void childChannelOpen(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChildChannelStateEvent)",
            "org.jboss.netty.channel.SimpleChannelHandler:void childChannelClosed(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChildChannelStateEvent)",
            "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ExceptionEvent)",
            "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void channelOpen(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void channelBound(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void channelConnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void channelInterestChanged(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void channelDisconnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void channelUnbound(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void channelClosed(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void writeComplete(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.WriteCompletionEvent)",
            "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void childChannelOpen(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChildChannelStateEvent)",
            "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void childChannelClosed(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChildChannelStateEvent)",
            "org.jboss.netty.handler.codec.frame.FrameDecoder:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.codec.frame.FrameDecoder:void exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ExceptionEvent)",
            "org.jboss.netty.handler.codec.frame.FrameDecoder:void cleanup(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.handler.codec.http.HttpChunkAggregator:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.codec.http.HttpContentDecoder:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.codec.http.HttpContentEncoder:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler$1:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.codec.oneone.OneToOneDecoder:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.codec.replay.ReplayingDecoder:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.codec.replay.ReplayingDecoder:void cleanup(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.handler.codec.spdy.SpdyOrHttpChooser:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.execution.ChannelUpstreamEventRunnable:void doRun()",
            "org.jboss.netty.handler.execution.ExecutionHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.ipfilter.IpFilteringHandlerImpl:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.logging.LoggingHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.ssl.SslHandler$6:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.handler.ssl.SslHandler:void exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ExceptionEvent)",
            "org.jboss.netty.handler.stream.ChunkedWriteHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.timeout.IdleStateAwareChannelHandler:void channelIdle(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.handler.timeout.IdleStateEvent)",
            "org.jboss.netty.handler.timeout.IdleStateAwareChannelUpstreamHandler:void channelIdle(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.handler.timeout.IdleStateEvent)",
            "org.jboss.netty.handler.timeout.IdleStateHandler:void channelOpen(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.handler.timeout.IdleStateHandler:void channelClosed(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.handler.timeout.IdleStateHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.timeout.IdleStateHandler:void writeComplete(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.WriteCompletionEvent)",
            "org.jboss.netty.handler.timeout.IdleStateHandler:void channelIdle(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.handler.timeout.IdleState,long)",
            "org.jboss.netty.handler.timeout.ReadTimeoutHandler:void channelOpen(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.handler.timeout.ReadTimeoutHandler:void channelClosed(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.handler.timeout.ReadTimeoutHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)"
        ]
    },
    "org.jboss.netty.channel.DefaultChannelPipeline:void sendUpstream(org.jboss.netty.channel.ChannelEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.Channels:void fireChannelOpen(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.channel.Channels:void fireChannelBound(org.jboss.netty.channel.Channel,java.net.SocketAddress)",
            "org.jboss.netty.channel.Channels:void fireChannelConnected(org.jboss.netty.channel.Channel,java.net.SocketAddress)",
            "org.jboss.netty.channel.Channels:void fireMessageReceived(org.jboss.netty.channel.Channel,java.lang.Object,java.net.SocketAddress)",
            "org.jboss.netty.channel.Channels:void fireWriteComplete(org.jboss.netty.channel.Channel,long)",
            "org.jboss.netty.channel.Channels:void fireChannelInterestChanged(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.channel.Channels:void fireChannelDisconnected(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.channel.Channels:void fireChannelUnbound(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.channel.Channels:void fireChannelClosed(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.channel.Channels:void fireExceptionCaught(org.jboss.netty.channel.Channel,java.lang.Throwable)",
            "org.jboss.netty.channel.Channels:void fireChildChannelStateChanged(org.jboss.netty.channel.Channel,org.jboss.netty.channel.Channel)"
        ]
    },
    "org.jboss.netty.channel.StaticChannelPipeline$StaticChannelHandlerContext:void sendUpstream(org.jboss.netty.channel.ChannelEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.bootstrap.ServerBootstrap$Binder:void channelOpen(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.bootstrap.ServerBootstrap$Binder:void childChannelOpen(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChildChannelStateEvent)",
            "org.jboss.netty.bootstrap.ServerBootstrap$Binder:void exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ExceptionEvent)",
            "org.jboss.netty.channel.Channels:void fireChannelOpen(org.jboss.netty.channel.ChannelHandlerContext)",
            "org.jboss.netty.channel.Channels:void fireChannelBound(org.jboss.netty.channel.ChannelHandlerContext,java.net.SocketAddress)",
            "org.jboss.netty.channel.Channels:void fireChannelConnected(org.jboss.netty.channel.ChannelHandlerContext,java.net.SocketAddress)",
            "org.jboss.netty.channel.Channels:void fireMessageReceived(org.jboss.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "org.jboss.netty.channel.Channels:void fireMessageReceived(org.jboss.netty.channel.ChannelHandlerContext,java.lang.Object,java.net.SocketAddress)",
            "org.jboss.netty.channel.Channels:void fireWriteComplete(org.jboss.netty.channel.ChannelHandlerContext,long)",
            "org.jboss.netty.channel.Channels:void fireChannelInterestChanged(org.jboss.netty.channel.ChannelHandlerContext)",
            "org.jboss.netty.channel.Channels:void fireChannelDisconnected(org.jboss.netty.channel.ChannelHandlerContext)",
            "org.jboss.netty.channel.Channels:void fireChannelUnbound(org.jboss.netty.channel.ChannelHandlerContext)",
            "org.jboss.netty.channel.Channels:void fireChannelClosed(org.jboss.netty.channel.ChannelHandlerContext)",
            "org.jboss.netty.channel.Channels:void fireExceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "org.jboss.netty.channel.SimpleChannelHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.SimpleChannelHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.channel.SimpleChannelHandler:void exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ExceptionEvent)",
            "org.jboss.netty.channel.SimpleChannelHandler:void channelOpen(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.channel.SimpleChannelHandler:void channelBound(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.channel.SimpleChannelHandler:void channelConnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.channel.SimpleChannelHandler:void channelInterestChanged(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.channel.SimpleChannelHandler:void channelDisconnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.channel.SimpleChannelHandler:void channelUnbound(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.channel.SimpleChannelHandler:void channelClosed(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.channel.SimpleChannelHandler:void writeComplete(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.WriteCompletionEvent)",
            "org.jboss.netty.channel.SimpleChannelHandler:void childChannelOpen(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChildChannelStateEvent)",
            "org.jboss.netty.channel.SimpleChannelHandler:void childChannelClosed(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChildChannelStateEvent)",
            "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ExceptionEvent)",
            "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void channelOpen(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void channelBound(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void channelConnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void channelInterestChanged(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void channelDisconnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void channelUnbound(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void channelClosed(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void writeComplete(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.WriteCompletionEvent)",
            "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void childChannelOpen(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChildChannelStateEvent)",
            "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void childChannelClosed(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChildChannelStateEvent)",
            "org.jboss.netty.handler.codec.frame.FrameDecoder:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.codec.frame.FrameDecoder:void exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ExceptionEvent)",
            "org.jboss.netty.handler.codec.frame.FrameDecoder:void cleanup(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.handler.codec.http.HttpChunkAggregator:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.codec.http.HttpContentDecoder:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.codec.http.HttpContentEncoder:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler$1:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.codec.oneone.OneToOneDecoder:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.codec.replay.ReplayingDecoder:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.codec.replay.ReplayingDecoder:void cleanup(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.handler.codec.spdy.SpdyOrHttpChooser:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.execution.ChannelUpstreamEventRunnable:void doRun()",
            "org.jboss.netty.handler.execution.ExecutionHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.ipfilter.IpFilteringHandlerImpl:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.logging.LoggingHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.ssl.SslHandler$6:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.handler.ssl.SslHandler:void exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ExceptionEvent)",
            "org.jboss.netty.handler.stream.ChunkedWriteHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.timeout.IdleStateAwareChannelHandler:void channelIdle(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.handler.timeout.IdleStateEvent)",
            "org.jboss.netty.handler.timeout.IdleStateAwareChannelUpstreamHandler:void channelIdle(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.handler.timeout.IdleStateEvent)",
            "org.jboss.netty.handler.timeout.IdleStateHandler:void channelOpen(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.handler.timeout.IdleStateHandler:void channelClosed(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.handler.timeout.IdleStateHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.timeout.IdleStateHandler:void writeComplete(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.WriteCompletionEvent)",
            "org.jboss.netty.handler.timeout.IdleStateHandler:void channelIdle(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.handler.timeout.IdleState,long)",
            "org.jboss.netty.handler.timeout.ReadTimeoutHandler:void channelOpen(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.handler.timeout.ReadTimeoutHandler:void channelClosed(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.handler.timeout.ReadTimeoutHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)"
        ]
    },
    "org.jboss.netty.channel.StaticChannelPipeline:void sendUpstream(org.jboss.netty.channel.ChannelEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.Channels:void fireChannelOpen(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.channel.Channels:void fireChannelBound(org.jboss.netty.channel.Channel,java.net.SocketAddress)",
            "org.jboss.netty.channel.Channels:void fireChannelConnected(org.jboss.netty.channel.Channel,java.net.SocketAddress)",
            "org.jboss.netty.channel.Channels:void fireMessageReceived(org.jboss.netty.channel.Channel,java.lang.Object,java.net.SocketAddress)",
            "org.jboss.netty.channel.Channels:void fireWriteComplete(org.jboss.netty.channel.Channel,long)",
            "org.jboss.netty.channel.Channels:void fireChannelInterestChanged(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.channel.Channels:void fireChannelDisconnected(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.channel.Channels:void fireChannelUnbound(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.channel.Channels:void fireChannelClosed(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.channel.Channels:void fireExceptionCaught(org.jboss.netty.channel.Channel,java.lang.Throwable)",
            "org.jboss.netty.channel.Channels:void fireChildChannelStateChanged(org.jboss.netty.channel.Channel,org.jboss.netty.channel.Channel)"
        ]
    },
    "org.jboss.netty.bootstrap.ServerBootstrap$Binder:void channelOpen(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.bootstrap.ServerBootstrap$Binder:void childChannelOpen(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChildChannelStateEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.bootstrap.ServerBootstrap$Binder:void exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ExceptionEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.Channels:void fireChannelOpen(org.jboss.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.channel.Channels:void fireChannelBound(org.jboss.netty.channel.ChannelHandlerContext,java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.channel.Channels:void fireChannelConnected(org.jboss.netty.channel.ChannelHandlerContext,java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.channel.Channels:void fireMessageReceived(org.jboss.netty.channel.ChannelHandlerContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.frame.FrameDecoder:void replace(java.lang.String,org.jboss.netty.channel.ChannelHandler)"
        ]
    },
    "org.jboss.netty.channel.Channels:void fireMessageReceived(org.jboss.netty.channel.ChannelHandlerContext,java.lang.Object,java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.frame.FrameDecoder:void unfoldAndFireMessageReceived(org.jboss.netty.channel.ChannelHandlerContext,java.net.SocketAddress,java.lang.Object)",
            "org.jboss.netty.handler.codec.http.HttpChunkAggregator:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.codec.http.HttpContentDecoder:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.codec.oneone.OneToOneDecoder:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:void issueStreamError(org.jboss.netty.channel.ChannelHandlerContext,java.net.SocketAddress,int,org.jboss.netty.handler.codec.spdy.SpdyStreamStatus)"
        ]
    },
    "org.jboss.netty.channel.Channels:void fireWriteComplete(org.jboss.netty.channel.ChannelHandlerContext,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.channel.Channels:void fireChannelInterestChanged(org.jboss.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.channel.Channels:void fireChannelDisconnected(org.jboss.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.channel.Channels:void fireChannelUnbound(org.jboss.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.channel.Channels:void fireChannelClosed(org.jboss.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.channel.Channels:void fireExceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.Channels$8:void run()",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler$1:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.handler.codec.spdy.SpdyFrameDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.spdy.SpdyFrameDecoder:void fireInvalidFrameException(org.jboss.netty.channel.ChannelHandlerContext)",
            "org.jboss.netty.handler.codec.spdy.SpdyFrameDecoder:void fireProtocolException(org.jboss.netty.channel.ChannelHandlerContext,java.lang.String)",
            "org.jboss.netty.handler.ssl.SslHandler$2:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.handler.ssl.SslHandler$7:void run()",
            "org.jboss.netty.handler.ssl.SslHandler:org.jboss.netty.channel.ChannelFuture handshake()",
            "org.jboss.netty.handler.ssl.SslHandler:org.jboss.netty.channel.ChannelFuture close()",
            "org.jboss.netty.handler.ssl.SslHandler:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.ssl.SslHandler:void handleRenegotiation(javax.net.ssl.SSLEngineResult$HandshakeStatus)",
            "org.jboss.netty.handler.stream.ChunkedWriteHandler:void flush(org.jboss.netty.channel.ChannelHandlerContext,boolean)",
            "org.jboss.netty.handler.timeout.IdleStateHandler$1:void run()",
            "org.jboss.netty.handler.timeout.ReadTimeoutHandler$ReadTimeoutTask$1:void run()",
            "org.jboss.netty.handler.timeout.ReadTimeoutHandler:void readTimedOut(org.jboss.netty.channel.ChannelHandlerContext)",
            "org.jboss.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask$1:void run()",
            "org.jboss.netty.handler.timeout.WriteTimeoutHandler:void writeTimedOut(org.jboss.netty.channel.ChannelHandlerContext)"
        ]
    },
    "org.jboss.netty.channel.SimpleChannelHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.DefaultChannelPipeline:void sendUpstream(org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.StaticChannelPipeline:void sendUpstream(org.jboss.netty.channel.StaticChannelPipeline$StaticChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.timeout.IdleStateAwareChannelHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.SimpleChannelHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.codec.spdy.SpdyHttpResponseStreamIdHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.traffic.AbstractTrafficShapingHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)"
        ]
    },
    "org.jboss.netty.channel.SimpleChannelHandler:void exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ExceptionEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.SimpleChannelHandler:void channelOpen(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.SimpleChannelHandler:void channelBound(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.SimpleChannelHandler:void channelConnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.traffic.ChannelTrafficShapingHandler:void channelConnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)"
        ]
    },
    "org.jboss.netty.channel.SimpleChannelHandler:void channelInterestChanged(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.SimpleChannelHandler:void channelDisconnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.SimpleChannelHandler:void channelUnbound(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.SimpleChannelHandler:void channelClosed(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.codec.http.HttpContentEncoder:void channelClosed(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.handler.queue.BufferedWriteHandler:void channelClosed(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.handler.traffic.ChannelTrafficShapingHandler:void channelClosed(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)"
        ]
    },
    "org.jboss.netty.channel.SimpleChannelHandler:void writeComplete(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.WriteCompletionEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.SimpleChannelHandler:void childChannelOpen(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChildChannelStateEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.SimpleChannelHandler:void childChannelClosed(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChildChannelStateEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)"
        ]
    },
    "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ExceptionEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:void exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ExceptionEvent)"
        ]
    },
    "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void channelOpen(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void channelBound(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void channelConnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.ssl.SslHandler:void channelConnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)"
        ]
    },
    "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void channelInterestChanged(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void channelDisconnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void channelUnbound(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void channelClosed(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.codec.http.HttpContentDecoder:void channelClosed(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)"
        ]
    },
    "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void writeComplete(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.WriteCompletionEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void childChannelOpen(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChildChannelStateEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void childChannelClosed(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChildChannelStateEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.frame.FrameDecoder:void exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ExceptionEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.codec.marshalling.CompatibleMarshallingDecoder:void exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ExceptionEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.http.HttpChunkAggregator:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.http.HttpContentDecoder:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.http.HttpContentEncoder:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler$1:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.oneone.OneToOneDecoder:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.DefaultChannelPipeline:void sendUpstream(org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.StaticChannelPipeline:void sendUpstream(org.jboss.netty.channel.StaticChannelPipeline$StaticChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.codec.spdy.SpdyHttpCodec:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.SpdyOrHttpChooser:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.execution.ChannelUpstreamEventRunnable:void doRun()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.execution.ChannelEventRunnable:void run()"
        ]
    },
    "org.jboss.netty.handler.execution.ExecutionHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.DefaultChannelPipeline:void sendUpstream(org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.StaticChannelPipeline:void sendUpstream(org.jboss.netty.channel.StaticChannelPipeline$StaticChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.ipfilter.IpFilteringHandlerImpl:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.DefaultChannelPipeline:void sendUpstream(org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.StaticChannelPipeline:void sendUpstream(org.jboss.netty.channel.StaticChannelPipeline$StaticChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.ipfilter.OneIpFilterHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.logging.LoggingHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.DefaultChannelPipeline:void sendUpstream(org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.StaticChannelPipeline:void sendUpstream(org.jboss.netty.channel.StaticChannelPipeline$StaticChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.ssl.SslHandler$6:void operationComplete(org.jboss.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.CompleteChannelFuture:void addListener(org.jboss.netty.channel.ChannelFutureListener)",
            "org.jboss.netty.channel.DefaultChannelFuture:void notifyListener(org.jboss.netty.channel.ChannelFutureListener)"
        ]
    },
    "org.jboss.netty.handler.ssl.SslHandler:void exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ExceptionEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.stream.ChunkedWriteHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.DefaultChannelPipeline:void sendUpstream(org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.StaticChannelPipeline:void sendUpstream(org.jboss.netty.channel.StaticChannelPipeline$StaticChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.timeout.IdleStateAwareChannelHandler:void channelIdle(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.handler.timeout.IdleStateEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.timeout.IdleStateAwareChannelHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.timeout.IdleStateAwareChannelUpstreamHandler:void channelIdle(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.handler.timeout.IdleStateEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.timeout.IdleStateAwareChannelUpstreamHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.timeout.IdleStateHandler:void channelOpen(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.timeout.IdleStateHandler:void channelClosed(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.timeout.IdleStateHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.timeout.IdleStateHandler:void writeComplete(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.WriteCompletionEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.timeout.IdleStateHandler:void channelIdle(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.handler.timeout.IdleState,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.timeout.IdleStateHandler$1:void run()"
        ]
    },
    "org.jboss.netty.handler.timeout.ReadTimeoutHandler:void channelOpen(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.timeout.ReadTimeoutHandler:void channelClosed(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.timeout.ReadTimeoutHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.Channels:void fireChannelOpen(org.jboss.netty.channel.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.local.DefaultLocalChannel:void <init>(org.jboss.netty.channel.local.LocalServerChannel,org.jboss.netty.channel.ChannelFactory,org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelSink,org.jboss.netty.channel.local.DefaultLocalChannel)",
            "org.jboss.netty.channel.local.DefaultLocalServerChannel:void <init>(org.jboss.netty.channel.ChannelFactory,org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelSink)",
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel:void <init>(org.jboss.netty.channel.ChannelFactory,org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelSink,org.jboss.netty.channel.socket.ClientSocketChannelFactory)",
            "org.jboss.netty.channel.socket.nio.NioAcceptedSocketChannel:void <init>(org.jboss.netty.channel.ChannelFactory,org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.Channel,org.jboss.netty.channel.ChannelSink,java.nio.channels.SocketChannel,org.jboss.netty.channel.socket.nio.NioWorker,java.lang.Thread)",
            "org.jboss.netty.channel.socket.nio.NioClientSocketChannel:void <init>(org.jboss.netty.channel.ChannelFactory,org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelSink,org.jboss.netty.channel.socket.nio.NioWorker)",
            "org.jboss.netty.channel.socket.nio.NioDatagramChannel:void <init>(org.jboss.netty.channel.ChannelFactory,org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelSink,org.jboss.netty.channel.socket.nio.NioDatagramWorker,org.jboss.netty.channel.socket.InternetProtocolFamily)",
            "org.jboss.netty.channel.socket.nio.NioServerSocketChannel:void <init>(org.jboss.netty.channel.ChannelFactory,org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelSink,org.jboss.netty.channel.socket.nio.Boss,org.jboss.netty.channel.socket.nio.WorkerPool)",
            "org.jboss.netty.channel.socket.oio.OioAcceptedSocketChannel:void <init>(org.jboss.netty.channel.Channel,org.jboss.netty.channel.ChannelFactory,org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelSink,java.net.Socket)",
            "org.jboss.netty.channel.socket.oio.OioClientSocketChannel:void <init>(org.jboss.netty.channel.ChannelFactory,org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelSink)",
            "org.jboss.netty.channel.socket.oio.OioDatagramChannel:void <init>(org.jboss.netty.channel.ChannelFactory,org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelSink)",
            "org.jboss.netty.channel.socket.oio.OioServerSocketChannel:void <init>(org.jboss.netty.channel.ChannelFactory,org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelSink)",
            "org.jboss.netty.handler.codec.embedder.AbstractCodecEmbedder:void fireInitialEvents()"
        ]
    },
    "org.jboss.netty.channel.Channels:void fireChannelBound(org.jboss.netty.channel.Channel,java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.local.LocalClientChannelSink:void bind(org.jboss.netty.channel.local.DefaultLocalChannel,org.jboss.netty.channel.ChannelFuture,org.jboss.netty.channel.local.LocalAddress)",
            "org.jboss.netty.channel.local.LocalClientChannelSink:void connect(org.jboss.netty.channel.local.DefaultLocalChannel,org.jboss.netty.channel.ChannelFuture,org.jboss.netty.channel.local.LocalAddress)",
            "org.jboss.netty.channel.local.LocalServerChannelSink:void bind(org.jboss.netty.channel.local.DefaultLocalServerChannel,org.jboss.netty.channel.ChannelFuture,org.jboss.netty.channel.local.LocalAddress)",
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$ServletChannelHandler:void channelBound(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.channel.socket.nio.NioClientSocketPipelineSink:void bind(org.jboss.netty.channel.socket.nio.NioClientSocketChannel,org.jboss.netty.channel.ChannelFuture,java.net.SocketAddress)",
            "org.jboss.netty.channel.socket.nio.NioDatagramPipelineSink:void bind(org.jboss.netty.channel.socket.nio.NioDatagramChannel,org.jboss.netty.channel.ChannelFuture,java.net.InetSocketAddress)",
            "org.jboss.netty.channel.socket.nio.NioDatagramPipelineSink:void connect(org.jboss.netty.channel.socket.nio.NioDatagramChannel,org.jboss.netty.channel.ChannelFuture,java.net.InetSocketAddress)",
            "org.jboss.netty.channel.socket.nio.NioServerBoss$RegisterTask:void run()",
            "org.jboss.netty.channel.socket.nio.NioWorker$RegisterTask:void run()",
            "org.jboss.netty.channel.socket.oio.OioAcceptedSocketChannel:void <init>(org.jboss.netty.channel.Channel,org.jboss.netty.channel.ChannelFactory,org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelSink,java.net.Socket)",
            "org.jboss.netty.channel.socket.oio.OioClientSocketPipelineSink:void bind(org.jboss.netty.channel.socket.oio.OioClientSocketChannel,org.jboss.netty.channel.ChannelFuture,java.net.SocketAddress)",
            "org.jboss.netty.channel.socket.oio.OioClientSocketPipelineSink:void connect(org.jboss.netty.channel.socket.oio.OioClientSocketChannel,org.jboss.netty.channel.ChannelFuture,java.net.SocketAddress)",
            "org.jboss.netty.channel.socket.oio.OioDatagramPipelineSink:void bind(org.jboss.netty.channel.socket.oio.OioDatagramChannel,org.jboss.netty.channel.ChannelFuture,java.net.SocketAddress)",
            "org.jboss.netty.channel.socket.oio.OioDatagramPipelineSink:void connect(org.jboss.netty.channel.socket.oio.OioDatagramChannel,org.jboss.netty.channel.ChannelFuture,java.net.SocketAddress)",
            "org.jboss.netty.channel.socket.oio.OioServerSocketPipelineSink:void bind(org.jboss.netty.channel.socket.oio.OioServerSocketChannel,org.jboss.netty.channel.ChannelFuture,java.net.SocketAddress)",
            "org.jboss.netty.handler.codec.embedder.AbstractCodecEmbedder:void fireInitialEvents()"
        ]
    },
    "org.jboss.netty.channel.Channels:void fireChannelConnected(org.jboss.netty.channel.Channel,java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.local.LocalClientChannelSink:void connect(org.jboss.netty.channel.local.DefaultLocalChannel,org.jboss.netty.channel.ChannelFuture,org.jboss.netty.channel.local.LocalAddress)",
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$2$1:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$2:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.socket.nio.NioDatagramPipelineSink:void connect(org.jboss.netty.channel.socket.nio.NioDatagramChannel,org.jboss.netty.channel.ChannelFuture,java.net.InetSocketAddress)",
            "org.jboss.netty.channel.socket.nio.NioWorker$RegisterTask:void run()",
            "org.jboss.netty.channel.socket.oio.OioClientSocketPipelineSink:void connect(org.jboss.netty.channel.socket.oio.OioClientSocketChannel,org.jboss.netty.channel.ChannelFuture,java.net.SocketAddress)",
            "org.jboss.netty.channel.socket.oio.OioDatagramPipelineSink:void connect(org.jboss.netty.channel.socket.oio.OioDatagramChannel,org.jboss.netty.channel.ChannelFuture,java.net.SocketAddress)",
            "org.jboss.netty.channel.socket.oio.OioWorker:void run()",
            "org.jboss.netty.handler.codec.embedder.AbstractCodecEmbedder:void fireInitialEvents()"
        ]
    },
    "org.jboss.netty.channel.Channels:void fireMessageReceived(org.jboss.netty.channel.Channel,java.lang.Object,java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.Channels:void fireMessageReceived(org.jboss.netty.channel.Channel,java.lang.Object)",
            "org.jboss.netty.channel.socket.nio.NioDatagramWorker:boolean read(java.nio.channels.SelectionKey)",
            "org.jboss.netty.channel.socket.oio.OioDatagramWorker:boolean process()"
        ]
    },
    "org.jboss.netty.channel.Channels:void fireWriteComplete(org.jboss.netty.channel.Channel,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.Channels$2:void run()",
            "org.jboss.netty.channel.local.DefaultLocalChannel:void flushWriteBuffer()",
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$3:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void write0(org.jboss.netty.channel.socket.nio.AbstractNioChannel)",
            "org.jboss.netty.channel.socket.nio.NioDatagramWorker:void write0(org.jboss.netty.channel.socket.nio.AbstractNioChannel)",
            "org.jboss.netty.channel.socket.oio.OioDatagramWorker:void write(org.jboss.netty.channel.socket.oio.OioDatagramChannel,org.jboss.netty.channel.ChannelFuture,java.lang.Object,java.net.SocketAddress)",
            "org.jboss.netty.channel.socket.oio.OioWorker:void write(org.jboss.netty.channel.socket.oio.OioSocketChannel,org.jboss.netty.channel.ChannelFuture,java.lang.Object)"
        ]
    },
    "org.jboss.netty.channel.Channels:void fireChannelInterestChanged(org.jboss.netty.channel.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.Channels$3:void run()",
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$ServletChannelHandler:void channelInterestChanged(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.channel.socket.nio.AbstractNioChannel$WriteRequestQueue:boolean offer(org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.channel.socket.nio.AbstractNioChannel$WriteRequestQueue:org.jboss.netty.channel.MessageEvent poll()",
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void setInterestOps(org.jboss.netty.channel.socket.nio.AbstractNioChannel,org.jboss.netty.channel.ChannelFuture,int)",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void setInterestOps(org.jboss.netty.channel.socket.oio.AbstractOioChannel,org.jboss.netty.channel.ChannelFuture,int)"
        ]
    },
    "org.jboss.netty.channel.Channels:void fireChannelDisconnected(org.jboss.netty.channel.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.Channels$4:void run()",
            "org.jboss.netty.channel.local.DefaultLocalChannel:void closeNow(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$ServletChannelHandler:void channelDisconnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void close(org.jboss.netty.channel.socket.nio.AbstractNioChannel,org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.socket.nio.NioDatagramWorker:void disconnect(org.jboss.netty.channel.socket.nio.NioDatagramChannel,org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void close(org.jboss.netty.channel.socket.oio.AbstractOioChannel,org.jboss.netty.channel.ChannelFuture,boolean)",
            "org.jboss.netty.channel.socket.oio.OioDatagramWorker:void disconnect(org.jboss.netty.channel.socket.oio.OioDatagramChannel,org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.handler.codec.embedder.AbstractCodecEmbedder:boolean finish()"
        ]
    },
    "org.jboss.netty.channel.Channels:void fireChannelUnbound(org.jboss.netty.channel.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.Channels$5:void run()",
            "org.jboss.netty.channel.local.DefaultLocalChannel:void closeNow(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.local.LocalServerChannelSink:void close(org.jboss.netty.channel.local.DefaultLocalServerChannel,org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$ServletChannelHandler:void channelUnbound(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void close(org.jboss.netty.channel.socket.nio.AbstractNioChannel,org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.socket.nio.NioDatagramPipelineSink:void close(org.jboss.netty.channel.socket.nio.NioDatagramChannel,org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.socket.nio.NioServerBoss:void close(org.jboss.netty.channel.socket.nio.NioServerSocketChannel,org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void close(org.jboss.netty.channel.socket.oio.AbstractOioChannel,org.jboss.netty.channel.ChannelFuture,boolean)",
            "org.jboss.netty.channel.socket.oio.OioServerSocketPipelineSink:void close(org.jboss.netty.channel.socket.oio.OioServerSocketChannel,org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.handler.codec.embedder.AbstractCodecEmbedder:boolean finish()"
        ]
    },
    "org.jboss.netty.channel.Channels:void fireChannelClosed(org.jboss.netty.channel.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.Channels$6:void run()",
            "org.jboss.netty.channel.local.DefaultLocalChannel:void closeNow(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.local.LocalServerChannelSink:void close(org.jboss.netty.channel.local.DefaultLocalServerChannel,org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$ServletChannelHandler:void channelClosed(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void close(org.jboss.netty.channel.socket.nio.AbstractNioChannel,org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.socket.nio.NioDatagramPipelineSink:void close(org.jboss.netty.channel.socket.nio.NioDatagramChannel,org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.socket.nio.NioServerBoss:void close(org.jboss.netty.channel.socket.nio.NioServerSocketChannel,org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void close(org.jboss.netty.channel.socket.oio.AbstractOioChannel,org.jboss.netty.channel.ChannelFuture,boolean)",
            "org.jboss.netty.channel.socket.oio.OioServerSocketPipelineSink:void close(org.jboss.netty.channel.socket.oio.OioServerSocketChannel,org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.handler.codec.embedder.AbstractCodecEmbedder:boolean finish()"
        ]
    },
    "org.jboss.netty.channel.Channels:void fireExceptionCaught(org.jboss.netty.channel.Channel,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.bootstrap.ServerBootstrap$Binder:void childChannelOpen(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChildChannelStateEvent)",
            "org.jboss.netty.channel.AbstractChannelSink:void exceptionCaught(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent,org.jboss.netty.channel.ChannelPipelineException)",
            "org.jboss.netty.channel.Channels$7:void run()",
            "org.jboss.netty.channel.local.DefaultLocalChannel:void flushWriteBuffer()",
            "org.jboss.netty.channel.local.LocalClientChannelSink:void bind(org.jboss.netty.channel.local.DefaultLocalChannel,org.jboss.netty.channel.ChannelFuture,org.jboss.netty.channel.local.LocalAddress)",
            "org.jboss.netty.channel.local.LocalClientChannelSink:void connect(org.jboss.netty.channel.local.DefaultLocalChannel,org.jboss.netty.channel.ChannelFuture,org.jboss.netty.channel.local.LocalAddress)",
            "org.jboss.netty.channel.local.LocalServerChannelSink:void bind(org.jboss.netty.channel.local.DefaultLocalServerChannel,org.jboss.netty.channel.ChannelFuture,org.jboss.netty.channel.local.LocalAddress)",
            "org.jboss.netty.channel.local.LocalServerChannelSink:void close(org.jboss.netty.channel.local.DefaultLocalServerChannel,org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$2$1:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$2:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$ServletChannelHandler:void exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ExceptionEvent)",
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void write0(org.jboss.netty.channel.socket.nio.AbstractNioChannel)",
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void close(org.jboss.netty.channel.socket.nio.AbstractNioChannel,org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void cleanUpWriteBuffer(org.jboss.netty.channel.socket.nio.AbstractNioChannel)",
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void setInterestOps(org.jboss.netty.channel.socket.nio.AbstractNioChannel,org.jboss.netty.channel.ChannelFuture,int)",
            "org.jboss.netty.channel.socket.nio.NioClientBoss:void processSelectedKeys(java.util.Set)",
            "org.jboss.netty.channel.socket.nio.NioClientBoss:void processConnectTimeout(java.util.Set,long)",
            "org.jboss.netty.channel.socket.nio.NioClientSocketPipelineSink:void bind(org.jboss.netty.channel.socket.nio.NioClientSocketChannel,org.jboss.netty.channel.ChannelFuture,java.net.SocketAddress)",
            "org.jboss.netty.channel.socket.nio.NioClientSocketPipelineSink:void connect(org.jboss.netty.channel.socket.nio.NioClientSocketChannel,org.jboss.netty.channel.ChannelFuture,java.net.SocketAddress)",
            "org.jboss.netty.channel.socket.nio.NioDatagramPipelineSink:void close(org.jboss.netty.channel.socket.nio.NioDatagramChannel,org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.socket.nio.NioDatagramPipelineSink:void bind(org.jboss.netty.channel.socket.nio.NioDatagramChannel,org.jboss.netty.channel.ChannelFuture,java.net.InetSocketAddress)",
            "org.jboss.netty.channel.socket.nio.NioDatagramPipelineSink:void connect(org.jboss.netty.channel.socket.nio.NioDatagramChannel,org.jboss.netty.channel.ChannelFuture,java.net.InetSocketAddress)",
            "org.jboss.netty.channel.socket.nio.NioDatagramWorker:boolean read(java.nio.channels.SelectionKey)",
            "org.jboss.netty.channel.socket.nio.NioDatagramWorker:void disconnect(org.jboss.netty.channel.socket.nio.NioDatagramChannel,org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.socket.nio.NioDatagramWorker:void write0(org.jboss.netty.channel.socket.nio.AbstractNioChannel)",
            "org.jboss.netty.channel.socket.nio.NioServerBoss$RegisterTask:void run()",
            "org.jboss.netty.channel.socket.nio.NioServerBoss:void close(org.jboss.netty.channel.socket.nio.NioServerSocketChannel,org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.socket.nio.NioWorker:boolean read(java.nio.channels.SelectionKey)",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void run()",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void setInterestOps(org.jboss.netty.channel.socket.oio.AbstractOioChannel,org.jboss.netty.channel.ChannelFuture,int)",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void close(org.jboss.netty.channel.socket.oio.AbstractOioChannel,org.jboss.netty.channel.ChannelFuture,boolean)",
            "org.jboss.netty.channel.socket.oio.OioClientSocketPipelineSink:void bind(org.jboss.netty.channel.socket.oio.OioClientSocketChannel,org.jboss.netty.channel.ChannelFuture,java.net.SocketAddress)",
            "org.jboss.netty.channel.socket.oio.OioClientSocketPipelineSink:void connect(org.jboss.netty.channel.socket.oio.OioClientSocketChannel,org.jboss.netty.channel.ChannelFuture,java.net.SocketAddress)",
            "org.jboss.netty.channel.socket.oio.OioDatagramPipelineSink:void bind(org.jboss.netty.channel.socket.oio.OioDatagramChannel,org.jboss.netty.channel.ChannelFuture,java.net.SocketAddress)",
            "org.jboss.netty.channel.socket.oio.OioDatagramPipelineSink:void connect(org.jboss.netty.channel.socket.oio.OioDatagramChannel,org.jboss.netty.channel.ChannelFuture,java.net.SocketAddress)",
            "org.jboss.netty.channel.socket.oio.OioDatagramWorker:void write(org.jboss.netty.channel.socket.oio.OioDatagramChannel,org.jboss.netty.channel.ChannelFuture,java.lang.Object,java.net.SocketAddress)",
            "org.jboss.netty.channel.socket.oio.OioDatagramWorker:void disconnect(org.jboss.netty.channel.socket.oio.OioDatagramChannel,org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.socket.oio.OioServerSocketPipelineSink:void bind(org.jboss.netty.channel.socket.oio.OioServerSocketChannel,org.jboss.netty.channel.ChannelFuture,java.net.SocketAddress)",
            "org.jboss.netty.channel.socket.oio.OioServerSocketPipelineSink:void close(org.jboss.netty.channel.socket.oio.OioServerSocketChannel,org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.socket.oio.OioWorker:void write(org.jboss.netty.channel.socket.oio.OioSocketChannel,org.jboss.netty.channel.ChannelFuture,java.lang.Object)",
            "org.jboss.netty.handler.codec.frame.DelimiterBasedFrameDecoder:void fail(org.jboss.netty.channel.ChannelHandlerContext,long)",
            "org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder:void fail(org.jboss.netty.channel.ChannelHandlerContext,long)",
            "org.jboss.netty.handler.codec.frame.LineBasedFrameDecoder:void fail(org.jboss.netty.channel.ChannelHandlerContext,java.lang.String)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerHandshaker$1:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.handler.queue.BufferedWriteHandler:void channelClosed(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.handler.stream.ChunkedWriteHandler:void discard(org.jboss.netty.channel.ChannelHandlerContext,boolean)"
        ]
    },
    "org.jboss.netty.channel.Channels:void fireChildChannelStateChanged(org.jboss.netty.channel.Channel,org.jboss.netty.channel.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.Channels:void fireChannelOpen(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.channel.Channels:void fireChannelClosed(org.jboss.netty.channel.Channel)"
        ]
    },
    "org.jboss.netty.handler.codec.frame.FrameDecoder:void replace(java.lang.String,org.jboss.netty.channel.ChannelHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker00:void finishHandshake(org.jboss.netty.channel.Channel,org.jboss.netty.handler.codec.http.HttpResponse)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker07:void finishHandshake(org.jboss.netty.channel.Channel,org.jboss.netty.handler.codec.http.HttpResponse)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker08:void finishHandshake(org.jboss.netty.channel.Channel,org.jboss.netty.handler.codec.http.HttpResponse)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker13:void finishHandshake(org.jboss.netty.channel.Channel,org.jboss.netty.handler.codec.http.HttpResponse)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerHandshaker:org.jboss.netty.channel.ChannelFuture writeHandshakeResponse(org.jboss.netty.channel.Channel,org.jboss.netty.handler.codec.http.HttpResponse,org.jboss.netty.channel.ChannelHandler,org.jboss.netty.channel.ChannelHandler)"
        ]
    },
    "org.jboss.netty.handler.codec.frame.FrameDecoder:void unfoldAndFireMessageReceived(org.jboss.netty.channel.ChannelHandlerContext,java.net.SocketAddress,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.frame.FrameDecoder:void callDecode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,java.net.SocketAddress)",
            "org.jboss.netty.handler.codec.frame.FrameDecoder:void cleanup(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.handler.codec.replay.ReplayingDecoder:void callDecode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.buffer.ChannelBuffer,java.net.SocketAddress)",
            "org.jboss.netty.handler.codec.replay.ReplayingDecoder:void cleanup(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:void issueStreamError(org.jboss.netty.channel.ChannelHandlerContext,java.net.SocketAddress,int,org.jboss.netty.handler.codec.spdy.SpdyStreamStatus)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)"
        ]
    },
    "org.jboss.netty.channel.Channels$8:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.util.BoundedThreadPool$CallerFeedbackPolicy:void rejectedExecution(java.lang.Runnable,java.util.concurrent.ThreadPoolExecutor)",
            "org.onlab.util.BoundedThreadPool:void execute(java.lang.Runnable)",
            "org.onlab.util.SharedExecutorService:void execute(java.lang.Runnable)",
            "org.jboss.netty.channel.AbstractChannelSink:org.jboss.netty.channel.ChannelFuture execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable)",
            "org.jboss.netty.channel.socket.ChannelRunnableWrapper:void run()",
            "org.jboss.netty.channel.socket.nio.AbstractNioSelector:void processTaskQueue()",
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void executeInIoThread(java.lang.Runnable,boolean)",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void executeInIoThread(java.lang.Runnable)",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void processEventQueue()",
            "org.jboss.netty.handler.codec.embedder.AbstractCodecEmbedder$EmbeddedChannelSink:org.jboss.netty.channel.ChannelFuture execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable)",
            "org.jboss.netty.handler.execution.ChainedExecutor:void execute(java.lang.Runnable)",
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor$MemoryAwareRunnable:void run()",
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor:void doUnorderedExecute(java.lang.Runnable)",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor$ChildExecutor:void run()",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor:void doExecute(java.lang.Runnable)",
            "org.jboss.netty.handler.ssl.ImmediateExecutor:void execute(java.lang.Runnable)",
            "org.jboss.netty.handler.ssl.SslHandler$4:void run()",
            "org.jboss.netty.util.ThreadRenamingRunnable:void run()",
            "org.jboss.netty.util.VirtualExecutorService$ChildExecutorRunnable:void run()",
            "org.jboss.netty.util.internal.DeadLockProofWorker$1:void run()",
            "org.jboss.netty.util.internal.UnterminatableExecutor:void execute(java.lang.Runnable)"
        ]
    },
    "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler$1:void operationComplete(org.jboss.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.CompleteChannelFuture:void addListener(org.jboss.netty.channel.ChannelFutureListener)",
            "org.jboss.netty.channel.DefaultChannelFuture:void notifyListener(org.jboss.netty.channel.ChannelFutureListener)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.SpdyFrameDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.frame.FrameDecoder:java.lang.Object decodeLast(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.frame.FrameDecoder:void callDecode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,java.net.SocketAddress)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.SpdyFrameDecoder:void fireInvalidFrameException(org.jboss.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.spdy.SpdyFrameDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.SpdyFrameDecoder:void fireProtocolException(org.jboss.netty.channel.ChannelHandlerContext,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.spdy.SpdyFrameDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)"
        ]
    },
    "org.jboss.netty.handler.ssl.SslHandler$2:void operationComplete(org.jboss.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.CompleteChannelFuture:void addListener(org.jboss.netty.channel.ChannelFutureListener)",
            "org.jboss.netty.channel.DefaultChannelFuture:void notifyListener(org.jboss.netty.channel.ChannelFutureListener)"
        ]
    },
    "org.jboss.netty.handler.ssl.SslHandler$7:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.util.BoundedThreadPool$CallerFeedbackPolicy:void rejectedExecution(java.lang.Runnable,java.util.concurrent.ThreadPoolExecutor)",
            "org.onlab.util.BoundedThreadPool:void execute(java.lang.Runnable)",
            "org.onlab.util.SharedExecutorService:void execute(java.lang.Runnable)",
            "org.jboss.netty.channel.AbstractChannelSink:org.jboss.netty.channel.ChannelFuture execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable)",
            "org.jboss.netty.channel.socket.ChannelRunnableWrapper:void run()",
            "org.jboss.netty.channel.socket.nio.AbstractNioSelector:void processTaskQueue()",
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void executeInIoThread(java.lang.Runnable,boolean)",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void executeInIoThread(java.lang.Runnable)",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void processEventQueue()",
            "org.jboss.netty.handler.codec.embedder.AbstractCodecEmbedder$EmbeddedChannelSink:org.jboss.netty.channel.ChannelFuture execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable)",
            "org.jboss.netty.handler.execution.ChainedExecutor:void execute(java.lang.Runnable)",
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor$MemoryAwareRunnable:void run()",
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor:void doUnorderedExecute(java.lang.Runnable)",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor$ChildExecutor:void run()",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor:void doExecute(java.lang.Runnable)",
            "org.jboss.netty.handler.ssl.ImmediateExecutor:void execute(java.lang.Runnable)",
            "org.jboss.netty.handler.ssl.SslHandler$4:void run()",
            "org.jboss.netty.util.ThreadRenamingRunnable:void run()",
            "org.jboss.netty.util.VirtualExecutorService$ChildExecutorRunnable:void run()",
            "org.jboss.netty.util.internal.DeadLockProofWorker$1:void run()",
            "org.jboss.netty.util.internal.UnterminatableExecutor:void execute(java.lang.Runnable)"
        ]
    },
    "org.jboss.netty.handler.ssl.SslHandler:org.jboss.netty.channel.ChannelFuture handshake()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$2:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.handler.ssl.SslHandler:org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.handler.ssl.SslHandler:org.jboss.netty.buffer.ChannelBuffer unwrap(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,int,int)",
            "org.jboss.netty.handler.ssl.SslHandler:void handleRenegotiation(javax.net.ssl.SSLEngineResult$HandshakeStatus)",
            "org.jboss.netty.handler.ssl.SslHandler:void channelConnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)"
        ]
    },
    "org.jboss.netty.handler.ssl.SslHandler:org.jboss.netty.channel.ChannelFuture close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.ssl.SslHandler:org.jboss.netty.channel.ChannelFuture close(org.jboss.netty.channel.Channel)"
        ]
    },
    "org.jboss.netty.handler.ssl.SslHandler:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.frame.FrameDecoder:java.lang.Object decodeLast(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.frame.FrameDecoder:void callDecode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,java.net.SocketAddress)"
        ]
    },
    "org.jboss.netty.handler.ssl.SslHandler:void handleRenegotiation(javax.net.ssl.SSLEngineResult$HandshakeStatus)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.ssl.SslHandler:void wrap(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel)",
            "org.jboss.netty.handler.ssl.SslHandler:org.jboss.netty.channel.ChannelFuture wrapNonAppData(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel)",
            "org.jboss.netty.handler.ssl.SslHandler:org.jboss.netty.buffer.ChannelBuffer unwrap(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,int,int)"
        ]
    },
    "org.jboss.netty.handler.stream.ChunkedWriteHandler:void flush(org.jboss.netty.channel.ChannelHandlerContext,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.stream.ChunkedWriteHandler:void resumeTransfer()",
            "org.jboss.netty.handler.stream.ChunkedWriteHandler:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.stream.ChunkedWriteHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.stream.ChunkedWriteHandler:void flush(org.jboss.netty.channel.ChannelHandlerContext,boolean)",
            "org.jboss.netty.handler.stream.ChunkedWriteHandler:void beforeRemove(org.jboss.netty.channel.ChannelHandlerContext)"
        ]
    },
    "org.jboss.netty.handler.timeout.IdleStateHandler$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.util.BoundedThreadPool$CallerFeedbackPolicy:void rejectedExecution(java.lang.Runnable,java.util.concurrent.ThreadPoolExecutor)",
            "org.onlab.util.BoundedThreadPool:void execute(java.lang.Runnable)",
            "org.onlab.util.SharedExecutorService:void execute(java.lang.Runnable)",
            "org.jboss.netty.channel.AbstractChannelSink:org.jboss.netty.channel.ChannelFuture execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable)",
            "org.jboss.netty.channel.socket.ChannelRunnableWrapper:void run()",
            "org.jboss.netty.channel.socket.nio.AbstractNioSelector:void processTaskQueue()",
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void executeInIoThread(java.lang.Runnable,boolean)",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void executeInIoThread(java.lang.Runnable)",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void processEventQueue()",
            "org.jboss.netty.handler.codec.embedder.AbstractCodecEmbedder$EmbeddedChannelSink:org.jboss.netty.channel.ChannelFuture execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable)",
            "org.jboss.netty.handler.execution.ChainedExecutor:void execute(java.lang.Runnable)",
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor$MemoryAwareRunnable:void run()",
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor:void doUnorderedExecute(java.lang.Runnable)",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor$ChildExecutor:void run()",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor:void doExecute(java.lang.Runnable)",
            "org.jboss.netty.handler.ssl.ImmediateExecutor:void execute(java.lang.Runnable)",
            "org.jboss.netty.handler.ssl.SslHandler$4:void run()",
            "org.jboss.netty.util.ThreadRenamingRunnable:void run()",
            "org.jboss.netty.util.VirtualExecutorService$ChildExecutorRunnable:void run()",
            "org.jboss.netty.util.internal.DeadLockProofWorker$1:void run()",
            "org.jboss.netty.util.internal.UnterminatableExecutor:void execute(java.lang.Runnable)"
        ]
    },
    "org.jboss.netty.handler.timeout.ReadTimeoutHandler$ReadTimeoutTask$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.util.BoundedThreadPool$CallerFeedbackPolicy:void rejectedExecution(java.lang.Runnable,java.util.concurrent.ThreadPoolExecutor)",
            "org.onlab.util.BoundedThreadPool:void execute(java.lang.Runnable)",
            "org.onlab.util.SharedExecutorService:void execute(java.lang.Runnable)",
            "org.jboss.netty.channel.AbstractChannelSink:org.jboss.netty.channel.ChannelFuture execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable)",
            "org.jboss.netty.channel.socket.ChannelRunnableWrapper:void run()",
            "org.jboss.netty.channel.socket.nio.AbstractNioSelector:void processTaskQueue()",
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void executeInIoThread(java.lang.Runnable,boolean)",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void executeInIoThread(java.lang.Runnable)",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void processEventQueue()",
            "org.jboss.netty.handler.codec.embedder.AbstractCodecEmbedder$EmbeddedChannelSink:org.jboss.netty.channel.ChannelFuture execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable)",
            "org.jboss.netty.handler.execution.ChainedExecutor:void execute(java.lang.Runnable)",
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor$MemoryAwareRunnable:void run()",
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor:void doUnorderedExecute(java.lang.Runnable)",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor$ChildExecutor:void run()",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor:void doExecute(java.lang.Runnable)",
            "org.jboss.netty.handler.ssl.ImmediateExecutor:void execute(java.lang.Runnable)",
            "org.jboss.netty.handler.ssl.SslHandler$4:void run()",
            "org.jboss.netty.util.ThreadRenamingRunnable:void run()",
            "org.jboss.netty.util.VirtualExecutorService$ChildExecutorRunnable:void run()",
            "org.jboss.netty.util.internal.DeadLockProofWorker$1:void run()",
            "org.jboss.netty.util.internal.UnterminatableExecutor:void execute(java.lang.Runnable)"
        ]
    },
    "org.jboss.netty.handler.timeout.ReadTimeoutHandler:void readTimedOut(org.jboss.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.timeout.ReadTimeoutHandler$ReadTimeoutTask$1:void run()"
        ]
    },
    "org.jboss.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.util.BoundedThreadPool$CallerFeedbackPolicy:void rejectedExecution(java.lang.Runnable,java.util.concurrent.ThreadPoolExecutor)",
            "org.onlab.util.BoundedThreadPool:void execute(java.lang.Runnable)",
            "org.onlab.util.SharedExecutorService:void execute(java.lang.Runnable)",
            "org.jboss.netty.channel.AbstractChannelSink:org.jboss.netty.channel.ChannelFuture execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable)",
            "org.jboss.netty.channel.socket.ChannelRunnableWrapper:void run()",
            "org.jboss.netty.channel.socket.nio.AbstractNioSelector:void processTaskQueue()",
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void executeInIoThread(java.lang.Runnable,boolean)",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void executeInIoThread(java.lang.Runnable)",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void processEventQueue()",
            "org.jboss.netty.handler.codec.embedder.AbstractCodecEmbedder$EmbeddedChannelSink:org.jboss.netty.channel.ChannelFuture execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable)",
            "org.jboss.netty.handler.execution.ChainedExecutor:void execute(java.lang.Runnable)",
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor$MemoryAwareRunnable:void run()",
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor:void doUnorderedExecute(java.lang.Runnable)",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor$ChildExecutor:void run()",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor:void doExecute(java.lang.Runnable)",
            "org.jboss.netty.handler.ssl.ImmediateExecutor:void execute(java.lang.Runnable)",
            "org.jboss.netty.handler.ssl.SslHandler$4:void run()",
            "org.jboss.netty.util.ThreadRenamingRunnable:void run()",
            "org.jboss.netty.util.VirtualExecutorService$ChildExecutorRunnable:void run()",
            "org.jboss.netty.util.internal.DeadLockProofWorker$1:void run()",
            "org.jboss.netty.util.internal.UnterminatableExecutor:void execute(java.lang.Runnable)"
        ]
    },
    "org.jboss.netty.handler.timeout.WriteTimeoutHandler:void writeTimedOut(org.jboss.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask$1:void run()"
        ]
    },
    "org.jboss.netty.handler.timeout.IdleStateAwareChannelHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.DefaultChannelPipeline:void sendUpstream(org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.StaticChannelPipeline:void sendUpstream(org.jboss.netty.channel.StaticChannelPipeline$StaticChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.SpdyHttpResponseStreamIdHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.traffic.AbstractTrafficShapingHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.traffic.ChannelTrafficShapingHandler:void channelConnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.http.HttpContentEncoder:void channelClosed(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.queue.BufferedWriteHandler:void channelClosed(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.traffic.ChannelTrafficShapingHandler:void channelClosed(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:void exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ExceptionEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.ssl.SslHandler:void channelConnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.http.HttpContentDecoder:void channelClosed(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.marshalling.CompatibleMarshallingDecoder:void exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ExceptionEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.SpdyHttpCodec:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.DefaultChannelPipeline:void sendUpstream(org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.StaticChannelPipeline:void sendUpstream(org.jboss.netty.channel.StaticChannelPipeline$StaticChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.execution.ChannelEventRunnable:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.util.BoundedThreadPool$CallerFeedbackPolicy:void rejectedExecution(java.lang.Runnable,java.util.concurrent.ThreadPoolExecutor)",
            "org.onlab.util.BoundedThreadPool:void execute(java.lang.Runnable)",
            "org.onlab.util.SharedExecutorService:void execute(java.lang.Runnable)",
            "org.jboss.netty.channel.AbstractChannelSink:org.jboss.netty.channel.ChannelFuture execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable)",
            "org.jboss.netty.channel.socket.ChannelRunnableWrapper:void run()",
            "org.jboss.netty.channel.socket.nio.AbstractNioSelector:void processTaskQueue()",
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void executeInIoThread(java.lang.Runnable,boolean)",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void executeInIoThread(java.lang.Runnable)",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void processEventQueue()",
            "org.jboss.netty.handler.codec.embedder.AbstractCodecEmbedder$EmbeddedChannelSink:org.jboss.netty.channel.ChannelFuture execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable)",
            "org.jboss.netty.handler.execution.ChainedExecutor:void execute(java.lang.Runnable)",
            "org.jboss.netty.handler.execution.ExecutionHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.execution.ExecutionHandler:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor$MemoryAwareRunnable:void run()",
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor:void doUnorderedExecute(java.lang.Runnable)",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor$ChildExecutor:void run()",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor:void doExecute(java.lang.Runnable)",
            "org.jboss.netty.handler.ssl.ImmediateExecutor:void execute(java.lang.Runnable)",
            "org.jboss.netty.handler.ssl.SslHandler$4:void run()",
            "org.jboss.netty.util.ThreadRenamingRunnable:void run()",
            "org.jboss.netty.util.VirtualExecutorService$ChildExecutorRunnable:void run()",
            "org.jboss.netty.util.internal.DeadLockProofWorker$1:void run()",
            "org.jboss.netty.util.internal.UnterminatableExecutor:void execute(java.lang.Runnable)"
        ]
    },
    "org.jboss.netty.handler.ipfilter.OneIpFilterHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.DefaultChannelPipeline:void sendUpstream(org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.StaticChannelPipeline:void sendUpstream(org.jboss.netty.channel.StaticChannelPipeline$StaticChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.CompleteChannelFuture:void addListener(org.jboss.netty.channel.ChannelFutureListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.bootstrap.ServerBootstrap$Binder:void channelOpen(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.channel.ChannelLocal:java.lang.Object set(org.jboss.netty.channel.Channel,java.lang.Object)",
            "org.jboss.netty.channel.ChannelLocal:java.lang.Object setIfAbsent(org.jboss.netty.channel.Channel,java.lang.Object)",
            "org.jboss.netty.channel.group.DefaultChannelGroup:boolean add(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.channel.group.DefaultChannelGroupFuture:void <init>(org.jboss.netty.channel.group.ChannelGroup,java.util.Collection)",
            "org.jboss.netty.channel.group.DefaultChannelGroupFuture:void <init>(org.jboss.netty.channel.group.ChannelGroup,java.util.Map)",
            "org.jboss.netty.channel.local.DefaultLocalChannel:void <init>(org.jboss.netty.channel.local.LocalServerChannel,org.jboss.netty.channel.ChannelFactory,org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelSink,org.jboss.netty.channel.local.DefaultLocalChannel)",
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$2:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$5:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$6:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$7:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel:void bindReal(java.net.SocketAddress,org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel:void connectReal(java.net.SocketAddress,org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel:void writeReal(org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel:void setInterestOpsReal(int,org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel:void disconnectReal(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel:void unbindReal(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel:void closeReal(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.socket.http.HttpTunnelingServlet:void service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.jboss.netty.channel.socket.nio.NioClientSocketPipelineSink:void connect(org.jboss.netty.channel.socket.nio.NioClientSocketChannel,org.jboss.netty.channel.ChannelFuture,java.net.SocketAddress)",
            "org.jboss.netty.channel.socket.nio.NioDatagramPipelineSink:void connect(org.jboss.netty.channel.socket.nio.NioDatagramChannel,org.jboss.netty.channel.ChannelFuture,java.net.InetSocketAddress)",
            "org.jboss.netty.channel.socket.oio.OioClientSocketPipelineSink:void connect(org.jboss.netty.channel.socket.oio.OioClientSocketChannel,org.jboss.netty.channel.ChannelFuture,java.net.SocketAddress)",
            "org.jboss.netty.channel.socket.oio.OioDatagramPipelineSink:void connect(org.jboss.netty.channel.socket.oio.OioDatagramChannel,org.jboss.netty.channel.ChannelFuture,java.net.SocketAddress)",
            "org.jboss.netty.handler.codec.compression.JdkZlibEncoder:org.jboss.netty.channel.ChannelFuture finishEncode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.codec.compression.ZlibEncoder:org.jboss.netty.channel.ChannelFuture finishEncode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void protocolViolation(org.jboss.netty.channel.Channel,java.lang.String)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker00:org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker07:org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker08:org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker13:org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerHandshaker:org.jboss.netty.channel.ChannelFuture writeHandshakeResponse(org.jboss.netty.channel.Channel,org.jboss.netty.handler.codec.http.HttpResponse,org.jboss.netty.channel.ChannelHandler,org.jboss.netty.channel.ChannelHandler)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerHandshaker07:org.jboss.netty.channel.ChannelFuture close(org.jboss.netty.channel.Channel,org.jboss.netty.handler.codec.http.websocketx.CloseWebSocketFrame)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerHandshaker08:org.jboss.netty.channel.ChannelFuture close(org.jboss.netty.channel.Channel,org.jboss.netty.handler.codec.http.websocketx.CloseWebSocketFrame)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerHandshaker13:org.jboss.netty.channel.ChannelFuture close(org.jboss.netty.channel.Channel,org.jboss.netty.handler.codec.http.websocketx.CloseWebSocketFrame)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler:void exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ExceptionEvent)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler:void sendHttpResponse(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.handler.codec.http.HttpRequest,org.jboss.netty.handler.codec.http.HttpResponse)",
            "org.jboss.netty.handler.codec.spdy.SpdyHttpEncoder:org.jboss.netty.channel.ChannelFuture getDataFuture(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelFuture,org.jboss.netty.handler.codec.spdy.SpdyDataFrame[],java.net.SocketAddress)",
            "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:void issueSessionError(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.net.SocketAddress,org.jboss.netty.handler.codec.spdy.SpdySessionStatus)",
            "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:void halfCloseStream(int,boolean,org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:void removeStream(int,org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:void updateSendWindowSize(org.jboss.netty.channel.ChannelHandlerContext,int,int)",
            "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:void sendGoAwayFrame(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.handler.execution.OrderedDownstreamThreadPoolExecutor:java.util.concurrent.Executor getChildExecutor(org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.ipfilter.IpFilteringHandlerImpl:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.queue.BufferedWriteHandler:java.util.List consolidatedWrite(java.util.List)",
            "org.jboss.netty.handler.ssl.SslHandler:org.jboss.netty.channel.ChannelFuture handshake()",
            "org.jboss.netty.handler.ssl.SslHandler:org.jboss.netty.channel.ChannelFuture wrapNonAppData(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel)",
            "org.jboss.netty.handler.ssl.SslHandler:void closeOutboundAndChannel(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.handler.ssl.SslHandler:void channelConnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.handler.stream.ChunkedWriteHandler:void flush(org.jboss.netty.channel.ChannelHandlerContext,boolean)",
            "org.jboss.netty.handler.timeout.WriteTimeoutHandler:void writeRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)"
        ]
    },
    "org.jboss.netty.channel.DefaultChannelFuture:void notifyListener(org.jboss.netty.channel.ChannelFutureListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.DefaultChannelFuture:void addListener(org.jboss.netty.channel.ChannelFutureListener)",
            "org.jboss.netty.channel.DefaultChannelFuture:void notifyListeners()"
        ]
    },
    "org.jboss.netty.channel.local.DefaultLocalChannel:void <init>(org.jboss.netty.channel.local.LocalServerChannel,org.jboss.netty.channel.ChannelFactory,org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelSink,org.jboss.netty.channel.local.DefaultLocalChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.local.DefaultLocalClientChannelFactory:org.jboss.netty.channel.local.LocalChannel newChannel(org.jboss.netty.channel.ChannelPipeline)",
            "org.jboss.netty.channel.local.LocalClientChannelSink:void connect(org.jboss.netty.channel.local.DefaultLocalChannel,org.jboss.netty.channel.ChannelFuture,org.jboss.netty.channel.local.LocalAddress)"
        ]
    },
    "org.jboss.netty.channel.local.DefaultLocalServerChannel:void <init>(org.jboss.netty.channel.ChannelFactory,org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelSink)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.local.DefaultLocalServerChannelFactory:org.jboss.netty.channel.local.LocalServerChannel newChannel(org.jboss.netty.channel.ChannelPipeline)"
        ]
    },
    "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel:void <init>(org.jboss.netty.channel.ChannelFactory,org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelSink,org.jboss.netty.channel.socket.ClientSocketChannelFactory)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannelFactory:org.jboss.netty.channel.socket.SocketChannel newChannel(org.jboss.netty.channel.ChannelPipeline)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioAcceptedSocketChannel:void <init>(org.jboss.netty.channel.ChannelFactory,org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.Channel,org.jboss.netty.channel.ChannelSink,java.nio.channels.SocketChannel,org.jboss.netty.channel.socket.nio.NioWorker,java.lang.Thread)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.NioServerBoss:void registerAcceptedChannel(org.jboss.netty.channel.socket.nio.NioServerSocketChannel,java.nio.channels.SocketChannel,java.lang.Thread)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioClientSocketChannel:void <init>(org.jboss.netty.channel.ChannelFactory,org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelSink,org.jboss.netty.channel.socket.nio.NioWorker)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.NioClientSocketChannelFactory:org.jboss.netty.channel.socket.SocketChannel newChannel(org.jboss.netty.channel.ChannelPipeline)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioDatagramChannel:void <init>(org.jboss.netty.channel.ChannelFactory,org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelSink,org.jboss.netty.channel.socket.nio.NioDatagramWorker,org.jboss.netty.channel.socket.InternetProtocolFamily)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.NioDatagramChannelFactory:org.jboss.netty.channel.socket.DatagramChannel newChannel(org.jboss.netty.channel.ChannelPipeline)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioServerSocketChannel:void <init>(org.jboss.netty.channel.ChannelFactory,org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelSink,org.jboss.netty.channel.socket.nio.Boss,org.jboss.netty.channel.socket.nio.WorkerPool)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.NioServerSocketChannelFactory:org.jboss.netty.channel.socket.ServerSocketChannel newChannel(org.jboss.netty.channel.ChannelPipeline)"
        ]
    },
    "org.jboss.netty.channel.socket.oio.OioAcceptedSocketChannel:void <init>(org.jboss.netty.channel.Channel,org.jboss.netty.channel.ChannelFactory,org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelSink,java.net.Socket)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.oio.OioServerSocketPipelineSink$Boss:void run()"
        ]
    },
    "org.jboss.netty.channel.socket.oio.OioClientSocketChannel:void <init>(org.jboss.netty.channel.ChannelFactory,org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelSink)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.oio.OioClientSocketChannelFactory:org.jboss.netty.channel.socket.SocketChannel newChannel(org.jboss.netty.channel.ChannelPipeline)"
        ]
    },
    "org.jboss.netty.channel.socket.oio.OioDatagramChannel:void <init>(org.jboss.netty.channel.ChannelFactory,org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelSink)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.oio.OioDatagramChannelFactory:org.jboss.netty.channel.socket.DatagramChannel newChannel(org.jboss.netty.channel.ChannelPipeline)"
        ]
    },
    "org.jboss.netty.channel.socket.oio.OioServerSocketChannel:void <init>(org.jboss.netty.channel.ChannelFactory,org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelSink)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.oio.OioServerSocketChannelFactory:org.jboss.netty.channel.socket.ServerSocketChannel newChannel(org.jboss.netty.channel.ChannelPipeline)"
        ]
    },
    "org.jboss.netty.handler.codec.embedder.AbstractCodecEmbedder:void fireInitialEvents()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.embedder.AbstractCodecEmbedder:void <init>(org.jboss.netty.channel.ChannelHandler[])"
        ]
    },
    "org.jboss.netty.channel.local.LocalClientChannelSink:void bind(org.jboss.netty.channel.local.DefaultLocalChannel,org.jboss.netty.channel.ChannelFuture,org.jboss.netty.channel.local.LocalAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.local.LocalClientChannelSink:void eventSunk(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.local.LocalClientChannelSink:void connect(org.jboss.netty.channel.local.DefaultLocalChannel,org.jboss.netty.channel.ChannelFuture,org.jboss.netty.channel.local.LocalAddress)"
        ]
    },
    "org.jboss.netty.channel.local.LocalClientChannelSink:void connect(org.jboss.netty.channel.local.DefaultLocalChannel,org.jboss.netty.channel.ChannelFuture,org.jboss.netty.channel.local.LocalAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.local.LocalClientChannelSink:void eventSunk(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.local.LocalServerChannelSink:void bind(org.jboss.netty.channel.local.DefaultLocalServerChannel,org.jboss.netty.channel.ChannelFuture,org.jboss.netty.channel.local.LocalAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.local.LocalServerChannelSink:void handleServerChannel(org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$ServletChannelHandler:void channelBound(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioClientSocketPipelineSink:void bind(org.jboss.netty.channel.socket.nio.NioClientSocketChannel,org.jboss.netty.channel.ChannelFuture,java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.NioClientSocketPipelineSink:void eventSunk(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioDatagramPipelineSink:void bind(org.jboss.netty.channel.socket.nio.NioDatagramChannel,org.jboss.netty.channel.ChannelFuture,java.net.InetSocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.NioDatagramPipelineSink:void eventSunk(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioDatagramPipelineSink:void connect(org.jboss.netty.channel.socket.nio.NioDatagramChannel,org.jboss.netty.channel.ChannelFuture,java.net.InetSocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.NioDatagramPipelineSink:void eventSunk(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioServerBoss$RegisterTask:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.util.BoundedThreadPool$CallerFeedbackPolicy:void rejectedExecution(java.lang.Runnable,java.util.concurrent.ThreadPoolExecutor)",
            "org.onlab.util.BoundedThreadPool:void execute(java.lang.Runnable)",
            "org.onlab.util.SharedExecutorService:void execute(java.lang.Runnable)",
            "org.jboss.netty.channel.AbstractChannelSink:org.jboss.netty.channel.ChannelFuture execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable)",
            "org.jboss.netty.channel.socket.ChannelRunnableWrapper:void run()",
            "org.jboss.netty.channel.socket.nio.AbstractNioSelector:void processTaskQueue()",
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void executeInIoThread(java.lang.Runnable,boolean)",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void executeInIoThread(java.lang.Runnable)",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void processEventQueue()",
            "org.jboss.netty.handler.codec.embedder.AbstractCodecEmbedder$EmbeddedChannelSink:org.jboss.netty.channel.ChannelFuture execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable)",
            "org.jboss.netty.handler.execution.ChainedExecutor:void execute(java.lang.Runnable)",
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor$MemoryAwareRunnable:void run()",
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor:void doUnorderedExecute(java.lang.Runnable)",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor$ChildExecutor:void run()",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor:void doExecute(java.lang.Runnable)",
            "org.jboss.netty.handler.ssl.ImmediateExecutor:void execute(java.lang.Runnable)",
            "org.jboss.netty.handler.ssl.SslHandler$4:void run()",
            "org.jboss.netty.util.ThreadRenamingRunnable:void run()",
            "org.jboss.netty.util.VirtualExecutorService$ChildExecutorRunnable:void run()",
            "org.jboss.netty.util.internal.DeadLockProofWorker$1:void run()",
            "org.jboss.netty.util.internal.UnterminatableExecutor:void execute(java.lang.Runnable)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioWorker$RegisterTask:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.util.BoundedThreadPool$CallerFeedbackPolicy:void rejectedExecution(java.lang.Runnable,java.util.concurrent.ThreadPoolExecutor)",
            "org.onlab.util.BoundedThreadPool:void execute(java.lang.Runnable)",
            "org.onlab.util.SharedExecutorService:void execute(java.lang.Runnable)",
            "org.jboss.netty.channel.AbstractChannelSink:org.jboss.netty.channel.ChannelFuture execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable)",
            "org.jboss.netty.channel.socket.ChannelRunnableWrapper:void run()",
            "org.jboss.netty.channel.socket.nio.AbstractNioSelector:void processTaskQueue()",
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void executeInIoThread(java.lang.Runnable,boolean)",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void executeInIoThread(java.lang.Runnable)",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void processEventQueue()",
            "org.jboss.netty.handler.codec.embedder.AbstractCodecEmbedder$EmbeddedChannelSink:org.jboss.netty.channel.ChannelFuture execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable)",
            "org.jboss.netty.handler.execution.ChainedExecutor:void execute(java.lang.Runnable)",
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor$MemoryAwareRunnable:void run()",
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor:void doUnorderedExecute(java.lang.Runnable)",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor$ChildExecutor:void run()",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor:void doExecute(java.lang.Runnable)",
            "org.jboss.netty.handler.ssl.ImmediateExecutor:void execute(java.lang.Runnable)",
            "org.jboss.netty.handler.ssl.SslHandler$4:void run()",
            "org.jboss.netty.util.ThreadRenamingRunnable:void run()",
            "org.jboss.netty.util.VirtualExecutorService$ChildExecutorRunnable:void run()",
            "org.jboss.netty.util.internal.DeadLockProofWorker$1:void run()",
            "org.jboss.netty.util.internal.UnterminatableExecutor:void execute(java.lang.Runnable)"
        ]
    },
    "org.jboss.netty.channel.socket.oio.OioClientSocketPipelineSink:void bind(org.jboss.netty.channel.socket.oio.OioClientSocketChannel,org.jboss.netty.channel.ChannelFuture,java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.oio.OioClientSocketPipelineSink:void eventSunk(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.socket.oio.OioClientSocketPipelineSink:void connect(org.jboss.netty.channel.socket.oio.OioClientSocketChannel,org.jboss.netty.channel.ChannelFuture,java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.oio.OioClientSocketPipelineSink:void eventSunk(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.socket.oio.OioDatagramPipelineSink:void bind(org.jboss.netty.channel.socket.oio.OioDatagramChannel,org.jboss.netty.channel.ChannelFuture,java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.oio.OioDatagramPipelineSink:void eventSunk(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.socket.oio.OioDatagramPipelineSink:void connect(org.jboss.netty.channel.socket.oio.OioDatagramChannel,org.jboss.netty.channel.ChannelFuture,java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.oio.OioDatagramPipelineSink:void eventSunk(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.socket.oio.OioServerSocketPipelineSink:void bind(org.jboss.netty.channel.socket.oio.OioServerSocketChannel,org.jboss.netty.channel.ChannelFuture,java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.oio.OioServerSocketPipelineSink:void handleServerSocket(org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$2$1:void operationComplete(org.jboss.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.CompleteChannelFuture:void addListener(org.jboss.netty.channel.ChannelFutureListener)",
            "org.jboss.netty.channel.DefaultChannelFuture:void notifyListener(org.jboss.netty.channel.ChannelFutureListener)"
        ]
    },
    "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$2:void operationComplete(org.jboss.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.CompleteChannelFuture:void addListener(org.jboss.netty.channel.ChannelFutureListener)",
            "org.jboss.netty.channel.DefaultChannelFuture:void notifyListener(org.jboss.netty.channel.ChannelFutureListener)"
        ]
    },
    "org.jboss.netty.channel.socket.oio.OioWorker:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.util.BoundedThreadPool$CallerFeedbackPolicy:void rejectedExecution(java.lang.Runnable,java.util.concurrent.ThreadPoolExecutor)",
            "org.onlab.util.BoundedThreadPool:void execute(java.lang.Runnable)",
            "org.onlab.util.SharedExecutorService:void execute(java.lang.Runnable)",
            "org.jboss.netty.channel.AbstractChannelSink:org.jboss.netty.channel.ChannelFuture execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable)",
            "org.jboss.netty.channel.socket.ChannelRunnableWrapper:void run()",
            "org.jboss.netty.channel.socket.nio.AbstractNioSelector:void processTaskQueue()",
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void executeInIoThread(java.lang.Runnable,boolean)",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void executeInIoThread(java.lang.Runnable)",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void processEventQueue()",
            "org.jboss.netty.handler.codec.embedder.AbstractCodecEmbedder$EmbeddedChannelSink:org.jboss.netty.channel.ChannelFuture execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable)",
            "org.jboss.netty.handler.execution.ChainedExecutor:void execute(java.lang.Runnable)",
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor$MemoryAwareRunnable:void run()",
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor:void doUnorderedExecute(java.lang.Runnable)",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor$ChildExecutor:void run()",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor:void doExecute(java.lang.Runnable)",
            "org.jboss.netty.handler.ssl.ImmediateExecutor:void execute(java.lang.Runnable)",
            "org.jboss.netty.handler.ssl.SslHandler$4:void run()",
            "org.jboss.netty.util.ThreadRenamingRunnable:void run()",
            "org.jboss.netty.util.VirtualExecutorService$ChildExecutorRunnable:void run()",
            "org.jboss.netty.util.internal.DeadLockProofWorker$1:void run()",
            "org.jboss.netty.util.internal.UnterminatableExecutor:void execute(java.lang.Runnable)"
        ]
    },
    "org.jboss.netty.channel.Channels:void fireMessageReceived(org.jboss.netty.channel.Channel,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.local.DefaultLocalChannel:void flushWriteBuffer()",
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$ServletChannelHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.channel.socket.nio.NioWorker:boolean read(java.nio.channels.SelectionKey)",
            "org.jboss.netty.channel.socket.oio.OioWorker:boolean process()",
            "org.jboss.netty.handler.codec.embedder.DecoderEmbedder:boolean offer(java.lang.Object)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioDatagramWorker:boolean read(java.nio.channels.SelectionKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void process(java.nio.channels.Selector)"
        ]
    },
    "org.jboss.netty.channel.socket.oio.OioDatagramWorker:boolean process()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void run()"
        ]
    },
    "org.jboss.netty.channel.Channels$2:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.util.BoundedThreadPool$CallerFeedbackPolicy:void rejectedExecution(java.lang.Runnable,java.util.concurrent.ThreadPoolExecutor)",
            "org.onlab.util.BoundedThreadPool:void execute(java.lang.Runnable)",
            "org.onlab.util.SharedExecutorService:void execute(java.lang.Runnable)",
            "org.jboss.netty.channel.AbstractChannelSink:org.jboss.netty.channel.ChannelFuture execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable)",
            "org.jboss.netty.channel.socket.ChannelRunnableWrapper:void run()",
            "org.jboss.netty.channel.socket.nio.AbstractNioSelector:void processTaskQueue()",
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void executeInIoThread(java.lang.Runnable,boolean)",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void executeInIoThread(java.lang.Runnable)",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void processEventQueue()",
            "org.jboss.netty.handler.codec.embedder.AbstractCodecEmbedder$EmbeddedChannelSink:org.jboss.netty.channel.ChannelFuture execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable)",
            "org.jboss.netty.handler.execution.ChainedExecutor:void execute(java.lang.Runnable)",
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor$MemoryAwareRunnable:void run()",
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor:void doUnorderedExecute(java.lang.Runnable)",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor$ChildExecutor:void run()",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor:void doExecute(java.lang.Runnable)",
            "org.jboss.netty.handler.ssl.ImmediateExecutor:void execute(java.lang.Runnable)",
            "org.jboss.netty.handler.ssl.SslHandler$4:void run()",
            "org.jboss.netty.util.ThreadRenamingRunnable:void run()",
            "org.jboss.netty.util.VirtualExecutorService$ChildExecutorRunnable:void run()",
            "org.jboss.netty.util.internal.DeadLockProofWorker$1:void run()",
            "org.jboss.netty.util.internal.UnterminatableExecutor:void execute(java.lang.Runnable)"
        ]
    },
    "org.jboss.netty.channel.local.DefaultLocalChannel:void flushWriteBuffer()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.local.LocalClientChannelSink:void eventSunk(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.local.LocalClientChannelSink:void connect(org.jboss.netty.channel.local.DefaultLocalChannel,org.jboss.netty.channel.ChannelFuture,org.jboss.netty.channel.local.LocalAddress)",
            "org.jboss.netty.channel.local.LocalServerChannelSink:void handleAcceptedChannel(org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$3:void operationComplete(org.jboss.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.CompleteChannelFuture:void addListener(org.jboss.netty.channel.ChannelFutureListener)",
            "org.jboss.netty.channel.DefaultChannelFuture:void notifyListener(org.jboss.netty.channel.ChannelFutureListener)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void write0(org.jboss.netty.channel.socket.nio.AbstractNioChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void writeFromUserCode(org.jboss.netty.channel.socket.nio.AbstractNioChannel)",
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void writeFromTaskLoop(org.jboss.netty.channel.socket.nio.AbstractNioChannel)",
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void writeFromSelectorLoop(java.nio.channels.SelectionKey)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioDatagramWorker:void write0(org.jboss.netty.channel.socket.nio.AbstractNioChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void writeFromUserCode(org.jboss.netty.channel.socket.nio.AbstractNioChannel)",
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void writeFromTaskLoop(org.jboss.netty.channel.socket.nio.AbstractNioChannel)",
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void writeFromSelectorLoop(java.nio.channels.SelectionKey)",
            "org.jboss.netty.channel.socket.nio.NioDatagramWorker:void writeFromUserCode(org.jboss.netty.channel.socket.nio.AbstractNioChannel)"
        ]
    },
    "org.jboss.netty.channel.socket.oio.OioDatagramWorker:void write(org.jboss.netty.channel.socket.oio.OioDatagramChannel,org.jboss.netty.channel.ChannelFuture,java.lang.Object,java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.oio.OioDatagramPipelineSink:void eventSunk(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.socket.oio.OioWorker:void write(org.jboss.netty.channel.socket.oio.OioSocketChannel,org.jboss.netty.channel.ChannelFuture,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.oio.OioClientSocketPipelineSink:void eventSunk(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.socket.oio.OioServerSocketPipelineSink:void handleAcceptedSocket(org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.Channels$3:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.util.BoundedThreadPool$CallerFeedbackPolicy:void rejectedExecution(java.lang.Runnable,java.util.concurrent.ThreadPoolExecutor)",
            "org.onlab.util.BoundedThreadPool:void execute(java.lang.Runnable)",
            "org.onlab.util.SharedExecutorService:void execute(java.lang.Runnable)",
            "org.jboss.netty.channel.AbstractChannelSink:org.jboss.netty.channel.ChannelFuture execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable)",
            "org.jboss.netty.channel.socket.ChannelRunnableWrapper:void run()",
            "org.jboss.netty.channel.socket.nio.AbstractNioSelector:void processTaskQueue()",
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void executeInIoThread(java.lang.Runnable,boolean)",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void executeInIoThread(java.lang.Runnable)",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void processEventQueue()",
            "org.jboss.netty.handler.codec.embedder.AbstractCodecEmbedder$EmbeddedChannelSink:org.jboss.netty.channel.ChannelFuture execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable)",
            "org.jboss.netty.handler.execution.ChainedExecutor:void execute(java.lang.Runnable)",
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor$MemoryAwareRunnable:void run()",
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor:void doUnorderedExecute(java.lang.Runnable)",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor$ChildExecutor:void run()",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor:void doExecute(java.lang.Runnable)",
            "org.jboss.netty.handler.ssl.ImmediateExecutor:void execute(java.lang.Runnable)",
            "org.jboss.netty.handler.ssl.SslHandler$4:void run()",
            "org.jboss.netty.util.ThreadRenamingRunnable:void run()",
            "org.jboss.netty.util.VirtualExecutorService$ChildExecutorRunnable:void run()",
            "org.jboss.netty.util.internal.DeadLockProofWorker$1:void run()",
            "org.jboss.netty.util.internal.UnterminatableExecutor:void execute(java.lang.Runnable)"
        ]
    },
    "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$ServletChannelHandler:void channelInterestChanged(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.AbstractNioChannel$WriteRequestQueue:boolean offer(org.jboss.netty.channel.MessageEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.AbstractNioChannel$WriteRequestQueue:boolean offer(java.lang.Object)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.AbstractNioChannel$WriteRequestQueue:org.jboss.netty.channel.MessageEvent poll()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.AbstractNioChannel$WriteRequestQueue:java.lang.Object poll()"
        ]
    },
    "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void setInterestOps(org.jboss.netty.channel.socket.nio.AbstractNioChannel,org.jboss.netty.channel.ChannelFuture,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker$1:void run()",
            "org.jboss.netty.channel.socket.nio.NioClientSocketPipelineSink:void eventSunk(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.socket.nio.NioDatagramPipelineSink:void eventSunk(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.socket.nio.NioServerSocketPipelineSink:void handleAcceptedSocket(org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void setInterestOps(org.jboss.netty.channel.socket.oio.AbstractOioChannel,org.jboss.netty.channel.ChannelFuture,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.oio.OioClientSocketPipelineSink:void eventSunk(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.socket.oio.OioDatagramPipelineSink:void eventSunk(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.socket.oio.OioServerSocketPipelineSink:void handleAcceptedSocket(org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.Channels$4:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.util.BoundedThreadPool$CallerFeedbackPolicy:void rejectedExecution(java.lang.Runnable,java.util.concurrent.ThreadPoolExecutor)",
            "org.onlab.util.BoundedThreadPool:void execute(java.lang.Runnable)",
            "org.onlab.util.SharedExecutorService:void execute(java.lang.Runnable)",
            "org.jboss.netty.channel.AbstractChannelSink:org.jboss.netty.channel.ChannelFuture execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable)",
            "org.jboss.netty.channel.socket.ChannelRunnableWrapper:void run()",
            "org.jboss.netty.channel.socket.nio.AbstractNioSelector:void processTaskQueue()",
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void executeInIoThread(java.lang.Runnable,boolean)",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void executeInIoThread(java.lang.Runnable)",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void processEventQueue()",
            "org.jboss.netty.handler.codec.embedder.AbstractCodecEmbedder$EmbeddedChannelSink:org.jboss.netty.channel.ChannelFuture execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable)",
            "org.jboss.netty.handler.execution.ChainedExecutor:void execute(java.lang.Runnable)",
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor$MemoryAwareRunnable:void run()",
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor:void doUnorderedExecute(java.lang.Runnable)",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor$ChildExecutor:void run()",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor:void doExecute(java.lang.Runnable)",
            "org.jboss.netty.handler.ssl.ImmediateExecutor:void execute(java.lang.Runnable)",
            "org.jboss.netty.handler.ssl.SslHandler$4:void run()",
            "org.jboss.netty.util.ThreadRenamingRunnable:void run()",
            "org.jboss.netty.util.VirtualExecutorService$ChildExecutorRunnable:void run()",
            "org.jboss.netty.util.internal.DeadLockProofWorker$1:void run()",
            "org.jboss.netty.util.internal.UnterminatableExecutor:void execute(java.lang.Runnable)"
        ]
    },
    "org.jboss.netty.channel.local.DefaultLocalChannel:void closeNow(org.jboss.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.local.LocalClientChannelSink:void eventSunk(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.local.LocalServerChannelSink:void handleAcceptedChannel(org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$ServletChannelHandler:void channelDisconnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void close(org.jboss.netty.channel.socket.nio.AbstractNioChannel,org.jboss.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void close(java.nio.channels.SelectionKey)",
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void write0(org.jboss.netty.channel.socket.nio.AbstractNioChannel)",
            "org.jboss.netty.channel.socket.nio.NioClientBoss$RegisterTask:void run()",
            "org.jboss.netty.channel.socket.nio.NioClientBoss:void processSelectedKeys(java.util.Set)",
            "org.jboss.netty.channel.socket.nio.NioClientBoss:void processConnectTimeout(java.util.Set,long)",
            "org.jboss.netty.channel.socket.nio.NioClientBoss:void close(java.nio.channels.SelectionKey)",
            "org.jboss.netty.channel.socket.nio.NioClientSocketPipelineSink:void eventSunk(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.socket.nio.NioClientSocketPipelineSink:void connect(org.jboss.netty.channel.socket.nio.NioClientSocketChannel,org.jboss.netty.channel.ChannelFuture,java.net.SocketAddress)",
            "org.jboss.netty.channel.socket.nio.NioDatagramPipelineSink:void eventSunk(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.socket.nio.NioDatagramPipelineSink:void connect(org.jboss.netty.channel.socket.nio.NioDatagramChannel,org.jboss.netty.channel.ChannelFuture,java.net.InetSocketAddress)",
            "org.jboss.netty.channel.socket.nio.NioDatagramWorker$ChannelRegistionTask:void run()",
            "org.jboss.netty.channel.socket.nio.NioDatagramWorker:boolean read(java.nio.channels.SelectionKey)",
            "org.jboss.netty.channel.socket.nio.NioServerSocketPipelineSink:void handleAcceptedSocket(org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.socket.nio.NioWorker$RegisterTask:void run()",
            "org.jboss.netty.channel.socket.nio.NioWorker:boolean read(java.nio.channels.SelectionKey)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioDatagramWorker:void disconnect(org.jboss.netty.channel.socket.nio.NioDatagramChannel,org.jboss.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.NioDatagramPipelineSink:void eventSunk(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void close(org.jboss.netty.channel.socket.oio.AbstractOioChannel,org.jboss.netty.channel.ChannelFuture,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void run()",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void close(org.jboss.netty.channel.socket.oio.AbstractOioChannel,org.jboss.netty.channel.ChannelFuture)"
        ]
    },
    "org.jboss.netty.channel.socket.oio.OioDatagramWorker:void disconnect(org.jboss.netty.channel.socket.oio.OioDatagramChannel,org.jboss.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.oio.OioDatagramPipelineSink:void eventSunk(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.embedder.AbstractCodecEmbedder:boolean finish()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.embedder.DecoderEmbedder:boolean finish()",
            "org.jboss.netty.handler.codec.embedder.EncoderEmbedder:boolean finish()"
        ]
    },
    "org.jboss.netty.channel.Channels$5:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.util.BoundedThreadPool$CallerFeedbackPolicy:void rejectedExecution(java.lang.Runnable,java.util.concurrent.ThreadPoolExecutor)",
            "org.onlab.util.BoundedThreadPool:void execute(java.lang.Runnable)",
            "org.onlab.util.SharedExecutorService:void execute(java.lang.Runnable)",
            "org.jboss.netty.channel.AbstractChannelSink:org.jboss.netty.channel.ChannelFuture execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable)",
            "org.jboss.netty.channel.socket.ChannelRunnableWrapper:void run()",
            "org.jboss.netty.channel.socket.nio.AbstractNioSelector:void processTaskQueue()",
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void executeInIoThread(java.lang.Runnable,boolean)",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void executeInIoThread(java.lang.Runnable)",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void processEventQueue()",
            "org.jboss.netty.handler.codec.embedder.AbstractCodecEmbedder$EmbeddedChannelSink:org.jboss.netty.channel.ChannelFuture execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable)",
            "org.jboss.netty.handler.execution.ChainedExecutor:void execute(java.lang.Runnable)",
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor$MemoryAwareRunnable:void run()",
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor:void doUnorderedExecute(java.lang.Runnable)",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor$ChildExecutor:void run()",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor:void doExecute(java.lang.Runnable)",
            "org.jboss.netty.handler.ssl.ImmediateExecutor:void execute(java.lang.Runnable)",
            "org.jboss.netty.handler.ssl.SslHandler$4:void run()",
            "org.jboss.netty.util.ThreadRenamingRunnable:void run()",
            "org.jboss.netty.util.VirtualExecutorService$ChildExecutorRunnable:void run()",
            "org.jboss.netty.util.internal.DeadLockProofWorker$1:void run()",
            "org.jboss.netty.util.internal.UnterminatableExecutor:void execute(java.lang.Runnable)"
        ]
    },
    "org.jboss.netty.channel.local.LocalServerChannelSink:void close(org.jboss.netty.channel.local.DefaultLocalServerChannel,org.jboss.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.local.LocalServerChannelSink:void handleServerChannel(org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$ServletChannelHandler:void channelUnbound(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioDatagramPipelineSink:void close(org.jboss.netty.channel.socket.nio.NioDatagramChannel,org.jboss.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.NioDatagramPipelineSink:void bind(org.jboss.netty.channel.socket.nio.NioDatagramChannel,org.jboss.netty.channel.ChannelFuture,java.net.InetSocketAddress)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioServerBoss:void close(org.jboss.netty.channel.socket.nio.NioServerSocketChannel,org.jboss.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.NioServerBoss$RegisterTask:void run()",
            "org.jboss.netty.channel.socket.nio.NioServerBoss:void close(java.nio.channels.SelectionKey)",
            "org.jboss.netty.channel.socket.nio.NioServerSocketPipelineSink:void handleServerSocket(org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.socket.oio.OioServerSocketPipelineSink:void close(org.jboss.netty.channel.socket.oio.OioServerSocketChannel,org.jboss.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.oio.OioServerSocketPipelineSink:void handleServerSocket(org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.socket.oio.OioServerSocketPipelineSink:void bind(org.jboss.netty.channel.socket.oio.OioServerSocketChannel,org.jboss.netty.channel.ChannelFuture,java.net.SocketAddress)"
        ]
    },
    "org.jboss.netty.channel.Channels$6:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.util.BoundedThreadPool$CallerFeedbackPolicy:void rejectedExecution(java.lang.Runnable,java.util.concurrent.ThreadPoolExecutor)",
            "org.onlab.util.BoundedThreadPool:void execute(java.lang.Runnable)",
            "org.onlab.util.SharedExecutorService:void execute(java.lang.Runnable)",
            "org.jboss.netty.channel.AbstractChannelSink:org.jboss.netty.channel.ChannelFuture execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable)",
            "org.jboss.netty.channel.socket.ChannelRunnableWrapper:void run()",
            "org.jboss.netty.channel.socket.nio.AbstractNioSelector:void processTaskQueue()",
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void executeInIoThread(java.lang.Runnable,boolean)",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void executeInIoThread(java.lang.Runnable)",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void processEventQueue()",
            "org.jboss.netty.handler.codec.embedder.AbstractCodecEmbedder$EmbeddedChannelSink:org.jboss.netty.channel.ChannelFuture execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable)",
            "org.jboss.netty.handler.execution.ChainedExecutor:void execute(java.lang.Runnable)",
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor$MemoryAwareRunnable:void run()",
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor:void doUnorderedExecute(java.lang.Runnable)",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor$ChildExecutor:void run()",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor:void doExecute(java.lang.Runnable)",
            "org.jboss.netty.handler.ssl.ImmediateExecutor:void execute(java.lang.Runnable)",
            "org.jboss.netty.handler.ssl.SslHandler$4:void run()",
            "org.jboss.netty.util.ThreadRenamingRunnable:void run()",
            "org.jboss.netty.util.VirtualExecutorService$ChildExecutorRunnable:void run()",
            "org.jboss.netty.util.internal.DeadLockProofWorker$1:void run()",
            "org.jboss.netty.util.internal.UnterminatableExecutor:void execute(java.lang.Runnable)"
        ]
    },
    "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$ServletChannelHandler:void channelClosed(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.AbstractChannelSink:void exceptionCaught(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent,org.jboss.netty.channel.ChannelPipelineException)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.DefaultChannelPipeline:void notifyHandlerException(org.jboss.netty.channel.ChannelEvent,java.lang.Throwable)",
            "org.jboss.netty.channel.StaticChannelPipeline:void notifyHandlerException(org.jboss.netty.channel.ChannelEvent,java.lang.Throwable)"
        ]
    },
    "org.jboss.netty.channel.Channels$7:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.util.BoundedThreadPool$CallerFeedbackPolicy:void rejectedExecution(java.lang.Runnable,java.util.concurrent.ThreadPoolExecutor)",
            "org.onlab.util.BoundedThreadPool:void execute(java.lang.Runnable)",
            "org.onlab.util.SharedExecutorService:void execute(java.lang.Runnable)",
            "org.jboss.netty.channel.AbstractChannelSink:org.jboss.netty.channel.ChannelFuture execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable)",
            "org.jboss.netty.channel.socket.ChannelRunnableWrapper:void run()",
            "org.jboss.netty.channel.socket.nio.AbstractNioSelector:void processTaskQueue()",
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void executeInIoThread(java.lang.Runnable,boolean)",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void executeInIoThread(java.lang.Runnable)",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void processEventQueue()",
            "org.jboss.netty.handler.codec.embedder.AbstractCodecEmbedder$EmbeddedChannelSink:org.jboss.netty.channel.ChannelFuture execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable)",
            "org.jboss.netty.handler.execution.ChainedExecutor:void execute(java.lang.Runnable)",
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor$MemoryAwareRunnable:void run()",
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor:void doUnorderedExecute(java.lang.Runnable)",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor$ChildExecutor:void run()",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor:void doExecute(java.lang.Runnable)",
            "org.jboss.netty.handler.ssl.ImmediateExecutor:void execute(java.lang.Runnable)",
            "org.jboss.netty.handler.ssl.SslHandler$4:void run()",
            "org.jboss.netty.util.ThreadRenamingRunnable:void run()",
            "org.jboss.netty.util.VirtualExecutorService$ChildExecutorRunnable:void run()",
            "org.jboss.netty.util.internal.DeadLockProofWorker$1:void run()",
            "org.jboss.netty.util.internal.UnterminatableExecutor:void execute(java.lang.Runnable)"
        ]
    },
    "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$ServletChannelHandler:void exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ExceptionEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void cleanUpWriteBuffer(org.jboss.netty.channel.socket.nio.AbstractNioChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void writeFromUserCode(org.jboss.netty.channel.socket.nio.AbstractNioChannel)",
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void close(org.jboss.netty.channel.socket.nio.AbstractNioChannel,org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.socket.nio.NioDatagramWorker:void writeFromUserCode(org.jboss.netty.channel.socket.nio.AbstractNioChannel)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioClientBoss:void processSelectedKeys(java.util.Set)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.NioClientBoss:void process(java.nio.channels.Selector)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioClientBoss:void processConnectTimeout(java.util.Set,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.NioClientBoss:void process(java.nio.channels.Selector)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioClientSocketPipelineSink:void connect(org.jboss.netty.channel.socket.nio.NioClientSocketChannel,org.jboss.netty.channel.ChannelFuture,java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.NioClientSocketPipelineSink:void eventSunk(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioWorker:boolean read(java.nio.channels.SelectionKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void process(java.nio.channels.Selector)"
        ]
    },
    "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.util.BoundedThreadPool$CallerFeedbackPolicy:void rejectedExecution(java.lang.Runnable,java.util.concurrent.ThreadPoolExecutor)",
            "org.onlab.util.BoundedThreadPool:void execute(java.lang.Runnable)",
            "org.onlab.util.SharedExecutorService:void execute(java.lang.Runnable)",
            "org.jboss.netty.channel.AbstractChannelSink:org.jboss.netty.channel.ChannelFuture execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable)",
            "org.jboss.netty.channel.socket.ChannelRunnableWrapper:void run()",
            "org.jboss.netty.channel.socket.nio.AbstractNioSelector:void processTaskQueue()",
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void executeInIoThread(java.lang.Runnable,boolean)",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void executeInIoThread(java.lang.Runnable)",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void processEventQueue()",
            "org.jboss.netty.channel.socket.oio.OioWorker:void run()",
            "org.jboss.netty.handler.codec.embedder.AbstractCodecEmbedder$EmbeddedChannelSink:org.jboss.netty.channel.ChannelFuture execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable)",
            "org.jboss.netty.handler.execution.ChainedExecutor:void execute(java.lang.Runnable)",
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor$MemoryAwareRunnable:void run()",
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor:void doUnorderedExecute(java.lang.Runnable)",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor$ChildExecutor:void run()",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor:void doExecute(java.lang.Runnable)",
            "org.jboss.netty.handler.ssl.ImmediateExecutor:void execute(java.lang.Runnable)",
            "org.jboss.netty.handler.ssl.SslHandler$4:void run()",
            "org.jboss.netty.util.ThreadRenamingRunnable:void run()",
            "org.jboss.netty.util.VirtualExecutorService$ChildExecutorRunnable:void run()",
            "org.jboss.netty.util.internal.DeadLockProofWorker$1:void run()",
            "org.jboss.netty.util.internal.UnterminatableExecutor:void execute(java.lang.Runnable)"
        ]
    },
    "org.jboss.netty.handler.codec.frame.DelimiterBasedFrameDecoder:void fail(org.jboss.netty.channel.ChannelHandlerContext,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.frame.DelimiterBasedFrameDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)"
        ]
    },
    "org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder:void fail(org.jboss.netty.channel.ChannelHandlerContext,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder:void failIfNecessary(org.jboss.netty.channel.ChannelHandlerContext,boolean)"
        ]
    },
    "org.jboss.netty.handler.codec.frame.LineBasedFrameDecoder:void fail(org.jboss.netty.channel.ChannelHandlerContext,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.frame.LineBasedFrameDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.frame.LineBasedFrameDecoder:void fail(org.jboss.netty.channel.ChannelHandlerContext,int)"
        ]
    },
    "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerHandshaker$1:void operationComplete(org.jboss.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.CompleteChannelFuture:void addListener(org.jboss.netty.channel.ChannelFutureListener)",
            "org.jboss.netty.channel.DefaultChannelFuture:void notifyListener(org.jboss.netty.channel.ChannelFutureListener)"
        ]
    },
    "org.jboss.netty.handler.stream.ChunkedWriteHandler:void discard(org.jboss.netty.channel.ChannelHandlerContext,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.stream.ChunkedWriteHandler:void flush(org.jboss.netty.channel.ChannelHandlerContext,boolean)"
        ]
    },
    "org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker00:void finishHandshake(org.jboss.netty.channel.Channel,org.jboss.netty.handler.codec.http.HttpResponse)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker07:void finishHandshake(org.jboss.netty.channel.Channel,org.jboss.netty.handler.codec.http.HttpResponse)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker08:void finishHandshake(org.jboss.netty.channel.Channel,org.jboss.netty.handler.codec.http.HttpResponse)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker13:void finishHandshake(org.jboss.netty.channel.Channel,org.jboss.netty.handler.codec.http.HttpResponse)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerHandshaker:org.jboss.netty.channel.ChannelFuture writeHandshakeResponse(org.jboss.netty.channel.Channel,org.jboss.netty.handler.codec.http.HttpResponse,org.jboss.netty.channel.ChannelHandler,org.jboss.netty.channel.ChannelHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerHandshaker00:org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel,org.jboss.netty.handler.codec.http.HttpRequest)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerHandshaker07:org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel,org.jboss.netty.handler.codec.http.HttpRequest)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerHandshaker08:org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel,org.jboss.netty.handler.codec.http.HttpRequest)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerHandshaker13:org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel,org.jboss.netty.handler.codec.http.HttpRequest)"
        ]
    },
    "org.onlab.util.BoundedThreadPool$CallerFeedbackPolicy:void rejectedExecution(java.lang.Runnable,java.util.concurrent.ThreadPoolExecutor)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.util.BoundedThreadPool:void execute(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Coordinator:void execute(org.onlab.stc.Step)",
            "org.onlab.util.SharedExecutorService:void execute(java.lang.Runnable)",
            "org.jboss.netty.handler.execution.ChainedExecutor:void execute(java.lang.Runnable)",
            "org.jboss.netty.handler.execution.ExecutionHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.execution.ExecutionHandler:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor:void doExecute(java.lang.Runnable)",
            "org.jboss.netty.handler.ssl.SslHandler:void runDelegatedTasks()",
            "org.jboss.netty.util.VirtualExecutorService:void execute(java.lang.Runnable)",
            "org.jboss.netty.util.internal.DeadLockProofWorker:void start(java.util.concurrent.Executor,java.lang.Runnable)",
            "org.jboss.netty.util.internal.UnterminatableExecutor:void execute(java.lang.Runnable)"
        ]
    },
    "org.onlab.util.SharedExecutorService:void execute(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Coordinator:void execute(org.onlab.stc.Step)",
            "org.onlab.util.SharedExecutorService:void execute(java.lang.Runnable)",
            "org.jboss.netty.handler.execution.ChainedExecutor:void execute(java.lang.Runnable)",
            "org.jboss.netty.handler.execution.ExecutionHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.execution.ExecutionHandler:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor:void doExecute(java.lang.Runnable)",
            "org.jboss.netty.handler.ssl.SslHandler:void runDelegatedTasks()",
            "org.jboss.netty.util.VirtualExecutorService:void execute(java.lang.Runnable)",
            "org.jboss.netty.util.internal.DeadLockProofWorker:void start(java.util.concurrent.Executor,java.lang.Runnable)",
            "org.jboss.netty.util.internal.UnterminatableExecutor:void execute(java.lang.Runnable)"
        ]
    },
    "org.jboss.netty.channel.AbstractChannelSink:org.jboss.netty.channel.ChannelFuture execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.DefaultChannelPipeline:org.jboss.netty.channel.ChannelFuture execute(java.lang.Runnable)",
            "org.jboss.netty.channel.StaticChannelPipeline:org.jboss.netty.channel.ChannelFuture execute(java.lang.Runnable)",
            "org.jboss.netty.channel.socket.nio.AbstractNioChannelSink:org.jboss.netty.channel.ChannelFuture execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable)",
            "org.jboss.netty.channel.socket.oio.AbstractOioChannelSink:org.jboss.netty.channel.ChannelFuture execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable)"
        ]
    },
    "org.jboss.netty.channel.socket.ChannelRunnableWrapper:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.util.BoundedThreadPool$CallerFeedbackPolicy:void rejectedExecution(java.lang.Runnable,java.util.concurrent.ThreadPoolExecutor)",
            "org.onlab.util.BoundedThreadPool:void execute(java.lang.Runnable)",
            "org.onlab.util.SharedExecutorService:void execute(java.lang.Runnable)",
            "org.jboss.netty.channel.AbstractChannelSink:org.jboss.netty.channel.ChannelFuture execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable)",
            "org.jboss.netty.channel.socket.ChannelRunnableWrapper:void run()",
            "org.jboss.netty.channel.socket.nio.AbstractNioSelector:void processTaskQueue()",
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void executeInIoThread(java.lang.Runnable,boolean)",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void executeInIoThread(java.lang.Runnable)",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void processEventQueue()",
            "org.jboss.netty.handler.codec.embedder.AbstractCodecEmbedder$EmbeddedChannelSink:org.jboss.netty.channel.ChannelFuture execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable)",
            "org.jboss.netty.handler.execution.ChainedExecutor:void execute(java.lang.Runnable)",
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor$MemoryAwareRunnable:void run()",
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor:void doUnorderedExecute(java.lang.Runnable)",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor$ChildExecutor:void run()",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor:void doExecute(java.lang.Runnable)",
            "org.jboss.netty.handler.ssl.ImmediateExecutor:void execute(java.lang.Runnable)",
            "org.jboss.netty.handler.ssl.SslHandler$4:void run()",
            "org.jboss.netty.util.ThreadRenamingRunnable:void run()",
            "org.jboss.netty.util.VirtualExecutorService$ChildExecutorRunnable:void run()",
            "org.jboss.netty.util.internal.DeadLockProofWorker$1:void run()",
            "org.jboss.netty.util.internal.UnterminatableExecutor:void execute(java.lang.Runnable)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.AbstractNioSelector:void processTaskQueue()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.AbstractNioSelector:void run()"
        ]
    },
    "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void executeInIoThread(java.lang.Runnable,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.NioDatagramWorker:void executeInIoThread(java.lang.Runnable,boolean)",
            "org.jboss.netty.channel.socket.nio.NioWorker:void executeInIoThread(java.lang.Runnable,boolean)"
        ]
    },
    "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void executeInIoThread(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.oio.AbstractOioChannelSink:org.jboss.netty.channel.ChannelFuture execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable)"
        ]
    },
    "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void processEventQueue()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void run()"
        ]
    },
    "org.jboss.netty.handler.codec.embedder.AbstractCodecEmbedder$EmbeddedChannelSink:org.jboss.netty.channel.ChannelFuture execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.DefaultChannelPipeline:org.jboss.netty.channel.ChannelFuture execute(java.lang.Runnable)",
            "org.jboss.netty.channel.StaticChannelPipeline:org.jboss.netty.channel.ChannelFuture execute(java.lang.Runnable)"
        ]
    },
    "org.jboss.netty.handler.execution.ChainedExecutor:void execute(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.execution.ChainedExecutor:void execute(java.lang.Runnable)",
            "org.jboss.netty.handler.execution.ExecutionHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.execution.ExecutionHandler:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor:void doExecute(java.lang.Runnable)",
            "org.jboss.netty.handler.ssl.SslHandler:void runDelegatedTasks()",
            "org.jboss.netty.util.VirtualExecutorService:void execute(java.lang.Runnable)",
            "org.jboss.netty.util.internal.DeadLockProofWorker:void start(java.util.concurrent.Executor,java.lang.Runnable)",
            "org.jboss.netty.util.internal.UnterminatableExecutor:void execute(java.lang.Runnable)"
        ]
    },
    "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor$MemoryAwareRunnable:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.util.BoundedThreadPool$CallerFeedbackPolicy:void rejectedExecution(java.lang.Runnable,java.util.concurrent.ThreadPoolExecutor)",
            "org.onlab.util.BoundedThreadPool:void execute(java.lang.Runnable)",
            "org.onlab.util.SharedExecutorService:void execute(java.lang.Runnable)",
            "org.jboss.netty.channel.AbstractChannelSink:org.jboss.netty.channel.ChannelFuture execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable)",
            "org.jboss.netty.channel.socket.ChannelRunnableWrapper:void run()",
            "org.jboss.netty.channel.socket.nio.AbstractNioSelector:void processTaskQueue()",
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void executeInIoThread(java.lang.Runnable,boolean)",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void executeInIoThread(java.lang.Runnable)",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void processEventQueue()",
            "org.jboss.netty.handler.codec.embedder.AbstractCodecEmbedder$EmbeddedChannelSink:org.jboss.netty.channel.ChannelFuture execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable)",
            "org.jboss.netty.handler.execution.ChainedExecutor:void execute(java.lang.Runnable)",
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor$MemoryAwareRunnable:void run()",
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor:void doUnorderedExecute(java.lang.Runnable)",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor$ChildExecutor:void run()",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor:void doExecute(java.lang.Runnable)",
            "org.jboss.netty.handler.ssl.ImmediateExecutor:void execute(java.lang.Runnable)",
            "org.jboss.netty.handler.ssl.SslHandler$4:void run()",
            "org.jboss.netty.util.ThreadRenamingRunnable:void run()",
            "org.jboss.netty.util.VirtualExecutorService$ChildExecutorRunnable:void run()",
            "org.jboss.netty.util.internal.DeadLockProofWorker$1:void run()",
            "org.jboss.netty.util.internal.UnterminatableExecutor:void execute(java.lang.Runnable)"
        ]
    },
    "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor:void doUnorderedExecute(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor:void doExecute(java.lang.Runnable)",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor$ChildExecutor:void execute(java.lang.Runnable)",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor$ChildExecutor:void run()",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor:void doExecute(java.lang.Runnable)"
        ]
    },
    "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor$ChildExecutor:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.util.BoundedThreadPool$CallerFeedbackPolicy:void rejectedExecution(java.lang.Runnable,java.util.concurrent.ThreadPoolExecutor)",
            "org.onlab.util.BoundedThreadPool:void execute(java.lang.Runnable)",
            "org.onlab.util.SharedExecutorService:void execute(java.lang.Runnable)",
            "org.jboss.netty.channel.AbstractChannelSink:org.jboss.netty.channel.ChannelFuture execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable)",
            "org.jboss.netty.channel.socket.ChannelRunnableWrapper:void run()",
            "org.jboss.netty.channel.socket.nio.AbstractNioSelector:void processTaskQueue()",
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void executeInIoThread(java.lang.Runnable,boolean)",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void executeInIoThread(java.lang.Runnable)",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void processEventQueue()",
            "org.jboss.netty.handler.codec.embedder.AbstractCodecEmbedder$EmbeddedChannelSink:org.jboss.netty.channel.ChannelFuture execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable)",
            "org.jboss.netty.handler.execution.ChainedExecutor:void execute(java.lang.Runnable)",
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor$MemoryAwareRunnable:void run()",
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor:void doUnorderedExecute(java.lang.Runnable)",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor$ChildExecutor:void run()",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor:void doExecute(java.lang.Runnable)",
            "org.jboss.netty.handler.ssl.ImmediateExecutor:void execute(java.lang.Runnable)",
            "org.jboss.netty.handler.ssl.SslHandler$4:void run()",
            "org.jboss.netty.util.ThreadRenamingRunnable:void run()",
            "org.jboss.netty.util.VirtualExecutorService$ChildExecutorRunnable:void run()",
            "org.jboss.netty.util.internal.DeadLockProofWorker$1:void run()",
            "org.jboss.netty.util.internal.UnterminatableExecutor:void execute(java.lang.Runnable)"
        ]
    },
    "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor:void doExecute(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.jboss.netty.handler.execution.OrderedDownstreamThreadPoolExecutor:void execute(java.lang.Runnable)"
        ]
    },
    "org.jboss.netty.handler.ssl.ImmediateExecutor:void execute(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.execution.ChainedExecutor:void execute(java.lang.Runnable)",
            "org.jboss.netty.handler.execution.ExecutionHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.execution.ExecutionHandler:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor:void doExecute(java.lang.Runnable)",
            "org.jboss.netty.handler.ssl.SslHandler:void runDelegatedTasks()",
            "org.jboss.netty.util.VirtualExecutorService:void execute(java.lang.Runnable)",
            "org.jboss.netty.util.internal.DeadLockProofWorker:void start(java.util.concurrent.Executor,java.lang.Runnable)",
            "org.jboss.netty.util.internal.UnterminatableExecutor:void execute(java.lang.Runnable)"
        ]
    },
    "org.jboss.netty.handler.ssl.SslHandler$4:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.util.BoundedThreadPool$CallerFeedbackPolicy:void rejectedExecution(java.lang.Runnable,java.util.concurrent.ThreadPoolExecutor)",
            "org.onlab.util.BoundedThreadPool:void execute(java.lang.Runnable)",
            "org.onlab.util.SharedExecutorService:void execute(java.lang.Runnable)",
            "org.jboss.netty.channel.AbstractChannelSink:org.jboss.netty.channel.ChannelFuture execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable)",
            "org.jboss.netty.channel.socket.ChannelRunnableWrapper:void run()",
            "org.jboss.netty.channel.socket.nio.AbstractNioSelector:void processTaskQueue()",
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void executeInIoThread(java.lang.Runnable,boolean)",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void executeInIoThread(java.lang.Runnable)",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void processEventQueue()",
            "org.jboss.netty.handler.codec.embedder.AbstractCodecEmbedder$EmbeddedChannelSink:org.jboss.netty.channel.ChannelFuture execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable)",
            "org.jboss.netty.handler.execution.ChainedExecutor:void execute(java.lang.Runnable)",
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor$MemoryAwareRunnable:void run()",
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor:void doUnorderedExecute(java.lang.Runnable)",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor$ChildExecutor:void run()",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor:void doExecute(java.lang.Runnable)",
            "org.jboss.netty.handler.ssl.ImmediateExecutor:void execute(java.lang.Runnable)",
            "org.jboss.netty.handler.ssl.SslHandler$4:void run()",
            "org.jboss.netty.handler.ssl.SslHandler:void runDelegatedTasks()",
            "org.jboss.netty.util.ThreadRenamingRunnable:void run()",
            "org.jboss.netty.util.VirtualExecutorService$ChildExecutorRunnable:void run()",
            "org.jboss.netty.util.internal.DeadLockProofWorker$1:void run()",
            "org.jboss.netty.util.internal.UnterminatableExecutor:void execute(java.lang.Runnable)"
        ]
    },
    "org.jboss.netty.util.ThreadRenamingRunnable:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.util.BoundedThreadPool$CallerFeedbackPolicy:void rejectedExecution(java.lang.Runnable,java.util.concurrent.ThreadPoolExecutor)",
            "org.onlab.util.BoundedThreadPool:void execute(java.lang.Runnable)",
            "org.onlab.util.SharedExecutorService:void execute(java.lang.Runnable)",
            "org.jboss.netty.channel.AbstractChannelSink:org.jboss.netty.channel.ChannelFuture execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable)",
            "org.jboss.netty.channel.socket.ChannelRunnableWrapper:void run()",
            "org.jboss.netty.channel.socket.nio.AbstractNioSelector:void processTaskQueue()",
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void executeInIoThread(java.lang.Runnable,boolean)",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void executeInIoThread(java.lang.Runnable)",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void processEventQueue()",
            "org.jboss.netty.handler.codec.embedder.AbstractCodecEmbedder$EmbeddedChannelSink:org.jboss.netty.channel.ChannelFuture execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable)",
            "org.jboss.netty.handler.execution.ChainedExecutor:void execute(java.lang.Runnable)",
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor$MemoryAwareRunnable:void run()",
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor:void doUnorderedExecute(java.lang.Runnable)",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor$ChildExecutor:void run()",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor:void doExecute(java.lang.Runnable)",
            "org.jboss.netty.handler.ssl.ImmediateExecutor:void execute(java.lang.Runnable)",
            "org.jboss.netty.handler.ssl.SslHandler$4:void run()",
            "org.jboss.netty.util.ThreadRenamingRunnable:void run()",
            "org.jboss.netty.util.VirtualExecutorService$ChildExecutorRunnable:void run()",
            "org.jboss.netty.util.internal.DeadLockProofWorker$1:void run()",
            "org.jboss.netty.util.internal.UnterminatableExecutor:void execute(java.lang.Runnable)"
        ]
    },
    "org.jboss.netty.util.VirtualExecutorService$ChildExecutorRunnable:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.util.BoundedThreadPool$CallerFeedbackPolicy:void rejectedExecution(java.lang.Runnable,java.util.concurrent.ThreadPoolExecutor)",
            "org.onlab.util.BoundedThreadPool:void execute(java.lang.Runnable)",
            "org.onlab.util.SharedExecutorService:void execute(java.lang.Runnable)",
            "org.jboss.netty.channel.AbstractChannelSink:org.jboss.netty.channel.ChannelFuture execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable)",
            "org.jboss.netty.channel.socket.ChannelRunnableWrapper:void run()",
            "org.jboss.netty.channel.socket.nio.AbstractNioSelector:void processTaskQueue()",
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void executeInIoThread(java.lang.Runnable,boolean)",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void executeInIoThread(java.lang.Runnable)",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void processEventQueue()",
            "org.jboss.netty.handler.codec.embedder.AbstractCodecEmbedder$EmbeddedChannelSink:org.jboss.netty.channel.ChannelFuture execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable)",
            "org.jboss.netty.handler.execution.ChainedExecutor:void execute(java.lang.Runnable)",
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor$MemoryAwareRunnable:void run()",
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor:void doUnorderedExecute(java.lang.Runnable)",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor$ChildExecutor:void run()",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor:void doExecute(java.lang.Runnable)",
            "org.jboss.netty.handler.ssl.ImmediateExecutor:void execute(java.lang.Runnable)",
            "org.jboss.netty.handler.ssl.SslHandler$4:void run()",
            "org.jboss.netty.util.ThreadRenamingRunnable:void run()",
            "org.jboss.netty.util.VirtualExecutorService$ChildExecutorRunnable:void run()",
            "org.jboss.netty.util.VirtualExecutorService:void execute(java.lang.Runnable)",
            "org.jboss.netty.util.internal.DeadLockProofWorker$1:void run()",
            "org.jboss.netty.util.internal.UnterminatableExecutor:void execute(java.lang.Runnable)"
        ]
    },
    "org.jboss.netty.util.internal.DeadLockProofWorker$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.util.BoundedThreadPool$CallerFeedbackPolicy:void rejectedExecution(java.lang.Runnable,java.util.concurrent.ThreadPoolExecutor)",
            "org.onlab.util.BoundedThreadPool:void execute(java.lang.Runnable)",
            "org.onlab.util.SharedExecutorService:void execute(java.lang.Runnable)",
            "org.jboss.netty.channel.AbstractChannelSink:org.jboss.netty.channel.ChannelFuture execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable)",
            "org.jboss.netty.channel.socket.ChannelRunnableWrapper:void run()",
            "org.jboss.netty.channel.socket.nio.AbstractNioSelector:void processTaskQueue()",
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void executeInIoThread(java.lang.Runnable,boolean)",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void executeInIoThread(java.lang.Runnable)",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void processEventQueue()",
            "org.jboss.netty.handler.codec.embedder.AbstractCodecEmbedder$EmbeddedChannelSink:org.jboss.netty.channel.ChannelFuture execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable)",
            "org.jboss.netty.handler.execution.ChainedExecutor:void execute(java.lang.Runnable)",
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor$MemoryAwareRunnable:void run()",
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor:void doUnorderedExecute(java.lang.Runnable)",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor$ChildExecutor:void run()",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor:void doExecute(java.lang.Runnable)",
            "org.jboss.netty.handler.ssl.ImmediateExecutor:void execute(java.lang.Runnable)",
            "org.jboss.netty.handler.ssl.SslHandler$4:void run()",
            "org.jboss.netty.util.ThreadRenamingRunnable:void run()",
            "org.jboss.netty.util.VirtualExecutorService$ChildExecutorRunnable:void run()",
            "org.jboss.netty.util.internal.DeadLockProofWorker$1:void run()",
            "org.jboss.netty.util.internal.DeadLockProofWorker:void start(java.util.concurrent.Executor,java.lang.Runnable)",
            "org.jboss.netty.util.internal.UnterminatableExecutor:void execute(java.lang.Runnable)"
        ]
    },
    "org.jboss.netty.util.internal.UnterminatableExecutor:void execute(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.execution.ChainedExecutor:void execute(java.lang.Runnable)",
            "org.jboss.netty.handler.execution.ExecutionHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.execution.ExecutionHandler:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor:void doExecute(java.lang.Runnable)",
            "org.jboss.netty.handler.ssl.SslHandler:void runDelegatedTasks()",
            "org.jboss.netty.util.VirtualExecutorService:void execute(java.lang.Runnable)",
            "org.jboss.netty.util.internal.DeadLockProofWorker:void start(java.util.concurrent.Executor,java.lang.Runnable)",
            "org.jboss.netty.util.internal.UnterminatableExecutor:void execute(java.lang.Runnable)"
        ]
    },
    "org.jboss.netty.handler.ssl.SslHandler:org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.ssl.SslHandler:org.jboss.netty.buffer.ChannelBuffer unwrap(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.ssl.SslHandler:void channelDisconnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.handler.ssl.SslHandler:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.ssl.SslHandler:void wrap(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel)",
            "org.jboss.netty.handler.ssl.SslHandler:org.jboss.netty.channel.ChannelFuture wrapNonAppData(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel)",
            "org.jboss.netty.handler.ssl.SslHandler:void closeOutboundAndChannel(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)"
        ]
    },
    "org.jboss.netty.handler.ssl.SslHandler:org.jboss.netty.channel.ChannelFuture close(org.jboss.netty.channel.Channel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.ssl.SslHandler:void wrap(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.ssl.SslHandler:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.ssl.SslHandler:org.jboss.netty.buffer.ChannelBuffer unwrap(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,int,int)"
        ]
    },
    "org.jboss.netty.handler.ssl.SslHandler:org.jboss.netty.channel.ChannelFuture wrapNonAppData(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.ssl.SslHandler:org.jboss.netty.channel.ChannelFuture handshake()",
            "org.jboss.netty.handler.ssl.SslHandler:org.jboss.netty.channel.ChannelFuture close()",
            "org.jboss.netty.handler.ssl.SslHandler:org.jboss.netty.buffer.ChannelBuffer unwrap(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,int,int)",
            "org.jboss.netty.handler.ssl.SslHandler:void closeOutboundAndChannel(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)"
        ]
    },
    "org.jboss.netty.handler.stream.ChunkedWriteHandler:void resumeTransfer()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.stream.ChunkedWriteHandler:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.DefaultChannelPipeline:void sendDownstream(org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.StaticChannelPipeline:void sendDownstream(org.jboss.netty.channel.StaticChannelPipeline$StaticChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.stream.ChunkedWriteHandler:void beforeRemove(org.jboss.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.DefaultChannelPipeline:void callBeforeRemove(org.jboss.netty.channel.ChannelHandlerContext)",
            "org.jboss.netty.channel.StaticChannelPipeline:void callBeforeRemove(org.jboss.netty.channel.ChannelHandlerContext)"
        ]
    },
    "org.jboss.netty.handler.execution.ExecutionHandler:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.DefaultChannelPipeline:void sendDownstream(org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.StaticChannelPipeline:void sendDownstream(org.jboss.netty.channel.StaticChannelPipeline$StaticChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.ChannelLocal:java.lang.Object set(org.jboss.netty.channel.Channel,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.channel.ChannelLocal:java.lang.Object setIfAbsent(org.jboss.netty.channel.Channel,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.ChannelLocal:java.lang.Object get(org.jboss.netty.channel.Channel)"
        ]
    },
    "org.jboss.netty.channel.group.DefaultChannelGroup:boolean add(org.jboss.netty.channel.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.group.DefaultChannelGroup:boolean add(java.lang.Object)",
            "org.jboss.netty.channel.local.DefaultLocalServerChannelFactory:org.jboss.netty.channel.local.LocalServerChannel newChannel(org.jboss.netty.channel.ChannelPipeline)"
        ]
    },
    "org.jboss.netty.channel.group.DefaultChannelGroupFuture:void <init>(org.jboss.netty.channel.group.ChannelGroup,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.channel.group.DefaultChannelGroupFuture:void <init>(org.jboss.netty.channel.group.ChannelGroup,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.group.DefaultChannelGroup:org.jboss.netty.channel.group.ChannelGroupFuture close()",
            "org.jboss.netty.channel.group.DefaultChannelGroup:org.jboss.netty.channel.group.ChannelGroupFuture disconnect()",
            "org.jboss.netty.channel.group.DefaultChannelGroup:org.jboss.netty.channel.group.ChannelGroupFuture setInterestOps(int)",
            "org.jboss.netty.channel.group.DefaultChannelGroup:org.jboss.netty.channel.group.ChannelGroupFuture setReadable(boolean)",
            "org.jboss.netty.channel.group.DefaultChannelGroup:org.jboss.netty.channel.group.ChannelGroupFuture unbind()",
            "org.jboss.netty.channel.group.DefaultChannelGroup:org.jboss.netty.channel.group.ChannelGroupFuture write(java.lang.Object)",
            "org.jboss.netty.channel.group.DefaultChannelGroup:org.jboss.netty.channel.group.ChannelGroupFuture write(java.lang.Object,java.net.SocketAddress)"
        ]
    },
    "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$5:void operationComplete(org.jboss.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.CompleteChannelFuture:void addListener(org.jboss.netty.channel.ChannelFutureListener)",
            "org.jboss.netty.channel.DefaultChannelFuture:void notifyListener(org.jboss.netty.channel.ChannelFutureListener)"
        ]
    },
    "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$6:void operationComplete(org.jboss.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.CompleteChannelFuture:void addListener(org.jboss.netty.channel.ChannelFutureListener)",
            "org.jboss.netty.channel.DefaultChannelFuture:void notifyListener(org.jboss.netty.channel.ChannelFutureListener)"
        ]
    },
    "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$7:void operationComplete(org.jboss.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.CompleteChannelFuture:void addListener(org.jboss.netty.channel.ChannelFutureListener)",
            "org.jboss.netty.channel.DefaultChannelFuture:void notifyListener(org.jboss.netty.channel.ChannelFutureListener)"
        ]
    },
    "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel:void bindReal(java.net.SocketAddress,org.jboss.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketPipelineSink:void eventSunk(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel:void connectReal(java.net.SocketAddress,org.jboss.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketPipelineSink:void eventSunk(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel:void writeReal(org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketPipelineSink:void eventSunk(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel:void setInterestOpsReal(int,org.jboss.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketPipelineSink:void eventSunk(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel:void disconnectReal(org.jboss.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel:void unbindReal(org.jboss.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketPipelineSink:void eventSunk(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel:void closeReal(org.jboss.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$ServletChannelHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketPipelineSink:void eventSunk(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.socket.http.HttpTunnelingServlet:void service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.compression.JdkZlibEncoder:org.jboss.netty.channel.ChannelFuture finishEncode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.compression.JdkZlibEncoder:org.jboss.netty.channel.ChannelFuture close()",
            "org.jboss.netty.handler.codec.compression.JdkZlibEncoder:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.compression.ZlibEncoder:org.jboss.netty.channel.ChannelFuture finishEncode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.compression.ZlibEncoder:org.jboss.netty.channel.ChannelFuture close()",
            "org.jboss.netty.handler.codec.compression.ZlibEncoder:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void protocolViolation(org.jboss.netty.channel.Channel,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder$State)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void checkUTF8String(org.jboss.netty.channel.Channel,byte[])",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void checkCloseFrameBody(org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)"
        ]
    },
    "org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker00:org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker07:org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker08:org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker13:org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerHandshaker07:org.jboss.netty.channel.ChannelFuture close(org.jboss.netty.channel.Channel,org.jboss.netty.handler.codec.http.websocketx.CloseWebSocketFrame)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerHandshaker08:org.jboss.netty.channel.ChannelFuture close(org.jboss.netty.channel.Channel,org.jboss.netty.handler.codec.http.websocketx.CloseWebSocketFrame)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerHandshaker13:org.jboss.netty.channel.ChannelFuture close(org.jboss.netty.channel.Channel,org.jboss.netty.handler.codec.http.websocketx.CloseWebSocketFrame)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler:void exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ExceptionEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler:void sendHttpResponse(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.handler.codec.http.HttpRequest,org.jboss.netty.handler.codec.http.HttpResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.SpdyHttpEncoder:org.jboss.netty.channel.ChannelFuture getDataFuture(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelFuture,org.jboss.netty.handler.codec.spdy.SpdyDataFrame[],java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.spdy.SpdyHttpEncoder:void writeChunk(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelFuture,int,org.jboss.netty.handler.codec.http.HttpChunk,java.net.SocketAddress)",
            "org.jboss.netty.handler.codec.spdy.SpdyHttpEncoder:org.jboss.netty.channel.ChannelFuture getMessageFuture(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent,int,org.jboss.netty.handler.codec.http.HttpMessage)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.DefaultChannelPipeline:void sendDownstream(org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.StaticChannelPipeline:void sendDownstream(org.jboss.netty.channel.StaticChannelPipeline$StaticChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:void issueSessionError(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.net.SocketAddress,org.jboss.netty.handler.codec.spdy.SpdySessionStatus)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:void exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ExceptionEvent)",
            "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:void access$000(org.jboss.netty.handler.codec.spdy.SpdySessionHandler,org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.net.SocketAddress,org.jboss.netty.handler.codec.spdy.SpdySessionStatus)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:void halfCloseStream(int,boolean,org.jboss.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:void updateSendWindowSize(org.jboss.netty.channel.ChannelHandlerContext,int,int)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:void removeStream(int,org.jboss.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:void issueStreamError(org.jboss.netty.channel.ChannelHandlerContext,java.net.SocketAddress,int,org.jboss.netty.handler.codec.spdy.SpdyStreamStatus)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:void updateSendWindowSize(org.jboss.netty.channel.ChannelHandlerContext,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:void sendGoAwayFrame(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.execution.OrderedDownstreamThreadPoolExecutor:java.util.concurrent.Executor getChildExecutor(org.jboss.netty.channel.ChannelEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor:void doExecute(java.lang.Runnable)"
        ]
    },
    "org.jboss.netty.handler.queue.BufferedWriteHandler:java.util.List consolidatedWrite(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.queue.BufferedWriteHandler:void flush(boolean)"
        ]
    },
    "org.jboss.netty.handler.ssl.SslHandler:void closeOutboundAndChannel(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.ssl.SslHandler:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.timeout.WriteTimeoutHandler:void writeRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelDownstreamHandler:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.DefaultChannelFuture:void addListener(org.jboss.netty.channel.ChannelFutureListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.bootstrap.ServerBootstrap$Binder:void channelOpen(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.bootstrap.ServerBootstrap:org.jboss.netty.channel.ChannelFuture bindAsync(java.net.SocketAddress)",
            "org.jboss.netty.channel.ChannelLocal:java.lang.Object set(org.jboss.netty.channel.Channel,java.lang.Object)",
            "org.jboss.netty.channel.ChannelLocal:java.lang.Object setIfAbsent(org.jboss.netty.channel.Channel,java.lang.Object)",
            "org.jboss.netty.channel.group.DefaultChannelGroup:boolean add(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.channel.group.DefaultChannelGroupFuture:void <init>(org.jboss.netty.channel.group.ChannelGroup,java.util.Collection)",
            "org.jboss.netty.channel.group.DefaultChannelGroupFuture:void <init>(org.jboss.netty.channel.group.ChannelGroup,java.util.Map)",
            "org.jboss.netty.channel.local.DefaultLocalChannel:void <init>(org.jboss.netty.channel.local.LocalServerChannel,org.jboss.netty.channel.ChannelFactory,org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelSink,org.jboss.netty.channel.local.DefaultLocalChannel)",
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$2:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$5:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$6:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$7:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel:void bindReal(java.net.SocketAddress,org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel:void connectReal(java.net.SocketAddress,org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel:void writeReal(org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel:void setInterestOpsReal(int,org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel:void disconnectReal(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel:void unbindReal(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel:void closeReal(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.socket.http.HttpTunnelingServlet:void service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.jboss.netty.channel.socket.nio.NioClientSocketPipelineSink:void connect(org.jboss.netty.channel.socket.nio.NioClientSocketChannel,org.jboss.netty.channel.ChannelFuture,java.net.SocketAddress)",
            "org.jboss.netty.channel.socket.nio.NioDatagramPipelineSink:void connect(org.jboss.netty.channel.socket.nio.NioDatagramChannel,org.jboss.netty.channel.ChannelFuture,java.net.InetSocketAddress)",
            "org.jboss.netty.channel.socket.oio.OioClientSocketPipelineSink:void connect(org.jboss.netty.channel.socket.oio.OioClientSocketChannel,org.jboss.netty.channel.ChannelFuture,java.net.SocketAddress)",
            "org.jboss.netty.channel.socket.oio.OioDatagramPipelineSink:void connect(org.jboss.netty.channel.socket.oio.OioDatagramChannel,org.jboss.netty.channel.ChannelFuture,java.net.SocketAddress)",
            "org.jboss.netty.handler.codec.compression.JdkZlibEncoder:org.jboss.netty.channel.ChannelFuture finishEncode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.codec.compression.ZlibEncoder:org.jboss.netty.channel.ChannelFuture finishEncode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void protocolViolation(org.jboss.netty.channel.Channel,java.lang.String)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker00:org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker07:org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker08:org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker13:org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerHandshaker:org.jboss.netty.channel.ChannelFuture writeHandshakeResponse(org.jboss.netty.channel.Channel,org.jboss.netty.handler.codec.http.HttpResponse,org.jboss.netty.channel.ChannelHandler,org.jboss.netty.channel.ChannelHandler)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerHandshaker07:org.jboss.netty.channel.ChannelFuture close(org.jboss.netty.channel.Channel,org.jboss.netty.handler.codec.http.websocketx.CloseWebSocketFrame)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerHandshaker08:org.jboss.netty.channel.ChannelFuture close(org.jboss.netty.channel.Channel,org.jboss.netty.handler.codec.http.websocketx.CloseWebSocketFrame)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerHandshaker13:org.jboss.netty.channel.ChannelFuture close(org.jboss.netty.channel.Channel,org.jboss.netty.handler.codec.http.websocketx.CloseWebSocketFrame)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler:void exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ExceptionEvent)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler:void sendHttpResponse(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.handler.codec.http.HttpRequest,org.jboss.netty.handler.codec.http.HttpResponse)",
            "org.jboss.netty.handler.codec.spdy.SpdyHttpEncoder:org.jboss.netty.channel.ChannelFuture getDataFuture(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelFuture,org.jboss.netty.handler.codec.spdy.SpdyDataFrame[],java.net.SocketAddress)",
            "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:void issueSessionError(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.net.SocketAddress,org.jboss.netty.handler.codec.spdy.SpdySessionStatus)",
            "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:void halfCloseStream(int,boolean,org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:void removeStream(int,org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:void updateSendWindowSize(org.jboss.netty.channel.ChannelHandlerContext,int,int)",
            "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:void sendGoAwayFrame(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.handler.execution.OrderedDownstreamThreadPoolExecutor:java.util.concurrent.Executor getChildExecutor(org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.ipfilter.IpFilteringHandlerImpl:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.queue.BufferedWriteHandler:java.util.List consolidatedWrite(java.util.List)",
            "org.jboss.netty.handler.ssl.SslHandler:org.jboss.netty.channel.ChannelFuture handshake()",
            "org.jboss.netty.handler.ssl.SslHandler:org.jboss.netty.channel.ChannelFuture wrapNonAppData(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel)",
            "org.jboss.netty.handler.ssl.SslHandler:void closeOutboundAndChannel(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.handler.ssl.SslHandler:void channelConnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.handler.stream.ChunkedWriteHandler:void flush(org.jboss.netty.channel.ChannelHandlerContext,boolean)",
            "org.jboss.netty.handler.timeout.WriteTimeoutHandler:void writeRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)"
        ]
    },
    "org.jboss.netty.channel.DefaultChannelFuture:void notifyListeners()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.DefaultChannelFuture:boolean setSuccess()",
            "org.jboss.netty.channel.DefaultChannelFuture:boolean setFailure(java.lang.Throwable)",
            "org.jboss.netty.channel.DefaultChannelFuture:boolean cancel()"
        ]
    },
    "org.jboss.netty.channel.local.DefaultLocalClientChannelFactory:org.jboss.netty.channel.local.LocalChannel newChannel(org.jboss.netty.channel.ChannelPipeline)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.local.DefaultLocalClientChannelFactory:org.jboss.netty.channel.Channel newChannel(org.jboss.netty.channel.ChannelPipeline)"
        ]
    },
    "org.jboss.netty.channel.local.DefaultLocalServerChannelFactory:org.jboss.netty.channel.local.LocalServerChannel newChannel(org.jboss.netty.channel.ChannelPipeline)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.local.DefaultLocalServerChannelFactory:org.jboss.netty.channel.ServerChannel newChannel(org.jboss.netty.channel.ChannelPipeline)",
            "org.jboss.netty.channel.local.DefaultLocalServerChannelFactory:org.jboss.netty.channel.Channel newChannel(org.jboss.netty.channel.ChannelPipeline)"
        ]
    },
    "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannelFactory:org.jboss.netty.channel.socket.SocketChannel newChannel(org.jboss.netty.channel.ChannelPipeline)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel:void <init>(org.jboss.netty.channel.ChannelFactory,org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelSink,org.jboss.netty.channel.socket.ClientSocketChannelFactory)",
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannelFactory:org.jboss.netty.channel.Channel newChannel(org.jboss.netty.channel.ChannelPipeline)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioServerBoss:void registerAcceptedChannel(org.jboss.netty.channel.socket.nio.NioServerSocketChannel,java.nio.channels.SocketChannel,java.lang.Thread)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.NioServerBoss:void process(java.nio.channels.Selector)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioClientSocketChannelFactory:org.jboss.netty.channel.socket.SocketChannel newChannel(org.jboss.netty.channel.ChannelPipeline)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel:void <init>(org.jboss.netty.channel.ChannelFactory,org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelSink,org.jboss.netty.channel.socket.ClientSocketChannelFactory)",
            "org.jboss.netty.channel.socket.nio.NioClientSocketChannelFactory:org.jboss.netty.channel.Channel newChannel(org.jboss.netty.channel.ChannelPipeline)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioDatagramChannelFactory:org.jboss.netty.channel.socket.DatagramChannel newChannel(org.jboss.netty.channel.ChannelPipeline)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.NioDatagramChannelFactory:org.jboss.netty.channel.Channel newChannel(org.jboss.netty.channel.ChannelPipeline)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioServerSocketChannelFactory:org.jboss.netty.channel.socket.ServerSocketChannel newChannel(org.jboss.netty.channel.ChannelPipeline)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.NioServerSocketChannelFactory:org.jboss.netty.channel.ServerChannel newChannel(org.jboss.netty.channel.ChannelPipeline)",
            "org.jboss.netty.channel.socket.nio.NioServerSocketChannelFactory:org.jboss.netty.channel.Channel newChannel(org.jboss.netty.channel.ChannelPipeline)"
        ]
    },
    "org.jboss.netty.channel.socket.oio.OioServerSocketPipelineSink$Boss:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.util.BoundedThreadPool$CallerFeedbackPolicy:void rejectedExecution(java.lang.Runnable,java.util.concurrent.ThreadPoolExecutor)",
            "org.onlab.util.BoundedThreadPool:void execute(java.lang.Runnable)",
            "org.onlab.util.SharedExecutorService:void execute(java.lang.Runnable)",
            "org.jboss.netty.channel.AbstractChannelSink:org.jboss.netty.channel.ChannelFuture execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable)",
            "org.jboss.netty.channel.socket.ChannelRunnableWrapper:void run()",
            "org.jboss.netty.channel.socket.nio.AbstractNioSelector:void processTaskQueue()",
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void executeInIoThread(java.lang.Runnable,boolean)",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void executeInIoThread(java.lang.Runnable)",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void processEventQueue()",
            "org.jboss.netty.handler.codec.embedder.AbstractCodecEmbedder$EmbeddedChannelSink:org.jboss.netty.channel.ChannelFuture execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable)",
            "org.jboss.netty.handler.execution.ChainedExecutor:void execute(java.lang.Runnable)",
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor$MemoryAwareRunnable:void run()",
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor:void doUnorderedExecute(java.lang.Runnable)",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor$ChildExecutor:void run()",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor:void doExecute(java.lang.Runnable)",
            "org.jboss.netty.handler.ssl.ImmediateExecutor:void execute(java.lang.Runnable)",
            "org.jboss.netty.handler.ssl.SslHandler$4:void run()",
            "org.jboss.netty.util.ThreadRenamingRunnable:void run()",
            "org.jboss.netty.util.VirtualExecutorService$ChildExecutorRunnable:void run()",
            "org.jboss.netty.util.internal.DeadLockProofWorker$1:void run()",
            "org.jboss.netty.util.internal.UnterminatableExecutor:void execute(java.lang.Runnable)"
        ]
    },
    "org.jboss.netty.channel.socket.oio.OioClientSocketChannelFactory:org.jboss.netty.channel.socket.SocketChannel newChannel(org.jboss.netty.channel.ChannelPipeline)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel:void <init>(org.jboss.netty.channel.ChannelFactory,org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelSink,org.jboss.netty.channel.socket.ClientSocketChannelFactory)",
            "org.jboss.netty.channel.socket.oio.OioClientSocketChannelFactory:org.jboss.netty.channel.Channel newChannel(org.jboss.netty.channel.ChannelPipeline)"
        ]
    },
    "org.jboss.netty.channel.socket.oio.OioDatagramChannelFactory:org.jboss.netty.channel.socket.DatagramChannel newChannel(org.jboss.netty.channel.ChannelPipeline)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.oio.OioDatagramChannelFactory:org.jboss.netty.channel.Channel newChannel(org.jboss.netty.channel.ChannelPipeline)"
        ]
    },
    "org.jboss.netty.channel.socket.oio.OioServerSocketChannelFactory:org.jboss.netty.channel.socket.ServerSocketChannel newChannel(org.jboss.netty.channel.ChannelPipeline)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.oio.OioServerSocketChannelFactory:org.jboss.netty.channel.ServerChannel newChannel(org.jboss.netty.channel.ChannelPipeline)",
            "org.jboss.netty.channel.socket.oio.OioServerSocketChannelFactory:org.jboss.netty.channel.Channel newChannel(org.jboss.netty.channel.ChannelPipeline)"
        ]
    },
    "org.jboss.netty.handler.codec.embedder.AbstractCodecEmbedder:void <init>(org.jboss.netty.channel.ChannelHandler[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.embedder.AbstractCodecEmbedder:void <init>(org.jboss.netty.buffer.ChannelBufferFactory,org.jboss.netty.channel.ChannelHandler[])",
            "org.jboss.netty.handler.codec.embedder.DecoderEmbedder:void <init>(org.jboss.netty.channel.ChannelUpstreamHandler[])",
            "org.jboss.netty.handler.codec.embedder.EncoderEmbedder:void <init>(org.jboss.netty.channel.ChannelDownstreamHandler[])"
        ]
    },
    "org.jboss.netty.channel.local.LocalClientChannelSink:void eventSunk(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext:void sendDownstream(org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.DefaultChannelPipeline:void sendDownstream(org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.StaticChannelPipeline$StaticChannelHandlerContext:void sendDownstream(org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.StaticChannelPipeline:void sendDownstream(org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.local.LocalServerChannelSink:void handleServerChannel(org.jboss.netty.channel.ChannelEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.local.LocalServerChannelSink:void eventSunk(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioClientSocketPipelineSink:void eventSunk(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext:void sendDownstream(org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.DefaultChannelPipeline:void sendDownstream(org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.StaticChannelPipeline$StaticChannelHandlerContext:void sendDownstream(org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.StaticChannelPipeline:void sendDownstream(org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioDatagramPipelineSink:void eventSunk(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext:void sendDownstream(org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.DefaultChannelPipeline:void sendDownstream(org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.StaticChannelPipeline$StaticChannelHandlerContext:void sendDownstream(org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.StaticChannelPipeline:void sendDownstream(org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.socket.oio.OioClientSocketPipelineSink:void eventSunk(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext:void sendDownstream(org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.DefaultChannelPipeline:void sendDownstream(org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.StaticChannelPipeline$StaticChannelHandlerContext:void sendDownstream(org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.StaticChannelPipeline:void sendDownstream(org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.socket.oio.OioDatagramPipelineSink:void eventSunk(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext:void sendDownstream(org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.DefaultChannelPipeline:void sendDownstream(org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.StaticChannelPipeline$StaticChannelHandlerContext:void sendDownstream(org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.StaticChannelPipeline:void sendDownstream(org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.socket.oio.OioServerSocketPipelineSink:void handleServerSocket(org.jboss.netty.channel.ChannelEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.oio.OioServerSocketPipelineSink:void eventSunk(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$ServletChannelHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.socket.oio.OioWorker:boolean process()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void run()"
        ]
    },
    "org.jboss.netty.handler.codec.embedder.DecoderEmbedder:boolean offer(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.HttpContentDecoder:org.jboss.netty.buffer.ChannelBuffer decode(org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.rtsp.RtspMessageDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.http.HttpMessageDecoder$State)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void process(java.nio.channels.Selector)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.AbstractNioSelector:void run()"
        ]
    },
    "org.jboss.netty.channel.local.LocalServerChannelSink:void handleAcceptedChannel(org.jboss.netty.channel.ChannelEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.local.LocalServerChannelSink:void eventSunk(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void writeFromUserCode(org.jboss.netty.channel.socket.nio.AbstractNioChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.NioClientSocketPipelineSink:void eventSunk(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.socket.nio.NioDatagramPipelineSink:void eventSunk(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.socket.nio.NioServerSocketPipelineSink:void handleAcceptedSocket(org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void writeFromTaskLoop(org.jboss.netty.channel.socket.nio.AbstractNioChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.AbstractNioChannel$WriteTask:void run()"
        ]
    },
    "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void writeFromSelectorLoop(java.nio.channels.SelectionKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void process(java.nio.channels.Selector)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioDatagramWorker:void writeFromUserCode(org.jboss.netty.channel.socket.nio.AbstractNioChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.NioClientSocketPipelineSink:void eventSunk(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.socket.nio.NioDatagramPipelineSink:void eventSunk(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.socket.nio.NioServerSocketPipelineSink:void handleAcceptedSocket(org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.socket.oio.OioServerSocketPipelineSink:void handleAcceptedSocket(org.jboss.netty.channel.ChannelEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.oio.OioServerSocketPipelineSink:void eventSunk(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.AbstractNioChannel$WriteRequestQueue:boolean offer(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.local.LocalClientChannelSink:void eventSunk(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.local.LocalServerChannelSink:void handleAcceptedChannel(org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.socket.nio.AbstractNioChannel$WriteRequestQueue:boolean offer(org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.channel.socket.nio.NioClientSocketPipelineSink:void eventSunk(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.socket.nio.NioDatagramPipelineSink:void eventSunk(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.socket.nio.NioServerSocketPipelineSink:void handleAcceptedSocket(org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void executeInIoThread(java.lang.Runnable)",
            "org.jboss.netty.handler.codec.embedder.AbstractCodecEmbedder$EmbeddedChannelSink:void handleEvent(org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.codec.http.HttpClientCodec$Encoder:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)",
            "org.jboss.netty.handler.codec.http.HttpContentEncoder:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.stream.ChunkedWriteHandler:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "com.esotericsoftware.kryo.pool.KryoPoolQueueImpl:void release(com.esotericsoftware.kryo.Kryo)",
            "com.esotericsoftware.kryo.pool.SoftReferenceQueue:boolean offer(com.esotericsoftware.kryo.Kryo)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.AbstractNioChannel$WriteRequestQueue:java.lang.Object poll()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.local.DefaultLocalChannel:void flushWriteBuffer()",
            "org.jboss.netty.channel.socket.nio.AbstractNioChannel$WriteRequestQueue:org.jboss.netty.channel.MessageEvent poll()",
            "org.jboss.netty.channel.socket.nio.AbstractNioSelector:void processTaskQueue()",
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void write0(org.jboss.netty.channel.socket.nio.AbstractNioChannel)",
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void cleanUpWriteBuffer(org.jboss.netty.channel.socket.nio.AbstractNioChannel)",
            "org.jboss.netty.channel.socket.nio.NioDatagramWorker:void write0(org.jboss.netty.channel.socket.nio.AbstractNioChannel)",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void processEventQueue()",
            "org.jboss.netty.handler.codec.embedder.AbstractCodecEmbedder:java.lang.Object poll()",
            "org.jboss.netty.handler.codec.http.HttpClientCodec$Decoder:boolean isContentAlwaysEmpty(org.jboss.netty.handler.codec.http.HttpMessage)",
            "org.jboss.netty.handler.codec.http.HttpContentEncoder:void writeRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.codec.spdy.SpdyHttpResponseStreamIdHandler:void writeRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor$ChildExecutor:void run()",
            "org.jboss.netty.handler.queue.BufferedWriteHandler:void flush(boolean)",
            "org.jboss.netty.handler.queue.BufferedWriteHandler:void channelClosed(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.handler.queue.BufferedWriteHandler:void afterRemove(org.jboss.netty.channel.ChannelHandlerContext)",
            "org.jboss.netty.handler.ssl.SslHandler$7:void run()",
            "org.jboss.netty.handler.ssl.SslHandler:void wrap(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel)",
            "org.jboss.netty.handler.ssl.SslHandler:void flushPendingEncryptedWrites(org.jboss.netty.channel.ChannelHandlerContext)",
            "org.jboss.netty.handler.ssl.SslHandler:void afterRemove(org.jboss.netty.channel.ChannelHandlerContext)",
            "org.jboss.netty.handler.stream.ChunkedWriteHandler:void discard(org.jboss.netty.channel.ChannelHandlerContext,boolean)",
            "org.jboss.netty.handler.stream.ChunkedWriteHandler:void flush(org.jboss.netty.channel.ChannelHandlerContext,boolean)",
            "org.jboss.netty.handler.stream.ChunkedWriteHandler:void afterRemove(org.jboss.netty.channel.ChannelHandlerContext)",
            "com.esotericsoftware.kryo.pool.KryoPoolQueueImpl:com.esotericsoftware.kryo.Kryo borrow()",
            "com.esotericsoftware.kryo.pool.SoftReferenceQueue:com.esotericsoftware.kryo.Kryo poll()"
        ]
    },
    "org.jboss.netty.channel.socket.nio.AbstractNioWorker$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.util.BoundedThreadPool$CallerFeedbackPolicy:void rejectedExecution(java.lang.Runnable,java.util.concurrent.ThreadPoolExecutor)",
            "org.onlab.util.BoundedThreadPool:void execute(java.lang.Runnable)",
            "org.onlab.util.SharedExecutorService:void execute(java.lang.Runnable)",
            "org.jboss.netty.channel.AbstractChannelSink:org.jboss.netty.channel.ChannelFuture execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable)",
            "org.jboss.netty.channel.socket.ChannelRunnableWrapper:void run()",
            "org.jboss.netty.channel.socket.nio.AbstractNioSelector:void processTaskQueue()",
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void executeInIoThread(java.lang.Runnable,boolean)",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void executeInIoThread(java.lang.Runnable)",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void processEventQueue()",
            "org.jboss.netty.handler.codec.embedder.AbstractCodecEmbedder$EmbeddedChannelSink:org.jboss.netty.channel.ChannelFuture execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable)",
            "org.jboss.netty.handler.execution.ChainedExecutor:void execute(java.lang.Runnable)",
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor$MemoryAwareRunnable:void run()",
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor:void doUnorderedExecute(java.lang.Runnable)",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor$ChildExecutor:void run()",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor:void doExecute(java.lang.Runnable)",
            "org.jboss.netty.handler.ssl.ImmediateExecutor:void execute(java.lang.Runnable)",
            "org.jboss.netty.handler.ssl.SslHandler$4:void run()",
            "org.jboss.netty.util.ThreadRenamingRunnable:void run()",
            "org.jboss.netty.util.VirtualExecutorService$ChildExecutorRunnable:void run()",
            "org.jboss.netty.util.internal.DeadLockProofWorker$1:void run()",
            "org.jboss.netty.util.internal.UnterminatableExecutor:void execute(java.lang.Runnable)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioServerSocketPipelineSink:void handleAcceptedSocket(org.jboss.netty.channel.ChannelEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.NioServerSocketPipelineSink:void eventSunk(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void close(java.nio.channels.SelectionKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.AbstractNioSelector:void rebuildSelector()",
            "org.jboss.netty.channel.socket.nio.AbstractNioSelector:void run()",
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void process(java.nio.channels.Selector)",
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void setOpWrite(org.jboss.netty.channel.socket.nio.AbstractNioChannel)",
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void clearOpWrite(org.jboss.netty.channel.socket.nio.AbstractNioChannel)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioClientBoss$RegisterTask:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.util.BoundedThreadPool$CallerFeedbackPolicy:void rejectedExecution(java.lang.Runnable,java.util.concurrent.ThreadPoolExecutor)",
            "org.onlab.util.BoundedThreadPool:void execute(java.lang.Runnable)",
            "org.onlab.util.SharedExecutorService:void execute(java.lang.Runnable)",
            "org.jboss.netty.channel.AbstractChannelSink:org.jboss.netty.channel.ChannelFuture execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable)",
            "org.jboss.netty.channel.socket.ChannelRunnableWrapper:void run()",
            "org.jboss.netty.channel.socket.nio.AbstractNioSelector:void processTaskQueue()",
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void executeInIoThread(java.lang.Runnable,boolean)",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void executeInIoThread(java.lang.Runnable)",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void processEventQueue()",
            "org.jboss.netty.handler.codec.embedder.AbstractCodecEmbedder$EmbeddedChannelSink:org.jboss.netty.channel.ChannelFuture execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable)",
            "org.jboss.netty.handler.execution.ChainedExecutor:void execute(java.lang.Runnable)",
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor$MemoryAwareRunnable:void run()",
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor:void doUnorderedExecute(java.lang.Runnable)",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor$ChildExecutor:void run()",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor:void doExecute(java.lang.Runnable)",
            "org.jboss.netty.handler.ssl.ImmediateExecutor:void execute(java.lang.Runnable)",
            "org.jboss.netty.handler.ssl.SslHandler$4:void run()",
            "org.jboss.netty.util.ThreadRenamingRunnable:void run()",
            "org.jboss.netty.util.VirtualExecutorService$ChildExecutorRunnable:void run()",
            "org.jboss.netty.util.internal.DeadLockProofWorker$1:void run()",
            "org.jboss.netty.util.internal.UnterminatableExecutor:void execute(java.lang.Runnable)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioClientBoss:void close(java.nio.channels.SelectionKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.AbstractNioSelector:void rebuildSelector()",
            "org.jboss.netty.channel.socket.nio.AbstractNioSelector:void run()",
            "org.jboss.netty.channel.socket.nio.NioClientBoss:void processSelectedKeys(java.util.Set)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioDatagramWorker$ChannelRegistionTask:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.util.BoundedThreadPool$CallerFeedbackPolicy:void rejectedExecution(java.lang.Runnable,java.util.concurrent.ThreadPoolExecutor)",
            "org.onlab.util.BoundedThreadPool:void execute(java.lang.Runnable)",
            "org.onlab.util.SharedExecutorService:void execute(java.lang.Runnable)",
            "org.jboss.netty.channel.AbstractChannelSink:org.jboss.netty.channel.ChannelFuture execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable)",
            "org.jboss.netty.channel.socket.ChannelRunnableWrapper:void run()",
            "org.jboss.netty.channel.socket.nio.AbstractNioSelector:void processTaskQueue()",
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void executeInIoThread(java.lang.Runnable,boolean)",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void executeInIoThread(java.lang.Runnable)",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void processEventQueue()",
            "org.jboss.netty.handler.codec.embedder.AbstractCodecEmbedder$EmbeddedChannelSink:org.jboss.netty.channel.ChannelFuture execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable)",
            "org.jboss.netty.handler.execution.ChainedExecutor:void execute(java.lang.Runnable)",
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor$MemoryAwareRunnable:void run()",
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor:void doUnorderedExecute(java.lang.Runnable)",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor$ChildExecutor:void run()",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor:void doExecute(java.lang.Runnable)",
            "org.jboss.netty.handler.ssl.ImmediateExecutor:void execute(java.lang.Runnable)",
            "org.jboss.netty.handler.ssl.SslHandler$4:void run()",
            "org.jboss.netty.util.ThreadRenamingRunnable:void run()",
            "org.jboss.netty.util.VirtualExecutorService$ChildExecutorRunnable:void run()",
            "org.jboss.netty.util.internal.DeadLockProofWorker$1:void run()",
            "org.jboss.netty.util.internal.UnterminatableExecutor:void execute(java.lang.Runnable)"
        ]
    },
    "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void close(org.jboss.netty.channel.socket.oio.AbstractOioChannel,org.jboss.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.oio.OioClientSocketPipelineSink:void eventSunk(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.socket.oio.OioClientSocketPipelineSink:void connect(org.jboss.netty.channel.socket.oio.OioClientSocketChannel,org.jboss.netty.channel.ChannelFuture,java.net.SocketAddress)",
            "org.jboss.netty.channel.socket.oio.OioDatagramPipelineSink:void eventSunk(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.socket.oio.OioDatagramPipelineSink:void bind(org.jboss.netty.channel.socket.oio.OioDatagramChannel,org.jboss.netty.channel.ChannelFuture,java.net.SocketAddress)",
            "org.jboss.netty.channel.socket.oio.OioDatagramPipelineSink:void connect(org.jboss.netty.channel.socket.oio.OioDatagramChannel,org.jboss.netty.channel.ChannelFuture,java.net.SocketAddress)",
            "org.jboss.netty.channel.socket.oio.OioServerSocketPipelineSink:void handleAcceptedSocket(org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.embedder.DecoderEmbedder:boolean finish()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.HttpContentDecoder:org.jboss.netty.buffer.ChannelBuffer finishDecode()"
        ]
    },
    "org.jboss.netty.handler.codec.embedder.EncoderEmbedder:boolean finish()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.HttpContentEncoder:org.jboss.netty.buffer.ChannelBuffer finishEncode()"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioServerBoss:void close(java.nio.channels.SelectionKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.AbstractNioSelector:void rebuildSelector()",
            "org.jboss.netty.channel.socket.nio.AbstractNioSelector:void run()"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioServerSocketPipelineSink:void handleServerSocket(org.jboss.netty.channel.ChannelEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.NioServerSocketPipelineSink:void eventSunk(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.DefaultChannelPipeline:void notifyHandlerException(org.jboss.netty.channel.ChannelEvent,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext:void sendDownstream(org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.DefaultChannelPipeline:void sendUpstream(org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.DefaultChannelPipeline:void sendDownstream(org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.DefaultChannelPipeline:void sendDownstream(org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.StaticChannelPipeline:void notifyHandlerException(org.jboss.netty.channel.ChannelEvent,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.StaticChannelPipeline$StaticChannelHandlerContext:void sendDownstream(org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.StaticChannelPipeline:void sendUpstream(org.jboss.netty.channel.StaticChannelPipeline$StaticChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.StaticChannelPipeline:void sendDownstream(org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.StaticChannelPipeline:void sendDownstream(org.jboss.netty.channel.StaticChannelPipeline$StaticChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioClientBoss:void process(java.nio.channels.Selector)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.AbstractNioSelector:void run()"
        ]
    },
    "org.jboss.netty.handler.codec.frame.DelimiterBasedFrameDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.frame.FrameDecoder:java.lang.Object decodeLast(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.frame.FrameDecoder:void callDecode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,java.net.SocketAddress)"
        ]
    },
    "org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder:void failIfNecessary(org.jboss.netty.channel.ChannelHandlerContext,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)"
        ]
    },
    "org.jboss.netty.handler.codec.frame.LineBasedFrameDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.frame.DelimiterBasedFrameDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.frame.FrameDecoder:java.lang.Object decodeLast(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.frame.FrameDecoder:void callDecode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,java.net.SocketAddress)"
        ]
    },
    "org.jboss.netty.handler.codec.frame.LineBasedFrameDecoder:void fail(org.jboss.netty.channel.ChannelHandlerContext,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.frame.LineBasedFrameDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)"
        ]
    },
    "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerHandshaker00:org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel,org.jboss.netty.handler.codec.http.HttpRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerHandshaker07:org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel,org.jboss.netty.handler.codec.http.HttpRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerHandshaker08:org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel,org.jboss.netty.handler.codec.http.HttpRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerHandshaker13:org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel,org.jboss.netty.handler.codec.http.HttpRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)"
        ]
    },
    "org.onlab.stc.Coordinator:void execute(org.onlab.stc.Step)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Coordinator:void lambda$executeSucessors$13(org.onlab.stc.Dependency)",
            "org.onlab.stc.Coordinator:void lambda$executeRoots$12(org.onlab.stc.Group,org.onlab.stc.Step)"
        ]
    },
    "org.jboss.netty.handler.ssl.SslHandler:void runDelegatedTasks()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.ssl.SslHandler:org.jboss.netty.channel.ChannelFuture handshake()",
            "org.jboss.netty.handler.ssl.SslHandler:void wrap(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel)",
            "org.jboss.netty.handler.ssl.SslHandler:org.jboss.netty.channel.ChannelFuture wrapNonAppData(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel)",
            "org.jboss.netty.handler.ssl.SslHandler:org.jboss.netty.buffer.ChannelBuffer unwrap(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,int,int)"
        ]
    },
    "org.jboss.netty.util.VirtualExecutorService:void execute(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Coordinator:void execute(org.onlab.stc.Step)",
            "org.onlab.util.SharedExecutorService:void execute(java.lang.Runnable)",
            "org.jboss.netty.handler.execution.ChainedExecutor:void execute(java.lang.Runnable)",
            "org.jboss.netty.handler.execution.ExecutionHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.execution.ExecutionHandler:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor:void doExecute(java.lang.Runnable)",
            "org.jboss.netty.handler.ssl.SslHandler:void runDelegatedTasks()",
            "org.jboss.netty.util.VirtualExecutorService:void execute(java.lang.Runnable)",
            "org.jboss.netty.util.internal.DeadLockProofWorker:void start(java.util.concurrent.Executor,java.lang.Runnable)",
            "org.jboss.netty.util.internal.UnterminatableExecutor:void execute(java.lang.Runnable)"
        ]
    },
    "org.jboss.netty.util.internal.DeadLockProofWorker:void start(java.util.concurrent.Executor,java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.AbstractNioSelector:void openSelector(org.jboss.netty.util.ThreadNameDeterminer)",
            "org.jboss.netty.channel.socket.oio.OioClientSocketPipelineSink:void connect(org.jboss.netty.channel.socket.oio.OioClientSocketChannel,org.jboss.netty.channel.ChannelFuture,java.net.SocketAddress)",
            "org.jboss.netty.channel.socket.oio.OioDatagramPipelineSink:void bind(org.jboss.netty.channel.socket.oio.OioDatagramChannel,org.jboss.netty.channel.ChannelFuture,java.net.SocketAddress)",
            "org.jboss.netty.channel.socket.oio.OioDatagramPipelineSink:void connect(org.jboss.netty.channel.socket.oio.OioDatagramChannel,org.jboss.netty.channel.ChannelFuture,java.net.SocketAddress)",
            "org.jboss.netty.channel.socket.oio.OioServerSocketPipelineSink$Boss:void run()",
            "org.jboss.netty.channel.socket.oio.OioServerSocketPipelineSink:void bind(org.jboss.netty.channel.socket.oio.OioServerSocketChannel,org.jboss.netty.channel.ChannelFuture,java.net.SocketAddress)"
        ]
    },
    "org.jboss.netty.channel.DefaultChannelPipeline:org.jboss.netty.channel.ChannelFuture execute(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.Channels:org.jboss.netty.channel.ChannelFuture fireWriteCompleteLater(org.jboss.netty.channel.Channel,long)",
            "org.jboss.netty.channel.Channels:org.jboss.netty.channel.ChannelFuture fireChannelInterestChangedLater(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.channel.Channels:org.jboss.netty.channel.ChannelFuture fireChannelDisconnectedLater(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.channel.Channels:org.jboss.netty.channel.ChannelFuture fireChannelUnboundLater(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.channel.Channels:org.jboss.netty.channel.ChannelFuture fireChannelClosedLater(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.channel.Channels:org.jboss.netty.channel.ChannelFuture fireExceptionCaughtLater(org.jboss.netty.channel.Channel,java.lang.Throwable)",
            "org.jboss.netty.channel.Channels:org.jboss.netty.channel.ChannelFuture fireExceptionCaughtLater(org.jboss.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void setInterestOps(org.jboss.netty.channel.socket.nio.AbstractNioChannel,org.jboss.netty.channel.ChannelFuture,int)",
            "org.jboss.netty.handler.ssl.SslHandler:void channelClosed(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.handler.timeout.IdleStateHandler:void fireChannelIdle(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.handler.timeout.IdleState,long)",
            "org.jboss.netty.handler.timeout.ReadTimeoutHandler$ReadTimeoutTask:void fireReadTimedOut(org.jboss.netty.channel.ChannelHandlerContext)",
            "org.jboss.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask:void fireWriteTimeOut(org.jboss.netty.channel.ChannelHandlerContext)"
        ]
    },
    "org.jboss.netty.channel.StaticChannelPipeline:org.jboss.netty.channel.ChannelFuture execute(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.Channels:org.jboss.netty.channel.ChannelFuture fireWriteCompleteLater(org.jboss.netty.channel.Channel,long)",
            "org.jboss.netty.channel.Channels:org.jboss.netty.channel.ChannelFuture fireChannelInterestChangedLater(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.channel.Channels:org.jboss.netty.channel.ChannelFuture fireChannelDisconnectedLater(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.channel.Channels:org.jboss.netty.channel.ChannelFuture fireChannelUnboundLater(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.channel.Channels:org.jboss.netty.channel.ChannelFuture fireChannelClosedLater(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.channel.Channels:org.jboss.netty.channel.ChannelFuture fireExceptionCaughtLater(org.jboss.netty.channel.Channel,java.lang.Throwable)",
            "org.jboss.netty.channel.Channels:org.jboss.netty.channel.ChannelFuture fireExceptionCaughtLater(org.jboss.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void setInterestOps(org.jboss.netty.channel.socket.nio.AbstractNioChannel,org.jboss.netty.channel.ChannelFuture,int)",
            "org.jboss.netty.handler.ssl.SslHandler:void channelClosed(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.handler.timeout.IdleStateHandler:void fireChannelIdle(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.handler.timeout.IdleState,long)",
            "org.jboss.netty.handler.timeout.ReadTimeoutHandler$ReadTimeoutTask:void fireReadTimedOut(org.jboss.netty.channel.ChannelHandlerContext)",
            "org.jboss.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask:void fireWriteTimeOut(org.jboss.netty.channel.ChannelHandlerContext)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.AbstractNioChannelSink:org.jboss.netty.channel.ChannelFuture execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.DefaultChannelPipeline:org.jboss.netty.channel.ChannelFuture execute(java.lang.Runnable)",
            "org.jboss.netty.channel.StaticChannelPipeline:org.jboss.netty.channel.ChannelFuture execute(java.lang.Runnable)"
        ]
    },
    "org.jboss.netty.channel.socket.oio.AbstractOioChannelSink:org.jboss.netty.channel.ChannelFuture execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.DefaultChannelPipeline:org.jboss.netty.channel.ChannelFuture execute(java.lang.Runnable)",
            "org.jboss.netty.channel.StaticChannelPipeline:org.jboss.netty.channel.ChannelFuture execute(java.lang.Runnable)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.AbstractNioSelector:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void run()",
            "org.jboss.netty.channel.socket.nio.NioClientBoss:void run()",
            "org.jboss.netty.channel.socket.nio.NioServerBoss:void run()"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioDatagramWorker:void executeInIoThread(java.lang.Runnable,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void executeInIoThread(java.lang.Runnable)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioWorker:void executeInIoThread(java.lang.Runnable,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void executeInIoThread(java.lang.Runnable)"
        ]
    },
    "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor:void doExecute(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor:void execute(java.lang.Runnable)"
        ]
    },
    "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor$ChildExecutor:void execute(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.execution.ChainedExecutor:void execute(java.lang.Runnable)",
            "org.jboss.netty.handler.execution.ExecutionHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.execution.ExecutionHandler:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor:void doExecute(java.lang.Runnable)",
            "org.jboss.netty.handler.ssl.SslHandler:void runDelegatedTasks()",
            "org.jboss.netty.util.VirtualExecutorService:void execute(java.lang.Runnable)",
            "org.jboss.netty.util.internal.DeadLockProofWorker:void start(java.util.concurrent.Executor,java.lang.Runnable)",
            "org.jboss.netty.util.internal.UnterminatableExecutor:void execute(java.lang.Runnable)"
        ]
    },
    "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor:void execute(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Coordinator:void execute(org.onlab.stc.Step)",
            "org.onlab.util.SharedExecutorService:void execute(java.lang.Runnable)",
            "org.jboss.netty.handler.execution.ChainedExecutor:void execute(java.lang.Runnable)",
            "org.jboss.netty.handler.execution.ExecutionHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.execution.ExecutionHandler:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor:void doExecute(java.lang.Runnable)",
            "org.jboss.netty.handler.ssl.SslHandler:void runDelegatedTasks()",
            "org.jboss.netty.util.VirtualExecutorService:void execute(java.lang.Runnable)",
            "org.jboss.netty.util.internal.DeadLockProofWorker:void start(java.util.concurrent.Executor,java.lang.Runnable)",
            "org.jboss.netty.util.internal.UnterminatableExecutor:void execute(java.lang.Runnable)"
        ]
    },
    "org.jboss.netty.handler.execution.OrderedDownstreamThreadPoolExecutor:void execute(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Coordinator:void execute(org.onlab.stc.Step)",
            "org.onlab.util.SharedExecutorService:void execute(java.lang.Runnable)",
            "org.jboss.netty.handler.execution.ChainedExecutor:void execute(java.lang.Runnable)",
            "org.jboss.netty.handler.execution.ExecutionHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.execution.ExecutionHandler:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor:void doExecute(java.lang.Runnable)",
            "org.jboss.netty.handler.ssl.SslHandler:void runDelegatedTasks()",
            "org.jboss.netty.util.VirtualExecutorService:void execute(java.lang.Runnable)",
            "org.jboss.netty.util.internal.DeadLockProofWorker:void start(java.util.concurrent.Executor,java.lang.Runnable)",
            "org.jboss.netty.util.internal.UnterminatableExecutor:void execute(java.lang.Runnable)"
        ]
    },
    "org.jboss.netty.handler.ssl.SslHandler:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.DefaultChannelPipeline:void sendDownstream(org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.StaticChannelPipeline:void sendDownstream(org.jboss.netty.channel.StaticChannelPipeline$StaticChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.DefaultChannelPipeline:void sendDownstream(org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext:void sendDownstream(org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.DefaultChannelPipeline:void sendDownstream(org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.StaticChannelPipeline:void sendDownstream(org.jboss.netty.channel.StaticChannelPipeline$StaticChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.StaticChannelPipeline$StaticChannelHandlerContext:void sendDownstream(org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.StaticChannelPipeline:void sendDownstream(org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.DefaultChannelPipeline:void callBeforeRemove(org.jboss.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.DefaultChannelPipeline:org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext remove(org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext)",
            "org.jboss.netty.channel.DefaultChannelPipeline:org.jboss.netty.channel.ChannelHandler removeFirst()",
            "org.jboss.netty.channel.DefaultChannelPipeline:org.jboss.netty.channel.ChannelHandler removeLast()",
            "org.jboss.netty.channel.DefaultChannelPipeline:org.jboss.netty.channel.ChannelHandler replace(org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext,java.lang.String,org.jboss.netty.channel.ChannelHandler)"
        ]
    },
    "org.jboss.netty.channel.StaticChannelPipeline:void callBeforeRemove(org.jboss.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.StaticChannelPipeline:void callAfterAdd(org.jboss.netty.channel.ChannelHandlerContext)"
        ]
    },
    "org.jboss.netty.channel.ChannelLocal:java.lang.Object get(org.jboss.netty.channel.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.ChannelLocal:java.lang.Object setIfAbsent(org.jboss.netty.channel.Channel,java.lang.Object)"
        ]
    },
    "org.jboss.netty.channel.group.DefaultChannelGroup:boolean add(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Compiler:void lambda$compileRequirements$7(org.onlab.stc.Step,java.lang.String)",
            "org.onlab.stc.Coordinator:void addListener(org.onlab.stc.StepProcessListener)",
            "org.onlab.stc.Group:void addChild(org.onlab.stc.Step)",
            "org.onlab.stc.MonitorWebSocketServlet:org.eclipse.jetty.websocket.WebSocket doWebSocketConnect(javax.servlet.http.HttpServletRequest,java.lang.String)",
            "org.onlab.graph.AbstractGraphPathSearch$DefaultResult:void updateVertex(org.onlab.graph.Vertex,org.onlab.graph.Edge,double,boolean)",
            "org.onlab.graph.AbstractGraphPathSearch:void buildAllPaths(org.onlab.graph.AbstractGraphPathSearch$DefaultResult,org.onlab.graph.Vertex,org.onlab.graph.Vertex,int)",
            "org.onlab.graph.KShortestPathsSearch:org.onlab.graph.GraphPathSearch$Result search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)",
            "org.onlab.graph.KShortestPathsSearch:void lambda$search$37(org.onlab.graph.KShortestPathsSearch$InnerEdgeWeighter,org.onlab.graph.Edge)",
            "org.onlab.graph.KShortestPathsSearch:void lambda$search$36(org.onlab.graph.KShortestPathsSearch$InnerEdgeWeighter,org.onlab.graph.Edge)",
            "org.onlab.graph.MutableAdjacencyListsGraph:void <init>(java.util.Set,java.util.Set)",
            "org.onlab.graph.MutableAdjacencyListsGraph:void addVertex(org.onlab.graph.Vertex)",
            "org.onlab.graph.MutableAdjacencyListsGraph:void addEdge(org.onlab.graph.Edge)",
            "org.jboss.netty.handler.codec.http.CookieEncoder:void addCookie(java.lang.String,java.lang.String)",
            "org.jboss.netty.handler.codec.http.CookieEncoder:void addCookie(org.jboss.netty.handler.codec.http.Cookie)",
            "org.jboss.netty.util.DefaultObjectSizeEstimator:int estimateSize(java.lang.Class,java.util.Set)",
            "org.jboss.netty.util.HashedWheelTimer:org.jboss.netty.util.Timeout newTimeout(org.jboss.netty.util.TimerTask,long,java.util.concurrent.TimeUnit)",
            "org.jboss.netty.util.VirtualExecutorService$ChildExecutorRunnable:void run()",
            "org.apache.commons.lang.builder.HashCodeBuilder:void register(java.lang.Object)",
            "org.apache.commons.lang.CharSet:void add(java.lang.String)",
            "org.apache.commons.lang3.builder.EqualsBuilder:void register(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang3.builder.HashCodeBuilder:void register(java.lang.Object)",
            "org.apache.commons.lang3.CharSet:void add(java.lang.String)",
            "org.apache.commons.lang3.ClassUtils$2$1:java.lang.Class next()",
            "org.apache.commons.lang3.ClassUtils$2$1:void walkInterfaces(java.util.Set,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.CollectionSerializer:java.util.Collection read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.CollectionSerializer:java.util.Collection copy(com.esotericsoftware.kryo.Kryo,java.util.Collection)"
        ]
    },
    "org.jboss.netty.channel.group.DefaultChannelGroup:org.jboss.netty.channel.group.ChannelGroupFuture close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.local.DefaultLocalServerChannelFactory:void releaseExternalResources()"
        ]
    },
    "org.jboss.netty.channel.group.DefaultChannelGroup:org.jboss.netty.channel.group.ChannelGroupFuture disconnect()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.channel.group.DefaultChannelGroup:org.jboss.netty.channel.group.ChannelGroupFuture setInterestOps(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.channel.group.DefaultChannelGroup:org.jboss.netty.channel.group.ChannelGroupFuture setReadable(boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.channel.group.DefaultChannelGroup:org.jboss.netty.channel.group.ChannelGroupFuture unbind()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.channel.group.DefaultChannelGroup:org.jboss.netty.channel.group.ChannelGroupFuture write(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.channel.group.DefaultChannelGroup:org.jboss.netty.channel.group.ChannelGroupFuture write(java.lang.Object,java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketPipelineSink:void eventSunk(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext:void sendDownstream(org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.DefaultChannelPipeline:void sendDownstream(org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.StaticChannelPipeline$StaticChannelHandlerContext:void sendDownstream(org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.StaticChannelPipeline:void sendDownstream(org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.compression.JdkZlibEncoder:org.jboss.netty.channel.ChannelFuture close()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.compression.JdkZlibEncoder:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.DefaultChannelPipeline:void sendDownstream(org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.StaticChannelPipeline:void sendDownstream(org.jboss.netty.channel.StaticChannelPipeline$StaticChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.compression.ZlibEncoder:org.jboss.netty.channel.ChannelFuture close()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.compression.ZlibEncoder:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.DefaultChannelPipeline:void sendDownstream(org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.StaticChannelPipeline:void sendDownstream(org.jboss.netty.channel.StaticChannelPipeline$StaticChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.SpdyHttpEncoder:void writeChunk(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelFuture,int,org.jboss.netty.handler.codec.http.HttpChunk,java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.spdy.SpdyHttpEncoder:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.SpdyHttpEncoder:org.jboss.netty.channel.ChannelFuture getMessageFuture(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent,int,org.jboss.netty.handler.codec.http.HttpMessage)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.spdy.SpdyHttpEncoder:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:void access$000(org.jboss.netty.handler.codec.spdy.SpdySessionHandler,org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.net.SocketAddress,org.jboss.netty.handler.codec.spdy.SpdySessionStatus)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.spdy.SpdySessionHandler$1:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.handler.codec.spdy.SpdySessionHandler$2:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.handler.codec.spdy.SpdySessionHandler$3:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.handler.codec.spdy.SpdySessionHandler$4:void operationComplete(org.jboss.netty.channel.ChannelFuture)"
        ]
    },
    "org.jboss.netty.handler.queue.BufferedWriteHandler:void flush(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.queue.BufferedWriteHandler:void flush()",
            "org.jboss.netty.handler.queue.BufferedWriteHandler:void flush(boolean)",
            "org.jboss.netty.handler.queue.BufferedWriteHandler:void disconnectRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.handler.queue.BufferedWriteHandler:void closeRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.handler.queue.BufferedWriteHandler:void beforeRemove(org.jboss.netty.channel.ChannelHandlerContext)"
        ]
    },
    "org.jboss.netty.channel.SimpleChannelDownstreamHandler:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.DefaultChannelPipeline:void sendDownstream(org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.StaticChannelPipeline:void sendDownstream(org.jboss.netty.channel.StaticChannelPipeline$StaticChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.bootstrap.ServerBootstrap:org.jboss.netty.channel.ChannelFuture bindAsync(java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.bootstrap.ServerBootstrap:org.jboss.netty.channel.Channel bind(java.net.SocketAddress)",
            "org.jboss.netty.bootstrap.ServerBootstrap:org.jboss.netty.channel.ChannelFuture bindAsync()"
        ]
    },
    "org.jboss.netty.channel.DefaultChannelFuture:boolean setSuccess()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.bootstrap.ServerBootstrap$1:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.bootstrap.ServerBootstrap$Binder$1:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.AbstractChannel$ChannelCloseFuture:boolean setClosed()",
            "org.jboss.netty.channel.ChannelFutureNotifier:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.local.DefaultLocalChannel:void closeNow(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.local.DefaultLocalChannel:void flushWriteBuffer()",
            "org.jboss.netty.channel.local.LocalClientChannelSink:void eventSunk(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.local.LocalClientChannelSink:void bind(org.jboss.netty.channel.local.DefaultLocalChannel,org.jboss.netty.channel.ChannelFuture,org.jboss.netty.channel.local.LocalAddress)",
            "org.jboss.netty.channel.local.LocalClientChannelSink:void connect(org.jboss.netty.channel.local.DefaultLocalChannel,org.jboss.netty.channel.ChannelFuture,org.jboss.netty.channel.local.LocalAddress)",
            "org.jboss.netty.channel.local.LocalServerChannelSink:void handleAcceptedChannel(org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.local.LocalServerChannelSink:void bind(org.jboss.netty.channel.local.DefaultLocalServerChannel,org.jboss.netty.channel.ChannelFuture,org.jboss.netty.channel.local.LocalAddress)",
            "org.jboss.netty.channel.local.LocalServerChannelSink:void close(org.jboss.netty.channel.local.DefaultLocalServerChannel,org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.socket.ChannelRunnableWrapper:void run()",
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$1:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$2$1:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$2:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$3:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$4:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$5$1:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$6$1:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$7$1:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void write0(org.jboss.netty.channel.socket.nio.AbstractNioChannel)",
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void close(org.jboss.netty.channel.socket.nio.AbstractNioChannel,org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void setInterestOps(org.jboss.netty.channel.socket.nio.AbstractNioChannel,org.jboss.netty.channel.ChannelFuture,int)",
            "org.jboss.netty.channel.socket.nio.NioClientSocketPipelineSink:void bind(org.jboss.netty.channel.socket.nio.NioClientSocketChannel,org.jboss.netty.channel.ChannelFuture,java.net.SocketAddress)",
            "org.jboss.netty.channel.socket.nio.NioDatagramPipelineSink:void close(org.jboss.netty.channel.socket.nio.NioDatagramChannel,org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.socket.nio.NioDatagramPipelineSink:void bind(org.jboss.netty.channel.socket.nio.NioDatagramChannel,org.jboss.netty.channel.ChannelFuture,java.net.InetSocketAddress)",
            "org.jboss.netty.channel.socket.nio.NioDatagramPipelineSink:void connect(org.jboss.netty.channel.socket.nio.NioDatagramChannel,org.jboss.netty.channel.ChannelFuture,java.net.InetSocketAddress)",
            "org.jboss.netty.channel.socket.nio.NioDatagramWorker$ChannelRegistionTask:void run()",
            "org.jboss.netty.channel.socket.nio.NioDatagramWorker:void disconnect(org.jboss.netty.channel.socket.nio.NioDatagramChannel,org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.socket.nio.NioDatagramWorker:void write0(org.jboss.netty.channel.socket.nio.AbstractNioChannel)",
            "org.jboss.netty.channel.socket.nio.NioServerBoss$RegisterTask:void run()",
            "org.jboss.netty.channel.socket.nio.NioServerBoss:void close(org.jboss.netty.channel.socket.nio.NioServerSocketChannel,org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.socket.nio.NioWorker$RegisterTask:void run()",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void setInterestOps(org.jboss.netty.channel.socket.oio.AbstractOioChannel,org.jboss.netty.channel.ChannelFuture,int)",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void close(org.jboss.netty.channel.socket.oio.AbstractOioChannel,org.jboss.netty.channel.ChannelFuture,boolean)",
            "org.jboss.netty.channel.socket.oio.OioClientSocketPipelineSink:void bind(org.jboss.netty.channel.socket.oio.OioClientSocketChannel,org.jboss.netty.channel.ChannelFuture,java.net.SocketAddress)",
            "org.jboss.netty.channel.socket.oio.OioClientSocketPipelineSink:void connect(org.jboss.netty.channel.socket.oio.OioClientSocketChannel,org.jboss.netty.channel.ChannelFuture,java.net.SocketAddress)",
            "org.jboss.netty.channel.socket.oio.OioDatagramPipelineSink:void bind(org.jboss.netty.channel.socket.oio.OioDatagramChannel,org.jboss.netty.channel.ChannelFuture,java.net.SocketAddress)",
            "org.jboss.netty.channel.socket.oio.OioDatagramPipelineSink:void connect(org.jboss.netty.channel.socket.oio.OioDatagramChannel,org.jboss.netty.channel.ChannelFuture,java.net.SocketAddress)",
            "org.jboss.netty.channel.socket.oio.OioDatagramWorker:void write(org.jboss.netty.channel.socket.oio.OioDatagramChannel,org.jboss.netty.channel.ChannelFuture,java.lang.Object,java.net.SocketAddress)",
            "org.jboss.netty.channel.socket.oio.OioDatagramWorker:void disconnect(org.jboss.netty.channel.socket.oio.OioDatagramChannel,org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.socket.oio.OioServerSocketPipelineSink:void bind(org.jboss.netty.channel.socket.oio.OioServerSocketChannel,org.jboss.netty.channel.ChannelFuture,java.net.SocketAddress)",
            "org.jboss.netty.channel.socket.oio.OioServerSocketPipelineSink:void close(org.jboss.netty.channel.socket.oio.OioServerSocketChannel,org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.socket.oio.OioWorker:void write(org.jboss.netty.channel.socket.oio.OioSocketChannel,org.jboss.netty.channel.ChannelFuture,java.lang.Object)",
            "org.jboss.netty.handler.codec.embedder.EncoderEmbedder:boolean offer(java.lang.Object)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker00$1:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker07$1:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker08$1:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker13$1:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.handler.codec.spdy.SpdyHttpEncoder:void writeChunk(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelFuture,int,org.jboss.netty.handler.codec.http.HttpChunk,java.net.SocketAddress)",
            "org.jboss.netty.handler.codec.spdy.SpdySessionHandler$ClosingChannelFutureListener:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.handler.execution.ExecutionHandler:boolean handleReadSuspend(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.queue.BufferedWriteHandler$1:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.handler.ssl.SslHandler$ClosingChannelFutureListener:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.handler.ssl.SslHandler$SSLEngineInboundCloseFuture:void setClosed()",
            "org.jboss.netty.handler.ssl.SslHandler:void setHandshakeSuccess(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.handler.traffic.AbstractTrafficShapingHandler:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.DefaultChannelFuture:boolean setFailure(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.bootstrap.ServerBootstrap$1:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.bootstrap.ServerBootstrap$Binder$1:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.bootstrap.ServerBootstrap$Binder:void exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ExceptionEvent)",
            "org.jboss.netty.channel.ChannelFutureNotifier:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.DefaultChannelPipeline:void sendDownstream(org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.StaticChannelPipeline:void sendDownstream(org.jboss.netty.channel.StaticChannelPipeline$StaticChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.local.DefaultLocalChannel:void flushWriteBuffer()",
            "org.jboss.netty.channel.local.LocalClientChannelSink:void bind(org.jboss.netty.channel.local.DefaultLocalChannel,org.jboss.netty.channel.ChannelFuture,org.jboss.netty.channel.local.LocalAddress)",
            "org.jboss.netty.channel.local.LocalClientChannelSink:void connect(org.jboss.netty.channel.local.DefaultLocalChannel,org.jboss.netty.channel.ChannelFuture,org.jboss.netty.channel.local.LocalAddress)",
            "org.jboss.netty.channel.local.LocalServerChannelSink:void bind(org.jboss.netty.channel.local.DefaultLocalServerChannel,org.jboss.netty.channel.ChannelFuture,org.jboss.netty.channel.local.LocalAddress)",
            "org.jboss.netty.channel.local.LocalServerChannelSink:void close(org.jboss.netty.channel.local.DefaultLocalServerChannel,org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.socket.ChannelRunnableWrapper:void run()",
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$1:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$2$1:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$2:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$3:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$4:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$5$1:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$6$1:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$7$1:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void write0(org.jboss.netty.channel.socket.nio.AbstractNioChannel)",
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void close(org.jboss.netty.channel.socket.nio.AbstractNioChannel,org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void cleanUpWriteBuffer(org.jboss.netty.channel.socket.nio.AbstractNioChannel)",
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void setInterestOps(org.jboss.netty.channel.socket.nio.AbstractNioChannel,org.jboss.netty.channel.ChannelFuture,int)",
            "org.jboss.netty.channel.socket.nio.NioClientBoss:void processSelectedKeys(java.util.Set)",
            "org.jboss.netty.channel.socket.nio.NioClientBoss:void processConnectTimeout(java.util.Set,long)",
            "org.jboss.netty.channel.socket.nio.NioClientSocketPipelineSink$1:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.socket.nio.NioClientSocketPipelineSink:void bind(org.jboss.netty.channel.socket.nio.NioClientSocketChannel,org.jboss.netty.channel.ChannelFuture,java.net.SocketAddress)",
            "org.jboss.netty.channel.socket.nio.NioClientSocketPipelineSink:void connect(org.jboss.netty.channel.socket.nio.NioClientSocketChannel,org.jboss.netty.channel.ChannelFuture,java.net.SocketAddress)",
            "org.jboss.netty.channel.socket.nio.NioDatagramPipelineSink:void close(org.jboss.netty.channel.socket.nio.NioDatagramChannel,org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.socket.nio.NioDatagramPipelineSink:void bind(org.jboss.netty.channel.socket.nio.NioDatagramChannel,org.jboss.netty.channel.ChannelFuture,java.net.InetSocketAddress)",
            "org.jboss.netty.channel.socket.nio.NioDatagramPipelineSink:void connect(org.jboss.netty.channel.socket.nio.NioDatagramChannel,org.jboss.netty.channel.ChannelFuture,java.net.InetSocketAddress)",
            "org.jboss.netty.channel.socket.nio.NioDatagramWorker$ChannelRegistionTask:void run()",
            "org.jboss.netty.channel.socket.nio.NioDatagramWorker:void disconnect(org.jboss.netty.channel.socket.nio.NioDatagramChannel,org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.socket.nio.NioDatagramWorker:void write0(org.jboss.netty.channel.socket.nio.AbstractNioChannel)",
            "org.jboss.netty.channel.socket.nio.NioServerBoss$RegisterTask:void run()",
            "org.jboss.netty.channel.socket.nio.NioServerBoss:void close(org.jboss.netty.channel.socket.nio.NioServerSocketChannel,org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.socket.nio.NioWorker$RegisterTask:void run()",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void setInterestOps(org.jboss.netty.channel.socket.oio.AbstractOioChannel,org.jboss.netty.channel.ChannelFuture,int)",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void close(org.jboss.netty.channel.socket.oio.AbstractOioChannel,org.jboss.netty.channel.ChannelFuture,boolean)",
            "org.jboss.netty.channel.socket.oio.OioClientSocketPipelineSink:void bind(org.jboss.netty.channel.socket.oio.OioClientSocketChannel,org.jboss.netty.channel.ChannelFuture,java.net.SocketAddress)",
            "org.jboss.netty.channel.socket.oio.OioClientSocketPipelineSink:void connect(org.jboss.netty.channel.socket.oio.OioClientSocketChannel,org.jboss.netty.channel.ChannelFuture,java.net.SocketAddress)",
            "org.jboss.netty.channel.socket.oio.OioDatagramPipelineSink:void bind(org.jboss.netty.channel.socket.oio.OioDatagramChannel,org.jboss.netty.channel.ChannelFuture,java.net.SocketAddress)",
            "org.jboss.netty.channel.socket.oio.OioDatagramPipelineSink:void connect(org.jboss.netty.channel.socket.oio.OioDatagramChannel,org.jboss.netty.channel.ChannelFuture,java.net.SocketAddress)",
            "org.jboss.netty.channel.socket.oio.OioDatagramWorker:void write(org.jboss.netty.channel.socket.oio.OioDatagramChannel,org.jboss.netty.channel.ChannelFuture,java.lang.Object,java.net.SocketAddress)",
            "org.jboss.netty.channel.socket.oio.OioDatagramWorker:void disconnect(org.jboss.netty.channel.socket.oio.OioDatagramChannel,org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.socket.oio.OioServerSocketPipelineSink:void bind(org.jboss.netty.channel.socket.oio.OioServerSocketChannel,org.jboss.netty.channel.ChannelFuture,java.net.SocketAddress)",
            "org.jboss.netty.channel.socket.oio.OioServerSocketPipelineSink:void close(org.jboss.netty.channel.socket.oio.OioServerSocketChannel,org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.socket.oio.OioWorker:void write(org.jboss.netty.channel.socket.oio.OioSocketChannel,org.jboss.netty.channel.ChannelFuture,java.lang.Object)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker00$1:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker07$1:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker08$1:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker13$1:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.handler.codec.spdy.SpdyHttpEncoder$SpdyFrameWriter:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:void removeStream(int,boolean)",
            "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor:java.util.List shutdownNow(boolean)",
            "org.jboss.netty.handler.queue.BufferedWriteHandler$1:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.handler.queue.BufferedWriteHandler:void channelClosed(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.handler.queue.BufferedWriteHandler:void afterRemove(org.jboss.netty.channel.ChannelHandlerContext)",
            "org.jboss.netty.handler.ssl.SslHandler$2:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.handler.ssl.SslHandler$7:void run()",
            "org.jboss.netty.handler.ssl.SslHandler:org.jboss.netty.channel.ChannelFuture handshake()",
            "org.jboss.netty.handler.ssl.SslHandler:void channelDisconnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.handler.ssl.SslHandler:void wrap(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel)",
            "org.jboss.netty.handler.ssl.SslHandler:void setHandshakeFailure(org.jboss.netty.channel.Channel,javax.net.ssl.SSLException)",
            "org.jboss.netty.handler.ssl.SslHandler:void afterRemove(org.jboss.netty.channel.ChannelHandlerContext)",
            "org.jboss.netty.handler.stream.ChunkedWriteHandler$2:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.handler.stream.ChunkedWriteHandler:void discard(org.jboss.netty.channel.ChannelHandlerContext,boolean)",
            "org.jboss.netty.handler.stream.ChunkedWriteHandler:void flush(org.jboss.netty.channel.ChannelHandlerContext,boolean)",
            "org.jboss.netty.handler.stream.ChunkedWriteHandler:void afterRemove(org.jboss.netty.channel.ChannelHandlerContext)",
            "org.jboss.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask:void run(org.jboss.netty.util.Timeout)"
        ]
    },
    "org.jboss.netty.channel.DefaultChannelFuture:boolean cancel()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.ChannelRunnableWrapper:boolean cancel()",
            "org.jboss.netty.handler.codec.spdy.SpdyHttpEncoder$SpdyFrameWriter:void operationComplete(org.jboss.netty.channel.ChannelFuture)"
        ]
    },
    "org.jboss.netty.channel.local.DefaultLocalClientChannelFactory:org.jboss.netty.channel.Channel newChannel(org.jboss.netty.channel.ChannelPipeline)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.bootstrap.ClientBootstrap:org.jboss.netty.channel.ChannelFuture connect(java.net.SocketAddress,java.net.SocketAddress)",
            "org.jboss.netty.bootstrap.ClientBootstrap:org.jboss.netty.channel.ChannelFuture bind(java.net.SocketAddress)",
            "org.jboss.netty.bootstrap.ConnectionlessBootstrap:org.jboss.netty.channel.Channel bind(java.net.SocketAddress)",
            "org.jboss.netty.bootstrap.ConnectionlessBootstrap:org.jboss.netty.channel.ChannelFuture connect(java.net.SocketAddress,java.net.SocketAddress)",
            "org.jboss.netty.bootstrap.ServerBootstrap:org.jboss.netty.channel.ChannelFuture bindAsync(java.net.SocketAddress)",
            "org.jboss.netty.channel.socket.http.HttpTunnelingServlet:void service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.jboss.netty.channel.local.DefaultLocalServerChannelFactory:org.jboss.netty.channel.ServerChannel newChannel(org.jboss.netty.channel.ChannelPipeline)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.channel.local.DefaultLocalServerChannelFactory:org.jboss.netty.channel.Channel newChannel(org.jboss.netty.channel.ChannelPipeline)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.bootstrap.ClientBootstrap:org.jboss.netty.channel.ChannelFuture connect(java.net.SocketAddress,java.net.SocketAddress)",
            "org.jboss.netty.bootstrap.ClientBootstrap:org.jboss.netty.channel.ChannelFuture bind(java.net.SocketAddress)",
            "org.jboss.netty.bootstrap.ConnectionlessBootstrap:org.jboss.netty.channel.Channel bind(java.net.SocketAddress)",
            "org.jboss.netty.bootstrap.ConnectionlessBootstrap:org.jboss.netty.channel.ChannelFuture connect(java.net.SocketAddress,java.net.SocketAddress)",
            "org.jboss.netty.bootstrap.ServerBootstrap:org.jboss.netty.channel.ChannelFuture bindAsync(java.net.SocketAddress)",
            "org.jboss.netty.channel.socket.http.HttpTunnelingServlet:void service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannelFactory:org.jboss.netty.channel.Channel newChannel(org.jboss.netty.channel.ChannelPipeline)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.bootstrap.ClientBootstrap:org.jboss.netty.channel.ChannelFuture connect(java.net.SocketAddress,java.net.SocketAddress)",
            "org.jboss.netty.bootstrap.ClientBootstrap:org.jboss.netty.channel.ChannelFuture bind(java.net.SocketAddress)",
            "org.jboss.netty.bootstrap.ConnectionlessBootstrap:org.jboss.netty.channel.Channel bind(java.net.SocketAddress)",
            "org.jboss.netty.bootstrap.ConnectionlessBootstrap:org.jboss.netty.channel.ChannelFuture connect(java.net.SocketAddress,java.net.SocketAddress)",
            "org.jboss.netty.bootstrap.ServerBootstrap:org.jboss.netty.channel.ChannelFuture bindAsync(java.net.SocketAddress)",
            "org.jboss.netty.channel.socket.http.HttpTunnelingServlet:void service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioServerBoss:void process(java.nio.channels.Selector)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.AbstractNioSelector:void run()"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioClientSocketChannelFactory:org.jboss.netty.channel.Channel newChannel(org.jboss.netty.channel.ChannelPipeline)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.bootstrap.ClientBootstrap:org.jboss.netty.channel.ChannelFuture connect(java.net.SocketAddress,java.net.SocketAddress)",
            "org.jboss.netty.bootstrap.ClientBootstrap:org.jboss.netty.channel.ChannelFuture bind(java.net.SocketAddress)",
            "org.jboss.netty.bootstrap.ConnectionlessBootstrap:org.jboss.netty.channel.Channel bind(java.net.SocketAddress)",
            "org.jboss.netty.bootstrap.ConnectionlessBootstrap:org.jboss.netty.channel.ChannelFuture connect(java.net.SocketAddress,java.net.SocketAddress)",
            "org.jboss.netty.bootstrap.ServerBootstrap:org.jboss.netty.channel.ChannelFuture bindAsync(java.net.SocketAddress)",
            "org.jboss.netty.channel.socket.http.HttpTunnelingServlet:void service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioDatagramChannelFactory:org.jboss.netty.channel.Channel newChannel(org.jboss.netty.channel.ChannelPipeline)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.bootstrap.ClientBootstrap:org.jboss.netty.channel.ChannelFuture connect(java.net.SocketAddress,java.net.SocketAddress)",
            "org.jboss.netty.bootstrap.ClientBootstrap:org.jboss.netty.channel.ChannelFuture bind(java.net.SocketAddress)",
            "org.jboss.netty.bootstrap.ConnectionlessBootstrap:org.jboss.netty.channel.Channel bind(java.net.SocketAddress)",
            "org.jboss.netty.bootstrap.ConnectionlessBootstrap:org.jboss.netty.channel.ChannelFuture connect(java.net.SocketAddress,java.net.SocketAddress)",
            "org.jboss.netty.bootstrap.ServerBootstrap:org.jboss.netty.channel.ChannelFuture bindAsync(java.net.SocketAddress)",
            "org.jboss.netty.channel.socket.http.HttpTunnelingServlet:void service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioServerSocketChannelFactory:org.jboss.netty.channel.ServerChannel newChannel(org.jboss.netty.channel.ChannelPipeline)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.channel.socket.nio.NioServerSocketChannelFactory:org.jboss.netty.channel.Channel newChannel(org.jboss.netty.channel.ChannelPipeline)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.bootstrap.ClientBootstrap:org.jboss.netty.channel.ChannelFuture connect(java.net.SocketAddress,java.net.SocketAddress)",
            "org.jboss.netty.bootstrap.ClientBootstrap:org.jboss.netty.channel.ChannelFuture bind(java.net.SocketAddress)",
            "org.jboss.netty.bootstrap.ConnectionlessBootstrap:org.jboss.netty.channel.Channel bind(java.net.SocketAddress)",
            "org.jboss.netty.bootstrap.ConnectionlessBootstrap:org.jboss.netty.channel.ChannelFuture connect(java.net.SocketAddress,java.net.SocketAddress)",
            "org.jboss.netty.bootstrap.ServerBootstrap:org.jboss.netty.channel.ChannelFuture bindAsync(java.net.SocketAddress)",
            "org.jboss.netty.channel.socket.http.HttpTunnelingServlet:void service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.jboss.netty.channel.socket.oio.OioClientSocketChannelFactory:org.jboss.netty.channel.Channel newChannel(org.jboss.netty.channel.ChannelPipeline)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.bootstrap.ClientBootstrap:org.jboss.netty.channel.ChannelFuture connect(java.net.SocketAddress,java.net.SocketAddress)",
            "org.jboss.netty.bootstrap.ClientBootstrap:org.jboss.netty.channel.ChannelFuture bind(java.net.SocketAddress)",
            "org.jboss.netty.bootstrap.ConnectionlessBootstrap:org.jboss.netty.channel.Channel bind(java.net.SocketAddress)",
            "org.jboss.netty.bootstrap.ConnectionlessBootstrap:org.jboss.netty.channel.ChannelFuture connect(java.net.SocketAddress,java.net.SocketAddress)",
            "org.jboss.netty.bootstrap.ServerBootstrap:org.jboss.netty.channel.ChannelFuture bindAsync(java.net.SocketAddress)",
            "org.jboss.netty.channel.socket.http.HttpTunnelingServlet:void service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.jboss.netty.channel.socket.oio.OioDatagramChannelFactory:org.jboss.netty.channel.Channel newChannel(org.jboss.netty.channel.ChannelPipeline)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.bootstrap.ClientBootstrap:org.jboss.netty.channel.ChannelFuture connect(java.net.SocketAddress,java.net.SocketAddress)",
            "org.jboss.netty.bootstrap.ClientBootstrap:org.jboss.netty.channel.ChannelFuture bind(java.net.SocketAddress)",
            "org.jboss.netty.bootstrap.ConnectionlessBootstrap:org.jboss.netty.channel.Channel bind(java.net.SocketAddress)",
            "org.jboss.netty.bootstrap.ConnectionlessBootstrap:org.jboss.netty.channel.ChannelFuture connect(java.net.SocketAddress,java.net.SocketAddress)",
            "org.jboss.netty.bootstrap.ServerBootstrap:org.jboss.netty.channel.ChannelFuture bindAsync(java.net.SocketAddress)",
            "org.jboss.netty.channel.socket.http.HttpTunnelingServlet:void service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.jboss.netty.channel.socket.oio.OioServerSocketChannelFactory:org.jboss.netty.channel.ServerChannel newChannel(org.jboss.netty.channel.ChannelPipeline)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.channel.socket.oio.OioServerSocketChannelFactory:org.jboss.netty.channel.Channel newChannel(org.jboss.netty.channel.ChannelPipeline)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.bootstrap.ClientBootstrap:org.jboss.netty.channel.ChannelFuture connect(java.net.SocketAddress,java.net.SocketAddress)",
            "org.jboss.netty.bootstrap.ClientBootstrap:org.jboss.netty.channel.ChannelFuture bind(java.net.SocketAddress)",
            "org.jboss.netty.bootstrap.ConnectionlessBootstrap:org.jboss.netty.channel.Channel bind(java.net.SocketAddress)",
            "org.jboss.netty.bootstrap.ConnectionlessBootstrap:org.jboss.netty.channel.ChannelFuture connect(java.net.SocketAddress,java.net.SocketAddress)",
            "org.jboss.netty.bootstrap.ServerBootstrap:org.jboss.netty.channel.ChannelFuture bindAsync(java.net.SocketAddress)",
            "org.jboss.netty.channel.socket.http.HttpTunnelingServlet:void service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.jboss.netty.handler.codec.embedder.AbstractCodecEmbedder:void <init>(org.jboss.netty.buffer.ChannelBufferFactory,org.jboss.netty.channel.ChannelHandler[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.embedder.DecoderEmbedder:void <init>(org.jboss.netty.buffer.ChannelBufferFactory,org.jboss.netty.channel.ChannelUpstreamHandler[])",
            "org.jboss.netty.handler.codec.embedder.EncoderEmbedder:void <init>(org.jboss.netty.buffer.ChannelBufferFactory,org.jboss.netty.channel.ChannelDownstreamHandler[])"
        ]
    },
    "org.jboss.netty.handler.codec.embedder.DecoderEmbedder:void <init>(org.jboss.netty.channel.ChannelUpstreamHandler[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.HttpContentDecompressor:org.jboss.netty.handler.codec.embedder.DecoderEmbedder newContentDecoder(java.lang.String)",
            "org.jboss.netty.handler.codec.rtsp.RtspMessageDecoder:void <init>(int,int,int)"
        ]
    },
    "org.jboss.netty.handler.codec.embedder.EncoderEmbedder:void <init>(org.jboss.netty.channel.ChannelDownstreamHandler[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.HttpContentCompressor:org.jboss.netty.handler.codec.embedder.EncoderEmbedder newContentEncoder(org.jboss.netty.handler.codec.http.HttpMessage,java.lang.String)"
        ]
    },
    "org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext:void sendDownstream(org.jboss.netty.channel.ChannelEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.Channels:void bind(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelFuture,java.net.SocketAddress)",
            "org.jboss.netty.channel.Channels:void unbind(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.Channels:void connect(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelFuture,java.net.SocketAddress)",
            "org.jboss.netty.channel.Channels:void write(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelFuture,java.lang.Object,java.net.SocketAddress)",
            "org.jboss.netty.channel.Channels:void setInterestOps(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelFuture,int)",
            "org.jboss.netty.channel.Channels:void disconnect(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.Channels:void close(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.SimpleChannelDownstreamHandler:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.SimpleChannelDownstreamHandler:void writeRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.channel.SimpleChannelDownstreamHandler:void bindRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.channel.SimpleChannelDownstreamHandler:void connectRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.channel.SimpleChannelDownstreamHandler:void setInterestOpsRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.channel.SimpleChannelDownstreamHandler:void disconnectRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.channel.SimpleChannelDownstreamHandler:void unbindRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.channel.SimpleChannelDownstreamHandler:void closeRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.channel.SimpleChannelHandler:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.SimpleChannelHandler:void writeRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.channel.SimpleChannelHandler:void bindRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.channel.SimpleChannelHandler:void connectRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.channel.SimpleChannelHandler:void setInterestOpsRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.channel.SimpleChannelHandler:void disconnectRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.channel.SimpleChannelHandler:void unbindRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.channel.SimpleChannelHandler:void closeRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.handler.codec.compression.JdkZlibEncoder$1:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.handler.codec.compression.JdkZlibEncoder:org.jboss.netty.channel.ChannelFuture finishEncode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.codec.compression.ZlibEncoder$1:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.handler.codec.compression.ZlibEncoder:org.jboss.netty.channel.ChannelFuture finishEncode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.codec.http.HttpContentEncoder:void writeRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.codec.oneone.OneToOneEncoder:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.codec.spdy.SpdyFrameEncoder:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.codec.spdy.SpdyHttpEncoder$SpdyFrameWriter:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.handler.codec.spdy.SpdyHttpEncoder:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:void sendGoAwayFrame(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.handler.execution.ChannelDownstreamEventRunnable:void doRun()",
            "org.jboss.netty.handler.execution.ExecutionHandler:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.logging.LoggingHandler:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.queue.BufferedWriteHandler:void flush(boolean)",
            "org.jboss.netty.handler.queue.BufferedWriteHandler:java.util.List consolidatedWrite(java.util.List)",
            "org.jboss.netty.handler.queue.BufferedWriteHandler:void disconnectRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.handler.queue.BufferedWriteHandler:void closeRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.handler.ssl.SslHandler$5:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.handler.ssl.SslHandler:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.ssl.SslHandler:void flushPendingEncryptedWrites(org.jboss.netty.channel.ChannelHandlerContext)",
            "org.jboss.netty.handler.ssl.SslHandler:void closeOutboundAndChannel(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.handler.stream.ChunkedWriteHandler:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.stream.ChunkedWriteHandler:void flush(org.jboss.netty.channel.ChannelHandlerContext,boolean)"
        ]
    },
    "org.jboss.netty.channel.DefaultChannelPipeline:void sendDownstream(org.jboss.netty.channel.ChannelEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.Channels:org.jboss.netty.channel.ChannelFuture bind(org.jboss.netty.channel.Channel,java.net.SocketAddress)",
            "org.jboss.netty.channel.Channels:org.jboss.netty.channel.ChannelFuture unbind(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.channel.Channels:org.jboss.netty.channel.ChannelFuture connect(org.jboss.netty.channel.Channel,java.net.SocketAddress)",
            "org.jboss.netty.channel.Channels:org.jboss.netty.channel.ChannelFuture write(org.jboss.netty.channel.Channel,java.lang.Object,java.net.SocketAddress)",
            "org.jboss.netty.channel.Channels:org.jboss.netty.channel.ChannelFuture setInterestOps(org.jboss.netty.channel.Channel,int)",
            "org.jboss.netty.channel.Channels:org.jboss.netty.channel.ChannelFuture disconnect(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.channel.Channels:org.jboss.netty.channel.ChannelFuture close(org.jboss.netty.channel.Channel)"
        ]
    },
    "org.jboss.netty.channel.StaticChannelPipeline$StaticChannelHandlerContext:void sendDownstream(org.jboss.netty.channel.ChannelEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.Channels:void bind(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelFuture,java.net.SocketAddress)",
            "org.jboss.netty.channel.Channels:void unbind(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.Channels:void connect(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelFuture,java.net.SocketAddress)",
            "org.jboss.netty.channel.Channels:void write(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelFuture,java.lang.Object,java.net.SocketAddress)",
            "org.jboss.netty.channel.Channels:void setInterestOps(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelFuture,int)",
            "org.jboss.netty.channel.Channels:void disconnect(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.Channels:void close(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.SimpleChannelDownstreamHandler:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.SimpleChannelDownstreamHandler:void writeRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.channel.SimpleChannelDownstreamHandler:void bindRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.channel.SimpleChannelDownstreamHandler:void connectRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.channel.SimpleChannelDownstreamHandler:void setInterestOpsRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.channel.SimpleChannelDownstreamHandler:void disconnectRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.channel.SimpleChannelDownstreamHandler:void unbindRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.channel.SimpleChannelDownstreamHandler:void closeRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.channel.SimpleChannelHandler:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.SimpleChannelHandler:void writeRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.channel.SimpleChannelHandler:void bindRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.channel.SimpleChannelHandler:void connectRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.channel.SimpleChannelHandler:void setInterestOpsRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.channel.SimpleChannelHandler:void disconnectRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.channel.SimpleChannelHandler:void unbindRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.channel.SimpleChannelHandler:void closeRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.handler.codec.compression.JdkZlibEncoder$1:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.handler.codec.compression.JdkZlibEncoder:org.jboss.netty.channel.ChannelFuture finishEncode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.codec.compression.ZlibEncoder$1:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.handler.codec.compression.ZlibEncoder:org.jboss.netty.channel.ChannelFuture finishEncode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.codec.http.HttpContentEncoder:void writeRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.codec.oneone.OneToOneEncoder:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.codec.spdy.SpdyFrameEncoder:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.codec.spdy.SpdyHttpEncoder$SpdyFrameWriter:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.handler.codec.spdy.SpdyHttpEncoder:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:void sendGoAwayFrame(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.handler.execution.ChannelDownstreamEventRunnable:void doRun()",
            "org.jboss.netty.handler.execution.ExecutionHandler:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.logging.LoggingHandler:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.queue.BufferedWriteHandler:void flush(boolean)",
            "org.jboss.netty.handler.queue.BufferedWriteHandler:java.util.List consolidatedWrite(java.util.List)",
            "org.jboss.netty.handler.queue.BufferedWriteHandler:void disconnectRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.handler.queue.BufferedWriteHandler:void closeRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.handler.ssl.SslHandler$5:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.handler.ssl.SslHandler:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.ssl.SslHandler:void flushPendingEncryptedWrites(org.jboss.netty.channel.ChannelHandlerContext)",
            "org.jboss.netty.handler.ssl.SslHandler:void closeOutboundAndChannel(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.handler.stream.ChunkedWriteHandler:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.stream.ChunkedWriteHandler:void flush(org.jboss.netty.channel.ChannelHandlerContext,boolean)"
        ]
    },
    "org.jboss.netty.channel.StaticChannelPipeline:void sendDownstream(org.jboss.netty.channel.ChannelEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.Channels:org.jboss.netty.channel.ChannelFuture bind(org.jboss.netty.channel.Channel,java.net.SocketAddress)",
            "org.jboss.netty.channel.Channels:org.jboss.netty.channel.ChannelFuture unbind(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.channel.Channels:org.jboss.netty.channel.ChannelFuture connect(org.jboss.netty.channel.Channel,java.net.SocketAddress)",
            "org.jboss.netty.channel.Channels:org.jboss.netty.channel.ChannelFuture write(org.jboss.netty.channel.Channel,java.lang.Object,java.net.SocketAddress)",
            "org.jboss.netty.channel.Channels:org.jboss.netty.channel.ChannelFuture setInterestOps(org.jboss.netty.channel.Channel,int)",
            "org.jboss.netty.channel.Channels:org.jboss.netty.channel.ChannelFuture disconnect(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.channel.Channels:org.jboss.netty.channel.ChannelFuture close(org.jboss.netty.channel.Channel)"
        ]
    },
    "org.jboss.netty.channel.local.LocalServerChannelSink:void eventSunk(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext:void sendDownstream(org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.DefaultChannelPipeline:void sendDownstream(org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.StaticChannelPipeline$StaticChannelHandlerContext:void sendDownstream(org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.StaticChannelPipeline:void sendDownstream(org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.socket.oio.OioServerSocketPipelineSink:void eventSunk(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext:void sendDownstream(org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.DefaultChannelPipeline:void sendDownstream(org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.StaticChannelPipeline$StaticChannelHandlerContext:void sendDownstream(org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.StaticChannelPipeline:void sendDownstream(org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.http.HttpContentDecoder:org.jboss.netty.buffer.ChannelBuffer decode(org.jboss.netty.buffer.ChannelBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.HttpContentDecoder:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.rtsp.RtspMessageDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.http.HttpMessageDecoder$State)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.HttpMessageDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,java.lang.Enum)",
            "org.jboss.netty.handler.codec.rtsp.RtspMessageDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,java.lang.Enum)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.AbstractNioChannel$WriteTask:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.util.BoundedThreadPool$CallerFeedbackPolicy:void rejectedExecution(java.lang.Runnable,java.util.concurrent.ThreadPoolExecutor)",
            "org.onlab.util.BoundedThreadPool:void execute(java.lang.Runnable)",
            "org.onlab.util.SharedExecutorService:void execute(java.lang.Runnable)",
            "org.jboss.netty.channel.AbstractChannelSink:org.jboss.netty.channel.ChannelFuture execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable)",
            "org.jboss.netty.channel.socket.ChannelRunnableWrapper:void run()",
            "org.jboss.netty.channel.socket.nio.AbstractNioSelector:void processTaskQueue()",
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void executeInIoThread(java.lang.Runnable,boolean)",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void executeInIoThread(java.lang.Runnable)",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void processEventQueue()",
            "org.jboss.netty.handler.codec.embedder.AbstractCodecEmbedder$EmbeddedChannelSink:org.jboss.netty.channel.ChannelFuture execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable)",
            "org.jboss.netty.handler.execution.ChainedExecutor:void execute(java.lang.Runnable)",
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor$MemoryAwareRunnable:void run()",
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor:void doUnorderedExecute(java.lang.Runnable)",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor$ChildExecutor:void run()",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor:void doExecute(java.lang.Runnable)",
            "org.jboss.netty.handler.ssl.ImmediateExecutor:void execute(java.lang.Runnable)",
            "org.jboss.netty.handler.ssl.SslHandler$4:void run()",
            "org.jboss.netty.util.ThreadRenamingRunnable:void run()",
            "org.jboss.netty.util.VirtualExecutorService$ChildExecutorRunnable:void run()",
            "org.jboss.netty.util.internal.DeadLockProofWorker$1:void run()",
            "org.jboss.netty.util.internal.UnterminatableExecutor:void execute(java.lang.Runnable)"
        ]
    },
    "org.jboss.netty.handler.codec.embedder.AbstractCodecEmbedder$EmbeddedChannelSink:void handleEvent(org.jboss.netty.channel.ChannelEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.embedder.AbstractCodecEmbedder$EmbeddedChannelSink:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.codec.embedder.AbstractCodecEmbedder$EmbeddedChannelSink:void eventSunk(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.http.HttpClientCodec$Encoder:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.oneone.OneToOneEncoder:boolean doEncode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)"
        ]
    },
    "com.esotericsoftware.kryo.pool.KryoPoolQueueImpl:void release(com.esotericsoftware.kryo.Kryo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.util.KryoNamespace:void release(com.esotericsoftware.kryo.Kryo)",
            "com.esotericsoftware.kryo.pool.KryoPoolQueueImpl:java.lang.Object run(com.esotericsoftware.kryo.pool.KryoCallback)"
        ]
    },
    "com.esotericsoftware.kryo.pool.SoftReferenceQueue:boolean offer(com.esotericsoftware.kryo.Kryo)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.pool.SoftReferenceQueue:boolean offer(java.lang.Object)"
        ]
    },
    "org.jboss.netty.handler.codec.embedder.AbstractCodecEmbedder:java.lang.Object poll()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.embedder.AbstractCodecEmbedder:java.lang.Object[] pollAll()",
            "org.jboss.netty.handler.codec.embedder.AbstractCodecEmbedder:java.lang.Object[] pollAll(java.lang.Object[])",
            "org.jboss.netty.handler.codec.rtsp.RtspMessageDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.http.HttpMessageDecoder$State)"
        ]
    },
    "org.jboss.netty.handler.codec.http.HttpClientCodec$Decoder:boolean isContentAlwaysEmpty(org.jboss.netty.handler.codec.http.HttpMessage)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.HttpMessageDecoder:org.jboss.netty.handler.codec.http.HttpMessageDecoder$State readHeaders(org.jboss.netty.buffer.ChannelBuffer)"
        ]
    },
    "org.jboss.netty.handler.codec.http.HttpContentEncoder:void writeRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelHandler:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.SpdyHttpResponseStreamIdHandler:void writeRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelHandler:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.queue.BufferedWriteHandler:void afterRemove(org.jboss.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.DefaultChannelPipeline:void callAfterRemove(org.jboss.netty.channel.ChannelHandlerContext)",
            "org.jboss.netty.channel.StaticChannelPipeline:void callAfterRemove(org.jboss.netty.channel.ChannelHandlerContext)"
        ]
    },
    "org.jboss.netty.handler.ssl.SslHandler:void flushPendingEncryptedWrites(org.jboss.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.ssl.SslHandler:void wrap(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel)"
        ]
    },
    "org.jboss.netty.handler.ssl.SslHandler:void afterRemove(org.jboss.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.DefaultChannelPipeline:void callAfterRemove(org.jboss.netty.channel.ChannelHandlerContext)",
            "org.jboss.netty.channel.StaticChannelPipeline:void callAfterRemove(org.jboss.netty.channel.ChannelHandlerContext)"
        ]
    },
    "org.jboss.netty.handler.stream.ChunkedWriteHandler:void afterRemove(org.jboss.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.DefaultChannelPipeline:void callAfterRemove(org.jboss.netty.channel.ChannelHandlerContext)",
            "org.jboss.netty.channel.StaticChannelPipeline:void callAfterRemove(org.jboss.netty.channel.ChannelHandlerContext)"
        ]
    },
    "com.esotericsoftware.kryo.pool.KryoPoolQueueImpl:com.esotericsoftware.kryo.Kryo borrow()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.util.KryoNamespace:com.esotericsoftware.kryo.Kryo borrow()",
            "com.esotericsoftware.kryo.pool.KryoPoolQueueImpl:java.lang.Object run(com.esotericsoftware.kryo.pool.KryoCallback)"
        ]
    },
    "com.esotericsoftware.kryo.pool.SoftReferenceQueue:com.esotericsoftware.kryo.Kryo poll()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.pool.SoftReferenceQueue:java.lang.Object poll()"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioServerSocketPipelineSink:void eventSunk(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext:void sendDownstream(org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.DefaultChannelPipeline:void sendDownstream(org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.StaticChannelPipeline$StaticChannelHandlerContext:void sendDownstream(org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.StaticChannelPipeline:void sendDownstream(org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.AbstractNioSelector:void rebuildSelector()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.NioClientBoss:void rebuildSelector()",
            "org.jboss.netty.channel.socket.nio.NioDatagramWorker:void rebuildSelector()",
            "org.jboss.netty.channel.socket.nio.NioServerBoss:void rebuildSelector()",
            "org.jboss.netty.channel.socket.nio.NioWorker:void rebuildSelector()"
        ]
    },
    "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void setOpWrite(org.jboss.netty.channel.socket.nio.AbstractNioChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void write0(org.jboss.netty.channel.socket.nio.AbstractNioChannel)",
            "org.jboss.netty.channel.socket.nio.NioDatagramWorker:void write0(org.jboss.netty.channel.socket.nio.AbstractNioChannel)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void clearOpWrite(org.jboss.netty.channel.socket.nio.AbstractNioChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void write0(org.jboss.netty.channel.socket.nio.AbstractNioChannel)",
            "org.jboss.netty.channel.socket.nio.NioDatagramWorker:void write0(org.jboss.netty.channel.socket.nio.AbstractNioChannel)"
        ]
    },
    "org.jboss.netty.handler.codec.http.HttpContentDecoder:org.jboss.netty.buffer.ChannelBuffer finishDecode()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.HttpContentDecoder:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.codec.http.HttpContentDecoder:void channelClosed(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.handler.codec.http.HttpContentDecoder:void afterRemove(org.jboss.netty.channel.ChannelHandlerContext)"
        ]
    },
    "org.jboss.netty.handler.codec.http.HttpContentEncoder:org.jboss.netty.buffer.ChannelBuffer finishEncode()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.HttpContentEncoder:void writeRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.codec.http.HttpContentEncoder:void channelClosed(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.handler.codec.http.HttpContentEncoder:void afterRemove(org.jboss.netty.channel.ChannelHandlerContext)"
        ]
    },
    "org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.frame.FrameDecoder:java.lang.Object decodeLast(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.frame.FrameDecoder:void callDecode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,java.net.SocketAddress)",
            "org.jboss.netty.handler.codec.marshalling.MarshallingDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.serialization.ObjectDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)"
        ]
    },
    "org.onlab.stc.Coordinator:void lambda$executeSucessors$13(org.onlab.stc.Dependency)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.stc.Coordinator:void lambda$executeRoots$12(org.onlab.stc.Group,org.onlab.stc.Step)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.channel.socket.nio.AbstractNioSelector:void openSelector(org.jboss.netty.util.ThreadNameDeterminer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.AbstractNioSelector:void <init>(java.util.concurrent.Executor,org.jboss.netty.util.ThreadNameDeterminer)"
        ]
    },
    "org.jboss.netty.channel.Channels:org.jboss.netty.channel.ChannelFuture fireWriteCompleteLater(org.jboss.netty.channel.Channel,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void write0(org.jboss.netty.channel.socket.nio.AbstractNioChannel)",
            "org.jboss.netty.channel.socket.oio.OioDatagramWorker:void write(org.jboss.netty.channel.socket.oio.OioDatagramChannel,org.jboss.netty.channel.ChannelFuture,java.lang.Object,java.net.SocketAddress)",
            "org.jboss.netty.channel.socket.oio.OioWorker:void write(org.jboss.netty.channel.socket.oio.OioSocketChannel,org.jboss.netty.channel.ChannelFuture,java.lang.Object)"
        ]
    },
    "org.jboss.netty.channel.Channels:org.jboss.netty.channel.ChannelFuture fireChannelInterestChangedLater(org.jboss.netty.channel.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void setInterestOps(org.jboss.netty.channel.socket.nio.AbstractNioChannel,org.jboss.netty.channel.ChannelFuture,int)",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void setInterestOps(org.jboss.netty.channel.socket.oio.AbstractOioChannel,org.jboss.netty.channel.ChannelFuture,int)"
        ]
    },
    "org.jboss.netty.channel.Channels:org.jboss.netty.channel.ChannelFuture fireChannelDisconnectedLater(org.jboss.netty.channel.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void close(org.jboss.netty.channel.socket.nio.AbstractNioChannel,org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.socket.nio.NioDatagramWorker:void disconnect(org.jboss.netty.channel.socket.nio.NioDatagramChannel,org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void close(org.jboss.netty.channel.socket.oio.AbstractOioChannel,org.jboss.netty.channel.ChannelFuture,boolean)",
            "org.jboss.netty.channel.socket.oio.OioDatagramWorker:void disconnect(org.jboss.netty.channel.socket.oio.OioDatagramChannel,org.jboss.netty.channel.ChannelFuture)"
        ]
    },
    "org.jboss.netty.channel.Channels:org.jboss.netty.channel.ChannelFuture fireChannelUnboundLater(org.jboss.netty.channel.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void close(org.jboss.netty.channel.socket.nio.AbstractNioChannel,org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void close(org.jboss.netty.channel.socket.oio.AbstractOioChannel,org.jboss.netty.channel.ChannelFuture,boolean)"
        ]
    },
    "org.jboss.netty.channel.Channels:org.jboss.netty.channel.ChannelFuture fireChannelClosedLater(org.jboss.netty.channel.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void close(org.jboss.netty.channel.socket.nio.AbstractNioChannel,org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void close(org.jboss.netty.channel.socket.oio.AbstractOioChannel,org.jboss.netty.channel.ChannelFuture,boolean)"
        ]
    },
    "org.jboss.netty.channel.Channels:org.jboss.netty.channel.ChannelFuture fireExceptionCaughtLater(org.jboss.netty.channel.Channel,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.AbstractChannelSink:void exceptionCaught(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent,org.jboss.netty.channel.ChannelPipelineException)",
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void write0(org.jboss.netty.channel.socket.nio.AbstractNioChannel)",
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void close(org.jboss.netty.channel.socket.nio.AbstractNioChannel,org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void cleanUpWriteBuffer(org.jboss.netty.channel.socket.nio.AbstractNioChannel)",
            "org.jboss.netty.channel.socket.nio.NioDatagramWorker:void disconnect(org.jboss.netty.channel.socket.nio.NioDatagramChannel,org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void setInterestOps(org.jboss.netty.channel.socket.oio.AbstractOioChannel,org.jboss.netty.channel.ChannelFuture,int)",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void close(org.jboss.netty.channel.socket.oio.AbstractOioChannel,org.jboss.netty.channel.ChannelFuture,boolean)",
            "org.jboss.netty.channel.socket.oio.OioDatagramWorker:void write(org.jboss.netty.channel.socket.oio.OioDatagramChannel,org.jboss.netty.channel.ChannelFuture,java.lang.Object,java.net.SocketAddress)",
            "org.jboss.netty.channel.socket.oio.OioDatagramWorker:void disconnect(org.jboss.netty.channel.socket.oio.OioDatagramChannel,org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.socket.oio.OioWorker:void write(org.jboss.netty.channel.socket.oio.OioSocketChannel,org.jboss.netty.channel.ChannelFuture,java.lang.Object)",
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor:java.util.List shutdownNow(boolean)",
            "org.jboss.netty.handler.queue.BufferedWriteHandler:void afterRemove(org.jboss.netty.channel.ChannelHandlerContext)",
            "org.jboss.netty.handler.stream.ChunkedWriteHandler:void discard(org.jboss.netty.channel.ChannelHandlerContext,boolean)",
            "org.jboss.netty.handler.stream.ChunkedWriteHandler:void afterRemove(org.jboss.netty.channel.ChannelHandlerContext)"
        ]
    },
    "org.jboss.netty.channel.Channels:org.jboss.netty.channel.ChannelFuture fireExceptionCaughtLater(org.jboss.netty.channel.ChannelHandlerContext,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.ssl.SslHandler:void afterRemove(org.jboss.netty.channel.ChannelHandlerContext)",
            "org.jboss.netty.handler.stream.ChunkedWriteHandler:void flush(org.jboss.netty.channel.ChannelHandlerContext,boolean)"
        ]
    },
    "org.jboss.netty.handler.timeout.IdleStateHandler:void fireChannelIdle(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.handler.timeout.IdleState,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.timeout.IdleStateHandler:void access$000(org.jboss.netty.handler.timeout.IdleStateHandler,org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.handler.timeout.IdleState,long)"
        ]
    },
    "org.jboss.netty.handler.timeout.ReadTimeoutHandler$ReadTimeoutTask:void fireReadTimedOut(org.jboss.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.timeout.ReadTimeoutHandler$ReadTimeoutTask:void run(org.jboss.netty.util.Timeout)"
        ]
    },
    "org.jboss.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask:void fireWriteTimeOut(org.jboss.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask:void run(org.jboss.netty.util.Timeout)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.NioDatagramWorker:void run()",
            "org.jboss.netty.channel.socket.nio.NioWorker:void run()"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioClientBoss:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.util.BoundedThreadPool$CallerFeedbackPolicy:void rejectedExecution(java.lang.Runnable,java.util.concurrent.ThreadPoolExecutor)",
            "org.onlab.util.BoundedThreadPool:void execute(java.lang.Runnable)",
            "org.onlab.util.SharedExecutorService:void execute(java.lang.Runnable)",
            "org.jboss.netty.channel.AbstractChannelSink:org.jboss.netty.channel.ChannelFuture execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable)",
            "org.jboss.netty.channel.socket.ChannelRunnableWrapper:void run()",
            "org.jboss.netty.channel.socket.nio.AbstractNioSelector:void processTaskQueue()",
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void executeInIoThread(java.lang.Runnable,boolean)",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void executeInIoThread(java.lang.Runnable)",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void processEventQueue()",
            "org.jboss.netty.handler.codec.embedder.AbstractCodecEmbedder$EmbeddedChannelSink:org.jboss.netty.channel.ChannelFuture execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable)",
            "org.jboss.netty.handler.execution.ChainedExecutor:void execute(java.lang.Runnable)",
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor$MemoryAwareRunnable:void run()",
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor:void doUnorderedExecute(java.lang.Runnable)",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor$ChildExecutor:void run()",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor:void doExecute(java.lang.Runnable)",
            "org.jboss.netty.handler.ssl.ImmediateExecutor:void execute(java.lang.Runnable)",
            "org.jboss.netty.handler.ssl.SslHandler$4:void run()",
            "org.jboss.netty.util.ThreadRenamingRunnable:void run()",
            "org.jboss.netty.util.VirtualExecutorService$ChildExecutorRunnable:void run()",
            "org.jboss.netty.util.internal.DeadLockProofWorker$1:void run()",
            "org.jboss.netty.util.internal.UnterminatableExecutor:void execute(java.lang.Runnable)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioServerBoss:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.util.BoundedThreadPool$CallerFeedbackPolicy:void rejectedExecution(java.lang.Runnable,java.util.concurrent.ThreadPoolExecutor)",
            "org.onlab.util.BoundedThreadPool:void execute(java.lang.Runnable)",
            "org.onlab.util.SharedExecutorService:void execute(java.lang.Runnable)",
            "org.jboss.netty.channel.AbstractChannelSink:org.jboss.netty.channel.ChannelFuture execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable)",
            "org.jboss.netty.channel.socket.ChannelRunnableWrapper:void run()",
            "org.jboss.netty.channel.socket.nio.AbstractNioSelector:void processTaskQueue()",
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void executeInIoThread(java.lang.Runnable,boolean)",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void executeInIoThread(java.lang.Runnable)",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void processEventQueue()",
            "org.jboss.netty.handler.codec.embedder.AbstractCodecEmbedder$EmbeddedChannelSink:org.jboss.netty.channel.ChannelFuture execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable)",
            "org.jboss.netty.handler.execution.ChainedExecutor:void execute(java.lang.Runnable)",
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor$MemoryAwareRunnable:void run()",
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor:void doUnorderedExecute(java.lang.Runnable)",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor$ChildExecutor:void run()",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor:void doExecute(java.lang.Runnable)",
            "org.jboss.netty.handler.ssl.ImmediateExecutor:void execute(java.lang.Runnable)",
            "org.jboss.netty.handler.ssl.SslHandler$4:void run()",
            "org.jboss.netty.util.ThreadRenamingRunnable:void run()",
            "org.jboss.netty.util.VirtualExecutorService$ChildExecutorRunnable:void run()",
            "org.jboss.netty.util.internal.DeadLockProofWorker$1:void run()",
            "org.jboss.netty.util.internal.UnterminatableExecutor:void execute(java.lang.Runnable)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void executeInIoThread(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.NioDatagramWorker:void executeInIoThread(java.lang.Runnable)",
            "org.jboss.netty.channel.socket.nio.NioWorker:void executeInIoThread(java.lang.Runnable)"
        ]
    },
    "org.jboss.netty.channel.DefaultChannelPipeline:org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext remove(org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.DefaultChannelPipeline:void remove(org.jboss.netty.channel.ChannelHandler)",
            "org.jboss.netty.channel.DefaultChannelPipeline:org.jboss.netty.channel.ChannelHandler remove(java.lang.String)",
            "org.jboss.netty.channel.DefaultChannelPipeline:org.jboss.netty.channel.ChannelHandler remove(java.lang.Class)",
            "org.jboss.netty.channel.DefaultChannelPipeline:void callAfterAdd(org.jboss.netty.channel.ChannelHandlerContext)"
        ]
    },
    "org.jboss.netty.channel.DefaultChannelPipeline:org.jboss.netty.channel.ChannelHandler removeFirst()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.DefaultChannelPipeline:org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext remove(org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext)",
            "org.jboss.netty.channel.DefaultChannelPipeline:org.jboss.netty.channel.ChannelHandler replace(org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext,java.lang.String,org.jboss.netty.channel.ChannelHandler)"
        ]
    },
    "org.jboss.netty.channel.DefaultChannelPipeline:org.jboss.netty.channel.ChannelHandler removeLast()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.DefaultChannelPipeline:org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext remove(org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext)",
            "org.jboss.netty.channel.DefaultChannelPipeline:org.jboss.netty.channel.ChannelHandler replace(org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext,java.lang.String,org.jboss.netty.channel.ChannelHandler)"
        ]
    },
    "org.jboss.netty.channel.DefaultChannelPipeline:org.jboss.netty.channel.ChannelHandler replace(org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext,java.lang.String,org.jboss.netty.channel.ChannelHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.DefaultChannelPipeline:void replace(org.jboss.netty.channel.ChannelHandler,java.lang.String,org.jboss.netty.channel.ChannelHandler)",
            "org.jboss.netty.channel.DefaultChannelPipeline:org.jboss.netty.channel.ChannelHandler replace(java.lang.String,java.lang.String,org.jboss.netty.channel.ChannelHandler)",
            "org.jboss.netty.channel.DefaultChannelPipeline:org.jboss.netty.channel.ChannelHandler replace(java.lang.Class,java.lang.String,org.jboss.netty.channel.ChannelHandler)"
        ]
    },
    "org.jboss.netty.channel.StaticChannelPipeline:void callAfterAdd(org.jboss.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.StaticChannelPipeline:void <init>(org.jboss.netty.channel.ChannelHandler[])"
        ]
    },
    "org.onlab.stc.Compiler:void lambda$compileRequirements$7(org.onlab.stc.Step,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.stc.Coordinator:void addListener(org.onlab.stc.StepProcessListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Main:void run()",
            "org.onlab.stc.Monitor:void <init>(org.onlab.stc.Coordinator,org.onlab.stc.Compiler)"
        ]
    },
    "org.onlab.stc.Group:void addChild(org.onlab.stc.Step)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Compiler:boolean registerStep(org.onlab.stc.Step,org.apache.commons.configuration.HierarchicalConfiguration,java.lang.String,org.onlab.stc.Group)"
        ]
    },
    "org.onlab.stc.MonitorWebSocketServlet:org.eclipse.jetty.websocket.WebSocket doWebSocketConnect(javax.servlet.http.HttpServletRequest,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.graph.AbstractGraphPathSearch$DefaultResult:void updateVertex(org.onlab.graph.Vertex,org.onlab.graph.Edge,double,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.graph.AbstractGraphPathSearch$DefaultResult:boolean relaxEdge(org.onlab.graph.Edge,double,org.onlab.graph.EdgeWeight,boolean[])",
            "org.onlab.graph.BellmanFordGraphSearch:org.onlab.graph.GraphPathSearch$Result search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)",
            "org.onlab.graph.BreadthFirstSearch:org.onlab.graph.GraphPathSearch$Result search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)",
            "org.onlab.graph.DepthFirstSearch:org.onlab.graph.DepthFirstSearch$SpanningTreeResult search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)",
            "org.onlab.graph.DijkstraGraphSearch:org.onlab.graph.GraphPathSearch$Result search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)"
        ]
    },
    "org.onlab.graph.AbstractGraphPathSearch:void buildAllPaths(org.onlab.graph.AbstractGraphPathSearch$DefaultResult,org.onlab.graph.Vertex,org.onlab.graph.Vertex,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.graph.AbstractGraphPathSearch:void access$100(org.onlab.graph.AbstractGraphPathSearch,org.onlab.graph.AbstractGraphPathSearch$DefaultResult,org.onlab.graph.Vertex,org.onlab.graph.Vertex,int)"
        ]
    },
    "org.onlab.graph.KShortestPathsSearch:org.onlab.graph.GraphPathSearch$Result search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.graph.KShortestPathsSearch:void lambda$search$37(org.onlab.graph.KShortestPathsSearch$InnerEdgeWeighter,org.onlab.graph.Edge)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.graph.KShortestPathsSearch:void lambda$search$36(org.onlab.graph.KShortestPathsSearch$InnerEdgeWeighter,org.onlab.graph.Edge)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.graph.MutableAdjacencyListsGraph:void <init>(java.util.Set,java.util.Set)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.ProcessFlow:void <init>(java.util.Set,java.util.Set)",
            "org.onlab.graph.SuurballeGraphSearch:org.onlab.graph.MutableGraph mutableCopy(org.onlab.graph.Graph)"
        ]
    },
    "org.onlab.graph.MutableAdjacencyListsGraph:void addVertex(org.onlab.graph.Vertex)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.graph.MutableAdjacencyListsGraph:void addEdge(org.onlab.graph.Edge)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.graph.SuurballeGraphSearch:org.onlab.graph.GraphPathSearch$Result search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)"
        ]
    },
    "org.jboss.netty.handler.codec.http.CookieEncoder:void addCookie(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.http.CookieEncoder:void addCookie(org.jboss.netty.handler.codec.http.Cookie)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.util.DefaultObjectSizeEstimator:int estimateSize(java.lang.Class,java.util.Set)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.DefaultObjectSizeEstimator:int estimateSize(java.lang.Object)",
            "org.jboss.netty.util.DefaultObjectSizeEstimator:int estimateSize(java.lang.Class,java.util.Set)"
        ]
    },
    "org.jboss.netty.util.HashedWheelTimer:org.jboss.netty.util.Timeout newTimeout(org.jboss.netty.util.TimerTask,long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.NioClientBoss$RegisterTask:void run()",
            "org.jboss.netty.handler.ssl.SslHandler:org.jboss.netty.channel.ChannelFuture handshake()",
            "org.jboss.netty.handler.timeout.IdleStateHandler$AllIdleTimeoutTask:void run(org.jboss.netty.util.Timeout)",
            "org.jboss.netty.handler.timeout.IdleStateHandler$ReaderIdleTimeoutTask:void run(org.jboss.netty.util.Timeout)",
            "org.jboss.netty.handler.timeout.IdleStateHandler$WriterIdleTimeoutTask:void run(org.jboss.netty.util.Timeout)",
            "org.jboss.netty.handler.timeout.IdleStateHandler:void initialize(org.jboss.netty.channel.ChannelHandlerContext)",
            "org.jboss.netty.handler.timeout.ReadTimeoutHandler$ReadTimeoutTask:void run(org.jboss.netty.util.Timeout)",
            "org.jboss.netty.handler.timeout.ReadTimeoutHandler:void initialize(org.jboss.netty.channel.ChannelHandlerContext)",
            "org.jboss.netty.handler.timeout.WriteTimeoutHandler:void writeRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.traffic.AbstractTrafficShapingHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.traffic.TrafficCounter$TrafficMonitoringTask:void run(org.jboss.netty.util.Timeout)",
            "org.jboss.netty.handler.traffic.TrafficCounter:void start()"
        ]
    },
    "org.apache.commons.lang.builder.HashCodeBuilder:void register(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.builder.HashCodeBuilder:void reflectionAppend(java.lang.Object,java.lang.Class,org.apache.commons.lang.builder.HashCodeBuilder,boolean,java.lang.String[])"
        ]
    },
    "org.apache.commons.lang.CharSet:void add(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.CharSet:void <init>(java.lang.String)",
            "org.apache.commons.lang.CharSet:void <init>(java.lang.String[])"
        ]
    },
    "org.apache.commons.lang3.builder.EqualsBuilder:void register(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.builder.EqualsBuilder:void reflectionAppend(java.lang.Object,java.lang.Object,java.lang.Class,org.apache.commons.lang3.builder.EqualsBuilder,boolean,java.lang.String[])"
        ]
    },
    "org.apache.commons.lang3.builder.HashCodeBuilder:void register(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.builder.HashCodeBuilder:void reflectionAppend(java.lang.Object,java.lang.Class,org.apache.commons.lang3.builder.HashCodeBuilder,boolean,java.lang.String[])"
        ]
    },
    "org.apache.commons.lang3.CharSet:void add(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.CharSet:void <init>(java.lang.String[])"
        ]
    },
    "org.apache.commons.lang3.ClassUtils$2$1:java.lang.Class next()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.ClassUtils$2$1:java.lang.Object next()"
        ]
    },
    "org.apache.commons.lang3.ClassUtils$2$1:void walkInterfaces(java.util.Set,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.ClassUtils$2$1:java.lang.Class next()",
            "org.apache.commons.lang3.ClassUtils$2$1:void walkInterfaces(java.util.Set,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.CollectionSerializer:java.util.Collection read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.CollectionSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.CollectionSerializer:java.util.Collection copy(com.esotericsoftware.kryo.Kryo,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.CollectionSerializer:java.lang.Object copy(com.esotericsoftware.kryo.Kryo,java.lang.Object)"
        ]
    },
    "org.jboss.netty.channel.local.DefaultLocalServerChannelFactory:void releaseExternalResources()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.bootstrap.Bootstrap:void releaseExternalResources()",
            "org.jboss.netty.channel.socket.http.HttpTunnelingServlet:void destroyChannelFactory(org.jboss.netty.channel.ChannelFactory)",
            "org.jboss.netty.channel.socket.nio.NioClientSocketChannelFactory:void releasePools()",
            "org.jboss.netty.channel.socket.nio.NioDatagramChannelFactory:void releasePool()",
            "org.jboss.netty.channel.socket.nio.NioServerSocketChannelFactory:void releasePools()",
            "org.jboss.netty.channel.socket.nio.ShareableWorkerPool:void destroy()",
            "org.jboss.netty.handler.execution.ChainedExecutor:void releaseExternal(java.util.concurrent.Executor)",
            "org.jboss.netty.handler.execution.ExecutionHandler:void releaseExternalResources()",
            "org.jboss.netty.util.ExternalResourceUtil:void release(org.jboss.netty.util.ExternalResourceReleasable[])"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.SpdyHttpEncoder:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.DefaultChannelPipeline:void sendDownstream(org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.StaticChannelPipeline:void sendDownstream(org.jboss.netty.channel.StaticChannelPipeline$StaticChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.codec.spdy.SpdyHttpCodec:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.SpdySessionHandler$1:void operationComplete(org.jboss.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.CompleteChannelFuture:void addListener(org.jboss.netty.channel.ChannelFutureListener)",
            "org.jboss.netty.channel.DefaultChannelFuture:void notifyListener(org.jboss.netty.channel.ChannelFutureListener)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.SpdySessionHandler$2:void operationComplete(org.jboss.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.CompleteChannelFuture:void addListener(org.jboss.netty.channel.ChannelFutureListener)",
            "org.jboss.netty.channel.DefaultChannelFuture:void notifyListener(org.jboss.netty.channel.ChannelFutureListener)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.SpdySessionHandler$3:void operationComplete(org.jboss.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.CompleteChannelFuture:void addListener(org.jboss.netty.channel.ChannelFutureListener)",
            "org.jboss.netty.channel.DefaultChannelFuture:void notifyListener(org.jboss.netty.channel.ChannelFutureListener)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.SpdySessionHandler$4:void operationComplete(org.jboss.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.CompleteChannelFuture:void addListener(org.jboss.netty.channel.ChannelFutureListener)",
            "org.jboss.netty.channel.DefaultChannelFuture:void notifyListener(org.jboss.netty.channel.ChannelFutureListener)"
        ]
    },
    "org.jboss.netty.handler.queue.BufferedWriteHandler:void flush()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.queue.BufferedWriteHandler:void disconnectRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelHandler:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.queue.BufferedWriteHandler:void closeRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelHandler:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.queue.BufferedWriteHandler:void beforeRemove(org.jboss.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.DefaultChannelPipeline:void callBeforeRemove(org.jboss.netty.channel.ChannelHandlerContext)",
            "org.jboss.netty.channel.StaticChannelPipeline:void callBeforeRemove(org.jboss.netty.channel.ChannelHandlerContext)"
        ]
    },
    "org.jboss.netty.bootstrap.ServerBootstrap:org.jboss.netty.channel.Channel bind(java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.bootstrap.ServerBootstrap:org.jboss.netty.channel.Channel bind()"
        ]
    },
    "org.jboss.netty.bootstrap.ServerBootstrap:org.jboss.netty.channel.ChannelFuture bindAsync()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.bootstrap.ServerBootstrap$1:void operationComplete(org.jboss.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.CompleteChannelFuture:void addListener(org.jboss.netty.channel.ChannelFutureListener)",
            "org.jboss.netty.channel.DefaultChannelFuture:void notifyListener(org.jboss.netty.channel.ChannelFutureListener)"
        ]
    },
    "org.jboss.netty.bootstrap.ServerBootstrap$Binder$1:void operationComplete(org.jboss.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.CompleteChannelFuture:void addListener(org.jboss.netty.channel.ChannelFutureListener)",
            "org.jboss.netty.channel.DefaultChannelFuture:void notifyListener(org.jboss.netty.channel.ChannelFutureListener)"
        ]
    },
    "org.jboss.netty.channel.AbstractChannel$ChannelCloseFuture:boolean setClosed()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.AbstractChannel:boolean setClosed()"
        ]
    },
    "org.jboss.netty.channel.ChannelFutureNotifier:void operationComplete(org.jboss.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.CompleteChannelFuture:void addListener(org.jboss.netty.channel.ChannelFutureListener)",
            "org.jboss.netty.channel.DefaultChannelFuture:void notifyListener(org.jboss.netty.channel.ChannelFutureListener)"
        ]
    },
    "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$1:void operationComplete(org.jboss.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.CompleteChannelFuture:void addListener(org.jboss.netty.channel.ChannelFutureListener)",
            "org.jboss.netty.channel.DefaultChannelFuture:void notifyListener(org.jboss.netty.channel.ChannelFutureListener)"
        ]
    },
    "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$4:void operationComplete(org.jboss.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.CompleteChannelFuture:void addListener(org.jboss.netty.channel.ChannelFutureListener)",
            "org.jboss.netty.channel.DefaultChannelFuture:void notifyListener(org.jboss.netty.channel.ChannelFutureListener)"
        ]
    },
    "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$5$1:void operationComplete(org.jboss.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.CompleteChannelFuture:void addListener(org.jboss.netty.channel.ChannelFutureListener)",
            "org.jboss.netty.channel.DefaultChannelFuture:void notifyListener(org.jboss.netty.channel.ChannelFutureListener)"
        ]
    },
    "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$6$1:void operationComplete(org.jboss.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.CompleteChannelFuture:void addListener(org.jboss.netty.channel.ChannelFutureListener)",
            "org.jboss.netty.channel.DefaultChannelFuture:void notifyListener(org.jboss.netty.channel.ChannelFutureListener)"
        ]
    },
    "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$7$1:void operationComplete(org.jboss.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.CompleteChannelFuture:void addListener(org.jboss.netty.channel.ChannelFutureListener)",
            "org.jboss.netty.channel.DefaultChannelFuture:void notifyListener(org.jboss.netty.channel.ChannelFutureListener)"
        ]
    },
    "org.jboss.netty.handler.codec.embedder.EncoderEmbedder:boolean offer(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.HttpContentEncoder:org.jboss.netty.buffer.ChannelBuffer encode(org.jboss.netty.buffer.ChannelBuffer)"
        ]
    },
    "org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker00$1:void operationComplete(org.jboss.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.CompleteChannelFuture:void addListener(org.jboss.netty.channel.ChannelFutureListener)",
            "org.jboss.netty.channel.DefaultChannelFuture:void notifyListener(org.jboss.netty.channel.ChannelFutureListener)"
        ]
    },
    "org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker07$1:void operationComplete(org.jboss.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.CompleteChannelFuture:void addListener(org.jboss.netty.channel.ChannelFutureListener)",
            "org.jboss.netty.channel.DefaultChannelFuture:void notifyListener(org.jboss.netty.channel.ChannelFutureListener)"
        ]
    },
    "org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker08$1:void operationComplete(org.jboss.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.CompleteChannelFuture:void addListener(org.jboss.netty.channel.ChannelFutureListener)",
            "org.jboss.netty.channel.DefaultChannelFuture:void notifyListener(org.jboss.netty.channel.ChannelFutureListener)"
        ]
    },
    "org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker13$1:void operationComplete(org.jboss.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.CompleteChannelFuture:void addListener(org.jboss.netty.channel.ChannelFutureListener)",
            "org.jboss.netty.channel.DefaultChannelFuture:void notifyListener(org.jboss.netty.channel.ChannelFutureListener)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.SpdySessionHandler$ClosingChannelFutureListener:void operationComplete(org.jboss.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.CompleteChannelFuture:void addListener(org.jboss.netty.channel.ChannelFutureListener)",
            "org.jboss.netty.channel.DefaultChannelFuture:void notifyListener(org.jboss.netty.channel.ChannelFutureListener)"
        ]
    },
    "org.jboss.netty.handler.execution.ExecutionHandler:boolean handleReadSuspend(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.execution.ExecutionHandler:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.queue.BufferedWriteHandler$1:void operationComplete(org.jboss.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.CompleteChannelFuture:void addListener(org.jboss.netty.channel.ChannelFutureListener)",
            "org.jboss.netty.channel.DefaultChannelFuture:void notifyListener(org.jboss.netty.channel.ChannelFutureListener)"
        ]
    },
    "org.jboss.netty.handler.ssl.SslHandler$ClosingChannelFutureListener:void operationComplete(org.jboss.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.CompleteChannelFuture:void addListener(org.jboss.netty.channel.ChannelFutureListener)",
            "org.jboss.netty.channel.DefaultChannelFuture:void notifyListener(org.jboss.netty.channel.ChannelFutureListener)"
        ]
    },
    "org.jboss.netty.handler.ssl.SslHandler$SSLEngineInboundCloseFuture:void setClosed()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.ssl.SslHandler:org.jboss.netty.buffer.ChannelBuffer unwrap(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,int,int)"
        ]
    },
    "org.jboss.netty.handler.ssl.SslHandler:void setHandshakeSuccess(org.jboss.netty.channel.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.ssl.SslHandler:void wrap(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel)",
            "org.jboss.netty.handler.ssl.SslHandler:org.jboss.netty.channel.ChannelFuture wrapNonAppData(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel)",
            "org.jboss.netty.handler.ssl.SslHandler:org.jboss.netty.buffer.ChannelBuffer unwrap(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,int,int)"
        ]
    },
    "org.jboss.netty.handler.traffic.AbstractTrafficShapingHandler:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.DefaultChannelPipeline:void sendDownstream(org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.StaticChannelPipeline:void sendDownstream(org.jboss.netty.channel.StaticChannelPipeline$StaticChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioClientSocketPipelineSink$1:void operationComplete(org.jboss.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.CompleteChannelFuture:void addListener(org.jboss.netty.channel.ChannelFutureListener)",
            "org.jboss.netty.channel.DefaultChannelFuture:void notifyListener(org.jboss.netty.channel.ChannelFutureListener)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.SpdyHttpEncoder$SpdyFrameWriter:void operationComplete(org.jboss.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.CompleteChannelFuture:void addListener(org.jboss.netty.channel.ChannelFutureListener)",
            "org.jboss.netty.channel.DefaultChannelFuture:void notifyListener(org.jboss.netty.channel.ChannelFutureListener)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.SpdySession:void removeStream(int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:void removeStream(int,org.jboss.netty.channel.ChannelFuture)"
        ]
    },
    "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor:java.util.List shutdownNow(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor:java.util.List shutdownNow()"
        ]
    },
    "org.jboss.netty.handler.ssl.SslHandler:void setHandshakeFailure(org.jboss.netty.channel.Channel,javax.net.ssl.SSLException)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.ssl.SslHandler:void wrap(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel)",
            "org.jboss.netty.handler.ssl.SslHandler:org.jboss.netty.channel.ChannelFuture wrapNonAppData(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel)",
            "org.jboss.netty.handler.ssl.SslHandler:org.jboss.netty.buffer.ChannelBuffer unwrap(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,int,int)",
            "org.jboss.netty.handler.ssl.SslHandler:void access$200(org.jboss.netty.handler.ssl.SslHandler,org.jboss.netty.channel.Channel,javax.net.ssl.SSLException)"
        ]
    },
    "org.jboss.netty.handler.stream.ChunkedWriteHandler$2:void operationComplete(org.jboss.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.CompleteChannelFuture:void addListener(org.jboss.netty.channel.ChannelFutureListener)",
            "org.jboss.netty.channel.DefaultChannelFuture:void notifyListener(org.jboss.netty.channel.ChannelFutureListener)"
        ]
    },
    "org.jboss.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask:void run(org.jboss.netty.util.Timeout)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.HashedWheelTimer$HashedWheelTimeout:void expire()"
        ]
    },
    "org.jboss.netty.channel.socket.ChannelRunnableWrapper:boolean cancel()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.spdy.SpdyHttpEncoder$SpdyFrameWriter:void operationComplete(org.jboss.netty.channel.ChannelFuture)"
        ]
    },
    "org.jboss.netty.bootstrap.ClientBootstrap:org.jboss.netty.channel.ChannelFuture connect(java.net.SocketAddress,java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.bootstrap.ClientBootstrap:org.jboss.netty.channel.ChannelFuture connect(java.net.SocketAddress)"
        ]
    },
    "org.jboss.netty.bootstrap.ClientBootstrap:org.jboss.netty.channel.ChannelFuture bind(java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.bootstrap.ConnectionlessBootstrap:org.jboss.netty.channel.Channel bind(java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.bootstrap.ConnectionlessBootstrap:org.jboss.netty.channel.Channel bind()"
        ]
    },
    "org.jboss.netty.bootstrap.ConnectionlessBootstrap:org.jboss.netty.channel.ChannelFuture connect(java.net.SocketAddress,java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.bootstrap.ConnectionlessBootstrap:org.jboss.netty.channel.ChannelFuture connect(java.net.SocketAddress)"
        ]
    },
    "org.jboss.netty.handler.codec.embedder.DecoderEmbedder:void <init>(org.jboss.netty.buffer.ChannelBufferFactory,org.jboss.netty.channel.ChannelUpstreamHandler[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.embedder.EncoderEmbedder:void <init>(org.jboss.netty.buffer.ChannelBufferFactory,org.jboss.netty.channel.ChannelDownstreamHandler[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.http.HttpContentDecompressor:org.jboss.netty.handler.codec.embedder.DecoderEmbedder newContentDecoder(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.HttpContentDecoder:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.rtsp.RtspMessageDecoder:void <init>(int,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.rtsp.RtspMessageDecoder:void <init>()",
            "org.jboss.netty.handler.codec.rtsp.RtspRequestDecoder:void <init>(int,int,int)",
            "org.jboss.netty.handler.codec.rtsp.RtspResponseDecoder:void <init>(int,int,int)"
        ]
    },
    "org.jboss.netty.handler.codec.http.HttpContentCompressor:org.jboss.netty.handler.codec.embedder.EncoderEmbedder newContentEncoder(org.jboss.netty.handler.codec.http.HttpMessage,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.HttpContentEncoder:void writeRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)"
        ]
    },
    "org.jboss.netty.channel.Channels:void bind(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelFuture,java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.channel.Channels:void unbind(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.channel.Channels:void connect(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelFuture,java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.channel.Channels:void write(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelFuture,java.lang.Object,java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.Channels:void write(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelFuture,java.lang.Object)",
            "org.jboss.netty.handler.codec.http.HttpContentEncoder:void writeRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.codec.oneone.OneToOneEncoder:boolean doEncode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.codec.spdy.SpdyFrameEncoder:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.codec.spdy.SpdyHttpEncoder:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.codec.spdy.SpdyHttpEncoder:void writeChunk(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelFuture,int,org.jboss.netty.handler.codec.http.HttpChunk,java.net.SocketAddress)",
            "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:void issueStreamError(org.jboss.netty.channel.ChannelHandlerContext,java.net.SocketAddress,int,org.jboss.netty.handler.codec.spdy.SpdyStreamStatus)",
            "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:void updateSendWindowSize(org.jboss.netty.channel.ChannelHandlerContext,int,int)",
            "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:org.jboss.netty.channel.ChannelFuture sendGoAwayFrame(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.net.SocketAddress,org.jboss.netty.handler.codec.spdy.SpdySessionStatus)",
            "org.jboss.netty.handler.stream.ChunkedWriteHandler:void flush(org.jboss.netty.channel.ChannelHandlerContext,boolean)"
        ]
    },
    "org.jboss.netty.channel.Channels:void setInterestOps(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelFuture,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.channel.Channels:void disconnect(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.channel.Channels:void close(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.spdy.SpdySessionHandler$ClosingChannelFutureListener:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.handler.ssl.SslHandler$2:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.handler.ssl.SslHandler$ClosingChannelFutureListener:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.handler.ssl.SslHandler:org.jboss.netty.channel.ChannelFuture handshake()",
            "org.jboss.netty.handler.ssl.SslHandler:org.jboss.netty.channel.ChannelFuture close()",
            "org.jboss.netty.handler.ssl.SslHandler:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.ssl.SslHandler:void handleRenegotiation(javax.net.ssl.SSLEngineResult$HandshakeStatus)",
            "org.jboss.netty.handler.ssl.SslHandler:void setHandshakeFailure(org.jboss.netty.channel.Channel,javax.net.ssl.SSLException)"
        ]
    },
    "org.jboss.netty.channel.SimpleChannelDownstreamHandler:void writeRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelDownstreamHandler:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.timeout.WriteTimeoutHandler:void writeRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)"
        ]
    },
    "org.jboss.netty.channel.SimpleChannelDownstreamHandler:void bindRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelDownstreamHandler:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.SimpleChannelDownstreamHandler:void connectRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelDownstreamHandler:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.SimpleChannelDownstreamHandler:void setInterestOpsRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelDownstreamHandler:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.SimpleChannelDownstreamHandler:void disconnectRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelDownstreamHandler:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.SimpleChannelDownstreamHandler:void unbindRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelDownstreamHandler:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.SimpleChannelDownstreamHandler:void closeRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelDownstreamHandler:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.SimpleChannelHandler:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.DefaultChannelPipeline:void sendDownstream(org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.StaticChannelPipeline:void sendDownstream(org.jboss.netty.channel.StaticChannelPipeline$StaticChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.traffic.AbstractTrafficShapingHandler:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.SimpleChannelHandler:void writeRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelHandler:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.codec.spdy.SpdyHttpResponseStreamIdHandler:void writeRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.traffic.AbstractTrafficShapingHandler:void writeRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)"
        ]
    },
    "org.jboss.netty.channel.SimpleChannelHandler:void bindRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelHandler:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.SimpleChannelHandler:void connectRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelHandler:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.SimpleChannelHandler:void setInterestOpsRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelHandler:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.SimpleChannelHandler:void disconnectRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelHandler:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.SimpleChannelHandler:void unbindRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelHandler:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.SimpleChannelHandler:void closeRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelHandler:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.compression.JdkZlibEncoder$1:void operationComplete(org.jboss.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.CompleteChannelFuture:void addListener(org.jboss.netty.channel.ChannelFutureListener)",
            "org.jboss.netty.channel.DefaultChannelFuture:void notifyListener(org.jboss.netty.channel.ChannelFutureListener)"
        ]
    },
    "org.jboss.netty.handler.codec.compression.ZlibEncoder$1:void operationComplete(org.jboss.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.CompleteChannelFuture:void addListener(org.jboss.netty.channel.ChannelFutureListener)",
            "org.jboss.netty.channel.DefaultChannelFuture:void notifyListener(org.jboss.netty.channel.ChannelFutureListener)"
        ]
    },
    "org.jboss.netty.handler.codec.oneone.OneToOneEncoder:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.DefaultChannelPipeline:void sendDownstream(org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.StaticChannelPipeline:void sendDownstream(org.jboss.netty.channel.StaticChannelPipeline$StaticChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.codec.compression.JdkZlibEncoder:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.codec.compression.ZlibEncoder:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.codec.http.HttpClientCodec:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.codec.http.HttpServerCodec:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.SpdyFrameEncoder:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.DefaultChannelPipeline:void sendDownstream(org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.StaticChannelPipeline:void sendDownstream(org.jboss.netty.channel.StaticChannelPipeline$StaticChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.codec.spdy.SpdyFrameCodec:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.execution.ChannelDownstreamEventRunnable:void doRun()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.execution.ChannelEventRunnable:void run()"
        ]
    },
    "org.jboss.netty.handler.logging.LoggingHandler:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.DefaultChannelPipeline:void sendDownstream(org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.StaticChannelPipeline:void sendDownstream(org.jboss.netty.channel.StaticChannelPipeline$StaticChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.ssl.SslHandler$5:void operationComplete(org.jboss.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.CompleteChannelFuture:void addListener(org.jboss.netty.channel.ChannelFutureListener)",
            "org.jboss.netty.channel.DefaultChannelFuture:void notifyListener(org.jboss.netty.channel.ChannelFutureListener)"
        ]
    },
    "org.jboss.netty.channel.Channels:org.jboss.netty.channel.ChannelFuture bind(org.jboss.netty.channel.Channel,java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.AbstractChannel:org.jboss.netty.channel.ChannelFuture bind(java.net.SocketAddress)"
        ]
    },
    "org.jboss.netty.channel.Channels:org.jboss.netty.channel.ChannelFuture unbind(org.jboss.netty.channel.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.AbstractChannel:org.jboss.netty.channel.ChannelFuture unbind()"
        ]
    },
    "org.jboss.netty.channel.Channels:org.jboss.netty.channel.ChannelFuture connect(org.jboss.netty.channel.Channel,java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.AbstractChannel:org.jboss.netty.channel.ChannelFuture connect(java.net.SocketAddress)"
        ]
    },
    "org.jboss.netty.channel.Channels:org.jboss.netty.channel.ChannelFuture write(org.jboss.netty.channel.Channel,java.lang.Object,java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.AbstractChannel:org.jboss.netty.channel.ChannelFuture write(java.lang.Object,java.net.SocketAddress)",
            "org.jboss.netty.channel.Channels:org.jboss.netty.channel.ChannelFuture write(org.jboss.netty.channel.Channel,java.lang.Object)"
        ]
    },
    "org.jboss.netty.channel.Channels:org.jboss.netty.channel.ChannelFuture setInterestOps(org.jboss.netty.channel.Channel,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.AbstractChannel:org.jboss.netty.channel.ChannelFuture setInterestOps(int)"
        ]
    },
    "org.jboss.netty.channel.Channels:org.jboss.netty.channel.ChannelFuture disconnect(org.jboss.netty.channel.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.AbstractChannel:org.jboss.netty.channel.ChannelFuture disconnect()"
        ]
    },
    "org.jboss.netty.channel.Channels:org.jboss.netty.channel.ChannelFuture close(org.jboss.netty.channel.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.AbstractChannel:org.jboss.netty.channel.ChannelFuture close()",
            "org.jboss.netty.handler.codec.embedder.AbstractCodecEmbedder:boolean finish()",
            "org.jboss.netty.handler.ipfilter.IpFilteringHandlerImpl:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.http.HttpMessageDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,java.lang.Enum)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.replay.ReplayingDecoder:java.lang.Object decodeLast(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,java.lang.Enum)",
            "org.jboss.netty.handler.codec.replay.ReplayingDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.replay.ReplayingDecoder:void callDecode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.buffer.ChannelBuffer,java.net.SocketAddress)"
        ]
    },
    "org.jboss.netty.handler.codec.rtsp.RtspMessageDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,java.lang.Enum)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.replay.ReplayingDecoder:java.lang.Object decodeLast(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,java.lang.Enum)",
            "org.jboss.netty.handler.codec.replay.ReplayingDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.replay.ReplayingDecoder:void callDecode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.buffer.ChannelBuffer,java.net.SocketAddress)"
        ]
    },
    "org.jboss.netty.handler.codec.embedder.AbstractCodecEmbedder$EmbeddedChannelSink:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.DefaultChannelPipeline:void sendUpstream(org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.StaticChannelPipeline:void sendUpstream(org.jboss.netty.channel.StaticChannelPipeline$StaticChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.embedder.AbstractCodecEmbedder$EmbeddedChannelSink:void eventSunk(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext:void sendDownstream(org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.DefaultChannelPipeline:void sendDownstream(org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.StaticChannelPipeline$StaticChannelHandlerContext:void sendDownstream(org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.StaticChannelPipeline:void sendDownstream(org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.oneone.OneToOneEncoder:boolean doEncode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.oneone.OneToOneEncoder:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.codec.oneone.OneToOneStrictEncoder:boolean doEncode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)"
        ]
    },
    "org.onlab.util.KryoNamespace:void release(com.esotericsoftware.kryo.Kryo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.util.KryoNamespace:org.onlab.util.KryoNamespace populate(int)",
            "org.onlab.util.KryoNamespace:byte[] serialize(java.lang.Object,int)",
            "org.onlab.util.KryoNamespace:void serialize(java.lang.Object,java.nio.ByteBuffer)",
            "org.onlab.util.KryoNamespace:void serialize(java.lang.Object,java.io.OutputStream,int)",
            "org.onlab.util.KryoNamespace:java.lang.Object deserialize(byte[])",
            "org.onlab.util.KryoNamespace:java.lang.Object deserialize(java.nio.ByteBuffer)",
            "org.onlab.util.KryoNamespace:java.lang.Object deserialize(java.io.InputStream,int)",
            "org.onlab.util.KryoNamespace:void release(com.esotericsoftware.kryo.Kryo)"
        ]
    },
    "com.esotericsoftware.kryo.pool.KryoPoolQueueImpl:java.lang.Object run(com.esotericsoftware.kryo.pool.KryoCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.util.KryoNamespace:java.lang.Object run(com.esotericsoftware.kryo.pool.KryoCallback)"
        ]
    },
    "com.esotericsoftware.kryo.pool.SoftReferenceQueue:boolean offer(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.local.LocalClientChannelSink:void eventSunk(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.local.LocalServerChannelSink:void handleAcceptedChannel(org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.socket.nio.AbstractNioChannel$WriteRequestQueue:boolean offer(org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.channel.socket.nio.NioClientSocketPipelineSink:void eventSunk(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.socket.nio.NioDatagramPipelineSink:void eventSunk(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.socket.nio.NioServerSocketPipelineSink:void handleAcceptedSocket(org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void executeInIoThread(java.lang.Runnable)",
            "org.jboss.netty.handler.codec.embedder.AbstractCodecEmbedder$EmbeddedChannelSink:void handleEvent(org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.codec.http.HttpClientCodec$Encoder:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)",
            "org.jboss.netty.handler.codec.http.HttpContentEncoder:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.stream.ChunkedWriteHandler:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "com.esotericsoftware.kryo.pool.KryoPoolQueueImpl:void release(com.esotericsoftware.kryo.Kryo)",
            "com.esotericsoftware.kryo.pool.SoftReferenceQueue:boolean offer(com.esotericsoftware.kryo.Kryo)"
        ]
    },
    "org.jboss.netty.handler.codec.embedder.AbstractCodecEmbedder:java.lang.Object[] pollAll()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.embedder.AbstractCodecEmbedder:java.lang.Object[] pollAll(java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.HttpContentDecoder:org.jboss.netty.buffer.ChannelBuffer decode(org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.http.HttpContentDecoder:org.jboss.netty.buffer.ChannelBuffer finishDecode()",
            "org.jboss.netty.handler.codec.http.HttpContentEncoder:org.jboss.netty.buffer.ChannelBuffer encode(org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.http.HttpContentEncoder:org.jboss.netty.buffer.ChannelBuffer finishEncode()"
        ]
    },
    "org.jboss.netty.handler.codec.http.HttpMessageDecoder:org.jboss.netty.handler.codec.http.HttpMessageDecoder$State readHeaders(org.jboss.netty.buffer.ChannelBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.HttpMessageDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.http.HttpMessageDecoder$State)"
        ]
    },
    "org.jboss.netty.channel.DefaultChannelPipeline:void callAfterRemove(org.jboss.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.DefaultChannelPipeline:org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext remove(org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext)",
            "org.jboss.netty.channel.DefaultChannelPipeline:org.jboss.netty.channel.ChannelHandler removeFirst()",
            "org.jboss.netty.channel.DefaultChannelPipeline:org.jboss.netty.channel.ChannelHandler removeLast()",
            "org.jboss.netty.channel.DefaultChannelPipeline:org.jboss.netty.channel.ChannelHandler replace(org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext,java.lang.String,org.jboss.netty.channel.ChannelHandler)"
        ]
    },
    "org.jboss.netty.channel.StaticChannelPipeline:void callAfterRemove(org.jboss.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.StaticChannelPipeline:void callAfterAdd(org.jboss.netty.channel.ChannelHandlerContext)"
        ]
    },
    "org.onlab.util.KryoNamespace:com.esotericsoftware.kryo.Kryo borrow()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.util.KryoNamespace:byte[] serialize(java.lang.Object,int)",
            "org.onlab.util.KryoNamespace:void serialize(java.lang.Object,java.nio.ByteBuffer)",
            "org.onlab.util.KryoNamespace:void serialize(java.lang.Object,java.io.OutputStream,int)",
            "org.onlab.util.KryoNamespace:java.lang.Object deserialize(byte[])",
            "org.onlab.util.KryoNamespace:java.lang.Object deserialize(java.nio.ByteBuffer)",
            "org.onlab.util.KryoNamespace:java.lang.Object deserialize(java.io.InputStream,int)",
            "org.onlab.util.KryoNamespace:com.esotericsoftware.kryo.Kryo borrow()"
        ]
    },
    "com.esotericsoftware.kryo.pool.SoftReferenceQueue:java.lang.Object poll()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.local.DefaultLocalChannel:void flushWriteBuffer()",
            "org.jboss.netty.channel.socket.nio.AbstractNioChannel$WriteRequestQueue:org.jboss.netty.channel.MessageEvent poll()",
            "org.jboss.netty.channel.socket.nio.AbstractNioSelector:void processTaskQueue()",
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void write0(org.jboss.netty.channel.socket.nio.AbstractNioChannel)",
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void cleanUpWriteBuffer(org.jboss.netty.channel.socket.nio.AbstractNioChannel)",
            "org.jboss.netty.channel.socket.nio.NioDatagramWorker:void write0(org.jboss.netty.channel.socket.nio.AbstractNioChannel)",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void processEventQueue()",
            "org.jboss.netty.handler.codec.embedder.AbstractCodecEmbedder:java.lang.Object poll()",
            "org.jboss.netty.handler.codec.http.HttpClientCodec$Decoder:boolean isContentAlwaysEmpty(org.jboss.netty.handler.codec.http.HttpMessage)",
            "org.jboss.netty.handler.codec.http.HttpContentEncoder:void writeRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.codec.spdy.SpdyHttpResponseStreamIdHandler:void writeRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor$ChildExecutor:void run()",
            "org.jboss.netty.handler.queue.BufferedWriteHandler:void flush(boolean)",
            "org.jboss.netty.handler.queue.BufferedWriteHandler:void channelClosed(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.handler.queue.BufferedWriteHandler:void afterRemove(org.jboss.netty.channel.ChannelHandlerContext)",
            "org.jboss.netty.handler.ssl.SslHandler$7:void run()",
            "org.jboss.netty.handler.ssl.SslHandler:void wrap(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel)",
            "org.jboss.netty.handler.ssl.SslHandler:void flushPendingEncryptedWrites(org.jboss.netty.channel.ChannelHandlerContext)",
            "org.jboss.netty.handler.ssl.SslHandler:void afterRemove(org.jboss.netty.channel.ChannelHandlerContext)",
            "org.jboss.netty.handler.stream.ChunkedWriteHandler:void discard(org.jboss.netty.channel.ChannelHandlerContext,boolean)",
            "org.jboss.netty.handler.stream.ChunkedWriteHandler:void flush(org.jboss.netty.channel.ChannelHandlerContext,boolean)",
            "org.jboss.netty.handler.stream.ChunkedWriteHandler:void afterRemove(org.jboss.netty.channel.ChannelHandlerContext)",
            "com.esotericsoftware.kryo.pool.KryoPoolQueueImpl:com.esotericsoftware.kryo.Kryo borrow()",
            "com.esotericsoftware.kryo.pool.SoftReferenceQueue:com.esotericsoftware.kryo.Kryo poll()"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioClientBoss:void rebuildSelector()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.AbstractNioBossPool:void rebuildSelectors()",
            "org.jboss.netty.channel.socket.nio.AbstractNioSelector$1:void run()",
            "org.jboss.netty.channel.socket.nio.AbstractNioSelector:void run()"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioDatagramWorker:void rebuildSelector()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.AbstractNioSelector$1:void run()",
            "org.jboss.netty.channel.socket.nio.AbstractNioSelector:void run()",
            "org.jboss.netty.channel.socket.nio.AbstractNioWorkerPool:void rebuildSelectors()"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioServerBoss:void rebuildSelector()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.AbstractNioBossPool:void rebuildSelectors()",
            "org.jboss.netty.channel.socket.nio.AbstractNioSelector$1:void run()",
            "org.jboss.netty.channel.socket.nio.AbstractNioSelector:void run()"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioWorker:void rebuildSelector()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.AbstractNioSelector$1:void run()",
            "org.jboss.netty.channel.socket.nio.AbstractNioSelector:void run()",
            "org.jboss.netty.channel.socket.nio.AbstractNioWorkerPool:void rebuildSelectors()"
        ]
    },
    "org.jboss.netty.handler.codec.http.HttpContentDecoder:void afterRemove(org.jboss.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.DefaultChannelPipeline:void callAfterRemove(org.jboss.netty.channel.ChannelHandlerContext)",
            "org.jboss.netty.channel.StaticChannelPipeline:void callAfterRemove(org.jboss.netty.channel.ChannelHandlerContext)"
        ]
    },
    "org.jboss.netty.handler.codec.http.HttpContentEncoder:void afterRemove(org.jboss.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.DefaultChannelPipeline:void callAfterRemove(org.jboss.netty.channel.ChannelHandlerContext)",
            "org.jboss.netty.channel.StaticChannelPipeline:void callAfterRemove(org.jboss.netty.channel.ChannelHandlerContext)"
        ]
    },
    "org.jboss.netty.handler.codec.marshalling.MarshallingDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.frame.FrameDecoder:java.lang.Object decodeLast(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.frame.FrameDecoder:void callDecode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,java.net.SocketAddress)"
        ]
    },
    "org.jboss.netty.handler.codec.serialization.ObjectDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.frame.FrameDecoder:java.lang.Object decodeLast(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.frame.FrameDecoder:void callDecode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,java.net.SocketAddress)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.AbstractNioSelector:void <init>(java.util.concurrent.Executor,org.jboss.netty.util.ThreadNameDeterminer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.AbstractNioSelector:void <init>(java.util.concurrent.Executor)",
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void <init>(java.util.concurrent.Executor,org.jboss.netty.util.ThreadNameDeterminer)",
            "org.jboss.netty.channel.socket.nio.NioClientBoss:void <init>(java.util.concurrent.Executor,org.jboss.netty.util.Timer,org.jboss.netty.util.ThreadNameDeterminer)",
            "org.jboss.netty.channel.socket.nio.NioServerBoss:void <init>(java.util.concurrent.Executor,org.jboss.netty.util.ThreadNameDeterminer)"
        ]
    },
    "org.jboss.netty.handler.timeout.IdleStateHandler:void access$000(org.jboss.netty.handler.timeout.IdleStateHandler,org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.handler.timeout.IdleState,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.timeout.IdleStateHandler$AllIdleTimeoutTask:void run(org.jboss.netty.util.Timeout)",
            "org.jboss.netty.handler.timeout.IdleStateHandler$ReaderIdleTimeoutTask:void run(org.jboss.netty.util.Timeout)",
            "org.jboss.netty.handler.timeout.IdleStateHandler$WriterIdleTimeoutTask:void run(org.jboss.netty.util.Timeout)"
        ]
    },
    "org.jboss.netty.handler.timeout.ReadTimeoutHandler$ReadTimeoutTask:void run(org.jboss.netty.util.Timeout)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.HashedWheelTimer$HashedWheelTimeout:void expire()"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioDatagramWorker:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.util.BoundedThreadPool$CallerFeedbackPolicy:void rejectedExecution(java.lang.Runnable,java.util.concurrent.ThreadPoolExecutor)",
            "org.onlab.util.BoundedThreadPool:void execute(java.lang.Runnable)",
            "org.onlab.util.SharedExecutorService:void execute(java.lang.Runnable)",
            "org.jboss.netty.channel.AbstractChannelSink:org.jboss.netty.channel.ChannelFuture execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable)",
            "org.jboss.netty.channel.socket.ChannelRunnableWrapper:void run()",
            "org.jboss.netty.channel.socket.nio.AbstractNioSelector:void processTaskQueue()",
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void executeInIoThread(java.lang.Runnable,boolean)",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void executeInIoThread(java.lang.Runnable)",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void processEventQueue()",
            "org.jboss.netty.handler.codec.embedder.AbstractCodecEmbedder$EmbeddedChannelSink:org.jboss.netty.channel.ChannelFuture execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable)",
            "org.jboss.netty.handler.execution.ChainedExecutor:void execute(java.lang.Runnable)",
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor$MemoryAwareRunnable:void run()",
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor:void doUnorderedExecute(java.lang.Runnable)",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor$ChildExecutor:void run()",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor:void doExecute(java.lang.Runnable)",
            "org.jboss.netty.handler.ssl.ImmediateExecutor:void execute(java.lang.Runnable)",
            "org.jboss.netty.handler.ssl.SslHandler$4:void run()",
            "org.jboss.netty.util.ThreadRenamingRunnable:void run()",
            "org.jboss.netty.util.VirtualExecutorService$ChildExecutorRunnable:void run()",
            "org.jboss.netty.util.internal.DeadLockProofWorker$1:void run()",
            "org.jboss.netty.util.internal.UnterminatableExecutor:void execute(java.lang.Runnable)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioWorker:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.util.BoundedThreadPool$CallerFeedbackPolicy:void rejectedExecution(java.lang.Runnable,java.util.concurrent.ThreadPoolExecutor)",
            "org.onlab.util.BoundedThreadPool:void execute(java.lang.Runnable)",
            "org.onlab.util.SharedExecutorService:void execute(java.lang.Runnable)",
            "org.jboss.netty.channel.AbstractChannelSink:org.jboss.netty.channel.ChannelFuture execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable)",
            "org.jboss.netty.channel.socket.ChannelRunnableWrapper:void run()",
            "org.jboss.netty.channel.socket.nio.AbstractNioSelector:void processTaskQueue()",
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void executeInIoThread(java.lang.Runnable,boolean)",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void executeInIoThread(java.lang.Runnable)",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void processEventQueue()",
            "org.jboss.netty.handler.codec.embedder.AbstractCodecEmbedder$EmbeddedChannelSink:org.jboss.netty.channel.ChannelFuture execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable)",
            "org.jboss.netty.handler.execution.ChainedExecutor:void execute(java.lang.Runnable)",
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor$MemoryAwareRunnable:void run()",
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor:void doUnorderedExecute(java.lang.Runnable)",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor$ChildExecutor:void run()",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor:void doExecute(java.lang.Runnable)",
            "org.jboss.netty.handler.ssl.ImmediateExecutor:void execute(java.lang.Runnable)",
            "org.jboss.netty.handler.ssl.SslHandler$4:void run()",
            "org.jboss.netty.util.ThreadRenamingRunnable:void run()",
            "org.jboss.netty.util.VirtualExecutorService$ChildExecutorRunnable:void run()",
            "org.jboss.netty.util.internal.DeadLockProofWorker$1:void run()",
            "org.jboss.netty.util.internal.UnterminatableExecutor:void execute(java.lang.Runnable)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioDatagramWorker:void executeInIoThread(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.AbstractNioChannelSink:org.jboss.netty.channel.ChannelFuture execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable)",
            "org.jboss.netty.channel.socket.oio.AbstractOioChannelSink:org.jboss.netty.channel.ChannelFuture execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioWorker:void executeInIoThread(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.AbstractNioChannelSink:org.jboss.netty.channel.ChannelFuture execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable)",
            "org.jboss.netty.channel.socket.oio.AbstractOioChannelSink:org.jboss.netty.channel.ChannelFuture execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable)"
        ]
    },
    "org.jboss.netty.channel.DefaultChannelPipeline:void remove(org.jboss.netty.channel.ChannelHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.frame.FrameDecoder:void replace(java.lang.String,org.jboss.netty.channel.ChannelHandler)",
            "org.jboss.netty.handler.codec.socks.SocksAuthRequestDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.socks.SocksAuthRequestDecoder$State)",
            "org.jboss.netty.handler.codec.socks.SocksAuthResponseDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.socks.SocksAuthResponseDecoder$State)",
            "org.jboss.netty.handler.codec.socks.SocksCmdRequestDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.socks.SocksCmdRequestDecoder$State)",
            "org.jboss.netty.handler.codec.socks.SocksCmdResponseDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.socks.SocksCmdResponseDecoder$State)",
            "org.jboss.netty.handler.codec.socks.SocksInitRequestDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.socks.SocksInitRequestDecoder$State)",
            "org.jboss.netty.handler.codec.socks.SocksInitResponseDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.socks.SocksInitResponseDecoder$State)",
            "org.jboss.netty.handler.codec.spdy.SpdyOrHttpChooser:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.DefaultChannelPipeline:org.jboss.netty.channel.ChannelHandler remove(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerHandshaker$2:void operationComplete(org.jboss.netty.channel.ChannelFuture)"
        ]
    },
    "org.jboss.netty.channel.DefaultChannelPipeline:org.jboss.netty.channel.ChannelHandler remove(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerHandshaker:org.jboss.netty.channel.ChannelFuture writeHandshakeResponse(org.jboss.netty.channel.Channel,org.jboss.netty.handler.codec.http.HttpResponse,org.jboss.netty.channel.ChannelHandler,org.jboss.netty.channel.ChannelHandler)"
        ]
    },
    "org.jboss.netty.channel.DefaultChannelPipeline:void callAfterAdd(org.jboss.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.DefaultChannelPipeline:void addFirst(java.lang.String,org.jboss.netty.channel.ChannelHandler)",
            "org.jboss.netty.channel.DefaultChannelPipeline:void addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)",
            "org.jboss.netty.channel.DefaultChannelPipeline:void addBefore(java.lang.String,java.lang.String,org.jboss.netty.channel.ChannelHandler)",
            "org.jboss.netty.channel.DefaultChannelPipeline:void addAfter(java.lang.String,java.lang.String,org.jboss.netty.channel.ChannelHandler)",
            "org.jboss.netty.channel.DefaultChannelPipeline:org.jboss.netty.channel.ChannelHandler replace(org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext,java.lang.String,org.jboss.netty.channel.ChannelHandler)",
            "org.jboss.netty.channel.DefaultChannelPipeline:void init(java.lang.String,org.jboss.netty.channel.ChannelHandler)"
        ]
    },
    "org.jboss.netty.channel.DefaultChannelPipeline:void replace(org.jboss.netty.channel.ChannelHandler,java.lang.String,org.jboss.netty.channel.ChannelHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)"
        ]
    },
    "org.jboss.netty.channel.DefaultChannelPipeline:org.jboss.netty.channel.ChannelHandler replace(java.lang.String,java.lang.String,org.jboss.netty.channel.ChannelHandler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.channel.DefaultChannelPipeline:org.jboss.netty.channel.ChannelHandler replace(java.lang.Class,java.lang.String,org.jboss.netty.channel.ChannelHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker00$1:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker08$1:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker13$1:void operationComplete(org.jboss.netty.channel.ChannelFuture)"
        ]
    },
    "org.jboss.netty.channel.StaticChannelPipeline:void <init>(org.jboss.netty.channel.ChannelHandler[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.stc.Main:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Main:void main(java.lang.String[])"
        ]
    },
    "org.onlab.stc.Monitor:void <init>(org.onlab.stc.Coordinator,org.onlab.stc.Compiler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Main:void run()"
        ]
    },
    "org.onlab.stc.Compiler:boolean registerStep(org.onlab.stc.Step,org.apache.commons.configuration.HierarchicalConfiguration,java.lang.String,org.onlab.stc.Group)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Compiler:void processStep(org.apache.commons.configuration.HierarchicalConfiguration,java.lang.String,org.onlab.stc.Group)",
            "org.onlab.stc.Compiler:void processGroup(org.apache.commons.configuration.HierarchicalConfiguration,java.lang.String,org.onlab.stc.Group)"
        ]
    },
    "org.onlab.graph.AbstractGraphPathSearch$DefaultResult:boolean relaxEdge(org.onlab.graph.Edge,double,org.onlab.graph.EdgeWeight,boolean[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.graph.BellmanFordGraphSearch:org.onlab.graph.GraphPathSearch$Result search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)",
            "org.onlab.graph.DijkstraGraphSearch:org.onlab.graph.GraphPathSearch$Result search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)"
        ]
    },
    "org.onlab.graph.BellmanFordGraphSearch:org.onlab.graph.GraphPathSearch$Result search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.graph.BreadthFirstSearch:org.onlab.graph.GraphPathSearch$Result search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.graph.DepthFirstSearch:org.onlab.graph.DepthFirstSearch$SpanningTreeResult search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Compiler:void lambda$scanForCycles$9(org.onlab.graph.DepthFirstSearch,org.onlab.stc.Step)",
            "org.onlab.graph.DepthFirstSearch:org.onlab.graph.GraphPathSearch$Result search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)"
        ]
    },
    "org.onlab.graph.DijkstraGraphSearch:org.onlab.graph.GraphPathSearch$Result search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.graph.KShortestPathsSearch:org.onlab.graph.GraphPathSearch$Result search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)",
            "org.onlab.graph.SrlgGraphSearch:org.onlab.graph.GraphPathSearch$Result search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)",
            "org.onlab.graph.SrlgGraphSearch:org.onlab.graph.GraphPathSearch$Result findShortestPathFromSubset(boolean[])",
            "org.onlab.graph.SuurballeGraphSearch:org.onlab.graph.GraphPathSearch$Result search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)"
        ]
    },
    "org.onlab.graph.AbstractGraphPathSearch:void access$100(org.onlab.graph.AbstractGraphPathSearch,org.onlab.graph.AbstractGraphPathSearch$DefaultResult,org.onlab.graph.Vertex,org.onlab.graph.Vertex,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.graph.AbstractGraphPathSearch$DefaultResult:void buildPaths()"
        ]
    },
    "org.onlab.stc.ProcessFlow:void <init>(java.util.Set,java.util.Set)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Compiler:void compile()"
        ]
    },
    "org.onlab.graph.SuurballeGraphSearch:org.onlab.graph.MutableGraph mutableCopy(org.onlab.graph.Graph)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.graph.SuurballeGraphSearch:org.onlab.graph.GraphPathSearch$Result search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)"
        ]
    },
    "org.onlab.graph.SuurballeGraphSearch:org.onlab.graph.GraphPathSearch$Result search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.graph.KShortestPathsSearch:org.onlab.graph.GraphPathSearch$Result search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)",
            "org.onlab.graph.SrlgGraphSearch:org.onlab.graph.GraphPathSearch$Result search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)",
            "org.onlab.graph.SrlgGraphSearch:org.onlab.graph.GraphPathSearch$Result findShortestPathFromSubset(boolean[])",
            "org.onlab.graph.SuurballeGraphSearch:org.onlab.graph.GraphPathSearch$Result search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)"
        ]
    },
    "org.jboss.netty.util.DefaultObjectSizeEstimator:int estimateSize(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor:void increaseCounter(java.lang.Runnable)",
            "org.jboss.netty.handler.traffic.AbstractTrafficShapingHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.traffic.AbstractTrafficShapingHandler:void writeRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.util.DefaultObjectSizeEstimator:int estimateSize(java.lang.Object)"
        ]
    },
    "org.jboss.netty.handler.timeout.IdleStateHandler$AllIdleTimeoutTask:void run(org.jboss.netty.util.Timeout)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.HashedWheelTimer$HashedWheelTimeout:void expire()"
        ]
    },
    "org.jboss.netty.handler.timeout.IdleStateHandler$ReaderIdleTimeoutTask:void run(org.jboss.netty.util.Timeout)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.HashedWheelTimer$HashedWheelTimeout:void expire()"
        ]
    },
    "org.jboss.netty.handler.timeout.IdleStateHandler$WriterIdleTimeoutTask:void run(org.jboss.netty.util.Timeout)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.HashedWheelTimer$HashedWheelTimeout:void expire()"
        ]
    },
    "org.jboss.netty.handler.timeout.IdleStateHandler:void initialize(org.jboss.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.timeout.IdleStateHandler:void beforeAdd(org.jboss.netty.channel.ChannelHandlerContext)",
            "org.jboss.netty.handler.timeout.IdleStateHandler:void channelOpen(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)"
        ]
    },
    "org.jboss.netty.handler.timeout.ReadTimeoutHandler:void initialize(org.jboss.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.timeout.ReadTimeoutHandler:void beforeAdd(org.jboss.netty.channel.ChannelHandlerContext)",
            "org.jboss.netty.handler.timeout.ReadTimeoutHandler:void channelOpen(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)"
        ]
    },
    "org.jboss.netty.handler.traffic.TrafficCounter$TrafficMonitoringTask:void run(org.jboss.netty.util.Timeout)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.HashedWheelTimer$HashedWheelTimeout:void expire()"
        ]
    },
    "org.jboss.netty.handler.traffic.TrafficCounter:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.traffic.ChannelTrafficShapingHandler:void channelConnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.handler.traffic.GlobalTrafficShapingHandler:void createGlobalTrafficCounter()",
            "org.jboss.netty.handler.traffic.TrafficCounter:void configure(long)"
        ]
    },
    "org.apache.commons.lang.builder.HashCodeBuilder:void reflectionAppend(java.lang.Object,java.lang.Class,org.apache.commons.lang.builder.HashCodeBuilder,boolean,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.builder.HashCodeBuilder:int reflectionHashCode(int,int,java.lang.Object,boolean,java.lang.Class,java.lang.String[])"
        ]
    },
    "org.apache.commons.lang.CharSet:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.CharSet:org.apache.commons.lang.CharSet getInstance(java.lang.String)",
            "org.apache.commons.lang.CharSet:void <clinit>()"
        ]
    },
    "org.apache.commons.lang.CharSet:void <init>(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.CharSet:org.apache.commons.lang.CharSet getInstance(java.lang.String[])",
            "org.apache.commons.lang.CharSetUtils:org.apache.commons.lang.CharSet evaluateSet(java.lang.String[])"
        ]
    },
    "org.apache.commons.lang3.builder.EqualsBuilder:void reflectionAppend(java.lang.Object,java.lang.Object,java.lang.Class,org.apache.commons.lang3.builder.EqualsBuilder,boolean,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.builder.EqualsBuilder:boolean reflectionEquals(java.lang.Object,java.lang.Object,boolean,java.lang.Class,java.lang.String[])"
        ]
    },
    "org.apache.commons.lang3.builder.HashCodeBuilder:void reflectionAppend(java.lang.Object,java.lang.Class,org.apache.commons.lang3.builder.HashCodeBuilder,boolean,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.builder.HashCodeBuilder:int reflectionHashCode(int,int,java.lang.Object,boolean,java.lang.Class,java.lang.String[])"
        ]
    },
    "org.apache.commons.lang3.CharSet:void <init>(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.CharSet:org.apache.commons.lang3.CharSet getInstance(java.lang.String[])",
            "org.apache.commons.lang3.CharSet:void <clinit>()"
        ]
    },
    "org.apache.commons.lang3.ClassUtils$2$1:java.lang.Object next()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Compiler:void processSequentialRequirements(java.lang.String,java.lang.String,java.lang.String)",
            "org.onlab.stc.Compiler:void processRequirements(org.onlab.stc.Step,java.lang.String,java.lang.String)",
            "org.onlab.stc.Coordinator:org.onlab.stc.Coordinator$Directive nextAction(org.onlab.stc.Step)",
            "org.onlab.stc.Coordinator:void completeParentIfNeeded(org.onlab.stc.Group)",
            "org.onlab.stc.MonitorLayout:void computeChildPlacements(org.onlab.stc.Group,org.onlab.stc.MonitorLayout$Box,java.util.Set)",
            "org.onlab.stc.MonitorWebSocketServlet$Pruner:void run()",
            "org.onlab.stc.ScenarioStore:boolean hasFailures()",
            "org.onlab.graph.AbstractGraphPathSearch$DefaultResult:void buildPaths()",
            "org.onlab.graph.AbstractGraphPathSearch:void buildAllPaths(org.onlab.graph.AbstractGraphPathSearch$DefaultResult,org.onlab.graph.Vertex,org.onlab.graph.Vertex,int)",
            "org.onlab.graph.AdjacencyListsGraph:void <init>(java.util.Set,java.util.Set)",
            "org.onlab.graph.BellmanFordGraphSearch:org.onlab.graph.GraphPathSearch$Result search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)",
            "org.onlab.graph.BreadthFirstSearch:org.onlab.graph.GraphPathSearch$Result search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)",
            "org.onlab.graph.DepthFirstSearch:org.onlab.graph.DepthFirstSearch$SpanningTreeResult search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)",
            "org.onlab.graph.DepthFirstSearch:boolean isForwardEdge(org.onlab.graph.AbstractGraphPathSearch$DefaultResult,org.onlab.graph.Edge)",
            "org.onlab.graph.DijkstraGraphSearch:org.onlab.graph.GraphPathSearch$Result search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)",
            "org.onlab.graph.GAPopulation:void step()",
            "org.onlab.graph.KShortestPathsSearch:org.onlab.graph.GraphPathSearch$Result search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)",
            "org.onlab.graph.KShortestPathsSearch:java.lang.Double calculatePathCost(org.onlab.graph.EdgeWeight,java.util.List)",
            "org.onlab.graph.MutableAdjacencyListsGraph:void <init>(java.util.Set,java.util.Set)",
            "org.onlab.graph.SrlgGraphSearch$1:java.util.Set paths()",
            "org.onlab.graph.SrlgGraphSearch$Subset:double fitness()",
            "org.onlab.graph.SrlgGraphSearch$Subset:java.util.Set buildPaths()",
            "org.onlab.graph.SrlgGraphSearch:void <init>(java.util.Map)",
            "org.onlab.graph.SrlgGraphSearch:org.onlab.graph.GraphPathSearch$Result search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)",
            "org.onlab.graph.SuurballeGraphSearch$2:java.util.Set paths()",
            "org.onlab.graph.SuurballeGraphSearch:org.onlab.graph.GraphPathSearch$Result search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)",
            "org.onlab.graph.SuurballeGraphSearch:org.onlab.graph.MutableGraph mutableCopy(org.onlab.graph.Graph)",
            "org.onlab.graph.TarjanGraphSearch$SccResult:java.util.Set findClusterEdges(java.util.Set)",
            "org.onlab.graph.TarjanGraphSearch:org.onlab.graph.TarjanGraphSearch$SccResult search(org.onlab.graph.Graph,org.onlab.graph.EdgeWeight)",
            "org.onlab.graph.TarjanGraphSearch:org.onlab.graph.TarjanGraphSearch$VertexData connect(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,org.onlab.graph.TarjanGraphSearch$SccResult)",
            "org.onlab.packet.DHCP:org.onlab.packet.DHCPOption getOption(org.onlab.packet.DHCP$DHCPOptionCode)",
            "org.onlab.packet.DHCP:byte[] serialize()",
            "org.onlab.packet.IGMP:byte[] serialize()",
            "org.onlab.packet.IGMPMembership:byte[] serialize(java.nio.ByteBuffer)",
            "org.onlab.packet.IGMPQuery:byte[] serialize(java.nio.ByteBuffer)",
            "org.onlab.packet.IPv4:java.lang.String fromIPv4AddressCollection(java.util.Collection)",
            "org.onlab.packet.LLDP:byte[] serialize()",
            "org.onlab.packet.ONOSLLDP:org.onlab.packet.LLDPOrganizationalTLV getNameTLV()",
            "org.onlab.packet.ONOSLLDP:org.onlab.packet.LLDPOrganizationalTLV getDeviceTLV()",
            "org.onlab.packet.RADIUS:org.onlab.packet.EAP decapsulateMessage()",
            "org.onlab.packet.ndp.NeighborAdvertisement:org.onlab.packet.ndp.NeighborAdvertisement lambda$deserializer$1(byte[],int,int)",
            "org.onlab.packet.ndp.NeighborDiscoveryOptions:byte[] serialize()",
            "org.onlab.packet.ndp.NeighborDiscoveryOptions:int hashCode()",
            "org.onlab.packet.ndp.NeighborSolicitation:org.onlab.packet.ndp.NeighborSolicitation lambda$deserializer$42(byte[],int,int)",
            "org.onlab.packet.ndp.Redirect:org.onlab.packet.ndp.Redirect lambda$deserializer$47(byte[],int,int)",
            "org.onlab.packet.ndp.RouterAdvertisement:org.onlab.packet.ndp.RouterAdvertisement lambda$deserializer$41(byte[],int,int)",
            "org.onlab.packet.ndp.RouterSolicitation:org.onlab.packet.ndp.RouterSolicitation lambda$deserializer$44(byte[],int,int)",
            "org.onlab.packet.pim.PIMHello:byte[] serialize()",
            "org.onlab.packet.pim.PIMJoinPrune:byte[] serialize()",
            "org.onlab.util.KryoNamespace$Builder:org.onlab.util.KryoNamespace$Builder register(org.onlab.util.KryoNamespace)",
            "org.onlab.util.KryoNamespace:com.esotericsoftware.kryo.Kryo create()",
            "org.jboss.netty.bootstrap.Bootstrap:void setPipelineAsMap(java.util.Map)",
            "org.jboss.netty.bootstrap.Bootstrap:boolean isOrderedMap(java.util.Map)",
            "org.jboss.netty.bootstrap.ServerBootstrap$Binder:void channelOpen(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.channel.Channels:org.jboss.netty.channel.ChannelPipeline pipeline(org.jboss.netty.channel.ChannelPipeline)",
            "org.jboss.netty.channel.DefaultChannelConfig:void setOptions(java.util.Map)",
            "org.jboss.netty.channel.DefaultChannelFuture:void notifyListeners()",
            "org.jboss.netty.channel.DefaultServerChannelConfig:void setOptions(java.util.Map)",
            "org.jboss.netty.channel.group.CombinedIterator:java.lang.Object next()",
            "org.jboss.netty.channel.group.DefaultChannelGroup:org.jboss.netty.channel.group.ChannelGroupFuture close()",
            "org.jboss.netty.channel.group.DefaultChannelGroup:org.jboss.netty.channel.group.ChannelGroupFuture disconnect()",
            "org.jboss.netty.channel.group.DefaultChannelGroup:org.jboss.netty.channel.group.ChannelGroupFuture setInterestOps(int)",
            "org.jboss.netty.channel.group.DefaultChannelGroup:org.jboss.netty.channel.group.ChannelGroupFuture setReadable(boolean)",
            "org.jboss.netty.channel.group.DefaultChannelGroup:org.jboss.netty.channel.group.ChannelGroupFuture unbind()",
            "org.jboss.netty.channel.group.DefaultChannelGroup:org.jboss.netty.channel.group.ChannelGroupFuture write(java.lang.Object)",
            "org.jboss.netty.channel.group.DefaultChannelGroup:org.jboss.netty.channel.group.ChannelGroupFuture write(java.lang.Object,java.net.SocketAddress)",
            "org.jboss.netty.channel.group.DefaultChannelGroupFuture:void <init>(org.jboss.netty.channel.group.ChannelGroup,java.util.Collection)",
            "org.jboss.netty.channel.group.DefaultChannelGroupFuture:void <init>(org.jboss.netty.channel.group.ChannelGroup,java.util.Map)",
            "org.jboss.netty.channel.group.DefaultChannelGroupFuture:void notifyListeners()",
            "org.jboss.netty.channel.socket.http.HttpTunnelingSocketChannelConfig:void setOptions(java.util.Map)",
            "org.jboss.netty.channel.socket.nio.AbstractNioSelector:void rebuildSelector()",
            "org.jboss.netty.channel.socket.nio.AbstractNioSelector:void run()",
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void process(java.nio.channels.Selector)",
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void write0(org.jboss.netty.channel.socket.nio.AbstractNioChannel)",
            "org.jboss.netty.channel.socket.nio.NioClientBoss:void processSelectedKeys(java.util.Set)",
            "org.jboss.netty.channel.socket.nio.NioClientBoss:void processConnectTimeout(java.util.Set,long)",
            "org.jboss.netty.channel.socket.nio.NioDatagramChannel:org.jboss.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress)",
            "org.jboss.netty.channel.socket.nio.NioDatagramChannel:org.jboss.netty.channel.ChannelFuture block(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress)",
            "org.jboss.netty.channel.socket.nio.NioServerBoss:void process(java.nio.channels.Selector)",
            "org.jboss.netty.handler.codec.frame.FrameDecoder:void unfoldAndFireMessageReceived(org.jboss.netty.channel.ChannelHandlerContext,java.net.SocketAddress,java.lang.Object)",
            "org.jboss.netty.handler.codec.http.CookieEncoder:java.lang.String encodeServerSide()",
            "org.jboss.netty.handler.codec.http.CookieEncoder:java.lang.String encodeClientSide()",
            "org.jboss.netty.handler.codec.http.DefaultCookie:void setPorts(java.lang.Iterable)",
            "org.jboss.netty.handler.codec.http.DefaultHttpChunkTrailer:void appendHeaders(java.lang.StringBuilder)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:org.jboss.netty.handler.codec.http.HttpHeaders add(java.lang.String,java.lang.Iterable)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:org.jboss.netty.handler.codec.http.HttpHeaders set(java.lang.String,java.lang.Iterable)",
            "org.jboss.netty.handler.codec.http.DefaultHttpMessage:void appendHeaders(java.lang.StringBuilder)",
            "org.jboss.netty.handler.codec.http.HttpChunkAggregator:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.codec.http.HttpCodecUtil:boolean isTransferEncodingChunked(org.jboss.netty.handler.codec.http.HttpMessage)",
            "org.jboss.netty.handler.codec.http.HttpCodecUtil:void removeTransferEncodingChunked(org.jboss.netty.handler.codec.http.HttpMessage)",
            "org.jboss.netty.handler.codec.http.HttpHeaders:void removeTransferEncodingChunked(org.jboss.netty.handler.codec.http.HttpMessage)",
            "org.jboss.netty.handler.codec.http.HttpHeaders:org.jboss.netty.handler.codec.http.HttpHeaders add(org.jboss.netty.handler.codec.http.HttpHeaders)",
            "org.jboss.netty.handler.codec.http.HttpHeaders:org.jboss.netty.handler.codec.http.HttpHeaders set(org.jboss.netty.handler.codec.http.HttpHeaders)",
            "org.jboss.netty.handler.codec.http.HttpHeaders:boolean contains(java.lang.String,java.lang.String,boolean)",
            "org.jboss.netty.handler.codec.http.HttpMessageEncoder:void encodeHeaders(org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.http.HttpMessage)",
            "org.jboss.netty.handler.codec.http.HttpMessageEncoder:void encodeTrailingHeaders(org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.http.HttpChunkTrailer)",
            "org.jboss.netty.handler.codec.http.multipart.DefaultHttpDataFactory:void cleanRequestHttpDatas(org.jboss.netty.handler.codec.http.HttpRequest)",
            "org.jboss.netty.handler.codec.http.multipart.DefaultHttpDataFactory:void cleanAllHttpDatas()",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder:void setBodyHttpDatas(java.util.List)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder:org.jboss.netty.handler.codec.http.HttpRequest finalizeRequest()",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder:java.lang.String encodeAttribute(java.lang.String,java.nio.charset.Charset)",
            "org.jboss.netty.handler.codec.http.multipart.InternalAttribute:int size()",
            "org.jboss.netty.handler.codec.http.multipart.InternalAttribute:java.lang.String toString()",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker00:org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker07:org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker08:org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker13:org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.handler.codec.serialization.ReferenceMap:void putAll(java.util.Map)",
            "org.jboss.netty.handler.codec.socks.SocksInitRequest:void encodeAsByteBuf(org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdyHeaders:org.jboss.netty.handler.codec.spdy.SpdyHeaders set(java.lang.String,java.lang.Iterable)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdyHeaders:org.jboss.netty.handler.codec.spdy.SpdyHeaders add(java.lang.String,java.lang.Iterable)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdyHeadersFrame:void appendHeaders(java.lang.StringBuilder)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame:void appendSettings(java.lang.StringBuilder)",
            "org.jboss.netty.handler.codec.spdy.SpdyFrameEncoder:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.codec.spdy.SpdyHeaderBlockRawEncoder:org.jboss.netty.buffer.ChannelBuffer encode(org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "org.jboss.netty.handler.codec.spdy.SpdyHttpDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)",
            "org.jboss.netty.handler.codec.spdy.SpdyHttpDecoder:org.jboss.netty.handler.codec.http.HttpRequest createHttpRequest(int,org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "org.jboss.netty.handler.codec.spdy.SpdyHttpDecoder:org.jboss.netty.handler.codec.http.HttpResponse createHttpResponse(int,org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "org.jboss.netty.handler.codec.spdy.SpdyHttpEncoder:void writeChunk(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelFuture,int,org.jboss.netty.handler.codec.http.HttpChunk,java.net.SocketAddress)",
            "org.jboss.netty.handler.codec.spdy.SpdyHttpEncoder:org.jboss.netty.handler.codec.spdy.SpdySynStreamFrame createSynStreamFrame(org.jboss.netty.handler.codec.http.HttpMessage)",
            "org.jboss.netty.handler.codec.spdy.SpdyHttpEncoder:org.jboss.netty.handler.codec.spdy.SpdySynReplyFrame createSynReplyFrame(org.jboss.netty.handler.codec.http.HttpResponse)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:void updateAllSendWindowSizes(int)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:void updateAllReceiveWindowSizes(int)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:org.jboss.netty.channel.MessageEvent getPendingWrite(int)",
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor:java.util.List shutdownNow(boolean)",
            "org.jboss.netty.handler.ipfilter.IpFilterRuleHandler:boolean accept(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent,java.net.InetSocketAddress)",
            "org.jboss.netty.handler.queue.BufferedWriteHandler$1:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.util.DefaultObjectSizeEstimator:int estimateSize(java.lang.Object)",
            "org.jboss.netty.util.VirtualExecutorService:java.util.List shutdownNow()",
            "org.jboss.netty.util.internal.ConcurrentHashMap:void putAll(java.util.Map)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap:void putAll(java.util.Map)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap:void putAll(java.util.Map)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap:void putAll(java.util.Map)",
            "org.jboss.netty.util.internal.ConversionUtil:java.lang.String[] toStringArray(java.lang.Object)",
            "org.apache.commons.lang.CharSet:boolean contains(char)",
            "org.apache.commons.lang.ClassUtils:java.util.List convertClassNamesToClasses(java.util.List)",
            "org.apache.commons.lang.ClassUtils:java.util.List convertClassesToClassNames(java.util.List)",
            "org.apache.commons.lang.ClassUtils:java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])",
            "org.apache.commons.lang.ClassUtils:void <clinit>()",
            "org.apache.commons.lang.enum.ValuedEnum:org.apache.commons.lang.'enum'.Enum getEnum(java.lang.Class,int)",
            "org.apache.commons.lang.enums.ValuedEnum:org.apache.commons.lang.enums.Enum getEnum(java.lang.Class,int)",
            "org.apache.commons.lang.exception.NestableDelegate:void printStackTrace(java.io.PrintWriter)",
            "org.apache.commons.lang.reflect.FieldUtils:java.lang.reflect.Field getField(java.lang.Class,java.lang.String,boolean)",
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.util.Iterator,char)",
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.util.Iterator,java.lang.String)",
            "org.apache.commons.lang.text.ExtendedMessageFormat:void applyPattern(java.lang.String)",
            "org.apache.commons.lang.text.ExtendedMessageFormat:boolean containsElements(java.util.Collection)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendAll(java.util.Collection)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendAll(java.util.Iterator)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendWithSeparators(java.util.Collection,java.lang.String)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendWithSeparators(java.util.Iterator,java.lang.String)",
            "org.apache.commons.lang.Validate:void noNullElements(java.util.Collection,java.lang.String)",
            "org.apache.commons.lang.Validate:void noNullElements(java.util.Collection)",
            "org.apache.commons.lang.Validate:void allElementsOfType(java.util.Collection,java.lang.Class,java.lang.String)",
            "org.apache.commons.lang.Validate:void allElementsOfType(java.util.Collection,java.lang.Class)",
            "org.apache.commons.lang3.AnnotationUtils$1:java.lang.String getShortClassName(java.lang.Class)",
            "org.apache.commons.lang3.ArrayUtils:java.lang.Object[] removeElements(java.lang.Object[],java.lang.Object[])",
            "org.apache.commons.lang3.ArrayUtils:byte[] removeElements(byte[],byte[])",
            "org.apache.commons.lang3.ArrayUtils:short[] removeElements(short[],short[])",
            "org.apache.commons.lang3.ArrayUtils:int[] removeElements(int[],int[])",
            "org.apache.commons.lang3.ArrayUtils:char[] removeElements(char[],char[])",
            "org.apache.commons.lang3.ArrayUtils:long[] removeElements(long[],long[])",
            "org.apache.commons.lang3.ArrayUtils:float[] removeElements(float[],float[])",
            "org.apache.commons.lang3.ArrayUtils:double[] removeElements(double[],double[])",
            "org.apache.commons.lang3.ArrayUtils:boolean[] removeElements(boolean[],boolean[])",
            "org.apache.commons.lang3.builder.DiffResult:java.lang.String toString(org.apache.commons.lang3.builder.ToStringStyle)",
            "org.apache.commons.lang3.CharSet:boolean contains(char)",
            "org.apache.commons.lang3.ClassUtils$2$1:java.lang.Class next()",
            "org.apache.commons.lang3.ClassUtils:java.util.List convertClassNamesToClasses(java.util.List)",
            "org.apache.commons.lang3.ClassUtils:java.util.List convertClassesToClassNames(java.util.List)",
            "org.apache.commons.lang3.ClassUtils:java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])",
            "org.apache.commons.lang3.ClassUtils:void <clinit>()",
            "org.apache.commons.lang3.concurrent.MultiBackgroundInitializer:int getTaskCount()",
            "org.apache.commons.lang3.concurrent.MultiBackgroundInitializer:org.apache.commons.lang3.concurrent.MultiBackgroundInitializer$MultiBackgroundInitializerResults initialize()",
            "org.apache.commons.lang3.EnumUtils:long generateBitVector(java.lang.Class,java.lang.Iterable)",
            "org.apache.commons.lang3.EnumUtils:long[] generateBitVectors(java.lang.Class,java.lang.Iterable)",
            "org.apache.commons.lang3.EnumUtils:long[] generateBitVectors(java.lang.Class,java.lang.Enum[])",
            "org.apache.commons.lang3.event.EventListenerSupport$ProxyInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.commons.lang3.event.EventListenerSupport:void writeObject(java.io.ObjectOutputStream)",
            "org.apache.commons.lang3.exception.DefaultExceptionContext:org.apache.commons.lang3.exception.DefaultExceptionContext setContextValue(java.lang.String,java.lang.Object)",
            "org.apache.commons.lang3.exception.DefaultExceptionContext:java.util.List getContextValues(java.lang.String)",
            "org.apache.commons.lang3.exception.DefaultExceptionContext:java.lang.Object getFirstContextValue(java.lang.String)",
            "org.apache.commons.lang3.exception.DefaultExceptionContext:java.util.Set getContextLabels()",
            "org.apache.commons.lang3.exception.DefaultExceptionContext:java.lang.String getFormattedExceptionMessage(java.lang.String)",
            "org.apache.commons.lang3.ObjectUtils:java.lang.Object mode(java.lang.Object[])",
            "org.apache.commons.lang3.reflect.FieldUtils:java.lang.reflect.Field getField(java.lang.Class,java.lang.String,boolean)",
            "org.apache.commons.lang3.reflect.MethodUtils:java.util.Set getOverrideHierarchy(java.lang.reflect.Method,org.apache.commons.lang3.ClassUtils$Interfaces)",
            "org.apache.commons.lang3.reflect.TypeUtils:boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.ParameterizedType,java.util.Map)",
            "org.apache.commons.lang3.reflect.TypeUtils:boolean typesSatisfyVariables(java.util.Map)",
            "org.apache.commons.lang3.StringUtils:java.lang.String join(java.util.Iterator,char)",
            "org.apache.commons.lang3.StringUtils:java.lang.String join(java.util.Iterator,java.lang.String)",
            "org.apache.commons.lang3.text.ExtendedMessageFormat:void applyPattern(java.lang.String)",
            "org.apache.commons.lang3.text.ExtendedMessageFormat:boolean containsElements(java.util.Collection)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendAll(java.lang.Iterable)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendAll(java.util.Iterator)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendWithSeparators(java.lang.Iterable,java.lang.String)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendWithSeparators(java.util.Iterator,java.lang.String)",
            "org.apache.commons.lang3.time.FastDateParser$TextStrategy:boolean addRegex(org.apache.commons.lang3.time.FastDateParser,java.lang.StringBuilder)",
            "org.apache.commons.lang3.time.FastDateParser$TextStrategy:void setCalendar(org.apache.commons.lang3.time.FastDateParser,java.util.Calendar,java.lang.String)",
            "org.apache.commons.lang3.time.FastDateParser$TimeZoneStrategy:void <init>(java.util.Locale)",
            "org.apache.commons.lang3.Validate:java.lang.Iterable noNullElements(java.lang.Iterable,java.lang.String,java.lang.Object[])",
            "com.eclipsesource.json.JsonArray$1:com.eclipsesource.json.JsonValue next()",
            "com.eclipsesource.json.JsonObject$1:com.eclipsesource.json.JsonObject$Member next()",
            "com.eclipsesource.json.JsonWriter:void writeObject(com.eclipsesource.json.JsonObject)",
            "com.eclipsesource.json.JsonWriter:void writeArray(com.eclipsesource.json.JsonArray)",
            "com.esotericsoftware.kryo.serializers.CollectionSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.Collection)",
            "com.esotericsoftware.kryo.serializers.CollectionSerializer:java.util.Collection copy(com.esotericsoftware.kryo.Kryo,java.util.Collection)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$CollectionsSingletonMapSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.Map)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$CollectionsSingletonSetSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.Set)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.EnumSet)",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:void rebuildCachedFields(boolean)",
            "com.esotericsoftware.kryo.serializers.MapSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.Map)",
            "com.esotericsoftware.kryo.serializers.MapSerializer:java.util.Map copy(com.esotericsoftware.kryo.Kryo,java.util.Map)",
            "com.esotericsoftware.kryo.util.IntMap:void putAll(com.esotericsoftware.kryo.util.IntMap)",
            "com.esotericsoftware.kryo.util.ObjectMap:void putAll(com.esotericsoftware.kryo.util.ObjectMap)",
            "com.esotericsoftware.kryo.util.UnsafeUtil:java.lang.reflect.Field[] sortFieldsByOffset(java.util.List)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.CollectionSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readClassAndObject(com.esotericsoftware.kryo.io.Input)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:java.util.EnumSet read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.CollectionSerializer:java.lang.Object copy(com.esotericsoftware.kryo.Kryo,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:java.lang.Object copy(java.lang.Object)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object copy(java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object copyShallow(java.lang.Object)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object copyShallow(java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:java.lang.Object copy(com.esotericsoftware.kryo.Kryo,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:java.lang.Object copy(com.esotericsoftware.kryo.Kryo,java.lang.Object)"
        ]
    },
    "org.jboss.netty.bootstrap.Bootstrap:void releaseExternalResources()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.NioClientSocketChannelFactory:void releasePools()",
            "org.jboss.netty.channel.socket.nio.NioDatagramChannelFactory:void releasePool()",
            "org.jboss.netty.channel.socket.nio.NioServerSocketChannelFactory:void releasePools()",
            "org.jboss.netty.channel.socket.nio.ShareableWorkerPool:void destroy()",
            "org.jboss.netty.handler.execution.ChainedExecutor:void releaseExternal(java.util.concurrent.Executor)",
            "org.jboss.netty.handler.execution.ExecutionHandler:void releaseExternalResources()",
            "org.jboss.netty.util.ExternalResourceUtil:void release(org.jboss.netty.util.ExternalResourceReleasable[])"
        ]
    },
    "org.jboss.netty.channel.socket.http.HttpTunnelingServlet:void destroyChannelFactory(org.jboss.netty.channel.ChannelFactory)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.channel.socket.nio.NioClientSocketChannelFactory:void releasePools()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.NioClientSocketChannelFactory:void shutdown()",
            "org.jboss.netty.channel.socket.nio.NioClientSocketChannelFactory:void releaseExternalResources()"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioDatagramChannelFactory:void releasePool()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.NioDatagramChannelFactory:void shutdown()",
            "org.jboss.netty.channel.socket.nio.NioDatagramChannelFactory:void releaseExternalResources()"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioServerSocketChannelFactory:void releasePools()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.NioServerSocketChannelFactory:void shutdown()",
            "org.jboss.netty.channel.socket.nio.NioServerSocketChannelFactory:void releaseExternalResources()"
        ]
    },
    "org.jboss.netty.channel.socket.nio.ShareableWorkerPool:void destroy()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.execution.ChainedExecutor:void releaseExternal(java.util.concurrent.Executor)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.execution.ChainedExecutor:void releaseExternalResources()"
        ]
    },
    "org.jboss.netty.handler.execution.ExecutionHandler:void releaseExternalResources()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.NioClientSocketChannelFactory:void releasePools()",
            "org.jboss.netty.channel.socket.nio.NioDatagramChannelFactory:void releasePool()",
            "org.jboss.netty.channel.socket.nio.NioServerSocketChannelFactory:void releasePools()",
            "org.jboss.netty.channel.socket.nio.ShareableWorkerPool:void destroy()",
            "org.jboss.netty.handler.execution.ChainedExecutor:void releaseExternal(java.util.concurrent.Executor)",
            "org.jboss.netty.handler.execution.ExecutionHandler:void releaseExternalResources()",
            "org.jboss.netty.util.ExternalResourceUtil:void release(org.jboss.netty.util.ExternalResourceReleasable[])"
        ]
    },
    "org.jboss.netty.util.ExternalResourceUtil:void release(org.jboss.netty.util.ExternalResourceReleasable[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.spdy.SpdyHttpCodec:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.DefaultChannelPipeline:void sendDownstream(org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.StaticChannelPipeline:void sendDownstream(org.jboss.netty.channel.StaticChannelPipeline$StaticChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.bootstrap.ServerBootstrap:org.jboss.netty.channel.Channel bind()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.channel.AbstractChannel:boolean setClosed()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.local.DefaultLocalChannel:boolean setClosed()",
            "org.jboss.netty.channel.local.DefaultLocalServerChannel:boolean setClosed()",
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel:boolean setClosed()",
            "org.jboss.netty.channel.socket.nio.AbstractNioChannel:boolean setClosed()",
            "org.jboss.netty.channel.socket.nio.NioServerSocketChannel:boolean setClosed()",
            "org.jboss.netty.channel.socket.oio.AbstractOioChannel:boolean setClosed()",
            "org.jboss.netty.channel.socket.oio.OioServerSocketChannel:boolean setClosed()"
        ]
    },
    "org.jboss.netty.handler.codec.http.HttpContentEncoder:org.jboss.netty.buffer.ChannelBuffer encode(org.jboss.netty.buffer.ChannelBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.HttpContentEncoder:void writeRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)"
        ]
    },
    "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor:java.util.List shutdownNow()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.ExecutorUtil:void shutdownNow(java.util.concurrent.Executor)"
        ]
    },
    "org.jboss.netty.handler.ssl.SslHandler:void access$200(org.jboss.netty.handler.ssl.SslHandler,org.jboss.netty.channel.Channel,javax.net.ssl.SSLException)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.ssl.SslHandler$1:void run(org.jboss.netty.util.Timeout)"
        ]
    },
    "org.jboss.netty.util.HashedWheelTimer$HashedWheelTimeout:void expire()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.HashedWheelTimer$Worker:void notifyExpiredTimeouts(java.util.List)"
        ]
    },
    "org.jboss.netty.bootstrap.ClientBootstrap:org.jboss.netty.channel.ChannelFuture connect(java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.bootstrap.ClientBootstrap:org.jboss.netty.channel.ChannelFuture connect()"
        ]
    },
    "org.jboss.netty.bootstrap.ConnectionlessBootstrap:org.jboss.netty.channel.Channel bind()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.bootstrap.ConnectionlessBootstrap:org.jboss.netty.channel.ChannelFuture connect(java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.bootstrap.ConnectionlessBootstrap:org.jboss.netty.channel.ChannelFuture connect()"
        ]
    },
    "org.jboss.netty.handler.codec.rtsp.RtspMessageDecoder:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.rtsp.RtspRequestDecoder:void <init>()",
            "org.jboss.netty.handler.codec.rtsp.RtspResponseDecoder:void <init>()"
        ]
    },
    "org.jboss.netty.handler.codec.rtsp.RtspRequestDecoder:void <init>(int,int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.rtsp.RtspResponseDecoder:void <init>(int,int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.channel.Channels:void write(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelFuture,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.compression.JdkZlibEncoder:org.jboss.netty.channel.ChannelFuture finishEncode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.codec.compression.ZlibEncoder:org.jboss.netty.channel.ChannelFuture finishEncode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.codec.http.HttpChunkAggregator:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.codec.spdy.SpdyHttpDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)",
            "org.jboss.netty.handler.queue.BufferedWriteHandler:java.util.List consolidatedWrite(java.util.List)",
            "org.jboss.netty.handler.ssl.SslHandler:org.jboss.netty.channel.ChannelFuture wrapNonAppData(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:org.jboss.netty.channel.ChannelFuture sendGoAwayFrame(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.net.SocketAddress,org.jboss.netty.handler.codec.spdy.SpdySessionStatus)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:void issueSessionError(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.net.SocketAddress,org.jboss.netty.handler.codec.spdy.SpdySessionStatus)",
            "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:void sendGoAwayFrame(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)"
        ]
    },
    "org.jboss.netty.handler.traffic.AbstractTrafficShapingHandler:void writeRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelHandler:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.http.HttpClientCodec:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.DefaultChannelPipeline:void sendDownstream(org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.StaticChannelPipeline:void sendDownstream(org.jboss.netty.channel.StaticChannelPipeline$StaticChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.http.HttpServerCodec:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.DefaultChannelPipeline:void sendDownstream(org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.StaticChannelPipeline:void sendDownstream(org.jboss.netty.channel.StaticChannelPipeline$StaticChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.SpdyFrameCodec:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.DefaultChannelPipeline:void sendDownstream(org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.StaticChannelPipeline:void sendDownstream(org.jboss.netty.channel.StaticChannelPipeline$StaticChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.AbstractChannel:org.jboss.netty.channel.ChannelFuture bind(java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.bootstrap.ClientBootstrap:org.jboss.netty.channel.ChannelFuture connect(java.net.SocketAddress,java.net.SocketAddress)",
            "org.jboss.netty.bootstrap.ClientBootstrap:org.jboss.netty.channel.ChannelFuture bind(java.net.SocketAddress)",
            "org.jboss.netty.bootstrap.ConnectionlessBootstrap:org.jboss.netty.channel.Channel bind(java.net.SocketAddress)",
            "org.jboss.netty.bootstrap.ConnectionlessBootstrap:org.jboss.netty.channel.ChannelFuture connect(java.net.SocketAddress,java.net.SocketAddress)",
            "org.jboss.netty.bootstrap.ServerBootstrap$Binder:void channelOpen(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel:void bindReal(java.net.SocketAddress,org.jboss.netty.channel.ChannelFuture)"
        ]
    },
    "org.jboss.netty.channel.AbstractChannel:org.jboss.netty.channel.ChannelFuture unbind()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.group.DefaultChannelGroup:org.jboss.netty.channel.group.ChannelGroupFuture unbind()",
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$6:void operationComplete(org.jboss.netty.channel.ChannelFuture)"
        ]
    },
    "org.jboss.netty.channel.AbstractChannel:org.jboss.netty.channel.ChannelFuture connect(java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.bootstrap.ClientBootstrap:org.jboss.netty.channel.ChannelFuture connect(java.net.SocketAddress,java.net.SocketAddress)",
            "org.jboss.netty.bootstrap.ConnectionlessBootstrap:org.jboss.netty.channel.ChannelFuture connect(java.net.SocketAddress,java.net.SocketAddress)",
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel:void connectReal(java.net.SocketAddress,org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.socket.http.HttpTunnelingServlet:void service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.jboss.netty.channel.AbstractChannel:org.jboss.netty.channel.ChannelFuture write(java.lang.Object,java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.group.DefaultChannelGroup:org.jboss.netty.channel.group.ChannelGroupFuture write(java.lang.Object,java.net.SocketAddress)",
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel:org.jboss.netty.channel.ChannelFuture write(java.lang.Object,java.net.SocketAddress)",
            "org.jboss.netty.channel.socket.nio.NioDatagramChannel:org.jboss.netty.channel.ChannelFuture write(java.lang.Object,java.net.SocketAddress)",
            "org.jboss.netty.channel.socket.nio.NioSocketChannel:org.jboss.netty.channel.ChannelFuture write(java.lang.Object,java.net.SocketAddress)",
            "org.jboss.netty.channel.socket.oio.AbstractOioChannel:org.jboss.netty.channel.ChannelFuture write(java.lang.Object,java.net.SocketAddress)"
        ]
    },
    "org.jboss.netty.channel.Channels:org.jboss.netty.channel.ChannelFuture write(org.jboss.netty.channel.Channel,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.AbstractChannel:org.jboss.netty.channel.ChannelFuture write(java.lang.Object)",
            "org.jboss.netty.handler.codec.embedder.EncoderEmbedder:boolean offer(java.lang.Object)"
        ]
    },
    "org.jboss.netty.channel.AbstractChannel:org.jboss.netty.channel.ChannelFuture setInterestOps(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.AbstractChannel:org.jboss.netty.channel.ChannelFuture setReadable(boolean)",
            "org.jboss.netty.channel.group.DefaultChannelGroup:org.jboss.netty.channel.group.ChannelGroupFuture setInterestOps(int)",
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel:void setInterestOpsReal(int,org.jboss.netty.channel.ChannelFuture)"
        ]
    },
    "org.jboss.netty.channel.AbstractChannel:org.jboss.netty.channel.ChannelFuture disconnect()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.group.DefaultChannelGroup:org.jboss.netty.channel.group.ChannelGroupFuture disconnect()",
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$5:void operationComplete(org.jboss.netty.channel.ChannelFuture)"
        ]
    },
    "org.jboss.netty.channel.AbstractChannel:org.jboss.netty.channel.ChannelFuture close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.bootstrap.ClientBootstrap:org.jboss.netty.channel.ChannelFuture connect(java.net.SocketAddress,java.net.SocketAddress)",
            "org.jboss.netty.bootstrap.ClientBootstrap:org.jboss.netty.channel.ChannelFuture bind(java.net.SocketAddress)",
            "org.jboss.netty.bootstrap.ConnectionlessBootstrap:org.jboss.netty.channel.Channel bind(java.net.SocketAddress)",
            "org.jboss.netty.bootstrap.ConnectionlessBootstrap:org.jboss.netty.channel.ChannelFuture connect(java.net.SocketAddress,java.net.SocketAddress)",
            "org.jboss.netty.bootstrap.ServerBootstrap$1:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.bootstrap.ServerBootstrap:org.jboss.netty.channel.Channel bind(java.net.SocketAddress)",
            "org.jboss.netty.channel.ChannelFutureListener$1:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.ChannelFutureListener$2:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.group.DefaultChannelGroup:org.jboss.netty.channel.group.ChannelGroupFuture close()",
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$7:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$ServletChannelHandler:void exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ExceptionEvent)",
            "org.jboss.netty.channel.socket.http.HttpTunnelingServlet$OutboundConnectionHandler:void exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ExceptionEvent)",
            "org.jboss.netty.channel.socket.http.HttpTunnelingServlet:void service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.jboss.netty.channel.socket.nio.NioServerBoss:void process(java.nio.channels.Selector)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler:void exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ExceptionEvent)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler:void exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "org.jboss.netty.handler.codec.marshalling.CompatibleMarshallingDecoder:void exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ExceptionEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.oneone.OneToOneStrictEncoder:boolean doEncode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.oneone.OneToOneEncoder:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.onlab.util.KryoNamespace:org.onlab.util.KryoNamespace populate(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.util.KryoNamespace$Builder:org.onlab.util.KryoNamespace build()"
        ]
    },
    "org.onlab.util.KryoNamespace:byte[] serialize(java.lang.Object,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.util.KryoNamespace:byte[] serialize(java.lang.Object)"
        ]
    },
    "org.onlab.util.KryoNamespace:void serialize(java.lang.Object,java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.util.KryoNamespace:void serialize(java.lang.Object,java.io.OutputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.util.KryoNamespace:void serialize(java.lang.Object,java.io.OutputStream)"
        ]
    },
    "org.onlab.util.KryoNamespace:java.lang.Object deserialize(byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.util.KryoNamespace:java.lang.Object deserialize(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.util.KryoNamespace:java.lang.Object deserialize(java.io.InputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.util.KryoNamespace:java.lang.Object deserialize(java.io.InputStream)"
        ]
    },
    "org.onlab.util.KryoNamespace:java.lang.Object run(com.esotericsoftware.kryo.pool.KryoCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.util.KryoNamespace:java.lang.Object run(com.esotericsoftware.kryo.pool.KryoCallback)"
        ]
    },
    "org.jboss.netty.handler.codec.http.HttpMessageDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.http.HttpMessageDecoder$State)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.HttpClientCodec$Decoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.http.HttpMessageDecoder$State)",
            "org.jboss.netty.handler.codec.http.HttpMessageDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,java.lang.Enum)",
            "org.jboss.netty.handler.codec.rtsp.RtspMessageDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.http.HttpMessageDecoder$State)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.AbstractNioBossPool:void rebuildSelectors()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.channel.socket.nio.AbstractNioSelector$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.util.BoundedThreadPool$CallerFeedbackPolicy:void rejectedExecution(java.lang.Runnable,java.util.concurrent.ThreadPoolExecutor)",
            "org.onlab.util.BoundedThreadPool:void execute(java.lang.Runnable)",
            "org.onlab.util.SharedExecutorService:void execute(java.lang.Runnable)",
            "org.jboss.netty.channel.AbstractChannelSink:org.jboss.netty.channel.ChannelFuture execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable)",
            "org.jboss.netty.channel.socket.ChannelRunnableWrapper:void run()",
            "org.jboss.netty.channel.socket.nio.AbstractNioSelector:void processTaskQueue()",
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void executeInIoThread(java.lang.Runnable,boolean)",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void executeInIoThread(java.lang.Runnable)",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void processEventQueue()",
            "org.jboss.netty.handler.codec.embedder.AbstractCodecEmbedder$EmbeddedChannelSink:org.jboss.netty.channel.ChannelFuture execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable)",
            "org.jboss.netty.handler.execution.ChainedExecutor:void execute(java.lang.Runnable)",
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor$MemoryAwareRunnable:void run()",
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor:void doUnorderedExecute(java.lang.Runnable)",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor$ChildExecutor:void run()",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor:void doExecute(java.lang.Runnable)",
            "org.jboss.netty.handler.ssl.ImmediateExecutor:void execute(java.lang.Runnable)",
            "org.jboss.netty.handler.ssl.SslHandler$4:void run()",
            "org.jboss.netty.util.ThreadRenamingRunnable:void run()",
            "org.jboss.netty.util.VirtualExecutorService$ChildExecutorRunnable:void run()",
            "org.jboss.netty.util.internal.DeadLockProofWorker$1:void run()",
            "org.jboss.netty.util.internal.UnterminatableExecutor:void execute(java.lang.Runnable)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.AbstractNioWorkerPool:void rebuildSelectors()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.ShareableWorkerPool:void rebuildSelectors()"
        ]
    },
    "org.jboss.netty.channel.socket.nio.AbstractNioSelector:void <init>(java.util.concurrent.Executor)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void <init>(java.util.concurrent.Executor)",
            "org.jboss.netty.channel.socket.nio.NioServerBoss:void <init>(java.util.concurrent.Executor)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void <init>(java.util.concurrent.Executor,org.jboss.netty.util.ThreadNameDeterminer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.NioWorker:void <init>(java.util.concurrent.Executor,org.jboss.netty.util.ThreadNameDeterminer)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioClientBoss:void <init>(java.util.concurrent.Executor,org.jboss.netty.util.Timer,org.jboss.netty.util.ThreadNameDeterminer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.NioClientBossPool:org.jboss.netty.channel.socket.nio.NioClientBoss newBoss(java.util.concurrent.Executor)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioServerBoss:void <init>(java.util.concurrent.Executor,org.jboss.netty.util.ThreadNameDeterminer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.NioServerBossPool:org.jboss.netty.channel.socket.nio.NioServerBoss newBoss(java.util.concurrent.Executor)"
        ]
    },
    "org.jboss.netty.handler.codec.socks.SocksAuthRequestDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.socks.SocksAuthRequestDecoder$State)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.socks.SocksAuthRequestDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,java.lang.Enum)"
        ]
    },
    "org.jboss.netty.handler.codec.socks.SocksAuthResponseDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.socks.SocksAuthResponseDecoder$State)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.socks.SocksAuthResponseDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,java.lang.Enum)"
        ]
    },
    "org.jboss.netty.handler.codec.socks.SocksCmdRequestDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.socks.SocksCmdRequestDecoder$State)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.socks.SocksCmdRequestDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,java.lang.Enum)"
        ]
    },
    "org.jboss.netty.handler.codec.socks.SocksCmdResponseDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.socks.SocksCmdResponseDecoder$State)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.socks.SocksCmdResponseDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,java.lang.Enum)"
        ]
    },
    "org.jboss.netty.handler.codec.socks.SocksInitRequestDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.socks.SocksInitRequestDecoder$State)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.socks.SocksInitRequestDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,java.lang.Enum)"
        ]
    },
    "org.jboss.netty.handler.codec.socks.SocksInitResponseDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.socks.SocksInitResponseDecoder$State)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.socks.SocksInitResponseDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,java.lang.Enum)"
        ]
    },
    "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerHandshaker$2:void operationComplete(org.jboss.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.CompleteChannelFuture:void addListener(org.jboss.netty.channel.ChannelFutureListener)",
            "org.jboss.netty.channel.DefaultChannelFuture:void notifyListener(org.jboss.netty.channel.ChannelFutureListener)"
        ]
    },
    "org.jboss.netty.channel.DefaultChannelPipeline:void addFirst(java.lang.String,org.jboss.netty.channel.ChannelHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.DefaultChannelPipeline:void addBefore(java.lang.String,java.lang.String,org.jboss.netty.channel.ChannelHandler)",
            "org.jboss.netty.channel.DefaultChannelPipeline:org.jboss.netty.channel.ChannelHandler replace(org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext,java.lang.String,org.jboss.netty.channel.ChannelHandler)",
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$2:void operationComplete(org.jboss.netty.channel.ChannelFuture)"
        ]
    },
    "org.jboss.netty.channel.DefaultChannelPipeline:void addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.bootstrap.Bootstrap:void setPipelineAsMap(java.util.Map)",
            "org.jboss.netty.bootstrap.ServerBootstrap:org.jboss.netty.channel.ChannelFuture bindAsync(java.net.SocketAddress)",
            "org.jboss.netty.channel.Channels:org.jboss.netty.channel.ChannelPipeline pipeline(org.jboss.netty.channel.ChannelHandler[])",
            "org.jboss.netty.channel.Channels:org.jboss.netty.channel.ChannelPipeline pipeline(org.jboss.netty.channel.ChannelPipeline)",
            "org.jboss.netty.channel.DefaultChannelPipeline:void addAfter(java.lang.String,java.lang.String,org.jboss.netty.channel.ChannelHandler)",
            "org.jboss.netty.channel.DefaultChannelPipeline:org.jboss.netty.channel.ChannelHandler replace(org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext,java.lang.String,org.jboss.netty.channel.ChannelHandler)",
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel:void <init>(org.jboss.netty.channel.ChannelFactory,org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelSink,org.jboss.netty.channel.socket.ClientSocketChannelFactory)",
            "org.jboss.netty.channel.socket.http.HttpTunnelingServlet:void service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.jboss.netty.handler.codec.embedder.AbstractCodecEmbedder:void configurePipeline(org.jboss.netty.channel.ChannelHandler[])",
            "org.jboss.netty.handler.codec.spdy.SpdyOrHttpChooser:void addSpdyHandlers(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.handler.codec.spdy.SpdyVersion)",
            "org.jboss.netty.handler.codec.spdy.SpdyOrHttpChooser:void addHttpHandlers(org.jboss.netty.channel.ChannelHandlerContext)"
        ]
    },
    "org.jboss.netty.channel.DefaultChannelPipeline:void addBefore(java.lang.String,java.lang.String,org.jboss.netty.channel.ChannelHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler:void afterAdd(org.jboss.netty.channel.ChannelHandlerContext)"
        ]
    },
    "org.jboss.netty.channel.DefaultChannelPipeline:void addAfter(java.lang.String,java.lang.String,org.jboss.netty.channel.ChannelHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.frame.FrameDecoder:void replace(java.lang.String,org.jboss.netty.channel.ChannelHandler)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker07$1:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerHandshaker:org.jboss.netty.channel.ChannelFuture writeHandshakeResponse(org.jboss.netty.channel.Channel,org.jboss.netty.handler.codec.http.HttpResponse,org.jboss.netty.channel.ChannelHandler,org.jboss.netty.channel.ChannelHandler)"
        ]
    },
    "org.jboss.netty.channel.DefaultChannelPipeline:void init(java.lang.String,org.jboss.netty.channel.ChannelHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.DefaultChannelPipeline:void addFirst(java.lang.String,org.jboss.netty.channel.ChannelHandler)",
            "org.jboss.netty.channel.DefaultChannelPipeline:void addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)"
        ]
    },
    "org.onlab.stc.Main:void main(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.stc.Compiler:void processStep(org.apache.commons.configuration.HierarchicalConfiguration,java.lang.String,org.onlab.stc.Group)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Compiler:void lambda$compile$1(java.lang.String,org.onlab.stc.Group,org.apache.commons.configuration.HierarchicalConfiguration)"
        ]
    },
    "org.onlab.stc.Compiler:void processGroup(org.apache.commons.configuration.HierarchicalConfiguration,java.lang.String,org.onlab.stc.Group)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Compiler:void lambda$compile$2(java.lang.String,org.onlab.stc.Group,org.apache.commons.configuration.HierarchicalConfiguration)"
        ]
    },
    "org.onlab.stc.Compiler:void lambda$scanForCycles$9(org.onlab.graph.DepthFirstSearch,org.onlab.stc.Step)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.graph.DepthFirstSearch:org.onlab.graph.GraphPathSearch$Result search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.graph.SrlgGraphSearch:org.onlab.graph.GraphPathSearch$Result search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.graph.SrlgGraphSearch:org.onlab.graph.GraphPathSearch$Result findShortestPathFromSubset(boolean[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.graph.SrlgGraphSearch:org.onlab.graph.GraphPathSearch$Result access$000(org.onlab.graph.SrlgGraphSearch,boolean[])"
        ]
    },
    "org.onlab.graph.AbstractGraphPathSearch$DefaultResult:void buildPaths()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.graph.BellmanFordGraphSearch:org.onlab.graph.GraphPathSearch$Result search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)",
            "org.onlab.graph.BreadthFirstSearch:org.onlab.graph.GraphPathSearch$Result search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)",
            "org.onlab.graph.DepthFirstSearch:org.onlab.graph.DepthFirstSearch$SpanningTreeResult search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)",
            "org.onlab.graph.DijkstraGraphSearch:org.onlab.graph.GraphPathSearch$Result search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)"
        ]
    },
    "org.onlab.stc.Compiler:void compile()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Main:void run()"
        ]
    },
    "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor:void increaseCounter(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor:void execute(java.lang.Runnable)"
        ]
    },
    "org.jboss.netty.handler.timeout.IdleStateHandler:void beforeAdd(org.jboss.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.DefaultChannelPipeline:void callBeforeAdd(org.jboss.netty.channel.ChannelHandlerContext)",
            "org.jboss.netty.channel.StaticChannelPipeline:void callBeforeAdd(org.jboss.netty.channel.ChannelHandlerContext)"
        ]
    },
    "org.jboss.netty.handler.timeout.ReadTimeoutHandler:void beforeAdd(org.jboss.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.DefaultChannelPipeline:void callBeforeAdd(org.jboss.netty.channel.ChannelHandlerContext)",
            "org.jboss.netty.channel.StaticChannelPipeline:void callBeforeAdd(org.jboss.netty.channel.ChannelHandlerContext)"
        ]
    },
    "org.jboss.netty.handler.traffic.GlobalTrafficShapingHandler:void createGlobalTrafficCounter()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.traffic.GlobalTrafficShapingHandler:void <init>(org.jboss.netty.util.Timer,long,long,long)",
            "org.jboss.netty.handler.traffic.GlobalTrafficShapingHandler:void <init>(org.jboss.netty.util.Timer,long,long)",
            "org.jboss.netty.handler.traffic.GlobalTrafficShapingHandler:void <init>(org.jboss.netty.util.Timer,long)",
            "org.jboss.netty.handler.traffic.GlobalTrafficShapingHandler:void <init>(org.jboss.netty.util.Timer)",
            "org.jboss.netty.handler.traffic.GlobalTrafficShapingHandler:void <init>(org.jboss.netty.util.ObjectSizeEstimator,org.jboss.netty.util.Timer,long,long,long)",
            "org.jboss.netty.handler.traffic.GlobalTrafficShapingHandler:void <init>(org.jboss.netty.util.ObjectSizeEstimator,org.jboss.netty.util.Timer,long,long)",
            "org.jboss.netty.handler.traffic.GlobalTrafficShapingHandler:void <init>(org.jboss.netty.util.ObjectSizeEstimator,org.jboss.netty.util.Timer,long)",
            "org.jboss.netty.handler.traffic.GlobalTrafficShapingHandler:void <init>(org.jboss.netty.util.ObjectSizeEstimator,org.jboss.netty.util.Timer)"
        ]
    },
    "org.jboss.netty.handler.traffic.TrafficCounter:void configure(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.traffic.AbstractTrafficShapingHandler:void configure(long)",
            "org.jboss.netty.handler.traffic.TrafficCounter:void <init>(org.jboss.netty.handler.traffic.AbstractTrafficShapingHandler,org.jboss.netty.util.Timer,java.lang.String,long)"
        ]
    },
    "org.apache.commons.lang.builder.HashCodeBuilder:int reflectionHashCode(int,int,java.lang.Object,boolean,java.lang.Class,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.builder.HashCodeBuilder:int reflectionHashCode(int,int,java.lang.Object)",
            "org.apache.commons.lang.builder.HashCodeBuilder:int reflectionHashCode(int,int,java.lang.Object,boolean)",
            "org.apache.commons.lang.builder.HashCodeBuilder:int reflectionHashCode(int,int,java.lang.Object,boolean,java.lang.Class)",
            "org.apache.commons.lang.builder.HashCodeBuilder:int reflectionHashCode(java.lang.Object)",
            "org.apache.commons.lang.builder.HashCodeBuilder:int reflectionHashCode(java.lang.Object,boolean)",
            "org.apache.commons.lang.builder.HashCodeBuilder:int reflectionHashCode(java.lang.Object,java.lang.String[])"
        ]
    },
    "org.apache.commons.lang.CharSet:org.apache.commons.lang.CharSet getInstance(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.CharSet:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.CharSet:org.apache.commons.lang.CharSet getInstance(java.lang.String)",
            "org.apache.commons.lang.CharSet:org.apache.commons.lang.CharSet getInstance(java.lang.String[])",
            "org.apache.commons.lang.CharSet:void <clinit>()",
            "org.apache.commons.lang.CharSetUtils:org.apache.commons.lang.CharSet evaluateSet(java.lang.String[])",
            "org.apache.commons.lang.CharSetUtils:java.lang.String squeeze(java.lang.String,java.lang.String[])",
            "org.apache.commons.lang.CharSetUtils:int count(java.lang.String,java.lang.String[])",
            "org.apache.commons.lang.CharSetUtils:java.lang.String modify(java.lang.String,java.lang.String[],boolean)"
        ]
    },
    "org.apache.commons.lang.CharSet:org.apache.commons.lang.CharSet getInstance(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.CharSetUtils:java.lang.String squeeze(java.lang.String,java.lang.String[])",
            "org.apache.commons.lang.CharSetUtils:int count(java.lang.String,java.lang.String[])",
            "org.apache.commons.lang.CharSetUtils:java.lang.String modify(java.lang.String,java.lang.String[],boolean)"
        ]
    },
    "org.apache.commons.lang.CharSetUtils:org.apache.commons.lang.CharSet evaluateSet(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.builder.EqualsBuilder:boolean reflectionEquals(java.lang.Object,java.lang.Object,boolean,java.lang.Class,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.builder.EqualsBuilder:boolean reflectionEquals(java.lang.Object,java.lang.Object,java.lang.String[])",
            "org.apache.commons.lang3.builder.EqualsBuilder:boolean reflectionEquals(java.lang.Object,java.lang.Object,boolean)"
        ]
    },
    "org.apache.commons.lang3.builder.HashCodeBuilder:int reflectionHashCode(int,int,java.lang.Object,boolean,java.lang.Class,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.builder.HashCodeBuilder:int reflectionHashCode(int,int,java.lang.Object)",
            "org.apache.commons.lang3.builder.HashCodeBuilder:int reflectionHashCode(int,int,java.lang.Object,boolean)",
            "org.apache.commons.lang3.builder.HashCodeBuilder:int reflectionHashCode(java.lang.Object,boolean)",
            "org.apache.commons.lang3.builder.HashCodeBuilder:int reflectionHashCode(java.lang.Object,java.lang.String[])"
        ]
    },
    "org.apache.commons.lang3.CharSet:org.apache.commons.lang3.CharSet getInstance(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.CharSetUtils:java.lang.String squeeze(java.lang.String,java.lang.String[])",
            "org.apache.commons.lang3.CharSetUtils:boolean containsAny(java.lang.String,java.lang.String[])",
            "org.apache.commons.lang3.CharSetUtils:int count(java.lang.String,java.lang.String[])",
            "org.apache.commons.lang3.CharSetUtils:java.lang.String modify(java.lang.String,java.lang.String[],boolean)"
        ]
    },
    "org.apache.commons.lang3.CharSet:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.CharSet:org.apache.commons.lang3.CharSet getInstance(java.lang.String[])",
            "org.apache.commons.lang3.CharSet:void <clinit>()",
            "org.apache.commons.lang3.CharSetUtils:java.lang.String squeeze(java.lang.String,java.lang.String[])",
            "org.apache.commons.lang3.CharSetUtils:boolean containsAny(java.lang.String,java.lang.String[])",
            "org.apache.commons.lang3.CharSetUtils:int count(java.lang.String,java.lang.String[])",
            "org.apache.commons.lang3.CharSetUtils:java.lang.String modify(java.lang.String,java.lang.String[],boolean)"
        ]
    },
    "org.onlab.stc.Compiler:void processSequentialRequirements(java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Compiler:void processSequentialGroup(org.apache.commons.configuration.HierarchicalConfiguration,java.lang.String,org.onlab.stc.Group)"
        ]
    },
    "org.onlab.stc.Compiler:void processRequirements(org.onlab.stc.Step,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Compiler:boolean registerStep(org.onlab.stc.Step,org.apache.commons.configuration.HierarchicalConfiguration,java.lang.String,org.onlab.stc.Group)",
            "org.onlab.stc.Compiler:void processDependency(org.apache.commons.configuration.HierarchicalConfiguration,java.lang.String)"
        ]
    },
    "org.onlab.stc.Coordinator:org.onlab.stc.Coordinator$Directive nextAction(org.onlab.stc.Step)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Coordinator:void execute(org.onlab.stc.Step)"
        ]
    },
    "org.onlab.stc.Coordinator:void completeParentIfNeeded(org.onlab.stc.Group)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Coordinator:void executeSucessors(org.onlab.stc.Step)"
        ]
    },
    "org.onlab.stc.MonitorLayout:void computeChildPlacements(org.onlab.stc.Group,org.onlab.stc.MonitorLayout$Box,java.util.Set)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.MonitorLayout:void computeLayout(org.onlab.stc.Group,int,int)"
        ]
    },
    "org.onlab.stc.MonitorWebSocketServlet$Pruner:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.util.BoundedThreadPool$CallerFeedbackPolicy:void rejectedExecution(java.lang.Runnable,java.util.concurrent.ThreadPoolExecutor)",
            "org.onlab.util.BoundedThreadPool:void execute(java.lang.Runnable)",
            "org.onlab.util.SharedExecutorService:void execute(java.lang.Runnable)",
            "org.jboss.netty.channel.AbstractChannelSink:org.jboss.netty.channel.ChannelFuture execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable)",
            "org.jboss.netty.channel.socket.ChannelRunnableWrapper:void run()",
            "org.jboss.netty.channel.socket.nio.AbstractNioSelector:void processTaskQueue()",
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void executeInIoThread(java.lang.Runnable,boolean)",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void executeInIoThread(java.lang.Runnable)",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void processEventQueue()",
            "org.jboss.netty.handler.codec.embedder.AbstractCodecEmbedder$EmbeddedChannelSink:org.jboss.netty.channel.ChannelFuture execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable)",
            "org.jboss.netty.handler.execution.ChainedExecutor:void execute(java.lang.Runnable)",
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor$MemoryAwareRunnable:void run()",
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor:void doUnorderedExecute(java.lang.Runnable)",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor$ChildExecutor:void run()",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor:void doExecute(java.lang.Runnable)",
            "org.jboss.netty.handler.ssl.ImmediateExecutor:void execute(java.lang.Runnable)",
            "org.jboss.netty.handler.ssl.SslHandler$4:void run()",
            "org.jboss.netty.util.ThreadRenamingRunnable:void run()",
            "org.jboss.netty.util.VirtualExecutorService$ChildExecutorRunnable:void run()",
            "org.jboss.netty.util.internal.DeadLockProofWorker$1:void run()",
            "org.jboss.netty.util.internal.UnterminatableExecutor:void execute(java.lang.Runnable)"
        ]
    },
    "org.onlab.stc.ScenarioStore:boolean hasFailures()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Coordinator:int waitFor()"
        ]
    },
    "org.onlab.graph.AdjacencyListsGraph:void <init>(java.util.Set,java.util.Set)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.graph.DepthFirstSearch:boolean isForwardEdge(org.onlab.graph.AbstractGraphPathSearch$DefaultResult,org.onlab.graph.Edge)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.graph.DepthFirstSearch:org.onlab.graph.DepthFirstSearch$SpanningTreeResult search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)"
        ]
    },
    "org.onlab.graph.GAPopulation:void step()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.graph.GAPopulation:java.util.List runGA(int,int,int,org.onlab.graph.GAOrganism)"
        ]
    },
    "org.onlab.graph.KShortestPathsSearch:java.lang.Double calculatePathCost(org.onlab.graph.EdgeWeight,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.graph.KShortestPathsSearch:org.onlab.graph.GraphPathSearch$Result search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)"
        ]
    },
    "org.onlab.graph.SrlgGraphSearch$1:java.util.Set paths()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.graph.KShortestPathsSearch:org.onlab.graph.GraphPathSearch$Result search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)",
            "org.onlab.graph.SrlgGraphSearch$Subset:double fitness()",
            "org.onlab.graph.SrlgGraphSearch$Subset:java.util.Set buildPaths()",
            "org.onlab.graph.SuurballeGraphSearch:org.onlab.graph.GraphPathSearch$Result search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)"
        ]
    },
    "org.onlab.graph.SrlgGraphSearch$Subset:double fitness()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.graph.GAPopulation:int lambda$step$3(org.onlab.graph.GAOrganism,org.onlab.graph.GAOrganism)"
        ]
    },
    "org.onlab.graph.SrlgGraphSearch$Subset:java.util.Set buildPaths()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.graph.SrlgGraphSearch:org.onlab.graph.GraphPathSearch$Result search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)"
        ]
    },
    "org.onlab.graph.SrlgGraphSearch:void <init>(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.graph.SuurballeGraphSearch$2:java.util.Set paths()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.graph.KShortestPathsSearch:org.onlab.graph.GraphPathSearch$Result search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)",
            "org.onlab.graph.SrlgGraphSearch$Subset:double fitness()",
            "org.onlab.graph.SrlgGraphSearch$Subset:java.util.Set buildPaths()",
            "org.onlab.graph.SuurballeGraphSearch:org.onlab.graph.GraphPathSearch$Result search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)"
        ]
    },
    "org.onlab.graph.TarjanGraphSearch$SccResult:java.util.Set findClusterEdges(java.util.Set)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.graph.TarjanGraphSearch$SccResult:void addCluster(org.onlab.graph.TarjanGraphSearch$VertexData)"
        ]
    },
    "org.onlab.graph.TarjanGraphSearch:org.onlab.graph.TarjanGraphSearch$SccResult search(org.onlab.graph.Graph,org.onlab.graph.EdgeWeight)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.graph.TarjanGraphSearch:org.onlab.graph.GraphSearch$Result search(org.onlab.graph.Graph,org.onlab.graph.EdgeWeight)"
        ]
    },
    "org.onlab.graph.TarjanGraphSearch:org.onlab.graph.TarjanGraphSearch$VertexData connect(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,org.onlab.graph.TarjanGraphSearch$SccResult)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.graph.TarjanGraphSearch:org.onlab.graph.TarjanGraphSearch$SccResult search(org.onlab.graph.Graph,org.onlab.graph.EdgeWeight)",
            "org.onlab.graph.TarjanGraphSearch:org.onlab.graph.TarjanGraphSearch$VertexData connect(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,org.onlab.graph.TarjanGraphSearch$SccResult)"
        ]
    },
    "org.onlab.packet.DHCP:org.onlab.packet.DHCPOption getOption(org.onlab.packet.DHCP$DHCPOptionCode)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.packet.DHCP:byte[] serialize()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.BasePacket:java.lang.Object clone()",
            "org.onlab.packet.EAPOL:byte[] serialize()",
            "org.onlab.packet.Ethernet:byte[] serialize()",
            "org.onlab.packet.ICMP:byte[] serialize()",
            "org.onlab.packet.ICMP6:byte[] serialize()",
            "org.onlab.packet.IPv4:byte[] serialize()",
            "org.onlab.packet.IPv6:byte[] serialize()",
            "org.onlab.packet.MPLS:byte[] serialize()",
            "org.onlab.packet.PIM:byte[] serialize()",
            "org.onlab.packet.TCP:byte[] serialize()",
            "org.onlab.packet.UDP:byte[] serialize()",
            "org.onlab.packet.ipv6.Authentication:byte[] serialize()",
            "org.onlab.packet.ipv6.BaseOptions:byte[] serialize()",
            "org.onlab.packet.ipv6.EncapSecurityPayload:byte[] serialize()",
            "org.onlab.packet.ipv6.Fragment:byte[] serialize()",
            "org.onlab.packet.ipv6.Routing:byte[] serialize()"
        ]
    },
    "org.onlab.packet.IGMP:byte[] serialize()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.BasePacket:java.lang.Object clone()",
            "org.onlab.packet.EAPOL:byte[] serialize()",
            "org.onlab.packet.Ethernet:byte[] serialize()",
            "org.onlab.packet.ICMP:byte[] serialize()",
            "org.onlab.packet.ICMP6:byte[] serialize()",
            "org.onlab.packet.IPv4:byte[] serialize()",
            "org.onlab.packet.IPv6:byte[] serialize()",
            "org.onlab.packet.MPLS:byte[] serialize()",
            "org.onlab.packet.PIM:byte[] serialize()",
            "org.onlab.packet.TCP:byte[] serialize()",
            "org.onlab.packet.UDP:byte[] serialize()",
            "org.onlab.packet.ipv6.Authentication:byte[] serialize()",
            "org.onlab.packet.ipv6.BaseOptions:byte[] serialize()",
            "org.onlab.packet.ipv6.EncapSecurityPayload:byte[] serialize()",
            "org.onlab.packet.ipv6.Fragment:byte[] serialize()",
            "org.onlab.packet.ipv6.Routing:byte[] serialize()"
        ]
    },
    "org.onlab.packet.IGMPMembership:byte[] serialize(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.IGMP:byte[] serialize()"
        ]
    },
    "org.onlab.packet.IGMPQuery:byte[] serialize(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.IGMP:byte[] serialize()"
        ]
    },
    "org.onlab.packet.IPv4:java.lang.String fromIPv4AddressCollection(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.packet.LLDP:byte[] serialize()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.BasePacket:java.lang.Object clone()",
            "org.onlab.packet.EAPOL:byte[] serialize()",
            "org.onlab.packet.Ethernet:byte[] serialize()",
            "org.onlab.packet.ICMP:byte[] serialize()",
            "org.onlab.packet.ICMP6:byte[] serialize()",
            "org.onlab.packet.IPv4:byte[] serialize()",
            "org.onlab.packet.IPv6:byte[] serialize()",
            "org.onlab.packet.MPLS:byte[] serialize()",
            "org.onlab.packet.PIM:byte[] serialize()",
            "org.onlab.packet.TCP:byte[] serialize()",
            "org.onlab.packet.UDP:byte[] serialize()",
            "org.onlab.packet.ipv6.Authentication:byte[] serialize()",
            "org.onlab.packet.ipv6.BaseOptions:byte[] serialize()",
            "org.onlab.packet.ipv6.EncapSecurityPayload:byte[] serialize()",
            "org.onlab.packet.ipv6.Fragment:byte[] serialize()",
            "org.onlab.packet.ipv6.Routing:byte[] serialize()"
        ]
    },
    "org.onlab.packet.ONOSLLDP:org.onlab.packet.LLDPOrganizationalTLV getNameTLV()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.ONOSLLDP:java.lang.String getNameString()"
        ]
    },
    "org.onlab.packet.ONOSLLDP:org.onlab.packet.LLDPOrganizationalTLV getDeviceTLV()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.ONOSLLDP:java.lang.String getDeviceString()"
        ]
    },
    "org.onlab.packet.RADIUS:org.onlab.packet.EAP decapsulateMessage()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.packet.ndp.NeighborAdvertisement:org.onlab.packet.ndp.NeighborAdvertisement lambda$deserializer$1(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.ndp.NeighborAdvertisement$lambda_deserializer_1__70:org.onlab.packet.IPacket deserialize(byte[],int,int)"
        ]
    },
    "org.onlab.packet.ndp.NeighborDiscoveryOptions:byte[] serialize()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.BasePacket:java.lang.Object clone()",
            "org.onlab.packet.EAPOL:byte[] serialize()",
            "org.onlab.packet.Ethernet:byte[] serialize()",
            "org.onlab.packet.ICMP:byte[] serialize()",
            "org.onlab.packet.ICMP6:byte[] serialize()",
            "org.onlab.packet.IPv4:byte[] serialize()",
            "org.onlab.packet.IPv6:byte[] serialize()",
            "org.onlab.packet.MPLS:byte[] serialize()",
            "org.onlab.packet.PIM:byte[] serialize()",
            "org.onlab.packet.TCP:byte[] serialize()",
            "org.onlab.packet.UDP:byte[] serialize()",
            "org.onlab.packet.ipv6.Authentication:byte[] serialize()",
            "org.onlab.packet.ipv6.BaseOptions:byte[] serialize()",
            "org.onlab.packet.ipv6.EncapSecurityPayload:byte[] serialize()",
            "org.onlab.packet.ipv6.Fragment:byte[] serialize()",
            "org.onlab.packet.ipv6.Routing:byte[] serialize()",
            "org.onlab.packet.ndp.NeighborAdvertisement:byte[] serialize()",
            "org.onlab.packet.ndp.NeighborSolicitation:byte[] serialize()",
            "org.onlab.packet.ndp.Redirect:byte[] serialize()",
            "org.onlab.packet.ndp.RouterAdvertisement:byte[] serialize()",
            "org.onlab.packet.ndp.RouterSolicitation:byte[] serialize()"
        ]
    },
    "org.onlab.packet.ndp.NeighborDiscoveryOptions:int hashCode()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.BasePacket:int hashCode()",
            "org.onlab.packet.ndp.NeighborAdvertisement:int hashCode()",
            "org.onlab.packet.ndp.NeighborSolicitation:int hashCode()",
            "org.onlab.packet.ndp.Redirect:int hashCode()",
            "org.onlab.packet.ndp.RouterAdvertisement:int hashCode()",
            "org.onlab.packet.ndp.RouterSolicitation:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentHashMap:int hashOf(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap:int hashOf(java.lang.Object)",
            "org.apache.commons.lang.builder.HashCodeBuilder:org.apache.commons.lang.builder.HashCodeBuilder append(java.lang.Object)",
            "org.apache.commons.lang.mutable.MutableObject:int hashCode()",
            "org.apache.commons.lang.ObjectUtils:int hashCode(java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:int hashCode()",
            "org.apache.commons.lang.time.FastDateFormat$Pair:int hashCode()",
            "org.apache.commons.lang3.AnnotationUtils:int hashMember(java.lang.String,java.lang.Object)",
            "org.apache.commons.lang3.builder.HashCodeBuilder:org.apache.commons.lang3.builder.HashCodeBuilder append(java.lang.Object)",
            "org.apache.commons.lang3.concurrent.ConstantInitializer:int hashCode()",
            "org.apache.commons.lang3.mutable.MutableObject:int hashCode()",
            "org.apache.commons.lang3.ObjectUtils:int hashCode(java.lang.Object)",
            "org.apache.commons.lang3.Range:int hashCode()",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:int hashCode()",
            "org.apache.commons.lang3.time.FormatCache$MultipartKey:int hashCode()",
            "org.apache.commons.lang3.tuple.Pair:int hashCode()",
            "org.apache.commons.lang3.tuple.Triple:int hashCode()",
            "org.objectweb.asm.ClassReader:void a(org.objectweb.asm.ClassWriter,org.objectweb.asm.Item[],char[])",
            "org.objectweb.asm.ClassWriter:org.objectweb.asm.Item a(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[])",
            "com.eclipsesource.json.JsonObject$HashIndexTable:int hashSlotFor(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object put_internal(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void putResize(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void push(java.lang.Object,java.lang.Object,int,java.lang.Object,int,java.lang.Object,int,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object remove(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsKey(java.lang.Object)"
        ]
    },
    "org.onlab.packet.ndp.NeighborSolicitation:org.onlab.packet.ndp.NeighborSolicitation lambda$deserializer$42(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.ndp.NeighborSolicitation$lambda_deserializer_42__74:org.onlab.packet.IPacket deserialize(byte[],int,int)"
        ]
    },
    "org.onlab.packet.ndp.Redirect:org.onlab.packet.ndp.Redirect lambda$deserializer$47(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.ndp.Redirect$lambda_deserializer_47__77:org.onlab.packet.IPacket deserialize(byte[],int,int)"
        ]
    },
    "org.onlab.packet.ndp.RouterAdvertisement:org.onlab.packet.ndp.RouterAdvertisement lambda$deserializer$41(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.ndp.RouterAdvertisement$lambda_deserializer_41__67:org.onlab.packet.IPacket deserialize(byte[],int,int)"
        ]
    },
    "org.onlab.packet.ndp.RouterSolicitation:org.onlab.packet.ndp.RouterSolicitation lambda$deserializer$44(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.ndp.RouterSolicitation$lambda_deserializer_44__75:org.onlab.packet.IPacket deserialize(byte[],int,int)"
        ]
    },
    "org.onlab.packet.pim.PIMHello:byte[] serialize()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.BasePacket:java.lang.Object clone()",
            "org.onlab.packet.EAPOL:byte[] serialize()",
            "org.onlab.packet.Ethernet:byte[] serialize()",
            "org.onlab.packet.ICMP:byte[] serialize()",
            "org.onlab.packet.ICMP6:byte[] serialize()",
            "org.onlab.packet.IPv4:byte[] serialize()",
            "org.onlab.packet.IPv6:byte[] serialize()",
            "org.onlab.packet.MPLS:byte[] serialize()",
            "org.onlab.packet.PIM:byte[] serialize()",
            "org.onlab.packet.TCP:byte[] serialize()",
            "org.onlab.packet.UDP:byte[] serialize()",
            "org.onlab.packet.ipv6.Authentication:byte[] serialize()",
            "org.onlab.packet.ipv6.BaseOptions:byte[] serialize()",
            "org.onlab.packet.ipv6.EncapSecurityPayload:byte[] serialize()",
            "org.onlab.packet.ipv6.Fragment:byte[] serialize()",
            "org.onlab.packet.ipv6.Routing:byte[] serialize()"
        ]
    },
    "org.onlab.packet.pim.PIMJoinPrune:byte[] serialize()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.BasePacket:java.lang.Object clone()",
            "org.onlab.packet.EAPOL:byte[] serialize()",
            "org.onlab.packet.Ethernet:byte[] serialize()",
            "org.onlab.packet.ICMP:byte[] serialize()",
            "org.onlab.packet.ICMP6:byte[] serialize()",
            "org.onlab.packet.IPv4:byte[] serialize()",
            "org.onlab.packet.IPv6:byte[] serialize()",
            "org.onlab.packet.MPLS:byte[] serialize()",
            "org.onlab.packet.PIM:byte[] serialize()",
            "org.onlab.packet.TCP:byte[] serialize()",
            "org.onlab.packet.UDP:byte[] serialize()",
            "org.onlab.packet.ipv6.Authentication:byte[] serialize()",
            "org.onlab.packet.ipv6.BaseOptions:byte[] serialize()",
            "org.onlab.packet.ipv6.EncapSecurityPayload:byte[] serialize()",
            "org.onlab.packet.ipv6.Fragment:byte[] serialize()",
            "org.onlab.packet.ipv6.Routing:byte[] serialize()"
        ]
    },
    "org.onlab.util.KryoNamespace$Builder:org.onlab.util.KryoNamespace$Builder register(org.onlab.util.KryoNamespace)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.util.KryoNamespace:com.esotericsoftware.kryo.Kryo create()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.util.KryoNamespace:org.onlab.util.KryoNamespace populate(int)",
            "com.esotericsoftware.kryo.pool.KryoPoolQueueImpl:com.esotericsoftware.kryo.Kryo borrow()"
        ]
    },
    "org.jboss.netty.bootstrap.Bootstrap:void setPipelineAsMap(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.bootstrap.Bootstrap:boolean isOrderedMap(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.bootstrap.Bootstrap:void setPipelineAsMap(java.util.Map)"
        ]
    },
    "org.jboss.netty.channel.Channels:org.jboss.netty.channel.ChannelPipeline pipeline(org.jboss.netty.channel.ChannelPipeline)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.Channels$1:org.jboss.netty.channel.ChannelPipeline getPipeline()"
        ]
    },
    "org.jboss.netty.channel.DefaultChannelConfig:void setOptions(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.bootstrap.ClientBootstrap:org.jboss.netty.channel.ChannelFuture connect(java.net.SocketAddress,java.net.SocketAddress)",
            "org.jboss.netty.bootstrap.ClientBootstrap:org.jboss.netty.channel.ChannelFuture bind(java.net.SocketAddress)",
            "org.jboss.netty.bootstrap.ConnectionlessBootstrap:org.jboss.netty.channel.Channel bind(java.net.SocketAddress)",
            "org.jboss.netty.bootstrap.ConnectionlessBootstrap:org.jboss.netty.channel.ChannelFuture connect(java.net.SocketAddress,java.net.SocketAddress)",
            "org.jboss.netty.bootstrap.ServerBootstrap$Binder:void channelOpen(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.bootstrap.ServerBootstrap$Binder:void childChannelOpen(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChildChannelStateEvent)",
            "org.jboss.netty.channel.socket.nio.DefaultNioDatagramChannelConfig:void setOptions(java.util.Map)",
            "org.jboss.netty.channel.socket.nio.DefaultNioSocketChannelConfig:void setOptions(java.util.Map)"
        ]
    },
    "org.jboss.netty.channel.DefaultServerChannelConfig:void setOptions(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.bootstrap.ClientBootstrap:org.jboss.netty.channel.ChannelFuture connect(java.net.SocketAddress,java.net.SocketAddress)",
            "org.jboss.netty.bootstrap.ClientBootstrap:org.jboss.netty.channel.ChannelFuture bind(java.net.SocketAddress)",
            "org.jboss.netty.bootstrap.ConnectionlessBootstrap:org.jboss.netty.channel.Channel bind(java.net.SocketAddress)",
            "org.jboss.netty.bootstrap.ConnectionlessBootstrap:org.jboss.netty.channel.ChannelFuture connect(java.net.SocketAddress,java.net.SocketAddress)",
            "org.jboss.netty.bootstrap.ServerBootstrap$Binder:void channelOpen(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.bootstrap.ServerBootstrap$Binder:void childChannelOpen(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChildChannelStateEvent)"
        ]
    },
    "org.jboss.netty.channel.group.CombinedIterator:java.lang.Object next()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Compiler:void processSequentialRequirements(java.lang.String,java.lang.String,java.lang.String)",
            "org.onlab.stc.Compiler:void processRequirements(org.onlab.stc.Step,java.lang.String,java.lang.String)",
            "org.onlab.stc.Coordinator:org.onlab.stc.Coordinator$Directive nextAction(org.onlab.stc.Step)",
            "org.onlab.stc.Coordinator:void completeParentIfNeeded(org.onlab.stc.Group)",
            "org.onlab.stc.MonitorLayout:void computeChildPlacements(org.onlab.stc.Group,org.onlab.stc.MonitorLayout$Box,java.util.Set)",
            "org.onlab.stc.MonitorWebSocketServlet$Pruner:void run()",
            "org.onlab.stc.ScenarioStore:boolean hasFailures()",
            "org.onlab.graph.AbstractGraphPathSearch$DefaultResult:void buildPaths()",
            "org.onlab.graph.AbstractGraphPathSearch:void buildAllPaths(org.onlab.graph.AbstractGraphPathSearch$DefaultResult,org.onlab.graph.Vertex,org.onlab.graph.Vertex,int)",
            "org.onlab.graph.AdjacencyListsGraph:void <init>(java.util.Set,java.util.Set)",
            "org.onlab.graph.BellmanFordGraphSearch:org.onlab.graph.GraphPathSearch$Result search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)",
            "org.onlab.graph.BreadthFirstSearch:org.onlab.graph.GraphPathSearch$Result search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)",
            "org.onlab.graph.DepthFirstSearch:org.onlab.graph.DepthFirstSearch$SpanningTreeResult search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)",
            "org.onlab.graph.DepthFirstSearch:boolean isForwardEdge(org.onlab.graph.AbstractGraphPathSearch$DefaultResult,org.onlab.graph.Edge)",
            "org.onlab.graph.DijkstraGraphSearch:org.onlab.graph.GraphPathSearch$Result search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)",
            "org.onlab.graph.GAPopulation:void step()",
            "org.onlab.graph.KShortestPathsSearch:org.onlab.graph.GraphPathSearch$Result search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)",
            "org.onlab.graph.KShortestPathsSearch:java.lang.Double calculatePathCost(org.onlab.graph.EdgeWeight,java.util.List)",
            "org.onlab.graph.MutableAdjacencyListsGraph:void <init>(java.util.Set,java.util.Set)",
            "org.onlab.graph.SrlgGraphSearch$1:java.util.Set paths()",
            "org.onlab.graph.SrlgGraphSearch$Subset:double fitness()",
            "org.onlab.graph.SrlgGraphSearch$Subset:java.util.Set buildPaths()",
            "org.onlab.graph.SrlgGraphSearch:void <init>(java.util.Map)",
            "org.onlab.graph.SrlgGraphSearch:org.onlab.graph.GraphPathSearch$Result search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)",
            "org.onlab.graph.SuurballeGraphSearch$2:java.util.Set paths()",
            "org.onlab.graph.SuurballeGraphSearch:org.onlab.graph.GraphPathSearch$Result search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)",
            "org.onlab.graph.SuurballeGraphSearch:org.onlab.graph.MutableGraph mutableCopy(org.onlab.graph.Graph)",
            "org.onlab.graph.TarjanGraphSearch$SccResult:java.util.Set findClusterEdges(java.util.Set)",
            "org.onlab.graph.TarjanGraphSearch:org.onlab.graph.TarjanGraphSearch$SccResult search(org.onlab.graph.Graph,org.onlab.graph.EdgeWeight)",
            "org.onlab.graph.TarjanGraphSearch:org.onlab.graph.TarjanGraphSearch$VertexData connect(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,org.onlab.graph.TarjanGraphSearch$SccResult)",
            "org.onlab.packet.DHCP:org.onlab.packet.DHCPOption getOption(org.onlab.packet.DHCP$DHCPOptionCode)",
            "org.onlab.packet.DHCP:byte[] serialize()",
            "org.onlab.packet.IGMP:byte[] serialize()",
            "org.onlab.packet.IGMPMembership:byte[] serialize(java.nio.ByteBuffer)",
            "org.onlab.packet.IGMPQuery:byte[] serialize(java.nio.ByteBuffer)",
            "org.onlab.packet.IPv4:java.lang.String fromIPv4AddressCollection(java.util.Collection)",
            "org.onlab.packet.LLDP:byte[] serialize()",
            "org.onlab.packet.ONOSLLDP:org.onlab.packet.LLDPOrganizationalTLV getNameTLV()",
            "org.onlab.packet.ONOSLLDP:org.onlab.packet.LLDPOrganizationalTLV getDeviceTLV()",
            "org.onlab.packet.RADIUS:org.onlab.packet.EAP decapsulateMessage()",
            "org.onlab.packet.ndp.NeighborAdvertisement:org.onlab.packet.ndp.NeighborAdvertisement lambda$deserializer$1(byte[],int,int)",
            "org.onlab.packet.ndp.NeighborDiscoveryOptions:byte[] serialize()",
            "org.onlab.packet.ndp.NeighborDiscoveryOptions:int hashCode()",
            "org.onlab.packet.ndp.NeighborSolicitation:org.onlab.packet.ndp.NeighborSolicitation lambda$deserializer$42(byte[],int,int)",
            "org.onlab.packet.ndp.Redirect:org.onlab.packet.ndp.Redirect lambda$deserializer$47(byte[],int,int)",
            "org.onlab.packet.ndp.RouterAdvertisement:org.onlab.packet.ndp.RouterAdvertisement lambda$deserializer$41(byte[],int,int)",
            "org.onlab.packet.ndp.RouterSolicitation:org.onlab.packet.ndp.RouterSolicitation lambda$deserializer$44(byte[],int,int)",
            "org.onlab.packet.pim.PIMHello:byte[] serialize()",
            "org.onlab.packet.pim.PIMJoinPrune:byte[] serialize()",
            "org.onlab.util.KryoNamespace$Builder:org.onlab.util.KryoNamespace$Builder register(org.onlab.util.KryoNamespace)",
            "org.onlab.util.KryoNamespace:com.esotericsoftware.kryo.Kryo create()",
            "org.jboss.netty.bootstrap.Bootstrap:void setPipelineAsMap(java.util.Map)",
            "org.jboss.netty.bootstrap.Bootstrap:boolean isOrderedMap(java.util.Map)",
            "org.jboss.netty.bootstrap.ServerBootstrap$Binder:void channelOpen(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.channel.Channels:org.jboss.netty.channel.ChannelPipeline pipeline(org.jboss.netty.channel.ChannelPipeline)",
            "org.jboss.netty.channel.DefaultChannelConfig:void setOptions(java.util.Map)",
            "org.jboss.netty.channel.DefaultChannelFuture:void notifyListeners()",
            "org.jboss.netty.channel.DefaultServerChannelConfig:void setOptions(java.util.Map)",
            "org.jboss.netty.channel.group.CombinedIterator:java.lang.Object next()",
            "org.jboss.netty.channel.group.DefaultChannelGroup:org.jboss.netty.channel.group.ChannelGroupFuture close()",
            "org.jboss.netty.channel.group.DefaultChannelGroup:org.jboss.netty.channel.group.ChannelGroupFuture disconnect()",
            "org.jboss.netty.channel.group.DefaultChannelGroup:org.jboss.netty.channel.group.ChannelGroupFuture setInterestOps(int)",
            "org.jboss.netty.channel.group.DefaultChannelGroup:org.jboss.netty.channel.group.ChannelGroupFuture setReadable(boolean)",
            "org.jboss.netty.channel.group.DefaultChannelGroup:org.jboss.netty.channel.group.ChannelGroupFuture unbind()",
            "org.jboss.netty.channel.group.DefaultChannelGroup:org.jboss.netty.channel.group.ChannelGroupFuture write(java.lang.Object)",
            "org.jboss.netty.channel.group.DefaultChannelGroup:org.jboss.netty.channel.group.ChannelGroupFuture write(java.lang.Object,java.net.SocketAddress)",
            "org.jboss.netty.channel.group.DefaultChannelGroupFuture:void <init>(org.jboss.netty.channel.group.ChannelGroup,java.util.Collection)",
            "org.jboss.netty.channel.group.DefaultChannelGroupFuture:void <init>(org.jboss.netty.channel.group.ChannelGroup,java.util.Map)",
            "org.jboss.netty.channel.group.DefaultChannelGroupFuture:void notifyListeners()",
            "org.jboss.netty.channel.socket.http.HttpTunnelingSocketChannelConfig:void setOptions(java.util.Map)",
            "org.jboss.netty.channel.socket.nio.AbstractNioSelector:void rebuildSelector()",
            "org.jboss.netty.channel.socket.nio.AbstractNioSelector:void run()",
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void process(java.nio.channels.Selector)",
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void write0(org.jboss.netty.channel.socket.nio.AbstractNioChannel)",
            "org.jboss.netty.channel.socket.nio.NioClientBoss:void processSelectedKeys(java.util.Set)",
            "org.jboss.netty.channel.socket.nio.NioClientBoss:void processConnectTimeout(java.util.Set,long)",
            "org.jboss.netty.channel.socket.nio.NioDatagramChannel:org.jboss.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress)",
            "org.jboss.netty.channel.socket.nio.NioDatagramChannel:org.jboss.netty.channel.ChannelFuture block(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress)",
            "org.jboss.netty.channel.socket.nio.NioServerBoss:void process(java.nio.channels.Selector)",
            "org.jboss.netty.handler.codec.frame.FrameDecoder:void unfoldAndFireMessageReceived(org.jboss.netty.channel.ChannelHandlerContext,java.net.SocketAddress,java.lang.Object)",
            "org.jboss.netty.handler.codec.http.CookieEncoder:java.lang.String encodeServerSide()",
            "org.jboss.netty.handler.codec.http.CookieEncoder:java.lang.String encodeClientSide()",
            "org.jboss.netty.handler.codec.http.DefaultCookie:void setPorts(java.lang.Iterable)",
            "org.jboss.netty.handler.codec.http.DefaultHttpChunkTrailer:void appendHeaders(java.lang.StringBuilder)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:org.jboss.netty.handler.codec.http.HttpHeaders add(java.lang.String,java.lang.Iterable)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:org.jboss.netty.handler.codec.http.HttpHeaders set(java.lang.String,java.lang.Iterable)",
            "org.jboss.netty.handler.codec.http.DefaultHttpMessage:void appendHeaders(java.lang.StringBuilder)",
            "org.jboss.netty.handler.codec.http.HttpChunkAggregator:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.codec.http.HttpCodecUtil:boolean isTransferEncodingChunked(org.jboss.netty.handler.codec.http.HttpMessage)",
            "org.jboss.netty.handler.codec.http.HttpCodecUtil:void removeTransferEncodingChunked(org.jboss.netty.handler.codec.http.HttpMessage)",
            "org.jboss.netty.handler.codec.http.HttpHeaders:void removeTransferEncodingChunked(org.jboss.netty.handler.codec.http.HttpMessage)",
            "org.jboss.netty.handler.codec.http.HttpHeaders:org.jboss.netty.handler.codec.http.HttpHeaders add(org.jboss.netty.handler.codec.http.HttpHeaders)",
            "org.jboss.netty.handler.codec.http.HttpHeaders:org.jboss.netty.handler.codec.http.HttpHeaders set(org.jboss.netty.handler.codec.http.HttpHeaders)",
            "org.jboss.netty.handler.codec.http.HttpHeaders:boolean contains(java.lang.String,java.lang.String,boolean)",
            "org.jboss.netty.handler.codec.http.HttpMessageEncoder:void encodeHeaders(org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.http.HttpMessage)",
            "org.jboss.netty.handler.codec.http.HttpMessageEncoder:void encodeTrailingHeaders(org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.http.HttpChunkTrailer)",
            "org.jboss.netty.handler.codec.http.multipart.DefaultHttpDataFactory:void cleanRequestHttpDatas(org.jboss.netty.handler.codec.http.HttpRequest)",
            "org.jboss.netty.handler.codec.http.multipart.DefaultHttpDataFactory:void cleanAllHttpDatas()",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder:void setBodyHttpDatas(java.util.List)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder:org.jboss.netty.handler.codec.http.HttpRequest finalizeRequest()",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder:java.lang.String encodeAttribute(java.lang.String,java.nio.charset.Charset)",
            "org.jboss.netty.handler.codec.http.multipart.InternalAttribute:int size()",
            "org.jboss.netty.handler.codec.http.multipart.InternalAttribute:java.lang.String toString()",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker00:org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker07:org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker08:org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker13:org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.handler.codec.serialization.ReferenceMap:void putAll(java.util.Map)",
            "org.jboss.netty.handler.codec.socks.SocksInitRequest:void encodeAsByteBuf(org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdyHeaders:org.jboss.netty.handler.codec.spdy.SpdyHeaders set(java.lang.String,java.lang.Iterable)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdyHeaders:org.jboss.netty.handler.codec.spdy.SpdyHeaders add(java.lang.String,java.lang.Iterable)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdyHeadersFrame:void appendHeaders(java.lang.StringBuilder)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame:void appendSettings(java.lang.StringBuilder)",
            "org.jboss.netty.handler.codec.spdy.SpdyFrameEncoder:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.codec.spdy.SpdyHeaderBlockRawEncoder:org.jboss.netty.buffer.ChannelBuffer encode(org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "org.jboss.netty.handler.codec.spdy.SpdyHttpDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)",
            "org.jboss.netty.handler.codec.spdy.SpdyHttpDecoder:org.jboss.netty.handler.codec.http.HttpRequest createHttpRequest(int,org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "org.jboss.netty.handler.codec.spdy.SpdyHttpDecoder:org.jboss.netty.handler.codec.http.HttpResponse createHttpResponse(int,org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "org.jboss.netty.handler.codec.spdy.SpdyHttpEncoder:void writeChunk(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelFuture,int,org.jboss.netty.handler.codec.http.HttpChunk,java.net.SocketAddress)",
            "org.jboss.netty.handler.codec.spdy.SpdyHttpEncoder:org.jboss.netty.handler.codec.spdy.SpdySynStreamFrame createSynStreamFrame(org.jboss.netty.handler.codec.http.HttpMessage)",
            "org.jboss.netty.handler.codec.spdy.SpdyHttpEncoder:org.jboss.netty.handler.codec.spdy.SpdySynReplyFrame createSynReplyFrame(org.jboss.netty.handler.codec.http.HttpResponse)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:void updateAllSendWindowSizes(int)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:void updateAllReceiveWindowSizes(int)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:org.jboss.netty.channel.MessageEvent getPendingWrite(int)",
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor:java.util.List shutdownNow(boolean)",
            "org.jboss.netty.handler.ipfilter.IpFilterRuleHandler:boolean accept(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent,java.net.InetSocketAddress)",
            "org.jboss.netty.handler.queue.BufferedWriteHandler$1:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.util.DefaultObjectSizeEstimator:int estimateSize(java.lang.Object)",
            "org.jboss.netty.util.VirtualExecutorService:java.util.List shutdownNow()",
            "org.jboss.netty.util.internal.ConcurrentHashMap:void putAll(java.util.Map)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap:void putAll(java.util.Map)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap:void putAll(java.util.Map)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap:void putAll(java.util.Map)",
            "org.jboss.netty.util.internal.ConversionUtil:java.lang.String[] toStringArray(java.lang.Object)",
            "org.apache.commons.lang.CharSet:boolean contains(char)",
            "org.apache.commons.lang.ClassUtils:java.util.List convertClassNamesToClasses(java.util.List)",
            "org.apache.commons.lang.ClassUtils:java.util.List convertClassesToClassNames(java.util.List)",
            "org.apache.commons.lang.ClassUtils:java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])",
            "org.apache.commons.lang.ClassUtils:void <clinit>()",
            "org.apache.commons.lang.enum.ValuedEnum:org.apache.commons.lang.'enum'.Enum getEnum(java.lang.Class,int)",
            "org.apache.commons.lang.enums.ValuedEnum:org.apache.commons.lang.enums.Enum getEnum(java.lang.Class,int)",
            "org.apache.commons.lang.exception.NestableDelegate:void printStackTrace(java.io.PrintWriter)",
            "org.apache.commons.lang.reflect.FieldUtils:java.lang.reflect.Field getField(java.lang.Class,java.lang.String,boolean)",
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.util.Iterator,char)",
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.util.Iterator,java.lang.String)",
            "org.apache.commons.lang.text.ExtendedMessageFormat:void applyPattern(java.lang.String)",
            "org.apache.commons.lang.text.ExtendedMessageFormat:boolean containsElements(java.util.Collection)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendAll(java.util.Collection)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendAll(java.util.Iterator)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendWithSeparators(java.util.Collection,java.lang.String)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendWithSeparators(java.util.Iterator,java.lang.String)",
            "org.apache.commons.lang.Validate:void noNullElements(java.util.Collection,java.lang.String)",
            "org.apache.commons.lang.Validate:void noNullElements(java.util.Collection)",
            "org.apache.commons.lang.Validate:void allElementsOfType(java.util.Collection,java.lang.Class,java.lang.String)",
            "org.apache.commons.lang.Validate:void allElementsOfType(java.util.Collection,java.lang.Class)",
            "org.apache.commons.lang3.AnnotationUtils$1:java.lang.String getShortClassName(java.lang.Class)",
            "org.apache.commons.lang3.ArrayUtils:java.lang.Object[] removeElements(java.lang.Object[],java.lang.Object[])",
            "org.apache.commons.lang3.ArrayUtils:byte[] removeElements(byte[],byte[])",
            "org.apache.commons.lang3.ArrayUtils:short[] removeElements(short[],short[])",
            "org.apache.commons.lang3.ArrayUtils:int[] removeElements(int[],int[])",
            "org.apache.commons.lang3.ArrayUtils:char[] removeElements(char[],char[])",
            "org.apache.commons.lang3.ArrayUtils:long[] removeElements(long[],long[])",
            "org.apache.commons.lang3.ArrayUtils:float[] removeElements(float[],float[])",
            "org.apache.commons.lang3.ArrayUtils:double[] removeElements(double[],double[])",
            "org.apache.commons.lang3.ArrayUtils:boolean[] removeElements(boolean[],boolean[])",
            "org.apache.commons.lang3.builder.DiffResult:java.lang.String toString(org.apache.commons.lang3.builder.ToStringStyle)",
            "org.apache.commons.lang3.CharSet:boolean contains(char)",
            "org.apache.commons.lang3.ClassUtils$2$1:java.lang.Class next()",
            "org.apache.commons.lang3.ClassUtils:java.util.List convertClassNamesToClasses(java.util.List)",
            "org.apache.commons.lang3.ClassUtils:java.util.List convertClassesToClassNames(java.util.List)",
            "org.apache.commons.lang3.ClassUtils:java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])",
            "org.apache.commons.lang3.ClassUtils:void <clinit>()",
            "org.apache.commons.lang3.concurrent.MultiBackgroundInitializer:int getTaskCount()",
            "org.apache.commons.lang3.concurrent.MultiBackgroundInitializer:org.apache.commons.lang3.concurrent.MultiBackgroundInitializer$MultiBackgroundInitializerResults initialize()",
            "org.apache.commons.lang3.EnumUtils:long generateBitVector(java.lang.Class,java.lang.Iterable)",
            "org.apache.commons.lang3.EnumUtils:long[] generateBitVectors(java.lang.Class,java.lang.Iterable)",
            "org.apache.commons.lang3.EnumUtils:long[] generateBitVectors(java.lang.Class,java.lang.Enum[])",
            "org.apache.commons.lang3.event.EventListenerSupport$ProxyInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.commons.lang3.event.EventListenerSupport:void writeObject(java.io.ObjectOutputStream)",
            "org.apache.commons.lang3.exception.DefaultExceptionContext:org.apache.commons.lang3.exception.DefaultExceptionContext setContextValue(java.lang.String,java.lang.Object)",
            "org.apache.commons.lang3.exception.DefaultExceptionContext:java.util.List getContextValues(java.lang.String)",
            "org.apache.commons.lang3.exception.DefaultExceptionContext:java.lang.Object getFirstContextValue(java.lang.String)",
            "org.apache.commons.lang3.exception.DefaultExceptionContext:java.util.Set getContextLabels()",
            "org.apache.commons.lang3.exception.DefaultExceptionContext:java.lang.String getFormattedExceptionMessage(java.lang.String)",
            "org.apache.commons.lang3.ObjectUtils:java.lang.Object mode(java.lang.Object[])",
            "org.apache.commons.lang3.reflect.FieldUtils:java.lang.reflect.Field getField(java.lang.Class,java.lang.String,boolean)",
            "org.apache.commons.lang3.reflect.MethodUtils:java.util.Set getOverrideHierarchy(java.lang.reflect.Method,org.apache.commons.lang3.ClassUtils$Interfaces)",
            "org.apache.commons.lang3.reflect.TypeUtils:boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.ParameterizedType,java.util.Map)",
            "org.apache.commons.lang3.reflect.TypeUtils:boolean typesSatisfyVariables(java.util.Map)",
            "org.apache.commons.lang3.StringUtils:java.lang.String join(java.util.Iterator,char)",
            "org.apache.commons.lang3.StringUtils:java.lang.String join(java.util.Iterator,java.lang.String)",
            "org.apache.commons.lang3.text.ExtendedMessageFormat:void applyPattern(java.lang.String)",
            "org.apache.commons.lang3.text.ExtendedMessageFormat:boolean containsElements(java.util.Collection)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendAll(java.lang.Iterable)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendAll(java.util.Iterator)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendWithSeparators(java.lang.Iterable,java.lang.String)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendWithSeparators(java.util.Iterator,java.lang.String)",
            "org.apache.commons.lang3.time.FastDateParser$TextStrategy:boolean addRegex(org.apache.commons.lang3.time.FastDateParser,java.lang.StringBuilder)",
            "org.apache.commons.lang3.time.FastDateParser$TextStrategy:void setCalendar(org.apache.commons.lang3.time.FastDateParser,java.util.Calendar,java.lang.String)",
            "org.apache.commons.lang3.time.FastDateParser$TimeZoneStrategy:void <init>(java.util.Locale)",
            "org.apache.commons.lang3.Validate:java.lang.Iterable noNullElements(java.lang.Iterable,java.lang.String,java.lang.Object[])",
            "com.eclipsesource.json.JsonArray$1:com.eclipsesource.json.JsonValue next()",
            "com.eclipsesource.json.JsonObject$1:com.eclipsesource.json.JsonObject$Member next()",
            "com.eclipsesource.json.JsonWriter:void writeObject(com.eclipsesource.json.JsonObject)",
            "com.eclipsesource.json.JsonWriter:void writeArray(com.eclipsesource.json.JsonArray)",
            "com.esotericsoftware.kryo.serializers.CollectionSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.Collection)",
            "com.esotericsoftware.kryo.serializers.CollectionSerializer:java.util.Collection copy(com.esotericsoftware.kryo.Kryo,java.util.Collection)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$CollectionsSingletonMapSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.Map)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$CollectionsSingletonSetSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.Set)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.EnumSet)",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:void rebuildCachedFields(boolean)",
            "com.esotericsoftware.kryo.serializers.MapSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.Map)",
            "com.esotericsoftware.kryo.serializers.MapSerializer:java.util.Map copy(com.esotericsoftware.kryo.Kryo,java.util.Map)",
            "com.esotericsoftware.kryo.util.IntMap:void putAll(com.esotericsoftware.kryo.util.IntMap)",
            "com.esotericsoftware.kryo.util.ObjectMap:void putAll(com.esotericsoftware.kryo.util.ObjectMap)",
            "com.esotericsoftware.kryo.util.UnsafeUtil:java.lang.reflect.Field[] sortFieldsByOffset(java.util.List)"
        ]
    },
    "org.jboss.netty.channel.group.DefaultChannelGroupFuture:void notifyListeners()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.group.DefaultChannelGroupFuture:boolean setDone()"
        ]
    },
    "org.jboss.netty.channel.socket.http.HttpTunnelingSocketChannelConfig:void setOptions(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.bootstrap.ClientBootstrap:org.jboss.netty.channel.ChannelFuture connect(java.net.SocketAddress,java.net.SocketAddress)",
            "org.jboss.netty.bootstrap.ClientBootstrap:org.jboss.netty.channel.ChannelFuture bind(java.net.SocketAddress)",
            "org.jboss.netty.bootstrap.ConnectionlessBootstrap:org.jboss.netty.channel.Channel bind(java.net.SocketAddress)",
            "org.jboss.netty.bootstrap.ConnectionlessBootstrap:org.jboss.netty.channel.ChannelFuture connect(java.net.SocketAddress,java.net.SocketAddress)",
            "org.jboss.netty.bootstrap.ServerBootstrap$Binder:void channelOpen(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.bootstrap.ServerBootstrap$Binder:void childChannelOpen(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChildChannelStateEvent)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioDatagramChannel:org.jboss.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.NioDatagramChannel:org.jboss.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress)",
            "org.jboss.netty.channel.socket.nio.NioDatagramChannel:org.jboss.netty.channel.ChannelFuture leaveGroup(java.net.InetSocketAddress,java.net.NetworkInterface)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioDatagramChannel:org.jboss.netty.channel.ChannelFuture block(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.NioDatagramChannel:org.jboss.netty.channel.ChannelFuture block(java.net.InetAddress,java.net.InetAddress)"
        ]
    },
    "org.jboss.netty.handler.codec.http.CookieEncoder:java.lang.String encodeServerSide()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.CookieEncoder:java.lang.String encode()"
        ]
    },
    "org.jboss.netty.handler.codec.http.CookieEncoder:java.lang.String encodeClientSide()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.CookieEncoder:java.lang.String encode()"
        ]
    },
    "org.jboss.netty.handler.codec.http.DefaultCookie:void setPorts(java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.CookieDecoder:java.util.Set decode(java.lang.String)"
        ]
    },
    "org.jboss.netty.handler.codec.http.DefaultHttpChunkTrailer:void appendHeaders(java.lang.StringBuilder)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.DefaultHttpChunkTrailer:java.lang.String toString()"
        ]
    },
    "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:org.jboss.netty.handler.codec.http.HttpHeaders add(java.lang.String,java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.DefaultHttpChunkTrailer$TrailingHeaders:org.jboss.netty.handler.codec.http.HttpHeaders add(java.lang.String,java.lang.Iterable)"
        ]
    },
    "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:org.jboss.netty.handler.codec.http.HttpHeaders set(java.lang.String,java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.DefaultHttpChunkTrailer$TrailingHeaders:org.jboss.netty.handler.codec.http.HttpHeaders set(java.lang.String,java.lang.Iterable)",
            "org.jboss.netty.handler.codec.http.DefaultHttpChunkTrailer:void setHeader(java.lang.String,java.lang.Iterable)",
            "org.jboss.netty.handler.codec.http.DefaultHttpMessage:void setHeader(java.lang.String,java.lang.Iterable)",
            "org.jboss.netty.handler.codec.http.HttpCodecUtil:void removeTransferEncodingChunked(org.jboss.netty.handler.codec.http.HttpMessage)",
            "org.jboss.netty.handler.codec.http.HttpHeaders:void setHeader(org.jboss.netty.handler.codec.http.HttpMessage,java.lang.String,java.lang.Iterable)",
            "org.jboss.netty.handler.codec.http.HttpHeaders:void setIntHeader(org.jboss.netty.handler.codec.http.HttpMessage,java.lang.String,java.lang.Iterable)",
            "org.jboss.netty.handler.codec.http.HttpHeaders:void setDateHeader(org.jboss.netty.handler.codec.http.HttpMessage,java.lang.String,java.util.Date)",
            "org.jboss.netty.handler.codec.http.HttpHeaders:void setDateHeader(org.jboss.netty.handler.codec.http.HttpMessage,java.lang.String,java.lang.Iterable)",
            "org.jboss.netty.handler.codec.http.HttpHeaders:void setDate(org.jboss.netty.handler.codec.http.HttpMessage,java.util.Date)",
            "org.jboss.netty.handler.codec.http.HttpHeaders:void removeTransferEncodingChunked(org.jboss.netty.handler.codec.http.HttpMessage)"
        ]
    },
    "org.jboss.netty.handler.codec.http.DefaultHttpMessage:void appendHeaders(java.lang.StringBuilder)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.DefaultHttpMessage:java.lang.String toString()",
            "org.jboss.netty.handler.codec.http.DefaultHttpRequest:java.lang.String toString()",
            "org.jboss.netty.handler.codec.http.DefaultHttpResponse:java.lang.String toString()"
        ]
    },
    "org.jboss.netty.handler.codec.http.HttpCodecUtil:boolean isTransferEncodingChunked(org.jboss.netty.handler.codec.http.HttpMessage)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.DefaultHttpMessage:boolean isChunked()",
            "org.jboss.netty.handler.codec.http.HttpMessageEncoder:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)"
        ]
    },
    "org.jboss.netty.handler.codec.http.HttpCodecUtil:void removeTransferEncodingChunked(org.jboss.netty.handler.codec.http.HttpMessage)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.HttpChunkAggregator:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.codec.http.HttpMessageEncoder:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)"
        ]
    },
    "org.jboss.netty.handler.codec.http.HttpHeaders:void removeTransferEncodingChunked(org.jboss.netty.handler.codec.http.HttpMessage)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.http.HttpHeaders:org.jboss.netty.handler.codec.http.HttpHeaders add(org.jboss.netty.handler.codec.http.HttpHeaders)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.http.HttpHeaders:org.jboss.netty.handler.codec.http.HttpHeaders set(org.jboss.netty.handler.codec.http.HttpHeaders)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.http.HttpHeaders:boolean contains(java.lang.String,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.HttpHeaders:boolean is100ContinueExpected(org.jboss.netty.handler.codec.http.HttpMessage)",
            "org.jboss.netty.handler.codec.http.HttpHeaders:boolean isTransferEncodingChunked(org.jboss.netty.handler.codec.http.HttpMessage)"
        ]
    },
    "org.jboss.netty.handler.codec.http.HttpMessageEncoder:void encodeHeaders(org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.http.HttpMessage)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.HttpMessageEncoder:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)"
        ]
    },
    "org.jboss.netty.handler.codec.http.HttpMessageEncoder:void encodeTrailingHeaders(org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.http.HttpChunkTrailer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.HttpMessageEncoder:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)"
        ]
    },
    "org.jboss.netty.handler.codec.http.multipart.DefaultHttpDataFactory:void cleanRequestHttpDatas(org.jboss.netty.handler.codec.http.HttpRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void cleanFiles()",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder:void cleanFiles()",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void cleanFiles()"
        ]
    },
    "org.jboss.netty.handler.codec.http.multipart.DefaultHttpDataFactory:void cleanAllHttpDatas()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder:void setBodyHttpDatas(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder:org.jboss.netty.handler.codec.http.HttpRequest finalizeRequest()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder:java.lang.String encodeAttribute(java.lang.String,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder:void addBodyHttpData(org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData)"
        ]
    },
    "org.jboss.netty.handler.codec.http.multipart.InternalAttribute:int size()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder:void addBodyHttpData(org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder:org.jboss.netty.handler.codec.http.HttpRequest finalizeRequest()"
        ]
    },
    "org.jboss.netty.handler.codec.http.multipart.InternalAttribute:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.IGMP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.pim.PIMHelloOption:java.lang.String toString()",
            "org.onlab.util.Tools:java.lang.String get(java.util.Dictionary,java.lang.String)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:java.lang.String toString(java.lang.Object)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdyHeaders:java.lang.String toString(java.lang.Object)",
            "org.jboss.netty.util.internal.StringUtil:java.lang.String stripControlCharacters(java.lang.Object)",
            "org.apache.commons.lang.builder.ReflectionToStringBuilder:java.lang.String[] toNoNullStringArray(java.lang.Object[])",
            "org.apache.commons.lang.mutable.MutableObject:java.lang.String toString()",
            "org.apache.commons.lang.ObjectUtils:java.lang.String toString(java.lang.Object)",
            "org.apache.commons.lang.ObjectUtils:java.lang.String toString(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.lang.Object[],char,int,int)",
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.lang.Object[],java.lang.String,int,int)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder append(java.lang.Object)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendFixedWidthPadLeft(java.lang.Object,int,char)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendFixedWidthPadRight(java.lang.Object,int,char)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder insert(int,java.lang.Object)",
            "org.apache.commons.lang.text.StrLookup$MapStrLookup:java.lang.String lookup(java.lang.String)",
            "org.apache.commons.lang.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Properties)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:java.lang.String toString()",
            "org.apache.commons.lang.time.DurationFormatUtils:java.lang.String format(org.apache.commons.lang.time.DurationFormatUtils$Token[],int,int,int,int,int,int,int,boolean)",
            "org.apache.commons.lang3.builder.ReflectionToStringBuilder:java.lang.String[] toNoNullStringArray(java.lang.Object[])",
            "org.apache.commons.lang3.exception.DefaultExceptionContext:java.lang.String getFormattedExceptionMessage(java.lang.String)",
            "org.apache.commons.lang3.mutable.MutableObject:java.lang.String toString()",
            "org.apache.commons.lang3.ObjectUtils:java.lang.String toString(java.lang.Object)",
            "org.apache.commons.lang3.ObjectUtils:java.lang.String toString(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder append(java.lang.Object)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadLeft(java.lang.Object,int,char)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadRight(java.lang.Object,int,char)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder insert(int,java.lang.Object)",
            "org.apache.commons.lang3.text.StrLookup$MapStrLookup:java.lang.String lookup(java.lang.String)",
            "org.apache.commons.lang3.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Properties)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:java.lang.String toString()",
            "org.apache.commons.lang3.time.DurationFormatUtils:java.lang.String format(org.apache.commons.lang3.time.DurationFormatUtils$Token[],long,long,long,long,long,long,long,boolean)"
        ]
    },
    "org.jboss.netty.handler.codec.serialization.ReferenceMap:void putAll(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.serialization.SoftReferenceMap:void putAll(java.util.Map)",
            "org.jboss.netty.handler.codec.serialization.WeakReferenceMap:void putAll(java.util.Map)"
        ]
    },
    "org.jboss.netty.handler.codec.socks.SocksInitRequest:void encodeAsByteBuf(org.jboss.netty.buffer.ChannelBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.socks.SocksMessageEncoder:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.DefaultSpdyHeaders:org.jboss.netty.handler.codec.spdy.SpdyHeaders set(java.lang.String,java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.spdy.DefaultSpdyHeadersFrame:void setHeader(java.lang.String,java.lang.Iterable)",
            "org.jboss.netty.handler.codec.spdy.SpdyHeaders:void setHeader(org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame,java.lang.String,java.lang.Iterable)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.DefaultSpdyHeaders:org.jboss.netty.handler.codec.spdy.SpdyHeaders add(java.lang.String,java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.spdy.DefaultSpdyHeadersFrame:void appendHeaders(java.lang.StringBuilder)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.spdy.DefaultSpdyHeadersFrame:java.lang.String toString()",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdySynReplyFrame:java.lang.String toString()",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdySynStreamFrame:java.lang.String toString()"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame:void appendSettings(java.lang.StringBuilder)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame:java.lang.String toString()"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.SpdyHeaderBlockRawEncoder:org.jboss.netty.buffer.ChannelBuffer encode(org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.spdy.SpdyFrameEncoder:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.codec.spdy.SpdyHeaderBlockJZlibEncoder:org.jboss.netty.buffer.ChannelBuffer encode(org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "org.jboss.netty.handler.codec.spdy.SpdyHeaderBlockZlibEncoder:org.jboss.netty.buffer.ChannelBuffer encode(org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.SpdyHttpDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.oneone.OneToOneDecoder:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.SpdyHttpDecoder:org.jboss.netty.handler.codec.http.HttpRequest createHttpRequest(int,org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.spdy.SpdyHttpDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.SpdyHttpDecoder:org.jboss.netty.handler.codec.http.HttpResponse createHttpResponse(int,org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.spdy.SpdyHttpDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.SpdyHttpEncoder:org.jboss.netty.handler.codec.spdy.SpdySynStreamFrame createSynStreamFrame(org.jboss.netty.handler.codec.http.HttpMessage)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.spdy.SpdyHttpEncoder:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.SpdyHttpEncoder:org.jboss.netty.handler.codec.spdy.SpdySynReplyFrame createSynReplyFrame(org.jboss.netty.handler.codec.http.HttpResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.spdy.SpdyHttpEncoder:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.SpdySession:void updateAllSendWindowSizes(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:void updateInitialSendWindowSize(int)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.SpdySession:void updateAllReceiveWindowSizes(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:void updateInitialReceiveWindowSize(int)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.SpdySession:org.jboss.netty.channel.MessageEvent getPendingWrite(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:void updateSendWindowSize(org.jboss.netty.channel.ChannelHandlerContext,int,int)"
        ]
    },
    "org.jboss.netty.handler.ipfilter.IpFilterRuleHandler:boolean accept(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent,java.net.InetSocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.ipfilter.IpFilteringHandlerImpl:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.util.VirtualExecutorService:java.util.List shutdownNow()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.ExecutorUtil:void shutdownNow(java.util.concurrent.Executor)"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentHashMap:void putAll(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.ConcurrentHashMap:void <init>(java.util.Map)",
            "org.apache.commons.lang.enum.Enum:org.apache.commons.lang.'enum'.Enum$Entry createEntry(java.lang.Class)",
            "org.apache.commons.lang.enums.Enum:org.apache.commons.lang.enums.Enum$Entry createEntry(java.lang.Class)",
            "org.apache.commons.lang3.reflect.TypeUtils:java.lang.reflect.Type unrollVariables(java.util.Map,java.lang.reflect.Type)"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentIdentityHashMap:void putAll(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap:void <init>(java.util.Map)",
            "org.apache.commons.lang.enum.Enum:org.apache.commons.lang.'enum'.Enum$Entry createEntry(java.lang.Class)",
            "org.apache.commons.lang.enums.Enum:org.apache.commons.lang.enums.Enum$Entry createEntry(java.lang.Class)",
            "org.apache.commons.lang3.reflect.TypeUtils:java.lang.reflect.Type unrollVariables(java.util.Map,java.lang.reflect.Type)"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap:void putAll(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap:void <init>(java.util.Map)",
            "org.apache.commons.lang.enum.Enum:org.apache.commons.lang.'enum'.Enum$Entry createEntry(java.lang.Class)",
            "org.apache.commons.lang.enums.Enum:org.apache.commons.lang.enums.Enum$Entry createEntry(java.lang.Class)",
            "org.apache.commons.lang3.reflect.TypeUtils:java.lang.reflect.Type unrollVariables(java.util.Map,java.lang.reflect.Type)"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap:void putAll(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap:void <init>(java.util.Map)",
            "org.apache.commons.lang.enum.Enum:org.apache.commons.lang.'enum'.Enum$Entry createEntry(java.lang.Class)",
            "org.apache.commons.lang.enums.Enum:org.apache.commons.lang.enums.Enum$Entry createEntry(java.lang.Class)",
            "org.apache.commons.lang3.reflect.TypeUtils:java.lang.reflect.Type unrollVariables(java.util.Map,java.lang.reflect.Type)"
        ]
    },
    "org.jboss.netty.util.internal.ConversionUtil:java.lang.String[] toStringArray(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.http.HttpTunnelingSocketChannelConfig:boolean setOption(java.lang.String,java.lang.Object)"
        ]
    },
    "org.apache.commons.lang.CharSet:boolean contains(char)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.CharSetUtils:java.lang.String squeeze(java.lang.String,java.lang.String[])",
            "org.apache.commons.lang.CharSetUtils:int count(java.lang.String,java.lang.String[])",
            "org.apache.commons.lang.CharSetUtils:java.lang.String modify(java.lang.String,java.lang.String[],boolean)"
        ]
    },
    "org.apache.commons.lang.ClassUtils:java.util.List convertClassNamesToClasses(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.ClassUtils:java.util.List convertClassesToClassNames(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.ClassUtils:java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.ClassUtils:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.builder.ToStringStyle:java.lang.String getShortClassName(java.lang.Class)",
            "org.apache.commons.lang.ClassUtils:void addAbbreviation(java.lang.String,java.lang.String)",
            "org.apache.commons.lang.ClassUtils:java.lang.String getShortClassName(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang.ClassUtils:java.lang.String getShortClassName(java.lang.Class)",
            "org.apache.commons.lang.ClassUtils:java.lang.String getShortClassName(java.lang.String)",
            "org.apache.commons.lang.ClassUtils:java.lang.String getPackageName(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang.ClassUtils:java.lang.String getPackageName(java.lang.Class)",
            "org.apache.commons.lang.ClassUtils:java.util.List getAllInterfaces(java.lang.Class)",
            "org.apache.commons.lang.ClassUtils:void getAllInterfaces(java.lang.Class,java.util.List)",
            "org.apache.commons.lang.ClassUtils:boolean isAssignable(java.lang.Class[],java.lang.Class[])",
            "org.apache.commons.lang.ClassUtils:boolean isAssignable(java.lang.Class[],java.lang.Class[],boolean)",
            "org.apache.commons.lang.ClassUtils:boolean isAssignable(java.lang.Class,java.lang.Class)",
            "org.apache.commons.lang.ClassUtils:boolean isAssignable(java.lang.Class,java.lang.Class,boolean)",
            "org.apache.commons.lang.ClassUtils:java.lang.Class primitiveToWrapper(java.lang.Class)",
            "org.apache.commons.lang.ClassUtils:java.lang.Class[] primitivesToWrappers(java.lang.Class[])",
            "org.apache.commons.lang.ClassUtils:java.lang.Class wrapperToPrimitive(java.lang.Class)",
            "org.apache.commons.lang.ClassUtils:java.lang.Class[] wrappersToPrimitives(java.lang.Class[])",
            "org.apache.commons.lang.ClassUtils:java.lang.Class getClass(java.lang.ClassLoader,java.lang.String,boolean)",
            "org.apache.commons.lang.ClassUtils:java.lang.Class getClass(java.lang.ClassLoader,java.lang.String)",
            "org.apache.commons.lang.ClassUtils:java.lang.Class getClass(java.lang.String)",
            "org.apache.commons.lang.ClassUtils:java.lang.Class getClass(java.lang.String,boolean)",
            "org.apache.commons.lang.ClassUtils:java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])",
            "org.apache.commons.lang.ClassUtils:java.lang.String toCanonicalName(java.lang.String)",
            "org.apache.commons.lang.ClassUtils:java.lang.String getShortCanonicalName(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang.ClassUtils:java.lang.String getShortCanonicalName(java.lang.Class)",
            "org.apache.commons.lang.ClassUtils:java.lang.String getShortCanonicalName(java.lang.String)",
            "org.apache.commons.lang.ClassUtils:java.lang.String getPackageCanonicalName(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang.ClassUtils:java.lang.String getPackageCanonicalName(java.lang.Class)",
            "org.apache.commons.lang.ClassUtils:java.lang.String getPackageCanonicalName(java.lang.String)",
            "org.apache.commons.lang.ClassUtils:java.lang.String getCanonicalName(java.lang.String)",
            "org.apache.commons.lang.ClassUtils:void <clinit>()",
            "org.apache.commons.lang.enum.Enum:int compareTo(java.lang.Object)",
            "org.apache.commons.lang.enum.Enum:java.lang.String toString()",
            "org.apache.commons.lang.enum.ValuedEnum:java.lang.String toString()",
            "org.apache.commons.lang.enums.Enum:int compareTo(java.lang.Object)",
            "org.apache.commons.lang.enums.Enum:java.lang.String toString()",
            "org.apache.commons.lang.enums.ValuedEnum:int compareTo(java.lang.Object)",
            "org.apache.commons.lang.enums.ValuedEnum:java.lang.String toString()",
            "org.apache.commons.lang.exception.ExceptionUtils:java.lang.String getMessage(java.lang.Throwable)",
            "org.apache.commons.lang.reflect.ConstructorUtils:java.lang.reflect.Constructor getMatchingAccessibleConstructor(java.lang.Class,java.lang.Class[])",
            "org.apache.commons.lang.reflect.FieldUtils:java.lang.reflect.Field getField(java.lang.Class,java.lang.String,boolean)",
            "org.apache.commons.lang.reflect.MemberUtils:float getObjectTransformationCost(java.lang.Class,java.lang.Class)",
            "org.apache.commons.lang.reflect.MemberUtils:float getPrimitivePromotionCost(java.lang.Class,java.lang.Class)",
            "org.apache.commons.lang.reflect.MethodUtils:java.lang.reflect.Method getMatchingAccessibleMethod(java.lang.Class,java.lang.String,java.lang.Class[])"
        ]
    },
    "org.apache.commons.lang.enum.ValuedEnum:org.apache.commons.lang.'enum'.Enum getEnum(java.lang.Class,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.enum.EnumUtils:org.apache.commons.lang.'enum'.ValuedEnum getEnum(java.lang.Class,int)"
        ]
    },
    "org.apache.commons.lang.enums.ValuedEnum:org.apache.commons.lang.enums.Enum getEnum(java.lang.Class,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.enums.EnumUtils:org.apache.commons.lang.enums.ValuedEnum getEnum(java.lang.Class,int)"
        ]
    },
    "org.apache.commons.lang.exception.NestableDelegate:void printStackTrace(java.io.PrintWriter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.exception.NestableDelegate:void printStackTrace(java.io.PrintStream)",
            "org.apache.commons.lang.exception.NestableError:void printStackTrace(java.io.PrintWriter)",
            "org.apache.commons.lang.exception.NestableException:void printStackTrace(java.io.PrintWriter)",
            "org.apache.commons.lang.exception.NestableRuntimeException:void printStackTrace(java.io.PrintWriter)",
            "org.apache.commons.lang.NotImplementedException:void printStackTrace(java.io.PrintWriter)"
        ]
    },
    "org.apache.commons.lang.reflect.FieldUtils:java.lang.reflect.Field getField(java.lang.Class,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.reflect.FieldUtils:java.lang.reflect.Field getField(java.lang.Class,java.lang.String)",
            "org.apache.commons.lang.reflect.FieldUtils:java.lang.Object readStaticField(java.lang.Class,java.lang.String,boolean)",
            "org.apache.commons.lang.reflect.FieldUtils:java.lang.Object readField(java.lang.Object,java.lang.String,boolean)",
            "org.apache.commons.lang.reflect.FieldUtils:void writeStaticField(java.lang.Class,java.lang.String,java.lang.Object,boolean)",
            "org.apache.commons.lang.reflect.FieldUtils:void writeField(java.lang.Object,java.lang.String,java.lang.Object,boolean)"
        ]
    },
    "org.apache.commons.lang.StringUtils:java.lang.String join(java.util.Iterator,char)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.util.Collection,char)"
        ]
    },
    "org.apache.commons.lang.StringUtils:java.lang.String join(java.util.Iterator,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.util.Collection,java.lang.String)"
        ]
    },
    "org.apache.commons.lang.text.ExtendedMessageFormat:void applyPattern(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.text.ExtendedMessageFormat:void <init>(java.lang.String,java.util.Locale,java.util.Map)"
        ]
    },
    "org.apache.commons.lang.text.ExtendedMessageFormat:boolean containsElements(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.text.ExtendedMessageFormat:void applyPattern(java.lang.String)",
            "org.apache.commons.lang.text.ExtendedMessageFormat:java.lang.String insertFormats(java.lang.String,java.util.ArrayList)"
        ]
    },
    "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendAll(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendAll(java.util.Iterator)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendWithSeparators(java.util.Collection,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.text.StrSubstitutor:void checkCyclicSubstitution(java.lang.String,java.util.List)"
        ]
    },
    "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendWithSeparators(java.util.Iterator,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.Validate:void noNullElements(java.util.Collection,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.Validate:void noNullElements(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.Validate:void allElementsOfType(java.util.Collection,java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.Validate:void allElementsOfType(java.util.Collection,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.AnnotationUtils$1:java.lang.String getShortClassName(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.builder.ToStringStyle:void appendSummary(java.lang.StringBuffer,java.lang.String,java.lang.Object)",
            "org.apache.commons.lang3.builder.ToStringStyle:void appendClassName(java.lang.StringBuffer,java.lang.Object)"
        ]
    },
    "org.apache.commons.lang3.ArrayUtils:java.lang.Object[] removeElements(java.lang.Object[],java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.ArrayUtils:byte[] removeElements(byte[],byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.ArrayUtils:short[] removeElements(short[],short[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.ArrayUtils:int[] removeElements(int[],int[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.ArrayUtils:char[] removeElements(char[],char[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.ArrayUtils:long[] removeElements(long[],long[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.ArrayUtils:float[] removeElements(float[],float[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.ArrayUtils:double[] removeElements(double[],double[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.ArrayUtils:boolean[] removeElements(boolean[],boolean[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.builder.DiffResult:java.lang.String toString(org.apache.commons.lang3.builder.ToStringStyle)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.builder.DiffResult:java.lang.String toString()"
        ]
    },
    "org.apache.commons.lang3.CharSet:boolean contains(char)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.CharSetUtils:java.lang.String squeeze(java.lang.String,java.lang.String[])",
            "org.apache.commons.lang3.CharSetUtils:boolean containsAny(java.lang.String,java.lang.String[])",
            "org.apache.commons.lang3.CharSetUtils:int count(java.lang.String,java.lang.String[])",
            "org.apache.commons.lang3.CharSetUtils:java.lang.String modify(java.lang.String,java.lang.String[],boolean)"
        ]
    },
    "org.apache.commons.lang3.ClassUtils:java.util.List convertClassNamesToClasses(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.ClassUtils:java.util.List convertClassesToClassNames(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.ClassUtils:java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.ClassUtils:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.AnnotationUtils$1:java.lang.String getShortClassName(java.lang.Class)",
            "org.apache.commons.lang3.builder.RecursiveToStringStyle:void appendDetail(java.lang.StringBuffer,java.lang.String,java.lang.Object)",
            "org.apache.commons.lang3.builder.ToStringStyle:java.lang.String getShortClassName(java.lang.Class)",
            "org.apache.commons.lang3.ClassUtils:java.lang.String getShortClassName(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang3.ClassUtils:java.lang.String getShortClassName(java.lang.Class)",
            "org.apache.commons.lang3.ClassUtils:java.lang.String getShortClassName(java.lang.String)",
            "org.apache.commons.lang3.ClassUtils:java.lang.String getSimpleName(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang3.ClassUtils:java.lang.String getPackageName(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang3.ClassUtils:java.lang.String getPackageName(java.lang.Class)",
            "org.apache.commons.lang3.ClassUtils:java.util.List getAllInterfaces(java.lang.Class)",
            "org.apache.commons.lang3.ClassUtils:void getAllInterfaces(java.lang.Class,java.util.HashSet)",
            "org.apache.commons.lang3.ClassUtils:boolean isAssignable(java.lang.Class[],java.lang.Class[])",
            "org.apache.commons.lang3.ClassUtils:boolean isAssignable(java.lang.Class[],java.lang.Class[],boolean)",
            "org.apache.commons.lang3.ClassUtils:boolean isPrimitiveOrWrapper(java.lang.Class)",
            "org.apache.commons.lang3.ClassUtils:boolean isPrimitiveWrapper(java.lang.Class)",
            "org.apache.commons.lang3.ClassUtils:boolean isAssignable(java.lang.Class,java.lang.Class)",
            "org.apache.commons.lang3.ClassUtils:boolean isAssignable(java.lang.Class,java.lang.Class,boolean)",
            "org.apache.commons.lang3.ClassUtils:java.lang.Class primitiveToWrapper(java.lang.Class)",
            "org.apache.commons.lang3.ClassUtils:java.lang.Class[] primitivesToWrappers(java.lang.Class[])",
            "org.apache.commons.lang3.ClassUtils:java.lang.Class wrapperToPrimitive(java.lang.Class)",
            "org.apache.commons.lang3.ClassUtils:java.lang.Class[] wrappersToPrimitives(java.lang.Class[])",
            "org.apache.commons.lang3.ClassUtils:java.lang.Class getClass(java.lang.ClassLoader,java.lang.String,boolean)",
            "org.apache.commons.lang3.ClassUtils:java.lang.Class getClass(java.lang.ClassLoader,java.lang.String)",
            "org.apache.commons.lang3.ClassUtils:java.lang.Class getClass(java.lang.String)",
            "org.apache.commons.lang3.ClassUtils:java.lang.Class getClass(java.lang.String,boolean)",
            "org.apache.commons.lang3.ClassUtils:java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])",
            "org.apache.commons.lang3.ClassUtils:java.lang.String toCanonicalName(java.lang.String)",
            "org.apache.commons.lang3.ClassUtils:java.lang.String getShortCanonicalName(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang3.ClassUtils:java.lang.String getShortCanonicalName(java.lang.Class)",
            "org.apache.commons.lang3.ClassUtils:java.lang.String getShortCanonicalName(java.lang.String)",
            "org.apache.commons.lang3.ClassUtils:java.lang.String getPackageCanonicalName(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang3.ClassUtils:java.lang.String getPackageCanonicalName(java.lang.Class)",
            "org.apache.commons.lang3.ClassUtils:java.lang.String getPackageCanonicalName(java.lang.String)",
            "org.apache.commons.lang3.ClassUtils:java.lang.String getCanonicalName(java.lang.String)",
            "org.apache.commons.lang3.ClassUtils:java.lang.Iterable hierarchy(java.lang.Class)",
            "org.apache.commons.lang3.ClassUtils:void <clinit>()",
            "org.apache.commons.lang3.exception.ExceptionUtils:java.lang.String getMessage(java.lang.Throwable)",
            "org.apache.commons.lang3.reflect.ConstructorUtils:java.lang.Object invokeConstructor(java.lang.Class,java.lang.Object[])",
            "org.apache.commons.lang3.reflect.ConstructorUtils:java.lang.Object invokeExactConstructor(java.lang.Class,java.lang.Object[])",
            "org.apache.commons.lang3.reflect.ConstructorUtils:java.lang.reflect.Constructor getMatchingAccessibleConstructor(java.lang.Class,java.lang.Class[])",
            "org.apache.commons.lang3.reflect.FieldUtils:java.lang.reflect.Field getField(java.lang.Class,java.lang.String,boolean)",
            "org.apache.commons.lang3.reflect.MemberUtils:float getObjectTransformationCost(java.lang.Class,java.lang.Class)",
            "org.apache.commons.lang3.reflect.MemberUtils:float getPrimitivePromotionCost(java.lang.Class,java.lang.Class)",
            "org.apache.commons.lang3.reflect.MethodUtils:java.lang.Object invokeMethod(java.lang.Object,java.lang.String,java.lang.Object[])",
            "org.apache.commons.lang3.reflect.MethodUtils:java.lang.Object invokeExactMethod(java.lang.Object,java.lang.String,java.lang.Object[])",
            "org.apache.commons.lang3.reflect.MethodUtils:java.lang.Object invokeStaticMethod(java.lang.Class,java.lang.String,java.lang.Object[])",
            "org.apache.commons.lang3.reflect.MethodUtils:java.lang.Object invokeExactStaticMethod(java.lang.Class,java.lang.String,java.lang.Object[])",
            "org.apache.commons.lang3.reflect.MethodUtils:java.lang.reflect.Method getMatchingAccessibleMethod(java.lang.Class,java.lang.String,java.lang.Class[])",
            "org.apache.commons.lang3.reflect.MethodUtils:java.util.Set getOverrideHierarchy(java.lang.reflect.Method,org.apache.commons.lang3.ClassUtils$Interfaces)",
            "org.apache.commons.lang3.reflect.TypeUtils:boolean isAssignable(java.lang.reflect.Type,java.lang.Class)",
            "org.apache.commons.lang3.reflect.TypeUtils:java.util.Map getTypeArguments(java.lang.Class,java.lang.Class,java.util.Map)"
        ]
    },
    "org.apache.commons.lang3.concurrent.MultiBackgroundInitializer:int getTaskCount()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.concurrent.BackgroundInitializer:java.util.concurrent.ExecutorService createExecutor()",
            "org.apache.commons.lang3.concurrent.MultiBackgroundInitializer:int getTaskCount()"
        ]
    },
    "org.apache.commons.lang3.concurrent.MultiBackgroundInitializer:org.apache.commons.lang3.concurrent.MultiBackgroundInitializer$MultiBackgroundInitializerResults initialize()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.concurrent.MultiBackgroundInitializer:java.lang.Object initialize()"
        ]
    },
    "org.apache.commons.lang3.EnumUtils:long generateBitVector(java.lang.Class,java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.EnumUtils:long generateBitVector(java.lang.Class,java.lang.Enum[])"
        ]
    },
    "org.apache.commons.lang3.EnumUtils:long[] generateBitVectors(java.lang.Class,java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.EnumUtils:long[] generateBitVectors(java.lang.Class,java.lang.Enum[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.event.EventListenerSupport$ProxyInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.event.EventListenerSupport:void writeObject(java.io.ObjectOutputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.exception.DefaultExceptionContext:org.apache.commons.lang3.exception.DefaultExceptionContext setContextValue(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.exception.DefaultExceptionContext:org.apache.commons.lang3.exception.ExceptionContext setContextValue(java.lang.String,java.lang.Object)"
        ]
    },
    "org.apache.commons.lang3.exception.DefaultExceptionContext:java.util.List getContextValues(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.exception.ContextedException:java.util.List getContextValues(java.lang.String)",
            "org.apache.commons.lang3.exception.ContextedRuntimeException:java.util.List getContextValues(java.lang.String)"
        ]
    },
    "org.apache.commons.lang3.exception.DefaultExceptionContext:java.lang.Object getFirstContextValue(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.exception.ContextedException:java.lang.Object getFirstContextValue(java.lang.String)",
            "org.apache.commons.lang3.exception.ContextedRuntimeException:java.lang.Object getFirstContextValue(java.lang.String)"
        ]
    },
    "org.apache.commons.lang3.exception.DefaultExceptionContext:java.util.Set getContextLabels()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.exception.ContextedException:java.util.Set getContextLabels()",
            "org.apache.commons.lang3.exception.ContextedRuntimeException:java.util.Set getContextLabels()"
        ]
    },
    "org.apache.commons.lang3.exception.DefaultExceptionContext:java.lang.String getFormattedExceptionMessage(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.exception.ContextedException:java.lang.String getFormattedExceptionMessage(java.lang.String)",
            "org.apache.commons.lang3.exception.ContextedRuntimeException:java.lang.String getFormattedExceptionMessage(java.lang.String)"
        ]
    },
    "org.apache.commons.lang3.ObjectUtils:java.lang.Object mode(java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.reflect.FieldUtils:java.lang.reflect.Field getField(java.lang.Class,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.reflect.FieldUtils:java.lang.reflect.Field getField(java.lang.Class,java.lang.String)",
            "org.apache.commons.lang3.reflect.FieldUtils:java.lang.Object readStaticField(java.lang.Class,java.lang.String,boolean)",
            "org.apache.commons.lang3.reflect.FieldUtils:java.lang.Object readField(java.lang.Object,java.lang.String,boolean)",
            "org.apache.commons.lang3.reflect.FieldUtils:void writeStaticField(java.lang.Class,java.lang.String,java.lang.Object,boolean)",
            "org.apache.commons.lang3.reflect.FieldUtils:void writeField(java.lang.Object,java.lang.String,java.lang.Object,boolean)"
        ]
    },
    "org.apache.commons.lang3.reflect.MethodUtils:java.util.Set getOverrideHierarchy(java.lang.reflect.Method,org.apache.commons.lang3.ClassUtils$Interfaces)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.reflect.TypeUtils:boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.ParameterizedType,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.reflect.TypeUtils:boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type,java.util.Map)"
        ]
    },
    "org.apache.commons.lang3.reflect.TypeUtils:boolean typesSatisfyVariables(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.StringUtils:java.lang.String join(java.util.Iterator,char)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.StringUtils:java.lang.String join(java.lang.Iterable,char)"
        ]
    },
    "org.apache.commons.lang3.StringUtils:java.lang.String join(java.util.Iterator,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.StringUtils:java.lang.String join(java.lang.Iterable,java.lang.String)"
        ]
    },
    "org.apache.commons.lang3.text.ExtendedMessageFormat:void applyPattern(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.text.ExtendedMessageFormat:void <init>(java.lang.String,java.util.Locale,java.util.Map)"
        ]
    },
    "org.apache.commons.lang3.text.ExtendedMessageFormat:boolean containsElements(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.text.ExtendedMessageFormat:void applyPattern(java.lang.String)",
            "org.apache.commons.lang3.text.ExtendedMessageFormat:java.lang.String insertFormats(java.lang.String,java.util.ArrayList)"
        ]
    },
    "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendAll(java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendAll(java.util.Iterator)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendWithSeparators(java.lang.Iterable,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.text.StrSubstitutor:void checkCyclicSubstitution(java.lang.String,java.util.List)"
        ]
    },
    "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendWithSeparators(java.util.Iterator,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.time.FastDateParser$TextStrategy:boolean addRegex(org.apache.commons.lang3.time.FastDateParser,java.lang.StringBuilder)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.time.FastDateParser:void init(java.util.Calendar)"
        ]
    },
    "org.apache.commons.lang3.time.FastDateParser$TextStrategy:void setCalendar(org.apache.commons.lang3.time.FastDateParser,java.util.Calendar,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.time.FastDateParser:java.util.Date parse(java.lang.String,java.text.ParsePosition)"
        ]
    },
    "org.apache.commons.lang3.time.FastDateParser$TimeZoneStrategy:void <init>(java.util.Locale)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.time.FastDateParser:org.apache.commons.lang3.time.FastDateParser$Strategy getLocaleSpecificStrategy(int,java.util.Calendar)"
        ]
    },
    "org.apache.commons.lang3.Validate:java.lang.Iterable noNullElements(java.lang.Iterable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.Validate:java.lang.Iterable noNullElements(java.lang.Iterable)"
        ]
    },
    "com.eclipsesource.json.JsonArray$1:com.eclipsesource.json.JsonValue next()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.eclipsesource.json.JsonArray$1:java.lang.Object next()"
        ]
    },
    "com.eclipsesource.json.JsonObject$1:com.eclipsesource.json.JsonObject$Member next()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.eclipsesource.json.JsonObject$1:java.lang.Object next()"
        ]
    },
    "com.eclipsesource.json.JsonWriter:void writeObject(com.eclipsesource.json.JsonObject)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.eclipsesource.json.JsonObject:void write(com.eclipsesource.json.JsonWriter)"
        ]
    },
    "com.eclipsesource.json.JsonWriter:void writeArray(com.eclipsesource.json.JsonArray)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.eclipsesource.json.JsonArray:void write(com.eclipsesource.json.JsonWriter)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.CollectionSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.CollectionSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$TreeSetSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.Collection)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$CollectionsSingletonMapSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$CollectionsSingletonMapSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$CollectionsSingletonSetSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.Set)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$CollectionsSingletonSetSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.EnumSet)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.FieldSerializer:void rebuildCachedFields(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.FieldSerializer:void rebuildCachedFields()",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:void setGenerics(com.esotericsoftware.kryo.Kryo,java.lang.Class[])"
        ]
    },
    "com.esotericsoftware.kryo.serializers.MapSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$TreeMapSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.Map)",
            "com.esotericsoftware.kryo.serializers.MapSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.MapSerializer:java.util.Map copy(com.esotericsoftware.kryo.Kryo,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.MapSerializer:java.lang.Object copy(com.esotericsoftware.kryo.Kryo,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.util.IntMap:void putAll(com.esotericsoftware.kryo.util.IntMap)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.util.ObjectMap:void putAll(com.esotericsoftware.kryo.util.ObjectMap)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.util.UnsafeUtil:java.lang.reflect.Field[] sortFieldsByOffset(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.ClosureSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.CollectionSerializer:java.util.Collection read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ObjectArraySerializer:java.lang.Object[] read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.MapSerializer:java.util.Map read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.ObjectField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.BeanSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.CollectionSerializer:java.util.Collection read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ObjectArraySerializer:java.lang.Object[] read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$StringArraySerializer:java.lang.String[] read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.MapSerializer:java.util.Map read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.ObjectField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.Kryo:java.lang.Object readClassAndObject(com.esotericsoftware.kryo.io.Input)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.util.KryoNamespace:java.lang.Object deserialize(byte[])",
            "org.onlab.util.KryoNamespace:java.lang.Object deserialize(java.nio.ByteBuffer)",
            "org.onlab.util.KryoNamespace:java.lang.Object deserialize(java.io.InputStream,int)",
            "com.esotericsoftware.kryo.io.KryoObjectInput:java.lang.Object readObject()",
            "com.esotericsoftware.kryo.serializers.BeanSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.CollectionSerializer:java.util.Collection read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$CollectionsSingletonListSerializer:java.util.List read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$CollectionsSingletonMapSerializer:java.util.Map read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$CollectionsSingletonSetSerializer:java.util.Set read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$TreeMapSerializer:java.util.Map create(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$TreeSetSerializer:java.util.TreeSet create(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.MapSerializer:java.util.Map read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.BlowfishSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readClassAndObject(com.esotericsoftware.kryo.io.Input)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:java.util.EnumSet read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:java.util.EnumSet read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DeflateSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readClassAndObject(com.esotericsoftware.kryo.io.Input)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:java.util.EnumSet read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.Kryo:java.lang.Object copy(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmObjectField:void copy(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.CollectionSerializer:java.util.Collection copy(com.esotericsoftware.kryo.Kryo,java.util.Collection)",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ObjectArraySerializer:java.lang.Object[] copy(com.esotericsoftware.kryo.Kryo,java.lang.Object[])",
            "com.esotericsoftware.kryo.serializers.MapSerializer:java.util.Map copy(com.esotericsoftware.kryo.Kryo,java.util.Map)",
            "com.esotericsoftware.kryo.serializers.ObjectField:void copy(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeObjectField:void copy(java.lang.Object,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.Kryo:java.lang.Object copy(java.lang.Object,com.esotericsoftware.kryo.Serializer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.Kryo:java.lang.Object copyShallow(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.Kryo:java.lang.Object copyShallow(java.lang.Object,com.esotericsoftware.kryo.Serializer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.serializers.BlowfishSerializer:java.lang.Object copy(com.esotericsoftware.kryo.Kryo,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:java.lang.Object copy(java.lang.Object)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object copy(java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object copyShallow(java.lang.Object)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object copyShallow(java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:java.lang.Object copy(com.esotericsoftware.kryo.Kryo,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:java.lang.Object copy(com.esotericsoftware.kryo.Kryo,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DeflateSerializer:java.lang.Object copy(com.esotericsoftware.kryo.Kryo,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:java.lang.Object copy(java.lang.Object)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object copy(java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object copyShallow(java.lang.Object)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object copyShallow(java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:java.lang.Object copy(com.esotericsoftware.kryo.Kryo,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:java.lang.Object copy(com.esotericsoftware.kryo.Kryo,java.lang.Object)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioClientSocketChannelFactory:void shutdown()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.bootstrap.Bootstrap:void shutdown()",
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannelFactory:void shutdown()",
            "org.jboss.netty.channel.socket.nio.NioClientSocketChannelFactory:void releaseExternalResources()"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioClientSocketChannelFactory:void releaseExternalResources()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.bootstrap.Bootstrap:void releaseExternalResources()",
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannelFactory:void releaseExternalResources()",
            "org.jboss.netty.channel.socket.http.HttpTunnelingServlet:void destroyChannelFactory(org.jboss.netty.channel.ChannelFactory)",
            "org.jboss.netty.channel.socket.nio.NioClientSocketChannelFactory:void releasePools()",
            "org.jboss.netty.channel.socket.nio.NioDatagramChannelFactory:void releasePool()",
            "org.jboss.netty.channel.socket.nio.NioServerSocketChannelFactory:void releasePools()",
            "org.jboss.netty.channel.socket.nio.ShareableWorkerPool:void destroy()",
            "org.jboss.netty.handler.execution.ChainedExecutor:void releaseExternal(java.util.concurrent.Executor)",
            "org.jboss.netty.handler.execution.ExecutionHandler:void releaseExternalResources()",
            "org.jboss.netty.util.ExternalResourceUtil:void release(org.jboss.netty.util.ExternalResourceReleasable[])"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioDatagramChannelFactory:void shutdown()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.bootstrap.Bootstrap:void shutdown()",
            "org.jboss.netty.channel.socket.nio.NioDatagramChannelFactory:void releaseExternalResources()"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioDatagramChannelFactory:void releaseExternalResources()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.bootstrap.Bootstrap:void releaseExternalResources()",
            "org.jboss.netty.channel.socket.http.HttpTunnelingServlet:void destroyChannelFactory(org.jboss.netty.channel.ChannelFactory)",
            "org.jboss.netty.channel.socket.nio.NioClientSocketChannelFactory:void releasePools()",
            "org.jboss.netty.channel.socket.nio.NioDatagramChannelFactory:void releasePool()",
            "org.jboss.netty.channel.socket.nio.NioServerSocketChannelFactory:void releasePools()",
            "org.jboss.netty.channel.socket.nio.ShareableWorkerPool:void destroy()",
            "org.jboss.netty.handler.execution.ChainedExecutor:void releaseExternal(java.util.concurrent.Executor)",
            "org.jboss.netty.handler.execution.ExecutionHandler:void releaseExternalResources()",
            "org.jboss.netty.util.ExternalResourceUtil:void release(org.jboss.netty.util.ExternalResourceReleasable[])"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioServerSocketChannelFactory:void shutdown()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.bootstrap.Bootstrap:void shutdown()",
            "org.jboss.netty.channel.socket.nio.NioServerSocketChannelFactory:void releaseExternalResources()"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioServerSocketChannelFactory:void releaseExternalResources()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.bootstrap.Bootstrap:void releaseExternalResources()",
            "org.jboss.netty.channel.socket.http.HttpTunnelingServlet:void destroyChannelFactory(org.jboss.netty.channel.ChannelFactory)",
            "org.jboss.netty.channel.socket.nio.NioClientSocketChannelFactory:void releasePools()",
            "org.jboss.netty.channel.socket.nio.NioDatagramChannelFactory:void releasePool()",
            "org.jboss.netty.channel.socket.nio.NioServerSocketChannelFactory:void releasePools()",
            "org.jboss.netty.channel.socket.nio.ShareableWorkerPool:void destroy()",
            "org.jboss.netty.handler.execution.ChainedExecutor:void releaseExternal(java.util.concurrent.Executor)",
            "org.jboss.netty.handler.execution.ExecutionHandler:void releaseExternalResources()",
            "org.jboss.netty.util.ExternalResourceUtil:void release(org.jboss.netty.util.ExternalResourceReleasable[])"
        ]
    },
    "org.jboss.netty.handler.execution.ChainedExecutor:void releaseExternalResources()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.NioClientSocketChannelFactory:void releasePools()",
            "org.jboss.netty.channel.socket.nio.NioDatagramChannelFactory:void releasePool()",
            "org.jboss.netty.channel.socket.nio.NioServerSocketChannelFactory:void releasePools()",
            "org.jboss.netty.channel.socket.nio.ShareableWorkerPool:void destroy()",
            "org.jboss.netty.handler.execution.ChainedExecutor:void releaseExternal(java.util.concurrent.Executor)",
            "org.jboss.netty.handler.execution.ExecutionHandler:void releaseExternalResources()",
            "org.jboss.netty.util.ExternalResourceUtil:void release(org.jboss.netty.util.ExternalResourceReleasable[])"
        ]
    },
    "org.jboss.netty.channel.local.DefaultLocalChannel:boolean setClosed()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.local.DefaultLocalChannel:void closeNow(org.jboss.netty.channel.ChannelFuture)"
        ]
    },
    "org.jboss.netty.channel.local.DefaultLocalServerChannel:boolean setClosed()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.local.LocalServerChannelSink:void close(org.jboss.netty.channel.local.DefaultLocalServerChannel,org.jboss.netty.channel.ChannelFuture)"
        ]
    },
    "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel:boolean setClosed()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$7$1:void operationComplete(org.jboss.netty.channel.ChannelFuture)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.AbstractNioChannel:boolean setClosed()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.NioDatagramChannel:boolean setClosed()",
            "org.jboss.netty.channel.socket.nio.NioSocketChannel:boolean setClosed()"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioServerSocketChannel:boolean setClosed()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.NioServerBoss:void close(org.jboss.netty.channel.socket.nio.NioServerSocketChannel,org.jboss.netty.channel.ChannelFuture)"
        ]
    },
    "org.jboss.netty.channel.socket.oio.AbstractOioChannel:boolean setClosed()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void close(org.jboss.netty.channel.socket.oio.AbstractOioChannel,org.jboss.netty.channel.ChannelFuture,boolean)"
        ]
    },
    "org.jboss.netty.channel.socket.oio.OioServerSocketChannel:boolean setClosed()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.oio.OioServerSocketPipelineSink:void close(org.jboss.netty.channel.socket.oio.OioServerSocketChannel,org.jboss.netty.channel.ChannelFuture)"
        ]
    },
    "org.jboss.netty.util.internal.ExecutorUtil:void shutdownNow(java.util.concurrent.Executor)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.AbstractNioBossPool:void releaseExternalResources()",
            "org.jboss.netty.channel.socket.nio.AbstractNioWorkerPool:void releaseExternalResources()",
            "org.jboss.netty.channel.socket.oio.OioClientSocketChannelFactory:void shutdown()",
            "org.jboss.netty.channel.socket.oio.OioClientSocketChannelFactory:void releaseExternalResources()",
            "org.jboss.netty.channel.socket.oio.OioDatagramChannelFactory:void shutdown()",
            "org.jboss.netty.channel.socket.oio.OioDatagramChannelFactory:void releaseExternalResources()",
            "org.jboss.netty.channel.socket.oio.OioServerSocketChannelFactory:void shutdown()",
            "org.jboss.netty.channel.socket.oio.OioServerSocketChannelFactory:void releaseExternalResources()",
            "org.jboss.netty.util.internal.ExecutorUtil:void terminate(java.lang.ThreadLocal,java.util.concurrent.Executor[])"
        ]
    },
    "org.jboss.netty.handler.ssl.SslHandler$1:void run(org.jboss.netty.util.Timeout)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.HashedWheelTimer$HashedWheelTimeout:void expire()"
        ]
    },
    "org.jboss.netty.util.HashedWheelTimer$Worker:void notifyExpiredTimeouts(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.HashedWheelTimer$Worker:void run()"
        ]
    },
    "org.jboss.netty.bootstrap.ClientBootstrap:org.jboss.netty.channel.ChannelFuture connect()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.bootstrap.ConnectionlessBootstrap:org.jboss.netty.channel.ChannelFuture connect()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.rtsp.RtspRequestDecoder:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.rtsp.RtspResponseDecoder:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel:org.jboss.netty.channel.ChannelFuture write(java.lang.Object,java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.group.DefaultChannelGroup:org.jboss.netty.channel.group.ChannelGroupFuture write(java.lang.Object,java.net.SocketAddress)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioDatagramChannel:org.jboss.netty.channel.ChannelFuture write(java.lang.Object,java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.group.DefaultChannelGroup:org.jboss.netty.channel.group.ChannelGroupFuture write(java.lang.Object,java.net.SocketAddress)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioSocketChannel:org.jboss.netty.channel.ChannelFuture write(java.lang.Object,java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.group.DefaultChannelGroup:org.jboss.netty.channel.group.ChannelGroupFuture write(java.lang.Object,java.net.SocketAddress)"
        ]
    },
    "org.jboss.netty.channel.socket.oio.AbstractOioChannel:org.jboss.netty.channel.ChannelFuture write(java.lang.Object,java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.group.DefaultChannelGroup:org.jboss.netty.channel.group.ChannelGroupFuture write(java.lang.Object,java.net.SocketAddress)"
        ]
    },
    "org.jboss.netty.channel.AbstractChannel:org.jboss.netty.channel.ChannelFuture write(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.group.DefaultChannelGroup:org.jboss.netty.channel.group.ChannelGroupFuture write(java.lang.Object)",
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$2$1:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$2:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel:void writeReal(org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel:org.jboss.netty.channel.ChannelFuture writeLastChunk()",
            "org.jboss.netty.channel.socket.http.HttpTunnelingServlet:void service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void protocolViolation(org.jboss.netty.channel.Channel,java.lang.String)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker00:org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker07:org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker08:org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker13:org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerHandshaker:org.jboss.netty.channel.ChannelFuture writeHandshakeResponse(org.jboss.netty.channel.Channel,org.jboss.netty.handler.codec.http.HttpResponse,org.jboss.netty.channel.ChannelHandler,org.jboss.netty.channel.ChannelHandler)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerHandshaker00:org.jboss.netty.channel.ChannelFuture close(org.jboss.netty.channel.Channel,org.jboss.netty.handler.codec.http.websocketx.CloseWebSocketFrame)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerHandshaker07:org.jboss.netty.channel.ChannelFuture close(org.jboss.netty.channel.Channel,org.jboss.netty.handler.codec.http.websocketx.CloseWebSocketFrame)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerHandshaker08:org.jboss.netty.channel.ChannelFuture close(org.jboss.netty.channel.Channel,org.jboss.netty.handler.codec.http.websocketx.CloseWebSocketFrame)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerHandshaker13:org.jboss.netty.channel.ChannelFuture close(org.jboss.netty.channel.Channel,org.jboss.netty.handler.codec.http.websocketx.CloseWebSocketFrame)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerHandshakerFactory:org.jboss.netty.channel.ChannelFuture sendUnsupportedWebSocketVersionResponse(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler$1:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler:void exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ExceptionEvent)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler:void sendHttpResponse(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.handler.codec.http.HttpRequest,org.jboss.netty.handler.codec.http.HttpResponse)"
        ]
    },
    "org.jboss.netty.channel.AbstractChannel:org.jboss.netty.channel.ChannelFuture setReadable(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.group.DefaultChannelGroup:org.jboss.netty.channel.group.ChannelGroupFuture setReadable(boolean)",
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor:void increaseCounter(java.lang.Runnable)",
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor:void decreaseCounter(java.lang.Runnable)",
            "org.jboss.netty.handler.traffic.AbstractTrafficShapingHandler$ReopenReadTimerTask:void run(org.jboss.netty.util.Timeout)",
            "org.jboss.netty.handler.traffic.AbstractTrafficShapingHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.traffic.ChannelTrafficShapingHandler:void channelConnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)"
        ]
    },
    "org.jboss.netty.channel.ChannelFutureListener$1:void operationComplete(org.jboss.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.CompleteChannelFuture:void addListener(org.jboss.netty.channel.ChannelFutureListener)",
            "org.jboss.netty.channel.DefaultChannelFuture:void notifyListener(org.jboss.netty.channel.ChannelFutureListener)"
        ]
    },
    "org.jboss.netty.channel.ChannelFutureListener$2:void operationComplete(org.jboss.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.CompleteChannelFuture:void addListener(org.jboss.netty.channel.ChannelFutureListener)",
            "org.jboss.netty.channel.DefaultChannelFuture:void notifyListener(org.jboss.netty.channel.ChannelFutureListener)"
        ]
    },
    "org.jboss.netty.channel.socket.http.HttpTunnelingServlet$OutboundConnectionHandler:void exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ExceptionEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler:void exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.util.KryoNamespace$Builder:org.onlab.util.KryoNamespace build()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.util.KryoNamespace:byte[] serialize(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.util.KryoNamespace:void serialize(java.lang.Object,java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.util.KryoNamespace:java.lang.Object deserialize(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.http.HttpClientCodec$Decoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.http.HttpMessageDecoder$State)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.HttpClientCodec$Decoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,java.lang.Enum)",
            "org.jboss.netty.handler.codec.http.HttpMessageDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,java.lang.Enum)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.ShareableWorkerPool:void rebuildSelectors()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.ShareableWorkerPool:void rebuildSelectors()"
        ]
    },
    "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void <init>(java.util.concurrent.Executor)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.NioDatagramWorker:void <init>(java.util.concurrent.Executor)",
            "org.jboss.netty.channel.socket.nio.NioWorker:void <init>(java.util.concurrent.Executor)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioServerBoss:void <init>(java.util.concurrent.Executor)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.channel.socket.nio.NioWorker:void <init>(java.util.concurrent.Executor,org.jboss.netty.util.ThreadNameDeterminer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.NioWorkerPool:org.jboss.netty.channel.socket.nio.NioWorker createWorker(java.util.concurrent.Executor)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioClientBossPool:org.jboss.netty.channel.socket.nio.NioClientBoss newBoss(java.util.concurrent.Executor)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.NioClientBossPool:org.jboss.netty.channel.socket.nio.Boss newBoss(java.util.concurrent.Executor)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioServerBossPool:org.jboss.netty.channel.socket.nio.NioServerBoss newBoss(java.util.concurrent.Executor)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.NioServerBossPool:org.jboss.netty.channel.socket.nio.Boss newBoss(java.util.concurrent.Executor)"
        ]
    },
    "org.jboss.netty.handler.codec.socks.SocksAuthRequestDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,java.lang.Enum)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.replay.ReplayingDecoder:java.lang.Object decodeLast(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,java.lang.Enum)",
            "org.jboss.netty.handler.codec.replay.ReplayingDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.replay.ReplayingDecoder:void callDecode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.buffer.ChannelBuffer,java.net.SocketAddress)"
        ]
    },
    "org.jboss.netty.handler.codec.socks.SocksAuthResponseDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,java.lang.Enum)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.replay.ReplayingDecoder:java.lang.Object decodeLast(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,java.lang.Enum)",
            "org.jboss.netty.handler.codec.replay.ReplayingDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.replay.ReplayingDecoder:void callDecode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.buffer.ChannelBuffer,java.net.SocketAddress)"
        ]
    },
    "org.jboss.netty.handler.codec.socks.SocksCmdRequestDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,java.lang.Enum)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.replay.ReplayingDecoder:java.lang.Object decodeLast(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,java.lang.Enum)",
            "org.jboss.netty.handler.codec.replay.ReplayingDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.replay.ReplayingDecoder:void callDecode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.buffer.ChannelBuffer,java.net.SocketAddress)"
        ]
    },
    "org.jboss.netty.handler.codec.socks.SocksCmdResponseDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,java.lang.Enum)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.replay.ReplayingDecoder:java.lang.Object decodeLast(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,java.lang.Enum)",
            "org.jboss.netty.handler.codec.replay.ReplayingDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.replay.ReplayingDecoder:void callDecode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.buffer.ChannelBuffer,java.net.SocketAddress)"
        ]
    },
    "org.jboss.netty.handler.codec.socks.SocksInitRequestDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,java.lang.Enum)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.replay.ReplayingDecoder:java.lang.Object decodeLast(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,java.lang.Enum)",
            "org.jboss.netty.handler.codec.replay.ReplayingDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.replay.ReplayingDecoder:void callDecode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.buffer.ChannelBuffer,java.net.SocketAddress)"
        ]
    },
    "org.jboss.netty.handler.codec.socks.SocksInitResponseDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,java.lang.Enum)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.replay.ReplayingDecoder:java.lang.Object decodeLast(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,java.lang.Enum)",
            "org.jboss.netty.handler.codec.replay.ReplayingDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.replay.ReplayingDecoder:void callDecode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.buffer.ChannelBuffer,java.net.SocketAddress)"
        ]
    },
    "org.jboss.netty.channel.Channels:org.jboss.netty.channel.ChannelPipeline pipeline(org.jboss.netty.channel.ChannelHandler[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.embedder.AbstractCodecEmbedder:void configurePipeline(org.jboss.netty.channel.ChannelHandler[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.embedder.AbstractCodecEmbedder:void <init>(org.jboss.netty.channel.ChannelHandler[])"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.SpdyOrHttpChooser:void addSpdyHandlers(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.handler.codec.spdy.SpdyVersion)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.spdy.SpdyOrHttpChooser:void addHttpHandlers(org.jboss.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler:void afterAdd(org.jboss.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.DefaultChannelPipeline:void callAfterAdd(org.jboss.netty.channel.ChannelHandlerContext)",
            "org.jboss.netty.channel.StaticChannelPipeline:void callAfterAdd(org.jboss.netty.channel.ChannelHandlerContext)"
        ]
    },
    "org.onlab.stc.Compiler:void lambda$compile$1(java.lang.String,org.onlab.stc.Group,org.apache.commons.configuration.HierarchicalConfiguration)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.stc.Compiler:void lambda$compile$2(java.lang.String,org.onlab.stc.Group,org.apache.commons.configuration.HierarchicalConfiguration)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.graph.SrlgGraphSearch:org.onlab.graph.GraphPathSearch$Result access$000(org.onlab.graph.SrlgGraphSearch,boolean[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.graph.SrlgGraphSearch$Subset:double fitness()",
            "org.onlab.graph.SrlgGraphSearch$Subset:java.util.Set buildPaths()"
        ]
    },
    "org.jboss.netty.channel.DefaultChannelPipeline:void callBeforeAdd(org.jboss.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.DefaultChannelPipeline:void addFirst(java.lang.String,org.jboss.netty.channel.ChannelHandler)",
            "org.jboss.netty.channel.DefaultChannelPipeline:void addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)",
            "org.jboss.netty.channel.DefaultChannelPipeline:void addBefore(java.lang.String,java.lang.String,org.jboss.netty.channel.ChannelHandler)",
            "org.jboss.netty.channel.DefaultChannelPipeline:void addAfter(java.lang.String,java.lang.String,org.jboss.netty.channel.ChannelHandler)",
            "org.jboss.netty.channel.DefaultChannelPipeline:org.jboss.netty.channel.ChannelHandler replace(org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext,java.lang.String,org.jboss.netty.channel.ChannelHandler)",
            "org.jboss.netty.channel.DefaultChannelPipeline:void init(java.lang.String,org.jboss.netty.channel.ChannelHandler)"
        ]
    },
    "org.jboss.netty.channel.StaticChannelPipeline:void callBeforeAdd(org.jboss.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.StaticChannelPipeline:void <init>(org.jboss.netty.channel.ChannelHandler[])"
        ]
    },
    "org.jboss.netty.handler.traffic.GlobalTrafficShapingHandler:void <init>(org.jboss.netty.util.Timer,long,long,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.traffic.GlobalTrafficShapingHandler:void <init>(org.jboss.netty.util.Timer,long,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.traffic.GlobalTrafficShapingHandler:void <init>(org.jboss.netty.util.Timer,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.traffic.GlobalTrafficShapingHandler:void <init>(org.jboss.netty.util.Timer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.traffic.GlobalTrafficShapingHandler:void <init>(org.jboss.netty.util.ObjectSizeEstimator,org.jboss.netty.util.Timer,long,long,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.traffic.GlobalTrafficShapingHandler:void <init>(org.jboss.netty.util.ObjectSizeEstimator,org.jboss.netty.util.Timer,long,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.traffic.GlobalTrafficShapingHandler:void <init>(org.jboss.netty.util.ObjectSizeEstimator,org.jboss.netty.util.Timer,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.traffic.GlobalTrafficShapingHandler:void <init>(org.jboss.netty.util.ObjectSizeEstimator,org.jboss.netty.util.Timer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.traffic.AbstractTrafficShapingHandler:void configure(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.traffic.AbstractTrafficShapingHandler:void configure(long,long,long)"
        ]
    },
    "org.jboss.netty.handler.traffic.TrafficCounter:void <init>(org.jboss.netty.handler.traffic.AbstractTrafficShapingHandler,org.jboss.netty.util.Timer,java.lang.String,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.traffic.ChannelTrafficShapingHandler:void channelConnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.handler.traffic.GlobalTrafficShapingHandler:void createGlobalTrafficCounter()"
        ]
    },
    "org.apache.commons.lang.builder.HashCodeBuilder:int reflectionHashCode(int,int,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.builder.HashCodeBuilder:int reflectionHashCode(int,int,java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.builder.HashCodeBuilder:int reflectionHashCode(int,int,java.lang.Object,boolean,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.builder.HashCodeBuilder:int reflectionHashCode(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.builder.HashCodeBuilder:int reflectionHashCode(java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.builder.HashCodeBuilder:int reflectionHashCode(java.lang.Object,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.builder.HashCodeBuilder:int reflectionHashCode(java.lang.Object,java.util.Collection)"
        ]
    },
    "org.apache.commons.lang.CharSetUtils:java.lang.String squeeze(java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.CharSetUtils:java.lang.String squeeze(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.commons.lang.CharSetUtils:int count(java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.CharSetUtils:int count(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.commons.lang.CharSetUtils:java.lang.String modify(java.lang.String,java.lang.String[],boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.CharSetUtils:java.lang.String keep(java.lang.String,java.lang.String[])",
            "org.apache.commons.lang.CharSetUtils:java.lang.String delete(java.lang.String,java.lang.String[])"
        ]
    },
    "org.apache.commons.lang3.builder.EqualsBuilder:boolean reflectionEquals(java.lang.Object,java.lang.Object,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.builder.EqualsBuilder:boolean reflectionEquals(java.lang.Object,java.lang.Object,java.util.Collection)"
        ]
    },
    "org.apache.commons.lang3.builder.EqualsBuilder:boolean reflectionEquals(java.lang.Object,java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.builder.HashCodeBuilder:int reflectionHashCode(int,int,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.builder.HashCodeBuilder:int reflectionHashCode(int,int,java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.builder.HashCodeBuilder:int reflectionHashCode(java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.builder.HashCodeBuilder:int reflectionHashCode(java.lang.Object,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.builder.HashCodeBuilder:int reflectionHashCode(java.lang.Object,java.util.Collection)"
        ]
    },
    "org.apache.commons.lang3.CharSetUtils:java.lang.String squeeze(java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.CharSetUtils:boolean containsAny(java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.CharSetUtils:int count(java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.CharSetUtils:java.lang.String modify(java.lang.String,java.lang.String[],boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.CharSetUtils:java.lang.String keep(java.lang.String,java.lang.String[])",
            "org.apache.commons.lang3.CharSetUtils:java.lang.String delete(java.lang.String,java.lang.String[])"
        ]
    },
    "org.onlab.stc.Compiler:void processSequentialGroup(org.apache.commons.configuration.HierarchicalConfiguration,java.lang.String,org.onlab.stc.Group)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Compiler:void lambda$compile$4(java.lang.String,org.onlab.stc.Group,org.apache.commons.configuration.HierarchicalConfiguration)"
        ]
    },
    "org.onlab.stc.Compiler:void processDependency(org.apache.commons.configuration.HierarchicalConfiguration,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Compiler:void lambda$compile$5(java.lang.String,org.apache.commons.configuration.HierarchicalConfiguration)"
        ]
    },
    "org.onlab.stc.Coordinator:void executeSucessors(org.onlab.stc.Step)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Coordinator:void access$300(org.onlab.stc.Coordinator,org.onlab.stc.Step)"
        ]
    },
    "org.onlab.stc.MonitorLayout:void computeLayout(org.onlab.stc.Group,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.MonitorLayout:void <init>(org.onlab.stc.Compiler)",
            "org.onlab.stc.MonitorLayout:org.onlab.stc.MonitorLayout$Box updateBox(org.onlab.stc.Step,int,int,org.onlab.stc.Group)"
        ]
    },
    "org.onlab.stc.Coordinator:int waitFor()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Main:void runCoordinator()"
        ]
    },
    "org.onlab.graph.GAPopulation:java.util.List runGA(int,int,int,org.onlab.graph.GAOrganism)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.graph.SrlgGraphSearch:org.onlab.graph.GraphPathSearch$Result search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)"
        ]
    },
    "org.onlab.graph.GAPopulation:int lambda$step$3(org.onlab.graph.GAOrganism,org.onlab.graph.GAOrganism)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.graph.GAPopulation$lambda_step_3__48:int compare(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.onlab.graph.TarjanGraphSearch$SccResult:void addCluster(org.onlab.graph.TarjanGraphSearch$VertexData)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.graph.TarjanGraphSearch$SccResult:void access$400(org.onlab.graph.TarjanGraphSearch$SccResult,org.onlab.graph.TarjanGraphSearch$VertexData)"
        ]
    },
    "org.onlab.graph.TarjanGraphSearch:org.onlab.graph.GraphSearch$Result search(org.onlab.graph.Graph,org.onlab.graph.EdgeWeight)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.packet.BasePacket:java.lang.Object clone()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Coordinator$Directive:org.onlab.stc.Coordinator$Directive[] values()",
            "org.onlab.stc.Coordinator$Status:org.onlab.stc.Coordinator$Status[] values()",
            "org.onlab.stc.Main$Command:org.onlab.stc.Main$Command[] values()",
            "org.onlab.graph.DepthFirstSearch$EdgeType:org.onlab.graph.DepthFirstSearch$EdgeType[] values()",
            "org.onlab.graph.SrlgGraphSearch$Subset:void <init>(org.onlab.graph.SrlgGraphSearch,boolean[])",
            "org.onlab.packet.DHCP$DHCPOptionCode:org.onlab.packet.DHCP$DHCPOptionCode[] values()",
            "org.onlab.packet.DHCPPacketType:org.onlab.packet.DHCPPacketType[] values()",
            "org.onlab.packet.EthType$EtherType:org.onlab.packet.EthType$EtherType[] values()",
            "org.onlab.packet.IpAddress$Version:org.onlab.packet.IpAddress$Version[] values()",
            "org.onlab.util.DataRateUnit:org.onlab.util.DataRateUnit[] values()",
            "org.jboss.netty.buffer.ChannelBuffers:org.jboss.netty.buffer.ChannelBuffer copiedBuffer(java.nio.ByteOrder,byte[])",
            "org.jboss.netty.buffer.CompositeChannelBuffer:void <init>(org.jboss.netty.buffer.CompositeChannelBuffer)",
            "org.jboss.netty.channel.ChannelState:org.jboss.netty.channel.ChannelState[] values()",
            "org.jboss.netty.channel.socket.InternetProtocolFamily:org.jboss.netty.channel.socket.InternetProtocolFamily[] values()",
            "org.jboss.netty.channel.socket.http.HttpTunnelingSocketChannelConfig:java.lang.String[] getEnabledSslCipherSuites()",
            "org.jboss.netty.channel.socket.http.HttpTunnelingSocketChannelConfig:void setEnabledSslCipherSuites(java.lang.String[])",
            "org.jboss.netty.channel.socket.http.HttpTunnelingSocketChannelConfig:java.lang.String[] getEnabledSslProtocols()",
            "org.jboss.netty.channel.socket.http.HttpTunnelingSocketChannelConfig:void setEnabledSslProtocols(java.lang.String[])",
            "org.jboss.netty.handler.codec.base64.Base64Dialect:org.jboss.netty.handler.codec.base64.Base64Dialect[] values()",
            "org.jboss.netty.handler.codec.compression.ZlibWrapper:org.jboss.netty.handler.codec.compression.ZlibWrapper[] values()",
            "org.jboss.netty.handler.codec.http.DefaultCookie:void setPorts(int[])",
            "org.jboss.netty.handler.codec.http.HttpMessageDecoder$State:org.jboss.netty.handler.codec.http.HttpMessageDecoder$State[] values()",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostBodyUtil$TransferEncodingMechanism:org.jboss.netty.handler.codec.http.multipart.HttpPostBodyUtil$TransferEncodingMechanism[] values()",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestDecoder$MultiPartStatus:org.jboss.netty.handler.codec.http.multipart.HttpPostRequestDecoder$MultiPartStatus[] values()",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder$EncoderMode:org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder$EncoderMode[] values()",
            "org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData$HttpDataType:org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData$HttpDataType[] values()",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder$State:org.jboss.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder$State[] values()",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketFrameType:org.jboss.netty.handler.codec.http.websocketx.WebSocketFrameType[] values()",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketVersion:org.jboss.netty.handler.codec.http.websocketx.WebSocketVersion[] values()",
            "org.jboss.netty.handler.codec.replay.VoidEnum:org.jboss.netty.handler.codec.replay.VoidEnum[] values()",
            "org.jboss.netty.handler.codec.serialization.CompatibleObjectDecoderState:org.jboss.netty.handler.codec.serialization.CompatibleObjectDecoderState[] values()",
            "org.jboss.netty.handler.codec.socks.SocksAuthRequestDecoder$State:org.jboss.netty.handler.codec.socks.SocksAuthRequestDecoder$State[] values()",
            "org.jboss.netty.handler.codec.socks.SocksAuthResponseDecoder$State:org.jboss.netty.handler.codec.socks.SocksAuthResponseDecoder$State[] values()",
            "org.jboss.netty.handler.codec.socks.SocksCmdRequestDecoder$State:org.jboss.netty.handler.codec.socks.SocksCmdRequestDecoder$State[] values()",
            "org.jboss.netty.handler.codec.socks.SocksCmdResponseDecoder$State:org.jboss.netty.handler.codec.socks.SocksCmdResponseDecoder$State[] values()",
            "org.jboss.netty.handler.codec.socks.SocksInitRequestDecoder$State:org.jboss.netty.handler.codec.socks.SocksInitRequestDecoder$State[] values()",
            "org.jboss.netty.handler.codec.socks.SocksInitResponseDecoder$State:org.jboss.netty.handler.codec.socks.SocksInitResponseDecoder$State[] values()",
            "org.jboss.netty.handler.codec.socks.SocksMessage$AddressType:org.jboss.netty.handler.codec.socks.SocksMessage$AddressType[] values()",
            "org.jboss.netty.handler.codec.socks.SocksMessage$AuthScheme:org.jboss.netty.handler.codec.socks.SocksMessage$AuthScheme[] values()",
            "org.jboss.netty.handler.codec.socks.SocksMessage$AuthStatus:org.jboss.netty.handler.codec.socks.SocksMessage$AuthStatus[] values()",
            "org.jboss.netty.handler.codec.socks.SocksMessage$CmdStatus:org.jboss.netty.handler.codec.socks.SocksMessage$CmdStatus[] values()",
            "org.jboss.netty.handler.codec.socks.SocksMessage$CmdType:org.jboss.netty.handler.codec.socks.SocksMessage$CmdType[] values()",
            "org.jboss.netty.handler.codec.socks.SocksMessage$MessageType:org.jboss.netty.handler.codec.socks.SocksMessage$MessageType[] values()",
            "org.jboss.netty.handler.codec.socks.SocksMessage$ProtocolVersion:org.jboss.netty.handler.codec.socks.SocksMessage$ProtocolVersion[] values()",
            "org.jboss.netty.handler.codec.socks.SocksMessage$SubnegotiationVersion:org.jboss.netty.handler.codec.socks.SocksMessage$SubnegotiationVersion[] values()",
            "org.jboss.netty.handler.codec.socks.SocksRequest$SocksRequestType:org.jboss.netty.handler.codec.socks.SocksRequest$SocksRequestType[] values()",
            "org.jboss.netty.handler.codec.socks.SocksResponse$SocksResponseType:org.jboss.netty.handler.codec.socks.SocksResponse$SocksResponseType[] values()",
            "org.jboss.netty.handler.codec.spdy.SpdyFrameDecoder$State:org.jboss.netty.handler.codec.spdy.SpdyFrameDecoder$State[] values()",
            "org.jboss.netty.handler.codec.spdy.SpdyOrHttpChooser$SelectedProtocol:org.jboss.netty.handler.codec.spdy.SpdyOrHttpChooser$SelectedProtocol[] values()",
            "org.jboss.netty.handler.codec.spdy.SpdyVersion:org.jboss.netty.handler.codec.spdy.SpdyVersion[] values()",
            "org.jboss.netty.handler.timeout.IdleState:org.jboss.netty.handler.timeout.IdleState[] values()",
            "org.jboss.netty.logging.InternalLogLevel:org.jboss.netty.logging.InternalLogLevel[] values()",
            "org.jboss.netty.util.internal.jzlib.JZlib$WrapperType:org.jboss.netty.util.internal.jzlib.JZlib$WrapperType[] values()",
            "org.apache.commons.lang.ArrayUtils:java.lang.Object[] clone(java.lang.Object[])",
            "org.apache.commons.lang.ArrayUtils:long[] clone(long[])",
            "org.apache.commons.lang.ArrayUtils:int[] clone(int[])",
            "org.apache.commons.lang.ArrayUtils:short[] clone(short[])",
            "org.apache.commons.lang.ArrayUtils:char[] clone(char[])",
            "org.apache.commons.lang.ArrayUtils:byte[] clone(byte[])",
            "org.apache.commons.lang.ArrayUtils:double[] clone(double[])",
            "org.apache.commons.lang.ArrayUtils:float[] clone(float[])",
            "org.apache.commons.lang.ArrayUtils:boolean[] clone(boolean[])",
            "org.apache.commons.lang.ObjectUtils:java.lang.Object clone(java.lang.Object)",
            "org.apache.commons.lang.text.StrMatcher$CharSetMatcher:void <init>(char[])",
            "org.apache.commons.lang.text.StrTokenizer:java.lang.String[] getTokenArray()",
            "org.apache.commons.lang.text.StrTokenizer:java.lang.Object cloneReset()",
            "org.apache.commons.lang3.ArrayUtils:java.lang.Object[] clone(java.lang.Object[])",
            "org.apache.commons.lang3.ArrayUtils:long[] clone(long[])",
            "org.apache.commons.lang3.ArrayUtils:int[] clone(int[])",
            "org.apache.commons.lang3.ArrayUtils:short[] clone(short[])",
            "org.apache.commons.lang3.ArrayUtils:char[] clone(char[])",
            "org.apache.commons.lang3.ArrayUtils:byte[] clone(byte[])",
            "org.apache.commons.lang3.ArrayUtils:double[] clone(double[])",
            "org.apache.commons.lang3.ArrayUtils:float[] clone(float[])",
            "org.apache.commons.lang3.ArrayUtils:boolean[] clone(boolean[])",
            "org.apache.commons.lang3.builder.ReflectionToStringBuilder:java.lang.String[] getExcludeFieldNames()",
            "org.apache.commons.lang3.ClassUtils$Interfaces:org.apache.commons.lang3.ClassUtils$Interfaces[] values()",
            "org.apache.commons.lang3.JavaVersion:org.apache.commons.lang3.JavaVersion[] values()",
            "org.apache.commons.lang3.ObjectUtils:java.lang.Object clone(java.lang.Object)",
            "org.apache.commons.lang3.Range$ComparableComparator:org.apache.commons.lang3.Range$ComparableComparator[] values()",
            "org.apache.commons.lang3.reflect.TypeUtils$ParameterizedTypeImpl:java.lang.reflect.Type[] getActualTypeArguments()",
            "org.apache.commons.lang3.reflect.TypeUtils$WildcardTypeImpl:java.lang.reflect.Type[] getUpperBounds()",
            "org.apache.commons.lang3.reflect.TypeUtils$WildcardTypeImpl:java.lang.reflect.Type[] getLowerBounds()",
            "org.apache.commons.lang3.text.StrMatcher$CharSetMatcher:void <init>(char[])",
            "org.apache.commons.lang3.text.StrTokenizer:java.lang.String[] getTokenArray()",
            "org.apache.commons.lang3.text.StrTokenizer:java.lang.Object cloneReset()",
            "org.apache.commons.lang3.text.translate.EntityArrays:java.lang.String[][] ISO8859_1_ESCAPE()",
            "org.apache.commons.lang3.text.translate.EntityArrays:java.lang.String[][] ISO8859_1_UNESCAPE()",
            "org.apache.commons.lang3.text.translate.EntityArrays:java.lang.String[][] HTML40_EXTENDED_ESCAPE()",
            "org.apache.commons.lang3.text.translate.EntityArrays:java.lang.String[][] HTML40_EXTENDED_UNESCAPE()",
            "org.apache.commons.lang3.text.translate.EntityArrays:java.lang.String[][] BASIC_ESCAPE()",
            "org.apache.commons.lang3.text.translate.EntityArrays:java.lang.String[][] BASIC_UNESCAPE()",
            "org.apache.commons.lang3.text.translate.EntityArrays:java.lang.String[][] APOS_ESCAPE()",
            "org.apache.commons.lang3.text.translate.EntityArrays:java.lang.String[][] APOS_UNESCAPE()",
            "org.apache.commons.lang3.text.translate.EntityArrays:java.lang.String[][] JAVA_CTRL_CHARS_ESCAPE()",
            "org.apache.commons.lang3.text.translate.EntityArrays:java.lang.String[][] JAVA_CTRL_CHARS_UNESCAPE()",
            "org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION:org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION[] values()",
            "org.apache.commons.lang3.time.StopWatch$SplitState:org.apache.commons.lang3.time.StopWatch$SplitState[] values()",
            "org.apache.commons.lang3.time.StopWatch$State:org.apache.commons.lang3.time.StopWatch$State[] values()"
        ]
    },
    "org.onlab.packet.EAPOL:byte[] serialize()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.BasePacket:java.lang.Object clone()",
            "org.onlab.packet.EAPOL:byte[] serialize()",
            "org.onlab.packet.Ethernet:byte[] serialize()",
            "org.onlab.packet.ICMP:byte[] serialize()",
            "org.onlab.packet.ICMP6:byte[] serialize()",
            "org.onlab.packet.IPv4:byte[] serialize()",
            "org.onlab.packet.IPv6:byte[] serialize()",
            "org.onlab.packet.MPLS:byte[] serialize()",
            "org.onlab.packet.PIM:byte[] serialize()",
            "org.onlab.packet.TCP:byte[] serialize()",
            "org.onlab.packet.UDP:byte[] serialize()",
            "org.onlab.packet.ipv6.Authentication:byte[] serialize()",
            "org.onlab.packet.ipv6.BaseOptions:byte[] serialize()",
            "org.onlab.packet.ipv6.EncapSecurityPayload:byte[] serialize()",
            "org.onlab.packet.ipv6.Fragment:byte[] serialize()",
            "org.onlab.packet.ipv6.Routing:byte[] serialize()"
        ]
    },
    "org.onlab.packet.Ethernet:byte[] serialize()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.BasePacket:java.lang.Object clone()",
            "org.onlab.packet.EAPOL:byte[] serialize()",
            "org.onlab.packet.Ethernet:byte[] serialize()",
            "org.onlab.packet.ICMP:byte[] serialize()",
            "org.onlab.packet.ICMP6:byte[] serialize()",
            "org.onlab.packet.IPv4:byte[] serialize()",
            "org.onlab.packet.IPv6:byte[] serialize()",
            "org.onlab.packet.MPLS:byte[] serialize()",
            "org.onlab.packet.PIM:byte[] serialize()",
            "org.onlab.packet.TCP:byte[] serialize()",
            "org.onlab.packet.UDP:byte[] serialize()",
            "org.onlab.packet.ipv6.Authentication:byte[] serialize()",
            "org.onlab.packet.ipv6.BaseOptions:byte[] serialize()",
            "org.onlab.packet.ipv6.EncapSecurityPayload:byte[] serialize()",
            "org.onlab.packet.ipv6.Fragment:byte[] serialize()",
            "org.onlab.packet.ipv6.Routing:byte[] serialize()"
        ]
    },
    "org.onlab.packet.ICMP:byte[] serialize()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.BasePacket:java.lang.Object clone()",
            "org.onlab.packet.EAPOL:byte[] serialize()",
            "org.onlab.packet.Ethernet:byte[] serialize()",
            "org.onlab.packet.ICMP:byte[] serialize()",
            "org.onlab.packet.ICMP6:byte[] serialize()",
            "org.onlab.packet.IPv4:byte[] serialize()",
            "org.onlab.packet.IPv6:byte[] serialize()",
            "org.onlab.packet.MPLS:byte[] serialize()",
            "org.onlab.packet.PIM:byte[] serialize()",
            "org.onlab.packet.TCP:byte[] serialize()",
            "org.onlab.packet.UDP:byte[] serialize()",
            "org.onlab.packet.ipv6.Authentication:byte[] serialize()",
            "org.onlab.packet.ipv6.BaseOptions:byte[] serialize()",
            "org.onlab.packet.ipv6.EncapSecurityPayload:byte[] serialize()",
            "org.onlab.packet.ipv6.Fragment:byte[] serialize()",
            "org.onlab.packet.ipv6.Routing:byte[] serialize()"
        ]
    },
    "org.onlab.packet.ICMP6:byte[] serialize()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.BasePacket:java.lang.Object clone()",
            "org.onlab.packet.EAPOL:byte[] serialize()",
            "org.onlab.packet.Ethernet:byte[] serialize()",
            "org.onlab.packet.ICMP:byte[] serialize()",
            "org.onlab.packet.ICMP6:byte[] serialize()",
            "org.onlab.packet.IPv4:byte[] serialize()",
            "org.onlab.packet.IPv6:byte[] serialize()",
            "org.onlab.packet.MPLS:byte[] serialize()",
            "org.onlab.packet.PIM:byte[] serialize()",
            "org.onlab.packet.TCP:byte[] serialize()",
            "org.onlab.packet.UDP:byte[] serialize()",
            "org.onlab.packet.ipv6.Authentication:byte[] serialize()",
            "org.onlab.packet.ipv6.BaseOptions:byte[] serialize()",
            "org.onlab.packet.ipv6.EncapSecurityPayload:byte[] serialize()",
            "org.onlab.packet.ipv6.Fragment:byte[] serialize()",
            "org.onlab.packet.ipv6.Routing:byte[] serialize()"
        ]
    },
    "org.onlab.packet.IPv4:byte[] serialize()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.BasePacket:java.lang.Object clone()",
            "org.onlab.packet.EAPOL:byte[] serialize()",
            "org.onlab.packet.Ethernet:byte[] serialize()",
            "org.onlab.packet.ICMP:byte[] serialize()",
            "org.onlab.packet.ICMP6:byte[] serialize()",
            "org.onlab.packet.IPv4:byte[] serialize()",
            "org.onlab.packet.IPv6:byte[] serialize()",
            "org.onlab.packet.MPLS:byte[] serialize()",
            "org.onlab.packet.PIM:byte[] serialize()",
            "org.onlab.packet.TCP:byte[] serialize()",
            "org.onlab.packet.UDP:byte[] serialize()",
            "org.onlab.packet.ipv6.Authentication:byte[] serialize()",
            "org.onlab.packet.ipv6.BaseOptions:byte[] serialize()",
            "org.onlab.packet.ipv6.EncapSecurityPayload:byte[] serialize()",
            "org.onlab.packet.ipv6.Fragment:byte[] serialize()",
            "org.onlab.packet.ipv6.Routing:byte[] serialize()"
        ]
    },
    "org.onlab.packet.IPv6:byte[] serialize()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.BasePacket:java.lang.Object clone()",
            "org.onlab.packet.EAPOL:byte[] serialize()",
            "org.onlab.packet.Ethernet:byte[] serialize()",
            "org.onlab.packet.ICMP:byte[] serialize()",
            "org.onlab.packet.ICMP6:byte[] serialize()",
            "org.onlab.packet.IPv4:byte[] serialize()",
            "org.onlab.packet.IPv6:byte[] serialize()",
            "org.onlab.packet.MPLS:byte[] serialize()",
            "org.onlab.packet.PIM:byte[] serialize()",
            "org.onlab.packet.TCP:byte[] serialize()",
            "org.onlab.packet.UDP:byte[] serialize()",
            "org.onlab.packet.ipv6.Authentication:byte[] serialize()",
            "org.onlab.packet.ipv6.BaseOptions:byte[] serialize()",
            "org.onlab.packet.ipv6.EncapSecurityPayload:byte[] serialize()",
            "org.onlab.packet.ipv6.Fragment:byte[] serialize()",
            "org.onlab.packet.ipv6.Routing:byte[] serialize()"
        ]
    },
    "org.onlab.packet.MPLS:byte[] serialize()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.BasePacket:java.lang.Object clone()",
            "org.onlab.packet.EAPOL:byte[] serialize()",
            "org.onlab.packet.Ethernet:byte[] serialize()",
            "org.onlab.packet.ICMP:byte[] serialize()",
            "org.onlab.packet.ICMP6:byte[] serialize()",
            "org.onlab.packet.IPv4:byte[] serialize()",
            "org.onlab.packet.IPv6:byte[] serialize()",
            "org.onlab.packet.MPLS:byte[] serialize()",
            "org.onlab.packet.PIM:byte[] serialize()",
            "org.onlab.packet.TCP:byte[] serialize()",
            "org.onlab.packet.UDP:byte[] serialize()",
            "org.onlab.packet.ipv6.Authentication:byte[] serialize()",
            "org.onlab.packet.ipv6.BaseOptions:byte[] serialize()",
            "org.onlab.packet.ipv6.EncapSecurityPayload:byte[] serialize()",
            "org.onlab.packet.ipv6.Fragment:byte[] serialize()",
            "org.onlab.packet.ipv6.Routing:byte[] serialize()"
        ]
    },
    "org.onlab.packet.PIM:byte[] serialize()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.BasePacket:java.lang.Object clone()",
            "org.onlab.packet.EAPOL:byte[] serialize()",
            "org.onlab.packet.Ethernet:byte[] serialize()",
            "org.onlab.packet.ICMP:byte[] serialize()",
            "org.onlab.packet.ICMP6:byte[] serialize()",
            "org.onlab.packet.IPv4:byte[] serialize()",
            "org.onlab.packet.IPv6:byte[] serialize()",
            "org.onlab.packet.MPLS:byte[] serialize()",
            "org.onlab.packet.PIM:byte[] serialize()",
            "org.onlab.packet.TCP:byte[] serialize()",
            "org.onlab.packet.UDP:byte[] serialize()",
            "org.onlab.packet.ipv6.Authentication:byte[] serialize()",
            "org.onlab.packet.ipv6.BaseOptions:byte[] serialize()",
            "org.onlab.packet.ipv6.EncapSecurityPayload:byte[] serialize()",
            "org.onlab.packet.ipv6.Fragment:byte[] serialize()",
            "org.onlab.packet.ipv6.Routing:byte[] serialize()"
        ]
    },
    "org.onlab.packet.TCP:byte[] serialize()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.BasePacket:java.lang.Object clone()",
            "org.onlab.packet.EAPOL:byte[] serialize()",
            "org.onlab.packet.Ethernet:byte[] serialize()",
            "org.onlab.packet.ICMP:byte[] serialize()",
            "org.onlab.packet.ICMP6:byte[] serialize()",
            "org.onlab.packet.IPv4:byte[] serialize()",
            "org.onlab.packet.IPv6:byte[] serialize()",
            "org.onlab.packet.MPLS:byte[] serialize()",
            "org.onlab.packet.PIM:byte[] serialize()",
            "org.onlab.packet.TCP:byte[] serialize()",
            "org.onlab.packet.UDP:byte[] serialize()",
            "org.onlab.packet.ipv6.Authentication:byte[] serialize()",
            "org.onlab.packet.ipv6.BaseOptions:byte[] serialize()",
            "org.onlab.packet.ipv6.EncapSecurityPayload:byte[] serialize()",
            "org.onlab.packet.ipv6.Fragment:byte[] serialize()",
            "org.onlab.packet.ipv6.Routing:byte[] serialize()"
        ]
    },
    "org.onlab.packet.UDP:byte[] serialize()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.BasePacket:java.lang.Object clone()",
            "org.onlab.packet.EAPOL:byte[] serialize()",
            "org.onlab.packet.Ethernet:byte[] serialize()",
            "org.onlab.packet.ICMP:byte[] serialize()",
            "org.onlab.packet.ICMP6:byte[] serialize()",
            "org.onlab.packet.IPv4:byte[] serialize()",
            "org.onlab.packet.IPv6:byte[] serialize()",
            "org.onlab.packet.MPLS:byte[] serialize()",
            "org.onlab.packet.PIM:byte[] serialize()",
            "org.onlab.packet.TCP:byte[] serialize()",
            "org.onlab.packet.UDP:byte[] serialize()",
            "org.onlab.packet.ipv6.Authentication:byte[] serialize()",
            "org.onlab.packet.ipv6.BaseOptions:byte[] serialize()",
            "org.onlab.packet.ipv6.EncapSecurityPayload:byte[] serialize()",
            "org.onlab.packet.ipv6.Fragment:byte[] serialize()",
            "org.onlab.packet.ipv6.Routing:byte[] serialize()"
        ]
    },
    "org.onlab.packet.ipv6.Authentication:byte[] serialize()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.BasePacket:java.lang.Object clone()",
            "org.onlab.packet.EAPOL:byte[] serialize()",
            "org.onlab.packet.Ethernet:byte[] serialize()",
            "org.onlab.packet.ICMP:byte[] serialize()",
            "org.onlab.packet.ICMP6:byte[] serialize()",
            "org.onlab.packet.IPv4:byte[] serialize()",
            "org.onlab.packet.IPv6:byte[] serialize()",
            "org.onlab.packet.MPLS:byte[] serialize()",
            "org.onlab.packet.PIM:byte[] serialize()",
            "org.onlab.packet.TCP:byte[] serialize()",
            "org.onlab.packet.UDP:byte[] serialize()",
            "org.onlab.packet.ipv6.Authentication:byte[] serialize()",
            "org.onlab.packet.ipv6.BaseOptions:byte[] serialize()",
            "org.onlab.packet.ipv6.EncapSecurityPayload:byte[] serialize()",
            "org.onlab.packet.ipv6.Fragment:byte[] serialize()",
            "org.onlab.packet.ipv6.Routing:byte[] serialize()"
        ]
    },
    "org.onlab.packet.ipv6.BaseOptions:byte[] serialize()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.BasePacket:java.lang.Object clone()",
            "org.onlab.packet.EAPOL:byte[] serialize()",
            "org.onlab.packet.Ethernet:byte[] serialize()",
            "org.onlab.packet.ICMP:byte[] serialize()",
            "org.onlab.packet.ICMP6:byte[] serialize()",
            "org.onlab.packet.IPv4:byte[] serialize()",
            "org.onlab.packet.IPv6:byte[] serialize()",
            "org.onlab.packet.MPLS:byte[] serialize()",
            "org.onlab.packet.PIM:byte[] serialize()",
            "org.onlab.packet.TCP:byte[] serialize()",
            "org.onlab.packet.UDP:byte[] serialize()",
            "org.onlab.packet.ipv6.Authentication:byte[] serialize()",
            "org.onlab.packet.ipv6.BaseOptions:byte[] serialize()",
            "org.onlab.packet.ipv6.EncapSecurityPayload:byte[] serialize()",
            "org.onlab.packet.ipv6.Fragment:byte[] serialize()",
            "org.onlab.packet.ipv6.Routing:byte[] serialize()"
        ]
    },
    "org.onlab.packet.ipv6.EncapSecurityPayload:byte[] serialize()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.BasePacket:java.lang.Object clone()",
            "org.onlab.packet.EAPOL:byte[] serialize()",
            "org.onlab.packet.Ethernet:byte[] serialize()",
            "org.onlab.packet.ICMP:byte[] serialize()",
            "org.onlab.packet.ICMP6:byte[] serialize()",
            "org.onlab.packet.IPv4:byte[] serialize()",
            "org.onlab.packet.IPv6:byte[] serialize()",
            "org.onlab.packet.MPLS:byte[] serialize()",
            "org.onlab.packet.PIM:byte[] serialize()",
            "org.onlab.packet.TCP:byte[] serialize()",
            "org.onlab.packet.UDP:byte[] serialize()",
            "org.onlab.packet.ipv6.Authentication:byte[] serialize()",
            "org.onlab.packet.ipv6.BaseOptions:byte[] serialize()",
            "org.onlab.packet.ipv6.EncapSecurityPayload:byte[] serialize()",
            "org.onlab.packet.ipv6.Fragment:byte[] serialize()",
            "org.onlab.packet.ipv6.Routing:byte[] serialize()"
        ]
    },
    "org.onlab.packet.ipv6.Fragment:byte[] serialize()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.BasePacket:java.lang.Object clone()",
            "org.onlab.packet.EAPOL:byte[] serialize()",
            "org.onlab.packet.Ethernet:byte[] serialize()",
            "org.onlab.packet.ICMP:byte[] serialize()",
            "org.onlab.packet.ICMP6:byte[] serialize()",
            "org.onlab.packet.IPv4:byte[] serialize()",
            "org.onlab.packet.IPv6:byte[] serialize()",
            "org.onlab.packet.MPLS:byte[] serialize()",
            "org.onlab.packet.PIM:byte[] serialize()",
            "org.onlab.packet.TCP:byte[] serialize()",
            "org.onlab.packet.UDP:byte[] serialize()",
            "org.onlab.packet.ipv6.Authentication:byte[] serialize()",
            "org.onlab.packet.ipv6.BaseOptions:byte[] serialize()",
            "org.onlab.packet.ipv6.EncapSecurityPayload:byte[] serialize()",
            "org.onlab.packet.ipv6.Fragment:byte[] serialize()",
            "org.onlab.packet.ipv6.Routing:byte[] serialize()"
        ]
    },
    "org.onlab.packet.ipv6.Routing:byte[] serialize()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.BasePacket:java.lang.Object clone()",
            "org.onlab.packet.EAPOL:byte[] serialize()",
            "org.onlab.packet.Ethernet:byte[] serialize()",
            "org.onlab.packet.ICMP:byte[] serialize()",
            "org.onlab.packet.ICMP6:byte[] serialize()",
            "org.onlab.packet.IPv4:byte[] serialize()",
            "org.onlab.packet.IPv6:byte[] serialize()",
            "org.onlab.packet.MPLS:byte[] serialize()",
            "org.onlab.packet.PIM:byte[] serialize()",
            "org.onlab.packet.TCP:byte[] serialize()",
            "org.onlab.packet.UDP:byte[] serialize()",
            "org.onlab.packet.ipv6.Authentication:byte[] serialize()",
            "org.onlab.packet.ipv6.BaseOptions:byte[] serialize()",
            "org.onlab.packet.ipv6.EncapSecurityPayload:byte[] serialize()",
            "org.onlab.packet.ipv6.Fragment:byte[] serialize()",
            "org.onlab.packet.ipv6.Routing:byte[] serialize()"
        ]
    },
    "org.onlab.packet.ONOSLLDP:java.lang.String getNameString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.ONOSLLDP:org.onlab.packet.ONOSLLDP parseONOSLLDP(org.onlab.packet.Ethernet)"
        ]
    },
    "org.onlab.packet.ONOSLLDP:java.lang.String getDeviceString()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.packet.ndp.NeighborAdvertisement$lambda_deserializer_1__70:org.onlab.packet.IPacket deserialize(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.EAPOL:org.onlab.packet.EAPOL lambda$deserializer$53(byte[],int,int)",
            "org.onlab.packet.Ethernet:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.Ethernet:org.onlab.packet.Ethernet lambda$deserializer$10(byte[],int,int)",
            "org.onlab.packet.ICMP:org.onlab.packet.ICMP lambda$deserializer$29(byte[],int,int)",
            "org.onlab.packet.ICMP6:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ICMP6:org.onlab.packet.ICMP6 lambda$deserializer$40(byte[],int,int)",
            "org.onlab.packet.IGMP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IPv4:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IPv4:org.onlab.packet.IPv4 lambda$deserializer$24(byte[],int,int)",
            "org.onlab.packet.IPv6:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IPv6:org.onlab.packet.IPv6 lambda$deserializer$48(byte[],int,int)",
            "org.onlab.packet.MPLS:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.MPLS:org.onlab.packet.MPLS lambda$deserializer$12(byte[],int,int)",
            "org.onlab.packet.PIM:org.onlab.packet.PIM lambda$deserializer$49(byte[],int,int)",
            "org.onlab.packet.TCP:org.onlab.packet.TCP lambda$deserializer$39(byte[],int,int)",
            "org.onlab.packet.UDP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.UDP:org.onlab.packet.UDP lambda$deserializer$45(byte[],int,int)",
            "org.onlab.packet.ipv6.Authentication:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Authentication:org.onlab.packet.ipv6.Authentication lambda$deserializer$46(byte[],int,int)",
            "org.onlab.packet.ipv6.BaseOptions:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.BaseOptions:org.onlab.packet.ipv6.BaseOptions lambda$deserializer$13(byte[],int,int)",
            "org.onlab.packet.ipv6.EncapSecurityPayload:org.onlab.packet.ipv6.EncapSecurityPayload lambda$deserializer$51(byte[],int,int)",
            "org.onlab.packet.ipv6.Fragment:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Fragment:org.onlab.packet.ipv6.Fragment lambda$deserializer$26(byte[],int,int)",
            "org.onlab.packet.ipv6.Routing:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Routing:org.onlab.packet.ipv6.Routing lambda$deserializer$50(byte[],int,int)",
            "org.onlab.packet.ndp.NeighborAdvertisement:org.onlab.packet.ndp.NeighborAdvertisement lambda$deserializer$1(byte[],int,int)",
            "org.onlab.packet.ndp.NeighborSolicitation:org.onlab.packet.ndp.NeighborSolicitation lambda$deserializer$42(byte[],int,int)",
            "org.onlab.packet.ndp.Redirect:org.onlab.packet.ndp.Redirect lambda$deserializer$47(byte[],int,int)",
            "org.onlab.packet.ndp.RouterAdvertisement:org.onlab.packet.ndp.RouterAdvertisement lambda$deserializer$41(byte[],int,int)",
            "org.onlab.packet.ndp.RouterSolicitation:org.onlab.packet.ndp.RouterSolicitation lambda$deserializer$44(byte[],int,int)"
        ]
    },
    "org.onlab.packet.ndp.NeighborAdvertisement:byte[] serialize()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.BasePacket:java.lang.Object clone()",
            "org.onlab.packet.EAPOL:byte[] serialize()",
            "org.onlab.packet.Ethernet:byte[] serialize()",
            "org.onlab.packet.ICMP:byte[] serialize()",
            "org.onlab.packet.ICMP6:byte[] serialize()",
            "org.onlab.packet.IPv4:byte[] serialize()",
            "org.onlab.packet.IPv6:byte[] serialize()",
            "org.onlab.packet.MPLS:byte[] serialize()",
            "org.onlab.packet.PIM:byte[] serialize()",
            "org.onlab.packet.TCP:byte[] serialize()",
            "org.onlab.packet.UDP:byte[] serialize()",
            "org.onlab.packet.ipv6.Authentication:byte[] serialize()",
            "org.onlab.packet.ipv6.BaseOptions:byte[] serialize()",
            "org.onlab.packet.ipv6.EncapSecurityPayload:byte[] serialize()",
            "org.onlab.packet.ipv6.Fragment:byte[] serialize()",
            "org.onlab.packet.ipv6.Routing:byte[] serialize()"
        ]
    },
    "org.onlab.packet.ndp.NeighborSolicitation:byte[] serialize()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.BasePacket:java.lang.Object clone()",
            "org.onlab.packet.EAPOL:byte[] serialize()",
            "org.onlab.packet.Ethernet:byte[] serialize()",
            "org.onlab.packet.ICMP:byte[] serialize()",
            "org.onlab.packet.ICMP6:byte[] serialize()",
            "org.onlab.packet.IPv4:byte[] serialize()",
            "org.onlab.packet.IPv6:byte[] serialize()",
            "org.onlab.packet.MPLS:byte[] serialize()",
            "org.onlab.packet.PIM:byte[] serialize()",
            "org.onlab.packet.TCP:byte[] serialize()",
            "org.onlab.packet.UDP:byte[] serialize()",
            "org.onlab.packet.ipv6.Authentication:byte[] serialize()",
            "org.onlab.packet.ipv6.BaseOptions:byte[] serialize()",
            "org.onlab.packet.ipv6.EncapSecurityPayload:byte[] serialize()",
            "org.onlab.packet.ipv6.Fragment:byte[] serialize()",
            "org.onlab.packet.ipv6.Routing:byte[] serialize()"
        ]
    },
    "org.onlab.packet.ndp.Redirect:byte[] serialize()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.BasePacket:java.lang.Object clone()",
            "org.onlab.packet.EAPOL:byte[] serialize()",
            "org.onlab.packet.Ethernet:byte[] serialize()",
            "org.onlab.packet.ICMP:byte[] serialize()",
            "org.onlab.packet.ICMP6:byte[] serialize()",
            "org.onlab.packet.IPv4:byte[] serialize()",
            "org.onlab.packet.IPv6:byte[] serialize()",
            "org.onlab.packet.MPLS:byte[] serialize()",
            "org.onlab.packet.PIM:byte[] serialize()",
            "org.onlab.packet.TCP:byte[] serialize()",
            "org.onlab.packet.UDP:byte[] serialize()",
            "org.onlab.packet.ipv6.Authentication:byte[] serialize()",
            "org.onlab.packet.ipv6.BaseOptions:byte[] serialize()",
            "org.onlab.packet.ipv6.EncapSecurityPayload:byte[] serialize()",
            "org.onlab.packet.ipv6.Fragment:byte[] serialize()",
            "org.onlab.packet.ipv6.Routing:byte[] serialize()"
        ]
    },
    "org.onlab.packet.ndp.RouterAdvertisement:byte[] serialize()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.BasePacket:java.lang.Object clone()",
            "org.onlab.packet.EAPOL:byte[] serialize()",
            "org.onlab.packet.Ethernet:byte[] serialize()",
            "org.onlab.packet.ICMP:byte[] serialize()",
            "org.onlab.packet.ICMP6:byte[] serialize()",
            "org.onlab.packet.IPv4:byte[] serialize()",
            "org.onlab.packet.IPv6:byte[] serialize()",
            "org.onlab.packet.MPLS:byte[] serialize()",
            "org.onlab.packet.PIM:byte[] serialize()",
            "org.onlab.packet.TCP:byte[] serialize()",
            "org.onlab.packet.UDP:byte[] serialize()",
            "org.onlab.packet.ipv6.Authentication:byte[] serialize()",
            "org.onlab.packet.ipv6.BaseOptions:byte[] serialize()",
            "org.onlab.packet.ipv6.EncapSecurityPayload:byte[] serialize()",
            "org.onlab.packet.ipv6.Fragment:byte[] serialize()",
            "org.onlab.packet.ipv6.Routing:byte[] serialize()"
        ]
    },
    "org.onlab.packet.ndp.RouterSolicitation:byte[] serialize()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.BasePacket:java.lang.Object clone()",
            "org.onlab.packet.EAPOL:byte[] serialize()",
            "org.onlab.packet.Ethernet:byte[] serialize()",
            "org.onlab.packet.ICMP:byte[] serialize()",
            "org.onlab.packet.ICMP6:byte[] serialize()",
            "org.onlab.packet.IPv4:byte[] serialize()",
            "org.onlab.packet.IPv6:byte[] serialize()",
            "org.onlab.packet.MPLS:byte[] serialize()",
            "org.onlab.packet.PIM:byte[] serialize()",
            "org.onlab.packet.TCP:byte[] serialize()",
            "org.onlab.packet.UDP:byte[] serialize()",
            "org.onlab.packet.ipv6.Authentication:byte[] serialize()",
            "org.onlab.packet.ipv6.BaseOptions:byte[] serialize()",
            "org.onlab.packet.ipv6.EncapSecurityPayload:byte[] serialize()",
            "org.onlab.packet.ipv6.Fragment:byte[] serialize()",
            "org.onlab.packet.ipv6.Routing:byte[] serialize()"
        ]
    },
    "org.onlab.packet.BasePacket:int hashCode()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.ARP:int hashCode()",
            "org.onlab.packet.BasePacket:int hashCode()",
            "org.onlab.packet.Data:int hashCode()",
            "org.onlab.packet.EAP:int hashCode()",
            "org.onlab.packet.EAPOL:int hashCode()",
            "org.onlab.packet.Ethernet:int hashCode()",
            "org.onlab.packet.ICMP:int hashCode()",
            "org.onlab.packet.ICMP6:int hashCode()",
            "org.onlab.packet.IGMP:int hashCode()",
            "org.onlab.packet.IPv4:int hashCode()",
            "org.onlab.packet.IPv6:int hashCode()",
            "org.onlab.packet.LLDP:int hashCode()",
            "org.onlab.packet.PIM:int hashCode()",
            "org.onlab.packet.TCP:int hashCode()",
            "org.onlab.packet.UDP:int hashCode()",
            "org.onlab.packet.ipv6.Authentication:int hashCode()",
            "org.onlab.packet.ipv6.BaseOptions:int hashCode()",
            "org.onlab.packet.ipv6.EncapSecurityPayload:int hashCode()",
            "org.onlab.packet.ipv6.Fragment:int hashCode()",
            "org.onlab.packet.ipv6.Routing:int hashCode()",
            "org.onlab.packet.ndp.NeighborAdvertisement:int hashCode()",
            "org.onlab.packet.ndp.NeighborSolicitation:int hashCode()",
            "org.onlab.packet.ndp.Redirect:int hashCode()",
            "org.onlab.packet.ndp.RouterAdvertisement:int hashCode()",
            "org.onlab.packet.ndp.RouterSolicitation:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentHashMap:int hashOf(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap:int hashOf(java.lang.Object)",
            "org.apache.commons.lang.builder.HashCodeBuilder:org.apache.commons.lang.builder.HashCodeBuilder append(java.lang.Object)",
            "org.apache.commons.lang.mutable.MutableObject:int hashCode()",
            "org.apache.commons.lang.ObjectUtils:int hashCode(java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:int hashCode()",
            "org.apache.commons.lang.time.FastDateFormat$Pair:int hashCode()",
            "org.apache.commons.lang3.AnnotationUtils:int hashMember(java.lang.String,java.lang.Object)",
            "org.apache.commons.lang3.builder.HashCodeBuilder:org.apache.commons.lang3.builder.HashCodeBuilder append(java.lang.Object)",
            "org.apache.commons.lang3.concurrent.ConstantInitializer:int hashCode()",
            "org.apache.commons.lang3.mutable.MutableObject:int hashCode()",
            "org.apache.commons.lang3.ObjectUtils:int hashCode(java.lang.Object)",
            "org.apache.commons.lang3.Range:int hashCode()",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:int hashCode()",
            "org.apache.commons.lang3.time.FormatCache$MultipartKey:int hashCode()",
            "org.apache.commons.lang3.tuple.Pair:int hashCode()",
            "org.apache.commons.lang3.tuple.Triple:int hashCode()",
            "org.objectweb.asm.ClassReader:void a(org.objectweb.asm.ClassWriter,org.objectweb.asm.Item[],char[])",
            "org.objectweb.asm.ClassWriter:org.objectweb.asm.Item a(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[])",
            "com.eclipsesource.json.JsonObject$HashIndexTable:int hashSlotFor(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object put_internal(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void putResize(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void push(java.lang.Object,java.lang.Object,int,java.lang.Object,int,java.lang.Object,int,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object remove(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsKey(java.lang.Object)"
        ]
    },
    "org.onlab.packet.ndp.NeighborAdvertisement:int hashCode()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.BasePacket:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentHashMap:int hashOf(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap:int hashOf(java.lang.Object)",
            "org.apache.commons.lang.builder.HashCodeBuilder:org.apache.commons.lang.builder.HashCodeBuilder append(java.lang.Object)",
            "org.apache.commons.lang.mutable.MutableObject:int hashCode()",
            "org.apache.commons.lang.ObjectUtils:int hashCode(java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:int hashCode()",
            "org.apache.commons.lang.time.FastDateFormat$Pair:int hashCode()",
            "org.apache.commons.lang3.AnnotationUtils:int hashMember(java.lang.String,java.lang.Object)",
            "org.apache.commons.lang3.builder.HashCodeBuilder:org.apache.commons.lang3.builder.HashCodeBuilder append(java.lang.Object)",
            "org.apache.commons.lang3.concurrent.ConstantInitializer:int hashCode()",
            "org.apache.commons.lang3.mutable.MutableObject:int hashCode()",
            "org.apache.commons.lang3.ObjectUtils:int hashCode(java.lang.Object)",
            "org.apache.commons.lang3.Range:int hashCode()",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:int hashCode()",
            "org.apache.commons.lang3.time.FormatCache$MultipartKey:int hashCode()",
            "org.apache.commons.lang3.tuple.Pair:int hashCode()",
            "org.apache.commons.lang3.tuple.Triple:int hashCode()",
            "org.objectweb.asm.ClassReader:void a(org.objectweb.asm.ClassWriter,org.objectweb.asm.Item[],char[])",
            "org.objectweb.asm.ClassWriter:org.objectweb.asm.Item a(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[])",
            "com.eclipsesource.json.JsonObject$HashIndexTable:int hashSlotFor(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object put_internal(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void putResize(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void push(java.lang.Object,java.lang.Object,int,java.lang.Object,int,java.lang.Object,int,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object remove(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsKey(java.lang.Object)"
        ]
    },
    "org.onlab.packet.ndp.NeighborSolicitation:int hashCode()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.BasePacket:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentHashMap:int hashOf(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap:int hashOf(java.lang.Object)",
            "org.apache.commons.lang.builder.HashCodeBuilder:org.apache.commons.lang.builder.HashCodeBuilder append(java.lang.Object)",
            "org.apache.commons.lang.mutable.MutableObject:int hashCode()",
            "org.apache.commons.lang.ObjectUtils:int hashCode(java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:int hashCode()",
            "org.apache.commons.lang.time.FastDateFormat$Pair:int hashCode()",
            "org.apache.commons.lang3.AnnotationUtils:int hashMember(java.lang.String,java.lang.Object)",
            "org.apache.commons.lang3.builder.HashCodeBuilder:org.apache.commons.lang3.builder.HashCodeBuilder append(java.lang.Object)",
            "org.apache.commons.lang3.concurrent.ConstantInitializer:int hashCode()",
            "org.apache.commons.lang3.mutable.MutableObject:int hashCode()",
            "org.apache.commons.lang3.ObjectUtils:int hashCode(java.lang.Object)",
            "org.apache.commons.lang3.Range:int hashCode()",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:int hashCode()",
            "org.apache.commons.lang3.time.FormatCache$MultipartKey:int hashCode()",
            "org.apache.commons.lang3.tuple.Pair:int hashCode()",
            "org.apache.commons.lang3.tuple.Triple:int hashCode()",
            "org.objectweb.asm.ClassReader:void a(org.objectweb.asm.ClassWriter,org.objectweb.asm.Item[],char[])",
            "org.objectweb.asm.ClassWriter:org.objectweb.asm.Item a(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[])",
            "com.eclipsesource.json.JsonObject$HashIndexTable:int hashSlotFor(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object put_internal(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void putResize(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void push(java.lang.Object,java.lang.Object,int,java.lang.Object,int,java.lang.Object,int,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object remove(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsKey(java.lang.Object)"
        ]
    },
    "org.onlab.packet.ndp.Redirect:int hashCode()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.BasePacket:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentHashMap:int hashOf(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap:int hashOf(java.lang.Object)",
            "org.apache.commons.lang.builder.HashCodeBuilder:org.apache.commons.lang.builder.HashCodeBuilder append(java.lang.Object)",
            "org.apache.commons.lang.mutable.MutableObject:int hashCode()",
            "org.apache.commons.lang.ObjectUtils:int hashCode(java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:int hashCode()",
            "org.apache.commons.lang.time.FastDateFormat$Pair:int hashCode()",
            "org.apache.commons.lang3.AnnotationUtils:int hashMember(java.lang.String,java.lang.Object)",
            "org.apache.commons.lang3.builder.HashCodeBuilder:org.apache.commons.lang3.builder.HashCodeBuilder append(java.lang.Object)",
            "org.apache.commons.lang3.concurrent.ConstantInitializer:int hashCode()",
            "org.apache.commons.lang3.mutable.MutableObject:int hashCode()",
            "org.apache.commons.lang3.ObjectUtils:int hashCode(java.lang.Object)",
            "org.apache.commons.lang3.Range:int hashCode()",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:int hashCode()",
            "org.apache.commons.lang3.time.FormatCache$MultipartKey:int hashCode()",
            "org.apache.commons.lang3.tuple.Pair:int hashCode()",
            "org.apache.commons.lang3.tuple.Triple:int hashCode()",
            "org.objectweb.asm.ClassReader:void a(org.objectweb.asm.ClassWriter,org.objectweb.asm.Item[],char[])",
            "org.objectweb.asm.ClassWriter:org.objectweb.asm.Item a(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[])",
            "com.eclipsesource.json.JsonObject$HashIndexTable:int hashSlotFor(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object put_internal(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void putResize(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void push(java.lang.Object,java.lang.Object,int,java.lang.Object,int,java.lang.Object,int,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object remove(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsKey(java.lang.Object)"
        ]
    },
    "org.onlab.packet.ndp.RouterAdvertisement:int hashCode()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.BasePacket:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentHashMap:int hashOf(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap:int hashOf(java.lang.Object)",
            "org.apache.commons.lang.builder.HashCodeBuilder:org.apache.commons.lang.builder.HashCodeBuilder append(java.lang.Object)",
            "org.apache.commons.lang.mutable.MutableObject:int hashCode()",
            "org.apache.commons.lang.ObjectUtils:int hashCode(java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:int hashCode()",
            "org.apache.commons.lang.time.FastDateFormat$Pair:int hashCode()",
            "org.apache.commons.lang3.AnnotationUtils:int hashMember(java.lang.String,java.lang.Object)",
            "org.apache.commons.lang3.builder.HashCodeBuilder:org.apache.commons.lang3.builder.HashCodeBuilder append(java.lang.Object)",
            "org.apache.commons.lang3.concurrent.ConstantInitializer:int hashCode()",
            "org.apache.commons.lang3.mutable.MutableObject:int hashCode()",
            "org.apache.commons.lang3.ObjectUtils:int hashCode(java.lang.Object)",
            "org.apache.commons.lang3.Range:int hashCode()",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:int hashCode()",
            "org.apache.commons.lang3.time.FormatCache$MultipartKey:int hashCode()",
            "org.apache.commons.lang3.tuple.Pair:int hashCode()",
            "org.apache.commons.lang3.tuple.Triple:int hashCode()",
            "org.objectweb.asm.ClassReader:void a(org.objectweb.asm.ClassWriter,org.objectweb.asm.Item[],char[])",
            "org.objectweb.asm.ClassWriter:org.objectweb.asm.Item a(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[])",
            "com.eclipsesource.json.JsonObject$HashIndexTable:int hashSlotFor(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object put_internal(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void putResize(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void push(java.lang.Object,java.lang.Object,int,java.lang.Object,int,java.lang.Object,int,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object remove(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsKey(java.lang.Object)"
        ]
    },
    "org.onlab.packet.ndp.RouterSolicitation:int hashCode()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.BasePacket:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentHashMap:int hashOf(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap:int hashOf(java.lang.Object)",
            "org.apache.commons.lang.builder.HashCodeBuilder:org.apache.commons.lang.builder.HashCodeBuilder append(java.lang.Object)",
            "org.apache.commons.lang.mutable.MutableObject:int hashCode()",
            "org.apache.commons.lang.ObjectUtils:int hashCode(java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:int hashCode()",
            "org.apache.commons.lang.time.FastDateFormat$Pair:int hashCode()",
            "org.apache.commons.lang3.AnnotationUtils:int hashMember(java.lang.String,java.lang.Object)",
            "org.apache.commons.lang3.builder.HashCodeBuilder:org.apache.commons.lang3.builder.HashCodeBuilder append(java.lang.Object)",
            "org.apache.commons.lang3.concurrent.ConstantInitializer:int hashCode()",
            "org.apache.commons.lang3.mutable.MutableObject:int hashCode()",
            "org.apache.commons.lang3.ObjectUtils:int hashCode(java.lang.Object)",
            "org.apache.commons.lang3.Range:int hashCode()",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:int hashCode()",
            "org.apache.commons.lang3.time.FormatCache$MultipartKey:int hashCode()",
            "org.apache.commons.lang3.tuple.Pair:int hashCode()",
            "org.apache.commons.lang3.tuple.Triple:int hashCode()",
            "org.objectweb.asm.ClassReader:void a(org.objectweb.asm.ClassWriter,org.objectweb.asm.Item[],char[])",
            "org.objectweb.asm.ClassWriter:org.objectweb.asm.Item a(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[])",
            "com.eclipsesource.json.JsonObject$HashIndexTable:int hashSlotFor(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object put_internal(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void putResize(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void push(java.lang.Object,java.lang.Object,int,java.lang.Object,int,java.lang.Object,int,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object remove(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsKey(java.lang.Object)"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentHashMap$SimpleEntry:int hashCode()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.ConcurrentHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentHashMap:int hashOf(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap:int hashOf(java.lang.Object)",
            "org.apache.commons.lang.builder.HashCodeBuilder:org.apache.commons.lang.builder.HashCodeBuilder append(java.lang.Object)",
            "org.apache.commons.lang.mutable.MutableObject:int hashCode()",
            "org.apache.commons.lang.ObjectUtils:int hashCode(java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:int hashCode()",
            "org.apache.commons.lang.time.FastDateFormat$Pair:int hashCode()",
            "org.apache.commons.lang3.AnnotationUtils:int hashMember(java.lang.String,java.lang.Object)",
            "org.apache.commons.lang3.builder.HashCodeBuilder:org.apache.commons.lang3.builder.HashCodeBuilder append(java.lang.Object)",
            "org.apache.commons.lang3.concurrent.ConstantInitializer:int hashCode()",
            "org.apache.commons.lang3.mutable.MutableObject:int hashCode()",
            "org.apache.commons.lang3.ObjectUtils:int hashCode(java.lang.Object)",
            "org.apache.commons.lang3.Range:int hashCode()",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:int hashCode()",
            "org.apache.commons.lang3.time.FormatCache$MultipartKey:int hashCode()",
            "org.apache.commons.lang3.tuple.Pair:int hashCode()",
            "org.apache.commons.lang3.tuple.Triple:int hashCode()",
            "org.objectweb.asm.ClassReader:void a(org.objectweb.asm.ClassWriter,org.objectweb.asm.Item[],char[])",
            "org.objectweb.asm.ClassWriter:org.objectweb.asm.Item a(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[])",
            "com.eclipsesource.json.JsonObject$HashIndexTable:int hashSlotFor(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object put_internal(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void putResize(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void push(java.lang.Object,java.lang.Object,int,java.lang.Object,int,java.lang.Object,int,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object remove(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsKey(java.lang.Object)"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentHashMap:int hashOf(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.ConcurrentHashMap:java.lang.Object get(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentHashMap:boolean containsKey(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentHashMap:java.lang.Object put(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentHashMap:java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentHashMap:java.lang.Object remove(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentHashMap:boolean remove(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentHashMap:boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentHashMap:java.lang.Object replace(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$SimpleEntry:int hashCode()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.ConcurrentHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentHashMap:int hashOf(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap:int hashOf(java.lang.Object)",
            "org.apache.commons.lang.builder.HashCodeBuilder:org.apache.commons.lang.builder.HashCodeBuilder append(java.lang.Object)",
            "org.apache.commons.lang.mutable.MutableObject:int hashCode()",
            "org.apache.commons.lang.ObjectUtils:int hashCode(java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:int hashCode()",
            "org.apache.commons.lang.time.FastDateFormat$Pair:int hashCode()",
            "org.apache.commons.lang3.AnnotationUtils:int hashMember(java.lang.String,java.lang.Object)",
            "org.apache.commons.lang3.builder.HashCodeBuilder:org.apache.commons.lang3.builder.HashCodeBuilder append(java.lang.Object)",
            "org.apache.commons.lang3.concurrent.ConstantInitializer:int hashCode()",
            "org.apache.commons.lang3.mutable.MutableObject:int hashCode()",
            "org.apache.commons.lang3.ObjectUtils:int hashCode(java.lang.Object)",
            "org.apache.commons.lang3.Range:int hashCode()",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:int hashCode()",
            "org.apache.commons.lang3.time.FormatCache$MultipartKey:int hashCode()",
            "org.apache.commons.lang3.tuple.Pair:int hashCode()",
            "org.apache.commons.lang3.tuple.Triple:int hashCode()",
            "org.objectweb.asm.ClassReader:void a(org.objectweb.asm.ClassWriter,org.objectweb.asm.Item[],char[])",
            "org.objectweb.asm.ClassWriter:org.objectweb.asm.Item a(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[])",
            "com.eclipsesource.json.JsonObject$HashIndexTable:int hashSlotFor(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object put_internal(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void putResize(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void push(java.lang.Object,java.lang.Object,int,java.lang.Object,int,java.lang.Object,int,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object remove(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsKey(java.lang.Object)"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$SimpleEntry:int hashCode()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.ConcurrentHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentHashMap:int hashOf(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap:int hashOf(java.lang.Object)",
            "org.apache.commons.lang.builder.HashCodeBuilder:org.apache.commons.lang.builder.HashCodeBuilder append(java.lang.Object)",
            "org.apache.commons.lang.mutable.MutableObject:int hashCode()",
            "org.apache.commons.lang.ObjectUtils:int hashCode(java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:int hashCode()",
            "org.apache.commons.lang.time.FastDateFormat$Pair:int hashCode()",
            "org.apache.commons.lang3.AnnotationUtils:int hashMember(java.lang.String,java.lang.Object)",
            "org.apache.commons.lang3.builder.HashCodeBuilder:org.apache.commons.lang3.builder.HashCodeBuilder append(java.lang.Object)",
            "org.apache.commons.lang3.concurrent.ConstantInitializer:int hashCode()",
            "org.apache.commons.lang3.mutable.MutableObject:int hashCode()",
            "org.apache.commons.lang3.ObjectUtils:int hashCode(java.lang.Object)",
            "org.apache.commons.lang3.Range:int hashCode()",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:int hashCode()",
            "org.apache.commons.lang3.time.FormatCache$MultipartKey:int hashCode()",
            "org.apache.commons.lang3.tuple.Pair:int hashCode()",
            "org.apache.commons.lang3.tuple.Triple:int hashCode()",
            "org.objectweb.asm.ClassReader:void a(org.objectweb.asm.ClassWriter,org.objectweb.asm.Item[],char[])",
            "org.objectweb.asm.ClassWriter:org.objectweb.asm.Item a(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[])",
            "com.eclipsesource.json.JsonObject$HashIndexTable:int hashSlotFor(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object put_internal(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void putResize(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void push(java.lang.Object,java.lang.Object,int,java.lang.Object,int,java.lang.Object,int,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object remove(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsKey(java.lang.Object)"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$SimpleEntry:int hashCode()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.ConcurrentHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentHashMap:int hashOf(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap:int hashOf(java.lang.Object)",
            "org.apache.commons.lang.builder.HashCodeBuilder:org.apache.commons.lang.builder.HashCodeBuilder append(java.lang.Object)",
            "org.apache.commons.lang.mutable.MutableObject:int hashCode()",
            "org.apache.commons.lang.ObjectUtils:int hashCode(java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:int hashCode()",
            "org.apache.commons.lang.time.FastDateFormat$Pair:int hashCode()",
            "org.apache.commons.lang3.AnnotationUtils:int hashMember(java.lang.String,java.lang.Object)",
            "org.apache.commons.lang3.builder.HashCodeBuilder:org.apache.commons.lang3.builder.HashCodeBuilder append(java.lang.Object)",
            "org.apache.commons.lang3.concurrent.ConstantInitializer:int hashCode()",
            "org.apache.commons.lang3.mutable.MutableObject:int hashCode()",
            "org.apache.commons.lang3.ObjectUtils:int hashCode(java.lang.Object)",
            "org.apache.commons.lang3.Range:int hashCode()",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:int hashCode()",
            "org.apache.commons.lang3.time.FormatCache$MultipartKey:int hashCode()",
            "org.apache.commons.lang3.tuple.Pair:int hashCode()",
            "org.apache.commons.lang3.tuple.Triple:int hashCode()",
            "org.objectweb.asm.ClassReader:void a(org.objectweb.asm.ClassWriter,org.objectweb.asm.Item[],char[])",
            "org.objectweb.asm.ClassWriter:org.objectweb.asm.Item a(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[])",
            "com.eclipsesource.json.JsonObject$HashIndexTable:int hashSlotFor(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object put_internal(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void putResize(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void push(java.lang.Object,java.lang.Object,int,java.lang.Object,int,java.lang.Object,int,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object remove(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsKey(java.lang.Object)"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap:int hashOf(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap:java.lang.Object get(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap:boolean containsKey(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap:java.lang.Object put(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap:java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap:java.lang.Object remove(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap:boolean remove(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap:boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap:java.lang.Object replace(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.commons.lang.builder.HashCodeBuilder:org.apache.commons.lang.builder.HashCodeBuilder append(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.ArrayUtils:int hashCode(java.lang.Object)",
            "org.apache.commons.lang.builder.HashCodeBuilder:void reflectionAppend(java.lang.Object,java.lang.Class,org.apache.commons.lang.builder.HashCodeBuilder,boolean,java.lang.String[])",
            "org.apache.commons.lang.builder.HashCodeBuilder:org.apache.commons.lang.builder.HashCodeBuilder append(java.lang.Object[])"
        ]
    },
    "org.apache.commons.lang.mutable.MutableObject:int hashCode()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.ConcurrentHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentHashMap:int hashOf(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap:int hashOf(java.lang.Object)",
            "org.apache.commons.lang.builder.HashCodeBuilder:org.apache.commons.lang.builder.HashCodeBuilder append(java.lang.Object)",
            "org.apache.commons.lang.mutable.MutableObject:int hashCode()",
            "org.apache.commons.lang.ObjectUtils:int hashCode(java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:int hashCode()",
            "org.apache.commons.lang.time.FastDateFormat$Pair:int hashCode()",
            "org.apache.commons.lang3.AnnotationUtils:int hashMember(java.lang.String,java.lang.Object)",
            "org.apache.commons.lang3.builder.HashCodeBuilder:org.apache.commons.lang3.builder.HashCodeBuilder append(java.lang.Object)",
            "org.apache.commons.lang3.concurrent.ConstantInitializer:int hashCode()",
            "org.apache.commons.lang3.mutable.MutableObject:int hashCode()",
            "org.apache.commons.lang3.ObjectUtils:int hashCode(java.lang.Object)",
            "org.apache.commons.lang3.Range:int hashCode()",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:int hashCode()",
            "org.apache.commons.lang3.time.FormatCache$MultipartKey:int hashCode()",
            "org.apache.commons.lang3.tuple.Pair:int hashCode()",
            "org.apache.commons.lang3.tuple.Triple:int hashCode()",
            "org.objectweb.asm.ClassReader:void a(org.objectweb.asm.ClassWriter,org.objectweb.asm.Item[],char[])",
            "org.objectweb.asm.ClassWriter:org.objectweb.asm.Item a(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[])",
            "com.eclipsesource.json.JsonObject$HashIndexTable:int hashSlotFor(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object put_internal(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void putResize(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void push(java.lang.Object,java.lang.Object,int,java.lang.Object,int,java.lang.Object,int,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object remove(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsKey(java.lang.Object)"
        ]
    },
    "org.apache.commons.lang.ObjectUtils:int hashCode(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.text.ExtendedMessageFormat:int hashCode()"
        ]
    },
    "org.apache.commons.lang.time.DurationFormatUtils$Token:int hashCode()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.ConcurrentHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentHashMap:int hashOf(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap:int hashOf(java.lang.Object)",
            "org.apache.commons.lang.builder.HashCodeBuilder:org.apache.commons.lang.builder.HashCodeBuilder append(java.lang.Object)",
            "org.apache.commons.lang.mutable.MutableObject:int hashCode()",
            "org.apache.commons.lang.ObjectUtils:int hashCode(java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:int hashCode()",
            "org.apache.commons.lang.time.FastDateFormat$Pair:int hashCode()",
            "org.apache.commons.lang3.AnnotationUtils:int hashMember(java.lang.String,java.lang.Object)",
            "org.apache.commons.lang3.builder.HashCodeBuilder:org.apache.commons.lang3.builder.HashCodeBuilder append(java.lang.Object)",
            "org.apache.commons.lang3.concurrent.ConstantInitializer:int hashCode()",
            "org.apache.commons.lang3.mutable.MutableObject:int hashCode()",
            "org.apache.commons.lang3.ObjectUtils:int hashCode(java.lang.Object)",
            "org.apache.commons.lang3.Range:int hashCode()",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:int hashCode()",
            "org.apache.commons.lang3.time.FormatCache$MultipartKey:int hashCode()",
            "org.apache.commons.lang3.tuple.Pair:int hashCode()",
            "org.apache.commons.lang3.tuple.Triple:int hashCode()",
            "org.objectweb.asm.ClassReader:void a(org.objectweb.asm.ClassWriter,org.objectweb.asm.Item[],char[])",
            "org.objectweb.asm.ClassWriter:org.objectweb.asm.Item a(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[])",
            "com.eclipsesource.json.JsonObject$HashIndexTable:int hashSlotFor(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object put_internal(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void putResize(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void push(java.lang.Object,java.lang.Object,int,java.lang.Object,int,java.lang.Object,int,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object remove(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsKey(java.lang.Object)"
        ]
    },
    "org.apache.commons.lang.time.FastDateFormat$Pair:int hashCode()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.ConcurrentHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentHashMap:int hashOf(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap:int hashOf(java.lang.Object)",
            "org.apache.commons.lang.builder.HashCodeBuilder:org.apache.commons.lang.builder.HashCodeBuilder append(java.lang.Object)",
            "org.apache.commons.lang.mutable.MutableObject:int hashCode()",
            "org.apache.commons.lang.ObjectUtils:int hashCode(java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:int hashCode()",
            "org.apache.commons.lang.time.FastDateFormat$Pair:int hashCode()",
            "org.apache.commons.lang3.AnnotationUtils:int hashMember(java.lang.String,java.lang.Object)",
            "org.apache.commons.lang3.builder.HashCodeBuilder:org.apache.commons.lang3.builder.HashCodeBuilder append(java.lang.Object)",
            "org.apache.commons.lang3.concurrent.ConstantInitializer:int hashCode()",
            "org.apache.commons.lang3.mutable.MutableObject:int hashCode()",
            "org.apache.commons.lang3.ObjectUtils:int hashCode(java.lang.Object)",
            "org.apache.commons.lang3.Range:int hashCode()",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:int hashCode()",
            "org.apache.commons.lang3.time.FormatCache$MultipartKey:int hashCode()",
            "org.apache.commons.lang3.tuple.Pair:int hashCode()",
            "org.apache.commons.lang3.tuple.Triple:int hashCode()",
            "org.objectweb.asm.ClassReader:void a(org.objectweb.asm.ClassWriter,org.objectweb.asm.Item[],char[])",
            "org.objectweb.asm.ClassWriter:org.objectweb.asm.Item a(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[])",
            "com.eclipsesource.json.JsonObject$HashIndexTable:int hashSlotFor(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object put_internal(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void putResize(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void push(java.lang.Object,java.lang.Object,int,java.lang.Object,int,java.lang.Object,int,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object remove(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsKey(java.lang.Object)"
        ]
    },
    "org.apache.commons.lang3.AnnotationUtils:int hashMember(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.AnnotationUtils:int hashCode(java.lang.'annotation'.Annotation)"
        ]
    },
    "org.apache.commons.lang3.builder.HashCodeBuilder:org.apache.commons.lang3.builder.HashCodeBuilder append(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.ArrayUtils:int hashCode(java.lang.Object)",
            "org.apache.commons.lang3.builder.HashCodeBuilder:void reflectionAppend(java.lang.Object,java.lang.Class,org.apache.commons.lang3.builder.HashCodeBuilder,boolean,java.lang.String[])",
            "org.apache.commons.lang3.builder.HashCodeBuilder:org.apache.commons.lang3.builder.HashCodeBuilder append(java.lang.Object[])"
        ]
    },
    "org.apache.commons.lang3.concurrent.ConstantInitializer:int hashCode()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.ConcurrentHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentHashMap:int hashOf(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap:int hashOf(java.lang.Object)",
            "org.apache.commons.lang.builder.HashCodeBuilder:org.apache.commons.lang.builder.HashCodeBuilder append(java.lang.Object)",
            "org.apache.commons.lang.mutable.MutableObject:int hashCode()",
            "org.apache.commons.lang.ObjectUtils:int hashCode(java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:int hashCode()",
            "org.apache.commons.lang.time.FastDateFormat$Pair:int hashCode()",
            "org.apache.commons.lang3.AnnotationUtils:int hashMember(java.lang.String,java.lang.Object)",
            "org.apache.commons.lang3.builder.HashCodeBuilder:org.apache.commons.lang3.builder.HashCodeBuilder append(java.lang.Object)",
            "org.apache.commons.lang3.concurrent.ConstantInitializer:int hashCode()",
            "org.apache.commons.lang3.mutable.MutableObject:int hashCode()",
            "org.apache.commons.lang3.ObjectUtils:int hashCode(java.lang.Object)",
            "org.apache.commons.lang3.Range:int hashCode()",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:int hashCode()",
            "org.apache.commons.lang3.time.FormatCache$MultipartKey:int hashCode()",
            "org.apache.commons.lang3.tuple.Pair:int hashCode()",
            "org.apache.commons.lang3.tuple.Triple:int hashCode()",
            "org.objectweb.asm.ClassReader:void a(org.objectweb.asm.ClassWriter,org.objectweb.asm.Item[],char[])",
            "org.objectweb.asm.ClassWriter:org.objectweb.asm.Item a(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[])",
            "com.eclipsesource.json.JsonObject$HashIndexTable:int hashSlotFor(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object put_internal(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void putResize(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void push(java.lang.Object,java.lang.Object,int,java.lang.Object,int,java.lang.Object,int,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object remove(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsKey(java.lang.Object)"
        ]
    },
    "org.apache.commons.lang3.mutable.MutableObject:int hashCode()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.ConcurrentHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentHashMap:int hashOf(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap:int hashOf(java.lang.Object)",
            "org.apache.commons.lang.builder.HashCodeBuilder:org.apache.commons.lang.builder.HashCodeBuilder append(java.lang.Object)",
            "org.apache.commons.lang.mutable.MutableObject:int hashCode()",
            "org.apache.commons.lang.ObjectUtils:int hashCode(java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:int hashCode()",
            "org.apache.commons.lang.time.FastDateFormat$Pair:int hashCode()",
            "org.apache.commons.lang3.AnnotationUtils:int hashMember(java.lang.String,java.lang.Object)",
            "org.apache.commons.lang3.builder.HashCodeBuilder:org.apache.commons.lang3.builder.HashCodeBuilder append(java.lang.Object)",
            "org.apache.commons.lang3.concurrent.ConstantInitializer:int hashCode()",
            "org.apache.commons.lang3.mutable.MutableObject:int hashCode()",
            "org.apache.commons.lang3.ObjectUtils:int hashCode(java.lang.Object)",
            "org.apache.commons.lang3.Range:int hashCode()",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:int hashCode()",
            "org.apache.commons.lang3.time.FormatCache$MultipartKey:int hashCode()",
            "org.apache.commons.lang3.tuple.Pair:int hashCode()",
            "org.apache.commons.lang3.tuple.Triple:int hashCode()",
            "org.objectweb.asm.ClassReader:void a(org.objectweb.asm.ClassWriter,org.objectweb.asm.Item[],char[])",
            "org.objectweb.asm.ClassWriter:org.objectweb.asm.Item a(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[])",
            "com.eclipsesource.json.JsonObject$HashIndexTable:int hashSlotFor(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object put_internal(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void putResize(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void push(java.lang.Object,java.lang.Object,int,java.lang.Object,int,java.lang.Object,int,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object remove(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsKey(java.lang.Object)"
        ]
    },
    "org.apache.commons.lang3.ObjectUtils:int hashCode(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.ObjectUtils:int hashCodeMulti(java.lang.Object[])",
            "org.apache.commons.lang3.reflect.TypeUtils$ParameterizedTypeImpl:int hashCode()",
            "org.apache.commons.lang3.text.ExtendedMessageFormat:int hashCode()"
        ]
    },
    "org.apache.commons.lang3.Range:int hashCode()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.ConcurrentHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentHashMap:int hashOf(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap:int hashOf(java.lang.Object)",
            "org.apache.commons.lang.builder.HashCodeBuilder:org.apache.commons.lang.builder.HashCodeBuilder append(java.lang.Object)",
            "org.apache.commons.lang.mutable.MutableObject:int hashCode()",
            "org.apache.commons.lang.ObjectUtils:int hashCode(java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:int hashCode()",
            "org.apache.commons.lang.time.FastDateFormat$Pair:int hashCode()",
            "org.apache.commons.lang3.AnnotationUtils:int hashMember(java.lang.String,java.lang.Object)",
            "org.apache.commons.lang3.builder.HashCodeBuilder:org.apache.commons.lang3.builder.HashCodeBuilder append(java.lang.Object)",
            "org.apache.commons.lang3.concurrent.ConstantInitializer:int hashCode()",
            "org.apache.commons.lang3.mutable.MutableObject:int hashCode()",
            "org.apache.commons.lang3.ObjectUtils:int hashCode(java.lang.Object)",
            "org.apache.commons.lang3.Range:int hashCode()",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:int hashCode()",
            "org.apache.commons.lang3.time.FormatCache$MultipartKey:int hashCode()",
            "org.apache.commons.lang3.tuple.Pair:int hashCode()",
            "org.apache.commons.lang3.tuple.Triple:int hashCode()",
            "org.objectweb.asm.ClassReader:void a(org.objectweb.asm.ClassWriter,org.objectweb.asm.Item[],char[])",
            "org.objectweb.asm.ClassWriter:org.objectweb.asm.Item a(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[])",
            "com.eclipsesource.json.JsonObject$HashIndexTable:int hashSlotFor(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object put_internal(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void putResize(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void push(java.lang.Object,java.lang.Object,int,java.lang.Object,int,java.lang.Object,int,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object remove(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsKey(java.lang.Object)"
        ]
    },
    "org.apache.commons.lang3.time.DurationFormatUtils$Token:int hashCode()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.ConcurrentHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentHashMap:int hashOf(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap:int hashOf(java.lang.Object)",
            "org.apache.commons.lang.builder.HashCodeBuilder:org.apache.commons.lang.builder.HashCodeBuilder append(java.lang.Object)",
            "org.apache.commons.lang.mutable.MutableObject:int hashCode()",
            "org.apache.commons.lang.ObjectUtils:int hashCode(java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:int hashCode()",
            "org.apache.commons.lang.time.FastDateFormat$Pair:int hashCode()",
            "org.apache.commons.lang3.AnnotationUtils:int hashMember(java.lang.String,java.lang.Object)",
            "org.apache.commons.lang3.builder.HashCodeBuilder:org.apache.commons.lang3.builder.HashCodeBuilder append(java.lang.Object)",
            "org.apache.commons.lang3.concurrent.ConstantInitializer:int hashCode()",
            "org.apache.commons.lang3.mutable.MutableObject:int hashCode()",
            "org.apache.commons.lang3.ObjectUtils:int hashCode(java.lang.Object)",
            "org.apache.commons.lang3.Range:int hashCode()",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:int hashCode()",
            "org.apache.commons.lang3.time.FormatCache$MultipartKey:int hashCode()",
            "org.apache.commons.lang3.tuple.Pair:int hashCode()",
            "org.apache.commons.lang3.tuple.Triple:int hashCode()",
            "org.objectweb.asm.ClassReader:void a(org.objectweb.asm.ClassWriter,org.objectweb.asm.Item[],char[])",
            "org.objectweb.asm.ClassWriter:org.objectweb.asm.Item a(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[])",
            "com.eclipsesource.json.JsonObject$HashIndexTable:int hashSlotFor(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object put_internal(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void putResize(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void push(java.lang.Object,java.lang.Object,int,java.lang.Object,int,java.lang.Object,int,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object remove(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsKey(java.lang.Object)"
        ]
    },
    "org.apache.commons.lang3.time.FormatCache$MultipartKey:int hashCode()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.ConcurrentHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentHashMap:int hashOf(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap:int hashOf(java.lang.Object)",
            "org.apache.commons.lang.builder.HashCodeBuilder:org.apache.commons.lang.builder.HashCodeBuilder append(java.lang.Object)",
            "org.apache.commons.lang.mutable.MutableObject:int hashCode()",
            "org.apache.commons.lang.ObjectUtils:int hashCode(java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:int hashCode()",
            "org.apache.commons.lang.time.FastDateFormat$Pair:int hashCode()",
            "org.apache.commons.lang3.AnnotationUtils:int hashMember(java.lang.String,java.lang.Object)",
            "org.apache.commons.lang3.builder.HashCodeBuilder:org.apache.commons.lang3.builder.HashCodeBuilder append(java.lang.Object)",
            "org.apache.commons.lang3.concurrent.ConstantInitializer:int hashCode()",
            "org.apache.commons.lang3.mutable.MutableObject:int hashCode()",
            "org.apache.commons.lang3.ObjectUtils:int hashCode(java.lang.Object)",
            "org.apache.commons.lang3.Range:int hashCode()",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:int hashCode()",
            "org.apache.commons.lang3.time.FormatCache$MultipartKey:int hashCode()",
            "org.apache.commons.lang3.tuple.Pair:int hashCode()",
            "org.apache.commons.lang3.tuple.Triple:int hashCode()",
            "org.objectweb.asm.ClassReader:void a(org.objectweb.asm.ClassWriter,org.objectweb.asm.Item[],char[])",
            "org.objectweb.asm.ClassWriter:org.objectweb.asm.Item a(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[])",
            "com.eclipsesource.json.JsonObject$HashIndexTable:int hashSlotFor(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object put_internal(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void putResize(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void push(java.lang.Object,java.lang.Object,int,java.lang.Object,int,java.lang.Object,int,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object remove(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsKey(java.lang.Object)"
        ]
    },
    "org.apache.commons.lang3.tuple.Pair:int hashCode()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.ConcurrentHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentHashMap:int hashOf(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap:int hashOf(java.lang.Object)",
            "org.apache.commons.lang.builder.HashCodeBuilder:org.apache.commons.lang.builder.HashCodeBuilder append(java.lang.Object)",
            "org.apache.commons.lang.mutable.MutableObject:int hashCode()",
            "org.apache.commons.lang.ObjectUtils:int hashCode(java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:int hashCode()",
            "org.apache.commons.lang.time.FastDateFormat$Pair:int hashCode()",
            "org.apache.commons.lang3.AnnotationUtils:int hashMember(java.lang.String,java.lang.Object)",
            "org.apache.commons.lang3.builder.HashCodeBuilder:org.apache.commons.lang3.builder.HashCodeBuilder append(java.lang.Object)",
            "org.apache.commons.lang3.concurrent.ConstantInitializer:int hashCode()",
            "org.apache.commons.lang3.mutable.MutableObject:int hashCode()",
            "org.apache.commons.lang3.ObjectUtils:int hashCode(java.lang.Object)",
            "org.apache.commons.lang3.Range:int hashCode()",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:int hashCode()",
            "org.apache.commons.lang3.time.FormatCache$MultipartKey:int hashCode()",
            "org.apache.commons.lang3.tuple.Pair:int hashCode()",
            "org.apache.commons.lang3.tuple.Triple:int hashCode()",
            "org.objectweb.asm.ClassReader:void a(org.objectweb.asm.ClassWriter,org.objectweb.asm.Item[],char[])",
            "org.objectweb.asm.ClassWriter:org.objectweb.asm.Item a(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[])",
            "com.eclipsesource.json.JsonObject$HashIndexTable:int hashSlotFor(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object put_internal(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void putResize(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void push(java.lang.Object,java.lang.Object,int,java.lang.Object,int,java.lang.Object,int,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object remove(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsKey(java.lang.Object)"
        ]
    },
    "org.apache.commons.lang3.tuple.Triple:int hashCode()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.ConcurrentHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentHashMap:int hashOf(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap:int hashOf(java.lang.Object)",
            "org.apache.commons.lang.builder.HashCodeBuilder:org.apache.commons.lang.builder.HashCodeBuilder append(java.lang.Object)",
            "org.apache.commons.lang.mutable.MutableObject:int hashCode()",
            "org.apache.commons.lang.ObjectUtils:int hashCode(java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:int hashCode()",
            "org.apache.commons.lang.time.FastDateFormat$Pair:int hashCode()",
            "org.apache.commons.lang3.AnnotationUtils:int hashMember(java.lang.String,java.lang.Object)",
            "org.apache.commons.lang3.builder.HashCodeBuilder:org.apache.commons.lang3.builder.HashCodeBuilder append(java.lang.Object)",
            "org.apache.commons.lang3.concurrent.ConstantInitializer:int hashCode()",
            "org.apache.commons.lang3.mutable.MutableObject:int hashCode()",
            "org.apache.commons.lang3.ObjectUtils:int hashCode(java.lang.Object)",
            "org.apache.commons.lang3.Range:int hashCode()",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:int hashCode()",
            "org.apache.commons.lang3.time.FormatCache$MultipartKey:int hashCode()",
            "org.apache.commons.lang3.tuple.Pair:int hashCode()",
            "org.apache.commons.lang3.tuple.Triple:int hashCode()",
            "org.objectweb.asm.ClassReader:void a(org.objectweb.asm.ClassWriter,org.objectweb.asm.Item[],char[])",
            "org.objectweb.asm.ClassWriter:org.objectweb.asm.Item a(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[])",
            "com.eclipsesource.json.JsonObject$HashIndexTable:int hashSlotFor(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object put_internal(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void putResize(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void push(java.lang.Object,java.lang.Object,int,java.lang.Object,int,java.lang.Object,int,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object remove(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsKey(java.lang.Object)"
        ]
    },
    "org.objectweb.asm.ClassReader:void a(org.objectweb.asm.ClassWriter,org.objectweb.asm.Item[],char[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.objectweb.asm.ClassReader:void a(org.objectweb.asm.ClassWriter)"
        ]
    },
    "org.objectweb.asm.ClassWriter:org.objectweb.asm.Item a(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.objectweb.asm.ClassWriter:int newInvokeDynamic(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[])",
            "org.objectweb.asm.MethodWriter:void visitInvokeDynamicInsn(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[])"
        ]
    },
    "com.eclipsesource.json.JsonObject$HashIndexTable:int hashSlotFor(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.eclipsesource.json.JsonObject$HashIndexTable:void add(java.lang.String,int)",
            "com.eclipsesource.json.JsonObject$HashIndexTable:int get(java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object put_internal(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object put(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void putStash(java.lang.Object,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.util.ObjectMap:void putResize(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.util.ObjectMap:void resize(int)"
        ]
    },
    "com.esotericsoftware.kryo.util.ObjectMap:void push(java.lang.Object,java.lang.Object,int,java.lang.Object,int,java.lang.Object,int,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object put_internal(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void putResize(java.lang.Object,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.CompatibleFieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.ExternalizableSerializer:com.esotericsoftware.kryo.serializers.JavaSerializer getCachedSerializer(java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.JavaSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.JavaSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.util.DefaultClassResolver:com.esotericsoftware.kryo.Registration getRegistration(java.lang.Class)",
            "com.esotericsoftware.kryo.util.DefaultClassResolver:java.lang.Class getTypeByName(java.lang.String)"
        ]
    },
    "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object remove(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.util.ObjectMap:boolean containsKey(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.CompatibleFieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:java.util.List buildValidFields(boolean,java.util.List,com.esotericsoftware.kryo.util.ObjectMap,com.esotericsoftware.kryo.util.IntArray)"
        ]
    },
    "org.onlab.packet.ndp.NeighborSolicitation$lambda_deserializer_42__74:org.onlab.packet.IPacket deserialize(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.EAPOL:org.onlab.packet.EAPOL lambda$deserializer$53(byte[],int,int)",
            "org.onlab.packet.Ethernet:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.Ethernet:org.onlab.packet.Ethernet lambda$deserializer$10(byte[],int,int)",
            "org.onlab.packet.ICMP:org.onlab.packet.ICMP lambda$deserializer$29(byte[],int,int)",
            "org.onlab.packet.ICMP6:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ICMP6:org.onlab.packet.ICMP6 lambda$deserializer$40(byte[],int,int)",
            "org.onlab.packet.IGMP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IPv4:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IPv4:org.onlab.packet.IPv4 lambda$deserializer$24(byte[],int,int)",
            "org.onlab.packet.IPv6:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IPv6:org.onlab.packet.IPv6 lambda$deserializer$48(byte[],int,int)",
            "org.onlab.packet.MPLS:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.MPLS:org.onlab.packet.MPLS lambda$deserializer$12(byte[],int,int)",
            "org.onlab.packet.PIM:org.onlab.packet.PIM lambda$deserializer$49(byte[],int,int)",
            "org.onlab.packet.TCP:org.onlab.packet.TCP lambda$deserializer$39(byte[],int,int)",
            "org.onlab.packet.UDP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.UDP:org.onlab.packet.UDP lambda$deserializer$45(byte[],int,int)",
            "org.onlab.packet.ipv6.Authentication:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Authentication:org.onlab.packet.ipv6.Authentication lambda$deserializer$46(byte[],int,int)",
            "org.onlab.packet.ipv6.BaseOptions:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.BaseOptions:org.onlab.packet.ipv6.BaseOptions lambda$deserializer$13(byte[],int,int)",
            "org.onlab.packet.ipv6.EncapSecurityPayload:org.onlab.packet.ipv6.EncapSecurityPayload lambda$deserializer$51(byte[],int,int)",
            "org.onlab.packet.ipv6.Fragment:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Fragment:org.onlab.packet.ipv6.Fragment lambda$deserializer$26(byte[],int,int)",
            "org.onlab.packet.ipv6.Routing:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Routing:org.onlab.packet.ipv6.Routing lambda$deserializer$50(byte[],int,int)",
            "org.onlab.packet.ndp.NeighborAdvertisement:org.onlab.packet.ndp.NeighborAdvertisement lambda$deserializer$1(byte[],int,int)",
            "org.onlab.packet.ndp.NeighborSolicitation:org.onlab.packet.ndp.NeighborSolicitation lambda$deserializer$42(byte[],int,int)",
            "org.onlab.packet.ndp.Redirect:org.onlab.packet.ndp.Redirect lambda$deserializer$47(byte[],int,int)",
            "org.onlab.packet.ndp.RouterAdvertisement:org.onlab.packet.ndp.RouterAdvertisement lambda$deserializer$41(byte[],int,int)",
            "org.onlab.packet.ndp.RouterSolicitation:org.onlab.packet.ndp.RouterSolicitation lambda$deserializer$44(byte[],int,int)"
        ]
    },
    "org.onlab.packet.ndp.Redirect$lambda_deserializer_47__77:org.onlab.packet.IPacket deserialize(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.EAPOL:org.onlab.packet.EAPOL lambda$deserializer$53(byte[],int,int)",
            "org.onlab.packet.Ethernet:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.Ethernet:org.onlab.packet.Ethernet lambda$deserializer$10(byte[],int,int)",
            "org.onlab.packet.ICMP:org.onlab.packet.ICMP lambda$deserializer$29(byte[],int,int)",
            "org.onlab.packet.ICMP6:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ICMP6:org.onlab.packet.ICMP6 lambda$deserializer$40(byte[],int,int)",
            "org.onlab.packet.IGMP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IPv4:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IPv4:org.onlab.packet.IPv4 lambda$deserializer$24(byte[],int,int)",
            "org.onlab.packet.IPv6:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IPv6:org.onlab.packet.IPv6 lambda$deserializer$48(byte[],int,int)",
            "org.onlab.packet.MPLS:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.MPLS:org.onlab.packet.MPLS lambda$deserializer$12(byte[],int,int)",
            "org.onlab.packet.PIM:org.onlab.packet.PIM lambda$deserializer$49(byte[],int,int)",
            "org.onlab.packet.TCP:org.onlab.packet.TCP lambda$deserializer$39(byte[],int,int)",
            "org.onlab.packet.UDP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.UDP:org.onlab.packet.UDP lambda$deserializer$45(byte[],int,int)",
            "org.onlab.packet.ipv6.Authentication:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Authentication:org.onlab.packet.ipv6.Authentication lambda$deserializer$46(byte[],int,int)",
            "org.onlab.packet.ipv6.BaseOptions:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.BaseOptions:org.onlab.packet.ipv6.BaseOptions lambda$deserializer$13(byte[],int,int)",
            "org.onlab.packet.ipv6.EncapSecurityPayload:org.onlab.packet.ipv6.EncapSecurityPayload lambda$deserializer$51(byte[],int,int)",
            "org.onlab.packet.ipv6.Fragment:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Fragment:org.onlab.packet.ipv6.Fragment lambda$deserializer$26(byte[],int,int)",
            "org.onlab.packet.ipv6.Routing:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Routing:org.onlab.packet.ipv6.Routing lambda$deserializer$50(byte[],int,int)",
            "org.onlab.packet.ndp.NeighborAdvertisement:org.onlab.packet.ndp.NeighborAdvertisement lambda$deserializer$1(byte[],int,int)",
            "org.onlab.packet.ndp.NeighborSolicitation:org.onlab.packet.ndp.NeighborSolicitation lambda$deserializer$42(byte[],int,int)",
            "org.onlab.packet.ndp.Redirect:org.onlab.packet.ndp.Redirect lambda$deserializer$47(byte[],int,int)",
            "org.onlab.packet.ndp.RouterAdvertisement:org.onlab.packet.ndp.RouterAdvertisement lambda$deserializer$41(byte[],int,int)",
            "org.onlab.packet.ndp.RouterSolicitation:org.onlab.packet.ndp.RouterSolicitation lambda$deserializer$44(byte[],int,int)"
        ]
    },
    "org.onlab.packet.ndp.RouterAdvertisement$lambda_deserializer_41__67:org.onlab.packet.IPacket deserialize(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.EAPOL:org.onlab.packet.EAPOL lambda$deserializer$53(byte[],int,int)",
            "org.onlab.packet.Ethernet:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.Ethernet:org.onlab.packet.Ethernet lambda$deserializer$10(byte[],int,int)",
            "org.onlab.packet.ICMP:org.onlab.packet.ICMP lambda$deserializer$29(byte[],int,int)",
            "org.onlab.packet.ICMP6:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ICMP6:org.onlab.packet.ICMP6 lambda$deserializer$40(byte[],int,int)",
            "org.onlab.packet.IGMP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IPv4:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IPv4:org.onlab.packet.IPv4 lambda$deserializer$24(byte[],int,int)",
            "org.onlab.packet.IPv6:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IPv6:org.onlab.packet.IPv6 lambda$deserializer$48(byte[],int,int)",
            "org.onlab.packet.MPLS:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.MPLS:org.onlab.packet.MPLS lambda$deserializer$12(byte[],int,int)",
            "org.onlab.packet.PIM:org.onlab.packet.PIM lambda$deserializer$49(byte[],int,int)",
            "org.onlab.packet.TCP:org.onlab.packet.TCP lambda$deserializer$39(byte[],int,int)",
            "org.onlab.packet.UDP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.UDP:org.onlab.packet.UDP lambda$deserializer$45(byte[],int,int)",
            "org.onlab.packet.ipv6.Authentication:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Authentication:org.onlab.packet.ipv6.Authentication lambda$deserializer$46(byte[],int,int)",
            "org.onlab.packet.ipv6.BaseOptions:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.BaseOptions:org.onlab.packet.ipv6.BaseOptions lambda$deserializer$13(byte[],int,int)",
            "org.onlab.packet.ipv6.EncapSecurityPayload:org.onlab.packet.ipv6.EncapSecurityPayload lambda$deserializer$51(byte[],int,int)",
            "org.onlab.packet.ipv6.Fragment:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Fragment:org.onlab.packet.ipv6.Fragment lambda$deserializer$26(byte[],int,int)",
            "org.onlab.packet.ipv6.Routing:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Routing:org.onlab.packet.ipv6.Routing lambda$deserializer$50(byte[],int,int)",
            "org.onlab.packet.ndp.NeighborAdvertisement:org.onlab.packet.ndp.NeighborAdvertisement lambda$deserializer$1(byte[],int,int)",
            "org.onlab.packet.ndp.NeighborSolicitation:org.onlab.packet.ndp.NeighborSolicitation lambda$deserializer$42(byte[],int,int)",
            "org.onlab.packet.ndp.Redirect:org.onlab.packet.ndp.Redirect lambda$deserializer$47(byte[],int,int)",
            "org.onlab.packet.ndp.RouterAdvertisement:org.onlab.packet.ndp.RouterAdvertisement lambda$deserializer$41(byte[],int,int)",
            "org.onlab.packet.ndp.RouterSolicitation:org.onlab.packet.ndp.RouterSolicitation lambda$deserializer$44(byte[],int,int)"
        ]
    },
    "org.onlab.packet.ndp.RouterSolicitation$lambda_deserializer_44__75:org.onlab.packet.IPacket deserialize(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.EAPOL:org.onlab.packet.EAPOL lambda$deserializer$53(byte[],int,int)",
            "org.onlab.packet.Ethernet:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.Ethernet:org.onlab.packet.Ethernet lambda$deserializer$10(byte[],int,int)",
            "org.onlab.packet.ICMP:org.onlab.packet.ICMP lambda$deserializer$29(byte[],int,int)",
            "org.onlab.packet.ICMP6:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ICMP6:org.onlab.packet.ICMP6 lambda$deserializer$40(byte[],int,int)",
            "org.onlab.packet.IGMP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IPv4:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IPv4:org.onlab.packet.IPv4 lambda$deserializer$24(byte[],int,int)",
            "org.onlab.packet.IPv6:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IPv6:org.onlab.packet.IPv6 lambda$deserializer$48(byte[],int,int)",
            "org.onlab.packet.MPLS:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.MPLS:org.onlab.packet.MPLS lambda$deserializer$12(byte[],int,int)",
            "org.onlab.packet.PIM:org.onlab.packet.PIM lambda$deserializer$49(byte[],int,int)",
            "org.onlab.packet.TCP:org.onlab.packet.TCP lambda$deserializer$39(byte[],int,int)",
            "org.onlab.packet.UDP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.UDP:org.onlab.packet.UDP lambda$deserializer$45(byte[],int,int)",
            "org.onlab.packet.ipv6.Authentication:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Authentication:org.onlab.packet.ipv6.Authentication lambda$deserializer$46(byte[],int,int)",
            "org.onlab.packet.ipv6.BaseOptions:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.BaseOptions:org.onlab.packet.ipv6.BaseOptions lambda$deserializer$13(byte[],int,int)",
            "org.onlab.packet.ipv6.EncapSecurityPayload:org.onlab.packet.ipv6.EncapSecurityPayload lambda$deserializer$51(byte[],int,int)",
            "org.onlab.packet.ipv6.Fragment:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Fragment:org.onlab.packet.ipv6.Fragment lambda$deserializer$26(byte[],int,int)",
            "org.onlab.packet.ipv6.Routing:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Routing:org.onlab.packet.ipv6.Routing lambda$deserializer$50(byte[],int,int)",
            "org.onlab.packet.ndp.NeighborAdvertisement:org.onlab.packet.ndp.NeighborAdvertisement lambda$deserializer$1(byte[],int,int)",
            "org.onlab.packet.ndp.NeighborSolicitation:org.onlab.packet.ndp.NeighborSolicitation lambda$deserializer$42(byte[],int,int)",
            "org.onlab.packet.ndp.Redirect:org.onlab.packet.ndp.Redirect lambda$deserializer$47(byte[],int,int)",
            "org.onlab.packet.ndp.RouterAdvertisement:org.onlab.packet.ndp.RouterAdvertisement lambda$deserializer$41(byte[],int,int)",
            "org.onlab.packet.ndp.RouterSolicitation:org.onlab.packet.ndp.RouterSolicitation lambda$deserializer$44(byte[],int,int)"
        ]
    },
    "org.jboss.netty.channel.Channels$1:org.jboss.netty.channel.ChannelPipeline getPipeline()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.bootstrap.ClientBootstrap:org.jboss.netty.channel.ChannelFuture connect(java.net.SocketAddress,java.net.SocketAddress)",
            "org.jboss.netty.bootstrap.ClientBootstrap:org.jboss.netty.channel.ChannelFuture bind(java.net.SocketAddress)",
            "org.jboss.netty.bootstrap.ConnectionlessBootstrap:org.jboss.netty.channel.Channel bind(java.net.SocketAddress)",
            "org.jboss.netty.bootstrap.ConnectionlessBootstrap:org.jboss.netty.channel.ChannelFuture connect(java.net.SocketAddress,java.net.SocketAddress)",
            "org.jboss.netty.channel.local.LocalClientChannelSink:void connect(org.jboss.netty.channel.local.DefaultLocalChannel,org.jboss.netty.channel.ChannelFuture,org.jboss.netty.channel.local.LocalAddress)",
            "org.jboss.netty.channel.socket.nio.NioServerBoss:void registerAcceptedChannel(org.jboss.netty.channel.socket.nio.NioServerSocketChannel,java.nio.channels.SocketChannel,java.lang.Thread)",
            "org.jboss.netty.channel.socket.oio.OioServerSocketPipelineSink$Boss:void run()"
        ]
    },
    "org.jboss.netty.channel.socket.nio.DefaultNioDatagramChannelConfig:void setOptions(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.bootstrap.ClientBootstrap:org.jboss.netty.channel.ChannelFuture connect(java.net.SocketAddress,java.net.SocketAddress)",
            "org.jboss.netty.bootstrap.ClientBootstrap:org.jboss.netty.channel.ChannelFuture bind(java.net.SocketAddress)",
            "org.jboss.netty.bootstrap.ConnectionlessBootstrap:org.jboss.netty.channel.Channel bind(java.net.SocketAddress)",
            "org.jboss.netty.bootstrap.ConnectionlessBootstrap:org.jboss.netty.channel.ChannelFuture connect(java.net.SocketAddress,java.net.SocketAddress)",
            "org.jboss.netty.bootstrap.ServerBootstrap$Binder:void channelOpen(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.bootstrap.ServerBootstrap$Binder:void childChannelOpen(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChildChannelStateEvent)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.DefaultNioSocketChannelConfig:void setOptions(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.bootstrap.ClientBootstrap:org.jboss.netty.channel.ChannelFuture connect(java.net.SocketAddress,java.net.SocketAddress)",
            "org.jboss.netty.bootstrap.ClientBootstrap:org.jboss.netty.channel.ChannelFuture bind(java.net.SocketAddress)",
            "org.jboss.netty.bootstrap.ConnectionlessBootstrap:org.jboss.netty.channel.Channel bind(java.net.SocketAddress)",
            "org.jboss.netty.bootstrap.ConnectionlessBootstrap:org.jboss.netty.channel.ChannelFuture connect(java.net.SocketAddress,java.net.SocketAddress)",
            "org.jboss.netty.bootstrap.ServerBootstrap$Binder:void channelOpen(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.bootstrap.ServerBootstrap$Binder:void childChannelOpen(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChildChannelStateEvent)"
        ]
    },
    "org.jboss.netty.channel.group.DefaultChannelGroupFuture:boolean setDone()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.group.DefaultChannelGroupFuture$1:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.group.DefaultChannelGroupFuture:void <init>(org.jboss.netty.channel.group.ChannelGroup,java.util.Collection)",
            "org.jboss.netty.channel.group.DefaultChannelGroupFuture:void <init>(org.jboss.netty.channel.group.ChannelGroup,java.util.Map)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioDatagramChannel:org.jboss.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.channel.socket.nio.NioDatagramChannel:org.jboss.netty.channel.ChannelFuture leaveGroup(java.net.InetSocketAddress,java.net.NetworkInterface)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.channel.socket.nio.NioDatagramChannel:org.jboss.netty.channel.ChannelFuture block(java.net.InetAddress,java.net.InetAddress)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.http.CookieEncoder:java.lang.String encode()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.http.CookieDecoder:java.util.Set decode(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.http.DefaultHttpChunkTrailer:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.IGMP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.pim.PIMHelloOption:java.lang.String toString()",
            "org.onlab.util.Tools:java.lang.String get(java.util.Dictionary,java.lang.String)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:java.lang.String toString(java.lang.Object)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdyHeaders:java.lang.String toString(java.lang.Object)",
            "org.jboss.netty.util.internal.StringUtil:java.lang.String stripControlCharacters(java.lang.Object)",
            "org.apache.commons.lang.builder.ReflectionToStringBuilder:java.lang.String[] toNoNullStringArray(java.lang.Object[])",
            "org.apache.commons.lang.mutable.MutableObject:java.lang.String toString()",
            "org.apache.commons.lang.ObjectUtils:java.lang.String toString(java.lang.Object)",
            "org.apache.commons.lang.ObjectUtils:java.lang.String toString(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.lang.Object[],char,int,int)",
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.lang.Object[],java.lang.String,int,int)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder append(java.lang.Object)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendFixedWidthPadLeft(java.lang.Object,int,char)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendFixedWidthPadRight(java.lang.Object,int,char)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder insert(int,java.lang.Object)",
            "org.apache.commons.lang.text.StrLookup$MapStrLookup:java.lang.String lookup(java.lang.String)",
            "org.apache.commons.lang.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Properties)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:java.lang.String toString()",
            "org.apache.commons.lang.time.DurationFormatUtils:java.lang.String format(org.apache.commons.lang.time.DurationFormatUtils$Token[],int,int,int,int,int,int,int,boolean)",
            "org.apache.commons.lang3.builder.ReflectionToStringBuilder:java.lang.String[] toNoNullStringArray(java.lang.Object[])",
            "org.apache.commons.lang3.exception.DefaultExceptionContext:java.lang.String getFormattedExceptionMessage(java.lang.String)",
            "org.apache.commons.lang3.mutable.MutableObject:java.lang.String toString()",
            "org.apache.commons.lang3.ObjectUtils:java.lang.String toString(java.lang.Object)",
            "org.apache.commons.lang3.ObjectUtils:java.lang.String toString(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder append(java.lang.Object)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadLeft(java.lang.Object,int,char)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadRight(java.lang.Object,int,char)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder insert(int,java.lang.Object)",
            "org.apache.commons.lang3.text.StrLookup$MapStrLookup:java.lang.String lookup(java.lang.String)",
            "org.apache.commons.lang3.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Properties)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:java.lang.String toString()",
            "org.apache.commons.lang3.time.DurationFormatUtils:java.lang.String format(org.apache.commons.lang3.time.DurationFormatUtils$Token[],long,long,long,long,long,long,long,boolean)"
        ]
    },
    "org.jboss.netty.handler.codec.http.DefaultHttpChunkTrailer$TrailingHeaders:org.jboss.netty.handler.codec.http.HttpHeaders add(java.lang.String,java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.http.DefaultHttpChunkTrailer$TrailingHeaders:org.jboss.netty.handler.codec.http.HttpHeaders set(java.lang.String,java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.DefaultHttpChunkTrailer:void setHeader(java.lang.String,java.lang.Iterable)",
            "org.jboss.netty.handler.codec.http.DefaultHttpMessage:void setHeader(java.lang.String,java.lang.Iterable)",
            "org.jboss.netty.handler.codec.http.HttpCodecUtil:void removeTransferEncodingChunked(org.jboss.netty.handler.codec.http.HttpMessage)",
            "org.jboss.netty.handler.codec.http.HttpHeaders:void setHeader(org.jboss.netty.handler.codec.http.HttpMessage,java.lang.String,java.lang.Iterable)",
            "org.jboss.netty.handler.codec.http.HttpHeaders:void setIntHeader(org.jboss.netty.handler.codec.http.HttpMessage,java.lang.String,java.lang.Iterable)",
            "org.jboss.netty.handler.codec.http.HttpHeaders:void setDateHeader(org.jboss.netty.handler.codec.http.HttpMessage,java.lang.String,java.util.Date)",
            "org.jboss.netty.handler.codec.http.HttpHeaders:void setDateHeader(org.jboss.netty.handler.codec.http.HttpMessage,java.lang.String,java.lang.Iterable)",
            "org.jboss.netty.handler.codec.http.HttpHeaders:void setDate(org.jboss.netty.handler.codec.http.HttpMessage,java.util.Date)",
            "org.jboss.netty.handler.codec.http.HttpHeaders:void removeTransferEncodingChunked(org.jboss.netty.handler.codec.http.HttpMessage)"
        ]
    },
    "org.jboss.netty.handler.codec.http.DefaultHttpChunkTrailer:void setHeader(java.lang.String,java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.http.DefaultHttpMessage:void setHeader(java.lang.String,java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.http.HttpHeaders:void setHeader(org.jboss.netty.handler.codec.http.HttpMessage,java.lang.String,java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.http.HttpHeaders:void setIntHeader(org.jboss.netty.handler.codec.http.HttpMessage,java.lang.String,java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.http.HttpHeaders:void setDateHeader(org.jboss.netty.handler.codec.http.HttpMessage,java.lang.String,java.util.Date)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.http.HttpHeaders:void setDateHeader(org.jboss.netty.handler.codec.http.HttpMessage,java.lang.String,java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.http.HttpHeaders:void setDate(org.jboss.netty.handler.codec.http.HttpMessage,java.util.Date)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.http.DefaultHttpMessage:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.IGMP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.pim.PIMHelloOption:java.lang.String toString()",
            "org.onlab.util.Tools:java.lang.String get(java.util.Dictionary,java.lang.String)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:java.lang.String toString(java.lang.Object)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdyHeaders:java.lang.String toString(java.lang.Object)",
            "org.jboss.netty.util.internal.StringUtil:java.lang.String stripControlCharacters(java.lang.Object)",
            "org.apache.commons.lang.builder.ReflectionToStringBuilder:java.lang.String[] toNoNullStringArray(java.lang.Object[])",
            "org.apache.commons.lang.mutable.MutableObject:java.lang.String toString()",
            "org.apache.commons.lang.ObjectUtils:java.lang.String toString(java.lang.Object)",
            "org.apache.commons.lang.ObjectUtils:java.lang.String toString(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.lang.Object[],char,int,int)",
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.lang.Object[],java.lang.String,int,int)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder append(java.lang.Object)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendFixedWidthPadLeft(java.lang.Object,int,char)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendFixedWidthPadRight(java.lang.Object,int,char)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder insert(int,java.lang.Object)",
            "org.apache.commons.lang.text.StrLookup$MapStrLookup:java.lang.String lookup(java.lang.String)",
            "org.apache.commons.lang.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Properties)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:java.lang.String toString()",
            "org.apache.commons.lang.time.DurationFormatUtils:java.lang.String format(org.apache.commons.lang.time.DurationFormatUtils$Token[],int,int,int,int,int,int,int,boolean)",
            "org.apache.commons.lang3.builder.ReflectionToStringBuilder:java.lang.String[] toNoNullStringArray(java.lang.Object[])",
            "org.apache.commons.lang3.exception.DefaultExceptionContext:java.lang.String getFormattedExceptionMessage(java.lang.String)",
            "org.apache.commons.lang3.mutable.MutableObject:java.lang.String toString()",
            "org.apache.commons.lang3.ObjectUtils:java.lang.String toString(java.lang.Object)",
            "org.apache.commons.lang3.ObjectUtils:java.lang.String toString(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder append(java.lang.Object)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadLeft(java.lang.Object,int,char)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadRight(java.lang.Object,int,char)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder insert(int,java.lang.Object)",
            "org.apache.commons.lang3.text.StrLookup$MapStrLookup:java.lang.String lookup(java.lang.String)",
            "org.apache.commons.lang3.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Properties)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:java.lang.String toString()",
            "org.apache.commons.lang3.time.DurationFormatUtils:java.lang.String format(org.apache.commons.lang3.time.DurationFormatUtils$Token[],long,long,long,long,long,long,long,boolean)"
        ]
    },
    "org.jboss.netty.handler.codec.http.DefaultHttpRequest:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.IGMP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.pim.PIMHelloOption:java.lang.String toString()",
            "org.onlab.util.Tools:java.lang.String get(java.util.Dictionary,java.lang.String)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:java.lang.String toString(java.lang.Object)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdyHeaders:java.lang.String toString(java.lang.Object)",
            "org.jboss.netty.util.internal.StringUtil:java.lang.String stripControlCharacters(java.lang.Object)",
            "org.apache.commons.lang.builder.ReflectionToStringBuilder:java.lang.String[] toNoNullStringArray(java.lang.Object[])",
            "org.apache.commons.lang.mutable.MutableObject:java.lang.String toString()",
            "org.apache.commons.lang.ObjectUtils:java.lang.String toString(java.lang.Object)",
            "org.apache.commons.lang.ObjectUtils:java.lang.String toString(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.lang.Object[],char,int,int)",
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.lang.Object[],java.lang.String,int,int)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder append(java.lang.Object)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendFixedWidthPadLeft(java.lang.Object,int,char)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendFixedWidthPadRight(java.lang.Object,int,char)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder insert(int,java.lang.Object)",
            "org.apache.commons.lang.text.StrLookup$MapStrLookup:java.lang.String lookup(java.lang.String)",
            "org.apache.commons.lang.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Properties)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:java.lang.String toString()",
            "org.apache.commons.lang.time.DurationFormatUtils:java.lang.String format(org.apache.commons.lang.time.DurationFormatUtils$Token[],int,int,int,int,int,int,int,boolean)",
            "org.apache.commons.lang3.builder.ReflectionToStringBuilder:java.lang.String[] toNoNullStringArray(java.lang.Object[])",
            "org.apache.commons.lang3.exception.DefaultExceptionContext:java.lang.String getFormattedExceptionMessage(java.lang.String)",
            "org.apache.commons.lang3.mutable.MutableObject:java.lang.String toString()",
            "org.apache.commons.lang3.ObjectUtils:java.lang.String toString(java.lang.Object)",
            "org.apache.commons.lang3.ObjectUtils:java.lang.String toString(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder append(java.lang.Object)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadLeft(java.lang.Object,int,char)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadRight(java.lang.Object,int,char)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder insert(int,java.lang.Object)",
            "org.apache.commons.lang3.text.StrLookup$MapStrLookup:java.lang.String lookup(java.lang.String)",
            "org.apache.commons.lang3.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Properties)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:java.lang.String toString()",
            "org.apache.commons.lang3.time.DurationFormatUtils:java.lang.String format(org.apache.commons.lang3.time.DurationFormatUtils$Token[],long,long,long,long,long,long,long,boolean)"
        ]
    },
    "org.jboss.netty.handler.codec.http.DefaultHttpResponse:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.IGMP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.pim.PIMHelloOption:java.lang.String toString()",
            "org.onlab.util.Tools:java.lang.String get(java.util.Dictionary,java.lang.String)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:java.lang.String toString(java.lang.Object)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdyHeaders:java.lang.String toString(java.lang.Object)",
            "org.jboss.netty.util.internal.StringUtil:java.lang.String stripControlCharacters(java.lang.Object)",
            "org.apache.commons.lang.builder.ReflectionToStringBuilder:java.lang.String[] toNoNullStringArray(java.lang.Object[])",
            "org.apache.commons.lang.mutable.MutableObject:java.lang.String toString()",
            "org.apache.commons.lang.ObjectUtils:java.lang.String toString(java.lang.Object)",
            "org.apache.commons.lang.ObjectUtils:java.lang.String toString(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.lang.Object[],char,int,int)",
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.lang.Object[],java.lang.String,int,int)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder append(java.lang.Object)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendFixedWidthPadLeft(java.lang.Object,int,char)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendFixedWidthPadRight(java.lang.Object,int,char)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder insert(int,java.lang.Object)",
            "org.apache.commons.lang.text.StrLookup$MapStrLookup:java.lang.String lookup(java.lang.String)",
            "org.apache.commons.lang.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Properties)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:java.lang.String toString()",
            "org.apache.commons.lang.time.DurationFormatUtils:java.lang.String format(org.apache.commons.lang.time.DurationFormatUtils$Token[],int,int,int,int,int,int,int,boolean)",
            "org.apache.commons.lang3.builder.ReflectionToStringBuilder:java.lang.String[] toNoNullStringArray(java.lang.Object[])",
            "org.apache.commons.lang3.exception.DefaultExceptionContext:java.lang.String getFormattedExceptionMessage(java.lang.String)",
            "org.apache.commons.lang3.mutable.MutableObject:java.lang.String toString()",
            "org.apache.commons.lang3.ObjectUtils:java.lang.String toString(java.lang.Object)",
            "org.apache.commons.lang3.ObjectUtils:java.lang.String toString(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder append(java.lang.Object)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadLeft(java.lang.Object,int,char)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadRight(java.lang.Object,int,char)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder insert(int,java.lang.Object)",
            "org.apache.commons.lang3.text.StrLookup$MapStrLookup:java.lang.String lookup(java.lang.String)",
            "org.apache.commons.lang3.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Properties)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:java.lang.String toString()",
            "org.apache.commons.lang3.time.DurationFormatUtils:java.lang.String format(org.apache.commons.lang3.time.DurationFormatUtils$Token[],long,long,long,long,long,long,long,boolean)"
        ]
    },
    "org.jboss.netty.handler.codec.http.DefaultHttpMessage:boolean isChunked()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$ServletChannelHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.codec.http.DefaultHttpMessage:void setContent(org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.http.DefaultHttpMessage:java.lang.String toString()",
            "org.jboss.netty.handler.codec.http.DefaultHttpRequest:java.lang.String toString()",
            "org.jboss.netty.handler.codec.http.DefaultHttpResponse:java.lang.String toString()",
            "org.jboss.netty.handler.codec.http.HttpChunkAggregator:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.codec.http.HttpClientCodec$Decoder:void decrement(java.lang.Object)",
            "org.jboss.netty.handler.codec.http.HttpClientCodec$Encoder:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)",
            "org.jboss.netty.handler.codec.http.HttpContentDecoder:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.codec.http.HttpContentEncoder:void writeRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.codec.http.HttpMessageDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.http.HttpMessageDecoder$State)",
            "org.jboss.netty.handler.codec.http.HttpMessageDecoder:java.lang.Object readFixedLengthContent(org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.http.HttpMessageDecoder:org.jboss.netty.handler.codec.http.HttpMessageDecoder$State readHeaders(org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.http.HttpMessageEncoder:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void <init>(org.jboss.netty.handler.codec.http.multipart.HttpDataFactory,org.jboss.netty.handler.codec.http.HttpRequest,java.nio.charset.Charset)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void <init>(org.jboss.netty.handler.codec.http.multipart.HttpDataFactory,org.jboss.netty.handler.codec.http.HttpRequest,java.nio.charset.Charset)",
            "org.jboss.netty.handler.codec.spdy.SpdyHttpEncoder:org.jboss.netty.handler.codec.spdy.SpdySynStreamFrame createSynStreamFrame(org.jboss.netty.handler.codec.http.HttpMessage)",
            "org.jboss.netty.handler.codec.spdy.SpdyHttpEncoder:org.jboss.netty.handler.codec.spdy.SpdySynReplyFrame createSynReplyFrame(org.jboss.netty.handler.codec.http.HttpResponse)"
        ]
    },
    "org.jboss.netty.handler.codec.http.HttpMessageEncoder:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.HttpClientCodec$Encoder:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)",
            "org.jboss.netty.handler.codec.oneone.OneToOneEncoder:boolean doEncode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.codec.rtsp.RtspMessageEncoder:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)"
        ]
    },
    "org.jboss.netty.handler.codec.http.HttpHeaders:boolean is100ContinueExpected(org.jboss.netty.handler.codec.http.HttpMessage)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.HttpChunkAggregator:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.codec.http.HttpMessageDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.http.HttpMessageDecoder$State)"
        ]
    },
    "org.jboss.netty.handler.codec.http.HttpHeaders:boolean isTransferEncodingChunked(org.jboss.netty.handler.codec.http.HttpMessage)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void cleanFiles()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestDecoder:void cleanFiles()"
        ]
    },
    "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder:void cleanFiles()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void cleanFiles()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestDecoder:void cleanFiles()"
        ]
    },
    "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder:void addBodyHttpData(org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder:void setBodyHttpDatas(java.util.List)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder:void addBodyAttribute(java.lang.String,java.lang.String)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder:void addBodyFileUpload(java.lang.String,java.io.File,java.lang.String,boolean)"
        ]
    },
    "org.onlab.packet.IGMP:org.onlab.packet.IPacket deserialize(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.BasePacket:java.lang.Object clone()",
            "org.onlab.packet.EAPOL:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ICMP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.PIM:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.TCP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.EncapSecurityPayload:org.onlab.packet.IPacket deserialize(byte[],int,int)"
        ]
    },
    "org.onlab.packet.pim.PIMHelloOption:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.IGMP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.pim.PIMHelloOption:java.lang.String toString()",
            "org.onlab.util.Tools:java.lang.String get(java.util.Dictionary,java.lang.String)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:java.lang.String toString(java.lang.Object)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdyHeaders:java.lang.String toString(java.lang.Object)",
            "org.jboss.netty.util.internal.StringUtil:java.lang.String stripControlCharacters(java.lang.Object)",
            "org.apache.commons.lang.builder.ReflectionToStringBuilder:java.lang.String[] toNoNullStringArray(java.lang.Object[])",
            "org.apache.commons.lang.mutable.MutableObject:java.lang.String toString()",
            "org.apache.commons.lang.ObjectUtils:java.lang.String toString(java.lang.Object)",
            "org.apache.commons.lang.ObjectUtils:java.lang.String toString(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.lang.Object[],char,int,int)",
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.lang.Object[],java.lang.String,int,int)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder append(java.lang.Object)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendFixedWidthPadLeft(java.lang.Object,int,char)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendFixedWidthPadRight(java.lang.Object,int,char)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder insert(int,java.lang.Object)",
            "org.apache.commons.lang.text.StrLookup$MapStrLookup:java.lang.String lookup(java.lang.String)",
            "org.apache.commons.lang.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Properties)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:java.lang.String toString()",
            "org.apache.commons.lang.time.DurationFormatUtils:java.lang.String format(org.apache.commons.lang.time.DurationFormatUtils$Token[],int,int,int,int,int,int,int,boolean)",
            "org.apache.commons.lang3.builder.ReflectionToStringBuilder:java.lang.String[] toNoNullStringArray(java.lang.Object[])",
            "org.apache.commons.lang3.exception.DefaultExceptionContext:java.lang.String getFormattedExceptionMessage(java.lang.String)",
            "org.apache.commons.lang3.mutable.MutableObject:java.lang.String toString()",
            "org.apache.commons.lang3.ObjectUtils:java.lang.String toString(java.lang.Object)",
            "org.apache.commons.lang3.ObjectUtils:java.lang.String toString(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder append(java.lang.Object)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadLeft(java.lang.Object,int,char)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadRight(java.lang.Object,int,char)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder insert(int,java.lang.Object)",
            "org.apache.commons.lang3.text.StrLookup$MapStrLookup:java.lang.String lookup(java.lang.String)",
            "org.apache.commons.lang3.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Properties)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:java.lang.String toString()",
            "org.apache.commons.lang3.time.DurationFormatUtils:java.lang.String format(org.apache.commons.lang3.time.DurationFormatUtils$Token[],long,long,long,long,long,long,long,boolean)"
        ]
    },
    "org.onlab.util.Tools:java.lang.String get(java.util.Dictionary,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:java.lang.String toString(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:org.jboss.netty.handler.codec.http.HttpHeaders add(java.lang.String,java.lang.Object)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:org.jboss.netty.handler.codec.http.HttpHeaders add(java.lang.String,java.lang.Iterable)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:org.jboss.netty.handler.codec.http.HttpHeaders set(java.lang.String,java.lang.Object)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:org.jboss.netty.handler.codec.http.HttpHeaders set(java.lang.String,java.lang.Iterable)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.DefaultSpdyHeaders:java.lang.String toString(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.spdy.DefaultSpdyHeaders:org.jboss.netty.handler.codec.spdy.SpdyHeaders add(java.lang.String,java.lang.Object)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdyHeaders:org.jboss.netty.handler.codec.spdy.SpdyHeaders set(java.lang.String,java.lang.Object)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdyHeaders:org.jboss.netty.handler.codec.spdy.SpdyHeaders set(java.lang.String,java.lang.Iterable)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdyHeaders:org.jboss.netty.handler.codec.spdy.SpdyHeaders add(java.lang.String,java.lang.Iterable)"
        ]
    },
    "org.jboss.netty.util.internal.StringUtil:java.lang.String stripControlCharacters(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.DownstreamMessageEvent:java.lang.String toString()",
            "org.jboss.netty.channel.UpstreamMessageEvent:java.lang.String toString()"
        ]
    },
    "org.apache.commons.lang.builder.ReflectionToStringBuilder:java.lang.String[] toNoNullStringArray(java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.builder.ReflectionToStringBuilder:java.lang.String[] toNoNullStringArray(java.util.Collection)",
            "org.apache.commons.lang.builder.ReflectionToStringBuilder:org.apache.commons.lang.builder.ReflectionToStringBuilder setExcludeFieldNames(java.lang.String[])"
        ]
    },
    "org.apache.commons.lang.mutable.MutableObject:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.IGMP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.pim.PIMHelloOption:java.lang.String toString()",
            "org.onlab.util.Tools:java.lang.String get(java.util.Dictionary,java.lang.String)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:java.lang.String toString(java.lang.Object)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdyHeaders:java.lang.String toString(java.lang.Object)",
            "org.jboss.netty.util.internal.StringUtil:java.lang.String stripControlCharacters(java.lang.Object)",
            "org.apache.commons.lang.builder.ReflectionToStringBuilder:java.lang.String[] toNoNullStringArray(java.lang.Object[])",
            "org.apache.commons.lang.mutable.MutableObject:java.lang.String toString()",
            "org.apache.commons.lang.ObjectUtils:java.lang.String toString(java.lang.Object)",
            "org.apache.commons.lang.ObjectUtils:java.lang.String toString(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.lang.Object[],char,int,int)",
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.lang.Object[],java.lang.String,int,int)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder append(java.lang.Object)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendFixedWidthPadLeft(java.lang.Object,int,char)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendFixedWidthPadRight(java.lang.Object,int,char)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder insert(int,java.lang.Object)",
            "org.apache.commons.lang.text.StrLookup$MapStrLookup:java.lang.String lookup(java.lang.String)",
            "org.apache.commons.lang.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Properties)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:java.lang.String toString()",
            "org.apache.commons.lang.time.DurationFormatUtils:java.lang.String format(org.apache.commons.lang.time.DurationFormatUtils$Token[],int,int,int,int,int,int,int,boolean)",
            "org.apache.commons.lang3.builder.ReflectionToStringBuilder:java.lang.String[] toNoNullStringArray(java.lang.Object[])",
            "org.apache.commons.lang3.exception.DefaultExceptionContext:java.lang.String getFormattedExceptionMessage(java.lang.String)",
            "org.apache.commons.lang3.mutable.MutableObject:java.lang.String toString()",
            "org.apache.commons.lang3.ObjectUtils:java.lang.String toString(java.lang.Object)",
            "org.apache.commons.lang3.ObjectUtils:java.lang.String toString(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder append(java.lang.Object)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadLeft(java.lang.Object,int,char)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadRight(java.lang.Object,int,char)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder insert(int,java.lang.Object)",
            "org.apache.commons.lang3.text.StrLookup$MapStrLookup:java.lang.String lookup(java.lang.String)",
            "org.apache.commons.lang3.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Properties)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:java.lang.String toString()",
            "org.apache.commons.lang3.time.DurationFormatUtils:java.lang.String format(org.apache.commons.lang3.time.DurationFormatUtils$Token[],long,long,long,long,long,long,long,boolean)"
        ]
    },
    "org.apache.commons.lang.ObjectUtils:java.lang.String toString(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.util.Iterator,char)",
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.util.Iterator,java.lang.String)"
        ]
    },
    "org.apache.commons.lang.ObjectUtils:java.lang.String toString(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.StringUtils:java.lang.String join(java.lang.Object[],char,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.lang.Object[],char)"
        ]
    },
    "org.apache.commons.lang.StringUtils:java.lang.String join(java.lang.Object[],java.lang.String,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.lang.Object[],java.lang.String)"
        ]
    },
    "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder append(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.math.NumberRange:java.lang.String toString()",
            "org.apache.commons.lang.math.Range:java.lang.String toString()",
            "org.apache.commons.lang.NumberRange:java.lang.String toString()",
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.lang.Object[],char,int,int)",
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.lang.Object[],java.lang.String,int,int)",
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.util.Iterator,char)",
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.util.Iterator,java.lang.String)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendln(java.lang.Object)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendAll(java.lang.Object[])",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendAll(java.util.Collection)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendAll(java.util.Iterator)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendWithSeparators(java.lang.Object[],java.lang.String)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendWithSeparators(java.util.Collection,java.lang.String)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendWithSeparators(java.util.Iterator,java.lang.String)",
            "org.apache.commons.lang.text.StrSubstitutor:java.lang.String replace(java.lang.Object)",
            "org.apache.commons.lang.text.StrSubstitutor:void checkCyclicSubstitution(java.lang.String,java.util.List)"
        ]
    },
    "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendFixedWidthPadLeft(java.lang.Object,int,char)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendFixedWidthPadLeft(int,int,char)"
        ]
    },
    "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendFixedWidthPadRight(java.lang.Object,int,char)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendFixedWidthPadRight(int,int,char)"
        ]
    },
    "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder insert(int,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.text.StrLookup$MapStrLookup:java.lang.String lookup(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.text.StrSubstitutor:java.lang.String resolveVariable(java.lang.String,org.apache.commons.lang.text.StrBuilder,int,int)"
        ]
    },
    "org.apache.commons.lang.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Properties)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.ConcurrentHashMap$EntrySet:boolean contains(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$Segment:boolean keyEq(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$Segment:boolean containsValue(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$Segment:boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$Segment:java.lang.Object remove(java.lang.Object,int,java.lang.Object,boolean)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$SimpleEntry:boolean eq(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$EntrySet:boolean contains(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$Segment:boolean containsValue(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$Segment:boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$Segment:java.lang.Object remove(java.lang.Object,int,java.lang.Object,boolean)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$SimpleEntry:boolean eq(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$EntrySet:boolean contains(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$Segment:boolean containsValue(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$Segment:boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$Segment:java.lang.Object remove(java.lang.Object,int,java.lang.Object,boolean)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$SimpleEntry:boolean eq(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$EntrySet:boolean contains(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:boolean keyEq(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:boolean containsValue(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:java.lang.Object remove(java.lang.Object,int,java.lang.Object,boolean)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$SimpleEntry:boolean eq(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang.ArrayUtils:int indexOf(java.lang.Object[],java.lang.Object,int)",
            "org.apache.commons.lang.ArrayUtils:int lastIndexOf(java.lang.Object[],java.lang.Object,int)",
            "org.apache.commons.lang.builder.EqualsBuilder:org.apache.commons.lang.builder.EqualsBuilder append(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang.IntHashMap:boolean contains(java.lang.Object)",
            "org.apache.commons.lang.mutable.MutableObject:boolean equals(java.lang.Object)",
            "org.apache.commons.lang.ObjectUtils:boolean equals(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang.time.FastDateFormat$Pair:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.AnnotationUtils:boolean memberEquals(java.lang.Class,java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang3.ArrayUtils:int indexOf(java.lang.Object[],java.lang.Object,int)",
            "org.apache.commons.lang3.ArrayUtils:int lastIndexOf(java.lang.Object[],java.lang.Object,int)",
            "org.apache.commons.lang3.builder.DiffBuilder:void <init>(java.lang.Object,java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle)",
            "org.apache.commons.lang3.builder.EqualsBuilder:org.apache.commons.lang3.builder.EqualsBuilder append(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang3.mutable.MutableObject:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.ObjectUtils:boolean equals(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang3.Range:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "com.esotericsoftware.kryo.util.IdentityMap:boolean containsValue(java.lang.Object,boolean)",
            "com.esotericsoftware.kryo.util.IdentityMap:java.lang.Object findKey(java.lang.Object,boolean)",
            "com.esotericsoftware.kryo.util.IntMap:boolean containsValue(java.lang.Object,boolean)",
            "com.esotericsoftware.kryo.util.IntMap:int findKey(java.lang.Object,boolean,int)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object put_internal(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object getStash(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object getStash(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object remove(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object removeStash(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsValue(java.lang.Object,boolean)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsKey(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsKeyStash(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object findKey(java.lang.Object,boolean)"
        ]
    },
    "org.apache.commons.lang.time.DurationFormatUtils$Token:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.IGMP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.pim.PIMHelloOption:java.lang.String toString()",
            "org.onlab.util.Tools:java.lang.String get(java.util.Dictionary,java.lang.String)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:java.lang.String toString(java.lang.Object)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdyHeaders:java.lang.String toString(java.lang.Object)",
            "org.jboss.netty.util.internal.StringUtil:java.lang.String stripControlCharacters(java.lang.Object)",
            "org.apache.commons.lang.builder.ReflectionToStringBuilder:java.lang.String[] toNoNullStringArray(java.lang.Object[])",
            "org.apache.commons.lang.mutable.MutableObject:java.lang.String toString()",
            "org.apache.commons.lang.ObjectUtils:java.lang.String toString(java.lang.Object)",
            "org.apache.commons.lang.ObjectUtils:java.lang.String toString(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.lang.Object[],char,int,int)",
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.lang.Object[],java.lang.String,int,int)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder append(java.lang.Object)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendFixedWidthPadLeft(java.lang.Object,int,char)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendFixedWidthPadRight(java.lang.Object,int,char)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder insert(int,java.lang.Object)",
            "org.apache.commons.lang.text.StrLookup$MapStrLookup:java.lang.String lookup(java.lang.String)",
            "org.apache.commons.lang.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Properties)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:java.lang.String toString()",
            "org.apache.commons.lang.time.DurationFormatUtils:java.lang.String format(org.apache.commons.lang.time.DurationFormatUtils$Token[],int,int,int,int,int,int,int,boolean)",
            "org.apache.commons.lang3.builder.ReflectionToStringBuilder:java.lang.String[] toNoNullStringArray(java.lang.Object[])",
            "org.apache.commons.lang3.exception.DefaultExceptionContext:java.lang.String getFormattedExceptionMessage(java.lang.String)",
            "org.apache.commons.lang3.mutable.MutableObject:java.lang.String toString()",
            "org.apache.commons.lang3.ObjectUtils:java.lang.String toString(java.lang.Object)",
            "org.apache.commons.lang3.ObjectUtils:java.lang.String toString(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder append(java.lang.Object)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadLeft(java.lang.Object,int,char)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadRight(java.lang.Object,int,char)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder insert(int,java.lang.Object)",
            "org.apache.commons.lang3.text.StrLookup$MapStrLookup:java.lang.String lookup(java.lang.String)",
            "org.apache.commons.lang3.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Properties)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:java.lang.String toString()",
            "org.apache.commons.lang3.time.DurationFormatUtils:java.lang.String format(org.apache.commons.lang3.time.DurationFormatUtils$Token[],long,long,long,long,long,long,long,boolean)"
        ]
    },
    "org.apache.commons.lang.time.DurationFormatUtils:java.lang.String format(org.apache.commons.lang.time.DurationFormatUtils$Token[],int,int,int,int,int,int,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.time.DurationFormatUtils:java.lang.String formatDuration(long,java.lang.String,boolean)",
            "org.apache.commons.lang.time.DurationFormatUtils:java.lang.String formatPeriod(long,long,java.lang.String,boolean,java.util.TimeZone)"
        ]
    },
    "org.apache.commons.lang3.builder.ReflectionToStringBuilder:java.lang.String[] toNoNullStringArray(java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.builder.ReflectionToStringBuilder:java.lang.String[] toNoNullStringArray(java.util.Collection)",
            "org.apache.commons.lang3.builder.ReflectionToStringBuilder:org.apache.commons.lang3.builder.ReflectionToStringBuilder setExcludeFieldNames(java.lang.String[])"
        ]
    },
    "org.apache.commons.lang3.mutable.MutableObject:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.IGMP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.pim.PIMHelloOption:java.lang.String toString()",
            "org.onlab.util.Tools:java.lang.String get(java.util.Dictionary,java.lang.String)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:java.lang.String toString(java.lang.Object)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdyHeaders:java.lang.String toString(java.lang.Object)",
            "org.jboss.netty.util.internal.StringUtil:java.lang.String stripControlCharacters(java.lang.Object)",
            "org.apache.commons.lang.builder.ReflectionToStringBuilder:java.lang.String[] toNoNullStringArray(java.lang.Object[])",
            "org.apache.commons.lang.mutable.MutableObject:java.lang.String toString()",
            "org.apache.commons.lang.ObjectUtils:java.lang.String toString(java.lang.Object)",
            "org.apache.commons.lang.ObjectUtils:java.lang.String toString(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.lang.Object[],char,int,int)",
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.lang.Object[],java.lang.String,int,int)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder append(java.lang.Object)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendFixedWidthPadLeft(java.lang.Object,int,char)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendFixedWidthPadRight(java.lang.Object,int,char)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder insert(int,java.lang.Object)",
            "org.apache.commons.lang.text.StrLookup$MapStrLookup:java.lang.String lookup(java.lang.String)",
            "org.apache.commons.lang.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Properties)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:java.lang.String toString()",
            "org.apache.commons.lang.time.DurationFormatUtils:java.lang.String format(org.apache.commons.lang.time.DurationFormatUtils$Token[],int,int,int,int,int,int,int,boolean)",
            "org.apache.commons.lang3.builder.ReflectionToStringBuilder:java.lang.String[] toNoNullStringArray(java.lang.Object[])",
            "org.apache.commons.lang3.exception.DefaultExceptionContext:java.lang.String getFormattedExceptionMessage(java.lang.String)",
            "org.apache.commons.lang3.mutable.MutableObject:java.lang.String toString()",
            "org.apache.commons.lang3.ObjectUtils:java.lang.String toString(java.lang.Object)",
            "org.apache.commons.lang3.ObjectUtils:java.lang.String toString(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder append(java.lang.Object)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadLeft(java.lang.Object,int,char)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadRight(java.lang.Object,int,char)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder insert(int,java.lang.Object)",
            "org.apache.commons.lang3.text.StrLookup$MapStrLookup:java.lang.String lookup(java.lang.String)",
            "org.apache.commons.lang3.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Properties)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:java.lang.String toString()",
            "org.apache.commons.lang3.time.DurationFormatUtils:java.lang.String format(org.apache.commons.lang3.time.DurationFormatUtils$Token[],long,long,long,long,long,long,long,boolean)"
        ]
    },
    "org.apache.commons.lang3.ObjectUtils:java.lang.String toString(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.StringUtils:java.lang.String join(java.util.Iterator,char)",
            "org.apache.commons.lang3.StringUtils:java.lang.String join(java.util.Iterator,java.lang.String)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendWithSeparators(java.lang.Object[],java.lang.String)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendWithSeparators(java.lang.Iterable,java.lang.String)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendWithSeparators(java.util.Iterator,java.lang.String)"
        ]
    },
    "org.apache.commons.lang3.ObjectUtils:java.lang.String toString(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder append(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendln(java.lang.Object)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendAll(java.lang.Object[])",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendAll(java.lang.Iterable)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendAll(java.util.Iterator)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendWithSeparators(java.lang.Object[],java.lang.String)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendWithSeparators(java.lang.Iterable,java.lang.String)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendWithSeparators(java.util.Iterator,java.lang.String)",
            "org.apache.commons.lang3.text.StrSubstitutor:java.lang.String replace(java.lang.Object)"
        ]
    },
    "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadLeft(java.lang.Object,int,char)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadLeft(int,int,char)"
        ]
    },
    "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadRight(java.lang.Object,int,char)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadRight(int,int,char)"
        ]
    },
    "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder insert(int,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.text.StrLookup$MapStrLookup:java.lang.String lookup(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.text.StrSubstitutor:java.lang.String resolveVariable(java.lang.String,org.apache.commons.lang3.text.StrBuilder,int,int)"
        ]
    },
    "org.apache.commons.lang3.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Properties)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.ConcurrentHashMap$EntrySet:boolean contains(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$Segment:boolean keyEq(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$Segment:boolean containsValue(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$Segment:boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$Segment:java.lang.Object remove(java.lang.Object,int,java.lang.Object,boolean)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$SimpleEntry:boolean eq(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$EntrySet:boolean contains(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$Segment:boolean containsValue(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$Segment:boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$Segment:java.lang.Object remove(java.lang.Object,int,java.lang.Object,boolean)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$SimpleEntry:boolean eq(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$EntrySet:boolean contains(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$Segment:boolean containsValue(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$Segment:boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$Segment:java.lang.Object remove(java.lang.Object,int,java.lang.Object,boolean)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$SimpleEntry:boolean eq(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$EntrySet:boolean contains(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:boolean keyEq(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:boolean containsValue(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:java.lang.Object remove(java.lang.Object,int,java.lang.Object,boolean)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$SimpleEntry:boolean eq(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang.ArrayUtils:int indexOf(java.lang.Object[],java.lang.Object,int)",
            "org.apache.commons.lang.ArrayUtils:int lastIndexOf(java.lang.Object[],java.lang.Object,int)",
            "org.apache.commons.lang.builder.EqualsBuilder:org.apache.commons.lang.builder.EqualsBuilder append(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang.IntHashMap:boolean contains(java.lang.Object)",
            "org.apache.commons.lang.mutable.MutableObject:boolean equals(java.lang.Object)",
            "org.apache.commons.lang.ObjectUtils:boolean equals(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang.time.FastDateFormat$Pair:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.AnnotationUtils:boolean memberEquals(java.lang.Class,java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang3.ArrayUtils:int indexOf(java.lang.Object[],java.lang.Object,int)",
            "org.apache.commons.lang3.ArrayUtils:int lastIndexOf(java.lang.Object[],java.lang.Object,int)",
            "org.apache.commons.lang3.builder.DiffBuilder:void <init>(java.lang.Object,java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle)",
            "org.apache.commons.lang3.builder.EqualsBuilder:org.apache.commons.lang3.builder.EqualsBuilder append(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang3.mutable.MutableObject:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.ObjectUtils:boolean equals(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang3.Range:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "com.esotericsoftware.kryo.util.IdentityMap:boolean containsValue(java.lang.Object,boolean)",
            "com.esotericsoftware.kryo.util.IdentityMap:java.lang.Object findKey(java.lang.Object,boolean)",
            "com.esotericsoftware.kryo.util.IntMap:boolean containsValue(java.lang.Object,boolean)",
            "com.esotericsoftware.kryo.util.IntMap:int findKey(java.lang.Object,boolean,int)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object put_internal(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object getStash(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object getStash(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object remove(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object removeStash(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsValue(java.lang.Object,boolean)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsKey(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsKeyStash(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object findKey(java.lang.Object,boolean)"
        ]
    },
    "org.apache.commons.lang3.time.DurationFormatUtils$Token:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.IGMP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.pim.PIMHelloOption:java.lang.String toString()",
            "org.onlab.util.Tools:java.lang.String get(java.util.Dictionary,java.lang.String)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:java.lang.String toString(java.lang.Object)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdyHeaders:java.lang.String toString(java.lang.Object)",
            "org.jboss.netty.util.internal.StringUtil:java.lang.String stripControlCharacters(java.lang.Object)",
            "org.apache.commons.lang.builder.ReflectionToStringBuilder:java.lang.String[] toNoNullStringArray(java.lang.Object[])",
            "org.apache.commons.lang.mutable.MutableObject:java.lang.String toString()",
            "org.apache.commons.lang.ObjectUtils:java.lang.String toString(java.lang.Object)",
            "org.apache.commons.lang.ObjectUtils:java.lang.String toString(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.lang.Object[],char,int,int)",
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.lang.Object[],java.lang.String,int,int)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder append(java.lang.Object)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendFixedWidthPadLeft(java.lang.Object,int,char)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendFixedWidthPadRight(java.lang.Object,int,char)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder insert(int,java.lang.Object)",
            "org.apache.commons.lang.text.StrLookup$MapStrLookup:java.lang.String lookup(java.lang.String)",
            "org.apache.commons.lang.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Properties)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:java.lang.String toString()",
            "org.apache.commons.lang.time.DurationFormatUtils:java.lang.String format(org.apache.commons.lang.time.DurationFormatUtils$Token[],int,int,int,int,int,int,int,boolean)",
            "org.apache.commons.lang3.builder.ReflectionToStringBuilder:java.lang.String[] toNoNullStringArray(java.lang.Object[])",
            "org.apache.commons.lang3.exception.DefaultExceptionContext:java.lang.String getFormattedExceptionMessage(java.lang.String)",
            "org.apache.commons.lang3.mutable.MutableObject:java.lang.String toString()",
            "org.apache.commons.lang3.ObjectUtils:java.lang.String toString(java.lang.Object)",
            "org.apache.commons.lang3.ObjectUtils:java.lang.String toString(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder append(java.lang.Object)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadLeft(java.lang.Object,int,char)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadRight(java.lang.Object,int,char)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder insert(int,java.lang.Object)",
            "org.apache.commons.lang3.text.StrLookup$MapStrLookup:java.lang.String lookup(java.lang.String)",
            "org.apache.commons.lang3.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Properties)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:java.lang.String toString()",
            "org.apache.commons.lang3.time.DurationFormatUtils:java.lang.String format(org.apache.commons.lang3.time.DurationFormatUtils$Token[],long,long,long,long,long,long,long,boolean)"
        ]
    },
    "org.apache.commons.lang3.time.DurationFormatUtils:java.lang.String format(org.apache.commons.lang3.time.DurationFormatUtils$Token[],long,long,long,long,long,long,long,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.time.DurationFormatUtils:java.lang.String formatDuration(long,java.lang.String,boolean)",
            "org.apache.commons.lang3.time.DurationFormatUtils:java.lang.String formatPeriod(long,long,java.lang.String,boolean,java.util.TimeZone)"
        ]
    },
    "org.jboss.netty.handler.codec.serialization.SoftReferenceMap:void putAll(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.enum.Enum:org.apache.commons.lang.'enum'.Enum$Entry createEntry(java.lang.Class)",
            "org.apache.commons.lang.enums.Enum:org.apache.commons.lang.enums.Enum$Entry createEntry(java.lang.Class)",
            "org.apache.commons.lang3.reflect.TypeUtils:java.lang.reflect.Type unrollVariables(java.util.Map,java.lang.reflect.Type)"
        ]
    },
    "org.jboss.netty.handler.codec.serialization.WeakReferenceMap:void putAll(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.enum.Enum:org.apache.commons.lang.'enum'.Enum$Entry createEntry(java.lang.Class)",
            "org.apache.commons.lang.enums.Enum:org.apache.commons.lang.enums.Enum$Entry createEntry(java.lang.Class)",
            "org.apache.commons.lang3.reflect.TypeUtils:java.lang.reflect.Type unrollVariables(java.util.Map,java.lang.reflect.Type)"
        ]
    },
    "org.jboss.netty.handler.codec.socks.SocksMessageEncoder:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.oneone.OneToOneEncoder:boolean doEncode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.DefaultSpdyHeadersFrame:void setHeader(java.lang.String,java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.spdy.SpdyHeaders:void setHeader(org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame,java.lang.String,java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.spdy.DefaultSpdyHeadersFrame:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.IGMP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.pim.PIMHelloOption:java.lang.String toString()",
            "org.onlab.util.Tools:java.lang.String get(java.util.Dictionary,java.lang.String)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:java.lang.String toString(java.lang.Object)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdyHeaders:java.lang.String toString(java.lang.Object)",
            "org.jboss.netty.util.internal.StringUtil:java.lang.String stripControlCharacters(java.lang.Object)",
            "org.apache.commons.lang.builder.ReflectionToStringBuilder:java.lang.String[] toNoNullStringArray(java.lang.Object[])",
            "org.apache.commons.lang.mutable.MutableObject:java.lang.String toString()",
            "org.apache.commons.lang.ObjectUtils:java.lang.String toString(java.lang.Object)",
            "org.apache.commons.lang.ObjectUtils:java.lang.String toString(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.lang.Object[],char,int,int)",
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.lang.Object[],java.lang.String,int,int)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder append(java.lang.Object)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendFixedWidthPadLeft(java.lang.Object,int,char)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendFixedWidthPadRight(java.lang.Object,int,char)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder insert(int,java.lang.Object)",
            "org.apache.commons.lang.text.StrLookup$MapStrLookup:java.lang.String lookup(java.lang.String)",
            "org.apache.commons.lang.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Properties)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:java.lang.String toString()",
            "org.apache.commons.lang.time.DurationFormatUtils:java.lang.String format(org.apache.commons.lang.time.DurationFormatUtils$Token[],int,int,int,int,int,int,int,boolean)",
            "org.apache.commons.lang3.builder.ReflectionToStringBuilder:java.lang.String[] toNoNullStringArray(java.lang.Object[])",
            "org.apache.commons.lang3.exception.DefaultExceptionContext:java.lang.String getFormattedExceptionMessage(java.lang.String)",
            "org.apache.commons.lang3.mutable.MutableObject:java.lang.String toString()",
            "org.apache.commons.lang3.ObjectUtils:java.lang.String toString(java.lang.Object)",
            "org.apache.commons.lang3.ObjectUtils:java.lang.String toString(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder append(java.lang.Object)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadLeft(java.lang.Object,int,char)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadRight(java.lang.Object,int,char)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder insert(int,java.lang.Object)",
            "org.apache.commons.lang3.text.StrLookup$MapStrLookup:java.lang.String lookup(java.lang.String)",
            "org.apache.commons.lang3.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Properties)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:java.lang.String toString()",
            "org.apache.commons.lang3.time.DurationFormatUtils:java.lang.String format(org.apache.commons.lang3.time.DurationFormatUtils$Token[],long,long,long,long,long,long,long,boolean)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.DefaultSpdySynReplyFrame:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.IGMP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.pim.PIMHelloOption:java.lang.String toString()",
            "org.onlab.util.Tools:java.lang.String get(java.util.Dictionary,java.lang.String)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:java.lang.String toString(java.lang.Object)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdyHeaders:java.lang.String toString(java.lang.Object)",
            "org.jboss.netty.util.internal.StringUtil:java.lang.String stripControlCharacters(java.lang.Object)",
            "org.apache.commons.lang.builder.ReflectionToStringBuilder:java.lang.String[] toNoNullStringArray(java.lang.Object[])",
            "org.apache.commons.lang.mutable.MutableObject:java.lang.String toString()",
            "org.apache.commons.lang.ObjectUtils:java.lang.String toString(java.lang.Object)",
            "org.apache.commons.lang.ObjectUtils:java.lang.String toString(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.lang.Object[],char,int,int)",
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.lang.Object[],java.lang.String,int,int)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder append(java.lang.Object)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendFixedWidthPadLeft(java.lang.Object,int,char)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendFixedWidthPadRight(java.lang.Object,int,char)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder insert(int,java.lang.Object)",
            "org.apache.commons.lang.text.StrLookup$MapStrLookup:java.lang.String lookup(java.lang.String)",
            "org.apache.commons.lang.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Properties)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:java.lang.String toString()",
            "org.apache.commons.lang.time.DurationFormatUtils:java.lang.String format(org.apache.commons.lang.time.DurationFormatUtils$Token[],int,int,int,int,int,int,int,boolean)",
            "org.apache.commons.lang3.builder.ReflectionToStringBuilder:java.lang.String[] toNoNullStringArray(java.lang.Object[])",
            "org.apache.commons.lang3.exception.DefaultExceptionContext:java.lang.String getFormattedExceptionMessage(java.lang.String)",
            "org.apache.commons.lang3.mutable.MutableObject:java.lang.String toString()",
            "org.apache.commons.lang3.ObjectUtils:java.lang.String toString(java.lang.Object)",
            "org.apache.commons.lang3.ObjectUtils:java.lang.String toString(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder append(java.lang.Object)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadLeft(java.lang.Object,int,char)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadRight(java.lang.Object,int,char)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder insert(int,java.lang.Object)",
            "org.apache.commons.lang3.text.StrLookup$MapStrLookup:java.lang.String lookup(java.lang.String)",
            "org.apache.commons.lang3.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Properties)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:java.lang.String toString()",
            "org.apache.commons.lang3.time.DurationFormatUtils:java.lang.String format(org.apache.commons.lang3.time.DurationFormatUtils$Token[],long,long,long,long,long,long,long,boolean)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.DefaultSpdySynStreamFrame:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.IGMP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.pim.PIMHelloOption:java.lang.String toString()",
            "org.onlab.util.Tools:java.lang.String get(java.util.Dictionary,java.lang.String)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:java.lang.String toString(java.lang.Object)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdyHeaders:java.lang.String toString(java.lang.Object)",
            "org.jboss.netty.util.internal.StringUtil:java.lang.String stripControlCharacters(java.lang.Object)",
            "org.apache.commons.lang.builder.ReflectionToStringBuilder:java.lang.String[] toNoNullStringArray(java.lang.Object[])",
            "org.apache.commons.lang.mutable.MutableObject:java.lang.String toString()",
            "org.apache.commons.lang.ObjectUtils:java.lang.String toString(java.lang.Object)",
            "org.apache.commons.lang.ObjectUtils:java.lang.String toString(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.lang.Object[],char,int,int)",
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.lang.Object[],java.lang.String,int,int)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder append(java.lang.Object)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendFixedWidthPadLeft(java.lang.Object,int,char)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendFixedWidthPadRight(java.lang.Object,int,char)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder insert(int,java.lang.Object)",
            "org.apache.commons.lang.text.StrLookup$MapStrLookup:java.lang.String lookup(java.lang.String)",
            "org.apache.commons.lang.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Properties)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:java.lang.String toString()",
            "org.apache.commons.lang.time.DurationFormatUtils:java.lang.String format(org.apache.commons.lang.time.DurationFormatUtils$Token[],int,int,int,int,int,int,int,boolean)",
            "org.apache.commons.lang3.builder.ReflectionToStringBuilder:java.lang.String[] toNoNullStringArray(java.lang.Object[])",
            "org.apache.commons.lang3.exception.DefaultExceptionContext:java.lang.String getFormattedExceptionMessage(java.lang.String)",
            "org.apache.commons.lang3.mutable.MutableObject:java.lang.String toString()",
            "org.apache.commons.lang3.ObjectUtils:java.lang.String toString(java.lang.Object)",
            "org.apache.commons.lang3.ObjectUtils:java.lang.String toString(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder append(java.lang.Object)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadLeft(java.lang.Object,int,char)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadRight(java.lang.Object,int,char)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder insert(int,java.lang.Object)",
            "org.apache.commons.lang3.text.StrLookup$MapStrLookup:java.lang.String lookup(java.lang.String)",
            "org.apache.commons.lang3.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Properties)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:java.lang.String toString()",
            "org.apache.commons.lang3.time.DurationFormatUtils:java.lang.String format(org.apache.commons.lang3.time.DurationFormatUtils$Token[],long,long,long,long,long,long,long,boolean)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.IGMP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.pim.PIMHelloOption:java.lang.String toString()",
            "org.onlab.util.Tools:java.lang.String get(java.util.Dictionary,java.lang.String)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:java.lang.String toString(java.lang.Object)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdyHeaders:java.lang.String toString(java.lang.Object)",
            "org.jboss.netty.util.internal.StringUtil:java.lang.String stripControlCharacters(java.lang.Object)",
            "org.apache.commons.lang.builder.ReflectionToStringBuilder:java.lang.String[] toNoNullStringArray(java.lang.Object[])",
            "org.apache.commons.lang.mutable.MutableObject:java.lang.String toString()",
            "org.apache.commons.lang.ObjectUtils:java.lang.String toString(java.lang.Object)",
            "org.apache.commons.lang.ObjectUtils:java.lang.String toString(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.lang.Object[],char,int,int)",
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.lang.Object[],java.lang.String,int,int)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder append(java.lang.Object)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendFixedWidthPadLeft(java.lang.Object,int,char)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendFixedWidthPadRight(java.lang.Object,int,char)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder insert(int,java.lang.Object)",
            "org.apache.commons.lang.text.StrLookup$MapStrLookup:java.lang.String lookup(java.lang.String)",
            "org.apache.commons.lang.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Properties)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:java.lang.String toString()",
            "org.apache.commons.lang.time.DurationFormatUtils:java.lang.String format(org.apache.commons.lang.time.DurationFormatUtils$Token[],int,int,int,int,int,int,int,boolean)",
            "org.apache.commons.lang3.builder.ReflectionToStringBuilder:java.lang.String[] toNoNullStringArray(java.lang.Object[])",
            "org.apache.commons.lang3.exception.DefaultExceptionContext:java.lang.String getFormattedExceptionMessage(java.lang.String)",
            "org.apache.commons.lang3.mutable.MutableObject:java.lang.String toString()",
            "org.apache.commons.lang3.ObjectUtils:java.lang.String toString(java.lang.Object)",
            "org.apache.commons.lang3.ObjectUtils:java.lang.String toString(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder append(java.lang.Object)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadLeft(java.lang.Object,int,char)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadRight(java.lang.Object,int,char)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder insert(int,java.lang.Object)",
            "org.apache.commons.lang3.text.StrLookup$MapStrLookup:java.lang.String lookup(java.lang.String)",
            "org.apache.commons.lang3.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Properties)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:java.lang.String toString()",
            "org.apache.commons.lang3.time.DurationFormatUtils:java.lang.String format(org.apache.commons.lang3.time.DurationFormatUtils$Token[],long,long,long,long,long,long,long,boolean)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.SpdyHeaderBlockJZlibEncoder:org.jboss.netty.buffer.ChannelBuffer encode(org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.spdy.SpdyFrameEncoder:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.SpdyHeaderBlockZlibEncoder:org.jboss.netty.buffer.ChannelBuffer encode(org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.spdy.SpdyFrameEncoder:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:void updateInitialSendWindowSize(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:void updateInitialReceiveWindowSize(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentHashMap:void <init>(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.enum.Enum:org.apache.commons.lang.'enum'.Enum$Entry createEntry(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.enum.Enum:void init(java.lang.String)"
        ]
    },
    "org.apache.commons.lang.enums.Enum:org.apache.commons.lang.enums.Enum$Entry createEntry(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.enums.Enum:void init(java.lang.String)"
        ]
    },
    "org.apache.commons.lang3.reflect.TypeUtils:java.lang.reflect.Type unrollVariables(java.util.Map,java.lang.reflect.Type)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.reflect.MethodUtils:java.util.Set getOverrideHierarchy(java.lang.reflect.Method,org.apache.commons.lang3.ClassUtils$Interfaces)",
            "org.apache.commons.lang3.reflect.TypeUtils:java.lang.reflect.Type unrollVariables(java.util.Map,java.lang.reflect.Type)",
            "org.apache.commons.lang3.reflect.TypeUtils:java.lang.reflect.Type[] unrollBounds(java.util.Map,java.lang.reflect.Type[])"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentIdentityHashMap:void <init>(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap:void <init>(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap:void <init>(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.channel.socket.http.HttpTunnelingSocketChannelConfig:boolean setOption(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.http.HttpTunnelingSocketChannelConfig:void setOptions(java.util.Map)",
            "org.jboss.netty.channel.socket.http.HttpTunnelingSocketChannelConfig:boolean setOption(java.lang.String,java.lang.Object)"
        ]
    },
    "org.apache.commons.lang.builder.ToStringStyle:java.lang.String getShortClassName(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.builder.ToStringStyle:void appendSummary(java.lang.StringBuffer,java.lang.String,java.lang.Object)",
            "org.apache.commons.lang.builder.ToStringStyle:void appendClassName(java.lang.StringBuffer,java.lang.Object)"
        ]
    },
    "org.apache.commons.lang.ClassUtils:void addAbbreviation(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.ClassUtils:void <clinit>()"
        ]
    },
    "org.apache.commons.lang.ClassUtils:java.lang.String getShortClassName(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.exception.ExceptionUtils:java.lang.String getMessage(java.lang.Throwable)"
        ]
    },
    "org.apache.commons.lang.ClassUtils:java.lang.String getShortClassName(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.builder.ToStringStyle:java.lang.String getShortClassName(java.lang.Class)",
            "org.apache.commons.lang.ClassUtils:java.lang.String getShortClassName(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang.enum.Enum:int compareTo(java.lang.Object)",
            "org.apache.commons.lang.enum.Enum:java.lang.String toString()",
            "org.apache.commons.lang.enum.ValuedEnum:java.lang.String toString()",
            "org.apache.commons.lang.enums.Enum:int compareTo(java.lang.Object)",
            "org.apache.commons.lang.enums.Enum:java.lang.String toString()",
            "org.apache.commons.lang.enums.ValuedEnum:int compareTo(java.lang.Object)",
            "org.apache.commons.lang.enums.ValuedEnum:java.lang.String toString()"
        ]
    },
    "org.apache.commons.lang.ClassUtils:java.lang.String getShortClassName(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.ClassUtils:java.lang.String getShortClassName(java.lang.Class)",
            "org.apache.commons.lang.ClassUtils:java.lang.String getShortCanonicalName(java.lang.String)"
        ]
    },
    "org.apache.commons.lang.ClassUtils:java.lang.String getPackageName(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.ClassUtils:java.lang.String getPackageName(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.ClassUtils:java.lang.String getPackageName(java.lang.Object,java.lang.String)"
        ]
    },
    "org.apache.commons.lang.ClassUtils:java.util.List getAllInterfaces(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.ClassUtils:java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])",
            "org.apache.commons.lang.reflect.FieldUtils:java.lang.reflect.Field getField(java.lang.Class,java.lang.String,boolean)"
        ]
    },
    "org.apache.commons.lang.ClassUtils:void getAllInterfaces(java.lang.Class,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.ClassUtils:java.util.List getAllInterfaces(java.lang.Class)",
            "org.apache.commons.lang.ClassUtils:void getAllInterfaces(java.lang.Class,java.util.List)"
        ]
    },
    "org.apache.commons.lang.ClassUtils:boolean isAssignable(java.lang.Class[],java.lang.Class[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.ClassUtils:boolean isAssignable(java.lang.Class[],java.lang.Class[],boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.ClassUtils:boolean isAssignable(java.lang.Class[],java.lang.Class[])",
            "org.apache.commons.lang.reflect.ConstructorUtils:java.lang.reflect.Constructor getMatchingAccessibleConstructor(java.lang.Class,java.lang.Class[])",
            "org.apache.commons.lang.reflect.MethodUtils:java.lang.reflect.Method getMatchingAccessibleMethod(java.lang.Class,java.lang.String,java.lang.Class[])"
        ]
    },
    "org.apache.commons.lang.ClassUtils:boolean isAssignable(java.lang.Class,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.reflect.MemberUtils:float getObjectTransformationCost(java.lang.Class,java.lang.Class)"
        ]
    },
    "org.apache.commons.lang.ClassUtils:boolean isAssignable(java.lang.Class,java.lang.Class,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.ClassUtils:boolean isAssignable(java.lang.Class[],java.lang.Class[],boolean)",
            "org.apache.commons.lang.ClassUtils:boolean isAssignable(java.lang.Class,java.lang.Class)"
        ]
    },
    "org.apache.commons.lang.ClassUtils:java.lang.Class primitiveToWrapper(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.ClassUtils:boolean isAssignable(java.lang.Class,java.lang.Class,boolean)",
            "org.apache.commons.lang.ClassUtils:java.lang.Class[] primitivesToWrappers(java.lang.Class[])"
        ]
    },
    "org.apache.commons.lang.ClassUtils:java.lang.Class[] primitivesToWrappers(java.lang.Class[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.ClassUtils:java.lang.Class wrapperToPrimitive(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.ClassUtils:boolean isAssignable(java.lang.Class,java.lang.Class,boolean)",
            "org.apache.commons.lang.ClassUtils:java.lang.Class[] wrappersToPrimitives(java.lang.Class[])",
            "org.apache.commons.lang.reflect.MemberUtils:float getPrimitivePromotionCost(java.lang.Class,java.lang.Class)"
        ]
    },
    "org.apache.commons.lang.ClassUtils:java.lang.Class[] wrappersToPrimitives(java.lang.Class[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.ClassUtils:java.lang.Class getClass(java.lang.ClassLoader,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.ClassUtils:java.lang.Class getClass(java.lang.ClassLoader,java.lang.String,boolean)",
            "org.apache.commons.lang.ClassUtils:java.lang.Class getClass(java.lang.ClassLoader,java.lang.String)",
            "org.apache.commons.lang.ClassUtils:java.lang.Class getClass(java.lang.String,boolean)"
        ]
    },
    "org.apache.commons.lang.ClassUtils:java.lang.Class getClass(java.lang.ClassLoader,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.ClassUtils:java.lang.Class getClass(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.ClassUtils:java.lang.Class getClass(java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.ClassUtils:java.lang.Class getClass(java.lang.String)"
        ]
    },
    "org.apache.commons.lang.ClassUtils:java.lang.String toCanonicalName(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.ClassUtils:java.lang.Class getClass(java.lang.ClassLoader,java.lang.String,boolean)"
        ]
    },
    "org.apache.commons.lang.ClassUtils:java.lang.String getShortCanonicalName(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.ClassUtils:java.lang.String getShortCanonicalName(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.ClassUtils:java.lang.String getShortCanonicalName(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.ClassUtils:java.lang.String getShortCanonicalName(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang.ClassUtils:java.lang.String getShortCanonicalName(java.lang.Class)"
        ]
    },
    "org.apache.commons.lang.ClassUtils:java.lang.String getPackageCanonicalName(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.ClassUtils:java.lang.String getPackageCanonicalName(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.ClassUtils:java.lang.String getPackageCanonicalName(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.ClassUtils:java.lang.String getPackageCanonicalName(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang.ClassUtils:java.lang.String getPackageCanonicalName(java.lang.Class)"
        ]
    },
    "org.apache.commons.lang.ClassUtils:java.lang.String getCanonicalName(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.ClassUtils:java.lang.String getShortCanonicalName(java.lang.String)",
            "org.apache.commons.lang.ClassUtils:java.lang.String getPackageCanonicalName(java.lang.String)"
        ]
    },
    "org.apache.commons.lang.enum.Enum:int compareTo(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.enum.Enum:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.enum.ValuedEnum:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.enums.Enum:int compareTo(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.enums.Enum:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.enums.ValuedEnum:int compareTo(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.enums.ValuedEnum:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.exception.ExceptionUtils:java.lang.String getMessage(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.exception.ExceptionUtils:java.lang.String getRootCauseMessage(java.lang.Throwable)"
        ]
    },
    "org.apache.commons.lang.reflect.ConstructorUtils:java.lang.reflect.Constructor getMatchingAccessibleConstructor(java.lang.Class,java.lang.Class[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.reflect.ConstructorUtils:java.lang.Object invokeConstructor(java.lang.Class,java.lang.Object[],java.lang.Class[])"
        ]
    },
    "org.apache.commons.lang.reflect.MemberUtils:float getObjectTransformationCost(java.lang.Class,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.reflect.MemberUtils:float getTotalTransformationCost(java.lang.Class[],java.lang.Class[])"
        ]
    },
    "org.apache.commons.lang.reflect.MemberUtils:float getPrimitivePromotionCost(java.lang.Class,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.reflect.MemberUtils:float getObjectTransformationCost(java.lang.Class,java.lang.Class)"
        ]
    },
    "org.apache.commons.lang.reflect.MethodUtils:java.lang.reflect.Method getMatchingAccessibleMethod(java.lang.Class,java.lang.String,java.lang.Class[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.reflect.MethodUtils:java.lang.Object invokeMethod(java.lang.Object,java.lang.String,java.lang.Object[],java.lang.Class[])",
            "org.apache.commons.lang.reflect.MethodUtils:java.lang.Object invokeStaticMethod(java.lang.Class,java.lang.String,java.lang.Object[],java.lang.Class[])"
        ]
    },
    "org.apache.commons.lang.enum.EnumUtils:org.apache.commons.lang.'enum'.ValuedEnum getEnum(java.lang.Class,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.enums.EnumUtils:org.apache.commons.lang.enums.ValuedEnum getEnum(java.lang.Class,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.exception.NestableDelegate:void printStackTrace(java.io.PrintStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.exception.NestableDelegate:void printStackTrace()",
            "org.apache.commons.lang.exception.NestableError:void printStackTrace(java.io.PrintStream)",
            "org.apache.commons.lang.exception.NestableException:void printStackTrace(java.io.PrintStream)",
            "org.apache.commons.lang.exception.NestableRuntimeException:void printStackTrace(java.io.PrintStream)",
            "org.apache.commons.lang.NotImplementedException:void printStackTrace(java.io.PrintStream)"
        ]
    },
    "org.apache.commons.lang.exception.NestableError:void printStackTrace(java.io.PrintWriter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.exception.ExceptionUtils:java.lang.String getFullStackTrace(java.lang.Throwable)",
            "org.apache.commons.lang.exception.ExceptionUtils:java.lang.String getStackTrace(java.lang.Throwable)",
            "org.apache.commons.lang.exception.NestableDelegate:void printStackTrace(java.io.PrintWriter)",
            "org.apache.commons.lang.exception.NestableDelegate:java.lang.String[] getStackFrames(java.lang.Throwable)",
            "org.apache.commons.lang3.exception.ExceptionUtils:java.lang.String getStackTrace(java.lang.Throwable)",
            "com.esotericsoftware.minlog.Log$Logger:void log(int,java.lang.String,java.lang.String,java.lang.Throwable)"
        ]
    },
    "org.apache.commons.lang.exception.NestableException:void printStackTrace(java.io.PrintWriter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.exception.ExceptionUtils:java.lang.String getFullStackTrace(java.lang.Throwable)",
            "org.apache.commons.lang.exception.ExceptionUtils:java.lang.String getStackTrace(java.lang.Throwable)",
            "org.apache.commons.lang.exception.NestableDelegate:void printStackTrace(java.io.PrintWriter)",
            "org.apache.commons.lang.exception.NestableDelegate:java.lang.String[] getStackFrames(java.lang.Throwable)",
            "org.apache.commons.lang3.exception.ExceptionUtils:java.lang.String getStackTrace(java.lang.Throwable)",
            "com.esotericsoftware.minlog.Log$Logger:void log(int,java.lang.String,java.lang.String,java.lang.Throwable)"
        ]
    },
    "org.apache.commons.lang.exception.NestableRuntimeException:void printStackTrace(java.io.PrintWriter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.exception.ExceptionUtils:java.lang.String getFullStackTrace(java.lang.Throwable)",
            "org.apache.commons.lang.exception.ExceptionUtils:java.lang.String getStackTrace(java.lang.Throwable)",
            "org.apache.commons.lang.exception.NestableDelegate:void printStackTrace(java.io.PrintWriter)",
            "org.apache.commons.lang.exception.NestableDelegate:java.lang.String[] getStackFrames(java.lang.Throwable)",
            "org.apache.commons.lang3.exception.ExceptionUtils:java.lang.String getStackTrace(java.lang.Throwable)",
            "com.esotericsoftware.minlog.Log$Logger:void log(int,java.lang.String,java.lang.String,java.lang.Throwable)"
        ]
    },
    "org.apache.commons.lang.NotImplementedException:void printStackTrace(java.io.PrintWriter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.exception.ExceptionUtils:java.lang.String getFullStackTrace(java.lang.Throwable)",
            "org.apache.commons.lang.exception.ExceptionUtils:java.lang.String getStackTrace(java.lang.Throwable)",
            "org.apache.commons.lang.exception.NestableDelegate:void printStackTrace(java.io.PrintWriter)",
            "org.apache.commons.lang.exception.NestableDelegate:java.lang.String[] getStackFrames(java.lang.Throwable)",
            "org.apache.commons.lang3.exception.ExceptionUtils:java.lang.String getStackTrace(java.lang.Throwable)",
            "com.esotericsoftware.minlog.Log$Logger:void log(int,java.lang.String,java.lang.String,java.lang.Throwable)"
        ]
    },
    "org.apache.commons.lang.reflect.FieldUtils:java.lang.reflect.Field getField(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.reflect.FieldUtils:java.lang.Object readStaticField(java.lang.Class,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.reflect.FieldUtils:java.lang.Object readStaticField(java.lang.Class,java.lang.String)"
        ]
    },
    "org.apache.commons.lang.reflect.FieldUtils:java.lang.Object readField(java.lang.Object,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.reflect.FieldUtils:java.lang.Object readField(java.lang.Object,java.lang.String)"
        ]
    },
    "org.apache.commons.lang.reflect.FieldUtils:void writeStaticField(java.lang.Class,java.lang.String,java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.reflect.FieldUtils:void writeStaticField(java.lang.Class,java.lang.String,java.lang.Object)"
        ]
    },
    "org.apache.commons.lang.reflect.FieldUtils:void writeField(java.lang.Object,java.lang.String,java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.reflect.FieldUtils:void writeField(java.lang.Object,java.lang.String,java.lang.Object)"
        ]
    },
    "org.apache.commons.lang.StringUtils:java.lang.String join(java.util.Collection,char)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.StringUtils:java.lang.String join(java.util.Collection,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.text.ExtendedMessageFormat:void <init>(java.lang.String,java.util.Locale,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.text.ExtendedMessageFormat:void <init>(java.lang.String,java.util.Locale)",
            "org.apache.commons.lang.text.ExtendedMessageFormat:void <init>(java.lang.String,java.util.Map)"
        ]
    },
    "org.apache.commons.lang.text.ExtendedMessageFormat:java.lang.String insertFormats(java.lang.String,java.util.ArrayList)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.text.ExtendedMessageFormat:void applyPattern(java.lang.String)"
        ]
    },
    "org.apache.commons.lang.text.StrSubstitutor:void checkCyclicSubstitution(java.lang.String,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.text.StrSubstitutor:int substitute(org.apache.commons.lang.text.StrBuilder,int,int,java.util.List)"
        ]
    },
    "org.apache.commons.lang3.builder.ToStringStyle:void appendSummary(java.lang.StringBuffer,java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.builder.ToStringStyle:void appendInternal(java.lang.StringBuffer,java.lang.String,java.lang.Object,boolean)"
        ]
    },
    "org.apache.commons.lang3.builder.ToStringStyle:void appendClassName(java.lang.StringBuffer,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.builder.RecursiveToStringStyle:void appendDetail(java.lang.StringBuffer,java.lang.String,java.util.Collection)",
            "org.apache.commons.lang3.builder.ToStringStyle:void appendStart(java.lang.StringBuffer,java.lang.Object)"
        ]
    },
    "org.apache.commons.lang3.builder.DiffResult:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.IGMP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.pim.PIMHelloOption:java.lang.String toString()",
            "org.onlab.util.Tools:java.lang.String get(java.util.Dictionary,java.lang.String)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:java.lang.String toString(java.lang.Object)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdyHeaders:java.lang.String toString(java.lang.Object)",
            "org.jboss.netty.util.internal.StringUtil:java.lang.String stripControlCharacters(java.lang.Object)",
            "org.apache.commons.lang.builder.ReflectionToStringBuilder:java.lang.String[] toNoNullStringArray(java.lang.Object[])",
            "org.apache.commons.lang.mutable.MutableObject:java.lang.String toString()",
            "org.apache.commons.lang.ObjectUtils:java.lang.String toString(java.lang.Object)",
            "org.apache.commons.lang.ObjectUtils:java.lang.String toString(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.lang.Object[],char,int,int)",
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.lang.Object[],java.lang.String,int,int)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder append(java.lang.Object)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendFixedWidthPadLeft(java.lang.Object,int,char)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendFixedWidthPadRight(java.lang.Object,int,char)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder insert(int,java.lang.Object)",
            "org.apache.commons.lang.text.StrLookup$MapStrLookup:java.lang.String lookup(java.lang.String)",
            "org.apache.commons.lang.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Properties)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:java.lang.String toString()",
            "org.apache.commons.lang.time.DurationFormatUtils:java.lang.String format(org.apache.commons.lang.time.DurationFormatUtils$Token[],int,int,int,int,int,int,int,boolean)",
            "org.apache.commons.lang3.builder.ReflectionToStringBuilder:java.lang.String[] toNoNullStringArray(java.lang.Object[])",
            "org.apache.commons.lang3.exception.DefaultExceptionContext:java.lang.String getFormattedExceptionMessage(java.lang.String)",
            "org.apache.commons.lang3.mutable.MutableObject:java.lang.String toString()",
            "org.apache.commons.lang3.ObjectUtils:java.lang.String toString(java.lang.Object)",
            "org.apache.commons.lang3.ObjectUtils:java.lang.String toString(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder append(java.lang.Object)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadLeft(java.lang.Object,int,char)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadRight(java.lang.Object,int,char)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder insert(int,java.lang.Object)",
            "org.apache.commons.lang3.text.StrLookup$MapStrLookup:java.lang.String lookup(java.lang.String)",
            "org.apache.commons.lang3.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Properties)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:java.lang.String toString()",
            "org.apache.commons.lang3.time.DurationFormatUtils:java.lang.String format(org.apache.commons.lang3.time.DurationFormatUtils$Token[],long,long,long,long,long,long,long,boolean)"
        ]
    },
    "org.apache.commons.lang3.builder.RecursiveToStringStyle:void appendDetail(java.lang.StringBuffer,java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.builder.ToStringStyle:void appendInternal(java.lang.StringBuffer,java.lang.String,java.lang.Object,boolean)"
        ]
    },
    "org.apache.commons.lang3.builder.ToStringStyle:java.lang.String getShortClassName(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.builder.ToStringStyle:void appendSummary(java.lang.StringBuffer,java.lang.String,java.lang.Object)",
            "org.apache.commons.lang3.builder.ToStringStyle:void appendClassName(java.lang.StringBuffer,java.lang.Object)"
        ]
    },
    "org.apache.commons.lang3.ClassUtils:java.lang.String getShortClassName(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.exception.ExceptionUtils:java.lang.String getMessage(java.lang.Throwable)"
        ]
    },
    "org.apache.commons.lang3.ClassUtils:java.lang.String getShortClassName(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.builder.ToStringStyle:java.lang.String getShortClassName(java.lang.Class)",
            "org.apache.commons.lang3.ClassUtils:java.lang.String getShortClassName(java.lang.Object,java.lang.String)"
        ]
    },
    "org.apache.commons.lang3.ClassUtils:java.lang.String getShortClassName(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.ClassUtils:java.lang.String getShortClassName(java.lang.Class)",
            "org.apache.commons.lang3.ClassUtils:java.lang.String getShortCanonicalName(java.lang.String)"
        ]
    },
    "org.apache.commons.lang3.ClassUtils:java.lang.String getSimpleName(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.ClassUtils:java.lang.String getPackageName(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.ClassUtils:java.lang.String getPackageName(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.ClassUtils:java.lang.String getPackageName(java.lang.Object,java.lang.String)"
        ]
    },
    "org.apache.commons.lang3.ClassUtils:java.util.List getAllInterfaces(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.AnnotationUtils$1:java.lang.String getShortClassName(java.lang.Class)",
            "org.apache.commons.lang3.ClassUtils:java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])",
            "org.apache.commons.lang3.reflect.FieldUtils:java.lang.reflect.Field getField(java.lang.Class,java.lang.String,boolean)"
        ]
    },
    "org.apache.commons.lang3.ClassUtils:void getAllInterfaces(java.lang.Class,java.util.HashSet)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.ClassUtils:java.util.List getAllInterfaces(java.lang.Class)",
            "org.apache.commons.lang3.ClassUtils:void getAllInterfaces(java.lang.Class,java.util.HashSet)"
        ]
    },
    "org.apache.commons.lang3.ClassUtils:boolean isAssignable(java.lang.Class[],java.lang.Class[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.ClassUtils:boolean isAssignable(java.lang.Class[],java.lang.Class[],boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.ClassUtils:boolean isAssignable(java.lang.Class[],java.lang.Class[])",
            "org.apache.commons.lang3.reflect.ConstructorUtils:java.lang.reflect.Constructor getMatchingAccessibleConstructor(java.lang.Class,java.lang.Class[])",
            "org.apache.commons.lang3.reflect.MethodUtils:java.lang.reflect.Method getMatchingAccessibleMethod(java.lang.Class,java.lang.String,java.lang.Class[])"
        ]
    },
    "org.apache.commons.lang3.ClassUtils:boolean isPrimitiveOrWrapper(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.ClassUtils:boolean isPrimitiveWrapper(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.builder.RecursiveToStringStyle:void appendDetail(java.lang.StringBuffer,java.lang.String,java.lang.Object)",
            "org.apache.commons.lang3.ClassUtils:boolean isPrimitiveOrWrapper(java.lang.Class)"
        ]
    },
    "org.apache.commons.lang3.ClassUtils:boolean isAssignable(java.lang.Class,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.reflect.MemberUtils:float getObjectTransformationCost(java.lang.Class,java.lang.Class)",
            "org.apache.commons.lang3.reflect.TypeUtils:boolean isAssignable(java.lang.reflect.Type,java.lang.Class)"
        ]
    },
    "org.apache.commons.lang3.ClassUtils:boolean isAssignable(java.lang.Class,java.lang.Class,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.ClassUtils:boolean isAssignable(java.lang.Class[],java.lang.Class[],boolean)",
            "org.apache.commons.lang3.ClassUtils:boolean isAssignable(java.lang.Class,java.lang.Class)"
        ]
    },
    "org.apache.commons.lang3.ClassUtils:java.lang.Class primitiveToWrapper(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.ClassUtils:boolean isAssignable(java.lang.Class,java.lang.Class,boolean)",
            "org.apache.commons.lang3.ClassUtils:java.lang.Class[] primitivesToWrappers(java.lang.Class[])",
            "org.apache.commons.lang3.reflect.TypeUtils:java.util.Map getTypeArguments(java.lang.Class,java.lang.Class,java.util.Map)"
        ]
    },
    "org.apache.commons.lang3.ClassUtils:java.lang.Class[] primitivesToWrappers(java.lang.Class[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.ClassUtils:java.lang.Class wrapperToPrimitive(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.ClassUtils:boolean isAssignable(java.lang.Class,java.lang.Class,boolean)",
            "org.apache.commons.lang3.ClassUtils:java.lang.Class[] wrappersToPrimitives(java.lang.Class[])",
            "org.apache.commons.lang3.reflect.MemberUtils:float getPrimitivePromotionCost(java.lang.Class,java.lang.Class)"
        ]
    },
    "org.apache.commons.lang3.ClassUtils:java.lang.Class[] wrappersToPrimitives(java.lang.Class[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.ClassUtils:java.lang.Class getClass(java.lang.ClassLoader,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.ClassUtils:java.lang.Class getClass(java.lang.ClassLoader,java.lang.String,boolean)",
            "org.apache.commons.lang3.ClassUtils:java.lang.Class getClass(java.lang.ClassLoader,java.lang.String)",
            "org.apache.commons.lang3.ClassUtils:java.lang.Class getClass(java.lang.String,boolean)"
        ]
    },
    "org.apache.commons.lang3.ClassUtils:java.lang.Class getClass(java.lang.ClassLoader,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.ClassUtils:java.lang.Class getClass(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.ClassUtils:java.lang.Class getClass(java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.ClassUtils:java.lang.Class getClass(java.lang.String)"
        ]
    },
    "org.apache.commons.lang3.ClassUtils:java.lang.String toCanonicalName(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.ClassUtils:java.lang.Class getClass(java.lang.ClassLoader,java.lang.String,boolean)"
        ]
    },
    "org.apache.commons.lang3.ClassUtils:java.lang.String getShortCanonicalName(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.ClassUtils:java.lang.String getShortCanonicalName(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.ClassUtils:java.lang.String getShortCanonicalName(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.ClassUtils:java.lang.String getShortCanonicalName(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang3.ClassUtils:java.lang.String getShortCanonicalName(java.lang.Class)"
        ]
    },
    "org.apache.commons.lang3.ClassUtils:java.lang.String getPackageCanonicalName(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.ClassUtils:java.lang.String getPackageCanonicalName(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.ClassUtils:java.lang.String getPackageCanonicalName(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.ClassUtils:java.lang.String getPackageCanonicalName(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang3.ClassUtils:java.lang.String getPackageCanonicalName(java.lang.Class)"
        ]
    },
    "org.apache.commons.lang3.ClassUtils:java.lang.String getCanonicalName(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.ClassUtils:java.lang.String getShortCanonicalName(java.lang.String)",
            "org.apache.commons.lang3.ClassUtils:java.lang.String getPackageCanonicalName(java.lang.String)"
        ]
    },
    "org.apache.commons.lang3.ClassUtils:java.lang.Iterable hierarchy(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.exception.ExceptionUtils:java.lang.String getMessage(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.exception.ExceptionUtils:java.lang.String getRootCauseMessage(java.lang.Throwable)"
        ]
    },
    "org.apache.commons.lang3.reflect.ConstructorUtils:java.lang.Object invokeConstructor(java.lang.Class,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.reflect.ConstructorUtils:java.lang.Object invokeExactConstructor(java.lang.Class,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.reflect.ConstructorUtils:java.lang.reflect.Constructor getMatchingAccessibleConstructor(java.lang.Class,java.lang.Class[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.reflect.ConstructorUtils:java.lang.Object invokeConstructor(java.lang.Class,java.lang.Object[],java.lang.Class[])"
        ]
    },
    "org.apache.commons.lang3.reflect.MemberUtils:float getObjectTransformationCost(java.lang.Class,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.reflect.MemberUtils:float getTotalTransformationCost(java.lang.Class[],java.lang.Class[])"
        ]
    },
    "org.apache.commons.lang3.reflect.MemberUtils:float getPrimitivePromotionCost(java.lang.Class,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.reflect.MemberUtils:float getObjectTransformationCost(java.lang.Class,java.lang.Class)"
        ]
    },
    "org.apache.commons.lang3.reflect.MethodUtils:java.lang.Object invokeMethod(java.lang.Object,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.event.EventUtils$EventBindingInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.commons.lang3.event.EventUtils:void addEventListener(java.lang.Object,java.lang.Class,java.lang.Object)"
        ]
    },
    "org.apache.commons.lang3.reflect.MethodUtils:java.lang.Object invokeExactMethod(java.lang.Object,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.reflect.MethodUtils:java.lang.Object invokeStaticMethod(java.lang.Class,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.reflect.MethodUtils:java.lang.Object invokeExactStaticMethod(java.lang.Class,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.reflect.MethodUtils:java.lang.reflect.Method getMatchingAccessibleMethod(java.lang.Class,java.lang.String,java.lang.Class[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.reflect.MethodUtils:java.lang.Object invokeMethod(java.lang.Object,java.lang.String,java.lang.Object[],java.lang.Class[])",
            "org.apache.commons.lang3.reflect.MethodUtils:java.lang.Object invokeStaticMethod(java.lang.Class,java.lang.String,java.lang.Object[],java.lang.Class[])",
            "org.apache.commons.lang3.reflect.MethodUtils:java.util.Set getOverrideHierarchy(java.lang.reflect.Method,org.apache.commons.lang3.ClassUtils$Interfaces)"
        ]
    },
    "org.apache.commons.lang3.reflect.TypeUtils:boolean isAssignable(java.lang.reflect.Type,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.reflect.TypeUtils:boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type,java.util.Map)",
            "org.apache.commons.lang3.reflect.TypeUtils:boolean isAssignable(java.lang.reflect.Type,java.lang.Class)",
            "org.apache.commons.lang3.reflect.TypeUtils:java.util.Map getTypeArguments(java.lang.reflect.Type,java.lang.Class,java.util.Map)",
            "org.apache.commons.lang3.reflect.TypeUtils:java.util.Map getTypeArguments(java.lang.reflect.ParameterizedType,java.lang.Class,java.util.Map)",
            "org.apache.commons.lang3.reflect.TypeUtils:java.util.Map getTypeArguments(java.lang.Class,java.lang.Class,java.util.Map)",
            "org.apache.commons.lang3.reflect.TypeUtils:java.util.Map determineTypeArguments(java.lang.Class,java.lang.reflect.ParameterizedType)",
            "org.apache.commons.lang3.reflect.TypeUtils:java.lang.reflect.Type getClosestParentType(java.lang.Class,java.lang.Class)",
            "org.apache.commons.lang3.reflect.TypeUtils:java.lang.reflect.ParameterizedType parameterizeWithOwner(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.Type[])"
        ]
    },
    "org.apache.commons.lang3.reflect.TypeUtils:java.util.Map getTypeArguments(java.lang.Class,java.lang.Class,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.reflect.TypeUtils:java.util.Map getTypeArguments(java.lang.reflect.Type,java.lang.Class,java.util.Map)"
        ]
    },
    "org.apache.commons.lang3.concurrent.BackgroundInitializer:java.util.concurrent.ExecutorService createExecutor()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.concurrent.BackgroundInitializer:boolean start()"
        ]
    },
    "org.apache.commons.lang3.concurrent.MultiBackgroundInitializer:java.lang.Object initialize()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.concurrent.BackgroundInitializer$InitializationTask:java.lang.Object call()"
        ]
    },
    "org.apache.commons.lang3.EnumUtils:long generateBitVector(java.lang.Class,java.lang.Enum[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.exception.DefaultExceptionContext:org.apache.commons.lang3.exception.ExceptionContext setContextValue(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.exception.ContextedException:org.apache.commons.lang3.exception.ContextedException setContextValue(java.lang.String,java.lang.Object)",
            "org.apache.commons.lang3.exception.ContextedRuntimeException:org.apache.commons.lang3.exception.ContextedRuntimeException setContextValue(java.lang.String,java.lang.Object)"
        ]
    },
    "org.apache.commons.lang3.exception.ContextedException:java.util.List getContextValues(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.exception.ContextedException:java.util.List getContextValues(java.lang.String)",
            "org.apache.commons.lang3.exception.ContextedRuntimeException:java.util.List getContextValues(java.lang.String)"
        ]
    },
    "org.apache.commons.lang3.exception.ContextedRuntimeException:java.util.List getContextValues(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.exception.ContextedException:java.util.List getContextValues(java.lang.String)",
            "org.apache.commons.lang3.exception.ContextedRuntimeException:java.util.List getContextValues(java.lang.String)"
        ]
    },
    "org.apache.commons.lang3.exception.ContextedException:java.lang.Object getFirstContextValue(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.exception.ContextedException:java.lang.Object getFirstContextValue(java.lang.String)",
            "org.apache.commons.lang3.exception.ContextedRuntimeException:java.lang.Object getFirstContextValue(java.lang.String)"
        ]
    },
    "org.apache.commons.lang3.exception.ContextedRuntimeException:java.lang.Object getFirstContextValue(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.exception.ContextedException:java.lang.Object getFirstContextValue(java.lang.String)",
            "org.apache.commons.lang3.exception.ContextedRuntimeException:java.lang.Object getFirstContextValue(java.lang.String)"
        ]
    },
    "org.apache.commons.lang3.exception.ContextedException:java.util.Set getContextLabels()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.exception.ContextedException:java.util.Set getContextLabels()",
            "org.apache.commons.lang3.exception.ContextedRuntimeException:java.util.Set getContextLabels()"
        ]
    },
    "org.apache.commons.lang3.exception.ContextedRuntimeException:java.util.Set getContextLabels()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.exception.ContextedException:java.util.Set getContextLabels()",
            "org.apache.commons.lang3.exception.ContextedRuntimeException:java.util.Set getContextLabels()"
        ]
    },
    "org.apache.commons.lang3.exception.ContextedException:java.lang.String getFormattedExceptionMessage(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.exception.ContextedException:java.lang.String getMessage()",
            "org.apache.commons.lang3.exception.ContextedException:java.lang.String getFormattedExceptionMessage(java.lang.String)",
            "org.apache.commons.lang3.exception.ContextedRuntimeException:java.lang.String getFormattedExceptionMessage(java.lang.String)"
        ]
    },
    "org.apache.commons.lang3.exception.ContextedRuntimeException:java.lang.String getFormattedExceptionMessage(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.exception.ContextedException:java.lang.String getFormattedExceptionMessage(java.lang.String)",
            "org.apache.commons.lang3.exception.ContextedRuntimeException:java.lang.String getMessage()",
            "org.apache.commons.lang3.exception.ContextedRuntimeException:java.lang.String getFormattedExceptionMessage(java.lang.String)"
        ]
    },
    "org.apache.commons.lang3.reflect.FieldUtils:java.lang.reflect.Field getField(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.reflect.FieldUtils:java.lang.Object readStaticField(java.lang.Class,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.reflect.FieldUtils:java.lang.Object readStaticField(java.lang.Class,java.lang.String)"
        ]
    },
    "org.apache.commons.lang3.reflect.FieldUtils:java.lang.Object readField(java.lang.Object,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.reflect.FieldUtils:java.lang.Object readField(java.lang.Object,java.lang.String)"
        ]
    },
    "org.apache.commons.lang3.reflect.FieldUtils:void writeStaticField(java.lang.Class,java.lang.String,java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.reflect.FieldUtils:void writeStaticField(java.lang.Class,java.lang.String,java.lang.Object)"
        ]
    },
    "org.apache.commons.lang3.reflect.FieldUtils:void writeField(java.lang.Object,java.lang.String,java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.reflect.FieldUtils:void writeField(java.lang.Object,java.lang.String,java.lang.Object)"
        ]
    },
    "org.apache.commons.lang3.reflect.TypeUtils:boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.reflect.TypeUtils:boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)",
            "org.apache.commons.lang3.reflect.TypeUtils:boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.ParameterizedType,java.util.Map)",
            "org.apache.commons.lang3.reflect.TypeUtils:boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.GenericArrayType,java.util.Map)",
            "org.apache.commons.lang3.reflect.TypeUtils:boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.WildcardType,java.util.Map)",
            "org.apache.commons.lang3.reflect.TypeUtils:boolean isInstance(java.lang.Object,java.lang.reflect.Type)",
            "org.apache.commons.lang3.reflect.TypeUtils:java.lang.reflect.Type[] normalizeUpperBounds(java.lang.reflect.Type[])",
            "org.apache.commons.lang3.reflect.TypeUtils:boolean typesSatisfyVariables(java.util.Map)"
        ]
    },
    "org.apache.commons.lang3.StringUtils:java.lang.String join(java.lang.Iterable,char)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.StringUtils:java.lang.String join(java.lang.Iterable,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.text.ExtendedMessageFormat:void <init>(java.lang.String,java.util.Locale,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.text.ExtendedMessageFormat:void <init>(java.lang.String,java.util.Locale)",
            "org.apache.commons.lang3.text.ExtendedMessageFormat:void <init>(java.lang.String,java.util.Map)"
        ]
    },
    "org.apache.commons.lang3.text.ExtendedMessageFormat:java.lang.String insertFormats(java.lang.String,java.util.ArrayList)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.text.ExtendedMessageFormat:void applyPattern(java.lang.String)"
        ]
    },
    "org.apache.commons.lang3.text.StrSubstitutor:void checkCyclicSubstitution(java.lang.String,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.text.StrSubstitutor:int substitute(org.apache.commons.lang3.text.StrBuilder,int,int,java.util.List)"
        ]
    },
    "org.apache.commons.lang3.time.FastDateParser:void init(java.util.Calendar)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.time.FastDateParser:void <init>(java.lang.String,java.util.TimeZone,java.util.Locale,java.util.Date)",
            "org.apache.commons.lang3.time.FastDateParser:void readObject(java.io.ObjectInputStream)"
        ]
    },
    "org.apache.commons.lang3.time.FastDateParser:java.util.Date parse(java.lang.String,java.text.ParsePosition)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.time.FastDateFormat:java.util.Date parse(java.lang.String,java.text.ParsePosition)",
            "org.apache.commons.lang3.time.FastDateParser:java.util.Date parse(java.lang.String)",
            "org.apache.commons.lang3.time.FastDateParser:java.lang.Object parseObject(java.lang.String,java.text.ParsePosition)"
        ]
    },
    "org.apache.commons.lang3.time.FastDateParser:org.apache.commons.lang3.time.FastDateParser$Strategy getLocaleSpecificStrategy(int,java.util.Calendar)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.time.FastDateParser:org.apache.commons.lang3.time.FastDateParser$Strategy getStrategy(java.lang.String,java.util.Calendar)"
        ]
    },
    "org.apache.commons.lang3.Validate:java.lang.Iterable noNullElements(java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.eclipsesource.json.JsonArray$1:java.lang.Object next()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Compiler:void processSequentialRequirements(java.lang.String,java.lang.String,java.lang.String)",
            "org.onlab.stc.Compiler:void processRequirements(org.onlab.stc.Step,java.lang.String,java.lang.String)",
            "org.onlab.stc.Coordinator:org.onlab.stc.Coordinator$Directive nextAction(org.onlab.stc.Step)",
            "org.onlab.stc.Coordinator:void completeParentIfNeeded(org.onlab.stc.Group)",
            "org.onlab.stc.MonitorLayout:void computeChildPlacements(org.onlab.stc.Group,org.onlab.stc.MonitorLayout$Box,java.util.Set)",
            "org.onlab.stc.MonitorWebSocketServlet$Pruner:void run()",
            "org.onlab.stc.ScenarioStore:boolean hasFailures()",
            "org.onlab.graph.AbstractGraphPathSearch$DefaultResult:void buildPaths()",
            "org.onlab.graph.AbstractGraphPathSearch:void buildAllPaths(org.onlab.graph.AbstractGraphPathSearch$DefaultResult,org.onlab.graph.Vertex,org.onlab.graph.Vertex,int)",
            "org.onlab.graph.AdjacencyListsGraph:void <init>(java.util.Set,java.util.Set)",
            "org.onlab.graph.BellmanFordGraphSearch:org.onlab.graph.GraphPathSearch$Result search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)",
            "org.onlab.graph.BreadthFirstSearch:org.onlab.graph.GraphPathSearch$Result search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)",
            "org.onlab.graph.DepthFirstSearch:org.onlab.graph.DepthFirstSearch$SpanningTreeResult search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)",
            "org.onlab.graph.DepthFirstSearch:boolean isForwardEdge(org.onlab.graph.AbstractGraphPathSearch$DefaultResult,org.onlab.graph.Edge)",
            "org.onlab.graph.DijkstraGraphSearch:org.onlab.graph.GraphPathSearch$Result search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)",
            "org.onlab.graph.GAPopulation:void step()",
            "org.onlab.graph.KShortestPathsSearch:org.onlab.graph.GraphPathSearch$Result search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)",
            "org.onlab.graph.KShortestPathsSearch:java.lang.Double calculatePathCost(org.onlab.graph.EdgeWeight,java.util.List)",
            "org.onlab.graph.MutableAdjacencyListsGraph:void <init>(java.util.Set,java.util.Set)",
            "org.onlab.graph.SrlgGraphSearch$1:java.util.Set paths()",
            "org.onlab.graph.SrlgGraphSearch$Subset:double fitness()",
            "org.onlab.graph.SrlgGraphSearch$Subset:java.util.Set buildPaths()",
            "org.onlab.graph.SrlgGraphSearch:void <init>(java.util.Map)",
            "org.onlab.graph.SrlgGraphSearch:org.onlab.graph.GraphPathSearch$Result search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)",
            "org.onlab.graph.SuurballeGraphSearch$2:java.util.Set paths()",
            "org.onlab.graph.SuurballeGraphSearch:org.onlab.graph.GraphPathSearch$Result search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)",
            "org.onlab.graph.SuurballeGraphSearch:org.onlab.graph.MutableGraph mutableCopy(org.onlab.graph.Graph)",
            "org.onlab.graph.TarjanGraphSearch$SccResult:java.util.Set findClusterEdges(java.util.Set)",
            "org.onlab.graph.TarjanGraphSearch:org.onlab.graph.TarjanGraphSearch$SccResult search(org.onlab.graph.Graph,org.onlab.graph.EdgeWeight)",
            "org.onlab.graph.TarjanGraphSearch:org.onlab.graph.TarjanGraphSearch$VertexData connect(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,org.onlab.graph.TarjanGraphSearch$SccResult)",
            "org.onlab.packet.DHCP:org.onlab.packet.DHCPOption getOption(org.onlab.packet.DHCP$DHCPOptionCode)",
            "org.onlab.packet.DHCP:byte[] serialize()",
            "org.onlab.packet.IGMP:byte[] serialize()",
            "org.onlab.packet.IGMPMembership:byte[] serialize(java.nio.ByteBuffer)",
            "org.onlab.packet.IGMPQuery:byte[] serialize(java.nio.ByteBuffer)",
            "org.onlab.packet.IPv4:java.lang.String fromIPv4AddressCollection(java.util.Collection)",
            "org.onlab.packet.LLDP:byte[] serialize()",
            "org.onlab.packet.ONOSLLDP:org.onlab.packet.LLDPOrganizationalTLV getNameTLV()",
            "org.onlab.packet.ONOSLLDP:org.onlab.packet.LLDPOrganizationalTLV getDeviceTLV()",
            "org.onlab.packet.RADIUS:org.onlab.packet.EAP decapsulateMessage()",
            "org.onlab.packet.ndp.NeighborAdvertisement:org.onlab.packet.ndp.NeighborAdvertisement lambda$deserializer$1(byte[],int,int)",
            "org.onlab.packet.ndp.NeighborDiscoveryOptions:byte[] serialize()",
            "org.onlab.packet.ndp.NeighborDiscoveryOptions:int hashCode()",
            "org.onlab.packet.ndp.NeighborSolicitation:org.onlab.packet.ndp.NeighborSolicitation lambda$deserializer$42(byte[],int,int)",
            "org.onlab.packet.ndp.Redirect:org.onlab.packet.ndp.Redirect lambda$deserializer$47(byte[],int,int)",
            "org.onlab.packet.ndp.RouterAdvertisement:org.onlab.packet.ndp.RouterAdvertisement lambda$deserializer$41(byte[],int,int)",
            "org.onlab.packet.ndp.RouterSolicitation:org.onlab.packet.ndp.RouterSolicitation lambda$deserializer$44(byte[],int,int)",
            "org.onlab.packet.pim.PIMHello:byte[] serialize()",
            "org.onlab.packet.pim.PIMJoinPrune:byte[] serialize()",
            "org.onlab.util.KryoNamespace$Builder:org.onlab.util.KryoNamespace$Builder register(org.onlab.util.KryoNamespace)",
            "org.onlab.util.KryoNamespace:com.esotericsoftware.kryo.Kryo create()",
            "org.jboss.netty.bootstrap.Bootstrap:void setPipelineAsMap(java.util.Map)",
            "org.jboss.netty.bootstrap.Bootstrap:boolean isOrderedMap(java.util.Map)",
            "org.jboss.netty.bootstrap.ServerBootstrap$Binder:void channelOpen(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.channel.Channels:org.jboss.netty.channel.ChannelPipeline pipeline(org.jboss.netty.channel.ChannelPipeline)",
            "org.jboss.netty.channel.DefaultChannelConfig:void setOptions(java.util.Map)",
            "org.jboss.netty.channel.DefaultChannelFuture:void notifyListeners()",
            "org.jboss.netty.channel.DefaultServerChannelConfig:void setOptions(java.util.Map)",
            "org.jboss.netty.channel.group.CombinedIterator:java.lang.Object next()",
            "org.jboss.netty.channel.group.DefaultChannelGroup:org.jboss.netty.channel.group.ChannelGroupFuture close()",
            "org.jboss.netty.channel.group.DefaultChannelGroup:org.jboss.netty.channel.group.ChannelGroupFuture disconnect()",
            "org.jboss.netty.channel.group.DefaultChannelGroup:org.jboss.netty.channel.group.ChannelGroupFuture setInterestOps(int)",
            "org.jboss.netty.channel.group.DefaultChannelGroup:org.jboss.netty.channel.group.ChannelGroupFuture setReadable(boolean)",
            "org.jboss.netty.channel.group.DefaultChannelGroup:org.jboss.netty.channel.group.ChannelGroupFuture unbind()",
            "org.jboss.netty.channel.group.DefaultChannelGroup:org.jboss.netty.channel.group.ChannelGroupFuture write(java.lang.Object)",
            "org.jboss.netty.channel.group.DefaultChannelGroup:org.jboss.netty.channel.group.ChannelGroupFuture write(java.lang.Object,java.net.SocketAddress)",
            "org.jboss.netty.channel.group.DefaultChannelGroupFuture:void <init>(org.jboss.netty.channel.group.ChannelGroup,java.util.Collection)",
            "org.jboss.netty.channel.group.DefaultChannelGroupFuture:void <init>(org.jboss.netty.channel.group.ChannelGroup,java.util.Map)",
            "org.jboss.netty.channel.group.DefaultChannelGroupFuture:void notifyListeners()",
            "org.jboss.netty.channel.socket.http.HttpTunnelingSocketChannelConfig:void setOptions(java.util.Map)",
            "org.jboss.netty.channel.socket.nio.AbstractNioSelector:void rebuildSelector()",
            "org.jboss.netty.channel.socket.nio.AbstractNioSelector:void run()",
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void process(java.nio.channels.Selector)",
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void write0(org.jboss.netty.channel.socket.nio.AbstractNioChannel)",
            "org.jboss.netty.channel.socket.nio.NioClientBoss:void processSelectedKeys(java.util.Set)",
            "org.jboss.netty.channel.socket.nio.NioClientBoss:void processConnectTimeout(java.util.Set,long)",
            "org.jboss.netty.channel.socket.nio.NioDatagramChannel:org.jboss.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress)",
            "org.jboss.netty.channel.socket.nio.NioDatagramChannel:org.jboss.netty.channel.ChannelFuture block(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress)",
            "org.jboss.netty.channel.socket.nio.NioServerBoss:void process(java.nio.channels.Selector)",
            "org.jboss.netty.handler.codec.frame.FrameDecoder:void unfoldAndFireMessageReceived(org.jboss.netty.channel.ChannelHandlerContext,java.net.SocketAddress,java.lang.Object)",
            "org.jboss.netty.handler.codec.http.CookieEncoder:java.lang.String encodeServerSide()",
            "org.jboss.netty.handler.codec.http.CookieEncoder:java.lang.String encodeClientSide()",
            "org.jboss.netty.handler.codec.http.DefaultCookie:void setPorts(java.lang.Iterable)",
            "org.jboss.netty.handler.codec.http.DefaultHttpChunkTrailer:void appendHeaders(java.lang.StringBuilder)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:org.jboss.netty.handler.codec.http.HttpHeaders add(java.lang.String,java.lang.Iterable)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:org.jboss.netty.handler.codec.http.HttpHeaders set(java.lang.String,java.lang.Iterable)",
            "org.jboss.netty.handler.codec.http.DefaultHttpMessage:void appendHeaders(java.lang.StringBuilder)",
            "org.jboss.netty.handler.codec.http.HttpChunkAggregator:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.codec.http.HttpCodecUtil:boolean isTransferEncodingChunked(org.jboss.netty.handler.codec.http.HttpMessage)",
            "org.jboss.netty.handler.codec.http.HttpCodecUtil:void removeTransferEncodingChunked(org.jboss.netty.handler.codec.http.HttpMessage)",
            "org.jboss.netty.handler.codec.http.HttpHeaders:void removeTransferEncodingChunked(org.jboss.netty.handler.codec.http.HttpMessage)",
            "org.jboss.netty.handler.codec.http.HttpHeaders:org.jboss.netty.handler.codec.http.HttpHeaders add(org.jboss.netty.handler.codec.http.HttpHeaders)",
            "org.jboss.netty.handler.codec.http.HttpHeaders:org.jboss.netty.handler.codec.http.HttpHeaders set(org.jboss.netty.handler.codec.http.HttpHeaders)",
            "org.jboss.netty.handler.codec.http.HttpHeaders:boolean contains(java.lang.String,java.lang.String,boolean)",
            "org.jboss.netty.handler.codec.http.HttpMessageEncoder:void encodeHeaders(org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.http.HttpMessage)",
            "org.jboss.netty.handler.codec.http.HttpMessageEncoder:void encodeTrailingHeaders(org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.http.HttpChunkTrailer)",
            "org.jboss.netty.handler.codec.http.multipart.DefaultHttpDataFactory:void cleanRequestHttpDatas(org.jboss.netty.handler.codec.http.HttpRequest)",
            "org.jboss.netty.handler.codec.http.multipart.DefaultHttpDataFactory:void cleanAllHttpDatas()",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder:void setBodyHttpDatas(java.util.List)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder:org.jboss.netty.handler.codec.http.HttpRequest finalizeRequest()",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder:java.lang.String encodeAttribute(java.lang.String,java.nio.charset.Charset)",
            "org.jboss.netty.handler.codec.http.multipart.InternalAttribute:int size()",
            "org.jboss.netty.handler.codec.http.multipart.InternalAttribute:java.lang.String toString()",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker00:org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker07:org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker08:org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker13:org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.handler.codec.serialization.ReferenceMap:void putAll(java.util.Map)",
            "org.jboss.netty.handler.codec.socks.SocksInitRequest:void encodeAsByteBuf(org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdyHeaders:org.jboss.netty.handler.codec.spdy.SpdyHeaders set(java.lang.String,java.lang.Iterable)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdyHeaders:org.jboss.netty.handler.codec.spdy.SpdyHeaders add(java.lang.String,java.lang.Iterable)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdyHeadersFrame:void appendHeaders(java.lang.StringBuilder)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame:void appendSettings(java.lang.StringBuilder)",
            "org.jboss.netty.handler.codec.spdy.SpdyFrameEncoder:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.codec.spdy.SpdyHeaderBlockRawEncoder:org.jboss.netty.buffer.ChannelBuffer encode(org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "org.jboss.netty.handler.codec.spdy.SpdyHttpDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)",
            "org.jboss.netty.handler.codec.spdy.SpdyHttpDecoder:org.jboss.netty.handler.codec.http.HttpRequest createHttpRequest(int,org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "org.jboss.netty.handler.codec.spdy.SpdyHttpDecoder:org.jboss.netty.handler.codec.http.HttpResponse createHttpResponse(int,org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "org.jboss.netty.handler.codec.spdy.SpdyHttpEncoder:void writeChunk(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelFuture,int,org.jboss.netty.handler.codec.http.HttpChunk,java.net.SocketAddress)",
            "org.jboss.netty.handler.codec.spdy.SpdyHttpEncoder:org.jboss.netty.handler.codec.spdy.SpdySynStreamFrame createSynStreamFrame(org.jboss.netty.handler.codec.http.HttpMessage)",
            "org.jboss.netty.handler.codec.spdy.SpdyHttpEncoder:org.jboss.netty.handler.codec.spdy.SpdySynReplyFrame createSynReplyFrame(org.jboss.netty.handler.codec.http.HttpResponse)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:void updateAllSendWindowSizes(int)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:void updateAllReceiveWindowSizes(int)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:org.jboss.netty.channel.MessageEvent getPendingWrite(int)",
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor:java.util.List shutdownNow(boolean)",
            "org.jboss.netty.handler.ipfilter.IpFilterRuleHandler:boolean accept(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent,java.net.InetSocketAddress)",
            "org.jboss.netty.handler.queue.BufferedWriteHandler$1:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.util.DefaultObjectSizeEstimator:int estimateSize(java.lang.Object)",
            "org.jboss.netty.util.VirtualExecutorService:java.util.List shutdownNow()",
            "org.jboss.netty.util.internal.ConcurrentHashMap:void putAll(java.util.Map)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap:void putAll(java.util.Map)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap:void putAll(java.util.Map)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap:void putAll(java.util.Map)",
            "org.jboss.netty.util.internal.ConversionUtil:java.lang.String[] toStringArray(java.lang.Object)",
            "org.apache.commons.lang.CharSet:boolean contains(char)",
            "org.apache.commons.lang.ClassUtils:java.util.List convertClassNamesToClasses(java.util.List)",
            "org.apache.commons.lang.ClassUtils:java.util.List convertClassesToClassNames(java.util.List)",
            "org.apache.commons.lang.ClassUtils:java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])",
            "org.apache.commons.lang.ClassUtils:void <clinit>()",
            "org.apache.commons.lang.enum.ValuedEnum:org.apache.commons.lang.'enum'.Enum getEnum(java.lang.Class,int)",
            "org.apache.commons.lang.enums.ValuedEnum:org.apache.commons.lang.enums.Enum getEnum(java.lang.Class,int)",
            "org.apache.commons.lang.exception.NestableDelegate:void printStackTrace(java.io.PrintWriter)",
            "org.apache.commons.lang.reflect.FieldUtils:java.lang.reflect.Field getField(java.lang.Class,java.lang.String,boolean)",
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.util.Iterator,char)",
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.util.Iterator,java.lang.String)",
            "org.apache.commons.lang.text.ExtendedMessageFormat:void applyPattern(java.lang.String)",
            "org.apache.commons.lang.text.ExtendedMessageFormat:boolean containsElements(java.util.Collection)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendAll(java.util.Collection)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendAll(java.util.Iterator)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendWithSeparators(java.util.Collection,java.lang.String)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendWithSeparators(java.util.Iterator,java.lang.String)",
            "org.apache.commons.lang.Validate:void noNullElements(java.util.Collection,java.lang.String)",
            "org.apache.commons.lang.Validate:void noNullElements(java.util.Collection)",
            "org.apache.commons.lang.Validate:void allElementsOfType(java.util.Collection,java.lang.Class,java.lang.String)",
            "org.apache.commons.lang.Validate:void allElementsOfType(java.util.Collection,java.lang.Class)",
            "org.apache.commons.lang3.AnnotationUtils$1:java.lang.String getShortClassName(java.lang.Class)",
            "org.apache.commons.lang3.ArrayUtils:java.lang.Object[] removeElements(java.lang.Object[],java.lang.Object[])",
            "org.apache.commons.lang3.ArrayUtils:byte[] removeElements(byte[],byte[])",
            "org.apache.commons.lang3.ArrayUtils:short[] removeElements(short[],short[])",
            "org.apache.commons.lang3.ArrayUtils:int[] removeElements(int[],int[])",
            "org.apache.commons.lang3.ArrayUtils:char[] removeElements(char[],char[])",
            "org.apache.commons.lang3.ArrayUtils:long[] removeElements(long[],long[])",
            "org.apache.commons.lang3.ArrayUtils:float[] removeElements(float[],float[])",
            "org.apache.commons.lang3.ArrayUtils:double[] removeElements(double[],double[])",
            "org.apache.commons.lang3.ArrayUtils:boolean[] removeElements(boolean[],boolean[])",
            "org.apache.commons.lang3.builder.DiffResult:java.lang.String toString(org.apache.commons.lang3.builder.ToStringStyle)",
            "org.apache.commons.lang3.CharSet:boolean contains(char)",
            "org.apache.commons.lang3.ClassUtils$2$1:java.lang.Class next()",
            "org.apache.commons.lang3.ClassUtils:java.util.List convertClassNamesToClasses(java.util.List)",
            "org.apache.commons.lang3.ClassUtils:java.util.List convertClassesToClassNames(java.util.List)",
            "org.apache.commons.lang3.ClassUtils:java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])",
            "org.apache.commons.lang3.ClassUtils:void <clinit>()",
            "org.apache.commons.lang3.concurrent.MultiBackgroundInitializer:int getTaskCount()",
            "org.apache.commons.lang3.concurrent.MultiBackgroundInitializer:org.apache.commons.lang3.concurrent.MultiBackgroundInitializer$MultiBackgroundInitializerResults initialize()",
            "org.apache.commons.lang3.EnumUtils:long generateBitVector(java.lang.Class,java.lang.Iterable)",
            "org.apache.commons.lang3.EnumUtils:long[] generateBitVectors(java.lang.Class,java.lang.Iterable)",
            "org.apache.commons.lang3.EnumUtils:long[] generateBitVectors(java.lang.Class,java.lang.Enum[])",
            "org.apache.commons.lang3.event.EventListenerSupport$ProxyInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.commons.lang3.event.EventListenerSupport:void writeObject(java.io.ObjectOutputStream)",
            "org.apache.commons.lang3.exception.DefaultExceptionContext:org.apache.commons.lang3.exception.DefaultExceptionContext setContextValue(java.lang.String,java.lang.Object)",
            "org.apache.commons.lang3.exception.DefaultExceptionContext:java.util.List getContextValues(java.lang.String)",
            "org.apache.commons.lang3.exception.DefaultExceptionContext:java.lang.Object getFirstContextValue(java.lang.String)",
            "org.apache.commons.lang3.exception.DefaultExceptionContext:java.util.Set getContextLabels()",
            "org.apache.commons.lang3.exception.DefaultExceptionContext:java.lang.String getFormattedExceptionMessage(java.lang.String)",
            "org.apache.commons.lang3.ObjectUtils:java.lang.Object mode(java.lang.Object[])",
            "org.apache.commons.lang3.reflect.FieldUtils:java.lang.reflect.Field getField(java.lang.Class,java.lang.String,boolean)",
            "org.apache.commons.lang3.reflect.MethodUtils:java.util.Set getOverrideHierarchy(java.lang.reflect.Method,org.apache.commons.lang3.ClassUtils$Interfaces)",
            "org.apache.commons.lang3.reflect.TypeUtils:boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.ParameterizedType,java.util.Map)",
            "org.apache.commons.lang3.reflect.TypeUtils:boolean typesSatisfyVariables(java.util.Map)",
            "org.apache.commons.lang3.StringUtils:java.lang.String join(java.util.Iterator,char)",
            "org.apache.commons.lang3.StringUtils:java.lang.String join(java.util.Iterator,java.lang.String)",
            "org.apache.commons.lang3.text.ExtendedMessageFormat:void applyPattern(java.lang.String)",
            "org.apache.commons.lang3.text.ExtendedMessageFormat:boolean containsElements(java.util.Collection)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendAll(java.lang.Iterable)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendAll(java.util.Iterator)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendWithSeparators(java.lang.Iterable,java.lang.String)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendWithSeparators(java.util.Iterator,java.lang.String)",
            "org.apache.commons.lang3.time.FastDateParser$TextStrategy:boolean addRegex(org.apache.commons.lang3.time.FastDateParser,java.lang.StringBuilder)",
            "org.apache.commons.lang3.time.FastDateParser$TextStrategy:void setCalendar(org.apache.commons.lang3.time.FastDateParser,java.util.Calendar,java.lang.String)",
            "org.apache.commons.lang3.time.FastDateParser$TimeZoneStrategy:void <init>(java.util.Locale)",
            "org.apache.commons.lang3.Validate:java.lang.Iterable noNullElements(java.lang.Iterable,java.lang.String,java.lang.Object[])",
            "com.eclipsesource.json.JsonArray$1:com.eclipsesource.json.JsonValue next()",
            "com.eclipsesource.json.JsonObject$1:com.eclipsesource.json.JsonObject$Member next()",
            "com.eclipsesource.json.JsonWriter:void writeObject(com.eclipsesource.json.JsonObject)",
            "com.eclipsesource.json.JsonWriter:void writeArray(com.eclipsesource.json.JsonArray)",
            "com.esotericsoftware.kryo.serializers.CollectionSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.Collection)",
            "com.esotericsoftware.kryo.serializers.CollectionSerializer:java.util.Collection copy(com.esotericsoftware.kryo.Kryo,java.util.Collection)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$CollectionsSingletonMapSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.Map)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$CollectionsSingletonSetSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.Set)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.EnumSet)",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:void rebuildCachedFields(boolean)",
            "com.esotericsoftware.kryo.serializers.MapSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.Map)",
            "com.esotericsoftware.kryo.serializers.MapSerializer:java.util.Map copy(com.esotericsoftware.kryo.Kryo,java.util.Map)",
            "com.esotericsoftware.kryo.util.IntMap:void putAll(com.esotericsoftware.kryo.util.IntMap)",
            "com.esotericsoftware.kryo.util.ObjectMap:void putAll(com.esotericsoftware.kryo.util.ObjectMap)",
            "com.esotericsoftware.kryo.util.UnsafeUtil:java.lang.reflect.Field[] sortFieldsByOffset(java.util.List)"
        ]
    },
    "com.eclipsesource.json.JsonObject$1:java.lang.Object next()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Compiler:void processSequentialRequirements(java.lang.String,java.lang.String,java.lang.String)",
            "org.onlab.stc.Compiler:void processRequirements(org.onlab.stc.Step,java.lang.String,java.lang.String)",
            "org.onlab.stc.Coordinator:org.onlab.stc.Coordinator$Directive nextAction(org.onlab.stc.Step)",
            "org.onlab.stc.Coordinator:void completeParentIfNeeded(org.onlab.stc.Group)",
            "org.onlab.stc.MonitorLayout:void computeChildPlacements(org.onlab.stc.Group,org.onlab.stc.MonitorLayout$Box,java.util.Set)",
            "org.onlab.stc.MonitorWebSocketServlet$Pruner:void run()",
            "org.onlab.stc.ScenarioStore:boolean hasFailures()",
            "org.onlab.graph.AbstractGraphPathSearch$DefaultResult:void buildPaths()",
            "org.onlab.graph.AbstractGraphPathSearch:void buildAllPaths(org.onlab.graph.AbstractGraphPathSearch$DefaultResult,org.onlab.graph.Vertex,org.onlab.graph.Vertex,int)",
            "org.onlab.graph.AdjacencyListsGraph:void <init>(java.util.Set,java.util.Set)",
            "org.onlab.graph.BellmanFordGraphSearch:org.onlab.graph.GraphPathSearch$Result search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)",
            "org.onlab.graph.BreadthFirstSearch:org.onlab.graph.GraphPathSearch$Result search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)",
            "org.onlab.graph.DepthFirstSearch:org.onlab.graph.DepthFirstSearch$SpanningTreeResult search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)",
            "org.onlab.graph.DepthFirstSearch:boolean isForwardEdge(org.onlab.graph.AbstractGraphPathSearch$DefaultResult,org.onlab.graph.Edge)",
            "org.onlab.graph.DijkstraGraphSearch:org.onlab.graph.GraphPathSearch$Result search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)",
            "org.onlab.graph.GAPopulation:void step()",
            "org.onlab.graph.KShortestPathsSearch:org.onlab.graph.GraphPathSearch$Result search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)",
            "org.onlab.graph.KShortestPathsSearch:java.lang.Double calculatePathCost(org.onlab.graph.EdgeWeight,java.util.List)",
            "org.onlab.graph.MutableAdjacencyListsGraph:void <init>(java.util.Set,java.util.Set)",
            "org.onlab.graph.SrlgGraphSearch$1:java.util.Set paths()",
            "org.onlab.graph.SrlgGraphSearch$Subset:double fitness()",
            "org.onlab.graph.SrlgGraphSearch$Subset:java.util.Set buildPaths()",
            "org.onlab.graph.SrlgGraphSearch:void <init>(java.util.Map)",
            "org.onlab.graph.SrlgGraphSearch:org.onlab.graph.GraphPathSearch$Result search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)",
            "org.onlab.graph.SuurballeGraphSearch$2:java.util.Set paths()",
            "org.onlab.graph.SuurballeGraphSearch:org.onlab.graph.GraphPathSearch$Result search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)",
            "org.onlab.graph.SuurballeGraphSearch:org.onlab.graph.MutableGraph mutableCopy(org.onlab.graph.Graph)",
            "org.onlab.graph.TarjanGraphSearch$SccResult:java.util.Set findClusterEdges(java.util.Set)",
            "org.onlab.graph.TarjanGraphSearch:org.onlab.graph.TarjanGraphSearch$SccResult search(org.onlab.graph.Graph,org.onlab.graph.EdgeWeight)",
            "org.onlab.graph.TarjanGraphSearch:org.onlab.graph.TarjanGraphSearch$VertexData connect(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,org.onlab.graph.TarjanGraphSearch$SccResult)",
            "org.onlab.packet.DHCP:org.onlab.packet.DHCPOption getOption(org.onlab.packet.DHCP$DHCPOptionCode)",
            "org.onlab.packet.DHCP:byte[] serialize()",
            "org.onlab.packet.IGMP:byte[] serialize()",
            "org.onlab.packet.IGMPMembership:byte[] serialize(java.nio.ByteBuffer)",
            "org.onlab.packet.IGMPQuery:byte[] serialize(java.nio.ByteBuffer)",
            "org.onlab.packet.IPv4:java.lang.String fromIPv4AddressCollection(java.util.Collection)",
            "org.onlab.packet.LLDP:byte[] serialize()",
            "org.onlab.packet.ONOSLLDP:org.onlab.packet.LLDPOrganizationalTLV getNameTLV()",
            "org.onlab.packet.ONOSLLDP:org.onlab.packet.LLDPOrganizationalTLV getDeviceTLV()",
            "org.onlab.packet.RADIUS:org.onlab.packet.EAP decapsulateMessage()",
            "org.onlab.packet.ndp.NeighborAdvertisement:org.onlab.packet.ndp.NeighborAdvertisement lambda$deserializer$1(byte[],int,int)",
            "org.onlab.packet.ndp.NeighborDiscoveryOptions:byte[] serialize()",
            "org.onlab.packet.ndp.NeighborDiscoveryOptions:int hashCode()",
            "org.onlab.packet.ndp.NeighborSolicitation:org.onlab.packet.ndp.NeighborSolicitation lambda$deserializer$42(byte[],int,int)",
            "org.onlab.packet.ndp.Redirect:org.onlab.packet.ndp.Redirect lambda$deserializer$47(byte[],int,int)",
            "org.onlab.packet.ndp.RouterAdvertisement:org.onlab.packet.ndp.RouterAdvertisement lambda$deserializer$41(byte[],int,int)",
            "org.onlab.packet.ndp.RouterSolicitation:org.onlab.packet.ndp.RouterSolicitation lambda$deserializer$44(byte[],int,int)",
            "org.onlab.packet.pim.PIMHello:byte[] serialize()",
            "org.onlab.packet.pim.PIMJoinPrune:byte[] serialize()",
            "org.onlab.util.KryoNamespace$Builder:org.onlab.util.KryoNamespace$Builder register(org.onlab.util.KryoNamespace)",
            "org.onlab.util.KryoNamespace:com.esotericsoftware.kryo.Kryo create()",
            "org.jboss.netty.bootstrap.Bootstrap:void setPipelineAsMap(java.util.Map)",
            "org.jboss.netty.bootstrap.Bootstrap:boolean isOrderedMap(java.util.Map)",
            "org.jboss.netty.bootstrap.ServerBootstrap$Binder:void channelOpen(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.channel.Channels:org.jboss.netty.channel.ChannelPipeline pipeline(org.jboss.netty.channel.ChannelPipeline)",
            "org.jboss.netty.channel.DefaultChannelConfig:void setOptions(java.util.Map)",
            "org.jboss.netty.channel.DefaultChannelFuture:void notifyListeners()",
            "org.jboss.netty.channel.DefaultServerChannelConfig:void setOptions(java.util.Map)",
            "org.jboss.netty.channel.group.CombinedIterator:java.lang.Object next()",
            "org.jboss.netty.channel.group.DefaultChannelGroup:org.jboss.netty.channel.group.ChannelGroupFuture close()",
            "org.jboss.netty.channel.group.DefaultChannelGroup:org.jboss.netty.channel.group.ChannelGroupFuture disconnect()",
            "org.jboss.netty.channel.group.DefaultChannelGroup:org.jboss.netty.channel.group.ChannelGroupFuture setInterestOps(int)",
            "org.jboss.netty.channel.group.DefaultChannelGroup:org.jboss.netty.channel.group.ChannelGroupFuture setReadable(boolean)",
            "org.jboss.netty.channel.group.DefaultChannelGroup:org.jboss.netty.channel.group.ChannelGroupFuture unbind()",
            "org.jboss.netty.channel.group.DefaultChannelGroup:org.jboss.netty.channel.group.ChannelGroupFuture write(java.lang.Object)",
            "org.jboss.netty.channel.group.DefaultChannelGroup:org.jboss.netty.channel.group.ChannelGroupFuture write(java.lang.Object,java.net.SocketAddress)",
            "org.jboss.netty.channel.group.DefaultChannelGroupFuture:void <init>(org.jboss.netty.channel.group.ChannelGroup,java.util.Collection)",
            "org.jboss.netty.channel.group.DefaultChannelGroupFuture:void <init>(org.jboss.netty.channel.group.ChannelGroup,java.util.Map)",
            "org.jboss.netty.channel.group.DefaultChannelGroupFuture:void notifyListeners()",
            "org.jboss.netty.channel.socket.http.HttpTunnelingSocketChannelConfig:void setOptions(java.util.Map)",
            "org.jboss.netty.channel.socket.nio.AbstractNioSelector:void rebuildSelector()",
            "org.jboss.netty.channel.socket.nio.AbstractNioSelector:void run()",
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void process(java.nio.channels.Selector)",
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void write0(org.jboss.netty.channel.socket.nio.AbstractNioChannel)",
            "org.jboss.netty.channel.socket.nio.NioClientBoss:void processSelectedKeys(java.util.Set)",
            "org.jboss.netty.channel.socket.nio.NioClientBoss:void processConnectTimeout(java.util.Set,long)",
            "org.jboss.netty.channel.socket.nio.NioDatagramChannel:org.jboss.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress)",
            "org.jboss.netty.channel.socket.nio.NioDatagramChannel:org.jboss.netty.channel.ChannelFuture block(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress)",
            "org.jboss.netty.channel.socket.nio.NioServerBoss:void process(java.nio.channels.Selector)",
            "org.jboss.netty.handler.codec.frame.FrameDecoder:void unfoldAndFireMessageReceived(org.jboss.netty.channel.ChannelHandlerContext,java.net.SocketAddress,java.lang.Object)",
            "org.jboss.netty.handler.codec.http.CookieEncoder:java.lang.String encodeServerSide()",
            "org.jboss.netty.handler.codec.http.CookieEncoder:java.lang.String encodeClientSide()",
            "org.jboss.netty.handler.codec.http.DefaultCookie:void setPorts(java.lang.Iterable)",
            "org.jboss.netty.handler.codec.http.DefaultHttpChunkTrailer:void appendHeaders(java.lang.StringBuilder)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:org.jboss.netty.handler.codec.http.HttpHeaders add(java.lang.String,java.lang.Iterable)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:org.jboss.netty.handler.codec.http.HttpHeaders set(java.lang.String,java.lang.Iterable)",
            "org.jboss.netty.handler.codec.http.DefaultHttpMessage:void appendHeaders(java.lang.StringBuilder)",
            "org.jboss.netty.handler.codec.http.HttpChunkAggregator:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.codec.http.HttpCodecUtil:boolean isTransferEncodingChunked(org.jboss.netty.handler.codec.http.HttpMessage)",
            "org.jboss.netty.handler.codec.http.HttpCodecUtil:void removeTransferEncodingChunked(org.jboss.netty.handler.codec.http.HttpMessage)",
            "org.jboss.netty.handler.codec.http.HttpHeaders:void removeTransferEncodingChunked(org.jboss.netty.handler.codec.http.HttpMessage)",
            "org.jboss.netty.handler.codec.http.HttpHeaders:org.jboss.netty.handler.codec.http.HttpHeaders add(org.jboss.netty.handler.codec.http.HttpHeaders)",
            "org.jboss.netty.handler.codec.http.HttpHeaders:org.jboss.netty.handler.codec.http.HttpHeaders set(org.jboss.netty.handler.codec.http.HttpHeaders)",
            "org.jboss.netty.handler.codec.http.HttpHeaders:boolean contains(java.lang.String,java.lang.String,boolean)",
            "org.jboss.netty.handler.codec.http.HttpMessageEncoder:void encodeHeaders(org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.http.HttpMessage)",
            "org.jboss.netty.handler.codec.http.HttpMessageEncoder:void encodeTrailingHeaders(org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.http.HttpChunkTrailer)",
            "org.jboss.netty.handler.codec.http.multipart.DefaultHttpDataFactory:void cleanRequestHttpDatas(org.jboss.netty.handler.codec.http.HttpRequest)",
            "org.jboss.netty.handler.codec.http.multipart.DefaultHttpDataFactory:void cleanAllHttpDatas()",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder:void setBodyHttpDatas(java.util.List)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder:org.jboss.netty.handler.codec.http.HttpRequest finalizeRequest()",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder:java.lang.String encodeAttribute(java.lang.String,java.nio.charset.Charset)",
            "org.jboss.netty.handler.codec.http.multipart.InternalAttribute:int size()",
            "org.jboss.netty.handler.codec.http.multipart.InternalAttribute:java.lang.String toString()",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker00:org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker07:org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker08:org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker13:org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.handler.codec.serialization.ReferenceMap:void putAll(java.util.Map)",
            "org.jboss.netty.handler.codec.socks.SocksInitRequest:void encodeAsByteBuf(org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdyHeaders:org.jboss.netty.handler.codec.spdy.SpdyHeaders set(java.lang.String,java.lang.Iterable)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdyHeaders:org.jboss.netty.handler.codec.spdy.SpdyHeaders add(java.lang.String,java.lang.Iterable)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdyHeadersFrame:void appendHeaders(java.lang.StringBuilder)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame:void appendSettings(java.lang.StringBuilder)",
            "org.jboss.netty.handler.codec.spdy.SpdyFrameEncoder:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.codec.spdy.SpdyHeaderBlockRawEncoder:org.jboss.netty.buffer.ChannelBuffer encode(org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "org.jboss.netty.handler.codec.spdy.SpdyHttpDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)",
            "org.jboss.netty.handler.codec.spdy.SpdyHttpDecoder:org.jboss.netty.handler.codec.http.HttpRequest createHttpRequest(int,org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "org.jboss.netty.handler.codec.spdy.SpdyHttpDecoder:org.jboss.netty.handler.codec.http.HttpResponse createHttpResponse(int,org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "org.jboss.netty.handler.codec.spdy.SpdyHttpEncoder:void writeChunk(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelFuture,int,org.jboss.netty.handler.codec.http.HttpChunk,java.net.SocketAddress)",
            "org.jboss.netty.handler.codec.spdy.SpdyHttpEncoder:org.jboss.netty.handler.codec.spdy.SpdySynStreamFrame createSynStreamFrame(org.jboss.netty.handler.codec.http.HttpMessage)",
            "org.jboss.netty.handler.codec.spdy.SpdyHttpEncoder:org.jboss.netty.handler.codec.spdy.SpdySynReplyFrame createSynReplyFrame(org.jboss.netty.handler.codec.http.HttpResponse)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:void updateAllSendWindowSizes(int)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:void updateAllReceiveWindowSizes(int)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:org.jboss.netty.channel.MessageEvent getPendingWrite(int)",
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor:java.util.List shutdownNow(boolean)",
            "org.jboss.netty.handler.ipfilter.IpFilterRuleHandler:boolean accept(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent,java.net.InetSocketAddress)",
            "org.jboss.netty.handler.queue.BufferedWriteHandler$1:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.util.DefaultObjectSizeEstimator:int estimateSize(java.lang.Object)",
            "org.jboss.netty.util.VirtualExecutorService:java.util.List shutdownNow()",
            "org.jboss.netty.util.internal.ConcurrentHashMap:void putAll(java.util.Map)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap:void putAll(java.util.Map)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap:void putAll(java.util.Map)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap:void putAll(java.util.Map)",
            "org.jboss.netty.util.internal.ConversionUtil:java.lang.String[] toStringArray(java.lang.Object)",
            "org.apache.commons.lang.CharSet:boolean contains(char)",
            "org.apache.commons.lang.ClassUtils:java.util.List convertClassNamesToClasses(java.util.List)",
            "org.apache.commons.lang.ClassUtils:java.util.List convertClassesToClassNames(java.util.List)",
            "org.apache.commons.lang.ClassUtils:java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])",
            "org.apache.commons.lang.ClassUtils:void <clinit>()",
            "org.apache.commons.lang.enum.ValuedEnum:org.apache.commons.lang.'enum'.Enum getEnum(java.lang.Class,int)",
            "org.apache.commons.lang.enums.ValuedEnum:org.apache.commons.lang.enums.Enum getEnum(java.lang.Class,int)",
            "org.apache.commons.lang.exception.NestableDelegate:void printStackTrace(java.io.PrintWriter)",
            "org.apache.commons.lang.reflect.FieldUtils:java.lang.reflect.Field getField(java.lang.Class,java.lang.String,boolean)",
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.util.Iterator,char)",
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.util.Iterator,java.lang.String)",
            "org.apache.commons.lang.text.ExtendedMessageFormat:void applyPattern(java.lang.String)",
            "org.apache.commons.lang.text.ExtendedMessageFormat:boolean containsElements(java.util.Collection)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendAll(java.util.Collection)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendAll(java.util.Iterator)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendWithSeparators(java.util.Collection,java.lang.String)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendWithSeparators(java.util.Iterator,java.lang.String)",
            "org.apache.commons.lang.Validate:void noNullElements(java.util.Collection,java.lang.String)",
            "org.apache.commons.lang.Validate:void noNullElements(java.util.Collection)",
            "org.apache.commons.lang.Validate:void allElementsOfType(java.util.Collection,java.lang.Class,java.lang.String)",
            "org.apache.commons.lang.Validate:void allElementsOfType(java.util.Collection,java.lang.Class)",
            "org.apache.commons.lang3.AnnotationUtils$1:java.lang.String getShortClassName(java.lang.Class)",
            "org.apache.commons.lang3.ArrayUtils:java.lang.Object[] removeElements(java.lang.Object[],java.lang.Object[])",
            "org.apache.commons.lang3.ArrayUtils:byte[] removeElements(byte[],byte[])",
            "org.apache.commons.lang3.ArrayUtils:short[] removeElements(short[],short[])",
            "org.apache.commons.lang3.ArrayUtils:int[] removeElements(int[],int[])",
            "org.apache.commons.lang3.ArrayUtils:char[] removeElements(char[],char[])",
            "org.apache.commons.lang3.ArrayUtils:long[] removeElements(long[],long[])",
            "org.apache.commons.lang3.ArrayUtils:float[] removeElements(float[],float[])",
            "org.apache.commons.lang3.ArrayUtils:double[] removeElements(double[],double[])",
            "org.apache.commons.lang3.ArrayUtils:boolean[] removeElements(boolean[],boolean[])",
            "org.apache.commons.lang3.builder.DiffResult:java.lang.String toString(org.apache.commons.lang3.builder.ToStringStyle)",
            "org.apache.commons.lang3.CharSet:boolean contains(char)",
            "org.apache.commons.lang3.ClassUtils$2$1:java.lang.Class next()",
            "org.apache.commons.lang3.ClassUtils:java.util.List convertClassNamesToClasses(java.util.List)",
            "org.apache.commons.lang3.ClassUtils:java.util.List convertClassesToClassNames(java.util.List)",
            "org.apache.commons.lang3.ClassUtils:java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])",
            "org.apache.commons.lang3.ClassUtils:void <clinit>()",
            "org.apache.commons.lang3.concurrent.MultiBackgroundInitializer:int getTaskCount()",
            "org.apache.commons.lang3.concurrent.MultiBackgroundInitializer:org.apache.commons.lang3.concurrent.MultiBackgroundInitializer$MultiBackgroundInitializerResults initialize()",
            "org.apache.commons.lang3.EnumUtils:long generateBitVector(java.lang.Class,java.lang.Iterable)",
            "org.apache.commons.lang3.EnumUtils:long[] generateBitVectors(java.lang.Class,java.lang.Iterable)",
            "org.apache.commons.lang3.EnumUtils:long[] generateBitVectors(java.lang.Class,java.lang.Enum[])",
            "org.apache.commons.lang3.event.EventListenerSupport$ProxyInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.commons.lang3.event.EventListenerSupport:void writeObject(java.io.ObjectOutputStream)",
            "org.apache.commons.lang3.exception.DefaultExceptionContext:org.apache.commons.lang3.exception.DefaultExceptionContext setContextValue(java.lang.String,java.lang.Object)",
            "org.apache.commons.lang3.exception.DefaultExceptionContext:java.util.List getContextValues(java.lang.String)",
            "org.apache.commons.lang3.exception.DefaultExceptionContext:java.lang.Object getFirstContextValue(java.lang.String)",
            "org.apache.commons.lang3.exception.DefaultExceptionContext:java.util.Set getContextLabels()",
            "org.apache.commons.lang3.exception.DefaultExceptionContext:java.lang.String getFormattedExceptionMessage(java.lang.String)",
            "org.apache.commons.lang3.ObjectUtils:java.lang.Object mode(java.lang.Object[])",
            "org.apache.commons.lang3.reflect.FieldUtils:java.lang.reflect.Field getField(java.lang.Class,java.lang.String,boolean)",
            "org.apache.commons.lang3.reflect.MethodUtils:java.util.Set getOverrideHierarchy(java.lang.reflect.Method,org.apache.commons.lang3.ClassUtils$Interfaces)",
            "org.apache.commons.lang3.reflect.TypeUtils:boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.ParameterizedType,java.util.Map)",
            "org.apache.commons.lang3.reflect.TypeUtils:boolean typesSatisfyVariables(java.util.Map)",
            "org.apache.commons.lang3.StringUtils:java.lang.String join(java.util.Iterator,char)",
            "org.apache.commons.lang3.StringUtils:java.lang.String join(java.util.Iterator,java.lang.String)",
            "org.apache.commons.lang3.text.ExtendedMessageFormat:void applyPattern(java.lang.String)",
            "org.apache.commons.lang3.text.ExtendedMessageFormat:boolean containsElements(java.util.Collection)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendAll(java.lang.Iterable)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendAll(java.util.Iterator)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendWithSeparators(java.lang.Iterable,java.lang.String)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendWithSeparators(java.util.Iterator,java.lang.String)",
            "org.apache.commons.lang3.time.FastDateParser$TextStrategy:boolean addRegex(org.apache.commons.lang3.time.FastDateParser,java.lang.StringBuilder)",
            "org.apache.commons.lang3.time.FastDateParser$TextStrategy:void setCalendar(org.apache.commons.lang3.time.FastDateParser,java.util.Calendar,java.lang.String)",
            "org.apache.commons.lang3.time.FastDateParser$TimeZoneStrategy:void <init>(java.util.Locale)",
            "org.apache.commons.lang3.Validate:java.lang.Iterable noNullElements(java.lang.Iterable,java.lang.String,java.lang.Object[])",
            "com.eclipsesource.json.JsonArray$1:com.eclipsesource.json.JsonValue next()",
            "com.eclipsesource.json.JsonObject$1:com.eclipsesource.json.JsonObject$Member next()",
            "com.eclipsesource.json.JsonWriter:void writeObject(com.eclipsesource.json.JsonObject)",
            "com.eclipsesource.json.JsonWriter:void writeArray(com.eclipsesource.json.JsonArray)",
            "com.esotericsoftware.kryo.serializers.CollectionSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.Collection)",
            "com.esotericsoftware.kryo.serializers.CollectionSerializer:java.util.Collection copy(com.esotericsoftware.kryo.Kryo,java.util.Collection)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$CollectionsSingletonMapSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.Map)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$CollectionsSingletonSetSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.Set)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.EnumSet)",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:void rebuildCachedFields(boolean)",
            "com.esotericsoftware.kryo.serializers.MapSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.Map)",
            "com.esotericsoftware.kryo.serializers.MapSerializer:java.util.Map copy(com.esotericsoftware.kryo.Kryo,java.util.Map)",
            "com.esotericsoftware.kryo.util.IntMap:void putAll(com.esotericsoftware.kryo.util.IntMap)",
            "com.esotericsoftware.kryo.util.ObjectMap:void putAll(com.esotericsoftware.kryo.util.ObjectMap)",
            "com.esotericsoftware.kryo.util.UnsafeUtil:java.lang.reflect.Field[] sortFieldsByOffset(java.util.List)"
        ]
    },
    "com.eclipsesource.json.JsonObject:void write(com.eclipsesource.json.JsonWriter)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.eclipsesource.json.JsonValue:void writeTo(java.io.Writer)",
            "com.eclipsesource.json.JsonValue:java.lang.String toString()",
            "com.eclipsesource.json.JsonWriter:void writeObject(com.eclipsesource.json.JsonObject)",
            "com.eclipsesource.json.JsonWriter:void writeArray(com.eclipsesource.json.JsonArray)"
        ]
    },
    "com.eclipsesource.json.JsonArray:void write(com.eclipsesource.json.JsonWriter)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.eclipsesource.json.JsonValue:void writeTo(java.io.Writer)",
            "com.eclipsesource.json.JsonValue:java.lang.String toString()",
            "com.eclipsesource.json.JsonWriter:void writeObject(com.eclipsesource.json.JsonObject)",
            "com.eclipsesource.json.JsonWriter:void writeArray(com.eclipsesource.json.JsonArray)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.CollectionSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeClassAndObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.EnumSet)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$TreeSetSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.CollectionSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$TreeSetSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$CollectionsSingletonMapSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeClassAndObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.EnumSet)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$CollectionsSingletonSetSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeClassAndObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.EnumSet)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeClassAndObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.EnumSet)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.FieldSerializer:void rebuildCachedFields()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.FieldSerializer:void <init>(com.esotericsoftware.kryo.Kryo,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:void <init>(com.esotericsoftware.kryo.Kryo,java.lang.Class,java.lang.Class[])",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:void setFieldsCanBeNull(boolean)",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:void setFieldsAsAccessible(boolean)",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:void setIgnoreSyntheticFields(boolean)",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:void setFixedFieldTypes(boolean)",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:void setUseAsm(boolean)",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.FieldSerializer:void setGenerics(com.esotericsoftware.kryo.Kryo,java.lang.Class[])": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeClassAndObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readClassAndObject(com.esotericsoftware.kryo.io.Input)",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ObjectArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object[])",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ObjectArraySerializer:java.lang.Object[] read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.ObjectField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.ObjectField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$TreeMapSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$TreeMapSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.MapSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.MapSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeClassAndObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.EnumSet)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.MapSerializer:java.lang.Object copy(com.esotericsoftware.kryo.Kryo,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:java.lang.Object copy(java.lang.Object)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object copy(java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object copyShallow(java.lang.Object)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object copyShallow(java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:java.lang.Object copy(com.esotericsoftware.kryo.Kryo,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:java.lang.Object copy(com.esotericsoftware.kryo.Kryo,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.ClosureSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readClassAndObject(com.esotericsoftware.kryo.io.Input)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:java.util.EnumSet read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ObjectArraySerializer:java.lang.Object[] read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ObjectArraySerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.MapSerializer:java.util.Map read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.MapSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.ObjectField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.CompatibleFieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.TaggedFieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.BeanSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readClassAndObject(com.esotericsoftware.kryo.io.Input)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:java.util.EnumSet read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$StringArraySerializer:java.lang.String[] read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$StringArraySerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.io.KryoObjectInput:java.lang.Object readObject()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$CollectionsSingletonListSerializer:java.util.List read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$CollectionsSingletonListSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$CollectionsSingletonMapSerializer:java.util.Map read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$CollectionsSingletonMapSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$CollectionsSingletonSetSerializer:java.util.Set read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$CollectionsSingletonSetSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$TreeMapSerializer:java.util.Map create(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.MapSerializer:java.util.Map read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$TreeSetSerializer:java.util.TreeSet create(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$TreeSetSerializer:java.util.Collection create(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readClassAndObject(com.esotericsoftware.kryo.io.Input)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:java.util.EnumSet read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmObjectField:void copy(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.FieldSerializer:java.lang.Object copy(com.esotericsoftware.kryo.Kryo,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ObjectArraySerializer:java.lang.Object[] copy(com.esotericsoftware.kryo.Kryo,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ObjectArraySerializer:java.lang.Object copy(com.esotericsoftware.kryo.Kryo,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.ObjectField:void copy(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.FieldSerializer:java.lang.Object copy(com.esotericsoftware.kryo.Kryo,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeObjectField:void copy(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.FieldSerializer:java.lang.Object copy(com.esotericsoftware.kryo.Kryo,java.lang.Object)"
        ]
    },
    "org.jboss.netty.bootstrap.Bootstrap:void shutdown()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannelFactory:void shutdown()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.bootstrap.Bootstrap:void shutdown()",
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannelFactory:void shutdown()"
        ]
    },
    "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannelFactory:void releaseExternalResources()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.bootstrap.Bootstrap:void releaseExternalResources()",
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannelFactory:void releaseExternalResources()",
            "org.jboss.netty.channel.socket.http.HttpTunnelingServlet:void destroyChannelFactory(org.jboss.netty.channel.ChannelFactory)",
            "org.jboss.netty.channel.socket.nio.NioClientSocketChannelFactory:void releasePools()",
            "org.jboss.netty.channel.socket.nio.NioDatagramChannelFactory:void releasePool()",
            "org.jboss.netty.channel.socket.nio.NioServerSocketChannelFactory:void releasePools()",
            "org.jboss.netty.channel.socket.nio.ShareableWorkerPool:void destroy()",
            "org.jboss.netty.handler.execution.ChainedExecutor:void releaseExternal(java.util.concurrent.Executor)",
            "org.jboss.netty.handler.execution.ExecutionHandler:void releaseExternalResources()",
            "org.jboss.netty.util.ExternalResourceUtil:void release(org.jboss.netty.util.ExternalResourceReleasable[])"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioDatagramChannel:boolean setClosed()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void close(org.jboss.netty.channel.socket.nio.AbstractNioChannel,org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.socket.nio.NioDatagramPipelineSink:void close(org.jboss.netty.channel.socket.nio.NioDatagramChannel,org.jboss.netty.channel.ChannelFuture)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioSocketChannel:boolean setClosed()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void close(org.jboss.netty.channel.socket.nio.AbstractNioChannel,org.jboss.netty.channel.ChannelFuture)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.AbstractNioBossPool:void releaseExternalResources()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.NioClientBossPool:void releaseExternalResources()",
            "org.jboss.netty.channel.socket.nio.NioClientSocketChannelFactory:void releasePools()",
            "org.jboss.netty.channel.socket.nio.NioDatagramChannelFactory:void releasePool()",
            "org.jboss.netty.channel.socket.nio.NioServerSocketChannelFactory:void releasePools()",
            "org.jboss.netty.channel.socket.nio.ShareableWorkerPool:void destroy()",
            "org.jboss.netty.handler.execution.ChainedExecutor:void releaseExternal(java.util.concurrent.Executor)",
            "org.jboss.netty.handler.execution.ExecutionHandler:void releaseExternalResources()",
            "org.jboss.netty.util.ExternalResourceUtil:void release(org.jboss.netty.util.ExternalResourceReleasable[])"
        ]
    },
    "org.jboss.netty.channel.socket.nio.AbstractNioWorkerPool:void releaseExternalResources()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.NioClientSocketChannelFactory:void releasePools()",
            "org.jboss.netty.channel.socket.nio.NioDatagramChannelFactory:void releasePool()",
            "org.jboss.netty.channel.socket.nio.NioServerSocketChannelFactory:void releasePools()",
            "org.jboss.netty.channel.socket.nio.ShareableWorkerPool:void destroy()",
            "org.jboss.netty.handler.execution.ChainedExecutor:void releaseExternal(java.util.concurrent.Executor)",
            "org.jboss.netty.handler.execution.ExecutionHandler:void releaseExternalResources()",
            "org.jboss.netty.util.ExternalResourceUtil:void release(org.jboss.netty.util.ExternalResourceReleasable[])"
        ]
    },
    "org.jboss.netty.channel.socket.oio.OioClientSocketChannelFactory:void shutdown()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.bootstrap.Bootstrap:void shutdown()",
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannelFactory:void shutdown()",
            "org.jboss.netty.channel.socket.oio.OioClientSocketChannelFactory:void releaseExternalResources()"
        ]
    },
    "org.jboss.netty.channel.socket.oio.OioClientSocketChannelFactory:void releaseExternalResources()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.bootstrap.Bootstrap:void releaseExternalResources()",
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannelFactory:void releaseExternalResources()",
            "org.jboss.netty.channel.socket.http.HttpTunnelingServlet:void destroyChannelFactory(org.jboss.netty.channel.ChannelFactory)",
            "org.jboss.netty.channel.socket.nio.NioClientSocketChannelFactory:void releasePools()",
            "org.jboss.netty.channel.socket.nio.NioDatagramChannelFactory:void releasePool()",
            "org.jboss.netty.channel.socket.nio.NioServerSocketChannelFactory:void releasePools()",
            "org.jboss.netty.channel.socket.nio.ShareableWorkerPool:void destroy()",
            "org.jboss.netty.handler.execution.ChainedExecutor:void releaseExternal(java.util.concurrent.Executor)",
            "org.jboss.netty.handler.execution.ExecutionHandler:void releaseExternalResources()",
            "org.jboss.netty.util.ExternalResourceUtil:void release(org.jboss.netty.util.ExternalResourceReleasable[])"
        ]
    },
    "org.jboss.netty.channel.socket.oio.OioDatagramChannelFactory:void shutdown()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.bootstrap.Bootstrap:void shutdown()",
            "org.jboss.netty.channel.socket.oio.OioDatagramChannelFactory:void releaseExternalResources()"
        ]
    },
    "org.jboss.netty.channel.socket.oio.OioDatagramChannelFactory:void releaseExternalResources()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.bootstrap.Bootstrap:void releaseExternalResources()",
            "org.jboss.netty.channel.socket.http.HttpTunnelingServlet:void destroyChannelFactory(org.jboss.netty.channel.ChannelFactory)",
            "org.jboss.netty.channel.socket.nio.NioClientSocketChannelFactory:void releasePools()",
            "org.jboss.netty.channel.socket.nio.NioDatagramChannelFactory:void releasePool()",
            "org.jboss.netty.channel.socket.nio.NioServerSocketChannelFactory:void releasePools()",
            "org.jboss.netty.channel.socket.nio.ShareableWorkerPool:void destroy()",
            "org.jboss.netty.handler.execution.ChainedExecutor:void releaseExternal(java.util.concurrent.Executor)",
            "org.jboss.netty.handler.execution.ExecutionHandler:void releaseExternalResources()",
            "org.jboss.netty.util.ExternalResourceUtil:void release(org.jboss.netty.util.ExternalResourceReleasable[])"
        ]
    },
    "org.jboss.netty.channel.socket.oio.OioServerSocketChannelFactory:void shutdown()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.bootstrap.Bootstrap:void shutdown()",
            "org.jboss.netty.channel.socket.oio.OioServerSocketChannelFactory:void releaseExternalResources()"
        ]
    },
    "org.jboss.netty.channel.socket.oio.OioServerSocketChannelFactory:void releaseExternalResources()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.bootstrap.Bootstrap:void releaseExternalResources()",
            "org.jboss.netty.channel.socket.http.HttpTunnelingServlet:void destroyChannelFactory(org.jboss.netty.channel.ChannelFactory)",
            "org.jboss.netty.channel.socket.nio.NioClientSocketChannelFactory:void releasePools()",
            "org.jboss.netty.channel.socket.nio.NioDatagramChannelFactory:void releasePool()",
            "org.jboss.netty.channel.socket.nio.NioServerSocketChannelFactory:void releasePools()",
            "org.jboss.netty.channel.socket.nio.ShareableWorkerPool:void destroy()",
            "org.jboss.netty.handler.execution.ChainedExecutor:void releaseExternal(java.util.concurrent.Executor)",
            "org.jboss.netty.handler.execution.ExecutionHandler:void releaseExternalResources()",
            "org.jboss.netty.util.ExternalResourceUtil:void release(org.jboss.netty.util.ExternalResourceReleasable[])"
        ]
    },
    "org.jboss.netty.util.internal.ExecutorUtil:void terminate(java.lang.ThreadLocal,java.util.concurrent.Executor[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.ExecutorUtil:void terminate(java.util.concurrent.Executor[])"
        ]
    },
    "org.jboss.netty.util.HashedWheelTimer$Worker:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.util.BoundedThreadPool$CallerFeedbackPolicy:void rejectedExecution(java.lang.Runnable,java.util.concurrent.ThreadPoolExecutor)",
            "org.onlab.util.BoundedThreadPool:void execute(java.lang.Runnable)",
            "org.onlab.util.SharedExecutorService:void execute(java.lang.Runnable)",
            "org.jboss.netty.channel.AbstractChannelSink:org.jboss.netty.channel.ChannelFuture execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable)",
            "org.jboss.netty.channel.socket.ChannelRunnableWrapper:void run()",
            "org.jboss.netty.channel.socket.nio.AbstractNioSelector:void processTaskQueue()",
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void executeInIoThread(java.lang.Runnable,boolean)",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void executeInIoThread(java.lang.Runnable)",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void processEventQueue()",
            "org.jboss.netty.handler.codec.embedder.AbstractCodecEmbedder$EmbeddedChannelSink:org.jboss.netty.channel.ChannelFuture execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable)",
            "org.jboss.netty.handler.execution.ChainedExecutor:void execute(java.lang.Runnable)",
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor$MemoryAwareRunnable:void run()",
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor:void doUnorderedExecute(java.lang.Runnable)",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor$ChildExecutor:void run()",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor:void doExecute(java.lang.Runnable)",
            "org.jboss.netty.handler.ssl.ImmediateExecutor:void execute(java.lang.Runnable)",
            "org.jboss.netty.handler.ssl.SslHandler$4:void run()",
            "org.jboss.netty.util.ThreadRenamingRunnable:void run()",
            "org.jboss.netty.util.VirtualExecutorService$ChildExecutorRunnable:void run()",
            "org.jboss.netty.util.internal.DeadLockProofWorker$1:void run()",
            "org.jboss.netty.util.internal.UnterminatableExecutor:void execute(java.lang.Runnable)"
        ]
    },
    "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel:org.jboss.netty.channel.ChannelFuture writeLastChunk()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel:void disconnectReal(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel:void unbindReal(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel:void closeReal(org.jboss.netty.channel.ChannelFuture)"
        ]
    },
    "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerHandshaker00:org.jboss.netty.channel.ChannelFuture close(org.jboss.netty.channel.Channel,org.jboss.netty.handler.codec.http.websocketx.CloseWebSocketFrame)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerHandshakerFactory:org.jboss.netty.channel.ChannelFuture sendUnsupportedWebSocketVersionResponse(org.jboss.netty.channel.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)"
        ]
    },
    "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor:void decreaseCounter(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor:boolean remove(java.lang.Runnable)",
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor:void beforeExecute(java.lang.Thread,java.lang.Runnable)"
        ]
    },
    "org.jboss.netty.handler.traffic.AbstractTrafficShapingHandler$ReopenReadTimerTask:void run(org.jboss.netty.util.Timeout)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.HashedWheelTimer$HashedWheelTimeout:void expire()"
        ]
    },
    "org.jboss.netty.handler.codec.http.HttpClientCodec$Decoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,java.lang.Enum)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.replay.ReplayingDecoder:java.lang.Object decodeLast(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,java.lang.Enum)",
            "org.jboss.netty.handler.codec.replay.ReplayingDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.replay.ReplayingDecoder:void callDecode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.buffer.ChannelBuffer,java.net.SocketAddress)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioDatagramWorker:void <init>(java.util.concurrent.Executor)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.NioDatagramWorkerPool:org.jboss.netty.channel.socket.nio.NioDatagramWorker createWorker(java.util.concurrent.Executor)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioWorker:void <init>(java.util.concurrent.Executor)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.channel.socket.nio.NioWorkerPool:org.jboss.netty.channel.socket.nio.NioWorker createWorker(java.util.concurrent.Executor)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.NioWorkerPool:org.jboss.netty.channel.socket.nio.AbstractNioWorker createWorker(java.util.concurrent.Executor)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioClientBossPool:org.jboss.netty.channel.socket.nio.Boss newBoss(java.util.concurrent.Executor)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.AbstractNioBossPool:void init()"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioServerBossPool:org.jboss.netty.channel.socket.nio.Boss newBoss(java.util.concurrent.Executor)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.AbstractNioBossPool:void init()"
        ]
    },
    "org.jboss.netty.handler.traffic.AbstractTrafficShapingHandler:void configure(long,long,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.builder.HashCodeBuilder:int reflectionHashCode(java.lang.Object,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.CharSetUtils:java.lang.String squeeze(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.CharSetUtils:int count(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.CharSetUtils:java.lang.String keep(java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.CharSetUtils:java.lang.String keep(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.commons.lang.CharSetUtils:java.lang.String delete(java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.CharSetUtils:java.lang.String delete(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.commons.lang3.builder.EqualsBuilder:boolean reflectionEquals(java.lang.Object,java.lang.Object,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.builder.HashCodeBuilder:int reflectionHashCode(java.lang.Object,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.CharSetUtils:java.lang.String keep(java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.CharSetUtils:java.lang.String delete(java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.stc.Compiler:void lambda$compile$4(java.lang.String,org.onlab.stc.Group,org.apache.commons.configuration.HierarchicalConfiguration)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.stc.Compiler:void lambda$compile$5(java.lang.String,org.apache.commons.configuration.HierarchicalConfiguration)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.stc.Coordinator:void access$300(org.onlab.stc.Coordinator,org.onlab.stc.Step)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Coordinator$Delegate:void onCompletion(org.onlab.stc.Step,org.onlab.stc.Coordinator$Status)"
        ]
    },
    "org.onlab.stc.MonitorLayout:void <init>(org.onlab.stc.Compiler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Monitor:void <init>(org.onlab.stc.Coordinator,org.onlab.stc.Compiler)"
        ]
    },
    "org.onlab.stc.MonitorLayout:org.onlab.stc.MonitorLayout$Box updateBox(org.onlab.stc.Step,int,int,org.onlab.stc.Group)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.MonitorLayout:void lambda$follow$26(int,int,org.onlab.stc.Group,org.onlab.stc.Dependency)",
            "org.onlab.stc.MonitorLayout:void lambda$computeLayout$24(int,org.onlab.stc.Group,org.onlab.stc.Step)"
        ]
    },
    "org.onlab.stc.Main:void runCoordinator()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Main:void processRun()",
            "org.onlab.stc.Main:void processRunRange()"
        ]
    },
    "org.onlab.graph.GAPopulation$lambda_step_3__48:int compare(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.graph.Heap:void bubbleUp()",
            "org.onlab.graph.Heap:void heapify(int)",
            "org.apache.commons.lang.builder.CompareToBuilder:org.apache.commons.lang.builder.CompareToBuilder append(java.lang.Object,java.lang.Object,java.util.Comparator)",
            "org.apache.commons.lang3.builder.CompareToBuilder:org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object,java.util.Comparator)",
            "org.apache.commons.lang3.Range:void <init>(java.lang.Object,java.lang.Object,java.util.Comparator)",
            "org.apache.commons.lang3.Range:boolean contains(java.lang.Object)",
            "org.apache.commons.lang3.Range:boolean isAfter(java.lang.Object)",
            "org.apache.commons.lang3.Range:boolean isStartedBy(java.lang.Object)",
            "org.apache.commons.lang3.Range:boolean isEndedBy(java.lang.Object)",
            "org.apache.commons.lang3.Range:boolean isBefore(java.lang.Object)",
            "org.apache.commons.lang3.Range:org.apache.commons.lang3.Range intersectionWith(org.apache.commons.lang3.Range)"
        ]
    },
    "org.onlab.graph.TarjanGraphSearch$SccResult:void access$400(org.onlab.graph.TarjanGraphSearch$SccResult,org.onlab.graph.TarjanGraphSearch$VertexData)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.graph.TarjanGraphSearch:org.onlab.graph.TarjanGraphSearch$VertexData connect(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,org.onlab.graph.TarjanGraphSearch$SccResult)"
        ]
    },
    "org.onlab.stc.Coordinator$Directive:org.onlab.stc.Coordinator$Directive[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.stc.Coordinator$Status:org.onlab.stc.Coordinator$Status[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.stc.Main$Command:org.onlab.stc.Main$Command[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Main$1:void <clinit>()"
        ]
    },
    "org.onlab.graph.DepthFirstSearch$EdgeType:org.onlab.graph.DepthFirstSearch$EdgeType[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.graph.SrlgGraphSearch$Subset:void <init>(org.onlab.graph.SrlgGraphSearch,boolean[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.graph.SrlgGraphSearch$Subset:org.onlab.graph.GAOrganism crossWith(org.onlab.graph.GAOrganism)",
            "org.onlab.graph.SrlgGraphSearch$Subset:org.onlab.graph.GAOrganism random()",
            "org.onlab.graph.SrlgGraphSearch:org.onlab.graph.GraphPathSearch$Result search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)"
        ]
    },
    "org.onlab.packet.DHCP$DHCPOptionCode:org.onlab.packet.DHCP$DHCPOptionCode[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.packet.DHCPPacketType:org.onlab.packet.DHCPPacketType[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.packet.EthType$EtherType:org.onlab.packet.EthType$EtherType[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.EthType$EtherType:org.onlab.packet.EthType$EtherType lookup(short)",
            "org.onlab.packet.EthType:org.onlab.packet.EthType$EtherType lookup(short)",
            "org.onlab.packet.Ethernet:void <clinit>()"
        ]
    },
    "org.onlab.packet.IpAddress$Version:org.onlab.packet.IpAddress$Version[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.IpAddress$1:void <clinit>()",
            "org.onlab.packet.IpPrefix$1:void <clinit>()"
        ]
    },
    "org.onlab.util.DataRateUnit:org.onlab.util.DataRateUnit[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.buffer.ChannelBuffers:org.jboss.netty.buffer.ChannelBuffer copiedBuffer(java.nio.ByteOrder,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.buffer.ChannelBuffers:org.jboss.netty.buffer.ChannelBuffer copiedBuffer(byte[])",
            "org.jboss.netty.buffer.ChannelBuffers:org.jboss.netty.buffer.ChannelBuffer copiedBuffer(java.nio.ByteOrder,byte[][])"
        ]
    },
    "org.jboss.netty.buffer.CompositeChannelBuffer:void <init>(org.jboss.netty.buffer.CompositeChannelBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.buffer.CompositeChannelBuffer:org.jboss.netty.buffer.ChannelBuffer duplicate()"
        ]
    },
    "org.jboss.netty.channel.ChannelState:org.jboss.netty.channel.ChannelState[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.DownstreamChannelStateEvent$1:void <clinit>()",
            "org.jboss.netty.channel.SimpleChannelDownstreamHandler$1:void <clinit>()",
            "org.jboss.netty.channel.SimpleChannelHandler$1:void <clinit>()",
            "org.jboss.netty.channel.SimpleChannelUpstreamHandler$1:void <clinit>()",
            "org.jboss.netty.channel.UpstreamChannelStateEvent$1:void <clinit>()",
            "org.jboss.netty.channel.local.LocalClientChannelSink$1:void <clinit>()",
            "org.jboss.netty.channel.local.LocalServerChannelSink$1:void <clinit>()",
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketPipelineSink$1:void <clinit>()",
            "org.jboss.netty.channel.socket.nio.NioClientSocketPipelineSink$2:void <clinit>()",
            "org.jboss.netty.channel.socket.nio.NioDatagramPipelineSink$1:void <clinit>()",
            "org.jboss.netty.channel.socket.nio.NioServerSocketPipelineSink$1:void <clinit>()",
            "org.jboss.netty.channel.socket.oio.OioClientSocketPipelineSink$1:void <clinit>()",
            "org.jboss.netty.channel.socket.oio.OioDatagramPipelineSink$1:void <clinit>()",
            "org.jboss.netty.channel.socket.oio.OioServerSocketPipelineSink$1:void <clinit>()",
            "org.jboss.netty.handler.codec.compression.JdkZlibEncoder$2:void <clinit>()",
            "org.jboss.netty.handler.codec.compression.ZlibEncoder$2:void <clinit>()",
            "org.jboss.netty.handler.codec.spdy.SpdyFrameEncoder$1:void <clinit>()",
            "org.jboss.netty.handler.codec.spdy.SpdySessionHandler$5:void <clinit>()",
            "org.jboss.netty.handler.ipfilter.IpFilteringHandlerImpl$1:void <clinit>()",
            "org.jboss.netty.handler.ssl.SslHandler$8:void <clinit>()",
            "org.jboss.netty.handler.stream.ChunkedWriteHandler$3:void <clinit>()"
        ]
    },
    "org.jboss.netty.channel.socket.InternetProtocolFamily:org.jboss.netty.channel.socket.InternetProtocolFamily[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.NioDatagramChannel$1:void <clinit>()",
            "org.jboss.netty.channel.socket.nio.ProtocolFamilyConverter$1:void <clinit>()"
        ]
    },
    "org.jboss.netty.channel.socket.http.HttpTunnelingSocketChannelConfig:java.lang.String[] getEnabledSslCipherSuites()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$2:void operationComplete(org.jboss.netty.channel.ChannelFuture)"
        ]
    },
    "org.jboss.netty.channel.socket.http.HttpTunnelingSocketChannelConfig:void setEnabledSslCipherSuites(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.http.HttpTunnelingSocketChannelConfig:boolean setOption(java.lang.String,java.lang.Object)"
        ]
    },
    "org.jboss.netty.channel.socket.http.HttpTunnelingSocketChannelConfig:java.lang.String[] getEnabledSslProtocols()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$2:void operationComplete(org.jboss.netty.channel.ChannelFuture)"
        ]
    },
    "org.jboss.netty.channel.socket.http.HttpTunnelingSocketChannelConfig:void setEnabledSslProtocols(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.http.HttpTunnelingSocketChannelConfig:boolean setOption(java.lang.String,java.lang.Object)"
        ]
    },
    "org.jboss.netty.handler.codec.base64.Base64Dialect:org.jboss.netty.handler.codec.base64.Base64Dialect[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.compression.ZlibWrapper:org.jboss.netty.handler.codec.compression.ZlibWrapper[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.compression.ZlibUtil$1:void <clinit>()",
            "org.jboss.netty.handler.codec.http.HttpContentCompressor$1:void <clinit>()"
        ]
    },
    "org.jboss.netty.handler.codec.http.DefaultCookie:void setPorts(int[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.http.HttpMessageDecoder$State:org.jboss.netty.handler.codec.http.HttpMessageDecoder$State[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.HttpMessageDecoder$1:void <clinit>()"
        ]
    },
    "org.jboss.netty.handler.codec.http.multipart.HttpPostBodyUtil$TransferEncodingMechanism:org.jboss.netty.handler.codec.http.multipart.HttpPostBodyUtil$TransferEncodingMechanism[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestDecoder$MultiPartStatus:org.jboss.netty.handler.codec.http.multipart.HttpPostRequestDecoder$MultiPartStatus[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder$1:void <clinit>()",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder$1:void <clinit>()"
        ]
    },
    "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder$EncoderMode:org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder$EncoderMode[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData$HttpDataType:org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData$HttpDataType[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder$State:org.jboss.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder$State[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder$1:void <clinit>()"
        ]
    },
    "org.jboss.netty.handler.codec.http.websocketx.WebSocketFrameType:org.jboss.netty.handler.codec.http.websocketx.WebSocketFrameType[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.http.websocketx.WebSocketVersion:org.jboss.netty.handler.codec.http.websocketx.WebSocketVersion[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.replay.VoidEnum:org.jboss.netty.handler.codec.replay.VoidEnum[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.serialization.CompatibleObjectDecoderState:org.jboss.netty.handler.codec.serialization.CompatibleObjectDecoderState[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.serialization.CompatibleObjectDecoder$1:void <clinit>()"
        ]
    },
    "org.jboss.netty.handler.codec.socks.SocksAuthRequestDecoder$State:org.jboss.netty.handler.codec.socks.SocksAuthRequestDecoder$State[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.socks.SocksAuthRequestDecoder$1:void <clinit>()"
        ]
    },
    "org.jboss.netty.handler.codec.socks.SocksAuthResponseDecoder$State:org.jboss.netty.handler.codec.socks.SocksAuthResponseDecoder$State[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.socks.SocksAuthResponseDecoder$1:void <clinit>()"
        ]
    },
    "org.jboss.netty.handler.codec.socks.SocksCmdRequestDecoder$State:org.jboss.netty.handler.codec.socks.SocksCmdRequestDecoder$State[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.socks.SocksCmdRequestDecoder$1:void <clinit>()"
        ]
    },
    "org.jboss.netty.handler.codec.socks.SocksCmdResponseDecoder$State:org.jboss.netty.handler.codec.socks.SocksCmdResponseDecoder$State[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.socks.SocksCmdResponseDecoder$1:void <clinit>()"
        ]
    },
    "org.jboss.netty.handler.codec.socks.SocksInitRequestDecoder$State:org.jboss.netty.handler.codec.socks.SocksInitRequestDecoder$State[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.socks.SocksInitRequestDecoder$1:void <clinit>()"
        ]
    },
    "org.jboss.netty.handler.codec.socks.SocksInitResponseDecoder$State:org.jboss.netty.handler.codec.socks.SocksInitResponseDecoder$State[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.socks.SocksInitResponseDecoder$1:void <clinit>()"
        ]
    },
    "org.jboss.netty.handler.codec.socks.SocksMessage$AddressType:org.jboss.netty.handler.codec.socks.SocksMessage$AddressType[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.socks.SocksCmdRequest$1:void <clinit>()",
            "org.jboss.netty.handler.codec.socks.SocksCmdRequestDecoder$1:void <clinit>()",
            "org.jboss.netty.handler.codec.socks.SocksCmdResponse$1:void <clinit>()",
            "org.jboss.netty.handler.codec.socks.SocksCmdResponseDecoder$1:void <clinit>()",
            "org.jboss.netty.handler.codec.socks.SocksMessage$AddressType:org.jboss.netty.handler.codec.socks.SocksMessage$AddressType fromByte(byte)"
        ]
    },
    "org.jboss.netty.handler.codec.socks.SocksMessage$AuthScheme:org.jboss.netty.handler.codec.socks.SocksMessage$AuthScheme[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.socks.SocksMessage$AuthScheme:org.jboss.netty.handler.codec.socks.SocksMessage$AuthScheme fromByte(byte)"
        ]
    },
    "org.jboss.netty.handler.codec.socks.SocksMessage$AuthStatus:org.jboss.netty.handler.codec.socks.SocksMessage$AuthStatus[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.socks.SocksMessage$AuthStatus:org.jboss.netty.handler.codec.socks.SocksMessage$AuthStatus fromByte(byte)"
        ]
    },
    "org.jboss.netty.handler.codec.socks.SocksMessage$CmdStatus:org.jboss.netty.handler.codec.socks.SocksMessage$CmdStatus[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.socks.SocksMessage$CmdStatus:org.jboss.netty.handler.codec.socks.SocksMessage$CmdStatus fromByte(byte)"
        ]
    },
    "org.jboss.netty.handler.codec.socks.SocksMessage$CmdType:org.jboss.netty.handler.codec.socks.SocksMessage$CmdType[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.socks.SocksMessage$CmdType:org.jboss.netty.handler.codec.socks.SocksMessage$CmdType fromByte(byte)"
        ]
    },
    "org.jboss.netty.handler.codec.socks.SocksMessage$MessageType:org.jboss.netty.handler.codec.socks.SocksMessage$MessageType[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.socks.SocksMessage$ProtocolVersion:org.jboss.netty.handler.codec.socks.SocksMessage$ProtocolVersion[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.socks.SocksMessage$ProtocolVersion:org.jboss.netty.handler.codec.socks.SocksMessage$ProtocolVersion fromByte(byte)"
        ]
    },
    "org.jboss.netty.handler.codec.socks.SocksMessage$SubnegotiationVersion:org.jboss.netty.handler.codec.socks.SocksMessage$SubnegotiationVersion[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.socks.SocksMessage$SubnegotiationVersion:org.jboss.netty.handler.codec.socks.SocksMessage$SubnegotiationVersion fromByte(byte)"
        ]
    },
    "org.jboss.netty.handler.codec.socks.SocksRequest$SocksRequestType:org.jboss.netty.handler.codec.socks.SocksRequest$SocksRequestType[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.socks.SocksResponse$SocksResponseType:org.jboss.netty.handler.codec.socks.SocksResponse$SocksResponseType[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.spdy.SpdyFrameDecoder$State:org.jboss.netty.handler.codec.spdy.SpdyFrameDecoder$State[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.spdy.SpdyFrameDecoder$1:void <clinit>()"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.SpdyOrHttpChooser$SelectedProtocol:org.jboss.netty.handler.codec.spdy.SpdyOrHttpChooser$SelectedProtocol[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.spdy.SpdyOrHttpChooser$1:void <clinit>()"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.SpdyVersion:org.jboss.netty.handler.codec.spdy.SpdyVersion[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.timeout.IdleState:org.jboss.netty.handler.timeout.IdleState[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.logging.InternalLogLevel:org.jboss.netty.logging.InternalLogLevel[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.logging.AbstractInternalLogger$1:void <clinit>()"
        ]
    },
    "org.jboss.netty.util.internal.jzlib.JZlib$WrapperType:org.jboss.netty.util.internal.jzlib.JZlib$WrapperType[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.jzlib.Deflate$1:void <clinit>()",
            "org.jboss.netty.util.internal.jzlib.Inflate$1:void <clinit>()",
            "org.jboss.netty.util.internal.jzlib.ZStream$1:void <clinit>()"
        ]
    },
    "org.apache.commons.lang.ArrayUtils:java.lang.Object[] clone(java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.ArrayUtils:java.lang.Object[] addAll(java.lang.Object[],java.lang.Object[])",
            "org.apache.commons.lang.ArrayUtils:java.lang.Object[] removeElement(java.lang.Object[],java.lang.Object)"
        ]
    },
    "org.apache.commons.lang.ArrayUtils:long[] clone(long[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.ArrayUtils:long[] addAll(long[],long[])",
            "org.apache.commons.lang.ArrayUtils:long[] removeElement(long[],long)"
        ]
    },
    "org.apache.commons.lang.ArrayUtils:int[] clone(int[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.ArrayUtils:int[] addAll(int[],int[])",
            "org.apache.commons.lang.ArrayUtils:int[] removeElement(int[],int)"
        ]
    },
    "org.apache.commons.lang.ArrayUtils:short[] clone(short[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.ArrayUtils:short[] addAll(short[],short[])",
            "org.apache.commons.lang.ArrayUtils:short[] removeElement(short[],short)"
        ]
    },
    "org.apache.commons.lang.ArrayUtils:char[] clone(char[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.ArrayUtils:char[] addAll(char[],char[])",
            "org.apache.commons.lang.ArrayUtils:char[] removeElement(char[],char)"
        ]
    },
    "org.apache.commons.lang.ArrayUtils:byte[] clone(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.ArrayUtils:byte[] addAll(byte[],byte[])",
            "org.apache.commons.lang.ArrayUtils:byte[] removeElement(byte[],byte)"
        ]
    },
    "org.apache.commons.lang.ArrayUtils:double[] clone(double[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.ArrayUtils:double[] addAll(double[],double[])",
            "org.apache.commons.lang.ArrayUtils:double[] removeElement(double[],double)"
        ]
    },
    "org.apache.commons.lang.ArrayUtils:float[] clone(float[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.ArrayUtils:float[] addAll(float[],float[])",
            "org.apache.commons.lang.ArrayUtils:float[] removeElement(float[],float)"
        ]
    },
    "org.apache.commons.lang.ArrayUtils:boolean[] clone(boolean[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.ArrayUtils:boolean[] addAll(boolean[],boolean[])",
            "org.apache.commons.lang.ArrayUtils:boolean[] removeElement(boolean[],boolean)"
        ]
    },
    "org.apache.commons.lang.ObjectUtils:java.lang.Object clone(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.ObjectUtils:java.lang.Object cloneIfPossible(java.lang.Object)"
        ]
    },
    "org.apache.commons.lang.text.StrMatcher$CharSetMatcher:void <init>(char[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.text.StrMatcher:org.apache.commons.lang.text.StrMatcher charSetMatcher(char[])",
            "org.apache.commons.lang.text.StrMatcher:org.apache.commons.lang.text.StrMatcher charSetMatcher(java.lang.String)",
            "org.apache.commons.lang.text.StrMatcher:void <clinit>()"
        ]
    },
    "org.apache.commons.lang.text.StrTokenizer:java.lang.String[] getTokenArray()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.text.StrTokenizer:java.lang.Object cloneReset()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.text.StrTokenizer:java.lang.Object clone()"
        ]
    },
    "org.apache.commons.lang3.ArrayUtils:java.lang.Object[] clone(java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.ArrayUtils:java.lang.Object[] addAll(java.lang.Object[],java.lang.Object[])",
            "org.apache.commons.lang3.ArrayUtils:java.lang.Object[] removeElement(java.lang.Object[],java.lang.Object)",
            "org.apache.commons.lang3.ArrayUtils:java.lang.Object[] removeElements(java.lang.Object[],java.lang.Object[])",
            "org.apache.commons.lang3.exception.ExceptionUtils:java.lang.String[] getDefaultCauseMethodNames()",
            "org.apache.commons.lang3.text.translate.AggregateTranslator:void <init>(org.apache.commons.lang3.text.translate.CharSequenceTranslator[])"
        ]
    },
    "org.apache.commons.lang3.ArrayUtils:long[] clone(long[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.ArrayUtils:long[] addAll(long[],long[])",
            "org.apache.commons.lang3.ArrayUtils:long[] removeElement(long[],long)",
            "org.apache.commons.lang3.ArrayUtils:long[] removeElements(long[],long[])",
            "org.apache.commons.lang3.EnumUtils:java.util.EnumSet processBitVectors(java.lang.Class,long[])"
        ]
    },
    "org.apache.commons.lang3.ArrayUtils:int[] clone(int[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.ArrayUtils:int[] addAll(int[],int[])",
            "org.apache.commons.lang3.ArrayUtils:int[] removeElement(int[],int)",
            "org.apache.commons.lang3.ArrayUtils:java.lang.Object[] removeAll(java.lang.Object[],int[])",
            "org.apache.commons.lang3.ArrayUtils:byte[] removeAll(byte[],int[])",
            "org.apache.commons.lang3.ArrayUtils:short[] removeAll(short[],int[])",
            "org.apache.commons.lang3.ArrayUtils:int[] removeAll(int[],int[])",
            "org.apache.commons.lang3.ArrayUtils:int[] removeElements(int[],int[])",
            "org.apache.commons.lang3.ArrayUtils:char[] removeAll(char[],int[])",
            "org.apache.commons.lang3.ArrayUtils:long[] removeAll(long[],int[])",
            "org.apache.commons.lang3.ArrayUtils:float[] removeAll(float[],int[])",
            "org.apache.commons.lang3.ArrayUtils:double[] removeAll(double[],int[])",
            "org.apache.commons.lang3.ArrayUtils:boolean[] removeAll(boolean[],int[])"
        ]
    },
    "org.apache.commons.lang3.ArrayUtils:short[] clone(short[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.ArrayUtils:short[] addAll(short[],short[])",
            "org.apache.commons.lang3.ArrayUtils:short[] removeElement(short[],short)",
            "org.apache.commons.lang3.ArrayUtils:short[] removeElements(short[],short[])"
        ]
    },
    "org.apache.commons.lang3.ArrayUtils:char[] clone(char[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.ArrayUtils:char[] addAll(char[],char[])",
            "org.apache.commons.lang3.ArrayUtils:char[] removeElement(char[],char)",
            "org.apache.commons.lang3.ArrayUtils:char[] removeElements(char[],char[])",
            "org.apache.commons.lang3.text.StrTokenizer:void <init>(char[])",
            "org.apache.commons.lang3.text.StrTokenizer:org.apache.commons.lang3.text.StrTokenizer reset(char[])"
        ]
    },
    "org.apache.commons.lang3.ArrayUtils:byte[] clone(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.ArrayUtils:byte[] addAll(byte[],byte[])",
            "org.apache.commons.lang3.ArrayUtils:byte[] removeElement(byte[],byte)",
            "org.apache.commons.lang3.ArrayUtils:byte[] removeElements(byte[],byte[])"
        ]
    },
    "org.apache.commons.lang3.ArrayUtils:double[] clone(double[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.ArrayUtils:double[] addAll(double[],double[])",
            "org.apache.commons.lang3.ArrayUtils:double[] removeElement(double[],double)",
            "org.apache.commons.lang3.ArrayUtils:double[] removeElements(double[],double[])"
        ]
    },
    "org.apache.commons.lang3.ArrayUtils:float[] clone(float[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.ArrayUtils:float[] addAll(float[],float[])",
            "org.apache.commons.lang3.ArrayUtils:float[] removeElement(float[],float)",
            "org.apache.commons.lang3.ArrayUtils:float[] removeElements(float[],float[])"
        ]
    },
    "org.apache.commons.lang3.ArrayUtils:boolean[] clone(boolean[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.ArrayUtils:boolean[] addAll(boolean[],boolean[])",
            "org.apache.commons.lang3.ArrayUtils:boolean[] removeElement(boolean[],boolean)",
            "org.apache.commons.lang3.ArrayUtils:boolean[] removeElements(boolean[],boolean[])"
        ]
    },
    "org.apache.commons.lang3.builder.ReflectionToStringBuilder:java.lang.String[] getExcludeFieldNames()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.ClassUtils$Interfaces:org.apache.commons.lang3.ClassUtils$Interfaces[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.JavaVersion:org.apache.commons.lang3.JavaVersion[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.ObjectUtils:java.lang.Object clone(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.ObjectUtils:java.lang.Object cloneIfPossible(java.lang.Object)"
        ]
    },
    "org.apache.commons.lang3.Range$ComparableComparator:org.apache.commons.lang3.Range$ComparableComparator[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.reflect.TypeUtils$ParameterizedTypeImpl:java.lang.reflect.Type[] getActualTypeArguments()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.reflect.TypeUtils:java.util.Map getTypeArguments(java.lang.reflect.ParameterizedType,java.lang.Class,java.util.Map)",
            "org.apache.commons.lang3.reflect.TypeUtils:void mapTypeVariablesToArguments(java.lang.Class,java.lang.reflect.ParameterizedType,java.util.Map)",
            "org.apache.commons.lang3.reflect.TypeUtils:java.lang.reflect.Type unrollVariables(java.util.Map,java.lang.reflect.Type)",
            "org.apache.commons.lang3.reflect.TypeUtils:boolean containsTypeVariables(java.lang.reflect.Type)",
            "org.apache.commons.lang3.reflect.TypeUtils:boolean equals(java.lang.reflect.ParameterizedType,java.lang.reflect.Type)",
            "org.apache.commons.lang3.reflect.TypeUtils:java.lang.String parameterizedTypeToString(java.lang.reflect.ParameterizedType)",
            "com.esotericsoftware.kryo.serializers.FieldSerializerGenericsUtil:java.lang.Class[] computeFieldGenerics(java.lang.reflect.Type,java.lang.reflect.Field,java.lang.Class[])",
            "com.esotericsoftware.kryo.serializers.FieldSerializerGenericsUtil:java.lang.Class[] getGenerics(java.lang.reflect.Type,com.esotericsoftware.kryo.Kryo)"
        ]
    },
    "org.apache.commons.lang3.reflect.TypeUtils$WildcardTypeImpl:java.lang.reflect.Type[] getUpperBounds()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.reflect.TypeUtils:java.lang.reflect.Type[] getImplicitUpperBounds(java.lang.reflect.WildcardType)",
            "org.apache.commons.lang3.reflect.TypeUtils:java.lang.reflect.Type unrollVariables(java.util.Map,java.lang.reflect.Type)",
            "org.apache.commons.lang3.reflect.TypeUtils:java.lang.String wildcardTypeToString(java.lang.reflect.WildcardType)"
        ]
    },
    "org.apache.commons.lang3.reflect.TypeUtils$WildcardTypeImpl:java.lang.reflect.Type[] getLowerBounds()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.reflect.TypeUtils:java.lang.reflect.Type[] getImplicitLowerBounds(java.lang.reflect.WildcardType)",
            "org.apache.commons.lang3.reflect.TypeUtils:java.lang.reflect.Type unrollVariables(java.util.Map,java.lang.reflect.Type)",
            "org.apache.commons.lang3.reflect.TypeUtils:boolean equals(java.lang.reflect.WildcardType,java.lang.reflect.Type)",
            "org.apache.commons.lang3.reflect.TypeUtils:java.lang.String wildcardTypeToString(java.lang.reflect.WildcardType)"
        ]
    },
    "org.apache.commons.lang3.text.StrMatcher$CharSetMatcher:void <init>(char[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.text.StrMatcher:org.apache.commons.lang3.text.StrMatcher charSetMatcher(char[])",
            "org.apache.commons.lang3.text.StrMatcher:org.apache.commons.lang3.text.StrMatcher charSetMatcher(java.lang.String)",
            "org.apache.commons.lang3.text.StrMatcher:void <clinit>()"
        ]
    },
    "org.apache.commons.lang3.text.StrTokenizer:java.lang.String[] getTokenArray()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.text.StrTokenizer:java.lang.Object cloneReset()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.text.StrTokenizer:java.lang.Object clone()"
        ]
    },
    "org.apache.commons.lang3.text.translate.EntityArrays:java.lang.String[][] ISO8859_1_ESCAPE()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.StringEscapeUtils:void <clinit>()"
        ]
    },
    "org.apache.commons.lang3.text.translate.EntityArrays:java.lang.String[][] ISO8859_1_UNESCAPE()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.StringEscapeUtils:void <clinit>()"
        ]
    },
    "org.apache.commons.lang3.text.translate.EntityArrays:java.lang.String[][] HTML40_EXTENDED_ESCAPE()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.StringEscapeUtils:void <clinit>()"
        ]
    },
    "org.apache.commons.lang3.text.translate.EntityArrays:java.lang.String[][] HTML40_EXTENDED_UNESCAPE()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.StringEscapeUtils:void <clinit>()"
        ]
    },
    "org.apache.commons.lang3.text.translate.EntityArrays:java.lang.String[][] BASIC_ESCAPE()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.StringEscapeUtils:void <clinit>()"
        ]
    },
    "org.apache.commons.lang3.text.translate.EntityArrays:java.lang.String[][] BASIC_UNESCAPE()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.StringEscapeUtils:void <clinit>()"
        ]
    },
    "org.apache.commons.lang3.text.translate.EntityArrays:java.lang.String[][] APOS_ESCAPE()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.StringEscapeUtils:void <clinit>()"
        ]
    },
    "org.apache.commons.lang3.text.translate.EntityArrays:java.lang.String[][] APOS_UNESCAPE()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.StringEscapeUtils:void <clinit>()"
        ]
    },
    "org.apache.commons.lang3.text.translate.EntityArrays:java.lang.String[][] JAVA_CTRL_CHARS_ESCAPE()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.StringEscapeUtils:void <clinit>()"
        ]
    },
    "org.apache.commons.lang3.text.translate.EntityArrays:java.lang.String[][] JAVA_CTRL_CHARS_UNESCAPE()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.StringEscapeUtils:void <clinit>()"
        ]
    },
    "org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION:org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.time.StopWatch$SplitState:org.apache.commons.lang3.time.StopWatch$SplitState[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.time.StopWatch$State:org.apache.commons.lang3.time.StopWatch$State[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.packet.ONOSLLDP:org.onlab.packet.ONOSLLDP parseONOSLLDP(org.onlab.packet.Ethernet)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.packet.EAPOL:org.onlab.packet.EAPOL lambda$deserializer$53(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.EAPOL$lambda_deserializer_53__84:org.onlab.packet.IPacket deserialize(byte[],int,int)"
        ]
    },
    "org.onlab.packet.Ethernet:org.onlab.packet.IPacket deserialize(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.BasePacket:java.lang.Object clone()",
            "org.onlab.packet.EAPOL:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ICMP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.PIM:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.TCP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.EncapSecurityPayload:org.onlab.packet.IPacket deserialize(byte[],int,int)"
        ]
    },
    "org.onlab.packet.Ethernet:org.onlab.packet.Ethernet lambda$deserializer$10(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.Ethernet$lambda_deserializer_10__66:org.onlab.packet.IPacket deserialize(byte[],int,int)"
        ]
    },
    "org.onlab.packet.ICMP:org.onlab.packet.ICMP lambda$deserializer$29(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.ICMP$lambda_deserializer_29__72:org.onlab.packet.IPacket deserialize(byte[],int,int)"
        ]
    },
    "org.onlab.packet.ICMP6:org.onlab.packet.IPacket deserialize(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.BasePacket:java.lang.Object clone()",
            "org.onlab.packet.EAPOL:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ICMP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.PIM:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.TCP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.EncapSecurityPayload:org.onlab.packet.IPacket deserialize(byte[],int,int)"
        ]
    },
    "org.onlab.packet.ICMP6:org.onlab.packet.ICMP6 lambda$deserializer$40(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.ICMP6$lambda_deserializer_40__73:org.onlab.packet.IPacket deserialize(byte[],int,int)"
        ]
    },
    "org.onlab.packet.IPv4:org.onlab.packet.IPacket deserialize(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.BasePacket:java.lang.Object clone()",
            "org.onlab.packet.EAPOL:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ICMP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.PIM:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.TCP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.EncapSecurityPayload:org.onlab.packet.IPacket deserialize(byte[],int,int)"
        ]
    },
    "org.onlab.packet.IPv4:org.onlab.packet.IPv4 lambda$deserializer$24(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.IPv4$lambda_deserializer_24__80:org.onlab.packet.IPacket deserialize(byte[],int,int)"
        ]
    },
    "org.onlab.packet.IPv6:org.onlab.packet.IPacket deserialize(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.BasePacket:java.lang.Object clone()",
            "org.onlab.packet.EAPOL:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ICMP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.PIM:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.TCP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.EncapSecurityPayload:org.onlab.packet.IPacket deserialize(byte[],int,int)"
        ]
    },
    "org.onlab.packet.IPv6:org.onlab.packet.IPv6 lambda$deserializer$48(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.IPv6$lambda_deserializer_48__79:org.onlab.packet.IPacket deserialize(byte[],int,int)"
        ]
    },
    "org.onlab.packet.MPLS:org.onlab.packet.IPacket deserialize(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.BasePacket:java.lang.Object clone()",
            "org.onlab.packet.EAPOL:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ICMP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.PIM:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.TCP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.EncapSecurityPayload:org.onlab.packet.IPacket deserialize(byte[],int,int)"
        ]
    },
    "org.onlab.packet.MPLS:org.onlab.packet.MPLS lambda$deserializer$12(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.MPLS$lambda_deserializer_12__83:org.onlab.packet.IPacket deserialize(byte[],int,int)"
        ]
    },
    "org.onlab.packet.PIM:org.onlab.packet.PIM lambda$deserializer$49(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.PIM$lambda_deserializer_49__90:org.onlab.packet.IPacket deserialize(byte[],int,int)"
        ]
    },
    "org.onlab.packet.TCP:org.onlab.packet.TCP lambda$deserializer$39(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.TCP$lambda_deserializer_39__69:org.onlab.packet.IPacket deserialize(byte[],int,int)"
        ]
    },
    "org.onlab.packet.UDP:org.onlab.packet.IPacket deserialize(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.BasePacket:java.lang.Object clone()",
            "org.onlab.packet.EAPOL:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ICMP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.PIM:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.TCP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.EncapSecurityPayload:org.onlab.packet.IPacket deserialize(byte[],int,int)"
        ]
    },
    "org.onlab.packet.UDP:org.onlab.packet.UDP lambda$deserializer$45(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.UDP$lambda_deserializer_45__78:org.onlab.packet.IPacket deserialize(byte[],int,int)"
        ]
    },
    "org.onlab.packet.ipv6.Authentication:org.onlab.packet.IPacket deserialize(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.BasePacket:java.lang.Object clone()",
            "org.onlab.packet.EAPOL:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ICMP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.PIM:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.TCP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.EncapSecurityPayload:org.onlab.packet.IPacket deserialize(byte[],int,int)"
        ]
    },
    "org.onlab.packet.ipv6.Authentication:org.onlab.packet.ipv6.Authentication lambda$deserializer$46(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.ipv6.Authentication$lambda_deserializer_46__86:org.onlab.packet.IPacket deserialize(byte[],int,int)"
        ]
    },
    "org.onlab.packet.ipv6.BaseOptions:org.onlab.packet.IPacket deserialize(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.BasePacket:java.lang.Object clone()",
            "org.onlab.packet.EAPOL:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ICMP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.PIM:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.TCP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.EncapSecurityPayload:org.onlab.packet.IPacket deserialize(byte[],int,int)"
        ]
    },
    "org.onlab.packet.ipv6.BaseOptions:org.onlab.packet.ipv6.BaseOptions lambda$deserializer$13(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.ipv6.BaseOptions$lambda_deserializer_13__92:org.onlab.packet.IPacket deserialize(byte[],int,int)"
        ]
    },
    "org.onlab.packet.ipv6.EncapSecurityPayload:org.onlab.packet.ipv6.EncapSecurityPayload lambda$deserializer$51(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.ipv6.EncapSecurityPayload$lambda_deserializer_51__88:org.onlab.packet.IPacket deserialize(byte[],int,int)"
        ]
    },
    "org.onlab.packet.ipv6.Fragment:org.onlab.packet.IPacket deserialize(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.BasePacket:java.lang.Object clone()",
            "org.onlab.packet.EAPOL:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ICMP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.PIM:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.TCP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.EncapSecurityPayload:org.onlab.packet.IPacket deserialize(byte[],int,int)"
        ]
    },
    "org.onlab.packet.ipv6.Fragment:org.onlab.packet.ipv6.Fragment lambda$deserializer$26(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.ipv6.Fragment$lambda_deserializer_26__87:org.onlab.packet.IPacket deserialize(byte[],int,int)"
        ]
    },
    "org.onlab.packet.ipv6.Routing:org.onlab.packet.IPacket deserialize(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.BasePacket:java.lang.Object clone()",
            "org.onlab.packet.EAPOL:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ICMP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.PIM:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.TCP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.EncapSecurityPayload:org.onlab.packet.IPacket deserialize(byte[],int,int)"
        ]
    },
    "org.onlab.packet.ipv6.Routing:org.onlab.packet.ipv6.Routing lambda$deserializer$50(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.ipv6.Routing$lambda_deserializer_50__85:org.onlab.packet.IPacket deserialize(byte[],int,int)"
        ]
    },
    "org.onlab.packet.ARP:int hashCode()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.BasePacket:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentHashMap:int hashOf(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap:int hashOf(java.lang.Object)",
            "org.apache.commons.lang.builder.HashCodeBuilder:org.apache.commons.lang.builder.HashCodeBuilder append(java.lang.Object)",
            "org.apache.commons.lang.mutable.MutableObject:int hashCode()",
            "org.apache.commons.lang.ObjectUtils:int hashCode(java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:int hashCode()",
            "org.apache.commons.lang.time.FastDateFormat$Pair:int hashCode()",
            "org.apache.commons.lang3.AnnotationUtils:int hashMember(java.lang.String,java.lang.Object)",
            "org.apache.commons.lang3.builder.HashCodeBuilder:org.apache.commons.lang3.builder.HashCodeBuilder append(java.lang.Object)",
            "org.apache.commons.lang3.concurrent.ConstantInitializer:int hashCode()",
            "org.apache.commons.lang3.mutable.MutableObject:int hashCode()",
            "org.apache.commons.lang3.ObjectUtils:int hashCode(java.lang.Object)",
            "org.apache.commons.lang3.Range:int hashCode()",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:int hashCode()",
            "org.apache.commons.lang3.time.FormatCache$MultipartKey:int hashCode()",
            "org.apache.commons.lang3.tuple.Pair:int hashCode()",
            "org.apache.commons.lang3.tuple.Triple:int hashCode()",
            "org.objectweb.asm.ClassReader:void a(org.objectweb.asm.ClassWriter,org.objectweb.asm.Item[],char[])",
            "org.objectweb.asm.ClassWriter:org.objectweb.asm.Item a(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[])",
            "com.eclipsesource.json.JsonObject$HashIndexTable:int hashSlotFor(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object put_internal(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void putResize(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void push(java.lang.Object,java.lang.Object,int,java.lang.Object,int,java.lang.Object,int,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object remove(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsKey(java.lang.Object)"
        ]
    },
    "org.onlab.packet.Data:int hashCode()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.BasePacket:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentHashMap:int hashOf(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap:int hashOf(java.lang.Object)",
            "org.apache.commons.lang.builder.HashCodeBuilder:org.apache.commons.lang.builder.HashCodeBuilder append(java.lang.Object)",
            "org.apache.commons.lang.mutable.MutableObject:int hashCode()",
            "org.apache.commons.lang.ObjectUtils:int hashCode(java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:int hashCode()",
            "org.apache.commons.lang.time.FastDateFormat$Pair:int hashCode()",
            "org.apache.commons.lang3.AnnotationUtils:int hashMember(java.lang.String,java.lang.Object)",
            "org.apache.commons.lang3.builder.HashCodeBuilder:org.apache.commons.lang3.builder.HashCodeBuilder append(java.lang.Object)",
            "org.apache.commons.lang3.concurrent.ConstantInitializer:int hashCode()",
            "org.apache.commons.lang3.mutable.MutableObject:int hashCode()",
            "org.apache.commons.lang3.ObjectUtils:int hashCode(java.lang.Object)",
            "org.apache.commons.lang3.Range:int hashCode()",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:int hashCode()",
            "org.apache.commons.lang3.time.FormatCache$MultipartKey:int hashCode()",
            "org.apache.commons.lang3.tuple.Pair:int hashCode()",
            "org.apache.commons.lang3.tuple.Triple:int hashCode()",
            "org.objectweb.asm.ClassReader:void a(org.objectweb.asm.ClassWriter,org.objectweb.asm.Item[],char[])",
            "org.objectweb.asm.ClassWriter:org.objectweb.asm.Item a(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[])",
            "com.eclipsesource.json.JsonObject$HashIndexTable:int hashSlotFor(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object put_internal(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void putResize(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void push(java.lang.Object,java.lang.Object,int,java.lang.Object,int,java.lang.Object,int,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object remove(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsKey(java.lang.Object)"
        ]
    },
    "org.onlab.packet.EAP:int hashCode()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.BasePacket:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentHashMap:int hashOf(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap:int hashOf(java.lang.Object)",
            "org.apache.commons.lang.builder.HashCodeBuilder:org.apache.commons.lang.builder.HashCodeBuilder append(java.lang.Object)",
            "org.apache.commons.lang.mutable.MutableObject:int hashCode()",
            "org.apache.commons.lang.ObjectUtils:int hashCode(java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:int hashCode()",
            "org.apache.commons.lang.time.FastDateFormat$Pair:int hashCode()",
            "org.apache.commons.lang3.AnnotationUtils:int hashMember(java.lang.String,java.lang.Object)",
            "org.apache.commons.lang3.builder.HashCodeBuilder:org.apache.commons.lang3.builder.HashCodeBuilder append(java.lang.Object)",
            "org.apache.commons.lang3.concurrent.ConstantInitializer:int hashCode()",
            "org.apache.commons.lang3.mutable.MutableObject:int hashCode()",
            "org.apache.commons.lang3.ObjectUtils:int hashCode(java.lang.Object)",
            "org.apache.commons.lang3.Range:int hashCode()",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:int hashCode()",
            "org.apache.commons.lang3.time.FormatCache$MultipartKey:int hashCode()",
            "org.apache.commons.lang3.tuple.Pair:int hashCode()",
            "org.apache.commons.lang3.tuple.Triple:int hashCode()",
            "org.objectweb.asm.ClassReader:void a(org.objectweb.asm.ClassWriter,org.objectweb.asm.Item[],char[])",
            "org.objectweb.asm.ClassWriter:org.objectweb.asm.Item a(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[])",
            "com.eclipsesource.json.JsonObject$HashIndexTable:int hashSlotFor(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object put_internal(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void putResize(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void push(java.lang.Object,java.lang.Object,int,java.lang.Object,int,java.lang.Object,int,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object remove(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsKey(java.lang.Object)"
        ]
    },
    "org.onlab.packet.EAPOL:int hashCode()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.BasePacket:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentHashMap:int hashOf(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap:int hashOf(java.lang.Object)",
            "org.apache.commons.lang.builder.HashCodeBuilder:org.apache.commons.lang.builder.HashCodeBuilder append(java.lang.Object)",
            "org.apache.commons.lang.mutable.MutableObject:int hashCode()",
            "org.apache.commons.lang.ObjectUtils:int hashCode(java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:int hashCode()",
            "org.apache.commons.lang.time.FastDateFormat$Pair:int hashCode()",
            "org.apache.commons.lang3.AnnotationUtils:int hashMember(java.lang.String,java.lang.Object)",
            "org.apache.commons.lang3.builder.HashCodeBuilder:org.apache.commons.lang3.builder.HashCodeBuilder append(java.lang.Object)",
            "org.apache.commons.lang3.concurrent.ConstantInitializer:int hashCode()",
            "org.apache.commons.lang3.mutable.MutableObject:int hashCode()",
            "org.apache.commons.lang3.ObjectUtils:int hashCode(java.lang.Object)",
            "org.apache.commons.lang3.Range:int hashCode()",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:int hashCode()",
            "org.apache.commons.lang3.time.FormatCache$MultipartKey:int hashCode()",
            "org.apache.commons.lang3.tuple.Pair:int hashCode()",
            "org.apache.commons.lang3.tuple.Triple:int hashCode()",
            "org.objectweb.asm.ClassReader:void a(org.objectweb.asm.ClassWriter,org.objectweb.asm.Item[],char[])",
            "org.objectweb.asm.ClassWriter:org.objectweb.asm.Item a(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[])",
            "com.eclipsesource.json.JsonObject$HashIndexTable:int hashSlotFor(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object put_internal(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void putResize(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void push(java.lang.Object,java.lang.Object,int,java.lang.Object,int,java.lang.Object,int,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object remove(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsKey(java.lang.Object)"
        ]
    },
    "org.onlab.packet.Ethernet:int hashCode()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.BasePacket:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentHashMap:int hashOf(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap:int hashOf(java.lang.Object)",
            "org.apache.commons.lang.builder.HashCodeBuilder:org.apache.commons.lang.builder.HashCodeBuilder append(java.lang.Object)",
            "org.apache.commons.lang.mutable.MutableObject:int hashCode()",
            "org.apache.commons.lang.ObjectUtils:int hashCode(java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:int hashCode()",
            "org.apache.commons.lang.time.FastDateFormat$Pair:int hashCode()",
            "org.apache.commons.lang3.AnnotationUtils:int hashMember(java.lang.String,java.lang.Object)",
            "org.apache.commons.lang3.builder.HashCodeBuilder:org.apache.commons.lang3.builder.HashCodeBuilder append(java.lang.Object)",
            "org.apache.commons.lang3.concurrent.ConstantInitializer:int hashCode()",
            "org.apache.commons.lang3.mutable.MutableObject:int hashCode()",
            "org.apache.commons.lang3.ObjectUtils:int hashCode(java.lang.Object)",
            "org.apache.commons.lang3.Range:int hashCode()",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:int hashCode()",
            "org.apache.commons.lang3.time.FormatCache$MultipartKey:int hashCode()",
            "org.apache.commons.lang3.tuple.Pair:int hashCode()",
            "org.apache.commons.lang3.tuple.Triple:int hashCode()",
            "org.objectweb.asm.ClassReader:void a(org.objectweb.asm.ClassWriter,org.objectweb.asm.Item[],char[])",
            "org.objectweb.asm.ClassWriter:org.objectweb.asm.Item a(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[])",
            "com.eclipsesource.json.JsonObject$HashIndexTable:int hashSlotFor(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object put_internal(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void putResize(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void push(java.lang.Object,java.lang.Object,int,java.lang.Object,int,java.lang.Object,int,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object remove(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsKey(java.lang.Object)"
        ]
    },
    "org.onlab.packet.ICMP:int hashCode()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.BasePacket:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentHashMap:int hashOf(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap:int hashOf(java.lang.Object)",
            "org.apache.commons.lang.builder.HashCodeBuilder:org.apache.commons.lang.builder.HashCodeBuilder append(java.lang.Object)",
            "org.apache.commons.lang.mutable.MutableObject:int hashCode()",
            "org.apache.commons.lang.ObjectUtils:int hashCode(java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:int hashCode()",
            "org.apache.commons.lang.time.FastDateFormat$Pair:int hashCode()",
            "org.apache.commons.lang3.AnnotationUtils:int hashMember(java.lang.String,java.lang.Object)",
            "org.apache.commons.lang3.builder.HashCodeBuilder:org.apache.commons.lang3.builder.HashCodeBuilder append(java.lang.Object)",
            "org.apache.commons.lang3.concurrent.ConstantInitializer:int hashCode()",
            "org.apache.commons.lang3.mutable.MutableObject:int hashCode()",
            "org.apache.commons.lang3.ObjectUtils:int hashCode(java.lang.Object)",
            "org.apache.commons.lang3.Range:int hashCode()",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:int hashCode()",
            "org.apache.commons.lang3.time.FormatCache$MultipartKey:int hashCode()",
            "org.apache.commons.lang3.tuple.Pair:int hashCode()",
            "org.apache.commons.lang3.tuple.Triple:int hashCode()",
            "org.objectweb.asm.ClassReader:void a(org.objectweb.asm.ClassWriter,org.objectweb.asm.Item[],char[])",
            "org.objectweb.asm.ClassWriter:org.objectweb.asm.Item a(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[])",
            "com.eclipsesource.json.JsonObject$HashIndexTable:int hashSlotFor(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object put_internal(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void putResize(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void push(java.lang.Object,java.lang.Object,int,java.lang.Object,int,java.lang.Object,int,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object remove(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsKey(java.lang.Object)"
        ]
    },
    "org.onlab.packet.ICMP6:int hashCode()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.BasePacket:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentHashMap:int hashOf(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap:int hashOf(java.lang.Object)",
            "org.apache.commons.lang.builder.HashCodeBuilder:org.apache.commons.lang.builder.HashCodeBuilder append(java.lang.Object)",
            "org.apache.commons.lang.mutable.MutableObject:int hashCode()",
            "org.apache.commons.lang.ObjectUtils:int hashCode(java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:int hashCode()",
            "org.apache.commons.lang.time.FastDateFormat$Pair:int hashCode()",
            "org.apache.commons.lang3.AnnotationUtils:int hashMember(java.lang.String,java.lang.Object)",
            "org.apache.commons.lang3.builder.HashCodeBuilder:org.apache.commons.lang3.builder.HashCodeBuilder append(java.lang.Object)",
            "org.apache.commons.lang3.concurrent.ConstantInitializer:int hashCode()",
            "org.apache.commons.lang3.mutable.MutableObject:int hashCode()",
            "org.apache.commons.lang3.ObjectUtils:int hashCode(java.lang.Object)",
            "org.apache.commons.lang3.Range:int hashCode()",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:int hashCode()",
            "org.apache.commons.lang3.time.FormatCache$MultipartKey:int hashCode()",
            "org.apache.commons.lang3.tuple.Pair:int hashCode()",
            "org.apache.commons.lang3.tuple.Triple:int hashCode()",
            "org.objectweb.asm.ClassReader:void a(org.objectweb.asm.ClassWriter,org.objectweb.asm.Item[],char[])",
            "org.objectweb.asm.ClassWriter:org.objectweb.asm.Item a(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[])",
            "com.eclipsesource.json.JsonObject$HashIndexTable:int hashSlotFor(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object put_internal(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void putResize(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void push(java.lang.Object,java.lang.Object,int,java.lang.Object,int,java.lang.Object,int,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object remove(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsKey(java.lang.Object)"
        ]
    },
    "org.onlab.packet.IGMP:int hashCode()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.BasePacket:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentHashMap:int hashOf(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap:int hashOf(java.lang.Object)",
            "org.apache.commons.lang.builder.HashCodeBuilder:org.apache.commons.lang.builder.HashCodeBuilder append(java.lang.Object)",
            "org.apache.commons.lang.mutable.MutableObject:int hashCode()",
            "org.apache.commons.lang.ObjectUtils:int hashCode(java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:int hashCode()",
            "org.apache.commons.lang.time.FastDateFormat$Pair:int hashCode()",
            "org.apache.commons.lang3.AnnotationUtils:int hashMember(java.lang.String,java.lang.Object)",
            "org.apache.commons.lang3.builder.HashCodeBuilder:org.apache.commons.lang3.builder.HashCodeBuilder append(java.lang.Object)",
            "org.apache.commons.lang3.concurrent.ConstantInitializer:int hashCode()",
            "org.apache.commons.lang3.mutable.MutableObject:int hashCode()",
            "org.apache.commons.lang3.ObjectUtils:int hashCode(java.lang.Object)",
            "org.apache.commons.lang3.Range:int hashCode()",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:int hashCode()",
            "org.apache.commons.lang3.time.FormatCache$MultipartKey:int hashCode()",
            "org.apache.commons.lang3.tuple.Pair:int hashCode()",
            "org.apache.commons.lang3.tuple.Triple:int hashCode()",
            "org.objectweb.asm.ClassReader:void a(org.objectweb.asm.ClassWriter,org.objectweb.asm.Item[],char[])",
            "org.objectweb.asm.ClassWriter:org.objectweb.asm.Item a(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[])",
            "com.eclipsesource.json.JsonObject$HashIndexTable:int hashSlotFor(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object put_internal(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void putResize(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void push(java.lang.Object,java.lang.Object,int,java.lang.Object,int,java.lang.Object,int,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object remove(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsKey(java.lang.Object)"
        ]
    },
    "org.onlab.packet.IPv4:int hashCode()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.BasePacket:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentHashMap:int hashOf(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap:int hashOf(java.lang.Object)",
            "org.apache.commons.lang.builder.HashCodeBuilder:org.apache.commons.lang.builder.HashCodeBuilder append(java.lang.Object)",
            "org.apache.commons.lang.mutable.MutableObject:int hashCode()",
            "org.apache.commons.lang.ObjectUtils:int hashCode(java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:int hashCode()",
            "org.apache.commons.lang.time.FastDateFormat$Pair:int hashCode()",
            "org.apache.commons.lang3.AnnotationUtils:int hashMember(java.lang.String,java.lang.Object)",
            "org.apache.commons.lang3.builder.HashCodeBuilder:org.apache.commons.lang3.builder.HashCodeBuilder append(java.lang.Object)",
            "org.apache.commons.lang3.concurrent.ConstantInitializer:int hashCode()",
            "org.apache.commons.lang3.mutable.MutableObject:int hashCode()",
            "org.apache.commons.lang3.ObjectUtils:int hashCode(java.lang.Object)",
            "org.apache.commons.lang3.Range:int hashCode()",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:int hashCode()",
            "org.apache.commons.lang3.time.FormatCache$MultipartKey:int hashCode()",
            "org.apache.commons.lang3.tuple.Pair:int hashCode()",
            "org.apache.commons.lang3.tuple.Triple:int hashCode()",
            "org.objectweb.asm.ClassReader:void a(org.objectweb.asm.ClassWriter,org.objectweb.asm.Item[],char[])",
            "org.objectweb.asm.ClassWriter:org.objectweb.asm.Item a(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[])",
            "com.eclipsesource.json.JsonObject$HashIndexTable:int hashSlotFor(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object put_internal(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void putResize(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void push(java.lang.Object,java.lang.Object,int,java.lang.Object,int,java.lang.Object,int,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object remove(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsKey(java.lang.Object)"
        ]
    },
    "org.onlab.packet.IPv6:int hashCode()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.BasePacket:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentHashMap:int hashOf(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap:int hashOf(java.lang.Object)",
            "org.apache.commons.lang.builder.HashCodeBuilder:org.apache.commons.lang.builder.HashCodeBuilder append(java.lang.Object)",
            "org.apache.commons.lang.mutable.MutableObject:int hashCode()",
            "org.apache.commons.lang.ObjectUtils:int hashCode(java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:int hashCode()",
            "org.apache.commons.lang.time.FastDateFormat$Pair:int hashCode()",
            "org.apache.commons.lang3.AnnotationUtils:int hashMember(java.lang.String,java.lang.Object)",
            "org.apache.commons.lang3.builder.HashCodeBuilder:org.apache.commons.lang3.builder.HashCodeBuilder append(java.lang.Object)",
            "org.apache.commons.lang3.concurrent.ConstantInitializer:int hashCode()",
            "org.apache.commons.lang3.mutable.MutableObject:int hashCode()",
            "org.apache.commons.lang3.ObjectUtils:int hashCode(java.lang.Object)",
            "org.apache.commons.lang3.Range:int hashCode()",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:int hashCode()",
            "org.apache.commons.lang3.time.FormatCache$MultipartKey:int hashCode()",
            "org.apache.commons.lang3.tuple.Pair:int hashCode()",
            "org.apache.commons.lang3.tuple.Triple:int hashCode()",
            "org.objectweb.asm.ClassReader:void a(org.objectweb.asm.ClassWriter,org.objectweb.asm.Item[],char[])",
            "org.objectweb.asm.ClassWriter:org.objectweb.asm.Item a(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[])",
            "com.eclipsesource.json.JsonObject$HashIndexTable:int hashSlotFor(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object put_internal(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void putResize(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void push(java.lang.Object,java.lang.Object,int,java.lang.Object,int,java.lang.Object,int,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object remove(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsKey(java.lang.Object)"
        ]
    },
    "org.onlab.packet.LLDP:int hashCode()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.BasePacket:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentHashMap:int hashOf(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap:int hashOf(java.lang.Object)",
            "org.apache.commons.lang.builder.HashCodeBuilder:org.apache.commons.lang.builder.HashCodeBuilder append(java.lang.Object)",
            "org.apache.commons.lang.mutable.MutableObject:int hashCode()",
            "org.apache.commons.lang.ObjectUtils:int hashCode(java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:int hashCode()",
            "org.apache.commons.lang.time.FastDateFormat$Pair:int hashCode()",
            "org.apache.commons.lang3.AnnotationUtils:int hashMember(java.lang.String,java.lang.Object)",
            "org.apache.commons.lang3.builder.HashCodeBuilder:org.apache.commons.lang3.builder.HashCodeBuilder append(java.lang.Object)",
            "org.apache.commons.lang3.concurrent.ConstantInitializer:int hashCode()",
            "org.apache.commons.lang3.mutable.MutableObject:int hashCode()",
            "org.apache.commons.lang3.ObjectUtils:int hashCode(java.lang.Object)",
            "org.apache.commons.lang3.Range:int hashCode()",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:int hashCode()",
            "org.apache.commons.lang3.time.FormatCache$MultipartKey:int hashCode()",
            "org.apache.commons.lang3.tuple.Pair:int hashCode()",
            "org.apache.commons.lang3.tuple.Triple:int hashCode()",
            "org.objectweb.asm.ClassReader:void a(org.objectweb.asm.ClassWriter,org.objectweb.asm.Item[],char[])",
            "org.objectweb.asm.ClassWriter:org.objectweb.asm.Item a(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[])",
            "com.eclipsesource.json.JsonObject$HashIndexTable:int hashSlotFor(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object put_internal(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void putResize(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void push(java.lang.Object,java.lang.Object,int,java.lang.Object,int,java.lang.Object,int,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object remove(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsKey(java.lang.Object)"
        ]
    },
    "org.onlab.packet.PIM:int hashCode()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.BasePacket:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentHashMap:int hashOf(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap:int hashOf(java.lang.Object)",
            "org.apache.commons.lang.builder.HashCodeBuilder:org.apache.commons.lang.builder.HashCodeBuilder append(java.lang.Object)",
            "org.apache.commons.lang.mutable.MutableObject:int hashCode()",
            "org.apache.commons.lang.ObjectUtils:int hashCode(java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:int hashCode()",
            "org.apache.commons.lang.time.FastDateFormat$Pair:int hashCode()",
            "org.apache.commons.lang3.AnnotationUtils:int hashMember(java.lang.String,java.lang.Object)",
            "org.apache.commons.lang3.builder.HashCodeBuilder:org.apache.commons.lang3.builder.HashCodeBuilder append(java.lang.Object)",
            "org.apache.commons.lang3.concurrent.ConstantInitializer:int hashCode()",
            "org.apache.commons.lang3.mutable.MutableObject:int hashCode()",
            "org.apache.commons.lang3.ObjectUtils:int hashCode(java.lang.Object)",
            "org.apache.commons.lang3.Range:int hashCode()",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:int hashCode()",
            "org.apache.commons.lang3.time.FormatCache$MultipartKey:int hashCode()",
            "org.apache.commons.lang3.tuple.Pair:int hashCode()",
            "org.apache.commons.lang3.tuple.Triple:int hashCode()",
            "org.objectweb.asm.ClassReader:void a(org.objectweb.asm.ClassWriter,org.objectweb.asm.Item[],char[])",
            "org.objectweb.asm.ClassWriter:org.objectweb.asm.Item a(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[])",
            "com.eclipsesource.json.JsonObject$HashIndexTable:int hashSlotFor(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object put_internal(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void putResize(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void push(java.lang.Object,java.lang.Object,int,java.lang.Object,int,java.lang.Object,int,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object remove(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsKey(java.lang.Object)"
        ]
    },
    "org.onlab.packet.TCP:int hashCode()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.BasePacket:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentHashMap:int hashOf(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap:int hashOf(java.lang.Object)",
            "org.apache.commons.lang.builder.HashCodeBuilder:org.apache.commons.lang.builder.HashCodeBuilder append(java.lang.Object)",
            "org.apache.commons.lang.mutable.MutableObject:int hashCode()",
            "org.apache.commons.lang.ObjectUtils:int hashCode(java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:int hashCode()",
            "org.apache.commons.lang.time.FastDateFormat$Pair:int hashCode()",
            "org.apache.commons.lang3.AnnotationUtils:int hashMember(java.lang.String,java.lang.Object)",
            "org.apache.commons.lang3.builder.HashCodeBuilder:org.apache.commons.lang3.builder.HashCodeBuilder append(java.lang.Object)",
            "org.apache.commons.lang3.concurrent.ConstantInitializer:int hashCode()",
            "org.apache.commons.lang3.mutable.MutableObject:int hashCode()",
            "org.apache.commons.lang3.ObjectUtils:int hashCode(java.lang.Object)",
            "org.apache.commons.lang3.Range:int hashCode()",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:int hashCode()",
            "org.apache.commons.lang3.time.FormatCache$MultipartKey:int hashCode()",
            "org.apache.commons.lang3.tuple.Pair:int hashCode()",
            "org.apache.commons.lang3.tuple.Triple:int hashCode()",
            "org.objectweb.asm.ClassReader:void a(org.objectweb.asm.ClassWriter,org.objectweb.asm.Item[],char[])",
            "org.objectweb.asm.ClassWriter:org.objectweb.asm.Item a(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[])",
            "com.eclipsesource.json.JsonObject$HashIndexTable:int hashSlotFor(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object put_internal(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void putResize(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void push(java.lang.Object,java.lang.Object,int,java.lang.Object,int,java.lang.Object,int,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object remove(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsKey(java.lang.Object)"
        ]
    },
    "org.onlab.packet.UDP:int hashCode()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.BasePacket:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentHashMap:int hashOf(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap:int hashOf(java.lang.Object)",
            "org.apache.commons.lang.builder.HashCodeBuilder:org.apache.commons.lang.builder.HashCodeBuilder append(java.lang.Object)",
            "org.apache.commons.lang.mutable.MutableObject:int hashCode()",
            "org.apache.commons.lang.ObjectUtils:int hashCode(java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:int hashCode()",
            "org.apache.commons.lang.time.FastDateFormat$Pair:int hashCode()",
            "org.apache.commons.lang3.AnnotationUtils:int hashMember(java.lang.String,java.lang.Object)",
            "org.apache.commons.lang3.builder.HashCodeBuilder:org.apache.commons.lang3.builder.HashCodeBuilder append(java.lang.Object)",
            "org.apache.commons.lang3.concurrent.ConstantInitializer:int hashCode()",
            "org.apache.commons.lang3.mutable.MutableObject:int hashCode()",
            "org.apache.commons.lang3.ObjectUtils:int hashCode(java.lang.Object)",
            "org.apache.commons.lang3.Range:int hashCode()",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:int hashCode()",
            "org.apache.commons.lang3.time.FormatCache$MultipartKey:int hashCode()",
            "org.apache.commons.lang3.tuple.Pair:int hashCode()",
            "org.apache.commons.lang3.tuple.Triple:int hashCode()",
            "org.objectweb.asm.ClassReader:void a(org.objectweb.asm.ClassWriter,org.objectweb.asm.Item[],char[])",
            "org.objectweb.asm.ClassWriter:org.objectweb.asm.Item a(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[])",
            "com.eclipsesource.json.JsonObject$HashIndexTable:int hashSlotFor(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object put_internal(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void putResize(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void push(java.lang.Object,java.lang.Object,int,java.lang.Object,int,java.lang.Object,int,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object remove(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsKey(java.lang.Object)"
        ]
    },
    "org.onlab.packet.ipv6.Authentication:int hashCode()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.BasePacket:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentHashMap:int hashOf(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap:int hashOf(java.lang.Object)",
            "org.apache.commons.lang.builder.HashCodeBuilder:org.apache.commons.lang.builder.HashCodeBuilder append(java.lang.Object)",
            "org.apache.commons.lang.mutable.MutableObject:int hashCode()",
            "org.apache.commons.lang.ObjectUtils:int hashCode(java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:int hashCode()",
            "org.apache.commons.lang.time.FastDateFormat$Pair:int hashCode()",
            "org.apache.commons.lang3.AnnotationUtils:int hashMember(java.lang.String,java.lang.Object)",
            "org.apache.commons.lang3.builder.HashCodeBuilder:org.apache.commons.lang3.builder.HashCodeBuilder append(java.lang.Object)",
            "org.apache.commons.lang3.concurrent.ConstantInitializer:int hashCode()",
            "org.apache.commons.lang3.mutable.MutableObject:int hashCode()",
            "org.apache.commons.lang3.ObjectUtils:int hashCode(java.lang.Object)",
            "org.apache.commons.lang3.Range:int hashCode()",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:int hashCode()",
            "org.apache.commons.lang3.time.FormatCache$MultipartKey:int hashCode()",
            "org.apache.commons.lang3.tuple.Pair:int hashCode()",
            "org.apache.commons.lang3.tuple.Triple:int hashCode()",
            "org.objectweb.asm.ClassReader:void a(org.objectweb.asm.ClassWriter,org.objectweb.asm.Item[],char[])",
            "org.objectweb.asm.ClassWriter:org.objectweb.asm.Item a(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[])",
            "com.eclipsesource.json.JsonObject$HashIndexTable:int hashSlotFor(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object put_internal(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void putResize(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void push(java.lang.Object,java.lang.Object,int,java.lang.Object,int,java.lang.Object,int,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object remove(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsKey(java.lang.Object)"
        ]
    },
    "org.onlab.packet.ipv6.BaseOptions:int hashCode()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.BasePacket:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentHashMap:int hashOf(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap:int hashOf(java.lang.Object)",
            "org.apache.commons.lang.builder.HashCodeBuilder:org.apache.commons.lang.builder.HashCodeBuilder append(java.lang.Object)",
            "org.apache.commons.lang.mutable.MutableObject:int hashCode()",
            "org.apache.commons.lang.ObjectUtils:int hashCode(java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:int hashCode()",
            "org.apache.commons.lang.time.FastDateFormat$Pair:int hashCode()",
            "org.apache.commons.lang3.AnnotationUtils:int hashMember(java.lang.String,java.lang.Object)",
            "org.apache.commons.lang3.builder.HashCodeBuilder:org.apache.commons.lang3.builder.HashCodeBuilder append(java.lang.Object)",
            "org.apache.commons.lang3.concurrent.ConstantInitializer:int hashCode()",
            "org.apache.commons.lang3.mutable.MutableObject:int hashCode()",
            "org.apache.commons.lang3.ObjectUtils:int hashCode(java.lang.Object)",
            "org.apache.commons.lang3.Range:int hashCode()",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:int hashCode()",
            "org.apache.commons.lang3.time.FormatCache$MultipartKey:int hashCode()",
            "org.apache.commons.lang3.tuple.Pair:int hashCode()",
            "org.apache.commons.lang3.tuple.Triple:int hashCode()",
            "org.objectweb.asm.ClassReader:void a(org.objectweb.asm.ClassWriter,org.objectweb.asm.Item[],char[])",
            "org.objectweb.asm.ClassWriter:org.objectweb.asm.Item a(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[])",
            "com.eclipsesource.json.JsonObject$HashIndexTable:int hashSlotFor(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object put_internal(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void putResize(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void push(java.lang.Object,java.lang.Object,int,java.lang.Object,int,java.lang.Object,int,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object remove(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsKey(java.lang.Object)"
        ]
    },
    "org.onlab.packet.ipv6.EncapSecurityPayload:int hashCode()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.BasePacket:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentHashMap:int hashOf(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap:int hashOf(java.lang.Object)",
            "org.apache.commons.lang.builder.HashCodeBuilder:org.apache.commons.lang.builder.HashCodeBuilder append(java.lang.Object)",
            "org.apache.commons.lang.mutable.MutableObject:int hashCode()",
            "org.apache.commons.lang.ObjectUtils:int hashCode(java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:int hashCode()",
            "org.apache.commons.lang.time.FastDateFormat$Pair:int hashCode()",
            "org.apache.commons.lang3.AnnotationUtils:int hashMember(java.lang.String,java.lang.Object)",
            "org.apache.commons.lang3.builder.HashCodeBuilder:org.apache.commons.lang3.builder.HashCodeBuilder append(java.lang.Object)",
            "org.apache.commons.lang3.concurrent.ConstantInitializer:int hashCode()",
            "org.apache.commons.lang3.mutable.MutableObject:int hashCode()",
            "org.apache.commons.lang3.ObjectUtils:int hashCode(java.lang.Object)",
            "org.apache.commons.lang3.Range:int hashCode()",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:int hashCode()",
            "org.apache.commons.lang3.time.FormatCache$MultipartKey:int hashCode()",
            "org.apache.commons.lang3.tuple.Pair:int hashCode()",
            "org.apache.commons.lang3.tuple.Triple:int hashCode()",
            "org.objectweb.asm.ClassReader:void a(org.objectweb.asm.ClassWriter,org.objectweb.asm.Item[],char[])",
            "org.objectweb.asm.ClassWriter:org.objectweb.asm.Item a(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[])",
            "com.eclipsesource.json.JsonObject$HashIndexTable:int hashSlotFor(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object put_internal(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void putResize(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void push(java.lang.Object,java.lang.Object,int,java.lang.Object,int,java.lang.Object,int,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object remove(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsKey(java.lang.Object)"
        ]
    },
    "org.onlab.packet.ipv6.Fragment:int hashCode()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.BasePacket:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentHashMap:int hashOf(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap:int hashOf(java.lang.Object)",
            "org.apache.commons.lang.builder.HashCodeBuilder:org.apache.commons.lang.builder.HashCodeBuilder append(java.lang.Object)",
            "org.apache.commons.lang.mutable.MutableObject:int hashCode()",
            "org.apache.commons.lang.ObjectUtils:int hashCode(java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:int hashCode()",
            "org.apache.commons.lang.time.FastDateFormat$Pair:int hashCode()",
            "org.apache.commons.lang3.AnnotationUtils:int hashMember(java.lang.String,java.lang.Object)",
            "org.apache.commons.lang3.builder.HashCodeBuilder:org.apache.commons.lang3.builder.HashCodeBuilder append(java.lang.Object)",
            "org.apache.commons.lang3.concurrent.ConstantInitializer:int hashCode()",
            "org.apache.commons.lang3.mutable.MutableObject:int hashCode()",
            "org.apache.commons.lang3.ObjectUtils:int hashCode(java.lang.Object)",
            "org.apache.commons.lang3.Range:int hashCode()",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:int hashCode()",
            "org.apache.commons.lang3.time.FormatCache$MultipartKey:int hashCode()",
            "org.apache.commons.lang3.tuple.Pair:int hashCode()",
            "org.apache.commons.lang3.tuple.Triple:int hashCode()",
            "org.objectweb.asm.ClassReader:void a(org.objectweb.asm.ClassWriter,org.objectweb.asm.Item[],char[])",
            "org.objectweb.asm.ClassWriter:org.objectweb.asm.Item a(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[])",
            "com.eclipsesource.json.JsonObject$HashIndexTable:int hashSlotFor(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object put_internal(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void putResize(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void push(java.lang.Object,java.lang.Object,int,java.lang.Object,int,java.lang.Object,int,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object remove(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsKey(java.lang.Object)"
        ]
    },
    "org.onlab.packet.ipv6.Routing:int hashCode()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.BasePacket:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentHashMap:int hashOf(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap:int hashOf(java.lang.Object)",
            "org.apache.commons.lang.builder.HashCodeBuilder:org.apache.commons.lang.builder.HashCodeBuilder append(java.lang.Object)",
            "org.apache.commons.lang.mutable.MutableObject:int hashCode()",
            "org.apache.commons.lang.ObjectUtils:int hashCode(java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:int hashCode()",
            "org.apache.commons.lang.time.FastDateFormat$Pair:int hashCode()",
            "org.apache.commons.lang3.AnnotationUtils:int hashMember(java.lang.String,java.lang.Object)",
            "org.apache.commons.lang3.builder.HashCodeBuilder:org.apache.commons.lang3.builder.HashCodeBuilder append(java.lang.Object)",
            "org.apache.commons.lang3.concurrent.ConstantInitializer:int hashCode()",
            "org.apache.commons.lang3.mutable.MutableObject:int hashCode()",
            "org.apache.commons.lang3.ObjectUtils:int hashCode(java.lang.Object)",
            "org.apache.commons.lang3.Range:int hashCode()",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:int hashCode()",
            "org.apache.commons.lang3.time.FormatCache$MultipartKey:int hashCode()",
            "org.apache.commons.lang3.tuple.Pair:int hashCode()",
            "org.apache.commons.lang3.tuple.Triple:int hashCode()",
            "org.objectweb.asm.ClassReader:void a(org.objectweb.asm.ClassWriter,org.objectweb.asm.Item[],char[])",
            "org.objectweb.asm.ClassWriter:org.objectweb.asm.Item a(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[])",
            "com.eclipsesource.json.JsonObject$HashIndexTable:int hashSlotFor(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object put_internal(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void putResize(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void push(java.lang.Object,java.lang.Object,int,java.lang.Object,int,java.lang.Object,int,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object remove(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsKey(java.lang.Object)"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentHashMap:java.lang.Object get(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Compiler:org.onlab.stc.Step getStep(java.lang.String)",
            "org.onlab.stc.Compiler:void processSequentialRequirements(java.lang.String,java.lang.String,java.lang.String)",
            "org.onlab.stc.Compiler:void processRequirements(org.onlab.stc.Step,java.lang.String,java.lang.String)",
            "org.onlab.stc.Compiler:org.onlab.stc.Step getStep(java.lang.String,java.lang.String)",
            "org.onlab.stc.Coordinator:java.lang.String substitute(java.lang.String)",
            "org.onlab.stc.MonitorLayout:void computeLayout(org.onlab.stc.Group,int,int)",
            "org.onlab.stc.MonitorLayout:org.onlab.stc.MonitorLayout$Box updateBox(org.onlab.stc.Step,int,int,org.onlab.stc.Group)",
            "org.onlab.stc.MonitorLayout:boolean visit(org.onlab.stc.Step,int,int,org.onlab.stc.Group)",
            "org.onlab.stc.MonitorLayout:int bottomMostTier(org.onlab.stc.Step)",
            "org.onlab.stc.MonitorLayout:org.onlab.stc.MonitorLayout$Box get(org.onlab.stc.Step)",
            "org.onlab.stc.MonitorLayout:int lambda$computeBreadth$28(org.onlab.stc.Step)",
            "org.onlab.stc.ScenarioStore:org.onlab.stc.Coordinator$Status getStatus(org.onlab.stc.Step)",
            "org.onlab.graph.AbstractGraphPathSearch$DefaultResult:boolean hasCost(org.onlab.graph.Vertex)",
            "org.onlab.graph.AbstractGraphPathSearch$DefaultResult:double cost(org.onlab.graph.Vertex)",
            "org.onlab.graph.AbstractGraphPathSearch$DefaultResult:void updateVertex(org.onlab.graph.Vertex,org.onlab.graph.Edge,double,boolean)",
            "org.onlab.graph.AbstractGraphPathSearch:void buildAllPaths(org.onlab.graph.AbstractGraphPathSearch$DefaultResult,org.onlab.graph.Vertex,org.onlab.graph.Vertex,int)",
            "org.onlab.graph.DepthFirstSearch:boolean isForwardEdge(org.onlab.graph.AbstractGraphPathSearch$DefaultResult,org.onlab.graph.Edge)",
            "org.onlab.graph.SrlgGraphSearch$2:double weight(org.onlab.graph.Edge)",
            "org.onlab.graph.SrlgGraphSearch:void <init>(java.util.Map)",
            "org.onlab.graph.TarjanGraphSearch$SccResult:org.onlab.graph.TarjanGraphSearch$VertexData data(org.onlab.graph.Vertex)",
            "org.onlab.metrics.MetricsComponent:org.onlab.metrics.MetricsFeature registerFeature(java.lang.String)",
            "org.onlab.metrics.MetricsManager:org.onlab.metrics.MetricsComponent registerComponent(java.lang.String)",
            "org.onlab.packet.Ethernet:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.Ethernet:org.onlab.packet.Ethernet lambda$deserializer$10(byte[],int,int)",
            "org.onlab.packet.ICMP6:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ICMP6:org.onlab.packet.ICMP6 lambda$deserializer$40(byte[],int,int)",
            "org.onlab.packet.IPv4:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IPv4:org.onlab.packet.IPv4 lambda$deserializer$24(byte[],int,int)",
            "org.onlab.packet.IPv6:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IPv6:org.onlab.packet.IPv6 lambda$deserializer$48(byte[],int,int)",
            "org.onlab.packet.MPLS:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.MPLS:org.onlab.packet.MPLS lambda$deserializer$12(byte[],int,int)",
            "org.onlab.packet.PIM:org.onlab.packet.PIM lambda$deserializer$49(byte[],int,int)",
            "org.onlab.packet.UDP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.UDP:org.onlab.packet.UDP lambda$deserializer$45(byte[],int,int)",
            "org.onlab.packet.ipv6.Authentication:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Authentication:org.onlab.packet.ipv6.Authentication lambda$deserializer$46(byte[],int,int)",
            "org.onlab.packet.ipv6.BaseOptions:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.BaseOptions:org.onlab.packet.ipv6.BaseOptions lambda$deserializer$13(byte[],int,int)",
            "org.onlab.packet.ipv6.Fragment:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Fragment:org.onlab.packet.ipv6.Fragment lambda$deserializer$26(byte[],int,int)",
            "org.onlab.packet.ipv6.Routing:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Routing:org.onlab.packet.ipv6.Routing lambda$deserializer$50(byte[],int,int)",
            "org.onlab.packet.pim.PIMHello:byte[] serialize()",
            "org.onlab.util.ExtendedSet:java.lang.Object get(java.lang.Object)",
            "org.jboss.netty.bootstrap.Bootstrap:java.lang.Object getOption(java.lang.String)",
            "org.jboss.netty.channel.ChannelLocal:java.lang.Object get(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.channel.DefaultChannelPipeline:org.jboss.netty.channel.ChannelHandler get(java.lang.String)",
            "org.jboss.netty.channel.DefaultChannelPipeline:org.jboss.netty.channel.ChannelHandlerContext getContext(java.lang.String)",
            "org.jboss.netty.channel.StaticChannelPipeline:org.jboss.netty.channel.ChannelHandler get(java.lang.String)",
            "org.jboss.netty.channel.StaticChannelPipeline:org.jboss.netty.channel.ChannelHandlerContext getContext(java.lang.String)",
            "org.jboss.netty.channel.group.DefaultChannelGroup:org.jboss.netty.channel.Channel find(java.lang.Integer)",
            "org.jboss.netty.channel.group.DefaultChannelGroupFuture:org.jboss.netty.channel.ChannelFuture find(java.lang.Integer)",
            "org.jboss.netty.channel.group.DefaultChannelGroupFuture:org.jboss.netty.channel.ChannelFuture find(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.channel.local.LocalChannelRegistry:org.jboss.netty.channel.Channel getChannel(org.jboss.netty.channel.local.LocalAddress)",
            "org.jboss.netty.channel.socket.nio.NioDatagramChannel:org.jboss.netty.channel.ChannelFuture joinGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress)",
            "org.jboss.netty.channel.socket.nio.NioDatagramChannel:org.jboss.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress)",
            "org.jboss.netty.channel.socket.nio.NioDatagramChannel:org.jboss.netty.channel.ChannelFuture block(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress)",
            "org.jboss.netty.handler.codec.http.HttpMethod:org.jboss.netty.handler.codec.http.HttpMethod valueOf(java.lang.String)",
            "org.jboss.netty.handler.codec.http.QueryStringDecoder:boolean addParam(java.util.Map,java.lang.String,java.lang.String)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:java.util.List getBodyHttpDatas(java.lang.String)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData getBodyHttpData(java.lang.String)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void addHttpData(org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData decodeMultipart(org.jboss.netty.handler.codec.http.multipart.HttpPostRequestDecoder$MultiPartStatus)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData findMultipartDisposition()",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData getFileUpload(java.lang.String)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:java.util.List getBodyHttpDatas(java.lang.String)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData getBodyHttpData(java.lang.String)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void addHttpData(org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData)",
            "org.jboss.netty.handler.codec.rtsp.RtspMethods:org.jboss.netty.handler.codec.http.HttpMethod valueOf(java.lang.String)",
            "org.jboss.netty.handler.codec.serialization.CachingClassResolver:java.lang.Class resolve(java.lang.String)",
            "org.jboss.netty.handler.codec.serialization.ReferenceMap:java.lang.Object get(java.lang.Object)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame:int getValue(int)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame:void setValue(int,int,boolean,boolean)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame:boolean isPersistValue(int)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame:void setPersistValue(int,boolean)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame:boolean isPersisted(int)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame:void setPersisted(int,boolean)",
            "org.jboss.netty.handler.codec.spdy.SpdyHttpDecoder:org.jboss.netty.handler.codec.http.HttpMessage getMessage(int)",
            "org.jboss.netty.handler.codec.spdy.SpdySession$PriorityComparator:int compare(java.lang.Integer,java.lang.Integer)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:boolean isRemoteSideClosed(int)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:void closeRemoteSide(int,boolean)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:boolean isLocalSideClosed(int)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:void closeLocalSide(int,boolean)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:boolean hasReceivedReply(int)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:void receivedReply(int)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:int getSendWindowSize(int)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:int updateSendWindowSize(int,int)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:int updateReceiveWindowSize(int,int)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:int getReceiveWindowSizeLowerBound(int)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:boolean putPendingWrite(int,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:org.jboss.netty.channel.MessageEvent getPendingWrite(int)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:org.jboss.netty.channel.MessageEvent removePendingWrite(int)",
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor:java.util.concurrent.atomic.AtomicLong getChannelCounter(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.handler.execution.OrderedDownstreamThreadPoolExecutor:java.util.concurrent.Executor getChildExecutor(org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor:java.util.concurrent.Executor getChildExecutor(org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.util.CharsetUtil:java.nio.charset.CharsetEncoder getEncoder(java.nio.charset.Charset)",
            "org.jboss.netty.util.CharsetUtil:java.nio.charset.CharsetDecoder getDecoder(java.nio.charset.Charset)",
            "org.jboss.netty.util.DefaultObjectSizeEstimator:int estimateSize(java.lang.Class,java.util.Set)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$EntrySet:boolean contains(java.lang.Object)",
            "org.apache.commons.lang.CharSet:org.apache.commons.lang.CharSet getInstance(java.lang.String)",
            "org.apache.commons.lang.ClassUtils:java.lang.String getShortClassName(java.lang.String)",
            "org.apache.commons.lang.ClassUtils:java.lang.Class primitiveToWrapper(java.lang.Class)",
            "org.apache.commons.lang.ClassUtils:java.lang.Class wrapperToPrimitive(java.lang.Class)",
            "org.apache.commons.lang.ClassUtils:java.lang.Class getClass(java.lang.ClassLoader,java.lang.String,boolean)",
            "org.apache.commons.lang.ClassUtils:java.lang.String toCanonicalName(java.lang.String)",
            "org.apache.commons.lang.ClassUtils:java.lang.String getCanonicalName(java.lang.String)",
            "org.apache.commons.lang.ClassUtils:void <clinit>()",
            "org.apache.commons.lang.Entities$MapIntMap:java.lang.String name(int)",
            "org.apache.commons.lang.Entities$MapIntMap:int value(java.lang.String)",
            "org.apache.commons.lang.Entities$PrimitiveEntityMap:int value(java.lang.String)",
            "org.apache.commons.lang.enum.Enum:void init(java.lang.String)",
            "org.apache.commons.lang.enum.Enum:java.lang.Object readResolve()",
            "org.apache.commons.lang.enum.Enum:org.apache.commons.lang.'enum'.Enum getEnum(java.lang.Class,java.lang.String)",
            "org.apache.commons.lang.enum.Enum:org.apache.commons.lang.'enum'.Enum$Entry getEntry(java.lang.Class)",
            "org.apache.commons.lang.enum.Enum:org.apache.commons.lang.'enum'.Enum$Entry createEntry(java.lang.Class)",
            "org.apache.commons.lang.enums.Enum:void init(java.lang.String)",
            "org.apache.commons.lang.enums.Enum:java.lang.Object readResolve()",
            "org.apache.commons.lang.enums.Enum:org.apache.commons.lang.enums.Enum getEnum(java.lang.Class,java.lang.String)",
            "org.apache.commons.lang.enums.Enum:org.apache.commons.lang.enums.Enum$Entry getEntry(java.lang.Class)",
            "org.apache.commons.lang.enums.Enum:org.apache.commons.lang.enums.Enum$Entry createEntry(java.lang.Class)",
            "org.apache.commons.lang.LocaleUtils:java.util.List languagesByCountry(java.lang.String)",
            "org.apache.commons.lang.LocaleUtils:java.util.List countriesByLanguage(java.lang.String)",
            "org.apache.commons.lang.text.ExtendedMessageFormat:java.text.Format getFormat(java.lang.String)",
            "org.apache.commons.lang.text.StrLookup$MapStrLookup:java.lang.String lookup(java.lang.String)",
            "org.apache.commons.lang.time.FastDateFormat:org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String,java.util.TimeZone,java.util.Locale)",
            "org.apache.commons.lang.time.FastDateFormat:org.apache.commons.lang.time.FastDateFormat getDateInstance(int,java.util.TimeZone,java.util.Locale)",
            "org.apache.commons.lang.time.FastDateFormat:org.apache.commons.lang.time.FastDateFormat getTimeInstance(int,java.util.TimeZone,java.util.Locale)",
            "org.apache.commons.lang.time.FastDateFormat:org.apache.commons.lang.time.FastDateFormat getDateTimeInstance(int,int,java.util.TimeZone,java.util.Locale)",
            "org.apache.commons.lang.time.FastDateFormat:java.lang.String getTimeZoneDisplay(java.util.TimeZone,boolean,int,java.util.Locale)",
            "org.apache.commons.lang3.builder.Diff:void <init>(java.lang.String)",
            "org.apache.commons.lang3.CharSet:org.apache.commons.lang3.CharSet getInstance(java.lang.String[])",
            "org.apache.commons.lang3.ClassUtils:java.lang.String getShortClassName(java.lang.String)",
            "org.apache.commons.lang3.ClassUtils:java.lang.Class primitiveToWrapper(java.lang.Class)",
            "org.apache.commons.lang3.ClassUtils:java.lang.Class wrapperToPrimitive(java.lang.Class)",
            "org.apache.commons.lang3.ClassUtils:java.lang.Class getClass(java.lang.ClassLoader,java.lang.String,boolean)",
            "org.apache.commons.lang3.ClassUtils:java.lang.String toCanonicalName(java.lang.String)",
            "org.apache.commons.lang3.ClassUtils:java.lang.String getCanonicalName(java.lang.String)",
            "org.apache.commons.lang3.ClassUtils:void <clinit>()",
            "org.apache.commons.lang3.concurrent.ConcurrentUtils:java.lang.Object createIfAbsent(java.util.concurrent.ConcurrentMap,java.lang.Object,org.apache.commons.lang3.concurrent.ConcurrentInitializer)",
            "org.apache.commons.lang3.concurrent.MultiBackgroundInitializer$MultiBackgroundInitializerResults:java.lang.Object getResultObject(java.lang.String)",
            "org.apache.commons.lang3.concurrent.MultiBackgroundInitializer$MultiBackgroundInitializerResults:org.apache.commons.lang3.concurrent.ConcurrentException getException(java.lang.String)",
            "org.apache.commons.lang3.concurrent.MultiBackgroundInitializer$MultiBackgroundInitializerResults:org.apache.commons.lang3.concurrent.BackgroundInitializer checkName(java.lang.String)",
            "org.apache.commons.lang3.LocaleUtils:java.util.List languagesByCountry(java.lang.String)",
            "org.apache.commons.lang3.LocaleUtils:java.util.List countriesByLanguage(java.lang.String)",
            "org.apache.commons.lang3.reflect.TypeLiteral:void <init>()",
            "org.apache.commons.lang3.reflect.TypeUtils:java.lang.reflect.Type unrollVariableAssignments(java.lang.reflect.TypeVariable,java.util.Map)",
            "org.apache.commons.lang3.reflect.TypeUtils:java.lang.reflect.Type substituteTypeVariables(java.lang.reflect.Type,java.util.Map)",
            "org.apache.commons.lang3.reflect.TypeUtils:java.util.Map getTypeArguments(java.lang.reflect.ParameterizedType,java.lang.Class,java.util.Map)",
            "org.apache.commons.lang3.reflect.TypeUtils:void mapTypeVariablesToArguments(java.lang.Class,java.lang.reflect.ParameterizedType,java.util.Map)",
            "org.apache.commons.lang3.reflect.TypeUtils:java.lang.Class getRawType(java.lang.reflect.Type,java.lang.reflect.Type)",
            "org.apache.commons.lang3.reflect.TypeUtils:java.lang.reflect.Type unrollVariables(java.util.Map,java.lang.reflect.Type)",
            "org.apache.commons.lang3.reflect.TypeUtils:java.lang.reflect.Type[] extractTypeArgumentsFrom(java.util.Map,java.lang.reflect.TypeVariable[])",
            "org.apache.commons.lang3.SerializationUtils$ClassLoaderAwareObjectInputStream:java.lang.Class resolveClass(java.io.ObjectStreamClass)",
            "org.apache.commons.lang3.text.ExtendedMessageFormat:java.text.Format getFormat(java.lang.String)",
            "org.apache.commons.lang3.text.StrLookup$MapStrLookup:java.lang.String lookup(java.lang.String)",
            "org.apache.commons.lang3.time.FastDateParser$TextStrategy:void setCalendar(org.apache.commons.lang3.time.FastDateParser,java.util.Calendar,java.lang.String)",
            "org.apache.commons.lang3.time.FastDateParser:org.apache.commons.lang3.time.FastDateParser$Strategy getLocaleSpecificStrategy(int,java.util.Calendar)",
            "org.apache.commons.lang3.time.FastDatePrinter:java.lang.String getTimeZoneDisplay(java.util.TimeZone,boolean,int,java.util.Locale)",
            "org.apache.commons.lang3.time.FormatCache:java.text.Format getInstance(java.lang.String,java.util.TimeZone,java.util.Locale)",
            "org.apache.commons.lang3.time.FormatCache:java.lang.String getPatternForStyle(java.lang.Integer,java.lang.Integer,java.util.Locale)",
            "com.esotericsoftware.kryo.Generics:java.lang.Class getConcreteClass(java.lang.String)",
            "org.onlab.stc.MonitorLayout$get__40:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentHashMap:boolean containsKey(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Compiler:boolean registerStep(org.onlab.stc.Step,org.apache.commons.configuration.HierarchicalConfiguration,java.lang.String,org.onlab.stc.Group)",
            "org.onlab.graph.DepthFirstSearch$SpanningTreeResult:boolean isEdgeMarked(org.onlab.graph.Edge)",
            "org.onlab.packet.Ethernet:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.Ethernet:org.onlab.packet.Ethernet lambda$deserializer$10(byte[],int,int)",
            "org.onlab.packet.ICMP6:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ICMP6:org.onlab.packet.ICMP6 lambda$deserializer$40(byte[],int,int)",
            "org.onlab.packet.IPv4:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IPv4:org.onlab.packet.IPv4 lambda$deserializer$24(byte[],int,int)",
            "org.onlab.packet.IPv6:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IPv6:org.onlab.packet.IPv6 lambda$deserializer$48(byte[],int,int)",
            "org.onlab.packet.MPLS:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.MPLS:org.onlab.packet.MPLS lambda$deserializer$12(byte[],int,int)",
            "org.onlab.packet.PIM:org.onlab.packet.PIM lambda$deserializer$49(byte[],int,int)",
            "org.onlab.packet.UDP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.UDP:org.onlab.packet.UDP lambda$deserializer$45(byte[],int,int)",
            "org.onlab.packet.ipv6.Authentication:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Authentication:org.onlab.packet.ipv6.Authentication lambda$deserializer$46(byte[],int,int)",
            "org.onlab.packet.ipv6.BaseOptions:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.BaseOptions:org.onlab.packet.ipv6.BaseOptions lambda$deserializer$13(byte[],int,int)",
            "org.onlab.packet.ipv6.Fragment:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Fragment:org.onlab.packet.ipv6.Fragment lambda$deserializer$26(byte[],int,int)",
            "org.onlab.packet.ipv6.Routing:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Routing:org.onlab.packet.ipv6.Routing lambda$deserializer$50(byte[],int,int)",
            "org.onlab.util.ExtendedSet:boolean contains(java.lang.Object)",
            "org.onlab.util.ExtendedSet:boolean lambda$retainAll$21(java.lang.Object)",
            "org.jboss.netty.channel.DefaultChannelPipeline:void checkDuplicateName(java.lang.String)",
            "org.jboss.netty.channel.group.DefaultChannelGroup:boolean contains(java.lang.Object)",
            "org.jboss.netty.channel.local.LocalChannelRegistry:boolean isRegistered(org.jboss.netty.channel.local.LocalAddress)",
            "org.jboss.netty.handler.codec.serialization.ReferenceMap:boolean containsKey(java.lang.Object)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame:boolean isSet(int)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame:int getValue(int)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame:void setValue(int,int,boolean,boolean)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame:void removeValue(int)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame:boolean isPersistValue(int)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame:void setPersistValue(int,boolean)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame:boolean isPersisted(int)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame:void setPersisted(int,boolean)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:boolean isActiveStream(int)",
            "org.jboss.netty.handler.ipfilter.OneIpFilterHandler:boolean accept(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent,java.net.InetSocketAddress)",
            "org.jboss.netty.util.MapBackedSet:boolean contains(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$KeySet:boolean contains(java.lang.Object)",
            "org.apache.commons.lang.builder.ToStringStyle:boolean isRegistered(java.lang.Object)",
            "org.apache.commons.lang.ClassUtils:java.lang.String getShortClassName(java.lang.String)",
            "org.apache.commons.lang.ClassUtils:java.lang.Class getClass(java.lang.ClassLoader,java.lang.String,boolean)",
            "org.apache.commons.lang.enum.Enum:void init(java.lang.String)",
            "org.apache.commons.lang.enums.Enum:void init(java.lang.String)",
            "org.apache.commons.lang3.builder.ToStringStyle:boolean isRegistered(java.lang.Object)",
            "org.apache.commons.lang3.ClassUtils:java.lang.String getShortClassName(java.lang.String)",
            "org.apache.commons.lang3.ClassUtils:boolean isPrimitiveWrapper(java.lang.Class)",
            "org.apache.commons.lang3.ClassUtils:java.lang.Class getClass(java.lang.ClassLoader,java.lang.String,boolean)",
            "org.apache.commons.lang3.concurrent.MultiBackgroundInitializer$MultiBackgroundInitializerResults:boolean isException(java.lang.String)",
            "org.apache.commons.lang3.reflect.TypeUtils:java.util.Map getTypeArguments(java.lang.reflect.ParameterizedType,java.lang.Class,java.util.Map)",
            "org.apache.commons.lang3.reflect.TypeUtils:void mapTypeVariablesToArguments(java.lang.Class,java.lang.reflect.ParameterizedType,java.util.Map)",
            "org.apache.commons.lang3.reflect.TypeUtils:java.lang.reflect.Type[] extractTypeArgumentsFrom(java.util.Map,java.lang.reflect.TypeVariable[])",
            "org.onlab.util.ExtendedSet$containsKey__99:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentHashMap:java.lang.Object put(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Compiler:boolean registerStep(org.onlab.stc.Step,org.apache.commons.configuration.HierarchicalConfiguration,java.lang.String,org.onlab.stc.Group)",
            "org.onlab.stc.Compiler:void processSequentialRequirements(java.lang.String,java.lang.String,java.lang.String)",
            "org.onlab.stc.Compiler:void processRequirements(org.onlab.stc.Step,java.lang.String,java.lang.String)",
            "org.onlab.stc.Coordinator:void scrapeForVariables(java.lang.String)",
            "org.onlab.stc.MonitorLayout:void <init>(org.onlab.stc.Compiler)",
            "org.onlab.stc.MonitorLayout:void createBox(org.onlab.stc.Step)",
            "org.onlab.stc.ScenarioStore:void add(org.onlab.stc.StepEvent)",
            "org.onlab.stc.ScenarioStore:void lambda$reset$17(org.onlab.stc.Step)",
            "org.onlab.graph.AbstractGraphPathSearch$DefaultResult:void updateVertex(org.onlab.graph.Vertex,org.onlab.graph.Edge,double,boolean)",
            "org.onlab.graph.DepthFirstSearch$SpanningTreeResult:void markEdge(org.onlab.graph.Edge,org.onlab.graph.DepthFirstSearch$EdgeType)",
            "org.onlab.graph.SrlgGraphSearch:void <init>(java.util.Map)",
            "org.onlab.graph.TarjanGraphSearch$SccResult:org.onlab.graph.TarjanGraphSearch$VertexData addData(org.onlab.graph.Vertex)",
            "org.onlab.packet.Ethernet:void <clinit>()",
            "org.onlab.packet.ICMP6:void <clinit>()",
            "org.onlab.packet.IPv4:void <clinit>()",
            "org.onlab.packet.IPv6:void <clinit>()",
            "org.onlab.packet.MPLS:void <clinit>()",
            "org.onlab.packet.PIM:void <clinit>()",
            "org.onlab.packet.UDP:void <clinit>()",
            "org.onlab.packet.pim.PIMHello:void createDefaultOptions()",
            "org.onlab.packet.pim.PIMHello:void addOption(org.onlab.packet.pim.PIMHelloOption)",
            "org.jboss.netty.bootstrap.Bootstrap:void setOption(java.lang.String,java.lang.Object)",
            "org.jboss.netty.bootstrap.Bootstrap:boolean isOrderedMap(java.util.Map)",
            "org.jboss.netty.bootstrap.ServerBootstrap$Binder:void channelOpen(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.channel.ChannelLocal:java.lang.Object set(org.jboss.netty.channel.Channel,java.lang.Object)",
            "org.jboss.netty.channel.DefaultChannelPipeline:void addFirst(java.lang.String,org.jboss.netty.channel.ChannelHandler)",
            "org.jboss.netty.channel.DefaultChannelPipeline:void addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)",
            "org.jboss.netty.channel.DefaultChannelPipeline:void addBefore(java.lang.String,java.lang.String,org.jboss.netty.channel.ChannelHandler)",
            "org.jboss.netty.channel.DefaultChannelPipeline:void addAfter(java.lang.String,java.lang.String,org.jboss.netty.channel.ChannelHandler)",
            "org.jboss.netty.channel.DefaultChannelPipeline:org.jboss.netty.channel.ChannelHandler replace(org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext,java.lang.String,org.jboss.netty.channel.ChannelHandler)",
            "org.jboss.netty.channel.DefaultChannelPipeline:void init(java.lang.String,org.jboss.netty.channel.ChannelHandler)",
            "org.jboss.netty.channel.StaticChannelPipeline:void <init>(org.jboss.netty.channel.ChannelHandler[])",
            "org.jboss.netty.channel.socket.nio.NioDatagramChannel:org.jboss.netty.channel.ChannelFuture joinGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress)",
            "org.jboss.netty.handler.codec.http.HttpMethod:void <clinit>()",
            "org.jboss.netty.handler.codec.http.QueryStringDecoder:boolean addParam(java.util.Map,java.lang.String,java.lang.String)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void addHttpData(org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData findMultipartDisposition()",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder:void <clinit>()",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void addHttpData(org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData)",
            "org.jboss.netty.handler.codec.rtsp.RtspMethods:void <clinit>()",
            "org.jboss.netty.handler.codec.serialization.CachingClassResolver:java.lang.Class resolve(java.lang.String)",
            "org.jboss.netty.handler.codec.serialization.ReferenceMap:java.lang.Object put(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.handler.codec.serialization.ReferenceMap:void putAll(java.util.Map)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame:void setValue(int,int,boolean,boolean)",
            "org.jboss.netty.handler.codec.spdy.SpdyHttpDecoder:org.jboss.netty.handler.codec.http.HttpMessage putMessage(int,org.jboss.netty.handler.codec.http.HttpMessage)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:void acceptStream(int,byte,boolean,boolean,int,int,boolean)",
            "org.jboss.netty.handler.ipfilter.OneIpFilterHandler:boolean accept(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent,java.net.InetSocketAddress)",
            "org.jboss.netty.util.CharsetUtil:java.nio.charset.CharsetEncoder getEncoder(java.nio.charset.Charset)",
            "org.jboss.netty.util.CharsetUtil:java.nio.charset.CharsetDecoder getDecoder(java.nio.charset.Charset)",
            "org.jboss.netty.util.DefaultObjectSizeEstimator:void <init>()",
            "org.jboss.netty.util.MapBackedSet:boolean add(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$WriteThroughEntry:java.lang.Object setValue(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentHashMap:void putAll(java.util.Map)",
            "org.apache.commons.lang.builder.ToStringStyle:void register(java.lang.Object)",
            "org.apache.commons.lang.CharSet:void <clinit>()",
            "org.apache.commons.lang.ClassUtils:void addAbbreviation(java.lang.String,java.lang.String)",
            "org.apache.commons.lang.ClassUtils:void <clinit>()",
            "org.apache.commons.lang.Entities$MapIntMap:void add(java.lang.String,int)",
            "org.apache.commons.lang.Entities$PrimitiveEntityMap:void add(java.lang.String,int)",
            "org.apache.commons.lang.enum.Enum:void init(java.lang.String)",
            "org.apache.commons.lang.enums.Enum:void init(java.lang.String)",
            "org.apache.commons.lang.LocaleUtils:java.util.List languagesByCountry(java.lang.String)",
            "org.apache.commons.lang.LocaleUtils:java.util.List countriesByLanguage(java.lang.String)",
            "org.apache.commons.lang.time.FastDateFormat:org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String,java.util.TimeZone,java.util.Locale)",
            "org.apache.commons.lang.time.FastDateFormat:org.apache.commons.lang.time.FastDateFormat getDateInstance(int,java.util.TimeZone,java.util.Locale)",
            "org.apache.commons.lang.time.FastDateFormat:org.apache.commons.lang.time.FastDateFormat getTimeInstance(int,java.util.TimeZone,java.util.Locale)",
            "org.apache.commons.lang.time.FastDateFormat:org.apache.commons.lang.time.FastDateFormat getDateTimeInstance(int,int,java.util.TimeZone,java.util.Locale)",
            "org.apache.commons.lang.time.FastDateFormat:java.lang.String getTimeZoneDisplay(java.util.TimeZone,boolean,int,java.util.Locale)",
            "org.apache.commons.lang3.builder.ToStringStyle:void register(java.lang.Object)",
            "org.apache.commons.lang3.CharSet:void <clinit>()",
            "org.apache.commons.lang3.ClassUtils:void <clinit>()",
            "org.apache.commons.lang3.concurrent.MultiBackgroundInitializer:void addInitializer(java.lang.String,org.apache.commons.lang3.concurrent.BackgroundInitializer)",
            "org.apache.commons.lang3.reflect.TypeUtils:java.util.Map getTypeArguments(java.lang.reflect.ParameterizedType,java.lang.Class,java.util.Map)",
            "org.apache.commons.lang3.reflect.TypeUtils:void mapTypeVariablesToArguments(java.lang.Class,java.lang.reflect.ParameterizedType,java.util.Map)",
            "org.apache.commons.lang3.SerializationUtils$ClassLoaderAwareObjectInputStream:void <init>(java.io.InputStream,java.lang.ClassLoader)",
            "com.esotericsoftware.kryo.Generics:void add(java.lang.String,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.MapSerializer:java.util.Map read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.MapSerializer:java.util.Map copy(com.esotericsoftware.kryo.Kryo,java.util.Map)"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentHashMap:java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.metrics.MetricsComponent:org.onlab.metrics.MetricsFeature registerFeature(java.lang.String)",
            "org.onlab.metrics.MetricsManager:org.onlab.metrics.MetricsComponent registerComponent(java.lang.String)",
            "org.onlab.util.ExtendedSet:boolean add(java.lang.Object)",
            "org.onlab.util.ExtendedSet:java.lang.Boolean lambda$addAll$20(java.lang.Object)",
            "org.jboss.netty.channel.AbstractChannel:java.lang.Integer allocateId(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.channel.ChannelLocal:java.lang.Object setIfAbsent(org.jboss.netty.channel.Channel,java.lang.Object)",
            "org.jboss.netty.channel.group.DefaultChannelGroup:boolean add(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.channel.local.LocalChannelRegistry:boolean register(org.jboss.netty.channel.local.LocalAddress,org.jboss.netty.channel.Channel)",
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor:java.util.concurrent.atomic.AtomicLong getChannelCounter(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.handler.execution.OrderedDownstreamThreadPoolExecutor:java.util.concurrent.Executor getChildExecutor(org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor:java.util.concurrent.Executor getChildExecutor(org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.util.DefaultObjectSizeEstimator:int estimateSize(java.lang.Class,java.util.Set)",
            "org.apache.commons.lang3.concurrent.ConcurrentUtils:java.lang.Object putIfAbsent(java.util.concurrent.ConcurrentMap,java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang3.LocaleUtils:java.util.List languagesByCountry(java.lang.String)",
            "org.apache.commons.lang3.LocaleUtils:java.util.List countriesByLanguage(java.lang.String)",
            "org.apache.commons.lang3.time.FastDateParser:org.apache.commons.lang3.time.FastDateParser$Strategy getLocaleSpecificStrategy(int,java.util.Calendar)",
            "org.apache.commons.lang3.time.FastDatePrinter:java.lang.String getTimeZoneDisplay(java.util.TimeZone,boolean,int,java.util.Locale)",
            "org.apache.commons.lang3.time.FormatCache:java.text.Format getInstance(java.lang.String,java.util.TimeZone,java.util.Locale)",
            "org.apache.commons.lang3.time.FormatCache:java.lang.String getPatternForStyle(java.lang.Integer,java.lang.Integer,java.util.Locale)"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentHashMap:java.lang.Object remove(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.graph.AbstractGraphPathSearch$DefaultResult:void removeVertex(org.onlab.graph.Vertex)",
            "org.onlab.util.ExtendedSet:boolean remove(java.lang.Object)",
            "org.onlab.util.ExtendedSet:java.lang.Boolean lambda$removeAll$23(java.lang.Object)",
            "org.onlab.util.ExtendedSet:java.lang.Boolean lambda$retainAll$22(java.lang.Object)",
            "org.jboss.netty.bootstrap.Bootstrap:void setOption(java.lang.String,java.lang.Object)",
            "org.jboss.netty.channel.AbstractChannel:boolean setClosed()",
            "org.jboss.netty.channel.ChannelLocal:java.lang.Object remove(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.channel.DefaultChannelPipeline:org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext remove(org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext)",
            "org.jboss.netty.channel.DefaultChannelPipeline:org.jboss.netty.channel.ChannelHandler removeFirst()",
            "org.jboss.netty.channel.DefaultChannelPipeline:org.jboss.netty.channel.ChannelHandler removeLast()",
            "org.jboss.netty.channel.DefaultChannelPipeline:org.jboss.netty.channel.ChannelHandler replace(org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext,java.lang.String,org.jboss.netty.channel.ChannelHandler)",
            "org.jboss.netty.channel.group.DefaultChannelGroup:boolean remove(java.lang.Object)",
            "org.jboss.netty.channel.local.LocalChannelRegistry:boolean unregister(org.jboss.netty.channel.local.LocalAddress)",
            "org.jboss.netty.channel.socket.nio.NioDatagramChannel:org.jboss.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void cleanMixedAttributes()",
            "org.jboss.netty.handler.codec.serialization.ReferenceMap:java.lang.Object remove(java.lang.Object)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame:void removeValue(int)",
            "org.jboss.netty.handler.codec.spdy.SpdyHttpDecoder:org.jboss.netty.handler.codec.http.HttpMessage removeMessage(int)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:org.jboss.netty.handler.codec.spdy.SpdySession$StreamState removeActiveStream(int,boolean)",
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor:java.util.concurrent.atomic.AtomicLong getChannelCounter(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor:boolean removeChildExecutor(java.lang.Object)",
            "org.jboss.netty.handler.ipfilter.OneIpFilterHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.util.MapBackedSet:boolean remove(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$HashIterator:void remove()",
            "org.jboss.netty.util.internal.ConcurrentHashMap$KeySet:boolean remove(java.lang.Object)",
            "org.apache.commons.lang.builder.ToStringStyle:void unregister(java.lang.Object)",
            "org.apache.commons.lang3.builder.ToStringStyle:void unregister(java.lang.Object)"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentHashMap:boolean remove(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.ConcurrentHashMap$EntrySet:boolean remove(java.lang.Object)"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentHashMap:boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.util.internal.ConcurrentHashMap:java.lang.Object replace(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap:java.lang.Object get(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Compiler:org.onlab.stc.Step getStep(java.lang.String)",
            "org.onlab.stc.Compiler:void processSequentialRequirements(java.lang.String,java.lang.String,java.lang.String)",
            "org.onlab.stc.Compiler:void processRequirements(org.onlab.stc.Step,java.lang.String,java.lang.String)",
            "org.onlab.stc.Compiler:org.onlab.stc.Step getStep(java.lang.String,java.lang.String)",
            "org.onlab.stc.Coordinator:java.lang.String substitute(java.lang.String)",
            "org.onlab.stc.MonitorLayout:void computeLayout(org.onlab.stc.Group,int,int)",
            "org.onlab.stc.MonitorLayout:org.onlab.stc.MonitorLayout$Box updateBox(org.onlab.stc.Step,int,int,org.onlab.stc.Group)",
            "org.onlab.stc.MonitorLayout:boolean visit(org.onlab.stc.Step,int,int,org.onlab.stc.Group)",
            "org.onlab.stc.MonitorLayout:int bottomMostTier(org.onlab.stc.Step)",
            "org.onlab.stc.MonitorLayout:org.onlab.stc.MonitorLayout$Box get(org.onlab.stc.Step)",
            "org.onlab.stc.MonitorLayout:int lambda$computeBreadth$28(org.onlab.stc.Step)",
            "org.onlab.stc.ScenarioStore:org.onlab.stc.Coordinator$Status getStatus(org.onlab.stc.Step)",
            "org.onlab.graph.AbstractGraphPathSearch$DefaultResult:boolean hasCost(org.onlab.graph.Vertex)",
            "org.onlab.graph.AbstractGraphPathSearch$DefaultResult:double cost(org.onlab.graph.Vertex)",
            "org.onlab.graph.AbstractGraphPathSearch$DefaultResult:void updateVertex(org.onlab.graph.Vertex,org.onlab.graph.Edge,double,boolean)",
            "org.onlab.graph.AbstractGraphPathSearch:void buildAllPaths(org.onlab.graph.AbstractGraphPathSearch$DefaultResult,org.onlab.graph.Vertex,org.onlab.graph.Vertex,int)",
            "org.onlab.graph.DepthFirstSearch:boolean isForwardEdge(org.onlab.graph.AbstractGraphPathSearch$DefaultResult,org.onlab.graph.Edge)",
            "org.onlab.graph.SrlgGraphSearch$2:double weight(org.onlab.graph.Edge)",
            "org.onlab.graph.SrlgGraphSearch:void <init>(java.util.Map)",
            "org.onlab.graph.TarjanGraphSearch$SccResult:org.onlab.graph.TarjanGraphSearch$VertexData data(org.onlab.graph.Vertex)",
            "org.onlab.metrics.MetricsComponent:org.onlab.metrics.MetricsFeature registerFeature(java.lang.String)",
            "org.onlab.metrics.MetricsManager:org.onlab.metrics.MetricsComponent registerComponent(java.lang.String)",
            "org.onlab.packet.Ethernet:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.Ethernet:org.onlab.packet.Ethernet lambda$deserializer$10(byte[],int,int)",
            "org.onlab.packet.ICMP6:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ICMP6:org.onlab.packet.ICMP6 lambda$deserializer$40(byte[],int,int)",
            "org.onlab.packet.IPv4:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IPv4:org.onlab.packet.IPv4 lambda$deserializer$24(byte[],int,int)",
            "org.onlab.packet.IPv6:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IPv6:org.onlab.packet.IPv6 lambda$deserializer$48(byte[],int,int)",
            "org.onlab.packet.MPLS:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.MPLS:org.onlab.packet.MPLS lambda$deserializer$12(byte[],int,int)",
            "org.onlab.packet.PIM:org.onlab.packet.PIM lambda$deserializer$49(byte[],int,int)",
            "org.onlab.packet.UDP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.UDP:org.onlab.packet.UDP lambda$deserializer$45(byte[],int,int)",
            "org.onlab.packet.ipv6.Authentication:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Authentication:org.onlab.packet.ipv6.Authentication lambda$deserializer$46(byte[],int,int)",
            "org.onlab.packet.ipv6.BaseOptions:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.BaseOptions:org.onlab.packet.ipv6.BaseOptions lambda$deserializer$13(byte[],int,int)",
            "org.onlab.packet.ipv6.Fragment:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Fragment:org.onlab.packet.ipv6.Fragment lambda$deserializer$26(byte[],int,int)",
            "org.onlab.packet.ipv6.Routing:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Routing:org.onlab.packet.ipv6.Routing lambda$deserializer$50(byte[],int,int)",
            "org.onlab.packet.pim.PIMHello:byte[] serialize()",
            "org.onlab.util.ExtendedSet:java.lang.Object get(java.lang.Object)",
            "org.jboss.netty.bootstrap.Bootstrap:java.lang.Object getOption(java.lang.String)",
            "org.jboss.netty.channel.ChannelLocal:java.lang.Object get(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.channel.DefaultChannelPipeline:org.jboss.netty.channel.ChannelHandler get(java.lang.String)",
            "org.jboss.netty.channel.DefaultChannelPipeline:org.jboss.netty.channel.ChannelHandlerContext getContext(java.lang.String)",
            "org.jboss.netty.channel.StaticChannelPipeline:org.jboss.netty.channel.ChannelHandler get(java.lang.String)",
            "org.jboss.netty.channel.StaticChannelPipeline:org.jboss.netty.channel.ChannelHandlerContext getContext(java.lang.String)",
            "org.jboss.netty.channel.group.DefaultChannelGroup:org.jboss.netty.channel.Channel find(java.lang.Integer)",
            "org.jboss.netty.channel.group.DefaultChannelGroupFuture:org.jboss.netty.channel.ChannelFuture find(java.lang.Integer)",
            "org.jboss.netty.channel.group.DefaultChannelGroupFuture:org.jboss.netty.channel.ChannelFuture find(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.channel.local.LocalChannelRegistry:org.jboss.netty.channel.Channel getChannel(org.jboss.netty.channel.local.LocalAddress)",
            "org.jboss.netty.channel.socket.nio.NioDatagramChannel:org.jboss.netty.channel.ChannelFuture joinGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress)",
            "org.jboss.netty.channel.socket.nio.NioDatagramChannel:org.jboss.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress)",
            "org.jboss.netty.channel.socket.nio.NioDatagramChannel:org.jboss.netty.channel.ChannelFuture block(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress)",
            "org.jboss.netty.handler.codec.http.HttpMethod:org.jboss.netty.handler.codec.http.HttpMethod valueOf(java.lang.String)",
            "org.jboss.netty.handler.codec.http.QueryStringDecoder:boolean addParam(java.util.Map,java.lang.String,java.lang.String)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:java.util.List getBodyHttpDatas(java.lang.String)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData getBodyHttpData(java.lang.String)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void addHttpData(org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData decodeMultipart(org.jboss.netty.handler.codec.http.multipart.HttpPostRequestDecoder$MultiPartStatus)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData findMultipartDisposition()",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData getFileUpload(java.lang.String)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:java.util.List getBodyHttpDatas(java.lang.String)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData getBodyHttpData(java.lang.String)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void addHttpData(org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData)",
            "org.jboss.netty.handler.codec.rtsp.RtspMethods:org.jboss.netty.handler.codec.http.HttpMethod valueOf(java.lang.String)",
            "org.jboss.netty.handler.codec.serialization.CachingClassResolver:java.lang.Class resolve(java.lang.String)",
            "org.jboss.netty.handler.codec.serialization.ReferenceMap:java.lang.Object get(java.lang.Object)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame:int getValue(int)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame:void setValue(int,int,boolean,boolean)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame:boolean isPersistValue(int)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame:void setPersistValue(int,boolean)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame:boolean isPersisted(int)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame:void setPersisted(int,boolean)",
            "org.jboss.netty.handler.codec.spdy.SpdyHttpDecoder:org.jboss.netty.handler.codec.http.HttpMessage getMessage(int)",
            "org.jboss.netty.handler.codec.spdy.SpdySession$PriorityComparator:int compare(java.lang.Integer,java.lang.Integer)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:boolean isRemoteSideClosed(int)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:void closeRemoteSide(int,boolean)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:boolean isLocalSideClosed(int)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:void closeLocalSide(int,boolean)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:boolean hasReceivedReply(int)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:void receivedReply(int)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:int getSendWindowSize(int)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:int updateSendWindowSize(int,int)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:int updateReceiveWindowSize(int,int)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:int getReceiveWindowSizeLowerBound(int)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:boolean putPendingWrite(int,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:org.jboss.netty.channel.MessageEvent getPendingWrite(int)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:org.jboss.netty.channel.MessageEvent removePendingWrite(int)",
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor:java.util.concurrent.atomic.AtomicLong getChannelCounter(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.handler.execution.OrderedDownstreamThreadPoolExecutor:java.util.concurrent.Executor getChildExecutor(org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor:java.util.concurrent.Executor getChildExecutor(org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.util.CharsetUtil:java.nio.charset.CharsetEncoder getEncoder(java.nio.charset.Charset)",
            "org.jboss.netty.util.CharsetUtil:java.nio.charset.CharsetDecoder getDecoder(java.nio.charset.Charset)",
            "org.jboss.netty.util.DefaultObjectSizeEstimator:int estimateSize(java.lang.Class,java.util.Set)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$EntrySet:boolean contains(java.lang.Object)",
            "org.apache.commons.lang.CharSet:org.apache.commons.lang.CharSet getInstance(java.lang.String)",
            "org.apache.commons.lang.ClassUtils:java.lang.String getShortClassName(java.lang.String)",
            "org.apache.commons.lang.ClassUtils:java.lang.Class primitiveToWrapper(java.lang.Class)",
            "org.apache.commons.lang.ClassUtils:java.lang.Class wrapperToPrimitive(java.lang.Class)",
            "org.apache.commons.lang.ClassUtils:java.lang.Class getClass(java.lang.ClassLoader,java.lang.String,boolean)",
            "org.apache.commons.lang.ClassUtils:java.lang.String toCanonicalName(java.lang.String)",
            "org.apache.commons.lang.ClassUtils:java.lang.String getCanonicalName(java.lang.String)",
            "org.apache.commons.lang.ClassUtils:void <clinit>()",
            "org.apache.commons.lang.Entities$MapIntMap:java.lang.String name(int)",
            "org.apache.commons.lang.Entities$MapIntMap:int value(java.lang.String)",
            "org.apache.commons.lang.Entities$PrimitiveEntityMap:int value(java.lang.String)",
            "org.apache.commons.lang.enum.Enum:void init(java.lang.String)",
            "org.apache.commons.lang.enum.Enum:java.lang.Object readResolve()",
            "org.apache.commons.lang.enum.Enum:org.apache.commons.lang.'enum'.Enum getEnum(java.lang.Class,java.lang.String)",
            "org.apache.commons.lang.enum.Enum:org.apache.commons.lang.'enum'.Enum$Entry getEntry(java.lang.Class)",
            "org.apache.commons.lang.enum.Enum:org.apache.commons.lang.'enum'.Enum$Entry createEntry(java.lang.Class)",
            "org.apache.commons.lang.enums.Enum:void init(java.lang.String)",
            "org.apache.commons.lang.enums.Enum:java.lang.Object readResolve()",
            "org.apache.commons.lang.enums.Enum:org.apache.commons.lang.enums.Enum getEnum(java.lang.Class,java.lang.String)",
            "org.apache.commons.lang.enums.Enum:org.apache.commons.lang.enums.Enum$Entry getEntry(java.lang.Class)",
            "org.apache.commons.lang.enums.Enum:org.apache.commons.lang.enums.Enum$Entry createEntry(java.lang.Class)",
            "org.apache.commons.lang.LocaleUtils:java.util.List languagesByCountry(java.lang.String)",
            "org.apache.commons.lang.LocaleUtils:java.util.List countriesByLanguage(java.lang.String)",
            "org.apache.commons.lang.text.ExtendedMessageFormat:java.text.Format getFormat(java.lang.String)",
            "org.apache.commons.lang.text.StrLookup$MapStrLookup:java.lang.String lookup(java.lang.String)",
            "org.apache.commons.lang.time.FastDateFormat:org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String,java.util.TimeZone,java.util.Locale)",
            "org.apache.commons.lang.time.FastDateFormat:org.apache.commons.lang.time.FastDateFormat getDateInstance(int,java.util.TimeZone,java.util.Locale)",
            "org.apache.commons.lang.time.FastDateFormat:org.apache.commons.lang.time.FastDateFormat getTimeInstance(int,java.util.TimeZone,java.util.Locale)",
            "org.apache.commons.lang.time.FastDateFormat:org.apache.commons.lang.time.FastDateFormat getDateTimeInstance(int,int,java.util.TimeZone,java.util.Locale)",
            "org.apache.commons.lang.time.FastDateFormat:java.lang.String getTimeZoneDisplay(java.util.TimeZone,boolean,int,java.util.Locale)",
            "org.apache.commons.lang3.builder.Diff:void <init>(java.lang.String)",
            "org.apache.commons.lang3.CharSet:org.apache.commons.lang3.CharSet getInstance(java.lang.String[])",
            "org.apache.commons.lang3.ClassUtils:java.lang.String getShortClassName(java.lang.String)",
            "org.apache.commons.lang3.ClassUtils:java.lang.Class primitiveToWrapper(java.lang.Class)",
            "org.apache.commons.lang3.ClassUtils:java.lang.Class wrapperToPrimitive(java.lang.Class)",
            "org.apache.commons.lang3.ClassUtils:java.lang.Class getClass(java.lang.ClassLoader,java.lang.String,boolean)",
            "org.apache.commons.lang3.ClassUtils:java.lang.String toCanonicalName(java.lang.String)",
            "org.apache.commons.lang3.ClassUtils:java.lang.String getCanonicalName(java.lang.String)",
            "org.apache.commons.lang3.ClassUtils:void <clinit>()",
            "org.apache.commons.lang3.concurrent.ConcurrentUtils:java.lang.Object createIfAbsent(java.util.concurrent.ConcurrentMap,java.lang.Object,org.apache.commons.lang3.concurrent.ConcurrentInitializer)",
            "org.apache.commons.lang3.concurrent.MultiBackgroundInitializer$MultiBackgroundInitializerResults:java.lang.Object getResultObject(java.lang.String)",
            "org.apache.commons.lang3.concurrent.MultiBackgroundInitializer$MultiBackgroundInitializerResults:org.apache.commons.lang3.concurrent.ConcurrentException getException(java.lang.String)",
            "org.apache.commons.lang3.concurrent.MultiBackgroundInitializer$MultiBackgroundInitializerResults:org.apache.commons.lang3.concurrent.BackgroundInitializer checkName(java.lang.String)",
            "org.apache.commons.lang3.LocaleUtils:java.util.List languagesByCountry(java.lang.String)",
            "org.apache.commons.lang3.LocaleUtils:java.util.List countriesByLanguage(java.lang.String)",
            "org.apache.commons.lang3.reflect.TypeLiteral:void <init>()",
            "org.apache.commons.lang3.reflect.TypeUtils:java.lang.reflect.Type unrollVariableAssignments(java.lang.reflect.TypeVariable,java.util.Map)",
            "org.apache.commons.lang3.reflect.TypeUtils:java.lang.reflect.Type substituteTypeVariables(java.lang.reflect.Type,java.util.Map)",
            "org.apache.commons.lang3.reflect.TypeUtils:java.util.Map getTypeArguments(java.lang.reflect.ParameterizedType,java.lang.Class,java.util.Map)",
            "org.apache.commons.lang3.reflect.TypeUtils:void mapTypeVariablesToArguments(java.lang.Class,java.lang.reflect.ParameterizedType,java.util.Map)",
            "org.apache.commons.lang3.reflect.TypeUtils:java.lang.Class getRawType(java.lang.reflect.Type,java.lang.reflect.Type)",
            "org.apache.commons.lang3.reflect.TypeUtils:java.lang.reflect.Type unrollVariables(java.util.Map,java.lang.reflect.Type)",
            "org.apache.commons.lang3.reflect.TypeUtils:java.lang.reflect.Type[] extractTypeArgumentsFrom(java.util.Map,java.lang.reflect.TypeVariable[])",
            "org.apache.commons.lang3.SerializationUtils$ClassLoaderAwareObjectInputStream:java.lang.Class resolveClass(java.io.ObjectStreamClass)",
            "org.apache.commons.lang3.text.ExtendedMessageFormat:java.text.Format getFormat(java.lang.String)",
            "org.apache.commons.lang3.text.StrLookup$MapStrLookup:java.lang.String lookup(java.lang.String)",
            "org.apache.commons.lang3.time.FastDateParser$TextStrategy:void setCalendar(org.apache.commons.lang3.time.FastDateParser,java.util.Calendar,java.lang.String)",
            "org.apache.commons.lang3.time.FastDateParser:org.apache.commons.lang3.time.FastDateParser$Strategy getLocaleSpecificStrategy(int,java.util.Calendar)",
            "org.apache.commons.lang3.time.FastDatePrinter:java.lang.String getTimeZoneDisplay(java.util.TimeZone,boolean,int,java.util.Locale)",
            "org.apache.commons.lang3.time.FormatCache:java.text.Format getInstance(java.lang.String,java.util.TimeZone,java.util.Locale)",
            "org.apache.commons.lang3.time.FormatCache:java.lang.String getPatternForStyle(java.lang.Integer,java.lang.Integer,java.util.Locale)",
            "com.esotericsoftware.kryo.Generics:java.lang.Class getConcreteClass(java.lang.String)",
            "org.onlab.stc.MonitorLayout$get__40:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap:boolean containsKey(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Compiler:boolean registerStep(org.onlab.stc.Step,org.apache.commons.configuration.HierarchicalConfiguration,java.lang.String,org.onlab.stc.Group)",
            "org.onlab.graph.DepthFirstSearch$SpanningTreeResult:boolean isEdgeMarked(org.onlab.graph.Edge)",
            "org.onlab.packet.Ethernet:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.Ethernet:org.onlab.packet.Ethernet lambda$deserializer$10(byte[],int,int)",
            "org.onlab.packet.ICMP6:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ICMP6:org.onlab.packet.ICMP6 lambda$deserializer$40(byte[],int,int)",
            "org.onlab.packet.IPv4:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IPv4:org.onlab.packet.IPv4 lambda$deserializer$24(byte[],int,int)",
            "org.onlab.packet.IPv6:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IPv6:org.onlab.packet.IPv6 lambda$deserializer$48(byte[],int,int)",
            "org.onlab.packet.MPLS:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.MPLS:org.onlab.packet.MPLS lambda$deserializer$12(byte[],int,int)",
            "org.onlab.packet.PIM:org.onlab.packet.PIM lambda$deserializer$49(byte[],int,int)",
            "org.onlab.packet.UDP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.UDP:org.onlab.packet.UDP lambda$deserializer$45(byte[],int,int)",
            "org.onlab.packet.ipv6.Authentication:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Authentication:org.onlab.packet.ipv6.Authentication lambda$deserializer$46(byte[],int,int)",
            "org.onlab.packet.ipv6.BaseOptions:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.BaseOptions:org.onlab.packet.ipv6.BaseOptions lambda$deserializer$13(byte[],int,int)",
            "org.onlab.packet.ipv6.Fragment:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Fragment:org.onlab.packet.ipv6.Fragment lambda$deserializer$26(byte[],int,int)",
            "org.onlab.packet.ipv6.Routing:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Routing:org.onlab.packet.ipv6.Routing lambda$deserializer$50(byte[],int,int)",
            "org.onlab.util.ExtendedSet:boolean contains(java.lang.Object)",
            "org.onlab.util.ExtendedSet:boolean lambda$retainAll$21(java.lang.Object)",
            "org.jboss.netty.channel.DefaultChannelPipeline:void checkDuplicateName(java.lang.String)",
            "org.jboss.netty.channel.group.DefaultChannelGroup:boolean contains(java.lang.Object)",
            "org.jboss.netty.channel.local.LocalChannelRegistry:boolean isRegistered(org.jboss.netty.channel.local.LocalAddress)",
            "org.jboss.netty.handler.codec.serialization.ReferenceMap:boolean containsKey(java.lang.Object)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame:boolean isSet(int)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame:int getValue(int)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame:void setValue(int,int,boolean,boolean)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame:void removeValue(int)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame:boolean isPersistValue(int)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame:void setPersistValue(int,boolean)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame:boolean isPersisted(int)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame:void setPersisted(int,boolean)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:boolean isActiveStream(int)",
            "org.jboss.netty.handler.ipfilter.OneIpFilterHandler:boolean accept(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent,java.net.InetSocketAddress)",
            "org.jboss.netty.util.MapBackedSet:boolean contains(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$KeySet:boolean contains(java.lang.Object)",
            "org.apache.commons.lang.builder.ToStringStyle:boolean isRegistered(java.lang.Object)",
            "org.apache.commons.lang.ClassUtils:java.lang.String getShortClassName(java.lang.String)",
            "org.apache.commons.lang.ClassUtils:java.lang.Class getClass(java.lang.ClassLoader,java.lang.String,boolean)",
            "org.apache.commons.lang.enum.Enum:void init(java.lang.String)",
            "org.apache.commons.lang.enums.Enum:void init(java.lang.String)",
            "org.apache.commons.lang3.builder.ToStringStyle:boolean isRegistered(java.lang.Object)",
            "org.apache.commons.lang3.ClassUtils:java.lang.String getShortClassName(java.lang.String)",
            "org.apache.commons.lang3.ClassUtils:boolean isPrimitiveWrapper(java.lang.Class)",
            "org.apache.commons.lang3.ClassUtils:java.lang.Class getClass(java.lang.ClassLoader,java.lang.String,boolean)",
            "org.apache.commons.lang3.concurrent.MultiBackgroundInitializer$MultiBackgroundInitializerResults:boolean isException(java.lang.String)",
            "org.apache.commons.lang3.reflect.TypeUtils:java.util.Map getTypeArguments(java.lang.reflect.ParameterizedType,java.lang.Class,java.util.Map)",
            "org.apache.commons.lang3.reflect.TypeUtils:void mapTypeVariablesToArguments(java.lang.Class,java.lang.reflect.ParameterizedType,java.util.Map)",
            "org.apache.commons.lang3.reflect.TypeUtils:java.lang.reflect.Type[] extractTypeArgumentsFrom(java.util.Map,java.lang.reflect.TypeVariable[])",
            "org.onlab.util.ExtendedSet$containsKey__99:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap:java.lang.Object put(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Compiler:boolean registerStep(org.onlab.stc.Step,org.apache.commons.configuration.HierarchicalConfiguration,java.lang.String,org.onlab.stc.Group)",
            "org.onlab.stc.Compiler:void processSequentialRequirements(java.lang.String,java.lang.String,java.lang.String)",
            "org.onlab.stc.Compiler:void processRequirements(org.onlab.stc.Step,java.lang.String,java.lang.String)",
            "org.onlab.stc.Coordinator:void scrapeForVariables(java.lang.String)",
            "org.onlab.stc.MonitorLayout:void <init>(org.onlab.stc.Compiler)",
            "org.onlab.stc.MonitorLayout:void createBox(org.onlab.stc.Step)",
            "org.onlab.stc.ScenarioStore:void add(org.onlab.stc.StepEvent)",
            "org.onlab.stc.ScenarioStore:void lambda$reset$17(org.onlab.stc.Step)",
            "org.onlab.graph.AbstractGraphPathSearch$DefaultResult:void updateVertex(org.onlab.graph.Vertex,org.onlab.graph.Edge,double,boolean)",
            "org.onlab.graph.DepthFirstSearch$SpanningTreeResult:void markEdge(org.onlab.graph.Edge,org.onlab.graph.DepthFirstSearch$EdgeType)",
            "org.onlab.graph.SrlgGraphSearch:void <init>(java.util.Map)",
            "org.onlab.graph.TarjanGraphSearch$SccResult:org.onlab.graph.TarjanGraphSearch$VertexData addData(org.onlab.graph.Vertex)",
            "org.onlab.packet.Ethernet:void <clinit>()",
            "org.onlab.packet.ICMP6:void <clinit>()",
            "org.onlab.packet.IPv4:void <clinit>()",
            "org.onlab.packet.IPv6:void <clinit>()",
            "org.onlab.packet.MPLS:void <clinit>()",
            "org.onlab.packet.PIM:void <clinit>()",
            "org.onlab.packet.UDP:void <clinit>()",
            "org.onlab.packet.pim.PIMHello:void createDefaultOptions()",
            "org.onlab.packet.pim.PIMHello:void addOption(org.onlab.packet.pim.PIMHelloOption)",
            "org.jboss.netty.bootstrap.Bootstrap:void setOption(java.lang.String,java.lang.Object)",
            "org.jboss.netty.bootstrap.Bootstrap:boolean isOrderedMap(java.util.Map)",
            "org.jboss.netty.bootstrap.ServerBootstrap$Binder:void channelOpen(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.channel.ChannelLocal:java.lang.Object set(org.jboss.netty.channel.Channel,java.lang.Object)",
            "org.jboss.netty.channel.DefaultChannelPipeline:void addFirst(java.lang.String,org.jboss.netty.channel.ChannelHandler)",
            "org.jboss.netty.channel.DefaultChannelPipeline:void addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)",
            "org.jboss.netty.channel.DefaultChannelPipeline:void addBefore(java.lang.String,java.lang.String,org.jboss.netty.channel.ChannelHandler)",
            "org.jboss.netty.channel.DefaultChannelPipeline:void addAfter(java.lang.String,java.lang.String,org.jboss.netty.channel.ChannelHandler)",
            "org.jboss.netty.channel.DefaultChannelPipeline:org.jboss.netty.channel.ChannelHandler replace(org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext,java.lang.String,org.jboss.netty.channel.ChannelHandler)",
            "org.jboss.netty.channel.DefaultChannelPipeline:void init(java.lang.String,org.jboss.netty.channel.ChannelHandler)",
            "org.jboss.netty.channel.StaticChannelPipeline:void <init>(org.jboss.netty.channel.ChannelHandler[])",
            "org.jboss.netty.channel.socket.nio.NioDatagramChannel:org.jboss.netty.channel.ChannelFuture joinGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress)",
            "org.jboss.netty.handler.codec.http.HttpMethod:void <clinit>()",
            "org.jboss.netty.handler.codec.http.QueryStringDecoder:boolean addParam(java.util.Map,java.lang.String,java.lang.String)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void addHttpData(org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData findMultipartDisposition()",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder:void <clinit>()",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void addHttpData(org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData)",
            "org.jboss.netty.handler.codec.rtsp.RtspMethods:void <clinit>()",
            "org.jboss.netty.handler.codec.serialization.CachingClassResolver:java.lang.Class resolve(java.lang.String)",
            "org.jboss.netty.handler.codec.serialization.ReferenceMap:java.lang.Object put(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.handler.codec.serialization.ReferenceMap:void putAll(java.util.Map)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame:void setValue(int,int,boolean,boolean)",
            "org.jboss.netty.handler.codec.spdy.SpdyHttpDecoder:org.jboss.netty.handler.codec.http.HttpMessage putMessage(int,org.jboss.netty.handler.codec.http.HttpMessage)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:void acceptStream(int,byte,boolean,boolean,int,int,boolean)",
            "org.jboss.netty.handler.ipfilter.OneIpFilterHandler:boolean accept(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent,java.net.InetSocketAddress)",
            "org.jboss.netty.util.CharsetUtil:java.nio.charset.CharsetEncoder getEncoder(java.nio.charset.Charset)",
            "org.jboss.netty.util.CharsetUtil:java.nio.charset.CharsetDecoder getDecoder(java.nio.charset.Charset)",
            "org.jboss.netty.util.DefaultObjectSizeEstimator:void <init>()",
            "org.jboss.netty.util.MapBackedSet:boolean add(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$WriteThroughEntry:java.lang.Object setValue(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap:void putAll(java.util.Map)",
            "org.apache.commons.lang.builder.ToStringStyle:void register(java.lang.Object)",
            "org.apache.commons.lang.CharSet:void <clinit>()",
            "org.apache.commons.lang.ClassUtils:void addAbbreviation(java.lang.String,java.lang.String)",
            "org.apache.commons.lang.ClassUtils:void <clinit>()",
            "org.apache.commons.lang.Entities$MapIntMap:void add(java.lang.String,int)",
            "org.apache.commons.lang.Entities$PrimitiveEntityMap:void add(java.lang.String,int)",
            "org.apache.commons.lang.enum.Enum:void init(java.lang.String)",
            "org.apache.commons.lang.enums.Enum:void init(java.lang.String)",
            "org.apache.commons.lang.LocaleUtils:java.util.List languagesByCountry(java.lang.String)",
            "org.apache.commons.lang.LocaleUtils:java.util.List countriesByLanguage(java.lang.String)",
            "org.apache.commons.lang.time.FastDateFormat:org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String,java.util.TimeZone,java.util.Locale)",
            "org.apache.commons.lang.time.FastDateFormat:org.apache.commons.lang.time.FastDateFormat getDateInstance(int,java.util.TimeZone,java.util.Locale)",
            "org.apache.commons.lang.time.FastDateFormat:org.apache.commons.lang.time.FastDateFormat getTimeInstance(int,java.util.TimeZone,java.util.Locale)",
            "org.apache.commons.lang.time.FastDateFormat:org.apache.commons.lang.time.FastDateFormat getDateTimeInstance(int,int,java.util.TimeZone,java.util.Locale)",
            "org.apache.commons.lang.time.FastDateFormat:java.lang.String getTimeZoneDisplay(java.util.TimeZone,boolean,int,java.util.Locale)",
            "org.apache.commons.lang3.builder.ToStringStyle:void register(java.lang.Object)",
            "org.apache.commons.lang3.CharSet:void <clinit>()",
            "org.apache.commons.lang3.ClassUtils:void <clinit>()",
            "org.apache.commons.lang3.concurrent.MultiBackgroundInitializer:void addInitializer(java.lang.String,org.apache.commons.lang3.concurrent.BackgroundInitializer)",
            "org.apache.commons.lang3.reflect.TypeUtils:java.util.Map getTypeArguments(java.lang.reflect.ParameterizedType,java.lang.Class,java.util.Map)",
            "org.apache.commons.lang3.reflect.TypeUtils:void mapTypeVariablesToArguments(java.lang.Class,java.lang.reflect.ParameterizedType,java.util.Map)",
            "org.apache.commons.lang3.SerializationUtils$ClassLoaderAwareObjectInputStream:void <init>(java.io.InputStream,java.lang.ClassLoader)",
            "com.esotericsoftware.kryo.Generics:void add(java.lang.String,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.MapSerializer:java.util.Map read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.MapSerializer:java.util.Map copy(com.esotericsoftware.kryo.Kryo,java.util.Map)"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap:java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.metrics.MetricsComponent:org.onlab.metrics.MetricsFeature registerFeature(java.lang.String)",
            "org.onlab.metrics.MetricsManager:org.onlab.metrics.MetricsComponent registerComponent(java.lang.String)",
            "org.onlab.util.ExtendedSet:boolean add(java.lang.Object)",
            "org.onlab.util.ExtendedSet:java.lang.Boolean lambda$addAll$20(java.lang.Object)",
            "org.jboss.netty.channel.AbstractChannel:java.lang.Integer allocateId(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.channel.ChannelLocal:java.lang.Object setIfAbsent(org.jboss.netty.channel.Channel,java.lang.Object)",
            "org.jboss.netty.channel.group.DefaultChannelGroup:boolean add(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.channel.local.LocalChannelRegistry:boolean register(org.jboss.netty.channel.local.LocalAddress,org.jboss.netty.channel.Channel)",
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor:java.util.concurrent.atomic.AtomicLong getChannelCounter(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.handler.execution.OrderedDownstreamThreadPoolExecutor:java.util.concurrent.Executor getChildExecutor(org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor:java.util.concurrent.Executor getChildExecutor(org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.util.DefaultObjectSizeEstimator:int estimateSize(java.lang.Class,java.util.Set)",
            "org.apache.commons.lang3.concurrent.ConcurrentUtils:java.lang.Object putIfAbsent(java.util.concurrent.ConcurrentMap,java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang3.LocaleUtils:java.util.List languagesByCountry(java.lang.String)",
            "org.apache.commons.lang3.LocaleUtils:java.util.List countriesByLanguage(java.lang.String)",
            "org.apache.commons.lang3.time.FastDateParser:org.apache.commons.lang3.time.FastDateParser$Strategy getLocaleSpecificStrategy(int,java.util.Calendar)",
            "org.apache.commons.lang3.time.FastDatePrinter:java.lang.String getTimeZoneDisplay(java.util.TimeZone,boolean,int,java.util.Locale)",
            "org.apache.commons.lang3.time.FormatCache:java.text.Format getInstance(java.lang.String,java.util.TimeZone,java.util.Locale)",
            "org.apache.commons.lang3.time.FormatCache:java.lang.String getPatternForStyle(java.lang.Integer,java.lang.Integer,java.util.Locale)"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap:java.lang.Object remove(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.graph.AbstractGraphPathSearch$DefaultResult:void removeVertex(org.onlab.graph.Vertex)",
            "org.onlab.util.ExtendedSet:boolean remove(java.lang.Object)",
            "org.onlab.util.ExtendedSet:java.lang.Boolean lambda$removeAll$23(java.lang.Object)",
            "org.onlab.util.ExtendedSet:java.lang.Boolean lambda$retainAll$22(java.lang.Object)",
            "org.jboss.netty.bootstrap.Bootstrap:void setOption(java.lang.String,java.lang.Object)",
            "org.jboss.netty.channel.AbstractChannel:boolean setClosed()",
            "org.jboss.netty.channel.ChannelLocal:java.lang.Object remove(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.channel.DefaultChannelPipeline:org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext remove(org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext)",
            "org.jboss.netty.channel.DefaultChannelPipeline:org.jboss.netty.channel.ChannelHandler removeFirst()",
            "org.jboss.netty.channel.DefaultChannelPipeline:org.jboss.netty.channel.ChannelHandler removeLast()",
            "org.jboss.netty.channel.DefaultChannelPipeline:org.jboss.netty.channel.ChannelHandler replace(org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext,java.lang.String,org.jboss.netty.channel.ChannelHandler)",
            "org.jboss.netty.channel.group.DefaultChannelGroup:boolean remove(java.lang.Object)",
            "org.jboss.netty.channel.local.LocalChannelRegistry:boolean unregister(org.jboss.netty.channel.local.LocalAddress)",
            "org.jboss.netty.channel.socket.nio.NioDatagramChannel:org.jboss.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void cleanMixedAttributes()",
            "org.jboss.netty.handler.codec.serialization.ReferenceMap:java.lang.Object remove(java.lang.Object)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame:void removeValue(int)",
            "org.jboss.netty.handler.codec.spdy.SpdyHttpDecoder:org.jboss.netty.handler.codec.http.HttpMessage removeMessage(int)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:org.jboss.netty.handler.codec.spdy.SpdySession$StreamState removeActiveStream(int,boolean)",
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor:java.util.concurrent.atomic.AtomicLong getChannelCounter(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor:boolean removeChildExecutor(java.lang.Object)",
            "org.jboss.netty.handler.ipfilter.OneIpFilterHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.util.MapBackedSet:boolean remove(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$HashIterator:void remove()",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$KeySet:boolean remove(java.lang.Object)",
            "org.apache.commons.lang.builder.ToStringStyle:void unregister(java.lang.Object)",
            "org.apache.commons.lang3.builder.ToStringStyle:void unregister(java.lang.Object)"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap:boolean remove(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$EntrySet:boolean remove(java.lang.Object)"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap:boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap:java.lang.Object replace(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.ArrayUtils:int hashCode(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.builder.HashCodeBuilder:org.apache.commons.lang.builder.HashCodeBuilder append(java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.builder.HashCodeBuilder:org.apache.commons.lang.builder.HashCodeBuilder append(java.lang.Object)"
        ]
    },
    "org.apache.commons.lang.text.ExtendedMessageFormat:int hashCode()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.ConcurrentHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentHashMap:int hashOf(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap:int hashOf(java.lang.Object)",
            "org.apache.commons.lang.builder.HashCodeBuilder:org.apache.commons.lang.builder.HashCodeBuilder append(java.lang.Object)",
            "org.apache.commons.lang.mutable.MutableObject:int hashCode()",
            "org.apache.commons.lang.ObjectUtils:int hashCode(java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:int hashCode()",
            "org.apache.commons.lang.time.FastDateFormat$Pair:int hashCode()",
            "org.apache.commons.lang3.AnnotationUtils:int hashMember(java.lang.String,java.lang.Object)",
            "org.apache.commons.lang3.builder.HashCodeBuilder:org.apache.commons.lang3.builder.HashCodeBuilder append(java.lang.Object)",
            "org.apache.commons.lang3.concurrent.ConstantInitializer:int hashCode()",
            "org.apache.commons.lang3.mutable.MutableObject:int hashCode()",
            "org.apache.commons.lang3.ObjectUtils:int hashCode(java.lang.Object)",
            "org.apache.commons.lang3.Range:int hashCode()",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:int hashCode()",
            "org.apache.commons.lang3.time.FormatCache$MultipartKey:int hashCode()",
            "org.apache.commons.lang3.tuple.Pair:int hashCode()",
            "org.apache.commons.lang3.tuple.Triple:int hashCode()",
            "org.objectweb.asm.ClassReader:void a(org.objectweb.asm.ClassWriter,org.objectweb.asm.Item[],char[])",
            "org.objectweb.asm.ClassWriter:org.objectweb.asm.Item a(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[])",
            "com.eclipsesource.json.JsonObject$HashIndexTable:int hashSlotFor(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object put_internal(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void putResize(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void push(java.lang.Object,java.lang.Object,int,java.lang.Object,int,java.lang.Object,int,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object remove(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsKey(java.lang.Object)"
        ]
    },
    "org.apache.commons.lang3.AnnotationUtils:int hashCode(java.lang.'annotation'.Annotation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.AnnotationUtils:int hashMember(java.lang.String,java.lang.Object)"
        ]
    },
    "org.apache.commons.lang3.ArrayUtils:int hashCode(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.builder.HashCodeBuilder:org.apache.commons.lang3.builder.HashCodeBuilder append(java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.builder.HashCodeBuilder:org.apache.commons.lang3.builder.HashCodeBuilder append(java.lang.Object)"
        ]
    },
    "org.apache.commons.lang3.ObjectUtils:int hashCodeMulti(java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.reflect.TypeUtils$ParameterizedTypeImpl:int hashCode()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.ConcurrentHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentHashMap:int hashOf(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap:int hashOf(java.lang.Object)",
            "org.apache.commons.lang.builder.HashCodeBuilder:org.apache.commons.lang.builder.HashCodeBuilder append(java.lang.Object)",
            "org.apache.commons.lang.mutable.MutableObject:int hashCode()",
            "org.apache.commons.lang.ObjectUtils:int hashCode(java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:int hashCode()",
            "org.apache.commons.lang.time.FastDateFormat$Pair:int hashCode()",
            "org.apache.commons.lang3.AnnotationUtils:int hashMember(java.lang.String,java.lang.Object)",
            "org.apache.commons.lang3.builder.HashCodeBuilder:org.apache.commons.lang3.builder.HashCodeBuilder append(java.lang.Object)",
            "org.apache.commons.lang3.concurrent.ConstantInitializer:int hashCode()",
            "org.apache.commons.lang3.mutable.MutableObject:int hashCode()",
            "org.apache.commons.lang3.ObjectUtils:int hashCode(java.lang.Object)",
            "org.apache.commons.lang3.Range:int hashCode()",
            "org.apache.commons.lang3.reflect.TypeLiteral:int hashCode()",
            "org.apache.commons.lang3.reflect.TypeUtils$GenericArrayTypeImpl:int hashCode()",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:int hashCode()",
            "org.apache.commons.lang3.time.FormatCache$MultipartKey:int hashCode()",
            "org.apache.commons.lang3.tuple.Pair:int hashCode()",
            "org.apache.commons.lang3.tuple.Triple:int hashCode()",
            "org.objectweb.asm.ClassReader:void a(org.objectweb.asm.ClassWriter,org.objectweb.asm.Item[],char[])",
            "org.objectweb.asm.ClassWriter:org.objectweb.asm.Item a(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[])",
            "com.eclipsesource.json.JsonObject$HashIndexTable:int hashSlotFor(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object put_internal(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void putResize(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void push(java.lang.Object,java.lang.Object,int,java.lang.Object,int,java.lang.Object,int,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object remove(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsKey(java.lang.Object)"
        ]
    },
    "org.apache.commons.lang3.text.ExtendedMessageFormat:int hashCode()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.ConcurrentHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentHashMap:int hashOf(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap:int hashOf(java.lang.Object)",
            "org.apache.commons.lang.builder.HashCodeBuilder:org.apache.commons.lang.builder.HashCodeBuilder append(java.lang.Object)",
            "org.apache.commons.lang.mutable.MutableObject:int hashCode()",
            "org.apache.commons.lang.ObjectUtils:int hashCode(java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:int hashCode()",
            "org.apache.commons.lang.time.FastDateFormat$Pair:int hashCode()",
            "org.apache.commons.lang3.AnnotationUtils:int hashMember(java.lang.String,java.lang.Object)",
            "org.apache.commons.lang3.builder.HashCodeBuilder:org.apache.commons.lang3.builder.HashCodeBuilder append(java.lang.Object)",
            "org.apache.commons.lang3.concurrent.ConstantInitializer:int hashCode()",
            "org.apache.commons.lang3.mutable.MutableObject:int hashCode()",
            "org.apache.commons.lang3.ObjectUtils:int hashCode(java.lang.Object)",
            "org.apache.commons.lang3.Range:int hashCode()",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:int hashCode()",
            "org.apache.commons.lang3.time.FormatCache$MultipartKey:int hashCode()",
            "org.apache.commons.lang3.tuple.Pair:int hashCode()",
            "org.apache.commons.lang3.tuple.Triple:int hashCode()",
            "org.objectweb.asm.ClassReader:void a(org.objectweb.asm.ClassWriter,org.objectweb.asm.Item[],char[])",
            "org.objectweb.asm.ClassWriter:org.objectweb.asm.Item a(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[])",
            "com.eclipsesource.json.JsonObject$HashIndexTable:int hashSlotFor(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object put_internal(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void putResize(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void push(java.lang.Object,java.lang.Object,int,java.lang.Object,int,java.lang.Object,int,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object remove(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsKey(java.lang.Object)"
        ]
    },
    "org.objectweb.asm.ClassReader:void a(org.objectweb.asm.ClassWriter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.objectweb.asm.ClassWriter:void <init>(org.objectweb.asm.ClassReader,int)"
        ]
    },
    "org.objectweb.asm.ClassWriter:int newInvokeDynamic(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.objectweb.asm.MethodWriter:void visitInvokeDynamicInsn(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.objectweb.asm.ClassReader:void a(org.objectweb.asm.MethodVisitor,org.objectweb.asm.Context,int)",
            "org.objectweb.asm.MethodVisitor:void visitInvokeDynamicInsn(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[])"
        ]
    },
    "com.eclipsesource.json.JsonObject$HashIndexTable:void add(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.eclipsesource.json.JsonObject:com.eclipsesource.json.JsonObject add(java.lang.String,com.eclipsesource.json.JsonValue)",
            "com.eclipsesource.json.JsonObject:com.eclipsesource.json.JsonObject set(java.lang.String,com.eclipsesource.json.JsonValue)",
            "com.eclipsesource.json.JsonObject:void updateHashIndex()"
        ]
    },
    "com.eclipsesource.json.JsonObject$HashIndexTable:int get(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.eclipsesource.json.JsonObject:int indexOf(java.lang.String)"
        ]
    },
    "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object put(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.CompatibleFieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.CompatibleFieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.JavaSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.JavaSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.util.DefaultClassResolver:com.esotericsoftware.kryo.Registration register(com.esotericsoftware.kryo.Registration)",
            "com.esotericsoftware.kryo.util.DefaultClassResolver:com.esotericsoftware.kryo.Registration readName(com.esotericsoftware.kryo.io.Input)",
            "com.esotericsoftware.kryo.util.ObjectMap:void putAll(com.esotericsoftware.kryo.util.ObjectMap)"
        ]
    },
    "com.esotericsoftware.kryo.util.ObjectMap:void putStash(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.util.ObjectMap:void push(java.lang.Object,java.lang.Object,int,java.lang.Object,int,java.lang.Object,int,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.util.ObjectMap:void resize(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object put_internal(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void putResize(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void push(java.lang.Object,java.lang.Object,int,java.lang.Object,int,java.lang.Object,int,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void putStash(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void shrink(int)",
            "com.esotericsoftware.kryo.util.ObjectMap:void clear(int)",
            "com.esotericsoftware.kryo.util.ObjectMap:void ensureCapacity(int)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.CompatibleFieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readClassAndObject(com.esotericsoftware.kryo.io.Input)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:java.util.EnumSet read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.ExternalizableSerializer:com.esotericsoftware.kryo.serializers.JavaSerializer getCachedSerializer(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.ExternalizableSerializer:com.esotericsoftware.kryo.serializers.JavaSerializer getJavaSerializerIfRequired(java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.JavaSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeClassAndObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.EnumSet)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.ExternalizableSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.JavaSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readClassAndObject(com.esotericsoftware.kryo.io.Input)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:java.util.EnumSet read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.ExternalizableSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.util.DefaultClassResolver:com.esotericsoftware.kryo.Registration getRegistration(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:com.esotericsoftware.kryo.Registration register(java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:com.esotericsoftware.kryo.Registration register(java.lang.Class,int)",
            "com.esotericsoftware.kryo.Kryo:com.esotericsoftware.kryo.Registration register(java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:com.esotericsoftware.kryo.Registration getRegistration(java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.util.DefaultClassResolver:java.lang.Class getTypeByName(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.util.DefaultClassResolver:com.esotericsoftware.kryo.Registration readName(com.esotericsoftware.kryo.io.Input)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.CompatibleFieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeClassAndObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.EnumSet)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.FieldSerializer:java.util.List buildValidFields(boolean,java.util.List,com.esotericsoftware.kryo.util.ObjectMap,com.esotericsoftware.kryo.util.IntArray)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.FieldSerializer:void rebuildCachedFields(boolean)"
        ]
    },
    "org.jboss.netty.channel.group.DefaultChannelGroupFuture$1:void operationComplete(org.jboss.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.CompleteChannelFuture:void addListener(org.jboss.netty.channel.ChannelFutureListener)",
            "org.jboss.netty.channel.DefaultChannelFuture:void notifyListener(org.jboss.netty.channel.ChannelFutureListener)"
        ]
    },
    "org.jboss.netty.handler.codec.http.DefaultHttpMessage:void setContent(org.jboss.netty.buffer.ChannelBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.DefaultHttpMessage:void setChunked(boolean)",
            "org.jboss.netty.handler.codec.http.HttpChunkAggregator:void appendToCumulation(org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.http.HttpContentDecoder:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.codec.http.HttpContentEncoder:void writeRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.codec.http.HttpMessageDecoder:java.lang.Object reset()",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder:org.jboss.netty.handler.codec.http.HttpRequest finalizeRequest()",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker00:org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerHandshaker00:org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel,org.jboss.netty.handler.codec.http.HttpRequest)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler:void exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ExceptionEvent)",
            "org.jboss.netty.handler.codec.spdy.SpdyHttpDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)"
        ]
    },
    "org.jboss.netty.handler.codec.http.HttpClientCodec$Decoder:void decrement(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.HttpClientCodec$Decoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.http.HttpMessageDecoder$State)"
        ]
    },
    "org.jboss.netty.handler.codec.http.HttpMessageDecoder:java.lang.Object readFixedLengthContent(org.jboss.netty.buffer.ChannelBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.HttpMessageDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.http.HttpMessageDecoder$State)"
        ]
    },
    "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void <init>(org.jboss.netty.handler.codec.http.multipart.HttpDataFactory,org.jboss.netty.handler.codec.http.HttpRequest,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void <init>(org.jboss.netty.handler.codec.http.HttpRequest)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void <init>(org.jboss.netty.handler.codec.http.multipart.HttpDataFactory,org.jboss.netty.handler.codec.http.HttpRequest)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestDecoder:void <init>(org.jboss.netty.handler.codec.http.multipart.HttpDataFactory,org.jboss.netty.handler.codec.http.HttpRequest,java.nio.charset.Charset)"
        ]
    },
    "org.jboss.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void <init>(org.jboss.netty.handler.codec.http.multipart.HttpDataFactory,org.jboss.netty.handler.codec.http.HttpRequest,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestDecoder:void <init>(org.jboss.netty.handler.codec.http.multipart.HttpDataFactory,org.jboss.netty.handler.codec.http.HttpRequest,java.nio.charset.Charset)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void <init>(org.jboss.netty.handler.codec.http.HttpRequest)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void <init>(org.jboss.netty.handler.codec.http.multipart.HttpDataFactory,org.jboss.netty.handler.codec.http.HttpRequest)"
        ]
    },
    "org.jboss.netty.handler.codec.rtsp.RtspMessageEncoder:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.oneone.OneToOneEncoder:boolean doEncode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestDecoder:void cleanFiles()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestDecoder:void cleanFiles()"
        ]
    },
    "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder:void addBodyAttribute(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder:void addBodyFileUpload(java.lang.String,java.io.File,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder:void addBodyFileUploads(java.lang.String,java.io.File[],java.lang.String[],boolean[])"
        ]
    },
    "org.onlab.packet.EAPOL:org.onlab.packet.IPacket deserialize(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.BasePacket:java.lang.Object clone()",
            "org.onlab.packet.EAPOL:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ICMP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.PIM:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.TCP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.EncapSecurityPayload:org.onlab.packet.IPacket deserialize(byte[],int,int)"
        ]
    },
    "org.onlab.packet.ICMP:org.onlab.packet.IPacket deserialize(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.BasePacket:java.lang.Object clone()",
            "org.onlab.packet.EAPOL:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ICMP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.PIM:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.TCP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.EncapSecurityPayload:org.onlab.packet.IPacket deserialize(byte[],int,int)"
        ]
    },
    "org.onlab.packet.PIM:org.onlab.packet.IPacket deserialize(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.BasePacket:java.lang.Object clone()",
            "org.onlab.packet.EAPOL:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ICMP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.PIM:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.TCP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.EncapSecurityPayload:org.onlab.packet.IPacket deserialize(byte[],int,int)"
        ]
    },
    "org.onlab.packet.TCP:org.onlab.packet.IPacket deserialize(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.BasePacket:java.lang.Object clone()",
            "org.onlab.packet.EAPOL:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ICMP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.PIM:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.TCP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.EncapSecurityPayload:org.onlab.packet.IPacket deserialize(byte[],int,int)"
        ]
    },
    "org.onlab.packet.ipv6.EncapSecurityPayload:org.onlab.packet.IPacket deserialize(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.BasePacket:java.lang.Object clone()",
            "org.onlab.packet.EAPOL:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ICMP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.PIM:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.TCP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.EncapSecurityPayload:org.onlab.packet.IPacket deserialize(byte[],int,int)"
        ]
    },
    "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:org.jboss.netty.handler.codec.http.HttpHeaders add(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.DefaultHttpChunkTrailer$TrailingHeaders:org.jboss.netty.handler.codec.http.HttpHeaders add(java.lang.String,java.lang.Object)",
            "org.jboss.netty.handler.codec.http.DefaultHttpChunkTrailer:void addHeader(java.lang.String,java.lang.Object)",
            "org.jboss.netty.handler.codec.http.DefaultHttpMessage:void addHeader(java.lang.String,java.lang.Object)",
            "org.jboss.netty.handler.codec.http.HttpHeaders:void addHeader(org.jboss.netty.handler.codec.http.HttpMessage,java.lang.String,java.lang.Object)",
            "org.jboss.netty.handler.codec.http.HttpHeaders:void addIntHeader(org.jboss.netty.handler.codec.http.HttpMessage,java.lang.String,int)",
            "org.jboss.netty.handler.codec.http.HttpHeaders:void addDateHeader(org.jboss.netty.handler.codec.http.HttpMessage,java.lang.String,java.util.Date)",
            "org.jboss.netty.handler.codec.http.HttpHeaders:org.jboss.netty.handler.codec.http.HttpHeaders add(org.jboss.netty.handler.codec.http.HttpHeaders)",
            "org.jboss.netty.handler.codec.http.HttpHeaders:org.jboss.netty.handler.codec.http.HttpHeaders set(org.jboss.netty.handler.codec.http.HttpHeaders)",
            "org.jboss.netty.handler.codec.http.HttpMessageDecoder:org.jboss.netty.handler.codec.http.HttpMessageDecoder$State readHeaders(org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.http.HttpMessageDecoder:org.jboss.netty.handler.codec.http.HttpChunkTrailer readTrailingHeaders(org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.http.HttpMessageEncoder:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder:org.jboss.netty.handler.codec.http.HttpRequest finalizeRequest()",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker00:org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker07:org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker08:org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker13:org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerHandshaker00:org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel,org.jboss.netty.handler.codec.http.HttpRequest)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerHandshaker07:org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel,org.jboss.netty.handler.codec.http.HttpRequest)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerHandshaker08:org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel,org.jboss.netty.handler.codec.http.HttpRequest)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerHandshaker13:org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel,org.jboss.netty.handler.codec.http.HttpRequest)",
            "org.jboss.netty.handler.codec.spdy.SpdyHttpDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)",
            "org.jboss.netty.handler.codec.spdy.SpdyHttpDecoder:org.jboss.netty.handler.codec.http.HttpRequest createHttpRequest(int,org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "org.jboss.netty.handler.codec.spdy.SpdyHttpDecoder:org.jboss.netty.handler.codec.http.HttpResponse createHttpResponse(int,org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame)"
        ]
    },
    "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:org.jboss.netty.handler.codec.http.HttpHeaders set(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$2:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.handler.codec.http.DefaultHttpChunkTrailer$TrailingHeaders:org.jboss.netty.handler.codec.http.HttpHeaders set(java.lang.String,java.lang.Object)",
            "org.jboss.netty.handler.codec.http.DefaultHttpChunkTrailer:void setHeader(java.lang.String,java.lang.Object)",
            "org.jboss.netty.handler.codec.http.DefaultHttpMessage:void setHeader(java.lang.String,java.lang.Object)",
            "org.jboss.netty.handler.codec.http.HttpChunkAggregator:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.codec.http.HttpContentDecoder:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.codec.http.HttpContentEncoder:void writeRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.codec.http.HttpHeaders:void setKeepAlive(org.jboss.netty.handler.codec.http.HttpMessage,boolean)",
            "org.jboss.netty.handler.codec.http.HttpHeaders:void setHeader(org.jboss.netty.handler.codec.http.HttpMessage,java.lang.String,java.lang.Object)",
            "org.jboss.netty.handler.codec.http.HttpHeaders:void setIntHeader(org.jboss.netty.handler.codec.http.HttpMessage,java.lang.String,int)",
            "org.jboss.netty.handler.codec.http.HttpHeaders:void setDateHeader(org.jboss.netty.handler.codec.http.HttpMessage,java.lang.String,java.util.Date)",
            "org.jboss.netty.handler.codec.http.HttpHeaders:void setContentLength(org.jboss.netty.handler.codec.http.HttpMessage,long)",
            "org.jboss.netty.handler.codec.http.HttpHeaders:void setHost(org.jboss.netty.handler.codec.http.HttpMessage,java.lang.String)",
            "org.jboss.netty.handler.codec.http.HttpHeaders:void setDate(org.jboss.netty.handler.codec.http.HttpMessage,java.util.Date)",
            "org.jboss.netty.handler.codec.http.HttpHeaders:void set100ContinueExpected(org.jboss.netty.handler.codec.http.HttpMessage,boolean)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder:org.jboss.netty.handler.codec.http.HttpRequest finalizeRequest()",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker00:org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerHandshakerFactory:org.jboss.netty.channel.ChannelFuture sendUnsupportedWebSocketVersionResponse(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.handler.codec.spdy.SpdyHttpHeaders:void setUrl(org.jboss.netty.handler.codec.http.HttpMessage,java.lang.String)",
            "org.jboss.netty.handler.codec.spdy.SpdyHttpHeaders:void setScheme(org.jboss.netty.handler.codec.http.HttpMessage,java.lang.String)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.DefaultSpdyHeaders:org.jboss.netty.handler.codec.spdy.SpdyHeaders add(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.spdy.DefaultSpdyHeadersFrame:void addHeader(java.lang.String,java.lang.Object)",
            "org.jboss.netty.handler.codec.spdy.SpdyHeaderBlockRawDecoder:void decode(org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "org.jboss.netty.handler.codec.spdy.SpdyHeaders:void addHeader(org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame,java.lang.String,java.lang.Object)",
            "org.jboss.netty.handler.codec.spdy.SpdyHttpEncoder:void writeChunk(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelFuture,int,org.jboss.netty.handler.codec.http.HttpChunk,java.net.SocketAddress)",
            "org.jboss.netty.handler.codec.spdy.SpdyHttpEncoder:org.jboss.netty.handler.codec.spdy.SpdySynStreamFrame createSynStreamFrame(org.jboss.netty.handler.codec.http.HttpMessage)",
            "org.jboss.netty.handler.codec.spdy.SpdyHttpEncoder:org.jboss.netty.handler.codec.spdy.SpdySynReplyFrame createSynReplyFrame(org.jboss.netty.handler.codec.http.HttpResponse)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.DefaultSpdyHeaders:org.jboss.netty.handler.codec.spdy.SpdyHeaders set(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.spdy.DefaultSpdyHeadersFrame:void setHeader(java.lang.String,java.lang.Object)",
            "org.jboss.netty.handler.codec.spdy.SpdyHeaders:void setHeader(org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame,java.lang.String,java.lang.Object)",
            "org.jboss.netty.handler.codec.spdy.SpdyHeaders:void setHost(org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame,java.lang.String)",
            "org.jboss.netty.handler.codec.spdy.SpdyHeaders:void setMethod(int,org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame,org.jboss.netty.handler.codec.http.HttpMethod)",
            "org.jboss.netty.handler.codec.spdy.SpdyHeaders:void setScheme(int,org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame,java.lang.String)",
            "org.jboss.netty.handler.codec.spdy.SpdyHeaders:void setStatus(int,org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame,org.jboss.netty.handler.codec.http.HttpResponseStatus)",
            "org.jboss.netty.handler.codec.spdy.SpdyHeaders:void setUrl(int,org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame,java.lang.String)",
            "org.jboss.netty.handler.codec.spdy.SpdyHeaders:void setVersion(int,org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame,org.jboss.netty.handler.codec.http.HttpVersion)"
        ]
    },
    "org.jboss.netty.channel.DownstreamMessageEvent:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.IGMP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.pim.PIMHelloOption:java.lang.String toString()",
            "org.onlab.util.Tools:java.lang.String get(java.util.Dictionary,java.lang.String)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:java.lang.String toString(java.lang.Object)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdyHeaders:java.lang.String toString(java.lang.Object)",
            "org.jboss.netty.handler.logging.LoggingHandler:void log(org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.util.internal.StringUtil:java.lang.String stripControlCharacters(java.lang.Object)",
            "org.apache.commons.lang.builder.ReflectionToStringBuilder:java.lang.String[] toNoNullStringArray(java.lang.Object[])",
            "org.apache.commons.lang.mutable.MutableObject:java.lang.String toString()",
            "org.apache.commons.lang.ObjectUtils:java.lang.String toString(java.lang.Object)",
            "org.apache.commons.lang.ObjectUtils:java.lang.String toString(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.lang.Object[],char,int,int)",
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.lang.Object[],java.lang.String,int,int)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder append(java.lang.Object)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendFixedWidthPadLeft(java.lang.Object,int,char)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendFixedWidthPadRight(java.lang.Object,int,char)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder insert(int,java.lang.Object)",
            "org.apache.commons.lang.text.StrLookup$MapStrLookup:java.lang.String lookup(java.lang.String)",
            "org.apache.commons.lang.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Properties)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:java.lang.String toString()",
            "org.apache.commons.lang.time.DurationFormatUtils:java.lang.String format(org.apache.commons.lang.time.DurationFormatUtils$Token[],int,int,int,int,int,int,int,boolean)",
            "org.apache.commons.lang3.builder.ReflectionToStringBuilder:java.lang.String[] toNoNullStringArray(java.lang.Object[])",
            "org.apache.commons.lang3.exception.DefaultExceptionContext:java.lang.String getFormattedExceptionMessage(java.lang.String)",
            "org.apache.commons.lang3.mutable.MutableObject:java.lang.String toString()",
            "org.apache.commons.lang3.ObjectUtils:java.lang.String toString(java.lang.Object)",
            "org.apache.commons.lang3.ObjectUtils:java.lang.String toString(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder append(java.lang.Object)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadLeft(java.lang.Object,int,char)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadRight(java.lang.Object,int,char)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder insert(int,java.lang.Object)",
            "org.apache.commons.lang3.text.StrLookup$MapStrLookup:java.lang.String lookup(java.lang.String)",
            "org.apache.commons.lang3.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Properties)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:java.lang.String toString()",
            "org.apache.commons.lang3.time.DurationFormatUtils:java.lang.String format(org.apache.commons.lang3.time.DurationFormatUtils$Token[],long,long,long,long,long,long,long,boolean)"
        ]
    },
    "org.jboss.netty.channel.UpstreamMessageEvent:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.IGMP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.pim.PIMHelloOption:java.lang.String toString()",
            "org.onlab.util.Tools:java.lang.String get(java.util.Dictionary,java.lang.String)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:java.lang.String toString(java.lang.Object)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdyHeaders:java.lang.String toString(java.lang.Object)",
            "org.jboss.netty.handler.logging.LoggingHandler:void log(org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.util.internal.StringUtil:java.lang.String stripControlCharacters(java.lang.Object)",
            "org.apache.commons.lang.builder.ReflectionToStringBuilder:java.lang.String[] toNoNullStringArray(java.lang.Object[])",
            "org.apache.commons.lang.mutable.MutableObject:java.lang.String toString()",
            "org.apache.commons.lang.ObjectUtils:java.lang.String toString(java.lang.Object)",
            "org.apache.commons.lang.ObjectUtils:java.lang.String toString(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.lang.Object[],char,int,int)",
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.lang.Object[],java.lang.String,int,int)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder append(java.lang.Object)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendFixedWidthPadLeft(java.lang.Object,int,char)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendFixedWidthPadRight(java.lang.Object,int,char)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder insert(int,java.lang.Object)",
            "org.apache.commons.lang.text.StrLookup$MapStrLookup:java.lang.String lookup(java.lang.String)",
            "org.apache.commons.lang.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Properties)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:java.lang.String toString()",
            "org.apache.commons.lang.time.DurationFormatUtils:java.lang.String format(org.apache.commons.lang.time.DurationFormatUtils$Token[],int,int,int,int,int,int,int,boolean)",
            "org.apache.commons.lang3.builder.ReflectionToStringBuilder:java.lang.String[] toNoNullStringArray(java.lang.Object[])",
            "org.apache.commons.lang3.exception.DefaultExceptionContext:java.lang.String getFormattedExceptionMessage(java.lang.String)",
            "org.apache.commons.lang3.mutable.MutableObject:java.lang.String toString()",
            "org.apache.commons.lang3.ObjectUtils:java.lang.String toString(java.lang.Object)",
            "org.apache.commons.lang3.ObjectUtils:java.lang.String toString(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder append(java.lang.Object)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadLeft(java.lang.Object,int,char)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadRight(java.lang.Object,int,char)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder insert(int,java.lang.Object)",
            "org.apache.commons.lang3.text.StrLookup$MapStrLookup:java.lang.String lookup(java.lang.String)",
            "org.apache.commons.lang3.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Properties)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:java.lang.String toString()",
            "org.apache.commons.lang3.time.DurationFormatUtils:java.lang.String format(org.apache.commons.lang3.time.DurationFormatUtils$Token[],long,long,long,long,long,long,long,boolean)"
        ]
    },
    "org.apache.commons.lang.builder.ReflectionToStringBuilder:java.lang.String[] toNoNullStringArray(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.builder.CompareToBuilder:int reflectionCompare(java.lang.Object,java.lang.Object,java.util.Collection)",
            "org.apache.commons.lang.builder.EqualsBuilder:boolean reflectionEquals(java.lang.Object,java.lang.Object,java.util.Collection)",
            "org.apache.commons.lang.builder.HashCodeBuilder:int reflectionHashCode(java.lang.Object,java.util.Collection)",
            "org.apache.commons.lang.builder.ReflectionToStringBuilder:java.lang.String toStringExclude(java.lang.Object,java.util.Collection)"
        ]
    },
    "org.apache.commons.lang.builder.ReflectionToStringBuilder:org.apache.commons.lang.builder.ReflectionToStringBuilder setExcludeFieldNames(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.builder.ReflectionToStringBuilder:java.lang.String toStringExclude(java.lang.Object,java.lang.String[])"
        ]
    },
    "org.apache.commons.lang.StringUtils:java.lang.String join(java.lang.Object[],char)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.StringUtils:java.lang.String reverseDelimited(java.lang.String,char)",
            "org.apache.commons.lang.StringUtils:java.lang.String reverseDelimitedString(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.commons.lang.StringUtils:java.lang.String join(java.lang.Object[],java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.StringUtils:java.lang.String concatenate(java.lang.Object[])",
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.lang.Object[])",
            "org.apache.commons.lang.StringUtils:java.lang.String reverseDelimitedString(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.commons.lang.math.NumberRange:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.IGMP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.pim.PIMHelloOption:java.lang.String toString()",
            "org.onlab.util.Tools:java.lang.String get(java.util.Dictionary,java.lang.String)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:java.lang.String toString(java.lang.Object)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdyHeaders:java.lang.String toString(java.lang.Object)",
            "org.jboss.netty.util.internal.StringUtil:java.lang.String stripControlCharacters(java.lang.Object)",
            "org.apache.commons.lang.builder.ReflectionToStringBuilder:java.lang.String[] toNoNullStringArray(java.lang.Object[])",
            "org.apache.commons.lang.mutable.MutableObject:java.lang.String toString()",
            "org.apache.commons.lang.ObjectUtils:java.lang.String toString(java.lang.Object)",
            "org.apache.commons.lang.ObjectUtils:java.lang.String toString(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.lang.Object[],char,int,int)",
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.lang.Object[],java.lang.String,int,int)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder append(java.lang.Object)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendFixedWidthPadLeft(java.lang.Object,int,char)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendFixedWidthPadRight(java.lang.Object,int,char)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder insert(int,java.lang.Object)",
            "org.apache.commons.lang.text.StrLookup$MapStrLookup:java.lang.String lookup(java.lang.String)",
            "org.apache.commons.lang.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Properties)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:java.lang.String toString()",
            "org.apache.commons.lang.time.DurationFormatUtils:java.lang.String format(org.apache.commons.lang.time.DurationFormatUtils$Token[],int,int,int,int,int,int,int,boolean)",
            "org.apache.commons.lang3.builder.ReflectionToStringBuilder:java.lang.String[] toNoNullStringArray(java.lang.Object[])",
            "org.apache.commons.lang3.exception.DefaultExceptionContext:java.lang.String getFormattedExceptionMessage(java.lang.String)",
            "org.apache.commons.lang3.mutable.MutableObject:java.lang.String toString()",
            "org.apache.commons.lang3.ObjectUtils:java.lang.String toString(java.lang.Object)",
            "org.apache.commons.lang3.ObjectUtils:java.lang.String toString(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder append(java.lang.Object)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadLeft(java.lang.Object,int,char)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadRight(java.lang.Object,int,char)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder insert(int,java.lang.Object)",
            "org.apache.commons.lang3.text.StrLookup$MapStrLookup:java.lang.String lookup(java.lang.String)",
            "org.apache.commons.lang3.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Properties)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:java.lang.String toString()",
            "org.apache.commons.lang3.time.DurationFormatUtils:java.lang.String format(org.apache.commons.lang3.time.DurationFormatUtils$Token[],long,long,long,long,long,long,long,boolean)"
        ]
    },
    "org.apache.commons.lang.math.Range:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.NumberRange:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.IGMP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.pim.PIMHelloOption:java.lang.String toString()",
            "org.onlab.util.Tools:java.lang.String get(java.util.Dictionary,java.lang.String)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:java.lang.String toString(java.lang.Object)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdyHeaders:java.lang.String toString(java.lang.Object)",
            "org.jboss.netty.util.internal.StringUtil:java.lang.String stripControlCharacters(java.lang.Object)",
            "org.apache.commons.lang.builder.ReflectionToStringBuilder:java.lang.String[] toNoNullStringArray(java.lang.Object[])",
            "org.apache.commons.lang.mutable.MutableObject:java.lang.String toString()",
            "org.apache.commons.lang.ObjectUtils:java.lang.String toString(java.lang.Object)",
            "org.apache.commons.lang.ObjectUtils:java.lang.String toString(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.lang.Object[],char,int,int)",
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.lang.Object[],java.lang.String,int,int)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder append(java.lang.Object)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendFixedWidthPadLeft(java.lang.Object,int,char)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendFixedWidthPadRight(java.lang.Object,int,char)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder insert(int,java.lang.Object)",
            "org.apache.commons.lang.text.StrLookup$MapStrLookup:java.lang.String lookup(java.lang.String)",
            "org.apache.commons.lang.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Properties)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:java.lang.String toString()",
            "org.apache.commons.lang.time.DurationFormatUtils:java.lang.String format(org.apache.commons.lang.time.DurationFormatUtils$Token[],int,int,int,int,int,int,int,boolean)",
            "org.apache.commons.lang3.builder.ReflectionToStringBuilder:java.lang.String[] toNoNullStringArray(java.lang.Object[])",
            "org.apache.commons.lang3.exception.DefaultExceptionContext:java.lang.String getFormattedExceptionMessage(java.lang.String)",
            "org.apache.commons.lang3.mutable.MutableObject:java.lang.String toString()",
            "org.apache.commons.lang3.ObjectUtils:java.lang.String toString(java.lang.Object)",
            "org.apache.commons.lang3.ObjectUtils:java.lang.String toString(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder append(java.lang.Object)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadLeft(java.lang.Object,int,char)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadRight(java.lang.Object,int,char)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder insert(int,java.lang.Object)",
            "org.apache.commons.lang3.text.StrLookup$MapStrLookup:java.lang.String lookup(java.lang.String)",
            "org.apache.commons.lang3.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Properties)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:java.lang.String toString()",
            "org.apache.commons.lang3.time.DurationFormatUtils:java.lang.String format(org.apache.commons.lang3.time.DurationFormatUtils$Token[],long,long,long,long,long,long,long,boolean)"
        ]
    },
    "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendln(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendAll(java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendWithSeparators(java.lang.Object[],java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.text.StrSubstitutor:java.lang.String replace(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Map)",
            "org.apache.commons.lang.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Map,java.lang.String,java.lang.String)",
            "org.apache.commons.lang.text.StrSubstitutor:java.lang.String replaceSystemProperties(java.lang.Object)"
        ]
    },
    "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendFixedWidthPadLeft(int,int,char)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendFixedWidthPadRight(int,int,char)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.text.StrSubstitutor:java.lang.String resolveVariable(java.lang.String,org.apache.commons.lang.text.StrBuilder,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.text.StrSubstitutor:int substitute(org.apache.commons.lang.text.StrBuilder,int,int,java.util.List)"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentHashMap$EntrySet:boolean contains(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.MonitorLayout:boolean lambda$boxesOnTier$31(int,java.util.Set,org.onlab.stc.MonitorLayout$Box)",
            "org.onlab.graph.AbstractGraphPathSearch:void checkArguments(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex)",
            "org.onlab.graph.KShortestPathsSearch$InnerEdgeWeighter:double weight(org.onlab.graph.Edge)",
            "org.onlab.graph.MutableAdjacencyListsGraph:void addVertex(org.onlab.graph.Vertex)",
            "org.onlab.graph.MutableAdjacencyListsGraph:void removeVertex(org.onlab.graph.Vertex)",
            "org.onlab.graph.MutableAdjacencyListsGraph:void addEdge(org.onlab.graph.Edge)",
            "org.onlab.graph.MutableAdjacencyListsGraph:void removeEdge(org.onlab.graph.Edge)",
            "org.onlab.graph.TarjanGraphSearch$SccResult:java.util.Set findClusterEdges(java.util.Set)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:void validateHeaderValue0(java.lang.String)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:org.jboss.netty.handler.codec.http.HttpHeaders add(java.lang.String,java.lang.Object)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:org.jboss.netty.handler.codec.http.HttpHeaders add(java.lang.String,java.lang.Iterable)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:org.jboss.netty.handler.codec.http.HttpHeaders set(java.lang.String,java.lang.Object)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:org.jboss.netty.handler.codec.http.HttpHeaders set(java.lang.String,java.lang.Iterable)",
            "org.jboss.netty.util.DefaultObjectSizeEstimator:int estimateSize(java.lang.Class,java.util.Set)",
            "org.apache.commons.lang.builder.HashCodeBuilder:boolean isRegistered(java.lang.Object)",
            "org.apache.commons.lang3.builder.EqualsBuilder:boolean isRegistered(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang3.builder.HashCodeBuilder:boolean isRegistered(java.lang.Object)",
            "org.apache.commons.lang3.ClassUtils$2$1:void walkInterfaces(java.util.Set,java.lang.Class)",
            "org.apache.commons.lang3.event.EventUtils$EventBindingInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentHashMap$Segment:boolean keyEq(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.ConcurrentHashMap$Segment:java.lang.Object get(java.lang.Object,int)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$Segment:boolean containsKey(java.lang.Object,int)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$Segment:boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$Segment:java.lang.Object replace(java.lang.Object,int,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$Segment:java.lang.Object put(java.lang.Object,int,java.lang.Object,boolean)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$Segment:java.lang.Object remove(java.lang.Object,int,java.lang.Object,boolean)"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentHashMap$Segment:boolean containsValue(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.ConcurrentHashMap:boolean containsValue(java.lang.Object)"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentHashMap$Segment:boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.ConcurrentHashMap:boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentHashMap$Segment:java.lang.Object remove(java.lang.Object,int,java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.ConcurrentHashMap:java.lang.Object remove(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentHashMap:boolean remove(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentHashMap$SimpleEntry:boolean eq(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.ConcurrentHashMap$SimpleEntry:boolean equals(java.lang.Object)"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$EntrySet:boolean contains(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.MonitorLayout:boolean lambda$boxesOnTier$31(int,java.util.Set,org.onlab.stc.MonitorLayout$Box)",
            "org.onlab.graph.AbstractGraphPathSearch:void checkArguments(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex)",
            "org.onlab.graph.KShortestPathsSearch$InnerEdgeWeighter:double weight(org.onlab.graph.Edge)",
            "org.onlab.graph.MutableAdjacencyListsGraph:void addVertex(org.onlab.graph.Vertex)",
            "org.onlab.graph.MutableAdjacencyListsGraph:void removeVertex(org.onlab.graph.Vertex)",
            "org.onlab.graph.MutableAdjacencyListsGraph:void addEdge(org.onlab.graph.Edge)",
            "org.onlab.graph.MutableAdjacencyListsGraph:void removeEdge(org.onlab.graph.Edge)",
            "org.onlab.graph.TarjanGraphSearch$SccResult:java.util.Set findClusterEdges(java.util.Set)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:void validateHeaderValue0(java.lang.String)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:org.jboss.netty.handler.codec.http.HttpHeaders add(java.lang.String,java.lang.Object)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:org.jboss.netty.handler.codec.http.HttpHeaders add(java.lang.String,java.lang.Iterable)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:org.jboss.netty.handler.codec.http.HttpHeaders set(java.lang.String,java.lang.Object)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:org.jboss.netty.handler.codec.http.HttpHeaders set(java.lang.String,java.lang.Iterable)",
            "org.jboss.netty.util.DefaultObjectSizeEstimator:int estimateSize(java.lang.Class,java.util.Set)",
            "org.apache.commons.lang.builder.HashCodeBuilder:boolean isRegistered(java.lang.Object)",
            "org.apache.commons.lang3.builder.EqualsBuilder:boolean isRegistered(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang3.builder.HashCodeBuilder:boolean isRegistered(java.lang.Object)",
            "org.apache.commons.lang3.ClassUtils$2$1:void walkInterfaces(java.util.Set,java.lang.Class)",
            "org.apache.commons.lang3.event.EventUtils$EventBindingInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$Segment:boolean containsValue(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$Segment:boolean containsValue(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap:boolean containsValue(java.lang.Object)"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$Segment:boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap:boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$Segment:java.lang.Object remove(java.lang.Object,int,java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap:java.lang.Object remove(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap:boolean remove(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$SimpleEntry:boolean eq(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$SimpleEntry:boolean equals(java.lang.Object)"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$EntrySet:boolean contains(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.MonitorLayout:boolean lambda$boxesOnTier$31(int,java.util.Set,org.onlab.stc.MonitorLayout$Box)",
            "org.onlab.graph.AbstractGraphPathSearch:void checkArguments(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex)",
            "org.onlab.graph.KShortestPathsSearch$InnerEdgeWeighter:double weight(org.onlab.graph.Edge)",
            "org.onlab.graph.MutableAdjacencyListsGraph:void addVertex(org.onlab.graph.Vertex)",
            "org.onlab.graph.MutableAdjacencyListsGraph:void removeVertex(org.onlab.graph.Vertex)",
            "org.onlab.graph.MutableAdjacencyListsGraph:void addEdge(org.onlab.graph.Edge)",
            "org.onlab.graph.MutableAdjacencyListsGraph:void removeEdge(org.onlab.graph.Edge)",
            "org.onlab.graph.TarjanGraphSearch$SccResult:java.util.Set findClusterEdges(java.util.Set)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:void validateHeaderValue0(java.lang.String)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:org.jboss.netty.handler.codec.http.HttpHeaders add(java.lang.String,java.lang.Object)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:org.jboss.netty.handler.codec.http.HttpHeaders add(java.lang.String,java.lang.Iterable)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:org.jboss.netty.handler.codec.http.HttpHeaders set(java.lang.String,java.lang.Object)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:org.jboss.netty.handler.codec.http.HttpHeaders set(java.lang.String,java.lang.Iterable)",
            "org.jboss.netty.util.DefaultObjectSizeEstimator:int estimateSize(java.lang.Class,java.util.Set)",
            "org.apache.commons.lang.builder.HashCodeBuilder:boolean isRegistered(java.lang.Object)",
            "org.apache.commons.lang3.builder.EqualsBuilder:boolean isRegistered(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang3.builder.HashCodeBuilder:boolean isRegistered(java.lang.Object)",
            "org.apache.commons.lang3.ClassUtils$2$1:void walkInterfaces(java.util.Set,java.lang.Class)",
            "org.apache.commons.lang3.event.EventUtils$EventBindingInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$Segment:boolean containsValue(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap:boolean containsValue(java.lang.Object)"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$Segment:boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap:boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$Segment:java.lang.Object remove(java.lang.Object,int,java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$Segment:void removeStale()",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap:java.lang.Object remove(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap:boolean remove(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$SimpleEntry:boolean eq(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$SimpleEntry:boolean equals(java.lang.Object)"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$EntrySet:boolean contains(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.MonitorLayout:boolean lambda$boxesOnTier$31(int,java.util.Set,org.onlab.stc.MonitorLayout$Box)",
            "org.onlab.graph.AbstractGraphPathSearch:void checkArguments(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex)",
            "org.onlab.graph.KShortestPathsSearch$InnerEdgeWeighter:double weight(org.onlab.graph.Edge)",
            "org.onlab.graph.MutableAdjacencyListsGraph:void addVertex(org.onlab.graph.Vertex)",
            "org.onlab.graph.MutableAdjacencyListsGraph:void removeVertex(org.onlab.graph.Vertex)",
            "org.onlab.graph.MutableAdjacencyListsGraph:void addEdge(org.onlab.graph.Edge)",
            "org.onlab.graph.MutableAdjacencyListsGraph:void removeEdge(org.onlab.graph.Edge)",
            "org.onlab.graph.TarjanGraphSearch$SccResult:java.util.Set findClusterEdges(java.util.Set)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:void validateHeaderValue0(java.lang.String)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:org.jboss.netty.handler.codec.http.HttpHeaders add(java.lang.String,java.lang.Object)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:org.jboss.netty.handler.codec.http.HttpHeaders add(java.lang.String,java.lang.Iterable)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:org.jboss.netty.handler.codec.http.HttpHeaders set(java.lang.String,java.lang.Object)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:org.jboss.netty.handler.codec.http.HttpHeaders set(java.lang.String,java.lang.Iterable)",
            "org.jboss.netty.util.DefaultObjectSizeEstimator:int estimateSize(java.lang.Class,java.util.Set)",
            "org.apache.commons.lang.builder.HashCodeBuilder:boolean isRegistered(java.lang.Object)",
            "org.apache.commons.lang3.builder.EqualsBuilder:boolean isRegistered(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang3.builder.HashCodeBuilder:boolean isRegistered(java.lang.Object)",
            "org.apache.commons.lang3.ClassUtils$2$1:void walkInterfaces(java.util.Set,java.lang.Class)",
            "org.apache.commons.lang3.event.EventUtils$EventBindingInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:boolean keyEq(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:java.lang.Object get(java.lang.Object,int)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:boolean containsKey(java.lang.Object,int)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:java.lang.Object replace(java.lang.Object,int,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:java.lang.Object put(java.lang.Object,int,java.lang.Object,boolean)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:java.lang.Object remove(java.lang.Object,int,java.lang.Object,boolean)"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:boolean containsValue(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap:boolean containsValue(java.lang.Object)"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap:boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:java.lang.Object remove(java.lang.Object,int,java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:void removeStale()",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap:java.lang.Object remove(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap:boolean remove(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$SimpleEntry:boolean eq(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$SimpleEntry:boolean equals(java.lang.Object)"
        ]
    },
    "org.apache.commons.lang.ArrayUtils:int indexOf(java.lang.Object[],java.lang.Object,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.ArrayUtils:int indexOf(java.lang.Object[],java.lang.Object)"
        ]
    },
    "org.apache.commons.lang.ArrayUtils:int lastIndexOf(java.lang.Object[],java.lang.Object,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.ArrayUtils:int lastIndexOf(java.lang.Object[],java.lang.Object)"
        ]
    },
    "org.apache.commons.lang.builder.EqualsBuilder:org.apache.commons.lang.builder.EqualsBuilder append(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.ArrayUtils:boolean isEquals(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang.builder.EqualsBuilder:void reflectionAppend(java.lang.Object,java.lang.Object,java.lang.Class,org.apache.commons.lang.builder.EqualsBuilder,boolean,java.lang.String[])",
            "org.apache.commons.lang.builder.EqualsBuilder:org.apache.commons.lang.builder.EqualsBuilder append(java.lang.Object[],java.lang.Object[])"
        ]
    },
    "org.apache.commons.lang.IntHashMap:boolean contains(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.IntHashMap:boolean containsValue(java.lang.Object)"
        ]
    },
    "org.apache.commons.lang.mutable.MutableObject:boolean equals(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.ConcurrentHashMap$EntrySet:boolean contains(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$Segment:boolean keyEq(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$Segment:boolean containsValue(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$Segment:boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$Segment:java.lang.Object remove(java.lang.Object,int,java.lang.Object,boolean)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$SimpleEntry:boolean eq(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$EntrySet:boolean contains(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$Segment:boolean containsValue(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$Segment:boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$Segment:java.lang.Object remove(java.lang.Object,int,java.lang.Object,boolean)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$SimpleEntry:boolean eq(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$EntrySet:boolean contains(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$Segment:boolean containsValue(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$Segment:boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$Segment:java.lang.Object remove(java.lang.Object,int,java.lang.Object,boolean)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$SimpleEntry:boolean eq(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$EntrySet:boolean contains(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:boolean keyEq(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:boolean containsValue(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:java.lang.Object remove(java.lang.Object,int,java.lang.Object,boolean)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$SimpleEntry:boolean eq(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang.ArrayUtils:int indexOf(java.lang.Object[],java.lang.Object,int)",
            "org.apache.commons.lang.ArrayUtils:int lastIndexOf(java.lang.Object[],java.lang.Object,int)",
            "org.apache.commons.lang.builder.EqualsBuilder:org.apache.commons.lang.builder.EqualsBuilder append(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang.IntHashMap:boolean contains(java.lang.Object)",
            "org.apache.commons.lang.mutable.MutableObject:boolean equals(java.lang.Object)",
            "org.apache.commons.lang.ObjectUtils:boolean equals(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang.time.FastDateFormat$Pair:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.AnnotationUtils:boolean memberEquals(java.lang.Class,java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang3.ArrayUtils:int indexOf(java.lang.Object[],java.lang.Object,int)",
            "org.apache.commons.lang3.ArrayUtils:int lastIndexOf(java.lang.Object[],java.lang.Object,int)",
            "org.apache.commons.lang3.builder.DiffBuilder:void <init>(java.lang.Object,java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle)",
            "org.apache.commons.lang3.builder.EqualsBuilder:org.apache.commons.lang3.builder.EqualsBuilder append(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang3.mutable.MutableObject:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.ObjectUtils:boolean equals(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang3.Range:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "com.esotericsoftware.kryo.util.IdentityMap:boolean containsValue(java.lang.Object,boolean)",
            "com.esotericsoftware.kryo.util.IdentityMap:java.lang.Object findKey(java.lang.Object,boolean)",
            "com.esotericsoftware.kryo.util.IntMap:boolean containsValue(java.lang.Object,boolean)",
            "com.esotericsoftware.kryo.util.IntMap:int findKey(java.lang.Object,boolean,int)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object put_internal(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object getStash(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object getStash(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object remove(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object removeStash(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsValue(java.lang.Object,boolean)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsKey(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsKeyStash(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object findKey(java.lang.Object,boolean)"
        ]
    },
    "org.apache.commons.lang.ObjectUtils:boolean equals(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.ObjectUtils:boolean notEqual(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.commons.lang.time.FastDateFormat$Pair:boolean equals(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.ConcurrentHashMap$EntrySet:boolean contains(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$Segment:boolean keyEq(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$Segment:boolean containsValue(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$Segment:boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$Segment:java.lang.Object remove(java.lang.Object,int,java.lang.Object,boolean)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$SimpleEntry:boolean eq(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$EntrySet:boolean contains(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$Segment:boolean containsValue(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$Segment:boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$Segment:java.lang.Object remove(java.lang.Object,int,java.lang.Object,boolean)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$SimpleEntry:boolean eq(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$EntrySet:boolean contains(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$Segment:boolean containsValue(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$Segment:boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$Segment:java.lang.Object remove(java.lang.Object,int,java.lang.Object,boolean)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$SimpleEntry:boolean eq(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$EntrySet:boolean contains(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:boolean keyEq(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:boolean containsValue(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:java.lang.Object remove(java.lang.Object,int,java.lang.Object,boolean)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$SimpleEntry:boolean eq(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang.ArrayUtils:int indexOf(java.lang.Object[],java.lang.Object,int)",
            "org.apache.commons.lang.ArrayUtils:int lastIndexOf(java.lang.Object[],java.lang.Object,int)",
            "org.apache.commons.lang.builder.EqualsBuilder:org.apache.commons.lang.builder.EqualsBuilder append(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang.IntHashMap:boolean contains(java.lang.Object)",
            "org.apache.commons.lang.mutable.MutableObject:boolean equals(java.lang.Object)",
            "org.apache.commons.lang.ObjectUtils:boolean equals(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang.time.FastDateFormat$Pair:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.AnnotationUtils:boolean memberEquals(java.lang.Class,java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang3.ArrayUtils:int indexOf(java.lang.Object[],java.lang.Object,int)",
            "org.apache.commons.lang3.ArrayUtils:int lastIndexOf(java.lang.Object[],java.lang.Object,int)",
            "org.apache.commons.lang3.builder.DiffBuilder:void <init>(java.lang.Object,java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle)",
            "org.apache.commons.lang3.builder.EqualsBuilder:org.apache.commons.lang3.builder.EqualsBuilder append(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang3.mutable.MutableObject:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.ObjectUtils:boolean equals(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang3.Range:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "com.esotericsoftware.kryo.util.IdentityMap:boolean containsValue(java.lang.Object,boolean)",
            "com.esotericsoftware.kryo.util.IdentityMap:java.lang.Object findKey(java.lang.Object,boolean)",
            "com.esotericsoftware.kryo.util.IntMap:boolean containsValue(java.lang.Object,boolean)",
            "com.esotericsoftware.kryo.util.IntMap:int findKey(java.lang.Object,boolean,int)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object put_internal(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object getStash(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object getStash(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object remove(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object removeStash(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsValue(java.lang.Object,boolean)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsKey(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsKeyStash(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object findKey(java.lang.Object,boolean)"
        ]
    },
    "org.apache.commons.lang3.AnnotationUtils:boolean memberEquals(java.lang.Class,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.AnnotationUtils:boolean equals(java.lang.'annotation'.Annotation,java.lang.'annotation'.Annotation)"
        ]
    },
    "org.apache.commons.lang3.ArrayUtils:int indexOf(java.lang.Object[],java.lang.Object,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.ArrayUtils:int indexOf(java.lang.Object[],java.lang.Object)",
            "org.apache.commons.lang3.ArrayUtils:java.lang.Object[] removeElements(java.lang.Object[],java.lang.Object[])"
        ]
    },
    "org.apache.commons.lang3.ArrayUtils:int lastIndexOf(java.lang.Object[],java.lang.Object,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.ArrayUtils:int lastIndexOf(java.lang.Object[],java.lang.Object)"
        ]
    },
    "org.apache.commons.lang3.builder.DiffBuilder:void <init>(java.lang.Object,java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.builder.EqualsBuilder:org.apache.commons.lang3.builder.EqualsBuilder append(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.ArrayUtils:boolean isEquals(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang3.builder.EqualsBuilder:boolean reflectionEquals(java.lang.Object,java.lang.Object,boolean,java.lang.Class,java.lang.String[])",
            "org.apache.commons.lang3.builder.EqualsBuilder:void reflectionAppend(java.lang.Object,java.lang.Object,java.lang.Class,org.apache.commons.lang3.builder.EqualsBuilder,boolean,java.lang.String[])",
            "org.apache.commons.lang3.builder.EqualsBuilder:org.apache.commons.lang3.builder.EqualsBuilder append(java.lang.Object[],java.lang.Object[])"
        ]
    },
    "org.apache.commons.lang3.mutable.MutableObject:boolean equals(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.ConcurrentHashMap$EntrySet:boolean contains(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$Segment:boolean keyEq(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$Segment:boolean containsValue(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$Segment:boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$Segment:java.lang.Object remove(java.lang.Object,int,java.lang.Object,boolean)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$SimpleEntry:boolean eq(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$EntrySet:boolean contains(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$Segment:boolean containsValue(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$Segment:boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$Segment:java.lang.Object remove(java.lang.Object,int,java.lang.Object,boolean)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$SimpleEntry:boolean eq(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$EntrySet:boolean contains(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$Segment:boolean containsValue(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$Segment:boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$Segment:java.lang.Object remove(java.lang.Object,int,java.lang.Object,boolean)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$SimpleEntry:boolean eq(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$EntrySet:boolean contains(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:boolean keyEq(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:boolean containsValue(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:java.lang.Object remove(java.lang.Object,int,java.lang.Object,boolean)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$SimpleEntry:boolean eq(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang.ArrayUtils:int indexOf(java.lang.Object[],java.lang.Object,int)",
            "org.apache.commons.lang.ArrayUtils:int lastIndexOf(java.lang.Object[],java.lang.Object,int)",
            "org.apache.commons.lang.builder.EqualsBuilder:org.apache.commons.lang.builder.EqualsBuilder append(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang.IntHashMap:boolean contains(java.lang.Object)",
            "org.apache.commons.lang.mutable.MutableObject:boolean equals(java.lang.Object)",
            "org.apache.commons.lang.ObjectUtils:boolean equals(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang.time.FastDateFormat$Pair:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.AnnotationUtils:boolean memberEquals(java.lang.Class,java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang3.ArrayUtils:int indexOf(java.lang.Object[],java.lang.Object,int)",
            "org.apache.commons.lang3.ArrayUtils:int lastIndexOf(java.lang.Object[],java.lang.Object,int)",
            "org.apache.commons.lang3.builder.DiffBuilder:void <init>(java.lang.Object,java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle)",
            "org.apache.commons.lang3.builder.EqualsBuilder:org.apache.commons.lang3.builder.EqualsBuilder append(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang3.mutable.MutableObject:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.ObjectUtils:boolean equals(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang3.Range:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "com.esotericsoftware.kryo.util.IdentityMap:boolean containsValue(java.lang.Object,boolean)",
            "com.esotericsoftware.kryo.util.IdentityMap:java.lang.Object findKey(java.lang.Object,boolean)",
            "com.esotericsoftware.kryo.util.IntMap:boolean containsValue(java.lang.Object,boolean)",
            "com.esotericsoftware.kryo.util.IntMap:int findKey(java.lang.Object,boolean,int)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object put_internal(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object getStash(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object getStash(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object remove(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object removeStash(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsValue(java.lang.Object,boolean)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsKey(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsKeyStash(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object findKey(java.lang.Object,boolean)"
        ]
    },
    "org.apache.commons.lang3.ObjectUtils:boolean equals(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.concurrent.ConstantInitializer:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.ObjectUtils:boolean notEqual(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang3.reflect.TypeUtils:boolean equals(java.lang.reflect.Type,java.lang.reflect.Type)",
            "org.apache.commons.lang3.tuple.Pair:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.tuple.Triple:boolean equals(java.lang.Object)"
        ]
    },
    "org.apache.commons.lang3.Range:boolean equals(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.ConcurrentHashMap$EntrySet:boolean contains(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$Segment:boolean keyEq(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$Segment:boolean containsValue(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$Segment:boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$Segment:java.lang.Object remove(java.lang.Object,int,java.lang.Object,boolean)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$SimpleEntry:boolean eq(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$EntrySet:boolean contains(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$Segment:boolean containsValue(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$Segment:boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$Segment:java.lang.Object remove(java.lang.Object,int,java.lang.Object,boolean)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$SimpleEntry:boolean eq(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$EntrySet:boolean contains(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$Segment:boolean containsValue(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$Segment:boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$Segment:java.lang.Object remove(java.lang.Object,int,java.lang.Object,boolean)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$SimpleEntry:boolean eq(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$EntrySet:boolean contains(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:boolean keyEq(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:boolean containsValue(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:java.lang.Object remove(java.lang.Object,int,java.lang.Object,boolean)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$SimpleEntry:boolean eq(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang.ArrayUtils:int indexOf(java.lang.Object[],java.lang.Object,int)",
            "org.apache.commons.lang.ArrayUtils:int lastIndexOf(java.lang.Object[],java.lang.Object,int)",
            "org.apache.commons.lang.builder.EqualsBuilder:org.apache.commons.lang.builder.EqualsBuilder append(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang.IntHashMap:boolean contains(java.lang.Object)",
            "org.apache.commons.lang.mutable.MutableObject:boolean equals(java.lang.Object)",
            "org.apache.commons.lang.ObjectUtils:boolean equals(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang.time.FastDateFormat$Pair:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.AnnotationUtils:boolean memberEquals(java.lang.Class,java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang3.ArrayUtils:int indexOf(java.lang.Object[],java.lang.Object,int)",
            "org.apache.commons.lang3.ArrayUtils:int lastIndexOf(java.lang.Object[],java.lang.Object,int)",
            "org.apache.commons.lang3.builder.DiffBuilder:void <init>(java.lang.Object,java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle)",
            "org.apache.commons.lang3.builder.EqualsBuilder:org.apache.commons.lang3.builder.EqualsBuilder append(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang3.mutable.MutableObject:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.ObjectUtils:boolean equals(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang3.Range:org.apache.commons.lang3.Range intersectionWith(org.apache.commons.lang3.Range)",
            "org.apache.commons.lang3.Range:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "com.esotericsoftware.kryo.util.IdentityMap:boolean containsValue(java.lang.Object,boolean)",
            "com.esotericsoftware.kryo.util.IdentityMap:java.lang.Object findKey(java.lang.Object,boolean)",
            "com.esotericsoftware.kryo.util.IntMap:boolean containsValue(java.lang.Object,boolean)",
            "com.esotericsoftware.kryo.util.IntMap:int findKey(java.lang.Object,boolean,int)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object put_internal(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object getStash(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object getStash(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object remove(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object removeStash(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsValue(java.lang.Object,boolean)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsKey(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsKeyStash(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object findKey(java.lang.Object,boolean)"
        ]
    },
    "com.esotericsoftware.kryo.util.IdentityMap:boolean containsValue(java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.util.IdentityMap:java.lang.Object findKey(java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.util.IntMap:boolean containsValue(java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.util.IntMap:int findKey(java.lang.Object,boolean,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object getStash(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object getStash(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object removeStash(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object remove(java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.util.ObjectMap:boolean containsValue(java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.util.ObjectMap:boolean containsKeyStash(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsKey(java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object findKey(java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.time.DurationFormatUtils:java.lang.String formatDuration(long,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.time.DurationFormatUtils:java.lang.String formatDurationISO(long)",
            "org.apache.commons.lang.time.DurationFormatUtils:java.lang.String formatDuration(long,java.lang.String)"
        ]
    },
    "org.apache.commons.lang.time.DurationFormatUtils:java.lang.String formatPeriod(long,long,java.lang.String,boolean,java.util.TimeZone)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.time.DurationFormatUtils:java.lang.String formatPeriodISO(long,long)",
            "org.apache.commons.lang.time.DurationFormatUtils:java.lang.String formatPeriod(long,long,java.lang.String)"
        ]
    },
    "org.apache.commons.lang3.builder.ReflectionToStringBuilder:java.lang.String[] toNoNullStringArray(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.builder.CompareToBuilder:int reflectionCompare(java.lang.Object,java.lang.Object,java.util.Collection)",
            "org.apache.commons.lang3.builder.EqualsBuilder:boolean reflectionEquals(java.lang.Object,java.lang.Object,java.util.Collection)",
            "org.apache.commons.lang3.builder.HashCodeBuilder:int reflectionHashCode(java.lang.Object,java.util.Collection)",
            "org.apache.commons.lang3.builder.ReflectionToStringBuilder:java.lang.String toStringExclude(java.lang.Object,java.util.Collection)"
        ]
    },
    "org.apache.commons.lang3.builder.ReflectionToStringBuilder:org.apache.commons.lang3.builder.ReflectionToStringBuilder setExcludeFieldNames(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.builder.ReflectionToStringBuilder:java.lang.String toStringExclude(java.lang.Object,java.lang.String[])"
        ]
    },
    "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendWithSeparators(java.lang.Object[],java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendln(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendAll(java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.text.StrSubstitutor:java.lang.String replace(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Map)",
            "org.apache.commons.lang3.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Map,java.lang.String,java.lang.String)",
            "org.apache.commons.lang3.text.StrSubstitutor:java.lang.String replaceSystemProperties(java.lang.Object)"
        ]
    },
    "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadLeft(int,int,char)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadRight(int,int,char)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.text.StrSubstitutor:java.lang.String resolveVariable(java.lang.String,org.apache.commons.lang3.text.StrBuilder,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.text.StrSubstitutor:int substitute(org.apache.commons.lang3.text.StrBuilder,int,int,java.util.List)"
        ]
    },
    "org.apache.commons.lang3.time.DurationFormatUtils:java.lang.String formatDuration(long,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.time.DurationFormatUtils:java.lang.String formatDurationISO(long)",
            "org.apache.commons.lang3.time.DurationFormatUtils:java.lang.String formatDuration(long,java.lang.String)"
        ]
    },
    "org.apache.commons.lang3.time.DurationFormatUtils:java.lang.String formatPeriod(long,long,java.lang.String,boolean,java.util.TimeZone)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.time.DurationFormatUtils:java.lang.String formatPeriodISO(long,long)",
            "org.apache.commons.lang3.time.DurationFormatUtils:java.lang.String formatPeriod(long,long,java.lang.String)"
        ]
    },
    "org.apache.commons.lang.enum.Enum:void init(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.enum.Enum:void <init>(java.lang.String)"
        ]
    },
    "org.apache.commons.lang.enums.Enum:void init(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.enums.Enum:void <init>(java.lang.String)"
        ]
    },
    "org.apache.commons.lang3.reflect.TypeUtils:java.lang.reflect.Type[] unrollBounds(java.util.Map,java.lang.reflect.Type[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.reflect.TypeUtils:java.lang.reflect.Type unrollVariables(java.util.Map,java.lang.reflect.Type)"
        ]
    },
    "org.apache.commons.lang.builder.ToStringStyle:void appendSummary(java.lang.StringBuffer,java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.builder.ToStringStyle:void appendInternal(java.lang.StringBuffer,java.lang.String,java.lang.Object,boolean)"
        ]
    },
    "org.apache.commons.lang.builder.ToStringStyle:void appendClassName(java.lang.StringBuffer,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.builder.ToStringStyle:void appendStart(java.lang.StringBuffer,java.lang.Object)"
        ]
    },
    "org.apache.commons.lang.exception.ExceptionUtils:java.lang.String getRootCauseMessage(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.reflect.ConstructorUtils:java.lang.Object invokeConstructor(java.lang.Class,java.lang.Object[],java.lang.Class[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.reflect.ConstructorUtils:java.lang.Object invokeConstructor(java.lang.Class,java.lang.Object[])"
        ]
    },
    "org.apache.commons.lang.reflect.MemberUtils:float getTotalTransformationCost(java.lang.Class[],java.lang.Class[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.reflect.MemberUtils:int compareParameterTypes(java.lang.Class[],java.lang.Class[],java.lang.Class[])"
        ]
    },
    "org.apache.commons.lang.reflect.MethodUtils:java.lang.Object invokeMethod(java.lang.Object,java.lang.String,java.lang.Object[],java.lang.Class[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.reflect.MethodUtils:java.lang.Object invokeMethod(java.lang.Object,java.lang.String,java.lang.Object[])"
        ]
    },
    "org.apache.commons.lang.reflect.MethodUtils:java.lang.Object invokeStaticMethod(java.lang.Class,java.lang.String,java.lang.Object[],java.lang.Class[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.reflect.MethodUtils:java.lang.Object invokeStaticMethod(java.lang.Class,java.lang.String,java.lang.Object[])"
        ]
    },
    "org.apache.commons.lang.exception.NestableDelegate:void printStackTrace()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.exception.NestableError:void printStackTrace()",
            "org.apache.commons.lang.exception.NestableException:void printStackTrace()",
            "org.apache.commons.lang.exception.NestableRuntimeException:void printStackTrace()",
            "org.apache.commons.lang.NotImplementedException:void printStackTrace()"
        ]
    },
    "org.apache.commons.lang.exception.NestableError:void printStackTrace(java.io.PrintStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.exception.NestableException:void printStackTrace(java.io.PrintStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.exception.NestableRuntimeException:void printStackTrace(java.io.PrintStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.NotImplementedException:void printStackTrace(java.io.PrintStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.exception.ExceptionUtils:java.lang.String getFullStackTrace(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.exception.ExceptionUtils:java.lang.String getStackTrace(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.exception.ExceptionUtils:java.lang.String[] getStackFrames(java.lang.Throwable)",
            "org.apache.commons.lang.exception.ExceptionUtils:java.util.List getStackFrameList(java.lang.Throwable)"
        ]
    },
    "org.apache.commons.lang.exception.NestableDelegate:java.lang.String[] getStackFrames(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.exception.NestableDelegate:void printStackTrace(java.io.PrintWriter)"
        ]
    },
    "org.apache.commons.lang3.exception.ExceptionUtils:java.lang.String getStackTrace(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.exception.DefaultExceptionContext:java.lang.String getFormattedExceptionMessage(java.lang.String)",
            "org.apache.commons.lang3.exception.ExceptionUtils:java.lang.String[] getStackFrames(java.lang.Throwable)",
            "org.apache.commons.lang3.exception.ExceptionUtils:java.util.List getStackFrameList(java.lang.Throwable)"
        ]
    },
    "com.esotericsoftware.minlog.Log$Logger:void log(int,java.lang.String,java.lang.String,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.minlog.Log:void error(java.lang.String,java.lang.Throwable)",
            "com.esotericsoftware.minlog.Log:void error(java.lang.String,java.lang.String,java.lang.Throwable)",
            "com.esotericsoftware.minlog.Log:void error(java.lang.String)",
            "com.esotericsoftware.minlog.Log:void error(java.lang.String,java.lang.String)",
            "com.esotericsoftware.minlog.Log:void warn(java.lang.String,java.lang.Throwable)",
            "com.esotericsoftware.minlog.Log:void warn(java.lang.String,java.lang.String,java.lang.Throwable)",
            "com.esotericsoftware.minlog.Log:void warn(java.lang.String)",
            "com.esotericsoftware.minlog.Log:void warn(java.lang.String,java.lang.String)",
            "com.esotericsoftware.minlog.Log:void info(java.lang.String,java.lang.Throwable)",
            "com.esotericsoftware.minlog.Log:void info(java.lang.String,java.lang.String,java.lang.Throwable)",
            "com.esotericsoftware.minlog.Log:void info(java.lang.String)",
            "com.esotericsoftware.minlog.Log:void info(java.lang.String,java.lang.String)",
            "com.esotericsoftware.minlog.Log:void debug(java.lang.String,java.lang.Throwable)",
            "com.esotericsoftware.minlog.Log:void debug(java.lang.String,java.lang.String,java.lang.Throwable)",
            "com.esotericsoftware.minlog.Log:void debug(java.lang.String)",
            "com.esotericsoftware.minlog.Log:void debug(java.lang.String,java.lang.String)",
            "com.esotericsoftware.minlog.Log:void trace(java.lang.String,java.lang.Throwable)",
            "com.esotericsoftware.minlog.Log:void trace(java.lang.String,java.lang.String,java.lang.Throwable)",
            "com.esotericsoftware.minlog.Log:void trace(java.lang.String)",
            "com.esotericsoftware.minlog.Log:void trace(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.commons.lang.reflect.FieldUtils:java.lang.Object readStaticField(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.reflect.FieldUtils:java.lang.Object readField(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.reflect.FieldUtils:void writeStaticField(java.lang.Class,java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.reflect.FieldUtils:void writeField(java.lang.Object,java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.text.ExtendedMessageFormat:void <init>(java.lang.String,java.util.Locale)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.text.ExtendedMessageFormat:void <init>(java.lang.String)"
        ]
    },
    "org.apache.commons.lang.text.ExtendedMessageFormat:void <init>(java.lang.String,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.text.StrSubstitutor:int substitute(org.apache.commons.lang.text.StrBuilder,int,int,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.text.StrSubstitutor:boolean substitute(org.apache.commons.lang.text.StrBuilder,int,int)",
            "org.apache.commons.lang.text.StrSubstitutor:int substitute(org.apache.commons.lang.text.StrBuilder,int,int,java.util.List)"
        ]
    },
    "org.apache.commons.lang3.builder.ToStringStyle:void appendInternal(java.lang.StringBuffer,java.lang.String,java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.builder.ToStringStyle:void append(java.lang.StringBuffer,java.lang.String,java.lang.Object,java.lang.Boolean)",
            "org.apache.commons.lang3.builder.ToStringStyle:void appendDetail(java.lang.StringBuffer,java.lang.String,java.lang.Object[])",
            "org.apache.commons.lang3.builder.ToStringStyle:void reflectionAppendArrayDetail(java.lang.StringBuffer,java.lang.String,java.lang.Object)"
        ]
    },
    "org.apache.commons.lang3.builder.RecursiveToStringStyle:void appendDetail(java.lang.StringBuffer,java.lang.String,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.builder.ToStringStyle:void appendInternal(java.lang.StringBuffer,java.lang.String,java.lang.Object,boolean)"
        ]
    },
    "org.apache.commons.lang3.builder.ToStringStyle:void appendStart(java.lang.StringBuffer,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.builder.ToStringBuilder:void <init>(java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle,java.lang.StringBuffer)"
        ]
    },
    "org.apache.commons.lang3.exception.ExceptionUtils:java.lang.String getRootCauseMessage(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.reflect.ConstructorUtils:java.lang.Object invokeConstructor(java.lang.Class,java.lang.Object[],java.lang.Class[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.reflect.ConstructorUtils:java.lang.Object invokeConstructor(java.lang.Class,java.lang.Object[])"
        ]
    },
    "org.apache.commons.lang3.reflect.MemberUtils:float getTotalTransformationCost(java.lang.Class[],java.lang.Class[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.reflect.MemberUtils:int compareParameterTypes(java.lang.Class[],java.lang.Class[],java.lang.Class[])"
        ]
    },
    "org.apache.commons.lang3.event.EventUtils$EventBindingInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.event.EventUtils:void addEventListener(java.lang.Object,java.lang.Class,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.event.EventUtils:void bindEventsToMethod(java.lang.Object,java.lang.String,java.lang.Object,java.lang.Class,java.lang.String[])"
        ]
    },
    "org.apache.commons.lang3.reflect.MethodUtils:java.lang.Object invokeMethod(java.lang.Object,java.lang.String,java.lang.Object[],java.lang.Class[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.reflect.MethodUtils:java.lang.Object invokeMethod(java.lang.Object,java.lang.String,java.lang.Object[])"
        ]
    },
    "org.apache.commons.lang3.reflect.MethodUtils:java.lang.Object invokeStaticMethod(java.lang.Class,java.lang.String,java.lang.Object[],java.lang.Class[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.reflect.MethodUtils:java.lang.Object invokeStaticMethod(java.lang.Class,java.lang.String,java.lang.Object[])"
        ]
    },
    "org.apache.commons.lang3.reflect.TypeUtils:java.util.Map getTypeArguments(java.lang.reflect.Type,java.lang.Class,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.reflect.TypeUtils:boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.ParameterizedType,java.util.Map)",
            "org.apache.commons.lang3.reflect.TypeUtils:java.util.Map getTypeArguments(java.lang.reflect.Type,java.lang.Class)",
            "org.apache.commons.lang3.reflect.TypeUtils:java.util.Map getTypeArguments(java.lang.reflect.Type,java.lang.Class,java.util.Map)",
            "org.apache.commons.lang3.reflect.TypeUtils:java.util.Map getTypeArguments(java.lang.reflect.ParameterizedType,java.lang.Class,java.util.Map)",
            "org.apache.commons.lang3.reflect.TypeUtils:java.util.Map getTypeArguments(java.lang.Class,java.lang.Class,java.util.Map)"
        ]
    },
    "org.apache.commons.lang3.reflect.TypeUtils:java.util.Map getTypeArguments(java.lang.reflect.ParameterizedType,java.lang.Class,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.reflect.TypeUtils:boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.ParameterizedType,java.util.Map)",
            "org.apache.commons.lang3.reflect.TypeUtils:java.util.Map getTypeArguments(java.lang.reflect.ParameterizedType)",
            "org.apache.commons.lang3.reflect.TypeUtils:java.util.Map getTypeArguments(java.lang.reflect.Type,java.lang.Class,java.util.Map)",
            "org.apache.commons.lang3.reflect.TypeUtils:java.util.Map getTypeArguments(java.lang.reflect.ParameterizedType,java.lang.Class,java.util.Map)",
            "org.apache.commons.lang3.reflect.TypeUtils:java.util.Map determineTypeArguments(java.lang.Class,java.lang.reflect.ParameterizedType)"
        ]
    },
    "org.apache.commons.lang3.reflect.TypeUtils:java.util.Map determineTypeArguments(java.lang.Class,java.lang.reflect.ParameterizedType)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.reflect.TypeUtils:java.util.Map determineTypeArguments(java.lang.Class,java.lang.reflect.ParameterizedType)"
        ]
    },
    "org.apache.commons.lang3.reflect.TypeUtils:java.lang.reflect.Type getClosestParentType(java.lang.Class,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.reflect.TypeUtils:java.util.Map getTypeArguments(java.lang.reflect.ParameterizedType,java.lang.Class,java.util.Map)",
            "org.apache.commons.lang3.reflect.TypeUtils:java.util.Map getTypeArguments(java.lang.Class,java.lang.Class,java.util.Map)",
            "org.apache.commons.lang3.reflect.TypeUtils:java.util.Map determineTypeArguments(java.lang.Class,java.lang.reflect.ParameterizedType)"
        ]
    },
    "org.apache.commons.lang3.reflect.TypeUtils:java.lang.reflect.ParameterizedType parameterizeWithOwner(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.Type[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.reflect.TypeUtils:java.lang.reflect.Type unrollVariables(java.util.Map,java.lang.reflect.Type)",
            "org.apache.commons.lang3.reflect.TypeUtils:java.lang.reflect.ParameterizedType parameterize(java.lang.Class,java.lang.reflect.Type[])",
            "org.apache.commons.lang3.reflect.TypeUtils:java.lang.reflect.ParameterizedType parameterize(java.lang.Class,java.util.Map)",
            "org.apache.commons.lang3.reflect.TypeUtils:java.lang.reflect.ParameterizedType parameterizeWithOwner(java.lang.reflect.Type,java.lang.Class,java.util.Map)"
        ]
    },
    "org.apache.commons.lang3.concurrent.BackgroundInitializer:boolean start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.concurrent.MultiBackgroundInitializer:org.apache.commons.lang3.concurrent.MultiBackgroundInitializer$MultiBackgroundInitializerResults initialize()"
        ]
    },
    "org.apache.commons.lang3.concurrent.BackgroundInitializer$InitializationTask:java.lang.Object call()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.concurrent.CallableBackgroundInitializer:java.lang.Object initialize()"
        ]
    },
    "org.apache.commons.lang3.exception.ContextedException:org.apache.commons.lang3.exception.ContextedException setContextValue(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.exception.ContextedException:org.apache.commons.lang3.exception.ExceptionContext setContextValue(java.lang.String,java.lang.Object)"
        ]
    },
    "org.apache.commons.lang3.exception.ContextedRuntimeException:org.apache.commons.lang3.exception.ContextedRuntimeException setContextValue(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.exception.ContextedRuntimeException:org.apache.commons.lang3.exception.ExceptionContext setContextValue(java.lang.String,java.lang.Object)"
        ]
    },
    "org.apache.commons.lang3.exception.ContextedException:java.lang.String getMessage()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.RADIUS:org.onlab.packet.RADIUSAttribute addMessageAuthenticator(java.lang.String)",
            "org.onlab.packet.RADIUS:boolean checkMessageAuthenticator(java.lang.String)",
            "org.jboss.netty.channel.socket.http.HttpTunnelingServlet:void service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.jboss.netty.channel.socket.nio.NioClientSocketPipelineSink:void connect(org.jboss.netty.channel.socket.nio.NioClientSocketChannel,org.jboss.netty.channel.ChannelFuture,java.net.SocketAddress)",
            "org.jboss.netty.channel.socket.oio.OioClientSocketPipelineSink:void connect(org.jboss.netty.channel.socket.oio.OioClientSocketChannel,org.jboss.netty.channel.ChannelFuture,java.net.SocketAddress)",
            "org.jboss.netty.channel.socket.oio.OioWorker:void write(org.jboss.netty.channel.socket.oio.OioSocketChannel,org.jboss.netty.channel.ChannelFuture,java.lang.Object)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler:void exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ExceptionEvent)",
            "org.jboss.netty.handler.ssl.SslHandler:boolean ignoreException(java.lang.Throwable)",
            "org.apache.commons.lang.exception.ExceptionUtils:java.lang.String getMessage(java.lang.Throwable)",
            "org.apache.commons.lang.exception.NestableDelegate:java.lang.String getMessage(int)",
            "org.apache.commons.lang.exception.NestableDelegate:java.lang.String getMessage(java.lang.String)",
            "org.apache.commons.lang.exception.NestableDelegate:java.lang.String[] getMessages()",
            "org.apache.commons.lang3.exception.ExceptionUtils:java.lang.String getMessage(java.lang.Throwable)"
        ]
    },
    "org.apache.commons.lang3.exception.ContextedRuntimeException:java.lang.String getMessage()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.RADIUS:org.onlab.packet.RADIUSAttribute addMessageAuthenticator(java.lang.String)",
            "org.onlab.packet.RADIUS:boolean checkMessageAuthenticator(java.lang.String)",
            "org.jboss.netty.channel.socket.http.HttpTunnelingServlet:void service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.jboss.netty.channel.socket.nio.NioClientSocketPipelineSink:void connect(org.jboss.netty.channel.socket.nio.NioClientSocketChannel,org.jboss.netty.channel.ChannelFuture,java.net.SocketAddress)",
            "org.jboss.netty.channel.socket.oio.OioClientSocketPipelineSink:void connect(org.jboss.netty.channel.socket.oio.OioClientSocketChannel,org.jboss.netty.channel.ChannelFuture,java.net.SocketAddress)",
            "org.jboss.netty.channel.socket.oio.OioWorker:void write(org.jboss.netty.channel.socket.oio.OioSocketChannel,org.jboss.netty.channel.ChannelFuture,java.lang.Object)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler:void exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ExceptionEvent)",
            "org.jboss.netty.handler.ssl.SslHandler:boolean ignoreException(java.lang.Throwable)",
            "org.apache.commons.lang.exception.ExceptionUtils:java.lang.String getMessage(java.lang.Throwable)",
            "org.apache.commons.lang.exception.NestableDelegate:java.lang.String getMessage(int)",
            "org.apache.commons.lang.exception.NestableDelegate:java.lang.String getMessage(java.lang.String)",
            "org.apache.commons.lang.exception.NestableDelegate:java.lang.String[] getMessages()",
            "org.apache.commons.lang3.exception.ExceptionUtils:java.lang.String getMessage(java.lang.Throwable)"
        ]
    },
    "org.apache.commons.lang3.reflect.FieldUtils:java.lang.Object readStaticField(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.reflect.FieldUtils:java.lang.Object readField(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.reflect.FieldUtils:void writeStaticField(java.lang.Class,java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.reflect.FieldUtils:void writeField(java.lang.Object,java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.reflect.TypeUtils:boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.reflect.TypeUtils:boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.GenericArrayType,java.util.Map)",
            "org.apache.commons.lang3.reflect.TypeUtils:java.lang.reflect.Type getClosestParentType(java.lang.Class,java.lang.Class)"
        ]
    },
    "org.apache.commons.lang3.reflect.TypeUtils:boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.GenericArrayType,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.reflect.TypeUtils:boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type,java.util.Map)"
        ]
    },
    "org.apache.commons.lang3.reflect.TypeUtils:boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.WildcardType,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.reflect.TypeUtils:boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type,java.util.Map)"
        ]
    },
    "org.apache.commons.lang3.reflect.TypeUtils:boolean isInstance(java.lang.Object,java.lang.reflect.Type)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.reflect.TypeUtils:java.lang.reflect.Type[] normalizeUpperBounds(java.lang.reflect.Type[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.reflect.TypeUtils:java.lang.reflect.Type[] getImplicitBounds(java.lang.reflect.TypeVariable)",
            "org.apache.commons.lang3.reflect.TypeUtils:java.lang.reflect.Type[] getImplicitUpperBounds(java.lang.reflect.WildcardType)"
        ]
    },
    "org.apache.commons.lang3.text.ExtendedMessageFormat:void <init>(java.lang.String,java.util.Locale)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.text.ExtendedMessageFormat:void <init>(java.lang.String)"
        ]
    },
    "org.apache.commons.lang3.text.ExtendedMessageFormat:void <init>(java.lang.String,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.text.StrSubstitutor:int substitute(org.apache.commons.lang3.text.StrBuilder,int,int,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.text.StrSubstitutor:boolean substitute(org.apache.commons.lang3.text.StrBuilder,int,int)",
            "org.apache.commons.lang3.text.StrSubstitutor:int substitute(org.apache.commons.lang3.text.StrBuilder,int,int,java.util.List)"
        ]
    },
    "org.apache.commons.lang3.time.FastDateParser:void <init>(java.lang.String,java.util.TimeZone,java.util.Locale,java.util.Date)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.time.FastDateFormat:void <init>(java.lang.String,java.util.TimeZone,java.util.Locale,java.util.Date)",
            "org.apache.commons.lang3.time.FastDateParser:void <init>(java.lang.String,java.util.TimeZone,java.util.Locale)"
        ]
    },
    "org.apache.commons.lang3.time.FastDateParser:void readObject(java.io.ObjectInputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.time.FastDateFormat:java.util.Date parse(java.lang.String,java.text.ParsePosition)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.time.FastDateParser:java.util.Date parse(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.time.FastDateFormat:java.util.Date parse(java.lang.String)",
            "org.apache.commons.lang3.time.FastDateParser:java.lang.Object parseObject(java.lang.String)"
        ]
    },
    "org.apache.commons.lang3.time.FastDateParser:java.lang.Object parseObject(java.lang.String,java.text.ParsePosition)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.time.FastDateFormat:java.lang.Object parseObject(java.lang.String,java.text.ParsePosition)"
        ]
    },
    "org.apache.commons.lang3.time.FastDateParser:org.apache.commons.lang3.time.FastDateParser$Strategy getStrategy(java.lang.String,java.util.Calendar)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.time.FastDateParser:void init(java.util.Calendar)"
        ]
    },
    "com.eclipsesource.json.JsonValue:void writeTo(java.io.Writer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.eclipsesource.json.JsonValue:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.IGMP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.pim.PIMHelloOption:java.lang.String toString()",
            "org.onlab.util.Tools:java.lang.String get(java.util.Dictionary,java.lang.String)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:java.lang.String toString(java.lang.Object)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdyHeaders:java.lang.String toString(java.lang.Object)",
            "org.jboss.netty.util.internal.StringUtil:java.lang.String stripControlCharacters(java.lang.Object)",
            "org.apache.commons.lang.builder.ReflectionToStringBuilder:java.lang.String[] toNoNullStringArray(java.lang.Object[])",
            "org.apache.commons.lang.mutable.MutableObject:java.lang.String toString()",
            "org.apache.commons.lang.ObjectUtils:java.lang.String toString(java.lang.Object)",
            "org.apache.commons.lang.ObjectUtils:java.lang.String toString(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.lang.Object[],char,int,int)",
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.lang.Object[],java.lang.String,int,int)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder append(java.lang.Object)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendFixedWidthPadLeft(java.lang.Object,int,char)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendFixedWidthPadRight(java.lang.Object,int,char)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder insert(int,java.lang.Object)",
            "org.apache.commons.lang.text.StrLookup$MapStrLookup:java.lang.String lookup(java.lang.String)",
            "org.apache.commons.lang.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Properties)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:java.lang.String toString()",
            "org.apache.commons.lang.time.DurationFormatUtils:java.lang.String format(org.apache.commons.lang.time.DurationFormatUtils$Token[],int,int,int,int,int,int,int,boolean)",
            "org.apache.commons.lang3.builder.ReflectionToStringBuilder:java.lang.String[] toNoNullStringArray(java.lang.Object[])",
            "org.apache.commons.lang3.exception.DefaultExceptionContext:java.lang.String getFormattedExceptionMessage(java.lang.String)",
            "org.apache.commons.lang3.mutable.MutableObject:java.lang.String toString()",
            "org.apache.commons.lang3.ObjectUtils:java.lang.String toString(java.lang.Object)",
            "org.apache.commons.lang3.ObjectUtils:java.lang.String toString(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder append(java.lang.Object)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadLeft(java.lang.Object,int,char)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadRight(java.lang.Object,int,char)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder insert(int,java.lang.Object)",
            "org.apache.commons.lang3.text.StrLookup$MapStrLookup:java.lang.String lookup(java.lang.String)",
            "org.apache.commons.lang3.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Properties)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:java.lang.String toString()",
            "org.apache.commons.lang3.time.DurationFormatUtils:java.lang.String format(org.apache.commons.lang3.time.DurationFormatUtils$Token[],long,long,long,long,long,long,long,boolean)",
            "com.eclipsesource.json.JsonValue:com.eclipsesource.json.JsonObject asObject()",
            "com.eclipsesource.json.JsonValue:com.eclipsesource.json.JsonArray asArray()",
            "com.eclipsesource.json.JsonValue:int asInt()",
            "com.eclipsesource.json.JsonValue:long asLong()",
            "com.eclipsesource.json.JsonValue:float asFloat()",
            "com.eclipsesource.json.JsonValue:double asDouble()",
            "com.eclipsesource.json.JsonValue:java.lang.String asString()",
            "com.eclipsesource.json.JsonValue:boolean asBoolean()"
        ]
    },
    "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.ClosureSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.CollectionSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.Collection)",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ObjectArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object[])",
            "com.esotericsoftware.kryo.serializers.MapSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.Map)",
            "com.esotericsoftware.kryo.serializers.ObjectField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.BeanSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.CollectionSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.Collection)",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ObjectArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object[])",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$StringArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.String[])",
            "com.esotericsoftware.kryo.serializers.MapSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.Map)",
            "com.esotericsoftware.kryo.serializers.ObjectField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.Kryo:void writeClassAndObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.util.KryoNamespace:byte[] serialize(java.lang.Object,int)",
            "org.onlab.util.KryoNamespace:void serialize(java.lang.Object,java.nio.ByteBuffer)",
            "org.onlab.util.KryoNamespace:void serialize(java.lang.Object,java.io.OutputStream,int)",
            "com.esotericsoftware.kryo.io.KryoObjectOutput:void writeObject(java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.BeanSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.CollectionSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.Collection)",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ObjectArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object[])",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$CollectionsSingletonListSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.List)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$CollectionsSingletonMapSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.Map)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$CollectionsSingletonSetSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.Set)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$TreeMapSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.Map)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$TreeSetSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.Collection)",
            "com.esotericsoftware.kryo.serializers.MapSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.Map)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.BlowfishSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeClassAndObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.EnumSet)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DeflateSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeClassAndObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.EnumSet)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$TreeSetSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeClassAndObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.EnumSet)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.FieldSerializer:void <init>(com.esotericsoftware.kryo.Kryo,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.CompatibleFieldSerializer:void <init>(com.esotericsoftware.kryo.Kryo,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.TaggedFieldSerializer:void <init>(com.esotericsoftware.kryo.Kryo,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.FieldSerializer:void <init>(com.esotericsoftware.kryo.Kryo,java.lang.Class,java.lang.Class[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.serializers.FieldSerializer:void setFieldsCanBeNull(boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.serializers.FieldSerializer:void setFieldsAsAccessible(boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.serializers.FieldSerializer:void setIgnoreSyntheticFields(boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.serializers.FieldSerializer:void setFixedFieldTypes(boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.serializers.FieldSerializer:void setUseAsm(boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.serializers.FieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeClassAndObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.EnumSet)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.FieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readClassAndObject(com.esotericsoftware.kryo.io.Input)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:java.util.EnumSet read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ObjectArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ObjectArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.ObjectField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.CompatibleFieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.TaggedFieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$TreeMapSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeClassAndObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.EnumSet)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ObjectArraySerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readClassAndObject(com.esotericsoftware.kryo.io.Input)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:java.util.EnumSet read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.MapSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readClassAndObject(com.esotericsoftware.kryo.io.Input)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:java.util.EnumSet read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.TaggedFieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readClassAndObject(com.esotericsoftware.kryo.io.Input)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:java.util.EnumSet read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$StringArraySerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readClassAndObject(com.esotericsoftware.kryo.io.Input)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:java.util.EnumSet read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$CollectionsSingletonListSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readClassAndObject(com.esotericsoftware.kryo.io.Input)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:java.util.EnumSet read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$CollectionsSingletonMapSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readClassAndObject(com.esotericsoftware.kryo.io.Input)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:java.util.EnumSet read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$CollectionsSingletonSetSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readClassAndObject(com.esotericsoftware.kryo.io.Input)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:java.util.EnumSet read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$TreeSetSerializer:java.util.Collection create(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.CollectionSerializer:java.util.Collection read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.FieldSerializer:java.lang.Object copy(com.esotericsoftware.kryo.Kryo,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:java.lang.Object copy(java.lang.Object)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object copy(java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object copyShallow(java.lang.Object)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object copyShallow(java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:java.lang.Object copy(com.esotericsoftware.kryo.Kryo,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:java.lang.Object copy(com.esotericsoftware.kryo.Kryo,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ObjectArraySerializer:java.lang.Object copy(com.esotericsoftware.kryo.Kryo,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:java.lang.Object copy(java.lang.Object)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object copy(java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object copyShallow(java.lang.Object)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object copyShallow(java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:java.lang.Object copy(com.esotericsoftware.kryo.Kryo,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:java.lang.Object copy(com.esotericsoftware.kryo.Kryo,java.lang.Object)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioClientBossPool:void releaseExternalResources()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.NioClientSocketChannelFactory:void releasePools()",
            "org.jboss.netty.channel.socket.nio.NioDatagramChannelFactory:void releasePool()",
            "org.jboss.netty.channel.socket.nio.NioServerSocketChannelFactory:void releasePools()",
            "org.jboss.netty.channel.socket.nio.ShareableWorkerPool:void destroy()",
            "org.jboss.netty.handler.execution.ChainedExecutor:void releaseExternal(java.util.concurrent.Executor)",
            "org.jboss.netty.handler.execution.ExecutionHandler:void releaseExternalResources()",
            "org.jboss.netty.util.ExternalResourceUtil:void release(org.jboss.netty.util.ExternalResourceReleasable[])"
        ]
    },
    "org.jboss.netty.util.internal.ExecutorUtil:void terminate(java.util.concurrent.Executor[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor:boolean remove(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor:void beforeExecute(java.lang.Thread,java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor$ChildExecutor:void run()"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioDatagramWorkerPool:org.jboss.netty.channel.socket.nio.NioDatagramWorker createWorker(java.util.concurrent.Executor)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.NioDatagramWorkerPool:org.jboss.netty.channel.socket.nio.AbstractNioWorker createWorker(java.util.concurrent.Executor)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioWorkerPool:org.jboss.netty.channel.socket.nio.AbstractNioWorker createWorker(java.util.concurrent.Executor)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.AbstractNioWorkerPool:org.jboss.netty.channel.socket.nio.AbstractNioWorker newWorker(java.util.concurrent.Executor)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.AbstractNioBossPool:void init()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.AbstractNioBossPool:void <init>(java.util.concurrent.Executor,int,boolean)",
            "org.jboss.netty.channel.socket.nio.NioClientBossPool:void <init>(java.util.concurrent.Executor,int,org.jboss.netty.util.Timer,org.jboss.netty.util.ThreadNameDeterminer)",
            "org.jboss.netty.channel.socket.nio.NioServerBossPool:void <init>(java.util.concurrent.Executor,int,org.jboss.netty.util.ThreadNameDeterminer)"
        ]
    },
    "org.apache.commons.lang.CharSetUtils:java.lang.String keep(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.CharSetUtils:java.lang.String delete(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.StringUtils:java.lang.String deleteSpaces(java.lang.String)"
        ]
    },
    "org.onlab.stc.Coordinator$Delegate:void onCompletion(org.onlab.stc.Step,org.onlab.stc.Coordinator$Status)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Coordinator$Delegate:void lambda$onCompletion$15(org.onlab.stc.Step,org.onlab.stc.Coordinator$Status,org.onlab.stc.StepProcessListener)",
            "org.onlab.stc.Coordinator:void skipStep(org.onlab.stc.Step)",
            "org.onlab.stc.Coordinator:void completeParentIfNeeded(org.onlab.stc.Group)",
            "org.onlab.stc.StepProcessor:void run()"
        ]
    },
    "org.onlab.stc.MonitorLayout:void lambda$follow$26(int,int,org.onlab.stc.Group,org.onlab.stc.Dependency)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.stc.MonitorLayout:void lambda$computeLayout$24(int,org.onlab.stc.Group,org.onlab.stc.Step)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.stc.Main:void processRun()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Main:void processCommand()"
        ]
    },
    "org.onlab.stc.Main:void processRunRange()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Main:void processCommand()"
        ]
    },
    "org.onlab.graph.Heap:void bubbleUp()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.graph.Heap:org.onlab.graph.Heap insert(java.lang.Object)"
        ]
    },
    "org.onlab.graph.Heap:void heapify(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.graph.Heap:void heapify()",
            "org.onlab.graph.Heap:void heapify(int)"
        ]
    },
    "org.apache.commons.lang.builder.CompareToBuilder:org.apache.commons.lang.builder.CompareToBuilder append(java.lang.Object,java.lang.Object,java.util.Comparator)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.builder.CompareToBuilder:org.apache.commons.lang.builder.CompareToBuilder append(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang.builder.CompareToBuilder:org.apache.commons.lang.builder.CompareToBuilder append(java.lang.Object[],java.lang.Object[],java.util.Comparator)"
        ]
    },
    "org.apache.commons.lang3.builder.CompareToBuilder:org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object,java.util.Comparator)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.builder.CompareToBuilder:org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang3.builder.CompareToBuilder:org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object[],java.lang.Object[],java.util.Comparator)"
        ]
    },
    "org.apache.commons.lang3.Range:void <init>(java.lang.Object,java.lang.Object,java.util.Comparator)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.Range:org.apache.commons.lang3.Range between(java.lang.Object,java.lang.Object,java.util.Comparator)"
        ]
    },
    "org.apache.commons.lang3.Range:boolean contains(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.Range:boolean containsRange(org.apache.commons.lang3.Range)",
            "org.apache.commons.lang3.Range:boolean isOverlappedBy(org.apache.commons.lang3.Range)"
        ]
    },
    "org.apache.commons.lang3.Range:boolean isAfter(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.Range:int elementCompareTo(java.lang.Object)",
            "org.apache.commons.lang3.Range:boolean isAfterRange(org.apache.commons.lang3.Range)"
        ]
    },
    "org.apache.commons.lang3.Range:boolean isStartedBy(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.Range:boolean isEndedBy(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.Range:boolean isBefore(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.Range:int elementCompareTo(java.lang.Object)",
            "org.apache.commons.lang3.Range:boolean isBeforeRange(org.apache.commons.lang3.Range)"
        ]
    },
    "org.apache.commons.lang3.Range:org.apache.commons.lang3.Range intersectionWith(org.apache.commons.lang3.Range)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.stc.Main$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Main$1:void <clinit>()",
            "org.onlab.stc.Main:void processCommand()"
        ]
    },
    "org.onlab.graph.SrlgGraphSearch$Subset:org.onlab.graph.GAOrganism crossWith(org.onlab.graph.GAOrganism)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.graph.GAPopulation:void step()"
        ]
    },
    "org.onlab.graph.SrlgGraphSearch$Subset:org.onlab.graph.GAOrganism random()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.graph.GAPopulation:void step()",
            "org.onlab.graph.GAPopulation:java.util.List runGA(int,int,int,org.onlab.graph.GAOrganism)"
        ]
    },
    "org.onlab.packet.EthType$EtherType:org.onlab.packet.EthType$EtherType lookup(short)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.packet.EthType:org.onlab.packet.EthType$EtherType lookup(short)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.EthType:java.lang.String toString()"
        ]
    },
    "org.onlab.packet.Ethernet:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.ARP:org.onlab.packet.Ethernet buildArpReply(org.onlab.packet.Ip4Address,org.onlab.packet.MacAddress,org.onlab.packet.Ethernet)",
            "org.onlab.packet.Ethernet:boolean isBroadcast()",
            "org.onlab.packet.Ethernet:byte[] serialize()",
            "org.onlab.packet.Ethernet:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.Ethernet:java.lang.String toString()",
            "org.onlab.packet.Ethernet:org.onlab.packet.Ethernet lambda$deserializer$10(byte[],int,int)",
            "org.onlab.packet.Ethernet:void lambda$toString$9(java.lang.StringBuffer,org.onlab.packet.ndp.NeighborDiscoveryOptions$Option)",
            "org.onlab.packet.Ethernet:void lambda$toString$8(java.lang.StringBuffer,org.onlab.packet.ndp.NeighborDiscoveryOptions$Option)",
            "org.onlab.packet.Ethernet:void lambda$toString$7(java.lang.StringBuffer,org.onlab.packet.ndp.NeighborDiscoveryOptions$Option)",
            "org.onlab.packet.Ethernet:void lambda$toString$6(java.lang.StringBuffer,org.onlab.packet.ndp.NeighborDiscoveryOptions$Option)",
            "org.onlab.packet.Ethernet:void lambda$toString$5(java.lang.StringBuffer,org.onlab.packet.ndp.NeighborDiscoveryOptions$Option)",
            "org.onlab.packet.Ethernet:void <clinit>()",
            "org.onlab.packet.LLDP:void <init>()",
            "org.onlab.packet.ONOSLLDP:org.onlab.packet.ONOSLLDP parseONOSLLDP(org.onlab.packet.Ethernet)",
            "org.onlab.packet.Ethernet$lambda_deserializer_10__66:org.onlab.packet.IPacket deserialize(byte[],int,int)"
        ]
    },
    "org.onlab.packet.IpAddress$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.IpAddress$1:void <clinit>()",
            "org.onlab.packet.IpAddress:void <init>(org.onlab.packet.IpAddress$Version,byte[])",
            "org.onlab.packet.IpAddress:int byteLength(org.onlab.packet.IpAddress$Version)",
            "org.onlab.packet.IpAddress:java.lang.String toString()",
            "org.onlab.packet.IpAddress:java.lang.String addressName(org.onlab.packet.IpAddress$Version)"
        ]
    },
    "org.onlab.packet.IpPrefix$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.IpPrefix$1:void <clinit>()",
            "org.onlab.packet.IpPrefix:void checkPrefixLength(org.onlab.packet.IpAddress$Version,int)"
        ]
    },
    "org.jboss.netty.buffer.ChannelBuffers:org.jboss.netty.buffer.ChannelBuffer copiedBuffer(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker00:org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel)"
        ]
    },
    "org.jboss.netty.buffer.ChannelBuffers:org.jboss.netty.buffer.ChannelBuffer copiedBuffer(java.nio.ByteOrder,byte[][])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.buffer.ChannelBuffers:org.jboss.netty.buffer.ChannelBuffer copiedBuffer(byte[][])"
        ]
    },
    "org.jboss.netty.buffer.CompositeChannelBuffer:org.jboss.netty.buffer.ChannelBuffer duplicate()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.buffer.CompositeChannelBuffer:java.util.List decompose(int,int)",
            "org.jboss.netty.channel.group.DefaultChannelGroup:org.jboss.netty.channel.group.ChannelGroupFuture write(java.lang.Object)",
            "org.jboss.netty.channel.group.DefaultChannelGroup:org.jboss.netty.channel.group.ChannelGroupFuture write(java.lang.Object,java.net.SocketAddress)",
            "org.jboss.netty.handler.codec.http.HttpChunkAggregator:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.codec.http.HttpMessageEncoder:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)"
        ]
    },
    "org.jboss.netty.channel.DownstreamChannelStateEvent$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.DownstreamChannelStateEvent$1:void <clinit>()",
            "org.jboss.netty.channel.DownstreamChannelStateEvent:java.lang.String toString()"
        ]
    },
    "org.jboss.netty.channel.SimpleChannelDownstreamHandler$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelDownstreamHandler$1:void <clinit>()",
            "org.jboss.netty.channel.SimpleChannelDownstreamHandler:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.SimpleChannelHandler$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelHandler$1:void <clinit>()",
            "org.jboss.netty.channel.SimpleChannelHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.SimpleChannelHandler:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.SimpleChannelUpstreamHandler$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelUpstreamHandler$1:void <clinit>()",
            "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.UpstreamChannelStateEvent$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.UpstreamChannelStateEvent$1:void <clinit>()",
            "org.jboss.netty.channel.UpstreamChannelStateEvent:java.lang.String toString()"
        ]
    },
    "org.jboss.netty.channel.local.LocalClientChannelSink$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.local.LocalClientChannelSink$1:void <clinit>()",
            "org.jboss.netty.channel.local.LocalClientChannelSink:void eventSunk(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.local.LocalServerChannelSink$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.local.LocalServerChannelSink$1:void <clinit>()",
            "org.jboss.netty.channel.local.LocalServerChannelSink:void handleServerChannel(org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.local.LocalServerChannelSink:void handleAcceptedChannel(org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketPipelineSink$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketPipelineSink$1:void <clinit>()",
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketPipelineSink:void eventSunk(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioClientSocketPipelineSink$2:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.NioClientSocketPipelineSink$2:void <clinit>()",
            "org.jboss.netty.channel.socket.nio.NioClientSocketPipelineSink:void eventSunk(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioDatagramPipelineSink$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.NioDatagramPipelineSink$1:void <clinit>()",
            "org.jboss.netty.channel.socket.nio.NioDatagramPipelineSink:void eventSunk(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioServerSocketPipelineSink$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.NioServerSocketPipelineSink$1:void <clinit>()",
            "org.jboss.netty.channel.socket.nio.NioServerSocketPipelineSink:void handleServerSocket(org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.socket.nio.NioServerSocketPipelineSink:void handleAcceptedSocket(org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.socket.oio.OioClientSocketPipelineSink$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.oio.OioClientSocketPipelineSink$1:void <clinit>()",
            "org.jboss.netty.channel.socket.oio.OioClientSocketPipelineSink:void eventSunk(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.socket.oio.OioDatagramPipelineSink$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.oio.OioDatagramPipelineSink$1:void <clinit>()",
            "org.jboss.netty.channel.socket.oio.OioDatagramPipelineSink:void eventSunk(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.socket.oio.OioServerSocketPipelineSink$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.oio.OioServerSocketPipelineSink$1:void <clinit>()",
            "org.jboss.netty.channel.socket.oio.OioServerSocketPipelineSink:void handleServerSocket(org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.channel.socket.oio.OioServerSocketPipelineSink:void handleAcceptedSocket(org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.compression.JdkZlibEncoder$2:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.compression.JdkZlibEncoder$2:void <clinit>()",
            "org.jboss.netty.handler.codec.compression.JdkZlibEncoder:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.compression.ZlibEncoder$2:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.compression.ZlibEncoder$2:void <clinit>()",
            "org.jboss.netty.handler.codec.compression.ZlibEncoder:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.SpdyFrameEncoder$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.spdy.SpdyFrameEncoder$1:void <clinit>()",
            "org.jboss.netty.handler.codec.spdy.SpdyFrameEncoder:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.SpdySessionHandler$5:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.spdy.SpdySessionHandler$5:void <clinit>()",
            "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.ipfilter.IpFilteringHandlerImpl$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.ipfilter.IpFilteringHandlerImpl$1:void <clinit>()",
            "org.jboss.netty.handler.ipfilter.IpFilteringHandlerImpl:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.ssl.SslHandler$8:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.ssl.SslHandler$8:void <clinit>()",
            "org.jboss.netty.handler.ssl.SslHandler:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.ssl.SslHandler:void wrap(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel)",
            "org.jboss.netty.handler.ssl.SslHandler:org.jboss.netty.channel.ChannelFuture wrapNonAppData(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel)",
            "org.jboss.netty.handler.ssl.SslHandler:org.jboss.netty.buffer.ChannelBuffer unwrap(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,int,int)"
        ]
    },
    "org.jboss.netty.handler.stream.ChunkedWriteHandler$3:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.stream.ChunkedWriteHandler$3:void <clinit>()",
            "org.jboss.netty.handler.stream.ChunkedWriteHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioDatagramChannel$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.NioDatagramChannel$1:void <clinit>()",
            "org.jboss.netty.channel.socket.nio.NioDatagramChannel:java.nio.channels.DatagramChannel openNonBlockingChannel(org.jboss.netty.channel.socket.InternetProtocolFamily)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.ProtocolFamilyConverter$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.ProtocolFamilyConverter$1:void <clinit>()",
            "org.jboss.netty.channel.socket.nio.ProtocolFamilyConverter:java.net.ProtocolFamily convert(org.jboss.netty.channel.socket.InternetProtocolFamily)"
        ]
    },
    "org.jboss.netty.handler.codec.compression.ZlibUtil$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.compression.ZlibUtil$1:void <clinit>()",
            "org.jboss.netty.handler.codec.compression.ZlibUtil:java.lang.Enum convertWrapperType(org.jboss.netty.handler.codec.compression.ZlibWrapper)"
        ]
    },
    "org.jboss.netty.handler.codec.http.HttpContentCompressor$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.HttpContentCompressor$1:void <clinit>()",
            "org.jboss.netty.handler.codec.http.HttpContentCompressor:java.lang.String getTargetContentEncoding(java.lang.String)"
        ]
    },
    "org.jboss.netty.handler.codec.http.HttpMessageDecoder$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.HttpMessageDecoder$1:void <clinit>()",
            "org.jboss.netty.handler.codec.http.HttpMessageDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.http.HttpMessageDecoder$State)"
        ]
    },
    "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder$1:void <clinit>()",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData decodeMultipart(org.jboss.netty.handler.codec.http.multipart.HttpPostRequestDecoder$MultiPartStatus)"
        ]
    },
    "org.jboss.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder$1:void <clinit>()",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributesStandard()",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributes()"
        ]
    },
    "org.jboss.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder$1:void <clinit>()",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder$State)"
        ]
    },
    "org.jboss.netty.handler.codec.serialization.CompatibleObjectDecoder$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.serialization.CompatibleObjectDecoder$1:void <clinit>()",
            "org.jboss.netty.handler.codec.serialization.CompatibleObjectDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.serialization.CompatibleObjectDecoderState)"
        ]
    },
    "org.jboss.netty.handler.codec.socks.SocksAuthRequestDecoder$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.socks.SocksAuthRequestDecoder$1:void <clinit>()",
            "org.jboss.netty.handler.codec.socks.SocksAuthRequestDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.socks.SocksAuthRequestDecoder$State)"
        ]
    },
    "org.jboss.netty.handler.codec.socks.SocksAuthResponseDecoder$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.socks.SocksAuthResponseDecoder$1:void <clinit>()",
            "org.jboss.netty.handler.codec.socks.SocksAuthResponseDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.socks.SocksAuthResponseDecoder$State)"
        ]
    },
    "org.jboss.netty.handler.codec.socks.SocksCmdRequestDecoder$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.socks.SocksCmdRequestDecoder$1:void <clinit>()",
            "org.jboss.netty.handler.codec.socks.SocksCmdRequestDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.socks.SocksCmdRequestDecoder$State)"
        ]
    },
    "org.jboss.netty.handler.codec.socks.SocksCmdResponseDecoder$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.socks.SocksCmdResponseDecoder$1:void <clinit>()",
            "org.jboss.netty.handler.codec.socks.SocksCmdResponseDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.socks.SocksCmdResponseDecoder$State)"
        ]
    },
    "org.jboss.netty.handler.codec.socks.SocksInitRequestDecoder$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.socks.SocksInitRequestDecoder$1:void <clinit>()",
            "org.jboss.netty.handler.codec.socks.SocksInitRequestDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.socks.SocksInitRequestDecoder$State)"
        ]
    },
    "org.jboss.netty.handler.codec.socks.SocksInitResponseDecoder$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.socks.SocksInitResponseDecoder$1:void <clinit>()",
            "org.jboss.netty.handler.codec.socks.SocksInitResponseDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.socks.SocksInitResponseDecoder$State)"
        ]
    },
    "org.jboss.netty.handler.codec.socks.SocksCmdRequest$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.socks.SocksCmdRequest$1:void <clinit>()",
            "org.jboss.netty.handler.codec.socks.SocksCmdRequest:void <init>(org.jboss.netty.handler.codec.socks.SocksMessage$CmdType,org.jboss.netty.handler.codec.socks.SocksMessage$AddressType,java.lang.String,int)",
            "org.jboss.netty.handler.codec.socks.SocksCmdRequest:void encodeAsByteBuf(org.jboss.netty.buffer.ChannelBuffer)"
        ]
    },
    "org.jboss.netty.handler.codec.socks.SocksCmdResponse$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.socks.SocksCmdResponse$1:void <clinit>()",
            "org.jboss.netty.handler.codec.socks.SocksCmdResponse:void encodeAsByteBuf(org.jboss.netty.buffer.ChannelBuffer)"
        ]
    },
    "org.jboss.netty.handler.codec.socks.SocksMessage$AddressType:org.jboss.netty.handler.codec.socks.SocksMessage$AddressType fromByte(byte)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.socks.SocksCmdRequestDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.socks.SocksCmdRequestDecoder$State)",
            "org.jboss.netty.handler.codec.socks.SocksCmdResponseDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.socks.SocksCmdResponseDecoder$State)"
        ]
    },
    "org.jboss.netty.handler.codec.socks.SocksMessage$AuthScheme:org.jboss.netty.handler.codec.socks.SocksMessage$AuthScheme fromByte(byte)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.socks.SocksInitRequestDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.socks.SocksInitRequestDecoder$State)",
            "org.jboss.netty.handler.codec.socks.SocksInitResponseDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.socks.SocksInitResponseDecoder$State)"
        ]
    },
    "org.jboss.netty.handler.codec.socks.SocksMessage$AuthStatus:org.jboss.netty.handler.codec.socks.SocksMessage$AuthStatus fromByte(byte)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.socks.SocksAuthResponseDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.socks.SocksAuthResponseDecoder$State)"
        ]
    },
    "org.jboss.netty.handler.codec.socks.SocksMessage$CmdStatus:org.jboss.netty.handler.codec.socks.SocksMessage$CmdStatus fromByte(byte)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.socks.SocksCmdResponseDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.socks.SocksCmdResponseDecoder$State)"
        ]
    },
    "org.jboss.netty.handler.codec.socks.SocksMessage$CmdType:org.jboss.netty.handler.codec.socks.SocksMessage$CmdType fromByte(byte)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.socks.SocksCmdRequestDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.socks.SocksCmdRequestDecoder$State)"
        ]
    },
    "org.jboss.netty.handler.codec.socks.SocksMessage$ProtocolVersion:org.jboss.netty.handler.codec.socks.SocksMessage$ProtocolVersion fromByte(byte)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.socks.SocksCmdRequestDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.socks.SocksCmdRequestDecoder$State)",
            "org.jboss.netty.handler.codec.socks.SocksCmdResponseDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.socks.SocksCmdResponseDecoder$State)",
            "org.jboss.netty.handler.codec.socks.SocksInitRequestDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.socks.SocksInitRequestDecoder$State)",
            "org.jboss.netty.handler.codec.socks.SocksInitResponseDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.socks.SocksInitResponseDecoder$State)"
        ]
    },
    "org.jboss.netty.handler.codec.socks.SocksMessage$SubnegotiationVersion:org.jboss.netty.handler.codec.socks.SocksMessage$SubnegotiationVersion fromByte(byte)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.socks.SocksAuthRequestDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.socks.SocksAuthRequestDecoder$State)",
            "org.jboss.netty.handler.codec.socks.SocksAuthResponseDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.socks.SocksAuthResponseDecoder$State)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.SpdyFrameDecoder$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.spdy.SpdyFrameDecoder$1:void <clinit>()",
            "org.jboss.netty.handler.codec.spdy.SpdyFrameDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.SpdyOrHttpChooser$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.spdy.SpdyOrHttpChooser$1:void <clinit>()",
            "org.jboss.netty.handler.codec.spdy.SpdyOrHttpChooser:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.logging.AbstractInternalLogger$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.logging.AbstractInternalLogger$1:void <clinit>()",
            "org.jboss.netty.logging.AbstractInternalLogger:boolean isEnabled(org.jboss.netty.logging.InternalLogLevel)",
            "org.jboss.netty.logging.AbstractInternalLogger:void log(org.jboss.netty.logging.InternalLogLevel,java.lang.String,java.lang.Throwable)",
            "org.jboss.netty.logging.AbstractInternalLogger:void log(org.jboss.netty.logging.InternalLogLevel,java.lang.String)"
        ]
    },
    "org.jboss.netty.util.internal.jzlib.Deflate$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.jzlib.Deflate$1:void <clinit>()",
            "org.jboss.netty.util.internal.jzlib.Deflate:int deflate(org.jboss.netty.util.internal.jzlib.ZStream,int)"
        ]
    },
    "org.jboss.netty.util.internal.jzlib.Inflate$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.jzlib.Inflate$1:void <clinit>()",
            "org.jboss.netty.util.internal.jzlib.Inflate:int inflateReset(org.jboss.netty.util.internal.jzlib.ZStream)"
        ]
    },
    "org.jboss.netty.util.internal.jzlib.ZStream$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.jzlib.ZStream$1:void <clinit>()",
            "org.jboss.netty.util.internal.jzlib.ZStream:int read_buf(byte[],int,int)"
        ]
    },
    "org.apache.commons.lang.ArrayUtils:java.lang.Object[] addAll(java.lang.Object[],java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.ArrayUtils:java.lang.Object[] removeElement(java.lang.Object[],java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.ArrayUtils:long[] addAll(long[],long[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.ArrayUtils:long[] removeElement(long[],long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.ArrayUtils:int[] addAll(int[],int[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.ArrayUtils:int[] removeElement(int[],int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.ArrayUtils:short[] addAll(short[],short[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.ArrayUtils:short[] removeElement(short[],short)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.ArrayUtils:char[] addAll(char[],char[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.ArrayUtils:char[] removeElement(char[],char)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.ArrayUtils:byte[] addAll(byte[],byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.ONOSLLDP:void setChassisId(org.onlab.packet.ChassisId)",
            "org.onlab.packet.ONOSLLDP:void setPortId(int)"
        ]
    },
    "org.apache.commons.lang.ArrayUtils:byte[] removeElement(byte[],byte)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.ArrayUtils:double[] addAll(double[],double[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.ArrayUtils:double[] removeElement(double[],double)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.ArrayUtils:float[] addAll(float[],float[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.ArrayUtils:float[] removeElement(float[],float)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.ArrayUtils:boolean[] addAll(boolean[],boolean[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.ArrayUtils:boolean[] removeElement(boolean[],boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.ObjectUtils:java.lang.Object cloneIfPossible(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.text.StrMatcher:org.apache.commons.lang.text.StrMatcher charSetMatcher(char[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.text.StrMatcher:org.apache.commons.lang.text.StrMatcher charSetMatcher(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.text.StrMatcher:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.text.ExtendedMessageFormat:void seekNonWs(java.lang.String,java.text.ParsePosition)",
            "org.apache.commons.lang.text.StrMatcher:org.apache.commons.lang.text.StrMatcher commaMatcher()",
            "org.apache.commons.lang.text.StrMatcher:org.apache.commons.lang.text.StrMatcher tabMatcher()",
            "org.apache.commons.lang.text.StrMatcher:org.apache.commons.lang.text.StrMatcher spaceMatcher()",
            "org.apache.commons.lang.text.StrMatcher:org.apache.commons.lang.text.StrMatcher splitMatcher()",
            "org.apache.commons.lang.text.StrMatcher:org.apache.commons.lang.text.StrMatcher trimMatcher()",
            "org.apache.commons.lang.text.StrMatcher:org.apache.commons.lang.text.StrMatcher singleQuoteMatcher()",
            "org.apache.commons.lang.text.StrMatcher:org.apache.commons.lang.text.StrMatcher doubleQuoteMatcher()",
            "org.apache.commons.lang.text.StrMatcher:org.apache.commons.lang.text.StrMatcher quoteMatcher()",
            "org.apache.commons.lang.text.StrMatcher:org.apache.commons.lang.text.StrMatcher noneMatcher()",
            "org.apache.commons.lang.text.StrMatcher:org.apache.commons.lang.text.StrMatcher charSetMatcher(char[])",
            "org.apache.commons.lang.text.StrMatcher:org.apache.commons.lang.text.StrMatcher charSetMatcher(java.lang.String)",
            "org.apache.commons.lang.text.StrMatcher:org.apache.commons.lang.text.StrMatcher stringMatcher(java.lang.String)",
            "org.apache.commons.lang.text.StrMatcher:void <clinit>()",
            "org.apache.commons.lang.text.StrSubstitutor:org.apache.commons.lang.text.StrSubstitutor setVariablePrefix(char)",
            "org.apache.commons.lang.text.StrSubstitutor:org.apache.commons.lang.text.StrSubstitutor setVariablePrefix(java.lang.String)",
            "org.apache.commons.lang.text.StrSubstitutor:org.apache.commons.lang.text.StrSubstitutor setVariableSuffix(char)",
            "org.apache.commons.lang.text.StrSubstitutor:org.apache.commons.lang.text.StrSubstitutor setVariableSuffix(java.lang.String)",
            "org.apache.commons.lang.text.StrSubstitutor:void <clinit>()",
            "org.apache.commons.lang.text.StrTokenizer:void <init>()",
            "org.apache.commons.lang.text.StrTokenizer:void <init>(java.lang.String)",
            "org.apache.commons.lang.text.StrTokenizer:void <init>(char[])",
            "org.apache.commons.lang.text.StrTokenizer:org.apache.commons.lang.text.StrTokenizer setDelimiterMatcher(org.apache.commons.lang.text.StrMatcher)",
            "org.apache.commons.lang.text.StrTokenizer:org.apache.commons.lang.text.StrTokenizer setDelimiterChar(char)",
            "org.apache.commons.lang.text.StrTokenizer:org.apache.commons.lang.text.StrTokenizer setDelimiterString(java.lang.String)",
            "org.apache.commons.lang.text.StrTokenizer:org.apache.commons.lang.text.StrTokenizer setQuoteChar(char)",
            "org.apache.commons.lang.text.StrTokenizer:org.apache.commons.lang.text.StrTokenizer setIgnoredChar(char)",
            "org.apache.commons.lang.text.StrTokenizer:void <clinit>()"
        ]
    },
    "org.apache.commons.lang.text.StrTokenizer:java.lang.Object clone()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Coordinator$Directive:org.onlab.stc.Coordinator$Directive[] values()",
            "org.onlab.stc.Coordinator$Status:org.onlab.stc.Coordinator$Status[] values()",
            "org.onlab.stc.Main$Command:org.onlab.stc.Main$Command[] values()",
            "org.onlab.graph.DepthFirstSearch$EdgeType:org.onlab.graph.DepthFirstSearch$EdgeType[] values()",
            "org.onlab.graph.SrlgGraphSearch$Subset:void <init>(org.onlab.graph.SrlgGraphSearch,boolean[])",
            "org.onlab.packet.DHCP$DHCPOptionCode:org.onlab.packet.DHCP$DHCPOptionCode[] values()",
            "org.onlab.packet.DHCPPacketType:org.onlab.packet.DHCPPacketType[] values()",
            "org.onlab.packet.EthType$EtherType:org.onlab.packet.EthType$EtherType[] values()",
            "org.onlab.packet.IpAddress$Version:org.onlab.packet.IpAddress$Version[] values()",
            "org.onlab.util.DataRateUnit:org.onlab.util.DataRateUnit[] values()",
            "org.jboss.netty.buffer.ChannelBuffers:org.jboss.netty.buffer.ChannelBuffer copiedBuffer(java.nio.ByteOrder,byte[])",
            "org.jboss.netty.buffer.CompositeChannelBuffer:void <init>(org.jboss.netty.buffer.CompositeChannelBuffer)",
            "org.jboss.netty.channel.ChannelState:org.jboss.netty.channel.ChannelState[] values()",
            "org.jboss.netty.channel.socket.InternetProtocolFamily:org.jboss.netty.channel.socket.InternetProtocolFamily[] values()",
            "org.jboss.netty.channel.socket.http.HttpTunnelingSocketChannelConfig:java.lang.String[] getEnabledSslCipherSuites()",
            "org.jboss.netty.channel.socket.http.HttpTunnelingSocketChannelConfig:void setEnabledSslCipherSuites(java.lang.String[])",
            "org.jboss.netty.channel.socket.http.HttpTunnelingSocketChannelConfig:java.lang.String[] getEnabledSslProtocols()",
            "org.jboss.netty.channel.socket.http.HttpTunnelingSocketChannelConfig:void setEnabledSslProtocols(java.lang.String[])",
            "org.jboss.netty.handler.codec.base64.Base64Dialect:org.jboss.netty.handler.codec.base64.Base64Dialect[] values()",
            "org.jboss.netty.handler.codec.compression.ZlibWrapper:org.jboss.netty.handler.codec.compression.ZlibWrapper[] values()",
            "org.jboss.netty.handler.codec.http.DefaultCookie:void setPorts(int[])",
            "org.jboss.netty.handler.codec.http.HttpMessageDecoder$State:org.jboss.netty.handler.codec.http.HttpMessageDecoder$State[] values()",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostBodyUtil$TransferEncodingMechanism:org.jboss.netty.handler.codec.http.multipart.HttpPostBodyUtil$TransferEncodingMechanism[] values()",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestDecoder$MultiPartStatus:org.jboss.netty.handler.codec.http.multipart.HttpPostRequestDecoder$MultiPartStatus[] values()",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder$EncoderMode:org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder$EncoderMode[] values()",
            "org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData$HttpDataType:org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData$HttpDataType[] values()",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder$State:org.jboss.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder$State[] values()",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketFrameType:org.jboss.netty.handler.codec.http.websocketx.WebSocketFrameType[] values()",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketVersion:org.jboss.netty.handler.codec.http.websocketx.WebSocketVersion[] values()",
            "org.jboss.netty.handler.codec.replay.VoidEnum:org.jboss.netty.handler.codec.replay.VoidEnum[] values()",
            "org.jboss.netty.handler.codec.serialization.CompatibleObjectDecoderState:org.jboss.netty.handler.codec.serialization.CompatibleObjectDecoderState[] values()",
            "org.jboss.netty.handler.codec.socks.SocksAuthRequestDecoder$State:org.jboss.netty.handler.codec.socks.SocksAuthRequestDecoder$State[] values()",
            "org.jboss.netty.handler.codec.socks.SocksAuthResponseDecoder$State:org.jboss.netty.handler.codec.socks.SocksAuthResponseDecoder$State[] values()",
            "org.jboss.netty.handler.codec.socks.SocksCmdRequestDecoder$State:org.jboss.netty.handler.codec.socks.SocksCmdRequestDecoder$State[] values()",
            "org.jboss.netty.handler.codec.socks.SocksCmdResponseDecoder$State:org.jboss.netty.handler.codec.socks.SocksCmdResponseDecoder$State[] values()",
            "org.jboss.netty.handler.codec.socks.SocksInitRequestDecoder$State:org.jboss.netty.handler.codec.socks.SocksInitRequestDecoder$State[] values()",
            "org.jboss.netty.handler.codec.socks.SocksInitResponseDecoder$State:org.jboss.netty.handler.codec.socks.SocksInitResponseDecoder$State[] values()",
            "org.jboss.netty.handler.codec.socks.SocksMessage$AddressType:org.jboss.netty.handler.codec.socks.SocksMessage$AddressType[] values()",
            "org.jboss.netty.handler.codec.socks.SocksMessage$AuthScheme:org.jboss.netty.handler.codec.socks.SocksMessage$AuthScheme[] values()",
            "org.jboss.netty.handler.codec.socks.SocksMessage$AuthStatus:org.jboss.netty.handler.codec.socks.SocksMessage$AuthStatus[] values()",
            "org.jboss.netty.handler.codec.socks.SocksMessage$CmdStatus:org.jboss.netty.handler.codec.socks.SocksMessage$CmdStatus[] values()",
            "org.jboss.netty.handler.codec.socks.SocksMessage$CmdType:org.jboss.netty.handler.codec.socks.SocksMessage$CmdType[] values()",
            "org.jboss.netty.handler.codec.socks.SocksMessage$MessageType:org.jboss.netty.handler.codec.socks.SocksMessage$MessageType[] values()",
            "org.jboss.netty.handler.codec.socks.SocksMessage$ProtocolVersion:org.jboss.netty.handler.codec.socks.SocksMessage$ProtocolVersion[] values()",
            "org.jboss.netty.handler.codec.socks.SocksMessage$SubnegotiationVersion:org.jboss.netty.handler.codec.socks.SocksMessage$SubnegotiationVersion[] values()",
            "org.jboss.netty.handler.codec.socks.SocksRequest$SocksRequestType:org.jboss.netty.handler.codec.socks.SocksRequest$SocksRequestType[] values()",
            "org.jboss.netty.handler.codec.socks.SocksResponse$SocksResponseType:org.jboss.netty.handler.codec.socks.SocksResponse$SocksResponseType[] values()",
            "org.jboss.netty.handler.codec.spdy.SpdyFrameDecoder$State:org.jboss.netty.handler.codec.spdy.SpdyFrameDecoder$State[] values()",
            "org.jboss.netty.handler.codec.spdy.SpdyOrHttpChooser$SelectedProtocol:org.jboss.netty.handler.codec.spdy.SpdyOrHttpChooser$SelectedProtocol[] values()",
            "org.jboss.netty.handler.codec.spdy.SpdyVersion:org.jboss.netty.handler.codec.spdy.SpdyVersion[] values()",
            "org.jboss.netty.handler.timeout.IdleState:org.jboss.netty.handler.timeout.IdleState[] values()",
            "org.jboss.netty.logging.InternalLogLevel:org.jboss.netty.logging.InternalLogLevel[] values()",
            "org.jboss.netty.util.internal.jzlib.JZlib$WrapperType:org.jboss.netty.util.internal.jzlib.JZlib$WrapperType[] values()",
            "org.apache.commons.lang.ArrayUtils:java.lang.Object[] clone(java.lang.Object[])",
            "org.apache.commons.lang.ArrayUtils:long[] clone(long[])",
            "org.apache.commons.lang.ArrayUtils:int[] clone(int[])",
            "org.apache.commons.lang.ArrayUtils:short[] clone(short[])",
            "org.apache.commons.lang.ArrayUtils:char[] clone(char[])",
            "org.apache.commons.lang.ArrayUtils:byte[] clone(byte[])",
            "org.apache.commons.lang.ArrayUtils:double[] clone(double[])",
            "org.apache.commons.lang.ArrayUtils:float[] clone(float[])",
            "org.apache.commons.lang.ArrayUtils:boolean[] clone(boolean[])",
            "org.apache.commons.lang.ObjectUtils:java.lang.Object clone(java.lang.Object)",
            "org.apache.commons.lang.text.StrMatcher$CharSetMatcher:void <init>(char[])",
            "org.apache.commons.lang.text.StrTokenizer:org.apache.commons.lang.text.StrTokenizer getCSVClone()",
            "org.apache.commons.lang.text.StrTokenizer:org.apache.commons.lang.text.StrTokenizer getTSVClone()",
            "org.apache.commons.lang.text.StrTokenizer:java.lang.String[] getTokenArray()",
            "org.apache.commons.lang.text.StrTokenizer:java.lang.Object cloneReset()",
            "org.apache.commons.lang3.ArrayUtils:java.lang.Object[] clone(java.lang.Object[])",
            "org.apache.commons.lang3.ArrayUtils:long[] clone(long[])",
            "org.apache.commons.lang3.ArrayUtils:int[] clone(int[])",
            "org.apache.commons.lang3.ArrayUtils:short[] clone(short[])",
            "org.apache.commons.lang3.ArrayUtils:char[] clone(char[])",
            "org.apache.commons.lang3.ArrayUtils:byte[] clone(byte[])",
            "org.apache.commons.lang3.ArrayUtils:double[] clone(double[])",
            "org.apache.commons.lang3.ArrayUtils:float[] clone(float[])",
            "org.apache.commons.lang3.ArrayUtils:boolean[] clone(boolean[])",
            "org.apache.commons.lang3.builder.ReflectionToStringBuilder:java.lang.String[] getExcludeFieldNames()",
            "org.apache.commons.lang3.ClassUtils$Interfaces:org.apache.commons.lang3.ClassUtils$Interfaces[] values()",
            "org.apache.commons.lang3.JavaVersion:org.apache.commons.lang3.JavaVersion[] values()",
            "org.apache.commons.lang3.ObjectUtils:java.lang.Object clone(java.lang.Object)",
            "org.apache.commons.lang3.Range$ComparableComparator:org.apache.commons.lang3.Range$ComparableComparator[] values()",
            "org.apache.commons.lang3.reflect.TypeUtils$ParameterizedTypeImpl:java.lang.reflect.Type[] getActualTypeArguments()",
            "org.apache.commons.lang3.reflect.TypeUtils$WildcardTypeImpl:java.lang.reflect.Type[] getUpperBounds()",
            "org.apache.commons.lang3.reflect.TypeUtils$WildcardTypeImpl:java.lang.reflect.Type[] getLowerBounds()",
            "org.apache.commons.lang3.text.StrMatcher$CharSetMatcher:void <init>(char[])",
            "org.apache.commons.lang3.text.StrTokenizer:java.lang.String[] getTokenArray()",
            "org.apache.commons.lang3.text.StrTokenizer:java.lang.Object cloneReset()",
            "org.apache.commons.lang3.text.translate.EntityArrays:java.lang.String[][] ISO8859_1_ESCAPE()",
            "org.apache.commons.lang3.text.translate.EntityArrays:java.lang.String[][] ISO8859_1_UNESCAPE()",
            "org.apache.commons.lang3.text.translate.EntityArrays:java.lang.String[][] HTML40_EXTENDED_ESCAPE()",
            "org.apache.commons.lang3.text.translate.EntityArrays:java.lang.String[][] HTML40_EXTENDED_UNESCAPE()",
            "org.apache.commons.lang3.text.translate.EntityArrays:java.lang.String[][] BASIC_ESCAPE()",
            "org.apache.commons.lang3.text.translate.EntityArrays:java.lang.String[][] BASIC_UNESCAPE()",
            "org.apache.commons.lang3.text.translate.EntityArrays:java.lang.String[][] APOS_ESCAPE()",
            "org.apache.commons.lang3.text.translate.EntityArrays:java.lang.String[][] APOS_UNESCAPE()",
            "org.apache.commons.lang3.text.translate.EntityArrays:java.lang.String[][] JAVA_CTRL_CHARS_ESCAPE()",
            "org.apache.commons.lang3.text.translate.EntityArrays:java.lang.String[][] JAVA_CTRL_CHARS_UNESCAPE()",
            "org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION:org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION[] values()",
            "org.apache.commons.lang3.time.StopWatch$SplitState:org.apache.commons.lang3.time.StopWatch$SplitState[] values()",
            "org.apache.commons.lang3.time.StopWatch$State:org.apache.commons.lang3.time.StopWatch$State[] values()"
        ]
    },
    "org.apache.commons.lang3.ArrayUtils:java.lang.Object[] addAll(java.lang.Object[],java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.Validate:java.lang.Iterable noNullElements(java.lang.Iterable,java.lang.String,java.lang.Object[])"
        ]
    },
    "org.apache.commons.lang3.ArrayUtils:java.lang.Object[] removeElement(java.lang.Object[],java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.exception.ExceptionUtils:java.lang.String[] getDefaultCauseMethodNames()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.text.translate.AggregateTranslator:void <init>(org.apache.commons.lang3.text.translate.CharSequenceTranslator[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.StringEscapeUtils:void <clinit>()",
            "org.apache.commons.lang3.text.translate.CharSequenceTranslator:org.apache.commons.lang3.text.translate.CharSequenceTranslator 'with'(org.apache.commons.lang3.text.translate.CharSequenceTranslator[])"
        ]
    },
    "org.apache.commons.lang3.ArrayUtils:long[] addAll(long[],long[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.ArrayUtils:long[] removeElement(long[],long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.EnumUtils:java.util.EnumSet processBitVectors(java.lang.Class,long[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.EnumUtils:java.util.EnumSet processBitVector(java.lang.Class,long)"
        ]
    },
    "org.apache.commons.lang3.ArrayUtils:int[] addAll(int[],int[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.ArrayUtils:int[] removeElement(int[],int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.ArrayUtils:java.lang.Object[] removeAll(java.lang.Object[],int[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.ArrayUtils:byte[] removeAll(byte[],int[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.ArrayUtils:short[] removeAll(short[],int[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.ArrayUtils:int[] removeAll(int[],int[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.ArrayUtils:char[] removeAll(char[],int[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.ArrayUtils:long[] removeAll(long[],int[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.ArrayUtils:float[] removeAll(float[],int[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.ArrayUtils:double[] removeAll(double[],int[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.ArrayUtils:boolean[] removeAll(boolean[],int[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.ArrayUtils:short[] addAll(short[],short[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.ArrayUtils:short[] removeElement(short[],short)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.ArrayUtils:char[] addAll(char[],char[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.ArrayUtils:char[] removeElement(char[],char)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.text.StrTokenizer:void <init>(char[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.text.StrTokenizer:void <init>(char[],char)",
            "org.apache.commons.lang3.text.StrTokenizer:void <init>(char[],java.lang.String)",
            "org.apache.commons.lang3.text.StrTokenizer:void <init>(char[],org.apache.commons.lang3.text.StrMatcher)"
        ]
    },
    "org.apache.commons.lang3.text.StrTokenizer:org.apache.commons.lang3.text.StrTokenizer reset(char[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.text.StrTokenizer:org.apache.commons.lang3.text.StrTokenizer getCSVInstance(char[])",
            "org.apache.commons.lang3.text.StrTokenizer:org.apache.commons.lang3.text.StrTokenizer getTSVInstance(char[])"
        ]
    },
    "org.apache.commons.lang3.ArrayUtils:byte[] addAll(byte[],byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.ArrayUtils:byte[] removeElement(byte[],byte)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.ArrayUtils:double[] addAll(double[],double[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.ArrayUtils:double[] removeElement(double[],double)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.ArrayUtils:float[] addAll(float[],float[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.ArrayUtils:float[] removeElement(float[],float)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.ArrayUtils:boolean[] addAll(boolean[],boolean[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.ArrayUtils:boolean[] removeElement(boolean[],boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.ObjectUtils:java.lang.Object cloneIfPossible(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.reflect.TypeUtils:void mapTypeVariablesToArguments(java.lang.Class,java.lang.reflect.ParameterizedType,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.reflect.TypeUtils:java.util.Map determineTypeArguments(java.lang.Class,java.lang.reflect.ParameterizedType)",
            "org.apache.commons.lang3.reflect.TypeUtils:void mapTypeVariablesToArguments(java.lang.Class,java.lang.reflect.ParameterizedType,java.util.Map)"
        ]
    },
    "org.apache.commons.lang3.reflect.TypeUtils:boolean containsTypeVariables(java.lang.reflect.Type)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.reflect.TypeUtils:java.lang.reflect.Type unrollVariables(java.util.Map,java.lang.reflect.Type)",
            "org.apache.commons.lang3.reflect.TypeUtils:boolean containsTypeVariables(java.lang.reflect.Type)"
        ]
    },
    "org.apache.commons.lang3.reflect.TypeUtils:boolean equals(java.lang.reflect.ParameterizedType,java.lang.reflect.Type)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.reflect.TypeUtils:boolean equals(java.lang.reflect.Type,java.lang.reflect.Type)",
            "org.apache.commons.lang3.reflect.TypeUtils:boolean access$200(java.lang.reflect.ParameterizedType,java.lang.reflect.Type)"
        ]
    },
    "org.apache.commons.lang3.reflect.TypeUtils:java.lang.String parameterizedTypeToString(java.lang.reflect.ParameterizedType)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.reflect.TypeUtils:java.lang.String toString(java.lang.reflect.Type)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.FieldSerializerGenericsUtil:java.lang.Class[] computeFieldGenerics(java.lang.reflect.Type,java.lang.reflect.Field,java.lang.Class[])": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.FieldSerializerGenericsUtil:java.lang.Class[] computeFieldGenerics(java.lang.reflect.Type,java.lang.reflect.Field,java.lang.Class[])",
            "com.esotericsoftware.kryo.serializers.FieldSerializerGenericsUtil:com.esotericsoftware.kryo.serializers.FieldSerializer$CachedField newCachedFieldOfGenericType(java.lang.reflect.Field,int,java.lang.Class[],java.lang.reflect.Type)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.FieldSerializerGenericsUtil:java.lang.Class[] getGenerics(java.lang.reflect.Type,com.esotericsoftware.kryo.Kryo)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.FieldSerializer:com.esotericsoftware.kryo.serializers.FieldSerializer$CachedField newMatchingCachedField(java.lang.reflect.Field,int,java.lang.Class,java.lang.reflect.Type,java.lang.Class[])",
            "com.esotericsoftware.kryo.serializers.FieldSerializerGenericsUtil:com.esotericsoftware.kryo.serializers.FieldSerializer$CachedField newCachedFieldOfGenericType(java.lang.reflect.Field,int,java.lang.Class[],java.lang.reflect.Type)",
            "com.esotericsoftware.kryo.serializers.FieldSerializerGenericsUtil:java.lang.Class[] getGenerics(java.lang.reflect.Type,com.esotericsoftware.kryo.Kryo)"
        ]
    },
    "org.apache.commons.lang3.reflect.TypeUtils:java.lang.reflect.Type[] getImplicitUpperBounds(java.lang.reflect.WildcardType)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.reflect.TypeUtils:boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.GenericArrayType,java.util.Map)",
            "org.apache.commons.lang3.reflect.TypeUtils:boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.WildcardType,java.util.Map)",
            "org.apache.commons.lang3.reflect.TypeUtils:java.util.Map getTypeArguments(java.lang.reflect.Type,java.lang.Class,java.util.Map)",
            "org.apache.commons.lang3.reflect.TypeUtils:boolean containsTypeVariables(java.lang.reflect.Type)",
            "org.apache.commons.lang3.reflect.TypeUtils:boolean equals(java.lang.reflect.WildcardType,java.lang.reflect.Type)"
        ]
    },
    "org.apache.commons.lang3.reflect.TypeUtils:java.lang.String wildcardTypeToString(java.lang.reflect.WildcardType)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.reflect.TypeUtils:java.lang.String toString(java.lang.reflect.Type)"
        ]
    },
    "org.apache.commons.lang3.reflect.TypeUtils:java.lang.reflect.Type[] getImplicitLowerBounds(java.lang.reflect.WildcardType)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.reflect.TypeUtils:boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.WildcardType,java.util.Map)",
            "org.apache.commons.lang3.reflect.TypeUtils:boolean containsTypeVariables(java.lang.reflect.Type)"
        ]
    },
    "org.apache.commons.lang3.reflect.TypeUtils:boolean equals(java.lang.reflect.WildcardType,java.lang.reflect.Type)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.reflect.TypeUtils:boolean equals(java.lang.reflect.Type,java.lang.reflect.Type)",
            "org.apache.commons.lang3.reflect.TypeUtils:boolean access$300(java.lang.reflect.WildcardType,java.lang.reflect.Type)"
        ]
    },
    "org.apache.commons.lang3.text.StrMatcher:org.apache.commons.lang3.text.StrMatcher charSetMatcher(char[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.text.StrMatcher:org.apache.commons.lang3.text.StrMatcher charSetMatcher(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.text.StrMatcher:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.text.ExtendedMessageFormat:void seekNonWs(java.lang.String,java.text.ParsePosition)",
            "org.apache.commons.lang3.text.StrMatcher:org.apache.commons.lang3.text.StrMatcher commaMatcher()",
            "org.apache.commons.lang3.text.StrMatcher:org.apache.commons.lang3.text.StrMatcher tabMatcher()",
            "org.apache.commons.lang3.text.StrMatcher:org.apache.commons.lang3.text.StrMatcher spaceMatcher()",
            "org.apache.commons.lang3.text.StrMatcher:org.apache.commons.lang3.text.StrMatcher splitMatcher()",
            "org.apache.commons.lang3.text.StrMatcher:org.apache.commons.lang3.text.StrMatcher trimMatcher()",
            "org.apache.commons.lang3.text.StrMatcher:org.apache.commons.lang3.text.StrMatcher singleQuoteMatcher()",
            "org.apache.commons.lang3.text.StrMatcher:org.apache.commons.lang3.text.StrMatcher doubleQuoteMatcher()",
            "org.apache.commons.lang3.text.StrMatcher:org.apache.commons.lang3.text.StrMatcher quoteMatcher()",
            "org.apache.commons.lang3.text.StrMatcher:org.apache.commons.lang3.text.StrMatcher noneMatcher()",
            "org.apache.commons.lang3.text.StrMatcher:org.apache.commons.lang3.text.StrMatcher charSetMatcher(char[])",
            "org.apache.commons.lang3.text.StrMatcher:org.apache.commons.lang3.text.StrMatcher charSetMatcher(java.lang.String)",
            "org.apache.commons.lang3.text.StrMatcher:org.apache.commons.lang3.text.StrMatcher stringMatcher(java.lang.String)",
            "org.apache.commons.lang3.text.StrMatcher:void <clinit>()",
            "org.apache.commons.lang3.text.StrSubstitutor:org.apache.commons.lang3.text.StrSubstitutor setVariablePrefix(char)",
            "org.apache.commons.lang3.text.StrSubstitutor:org.apache.commons.lang3.text.StrSubstitutor setVariablePrefix(java.lang.String)",
            "org.apache.commons.lang3.text.StrSubstitutor:org.apache.commons.lang3.text.StrSubstitutor setVariableSuffix(char)",
            "org.apache.commons.lang3.text.StrSubstitutor:org.apache.commons.lang3.text.StrSubstitutor setVariableSuffix(java.lang.String)",
            "org.apache.commons.lang3.text.StrSubstitutor:org.apache.commons.lang3.text.StrSubstitutor setValueDelimiter(char)",
            "org.apache.commons.lang3.text.StrSubstitutor:org.apache.commons.lang3.text.StrSubstitutor setValueDelimiter(java.lang.String)",
            "org.apache.commons.lang3.text.StrSubstitutor:void <clinit>()",
            "org.apache.commons.lang3.text.StrTokenizer:void <init>()",
            "org.apache.commons.lang3.text.StrTokenizer:void <init>(java.lang.String)",
            "org.apache.commons.lang3.text.StrTokenizer:void <init>(char[])",
            "org.apache.commons.lang3.text.StrTokenizer:org.apache.commons.lang3.text.StrTokenizer setDelimiterMatcher(org.apache.commons.lang3.text.StrMatcher)",
            "org.apache.commons.lang3.text.StrTokenizer:org.apache.commons.lang3.text.StrTokenizer setDelimiterChar(char)",
            "org.apache.commons.lang3.text.StrTokenizer:org.apache.commons.lang3.text.StrTokenizer setDelimiterString(java.lang.String)",
            "org.apache.commons.lang3.text.StrTokenizer:org.apache.commons.lang3.text.StrTokenizer setQuoteChar(char)",
            "org.apache.commons.lang3.text.StrTokenizer:org.apache.commons.lang3.text.StrTokenizer setIgnoredChar(char)",
            "org.apache.commons.lang3.text.StrTokenizer:void <clinit>()"
        ]
    },
    "org.apache.commons.lang3.text.StrTokenizer:java.lang.Object clone()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Coordinator$Directive:org.onlab.stc.Coordinator$Directive[] values()",
            "org.onlab.stc.Coordinator$Status:org.onlab.stc.Coordinator$Status[] values()",
            "org.onlab.stc.Main$Command:org.onlab.stc.Main$Command[] values()",
            "org.onlab.graph.DepthFirstSearch$EdgeType:org.onlab.graph.DepthFirstSearch$EdgeType[] values()",
            "org.onlab.graph.SrlgGraphSearch$Subset:void <init>(org.onlab.graph.SrlgGraphSearch,boolean[])",
            "org.onlab.packet.DHCP$DHCPOptionCode:org.onlab.packet.DHCP$DHCPOptionCode[] values()",
            "org.onlab.packet.DHCPPacketType:org.onlab.packet.DHCPPacketType[] values()",
            "org.onlab.packet.EthType$EtherType:org.onlab.packet.EthType$EtherType[] values()",
            "org.onlab.packet.IpAddress$Version:org.onlab.packet.IpAddress$Version[] values()",
            "org.onlab.util.DataRateUnit:org.onlab.util.DataRateUnit[] values()",
            "org.jboss.netty.buffer.ChannelBuffers:org.jboss.netty.buffer.ChannelBuffer copiedBuffer(java.nio.ByteOrder,byte[])",
            "org.jboss.netty.buffer.CompositeChannelBuffer:void <init>(org.jboss.netty.buffer.CompositeChannelBuffer)",
            "org.jboss.netty.channel.ChannelState:org.jboss.netty.channel.ChannelState[] values()",
            "org.jboss.netty.channel.socket.InternetProtocolFamily:org.jboss.netty.channel.socket.InternetProtocolFamily[] values()",
            "org.jboss.netty.channel.socket.http.HttpTunnelingSocketChannelConfig:java.lang.String[] getEnabledSslCipherSuites()",
            "org.jboss.netty.channel.socket.http.HttpTunnelingSocketChannelConfig:void setEnabledSslCipherSuites(java.lang.String[])",
            "org.jboss.netty.channel.socket.http.HttpTunnelingSocketChannelConfig:java.lang.String[] getEnabledSslProtocols()",
            "org.jboss.netty.channel.socket.http.HttpTunnelingSocketChannelConfig:void setEnabledSslProtocols(java.lang.String[])",
            "org.jboss.netty.handler.codec.base64.Base64Dialect:org.jboss.netty.handler.codec.base64.Base64Dialect[] values()",
            "org.jboss.netty.handler.codec.compression.ZlibWrapper:org.jboss.netty.handler.codec.compression.ZlibWrapper[] values()",
            "org.jboss.netty.handler.codec.http.DefaultCookie:void setPorts(int[])",
            "org.jboss.netty.handler.codec.http.HttpMessageDecoder$State:org.jboss.netty.handler.codec.http.HttpMessageDecoder$State[] values()",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostBodyUtil$TransferEncodingMechanism:org.jboss.netty.handler.codec.http.multipart.HttpPostBodyUtil$TransferEncodingMechanism[] values()",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestDecoder$MultiPartStatus:org.jboss.netty.handler.codec.http.multipart.HttpPostRequestDecoder$MultiPartStatus[] values()",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder$EncoderMode:org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder$EncoderMode[] values()",
            "org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData$HttpDataType:org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData$HttpDataType[] values()",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder$State:org.jboss.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder$State[] values()",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketFrameType:org.jboss.netty.handler.codec.http.websocketx.WebSocketFrameType[] values()",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketVersion:org.jboss.netty.handler.codec.http.websocketx.WebSocketVersion[] values()",
            "org.jboss.netty.handler.codec.replay.VoidEnum:org.jboss.netty.handler.codec.replay.VoidEnum[] values()",
            "org.jboss.netty.handler.codec.serialization.CompatibleObjectDecoderState:org.jboss.netty.handler.codec.serialization.CompatibleObjectDecoderState[] values()",
            "org.jboss.netty.handler.codec.socks.SocksAuthRequestDecoder$State:org.jboss.netty.handler.codec.socks.SocksAuthRequestDecoder$State[] values()",
            "org.jboss.netty.handler.codec.socks.SocksAuthResponseDecoder$State:org.jboss.netty.handler.codec.socks.SocksAuthResponseDecoder$State[] values()",
            "org.jboss.netty.handler.codec.socks.SocksCmdRequestDecoder$State:org.jboss.netty.handler.codec.socks.SocksCmdRequestDecoder$State[] values()",
            "org.jboss.netty.handler.codec.socks.SocksCmdResponseDecoder$State:org.jboss.netty.handler.codec.socks.SocksCmdResponseDecoder$State[] values()",
            "org.jboss.netty.handler.codec.socks.SocksInitRequestDecoder$State:org.jboss.netty.handler.codec.socks.SocksInitRequestDecoder$State[] values()",
            "org.jboss.netty.handler.codec.socks.SocksInitResponseDecoder$State:org.jboss.netty.handler.codec.socks.SocksInitResponseDecoder$State[] values()",
            "org.jboss.netty.handler.codec.socks.SocksMessage$AddressType:org.jboss.netty.handler.codec.socks.SocksMessage$AddressType[] values()",
            "org.jboss.netty.handler.codec.socks.SocksMessage$AuthScheme:org.jboss.netty.handler.codec.socks.SocksMessage$AuthScheme[] values()",
            "org.jboss.netty.handler.codec.socks.SocksMessage$AuthStatus:org.jboss.netty.handler.codec.socks.SocksMessage$AuthStatus[] values()",
            "org.jboss.netty.handler.codec.socks.SocksMessage$CmdStatus:org.jboss.netty.handler.codec.socks.SocksMessage$CmdStatus[] values()",
            "org.jboss.netty.handler.codec.socks.SocksMessage$CmdType:org.jboss.netty.handler.codec.socks.SocksMessage$CmdType[] values()",
            "org.jboss.netty.handler.codec.socks.SocksMessage$MessageType:org.jboss.netty.handler.codec.socks.SocksMessage$MessageType[] values()",
            "org.jboss.netty.handler.codec.socks.SocksMessage$ProtocolVersion:org.jboss.netty.handler.codec.socks.SocksMessage$ProtocolVersion[] values()",
            "org.jboss.netty.handler.codec.socks.SocksMessage$SubnegotiationVersion:org.jboss.netty.handler.codec.socks.SocksMessage$SubnegotiationVersion[] values()",
            "org.jboss.netty.handler.codec.socks.SocksRequest$SocksRequestType:org.jboss.netty.handler.codec.socks.SocksRequest$SocksRequestType[] values()",
            "org.jboss.netty.handler.codec.socks.SocksResponse$SocksResponseType:org.jboss.netty.handler.codec.socks.SocksResponse$SocksResponseType[] values()",
            "org.jboss.netty.handler.codec.spdy.SpdyFrameDecoder$State:org.jboss.netty.handler.codec.spdy.SpdyFrameDecoder$State[] values()",
            "org.jboss.netty.handler.codec.spdy.SpdyOrHttpChooser$SelectedProtocol:org.jboss.netty.handler.codec.spdy.SpdyOrHttpChooser$SelectedProtocol[] values()",
            "org.jboss.netty.handler.codec.spdy.SpdyVersion:org.jboss.netty.handler.codec.spdy.SpdyVersion[] values()",
            "org.jboss.netty.handler.timeout.IdleState:org.jboss.netty.handler.timeout.IdleState[] values()",
            "org.jboss.netty.logging.InternalLogLevel:org.jboss.netty.logging.InternalLogLevel[] values()",
            "org.jboss.netty.util.internal.jzlib.JZlib$WrapperType:org.jboss.netty.util.internal.jzlib.JZlib$WrapperType[] values()",
            "org.apache.commons.lang.ArrayUtils:java.lang.Object[] clone(java.lang.Object[])",
            "org.apache.commons.lang.ArrayUtils:long[] clone(long[])",
            "org.apache.commons.lang.ArrayUtils:int[] clone(int[])",
            "org.apache.commons.lang.ArrayUtils:short[] clone(short[])",
            "org.apache.commons.lang.ArrayUtils:char[] clone(char[])",
            "org.apache.commons.lang.ArrayUtils:byte[] clone(byte[])",
            "org.apache.commons.lang.ArrayUtils:double[] clone(double[])",
            "org.apache.commons.lang.ArrayUtils:float[] clone(float[])",
            "org.apache.commons.lang.ArrayUtils:boolean[] clone(boolean[])",
            "org.apache.commons.lang.ObjectUtils:java.lang.Object clone(java.lang.Object)",
            "org.apache.commons.lang.text.StrMatcher$CharSetMatcher:void <init>(char[])",
            "org.apache.commons.lang.text.StrTokenizer:java.lang.String[] getTokenArray()",
            "org.apache.commons.lang.text.StrTokenizer:java.lang.Object cloneReset()",
            "org.apache.commons.lang3.ArrayUtils:java.lang.Object[] clone(java.lang.Object[])",
            "org.apache.commons.lang3.ArrayUtils:long[] clone(long[])",
            "org.apache.commons.lang3.ArrayUtils:int[] clone(int[])",
            "org.apache.commons.lang3.ArrayUtils:short[] clone(short[])",
            "org.apache.commons.lang3.ArrayUtils:char[] clone(char[])",
            "org.apache.commons.lang3.ArrayUtils:byte[] clone(byte[])",
            "org.apache.commons.lang3.ArrayUtils:double[] clone(double[])",
            "org.apache.commons.lang3.ArrayUtils:float[] clone(float[])",
            "org.apache.commons.lang3.ArrayUtils:boolean[] clone(boolean[])",
            "org.apache.commons.lang3.builder.ReflectionToStringBuilder:java.lang.String[] getExcludeFieldNames()",
            "org.apache.commons.lang3.ClassUtils$Interfaces:org.apache.commons.lang3.ClassUtils$Interfaces[] values()",
            "org.apache.commons.lang3.JavaVersion:org.apache.commons.lang3.JavaVersion[] values()",
            "org.apache.commons.lang3.ObjectUtils:java.lang.Object clone(java.lang.Object)",
            "org.apache.commons.lang3.Range$ComparableComparator:org.apache.commons.lang3.Range$ComparableComparator[] values()",
            "org.apache.commons.lang3.reflect.TypeUtils$ParameterizedTypeImpl:java.lang.reflect.Type[] getActualTypeArguments()",
            "org.apache.commons.lang3.reflect.TypeUtils$WildcardTypeImpl:java.lang.reflect.Type[] getUpperBounds()",
            "org.apache.commons.lang3.reflect.TypeUtils$WildcardTypeImpl:java.lang.reflect.Type[] getLowerBounds()",
            "org.apache.commons.lang3.text.StrMatcher$CharSetMatcher:void <init>(char[])",
            "org.apache.commons.lang3.text.StrTokenizer:org.apache.commons.lang3.text.StrTokenizer getCSVClone()",
            "org.apache.commons.lang3.text.StrTokenizer:org.apache.commons.lang3.text.StrTokenizer getTSVClone()",
            "org.apache.commons.lang3.text.StrTokenizer:java.lang.String[] getTokenArray()",
            "org.apache.commons.lang3.text.StrTokenizer:java.lang.Object cloneReset()",
            "org.apache.commons.lang3.text.translate.EntityArrays:java.lang.String[][] ISO8859_1_ESCAPE()",
            "org.apache.commons.lang3.text.translate.EntityArrays:java.lang.String[][] ISO8859_1_UNESCAPE()",
            "org.apache.commons.lang3.text.translate.EntityArrays:java.lang.String[][] HTML40_EXTENDED_ESCAPE()",
            "org.apache.commons.lang3.text.translate.EntityArrays:java.lang.String[][] HTML40_EXTENDED_UNESCAPE()",
            "org.apache.commons.lang3.text.translate.EntityArrays:java.lang.String[][] BASIC_ESCAPE()",
            "org.apache.commons.lang3.text.translate.EntityArrays:java.lang.String[][] BASIC_UNESCAPE()",
            "org.apache.commons.lang3.text.translate.EntityArrays:java.lang.String[][] APOS_ESCAPE()",
            "org.apache.commons.lang3.text.translate.EntityArrays:java.lang.String[][] APOS_UNESCAPE()",
            "org.apache.commons.lang3.text.translate.EntityArrays:java.lang.String[][] JAVA_CTRL_CHARS_ESCAPE()",
            "org.apache.commons.lang3.text.translate.EntityArrays:java.lang.String[][] JAVA_CTRL_CHARS_UNESCAPE()",
            "org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION:org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION[] values()",
            "org.apache.commons.lang3.time.StopWatch$SplitState:org.apache.commons.lang3.time.StopWatch$SplitState[] values()",
            "org.apache.commons.lang3.time.StopWatch$State:org.apache.commons.lang3.time.StopWatch$State[] values()"
        ]
    },
    "org.apache.commons.lang3.StringEscapeUtils:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.StringEscapeUtils:java.lang.String escapeJava(java.lang.String)",
            "org.apache.commons.lang3.StringEscapeUtils:java.lang.String escapeEcmaScript(java.lang.String)",
            "org.apache.commons.lang3.StringEscapeUtils:java.lang.String escapeJson(java.lang.String)",
            "org.apache.commons.lang3.StringEscapeUtils:java.lang.String unescapeJava(java.lang.String)",
            "org.apache.commons.lang3.StringEscapeUtils:java.lang.String unescapeEcmaScript(java.lang.String)",
            "org.apache.commons.lang3.StringEscapeUtils:java.lang.String unescapeJson(java.lang.String)",
            "org.apache.commons.lang3.StringEscapeUtils:java.lang.String escapeHtml4(java.lang.String)",
            "org.apache.commons.lang3.StringEscapeUtils:java.lang.String escapeHtml3(java.lang.String)",
            "org.apache.commons.lang3.StringEscapeUtils:java.lang.String unescapeHtml4(java.lang.String)",
            "org.apache.commons.lang3.StringEscapeUtils:java.lang.String unescapeHtml3(java.lang.String)",
            "org.apache.commons.lang3.StringEscapeUtils:java.lang.String escapeXml(java.lang.String)",
            "org.apache.commons.lang3.StringEscapeUtils:java.lang.String escapeXml10(java.lang.String)",
            "org.apache.commons.lang3.StringEscapeUtils:java.lang.String escapeXml11(java.lang.String)",
            "org.apache.commons.lang3.StringEscapeUtils:java.lang.String unescapeXml(java.lang.String)",
            "org.apache.commons.lang3.StringEscapeUtils:java.lang.String escapeCsv(java.lang.String)",
            "org.apache.commons.lang3.StringEscapeUtils:java.lang.String unescapeCsv(java.lang.String)",
            "org.apache.commons.lang3.StringEscapeUtils:void <clinit>()"
        ]
    },
    "org.onlab.packet.EAPOL$lambda_deserializer_53__84:org.onlab.packet.IPacket deserialize(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.EAPOL:org.onlab.packet.EAPOL lambda$deserializer$53(byte[],int,int)",
            "org.onlab.packet.Ethernet:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.Ethernet:org.onlab.packet.Ethernet lambda$deserializer$10(byte[],int,int)",
            "org.onlab.packet.ICMP:org.onlab.packet.ICMP lambda$deserializer$29(byte[],int,int)",
            "org.onlab.packet.ICMP6:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ICMP6:org.onlab.packet.ICMP6 lambda$deserializer$40(byte[],int,int)",
            "org.onlab.packet.IGMP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IPv4:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IPv4:org.onlab.packet.IPv4 lambda$deserializer$24(byte[],int,int)",
            "org.onlab.packet.IPv6:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IPv6:org.onlab.packet.IPv6 lambda$deserializer$48(byte[],int,int)",
            "org.onlab.packet.MPLS:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.MPLS:org.onlab.packet.MPLS lambda$deserializer$12(byte[],int,int)",
            "org.onlab.packet.PIM:org.onlab.packet.PIM lambda$deserializer$49(byte[],int,int)",
            "org.onlab.packet.TCP:org.onlab.packet.TCP lambda$deserializer$39(byte[],int,int)",
            "org.onlab.packet.UDP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.UDP:org.onlab.packet.UDP lambda$deserializer$45(byte[],int,int)",
            "org.onlab.packet.ipv6.Authentication:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Authentication:org.onlab.packet.ipv6.Authentication lambda$deserializer$46(byte[],int,int)",
            "org.onlab.packet.ipv6.BaseOptions:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.BaseOptions:org.onlab.packet.ipv6.BaseOptions lambda$deserializer$13(byte[],int,int)",
            "org.onlab.packet.ipv6.EncapSecurityPayload:org.onlab.packet.ipv6.EncapSecurityPayload lambda$deserializer$51(byte[],int,int)",
            "org.onlab.packet.ipv6.Fragment:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Fragment:org.onlab.packet.ipv6.Fragment lambda$deserializer$26(byte[],int,int)",
            "org.onlab.packet.ipv6.Routing:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Routing:org.onlab.packet.ipv6.Routing lambda$deserializer$50(byte[],int,int)",
            "org.onlab.packet.ndp.NeighborAdvertisement:org.onlab.packet.ndp.NeighborAdvertisement lambda$deserializer$1(byte[],int,int)",
            "org.onlab.packet.ndp.NeighborSolicitation:org.onlab.packet.ndp.NeighborSolicitation lambda$deserializer$42(byte[],int,int)",
            "org.onlab.packet.ndp.Redirect:org.onlab.packet.ndp.Redirect lambda$deserializer$47(byte[],int,int)",
            "org.onlab.packet.ndp.RouterAdvertisement:org.onlab.packet.ndp.RouterAdvertisement lambda$deserializer$41(byte[],int,int)",
            "org.onlab.packet.ndp.RouterSolicitation:org.onlab.packet.ndp.RouterSolicitation lambda$deserializer$44(byte[],int,int)"
        ]
    },
    "org.onlab.packet.Ethernet$lambda_deserializer_10__66:org.onlab.packet.IPacket deserialize(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.EAPOL:org.onlab.packet.EAPOL lambda$deserializer$53(byte[],int,int)",
            "org.onlab.packet.Ethernet:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.Ethernet:org.onlab.packet.Ethernet lambda$deserializer$10(byte[],int,int)",
            "org.onlab.packet.ICMP:org.onlab.packet.ICMP lambda$deserializer$29(byte[],int,int)",
            "org.onlab.packet.ICMP6:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ICMP6:org.onlab.packet.ICMP6 lambda$deserializer$40(byte[],int,int)",
            "org.onlab.packet.IGMP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IPv4:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IPv4:org.onlab.packet.IPv4 lambda$deserializer$24(byte[],int,int)",
            "org.onlab.packet.IPv6:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IPv6:org.onlab.packet.IPv6 lambda$deserializer$48(byte[],int,int)",
            "org.onlab.packet.MPLS:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.MPLS:org.onlab.packet.MPLS lambda$deserializer$12(byte[],int,int)",
            "org.onlab.packet.PIM:org.onlab.packet.PIM lambda$deserializer$49(byte[],int,int)",
            "org.onlab.packet.TCP:org.onlab.packet.TCP lambda$deserializer$39(byte[],int,int)",
            "org.onlab.packet.UDP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.UDP:org.onlab.packet.UDP lambda$deserializer$45(byte[],int,int)",
            "org.onlab.packet.ipv6.Authentication:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Authentication:org.onlab.packet.ipv6.Authentication lambda$deserializer$46(byte[],int,int)",
            "org.onlab.packet.ipv6.BaseOptions:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.BaseOptions:org.onlab.packet.ipv6.BaseOptions lambda$deserializer$13(byte[],int,int)",
            "org.onlab.packet.ipv6.EncapSecurityPayload:org.onlab.packet.ipv6.EncapSecurityPayload lambda$deserializer$51(byte[],int,int)",
            "org.onlab.packet.ipv6.Fragment:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Fragment:org.onlab.packet.ipv6.Fragment lambda$deserializer$26(byte[],int,int)",
            "org.onlab.packet.ipv6.Routing:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Routing:org.onlab.packet.ipv6.Routing lambda$deserializer$50(byte[],int,int)",
            "org.onlab.packet.ndp.NeighborAdvertisement:org.onlab.packet.ndp.NeighborAdvertisement lambda$deserializer$1(byte[],int,int)",
            "org.onlab.packet.ndp.NeighborSolicitation:org.onlab.packet.ndp.NeighborSolicitation lambda$deserializer$42(byte[],int,int)",
            "org.onlab.packet.ndp.Redirect:org.onlab.packet.ndp.Redirect lambda$deserializer$47(byte[],int,int)",
            "org.onlab.packet.ndp.RouterAdvertisement:org.onlab.packet.ndp.RouterAdvertisement lambda$deserializer$41(byte[],int,int)",
            "org.onlab.packet.ndp.RouterSolicitation:org.onlab.packet.ndp.RouterSolicitation lambda$deserializer$44(byte[],int,int)"
        ]
    },
    "org.onlab.packet.ICMP$lambda_deserializer_29__72:org.onlab.packet.IPacket deserialize(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.EAPOL:org.onlab.packet.EAPOL lambda$deserializer$53(byte[],int,int)",
            "org.onlab.packet.Ethernet:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.Ethernet:org.onlab.packet.Ethernet lambda$deserializer$10(byte[],int,int)",
            "org.onlab.packet.ICMP:org.onlab.packet.ICMP lambda$deserializer$29(byte[],int,int)",
            "org.onlab.packet.ICMP6:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ICMP6:org.onlab.packet.ICMP6 lambda$deserializer$40(byte[],int,int)",
            "org.onlab.packet.IGMP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IPv4:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IPv4:org.onlab.packet.IPv4 lambda$deserializer$24(byte[],int,int)",
            "org.onlab.packet.IPv6:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IPv6:org.onlab.packet.IPv6 lambda$deserializer$48(byte[],int,int)",
            "org.onlab.packet.MPLS:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.MPLS:org.onlab.packet.MPLS lambda$deserializer$12(byte[],int,int)",
            "org.onlab.packet.PIM:org.onlab.packet.PIM lambda$deserializer$49(byte[],int,int)",
            "org.onlab.packet.TCP:org.onlab.packet.TCP lambda$deserializer$39(byte[],int,int)",
            "org.onlab.packet.UDP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.UDP:org.onlab.packet.UDP lambda$deserializer$45(byte[],int,int)",
            "org.onlab.packet.ipv6.Authentication:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Authentication:org.onlab.packet.ipv6.Authentication lambda$deserializer$46(byte[],int,int)",
            "org.onlab.packet.ipv6.BaseOptions:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.BaseOptions:org.onlab.packet.ipv6.BaseOptions lambda$deserializer$13(byte[],int,int)",
            "org.onlab.packet.ipv6.EncapSecurityPayload:org.onlab.packet.ipv6.EncapSecurityPayload lambda$deserializer$51(byte[],int,int)",
            "org.onlab.packet.ipv6.Fragment:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Fragment:org.onlab.packet.ipv6.Fragment lambda$deserializer$26(byte[],int,int)",
            "org.onlab.packet.ipv6.Routing:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Routing:org.onlab.packet.ipv6.Routing lambda$deserializer$50(byte[],int,int)",
            "org.onlab.packet.ndp.NeighborAdvertisement:org.onlab.packet.ndp.NeighborAdvertisement lambda$deserializer$1(byte[],int,int)",
            "org.onlab.packet.ndp.NeighborSolicitation:org.onlab.packet.ndp.NeighborSolicitation lambda$deserializer$42(byte[],int,int)",
            "org.onlab.packet.ndp.Redirect:org.onlab.packet.ndp.Redirect lambda$deserializer$47(byte[],int,int)",
            "org.onlab.packet.ndp.RouterAdvertisement:org.onlab.packet.ndp.RouterAdvertisement lambda$deserializer$41(byte[],int,int)",
            "org.onlab.packet.ndp.RouterSolicitation:org.onlab.packet.ndp.RouterSolicitation lambda$deserializer$44(byte[],int,int)"
        ]
    },
    "org.onlab.packet.ICMP6$lambda_deserializer_40__73:org.onlab.packet.IPacket deserialize(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.EAPOL:org.onlab.packet.EAPOL lambda$deserializer$53(byte[],int,int)",
            "org.onlab.packet.Ethernet:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.Ethernet:org.onlab.packet.Ethernet lambda$deserializer$10(byte[],int,int)",
            "org.onlab.packet.ICMP:org.onlab.packet.ICMP lambda$deserializer$29(byte[],int,int)",
            "org.onlab.packet.ICMP6:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ICMP6:org.onlab.packet.ICMP6 lambda$deserializer$40(byte[],int,int)",
            "org.onlab.packet.IGMP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IPv4:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IPv4:org.onlab.packet.IPv4 lambda$deserializer$24(byte[],int,int)",
            "org.onlab.packet.IPv6:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IPv6:org.onlab.packet.IPv6 lambda$deserializer$48(byte[],int,int)",
            "org.onlab.packet.MPLS:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.MPLS:org.onlab.packet.MPLS lambda$deserializer$12(byte[],int,int)",
            "org.onlab.packet.PIM:org.onlab.packet.PIM lambda$deserializer$49(byte[],int,int)",
            "org.onlab.packet.TCP:org.onlab.packet.TCP lambda$deserializer$39(byte[],int,int)",
            "org.onlab.packet.UDP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.UDP:org.onlab.packet.UDP lambda$deserializer$45(byte[],int,int)",
            "org.onlab.packet.ipv6.Authentication:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Authentication:org.onlab.packet.ipv6.Authentication lambda$deserializer$46(byte[],int,int)",
            "org.onlab.packet.ipv6.BaseOptions:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.BaseOptions:org.onlab.packet.ipv6.BaseOptions lambda$deserializer$13(byte[],int,int)",
            "org.onlab.packet.ipv6.EncapSecurityPayload:org.onlab.packet.ipv6.EncapSecurityPayload lambda$deserializer$51(byte[],int,int)",
            "org.onlab.packet.ipv6.Fragment:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Fragment:org.onlab.packet.ipv6.Fragment lambda$deserializer$26(byte[],int,int)",
            "org.onlab.packet.ipv6.Routing:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Routing:org.onlab.packet.ipv6.Routing lambda$deserializer$50(byte[],int,int)",
            "org.onlab.packet.ndp.NeighborAdvertisement:org.onlab.packet.ndp.NeighborAdvertisement lambda$deserializer$1(byte[],int,int)",
            "org.onlab.packet.ndp.NeighborSolicitation:org.onlab.packet.ndp.NeighborSolicitation lambda$deserializer$42(byte[],int,int)",
            "org.onlab.packet.ndp.Redirect:org.onlab.packet.ndp.Redirect lambda$deserializer$47(byte[],int,int)",
            "org.onlab.packet.ndp.RouterAdvertisement:org.onlab.packet.ndp.RouterAdvertisement lambda$deserializer$41(byte[],int,int)",
            "org.onlab.packet.ndp.RouterSolicitation:org.onlab.packet.ndp.RouterSolicitation lambda$deserializer$44(byte[],int,int)"
        ]
    },
    "org.onlab.packet.IPv4$lambda_deserializer_24__80:org.onlab.packet.IPacket deserialize(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.EAPOL:org.onlab.packet.EAPOL lambda$deserializer$53(byte[],int,int)",
            "org.onlab.packet.Ethernet:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.Ethernet:org.onlab.packet.Ethernet lambda$deserializer$10(byte[],int,int)",
            "org.onlab.packet.ICMP:org.onlab.packet.ICMP lambda$deserializer$29(byte[],int,int)",
            "org.onlab.packet.ICMP6:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ICMP6:org.onlab.packet.ICMP6 lambda$deserializer$40(byte[],int,int)",
            "org.onlab.packet.IGMP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IPv4:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IPv4:org.onlab.packet.IPv4 lambda$deserializer$24(byte[],int,int)",
            "org.onlab.packet.IPv6:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IPv6:org.onlab.packet.IPv6 lambda$deserializer$48(byte[],int,int)",
            "org.onlab.packet.MPLS:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.MPLS:org.onlab.packet.MPLS lambda$deserializer$12(byte[],int,int)",
            "org.onlab.packet.PIM:org.onlab.packet.PIM lambda$deserializer$49(byte[],int,int)",
            "org.onlab.packet.TCP:org.onlab.packet.TCP lambda$deserializer$39(byte[],int,int)",
            "org.onlab.packet.UDP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.UDP:org.onlab.packet.UDP lambda$deserializer$45(byte[],int,int)",
            "org.onlab.packet.ipv6.Authentication:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Authentication:org.onlab.packet.ipv6.Authentication lambda$deserializer$46(byte[],int,int)",
            "org.onlab.packet.ipv6.BaseOptions:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.BaseOptions:org.onlab.packet.ipv6.BaseOptions lambda$deserializer$13(byte[],int,int)",
            "org.onlab.packet.ipv6.EncapSecurityPayload:org.onlab.packet.ipv6.EncapSecurityPayload lambda$deserializer$51(byte[],int,int)",
            "org.onlab.packet.ipv6.Fragment:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Fragment:org.onlab.packet.ipv6.Fragment lambda$deserializer$26(byte[],int,int)",
            "org.onlab.packet.ipv6.Routing:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Routing:org.onlab.packet.ipv6.Routing lambda$deserializer$50(byte[],int,int)",
            "org.onlab.packet.ndp.NeighborAdvertisement:org.onlab.packet.ndp.NeighborAdvertisement lambda$deserializer$1(byte[],int,int)",
            "org.onlab.packet.ndp.NeighborSolicitation:org.onlab.packet.ndp.NeighborSolicitation lambda$deserializer$42(byte[],int,int)",
            "org.onlab.packet.ndp.Redirect:org.onlab.packet.ndp.Redirect lambda$deserializer$47(byte[],int,int)",
            "org.onlab.packet.ndp.RouterAdvertisement:org.onlab.packet.ndp.RouterAdvertisement lambda$deserializer$41(byte[],int,int)",
            "org.onlab.packet.ndp.RouterSolicitation:org.onlab.packet.ndp.RouterSolicitation lambda$deserializer$44(byte[],int,int)"
        ]
    },
    "org.onlab.packet.IPv6$lambda_deserializer_48__79:org.onlab.packet.IPacket deserialize(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.EAPOL:org.onlab.packet.EAPOL lambda$deserializer$53(byte[],int,int)",
            "org.onlab.packet.Ethernet:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.Ethernet:org.onlab.packet.Ethernet lambda$deserializer$10(byte[],int,int)",
            "org.onlab.packet.ICMP:org.onlab.packet.ICMP lambda$deserializer$29(byte[],int,int)",
            "org.onlab.packet.ICMP6:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ICMP6:org.onlab.packet.ICMP6 lambda$deserializer$40(byte[],int,int)",
            "org.onlab.packet.IGMP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IPv4:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IPv4:org.onlab.packet.IPv4 lambda$deserializer$24(byte[],int,int)",
            "org.onlab.packet.IPv6:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IPv6:org.onlab.packet.IPv6 lambda$deserializer$48(byte[],int,int)",
            "org.onlab.packet.MPLS:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.MPLS:org.onlab.packet.MPLS lambda$deserializer$12(byte[],int,int)",
            "org.onlab.packet.PIM:org.onlab.packet.PIM lambda$deserializer$49(byte[],int,int)",
            "org.onlab.packet.TCP:org.onlab.packet.TCP lambda$deserializer$39(byte[],int,int)",
            "org.onlab.packet.UDP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.UDP:org.onlab.packet.UDP lambda$deserializer$45(byte[],int,int)",
            "org.onlab.packet.ipv6.Authentication:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Authentication:org.onlab.packet.ipv6.Authentication lambda$deserializer$46(byte[],int,int)",
            "org.onlab.packet.ipv6.BaseOptions:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.BaseOptions:org.onlab.packet.ipv6.BaseOptions lambda$deserializer$13(byte[],int,int)",
            "org.onlab.packet.ipv6.EncapSecurityPayload:org.onlab.packet.ipv6.EncapSecurityPayload lambda$deserializer$51(byte[],int,int)",
            "org.onlab.packet.ipv6.Fragment:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Fragment:org.onlab.packet.ipv6.Fragment lambda$deserializer$26(byte[],int,int)",
            "org.onlab.packet.ipv6.Routing:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Routing:org.onlab.packet.ipv6.Routing lambda$deserializer$50(byte[],int,int)",
            "org.onlab.packet.ndp.NeighborAdvertisement:org.onlab.packet.ndp.NeighborAdvertisement lambda$deserializer$1(byte[],int,int)",
            "org.onlab.packet.ndp.NeighborSolicitation:org.onlab.packet.ndp.NeighborSolicitation lambda$deserializer$42(byte[],int,int)",
            "org.onlab.packet.ndp.Redirect:org.onlab.packet.ndp.Redirect lambda$deserializer$47(byte[],int,int)",
            "org.onlab.packet.ndp.RouterAdvertisement:org.onlab.packet.ndp.RouterAdvertisement lambda$deserializer$41(byte[],int,int)",
            "org.onlab.packet.ndp.RouterSolicitation:org.onlab.packet.ndp.RouterSolicitation lambda$deserializer$44(byte[],int,int)"
        ]
    },
    "org.onlab.packet.MPLS$lambda_deserializer_12__83:org.onlab.packet.IPacket deserialize(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.EAPOL:org.onlab.packet.EAPOL lambda$deserializer$53(byte[],int,int)",
            "org.onlab.packet.Ethernet:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.Ethernet:org.onlab.packet.Ethernet lambda$deserializer$10(byte[],int,int)",
            "org.onlab.packet.ICMP:org.onlab.packet.ICMP lambda$deserializer$29(byte[],int,int)",
            "org.onlab.packet.ICMP6:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ICMP6:org.onlab.packet.ICMP6 lambda$deserializer$40(byte[],int,int)",
            "org.onlab.packet.IGMP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IPv4:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IPv4:org.onlab.packet.IPv4 lambda$deserializer$24(byte[],int,int)",
            "org.onlab.packet.IPv6:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IPv6:org.onlab.packet.IPv6 lambda$deserializer$48(byte[],int,int)",
            "org.onlab.packet.MPLS:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.MPLS:org.onlab.packet.MPLS lambda$deserializer$12(byte[],int,int)",
            "org.onlab.packet.PIM:org.onlab.packet.PIM lambda$deserializer$49(byte[],int,int)",
            "org.onlab.packet.TCP:org.onlab.packet.TCP lambda$deserializer$39(byte[],int,int)",
            "org.onlab.packet.UDP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.UDP:org.onlab.packet.UDP lambda$deserializer$45(byte[],int,int)",
            "org.onlab.packet.ipv6.Authentication:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Authentication:org.onlab.packet.ipv6.Authentication lambda$deserializer$46(byte[],int,int)",
            "org.onlab.packet.ipv6.BaseOptions:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.BaseOptions:org.onlab.packet.ipv6.BaseOptions lambda$deserializer$13(byte[],int,int)",
            "org.onlab.packet.ipv6.EncapSecurityPayload:org.onlab.packet.ipv6.EncapSecurityPayload lambda$deserializer$51(byte[],int,int)",
            "org.onlab.packet.ipv6.Fragment:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Fragment:org.onlab.packet.ipv6.Fragment lambda$deserializer$26(byte[],int,int)",
            "org.onlab.packet.ipv6.Routing:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Routing:org.onlab.packet.ipv6.Routing lambda$deserializer$50(byte[],int,int)",
            "org.onlab.packet.ndp.NeighborAdvertisement:org.onlab.packet.ndp.NeighborAdvertisement lambda$deserializer$1(byte[],int,int)",
            "org.onlab.packet.ndp.NeighborSolicitation:org.onlab.packet.ndp.NeighborSolicitation lambda$deserializer$42(byte[],int,int)",
            "org.onlab.packet.ndp.Redirect:org.onlab.packet.ndp.Redirect lambda$deserializer$47(byte[],int,int)",
            "org.onlab.packet.ndp.RouterAdvertisement:org.onlab.packet.ndp.RouterAdvertisement lambda$deserializer$41(byte[],int,int)",
            "org.onlab.packet.ndp.RouterSolicitation:org.onlab.packet.ndp.RouterSolicitation lambda$deserializer$44(byte[],int,int)"
        ]
    },
    "org.onlab.packet.PIM$lambda_deserializer_49__90:org.onlab.packet.IPacket deserialize(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.EAPOL:org.onlab.packet.EAPOL lambda$deserializer$53(byte[],int,int)",
            "org.onlab.packet.Ethernet:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.Ethernet:org.onlab.packet.Ethernet lambda$deserializer$10(byte[],int,int)",
            "org.onlab.packet.ICMP:org.onlab.packet.ICMP lambda$deserializer$29(byte[],int,int)",
            "org.onlab.packet.ICMP6:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ICMP6:org.onlab.packet.ICMP6 lambda$deserializer$40(byte[],int,int)",
            "org.onlab.packet.IGMP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IPv4:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IPv4:org.onlab.packet.IPv4 lambda$deserializer$24(byte[],int,int)",
            "org.onlab.packet.IPv6:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IPv6:org.onlab.packet.IPv6 lambda$deserializer$48(byte[],int,int)",
            "org.onlab.packet.MPLS:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.MPLS:org.onlab.packet.MPLS lambda$deserializer$12(byte[],int,int)",
            "org.onlab.packet.PIM:org.onlab.packet.PIM lambda$deserializer$49(byte[],int,int)",
            "org.onlab.packet.TCP:org.onlab.packet.TCP lambda$deserializer$39(byte[],int,int)",
            "org.onlab.packet.UDP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.UDP:org.onlab.packet.UDP lambda$deserializer$45(byte[],int,int)",
            "org.onlab.packet.ipv6.Authentication:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Authentication:org.onlab.packet.ipv6.Authentication lambda$deserializer$46(byte[],int,int)",
            "org.onlab.packet.ipv6.BaseOptions:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.BaseOptions:org.onlab.packet.ipv6.BaseOptions lambda$deserializer$13(byte[],int,int)",
            "org.onlab.packet.ipv6.EncapSecurityPayload:org.onlab.packet.ipv6.EncapSecurityPayload lambda$deserializer$51(byte[],int,int)",
            "org.onlab.packet.ipv6.Fragment:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Fragment:org.onlab.packet.ipv6.Fragment lambda$deserializer$26(byte[],int,int)",
            "org.onlab.packet.ipv6.Routing:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Routing:org.onlab.packet.ipv6.Routing lambda$deserializer$50(byte[],int,int)",
            "org.onlab.packet.ndp.NeighborAdvertisement:org.onlab.packet.ndp.NeighborAdvertisement lambda$deserializer$1(byte[],int,int)",
            "org.onlab.packet.ndp.NeighborSolicitation:org.onlab.packet.ndp.NeighborSolicitation lambda$deserializer$42(byte[],int,int)",
            "org.onlab.packet.ndp.Redirect:org.onlab.packet.ndp.Redirect lambda$deserializer$47(byte[],int,int)",
            "org.onlab.packet.ndp.RouterAdvertisement:org.onlab.packet.ndp.RouterAdvertisement lambda$deserializer$41(byte[],int,int)",
            "org.onlab.packet.ndp.RouterSolicitation:org.onlab.packet.ndp.RouterSolicitation lambda$deserializer$44(byte[],int,int)"
        ]
    },
    "org.onlab.packet.TCP$lambda_deserializer_39__69:org.onlab.packet.IPacket deserialize(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.EAPOL:org.onlab.packet.EAPOL lambda$deserializer$53(byte[],int,int)",
            "org.onlab.packet.Ethernet:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.Ethernet:org.onlab.packet.Ethernet lambda$deserializer$10(byte[],int,int)",
            "org.onlab.packet.ICMP:org.onlab.packet.ICMP lambda$deserializer$29(byte[],int,int)",
            "org.onlab.packet.ICMP6:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ICMP6:org.onlab.packet.ICMP6 lambda$deserializer$40(byte[],int,int)",
            "org.onlab.packet.IGMP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IPv4:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IPv4:org.onlab.packet.IPv4 lambda$deserializer$24(byte[],int,int)",
            "org.onlab.packet.IPv6:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IPv6:org.onlab.packet.IPv6 lambda$deserializer$48(byte[],int,int)",
            "org.onlab.packet.MPLS:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.MPLS:org.onlab.packet.MPLS lambda$deserializer$12(byte[],int,int)",
            "org.onlab.packet.PIM:org.onlab.packet.PIM lambda$deserializer$49(byte[],int,int)",
            "org.onlab.packet.TCP:org.onlab.packet.TCP lambda$deserializer$39(byte[],int,int)",
            "org.onlab.packet.UDP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.UDP:org.onlab.packet.UDP lambda$deserializer$45(byte[],int,int)",
            "org.onlab.packet.ipv6.Authentication:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Authentication:org.onlab.packet.ipv6.Authentication lambda$deserializer$46(byte[],int,int)",
            "org.onlab.packet.ipv6.BaseOptions:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.BaseOptions:org.onlab.packet.ipv6.BaseOptions lambda$deserializer$13(byte[],int,int)",
            "org.onlab.packet.ipv6.EncapSecurityPayload:org.onlab.packet.ipv6.EncapSecurityPayload lambda$deserializer$51(byte[],int,int)",
            "org.onlab.packet.ipv6.Fragment:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Fragment:org.onlab.packet.ipv6.Fragment lambda$deserializer$26(byte[],int,int)",
            "org.onlab.packet.ipv6.Routing:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Routing:org.onlab.packet.ipv6.Routing lambda$deserializer$50(byte[],int,int)",
            "org.onlab.packet.ndp.NeighborAdvertisement:org.onlab.packet.ndp.NeighborAdvertisement lambda$deserializer$1(byte[],int,int)",
            "org.onlab.packet.ndp.NeighborSolicitation:org.onlab.packet.ndp.NeighborSolicitation lambda$deserializer$42(byte[],int,int)",
            "org.onlab.packet.ndp.Redirect:org.onlab.packet.ndp.Redirect lambda$deserializer$47(byte[],int,int)",
            "org.onlab.packet.ndp.RouterAdvertisement:org.onlab.packet.ndp.RouterAdvertisement lambda$deserializer$41(byte[],int,int)",
            "org.onlab.packet.ndp.RouterSolicitation:org.onlab.packet.ndp.RouterSolicitation lambda$deserializer$44(byte[],int,int)"
        ]
    },
    "org.onlab.packet.UDP$lambda_deserializer_45__78:org.onlab.packet.IPacket deserialize(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.EAPOL:org.onlab.packet.EAPOL lambda$deserializer$53(byte[],int,int)",
            "org.onlab.packet.Ethernet:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.Ethernet:org.onlab.packet.Ethernet lambda$deserializer$10(byte[],int,int)",
            "org.onlab.packet.ICMP:org.onlab.packet.ICMP lambda$deserializer$29(byte[],int,int)",
            "org.onlab.packet.ICMP6:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ICMP6:org.onlab.packet.ICMP6 lambda$deserializer$40(byte[],int,int)",
            "org.onlab.packet.IGMP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IPv4:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IPv4:org.onlab.packet.IPv4 lambda$deserializer$24(byte[],int,int)",
            "org.onlab.packet.IPv6:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IPv6:org.onlab.packet.IPv6 lambda$deserializer$48(byte[],int,int)",
            "org.onlab.packet.MPLS:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.MPLS:org.onlab.packet.MPLS lambda$deserializer$12(byte[],int,int)",
            "org.onlab.packet.PIM:org.onlab.packet.PIM lambda$deserializer$49(byte[],int,int)",
            "org.onlab.packet.TCP:org.onlab.packet.TCP lambda$deserializer$39(byte[],int,int)",
            "org.onlab.packet.UDP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.UDP:org.onlab.packet.UDP lambda$deserializer$45(byte[],int,int)",
            "org.onlab.packet.ipv6.Authentication:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Authentication:org.onlab.packet.ipv6.Authentication lambda$deserializer$46(byte[],int,int)",
            "org.onlab.packet.ipv6.BaseOptions:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.BaseOptions:org.onlab.packet.ipv6.BaseOptions lambda$deserializer$13(byte[],int,int)",
            "org.onlab.packet.ipv6.EncapSecurityPayload:org.onlab.packet.ipv6.EncapSecurityPayload lambda$deserializer$51(byte[],int,int)",
            "org.onlab.packet.ipv6.Fragment:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Fragment:org.onlab.packet.ipv6.Fragment lambda$deserializer$26(byte[],int,int)",
            "org.onlab.packet.ipv6.Routing:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Routing:org.onlab.packet.ipv6.Routing lambda$deserializer$50(byte[],int,int)",
            "org.onlab.packet.ndp.NeighborAdvertisement:org.onlab.packet.ndp.NeighborAdvertisement lambda$deserializer$1(byte[],int,int)",
            "org.onlab.packet.ndp.NeighborSolicitation:org.onlab.packet.ndp.NeighborSolicitation lambda$deserializer$42(byte[],int,int)",
            "org.onlab.packet.ndp.Redirect:org.onlab.packet.ndp.Redirect lambda$deserializer$47(byte[],int,int)",
            "org.onlab.packet.ndp.RouterAdvertisement:org.onlab.packet.ndp.RouterAdvertisement lambda$deserializer$41(byte[],int,int)",
            "org.onlab.packet.ndp.RouterSolicitation:org.onlab.packet.ndp.RouterSolicitation lambda$deserializer$44(byte[],int,int)"
        ]
    },
    "org.onlab.packet.ipv6.Authentication$lambda_deserializer_46__86:org.onlab.packet.IPacket deserialize(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.EAPOL:org.onlab.packet.EAPOL lambda$deserializer$53(byte[],int,int)",
            "org.onlab.packet.Ethernet:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.Ethernet:org.onlab.packet.Ethernet lambda$deserializer$10(byte[],int,int)",
            "org.onlab.packet.ICMP:org.onlab.packet.ICMP lambda$deserializer$29(byte[],int,int)",
            "org.onlab.packet.ICMP6:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ICMP6:org.onlab.packet.ICMP6 lambda$deserializer$40(byte[],int,int)",
            "org.onlab.packet.IGMP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IPv4:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IPv4:org.onlab.packet.IPv4 lambda$deserializer$24(byte[],int,int)",
            "org.onlab.packet.IPv6:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IPv6:org.onlab.packet.IPv6 lambda$deserializer$48(byte[],int,int)",
            "org.onlab.packet.MPLS:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.MPLS:org.onlab.packet.MPLS lambda$deserializer$12(byte[],int,int)",
            "org.onlab.packet.PIM:org.onlab.packet.PIM lambda$deserializer$49(byte[],int,int)",
            "org.onlab.packet.TCP:org.onlab.packet.TCP lambda$deserializer$39(byte[],int,int)",
            "org.onlab.packet.UDP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.UDP:org.onlab.packet.UDP lambda$deserializer$45(byte[],int,int)",
            "org.onlab.packet.ipv6.Authentication:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Authentication:org.onlab.packet.ipv6.Authentication lambda$deserializer$46(byte[],int,int)",
            "org.onlab.packet.ipv6.BaseOptions:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.BaseOptions:org.onlab.packet.ipv6.BaseOptions lambda$deserializer$13(byte[],int,int)",
            "org.onlab.packet.ipv6.EncapSecurityPayload:org.onlab.packet.ipv6.EncapSecurityPayload lambda$deserializer$51(byte[],int,int)",
            "org.onlab.packet.ipv6.Fragment:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Fragment:org.onlab.packet.ipv6.Fragment lambda$deserializer$26(byte[],int,int)",
            "org.onlab.packet.ipv6.Routing:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Routing:org.onlab.packet.ipv6.Routing lambda$deserializer$50(byte[],int,int)",
            "org.onlab.packet.ndp.NeighborAdvertisement:org.onlab.packet.ndp.NeighborAdvertisement lambda$deserializer$1(byte[],int,int)",
            "org.onlab.packet.ndp.NeighborSolicitation:org.onlab.packet.ndp.NeighborSolicitation lambda$deserializer$42(byte[],int,int)",
            "org.onlab.packet.ndp.Redirect:org.onlab.packet.ndp.Redirect lambda$deserializer$47(byte[],int,int)",
            "org.onlab.packet.ndp.RouterAdvertisement:org.onlab.packet.ndp.RouterAdvertisement lambda$deserializer$41(byte[],int,int)",
            "org.onlab.packet.ndp.RouterSolicitation:org.onlab.packet.ndp.RouterSolicitation lambda$deserializer$44(byte[],int,int)"
        ]
    },
    "org.onlab.packet.ipv6.BaseOptions$lambda_deserializer_13__92:org.onlab.packet.IPacket deserialize(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.EAPOL:org.onlab.packet.EAPOL lambda$deserializer$53(byte[],int,int)",
            "org.onlab.packet.Ethernet:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.Ethernet:org.onlab.packet.Ethernet lambda$deserializer$10(byte[],int,int)",
            "org.onlab.packet.ICMP:org.onlab.packet.ICMP lambda$deserializer$29(byte[],int,int)",
            "org.onlab.packet.ICMP6:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ICMP6:org.onlab.packet.ICMP6 lambda$deserializer$40(byte[],int,int)",
            "org.onlab.packet.IGMP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IPv4:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IPv4:org.onlab.packet.IPv4 lambda$deserializer$24(byte[],int,int)",
            "org.onlab.packet.IPv6:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IPv6:org.onlab.packet.IPv6 lambda$deserializer$48(byte[],int,int)",
            "org.onlab.packet.MPLS:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.MPLS:org.onlab.packet.MPLS lambda$deserializer$12(byte[],int,int)",
            "org.onlab.packet.PIM:org.onlab.packet.PIM lambda$deserializer$49(byte[],int,int)",
            "org.onlab.packet.TCP:org.onlab.packet.TCP lambda$deserializer$39(byte[],int,int)",
            "org.onlab.packet.UDP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.UDP:org.onlab.packet.UDP lambda$deserializer$45(byte[],int,int)",
            "org.onlab.packet.ipv6.Authentication:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Authentication:org.onlab.packet.ipv6.Authentication lambda$deserializer$46(byte[],int,int)",
            "org.onlab.packet.ipv6.BaseOptions:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.BaseOptions:org.onlab.packet.ipv6.BaseOptions lambda$deserializer$13(byte[],int,int)",
            "org.onlab.packet.ipv6.EncapSecurityPayload:org.onlab.packet.ipv6.EncapSecurityPayload lambda$deserializer$51(byte[],int,int)",
            "org.onlab.packet.ipv6.Fragment:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Fragment:org.onlab.packet.ipv6.Fragment lambda$deserializer$26(byte[],int,int)",
            "org.onlab.packet.ipv6.Routing:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Routing:org.onlab.packet.ipv6.Routing lambda$deserializer$50(byte[],int,int)",
            "org.onlab.packet.ndp.NeighborAdvertisement:org.onlab.packet.ndp.NeighborAdvertisement lambda$deserializer$1(byte[],int,int)",
            "org.onlab.packet.ndp.NeighborSolicitation:org.onlab.packet.ndp.NeighborSolicitation lambda$deserializer$42(byte[],int,int)",
            "org.onlab.packet.ndp.Redirect:org.onlab.packet.ndp.Redirect lambda$deserializer$47(byte[],int,int)",
            "org.onlab.packet.ndp.RouterAdvertisement:org.onlab.packet.ndp.RouterAdvertisement lambda$deserializer$41(byte[],int,int)",
            "org.onlab.packet.ndp.RouterSolicitation:org.onlab.packet.ndp.RouterSolicitation lambda$deserializer$44(byte[],int,int)"
        ]
    },
    "org.onlab.packet.ipv6.EncapSecurityPayload$lambda_deserializer_51__88:org.onlab.packet.IPacket deserialize(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.EAPOL:org.onlab.packet.EAPOL lambda$deserializer$53(byte[],int,int)",
            "org.onlab.packet.Ethernet:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.Ethernet:org.onlab.packet.Ethernet lambda$deserializer$10(byte[],int,int)",
            "org.onlab.packet.ICMP:org.onlab.packet.ICMP lambda$deserializer$29(byte[],int,int)",
            "org.onlab.packet.ICMP6:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ICMP6:org.onlab.packet.ICMP6 lambda$deserializer$40(byte[],int,int)",
            "org.onlab.packet.IGMP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IPv4:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IPv4:org.onlab.packet.IPv4 lambda$deserializer$24(byte[],int,int)",
            "org.onlab.packet.IPv6:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IPv6:org.onlab.packet.IPv6 lambda$deserializer$48(byte[],int,int)",
            "org.onlab.packet.MPLS:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.MPLS:org.onlab.packet.MPLS lambda$deserializer$12(byte[],int,int)",
            "org.onlab.packet.PIM:org.onlab.packet.PIM lambda$deserializer$49(byte[],int,int)",
            "org.onlab.packet.TCP:org.onlab.packet.TCP lambda$deserializer$39(byte[],int,int)",
            "org.onlab.packet.UDP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.UDP:org.onlab.packet.UDP lambda$deserializer$45(byte[],int,int)",
            "org.onlab.packet.ipv6.Authentication:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Authentication:org.onlab.packet.ipv6.Authentication lambda$deserializer$46(byte[],int,int)",
            "org.onlab.packet.ipv6.BaseOptions:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.BaseOptions:org.onlab.packet.ipv6.BaseOptions lambda$deserializer$13(byte[],int,int)",
            "org.onlab.packet.ipv6.EncapSecurityPayload:org.onlab.packet.ipv6.EncapSecurityPayload lambda$deserializer$51(byte[],int,int)",
            "org.onlab.packet.ipv6.Fragment:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Fragment:org.onlab.packet.ipv6.Fragment lambda$deserializer$26(byte[],int,int)",
            "org.onlab.packet.ipv6.Routing:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Routing:org.onlab.packet.ipv6.Routing lambda$deserializer$50(byte[],int,int)",
            "org.onlab.packet.ndp.NeighborAdvertisement:org.onlab.packet.ndp.NeighborAdvertisement lambda$deserializer$1(byte[],int,int)",
            "org.onlab.packet.ndp.NeighborSolicitation:org.onlab.packet.ndp.NeighborSolicitation lambda$deserializer$42(byte[],int,int)",
            "org.onlab.packet.ndp.Redirect:org.onlab.packet.ndp.Redirect lambda$deserializer$47(byte[],int,int)",
            "org.onlab.packet.ndp.RouterAdvertisement:org.onlab.packet.ndp.RouterAdvertisement lambda$deserializer$41(byte[],int,int)",
            "org.onlab.packet.ndp.RouterSolicitation:org.onlab.packet.ndp.RouterSolicitation lambda$deserializer$44(byte[],int,int)"
        ]
    },
    "org.onlab.packet.ipv6.Fragment$lambda_deserializer_26__87:org.onlab.packet.IPacket deserialize(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.EAPOL:org.onlab.packet.EAPOL lambda$deserializer$53(byte[],int,int)",
            "org.onlab.packet.Ethernet:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.Ethernet:org.onlab.packet.Ethernet lambda$deserializer$10(byte[],int,int)",
            "org.onlab.packet.ICMP:org.onlab.packet.ICMP lambda$deserializer$29(byte[],int,int)",
            "org.onlab.packet.ICMP6:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ICMP6:org.onlab.packet.ICMP6 lambda$deserializer$40(byte[],int,int)",
            "org.onlab.packet.IGMP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IPv4:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IPv4:org.onlab.packet.IPv4 lambda$deserializer$24(byte[],int,int)",
            "org.onlab.packet.IPv6:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IPv6:org.onlab.packet.IPv6 lambda$deserializer$48(byte[],int,int)",
            "org.onlab.packet.MPLS:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.MPLS:org.onlab.packet.MPLS lambda$deserializer$12(byte[],int,int)",
            "org.onlab.packet.PIM:org.onlab.packet.PIM lambda$deserializer$49(byte[],int,int)",
            "org.onlab.packet.TCP:org.onlab.packet.TCP lambda$deserializer$39(byte[],int,int)",
            "org.onlab.packet.UDP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.UDP:org.onlab.packet.UDP lambda$deserializer$45(byte[],int,int)",
            "org.onlab.packet.ipv6.Authentication:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Authentication:org.onlab.packet.ipv6.Authentication lambda$deserializer$46(byte[],int,int)",
            "org.onlab.packet.ipv6.BaseOptions:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.BaseOptions:org.onlab.packet.ipv6.BaseOptions lambda$deserializer$13(byte[],int,int)",
            "org.onlab.packet.ipv6.EncapSecurityPayload:org.onlab.packet.ipv6.EncapSecurityPayload lambda$deserializer$51(byte[],int,int)",
            "org.onlab.packet.ipv6.Fragment:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Fragment:org.onlab.packet.ipv6.Fragment lambda$deserializer$26(byte[],int,int)",
            "org.onlab.packet.ipv6.Routing:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Routing:org.onlab.packet.ipv6.Routing lambda$deserializer$50(byte[],int,int)",
            "org.onlab.packet.ndp.NeighborAdvertisement:org.onlab.packet.ndp.NeighborAdvertisement lambda$deserializer$1(byte[],int,int)",
            "org.onlab.packet.ndp.NeighborSolicitation:org.onlab.packet.ndp.NeighborSolicitation lambda$deserializer$42(byte[],int,int)",
            "org.onlab.packet.ndp.Redirect:org.onlab.packet.ndp.Redirect lambda$deserializer$47(byte[],int,int)",
            "org.onlab.packet.ndp.RouterAdvertisement:org.onlab.packet.ndp.RouterAdvertisement lambda$deserializer$41(byte[],int,int)",
            "org.onlab.packet.ndp.RouterSolicitation:org.onlab.packet.ndp.RouterSolicitation lambda$deserializer$44(byte[],int,int)"
        ]
    },
    "org.onlab.packet.ipv6.Routing$lambda_deserializer_50__85:org.onlab.packet.IPacket deserialize(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.EAPOL:org.onlab.packet.EAPOL lambda$deserializer$53(byte[],int,int)",
            "org.onlab.packet.Ethernet:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.Ethernet:org.onlab.packet.Ethernet lambda$deserializer$10(byte[],int,int)",
            "org.onlab.packet.ICMP:org.onlab.packet.ICMP lambda$deserializer$29(byte[],int,int)",
            "org.onlab.packet.ICMP6:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ICMP6:org.onlab.packet.ICMP6 lambda$deserializer$40(byte[],int,int)",
            "org.onlab.packet.IGMP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IPv4:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IPv4:org.onlab.packet.IPv4 lambda$deserializer$24(byte[],int,int)",
            "org.onlab.packet.IPv6:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IPv6:org.onlab.packet.IPv6 lambda$deserializer$48(byte[],int,int)",
            "org.onlab.packet.MPLS:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.MPLS:org.onlab.packet.MPLS lambda$deserializer$12(byte[],int,int)",
            "org.onlab.packet.PIM:org.onlab.packet.PIM lambda$deserializer$49(byte[],int,int)",
            "org.onlab.packet.TCP:org.onlab.packet.TCP lambda$deserializer$39(byte[],int,int)",
            "org.onlab.packet.UDP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.UDP:org.onlab.packet.UDP lambda$deserializer$45(byte[],int,int)",
            "org.onlab.packet.ipv6.Authentication:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Authentication:org.onlab.packet.ipv6.Authentication lambda$deserializer$46(byte[],int,int)",
            "org.onlab.packet.ipv6.BaseOptions:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.BaseOptions:org.onlab.packet.ipv6.BaseOptions lambda$deserializer$13(byte[],int,int)",
            "org.onlab.packet.ipv6.EncapSecurityPayload:org.onlab.packet.ipv6.EncapSecurityPayload lambda$deserializer$51(byte[],int,int)",
            "org.onlab.packet.ipv6.Fragment:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Fragment:org.onlab.packet.ipv6.Fragment lambda$deserializer$26(byte[],int,int)",
            "org.onlab.packet.ipv6.Routing:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Routing:org.onlab.packet.ipv6.Routing lambda$deserializer$50(byte[],int,int)",
            "org.onlab.packet.ndp.NeighborAdvertisement:org.onlab.packet.ndp.NeighborAdvertisement lambda$deserializer$1(byte[],int,int)",
            "org.onlab.packet.ndp.NeighborSolicitation:org.onlab.packet.ndp.NeighborSolicitation lambda$deserializer$42(byte[],int,int)",
            "org.onlab.packet.ndp.Redirect:org.onlab.packet.ndp.Redirect lambda$deserializer$47(byte[],int,int)",
            "org.onlab.packet.ndp.RouterAdvertisement:org.onlab.packet.ndp.RouterAdvertisement lambda$deserializer$41(byte[],int,int)",
            "org.onlab.packet.ndp.RouterSolicitation:org.onlab.packet.ndp.RouterSolicitation lambda$deserializer$44(byte[],int,int)"
        ]
    },
    "org.onlab.stc.Compiler:org.onlab.stc.Step getStep(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Compiler:void lambda$compileRequirements$7(org.onlab.stc.Step,java.lang.String)",
            "org.onlab.stc.Compiler:void lambda$compileRequirements$6(java.lang.String,java.lang.String)",
            "org.onlab.stc.MonitorLayout:org.onlab.stc.MonitorLayout$Box get(java.lang.String)"
        ]
    },
    "org.onlab.stc.Compiler:org.onlab.stc.Step getStep(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Compiler:void processDependency(org.apache.commons.configuration.HierarchicalConfiguration,java.lang.String)"
        ]
    },
    "org.onlab.stc.Coordinator:java.lang.String substitute(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Coordinator:void execute(org.onlab.stc.Step)"
        ]
    },
    "org.onlab.stc.MonitorLayout:boolean visit(org.onlab.stc.Step,int,int,org.onlab.stc.Group)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.MonitorLayout:boolean lambda$follow$25(int,int,org.onlab.stc.Group,org.onlab.stc.Dependency)",
            "org.onlab.stc.MonitorLayout:void lambda$computeLayout$23(int,org.onlab.stc.Group,org.onlab.stc.Step)"
        ]
    },
    "org.onlab.stc.MonitorLayout:int bottomMostTier(org.onlab.stc.Step)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.stc.MonitorLayout:org.onlab.stc.MonitorLayout$Box get(org.onlab.stc.Step)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Monitor:void add(org.onlab.stc.Step,com.fasterxml.jackson.databind.node.ArrayNode)",
            "org.onlab.stc.MonitorLayout:org.onlab.stc.MonitorLayout$Box get(java.lang.String)"
        ]
    },
    "org.onlab.stc.MonitorLayout:int lambda$computeBreadth$28(org.onlab.stc.Step)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.stc.ScenarioStore:org.onlab.stc.Coordinator$Status getStatus(org.onlab.stc.Step)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Coordinator:org.onlab.stc.Coordinator$Status getStatus(org.onlab.stc.Step)",
            "org.onlab.stc.Coordinator:org.onlab.stc.Coordinator$Directive nextAction(org.onlab.stc.Step)",
            "org.onlab.stc.Coordinator:void completeParentIfNeeded(org.onlab.stc.Group)"
        ]
    },
    "org.onlab.graph.AbstractGraphPathSearch$DefaultResult:boolean hasCost(org.onlab.graph.Vertex)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.graph.BellmanFordGraphSearch:org.onlab.graph.GraphPathSearch$Result search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)",
            "org.onlab.graph.BreadthFirstSearch:org.onlab.graph.GraphPathSearch$Result search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)",
            "org.onlab.graph.DepthFirstSearch:org.onlab.graph.DepthFirstSearch$SpanningTreeResult search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)"
        ]
    },
    "org.onlab.graph.AbstractGraphPathSearch$DefaultResult:double cost(org.onlab.graph.Vertex)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.graph.AbstractGraphPathSearch$DefaultResult:boolean relaxEdge(org.onlab.graph.Edge,double,org.onlab.graph.EdgeWeight,boolean[])",
            "org.onlab.graph.AbstractGraphPathSearch:void buildAllPaths(org.onlab.graph.AbstractGraphPathSearch$DefaultResult,org.onlab.graph.Vertex,org.onlab.graph.Vertex,int)",
            "org.onlab.graph.BellmanFordGraphSearch:org.onlab.graph.GraphPathSearch$Result search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)",
            "org.onlab.graph.BreadthFirstSearch:org.onlab.graph.GraphPathSearch$Result search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)",
            "org.onlab.graph.DepthFirstSearch:org.onlab.graph.DepthFirstSearch$SpanningTreeResult search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)",
            "org.onlab.graph.DijkstraGraphSearch$PathCostComparator:int compare(org.onlab.graph.Vertex,org.onlab.graph.Vertex)",
            "org.onlab.graph.DijkstraGraphSearch:org.onlab.graph.GraphPathSearch$Result search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)",
            "org.onlab.graph.SuurballeGraphSearch:double lambda$search$16(org.onlab.graph.EdgeWeight,org.onlab.graph.AbstractGraphPathSearch$DefaultResult,org.onlab.graph.Edge)",
            "org.onlab.graph.SuurballeGraphSearch:double lambda$search$15(org.onlab.graph.EdgeWeight,org.onlab.graph.AbstractGraphPathSearch$DefaultResult,org.onlab.graph.Edge)"
        ]
    },
    "org.onlab.graph.SrlgGraphSearch$2:double weight(org.onlab.graph.Edge)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.graph.AbstractGraphPathSearch$DefaultResult:boolean relaxEdge(org.onlab.graph.Edge,double,org.onlab.graph.EdgeWeight,boolean[])",
            "org.onlab.graph.BreadthFirstSearch:org.onlab.graph.GraphPathSearch$Result search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)",
            "org.onlab.graph.DepthFirstSearch:org.onlab.graph.DepthFirstSearch$SpanningTreeResult search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)",
            "org.onlab.graph.KShortestPathsSearch$InnerEdgeWeighter:double weight(org.onlab.graph.Edge)",
            "org.onlab.graph.KShortestPathsSearch:java.lang.Double calculatePathCost(org.onlab.graph.EdgeWeight,java.util.List)",
            "org.onlab.graph.SrlgGraphSearch$2:double weight(org.onlab.graph.Edge)",
            "org.onlab.graph.SuurballeGraphSearch:double lambda$search$16(org.onlab.graph.EdgeWeight,org.onlab.graph.AbstractGraphPathSearch$DefaultResult,org.onlab.graph.Edge)",
            "org.onlab.graph.SuurballeGraphSearch:double lambda$search$15(org.onlab.graph.EdgeWeight,org.onlab.graph.AbstractGraphPathSearch$DefaultResult,org.onlab.graph.Edge)",
            "org.onlab.graph.TarjanGraphSearch:org.onlab.graph.TarjanGraphSearch$VertexData connect(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,org.onlab.graph.TarjanGraphSearch$SccResult)"
        ]
    },
    "org.onlab.graph.TarjanGraphSearch$SccResult:org.onlab.graph.TarjanGraphSearch$VertexData data(org.onlab.graph.Vertex)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.graph.TarjanGraphSearch$SccResult:org.onlab.graph.TarjanGraphSearch$VertexData access$100(org.onlab.graph.TarjanGraphSearch$SccResult,org.onlab.graph.Vertex)"
        ]
    },
    "org.onlab.metrics.MetricsComponent:org.onlab.metrics.MetricsFeature registerFeature(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.metrics.EventMetric:void registerMetrics()"
        ]
    },
    "org.onlab.metrics.MetricsManager:org.onlab.metrics.MetricsComponent registerComponent(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.metrics.EventMetric:void registerMetrics()"
        ]
    },
    "org.onlab.util.ExtendedSet:java.lang.Object get(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.bootstrap.Bootstrap:java.lang.Object getOption(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.bootstrap.ClientBootstrap:org.jboss.netty.channel.ChannelFuture connect()",
            "org.jboss.netty.bootstrap.ClientBootstrap:org.jboss.netty.channel.ChannelFuture connect(java.net.SocketAddress)",
            "org.jboss.netty.bootstrap.ConnectionlessBootstrap:org.jboss.netty.channel.Channel bind()",
            "org.jboss.netty.bootstrap.ConnectionlessBootstrap:org.jboss.netty.channel.ChannelFuture connect()",
            "org.jboss.netty.bootstrap.ConnectionlessBootstrap:org.jboss.netty.channel.ChannelFuture connect(java.net.SocketAddress)",
            "org.jboss.netty.bootstrap.ServerBootstrap:org.jboss.netty.channel.Channel bind()",
            "org.jboss.netty.bootstrap.ServerBootstrap:org.jboss.netty.channel.ChannelFuture bindAsync()"
        ]
    },
    "org.jboss.netty.channel.DefaultChannelPipeline:org.jboss.netty.channel.ChannelHandler get(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ExceptionEvent)"
        ]
    },
    "org.jboss.netty.channel.DefaultChannelPipeline:org.jboss.netty.channel.ChannelHandlerContext getContext(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.DefaultChannelPipeline:org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext getContextOrDie(java.lang.String)"
        ]
    },
    "org.jboss.netty.channel.StaticChannelPipeline:org.jboss.netty.channel.ChannelHandler get(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ExceptionEvent)"
        ]
    },
    "org.jboss.netty.channel.StaticChannelPipeline:org.jboss.netty.channel.ChannelHandlerContext getContext(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.channel.group.DefaultChannelGroup:org.jboss.netty.channel.Channel find(java.lang.Integer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.channel.group.DefaultChannelGroupFuture:org.jboss.netty.channel.ChannelFuture find(java.lang.Integer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.channel.group.DefaultChannelGroupFuture:org.jboss.netty.channel.ChannelFuture find(org.jboss.netty.channel.Channel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.channel.local.LocalChannelRegistry:org.jboss.netty.channel.Channel getChannel(org.jboss.netty.channel.local.LocalAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.local.LocalClientChannelSink:void connect(org.jboss.netty.channel.local.DefaultLocalChannel,org.jboss.netty.channel.ChannelFuture,org.jboss.netty.channel.local.LocalAddress)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioDatagramChannel:org.jboss.netty.channel.ChannelFuture joinGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.NioDatagramChannel:org.jboss.netty.channel.ChannelFuture joinGroup(java.net.InetAddress)",
            "org.jboss.netty.channel.socket.nio.NioDatagramChannel:org.jboss.netty.channel.ChannelFuture joinGroup(java.net.InetSocketAddress,java.net.NetworkInterface)"
        ]
    },
    "org.jboss.netty.handler.codec.http.HttpMethod:org.jboss.netty.handler.codec.http.HttpMethod valueOf(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.HttpRequestDecoder:org.jboss.netty.handler.codec.http.HttpMessage createMessage(java.lang.String[])",
            "org.jboss.netty.handler.codec.spdy.SpdyHeaders:org.jboss.netty.handler.codec.http.HttpMethod getMethod(int,org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame)"
        ]
    },
    "org.jboss.netty.handler.codec.http.QueryStringDecoder:boolean addParam(java.util.Map,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.QueryStringDecoder:void decodeParams(java.lang.String)"
        ]
    },
    "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:java.util.List getBodyHttpDatas(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestDecoder:java.util.List getBodyHttpDatas(java.lang.String)"
        ]
    },
    "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData getBodyHttpData(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestDecoder:org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData getBodyHttpData(java.lang.String)"
        ]
    },
    "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void addHttpData(org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void parseBodyMultipart()"
        ]
    },
    "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData decodeMultipart(org.jboss.netty.handler.codec.http.multipart.HttpPostRequestDecoder$MultiPartStatus)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void parseBodyMultipart()",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData findMultipartDelimiter(java.lang.String,org.jboss.netty.handler.codec.http.multipart.HttpPostRequestDecoder$MultiPartStatus,org.jboss.netty.handler.codec.http.multipart.HttpPostRequestDecoder$MultiPartStatus)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData findMultipartDisposition()"
        ]
    },
    "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData findMultipartDisposition()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData decodeMultipart(org.jboss.netty.handler.codec.http.multipart.HttpPostRequestDecoder$MultiPartStatus)"
        ]
    },
    "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData getFileUpload(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData decodeMultipart(org.jboss.netty.handler.codec.http.multipart.HttpPostRequestDecoder$MultiPartStatus)"
        ]
    },
    "org.jboss.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:java.util.List getBodyHttpDatas(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestDecoder:java.util.List getBodyHttpDatas(java.lang.String)"
        ]
    },
    "org.jboss.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData getBodyHttpData(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestDecoder:org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData getBodyHttpData(java.lang.String)"
        ]
    },
    "org.jboss.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void addHttpData(org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributesStandard()",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributes()",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void setFinalBuffer(org.jboss.netty.buffer.ChannelBuffer)"
        ]
    },
    "org.jboss.netty.handler.codec.rtsp.RtspMethods:org.jboss.netty.handler.codec.http.HttpMethod valueOf(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.rtsp.RtspRequestDecoder:org.jboss.netty.handler.codec.http.HttpMessage createMessage(java.lang.String[])"
        ]
    },
    "org.jboss.netty.handler.codec.serialization.CachingClassResolver:java.lang.Class resolve(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.serialization.CachingClassResolver:java.lang.Class resolve(java.lang.String)",
            "org.jboss.netty.handler.codec.serialization.CompactObjectInputStream:java.io.ObjectStreamClass readClassDescriptor()",
            "org.jboss.netty.handler.codec.serialization.CompactObjectInputStream:java.lang.Class resolveClass(java.io.ObjectStreamClass)"
        ]
    },
    "org.jboss.netty.handler.codec.serialization.ReferenceMap:java.lang.Object get(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.serialization.SoftReferenceMap:java.lang.Object get(java.lang.Object)",
            "org.jboss.netty.handler.codec.serialization.WeakReferenceMap:java.lang.Object get(java.lang.Object)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame:int getValue(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.spdy.SpdyFrameEncoder:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame:void setValue(int,int,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame:void setValue(int,int)",
            "org.jboss.netty.handler.codec.spdy.SpdyFrameDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame:boolean isPersistValue(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.spdy.SpdyFrameEncoder:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame:void setPersistValue(int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame:boolean isPersisted(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.spdy.SpdyFrameEncoder:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame:void setPersisted(int,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.spdy.SpdyHttpDecoder:org.jboss.netty.handler.codec.http.HttpMessage getMessage(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.spdy.SpdyHttpDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.SpdySession$PriorityComparator:int compare(java.lang.Integer,java.lang.Integer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.spdy.SpdySession$PriorityComparator:int compare(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.SpdySession:boolean isRemoteSideClosed(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:void issueStreamError(org.jboss.netty.channel.ChannelHandlerContext,java.net.SocketAddress,int,org.jboss.netty.handler.codec.spdy.SpdyStreamStatus)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.SpdySession:void closeRemoteSide(int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:void halfCloseStream(int,boolean,org.jboss.netty.channel.ChannelFuture)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.SpdySession:boolean isLocalSideClosed(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.SpdySession:void closeLocalSide(int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:void halfCloseStream(int,boolean,org.jboss.netty.channel.ChannelFuture)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.SpdySession:boolean hasReceivedReply(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.SpdySession:void receivedReply(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.SpdySession:int getSendWindowSize(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:void updateSendWindowSize(org.jboss.netty.channel.ChannelHandlerContext,int,int)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.SpdySession:int updateSendWindowSize(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:void updateSendWindowSize(org.jboss.netty.channel.ChannelHandlerContext,int,int)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.SpdySession:int updateReceiveWindowSize(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.SpdySession:int getReceiveWindowSizeLowerBound(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.SpdySession:boolean putPendingWrite(int,org.jboss.netty.channel.MessageEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.SpdySession:org.jboss.netty.channel.MessageEvent removePendingWrite(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:void updateSendWindowSize(org.jboss.netty.channel.ChannelHandlerContext,int,int)"
        ]
    },
    "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor:java.util.concurrent.atomic.AtomicLong getChannelCounter(org.jboss.netty.channel.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor:void increaseCounter(java.lang.Runnable)",
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor:void decreaseCounter(java.lang.Runnable)"
        ]
    },
    "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor:java.util.concurrent.Executor getChildExecutor(org.jboss.netty.channel.ChannelEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor:void doExecute(java.lang.Runnable)"
        ]
    },
    "org.jboss.netty.util.CharsetUtil:java.nio.charset.CharsetEncoder getEncoder(java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.buffer.ChannelBuffers:java.nio.ByteBuffer encodeString(java.nio.CharBuffer,java.nio.charset.Charset)",
            "org.jboss.netty.handler.codec.socks.SocksAuthRequest:void <clinit>()"
        ]
    },
    "org.jboss.netty.util.CharsetUtil:java.nio.charset.CharsetDecoder getDecoder(java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.buffer.ChannelBuffers:java.lang.String decodeString(java.nio.ByteBuffer,java.nio.charset.Charset)"
        ]
    },
    "org.apache.commons.lang.Entities$MapIntMap:java.lang.String name(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.Entities:java.lang.String entityName(int)"
        ]
    },
    "org.apache.commons.lang.Entities$MapIntMap:int value(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.Entities:int entityValue(java.lang.String)"
        ]
    },
    "org.apache.commons.lang.Entities$PrimitiveEntityMap:int value(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.Entities:int entityValue(java.lang.String)"
        ]
    },
    "org.apache.commons.lang.enum.Enum:java.lang.Object readResolve()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.enum.Enum:org.apache.commons.lang.'enum'.Enum getEnum(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.enum.EnumUtils:org.apache.commons.lang.'enum'.Enum getEnum(java.lang.Class,java.lang.String)"
        ]
    },
    "org.apache.commons.lang.enum.Enum:org.apache.commons.lang.'enum'.Enum$Entry getEntry(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.enum.Enum:org.apache.commons.lang.'enum'.Enum getEnum(java.lang.Class,java.lang.String)",
            "org.apache.commons.lang.enum.Enum:java.util.Map getEnumMap(java.lang.Class)",
            "org.apache.commons.lang.enum.Enum:java.util.List getEnumList(java.lang.Class)"
        ]
    },
    "org.apache.commons.lang.enums.Enum:java.lang.Object readResolve()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.enums.Enum:org.apache.commons.lang.enums.Enum getEnum(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.enums.EnumUtils:org.apache.commons.lang.enums.Enum getEnum(java.lang.Class,java.lang.String)"
        ]
    },
    "org.apache.commons.lang.enums.Enum:org.apache.commons.lang.enums.Enum$Entry getEntry(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.enums.Enum:org.apache.commons.lang.enums.Enum getEnum(java.lang.Class,java.lang.String)",
            "org.apache.commons.lang.enums.Enum:java.util.Map getEnumMap(java.lang.Class)",
            "org.apache.commons.lang.enums.Enum:java.util.List getEnumList(java.lang.Class)"
        ]
    },
    "org.apache.commons.lang.LocaleUtils:java.util.List languagesByCountry(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.LocaleUtils:java.util.List countriesByLanguage(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.text.ExtendedMessageFormat:java.text.Format getFormat(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.text.ExtendedMessageFormat:void applyPattern(java.lang.String)"
        ]
    },
    "org.apache.commons.lang.time.FastDateFormat:org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String,java.util.TimeZone,java.util.Locale)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.time.DateFormatUtils:java.lang.String format(java.util.Date,java.lang.String,java.util.TimeZone,java.util.Locale)",
            "org.apache.commons.lang.time.DateFormatUtils:java.lang.String format(java.util.Calendar,java.lang.String,java.util.TimeZone,java.util.Locale)",
            "org.apache.commons.lang.time.FastDateFormat:org.apache.commons.lang.time.FastDateFormat getInstance()",
            "org.apache.commons.lang.time.FastDateFormat:org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String)",
            "org.apache.commons.lang.time.FastDateFormat:org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String,java.util.TimeZone)",
            "org.apache.commons.lang.time.FastDateFormat:org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String,java.util.Locale)",
            "org.apache.commons.lang.time.FastDateFormat:org.apache.commons.lang.time.FastDateFormat getDateInstance(int,java.util.TimeZone,java.util.Locale)",
            "org.apache.commons.lang.time.FastDateFormat:org.apache.commons.lang.time.FastDateFormat getTimeInstance(int,java.util.TimeZone,java.util.Locale)",
            "org.apache.commons.lang.time.FastDateFormat:org.apache.commons.lang.time.FastDateFormat getDateTimeInstance(int,int,java.util.TimeZone,java.util.Locale)"
        ]
    },
    "org.apache.commons.lang.time.FastDateFormat:org.apache.commons.lang.time.FastDateFormat getDateInstance(int,java.util.TimeZone,java.util.Locale)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.time.FastDateFormat:org.apache.commons.lang.time.FastDateFormat getDateInstance(int)",
            "org.apache.commons.lang.time.FastDateFormat:org.apache.commons.lang.time.FastDateFormat getDateInstance(int,java.util.Locale)",
            "org.apache.commons.lang.time.FastDateFormat:org.apache.commons.lang.time.FastDateFormat getDateInstance(int,java.util.TimeZone)"
        ]
    },
    "org.apache.commons.lang.time.FastDateFormat:org.apache.commons.lang.time.FastDateFormat getTimeInstance(int,java.util.TimeZone,java.util.Locale)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.time.FastDateFormat:org.apache.commons.lang.time.FastDateFormat getTimeInstance(int)",
            "org.apache.commons.lang.time.FastDateFormat:org.apache.commons.lang.time.FastDateFormat getTimeInstance(int,java.util.Locale)",
            "org.apache.commons.lang.time.FastDateFormat:org.apache.commons.lang.time.FastDateFormat getTimeInstance(int,java.util.TimeZone)"
        ]
    },
    "org.apache.commons.lang.time.FastDateFormat:org.apache.commons.lang.time.FastDateFormat getDateTimeInstance(int,int,java.util.TimeZone,java.util.Locale)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.time.FastDateFormat:org.apache.commons.lang.time.FastDateFormat getDateTimeInstance(int,int)",
            "org.apache.commons.lang.time.FastDateFormat:org.apache.commons.lang.time.FastDateFormat getDateTimeInstance(int,int,java.util.Locale)",
            "org.apache.commons.lang.time.FastDateFormat:org.apache.commons.lang.time.FastDateFormat getDateTimeInstance(int,int,java.util.TimeZone)"
        ]
    },
    "org.apache.commons.lang.time.FastDateFormat:java.lang.String getTimeZoneDisplay(java.util.TimeZone,boolean,int,java.util.Locale)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.time.FastDateFormat$TimeZoneNameRule:void <init>(java.util.TimeZone,boolean,java.util.Locale,int)",
            "org.apache.commons.lang.time.FastDateFormat$TimeZoneNameRule:void appendTo(java.lang.StringBuffer,java.util.Calendar)"
        ]
    },
    "org.apache.commons.lang3.builder.Diff:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.builder.DiffBuilder$1:void <init>(org.apache.commons.lang3.builder.DiffBuilder,java.lang.String,boolean,boolean)",
            "org.apache.commons.lang3.builder.DiffBuilder$10:void <init>(org.apache.commons.lang3.builder.DiffBuilder,java.lang.String,float[],float[])",
            "org.apache.commons.lang3.builder.DiffBuilder$11:void <init>(org.apache.commons.lang3.builder.DiffBuilder,java.lang.String,int,int)",
            "org.apache.commons.lang3.builder.DiffBuilder$12:void <init>(org.apache.commons.lang3.builder.DiffBuilder,java.lang.String,int[],int[])",
            "org.apache.commons.lang3.builder.DiffBuilder$13:void <init>(org.apache.commons.lang3.builder.DiffBuilder,java.lang.String,long,long)",
            "org.apache.commons.lang3.builder.DiffBuilder$14:void <init>(org.apache.commons.lang3.builder.DiffBuilder,java.lang.String,long[],long[])",
            "org.apache.commons.lang3.builder.DiffBuilder$15:void <init>(org.apache.commons.lang3.builder.DiffBuilder,java.lang.String,short,short)",
            "org.apache.commons.lang3.builder.DiffBuilder$16:void <init>(org.apache.commons.lang3.builder.DiffBuilder,java.lang.String,short[],short[])",
            "org.apache.commons.lang3.builder.DiffBuilder$17:void <init>(org.apache.commons.lang3.builder.DiffBuilder,java.lang.String,java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang3.builder.DiffBuilder$18:void <init>(org.apache.commons.lang3.builder.DiffBuilder,java.lang.String,java.lang.Object[],java.lang.Object[])",
            "org.apache.commons.lang3.builder.DiffBuilder$2:void <init>(org.apache.commons.lang3.builder.DiffBuilder,java.lang.String,boolean[],boolean[])",
            "org.apache.commons.lang3.builder.DiffBuilder$3:void <init>(org.apache.commons.lang3.builder.DiffBuilder,java.lang.String,byte,byte)",
            "org.apache.commons.lang3.builder.DiffBuilder$4:void <init>(org.apache.commons.lang3.builder.DiffBuilder,java.lang.String,byte[],byte[])",
            "org.apache.commons.lang3.builder.DiffBuilder$5:void <init>(org.apache.commons.lang3.builder.DiffBuilder,java.lang.String,char,char)",
            "org.apache.commons.lang3.builder.DiffBuilder$6:void <init>(org.apache.commons.lang3.builder.DiffBuilder,java.lang.String,char[],char[])",
            "org.apache.commons.lang3.builder.DiffBuilder$7:void <init>(org.apache.commons.lang3.builder.DiffBuilder,java.lang.String,double,double)",
            "org.apache.commons.lang3.builder.DiffBuilder$8:void <init>(org.apache.commons.lang3.builder.DiffBuilder,java.lang.String,double[],double[])",
            "org.apache.commons.lang3.builder.DiffBuilder$9:void <init>(org.apache.commons.lang3.builder.DiffBuilder,java.lang.String,float,float)"
        ]
    },
    "org.apache.commons.lang3.concurrent.ConcurrentUtils:java.lang.Object createIfAbsent(java.util.concurrent.ConcurrentMap,java.lang.Object,org.apache.commons.lang3.concurrent.ConcurrentInitializer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.concurrent.ConcurrentUtils:java.lang.Object createIfAbsentUnchecked(java.util.concurrent.ConcurrentMap,java.lang.Object,org.apache.commons.lang3.concurrent.ConcurrentInitializer)"
        ]
    },
    "org.apache.commons.lang3.concurrent.MultiBackgroundInitializer$MultiBackgroundInitializerResults:java.lang.Object getResultObject(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.concurrent.MultiBackgroundInitializer$MultiBackgroundInitializerResults:org.apache.commons.lang3.concurrent.ConcurrentException getException(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.concurrent.MultiBackgroundInitializer$MultiBackgroundInitializerResults:org.apache.commons.lang3.concurrent.BackgroundInitializer checkName(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.concurrent.MultiBackgroundInitializer$MultiBackgroundInitializerResults:org.apache.commons.lang3.concurrent.BackgroundInitializer getInitializer(java.lang.String)",
            "org.apache.commons.lang3.concurrent.MultiBackgroundInitializer$MultiBackgroundInitializerResults:java.lang.Object getResultObject(java.lang.String)",
            "org.apache.commons.lang3.concurrent.MultiBackgroundInitializer$MultiBackgroundInitializerResults:boolean isException(java.lang.String)",
            "org.apache.commons.lang3.concurrent.MultiBackgroundInitializer$MultiBackgroundInitializerResults:org.apache.commons.lang3.concurrent.ConcurrentException getException(java.lang.String)"
        ]
    },
    "org.apache.commons.lang3.LocaleUtils:java.util.List languagesByCountry(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.LocaleUtils:java.util.List countriesByLanguage(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.reflect.TypeLiteral:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.reflect.TypeUtils:java.lang.reflect.Type unrollVariableAssignments(java.lang.reflect.TypeVariable,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.reflect.TypeUtils:boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.ParameterizedType,java.util.Map)"
        ]
    },
    "org.apache.commons.lang3.reflect.TypeUtils:java.lang.reflect.Type substituteTypeVariables(java.lang.reflect.Type,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.reflect.TypeUtils:boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.WildcardType,java.util.Map)",
            "org.apache.commons.lang3.reflect.TypeUtils:boolean typesSatisfyVariables(java.util.Map)"
        ]
    },
    "org.apache.commons.lang3.reflect.TypeUtils:java.lang.Class getRawType(java.lang.reflect.Type,java.lang.reflect.Type)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.reflect.TypeUtils:java.lang.Class getRawType(java.lang.reflect.Type,java.lang.reflect.Type)"
        ]
    },
    "org.apache.commons.lang3.reflect.TypeUtils:java.lang.reflect.Type[] extractTypeArgumentsFrom(java.util.Map,java.lang.reflect.TypeVariable[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.reflect.TypeUtils:java.lang.reflect.ParameterizedType parameterize(java.lang.Class,java.util.Map)",
            "org.apache.commons.lang3.reflect.TypeUtils:java.lang.reflect.ParameterizedType parameterizeWithOwner(java.lang.reflect.Type,java.lang.Class,java.util.Map)"
        ]
    },
    "org.apache.commons.lang3.SerializationUtils$ClassLoaderAwareObjectInputStream:java.lang.Class resolveClass(java.io.ObjectStreamClass)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.text.ExtendedMessageFormat:java.text.Format getFormat(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.text.ExtendedMessageFormat:void applyPattern(java.lang.String)"
        ]
    },
    "org.apache.commons.lang3.time.FastDatePrinter:java.lang.String getTimeZoneDisplay(java.util.TimeZone,boolean,int,java.util.Locale)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule:void <init>(java.util.TimeZone,java.util.Locale,int)",
            "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule:void appendTo(java.lang.StringBuffer,java.util.Calendar)"
        ]
    },
    "org.apache.commons.lang3.time.FormatCache:java.text.Format getInstance(java.lang.String,java.util.TimeZone,java.util.Locale)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.time.FastDateFormat:org.apache.commons.lang3.time.FastDateFormat getInstance(java.lang.String)",
            "org.apache.commons.lang3.time.FastDateFormat:org.apache.commons.lang3.time.FastDateFormat getInstance(java.lang.String,java.util.TimeZone)",
            "org.apache.commons.lang3.time.FastDateFormat:org.apache.commons.lang3.time.FastDateFormat getInstance(java.lang.String,java.util.Locale)",
            "org.apache.commons.lang3.time.FastDateFormat:org.apache.commons.lang3.time.FastDateFormat getInstance(java.lang.String,java.util.TimeZone,java.util.Locale)",
            "org.apache.commons.lang3.time.FormatCache:java.text.Format getDateTimeInstance(java.lang.Integer,java.lang.Integer,java.util.TimeZone,java.util.Locale)"
        ]
    },
    "org.apache.commons.lang3.time.FormatCache:java.lang.String getPatternForStyle(java.lang.Integer,java.lang.Integer,java.util.Locale)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.time.FormatCache:java.text.Format getDateTimeInstance(java.lang.Integer,java.lang.Integer,java.util.TimeZone,java.util.Locale)"
        ]
    },
    "com.esotericsoftware.kryo.Generics:java.lang.Class getConcreteClass(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Generics:java.lang.Class getConcreteClass(java.lang.String)",
            "com.esotericsoftware.kryo.serializers.FieldSerializerGenericsUtil:java.lang.Class getTypeVarConcreteClass(java.lang.Class[],int,java.lang.String)",
            "com.esotericsoftware.kryo.serializers.FieldSerializerGenericsUtil:java.lang.Class[] computeFieldGenerics(java.lang.reflect.Type,java.lang.reflect.Field,java.lang.Class[])",
            "com.esotericsoftware.kryo.serializers.FieldSerializerGenericsUtil:com.esotericsoftware.kryo.serializers.FieldSerializer$CachedField newCachedFieldOfGenericType(java.lang.reflect.Field,int,java.lang.Class[],java.lang.reflect.Type)",
            "com.esotericsoftware.kryo.serializers.FieldSerializerGenericsUtil:java.lang.Class[] getGenerics(java.lang.reflect.Type,com.esotericsoftware.kryo.Kryo)"
        ]
    },
    "org.onlab.stc.MonitorLayout$get__40:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.util.RetryingFunction:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.onlab.graph.DepthFirstSearch$SpanningTreeResult:boolean isEdgeMarked(org.onlab.graph.Edge)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.graph.DepthFirstSearch:org.onlab.graph.DepthFirstSearch$SpanningTreeResult search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)"
        ]
    },
    "org.onlab.util.ExtendedSet:boolean contains(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.MonitorLayout:boolean lambda$boxesOnTier$31(int,java.util.Set,org.onlab.stc.MonitorLayout$Box)",
            "org.onlab.graph.AbstractGraphPathSearch:void checkArguments(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex)",
            "org.onlab.graph.KShortestPathsSearch$InnerEdgeWeighter:double weight(org.onlab.graph.Edge)",
            "org.onlab.graph.MutableAdjacencyListsGraph:void addVertex(org.onlab.graph.Vertex)",
            "org.onlab.graph.MutableAdjacencyListsGraph:void removeVertex(org.onlab.graph.Vertex)",
            "org.onlab.graph.MutableAdjacencyListsGraph:void addEdge(org.onlab.graph.Edge)",
            "org.onlab.graph.MutableAdjacencyListsGraph:void removeEdge(org.onlab.graph.Edge)",
            "org.onlab.graph.TarjanGraphSearch$SccResult:java.util.Set findClusterEdges(java.util.Set)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:void validateHeaderValue0(java.lang.String)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:org.jboss.netty.handler.codec.http.HttpHeaders add(java.lang.String,java.lang.Object)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:org.jboss.netty.handler.codec.http.HttpHeaders add(java.lang.String,java.lang.Iterable)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:org.jboss.netty.handler.codec.http.HttpHeaders set(java.lang.String,java.lang.Object)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:org.jboss.netty.handler.codec.http.HttpHeaders set(java.lang.String,java.lang.Iterable)",
            "org.jboss.netty.util.DefaultObjectSizeEstimator:int estimateSize(java.lang.Class,java.util.Set)",
            "org.apache.commons.lang.builder.HashCodeBuilder:boolean isRegistered(java.lang.Object)",
            "org.apache.commons.lang3.builder.EqualsBuilder:boolean isRegistered(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang3.builder.HashCodeBuilder:boolean isRegistered(java.lang.Object)",
            "org.apache.commons.lang3.ClassUtils$2$1:void walkInterfaces(java.util.Set,java.lang.Class)",
            "org.apache.commons.lang3.event.EventUtils$EventBindingInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])"
        ]
    },
    "org.onlab.util.ExtendedSet:boolean lambda$retainAll$21(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.util.ExtendedSet$lambda_retainAll_21__103:boolean test(java.lang.Object)"
        ]
    },
    "org.jboss.netty.channel.DefaultChannelPipeline:void checkDuplicateName(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.DefaultChannelPipeline:void addFirst(java.lang.String,org.jboss.netty.channel.ChannelHandler)",
            "org.jboss.netty.channel.DefaultChannelPipeline:void addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)",
            "org.jboss.netty.channel.DefaultChannelPipeline:void addBefore(java.lang.String,java.lang.String,org.jboss.netty.channel.ChannelHandler)",
            "org.jboss.netty.channel.DefaultChannelPipeline:void addAfter(java.lang.String,java.lang.String,org.jboss.netty.channel.ChannelHandler)",
            "org.jboss.netty.channel.DefaultChannelPipeline:org.jboss.netty.channel.ChannelHandler replace(org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext,java.lang.String,org.jboss.netty.channel.ChannelHandler)"
        ]
    },
    "org.jboss.netty.channel.group.DefaultChannelGroup:boolean contains(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.MonitorLayout:boolean lambda$boxesOnTier$31(int,java.util.Set,org.onlab.stc.MonitorLayout$Box)",
            "org.onlab.graph.AbstractGraphPathSearch:void checkArguments(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex)",
            "org.onlab.graph.KShortestPathsSearch$InnerEdgeWeighter:double weight(org.onlab.graph.Edge)",
            "org.onlab.graph.MutableAdjacencyListsGraph:void addVertex(org.onlab.graph.Vertex)",
            "org.onlab.graph.MutableAdjacencyListsGraph:void removeVertex(org.onlab.graph.Vertex)",
            "org.onlab.graph.MutableAdjacencyListsGraph:void addEdge(org.onlab.graph.Edge)",
            "org.onlab.graph.MutableAdjacencyListsGraph:void removeEdge(org.onlab.graph.Edge)",
            "org.onlab.graph.TarjanGraphSearch$SccResult:java.util.Set findClusterEdges(java.util.Set)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:void validateHeaderValue0(java.lang.String)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:org.jboss.netty.handler.codec.http.HttpHeaders add(java.lang.String,java.lang.Object)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:org.jboss.netty.handler.codec.http.HttpHeaders add(java.lang.String,java.lang.Iterable)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:org.jboss.netty.handler.codec.http.HttpHeaders set(java.lang.String,java.lang.Object)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:org.jboss.netty.handler.codec.http.HttpHeaders set(java.lang.String,java.lang.Iterable)",
            "org.jboss.netty.util.DefaultObjectSizeEstimator:int estimateSize(java.lang.Class,java.util.Set)",
            "org.apache.commons.lang.builder.HashCodeBuilder:boolean isRegistered(java.lang.Object)",
            "org.apache.commons.lang3.builder.EqualsBuilder:boolean isRegistered(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang3.builder.HashCodeBuilder:boolean isRegistered(java.lang.Object)",
            "org.apache.commons.lang3.ClassUtils$2$1:void walkInterfaces(java.util.Set,java.lang.Class)",
            "org.apache.commons.lang3.event.EventUtils$EventBindingInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])"
        ]
    },
    "org.jboss.netty.channel.local.LocalChannelRegistry:boolean isRegistered(org.jboss.netty.channel.local.LocalAddress)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.serialization.ReferenceMap:boolean containsKey(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.serialization.SoftReferenceMap:boolean containsKey(java.lang.Object)",
            "org.jboss.netty.handler.codec.serialization.WeakReferenceMap:boolean containsKey(java.lang.Object)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame:boolean isSet(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.spdy.SpdyFrameDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame:void removeValue(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.SpdySession:boolean isActiveStream(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)"
        ]
    },
    "org.jboss.netty.handler.ipfilter.OneIpFilterHandler:boolean accept(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent,java.net.InetSocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.ipfilter.IpFilteringHandlerImpl:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.util.MapBackedSet:boolean contains(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.MonitorLayout:boolean lambda$boxesOnTier$31(int,java.util.Set,org.onlab.stc.MonitorLayout$Box)",
            "org.onlab.graph.AbstractGraphPathSearch:void checkArguments(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex)",
            "org.onlab.graph.KShortestPathsSearch$InnerEdgeWeighter:double weight(org.onlab.graph.Edge)",
            "org.onlab.graph.MutableAdjacencyListsGraph:void addVertex(org.onlab.graph.Vertex)",
            "org.onlab.graph.MutableAdjacencyListsGraph:void removeVertex(org.onlab.graph.Vertex)",
            "org.onlab.graph.MutableAdjacencyListsGraph:void addEdge(org.onlab.graph.Edge)",
            "org.onlab.graph.MutableAdjacencyListsGraph:void removeEdge(org.onlab.graph.Edge)",
            "org.onlab.graph.TarjanGraphSearch$SccResult:java.util.Set findClusterEdges(java.util.Set)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:void validateHeaderValue0(java.lang.String)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:org.jboss.netty.handler.codec.http.HttpHeaders add(java.lang.String,java.lang.Object)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:org.jboss.netty.handler.codec.http.HttpHeaders add(java.lang.String,java.lang.Iterable)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:org.jboss.netty.handler.codec.http.HttpHeaders set(java.lang.String,java.lang.Object)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:org.jboss.netty.handler.codec.http.HttpHeaders set(java.lang.String,java.lang.Iterable)",
            "org.jboss.netty.util.DefaultObjectSizeEstimator:int estimateSize(java.lang.Class,java.util.Set)",
            "org.apache.commons.lang.builder.HashCodeBuilder:boolean isRegistered(java.lang.Object)",
            "org.apache.commons.lang3.builder.EqualsBuilder:boolean isRegistered(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang3.builder.HashCodeBuilder:boolean isRegistered(java.lang.Object)",
            "org.apache.commons.lang3.ClassUtils$2$1:void walkInterfaces(java.util.Set,java.lang.Class)",
            "org.apache.commons.lang3.event.EventUtils$EventBindingInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentHashMap$KeySet:boolean contains(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.MonitorLayout:boolean lambda$boxesOnTier$31(int,java.util.Set,org.onlab.stc.MonitorLayout$Box)",
            "org.onlab.graph.AbstractGraphPathSearch:void checkArguments(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex)",
            "org.onlab.graph.KShortestPathsSearch$InnerEdgeWeighter:double weight(org.onlab.graph.Edge)",
            "org.onlab.graph.MutableAdjacencyListsGraph:void addVertex(org.onlab.graph.Vertex)",
            "org.onlab.graph.MutableAdjacencyListsGraph:void removeVertex(org.onlab.graph.Vertex)",
            "org.onlab.graph.MutableAdjacencyListsGraph:void addEdge(org.onlab.graph.Edge)",
            "org.onlab.graph.MutableAdjacencyListsGraph:void removeEdge(org.onlab.graph.Edge)",
            "org.onlab.graph.TarjanGraphSearch$SccResult:java.util.Set findClusterEdges(java.util.Set)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:void validateHeaderValue0(java.lang.String)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:org.jboss.netty.handler.codec.http.HttpHeaders add(java.lang.String,java.lang.Object)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:org.jboss.netty.handler.codec.http.HttpHeaders add(java.lang.String,java.lang.Iterable)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:org.jboss.netty.handler.codec.http.HttpHeaders set(java.lang.String,java.lang.Object)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:org.jboss.netty.handler.codec.http.HttpHeaders set(java.lang.String,java.lang.Iterable)",
            "org.jboss.netty.util.DefaultObjectSizeEstimator:int estimateSize(java.lang.Class,java.util.Set)",
            "org.apache.commons.lang.builder.HashCodeBuilder:boolean isRegistered(java.lang.Object)",
            "org.apache.commons.lang3.builder.EqualsBuilder:boolean isRegistered(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang3.builder.HashCodeBuilder:boolean isRegistered(java.lang.Object)",
            "org.apache.commons.lang3.ClassUtils$2$1:void walkInterfaces(java.util.Set,java.lang.Class)",
            "org.apache.commons.lang3.event.EventUtils$EventBindingInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])"
        ]
    },
    "org.apache.commons.lang.builder.ToStringStyle:boolean isRegistered(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.builder.ToStringStyle:void appendInternal(java.lang.StringBuffer,java.lang.String,java.lang.Object,boolean)"
        ]
    },
    "org.apache.commons.lang3.builder.ToStringStyle:boolean isRegistered(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.builder.ToStringStyle:void appendInternal(java.lang.StringBuffer,java.lang.String,java.lang.Object,boolean)"
        ]
    },
    "org.apache.commons.lang3.concurrent.MultiBackgroundInitializer$MultiBackgroundInitializerResults:boolean isException(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.util.ExtendedSet$containsKey__99:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.util.RetryingFunction:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.onlab.stc.Coordinator:void scrapeForVariables(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Coordinator:void access$500(org.onlab.stc.Coordinator,java.lang.String)"
        ]
    },
    "org.onlab.stc.MonitorLayout:void createBox(org.onlab.stc.Step)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.stc.ScenarioStore:void add(org.onlab.stc.StepEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.ScenarioStore:void markStarted(org.onlab.stc.Step)",
            "org.onlab.stc.ScenarioStore:void markComplete(org.onlab.stc.Step,org.onlab.stc.Coordinator$Status)",
            "org.onlab.stc.ScenarioStore:void lambda$load$19(org.apache.commons.configuration.PropertiesConfiguration,java.lang.String)"
        ]
    },
    "org.onlab.stc.ScenarioStore:void lambda$reset$17(org.onlab.stc.Step)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.graph.DepthFirstSearch$SpanningTreeResult:void markEdge(org.onlab.graph.Edge,org.onlab.graph.DepthFirstSearch$EdgeType)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.graph.DepthFirstSearch:org.onlab.graph.DepthFirstSearch$SpanningTreeResult search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)"
        ]
    },
    "org.onlab.graph.TarjanGraphSearch$SccResult:org.onlab.graph.TarjanGraphSearch$VertexData addData(org.onlab.graph.Vertex)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.graph.TarjanGraphSearch$SccResult:org.onlab.graph.TarjanGraphSearch$VertexData access$200(org.onlab.graph.TarjanGraphSearch$SccResult,org.onlab.graph.Vertex)"
        ]
    },
    "org.onlab.packet.ICMP6:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.ICMP6:byte[] serialize()",
            "org.onlab.packet.ICMP6:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ICMP6:org.onlab.packet.ICMP6 lambda$deserializer$40(byte[],int,int)",
            "org.onlab.packet.ICMP6:void <clinit>()",
            "org.onlab.packet.IPv6:void <clinit>()",
            "org.onlab.packet.ICMP6$lambda_deserializer_40__73:org.onlab.packet.IPacket deserialize(byte[],int,int)"
        ]
    },
    "org.onlab.packet.IPv4:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.EthType$EtherType:void <clinit>()",
            "org.onlab.packet.Ethernet:java.lang.String toString()",
            "org.onlab.packet.IPv4:org.onlab.packet.IPv4 setSourceAddress(java.lang.String)",
            "org.onlab.packet.IPv4:org.onlab.packet.IPv4 setDestinationAddress(java.lang.String)",
            "org.onlab.packet.IPv4:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IPv4:java.lang.String fromIPv4AddressCollection(java.util.Collection)",
            "org.onlab.packet.IPv4:org.onlab.packet.IPv4 lambda$deserializer$24(byte[],int,int)",
            "org.onlab.packet.IPv4:void <clinit>()",
            "org.onlab.packet.MPLS:void <clinit>()",
            "org.onlab.packet.IPv4$lambda_deserializer_24__80:org.onlab.packet.IPacket deserialize(byte[],int,int)"
        ]
    },
    "org.onlab.packet.IPv6:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.EthType$EtherType:void <clinit>()",
            "org.onlab.packet.IPv6:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IPv6:org.onlab.packet.IPv6 lambda$deserializer$48(byte[],int,int)",
            "org.onlab.packet.IPv6:void <clinit>()",
            "org.onlab.packet.ipv6.Authentication:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Authentication:org.onlab.packet.ipv6.Authentication lambda$deserializer$46(byte[],int,int)",
            "org.onlab.packet.ipv6.BaseOptions:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.BaseOptions:org.onlab.packet.ipv6.BaseOptions lambda$deserializer$13(byte[],int,int)",
            "org.onlab.packet.ipv6.Fragment:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Fragment:org.onlab.packet.ipv6.Fragment lambda$deserializer$26(byte[],int,int)",
            "org.onlab.packet.ipv6.Routing:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Routing:org.onlab.packet.ipv6.Routing lambda$deserializer$50(byte[],int,int)",
            "org.onlab.packet.IPv6$lambda_deserializer_48__79:org.onlab.packet.IPacket deserialize(byte[],int,int)"
        ]
    },
    "org.onlab.packet.MPLS:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.EthType$EtherType:void <clinit>()",
            "org.onlab.packet.MPLS:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.MPLS:org.onlab.packet.MPLS lambda$deserializer$12(byte[],int,int)",
            "org.onlab.packet.MPLS:void <clinit>()",
            "org.onlab.packet.MPLS$lambda_deserializer_12__83:org.onlab.packet.IPacket deserialize(byte[],int,int)"
        ]
    },
    "org.onlab.packet.PIM:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.IPv4:void <clinit>()",
            "org.onlab.packet.PIM:org.onlab.packet.PIM lambda$deserializer$49(byte[],int,int)",
            "org.onlab.packet.PIM:void <clinit>()",
            "org.onlab.packet.PIM$lambda_deserializer_49__90:org.onlab.packet.IPacket deserialize(byte[],int,int)"
        ]
    },
    "org.onlab.packet.UDP:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.IPv4:void <clinit>()",
            "org.onlab.packet.IPv6:void <clinit>()",
            "org.onlab.packet.UDP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.UDP:org.onlab.packet.UDP lambda$deserializer$45(byte[],int,int)",
            "org.onlab.packet.UDP:void <clinit>()",
            "org.onlab.packet.UDP$lambda_deserializer_45__78:org.onlab.packet.IPacket deserialize(byte[],int,int)"
        ]
    },
    "org.onlab.packet.pim.PIMHello:void createDefaultOptions()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.packet.pim.PIMHello:void addOption(org.onlab.packet.pim.PIMHelloOption)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.pim.PIMHello:org.onlab.packet.pim.PIMHello lambda$deserializer$0(byte[],int,int)"
        ]
    },
    "org.jboss.netty.bootstrap.Bootstrap:void setOption(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.http.HttpMethod:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$2:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.handler.codec.http.HttpClientCodec$Decoder:boolean isContentAlwaysEmpty(org.jboss.netty.handler.codec.http.HttpMessage)",
            "org.jboss.netty.handler.codec.http.HttpHeaders:int getWebSocketContentLength(org.jboss.netty.handler.codec.http.HttpMessage)",
            "org.jboss.netty.handler.codec.http.HttpMethod:org.jboss.netty.handler.codec.http.HttpMethod valueOf(java.lang.String)",
            "org.jboss.netty.handler.codec.http.HttpMethod:void <clinit>()",
            "org.jboss.netty.handler.codec.http.HttpRequestDecoder:org.jboss.netty.handler.codec.http.HttpMessage createMessage(java.lang.String[])",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder:void <init>(org.jboss.netty.handler.codec.http.multipart.HttpDataFactory,org.jboss.netty.handler.codec.http.HttpRequest,boolean,java.nio.charset.Charset,org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder$EncoderMode)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker00:org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker07:org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker08:org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker13:org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.codec.rtsp.RtspMethods:org.jboss.netty.handler.codec.http.HttpMethod valueOf(java.lang.String)",
            "org.jboss.netty.handler.codec.rtsp.RtspMethods:void <clinit>()",
            "org.jboss.netty.handler.codec.spdy.SpdyHeaders:org.jboss.netty.handler.codec.http.HttpMethod getMethod(int,org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame)"
        ]
    },
    "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder:void initDataMultipart()",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder:void initMixedMultipart()",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder:java.lang.String encodeAttribute(java.lang.String,java.nio.charset.Charset)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder:void <clinit>()"
        ]
    },
    "org.jboss.netty.handler.codec.rtsp.RtspMethods:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.rtsp.RtspMethods:org.jboss.netty.handler.codec.http.HttpMethod valueOf(java.lang.String)",
            "org.jboss.netty.handler.codec.rtsp.RtspMethods:void <clinit>()",
            "org.jboss.netty.handler.codec.rtsp.RtspRequestDecoder:org.jboss.netty.handler.codec.http.HttpMessage createMessage(java.lang.String[])"
        ]
    },
    "org.jboss.netty.handler.codec.serialization.ReferenceMap:java.lang.Object put(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.serialization.SoftReferenceMap:java.lang.Object put(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.handler.codec.serialization.WeakReferenceMap:java.lang.Object put(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.SpdyHttpDecoder:org.jboss.netty.handler.codec.http.HttpMessage putMessage(int,org.jboss.netty.handler.codec.http.HttpMessage)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.spdy.SpdyHttpDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.SpdySession:void acceptStream(int,byte,boolean,boolean,int,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:boolean acceptStream(int,byte,boolean,boolean)"
        ]
    },
    "org.jboss.netty.util.DefaultObjectSizeEstimator:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor:void <init>(int,long,long,long,java.util.concurrent.TimeUnit,java.util.concurrent.ThreadFactory)",
            "org.jboss.netty.handler.traffic.AbstractTrafficShapingHandler:void <init>(org.jboss.netty.util.Timer,long,long,long)",
            "org.jboss.netty.handler.traffic.AbstractTrafficShapingHandler:void <init>(org.jboss.netty.util.Timer,long,long)",
            "org.jboss.netty.handler.traffic.AbstractTrafficShapingHandler:void <init>(org.jboss.netty.util.Timer)",
            "org.jboss.netty.handler.traffic.AbstractTrafficShapingHandler:void <init>(org.jboss.netty.util.Timer,long)"
        ]
    },
    "org.jboss.netty.util.MapBackedSet:boolean add(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Compiler:void lambda$compileRequirements$7(org.onlab.stc.Step,java.lang.String)",
            "org.onlab.stc.Coordinator:void addListener(org.onlab.stc.StepProcessListener)",
            "org.onlab.stc.Group:void addChild(org.onlab.stc.Step)",
            "org.onlab.stc.MonitorWebSocketServlet:org.eclipse.jetty.websocket.WebSocket doWebSocketConnect(javax.servlet.http.HttpServletRequest,java.lang.String)",
            "org.onlab.graph.AbstractGraphPathSearch$DefaultResult:void updateVertex(org.onlab.graph.Vertex,org.onlab.graph.Edge,double,boolean)",
            "org.onlab.graph.AbstractGraphPathSearch:void buildAllPaths(org.onlab.graph.AbstractGraphPathSearch$DefaultResult,org.onlab.graph.Vertex,org.onlab.graph.Vertex,int)",
            "org.onlab.graph.KShortestPathsSearch:org.onlab.graph.GraphPathSearch$Result search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)",
            "org.onlab.graph.KShortestPathsSearch:void lambda$search$37(org.onlab.graph.KShortestPathsSearch$InnerEdgeWeighter,org.onlab.graph.Edge)",
            "org.onlab.graph.KShortestPathsSearch:void lambda$search$36(org.onlab.graph.KShortestPathsSearch$InnerEdgeWeighter,org.onlab.graph.Edge)",
            "org.onlab.graph.MutableAdjacencyListsGraph:void <init>(java.util.Set,java.util.Set)",
            "org.onlab.graph.MutableAdjacencyListsGraph:void addVertex(org.onlab.graph.Vertex)",
            "org.onlab.graph.MutableAdjacencyListsGraph:void addEdge(org.onlab.graph.Edge)",
            "org.jboss.netty.handler.codec.http.CookieEncoder:void addCookie(java.lang.String,java.lang.String)",
            "org.jboss.netty.handler.codec.http.CookieEncoder:void addCookie(org.jboss.netty.handler.codec.http.Cookie)",
            "org.jboss.netty.util.DefaultObjectSizeEstimator:int estimateSize(java.lang.Class,java.util.Set)",
            "org.jboss.netty.util.HashedWheelTimer:org.jboss.netty.util.Timeout newTimeout(org.jboss.netty.util.TimerTask,long,java.util.concurrent.TimeUnit)",
            "org.jboss.netty.util.VirtualExecutorService$ChildExecutorRunnable:void run()",
            "org.apache.commons.lang.builder.HashCodeBuilder:void register(java.lang.Object)",
            "org.apache.commons.lang.CharSet:void add(java.lang.String)",
            "org.apache.commons.lang3.builder.EqualsBuilder:void register(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang3.builder.HashCodeBuilder:void register(java.lang.Object)",
            "org.apache.commons.lang3.CharSet:void add(java.lang.String)",
            "org.apache.commons.lang3.ClassUtils$2$1:java.lang.Class next()",
            "org.apache.commons.lang3.ClassUtils$2$1:void walkInterfaces(java.util.Set,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.CollectionSerializer:java.util.Collection read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.CollectionSerializer:java.util.Collection copy(com.esotericsoftware.kryo.Kryo,java.util.Collection)"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentHashMap$WriteThroughEntry:java.lang.Object setValue(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.builder.ToStringStyle:void register(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.builder.ToStringStyle:void appendInternal(java.lang.StringBuffer,java.lang.String,java.lang.Object,boolean)",
            "org.apache.commons.lang.builder.ToStringStyle:void appendClassName(java.lang.StringBuffer,java.lang.Object)",
            "org.apache.commons.lang.builder.ToStringStyle:void appendIdentityHashCode(java.lang.StringBuffer,java.lang.Object)"
        ]
    },
    "org.apache.commons.lang.Entities$MapIntMap:void add(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.Entities:void addEntity(java.lang.String,int)"
        ]
    },
    "org.apache.commons.lang.Entities$PrimitiveEntityMap:void add(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.Entities:void addEntity(java.lang.String,int)"
        ]
    },
    "org.apache.commons.lang3.builder.ToStringStyle:void register(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.builder.ToStringStyle:void appendInternal(java.lang.StringBuffer,java.lang.String,java.lang.Object,boolean)",
            "org.apache.commons.lang3.builder.ToStringStyle:void appendClassName(java.lang.StringBuffer,java.lang.Object)",
            "org.apache.commons.lang3.builder.ToStringStyle:void appendIdentityHashCode(java.lang.StringBuffer,java.lang.Object)"
        ]
    },
    "org.apache.commons.lang3.concurrent.MultiBackgroundInitializer:void addInitializer(java.lang.String,org.apache.commons.lang3.concurrent.BackgroundInitializer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.SerializationUtils$ClassLoaderAwareObjectInputStream:void <init>(java.io.InputStream,java.lang.ClassLoader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.SerializationUtils:java.io.Serializable clone(java.io.Serializable)"
        ]
    },
    "com.esotericsoftware.kryo.Generics:void add(java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.FieldSerializerGenericsUtil:com.esotericsoftware.kryo.serializers.FieldSerializer$CachedField newCachedFieldOfGenericType(java.lang.reflect.Field,int,java.lang.Class[],java.lang.reflect.Type)"
        ]
    },
    "org.onlab.util.ExtendedSet:boolean add(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Compiler:void lambda$compileRequirements$7(org.onlab.stc.Step,java.lang.String)",
            "org.onlab.stc.Coordinator:void addListener(org.onlab.stc.StepProcessListener)",
            "org.onlab.stc.Group:void addChild(org.onlab.stc.Step)",
            "org.onlab.stc.MonitorWebSocketServlet:org.eclipse.jetty.websocket.WebSocket doWebSocketConnect(javax.servlet.http.HttpServletRequest,java.lang.String)",
            "org.onlab.graph.AbstractGraphPathSearch$DefaultResult:void updateVertex(org.onlab.graph.Vertex,org.onlab.graph.Edge,double,boolean)",
            "org.onlab.graph.AbstractGraphPathSearch:void buildAllPaths(org.onlab.graph.AbstractGraphPathSearch$DefaultResult,org.onlab.graph.Vertex,org.onlab.graph.Vertex,int)",
            "org.onlab.graph.KShortestPathsSearch:org.onlab.graph.GraphPathSearch$Result search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)",
            "org.onlab.graph.KShortestPathsSearch:void lambda$search$37(org.onlab.graph.KShortestPathsSearch$InnerEdgeWeighter,org.onlab.graph.Edge)",
            "org.onlab.graph.KShortestPathsSearch:void lambda$search$36(org.onlab.graph.KShortestPathsSearch$InnerEdgeWeighter,org.onlab.graph.Edge)",
            "org.onlab.graph.MutableAdjacencyListsGraph:void <init>(java.util.Set,java.util.Set)",
            "org.onlab.graph.MutableAdjacencyListsGraph:void addVertex(org.onlab.graph.Vertex)",
            "org.onlab.graph.MutableAdjacencyListsGraph:void addEdge(org.onlab.graph.Edge)",
            "org.jboss.netty.handler.codec.http.CookieEncoder:void addCookie(java.lang.String,java.lang.String)",
            "org.jboss.netty.handler.codec.http.CookieEncoder:void addCookie(org.jboss.netty.handler.codec.http.Cookie)",
            "org.jboss.netty.util.DefaultObjectSizeEstimator:int estimateSize(java.lang.Class,java.util.Set)",
            "org.jboss.netty.util.HashedWheelTimer:org.jboss.netty.util.Timeout newTimeout(org.jboss.netty.util.TimerTask,long,java.util.concurrent.TimeUnit)",
            "org.jboss.netty.util.VirtualExecutorService$ChildExecutorRunnable:void run()",
            "org.apache.commons.lang.builder.HashCodeBuilder:void register(java.lang.Object)",
            "org.apache.commons.lang.CharSet:void add(java.lang.String)",
            "org.apache.commons.lang3.builder.EqualsBuilder:void register(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang3.builder.HashCodeBuilder:void register(java.lang.Object)",
            "org.apache.commons.lang3.CharSet:void add(java.lang.String)",
            "org.apache.commons.lang3.ClassUtils$2$1:java.lang.Class next()",
            "org.apache.commons.lang3.ClassUtils$2$1:void walkInterfaces(java.util.Set,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.CollectionSerializer:java.util.Collection read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.CollectionSerializer:java.util.Collection copy(com.esotericsoftware.kryo.Kryo,java.util.Collection)"
        ]
    },
    "org.onlab.util.ExtendedSet:java.lang.Boolean lambda$addAll$20(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.util.ExtendedSet$lambda_addAll_20__101:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.jboss.netty.channel.AbstractChannel:java.lang.Integer allocateId(org.jboss.netty.channel.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.AbstractChannel:void <init>(org.jboss.netty.channel.Channel,org.jboss.netty.channel.ChannelFactory,org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelSink)"
        ]
    },
    "org.jboss.netty.channel.local.LocalChannelRegistry:boolean register(org.jboss.netty.channel.local.LocalAddress,org.jboss.netty.channel.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.local.LocalClientChannelSink:void bind(org.jboss.netty.channel.local.DefaultLocalChannel,org.jboss.netty.channel.ChannelFuture,org.jboss.netty.channel.local.LocalAddress)",
            "org.jboss.netty.channel.local.LocalServerChannelSink:void bind(org.jboss.netty.channel.local.DefaultLocalServerChannel,org.jboss.netty.channel.ChannelFuture,org.jboss.netty.channel.local.LocalAddress)"
        ]
    },
    "org.apache.commons.lang3.concurrent.ConcurrentUtils:java.lang.Object putIfAbsent(java.util.concurrent.ConcurrentMap,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.util.GroupedThreadFactory:org.onlab.util.GroupedThreadFactory groupedThreadFactory(java.lang.String)",
            "org.apache.commons.lang3.concurrent.ConcurrentUtils:java.lang.Object createIfAbsent(java.util.concurrent.ConcurrentMap,java.lang.Object,org.apache.commons.lang3.concurrent.ConcurrentInitializer)"
        ]
    },
    "org.onlab.graph.AbstractGraphPathSearch$DefaultResult:void removeVertex(org.onlab.graph.Vertex)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.graph.BellmanFordGraphSearch:org.onlab.graph.GraphPathSearch$Result search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)"
        ]
    },
    "org.onlab.util.ExtendedSet:boolean remove(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Coordinator:void removeListener(org.onlab.stc.StepProcessListener)",
            "org.onlab.graph.MutableAdjacencyListsGraph:void removeVertex(org.onlab.graph.Vertex)",
            "org.onlab.graph.MutableAdjacencyListsGraph:void removeEdge(org.onlab.graph.Edge)",
            "org.jboss.netty.util.DefaultObjectSizeEstimator:int estimateSize(java.lang.Class,java.util.Set)",
            "org.jboss.netty.util.HashedWheelTimer$HashedWheelTimeout:void cancel()",
            "org.jboss.netty.util.VirtualExecutorService$ChildExecutorRunnable:void run()",
            "org.apache.commons.lang.builder.HashCodeBuilder:void unregister(java.lang.Object)",
            "org.apache.commons.lang3.builder.EqualsBuilder:void unregister(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang3.builder.HashCodeBuilder:void unregister(java.lang.Object)"
        ]
    },
    "org.onlab.util.ExtendedSet:java.lang.Boolean lambda$removeAll$23(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.util.ExtendedSet$lambda_removeAll_23__106:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.onlab.util.ExtendedSet:java.lang.Boolean lambda$retainAll$22(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.util.ExtendedSet$lambda_retainAll_22__104:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.jboss.netty.channel.ChannelLocal:java.lang.Object remove(org.jboss.netty.channel.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.ChannelLocal$1:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.ChannelLocal:java.lang.Object set(org.jboss.netty.channel.Channel,java.lang.Object)"
        ]
    },
    "org.jboss.netty.channel.group.DefaultChannelGroup:boolean remove(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Coordinator:void removeListener(org.onlab.stc.StepProcessListener)",
            "org.onlab.graph.MutableAdjacencyListsGraph:void removeVertex(org.onlab.graph.Vertex)",
            "org.onlab.graph.MutableAdjacencyListsGraph:void removeEdge(org.onlab.graph.Edge)",
            "org.jboss.netty.channel.group.DefaultChannelGroup$1:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.util.DefaultObjectSizeEstimator:int estimateSize(java.lang.Class,java.util.Set)",
            "org.jboss.netty.util.HashedWheelTimer$HashedWheelTimeout:void cancel()",
            "org.jboss.netty.util.VirtualExecutorService$ChildExecutorRunnable:void run()",
            "org.apache.commons.lang.builder.HashCodeBuilder:void unregister(java.lang.Object)",
            "org.apache.commons.lang3.builder.EqualsBuilder:void unregister(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang3.builder.HashCodeBuilder:void unregister(java.lang.Object)"
        ]
    },
    "org.jboss.netty.channel.local.LocalChannelRegistry:boolean unregister(org.jboss.netty.channel.local.LocalAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.local.DefaultLocalChannel:void closeNow(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.channel.local.LocalClientChannelSink:void bind(org.jboss.netty.channel.local.DefaultLocalChannel,org.jboss.netty.channel.ChannelFuture,org.jboss.netty.channel.local.LocalAddress)",
            "org.jboss.netty.channel.local.LocalServerChannelSink:void bind(org.jboss.netty.channel.local.DefaultLocalServerChannel,org.jboss.netty.channel.ChannelFuture,org.jboss.netty.channel.local.LocalAddress)",
            "org.jboss.netty.channel.local.LocalServerChannelSink:void close(org.jboss.netty.channel.local.DefaultLocalServerChannel,org.jboss.netty.channel.ChannelFuture)"
        ]
    },
    "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void cleanMixedAttributes()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData getFileUpload(java.lang.String)"
        ]
    },
    "org.jboss.netty.handler.codec.serialization.ReferenceMap:java.lang.Object remove(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.serialization.SoftReferenceMap:java.lang.Object remove(java.lang.Object)",
            "org.jboss.netty.handler.codec.serialization.WeakReferenceMap:java.lang.Object remove(java.lang.Object)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.SpdyHttpDecoder:org.jboss.netty.handler.codec.http.HttpMessage removeMessage(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.spdy.SpdyHttpDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.SpdySession:org.jboss.netty.handler.codec.spdy.SpdySession$StreamState removeActiveStream(int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.spdy.SpdySession:void removeStream(int,boolean)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:void closeRemoteSide(int,boolean)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:void closeLocalSide(int,boolean)"
        ]
    },
    "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor:boolean removeChildExecutor(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.execution.OrderedDownstreamThreadPoolExecutor$1:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor:java.util.concurrent.Executor getChildExecutor(org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.util.MapBackedSet:boolean remove(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Coordinator:void removeListener(org.onlab.stc.StepProcessListener)",
            "org.onlab.graph.MutableAdjacencyListsGraph:void removeVertex(org.onlab.graph.Vertex)",
            "org.onlab.graph.MutableAdjacencyListsGraph:void removeEdge(org.onlab.graph.Edge)",
            "org.jboss.netty.util.DefaultObjectSizeEstimator:int estimateSize(java.lang.Class,java.util.Set)",
            "org.jboss.netty.util.HashedWheelTimer$HashedWheelTimeout:void cancel()",
            "org.jboss.netty.util.VirtualExecutorService$ChildExecutorRunnable:void run()",
            "org.apache.commons.lang.builder.HashCodeBuilder:void unregister(java.lang.Object)",
            "org.apache.commons.lang3.builder.EqualsBuilder:void unregister(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang3.builder.HashCodeBuilder:void unregister(java.lang.Object)"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentHashMap$HashIterator:void remove()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.MonitorWebSocketServlet$Pruner:void run()",
            "org.jboss.netty.channel.group.CombinedIterator:void remove()",
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void process(java.nio.channels.Selector)",
            "org.jboss.netty.channel.socket.nio.NioClientBoss:void processSelectedKeys(java.util.Set)",
            "org.jboss.netty.channel.socket.nio.NioDatagramChannel:org.jboss.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress)",
            "org.jboss.netty.channel.socket.nio.NioServerBoss:void process(java.nio.channels.Selector)",
            "org.jboss.netty.handler.codec.http.HttpCodecUtil:void removeTransferEncodingChunked(org.jboss.netty.handler.codec.http.HttpMessage)",
            "org.jboss.netty.handler.codec.http.HttpHeaders:void removeTransferEncodingChunked(org.jboss.netty.handler.codec.http.HttpMessage)",
            "org.jboss.netty.util.HashedWheelTimer$Worker:void fetchExpiredTimeouts(java.util.List,org.jboss.netty.util.internal.ReusableIterator,long)",
            "org.apache.commons.lang3.exception.DefaultExceptionContext:org.apache.commons.lang3.exception.DefaultExceptionContext setContextValue(java.lang.String,java.lang.Object)"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentHashMap$KeySet:boolean remove(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Coordinator:void removeListener(org.onlab.stc.StepProcessListener)",
            "org.onlab.graph.MutableAdjacencyListsGraph:void removeVertex(org.onlab.graph.Vertex)",
            "org.onlab.graph.MutableAdjacencyListsGraph:void removeEdge(org.onlab.graph.Edge)",
            "org.jboss.netty.util.DefaultObjectSizeEstimator:int estimateSize(java.lang.Class,java.util.Set)",
            "org.jboss.netty.util.HashedWheelTimer$HashedWheelTimeout:void cancel()",
            "org.jboss.netty.util.VirtualExecutorService$ChildExecutorRunnable:void run()",
            "org.apache.commons.lang.builder.HashCodeBuilder:void unregister(java.lang.Object)",
            "org.apache.commons.lang3.builder.EqualsBuilder:void unregister(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang3.builder.HashCodeBuilder:void unregister(java.lang.Object)"
        ]
    },
    "org.apache.commons.lang.builder.ToStringStyle:void unregister(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.builder.ToStringStyle:void appendEnd(java.lang.StringBuffer,java.lang.Object)",
            "org.apache.commons.lang.builder.ToStringStyle:void appendInternal(java.lang.StringBuffer,java.lang.String,java.lang.Object,boolean)"
        ]
    },
    "org.apache.commons.lang3.builder.ToStringStyle:void unregister(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.builder.ToStringStyle:void appendEnd(java.lang.StringBuffer,java.lang.Object)",
            "org.apache.commons.lang3.builder.ToStringStyle:void appendInternal(java.lang.StringBuffer,java.lang.String,java.lang.Object,boolean)"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentHashMap$EntrySet:boolean remove(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Coordinator:void removeListener(org.onlab.stc.StepProcessListener)",
            "org.onlab.graph.MutableAdjacencyListsGraph:void removeVertex(org.onlab.graph.Vertex)",
            "org.onlab.graph.MutableAdjacencyListsGraph:void removeEdge(org.onlab.graph.Edge)",
            "org.jboss.netty.util.DefaultObjectSizeEstimator:int estimateSize(java.lang.Class,java.util.Set)",
            "org.jboss.netty.util.HashedWheelTimer$HashedWheelTimeout:void cancel()",
            "org.jboss.netty.util.VirtualExecutorService$ChildExecutorRunnable:void run()",
            "org.apache.commons.lang.builder.HashCodeBuilder:void unregister(java.lang.Object)",
            "org.apache.commons.lang3.builder.EqualsBuilder:void unregister(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang3.builder.HashCodeBuilder:void unregister(java.lang.Object)"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$KeySet:boolean contains(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.MonitorLayout:boolean lambda$boxesOnTier$31(int,java.util.Set,org.onlab.stc.MonitorLayout$Box)",
            "org.onlab.graph.AbstractGraphPathSearch:void checkArguments(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex)",
            "org.onlab.graph.KShortestPathsSearch$InnerEdgeWeighter:double weight(org.onlab.graph.Edge)",
            "org.onlab.graph.MutableAdjacencyListsGraph:void addVertex(org.onlab.graph.Vertex)",
            "org.onlab.graph.MutableAdjacencyListsGraph:void removeVertex(org.onlab.graph.Vertex)",
            "org.onlab.graph.MutableAdjacencyListsGraph:void addEdge(org.onlab.graph.Edge)",
            "org.onlab.graph.MutableAdjacencyListsGraph:void removeEdge(org.onlab.graph.Edge)",
            "org.onlab.graph.TarjanGraphSearch$SccResult:java.util.Set findClusterEdges(java.util.Set)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:void validateHeaderValue0(java.lang.String)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:org.jboss.netty.handler.codec.http.HttpHeaders add(java.lang.String,java.lang.Object)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:org.jboss.netty.handler.codec.http.HttpHeaders add(java.lang.String,java.lang.Iterable)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:org.jboss.netty.handler.codec.http.HttpHeaders set(java.lang.String,java.lang.Object)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:org.jboss.netty.handler.codec.http.HttpHeaders set(java.lang.String,java.lang.Iterable)",
            "org.jboss.netty.util.DefaultObjectSizeEstimator:int estimateSize(java.lang.Class,java.util.Set)",
            "org.apache.commons.lang.builder.HashCodeBuilder:boolean isRegistered(java.lang.Object)",
            "org.apache.commons.lang3.builder.EqualsBuilder:boolean isRegistered(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang3.builder.HashCodeBuilder:boolean isRegistered(java.lang.Object)",
            "org.apache.commons.lang3.ClassUtils$2$1:void walkInterfaces(java.util.Set,java.lang.Class)",
            "org.apache.commons.lang3.event.EventUtils$EventBindingInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$WriteThroughEntry:java.lang.Object setValue(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$HashIterator:void remove()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.MonitorWebSocketServlet$Pruner:void run()",
            "org.jboss.netty.channel.group.CombinedIterator:void remove()",
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void process(java.nio.channels.Selector)",
            "org.jboss.netty.channel.socket.nio.NioClientBoss:void processSelectedKeys(java.util.Set)",
            "org.jboss.netty.channel.socket.nio.NioDatagramChannel:org.jboss.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress)",
            "org.jboss.netty.channel.socket.nio.NioServerBoss:void process(java.nio.channels.Selector)",
            "org.jboss.netty.handler.codec.http.HttpCodecUtil:void removeTransferEncodingChunked(org.jboss.netty.handler.codec.http.HttpMessage)",
            "org.jboss.netty.handler.codec.http.HttpHeaders:void removeTransferEncodingChunked(org.jboss.netty.handler.codec.http.HttpMessage)",
            "org.jboss.netty.util.HashedWheelTimer$Worker:void fetchExpiredTimeouts(java.util.List,org.jboss.netty.util.internal.ReusableIterator,long)",
            "org.apache.commons.lang3.exception.DefaultExceptionContext:org.apache.commons.lang3.exception.DefaultExceptionContext setContextValue(java.lang.String,java.lang.Object)"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$KeySet:boolean remove(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Coordinator:void removeListener(org.onlab.stc.StepProcessListener)",
            "org.onlab.graph.MutableAdjacencyListsGraph:void removeVertex(org.onlab.graph.Vertex)",
            "org.onlab.graph.MutableAdjacencyListsGraph:void removeEdge(org.onlab.graph.Edge)",
            "org.jboss.netty.util.DefaultObjectSizeEstimator:int estimateSize(java.lang.Class,java.util.Set)",
            "org.jboss.netty.util.HashedWheelTimer$HashedWheelTimeout:void cancel()",
            "org.jboss.netty.util.VirtualExecutorService$ChildExecutorRunnable:void run()",
            "org.apache.commons.lang.builder.HashCodeBuilder:void unregister(java.lang.Object)",
            "org.apache.commons.lang3.builder.EqualsBuilder:void unregister(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang3.builder.HashCodeBuilder:void unregister(java.lang.Object)"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$EntrySet:boolean remove(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Coordinator:void removeListener(org.onlab.stc.StepProcessListener)",
            "org.onlab.graph.MutableAdjacencyListsGraph:void removeVertex(org.onlab.graph.Vertex)",
            "org.onlab.graph.MutableAdjacencyListsGraph:void removeEdge(org.onlab.graph.Edge)",
            "org.jboss.netty.util.DefaultObjectSizeEstimator:int estimateSize(java.lang.Class,java.util.Set)",
            "org.jboss.netty.util.HashedWheelTimer$HashedWheelTimeout:void cancel()",
            "org.jboss.netty.util.VirtualExecutorService$ChildExecutorRunnable:void run()",
            "org.apache.commons.lang.builder.HashCodeBuilder:void unregister(java.lang.Object)",
            "org.apache.commons.lang3.builder.EqualsBuilder:void unregister(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang3.builder.HashCodeBuilder:void unregister(java.lang.Object)"
        ]
    },
    "org.apache.commons.lang3.reflect.TypeLiteral:int hashCode()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.reflect.TypeUtils$GenericArrayTypeImpl:int hashCode()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.ConcurrentHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentHashMap:int hashOf(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$SimpleEntry:int hashCode()",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap:int hashOf(java.lang.Object)",
            "org.apache.commons.lang.builder.HashCodeBuilder:org.apache.commons.lang.builder.HashCodeBuilder append(java.lang.Object)",
            "org.apache.commons.lang.mutable.MutableObject:int hashCode()",
            "org.apache.commons.lang.ObjectUtils:int hashCode(java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:int hashCode()",
            "org.apache.commons.lang.time.FastDateFormat$Pair:int hashCode()",
            "org.apache.commons.lang3.AnnotationUtils:int hashMember(java.lang.String,java.lang.Object)",
            "org.apache.commons.lang3.builder.HashCodeBuilder:org.apache.commons.lang3.builder.HashCodeBuilder append(java.lang.Object)",
            "org.apache.commons.lang3.concurrent.ConstantInitializer:int hashCode()",
            "org.apache.commons.lang3.mutable.MutableObject:int hashCode()",
            "org.apache.commons.lang3.ObjectUtils:int hashCode(java.lang.Object)",
            "org.apache.commons.lang3.Range:int hashCode()",
            "org.apache.commons.lang3.reflect.TypeLiteral:int hashCode()",
            "org.apache.commons.lang3.reflect.TypeUtils$GenericArrayTypeImpl:int hashCode()",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:int hashCode()",
            "org.apache.commons.lang3.time.FormatCache$MultipartKey:int hashCode()",
            "org.apache.commons.lang3.tuple.Pair:int hashCode()",
            "org.apache.commons.lang3.tuple.Triple:int hashCode()",
            "org.objectweb.asm.ClassReader:void a(org.objectweb.asm.ClassWriter,org.objectweb.asm.Item[],char[])",
            "org.objectweb.asm.ClassWriter:org.objectweb.asm.Item a(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[])",
            "com.eclipsesource.json.JsonObject$HashIndexTable:int hashSlotFor(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object put_internal(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void putResize(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:void push(java.lang.Object,java.lang.Object,int,java.lang.Object,int,java.lang.Object,int,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object remove(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsKey(java.lang.Object)"
        ]
    },
    "org.objectweb.asm.ClassWriter:void <init>(org.objectweb.asm.ClassReader,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.objectweb.asm.ClassReader:void a(org.objectweb.asm.MethodVisitor,org.objectweb.asm.Context,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.objectweb.asm.ClassReader:int b(org.objectweb.asm.ClassVisitor,org.objectweb.asm.Context,int)"
        ]
    },
    "org.objectweb.asm.MethodVisitor:void visitInvokeDynamicInsn(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.eclipsesource.json.JsonObject:com.eclipsesource.json.JsonObject add(java.lang.String,com.eclipsesource.json.JsonValue)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.eclipsesource.json.JsonObject:com.eclipsesource.json.JsonObject add(java.lang.String,int)",
            "com.eclipsesource.json.JsonObject:com.eclipsesource.json.JsonObject add(java.lang.String,long)",
            "com.eclipsesource.json.JsonObject:com.eclipsesource.json.JsonObject add(java.lang.String,float)",
            "com.eclipsesource.json.JsonObject:com.eclipsesource.json.JsonObject add(java.lang.String,double)",
            "com.eclipsesource.json.JsonObject:com.eclipsesource.json.JsonObject add(java.lang.String,boolean)",
            "com.eclipsesource.json.JsonObject:com.eclipsesource.json.JsonObject add(java.lang.String,java.lang.String)",
            "com.eclipsesource.json.JsonParser:com.eclipsesource.json.JsonObject readObject()"
        ]
    },
    "com.eclipsesource.json.JsonObject:com.eclipsesource.json.JsonObject set(java.lang.String,com.eclipsesource.json.JsonValue)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.eclipsesource.json.JsonObject:com.eclipsesource.json.JsonObject set(java.lang.String,int)",
            "com.eclipsesource.json.JsonObject:com.eclipsesource.json.JsonObject set(java.lang.String,long)",
            "com.eclipsesource.json.JsonObject:com.eclipsesource.json.JsonObject set(java.lang.String,float)",
            "com.eclipsesource.json.JsonObject:com.eclipsesource.json.JsonObject set(java.lang.String,double)",
            "com.eclipsesource.json.JsonObject:com.eclipsesource.json.JsonObject set(java.lang.String,boolean)",
            "com.eclipsesource.json.JsonObject:com.eclipsesource.json.JsonObject set(java.lang.String,java.lang.String)"
        ]
    },
    "com.eclipsesource.json.JsonObject:void updateHashIndex()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.eclipsesource.json.JsonObject:void <init>(com.eclipsesource.json.JsonObject,boolean)",
            "com.eclipsesource.json.JsonObject:void readObject(java.io.ObjectInputStream)"
        ]
    },
    "com.eclipsesource.json.JsonObject:int indexOf(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.eclipsesource.json.JsonObject:com.eclipsesource.json.JsonObject set(java.lang.String,com.eclipsesource.json.JsonValue)",
            "com.eclipsesource.json.JsonObject:com.eclipsesource.json.JsonObject remove(java.lang.String)",
            "com.eclipsesource.json.JsonObject:com.eclipsesource.json.JsonValue get(java.lang.String)"
        ]
    },
    "com.esotericsoftware.kryo.util.DefaultClassResolver:com.esotericsoftware.kryo.Registration register(com.esotericsoftware.kryo.Registration)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:com.esotericsoftware.kryo.Registration register(java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:com.esotericsoftware.kryo.Registration register(com.esotericsoftware.kryo.Registration)",
            "com.esotericsoftware.kryo.util.DefaultClassResolver:com.esotericsoftware.kryo.Registration registerImplicit(java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.util.DefaultClassResolver:com.esotericsoftware.kryo.Registration readName(com.esotericsoftware.kryo.io.Input)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.util.DefaultClassResolver:com.esotericsoftware.kryo.Registration readClass(com.esotericsoftware.kryo.io.Input)"
        ]
    },
    "com.esotericsoftware.kryo.util.ObjectMap:void shrink(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.util.ObjectMap:void clear(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.util.ObjectMap:void ensureCapacity(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.util.ObjectMap:void putAll(com.esotericsoftware.kryo.util.ObjectMap)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.ExternalizableSerializer:com.esotericsoftware.kryo.serializers.JavaSerializer getJavaSerializerIfRequired(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.ExternalizableSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.ExternalizableSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.ExternalizableSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeClassAndObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.EnumSet)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.ExternalizableSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readClassAndObject(com.esotericsoftware.kryo.io.Input)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:java.util.EnumSet read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.Kryo:com.esotericsoftware.kryo.Registration register(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:void <init>(com.esotericsoftware.kryo.ClassResolver,com.esotericsoftware.kryo.ReferenceResolver,com.esotericsoftware.kryo.StreamFactory)"
        ]
    },
    "com.esotericsoftware.kryo.Kryo:com.esotericsoftware.kryo.Registration register(java.lang.Class,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.util.KryoNamespace:com.esotericsoftware.kryo.Kryo create()"
        ]
    },
    "com.esotericsoftware.kryo.Kryo:com.esotericsoftware.kryo.Registration register(java.lang.Class,com.esotericsoftware.kryo.Serializer)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:void <init>(com.esotericsoftware.kryo.ClassResolver,com.esotericsoftware.kryo.ReferenceResolver,com.esotericsoftware.kryo.StreamFactory)",
            "com.esotericsoftware.kryo.Kryo:com.esotericsoftware.kryo.Registration register(java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.Kryo:com.esotericsoftware.kryo.Registration getRegistration(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:com.esotericsoftware.kryo.Registration getRegistration(java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:com.esotericsoftware.kryo.Serializer getSerializer(java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object newInstance(java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.BeanSerializer:void <init>(com.esotericsoftware.kryo.Kryo,java.lang.Class)",
            "com.esotericsoftware.kryo.util.DefaultClassResolver:com.esotericsoftware.kryo.Registration writeClass(com.esotericsoftware.kryo.io.Output,java.lang.Class)",
            "com.esotericsoftware.kryo.util.DefaultClassResolver:com.esotericsoftware.kryo.Registration readName(com.esotericsoftware.kryo.io.Input)"
        ]
    },
    "org.jboss.netty.handler.codec.http.DefaultHttpMessage:void setChunked(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.HttpChunkAggregator:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.codec.http.HttpMessageDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.http.HttpMessageDecoder$State)",
            "org.jboss.netty.handler.codec.http.HttpMessageDecoder:java.lang.Object readFixedLengthContent(org.jboss.netty.buffer.ChannelBuffer)"
        ]
    },
    "org.jboss.netty.handler.codec.http.HttpChunkAggregator:void appendToCumulation(org.jboss.netty.buffer.ChannelBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.HttpChunkAggregator:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.http.HttpMessageDecoder:java.lang.Object reset()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.HttpMessageDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.http.HttpMessageDecoder$State)",
            "org.jboss.netty.handler.codec.http.HttpMessageDecoder:java.lang.Object readFixedLengthContent(org.jboss.netty.buffer.ChannelBuffer)"
        ]
    },
    "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void <init>(org.jboss.netty.handler.codec.http.HttpRequest)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void <init>(org.jboss.netty.handler.codec.http.multipart.HttpDataFactory,org.jboss.netty.handler.codec.http.HttpRequest)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestDecoder:void <init>(org.jboss.netty.handler.codec.http.multipart.HttpDataFactory,org.jboss.netty.handler.codec.http.HttpRequest,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestDecoder:void <init>(org.jboss.netty.handler.codec.http.HttpRequest)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestDecoder:void <init>(org.jboss.netty.handler.codec.http.multipart.HttpDataFactory,org.jboss.netty.handler.codec.http.HttpRequest)"
        ]
    },
    "org.jboss.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void <init>(org.jboss.netty.handler.codec.http.HttpRequest)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void <init>(org.jboss.netty.handler.codec.http.multipart.HttpDataFactory,org.jboss.netty.handler.codec.http.HttpRequest)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder:void addBodyFileUploads(java.lang.String,java.io.File[],java.lang.String[],boolean[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.http.DefaultHttpChunkTrailer$TrailingHeaders:org.jboss.netty.handler.codec.http.HttpHeaders add(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.DefaultHttpChunkTrailer:void addHeader(java.lang.String,java.lang.Object)",
            "org.jboss.netty.handler.codec.http.DefaultHttpMessage:void addHeader(java.lang.String,java.lang.Object)",
            "org.jboss.netty.handler.codec.http.HttpHeaders:void addHeader(org.jboss.netty.handler.codec.http.HttpMessage,java.lang.String,java.lang.Object)",
            "org.jboss.netty.handler.codec.http.HttpHeaders:void addIntHeader(org.jboss.netty.handler.codec.http.HttpMessage,java.lang.String,int)",
            "org.jboss.netty.handler.codec.http.HttpHeaders:void addDateHeader(org.jboss.netty.handler.codec.http.HttpMessage,java.lang.String,java.util.Date)",
            "org.jboss.netty.handler.codec.http.HttpHeaders:org.jboss.netty.handler.codec.http.HttpHeaders add(org.jboss.netty.handler.codec.http.HttpHeaders)",
            "org.jboss.netty.handler.codec.http.HttpHeaders:org.jboss.netty.handler.codec.http.HttpHeaders set(org.jboss.netty.handler.codec.http.HttpHeaders)",
            "org.jboss.netty.handler.codec.http.HttpMessageDecoder:org.jboss.netty.handler.codec.http.HttpMessageDecoder$State readHeaders(org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.http.HttpMessageDecoder:org.jboss.netty.handler.codec.http.HttpChunkTrailer readTrailingHeaders(org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.http.HttpMessageEncoder:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder:org.jboss.netty.handler.codec.http.HttpRequest finalizeRequest()",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker00:org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker07:org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker08:org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker13:org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerHandshaker00:org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel,org.jboss.netty.handler.codec.http.HttpRequest)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerHandshaker07:org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel,org.jboss.netty.handler.codec.http.HttpRequest)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerHandshaker08:org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel,org.jboss.netty.handler.codec.http.HttpRequest)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerHandshaker13:org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel,org.jboss.netty.handler.codec.http.HttpRequest)",
            "org.jboss.netty.handler.codec.spdy.SpdyHttpDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)",
            "org.jboss.netty.handler.codec.spdy.SpdyHttpDecoder:org.jboss.netty.handler.codec.http.HttpRequest createHttpRequest(int,org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "org.jboss.netty.handler.codec.spdy.SpdyHttpDecoder:org.jboss.netty.handler.codec.http.HttpResponse createHttpResponse(int,org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame)"
        ]
    },
    "org.jboss.netty.handler.codec.http.DefaultHttpChunkTrailer:void addHeader(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.http.DefaultHttpMessage:void addHeader(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.http.HttpHeaders:void addHeader(org.jboss.netty.handler.codec.http.HttpMessage,java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.HttpHeaders:void setTransferEncodingChunked(org.jboss.netty.handler.codec.http.HttpMessage)"
        ]
    },
    "org.jboss.netty.handler.codec.http.HttpHeaders:void addIntHeader(org.jboss.netty.handler.codec.http.HttpMessage,java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.http.HttpHeaders:void addDateHeader(org.jboss.netty.handler.codec.http.HttpMessage,java.lang.String,java.util.Date)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.http.HttpMessageDecoder:org.jboss.netty.handler.codec.http.HttpChunkTrailer readTrailingHeaders(org.jboss.netty.buffer.ChannelBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.HttpMessageDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.http.HttpMessageDecoder$State)"
        ]
    },
    "org.jboss.netty.handler.codec.http.DefaultHttpChunkTrailer$TrailingHeaders:org.jboss.netty.handler.codec.http.HttpHeaders set(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel$2:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.handler.codec.http.DefaultHttpChunkTrailer:void setHeader(java.lang.String,java.lang.Object)",
            "org.jboss.netty.handler.codec.http.DefaultHttpMessage:void setHeader(java.lang.String,java.lang.Object)",
            "org.jboss.netty.handler.codec.http.HttpChunkAggregator:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.codec.http.HttpContentDecoder:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.codec.http.HttpContentEncoder:void writeRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.codec.http.HttpHeaders:void setKeepAlive(org.jboss.netty.handler.codec.http.HttpMessage,boolean)",
            "org.jboss.netty.handler.codec.http.HttpHeaders:void setHeader(org.jboss.netty.handler.codec.http.HttpMessage,java.lang.String,java.lang.Object)",
            "org.jboss.netty.handler.codec.http.HttpHeaders:void setIntHeader(org.jboss.netty.handler.codec.http.HttpMessage,java.lang.String,int)",
            "org.jboss.netty.handler.codec.http.HttpHeaders:void setDateHeader(org.jboss.netty.handler.codec.http.HttpMessage,java.lang.String,java.util.Date)",
            "org.jboss.netty.handler.codec.http.HttpHeaders:void setContentLength(org.jboss.netty.handler.codec.http.HttpMessage,long)",
            "org.jboss.netty.handler.codec.http.HttpHeaders:void setHost(org.jboss.netty.handler.codec.http.HttpMessage,java.lang.String)",
            "org.jboss.netty.handler.codec.http.HttpHeaders:void setDate(org.jboss.netty.handler.codec.http.HttpMessage,java.util.Date)",
            "org.jboss.netty.handler.codec.http.HttpHeaders:void set100ContinueExpected(org.jboss.netty.handler.codec.http.HttpMessage,boolean)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder:org.jboss.netty.handler.codec.http.HttpRequest finalizeRequest()",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker00:org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerHandshakerFactory:org.jboss.netty.channel.ChannelFuture sendUnsupportedWebSocketVersionResponse(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.handler.codec.spdy.SpdyHttpHeaders:void setUrl(org.jboss.netty.handler.codec.http.HttpMessage,java.lang.String)",
            "org.jboss.netty.handler.codec.spdy.SpdyHttpHeaders:void setScheme(org.jboss.netty.handler.codec.http.HttpMessage,java.lang.String)"
        ]
    },
    "org.jboss.netty.handler.codec.http.DefaultHttpChunkTrailer:void setHeader(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.http.DefaultHttpMessage:void setHeader(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.http.HttpHeaders:void setKeepAlive(org.jboss.netty.handler.codec.http.HttpMessage,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.spdy.SpdyHttpDecoder:org.jboss.netty.handler.codec.http.HttpRequest createHttpRequest(int,org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "org.jboss.netty.handler.codec.spdy.SpdyHttpDecoder:org.jboss.netty.handler.codec.http.HttpResponse createHttpResponse(int,org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame)"
        ]
    },
    "org.jboss.netty.handler.codec.http.HttpHeaders:void setHeader(org.jboss.netty.handler.codec.http.HttpMessage,java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.http.HttpHeaders:void setIntHeader(org.jboss.netty.handler.codec.http.HttpMessage,java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.spdy.SpdyHttpHeaders:void setStreamId(org.jboss.netty.handler.codec.http.HttpMessage,int)",
            "org.jboss.netty.handler.codec.spdy.SpdyHttpHeaders:void setAssociatedToStreamId(org.jboss.netty.handler.codec.http.HttpMessage,int)",
            "org.jboss.netty.handler.codec.spdy.SpdyHttpHeaders:void setPriority(org.jboss.netty.handler.codec.http.HttpMessage,byte)"
        ]
    },
    "org.jboss.netty.handler.codec.http.HttpHeaders:void setContentLength(org.jboss.netty.handler.codec.http.HttpMessage,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.spdy.SpdyHttpDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)"
        ]
    },
    "org.jboss.netty.handler.codec.http.HttpHeaders:void setHost(org.jboss.netty.handler.codec.http.HttpMessage,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.spdy.SpdyHttpDecoder:org.jboss.netty.handler.codec.http.HttpRequest createHttpRequest(int,org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame)"
        ]
    },
    "org.jboss.netty.handler.codec.http.HttpHeaders:void set100ContinueExpected(org.jboss.netty.handler.codec.http.HttpMessage,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.HttpHeaders:void set100ContinueExpected(org.jboss.netty.handler.codec.http.HttpMessage)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.SpdyHttpHeaders:void setUrl(org.jboss.netty.handler.codec.http.HttpMessage,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.spdy.SpdyHttpDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.SpdyHttpHeaders:void setScheme(org.jboss.netty.handler.codec.http.HttpMessage,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.spdy.DefaultSpdyHeadersFrame:void addHeader(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.spdy.SpdyHeaderBlockRawDecoder:void decode(org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.spdy.SpdyFrameDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.spdy.SpdyHeaderBlockZlibDecoder:int decompress(org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.SpdyHeaders:void addHeader(org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame,java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.spdy.DefaultSpdyHeadersFrame:void setHeader(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.spdy.SpdyHeaders:void setHeader(org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame,java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.spdy.SpdyHeaders:void setHost(org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.spdy.SpdyHttpEncoder:org.jboss.netty.handler.codec.spdy.SpdySynStreamFrame createSynStreamFrame(org.jboss.netty.handler.codec.http.HttpMessage)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.SpdyHeaders:void setMethod(int,org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame,org.jboss.netty.handler.codec.http.HttpMethod)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.spdy.SpdyHttpEncoder:org.jboss.netty.handler.codec.spdy.SpdySynStreamFrame createSynStreamFrame(org.jboss.netty.handler.codec.http.HttpMessage)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.SpdyHeaders:void setScheme(int,org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.spdy.SpdyHttpEncoder:org.jboss.netty.handler.codec.spdy.SpdySynStreamFrame createSynStreamFrame(org.jboss.netty.handler.codec.http.HttpMessage)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.SpdyHeaders:void setStatus(int,org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame,org.jboss.netty.handler.codec.http.HttpResponseStatus)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.spdy.SpdyHttpDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)",
            "org.jboss.netty.handler.codec.spdy.SpdyHttpEncoder:org.jboss.netty.handler.codec.spdy.SpdySynStreamFrame createSynStreamFrame(org.jboss.netty.handler.codec.http.HttpMessage)",
            "org.jboss.netty.handler.codec.spdy.SpdyHttpEncoder:org.jboss.netty.handler.codec.spdy.SpdySynReplyFrame createSynReplyFrame(org.jboss.netty.handler.codec.http.HttpResponse)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.SpdyHeaders:void setUrl(int,org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.spdy.SpdyHttpEncoder:org.jboss.netty.handler.codec.spdy.SpdySynStreamFrame createSynStreamFrame(org.jboss.netty.handler.codec.http.HttpMessage)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.SpdyHeaders:void setVersion(int,org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame,org.jboss.netty.handler.codec.http.HttpVersion)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.spdy.SpdyHttpDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)",
            "org.jboss.netty.handler.codec.spdy.SpdyHttpEncoder:org.jboss.netty.handler.codec.spdy.SpdySynStreamFrame createSynStreamFrame(org.jboss.netty.handler.codec.http.HttpMessage)",
            "org.jboss.netty.handler.codec.spdy.SpdyHttpEncoder:org.jboss.netty.handler.codec.spdy.SpdySynReplyFrame createSynReplyFrame(org.jboss.netty.handler.codec.http.HttpResponse)"
        ]
    },
    "org.jboss.netty.handler.logging.LoggingHandler:void log(org.jboss.netty.channel.ChannelEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.logging.LoggingHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.logging.LoggingHandler:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.apache.commons.lang.builder.CompareToBuilder:int reflectionCompare(java.lang.Object,java.lang.Object,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.builder.EqualsBuilder:boolean reflectionEquals(java.lang.Object,java.lang.Object,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.builder.ReflectionToStringBuilder:java.lang.String toStringExclude(java.lang.Object,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.builder.ReflectionToStringBuilder:java.lang.String toStringExclude(java.lang.Object,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.builder.ReflectionToStringBuilder:java.lang.String toStringExclude(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang.builder.ReflectionToStringBuilder:java.lang.String toStringExclude(java.lang.Object,java.util.Collection)"
        ]
    },
    "org.apache.commons.lang.StringUtils:java.lang.String reverseDelimited(java.lang.String,char)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.StringUtils:java.lang.String reverseDelimitedString(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.StringUtils:java.lang.String concatenate(java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.StringUtils:java.lang.String join(java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Properties)"
        ]
    },
    "org.apache.commons.lang.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Map,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.text.StrSubstitutor:java.lang.String replaceSystemProperties(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.stc.MonitorLayout:boolean lambda$boxesOnTier$31(int,java.util.Set,org.onlab.stc.MonitorLayout$Box)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.MonitorLayout$lambda_boxesOnTier_31__45:boolean test(java.lang.Object)"
        ]
    },
    "org.onlab.graph.AbstractGraphPathSearch:void checkArguments(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.graph.BellmanFordGraphSearch:org.onlab.graph.GraphPathSearch$Result search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)",
            "org.onlab.graph.BreadthFirstSearch:org.onlab.graph.GraphPathSearch$Result search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)",
            "org.onlab.graph.DepthFirstSearch:org.onlab.graph.DepthFirstSearch$SpanningTreeResult search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)",
            "org.onlab.graph.DijkstraGraphSearch:org.onlab.graph.GraphPathSearch$Result search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)",
            "org.onlab.graph.SrlgGraphSearch:org.onlab.graph.GraphPathSearch$Result search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)"
        ]
    },
    "org.onlab.graph.KShortestPathsSearch$InnerEdgeWeighter:double weight(org.onlab.graph.Edge)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.graph.AbstractGraphPathSearch$DefaultResult:boolean relaxEdge(org.onlab.graph.Edge,double,org.onlab.graph.EdgeWeight,boolean[])",
            "org.onlab.graph.BreadthFirstSearch:org.onlab.graph.GraphPathSearch$Result search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)",
            "org.onlab.graph.DepthFirstSearch:org.onlab.graph.DepthFirstSearch$SpanningTreeResult search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)",
            "org.onlab.graph.KShortestPathsSearch$InnerEdgeWeighter:double weight(org.onlab.graph.Edge)",
            "org.onlab.graph.KShortestPathsSearch:java.lang.Double calculatePathCost(org.onlab.graph.EdgeWeight,java.util.List)",
            "org.onlab.graph.SrlgGraphSearch$2:double weight(org.onlab.graph.Edge)",
            "org.onlab.graph.SuurballeGraphSearch:double lambda$search$16(org.onlab.graph.EdgeWeight,org.onlab.graph.AbstractGraphPathSearch$DefaultResult,org.onlab.graph.Edge)",
            "org.onlab.graph.SuurballeGraphSearch:double lambda$search$15(org.onlab.graph.EdgeWeight,org.onlab.graph.AbstractGraphPathSearch$DefaultResult,org.onlab.graph.Edge)",
            "org.onlab.graph.TarjanGraphSearch:org.onlab.graph.TarjanGraphSearch$VertexData connect(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,org.onlab.graph.TarjanGraphSearch$SccResult)"
        ]
    },
    "org.onlab.graph.MutableAdjacencyListsGraph:void removeVertex(org.onlab.graph.Vertex)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.graph.MutableAdjacencyListsGraph:void removeEdge(org.onlab.graph.Edge)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.graph.SuurballeGraphSearch:org.onlab.graph.GraphPathSearch$Result search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)"
        ]
    },
    "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:void validateHeaderValue0(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders$HeaderEntry:java.lang.String setValue(java.lang.String)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:org.jboss.netty.handler.codec.http.HttpHeaders add(java.lang.String,java.lang.Object)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:org.jboss.netty.handler.codec.http.HttpHeaders add(java.lang.String,java.lang.Iterable)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:org.jboss.netty.handler.codec.http.HttpHeaders set(java.lang.String,java.lang.Object)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:org.jboss.netty.handler.codec.http.HttpHeaders set(java.lang.String,java.lang.Iterable)"
        ]
    },
    "org.apache.commons.lang.builder.HashCodeBuilder:boolean isRegistered(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.builder.HashCodeBuilder:void reflectionAppend(java.lang.Object,java.lang.Class,org.apache.commons.lang.builder.HashCodeBuilder,boolean,java.lang.String[])"
        ]
    },
    "org.apache.commons.lang3.builder.EqualsBuilder:boolean isRegistered(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.builder.EqualsBuilder:void reflectionAppend(java.lang.Object,java.lang.Object,java.lang.Class,org.apache.commons.lang3.builder.EqualsBuilder,boolean,java.lang.String[])"
        ]
    },
    "org.apache.commons.lang3.builder.HashCodeBuilder:boolean isRegistered(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.builder.HashCodeBuilder:void reflectionAppend(java.lang.Object,java.lang.Class,org.apache.commons.lang3.builder.HashCodeBuilder,boolean,java.lang.String[])"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentHashMap$Segment:java.lang.Object get(java.lang.Object,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.ConcurrentHashMap:java.lang.Object get(java.lang.Object)"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentHashMap$Segment:boolean containsKey(java.lang.Object,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.ConcurrentHashMap:boolean containsKey(java.lang.Object)"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentHashMap$Segment:java.lang.Object replace(java.lang.Object,int,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.ConcurrentHashMap:java.lang.Object replace(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentHashMap$Segment:java.lang.Object put(java.lang.Object,int,java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.ConcurrentHashMap:java.lang.Object put(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentHashMap:java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentHashMap:boolean containsValue(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Compiler:boolean registerStep(org.onlab.stc.Step,org.apache.commons.configuration.HierarchicalConfiguration,java.lang.String,org.onlab.stc.Group)",
            "org.onlab.stc.Compiler:void processDependency(org.apache.commons.configuration.HierarchicalConfiguration,java.lang.String)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$Values:boolean contains(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentHashMap:boolean contains(java.lang.Object)"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentHashMap$SimpleEntry:boolean equals(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.ConcurrentHashMap$EntrySet:boolean contains(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$Segment:boolean keyEq(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$Segment:boolean containsValue(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$Segment:boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$Segment:java.lang.Object remove(java.lang.Object,int,java.lang.Object,boolean)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$SimpleEntry:boolean eq(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$EntrySet:boolean contains(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$Segment:boolean containsValue(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$Segment:boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$Segment:java.lang.Object remove(java.lang.Object,int,java.lang.Object,boolean)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$SimpleEntry:boolean eq(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$EntrySet:boolean contains(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$Segment:boolean containsValue(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$Segment:boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$Segment:java.lang.Object remove(java.lang.Object,int,java.lang.Object,boolean)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$SimpleEntry:boolean eq(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$EntrySet:boolean contains(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:boolean keyEq(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:boolean containsValue(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:java.lang.Object remove(java.lang.Object,int,java.lang.Object,boolean)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$SimpleEntry:boolean eq(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang.ArrayUtils:int indexOf(java.lang.Object[],java.lang.Object,int)",
            "org.apache.commons.lang.ArrayUtils:int lastIndexOf(java.lang.Object[],java.lang.Object,int)",
            "org.apache.commons.lang.builder.EqualsBuilder:org.apache.commons.lang.builder.EqualsBuilder append(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang.IntHashMap:boolean contains(java.lang.Object)",
            "org.apache.commons.lang.mutable.MutableObject:boolean equals(java.lang.Object)",
            "org.apache.commons.lang.ObjectUtils:boolean equals(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang.time.FastDateFormat$Pair:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.AnnotationUtils:boolean memberEquals(java.lang.Class,java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang3.ArrayUtils:int indexOf(java.lang.Object[],java.lang.Object,int)",
            "org.apache.commons.lang3.ArrayUtils:int lastIndexOf(java.lang.Object[],java.lang.Object,int)",
            "org.apache.commons.lang3.builder.DiffBuilder:void <init>(java.lang.Object,java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle)",
            "org.apache.commons.lang3.builder.EqualsBuilder:org.apache.commons.lang3.builder.EqualsBuilder append(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang3.mutable.MutableObject:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.ObjectUtils:boolean equals(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang3.Range:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "com.esotericsoftware.kryo.util.IdentityMap:boolean containsValue(java.lang.Object,boolean)",
            "com.esotericsoftware.kryo.util.IdentityMap:java.lang.Object findKey(java.lang.Object,boolean)",
            "com.esotericsoftware.kryo.util.IntMap:boolean containsValue(java.lang.Object,boolean)",
            "com.esotericsoftware.kryo.util.IntMap:int findKey(java.lang.Object,boolean,int)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object put_internal(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object getStash(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object getStash(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object remove(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object removeStash(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsValue(java.lang.Object,boolean)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsKey(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsKeyStash(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object findKey(java.lang.Object,boolean)"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentIdentityHashMap:boolean containsValue(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Compiler:boolean registerStep(org.onlab.stc.Step,org.apache.commons.configuration.HierarchicalConfiguration,java.lang.String,org.onlab.stc.Group)",
            "org.onlab.stc.Compiler:void processDependency(org.apache.commons.configuration.HierarchicalConfiguration,java.lang.String)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$Values:boolean contains(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap:boolean contains(java.lang.Object)"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentIdentityHashMap:boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.util.internal.ConcurrentIdentityHashMap:java.lang.Object remove(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.graph.AbstractGraphPathSearch$DefaultResult:void removeVertex(org.onlab.graph.Vertex)",
            "org.onlab.util.ExtendedSet:boolean remove(java.lang.Object)",
            "org.onlab.util.ExtendedSet:java.lang.Boolean lambda$removeAll$23(java.lang.Object)",
            "org.onlab.util.ExtendedSet:java.lang.Boolean lambda$retainAll$22(java.lang.Object)",
            "org.jboss.netty.bootstrap.Bootstrap:void setOption(java.lang.String,java.lang.Object)",
            "org.jboss.netty.channel.AbstractChannel:boolean setClosed()",
            "org.jboss.netty.channel.ChannelLocal:java.lang.Object remove(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.channel.DefaultChannelPipeline:org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext remove(org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext)",
            "org.jboss.netty.channel.DefaultChannelPipeline:org.jboss.netty.channel.ChannelHandler removeFirst()",
            "org.jboss.netty.channel.DefaultChannelPipeline:org.jboss.netty.channel.ChannelHandler removeLast()",
            "org.jboss.netty.channel.DefaultChannelPipeline:org.jboss.netty.channel.ChannelHandler replace(org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext,java.lang.String,org.jboss.netty.channel.ChannelHandler)",
            "org.jboss.netty.channel.group.DefaultChannelGroup:boolean remove(java.lang.Object)",
            "org.jboss.netty.channel.local.LocalChannelRegistry:boolean unregister(org.jboss.netty.channel.local.LocalAddress)",
            "org.jboss.netty.channel.socket.nio.NioDatagramChannel:org.jboss.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void cleanMixedAttributes()",
            "org.jboss.netty.handler.codec.serialization.ReferenceMap:java.lang.Object remove(java.lang.Object)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame:void removeValue(int)",
            "org.jboss.netty.handler.codec.spdy.SpdyHttpDecoder:org.jboss.netty.handler.codec.http.HttpMessage removeMessage(int)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:org.jboss.netty.handler.codec.spdy.SpdySession$StreamState removeActiveStream(int,boolean)",
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor:java.util.concurrent.atomic.AtomicLong getChannelCounter(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor:boolean removeChildExecutor(java.lang.Object)",
            "org.jboss.netty.handler.ipfilter.OneIpFilterHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.util.MapBackedSet:boolean remove(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$HashIterator:void remove()",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$KeySet:boolean remove(java.lang.Object)",
            "org.apache.commons.lang.builder.ToStringStyle:void unregister(java.lang.Object)",
            "org.apache.commons.lang3.builder.ToStringStyle:void unregister(java.lang.Object)"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentIdentityHashMap:boolean remove(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$EntrySet:boolean remove(java.lang.Object)"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$SimpleEntry:boolean equals(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.ConcurrentHashMap$EntrySet:boolean contains(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$Segment:boolean keyEq(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$Segment:boolean containsValue(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$Segment:boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$Segment:java.lang.Object remove(java.lang.Object,int,java.lang.Object,boolean)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$SimpleEntry:boolean eq(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$EntrySet:boolean contains(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$Segment:boolean containsValue(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$Segment:boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$Segment:java.lang.Object remove(java.lang.Object,int,java.lang.Object,boolean)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$SimpleEntry:boolean eq(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$EntrySet:boolean contains(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$Segment:boolean containsValue(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$Segment:boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$Segment:java.lang.Object remove(java.lang.Object,int,java.lang.Object,boolean)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$SimpleEntry:boolean eq(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$EntrySet:boolean contains(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:boolean keyEq(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:boolean containsValue(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:java.lang.Object remove(java.lang.Object,int,java.lang.Object,boolean)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$SimpleEntry:boolean eq(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang.ArrayUtils:int indexOf(java.lang.Object[],java.lang.Object,int)",
            "org.apache.commons.lang.ArrayUtils:int lastIndexOf(java.lang.Object[],java.lang.Object,int)",
            "org.apache.commons.lang.builder.EqualsBuilder:org.apache.commons.lang.builder.EqualsBuilder append(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang.IntHashMap:boolean contains(java.lang.Object)",
            "org.apache.commons.lang.mutable.MutableObject:boolean equals(java.lang.Object)",
            "org.apache.commons.lang.ObjectUtils:boolean equals(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang.time.FastDateFormat$Pair:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.AnnotationUtils:boolean memberEquals(java.lang.Class,java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang3.ArrayUtils:int indexOf(java.lang.Object[],java.lang.Object,int)",
            "org.apache.commons.lang3.ArrayUtils:int lastIndexOf(java.lang.Object[],java.lang.Object,int)",
            "org.apache.commons.lang3.builder.DiffBuilder:void <init>(java.lang.Object,java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle)",
            "org.apache.commons.lang3.builder.EqualsBuilder:org.apache.commons.lang3.builder.EqualsBuilder append(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang3.mutable.MutableObject:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.ObjectUtils:boolean equals(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang3.Range:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "com.esotericsoftware.kryo.util.IdentityMap:boolean containsValue(java.lang.Object,boolean)",
            "com.esotericsoftware.kryo.util.IdentityMap:java.lang.Object findKey(java.lang.Object,boolean)",
            "com.esotericsoftware.kryo.util.IntMap:boolean containsValue(java.lang.Object,boolean)",
            "com.esotericsoftware.kryo.util.IntMap:int findKey(java.lang.Object,boolean,int)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object put_internal(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object getStash(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object getStash(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object remove(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object removeStash(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsValue(java.lang.Object,boolean)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsKey(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsKeyStash(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object findKey(java.lang.Object,boolean)"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap:boolean containsValue(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Compiler:boolean registerStep(org.onlab.stc.Step,org.apache.commons.configuration.HierarchicalConfiguration,java.lang.String,org.onlab.stc.Group)",
            "org.onlab.stc.Compiler:void processDependency(org.apache.commons.configuration.HierarchicalConfiguration,java.lang.String)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$Values:boolean contains(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap:boolean contains(java.lang.Object)"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap:boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$Segment:void removeStale()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$Segment:java.lang.Object readValueUnderLock(org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$HashEntry)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$Segment:boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$Segment:java.lang.Object replace(java.lang.Object,int,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$Segment:java.lang.Object put(java.lang.Object,int,java.lang.Object,boolean)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$Segment:java.lang.Object remove(java.lang.Object,int,java.lang.Object,boolean)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap:void purgeStaleEntries()"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap:java.lang.Object remove(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.graph.AbstractGraphPathSearch$DefaultResult:void removeVertex(org.onlab.graph.Vertex)",
            "org.onlab.util.ExtendedSet:boolean remove(java.lang.Object)",
            "org.onlab.util.ExtendedSet:java.lang.Boolean lambda$removeAll$23(java.lang.Object)",
            "org.onlab.util.ExtendedSet:java.lang.Boolean lambda$retainAll$22(java.lang.Object)",
            "org.jboss.netty.bootstrap.Bootstrap:void setOption(java.lang.String,java.lang.Object)",
            "org.jboss.netty.channel.AbstractChannel:boolean setClosed()",
            "org.jboss.netty.channel.ChannelLocal:java.lang.Object remove(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.channel.DefaultChannelPipeline:org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext remove(org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext)",
            "org.jboss.netty.channel.DefaultChannelPipeline:org.jboss.netty.channel.ChannelHandler removeFirst()",
            "org.jboss.netty.channel.DefaultChannelPipeline:org.jboss.netty.channel.ChannelHandler removeLast()",
            "org.jboss.netty.channel.DefaultChannelPipeline:org.jboss.netty.channel.ChannelHandler replace(org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext,java.lang.String,org.jboss.netty.channel.ChannelHandler)",
            "org.jboss.netty.channel.group.DefaultChannelGroup:boolean remove(java.lang.Object)",
            "org.jboss.netty.channel.local.LocalChannelRegistry:boolean unregister(org.jboss.netty.channel.local.LocalAddress)",
            "org.jboss.netty.channel.socket.nio.NioDatagramChannel:org.jboss.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void cleanMixedAttributes()",
            "org.jboss.netty.handler.codec.serialization.ReferenceMap:java.lang.Object remove(java.lang.Object)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame:void removeValue(int)",
            "org.jboss.netty.handler.codec.spdy.SpdyHttpDecoder:org.jboss.netty.handler.codec.http.HttpMessage removeMessage(int)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:org.jboss.netty.handler.codec.spdy.SpdySession$StreamState removeActiveStream(int,boolean)",
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor:java.util.concurrent.atomic.AtomicLong getChannelCounter(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor:boolean removeChildExecutor(java.lang.Object)",
            "org.jboss.netty.handler.ipfilter.OneIpFilterHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.util.MapBackedSet:boolean remove(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$HashIterator:void remove()",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$KeySet:boolean remove(java.lang.Object)",
            "org.apache.commons.lang.builder.ToStringStyle:void unregister(java.lang.Object)",
            "org.apache.commons.lang3.builder.ToStringStyle:void unregister(java.lang.Object)"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap:boolean remove(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$EntrySet:boolean remove(java.lang.Object)"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$SimpleEntry:boolean equals(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.ConcurrentHashMap$EntrySet:boolean contains(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$Segment:boolean keyEq(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$Segment:boolean containsValue(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$Segment:boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$Segment:java.lang.Object remove(java.lang.Object,int,java.lang.Object,boolean)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$SimpleEntry:boolean eq(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$EntrySet:boolean contains(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$Segment:boolean containsValue(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$Segment:boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$Segment:java.lang.Object remove(java.lang.Object,int,java.lang.Object,boolean)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$SimpleEntry:boolean eq(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$EntrySet:boolean contains(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$Segment:boolean containsValue(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$Segment:boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$Segment:java.lang.Object remove(java.lang.Object,int,java.lang.Object,boolean)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$SimpleEntry:boolean eq(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$EntrySet:boolean contains(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:boolean keyEq(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:boolean containsValue(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:java.lang.Object remove(java.lang.Object,int,java.lang.Object,boolean)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$SimpleEntry:boolean eq(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang.ArrayUtils:int indexOf(java.lang.Object[],java.lang.Object,int)",
            "org.apache.commons.lang.ArrayUtils:int lastIndexOf(java.lang.Object[],java.lang.Object,int)",
            "org.apache.commons.lang.builder.EqualsBuilder:org.apache.commons.lang.builder.EqualsBuilder append(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang.IntHashMap:boolean contains(java.lang.Object)",
            "org.apache.commons.lang.mutable.MutableObject:boolean equals(java.lang.Object)",
            "org.apache.commons.lang.ObjectUtils:boolean equals(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang.time.FastDateFormat$Pair:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.AnnotationUtils:boolean memberEquals(java.lang.Class,java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang3.ArrayUtils:int indexOf(java.lang.Object[],java.lang.Object,int)",
            "org.apache.commons.lang3.ArrayUtils:int lastIndexOf(java.lang.Object[],java.lang.Object,int)",
            "org.apache.commons.lang3.builder.DiffBuilder:void <init>(java.lang.Object,java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle)",
            "org.apache.commons.lang3.builder.EqualsBuilder:org.apache.commons.lang3.builder.EqualsBuilder append(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang3.mutable.MutableObject:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.ObjectUtils:boolean equals(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang3.Range:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "com.esotericsoftware.kryo.util.IdentityMap:boolean containsValue(java.lang.Object,boolean)",
            "com.esotericsoftware.kryo.util.IdentityMap:java.lang.Object findKey(java.lang.Object,boolean)",
            "com.esotericsoftware.kryo.util.IntMap:boolean containsValue(java.lang.Object,boolean)",
            "com.esotericsoftware.kryo.util.IntMap:int findKey(java.lang.Object,boolean,int)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object put_internal(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object getStash(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object getStash(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object remove(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object removeStash(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsValue(java.lang.Object,boolean)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsKey(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsKeyStash(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object findKey(java.lang.Object,boolean)"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:java.lang.Object get(java.lang.Object,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap:java.lang.Object get(java.lang.Object)"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:boolean containsKey(java.lang.Object,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap:boolean containsKey(java.lang.Object)"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:java.lang.Object replace(java.lang.Object,int,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap:java.lang.Object replace(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:java.lang.Object put(java.lang.Object,int,java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap:java.lang.Object put(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap:java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap:boolean containsValue(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Compiler:boolean registerStep(org.onlab.stc.Step,org.apache.commons.configuration.HierarchicalConfiguration,java.lang.String,org.onlab.stc.Group)",
            "org.onlab.stc.Compiler:void processDependency(org.apache.commons.configuration.HierarchicalConfiguration,java.lang.String)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Values:boolean contains(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap:boolean contains(java.lang.Object)"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:void removeStale()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:java.lang.Object readValueUnderLock(org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$HashEntry)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:java.lang.Object replace(java.lang.Object,int,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:java.lang.Object put(java.lang.Object,int,java.lang.Object,boolean)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:java.lang.Object remove(java.lang.Object,int,java.lang.Object,boolean)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap:void purgeStaleEntries()"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$SimpleEntry:boolean equals(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.ConcurrentHashMap$EntrySet:boolean contains(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$Segment:boolean keyEq(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$Segment:boolean containsValue(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$Segment:boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$Segment:java.lang.Object remove(java.lang.Object,int,java.lang.Object,boolean)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$SimpleEntry:boolean eq(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$EntrySet:boolean contains(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$Segment:boolean containsValue(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$Segment:boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$Segment:java.lang.Object remove(java.lang.Object,int,java.lang.Object,boolean)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$SimpleEntry:boolean eq(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$EntrySet:boolean contains(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$Segment:boolean containsValue(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$Segment:boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$Segment:java.lang.Object remove(java.lang.Object,int,java.lang.Object,boolean)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$SimpleEntry:boolean eq(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$EntrySet:boolean contains(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:boolean keyEq(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:boolean containsValue(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:java.lang.Object remove(java.lang.Object,int,java.lang.Object,boolean)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$SimpleEntry:boolean eq(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang.ArrayUtils:int indexOf(java.lang.Object[],java.lang.Object,int)",
            "org.apache.commons.lang.ArrayUtils:int lastIndexOf(java.lang.Object[],java.lang.Object,int)",
            "org.apache.commons.lang.builder.EqualsBuilder:org.apache.commons.lang.builder.EqualsBuilder append(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang.IntHashMap:boolean contains(java.lang.Object)",
            "org.apache.commons.lang.mutable.MutableObject:boolean equals(java.lang.Object)",
            "org.apache.commons.lang.ObjectUtils:boolean equals(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang.time.FastDateFormat$Pair:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.AnnotationUtils:boolean memberEquals(java.lang.Class,java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang3.ArrayUtils:int indexOf(java.lang.Object[],java.lang.Object,int)",
            "org.apache.commons.lang3.ArrayUtils:int lastIndexOf(java.lang.Object[],java.lang.Object,int)",
            "org.apache.commons.lang3.builder.DiffBuilder:void <init>(java.lang.Object,java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle)",
            "org.apache.commons.lang3.builder.EqualsBuilder:org.apache.commons.lang3.builder.EqualsBuilder append(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang3.mutable.MutableObject:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.ObjectUtils:boolean equals(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang3.Range:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "com.esotericsoftware.kryo.util.IdentityMap:boolean containsValue(java.lang.Object,boolean)",
            "com.esotericsoftware.kryo.util.IdentityMap:java.lang.Object findKey(java.lang.Object,boolean)",
            "com.esotericsoftware.kryo.util.IntMap:boolean containsValue(java.lang.Object,boolean)",
            "com.esotericsoftware.kryo.util.IntMap:int findKey(java.lang.Object,boolean,int)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object put_internal(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object getStash(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object getStash(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object remove(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object removeStash(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsValue(java.lang.Object,boolean)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsKey(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsKeyStash(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object findKey(java.lang.Object,boolean)"
        ]
    },
    "org.apache.commons.lang.ArrayUtils:int indexOf(java.lang.Object[],java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.ArrayUtils:boolean contains(java.lang.Object[],java.lang.Object)",
            "org.apache.commons.lang.ArrayUtils:java.lang.Object[] removeElement(java.lang.Object[],java.lang.Object)",
            "org.apache.commons.lang.exception.ExceptionUtils:boolean isCauseMethodName(java.lang.String)"
        ]
    },
    "org.apache.commons.lang.ArrayUtils:int lastIndexOf(java.lang.Object[],java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.ArrayUtils:boolean isEquals(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.builder.EqualsBuilder:void reflectionAppend(java.lang.Object,java.lang.Object,java.lang.Class,org.apache.commons.lang.builder.EqualsBuilder,boolean,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.builder.EqualsBuilder:boolean reflectionEquals(java.lang.Object,java.lang.Object,boolean,java.lang.Class,java.lang.String[])"
        ]
    },
    "org.apache.commons.lang.builder.EqualsBuilder:org.apache.commons.lang.builder.EqualsBuilder append(java.lang.Object[],java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.builder.EqualsBuilder:org.apache.commons.lang.builder.EqualsBuilder append(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.commons.lang.IntHashMap:boolean containsValue(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.ObjectUtils:boolean notEqual(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.text.ExtendedMessageFormat:boolean equals(java.lang.Object)"
        ]
    },
    "org.apache.commons.lang3.AnnotationUtils:boolean equals(java.lang.'annotation'.Annotation,java.lang.'annotation'.Annotation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.AnnotationUtils:boolean memberEquals(java.lang.Class,java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang3.AnnotationUtils:boolean annotationArrayMemberEquals(java.lang.'annotation'.Annotation[],java.lang.'annotation'.Annotation[])"
        ]
    },
    "org.apache.commons.lang3.ArrayUtils:int indexOf(java.lang.Object[],java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.ArrayUtils:boolean contains(java.lang.Object[],java.lang.Object)",
            "org.apache.commons.lang3.ArrayUtils:java.lang.Object[] removeElement(java.lang.Object[],java.lang.Object)"
        ]
    },
    "org.apache.commons.lang3.ArrayUtils:int lastIndexOf(java.lang.Object[],java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.ArrayUtils:boolean isEquals(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.builder.EqualsBuilder:org.apache.commons.lang3.builder.EqualsBuilder append(java.lang.Object[],java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.builder.EqualsBuilder:org.apache.commons.lang3.builder.EqualsBuilder append(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.commons.lang3.concurrent.ConstantInitializer:boolean equals(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.ConcurrentHashMap$EntrySet:boolean contains(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$Segment:boolean keyEq(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$Segment:boolean containsValue(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$Segment:boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$Segment:java.lang.Object remove(java.lang.Object,int,java.lang.Object,boolean)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$SimpleEntry:boolean eq(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$EntrySet:boolean contains(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$Segment:boolean containsValue(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$Segment:boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$Segment:java.lang.Object remove(java.lang.Object,int,java.lang.Object,boolean)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$SimpleEntry:boolean eq(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$EntrySet:boolean contains(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$Segment:boolean containsValue(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$Segment:boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$Segment:java.lang.Object remove(java.lang.Object,int,java.lang.Object,boolean)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$SimpleEntry:boolean eq(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$EntrySet:boolean contains(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:boolean keyEq(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:boolean containsValue(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:java.lang.Object remove(java.lang.Object,int,java.lang.Object,boolean)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$SimpleEntry:boolean eq(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang.ArrayUtils:int indexOf(java.lang.Object[],java.lang.Object,int)",
            "org.apache.commons.lang.ArrayUtils:int lastIndexOf(java.lang.Object[],java.lang.Object,int)",
            "org.apache.commons.lang.builder.EqualsBuilder:org.apache.commons.lang.builder.EqualsBuilder append(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang.IntHashMap:boolean contains(java.lang.Object)",
            "org.apache.commons.lang.mutable.MutableObject:boolean equals(java.lang.Object)",
            "org.apache.commons.lang.ObjectUtils:boolean equals(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang.time.FastDateFormat$Pair:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.AnnotationUtils:boolean memberEquals(java.lang.Class,java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang3.ArrayUtils:int indexOf(java.lang.Object[],java.lang.Object,int)",
            "org.apache.commons.lang3.ArrayUtils:int lastIndexOf(java.lang.Object[],java.lang.Object,int)",
            "org.apache.commons.lang3.builder.DiffBuilder:void <init>(java.lang.Object,java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle)",
            "org.apache.commons.lang3.builder.EqualsBuilder:org.apache.commons.lang3.builder.EqualsBuilder append(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang3.mutable.MutableObject:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.ObjectUtils:boolean equals(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang3.Range:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "com.esotericsoftware.kryo.util.IdentityMap:boolean containsValue(java.lang.Object,boolean)",
            "com.esotericsoftware.kryo.util.IdentityMap:java.lang.Object findKey(java.lang.Object,boolean)",
            "com.esotericsoftware.kryo.util.IntMap:boolean containsValue(java.lang.Object,boolean)",
            "com.esotericsoftware.kryo.util.IntMap:int findKey(java.lang.Object,boolean,int)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object put_internal(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object getStash(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object getStash(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object remove(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object removeStash(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsValue(java.lang.Object,boolean)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsKey(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsKeyStash(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object findKey(java.lang.Object,boolean)"
        ]
    },
    "org.apache.commons.lang3.ObjectUtils:boolean notEqual(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.text.ExtendedMessageFormat:boolean equals(java.lang.Object)"
        ]
    },
    "org.apache.commons.lang3.reflect.TypeUtils:boolean equals(java.lang.reflect.Type,java.lang.reflect.Type)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.reflect.MethodUtils:java.util.Set getOverrideHierarchy(java.lang.reflect.Method,org.apache.commons.lang3.ClassUtils$Interfaces)",
            "org.apache.commons.lang3.reflect.TypeLiteral:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.reflect.TypeUtils:boolean equals(java.lang.reflect.ParameterizedType,java.lang.reflect.Type)",
            "org.apache.commons.lang3.reflect.TypeUtils:boolean equals(java.lang.reflect.GenericArrayType,java.lang.reflect.Type)",
            "org.apache.commons.lang3.reflect.TypeUtils:boolean equals(java.lang.reflect.Type[],java.lang.reflect.Type[])"
        ]
    },
    "org.apache.commons.lang3.tuple.Pair:boolean equals(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.ConcurrentHashMap$EntrySet:boolean contains(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$Segment:boolean keyEq(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$Segment:boolean containsValue(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$Segment:boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$Segment:java.lang.Object remove(java.lang.Object,int,java.lang.Object,boolean)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$SimpleEntry:boolean eq(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$EntrySet:boolean contains(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$Segment:boolean containsValue(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$Segment:boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$Segment:java.lang.Object remove(java.lang.Object,int,java.lang.Object,boolean)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$SimpleEntry:boolean eq(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$EntrySet:boolean contains(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$Segment:boolean containsValue(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$Segment:boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$Segment:java.lang.Object remove(java.lang.Object,int,java.lang.Object,boolean)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$SimpleEntry:boolean eq(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$EntrySet:boolean contains(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:boolean keyEq(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:boolean containsValue(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:java.lang.Object remove(java.lang.Object,int,java.lang.Object,boolean)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$SimpleEntry:boolean eq(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang.ArrayUtils:int indexOf(java.lang.Object[],java.lang.Object,int)",
            "org.apache.commons.lang.ArrayUtils:int lastIndexOf(java.lang.Object[],java.lang.Object,int)",
            "org.apache.commons.lang.builder.EqualsBuilder:org.apache.commons.lang.builder.EqualsBuilder append(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang.IntHashMap:boolean contains(java.lang.Object)",
            "org.apache.commons.lang.mutable.MutableObject:boolean equals(java.lang.Object)",
            "org.apache.commons.lang.ObjectUtils:boolean equals(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang.time.FastDateFormat$Pair:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.AnnotationUtils:boolean memberEquals(java.lang.Class,java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang3.ArrayUtils:int indexOf(java.lang.Object[],java.lang.Object,int)",
            "org.apache.commons.lang3.ArrayUtils:int lastIndexOf(java.lang.Object[],java.lang.Object,int)",
            "org.apache.commons.lang3.builder.DiffBuilder:void <init>(java.lang.Object,java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle)",
            "org.apache.commons.lang3.builder.EqualsBuilder:org.apache.commons.lang3.builder.EqualsBuilder append(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang3.mutable.MutableObject:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.ObjectUtils:boolean equals(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang3.Range:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "com.esotericsoftware.kryo.util.IdentityMap:boolean containsValue(java.lang.Object,boolean)",
            "com.esotericsoftware.kryo.util.IdentityMap:java.lang.Object findKey(java.lang.Object,boolean)",
            "com.esotericsoftware.kryo.util.IntMap:boolean containsValue(java.lang.Object,boolean)",
            "com.esotericsoftware.kryo.util.IntMap:int findKey(java.lang.Object,boolean,int)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object put_internal(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object getStash(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object getStash(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object remove(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object removeStash(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsValue(java.lang.Object,boolean)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsKey(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsKeyStash(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object findKey(java.lang.Object,boolean)"
        ]
    },
    "org.apache.commons.lang3.tuple.Triple:boolean equals(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.ConcurrentHashMap$EntrySet:boolean contains(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$Segment:boolean keyEq(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$Segment:boolean containsValue(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$Segment:boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$Segment:java.lang.Object remove(java.lang.Object,int,java.lang.Object,boolean)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$SimpleEntry:boolean eq(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$EntrySet:boolean contains(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$Segment:boolean containsValue(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$Segment:boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$Segment:java.lang.Object remove(java.lang.Object,int,java.lang.Object,boolean)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$SimpleEntry:boolean eq(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$EntrySet:boolean contains(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$Segment:boolean containsValue(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$Segment:boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$Segment:java.lang.Object remove(java.lang.Object,int,java.lang.Object,boolean)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$SimpleEntry:boolean eq(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$EntrySet:boolean contains(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:boolean keyEq(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:boolean containsValue(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:java.lang.Object remove(java.lang.Object,int,java.lang.Object,boolean)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$SimpleEntry:boolean eq(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang.ArrayUtils:int indexOf(java.lang.Object[],java.lang.Object,int)",
            "org.apache.commons.lang.ArrayUtils:int lastIndexOf(java.lang.Object[],java.lang.Object,int)",
            "org.apache.commons.lang.builder.EqualsBuilder:org.apache.commons.lang.builder.EqualsBuilder append(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang.IntHashMap:boolean contains(java.lang.Object)",
            "org.apache.commons.lang.mutable.MutableObject:boolean equals(java.lang.Object)",
            "org.apache.commons.lang.ObjectUtils:boolean equals(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang.time.FastDateFormat$Pair:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.AnnotationUtils:boolean memberEquals(java.lang.Class,java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang3.ArrayUtils:int indexOf(java.lang.Object[],java.lang.Object,int)",
            "org.apache.commons.lang3.ArrayUtils:int lastIndexOf(java.lang.Object[],java.lang.Object,int)",
            "org.apache.commons.lang3.builder.DiffBuilder:void <init>(java.lang.Object,java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle)",
            "org.apache.commons.lang3.builder.EqualsBuilder:org.apache.commons.lang3.builder.EqualsBuilder append(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang3.mutable.MutableObject:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.ObjectUtils:boolean equals(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang3.Range:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "com.esotericsoftware.kryo.util.IdentityMap:boolean containsValue(java.lang.Object,boolean)",
            "com.esotericsoftware.kryo.util.IdentityMap:java.lang.Object findKey(java.lang.Object,boolean)",
            "com.esotericsoftware.kryo.util.IntMap:boolean containsValue(java.lang.Object,boolean)",
            "com.esotericsoftware.kryo.util.IntMap:int findKey(java.lang.Object,boolean,int)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object put_internal(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object getStash(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object getStash(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object remove(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object removeStash(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsValue(java.lang.Object,boolean)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsKey(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsKeyStash(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object findKey(java.lang.Object,boolean)"
        ]
    },
    "org.apache.commons.lang.time.DurationFormatUtils:java.lang.String formatDurationISO(long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.time.DurationFormatUtils:java.lang.String formatDuration(long,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.time.DurationFormatUtils:java.lang.String formatDurationHMS(long)",
            "org.apache.commons.lang.time.DurationFormatUtils:java.lang.String formatDurationWords(long,boolean,boolean)"
        ]
    },
    "org.apache.commons.lang.time.DurationFormatUtils:java.lang.String formatPeriodISO(long,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.time.DurationFormatUtils:java.lang.String formatPeriod(long,long,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.builder.CompareToBuilder:int reflectionCompare(java.lang.Object,java.lang.Object,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.builder.ReflectionToStringBuilder:java.lang.String toStringExclude(java.lang.Object,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.builder.ReflectionToStringBuilder:java.lang.String toStringExclude(java.lang.Object,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.builder.ReflectionToStringBuilder:java.lang.String toStringExclude(java.lang.Object,java.util.Collection)"
        ]
    },
    "org.apache.commons.lang3.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Properties)"
        ]
    },
    "org.apache.commons.lang3.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Map,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.text.StrSubstitutor:java.lang.String replaceSystemProperties(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.time.DurationFormatUtils:java.lang.String formatDurationISO(long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.time.DurationFormatUtils:java.lang.String formatDuration(long,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.time.DurationFormatUtils:java.lang.String formatDurationHMS(long)",
            "org.apache.commons.lang3.time.DurationFormatUtils:java.lang.String formatDurationWords(long,boolean,boolean)"
        ]
    },
    "org.apache.commons.lang3.time.DurationFormatUtils:java.lang.String formatPeriodISO(long,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.time.DurationFormatUtils:java.lang.String formatPeriod(long,long,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.enum.Enum:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.enum.ValuedEnum:void <init>(java.lang.String,int)"
        ]
    },
    "org.apache.commons.lang.enums.Enum:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.enums.ValuedEnum:void <init>(java.lang.String,int)"
        ]
    },
    "org.apache.commons.lang.builder.ToStringStyle:void appendInternal(java.lang.StringBuffer,java.lang.String,java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.builder.ToStringStyle:void append(java.lang.StringBuffer,java.lang.String,java.lang.Object,java.lang.Boolean)",
            "org.apache.commons.lang.builder.ToStringStyle:void appendDetail(java.lang.StringBuffer,java.lang.String,java.lang.Object[])",
            "org.apache.commons.lang.builder.ToStringStyle:void reflectionAppendArrayDetail(java.lang.StringBuffer,java.lang.String,java.lang.Object)"
        ]
    },
    "org.apache.commons.lang.builder.ToStringStyle:void appendStart(java.lang.StringBuffer,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.builder.ToStringBuilder:void <init>(java.lang.Object,org.apache.commons.lang.builder.ToStringStyle,java.lang.StringBuffer)"
        ]
    },
    "org.apache.commons.lang.reflect.ConstructorUtils:java.lang.Object invokeConstructor(java.lang.Class,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.reflect.ConstructorUtils:java.lang.Object invokeConstructor(java.lang.Class,java.lang.Object)"
        ]
    },
    "org.apache.commons.lang.reflect.MemberUtils:int compareParameterTypes(java.lang.Class[],java.lang.Class[],java.lang.Class[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.reflect.ConstructorUtils:java.lang.reflect.Constructor getMatchingAccessibleConstructor(java.lang.Class,java.lang.Class[])",
            "org.apache.commons.lang.reflect.MethodUtils:java.lang.reflect.Method getMatchingAccessibleMethod(java.lang.Class,java.lang.String,java.lang.Class[])"
        ]
    },
    "org.apache.commons.lang.reflect.MethodUtils:java.lang.Object invokeMethod(java.lang.Object,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.ObjectUtils:java.lang.Object clone(java.lang.Object)",
            "org.apache.commons.lang.reflect.MethodUtils:java.lang.Object invokeMethod(java.lang.Object,java.lang.String,java.lang.Object)"
        ]
    },
    "org.apache.commons.lang.reflect.MethodUtils:java.lang.Object invokeStaticMethod(java.lang.Class,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.reflect.MethodUtils:java.lang.Object invokeStaticMethod(java.lang.Class,java.lang.String,java.lang.Object)"
        ]
    },
    "org.apache.commons.lang.exception.NestableError:void printStackTrace()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.exception.NestableException:void printStackTrace()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Main:void startMonitorServer(org.onlab.stc.Monitor)"
        ]
    },
    "org.apache.commons.lang.exception.NestableRuntimeException:void printStackTrace()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Main:void startMonitorServer(org.onlab.stc.Monitor)"
        ]
    },
    "org.apache.commons.lang.NotImplementedException:void printStackTrace()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Main:void startMonitorServer(org.onlab.stc.Monitor)"
        ]
    },
    "org.apache.commons.lang.exception.ExceptionUtils:java.lang.String[] getStackFrames(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.exception.ExceptionUtils:java.util.List getStackFrameList(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.exception.ExceptionUtils:java.lang.String[] getRootCauseStackTrace(java.lang.Throwable)"
        ]
    },
    "org.apache.commons.lang3.exception.ExceptionUtils:java.lang.String[] getStackFrames(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.exception.ExceptionUtils:java.util.List getStackFrameList(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.exception.ExceptionUtils:java.lang.String[] getRootCauseStackTrace(java.lang.Throwable)"
        ]
    },
    "com.esotericsoftware.minlog.Log:void error(java.lang.String,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.minlog.Log:void error(java.lang.String,java.lang.String,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.minlog.Log:void error(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.minlog.Log:void error(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.minlog.Log:void warn(java.lang.String,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.minlog.Log:void warn(java.lang.String,java.lang.String,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.minlog.Log:void warn(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.minlog.Log:void warn(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.minlog.Log:void info(java.lang.String,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.minlog.Log:void info(java.lang.String,java.lang.String,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.minlog.Log:void info(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.minlog.Log:void info(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.minlog.Log:void debug(java.lang.String,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.minlog.Log:void debug(java.lang.String,java.lang.String,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.minlog.Log:void debug(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:com.esotericsoftware.kryo.Registration register(com.esotericsoftware.kryo.Registration)"
        ]
    },
    "com.esotericsoftware.minlog.Log:void debug(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:boolean writeReferenceOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,boolean)",
            "com.esotericsoftware.kryo.Kryo:int readReferenceOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class,boolean)",
            "com.esotericsoftware.kryo.util.Util:void log(java.lang.String,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.minlog.Log:void trace(java.lang.String,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.minlog.Log:void trace(java.lang.String,java.lang.String,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.minlog.Log:void trace(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:void <init>(com.esotericsoftware.kryo.ClassResolver,com.esotericsoftware.kryo.ReferenceResolver,com.esotericsoftware.kryo.StreamFactory)"
        ]
    },
    "com.esotericsoftware.minlog.Log:void trace(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:boolean writeReferenceOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,boolean)",
            "com.esotericsoftware.kryo.Kryo:int readReferenceOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class,boolean)",
            "com.esotericsoftware.kryo.Kryo:void reset()",
            "com.esotericsoftware.kryo.Kryo:void setRegistrationRequired(boolean)",
            "com.esotericsoftware.kryo.Kryo:boolean setReferences(boolean)",
            "com.esotericsoftware.kryo.Kryo:void setReferenceResolver(com.esotericsoftware.kryo.ReferenceResolver)",
            "com.esotericsoftware.kryo.Kryo:void pushGenericsScope(java.lang.Class,com.esotericsoftware.kryo.Generics)",
            "com.esotericsoftware.kryo.Registration:void setSerializer(com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.io.InputChunked:void readChunkSize()",
            "com.esotericsoftware.kryo.io.InputChunked:void nextChunks()",
            "com.esotericsoftware.kryo.io.OutputChunked:void writeChunkSize()",
            "com.esotericsoftware.kryo.io.OutputChunked:void endChunks()",
            "com.esotericsoftware.kryo.serializers.BeanSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.BeanSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.CompatibleFieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.CompatibleFieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ObjectArraySerializer:void setGenerics(com.esotericsoftware.kryo.Kryo,java.lang.Class[])",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:void <init>(com.esotericsoftware.kryo.Kryo,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:void <init>(com.esotericsoftware.kryo.Kryo,java.lang.Class,java.lang.Class[])",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:void rebuildCachedFields(boolean)",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:com.esotericsoftware.kryo.serializers.FieldSerializer$CachedField newCachedField(java.lang.reflect.Field,int,int)",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:com.esotericsoftware.kryo.serializers.FieldSerializer$CachedField newMatchingCachedField(java.lang.reflect.Field,int,java.lang.Class,java.lang.reflect.Type,java.lang.Class[])",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:void setFieldsCanBeNull(boolean)",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:void setFieldsAsAccessible(boolean)",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:void setIgnoreSyntheticFields(boolean)",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:void setFixedFieldTypes(boolean)",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:void setUseAsm(boolean)",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:void <clinit>()",
            "com.esotericsoftware.kryo.serializers.FieldSerializerGenericsUtil:com.esotericsoftware.kryo.Generics buildGenericsScope(java.lang.Class,java.lang.Class[])",
            "com.esotericsoftware.kryo.serializers.FieldSerializerGenericsUtil:java.lang.Class getTypeVarConcreteClass(java.lang.Class[],int,java.lang.String)",
            "com.esotericsoftware.kryo.serializers.FieldSerializerGenericsUtil:java.lang.Class[] computeFieldGenerics(java.lang.reflect.Type,java.lang.reflect.Field,java.lang.Class[])",
            "com.esotericsoftware.kryo.serializers.FieldSerializerGenericsUtil:com.esotericsoftware.kryo.serializers.FieldSerializer$CachedField newCachedFieldOfGenericType(java.lang.reflect.Field,int,java.lang.Class[],java.lang.reflect.Type)",
            "com.esotericsoftware.kryo.serializers.FieldSerializerGenericsUtil:java.lang.Class[] getGenerics(java.lang.reflect.Type,com.esotericsoftware.kryo.Kryo)",
            "com.esotericsoftware.kryo.serializers.FieldSerializerUnsafeUtilImpl:void createUnsafeCacheFieldsAndRegions(java.util.List,java.util.List,int,com.esotericsoftware.kryo.util.IntArray)",
            "com.esotericsoftware.kryo.serializers.ObjectField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.ObjectField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.TaggedFieldSerializer:void initializeCachedFields()",
            "com.esotericsoftware.kryo.util.DefaultClassResolver:com.esotericsoftware.kryo.Registration register(com.esotericsoftware.kryo.Registration)",
            "com.esotericsoftware.kryo.util.DefaultClassResolver:com.esotericsoftware.kryo.Registration writeClass(com.esotericsoftware.kryo.io.Output,java.lang.Class)",
            "com.esotericsoftware.kryo.util.DefaultClassResolver:void writeName(com.esotericsoftware.kryo.io.Output,java.lang.Class,com.esotericsoftware.kryo.Registration)",
            "com.esotericsoftware.kryo.util.DefaultClassResolver:com.esotericsoftware.kryo.Registration readClass(com.esotericsoftware.kryo.io.Input)",
            "com.esotericsoftware.kryo.util.DefaultClassResolver:com.esotericsoftware.kryo.Registration readName(com.esotericsoftware.kryo.io.Input)",
            "com.esotericsoftware.kryo.util.UnsafeUtil:java.lang.reflect.Field[] sortFieldsByOffset(java.util.List)",
            "com.esotericsoftware.kryo.util.UnsafeUtil:void <clinit>()",
            "com.esotericsoftware.kryo.util.Util:void log(java.lang.String,java.lang.Object)"
        ]
    },
    "org.apache.commons.lang.text.ExtendedMessageFormat:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.text.StrSubstitutor:boolean substitute(org.apache.commons.lang.text.StrBuilder,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.text.StrSubstitutor:java.lang.String replace(java.lang.String)",
            "org.apache.commons.lang.text.StrSubstitutor:java.lang.String replace(java.lang.String,int,int)",
            "org.apache.commons.lang.text.StrSubstitutor:java.lang.String replace(char[])",
            "org.apache.commons.lang.text.StrSubstitutor:java.lang.String replace(char[],int,int)",
            "org.apache.commons.lang.text.StrSubstitutor:java.lang.String replace(java.lang.StringBuffer)",
            "org.apache.commons.lang.text.StrSubstitutor:java.lang.String replace(java.lang.StringBuffer,int,int)",
            "org.apache.commons.lang.text.StrSubstitutor:java.lang.String replace(org.apache.commons.lang.text.StrBuilder)",
            "org.apache.commons.lang.text.StrSubstitutor:java.lang.String replace(org.apache.commons.lang.text.StrBuilder,int,int)",
            "org.apache.commons.lang.text.StrSubstitutor:java.lang.String replace(java.lang.Object)",
            "org.apache.commons.lang.text.StrSubstitutor:boolean replaceIn(java.lang.StringBuffer,int,int)",
            "org.apache.commons.lang.text.StrSubstitutor:boolean replaceIn(org.apache.commons.lang.text.StrBuilder)",
            "org.apache.commons.lang.text.StrSubstitutor:boolean replaceIn(org.apache.commons.lang.text.StrBuilder,int,int)",
            "org.apache.commons.lang.text.StrSubstitutor:int substitute(org.apache.commons.lang.text.StrBuilder,int,int,java.util.List)"
        ]
    },
    "org.apache.commons.lang3.builder.ToStringStyle:void append(java.lang.StringBuffer,java.lang.String,java.lang.Object,java.lang.Boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.builder.ToStringBuilder:org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.Object)",
            "org.apache.commons.lang3.builder.ToStringBuilder:org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,java.lang.Object)",
            "org.apache.commons.lang3.builder.ToStringBuilder:org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,java.lang.Object,boolean)"
        ]
    },
    "org.apache.commons.lang3.builder.ToStringStyle:void appendDetail(java.lang.StringBuffer,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.builder.RecursiveToStringStyle:void appendDetail(java.lang.StringBuffer,java.lang.String,java.util.Collection)",
            "org.apache.commons.lang3.builder.ToStringStyle:void appendInternal(java.lang.StringBuffer,java.lang.String,java.lang.Object,boolean)",
            "org.apache.commons.lang3.builder.ToStringStyle:void append(java.lang.StringBuffer,java.lang.String,java.lang.Object[],java.lang.Boolean)"
        ]
    },
    "org.apache.commons.lang3.builder.ToStringStyle:void reflectionAppendArrayDetail(java.lang.StringBuffer,java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.builder.ReflectionToStringBuilder:org.apache.commons.lang3.builder.ReflectionToStringBuilder reflectionAppendArray(java.lang.Object)"
        ]
    },
    "org.apache.commons.lang3.builder.ToStringBuilder:void <init>(java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle,java.lang.StringBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.builder.ReflectionToStringBuilder:void <init>(java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle,java.lang.StringBuffer)",
            "org.apache.commons.lang3.builder.ReflectionToStringBuilder:void <init>(java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle,java.lang.StringBuffer,java.lang.Class,boolean,boolean)",
            "org.apache.commons.lang3.builder.ToStringBuilder:void <init>(java.lang.Object)",
            "org.apache.commons.lang3.builder.ToStringBuilder:void <init>(java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle)"
        ]
    },
    "org.apache.commons.lang3.reflect.MemberUtils:int compareParameterTypes(java.lang.Class[],java.lang.Class[],java.lang.Class[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.reflect.ConstructorUtils:java.lang.reflect.Constructor getMatchingAccessibleConstructor(java.lang.Class,java.lang.Class[])",
            "org.apache.commons.lang3.reflect.MethodUtils:java.lang.reflect.Method getMatchingAccessibleMethod(java.lang.Class,java.lang.String,java.lang.Class[])"
        ]
    },
    "org.apache.commons.lang3.event.EventUtils:void bindEventsToMethod(java.lang.Object,java.lang.String,java.lang.Object,java.lang.Class,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.reflect.TypeUtils:java.util.Map getTypeArguments(java.lang.reflect.Type,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.builder.Diff:void <init>(java.lang.String)",
            "org.apache.commons.lang3.reflect.MethodUtils:java.util.Set getOverrideHierarchy(java.lang.reflect.Method,org.apache.commons.lang3.ClassUtils$Interfaces)",
            "org.apache.commons.lang3.reflect.TypeLiteral:void <init>()",
            "org.apache.commons.lang3.reflect.TypeUtils:java.lang.Class getRawType(java.lang.reflect.Type,java.lang.reflect.Type)"
        ]
    },
    "org.apache.commons.lang3.reflect.TypeUtils:java.util.Map getTypeArguments(java.lang.reflect.ParameterizedType)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.reflect.TypeUtils:java.lang.reflect.Type unrollVariables(java.util.Map,java.lang.reflect.Type)"
        ]
    },
    "org.apache.commons.lang3.reflect.TypeUtils:java.lang.reflect.ParameterizedType parameterize(java.lang.Class,java.lang.reflect.Type[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.reflect.TypeUtils:java.lang.reflect.ParameterizedType parameterize(java.lang.Class,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.reflect.TypeUtils:java.lang.reflect.ParameterizedType parameterizeWithOwner(java.lang.reflect.Type,java.lang.Class,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.concurrent.CallableBackgroundInitializer:java.lang.Object initialize()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.concurrent.BackgroundInitializer$InitializationTask:java.lang.Object call()"
        ]
    },
    "org.apache.commons.lang3.exception.ContextedException:org.apache.commons.lang3.exception.ExceptionContext setContextValue(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.exception.ContextedException:org.apache.commons.lang3.exception.ContextedException setContextValue(java.lang.String,java.lang.Object)",
            "org.apache.commons.lang3.exception.ContextedRuntimeException:org.apache.commons.lang3.exception.ContextedRuntimeException setContextValue(java.lang.String,java.lang.Object)"
        ]
    },
    "org.apache.commons.lang3.exception.ContextedRuntimeException:org.apache.commons.lang3.exception.ExceptionContext setContextValue(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.exception.ContextedException:org.apache.commons.lang3.exception.ContextedException setContextValue(java.lang.String,java.lang.Object)",
            "org.apache.commons.lang3.exception.ContextedRuntimeException:org.apache.commons.lang3.exception.ContextedRuntimeException setContextValue(java.lang.String,java.lang.Object)"
        ]
    },
    "org.onlab.packet.RADIUS:org.onlab.packet.RADIUSAttribute addMessageAuthenticator(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.packet.RADIUS:boolean checkMessageAuthenticator(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.ssl.SslHandler:boolean ignoreException(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.ssl.SslHandler:void exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ExceptionEvent)"
        ]
    },
    "org.apache.commons.lang.exception.NestableDelegate:java.lang.String getMessage(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.exception.NestableError:java.lang.String getMessage(int)",
            "org.apache.commons.lang.exception.NestableException:java.lang.String getMessage(int)",
            "org.apache.commons.lang.exception.NestableRuntimeException:java.lang.String getMessage(int)",
            "org.apache.commons.lang.NotImplementedException:java.lang.String getMessage(int)"
        ]
    },
    "org.apache.commons.lang.exception.NestableDelegate:java.lang.String getMessage(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.exception.NestableDelegate:java.lang.String[] getMessages()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.exception.NestableError:java.lang.String[] getMessages()",
            "org.apache.commons.lang.exception.NestableException:java.lang.String[] getMessages()",
            "org.apache.commons.lang.exception.NestableRuntimeException:java.lang.String[] getMessages()",
            "org.apache.commons.lang.NotImplementedException:java.lang.String[] getMessages()"
        ]
    },
    "org.apache.commons.lang3.reflect.TypeUtils:java.lang.reflect.Type[] getImplicitBounds(java.lang.reflect.TypeVariable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.reflect.TypeUtils:boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.GenericArrayType,java.util.Map)",
            "org.apache.commons.lang3.reflect.TypeUtils:boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.TypeVariable,java.util.Map)",
            "org.apache.commons.lang3.reflect.TypeUtils:java.util.Map getTypeArguments(java.lang.reflect.Type,java.lang.Class,java.util.Map)",
            "org.apache.commons.lang3.reflect.TypeUtils:boolean typesSatisfyVariables(java.util.Map)"
        ]
    },
    "org.apache.commons.lang3.text.ExtendedMessageFormat:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.text.StrSubstitutor:boolean substitute(org.apache.commons.lang3.text.StrBuilder,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.text.StrSubstitutor:java.lang.String replace(java.lang.String)",
            "org.apache.commons.lang3.text.StrSubstitutor:java.lang.String replace(java.lang.String,int,int)",
            "org.apache.commons.lang3.text.StrSubstitutor:java.lang.String replace(char[])",
            "org.apache.commons.lang3.text.StrSubstitutor:java.lang.String replace(char[],int,int)",
            "org.apache.commons.lang3.text.StrSubstitutor:java.lang.String replace(java.lang.StringBuffer)",
            "org.apache.commons.lang3.text.StrSubstitutor:java.lang.String replace(java.lang.StringBuffer,int,int)",
            "org.apache.commons.lang3.text.StrSubstitutor:java.lang.String replace(java.lang.CharSequence,int,int)",
            "org.apache.commons.lang3.text.StrSubstitutor:java.lang.String replace(org.apache.commons.lang3.text.StrBuilder)",
            "org.apache.commons.lang3.text.StrSubstitutor:java.lang.String replace(org.apache.commons.lang3.text.StrBuilder,int,int)",
            "org.apache.commons.lang3.text.StrSubstitutor:java.lang.String replace(java.lang.Object)",
            "org.apache.commons.lang3.text.StrSubstitutor:boolean replaceIn(java.lang.StringBuffer,int,int)",
            "org.apache.commons.lang3.text.StrSubstitutor:boolean replaceIn(java.lang.StringBuilder,int,int)",
            "org.apache.commons.lang3.text.StrSubstitutor:boolean replaceIn(org.apache.commons.lang3.text.StrBuilder)",
            "org.apache.commons.lang3.text.StrSubstitutor:boolean replaceIn(org.apache.commons.lang3.text.StrBuilder,int,int)",
            "org.apache.commons.lang3.text.StrSubstitutor:int substitute(org.apache.commons.lang3.text.StrBuilder,int,int,java.util.List)"
        ]
    },
    "org.apache.commons.lang3.time.FastDateFormat:void <init>(java.lang.String,java.util.TimeZone,java.util.Locale,java.util.Date)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.time.FastDateFormat:void <init>(java.lang.String,java.util.TimeZone,java.util.Locale)"
        ]
    },
    "org.apache.commons.lang3.time.FastDateParser:void <init>(java.lang.String,java.util.TimeZone,java.util.Locale)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.time.FastDateFormat:java.util.Date parse(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.time.FastDateParser:java.lang.Object parseObject(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.time.FastDateFormat:java.lang.Object parseObject(java.lang.String,java.text.ParsePosition)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.text.CompositeFormat:java.lang.Object parseObject(java.lang.String,java.text.ParsePosition)",
            "org.apache.commons.lang3.text.CompositeFormat:java.lang.Object parseObject(java.lang.String,java.text.ParsePosition)"
        ]
    },
    "com.eclipsesource.json.JsonValue:com.eclipsesource.json.JsonObject asObject()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.eclipsesource.json.JsonObject:com.eclipsesource.json.JsonObject readFrom(java.io.Reader)",
            "com.eclipsesource.json.JsonObject:com.eclipsesource.json.JsonObject readFrom(java.lang.String)"
        ]
    },
    "com.eclipsesource.json.JsonValue:com.eclipsesource.json.JsonArray asArray()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.eclipsesource.json.JsonArray:com.eclipsesource.json.JsonArray readFrom(java.io.Reader)",
            "com.eclipsesource.json.JsonArray:com.eclipsesource.json.JsonArray readFrom(java.lang.String)"
        ]
    },
    "com.eclipsesource.json.JsonValue:int asInt()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.eclipsesource.json.JsonValue:long asLong()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.eclipsesource.json.JsonValue:float asFloat()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.eclipsesource.json.JsonValue:double asDouble()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.eclipsesource.json.JsonValue:java.lang.String asString()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.eclipsesource.json.JsonValue:boolean asBoolean()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.eclipsesource.json.JsonLiteral:boolean asBoolean()"
        ]
    },
    "com.esotericsoftware.kryo.serializers.ClosureSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeClassAndObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.EnumSet)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.BeanSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeClassAndObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.EnumSet)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$StringArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$StringArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.KryoObjectOutput:void writeObject(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$CollectionsSingletonListSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$CollectionsSingletonListSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.CompatibleFieldSerializer:void <init>(com.esotericsoftware.kryo.Kryo,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.serializers.TaggedFieldSerializer:void <init>(com.esotericsoftware.kryo.Kryo,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ObjectArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeClassAndObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.EnumSet)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.TaggedFieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeClassAndObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.EnumSet)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioDatagramWorkerPool:org.jboss.netty.channel.socket.nio.AbstractNioWorker createWorker(java.util.concurrent.Executor)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.AbstractNioWorkerPool:org.jboss.netty.channel.socket.nio.AbstractNioWorker newWorker(java.util.concurrent.Executor)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.AbstractNioWorkerPool:org.jboss.netty.channel.socket.nio.AbstractNioWorker newWorker(java.util.concurrent.Executor)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.AbstractNioWorkerPool:void init()"
        ]
    },
    "org.jboss.netty.channel.socket.nio.AbstractNioBossPool:void <init>(java.util.concurrent.Executor,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.AbstractNioBossPool:void <init>(java.util.concurrent.Executor,int)",
            "org.jboss.netty.channel.socket.nio.NioClientBossPool:void <init>(java.util.concurrent.Executor,int,org.jboss.netty.util.Timer,org.jboss.netty.util.ThreadNameDeterminer)",
            "org.jboss.netty.channel.socket.nio.NioServerBossPool:void <init>(java.util.concurrent.Executor,int,org.jboss.netty.util.ThreadNameDeterminer)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioClientBossPool:void <init>(java.util.concurrent.Executor,int,org.jboss.netty.util.Timer,org.jboss.netty.util.ThreadNameDeterminer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.NioClientBossPool:void <init>(java.util.concurrent.Executor,int)",
            "org.jboss.netty.channel.socket.nio.NioClientSocketChannelFactory:void <init>(java.util.concurrent.Executor,int,org.jboss.netty.channel.socket.nio.WorkerPool,org.jboss.netty.util.Timer)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioServerBossPool:void <init>(java.util.concurrent.Executor,int,org.jboss.netty.util.ThreadNameDeterminer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.NioServerBossPool:void <init>(java.util.concurrent.Executor,int)",
            "org.jboss.netty.channel.socket.nio.NioServerSocketChannelFactory:void <init>(java.util.concurrent.Executor,int,org.jboss.netty.channel.socket.nio.WorkerPool)"
        ]
    },
    "org.apache.commons.lang.StringUtils:java.lang.String deleteSpaces(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.stc.Coordinator$Delegate:void lambda$onCompletion$15(org.onlab.stc.Step,org.onlab.stc.Coordinator$Status,org.onlab.stc.StepProcessListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.stc.Coordinator:void skipStep(org.onlab.stc.Step)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Coordinator:void execute(org.onlab.stc.Step)"
        ]
    },
    "org.onlab.stc.StepProcessor:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Coordinator:void execute(org.onlab.stc.Step)",
            "org.onlab.util.BoundedThreadPool$CallerFeedbackPolicy:void rejectedExecution(java.lang.Runnable,java.util.concurrent.ThreadPoolExecutor)",
            "org.onlab.util.BoundedThreadPool:void execute(java.lang.Runnable)",
            "org.onlab.util.SharedExecutorService:void execute(java.lang.Runnable)",
            "org.jboss.netty.channel.AbstractChannelSink:org.jboss.netty.channel.ChannelFuture execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable)",
            "org.jboss.netty.channel.socket.ChannelRunnableWrapper:void run()",
            "org.jboss.netty.channel.socket.nio.AbstractNioSelector:void processTaskQueue()",
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void executeInIoThread(java.lang.Runnable,boolean)",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void executeInIoThread(java.lang.Runnable)",
            "org.jboss.netty.channel.socket.oio.AbstractOioWorker:void processEventQueue()",
            "org.jboss.netty.handler.codec.embedder.AbstractCodecEmbedder$EmbeddedChannelSink:org.jboss.netty.channel.ChannelFuture execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable)",
            "org.jboss.netty.handler.execution.ChainedExecutor:void execute(java.lang.Runnable)",
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor$MemoryAwareRunnable:void run()",
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor:void doUnorderedExecute(java.lang.Runnable)",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor$ChildExecutor:void run()",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor:void doExecute(java.lang.Runnable)",
            "org.jboss.netty.handler.ssl.ImmediateExecutor:void execute(java.lang.Runnable)",
            "org.jboss.netty.handler.ssl.SslHandler$4:void run()",
            "org.jboss.netty.util.ThreadRenamingRunnable:void run()",
            "org.jboss.netty.util.VirtualExecutorService$ChildExecutorRunnable:void run()",
            "org.jboss.netty.util.internal.DeadLockProofWorker$1:void run()",
            "org.jboss.netty.util.internal.UnterminatableExecutor:void execute(java.lang.Runnable)"
        ]
    },
    "org.onlab.stc.Main:void processCommand()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Main:void run()"
        ]
    },
    "org.onlab.graph.Heap:org.onlab.graph.Heap insert(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.graph.Heap:void heapify()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.graph.DijkstraGraphSearch:org.onlab.graph.GraphPathSearch$Result search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)",
            "org.onlab.graph.Heap:void <init>(java.util.List,java.util.Comparator)",
            "org.onlab.graph.Heap:java.lang.Object extractExtreme()"
        ]
    },
    "org.apache.commons.lang.builder.CompareToBuilder:org.apache.commons.lang.builder.CompareToBuilder append(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.builder.CompareToBuilder:void reflectionAppend(java.lang.Object,java.lang.Object,java.lang.Class,org.apache.commons.lang.builder.CompareToBuilder,boolean,java.lang.String[])"
        ]
    },
    "org.apache.commons.lang.builder.CompareToBuilder:org.apache.commons.lang.builder.CompareToBuilder append(java.lang.Object[],java.lang.Object[],java.util.Comparator)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.builder.CompareToBuilder:org.apache.commons.lang.builder.CompareToBuilder append(java.lang.Object,java.lang.Object,java.util.Comparator)",
            "org.apache.commons.lang.builder.CompareToBuilder:org.apache.commons.lang.builder.CompareToBuilder append(java.lang.Object[],java.lang.Object[])"
        ]
    },
    "org.apache.commons.lang3.builder.CompareToBuilder:org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.builder.CompareToBuilder:void reflectionAppend(java.lang.Object,java.lang.Object,java.lang.Class,org.apache.commons.lang3.builder.CompareToBuilder,boolean,java.lang.String[])",
            "org.apache.commons.lang3.tuple.Pair:int compareTo(org.apache.commons.lang3.tuple.Pair)",
            "org.apache.commons.lang3.tuple.Triple:int compareTo(org.apache.commons.lang3.tuple.Triple)"
        ]
    },
    "org.apache.commons.lang3.builder.CompareToBuilder:org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object[],java.lang.Object[],java.util.Comparator)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.builder.CompareToBuilder:org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object,java.util.Comparator)",
            "org.apache.commons.lang3.builder.CompareToBuilder:org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object[],java.lang.Object[])"
        ]
    },
    "org.apache.commons.lang3.Range:org.apache.commons.lang3.Range between(java.lang.Object,java.lang.Object,java.util.Comparator)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.Range:org.apache.commons.lang3.Range is(java.lang.Comparable)",
            "org.apache.commons.lang3.Range:org.apache.commons.lang3.Range is(java.lang.Object,java.util.Comparator)",
            "org.apache.commons.lang3.Range:org.apache.commons.lang3.Range between(java.lang.Comparable,java.lang.Comparable)",
            "org.apache.commons.lang3.Range:org.apache.commons.lang3.Range intersectionWith(org.apache.commons.lang3.Range)"
        ]
    },
    "org.apache.commons.lang3.Range:boolean containsRange(org.apache.commons.lang3.Range)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.Range:boolean isOverlappedBy(org.apache.commons.lang3.Range)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.Range:org.apache.commons.lang3.Range intersectionWith(org.apache.commons.lang3.Range)"
        ]
    },
    "org.apache.commons.lang3.Range:int elementCompareTo(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.Range:boolean isAfterRange(org.apache.commons.lang3.Range)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.Range:boolean isBeforeRange(org.apache.commons.lang3.Range)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.packet.EthType:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.IGMP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.pim.PIMHelloOption:java.lang.String toString()",
            "org.onlab.util.Tools:java.lang.String get(java.util.Dictionary,java.lang.String)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:java.lang.String toString(java.lang.Object)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdyHeaders:java.lang.String toString(java.lang.Object)",
            "org.jboss.netty.util.internal.StringUtil:java.lang.String stripControlCharacters(java.lang.Object)",
            "org.apache.commons.lang.builder.ReflectionToStringBuilder:java.lang.String[] toNoNullStringArray(java.lang.Object[])",
            "org.apache.commons.lang.mutable.MutableObject:java.lang.String toString()",
            "org.apache.commons.lang.ObjectUtils:java.lang.String toString(java.lang.Object)",
            "org.apache.commons.lang.ObjectUtils:java.lang.String toString(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.lang.Object[],char,int,int)",
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.lang.Object[],java.lang.String,int,int)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder append(java.lang.Object)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendFixedWidthPadLeft(java.lang.Object,int,char)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendFixedWidthPadRight(java.lang.Object,int,char)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder insert(int,java.lang.Object)",
            "org.apache.commons.lang.text.StrLookup$MapStrLookup:java.lang.String lookup(java.lang.String)",
            "org.apache.commons.lang.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Properties)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:java.lang.String toString()",
            "org.apache.commons.lang.time.DurationFormatUtils:java.lang.String format(org.apache.commons.lang.time.DurationFormatUtils$Token[],int,int,int,int,int,int,int,boolean)",
            "org.apache.commons.lang3.builder.ReflectionToStringBuilder:java.lang.String[] toNoNullStringArray(java.lang.Object[])",
            "org.apache.commons.lang3.exception.DefaultExceptionContext:java.lang.String getFormattedExceptionMessage(java.lang.String)",
            "org.apache.commons.lang3.mutable.MutableObject:java.lang.String toString()",
            "org.apache.commons.lang3.ObjectUtils:java.lang.String toString(java.lang.Object)",
            "org.apache.commons.lang3.ObjectUtils:java.lang.String toString(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder append(java.lang.Object)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadLeft(java.lang.Object,int,char)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadRight(java.lang.Object,int,char)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder insert(int,java.lang.Object)",
            "org.apache.commons.lang3.text.StrLookup$MapStrLookup:java.lang.String lookup(java.lang.String)",
            "org.apache.commons.lang3.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Properties)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:java.lang.String toString()",
            "org.apache.commons.lang3.time.DurationFormatUtils:java.lang.String format(org.apache.commons.lang3.time.DurationFormatUtils$Token[],long,long,long,long,long,long,long,boolean)"
        ]
    },
    "org.onlab.packet.ARP:org.onlab.packet.Ethernet buildArpReply(org.onlab.packet.Ip4Address,org.onlab.packet.MacAddress,org.onlab.packet.Ethernet)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.packet.Ethernet:boolean isBroadcast()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.packet.Ethernet:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.IGMP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.pim.PIMHelloOption:java.lang.String toString()",
            "org.onlab.util.Tools:java.lang.String get(java.util.Dictionary,java.lang.String)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:java.lang.String toString(java.lang.Object)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdyHeaders:java.lang.String toString(java.lang.Object)",
            "org.jboss.netty.util.internal.StringUtil:java.lang.String stripControlCharacters(java.lang.Object)",
            "org.apache.commons.lang.builder.ReflectionToStringBuilder:java.lang.String[] toNoNullStringArray(java.lang.Object[])",
            "org.apache.commons.lang.mutable.MutableObject:java.lang.String toString()",
            "org.apache.commons.lang.ObjectUtils:java.lang.String toString(java.lang.Object)",
            "org.apache.commons.lang.ObjectUtils:java.lang.String toString(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.lang.Object[],char,int,int)",
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.lang.Object[],java.lang.String,int,int)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder append(java.lang.Object)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendFixedWidthPadLeft(java.lang.Object,int,char)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendFixedWidthPadRight(java.lang.Object,int,char)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder insert(int,java.lang.Object)",
            "org.apache.commons.lang.text.StrLookup$MapStrLookup:java.lang.String lookup(java.lang.String)",
            "org.apache.commons.lang.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Properties)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:java.lang.String toString()",
            "org.apache.commons.lang.time.DurationFormatUtils:java.lang.String format(org.apache.commons.lang.time.DurationFormatUtils$Token[],int,int,int,int,int,int,int,boolean)",
            "org.apache.commons.lang3.builder.ReflectionToStringBuilder:java.lang.String[] toNoNullStringArray(java.lang.Object[])",
            "org.apache.commons.lang3.exception.DefaultExceptionContext:java.lang.String getFormattedExceptionMessage(java.lang.String)",
            "org.apache.commons.lang3.mutable.MutableObject:java.lang.String toString()",
            "org.apache.commons.lang3.ObjectUtils:java.lang.String toString(java.lang.Object)",
            "org.apache.commons.lang3.ObjectUtils:java.lang.String toString(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder append(java.lang.Object)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadLeft(java.lang.Object,int,char)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadRight(java.lang.Object,int,char)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder insert(int,java.lang.Object)",
            "org.apache.commons.lang3.text.StrLookup$MapStrLookup:java.lang.String lookup(java.lang.String)",
            "org.apache.commons.lang3.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Properties)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:java.lang.String toString()",
            "org.apache.commons.lang3.time.DurationFormatUtils:java.lang.String format(org.apache.commons.lang3.time.DurationFormatUtils$Token[],long,long,long,long,long,long,long,boolean)"
        ]
    },
    "org.onlab.packet.Ethernet:void lambda$toString$9(java.lang.StringBuffer,org.onlab.packet.ndp.NeighborDiscoveryOptions$Option)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.packet.Ethernet:void lambda$toString$8(java.lang.StringBuffer,org.onlab.packet.ndp.NeighborDiscoveryOptions$Option)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.packet.Ethernet:void lambda$toString$7(java.lang.StringBuffer,org.onlab.packet.ndp.NeighborDiscoveryOptions$Option)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.packet.Ethernet:void lambda$toString$6(java.lang.StringBuffer,org.onlab.packet.ndp.NeighborDiscoveryOptions$Option)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.packet.Ethernet:void lambda$toString$5(java.lang.StringBuffer,org.onlab.packet.ndp.NeighborDiscoveryOptions$Option)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.packet.LLDP:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.LLDP:org.onlab.packet.LLDP lambda$deserializer$11(byte[],int,int)",
            "org.onlab.packet.ONOSLLDP:void <init>()",
            "org.onlab.packet.ONOSLLDP:void <init>(org.onlab.packet.LLDP)"
        ]
    },
    "org.onlab.packet.IpAddress:void <init>(org.onlab.packet.IpAddress$Version,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.Ip4Address:void <init>(byte[])",
            "org.onlab.packet.Ip6Address:void <init>(byte[])",
            "org.onlab.packet.IpAddress:org.onlab.packet.IpAddress valueOf(int)",
            "org.onlab.packet.IpAddress:org.onlab.packet.IpAddress valueOf(org.onlab.packet.IpAddress$Version,byte[])",
            "org.onlab.packet.IpAddress:org.onlab.packet.IpAddress valueOf(java.net.InetAddress)",
            "org.onlab.packet.IpAddress:org.onlab.packet.IpAddress makeMaskPrefix(org.onlab.packet.IpAddress$Version,int)",
            "org.onlab.packet.IpAddress:org.onlab.packet.IpPrefix toIpPrefix()"
        ]
    },
    "org.onlab.packet.IpAddress:int byteLength(org.onlab.packet.IpAddress$Version)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.IpAddress:void checkArguments(org.onlab.packet.IpAddress$Version,byte[],int)",
            "org.onlab.packet.IpAddress:byte[] makeMaskPrefixArray(org.onlab.packet.IpAddress$Version,int)"
        ]
    },
    "org.onlab.packet.IpAddress:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.Ethernet:java.lang.String toString()",
            "org.onlab.packet.IGMP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IpPrefix:java.lang.String toString()",
            "org.onlab.packet.pim.PIMHello:java.lang.String toString()",
            "org.onlab.packet.pim.PIMHelloOption:java.lang.String toString()",
            "org.onlab.util.Tools:java.lang.String get(java.util.Dictionary,java.lang.String)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:java.lang.String toString(java.lang.Object)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdyHeaders:java.lang.String toString(java.lang.Object)",
            "org.jboss.netty.util.internal.StringUtil:java.lang.String stripControlCharacters(java.lang.Object)",
            "org.apache.commons.lang.builder.ReflectionToStringBuilder:java.lang.String[] toNoNullStringArray(java.lang.Object[])",
            "org.apache.commons.lang.mutable.MutableObject:java.lang.String toString()",
            "org.apache.commons.lang.ObjectUtils:java.lang.String toString(java.lang.Object)",
            "org.apache.commons.lang.ObjectUtils:java.lang.String toString(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.lang.Object[],char,int,int)",
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.lang.Object[],java.lang.String,int,int)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder append(java.lang.Object)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendFixedWidthPadLeft(java.lang.Object,int,char)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendFixedWidthPadRight(java.lang.Object,int,char)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder insert(int,java.lang.Object)",
            "org.apache.commons.lang.text.StrLookup$MapStrLookup:java.lang.String lookup(java.lang.String)",
            "org.apache.commons.lang.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Properties)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:java.lang.String toString()",
            "org.apache.commons.lang.time.DurationFormatUtils:java.lang.String format(org.apache.commons.lang.time.DurationFormatUtils$Token[],int,int,int,int,int,int,int,boolean)",
            "org.apache.commons.lang3.builder.ReflectionToStringBuilder:java.lang.String[] toNoNullStringArray(java.lang.Object[])",
            "org.apache.commons.lang3.exception.DefaultExceptionContext:java.lang.String getFormattedExceptionMessage(java.lang.String)",
            "org.apache.commons.lang3.mutable.MutableObject:java.lang.String toString()",
            "org.apache.commons.lang3.ObjectUtils:java.lang.String toString(java.lang.Object)",
            "org.apache.commons.lang3.ObjectUtils:java.lang.String toString(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder append(java.lang.Object)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadLeft(java.lang.Object,int,char)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadRight(java.lang.Object,int,char)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder insert(int,java.lang.Object)",
            "org.apache.commons.lang3.text.StrLookup$MapStrLookup:java.lang.String lookup(java.lang.String)",
            "org.apache.commons.lang3.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Properties)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:java.lang.String toString()",
            "org.apache.commons.lang3.time.DurationFormatUtils:java.lang.String format(org.apache.commons.lang3.time.DurationFormatUtils$Token[],long,long,long,long,long,long,long,boolean)"
        ]
    },
    "org.onlab.packet.IpAddress:java.lang.String addressName(org.onlab.packet.IpAddress$Version)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.IpAddress:void checkArguments(org.onlab.packet.IpAddress$Version,byte[],int)"
        ]
    },
    "org.onlab.packet.IpPrefix:void checkPrefixLength(org.onlab.packet.IpAddress$Version,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.IpPrefix:void <init>(org.onlab.packet.IpAddress,int)"
        ]
    },
    "org.jboss.netty.buffer.ChannelBuffers:org.jboss.netty.buffer.ChannelBuffer copiedBuffer(byte[][])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.buffer.CompositeChannelBuffer:java.util.List decompose(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.buffer.ChannelBuffers:org.jboss.netty.buffer.ChannelBuffer wrappedBuffer(boolean,org.jboss.netty.buffer.ChannelBuffer[])",
            "org.jboss.netty.buffer.CompositeChannelBuffer:org.jboss.netty.buffer.ChannelBuffer slice(int,int)",
            "org.jboss.netty.buffer.CompositeChannelBuffer:void discardReadBytes()",
            "org.jboss.netty.handler.codec.http.HttpChunkAggregator:void appendToCumulation(org.jboss.netty.buffer.ChannelBuffer)"
        ]
    },
    "org.jboss.netty.channel.DownstreamChannelStateEvent:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.IGMP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.pim.PIMHelloOption:java.lang.String toString()",
            "org.onlab.util.Tools:java.lang.String get(java.util.Dictionary,java.lang.String)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:java.lang.String toString(java.lang.Object)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdyHeaders:java.lang.String toString(java.lang.Object)",
            "org.jboss.netty.handler.logging.LoggingHandler:void log(org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.util.internal.StringUtil:java.lang.String stripControlCharacters(java.lang.Object)",
            "org.apache.commons.lang.builder.ReflectionToStringBuilder:java.lang.String[] toNoNullStringArray(java.lang.Object[])",
            "org.apache.commons.lang.mutable.MutableObject:java.lang.String toString()",
            "org.apache.commons.lang.ObjectUtils:java.lang.String toString(java.lang.Object)",
            "org.apache.commons.lang.ObjectUtils:java.lang.String toString(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.lang.Object[],char,int,int)",
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.lang.Object[],java.lang.String,int,int)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder append(java.lang.Object)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendFixedWidthPadLeft(java.lang.Object,int,char)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendFixedWidthPadRight(java.lang.Object,int,char)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder insert(int,java.lang.Object)",
            "org.apache.commons.lang.text.StrLookup$MapStrLookup:java.lang.String lookup(java.lang.String)",
            "org.apache.commons.lang.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Properties)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:java.lang.String toString()",
            "org.apache.commons.lang.time.DurationFormatUtils:java.lang.String format(org.apache.commons.lang.time.DurationFormatUtils$Token[],int,int,int,int,int,int,int,boolean)",
            "org.apache.commons.lang3.builder.ReflectionToStringBuilder:java.lang.String[] toNoNullStringArray(java.lang.Object[])",
            "org.apache.commons.lang3.exception.DefaultExceptionContext:java.lang.String getFormattedExceptionMessage(java.lang.String)",
            "org.apache.commons.lang3.mutable.MutableObject:java.lang.String toString()",
            "org.apache.commons.lang3.ObjectUtils:java.lang.String toString(java.lang.Object)",
            "org.apache.commons.lang3.ObjectUtils:java.lang.String toString(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder append(java.lang.Object)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadLeft(java.lang.Object,int,char)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadRight(java.lang.Object,int,char)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder insert(int,java.lang.Object)",
            "org.apache.commons.lang3.text.StrLookup$MapStrLookup:java.lang.String lookup(java.lang.String)",
            "org.apache.commons.lang3.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Properties)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:java.lang.String toString()",
            "org.apache.commons.lang3.time.DurationFormatUtils:java.lang.String format(org.apache.commons.lang3.time.DurationFormatUtils$Token[],long,long,long,long,long,long,long,boolean)"
        ]
    },
    "org.jboss.netty.channel.UpstreamChannelStateEvent:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.IGMP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.pim.PIMHelloOption:java.lang.String toString()",
            "org.onlab.util.Tools:java.lang.String get(java.util.Dictionary,java.lang.String)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:java.lang.String toString(java.lang.Object)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdyHeaders:java.lang.String toString(java.lang.Object)",
            "org.jboss.netty.handler.logging.LoggingHandler:void log(org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.util.internal.StringUtil:java.lang.String stripControlCharacters(java.lang.Object)",
            "org.apache.commons.lang.builder.ReflectionToStringBuilder:java.lang.String[] toNoNullStringArray(java.lang.Object[])",
            "org.apache.commons.lang.mutable.MutableObject:java.lang.String toString()",
            "org.apache.commons.lang.ObjectUtils:java.lang.String toString(java.lang.Object)",
            "org.apache.commons.lang.ObjectUtils:java.lang.String toString(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.lang.Object[],char,int,int)",
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.lang.Object[],java.lang.String,int,int)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder append(java.lang.Object)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendFixedWidthPadLeft(java.lang.Object,int,char)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendFixedWidthPadRight(java.lang.Object,int,char)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder insert(int,java.lang.Object)",
            "org.apache.commons.lang.text.StrLookup$MapStrLookup:java.lang.String lookup(java.lang.String)",
            "org.apache.commons.lang.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Properties)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:java.lang.String toString()",
            "org.apache.commons.lang.time.DurationFormatUtils:java.lang.String format(org.apache.commons.lang.time.DurationFormatUtils$Token[],int,int,int,int,int,int,int,boolean)",
            "org.apache.commons.lang3.builder.ReflectionToStringBuilder:java.lang.String[] toNoNullStringArray(java.lang.Object[])",
            "org.apache.commons.lang3.exception.DefaultExceptionContext:java.lang.String getFormattedExceptionMessage(java.lang.String)",
            "org.apache.commons.lang3.mutable.MutableObject:java.lang.String toString()",
            "org.apache.commons.lang3.ObjectUtils:java.lang.String toString(java.lang.Object)",
            "org.apache.commons.lang3.ObjectUtils:java.lang.String toString(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder append(java.lang.Object)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadLeft(java.lang.Object,int,char)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadRight(java.lang.Object,int,char)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder insert(int,java.lang.Object)",
            "org.apache.commons.lang3.text.StrLookup$MapStrLookup:java.lang.String lookup(java.lang.String)",
            "org.apache.commons.lang3.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Properties)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:java.lang.String toString()",
            "org.apache.commons.lang3.time.DurationFormatUtils:java.lang.String format(org.apache.commons.lang3.time.DurationFormatUtils$Token[],long,long,long,long,long,long,long,boolean)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioDatagramChannel:java.nio.channels.DatagramChannel openNonBlockingChannel(org.jboss.netty.channel.socket.InternetProtocolFamily)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.NioDatagramChannel:void <init>(org.jboss.netty.channel.ChannelFactory,org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelSink,org.jboss.netty.channel.socket.nio.NioDatagramWorker,org.jboss.netty.channel.socket.InternetProtocolFamily)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.ProtocolFamilyConverter:java.net.ProtocolFamily convert(org.jboss.netty.channel.socket.InternetProtocolFamily)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.NioDatagramChannel:java.nio.channels.DatagramChannel openNonBlockingChannel(org.jboss.netty.channel.socket.InternetProtocolFamily)"
        ]
    },
    "org.jboss.netty.handler.codec.compression.ZlibUtil:java.lang.Enum convertWrapperType(org.jboss.netty.handler.codec.compression.ZlibWrapper)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.compression.ZlibDecoder:void <init>(org.jboss.netty.handler.codec.compression.ZlibWrapper)",
            "org.jboss.netty.handler.codec.compression.ZlibEncoder:void <init>(org.jboss.netty.handler.codec.compression.ZlibWrapper,int,int,int)"
        ]
    },
    "org.jboss.netty.handler.codec.http.HttpContentCompressor:java.lang.String getTargetContentEncoding(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.HttpContentEncoder:void writeRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributesStandard()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributes()"
        ]
    },
    "org.jboss.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributes()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBody()"
        ]
    },
    "org.jboss.netty.handler.codec.serialization.CompatibleObjectDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.serialization.CompatibleObjectDecoderState)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.serialization.CompatibleObjectDecoder:java.lang.Object decodeLast(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.serialization.CompatibleObjectDecoderState)",
            "org.jboss.netty.handler.codec.serialization.CompatibleObjectDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,java.lang.Enum)"
        ]
    },
    "org.jboss.netty.handler.codec.socks.SocksCmdRequest:void <init>(org.jboss.netty.handler.codec.socks.SocksMessage$CmdType,org.jboss.netty.handler.codec.socks.SocksMessage$AddressType,java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.socks.SocksCmdRequestDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.socks.SocksCmdRequestDecoder$State)"
        ]
    },
    "org.jboss.netty.handler.codec.socks.SocksCmdRequest:void encodeAsByteBuf(org.jboss.netty.buffer.ChannelBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.socks.SocksMessageEncoder:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)"
        ]
    },
    "org.jboss.netty.handler.codec.socks.SocksCmdResponse:void encodeAsByteBuf(org.jboss.netty.buffer.ChannelBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.socks.SocksMessageEncoder:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)"
        ]
    },
    "org.jboss.netty.logging.AbstractInternalLogger:boolean isEnabled(org.jboss.netty.logging.InternalLogLevel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.logging.LoggingHandler:void log(org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.logging.InternalLoggerFactory$1:boolean isEnabled(org.jboss.netty.logging.InternalLogLevel)"
        ]
    },
    "org.jboss.netty.logging.AbstractInternalLogger:void log(org.jboss.netty.logging.InternalLogLevel,java.lang.String,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.logging.LoggingHandler:void log(org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.logging.InternalLoggerFactory$1:void log(org.jboss.netty.logging.InternalLogLevel,java.lang.String,java.lang.Throwable)"
        ]
    },
    "org.jboss.netty.logging.AbstractInternalLogger:void log(org.jboss.netty.logging.InternalLogLevel,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.logging.LoggingHandler:void log(org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.logging.InternalLoggerFactory$1:void log(org.jboss.netty.logging.InternalLogLevel,java.lang.String)"
        ]
    },
    "org.jboss.netty.util.internal.jzlib.Deflate:int deflate(org.jboss.netty.util.internal.jzlib.ZStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.jzlib.ZStream:int deflate(int)"
        ]
    },
    "org.jboss.netty.util.internal.jzlib.Inflate:int inflateReset(org.jboss.netty.util.internal.jzlib.ZStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.jzlib.Inflate:int inflateInit(org.jboss.netty.util.internal.jzlib.ZStream,int,org.jboss.netty.util.internal.jzlib.JZlib$WrapperType)",
            "org.jboss.netty.util.internal.jzlib.Inflate:int inflateSync(org.jboss.netty.util.internal.jzlib.ZStream)"
        ]
    },
    "org.jboss.netty.util.internal.jzlib.ZStream:int read_buf(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.jzlib.Deflate:void fill_window()"
        ]
    },
    "org.onlab.packet.ONOSLLDP:void setChassisId(org.onlab.packet.ChassisId)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.packet.ONOSLLDP:void setPortId(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.text.ExtendedMessageFormat:void seekNonWs(java.lang.String,java.text.ParsePosition)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.text.ExtendedMessageFormat:void applyPattern(java.lang.String)",
            "org.apache.commons.lang.text.ExtendedMessageFormat:int readArgumentIndex(java.lang.String,java.text.ParsePosition)",
            "org.apache.commons.lang.text.ExtendedMessageFormat:java.lang.String parseFormatDescription(java.lang.String,java.text.ParsePosition)"
        ]
    },
    "org.apache.commons.lang.text.StrMatcher:org.apache.commons.lang.text.StrMatcher commaMatcher()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.text.StrTokenizer:void <clinit>()"
        ]
    },
    "org.apache.commons.lang.text.StrMatcher:org.apache.commons.lang.text.StrMatcher tabMatcher()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.text.StrTokenizer:void <clinit>()"
        ]
    },
    "org.apache.commons.lang.text.StrMatcher:org.apache.commons.lang.text.StrMatcher spaceMatcher()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.text.StrMatcher:org.apache.commons.lang.text.StrMatcher splitMatcher()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.text.ExtendedMessageFormat:void seekNonWs(java.lang.String,java.text.ParsePosition)",
            "org.apache.commons.lang.text.StrTokenizer:void <init>()",
            "org.apache.commons.lang.text.StrTokenizer:void <init>(java.lang.String)",
            "org.apache.commons.lang.text.StrTokenizer:void <init>(char[])"
        ]
    },
    "org.apache.commons.lang.text.StrMatcher:org.apache.commons.lang.text.StrMatcher trimMatcher()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.text.StrTokenizer:void <clinit>()"
        ]
    },
    "org.apache.commons.lang.text.StrMatcher:org.apache.commons.lang.text.StrMatcher singleQuoteMatcher()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.text.StrMatcher:org.apache.commons.lang.text.StrMatcher doubleQuoteMatcher()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.text.StrTokenizer:void <clinit>()"
        ]
    },
    "org.apache.commons.lang.text.StrMatcher:org.apache.commons.lang.text.StrMatcher quoteMatcher()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.text.StrMatcher:org.apache.commons.lang.text.StrMatcher noneMatcher()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.text.StrTokenizer:void <init>()",
            "org.apache.commons.lang.text.StrTokenizer:void <init>(java.lang.String)",
            "org.apache.commons.lang.text.StrTokenizer:void <init>(char[])",
            "org.apache.commons.lang.text.StrTokenizer:org.apache.commons.lang.text.StrTokenizer setDelimiterMatcher(org.apache.commons.lang.text.StrMatcher)",
            "org.apache.commons.lang.text.StrTokenizer:void <clinit>()"
        ]
    },
    "org.apache.commons.lang.text.StrMatcher:org.apache.commons.lang.text.StrMatcher stringMatcher(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.text.StrSubstitutor:org.apache.commons.lang.text.StrSubstitutor setVariablePrefix(java.lang.String)",
            "org.apache.commons.lang.text.StrSubstitutor:org.apache.commons.lang.text.StrSubstitutor setVariableSuffix(java.lang.String)",
            "org.apache.commons.lang.text.StrSubstitutor:void <clinit>()",
            "org.apache.commons.lang.text.StrTokenizer:org.apache.commons.lang.text.StrTokenizer setDelimiterString(java.lang.String)"
        ]
    },
    "org.apache.commons.lang.text.StrSubstitutor:org.apache.commons.lang.text.StrSubstitutor setVariablePrefix(char)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.text.StrSubstitutor:org.apache.commons.lang.text.StrSubstitutor setVariablePrefix(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.text.StrSubstitutor:void <init>(org.apache.commons.lang.text.StrLookup,java.lang.String,java.lang.String,char)"
        ]
    },
    "org.apache.commons.lang.text.StrSubstitutor:org.apache.commons.lang.text.StrSubstitutor setVariableSuffix(char)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.text.StrSubstitutor:org.apache.commons.lang.text.StrSubstitutor setVariableSuffix(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.text.StrSubstitutor:void <init>(org.apache.commons.lang.text.StrLookup,java.lang.String,java.lang.String,char)"
        ]
    },
    "org.apache.commons.lang.text.StrSubstitutor:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Map)",
            "org.apache.commons.lang.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Map,java.lang.String,java.lang.String)",
            "org.apache.commons.lang.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Properties)",
            "org.apache.commons.lang.text.StrSubstitutor:java.lang.String replaceSystemProperties(java.lang.Object)",
            "org.apache.commons.lang.text.StrSubstitutor:void <init>()",
            "org.apache.commons.lang.text.StrSubstitutor:void <init>(java.util.Map)",
            "org.apache.commons.lang.text.StrSubstitutor:void <init>(org.apache.commons.lang.text.StrLookup)",
            "org.apache.commons.lang.text.StrSubstitutor:void <clinit>()"
        ]
    },
    "org.apache.commons.lang.text.StrTokenizer:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.text.StrBuilder$StrBuilderTokenizer:void <init>(org.apache.commons.lang.text.StrBuilder)",
            "org.apache.commons.lang.text.StrTokenizer:void <clinit>()"
        ]
    },
    "org.apache.commons.lang.text.StrTokenizer:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.text.StrTokenizer:void <init>(java.lang.String,char)",
            "org.apache.commons.lang.text.StrTokenizer:void <init>(java.lang.String,java.lang.String)",
            "org.apache.commons.lang.text.StrTokenizer:void <init>(java.lang.String,org.apache.commons.lang.text.StrMatcher)"
        ]
    },
    "org.apache.commons.lang.text.StrTokenizer:void <init>(char[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.text.StrTokenizer:void <init>(char[],char)",
            "org.apache.commons.lang.text.StrTokenizer:void <init>(char[],java.lang.String)",
            "org.apache.commons.lang.text.StrTokenizer:void <init>(char[],org.apache.commons.lang.text.StrMatcher)"
        ]
    },
    "org.apache.commons.lang.text.StrTokenizer:org.apache.commons.lang.text.StrTokenizer setDelimiterMatcher(org.apache.commons.lang.text.StrMatcher)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.text.StrTokenizer:void <init>(java.lang.String,org.apache.commons.lang.text.StrMatcher)",
            "org.apache.commons.lang.text.StrTokenizer:void <init>(char[],org.apache.commons.lang.text.StrMatcher)",
            "org.apache.commons.lang.text.StrTokenizer:org.apache.commons.lang.text.StrTokenizer setDelimiterChar(char)",
            "org.apache.commons.lang.text.StrTokenizer:org.apache.commons.lang.text.StrTokenizer setDelimiterString(java.lang.String)",
            "org.apache.commons.lang.text.StrTokenizer:void <clinit>()"
        ]
    },
    "org.apache.commons.lang.text.StrTokenizer:org.apache.commons.lang.text.StrTokenizer setDelimiterChar(char)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.text.StrTokenizer:void <init>(java.lang.String,char)",
            "org.apache.commons.lang.text.StrTokenizer:void <init>(char[],char)"
        ]
    },
    "org.apache.commons.lang.text.StrTokenizer:org.apache.commons.lang.text.StrTokenizer setDelimiterString(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.text.StrTokenizer:void <init>(java.lang.String,java.lang.String)",
            "org.apache.commons.lang.text.StrTokenizer:void <init>(char[],java.lang.String)"
        ]
    },
    "org.apache.commons.lang.text.StrTokenizer:org.apache.commons.lang.text.StrTokenizer setQuoteChar(char)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.text.StrTokenizer:void <init>(java.lang.String,char,char)",
            "org.apache.commons.lang.text.StrTokenizer:void <init>(char[],char,char)"
        ]
    },
    "org.apache.commons.lang.text.StrTokenizer:org.apache.commons.lang.text.StrTokenizer setIgnoredChar(char)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.text.StrTokenizer:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.text.StrTokenizer:org.apache.commons.lang.text.StrTokenizer getCSVClone()",
            "org.apache.commons.lang.text.StrTokenizer:org.apache.commons.lang.text.StrTokenizer getCSVInstance()",
            "org.apache.commons.lang.text.StrTokenizer:org.apache.commons.lang.text.StrTokenizer getCSVInstance(java.lang.String)",
            "org.apache.commons.lang.text.StrTokenizer:org.apache.commons.lang.text.StrTokenizer getCSVInstance(char[])",
            "org.apache.commons.lang.text.StrTokenizer:org.apache.commons.lang.text.StrTokenizer getTSVClone()",
            "org.apache.commons.lang.text.StrTokenizer:org.apache.commons.lang.text.StrTokenizer getTSVInstance()",
            "org.apache.commons.lang.text.StrTokenizer:org.apache.commons.lang.text.StrTokenizer getTSVInstance(java.lang.String)",
            "org.apache.commons.lang.text.StrTokenizer:org.apache.commons.lang.text.StrTokenizer getTSVInstance(char[])",
            "org.apache.commons.lang.text.StrTokenizer:void <clinit>()"
        ]
    },
    "org.apache.commons.lang.text.StrTokenizer:org.apache.commons.lang.text.StrTokenizer getCSVClone()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.text.StrTokenizer:org.apache.commons.lang.text.StrTokenizer getCSVInstance()",
            "org.apache.commons.lang.text.StrTokenizer:org.apache.commons.lang.text.StrTokenizer getCSVInstance(java.lang.String)",
            "org.apache.commons.lang.text.StrTokenizer:org.apache.commons.lang.text.StrTokenizer getCSVInstance(char[])"
        ]
    },
    "org.apache.commons.lang.text.StrTokenizer:org.apache.commons.lang.text.StrTokenizer getTSVClone()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.text.StrTokenizer:org.apache.commons.lang.text.StrTokenizer getTSVInstance()",
            "org.apache.commons.lang.text.StrTokenizer:org.apache.commons.lang.text.StrTokenizer getTSVInstance(java.lang.String)",
            "org.apache.commons.lang.text.StrTokenizer:org.apache.commons.lang.text.StrTokenizer getTSVInstance(char[])"
        ]
    },
    "org.apache.commons.lang3.text.translate.CharSequenceTranslator:org.apache.commons.lang3.text.translate.CharSequenceTranslator 'with'(org.apache.commons.lang3.text.translate.CharSequenceTranslator[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.StringEscapeUtils:void <clinit>()"
        ]
    },
    "org.apache.commons.lang3.EnumUtils:java.util.EnumSet processBitVector(java.lang.Class,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.text.StrTokenizer:void <init>(char[],char)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.text.StrTokenizer:void <init>(char[],char,char)"
        ]
    },
    "org.apache.commons.lang3.text.StrTokenizer:void <init>(char[],java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.text.StrTokenizer:void <init>(char[],org.apache.commons.lang3.text.StrMatcher)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.text.StrTokenizer:void <init>(char[],org.apache.commons.lang3.text.StrMatcher,org.apache.commons.lang3.text.StrMatcher)"
        ]
    },
    "org.apache.commons.lang3.text.StrTokenizer:org.apache.commons.lang3.text.StrTokenizer getCSVInstance(char[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.text.StrTokenizer:org.apache.commons.lang3.text.StrTokenizer getTSVInstance(char[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.reflect.TypeUtils:boolean access$200(java.lang.reflect.ParameterizedType,java.lang.reflect.Type)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.reflect.TypeUtils$ParameterizedTypeImpl:boolean equals(java.lang.Object)"
        ]
    },
    "org.apache.commons.lang3.reflect.TypeUtils:java.lang.String toString(java.lang.reflect.Type)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.reflect.TypeLiteral:void <init>()",
            "org.apache.commons.lang3.reflect.TypeUtils$GenericArrayTypeImpl:java.lang.String toString()",
            "org.apache.commons.lang3.reflect.TypeUtils$ParameterizedTypeImpl:java.lang.String toString()",
            "org.apache.commons.lang3.reflect.TypeUtils$WildcardTypeImpl:java.lang.String toString()",
            "org.apache.commons.lang3.reflect.TypeUtils:java.lang.reflect.Type[] extractTypeArgumentsFrom(java.util.Map,java.lang.reflect.TypeVariable[])",
            "org.apache.commons.lang3.reflect.TypeUtils:java.lang.String toLongString(java.lang.reflect.TypeVariable)",
            "org.apache.commons.lang3.reflect.TypeUtils:java.lang.String genericArrayTypeToString(java.lang.reflect.GenericArrayType)",
            "org.apache.commons.lang3.reflect.TypeUtils:java.lang.StringBuilder appendAllTo(java.lang.StringBuilder,java.lang.String,java.lang.reflect.Type[])"
        ]
    },
    "com.esotericsoftware.kryo.serializers.FieldSerializerGenericsUtil:com.esotericsoftware.kryo.serializers.FieldSerializer$CachedField newCachedFieldOfGenericType(java.lang.reflect.Field,int,java.lang.Class[],java.lang.reflect.Type)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.FieldSerializer:com.esotericsoftware.kryo.serializers.FieldSerializer$CachedField newCachedField(java.lang.reflect.Field,int,int)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.FieldSerializer:com.esotericsoftware.kryo.serializers.FieldSerializer$CachedField newMatchingCachedField(java.lang.reflect.Field,int,java.lang.Class,java.lang.reflect.Type,java.lang.Class[])": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.FieldSerializer:com.esotericsoftware.kryo.serializers.FieldSerializer$CachedField newCachedField(java.lang.reflect.Field,int,int)",
            "com.esotericsoftware.kryo.serializers.FieldSerializerGenericsUtil:com.esotericsoftware.kryo.serializers.FieldSerializer$CachedField newCachedFieldOfGenericType(java.lang.reflect.Field,int,java.lang.Class[],java.lang.reflect.Type)"
        ]
    },
    "org.apache.commons.lang3.reflect.TypeUtils:boolean access$300(java.lang.reflect.WildcardType,java.lang.reflect.Type)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.reflect.TypeUtils$WildcardTypeImpl:boolean equals(java.lang.Object)"
        ]
    },
    "org.apache.commons.lang3.text.ExtendedMessageFormat:void seekNonWs(java.lang.String,java.text.ParsePosition)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.text.ExtendedMessageFormat:void applyPattern(java.lang.String)",
            "org.apache.commons.lang3.text.ExtendedMessageFormat:int readArgumentIndex(java.lang.String,java.text.ParsePosition)",
            "org.apache.commons.lang3.text.ExtendedMessageFormat:java.lang.String parseFormatDescription(java.lang.String,java.text.ParsePosition)"
        ]
    },
    "org.apache.commons.lang3.text.StrMatcher:org.apache.commons.lang3.text.StrMatcher commaMatcher()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.text.StrTokenizer:void <clinit>()"
        ]
    },
    "org.apache.commons.lang3.text.StrMatcher:org.apache.commons.lang3.text.StrMatcher tabMatcher()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.text.StrTokenizer:void <clinit>()"
        ]
    },
    "org.apache.commons.lang3.text.StrMatcher:org.apache.commons.lang3.text.StrMatcher spaceMatcher()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.text.StrMatcher:org.apache.commons.lang3.text.StrMatcher splitMatcher()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.text.ExtendedMessageFormat:void seekNonWs(java.lang.String,java.text.ParsePosition)",
            "org.apache.commons.lang3.text.StrTokenizer:void <init>()",
            "org.apache.commons.lang3.text.StrTokenizer:void <init>(java.lang.String)",
            "org.apache.commons.lang3.text.StrTokenizer:void <init>(char[])"
        ]
    },
    "org.apache.commons.lang3.text.StrMatcher:org.apache.commons.lang3.text.StrMatcher trimMatcher()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.text.StrTokenizer:void <clinit>()"
        ]
    },
    "org.apache.commons.lang3.text.StrMatcher:org.apache.commons.lang3.text.StrMatcher singleQuoteMatcher()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.text.StrMatcher:org.apache.commons.lang3.text.StrMatcher doubleQuoteMatcher()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.text.StrTokenizer:void <clinit>()"
        ]
    },
    "org.apache.commons.lang3.text.StrMatcher:org.apache.commons.lang3.text.StrMatcher quoteMatcher()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.text.StrMatcher:org.apache.commons.lang3.text.StrMatcher noneMatcher()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.text.StrTokenizer:void <init>()",
            "org.apache.commons.lang3.text.StrTokenizer:void <init>(java.lang.String)",
            "org.apache.commons.lang3.text.StrTokenizer:void <init>(char[])",
            "org.apache.commons.lang3.text.StrTokenizer:org.apache.commons.lang3.text.StrTokenizer setDelimiterMatcher(org.apache.commons.lang3.text.StrMatcher)",
            "org.apache.commons.lang3.text.StrTokenizer:void <clinit>()"
        ]
    },
    "org.apache.commons.lang3.text.StrMatcher:org.apache.commons.lang3.text.StrMatcher stringMatcher(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.text.StrSubstitutor:org.apache.commons.lang3.text.StrSubstitutor setVariablePrefix(java.lang.String)",
            "org.apache.commons.lang3.text.StrSubstitutor:org.apache.commons.lang3.text.StrSubstitutor setVariableSuffix(java.lang.String)",
            "org.apache.commons.lang3.text.StrSubstitutor:org.apache.commons.lang3.text.StrSubstitutor setValueDelimiter(java.lang.String)",
            "org.apache.commons.lang3.text.StrSubstitutor:void <clinit>()",
            "org.apache.commons.lang3.text.StrTokenizer:org.apache.commons.lang3.text.StrTokenizer setDelimiterString(java.lang.String)"
        ]
    },
    "org.apache.commons.lang3.text.StrSubstitutor:org.apache.commons.lang3.text.StrSubstitutor setVariablePrefix(char)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.text.StrSubstitutor:org.apache.commons.lang3.text.StrSubstitutor setVariablePrefix(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.text.StrSubstitutor:void <init>(org.apache.commons.lang3.text.StrLookup,java.lang.String,java.lang.String,char)",
            "org.apache.commons.lang3.text.StrSubstitutor:void <init>(org.apache.commons.lang3.text.StrLookup,java.lang.String,java.lang.String,char,java.lang.String)"
        ]
    },
    "org.apache.commons.lang3.text.StrSubstitutor:org.apache.commons.lang3.text.StrSubstitutor setVariableSuffix(char)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.text.StrSubstitutor:org.apache.commons.lang3.text.StrSubstitutor setVariableSuffix(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.text.StrSubstitutor:void <init>(org.apache.commons.lang3.text.StrLookup,java.lang.String,java.lang.String,char)",
            "org.apache.commons.lang3.text.StrSubstitutor:void <init>(org.apache.commons.lang3.text.StrLookup,java.lang.String,java.lang.String,char,java.lang.String)"
        ]
    },
    "org.apache.commons.lang3.text.StrSubstitutor:org.apache.commons.lang3.text.StrSubstitutor setValueDelimiter(char)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.text.StrSubstitutor:org.apache.commons.lang3.text.StrSubstitutor setValueDelimiter(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.text.StrSubstitutor:void <init>(org.apache.commons.lang3.text.StrLookup,java.lang.String,java.lang.String,char,java.lang.String)"
        ]
    },
    "org.apache.commons.lang3.text.StrSubstitutor:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Map)",
            "org.apache.commons.lang3.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Map,java.lang.String,java.lang.String)",
            "org.apache.commons.lang3.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Properties)",
            "org.apache.commons.lang3.text.StrSubstitutor:java.lang.String replaceSystemProperties(java.lang.Object)",
            "org.apache.commons.lang3.text.StrSubstitutor:void <init>()",
            "org.apache.commons.lang3.text.StrSubstitutor:void <init>(java.util.Map)",
            "org.apache.commons.lang3.text.StrSubstitutor:void <init>(org.apache.commons.lang3.text.StrLookup)",
            "org.apache.commons.lang3.text.StrSubstitutor:void <init>(org.apache.commons.lang3.text.StrLookup,java.lang.String,java.lang.String,char)",
            "org.apache.commons.lang3.text.StrSubstitutor:void <init>(org.apache.commons.lang3.text.StrLookup,org.apache.commons.lang3.text.StrMatcher,org.apache.commons.lang3.text.StrMatcher,char)",
            "org.apache.commons.lang3.text.StrSubstitutor:void <clinit>()"
        ]
    },
    "org.apache.commons.lang3.text.StrTokenizer:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.text.StrBuilder$StrBuilderTokenizer:void <init>(org.apache.commons.lang3.text.StrBuilder)",
            "org.apache.commons.lang3.text.StrTokenizer:void <clinit>()"
        ]
    },
    "org.apache.commons.lang3.text.StrTokenizer:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.text.StrTokenizer:void <init>(java.lang.String,char)",
            "org.apache.commons.lang3.text.StrTokenizer:void <init>(java.lang.String,java.lang.String)",
            "org.apache.commons.lang3.text.StrTokenizer:void <init>(java.lang.String,org.apache.commons.lang3.text.StrMatcher)"
        ]
    },
    "org.apache.commons.lang3.text.StrTokenizer:org.apache.commons.lang3.text.StrTokenizer setDelimiterMatcher(org.apache.commons.lang3.text.StrMatcher)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.text.StrTokenizer:void <init>(java.lang.String,org.apache.commons.lang3.text.StrMatcher)",
            "org.apache.commons.lang3.text.StrTokenizer:void <init>(char[],org.apache.commons.lang3.text.StrMatcher)",
            "org.apache.commons.lang3.text.StrTokenizer:org.apache.commons.lang3.text.StrTokenizer setDelimiterChar(char)",
            "org.apache.commons.lang3.text.StrTokenizer:org.apache.commons.lang3.text.StrTokenizer setDelimiterString(java.lang.String)",
            "org.apache.commons.lang3.text.StrTokenizer:void <clinit>()"
        ]
    },
    "org.apache.commons.lang3.text.StrTokenizer:org.apache.commons.lang3.text.StrTokenizer setDelimiterChar(char)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.text.StrTokenizer:void <init>(java.lang.String,char)",
            "org.apache.commons.lang3.text.StrTokenizer:void <init>(char[],char)"
        ]
    },
    "org.apache.commons.lang3.text.StrTokenizer:org.apache.commons.lang3.text.StrTokenizer setDelimiterString(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.text.StrTokenizer:void <init>(java.lang.String,java.lang.String)",
            "org.apache.commons.lang3.text.StrTokenizer:void <init>(char[],java.lang.String)"
        ]
    },
    "org.apache.commons.lang3.text.StrTokenizer:org.apache.commons.lang3.text.StrTokenizer setQuoteChar(char)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.text.StrTokenizer:void <init>(java.lang.String,char,char)",
            "org.apache.commons.lang3.text.StrTokenizer:void <init>(char[],char,char)"
        ]
    },
    "org.apache.commons.lang3.text.StrTokenizer:org.apache.commons.lang3.text.StrTokenizer setIgnoredChar(char)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.text.StrTokenizer:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.text.StrTokenizer:org.apache.commons.lang3.text.StrTokenizer getCSVClone()",
            "org.apache.commons.lang3.text.StrTokenizer:org.apache.commons.lang3.text.StrTokenizer getCSVInstance()",
            "org.apache.commons.lang3.text.StrTokenizer:org.apache.commons.lang3.text.StrTokenizer getCSVInstance(java.lang.String)",
            "org.apache.commons.lang3.text.StrTokenizer:org.apache.commons.lang3.text.StrTokenizer getCSVInstance(char[])",
            "org.apache.commons.lang3.text.StrTokenizer:org.apache.commons.lang3.text.StrTokenizer getTSVClone()",
            "org.apache.commons.lang3.text.StrTokenizer:org.apache.commons.lang3.text.StrTokenizer getTSVInstance()",
            "org.apache.commons.lang3.text.StrTokenizer:org.apache.commons.lang3.text.StrTokenizer getTSVInstance(java.lang.String)",
            "org.apache.commons.lang3.text.StrTokenizer:org.apache.commons.lang3.text.StrTokenizer getTSVInstance(char[])",
            "org.apache.commons.lang3.text.StrTokenizer:void <clinit>()"
        ]
    },
    "org.apache.commons.lang3.text.StrTokenizer:org.apache.commons.lang3.text.StrTokenizer getCSVClone()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.text.StrTokenizer:org.apache.commons.lang3.text.StrTokenizer getCSVInstance()",
            "org.apache.commons.lang3.text.StrTokenizer:org.apache.commons.lang3.text.StrTokenizer getCSVInstance(java.lang.String)",
            "org.apache.commons.lang3.text.StrTokenizer:org.apache.commons.lang3.text.StrTokenizer getCSVInstance(char[])"
        ]
    },
    "org.apache.commons.lang3.text.StrTokenizer:org.apache.commons.lang3.text.StrTokenizer getTSVClone()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.text.StrTokenizer:org.apache.commons.lang3.text.StrTokenizer getTSVInstance()",
            "org.apache.commons.lang3.text.StrTokenizer:org.apache.commons.lang3.text.StrTokenizer getTSVInstance(java.lang.String)",
            "org.apache.commons.lang3.text.StrTokenizer:org.apache.commons.lang3.text.StrTokenizer getTSVInstance(char[])"
        ]
    },
    "org.apache.commons.lang3.StringEscapeUtils:java.lang.String escapeJava(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.StringEscapeUtils:java.lang.String escapeEcmaScript(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.StringEscapeUtils:java.lang.String escapeJson(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.StringEscapeUtils:java.lang.String unescapeJava(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.StringEscapeUtils:java.lang.String unescapeEcmaScript(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.StringEscapeUtils:java.lang.String unescapeJson(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.StringEscapeUtils:java.lang.String escapeHtml4(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.StringEscapeUtils:java.lang.String escapeHtml3(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.StringEscapeUtils:java.lang.String unescapeHtml4(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.StringEscapeUtils:java.lang.String unescapeHtml3(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.StringEscapeUtils:java.lang.String escapeXml(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.StringEscapeUtils:java.lang.String escapeXml10(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.StringEscapeUtils:java.lang.String escapeXml11(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.StringEscapeUtils:java.lang.String unescapeXml(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.StringEscapeUtils:java.lang.String escapeCsv(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.StringEscapeUtils:java.lang.String unescapeCsv(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.stc.Compiler:void lambda$compileRequirements$6(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.stc.MonitorLayout:org.onlab.stc.MonitorLayout$Box get(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.stc.MonitorLayout:boolean lambda$follow$25(int,int,org.onlab.stc.Group,org.onlab.stc.Dependency)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.MonitorLayout$lambda_follow_25__35:boolean test(java.lang.Object)"
        ]
    },
    "org.onlab.stc.MonitorLayout:void lambda$computeLayout$23(int,org.onlab.stc.Group,org.onlab.stc.Step)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.stc.Monitor:void add(org.onlab.stc.Step,com.fasterxml.jackson.databind.node.ArrayNode)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Monitor:void lambda$scenarioData$34(com.fasterxml.jackson.databind.node.ArrayNode,org.onlab.stc.Step)"
        ]
    },
    "org.onlab.stc.Coordinator:org.onlab.stc.Coordinator$Status getStatus(org.onlab.stc.Step)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Coordinator:void completeParentIfNeeded(org.onlab.stc.Group)",
            "org.onlab.stc.Main:boolean lambda$printSummary$39(org.onlab.stc.Step)",
            "org.onlab.stc.Main:boolean lambda$printSummary$38(org.onlab.stc.Step)",
            "org.onlab.stc.Main:boolean lambda$printSummary$37(org.onlab.stc.Step)",
            "org.onlab.stc.Monitor:void add(org.onlab.stc.Step,com.fasterxml.jackson.databind.node.ArrayNode)"
        ]
    },
    "org.onlab.graph.DijkstraGraphSearch$PathCostComparator:int compare(org.onlab.graph.Vertex,org.onlab.graph.Vertex)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.graph.DijkstraGraphSearch$PathCostComparator:int compare(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.onlab.graph.SuurballeGraphSearch:double lambda$search$16(org.onlab.graph.EdgeWeight,org.onlab.graph.AbstractGraphPathSearch$DefaultResult,org.onlab.graph.Edge)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.graph.SuurballeGraphSearch$lambda_search_16__54:double weight(org.onlab.graph.Edge)"
        ]
    },
    "org.onlab.graph.SuurballeGraphSearch:double lambda$search$15(org.onlab.graph.EdgeWeight,org.onlab.graph.AbstractGraphPathSearch$DefaultResult,org.onlab.graph.Edge)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.graph.SuurballeGraphSearch$lambda_search_15__53:double weight(org.onlab.graph.Edge)"
        ]
    },
    "org.onlab.graph.TarjanGraphSearch$SccResult:org.onlab.graph.TarjanGraphSearch$VertexData access$100(org.onlab.graph.TarjanGraphSearch$SccResult,org.onlab.graph.Vertex)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.graph.TarjanGraphSearch:org.onlab.graph.TarjanGraphSearch$SccResult search(org.onlab.graph.Graph,org.onlab.graph.EdgeWeight)",
            "org.onlab.graph.TarjanGraphSearch:org.onlab.graph.TarjanGraphSearch$VertexData connect(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,org.onlab.graph.TarjanGraphSearch$SccResult)"
        ]
    },
    "org.onlab.metrics.EventMetric:void registerMetrics()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.channel.DefaultChannelPipeline:org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext getContextOrDie(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.DefaultChannelPipeline:void addBefore(java.lang.String,java.lang.String,org.jboss.netty.channel.ChannelHandler)",
            "org.jboss.netty.channel.DefaultChannelPipeline:void addAfter(java.lang.String,java.lang.String,org.jboss.netty.channel.ChannelHandler)",
            "org.jboss.netty.channel.DefaultChannelPipeline:org.jboss.netty.channel.ChannelHandler remove(java.lang.String)",
            "org.jboss.netty.channel.DefaultChannelPipeline:org.jboss.netty.channel.ChannelHandler replace(java.lang.String,java.lang.String,org.jboss.netty.channel.ChannelHandler)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioDatagramChannel:org.jboss.netty.channel.ChannelFuture joinGroup(java.net.InetAddress)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.channel.socket.nio.NioDatagramChannel:org.jboss.netty.channel.ChannelFuture joinGroup(java.net.InetSocketAddress,java.net.NetworkInterface)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.http.HttpRequestDecoder:org.jboss.netty.handler.codec.http.HttpMessage createMessage(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.HttpMessageDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.http.HttpMessageDecoder$State)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.SpdyHeaders:org.jboss.netty.handler.codec.http.HttpMethod getMethod(int,org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.spdy.SpdyHttpDecoder:org.jboss.netty.handler.codec.http.HttpRequest createHttpRequest(int,org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame)"
        ]
    },
    "org.jboss.netty.handler.codec.http.QueryStringDecoder:void decodeParams(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.QueryStringDecoder:java.util.Map getParameters()"
        ]
    },
    "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestDecoder:java.util.List getBodyHttpDatas(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestDecoder:java.util.List getBodyHttpDatas(java.lang.String)"
        ]
    },
    "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestDecoder:org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData getBodyHttpData(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestDecoder:org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData getBodyHttpData(java.lang.String)"
        ]
    },
    "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void parseBodyMultipart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void parseBody()"
        ]
    },
    "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData findMultipartDelimiter(java.lang.String,org.jboss.netty.handler.codec.http.multipart.HttpPostRequestDecoder$MultiPartStatus,org.jboss.netty.handler.codec.http.multipart.HttpPostRequestDecoder$MultiPartStatus)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData decodeMultipart(org.jboss.netty.handler.codec.http.multipart.HttpPostRequestDecoder$MultiPartStatus)"
        ]
    },
    "org.jboss.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void setFinalBuffer(org.jboss.netty.buffer.ChannelBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributesStandard()",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributes()"
        ]
    },
    "org.jboss.netty.handler.codec.rtsp.RtspRequestDecoder:org.jboss.netty.handler.codec.http.HttpMessage createMessage(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.HttpMessageDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.http.HttpMessageDecoder$State)"
        ]
    },
    "org.jboss.netty.handler.codec.serialization.CompactObjectInputStream:java.io.ObjectStreamClass readClassDescriptor()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.serialization.CompactObjectInputStream:java.lang.Class resolveClass(java.io.ObjectStreamClass)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.serialization.SoftReferenceMap:java.lang.Object get(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Compiler:org.onlab.stc.Step getStep(java.lang.String)",
            "org.onlab.stc.Compiler:void processSequentialRequirements(java.lang.String,java.lang.String,java.lang.String)",
            "org.onlab.stc.Compiler:void processRequirements(org.onlab.stc.Step,java.lang.String,java.lang.String)",
            "org.onlab.stc.Compiler:org.onlab.stc.Step getStep(java.lang.String,java.lang.String)",
            "org.onlab.stc.Coordinator:java.lang.String substitute(java.lang.String)",
            "org.onlab.stc.MonitorLayout:void computeLayout(org.onlab.stc.Group,int,int)",
            "org.onlab.stc.MonitorLayout:org.onlab.stc.MonitorLayout$Box updateBox(org.onlab.stc.Step,int,int,org.onlab.stc.Group)",
            "org.onlab.stc.MonitorLayout:boolean visit(org.onlab.stc.Step,int,int,org.onlab.stc.Group)",
            "org.onlab.stc.MonitorLayout:int bottomMostTier(org.onlab.stc.Step)",
            "org.onlab.stc.MonitorLayout:org.onlab.stc.MonitorLayout$Box get(org.onlab.stc.Step)",
            "org.onlab.stc.MonitorLayout:int lambda$computeBreadth$28(org.onlab.stc.Step)",
            "org.onlab.stc.ScenarioStore:org.onlab.stc.Coordinator$Status getStatus(org.onlab.stc.Step)",
            "org.onlab.graph.AbstractGraphPathSearch$DefaultResult:boolean hasCost(org.onlab.graph.Vertex)",
            "org.onlab.graph.AbstractGraphPathSearch$DefaultResult:double cost(org.onlab.graph.Vertex)",
            "org.onlab.graph.AbstractGraphPathSearch$DefaultResult:void updateVertex(org.onlab.graph.Vertex,org.onlab.graph.Edge,double,boolean)",
            "org.onlab.graph.AbstractGraphPathSearch:void buildAllPaths(org.onlab.graph.AbstractGraphPathSearch$DefaultResult,org.onlab.graph.Vertex,org.onlab.graph.Vertex,int)",
            "org.onlab.graph.DepthFirstSearch:boolean isForwardEdge(org.onlab.graph.AbstractGraphPathSearch$DefaultResult,org.onlab.graph.Edge)",
            "org.onlab.graph.SrlgGraphSearch$2:double weight(org.onlab.graph.Edge)",
            "org.onlab.graph.SrlgGraphSearch:void <init>(java.util.Map)",
            "org.onlab.graph.TarjanGraphSearch$SccResult:org.onlab.graph.TarjanGraphSearch$VertexData data(org.onlab.graph.Vertex)",
            "org.onlab.packet.Ethernet:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.Ethernet:org.onlab.packet.Ethernet lambda$deserializer$10(byte[],int,int)",
            "org.onlab.packet.ICMP6:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ICMP6:org.onlab.packet.ICMP6 lambda$deserializer$40(byte[],int,int)",
            "org.onlab.packet.IPv4:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IPv4:org.onlab.packet.IPv4 lambda$deserializer$24(byte[],int,int)",
            "org.onlab.packet.IPv6:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IPv6:org.onlab.packet.IPv6 lambda$deserializer$48(byte[],int,int)",
            "org.onlab.packet.MPLS:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.MPLS:org.onlab.packet.MPLS lambda$deserializer$12(byte[],int,int)",
            "org.onlab.packet.PIM:org.onlab.packet.PIM lambda$deserializer$49(byte[],int,int)",
            "org.onlab.packet.UDP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.UDP:org.onlab.packet.UDP lambda$deserializer$45(byte[],int,int)",
            "org.onlab.packet.ipv6.Authentication:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Authentication:org.onlab.packet.ipv6.Authentication lambda$deserializer$46(byte[],int,int)",
            "org.onlab.packet.ipv6.BaseOptions:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.BaseOptions:org.onlab.packet.ipv6.BaseOptions lambda$deserializer$13(byte[],int,int)",
            "org.onlab.packet.ipv6.Fragment:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Fragment:org.onlab.packet.ipv6.Fragment lambda$deserializer$26(byte[],int,int)",
            "org.onlab.packet.ipv6.Routing:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Routing:org.onlab.packet.ipv6.Routing lambda$deserializer$50(byte[],int,int)",
            "org.onlab.packet.pim.PIMHello:byte[] serialize()",
            "org.onlab.util.ExtendedSet:java.lang.Object get(java.lang.Object)",
            "org.jboss.netty.bootstrap.Bootstrap:java.lang.Object getOption(java.lang.String)",
            "org.jboss.netty.channel.DefaultChannelPipeline:org.jboss.netty.channel.ChannelHandler get(java.lang.String)",
            "org.jboss.netty.channel.DefaultChannelPipeline:org.jboss.netty.channel.ChannelHandlerContext getContext(java.lang.String)",
            "org.jboss.netty.channel.StaticChannelPipeline:org.jboss.netty.channel.ChannelHandler get(java.lang.String)",
            "org.jboss.netty.channel.StaticChannelPipeline:org.jboss.netty.channel.ChannelHandlerContext getContext(java.lang.String)",
            "org.jboss.netty.channel.group.DefaultChannelGroupFuture:org.jboss.netty.channel.ChannelFuture find(java.lang.Integer)",
            "org.jboss.netty.channel.group.DefaultChannelGroupFuture:org.jboss.netty.channel.ChannelFuture find(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.channel.socket.nio.NioDatagramChannel:org.jboss.netty.channel.ChannelFuture joinGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress)",
            "org.jboss.netty.channel.socket.nio.NioDatagramChannel:org.jboss.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress)",
            "org.jboss.netty.channel.socket.nio.NioDatagramChannel:org.jboss.netty.channel.ChannelFuture block(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress)",
            "org.jboss.netty.handler.codec.http.HttpMethod:org.jboss.netty.handler.codec.http.HttpMethod valueOf(java.lang.String)",
            "org.jboss.netty.handler.codec.http.QueryStringDecoder:boolean addParam(java.util.Map,java.lang.String,java.lang.String)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:java.util.List getBodyHttpDatas(java.lang.String)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData getBodyHttpData(java.lang.String)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void addHttpData(org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData decodeMultipart(org.jboss.netty.handler.codec.http.multipart.HttpPostRequestDecoder$MultiPartStatus)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData findMultipartDisposition()",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData getFileUpload(java.lang.String)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:java.util.List getBodyHttpDatas(java.lang.String)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData getBodyHttpData(java.lang.String)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void addHttpData(org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData)",
            "org.jboss.netty.handler.codec.rtsp.RtspMethods:org.jboss.netty.handler.codec.http.HttpMethod valueOf(java.lang.String)",
            "org.jboss.netty.handler.codec.serialization.CachingClassResolver:java.lang.Class resolve(java.lang.String)",
            "org.jboss.netty.handler.codec.serialization.ReferenceMap:java.lang.Object get(java.lang.Object)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame:int getValue(int)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame:void setValue(int,int,boolean,boolean)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame:boolean isPersistValue(int)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame:void setPersistValue(int,boolean)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame:boolean isPersisted(int)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame:void setPersisted(int,boolean)",
            "org.jboss.netty.handler.codec.spdy.SpdyHttpDecoder:org.jboss.netty.handler.codec.http.HttpMessage getMessage(int)",
            "org.jboss.netty.handler.codec.spdy.SpdySession$PriorityComparator:int compare(java.lang.Integer,java.lang.Integer)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:boolean isRemoteSideClosed(int)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:void closeRemoteSide(int,boolean)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:boolean isLocalSideClosed(int)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:void closeLocalSide(int,boolean)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:boolean hasReceivedReply(int)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:void receivedReply(int)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:int getSendWindowSize(int)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:int updateSendWindowSize(int,int)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:int updateReceiveWindowSize(int,int)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:int getReceiveWindowSizeLowerBound(int)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:boolean putPendingWrite(int,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:org.jboss.netty.channel.MessageEvent getPendingWrite(int)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:org.jboss.netty.channel.MessageEvent removePendingWrite(int)",
            "org.jboss.netty.util.CharsetUtil:java.nio.charset.CharsetEncoder getEncoder(java.nio.charset.Charset)",
            "org.jboss.netty.util.CharsetUtil:java.nio.charset.CharsetDecoder getDecoder(java.nio.charset.Charset)",
            "org.apache.commons.lang.CharSet:org.apache.commons.lang.CharSet getInstance(java.lang.String)",
            "org.apache.commons.lang.ClassUtils:java.lang.String getShortClassName(java.lang.String)",
            "org.apache.commons.lang.ClassUtils:java.lang.Class primitiveToWrapper(java.lang.Class)",
            "org.apache.commons.lang.ClassUtils:java.lang.Class wrapperToPrimitive(java.lang.Class)",
            "org.apache.commons.lang.ClassUtils:java.lang.Class getClass(java.lang.ClassLoader,java.lang.String,boolean)",
            "org.apache.commons.lang.ClassUtils:java.lang.String toCanonicalName(java.lang.String)",
            "org.apache.commons.lang.ClassUtils:java.lang.String getCanonicalName(java.lang.String)",
            "org.apache.commons.lang.ClassUtils:void <clinit>()",
            "org.apache.commons.lang.Entities$MapIntMap:java.lang.String name(int)",
            "org.apache.commons.lang.Entities$MapIntMap:int value(java.lang.String)",
            "org.apache.commons.lang.Entities$PrimitiveEntityMap:int value(java.lang.String)",
            "org.apache.commons.lang.enum.Enum:void init(java.lang.String)",
            "org.apache.commons.lang.enum.Enum:java.lang.Object readResolve()",
            "org.apache.commons.lang.enum.Enum:org.apache.commons.lang.'enum'.Enum getEnum(java.lang.Class,java.lang.String)",
            "org.apache.commons.lang.enum.Enum:org.apache.commons.lang.'enum'.Enum$Entry getEntry(java.lang.Class)",
            "org.apache.commons.lang.enum.Enum:org.apache.commons.lang.'enum'.Enum$Entry createEntry(java.lang.Class)",
            "org.apache.commons.lang.enums.Enum:void init(java.lang.String)",
            "org.apache.commons.lang.enums.Enum:java.lang.Object readResolve()",
            "org.apache.commons.lang.enums.Enum:org.apache.commons.lang.enums.Enum getEnum(java.lang.Class,java.lang.String)",
            "org.apache.commons.lang.enums.Enum:org.apache.commons.lang.enums.Enum$Entry getEntry(java.lang.Class)",
            "org.apache.commons.lang.enums.Enum:org.apache.commons.lang.enums.Enum$Entry createEntry(java.lang.Class)",
            "org.apache.commons.lang.LocaleUtils:java.util.List languagesByCountry(java.lang.String)",
            "org.apache.commons.lang.LocaleUtils:java.util.List countriesByLanguage(java.lang.String)",
            "org.apache.commons.lang.text.ExtendedMessageFormat:java.text.Format getFormat(java.lang.String)",
            "org.apache.commons.lang.text.StrLookup$MapStrLookup:java.lang.String lookup(java.lang.String)",
            "org.apache.commons.lang.time.FastDateFormat:org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String,java.util.TimeZone,java.util.Locale)",
            "org.apache.commons.lang.time.FastDateFormat:org.apache.commons.lang.time.FastDateFormat getDateInstance(int,java.util.TimeZone,java.util.Locale)",
            "org.apache.commons.lang.time.FastDateFormat:org.apache.commons.lang.time.FastDateFormat getTimeInstance(int,java.util.TimeZone,java.util.Locale)",
            "org.apache.commons.lang.time.FastDateFormat:org.apache.commons.lang.time.FastDateFormat getDateTimeInstance(int,int,java.util.TimeZone,java.util.Locale)",
            "org.apache.commons.lang.time.FastDateFormat:java.lang.String getTimeZoneDisplay(java.util.TimeZone,boolean,int,java.util.Locale)",
            "org.apache.commons.lang3.builder.Diff:void <init>(java.lang.String)",
            "org.apache.commons.lang3.CharSet:org.apache.commons.lang3.CharSet getInstance(java.lang.String[])",
            "org.apache.commons.lang3.ClassUtils:java.lang.String getShortClassName(java.lang.String)",
            "org.apache.commons.lang3.ClassUtils:java.lang.Class primitiveToWrapper(java.lang.Class)",
            "org.apache.commons.lang3.ClassUtils:java.lang.Class wrapperToPrimitive(java.lang.Class)",
            "org.apache.commons.lang3.ClassUtils:java.lang.Class getClass(java.lang.ClassLoader,java.lang.String,boolean)",
            "org.apache.commons.lang3.ClassUtils:java.lang.String toCanonicalName(java.lang.String)",
            "org.apache.commons.lang3.ClassUtils:java.lang.String getCanonicalName(java.lang.String)",
            "org.apache.commons.lang3.ClassUtils:void <clinit>()",
            "org.apache.commons.lang3.concurrent.MultiBackgroundInitializer$MultiBackgroundInitializerResults:java.lang.Object getResultObject(java.lang.String)",
            "org.apache.commons.lang3.concurrent.MultiBackgroundInitializer$MultiBackgroundInitializerResults:org.apache.commons.lang3.concurrent.ConcurrentException getException(java.lang.String)",
            "org.apache.commons.lang3.concurrent.MultiBackgroundInitializer$MultiBackgroundInitializerResults:org.apache.commons.lang3.concurrent.BackgroundInitializer checkName(java.lang.String)",
            "org.apache.commons.lang3.reflect.TypeLiteral:void <init>()",
            "org.apache.commons.lang3.reflect.TypeUtils:java.lang.reflect.Type unrollVariableAssignments(java.lang.reflect.TypeVariable,java.util.Map)",
            "org.apache.commons.lang3.reflect.TypeUtils:java.lang.reflect.Type substituteTypeVariables(java.lang.reflect.Type,java.util.Map)",
            "org.apache.commons.lang3.reflect.TypeUtils:java.util.Map getTypeArguments(java.lang.reflect.ParameterizedType,java.lang.Class,java.util.Map)",
            "org.apache.commons.lang3.reflect.TypeUtils:void mapTypeVariablesToArguments(java.lang.Class,java.lang.reflect.ParameterizedType,java.util.Map)",
            "org.apache.commons.lang3.reflect.TypeUtils:java.lang.Class getRawType(java.lang.reflect.Type,java.lang.reflect.Type)",
            "org.apache.commons.lang3.reflect.TypeUtils:java.lang.reflect.Type unrollVariables(java.util.Map,java.lang.reflect.Type)",
            "org.apache.commons.lang3.reflect.TypeUtils:java.lang.reflect.Type[] extractTypeArgumentsFrom(java.util.Map,java.lang.reflect.TypeVariable[])",
            "org.apache.commons.lang3.SerializationUtils$ClassLoaderAwareObjectInputStream:java.lang.Class resolveClass(java.io.ObjectStreamClass)",
            "org.apache.commons.lang3.text.ExtendedMessageFormat:java.text.Format getFormat(java.lang.String)",
            "org.apache.commons.lang3.text.StrLookup$MapStrLookup:java.lang.String lookup(java.lang.String)",
            "org.apache.commons.lang3.time.FastDateParser$TextStrategy:void setCalendar(org.apache.commons.lang3.time.FastDateParser,java.util.Calendar,java.lang.String)",
            "com.esotericsoftware.kryo.Generics:java.lang.Class getConcreteClass(java.lang.String)",
            "org.onlab.stc.MonitorLayout$get__40:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.jboss.netty.handler.codec.serialization.WeakReferenceMap:java.lang.Object get(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Compiler:org.onlab.stc.Step getStep(java.lang.String)",
            "org.onlab.stc.Compiler:void processSequentialRequirements(java.lang.String,java.lang.String,java.lang.String)",
            "org.onlab.stc.Compiler:void processRequirements(org.onlab.stc.Step,java.lang.String,java.lang.String)",
            "org.onlab.stc.Compiler:org.onlab.stc.Step getStep(java.lang.String,java.lang.String)",
            "org.onlab.stc.Coordinator:java.lang.String substitute(java.lang.String)",
            "org.onlab.stc.MonitorLayout:void computeLayout(org.onlab.stc.Group,int,int)",
            "org.onlab.stc.MonitorLayout:org.onlab.stc.MonitorLayout$Box updateBox(org.onlab.stc.Step,int,int,org.onlab.stc.Group)",
            "org.onlab.stc.MonitorLayout:boolean visit(org.onlab.stc.Step,int,int,org.onlab.stc.Group)",
            "org.onlab.stc.MonitorLayout:int bottomMostTier(org.onlab.stc.Step)",
            "org.onlab.stc.MonitorLayout:org.onlab.stc.MonitorLayout$Box get(org.onlab.stc.Step)",
            "org.onlab.stc.MonitorLayout:int lambda$computeBreadth$28(org.onlab.stc.Step)",
            "org.onlab.stc.ScenarioStore:org.onlab.stc.Coordinator$Status getStatus(org.onlab.stc.Step)",
            "org.onlab.graph.AbstractGraphPathSearch$DefaultResult:boolean hasCost(org.onlab.graph.Vertex)",
            "org.onlab.graph.AbstractGraphPathSearch$DefaultResult:double cost(org.onlab.graph.Vertex)",
            "org.onlab.graph.AbstractGraphPathSearch$DefaultResult:void updateVertex(org.onlab.graph.Vertex,org.onlab.graph.Edge,double,boolean)",
            "org.onlab.graph.AbstractGraphPathSearch:void buildAllPaths(org.onlab.graph.AbstractGraphPathSearch$DefaultResult,org.onlab.graph.Vertex,org.onlab.graph.Vertex,int)",
            "org.onlab.graph.DepthFirstSearch:boolean isForwardEdge(org.onlab.graph.AbstractGraphPathSearch$DefaultResult,org.onlab.graph.Edge)",
            "org.onlab.graph.SrlgGraphSearch$2:double weight(org.onlab.graph.Edge)",
            "org.onlab.graph.SrlgGraphSearch:void <init>(java.util.Map)",
            "org.onlab.graph.TarjanGraphSearch$SccResult:org.onlab.graph.TarjanGraphSearch$VertexData data(org.onlab.graph.Vertex)",
            "org.onlab.packet.Ethernet:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.Ethernet:org.onlab.packet.Ethernet lambda$deserializer$10(byte[],int,int)",
            "org.onlab.packet.ICMP6:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ICMP6:org.onlab.packet.ICMP6 lambda$deserializer$40(byte[],int,int)",
            "org.onlab.packet.IPv4:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IPv4:org.onlab.packet.IPv4 lambda$deserializer$24(byte[],int,int)",
            "org.onlab.packet.IPv6:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IPv6:org.onlab.packet.IPv6 lambda$deserializer$48(byte[],int,int)",
            "org.onlab.packet.MPLS:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.MPLS:org.onlab.packet.MPLS lambda$deserializer$12(byte[],int,int)",
            "org.onlab.packet.PIM:org.onlab.packet.PIM lambda$deserializer$49(byte[],int,int)",
            "org.onlab.packet.UDP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.UDP:org.onlab.packet.UDP lambda$deserializer$45(byte[],int,int)",
            "org.onlab.packet.ipv6.Authentication:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Authentication:org.onlab.packet.ipv6.Authentication lambda$deserializer$46(byte[],int,int)",
            "org.onlab.packet.ipv6.BaseOptions:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.BaseOptions:org.onlab.packet.ipv6.BaseOptions lambda$deserializer$13(byte[],int,int)",
            "org.onlab.packet.ipv6.Fragment:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Fragment:org.onlab.packet.ipv6.Fragment lambda$deserializer$26(byte[],int,int)",
            "org.onlab.packet.ipv6.Routing:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Routing:org.onlab.packet.ipv6.Routing lambda$deserializer$50(byte[],int,int)",
            "org.onlab.packet.pim.PIMHello:byte[] serialize()",
            "org.onlab.util.ExtendedSet:java.lang.Object get(java.lang.Object)",
            "org.jboss.netty.bootstrap.Bootstrap:java.lang.Object getOption(java.lang.String)",
            "org.jboss.netty.channel.DefaultChannelPipeline:org.jboss.netty.channel.ChannelHandler get(java.lang.String)",
            "org.jboss.netty.channel.DefaultChannelPipeline:org.jboss.netty.channel.ChannelHandlerContext getContext(java.lang.String)",
            "org.jboss.netty.channel.StaticChannelPipeline:org.jboss.netty.channel.ChannelHandler get(java.lang.String)",
            "org.jboss.netty.channel.StaticChannelPipeline:org.jboss.netty.channel.ChannelHandlerContext getContext(java.lang.String)",
            "org.jboss.netty.channel.group.DefaultChannelGroupFuture:org.jboss.netty.channel.ChannelFuture find(java.lang.Integer)",
            "org.jboss.netty.channel.group.DefaultChannelGroupFuture:org.jboss.netty.channel.ChannelFuture find(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.channel.socket.nio.NioDatagramChannel:org.jboss.netty.channel.ChannelFuture joinGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress)",
            "org.jboss.netty.channel.socket.nio.NioDatagramChannel:org.jboss.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress)",
            "org.jboss.netty.channel.socket.nio.NioDatagramChannel:org.jboss.netty.channel.ChannelFuture block(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress)",
            "org.jboss.netty.handler.codec.http.HttpMethod:org.jboss.netty.handler.codec.http.HttpMethod valueOf(java.lang.String)",
            "org.jboss.netty.handler.codec.http.QueryStringDecoder:boolean addParam(java.util.Map,java.lang.String,java.lang.String)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:java.util.List getBodyHttpDatas(java.lang.String)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData getBodyHttpData(java.lang.String)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void addHttpData(org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData decodeMultipart(org.jboss.netty.handler.codec.http.multipart.HttpPostRequestDecoder$MultiPartStatus)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData findMultipartDisposition()",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData getFileUpload(java.lang.String)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:java.util.List getBodyHttpDatas(java.lang.String)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData getBodyHttpData(java.lang.String)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void addHttpData(org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData)",
            "org.jboss.netty.handler.codec.rtsp.RtspMethods:org.jboss.netty.handler.codec.http.HttpMethod valueOf(java.lang.String)",
            "org.jboss.netty.handler.codec.serialization.CachingClassResolver:java.lang.Class resolve(java.lang.String)",
            "org.jboss.netty.handler.codec.serialization.ReferenceMap:java.lang.Object get(java.lang.Object)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame:int getValue(int)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame:void setValue(int,int,boolean,boolean)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame:boolean isPersistValue(int)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame:void setPersistValue(int,boolean)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame:boolean isPersisted(int)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame:void setPersisted(int,boolean)",
            "org.jboss.netty.handler.codec.spdy.SpdyHttpDecoder:org.jboss.netty.handler.codec.http.HttpMessage getMessage(int)",
            "org.jboss.netty.handler.codec.spdy.SpdySession$PriorityComparator:int compare(java.lang.Integer,java.lang.Integer)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:boolean isRemoteSideClosed(int)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:void closeRemoteSide(int,boolean)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:boolean isLocalSideClosed(int)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:void closeLocalSide(int,boolean)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:boolean hasReceivedReply(int)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:void receivedReply(int)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:int getSendWindowSize(int)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:int updateSendWindowSize(int,int)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:int updateReceiveWindowSize(int,int)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:int getReceiveWindowSizeLowerBound(int)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:boolean putPendingWrite(int,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:org.jboss.netty.channel.MessageEvent getPendingWrite(int)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:org.jboss.netty.channel.MessageEvent removePendingWrite(int)",
            "org.jboss.netty.util.CharsetUtil:java.nio.charset.CharsetEncoder getEncoder(java.nio.charset.Charset)",
            "org.jboss.netty.util.CharsetUtil:java.nio.charset.CharsetDecoder getDecoder(java.nio.charset.Charset)",
            "org.apache.commons.lang.CharSet:org.apache.commons.lang.CharSet getInstance(java.lang.String)",
            "org.apache.commons.lang.ClassUtils:java.lang.String getShortClassName(java.lang.String)",
            "org.apache.commons.lang.ClassUtils:java.lang.Class primitiveToWrapper(java.lang.Class)",
            "org.apache.commons.lang.ClassUtils:java.lang.Class wrapperToPrimitive(java.lang.Class)",
            "org.apache.commons.lang.ClassUtils:java.lang.Class getClass(java.lang.ClassLoader,java.lang.String,boolean)",
            "org.apache.commons.lang.ClassUtils:java.lang.String toCanonicalName(java.lang.String)",
            "org.apache.commons.lang.ClassUtils:java.lang.String getCanonicalName(java.lang.String)",
            "org.apache.commons.lang.ClassUtils:void <clinit>()",
            "org.apache.commons.lang.Entities$MapIntMap:java.lang.String name(int)",
            "org.apache.commons.lang.Entities$MapIntMap:int value(java.lang.String)",
            "org.apache.commons.lang.Entities$PrimitiveEntityMap:int value(java.lang.String)",
            "org.apache.commons.lang.enum.Enum:void init(java.lang.String)",
            "org.apache.commons.lang.enum.Enum:java.lang.Object readResolve()",
            "org.apache.commons.lang.enum.Enum:org.apache.commons.lang.'enum'.Enum getEnum(java.lang.Class,java.lang.String)",
            "org.apache.commons.lang.enum.Enum:org.apache.commons.lang.'enum'.Enum$Entry getEntry(java.lang.Class)",
            "org.apache.commons.lang.enum.Enum:org.apache.commons.lang.'enum'.Enum$Entry createEntry(java.lang.Class)",
            "org.apache.commons.lang.enums.Enum:void init(java.lang.String)",
            "org.apache.commons.lang.enums.Enum:java.lang.Object readResolve()",
            "org.apache.commons.lang.enums.Enum:org.apache.commons.lang.enums.Enum getEnum(java.lang.Class,java.lang.String)",
            "org.apache.commons.lang.enums.Enum:org.apache.commons.lang.enums.Enum$Entry getEntry(java.lang.Class)",
            "org.apache.commons.lang.enums.Enum:org.apache.commons.lang.enums.Enum$Entry createEntry(java.lang.Class)",
            "org.apache.commons.lang.LocaleUtils:java.util.List languagesByCountry(java.lang.String)",
            "org.apache.commons.lang.LocaleUtils:java.util.List countriesByLanguage(java.lang.String)",
            "org.apache.commons.lang.text.ExtendedMessageFormat:java.text.Format getFormat(java.lang.String)",
            "org.apache.commons.lang.text.StrLookup$MapStrLookup:java.lang.String lookup(java.lang.String)",
            "org.apache.commons.lang.time.FastDateFormat:org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String,java.util.TimeZone,java.util.Locale)",
            "org.apache.commons.lang.time.FastDateFormat:org.apache.commons.lang.time.FastDateFormat getDateInstance(int,java.util.TimeZone,java.util.Locale)",
            "org.apache.commons.lang.time.FastDateFormat:org.apache.commons.lang.time.FastDateFormat getTimeInstance(int,java.util.TimeZone,java.util.Locale)",
            "org.apache.commons.lang.time.FastDateFormat:org.apache.commons.lang.time.FastDateFormat getDateTimeInstance(int,int,java.util.TimeZone,java.util.Locale)",
            "org.apache.commons.lang.time.FastDateFormat:java.lang.String getTimeZoneDisplay(java.util.TimeZone,boolean,int,java.util.Locale)",
            "org.apache.commons.lang3.builder.Diff:void <init>(java.lang.String)",
            "org.apache.commons.lang3.CharSet:org.apache.commons.lang3.CharSet getInstance(java.lang.String[])",
            "org.apache.commons.lang3.ClassUtils:java.lang.String getShortClassName(java.lang.String)",
            "org.apache.commons.lang3.ClassUtils:java.lang.Class primitiveToWrapper(java.lang.Class)",
            "org.apache.commons.lang3.ClassUtils:java.lang.Class wrapperToPrimitive(java.lang.Class)",
            "org.apache.commons.lang3.ClassUtils:java.lang.Class getClass(java.lang.ClassLoader,java.lang.String,boolean)",
            "org.apache.commons.lang3.ClassUtils:java.lang.String toCanonicalName(java.lang.String)",
            "org.apache.commons.lang3.ClassUtils:java.lang.String getCanonicalName(java.lang.String)",
            "org.apache.commons.lang3.ClassUtils:void <clinit>()",
            "org.apache.commons.lang3.concurrent.MultiBackgroundInitializer$MultiBackgroundInitializerResults:java.lang.Object getResultObject(java.lang.String)",
            "org.apache.commons.lang3.concurrent.MultiBackgroundInitializer$MultiBackgroundInitializerResults:org.apache.commons.lang3.concurrent.ConcurrentException getException(java.lang.String)",
            "org.apache.commons.lang3.concurrent.MultiBackgroundInitializer$MultiBackgroundInitializerResults:org.apache.commons.lang3.concurrent.BackgroundInitializer checkName(java.lang.String)",
            "org.apache.commons.lang3.reflect.TypeLiteral:void <init>()",
            "org.apache.commons.lang3.reflect.TypeUtils:java.lang.reflect.Type unrollVariableAssignments(java.lang.reflect.TypeVariable,java.util.Map)",
            "org.apache.commons.lang3.reflect.TypeUtils:java.lang.reflect.Type substituteTypeVariables(java.lang.reflect.Type,java.util.Map)",
            "org.apache.commons.lang3.reflect.TypeUtils:java.util.Map getTypeArguments(java.lang.reflect.ParameterizedType,java.lang.Class,java.util.Map)",
            "org.apache.commons.lang3.reflect.TypeUtils:void mapTypeVariablesToArguments(java.lang.Class,java.lang.reflect.ParameterizedType,java.util.Map)",
            "org.apache.commons.lang3.reflect.TypeUtils:java.lang.Class getRawType(java.lang.reflect.Type,java.lang.reflect.Type)",
            "org.apache.commons.lang3.reflect.TypeUtils:java.lang.reflect.Type unrollVariables(java.util.Map,java.lang.reflect.Type)",
            "org.apache.commons.lang3.reflect.TypeUtils:java.lang.reflect.Type[] extractTypeArgumentsFrom(java.util.Map,java.lang.reflect.TypeVariable[])",
            "org.apache.commons.lang3.SerializationUtils$ClassLoaderAwareObjectInputStream:java.lang.Class resolveClass(java.io.ObjectStreamClass)",
            "org.apache.commons.lang3.text.ExtendedMessageFormat:java.text.Format getFormat(java.lang.String)",
            "org.apache.commons.lang3.text.StrLookup$MapStrLookup:java.lang.String lookup(java.lang.String)",
            "org.apache.commons.lang3.time.FastDateParser$TextStrategy:void setCalendar(org.apache.commons.lang3.time.FastDateParser,java.util.Calendar,java.lang.String)",
            "com.esotericsoftware.kryo.Generics:java.lang.Class getConcreteClass(java.lang.String)",
            "org.onlab.stc.MonitorLayout$get__40:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame:void setValue(int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.spdy.SpdySession$PriorityComparator:int compare(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.graph.Heap:void bubbleUp()",
            "org.onlab.graph.Heap:void heapify(int)",
            "org.apache.commons.lang.builder.CompareToBuilder:org.apache.commons.lang.builder.CompareToBuilder append(java.lang.Object,java.lang.Object,java.util.Comparator)",
            "org.apache.commons.lang3.builder.CompareToBuilder:org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object,java.util.Comparator)",
            "org.apache.commons.lang3.Range:void <init>(java.lang.Object,java.lang.Object,java.util.Comparator)",
            "org.apache.commons.lang3.Range:boolean contains(java.lang.Object)",
            "org.apache.commons.lang3.Range:boolean isAfter(java.lang.Object)",
            "org.apache.commons.lang3.Range:boolean isStartedBy(java.lang.Object)",
            "org.apache.commons.lang3.Range:boolean isEndedBy(java.lang.Object)",
            "org.apache.commons.lang3.Range:boolean isBefore(java.lang.Object)",
            "org.apache.commons.lang3.Range:org.apache.commons.lang3.Range intersectionWith(org.apache.commons.lang3.Range)"
        ]
    },
    "org.jboss.netty.buffer.ChannelBuffers:java.nio.ByteBuffer encodeString(java.nio.CharBuffer,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.buffer.ChannelBuffers:org.jboss.netty.buffer.ChannelBuffer copiedBuffer(java.nio.ByteOrder,java.nio.CharBuffer,java.nio.charset.Charset)"
        ]
    },
    "org.jboss.netty.handler.codec.socks.SocksAuthRequest:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.socks.SocksAuthRequest:void <init>(java.lang.String,java.lang.String)",
            "org.jboss.netty.handler.codec.socks.SocksAuthRequest:void encodeAsByteBuf(org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.socks.SocksAuthRequest:void <clinit>()",
            "org.jboss.netty.handler.codec.socks.SocksAuthRequestDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.socks.SocksAuthRequestDecoder$State)"
        ]
    },
    "org.jboss.netty.buffer.ChannelBuffers:java.lang.String decodeString(java.nio.ByteBuffer,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.buffer.AbstractChannelBuffer:java.lang.String toString(int,int,java.nio.charset.Charset)"
        ]
    },
    "org.apache.commons.lang.Entities:java.lang.String entityName(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.Entities:void escape(java.io.Writer,java.lang.String)"
        ]
    },
    "org.apache.commons.lang.Entities:int entityValue(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.Entities:void doUnescape(java.io.Writer,java.lang.String,int)"
        ]
    },
    "org.apache.commons.lang.enum.EnumUtils:org.apache.commons.lang.'enum'.Enum getEnum(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.enum.Enum:java.util.Map getEnumMap(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.enum.EnumUtils:java.util.Map getEnumMap(java.lang.Class)"
        ]
    },
    "org.apache.commons.lang.enum.Enum:java.util.List getEnumList(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.enum.Enum:java.util.Iterator iterator(java.lang.Class)",
            "org.apache.commons.lang.enum.EnumUtils:java.util.List getEnumList(java.lang.Class)",
            "org.apache.commons.lang.enum.EnumUtils:java.util.Iterator iterator(java.lang.Class)",
            "org.apache.commons.lang.enum.ValuedEnum:org.apache.commons.lang.'enum'.Enum getEnum(java.lang.Class,int)"
        ]
    },
    "org.apache.commons.lang.enums.EnumUtils:org.apache.commons.lang.enums.Enum getEnum(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.enums.Enum:java.util.Map getEnumMap(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.enums.EnumUtils:java.util.Map getEnumMap(java.lang.Class)"
        ]
    },
    "org.apache.commons.lang.enums.Enum:java.util.List getEnumList(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.enums.Enum:java.util.Iterator iterator(java.lang.Class)",
            "org.apache.commons.lang.enums.EnumUtils:java.util.List getEnumList(java.lang.Class)",
            "org.apache.commons.lang.enums.EnumUtils:java.util.Iterator iterator(java.lang.Class)",
            "org.apache.commons.lang.enums.ValuedEnum:org.apache.commons.lang.enums.Enum getEnum(java.lang.Class,int)"
        ]
    },
    "org.apache.commons.lang.time.DateFormatUtils:java.lang.String format(java.util.Date,java.lang.String,java.util.TimeZone,java.util.Locale)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.time.DateFormatUtils:java.lang.String formatUTC(long,java.lang.String)",
            "org.apache.commons.lang.time.DateFormatUtils:java.lang.String formatUTC(java.util.Date,java.lang.String)",
            "org.apache.commons.lang.time.DateFormatUtils:java.lang.String formatUTC(long,java.lang.String,java.util.Locale)",
            "org.apache.commons.lang.time.DateFormatUtils:java.lang.String formatUTC(java.util.Date,java.lang.String,java.util.Locale)",
            "org.apache.commons.lang.time.DateFormatUtils:java.lang.String format(long,java.lang.String)",
            "org.apache.commons.lang.time.DateFormatUtils:java.lang.String format(java.util.Date,java.lang.String)",
            "org.apache.commons.lang.time.DateFormatUtils:java.lang.String format(long,java.lang.String,java.util.TimeZone)",
            "org.apache.commons.lang.time.DateFormatUtils:java.lang.String format(java.util.Date,java.lang.String,java.util.TimeZone)",
            "org.apache.commons.lang.time.DateFormatUtils:java.lang.String format(long,java.lang.String,java.util.Locale)",
            "org.apache.commons.lang.time.DateFormatUtils:java.lang.String format(java.util.Date,java.lang.String,java.util.Locale)",
            "org.apache.commons.lang.time.DateFormatUtils:java.lang.String format(long,java.lang.String,java.util.TimeZone,java.util.Locale)"
        ]
    },
    "org.apache.commons.lang.time.DateFormatUtils:java.lang.String format(java.util.Calendar,java.lang.String,java.util.TimeZone,java.util.Locale)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.time.DateFormatUtils:java.lang.String format(java.util.Calendar,java.lang.String)",
            "org.apache.commons.lang.time.DateFormatUtils:java.lang.String format(java.util.Calendar,java.lang.String,java.util.TimeZone)",
            "org.apache.commons.lang.time.DateFormatUtils:java.lang.String format(java.util.Calendar,java.lang.String,java.util.Locale)"
        ]
    },
    "org.apache.commons.lang.time.FastDateFormat:org.apache.commons.lang.time.FastDateFormat getInstance()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.time.FastDateFormat:org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.time.DateFormatUtils:void <clinit>()"
        ]
    },
    "org.apache.commons.lang.time.FastDateFormat:org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String,java.util.TimeZone)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.time.FastDateFormat:org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String,java.util.Locale)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.time.DateFormatUtils:void <clinit>()"
        ]
    },
    "org.apache.commons.lang.time.FastDateFormat:org.apache.commons.lang.time.FastDateFormat getDateInstance(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.time.FastDateFormat:org.apache.commons.lang.time.FastDateFormat getDateInstance(int,java.util.Locale)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.time.FastDateFormat:org.apache.commons.lang.time.FastDateFormat getDateInstance(int,java.util.TimeZone)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.time.FastDateFormat:org.apache.commons.lang.time.FastDateFormat getTimeInstance(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.time.FastDateFormat:org.apache.commons.lang.time.FastDateFormat getTimeInstance(int,java.util.Locale)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.time.FastDateFormat:org.apache.commons.lang.time.FastDateFormat getTimeInstance(int,java.util.TimeZone)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.time.FastDateFormat:org.apache.commons.lang.time.FastDateFormat getDateTimeInstance(int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.time.FastDateFormat:org.apache.commons.lang.time.FastDateFormat getDateTimeInstance(int,int,java.util.Locale)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.time.FastDateFormat:org.apache.commons.lang.time.FastDateFormat getDateTimeInstance(int,int,java.util.TimeZone)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.time.FastDateFormat$TimeZoneNameRule:void <init>(java.util.TimeZone,boolean,java.util.Locale,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.time.FastDateFormat:java.util.List parsePattern()"
        ]
    },
    "org.apache.commons.lang.time.FastDateFormat$TimeZoneNameRule:void appendTo(java.lang.StringBuffer,java.util.Calendar)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.time.FastDateFormat:java.lang.StringBuffer applyRules(java.util.Calendar,java.lang.StringBuffer)"
        ]
    },
    "org.apache.commons.lang3.builder.DiffBuilder$1:void <init>(org.apache.commons.lang3.builder.DiffBuilder,java.lang.String,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.builder.DiffBuilder:org.apache.commons.lang3.builder.DiffBuilder append(java.lang.String,boolean,boolean)"
        ]
    },
    "org.apache.commons.lang3.builder.DiffBuilder$10:void <init>(org.apache.commons.lang3.builder.DiffBuilder,java.lang.String,float[],float[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.builder.DiffBuilder:org.apache.commons.lang3.builder.DiffBuilder append(java.lang.String,float[],float[])"
        ]
    },
    "org.apache.commons.lang3.builder.DiffBuilder$11:void <init>(org.apache.commons.lang3.builder.DiffBuilder,java.lang.String,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.builder.DiffBuilder:org.apache.commons.lang3.builder.DiffBuilder append(java.lang.String,int,int)"
        ]
    },
    "org.apache.commons.lang3.builder.DiffBuilder$12:void <init>(org.apache.commons.lang3.builder.DiffBuilder,java.lang.String,int[],int[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.builder.DiffBuilder:org.apache.commons.lang3.builder.DiffBuilder append(java.lang.String,int[],int[])"
        ]
    },
    "org.apache.commons.lang3.builder.DiffBuilder$13:void <init>(org.apache.commons.lang3.builder.DiffBuilder,java.lang.String,long,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.builder.DiffBuilder:org.apache.commons.lang3.builder.DiffBuilder append(java.lang.String,long,long)"
        ]
    },
    "org.apache.commons.lang3.builder.DiffBuilder$14:void <init>(org.apache.commons.lang3.builder.DiffBuilder,java.lang.String,long[],long[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.builder.DiffBuilder:org.apache.commons.lang3.builder.DiffBuilder append(java.lang.String,long[],long[])"
        ]
    },
    "org.apache.commons.lang3.builder.DiffBuilder$15:void <init>(org.apache.commons.lang3.builder.DiffBuilder,java.lang.String,short,short)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.builder.DiffBuilder:org.apache.commons.lang3.builder.DiffBuilder append(java.lang.String,short,short)"
        ]
    },
    "org.apache.commons.lang3.builder.DiffBuilder$16:void <init>(org.apache.commons.lang3.builder.DiffBuilder,java.lang.String,short[],short[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.builder.DiffBuilder:org.apache.commons.lang3.builder.DiffBuilder append(java.lang.String,short[],short[])"
        ]
    },
    "org.apache.commons.lang3.builder.DiffBuilder$17:void <init>(org.apache.commons.lang3.builder.DiffBuilder,java.lang.String,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.builder.DiffBuilder:org.apache.commons.lang3.builder.DiffBuilder append(java.lang.String,java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.commons.lang3.builder.DiffBuilder$18:void <init>(org.apache.commons.lang3.builder.DiffBuilder,java.lang.String,java.lang.Object[],java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.builder.DiffBuilder:org.apache.commons.lang3.builder.DiffBuilder append(java.lang.String,java.lang.Object[],java.lang.Object[])"
        ]
    },
    "org.apache.commons.lang3.builder.DiffBuilder$2:void <init>(org.apache.commons.lang3.builder.DiffBuilder,java.lang.String,boolean[],boolean[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.builder.DiffBuilder:org.apache.commons.lang3.builder.DiffBuilder append(java.lang.String,boolean[],boolean[])"
        ]
    },
    "org.apache.commons.lang3.builder.DiffBuilder$3:void <init>(org.apache.commons.lang3.builder.DiffBuilder,java.lang.String,byte,byte)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.builder.DiffBuilder:org.apache.commons.lang3.builder.DiffBuilder append(java.lang.String,byte,byte)"
        ]
    },
    "org.apache.commons.lang3.builder.DiffBuilder$4:void <init>(org.apache.commons.lang3.builder.DiffBuilder,java.lang.String,byte[],byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.builder.DiffBuilder:org.apache.commons.lang3.builder.DiffBuilder append(java.lang.String,byte[],byte[])"
        ]
    },
    "org.apache.commons.lang3.builder.DiffBuilder$5:void <init>(org.apache.commons.lang3.builder.DiffBuilder,java.lang.String,char,char)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.builder.DiffBuilder:org.apache.commons.lang3.builder.DiffBuilder append(java.lang.String,char,char)"
        ]
    },
    "org.apache.commons.lang3.builder.DiffBuilder$6:void <init>(org.apache.commons.lang3.builder.DiffBuilder,java.lang.String,char[],char[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.builder.DiffBuilder:org.apache.commons.lang3.builder.DiffBuilder append(java.lang.String,char[],char[])"
        ]
    },
    "org.apache.commons.lang3.builder.DiffBuilder$7:void <init>(org.apache.commons.lang3.builder.DiffBuilder,java.lang.String,double,double)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.builder.DiffBuilder:org.apache.commons.lang3.builder.DiffBuilder append(java.lang.String,double,double)"
        ]
    },
    "org.apache.commons.lang3.builder.DiffBuilder$8:void <init>(org.apache.commons.lang3.builder.DiffBuilder,java.lang.String,double[],double[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.builder.DiffBuilder:org.apache.commons.lang3.builder.DiffBuilder append(java.lang.String,double[],double[])"
        ]
    },
    "org.apache.commons.lang3.builder.DiffBuilder$9:void <init>(org.apache.commons.lang3.builder.DiffBuilder,java.lang.String,float,float)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.builder.DiffBuilder:org.apache.commons.lang3.builder.DiffBuilder append(java.lang.String,float,float)"
        ]
    },
    "org.apache.commons.lang3.concurrent.ConcurrentUtils:java.lang.Object createIfAbsentUnchecked(java.util.concurrent.ConcurrentMap,java.lang.Object,org.apache.commons.lang3.concurrent.ConcurrentInitializer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.concurrent.MultiBackgroundInitializer$MultiBackgroundInitializerResults:org.apache.commons.lang3.concurrent.BackgroundInitializer getInitializer(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule:void <init>(java.util.TimeZone,java.util.Locale,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.time.FastDatePrinter:java.util.List parsePattern()"
        ]
    },
    "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule:void appendTo(java.lang.StringBuffer,java.util.Calendar)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.time.FastDatePrinter:java.lang.StringBuffer applyRules(java.util.Calendar,java.lang.StringBuffer)"
        ]
    },
    "org.apache.commons.lang3.time.FastDateFormat:org.apache.commons.lang3.time.FastDateFormat getInstance(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.time.DateFormatUtils:void <clinit>()"
        ]
    },
    "org.apache.commons.lang3.time.FastDateFormat:org.apache.commons.lang3.time.FastDateFormat getInstance(java.lang.String,java.util.TimeZone)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.time.FastDateFormat:org.apache.commons.lang3.time.FastDateFormat getInstance(java.lang.String,java.util.Locale)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.time.DateFormatUtils:void <clinit>()"
        ]
    },
    "org.apache.commons.lang3.time.FastDateFormat:org.apache.commons.lang3.time.FastDateFormat getInstance(java.lang.String,java.util.TimeZone,java.util.Locale)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.time.DateFormatUtils:java.lang.String format(java.util.Date,java.lang.String,java.util.TimeZone,java.util.Locale)",
            "org.apache.commons.lang3.time.DateFormatUtils:java.lang.String format(java.util.Calendar,java.lang.String,java.util.TimeZone,java.util.Locale)"
        ]
    },
    "org.apache.commons.lang3.time.FormatCache:java.text.Format getDateTimeInstance(java.lang.Integer,java.lang.Integer,java.util.TimeZone,java.util.Locale)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.time.FormatCache:java.text.Format getDateTimeInstance(int,int,java.util.TimeZone,java.util.Locale)",
            "org.apache.commons.lang3.time.FormatCache:java.text.Format getDateInstance(int,java.util.TimeZone,java.util.Locale)",
            "org.apache.commons.lang3.time.FormatCache:java.text.Format getTimeInstance(int,java.util.TimeZone,java.util.Locale)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.FieldSerializerGenericsUtil:java.lang.Class getTypeVarConcreteClass(java.lang.Class[],int,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.FieldSerializerGenericsUtil:com.esotericsoftware.kryo.Generics buildGenericsScope(java.lang.Class,java.lang.Class[])"
        ]
    },
    "org.onlab.util.RetryingFunction:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.util.RetryingFunction:java.lang.Object apply(java.lang.Object)",
            "org.onlab.util.Tools:java.lang.Object lambda$retryable$35(java.util.function.Supplier,java.lang.Class,int,int)"
        ]
    },
    "org.onlab.util.ExtendedSet$lambda_retainAll_21__103:boolean test(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.util.ExtendedSet:java.lang.Object lambda$conditionalRemove$19(java.util.function.Predicate,java.util.concurrent.atomic.AtomicBoolean,java.lang.Object,java.lang.Object)",
            "org.onlab.util.ExtendedSet:java.lang.Object lambda$insertOrReplace$18(java.util.function.Predicate,java.util.concurrent.atomic.AtomicBoolean,java.lang.Object,java.lang.Object,java.lang.Object)"
        ]
    },
    "org.jboss.netty.handler.codec.serialization.SoftReferenceMap:boolean containsKey(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Compiler:boolean registerStep(org.onlab.stc.Step,org.apache.commons.configuration.HierarchicalConfiguration,java.lang.String,org.onlab.stc.Group)",
            "org.onlab.graph.DepthFirstSearch$SpanningTreeResult:boolean isEdgeMarked(org.onlab.graph.Edge)",
            "org.onlab.packet.Ethernet:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.Ethernet:org.onlab.packet.Ethernet lambda$deserializer$10(byte[],int,int)",
            "org.onlab.packet.ICMP6:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ICMP6:org.onlab.packet.ICMP6 lambda$deserializer$40(byte[],int,int)",
            "org.onlab.packet.IPv4:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IPv4:org.onlab.packet.IPv4 lambda$deserializer$24(byte[],int,int)",
            "org.onlab.packet.IPv6:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IPv6:org.onlab.packet.IPv6 lambda$deserializer$48(byte[],int,int)",
            "org.onlab.packet.MPLS:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.MPLS:org.onlab.packet.MPLS lambda$deserializer$12(byte[],int,int)",
            "org.onlab.packet.PIM:org.onlab.packet.PIM lambda$deserializer$49(byte[],int,int)",
            "org.onlab.packet.UDP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.UDP:org.onlab.packet.UDP lambda$deserializer$45(byte[],int,int)",
            "org.onlab.packet.ipv6.Authentication:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Authentication:org.onlab.packet.ipv6.Authentication lambda$deserializer$46(byte[],int,int)",
            "org.onlab.packet.ipv6.BaseOptions:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.BaseOptions:org.onlab.packet.ipv6.BaseOptions lambda$deserializer$13(byte[],int,int)",
            "org.onlab.packet.ipv6.Fragment:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Fragment:org.onlab.packet.ipv6.Fragment lambda$deserializer$26(byte[],int,int)",
            "org.onlab.packet.ipv6.Routing:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Routing:org.onlab.packet.ipv6.Routing lambda$deserializer$50(byte[],int,int)",
            "org.onlab.util.ExtendedSet:boolean contains(java.lang.Object)",
            "org.onlab.util.ExtendedSet:boolean lambda$retainAll$21(java.lang.Object)",
            "org.jboss.netty.channel.DefaultChannelPipeline:void checkDuplicateName(java.lang.String)",
            "org.jboss.netty.handler.codec.serialization.ReferenceMap:boolean containsKey(java.lang.Object)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame:boolean isSet(int)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame:int getValue(int)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame:void setValue(int,int,boolean,boolean)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame:void removeValue(int)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame:boolean isPersistValue(int)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame:void setPersistValue(int,boolean)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame:boolean isPersisted(int)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame:void setPersisted(int,boolean)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:boolean isActiveStream(int)",
            "org.jboss.netty.util.MapBackedSet:boolean contains(java.lang.Object)",
            "org.apache.commons.lang.builder.ToStringStyle:boolean isRegistered(java.lang.Object)",
            "org.apache.commons.lang.ClassUtils:java.lang.String getShortClassName(java.lang.String)",
            "org.apache.commons.lang.ClassUtils:java.lang.Class getClass(java.lang.ClassLoader,java.lang.String,boolean)",
            "org.apache.commons.lang.enum.Enum:void init(java.lang.String)",
            "org.apache.commons.lang.enums.Enum:void init(java.lang.String)",
            "org.apache.commons.lang3.builder.ToStringStyle:boolean isRegistered(java.lang.Object)",
            "org.apache.commons.lang3.ClassUtils:java.lang.String getShortClassName(java.lang.String)",
            "org.apache.commons.lang3.ClassUtils:boolean isPrimitiveWrapper(java.lang.Class)",
            "org.apache.commons.lang3.ClassUtils:java.lang.Class getClass(java.lang.ClassLoader,java.lang.String,boolean)",
            "org.apache.commons.lang3.concurrent.MultiBackgroundInitializer$MultiBackgroundInitializerResults:boolean isException(java.lang.String)",
            "org.apache.commons.lang3.reflect.TypeUtils:java.util.Map getTypeArguments(java.lang.reflect.ParameterizedType,java.lang.Class,java.util.Map)",
            "org.apache.commons.lang3.reflect.TypeUtils:void mapTypeVariablesToArguments(java.lang.Class,java.lang.reflect.ParameterizedType,java.util.Map)",
            "org.apache.commons.lang3.reflect.TypeUtils:java.lang.reflect.Type[] extractTypeArgumentsFrom(java.util.Map,java.lang.reflect.TypeVariable[])",
            "org.onlab.util.ExtendedSet$containsKey__99:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.jboss.netty.handler.codec.serialization.WeakReferenceMap:boolean containsKey(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Compiler:boolean registerStep(org.onlab.stc.Step,org.apache.commons.configuration.HierarchicalConfiguration,java.lang.String,org.onlab.stc.Group)",
            "org.onlab.graph.DepthFirstSearch$SpanningTreeResult:boolean isEdgeMarked(org.onlab.graph.Edge)",
            "org.onlab.packet.Ethernet:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.Ethernet:org.onlab.packet.Ethernet lambda$deserializer$10(byte[],int,int)",
            "org.onlab.packet.ICMP6:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ICMP6:org.onlab.packet.ICMP6 lambda$deserializer$40(byte[],int,int)",
            "org.onlab.packet.IPv4:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IPv4:org.onlab.packet.IPv4 lambda$deserializer$24(byte[],int,int)",
            "org.onlab.packet.IPv6:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IPv6:org.onlab.packet.IPv6 lambda$deserializer$48(byte[],int,int)",
            "org.onlab.packet.MPLS:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.MPLS:org.onlab.packet.MPLS lambda$deserializer$12(byte[],int,int)",
            "org.onlab.packet.PIM:org.onlab.packet.PIM lambda$deserializer$49(byte[],int,int)",
            "org.onlab.packet.UDP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.UDP:org.onlab.packet.UDP lambda$deserializer$45(byte[],int,int)",
            "org.onlab.packet.ipv6.Authentication:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Authentication:org.onlab.packet.ipv6.Authentication lambda$deserializer$46(byte[],int,int)",
            "org.onlab.packet.ipv6.BaseOptions:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.BaseOptions:org.onlab.packet.ipv6.BaseOptions lambda$deserializer$13(byte[],int,int)",
            "org.onlab.packet.ipv6.Fragment:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Fragment:org.onlab.packet.ipv6.Fragment lambda$deserializer$26(byte[],int,int)",
            "org.onlab.packet.ipv6.Routing:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Routing:org.onlab.packet.ipv6.Routing lambda$deserializer$50(byte[],int,int)",
            "org.onlab.util.ExtendedSet:boolean contains(java.lang.Object)",
            "org.onlab.util.ExtendedSet:boolean lambda$retainAll$21(java.lang.Object)",
            "org.jboss.netty.channel.DefaultChannelPipeline:void checkDuplicateName(java.lang.String)",
            "org.jboss.netty.handler.codec.serialization.ReferenceMap:boolean containsKey(java.lang.Object)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame:boolean isSet(int)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame:int getValue(int)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame:void setValue(int,int,boolean,boolean)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame:void removeValue(int)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame:boolean isPersistValue(int)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame:void setPersistValue(int,boolean)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame:boolean isPersisted(int)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame:void setPersisted(int,boolean)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:boolean isActiveStream(int)",
            "org.jboss.netty.util.MapBackedSet:boolean contains(java.lang.Object)",
            "org.apache.commons.lang.builder.ToStringStyle:boolean isRegistered(java.lang.Object)",
            "org.apache.commons.lang.ClassUtils:java.lang.String getShortClassName(java.lang.String)",
            "org.apache.commons.lang.ClassUtils:java.lang.Class getClass(java.lang.ClassLoader,java.lang.String,boolean)",
            "org.apache.commons.lang.enum.Enum:void init(java.lang.String)",
            "org.apache.commons.lang.enums.Enum:void init(java.lang.String)",
            "org.apache.commons.lang3.builder.ToStringStyle:boolean isRegistered(java.lang.Object)",
            "org.apache.commons.lang3.ClassUtils:java.lang.String getShortClassName(java.lang.String)",
            "org.apache.commons.lang3.ClassUtils:boolean isPrimitiveWrapper(java.lang.Class)",
            "org.apache.commons.lang3.ClassUtils:java.lang.Class getClass(java.lang.ClassLoader,java.lang.String,boolean)",
            "org.apache.commons.lang3.concurrent.MultiBackgroundInitializer$MultiBackgroundInitializerResults:boolean isException(java.lang.String)",
            "org.apache.commons.lang3.reflect.TypeUtils:java.util.Map getTypeArguments(java.lang.reflect.ParameterizedType,java.lang.Class,java.util.Map)",
            "org.apache.commons.lang3.reflect.TypeUtils:void mapTypeVariablesToArguments(java.lang.Class,java.lang.reflect.ParameterizedType,java.util.Map)",
            "org.apache.commons.lang3.reflect.TypeUtils:java.lang.reflect.Type[] extractTypeArgumentsFrom(java.util.Map,java.lang.reflect.TypeVariable[])",
            "org.onlab.util.ExtendedSet$containsKey__99:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.onlab.stc.Coordinator:void access$500(org.onlab.stc.Coordinator,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Coordinator$Delegate:void onOutput(org.onlab.stc.Step,java.lang.String)"
        ]
    },
    "org.onlab.stc.ScenarioStore:void markStarted(org.onlab.stc.Step)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Coordinator:void execute(org.onlab.stc.Step)"
        ]
    },
    "org.onlab.stc.ScenarioStore:void markComplete(org.onlab.stc.Step,org.onlab.stc.Coordinator$Status)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Coordinator$Delegate:void onCompletion(org.onlab.stc.Step,org.onlab.stc.Coordinator$Status)",
            "org.onlab.stc.Coordinator:void skipStep(org.onlab.stc.Step)"
        ]
    },
    "org.onlab.stc.ScenarioStore:void lambda$load$19(org.apache.commons.configuration.PropertiesConfiguration,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.graph.TarjanGraphSearch$SccResult:org.onlab.graph.TarjanGraphSearch$VertexData access$200(org.onlab.graph.TarjanGraphSearch$SccResult,org.onlab.graph.Vertex)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.graph.TarjanGraphSearch:org.onlab.graph.TarjanGraphSearch$VertexData connect(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,org.onlab.graph.TarjanGraphSearch$SccResult)"
        ]
    },
    "org.onlab.packet.EthType$EtherType:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.EthType$EtherType:org.onlab.packet.EthType$EtherType[] values()",
            "org.onlab.packet.EthType$EtherType:org.onlab.packet.EthType$EtherType lookup(short)",
            "org.onlab.packet.EthType$EtherType:void <clinit>()",
            "org.onlab.packet.EthType:org.onlab.packet.EthType$EtherType lookup(short)",
            "org.onlab.packet.Ethernet:void <clinit>()"
        ]
    },
    "org.onlab.packet.IPv4:org.onlab.packet.IPv4 setSourceAddress(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.packet.IPv4:org.onlab.packet.IPv4 setDestinationAddress(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.packet.pim.PIMHello:org.onlab.packet.pim.PIMHello lambda$deserializer$0(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.pim.PIMHello$lambda_deserializer_0__94:org.onlab.packet.IPacket deserialize(byte[],int,int)"
        ]
    },
    "org.jboss.netty.handler.codec.http.HttpHeaders:int getWebSocketContentLength(org.jboss.netty.handler.codec.http.HttpMessage)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.HttpHeaders:long getContentLength(org.jboss.netty.handler.codec.http.HttpMessage)",
            "org.jboss.netty.handler.codec.http.HttpHeaders:long getContentLength(org.jboss.netty.handler.codec.http.HttpMessage,long)"
        ]
    },
    "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder:void <init>(org.jboss.netty.handler.codec.http.multipart.HttpDataFactory,org.jboss.netty.handler.codec.http.HttpRequest,boolean,java.nio.charset.Charset,org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder$EncoderMode)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder:void <init>(org.jboss.netty.handler.codec.http.multipart.HttpDataFactory,org.jboss.netty.handler.codec.http.HttpRequest,boolean,java.nio.charset.Charset)"
        ]
    },
    "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder:void initDataMultipart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder:void <init>(org.jboss.netty.handler.codec.http.multipart.HttpDataFactory,org.jboss.netty.handler.codec.http.HttpRequest,boolean,java.nio.charset.Charset,org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder$EncoderMode)"
        ]
    },
    "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder:void initMixedMultipart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder:void addBodyHttpData(org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData)"
        ]
    },
    "org.jboss.netty.handler.codec.serialization.SoftReferenceMap:java.lang.Object put(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Compiler:boolean registerStep(org.onlab.stc.Step,org.apache.commons.configuration.HierarchicalConfiguration,java.lang.String,org.onlab.stc.Group)",
            "org.onlab.stc.Compiler:void processSequentialRequirements(java.lang.String,java.lang.String,java.lang.String)",
            "org.onlab.stc.Compiler:void processRequirements(org.onlab.stc.Step,java.lang.String,java.lang.String)",
            "org.onlab.stc.Coordinator:void scrapeForVariables(java.lang.String)",
            "org.onlab.stc.MonitorLayout:void <init>(org.onlab.stc.Compiler)",
            "org.onlab.stc.MonitorLayout:void createBox(org.onlab.stc.Step)",
            "org.onlab.stc.ScenarioStore:void add(org.onlab.stc.StepEvent)",
            "org.onlab.stc.ScenarioStore:void lambda$reset$17(org.onlab.stc.Step)",
            "org.onlab.graph.AbstractGraphPathSearch$DefaultResult:void updateVertex(org.onlab.graph.Vertex,org.onlab.graph.Edge,double,boolean)",
            "org.onlab.graph.DepthFirstSearch$SpanningTreeResult:void markEdge(org.onlab.graph.Edge,org.onlab.graph.DepthFirstSearch$EdgeType)",
            "org.onlab.graph.SrlgGraphSearch:void <init>(java.util.Map)",
            "org.onlab.graph.TarjanGraphSearch$SccResult:org.onlab.graph.TarjanGraphSearch$VertexData addData(org.onlab.graph.Vertex)",
            "org.onlab.packet.Ethernet:void <clinit>()",
            "org.onlab.packet.ICMP6:void <clinit>()",
            "org.onlab.packet.IPv4:void <clinit>()",
            "org.onlab.packet.IPv6:void <clinit>()",
            "org.onlab.packet.MPLS:void <clinit>()",
            "org.onlab.packet.PIM:void <clinit>()",
            "org.onlab.packet.UDP:void <clinit>()",
            "org.onlab.packet.pim.PIMHello:void createDefaultOptions()",
            "org.onlab.packet.pim.PIMHello:void addOption(org.onlab.packet.pim.PIMHelloOption)",
            "org.jboss.netty.bootstrap.Bootstrap:void setOption(java.lang.String,java.lang.Object)",
            "org.jboss.netty.bootstrap.Bootstrap:boolean isOrderedMap(java.util.Map)",
            "org.jboss.netty.bootstrap.ServerBootstrap$Binder:void channelOpen(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.channel.DefaultChannelPipeline:void addFirst(java.lang.String,org.jboss.netty.channel.ChannelHandler)",
            "org.jboss.netty.channel.DefaultChannelPipeline:void addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)",
            "org.jboss.netty.channel.DefaultChannelPipeline:void addBefore(java.lang.String,java.lang.String,org.jboss.netty.channel.ChannelHandler)",
            "org.jboss.netty.channel.DefaultChannelPipeline:void addAfter(java.lang.String,java.lang.String,org.jboss.netty.channel.ChannelHandler)",
            "org.jboss.netty.channel.DefaultChannelPipeline:org.jboss.netty.channel.ChannelHandler replace(org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext,java.lang.String,org.jboss.netty.channel.ChannelHandler)",
            "org.jboss.netty.channel.DefaultChannelPipeline:void init(java.lang.String,org.jboss.netty.channel.ChannelHandler)",
            "org.jboss.netty.channel.StaticChannelPipeline:void <init>(org.jboss.netty.channel.ChannelHandler[])",
            "org.jboss.netty.channel.socket.nio.NioDatagramChannel:org.jboss.netty.channel.ChannelFuture joinGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress)",
            "org.jboss.netty.handler.codec.http.HttpMethod:void <clinit>()",
            "org.jboss.netty.handler.codec.http.QueryStringDecoder:boolean addParam(java.util.Map,java.lang.String,java.lang.String)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void addHttpData(org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData findMultipartDisposition()",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder:void <clinit>()",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void addHttpData(org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData)",
            "org.jboss.netty.handler.codec.rtsp.RtspMethods:void <clinit>()",
            "org.jboss.netty.handler.codec.serialization.CachingClassResolver:java.lang.Class resolve(java.lang.String)",
            "org.jboss.netty.handler.codec.serialization.ReferenceMap:java.lang.Object put(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.handler.codec.serialization.ReferenceMap:void putAll(java.util.Map)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame:void setValue(int,int,boolean,boolean)",
            "org.jboss.netty.handler.codec.spdy.SpdyHttpDecoder:org.jboss.netty.handler.codec.http.HttpMessage putMessage(int,org.jboss.netty.handler.codec.http.HttpMessage)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:void acceptStream(int,byte,boolean,boolean,int,int,boolean)",
            "org.jboss.netty.util.CharsetUtil:java.nio.charset.CharsetEncoder getEncoder(java.nio.charset.Charset)",
            "org.jboss.netty.util.CharsetUtil:java.nio.charset.CharsetDecoder getDecoder(java.nio.charset.Charset)",
            "org.jboss.netty.util.MapBackedSet:boolean add(java.lang.Object)",
            "org.apache.commons.lang.builder.ToStringStyle:void register(java.lang.Object)",
            "org.apache.commons.lang.CharSet:void <clinit>()",
            "org.apache.commons.lang.ClassUtils:void addAbbreviation(java.lang.String,java.lang.String)",
            "org.apache.commons.lang.ClassUtils:void <clinit>()",
            "org.apache.commons.lang.Entities$MapIntMap:void add(java.lang.String,int)",
            "org.apache.commons.lang.Entities$PrimitiveEntityMap:void add(java.lang.String,int)",
            "org.apache.commons.lang.enum.Enum:void init(java.lang.String)",
            "org.apache.commons.lang.enums.Enum:void init(java.lang.String)",
            "org.apache.commons.lang.LocaleUtils:java.util.List languagesByCountry(java.lang.String)",
            "org.apache.commons.lang.LocaleUtils:java.util.List countriesByLanguage(java.lang.String)",
            "org.apache.commons.lang.time.FastDateFormat:org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String,java.util.TimeZone,java.util.Locale)",
            "org.apache.commons.lang.time.FastDateFormat:org.apache.commons.lang.time.FastDateFormat getDateInstance(int,java.util.TimeZone,java.util.Locale)",
            "org.apache.commons.lang.time.FastDateFormat:org.apache.commons.lang.time.FastDateFormat getTimeInstance(int,java.util.TimeZone,java.util.Locale)",
            "org.apache.commons.lang.time.FastDateFormat:org.apache.commons.lang.time.FastDateFormat getDateTimeInstance(int,int,java.util.TimeZone,java.util.Locale)",
            "org.apache.commons.lang.time.FastDateFormat:java.lang.String getTimeZoneDisplay(java.util.TimeZone,boolean,int,java.util.Locale)",
            "org.apache.commons.lang3.builder.ToStringStyle:void register(java.lang.Object)",
            "org.apache.commons.lang3.CharSet:void <clinit>()",
            "org.apache.commons.lang3.ClassUtils:void <clinit>()",
            "org.apache.commons.lang3.concurrent.MultiBackgroundInitializer:void addInitializer(java.lang.String,org.apache.commons.lang3.concurrent.BackgroundInitializer)",
            "org.apache.commons.lang3.reflect.TypeUtils:java.util.Map getTypeArguments(java.lang.reflect.ParameterizedType,java.lang.Class,java.util.Map)",
            "org.apache.commons.lang3.reflect.TypeUtils:void mapTypeVariablesToArguments(java.lang.Class,java.lang.reflect.ParameterizedType,java.util.Map)",
            "org.apache.commons.lang3.SerializationUtils$ClassLoaderAwareObjectInputStream:void <init>(java.io.InputStream,java.lang.ClassLoader)",
            "com.esotericsoftware.kryo.Generics:void add(java.lang.String,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.MapSerializer:java.util.Map read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.MapSerializer:java.util.Map copy(com.esotericsoftware.kryo.Kryo,java.util.Map)"
        ]
    },
    "org.jboss.netty.handler.codec.serialization.WeakReferenceMap:java.lang.Object put(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Compiler:boolean registerStep(org.onlab.stc.Step,org.apache.commons.configuration.HierarchicalConfiguration,java.lang.String,org.onlab.stc.Group)",
            "org.onlab.stc.Compiler:void processSequentialRequirements(java.lang.String,java.lang.String,java.lang.String)",
            "org.onlab.stc.Compiler:void processRequirements(org.onlab.stc.Step,java.lang.String,java.lang.String)",
            "org.onlab.stc.Coordinator:void scrapeForVariables(java.lang.String)",
            "org.onlab.stc.MonitorLayout:void <init>(org.onlab.stc.Compiler)",
            "org.onlab.stc.MonitorLayout:void createBox(org.onlab.stc.Step)",
            "org.onlab.stc.ScenarioStore:void add(org.onlab.stc.StepEvent)",
            "org.onlab.stc.ScenarioStore:void lambda$reset$17(org.onlab.stc.Step)",
            "org.onlab.graph.AbstractGraphPathSearch$DefaultResult:void updateVertex(org.onlab.graph.Vertex,org.onlab.graph.Edge,double,boolean)",
            "org.onlab.graph.DepthFirstSearch$SpanningTreeResult:void markEdge(org.onlab.graph.Edge,org.onlab.graph.DepthFirstSearch$EdgeType)",
            "org.onlab.graph.SrlgGraphSearch:void <init>(java.util.Map)",
            "org.onlab.graph.TarjanGraphSearch$SccResult:org.onlab.graph.TarjanGraphSearch$VertexData addData(org.onlab.graph.Vertex)",
            "org.onlab.packet.Ethernet:void <clinit>()",
            "org.onlab.packet.ICMP6:void <clinit>()",
            "org.onlab.packet.IPv4:void <clinit>()",
            "org.onlab.packet.IPv6:void <clinit>()",
            "org.onlab.packet.MPLS:void <clinit>()",
            "org.onlab.packet.PIM:void <clinit>()",
            "org.onlab.packet.UDP:void <clinit>()",
            "org.onlab.packet.pim.PIMHello:void createDefaultOptions()",
            "org.onlab.packet.pim.PIMHello:void addOption(org.onlab.packet.pim.PIMHelloOption)",
            "org.jboss.netty.bootstrap.Bootstrap:void setOption(java.lang.String,java.lang.Object)",
            "org.jboss.netty.bootstrap.Bootstrap:boolean isOrderedMap(java.util.Map)",
            "org.jboss.netty.bootstrap.ServerBootstrap$Binder:void channelOpen(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.channel.DefaultChannelPipeline:void addFirst(java.lang.String,org.jboss.netty.channel.ChannelHandler)",
            "org.jboss.netty.channel.DefaultChannelPipeline:void addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)",
            "org.jboss.netty.channel.DefaultChannelPipeline:void addBefore(java.lang.String,java.lang.String,org.jboss.netty.channel.ChannelHandler)",
            "org.jboss.netty.channel.DefaultChannelPipeline:void addAfter(java.lang.String,java.lang.String,org.jboss.netty.channel.ChannelHandler)",
            "org.jboss.netty.channel.DefaultChannelPipeline:org.jboss.netty.channel.ChannelHandler replace(org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext,java.lang.String,org.jboss.netty.channel.ChannelHandler)",
            "org.jboss.netty.channel.DefaultChannelPipeline:void init(java.lang.String,org.jboss.netty.channel.ChannelHandler)",
            "org.jboss.netty.channel.StaticChannelPipeline:void <init>(org.jboss.netty.channel.ChannelHandler[])",
            "org.jboss.netty.channel.socket.nio.NioDatagramChannel:org.jboss.netty.channel.ChannelFuture joinGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress)",
            "org.jboss.netty.handler.codec.http.HttpMethod:void <clinit>()",
            "org.jboss.netty.handler.codec.http.QueryStringDecoder:boolean addParam(java.util.Map,java.lang.String,java.lang.String)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void addHttpData(org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData findMultipartDisposition()",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder:void <clinit>()",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void addHttpData(org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData)",
            "org.jboss.netty.handler.codec.rtsp.RtspMethods:void <clinit>()",
            "org.jboss.netty.handler.codec.serialization.CachingClassResolver:java.lang.Class resolve(java.lang.String)",
            "org.jboss.netty.handler.codec.serialization.ReferenceMap:java.lang.Object put(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.handler.codec.serialization.ReferenceMap:void putAll(java.util.Map)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame:void setValue(int,int,boolean,boolean)",
            "org.jboss.netty.handler.codec.spdy.SpdyHttpDecoder:org.jboss.netty.handler.codec.http.HttpMessage putMessage(int,org.jboss.netty.handler.codec.http.HttpMessage)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:void acceptStream(int,byte,boolean,boolean,int,int,boolean)",
            "org.jboss.netty.util.CharsetUtil:java.nio.charset.CharsetEncoder getEncoder(java.nio.charset.Charset)",
            "org.jboss.netty.util.CharsetUtil:java.nio.charset.CharsetDecoder getDecoder(java.nio.charset.Charset)",
            "org.jboss.netty.util.MapBackedSet:boolean add(java.lang.Object)",
            "org.apache.commons.lang.builder.ToStringStyle:void register(java.lang.Object)",
            "org.apache.commons.lang.CharSet:void <clinit>()",
            "org.apache.commons.lang.ClassUtils:void addAbbreviation(java.lang.String,java.lang.String)",
            "org.apache.commons.lang.ClassUtils:void <clinit>()",
            "org.apache.commons.lang.Entities$MapIntMap:void add(java.lang.String,int)",
            "org.apache.commons.lang.Entities$PrimitiveEntityMap:void add(java.lang.String,int)",
            "org.apache.commons.lang.enum.Enum:void init(java.lang.String)",
            "org.apache.commons.lang.enums.Enum:void init(java.lang.String)",
            "org.apache.commons.lang.LocaleUtils:java.util.List languagesByCountry(java.lang.String)",
            "org.apache.commons.lang.LocaleUtils:java.util.List countriesByLanguage(java.lang.String)",
            "org.apache.commons.lang.time.FastDateFormat:org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String,java.util.TimeZone,java.util.Locale)",
            "org.apache.commons.lang.time.FastDateFormat:org.apache.commons.lang.time.FastDateFormat getDateInstance(int,java.util.TimeZone,java.util.Locale)",
            "org.apache.commons.lang.time.FastDateFormat:org.apache.commons.lang.time.FastDateFormat getTimeInstance(int,java.util.TimeZone,java.util.Locale)",
            "org.apache.commons.lang.time.FastDateFormat:org.apache.commons.lang.time.FastDateFormat getDateTimeInstance(int,int,java.util.TimeZone,java.util.Locale)",
            "org.apache.commons.lang.time.FastDateFormat:java.lang.String getTimeZoneDisplay(java.util.TimeZone,boolean,int,java.util.Locale)",
            "org.apache.commons.lang3.builder.ToStringStyle:void register(java.lang.Object)",
            "org.apache.commons.lang3.CharSet:void <clinit>()",
            "org.apache.commons.lang3.ClassUtils:void <clinit>()",
            "org.apache.commons.lang3.concurrent.MultiBackgroundInitializer:void addInitializer(java.lang.String,org.apache.commons.lang3.concurrent.BackgroundInitializer)",
            "org.apache.commons.lang3.reflect.TypeUtils:java.util.Map getTypeArguments(java.lang.reflect.ParameterizedType,java.lang.Class,java.util.Map)",
            "org.apache.commons.lang3.reflect.TypeUtils:void mapTypeVariablesToArguments(java.lang.Class,java.lang.reflect.ParameterizedType,java.util.Map)",
            "org.apache.commons.lang3.SerializationUtils$ClassLoaderAwareObjectInputStream:void <init>(java.io.InputStream,java.lang.ClassLoader)",
            "com.esotericsoftware.kryo.Generics:void add(java.lang.String,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.MapSerializer:java.util.Map read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.MapSerializer:java.util.Map copy(com.esotericsoftware.kryo.Kryo,java.util.Map)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:boolean acceptStream(int,byte,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor:void <init>(int,long,long,long,java.util.concurrent.TimeUnit,java.util.concurrent.ThreadFactory)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor:void <init>(int,long,long,long,java.util.concurrent.TimeUnit)",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor:void <init>(int,long,long,long,java.util.concurrent.TimeUnit,java.util.concurrent.ThreadFactory)"
        ]
    },
    "org.jboss.netty.handler.traffic.AbstractTrafficShapingHandler:void <init>(org.jboss.netty.util.Timer,long,long,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.traffic.ChannelTrafficShapingHandler:void <init>(org.jboss.netty.util.Timer,long,long,long)",
            "org.jboss.netty.handler.traffic.GlobalTrafficShapingHandler:void <init>(org.jboss.netty.util.Timer,long,long,long)"
        ]
    },
    "org.jboss.netty.handler.traffic.AbstractTrafficShapingHandler:void <init>(org.jboss.netty.util.Timer,long,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.traffic.ChannelTrafficShapingHandler:void <init>(org.jboss.netty.util.Timer,long,long)",
            "org.jboss.netty.handler.traffic.GlobalTrafficShapingHandler:void <init>(org.jboss.netty.util.Timer,long,long)"
        ]
    },
    "org.jboss.netty.handler.traffic.AbstractTrafficShapingHandler:void <init>(org.jboss.netty.util.Timer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.traffic.ChannelTrafficShapingHandler:void <init>(org.jboss.netty.util.Timer)",
            "org.jboss.netty.handler.traffic.GlobalTrafficShapingHandler:void <init>(org.jboss.netty.util.Timer)"
        ]
    },
    "org.jboss.netty.handler.traffic.AbstractTrafficShapingHandler:void <init>(org.jboss.netty.util.Timer,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.traffic.ChannelTrafficShapingHandler:void <init>(org.jboss.netty.util.Timer,long)",
            "org.jboss.netty.handler.traffic.GlobalTrafficShapingHandler:void <init>(org.jboss.netty.util.Timer,long)"
        ]
    },
    "org.apache.commons.lang.builder.ToStringStyle:void appendIdentityHashCode(java.lang.StringBuffer,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.builder.ToStringStyle:void appendStart(java.lang.StringBuffer,java.lang.Object)"
        ]
    },
    "org.apache.commons.lang.Entities:void addEntity(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.Entities:void addEntities(java.lang.String[][])"
        ]
    },
    "org.apache.commons.lang3.builder.ToStringStyle:void appendIdentityHashCode(java.lang.StringBuffer,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.builder.RecursiveToStringStyle:void appendDetail(java.lang.StringBuffer,java.lang.String,java.util.Collection)",
            "org.apache.commons.lang3.builder.ToStringStyle:void appendStart(java.lang.StringBuffer,java.lang.Object)"
        ]
    },
    "org.apache.commons.lang3.SerializationUtils:java.io.Serializable clone(java.io.Serializable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.util.ExtendedSet$lambda_addAll_20__101:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.util.RetryingFunction:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.jboss.netty.channel.AbstractChannel:void <init>(org.jboss.netty.channel.Channel,org.jboss.netty.channel.ChannelFactory,org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelSink)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.AbstractServerChannel:void <init>(org.jboss.netty.channel.ChannelFactory,org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelSink)",
            "org.jboss.netty.channel.local.DefaultLocalChannel:void <init>(org.jboss.netty.channel.local.LocalServerChannel,org.jboss.netty.channel.ChannelFactory,org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelSink,org.jboss.netty.channel.local.DefaultLocalChannel)",
            "org.jboss.netty.channel.socket.http.HttpTunnelingClientSocketChannel:void <init>(org.jboss.netty.channel.ChannelFactory,org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelSink,org.jboss.netty.channel.socket.ClientSocketChannelFactory)",
            "org.jboss.netty.channel.socket.nio.AbstractNioChannel:void <init>(org.jboss.netty.channel.Channel,org.jboss.netty.channel.ChannelFactory,org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelSink,org.jboss.netty.channel.socket.nio.AbstractNioWorker,java.nio.channels.SelectableChannel)",
            "org.jboss.netty.channel.socket.oio.AbstractOioChannel:void <init>(org.jboss.netty.channel.Channel,org.jboss.netty.channel.ChannelFactory,org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelSink)"
        ]
    },
    "org.onlab.util.GroupedThreadFactory:org.onlab.util.GroupedThreadFactory groupedThreadFactory(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.util.GroupedThreadFactory:org.onlab.util.GroupedThreadFactory groupedThreadFactory(java.lang.String)",
            "org.onlab.util.Tools:java.util.concurrent.ThreadFactory groupedThreads(java.lang.String,java.lang.String)"
        ]
    },
    "org.onlab.stc.Coordinator:void removeListener(org.onlab.stc.StepProcessListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.util.HashedWheelTimer$HashedWheelTimeout:void cancel()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.NioClientBoss:void connect(java.nio.channels.SelectionKey)",
            "org.jboss.netty.handler.ssl.SslHandler:void cancelHandshakeTimeout()",
            "org.jboss.netty.handler.timeout.IdleStateHandler:void destroy(org.jboss.netty.channel.ChannelHandlerContext)",
            "org.jboss.netty.handler.timeout.ReadTimeoutHandler:void destroy(org.jboss.netty.channel.ChannelHandlerContext)",
            "org.jboss.netty.handler.timeout.WriteTimeoutHandler$TimeoutCanceller:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.jboss.netty.handler.traffic.AbstractTrafficShapingHandler:void releaseExternalResources()",
            "org.jboss.netty.handler.traffic.TrafficCounter:void stop()"
        ]
    },
    "org.apache.commons.lang.builder.HashCodeBuilder:void unregister(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.builder.HashCodeBuilder:void reflectionAppend(java.lang.Object,java.lang.Class,org.apache.commons.lang.builder.HashCodeBuilder,boolean,java.lang.String[])"
        ]
    },
    "org.apache.commons.lang3.builder.EqualsBuilder:void unregister(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.builder.EqualsBuilder:void reflectionAppend(java.lang.Object,java.lang.Object,java.lang.Class,org.apache.commons.lang3.builder.EqualsBuilder,boolean,java.lang.String[])"
        ]
    },
    "org.apache.commons.lang3.builder.HashCodeBuilder:void unregister(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.builder.HashCodeBuilder:void reflectionAppend(java.lang.Object,java.lang.Class,org.apache.commons.lang3.builder.HashCodeBuilder,boolean,java.lang.String[])"
        ]
    },
    "org.onlab.util.ExtendedSet$lambda_removeAll_23__106:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.util.RetryingFunction:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.onlab.util.ExtendedSet$lambda_retainAll_22__104:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.util.RetryingFunction:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.jboss.netty.channel.ChannelLocal$1:void operationComplete(org.jboss.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.CompleteChannelFuture:void addListener(org.jboss.netty.channel.ChannelFutureListener)",
            "org.jboss.netty.channel.DefaultChannelFuture:void notifyListener(org.jboss.netty.channel.ChannelFutureListener)"
        ]
    },
    "org.jboss.netty.channel.group.DefaultChannelGroup$1:void operationComplete(org.jboss.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.CompleteChannelFuture:void addListener(org.jboss.netty.channel.ChannelFutureListener)",
            "org.jboss.netty.channel.DefaultChannelFuture:void notifyListener(org.jboss.netty.channel.ChannelFutureListener)"
        ]
    },
    "org.jboss.netty.handler.codec.serialization.SoftReferenceMap:java.lang.Object remove(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.graph.AbstractGraphPathSearch$DefaultResult:void removeVertex(org.onlab.graph.Vertex)",
            "org.onlab.util.ExtendedSet:boolean remove(java.lang.Object)",
            "org.onlab.util.ExtendedSet:java.lang.Boolean lambda$removeAll$23(java.lang.Object)",
            "org.onlab.util.ExtendedSet:java.lang.Boolean lambda$retainAll$22(java.lang.Object)",
            "org.jboss.netty.bootstrap.Bootstrap:void setOption(java.lang.String,java.lang.Object)",
            "org.jboss.netty.channel.DefaultChannelPipeline:org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext remove(org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext)",
            "org.jboss.netty.channel.DefaultChannelPipeline:org.jboss.netty.channel.ChannelHandler removeFirst()",
            "org.jboss.netty.channel.DefaultChannelPipeline:org.jboss.netty.channel.ChannelHandler removeLast()",
            "org.jboss.netty.channel.DefaultChannelPipeline:org.jboss.netty.channel.ChannelHandler replace(org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext,java.lang.String,org.jboss.netty.channel.ChannelHandler)",
            "org.jboss.netty.channel.socket.nio.NioDatagramChannel:org.jboss.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void cleanMixedAttributes()",
            "org.jboss.netty.handler.codec.serialization.ReferenceMap:java.lang.Object remove(java.lang.Object)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame:void removeValue(int)",
            "org.jboss.netty.handler.codec.spdy.SpdyHttpDecoder:org.jboss.netty.handler.codec.http.HttpMessage removeMessage(int)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:org.jboss.netty.handler.codec.spdy.SpdySession$StreamState removeActiveStream(int,boolean)",
            "org.jboss.netty.util.MapBackedSet:boolean remove(java.lang.Object)",
            "org.apache.commons.lang.builder.ToStringStyle:void unregister(java.lang.Object)",
            "org.apache.commons.lang3.builder.ToStringStyle:void unregister(java.lang.Object)"
        ]
    },
    "org.jboss.netty.handler.codec.serialization.WeakReferenceMap:java.lang.Object remove(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.graph.AbstractGraphPathSearch$DefaultResult:void removeVertex(org.onlab.graph.Vertex)",
            "org.onlab.util.ExtendedSet:boolean remove(java.lang.Object)",
            "org.onlab.util.ExtendedSet:java.lang.Boolean lambda$removeAll$23(java.lang.Object)",
            "org.onlab.util.ExtendedSet:java.lang.Boolean lambda$retainAll$22(java.lang.Object)",
            "org.jboss.netty.bootstrap.Bootstrap:void setOption(java.lang.String,java.lang.Object)",
            "org.jboss.netty.channel.DefaultChannelPipeline:org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext remove(org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext)",
            "org.jboss.netty.channel.DefaultChannelPipeline:org.jboss.netty.channel.ChannelHandler removeFirst()",
            "org.jboss.netty.channel.DefaultChannelPipeline:org.jboss.netty.channel.ChannelHandler removeLast()",
            "org.jboss.netty.channel.DefaultChannelPipeline:org.jboss.netty.channel.ChannelHandler replace(org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext,java.lang.String,org.jboss.netty.channel.ChannelHandler)",
            "org.jboss.netty.channel.socket.nio.NioDatagramChannel:org.jboss.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void cleanMixedAttributes()",
            "org.jboss.netty.handler.codec.serialization.ReferenceMap:java.lang.Object remove(java.lang.Object)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame:void removeValue(int)",
            "org.jboss.netty.handler.codec.spdy.SpdyHttpDecoder:org.jboss.netty.handler.codec.http.HttpMessage removeMessage(int)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:org.jboss.netty.handler.codec.spdy.SpdySession$StreamState removeActiveStream(int,boolean)",
            "org.jboss.netty.util.MapBackedSet:boolean remove(java.lang.Object)",
            "org.apache.commons.lang.builder.ToStringStyle:void unregister(java.lang.Object)",
            "org.apache.commons.lang3.builder.ToStringStyle:void unregister(java.lang.Object)"
        ]
    },
    "org.jboss.netty.handler.execution.OrderedDownstreamThreadPoolExecutor$1:void operationComplete(org.jboss.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.CompleteChannelFuture:void addListener(org.jboss.netty.channel.ChannelFutureListener)",
            "org.jboss.netty.channel.DefaultChannelFuture:void notifyListener(org.jboss.netty.channel.ChannelFutureListener)"
        ]
    },
    "org.jboss.netty.channel.group.CombinedIterator:void remove()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.MonitorWebSocketServlet$Pruner:void run()",
            "org.jboss.netty.channel.group.CombinedIterator:void remove()",
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void process(java.nio.channels.Selector)",
            "org.jboss.netty.channel.socket.nio.NioClientBoss:void processSelectedKeys(java.util.Set)",
            "org.jboss.netty.channel.socket.nio.NioDatagramChannel:org.jboss.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress)",
            "org.jboss.netty.channel.socket.nio.NioServerBoss:void process(java.nio.channels.Selector)",
            "org.jboss.netty.handler.codec.http.HttpCodecUtil:void removeTransferEncodingChunked(org.jboss.netty.handler.codec.http.HttpMessage)",
            "org.jboss.netty.handler.codec.http.HttpHeaders:void removeTransferEncodingChunked(org.jboss.netty.handler.codec.http.HttpMessage)",
            "org.apache.commons.lang3.exception.DefaultExceptionContext:org.apache.commons.lang3.exception.DefaultExceptionContext setContextValue(java.lang.String,java.lang.Object)"
        ]
    },
    "org.jboss.netty.util.HashedWheelTimer$Worker:void fetchExpiredTimeouts(java.util.List,org.jboss.netty.util.internal.ReusableIterator,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.HashedWheelTimer$Worker:void fetchExpiredTimeouts(java.util.List,long)"
        ]
    },
    "org.apache.commons.lang.builder.ToStringStyle:void appendEnd(java.lang.StringBuffer,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.builder.ToStringBuilder:java.lang.String toString()"
        ]
    },
    "org.apache.commons.lang3.builder.ToStringStyle:void appendEnd(java.lang.StringBuffer,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.builder.ToStringBuilder:java.lang.String toString()"
        ]
    },
    "org.objectweb.asm.ClassReader:int b(org.objectweb.asm.ClassVisitor,org.objectweb.asm.Context,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.objectweb.asm.ClassReader:void accept(org.objectweb.asm.ClassVisitor,org.objectweb.asm.Attribute[],int)"
        ]
    },
    "com.eclipsesource.json.JsonObject:com.eclipsesource.json.JsonObject add(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.eclipsesource.json.JsonObject:com.eclipsesource.json.JsonObject add(java.lang.String,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.eclipsesource.json.JsonObject:com.eclipsesource.json.JsonObject add(java.lang.String,float)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.eclipsesource.json.JsonObject:com.eclipsesource.json.JsonObject add(java.lang.String,double)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.eclipsesource.json.JsonObject:com.eclipsesource.json.JsonObject add(java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.eclipsesource.json.JsonObject:com.eclipsesource.json.JsonObject add(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.eclipsesource.json.JsonParser:com.eclipsesource.json.JsonObject readObject()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.eclipsesource.json.JsonParser:com.eclipsesource.json.JsonValue readValue()"
        ]
    },
    "com.eclipsesource.json.JsonObject:com.eclipsesource.json.JsonObject set(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.eclipsesource.json.JsonObject:com.eclipsesource.json.JsonObject set(java.lang.String,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.eclipsesource.json.JsonObject:com.eclipsesource.json.JsonObject set(java.lang.String,float)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.eclipsesource.json.JsonObject:com.eclipsesource.json.JsonObject set(java.lang.String,double)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.eclipsesource.json.JsonObject:com.eclipsesource.json.JsonObject set(java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.eclipsesource.json.JsonObject:com.eclipsesource.json.JsonObject set(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.eclipsesource.json.JsonObject:void <init>(com.eclipsesource.json.JsonObject,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.eclipsesource.json.JsonObject:void <init>(com.eclipsesource.json.JsonObject)",
            "com.eclipsesource.json.JsonObject:com.eclipsesource.json.JsonObject unmodifiableObject(com.eclipsesource.json.JsonObject)"
        ]
    },
    "com.eclipsesource.json.JsonObject:void readObject(java.io.ObjectInputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.eclipsesource.json.JsonObject:com.eclipsesource.json.JsonObject remove(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.eclipsesource.json.JsonObject:com.eclipsesource.json.JsonValue get(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.Kryo:com.esotericsoftware.kryo.Registration register(com.esotericsoftware.kryo.Registration)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:com.esotericsoftware.kryo.Registration register(java.lang.Class,com.esotericsoftware.kryo.Serializer,int)"
        ]
    },
    "com.esotericsoftware.kryo.util.DefaultClassResolver:com.esotericsoftware.kryo.Registration registerImplicit(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:com.esotericsoftware.kryo.Registration getRegistration(java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.util.DefaultClassResolver:com.esotericsoftware.kryo.Registration readClass(com.esotericsoftware.kryo.io.Input)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:com.esotericsoftware.kryo.Registration readClass(com.esotericsoftware.kryo.io.Input)"
        ]
    },
    "com.esotericsoftware.kryo.Kryo:void <init>(com.esotericsoftware.kryo.ClassResolver,com.esotericsoftware.kryo.ReferenceResolver,com.esotericsoftware.kryo.StreamFactory)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:void <init>()",
            "com.esotericsoftware.kryo.Kryo:void <init>(com.esotericsoftware.kryo.ReferenceResolver)",
            "com.esotericsoftware.kryo.Kryo:void <init>(com.esotericsoftware.kryo.ClassResolver,com.esotericsoftware.kryo.ReferenceResolver)"
        ]
    },
    "com.esotericsoftware.kryo.Kryo:com.esotericsoftware.kryo.Serializer getSerializer(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:java.lang.Object copy(java.lang.Object)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object copyShallow(java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.CollectionSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.Collection)",
            "com.esotericsoftware.kryo.serializers.CollectionSerializer:java.util.Collection read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ObjectArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object[])",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ObjectArraySerializer:java.lang.Object[] read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$StringArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.String[])",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$StringArraySerializer:java.lang.String[] read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.MapSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.Map)",
            "com.esotericsoftware.kryo.serializers.MapSerializer:java.util.Map read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.ObjectField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.ObjectField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.Kryo:java.lang.Object newInstance(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.BeanSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.BeanSerializer:java.lang.Object copy(com.esotericsoftware.kryo.Kryo,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.CollectionSerializer:java.util.Collection create(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.CollectionSerializer:java.util.Collection createCopy(com.esotericsoftware.kryo.Kryo,java.util.Collection)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$DateSerializer:java.util.Date create(com.esotericsoftware.kryo.Kryo,java.lang.Class,long)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$KryoSerializableSerializer:com.esotericsoftware.kryo.KryoSerializable read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:java.lang.Object create(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:java.lang.Object createCopy(com.esotericsoftware.kryo.Kryo,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.MapSerializer:java.util.Map create(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.MapSerializer:java.util.Map createCopy(com.esotericsoftware.kryo.Kryo,java.util.Map)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.BeanSerializer:void <init>(com.esotericsoftware.kryo.Kryo,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.util.DefaultClassResolver:com.esotericsoftware.kryo.Registration writeClass(com.esotericsoftware.kryo.io.Output,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:com.esotericsoftware.kryo.Registration writeClass(com.esotericsoftware.kryo.io.Output,java.lang.Class)"
        ]
    },
    "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestDecoder:void <init>(org.jboss.netty.handler.codec.http.HttpRequest)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestDecoder:void <init>(org.jboss.netty.handler.codec.http.multipart.HttpDataFactory,org.jboss.netty.handler.codec.http.HttpRequest)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.http.HttpHeaders:void setTransferEncodingChunked(org.jboss.netty.handler.codec.http.HttpMessage)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.spdy.SpdyHttpHeaders:void setStreamId(org.jboss.netty.handler.codec.http.HttpMessage,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.spdy.SpdyHttpDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)",
            "org.jboss.netty.handler.codec.spdy.SpdyHttpResponseStreamIdHandler:void writeRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.SpdyHttpHeaders:void setAssociatedToStreamId(org.jboss.netty.handler.codec.http.HttpMessage,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.spdy.SpdyHttpDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.SpdyHttpHeaders:void setPriority(org.jboss.netty.handler.codec.http.HttpMessage,byte)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.spdy.SpdyHttpDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)"
        ]
    },
    "org.jboss.netty.handler.codec.http.HttpHeaders:void set100ContinueExpected(org.jboss.netty.handler.codec.http.HttpMessage)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.spdy.SpdyHeaderBlockZlibDecoder:int decompress(org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.spdy.SpdyHeaderBlockZlibDecoder:void decode(org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame)"
        ]
    },
    "org.apache.commons.lang.builder.ReflectionToStringBuilder:java.lang.String toStringExclude(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.stc.MonitorLayout$lambda_boxesOnTier_31__45:boolean test(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.util.ExtendedSet:java.lang.Object lambda$conditionalRemove$19(java.util.function.Predicate,java.util.concurrent.atomic.AtomicBoolean,java.lang.Object,java.lang.Object)",
            "org.onlab.util.ExtendedSet:java.lang.Object lambda$insertOrReplace$18(java.util.function.Predicate,java.util.concurrent.atomic.AtomicBoolean,java.lang.Object,java.lang.Object,java.lang.Object)"
        ]
    },
    "org.jboss.netty.handler.codec.http.DefaultHttpHeaders$HeaderEntry:java.lang.String setValue(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders$HeaderEntry:java.lang.Object setValue(java.lang.Object)"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentHashMap$Values:boolean contains(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.util.internal.ConcurrentHashMap:boolean contains(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$Values:boolean contains(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.util.internal.ConcurrentIdentityHashMap:boolean contains(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$HashIterator:void remove()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.MonitorWebSocketServlet$Pruner:void run()",
            "org.jboss.netty.channel.group.CombinedIterator:void remove()",
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void process(java.nio.channels.Selector)",
            "org.jboss.netty.channel.socket.nio.NioClientBoss:void processSelectedKeys(java.util.Set)",
            "org.jboss.netty.channel.socket.nio.NioDatagramChannel:org.jboss.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress)",
            "org.jboss.netty.channel.socket.nio.NioServerBoss:void process(java.nio.channels.Selector)",
            "org.jboss.netty.handler.codec.http.HttpCodecUtil:void removeTransferEncodingChunked(org.jboss.netty.handler.codec.http.HttpMessage)",
            "org.jboss.netty.handler.codec.http.HttpHeaders:void removeTransferEncodingChunked(org.jboss.netty.handler.codec.http.HttpMessage)",
            "org.jboss.netty.util.HashedWheelTimer$Worker:void fetchExpiredTimeouts(java.util.List,org.jboss.netty.util.internal.ReusableIterator,long)",
            "org.apache.commons.lang3.exception.DefaultExceptionContext:org.apache.commons.lang3.exception.DefaultExceptionContext setContextValue(java.lang.String,java.lang.Object)"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$KeySet:boolean remove(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Coordinator:void removeListener(org.onlab.stc.StepProcessListener)",
            "org.onlab.graph.MutableAdjacencyListsGraph:void removeVertex(org.onlab.graph.Vertex)",
            "org.onlab.graph.MutableAdjacencyListsGraph:void removeEdge(org.onlab.graph.Edge)",
            "org.jboss.netty.util.DefaultObjectSizeEstimator:int estimateSize(java.lang.Class,java.util.Set)",
            "org.jboss.netty.util.HashedWheelTimer$HashedWheelTimeout:void cancel()",
            "org.jboss.netty.util.VirtualExecutorService$ChildExecutorRunnable:void run()",
            "org.apache.commons.lang.builder.HashCodeBuilder:void unregister(java.lang.Object)",
            "org.apache.commons.lang3.builder.EqualsBuilder:void unregister(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang3.builder.HashCodeBuilder:void unregister(java.lang.Object)"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$EntrySet:boolean remove(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Coordinator:void removeListener(org.onlab.stc.StepProcessListener)",
            "org.onlab.graph.MutableAdjacencyListsGraph:void removeVertex(org.onlab.graph.Vertex)",
            "org.onlab.graph.MutableAdjacencyListsGraph:void removeEdge(org.onlab.graph.Edge)",
            "org.jboss.netty.util.DefaultObjectSizeEstimator:int estimateSize(java.lang.Class,java.util.Set)",
            "org.jboss.netty.util.HashedWheelTimer$HashedWheelTimeout:void cancel()",
            "org.jboss.netty.util.VirtualExecutorService$ChildExecutorRunnable:void run()",
            "org.apache.commons.lang.builder.HashCodeBuilder:void unregister(java.lang.Object)",
            "org.apache.commons.lang3.builder.EqualsBuilder:void unregister(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang3.builder.HashCodeBuilder:void unregister(java.lang.Object)"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$Values:boolean contains(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap:boolean contains(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$Segment:java.lang.Object readValueUnderLock(org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$HashEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$Segment:java.lang.Object get(java.lang.Object,int)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$Segment:boolean containsValue(java.lang.Object)"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$Segment:java.lang.Object replace(java.lang.Object,int,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap:java.lang.Object replace(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$Segment:java.lang.Object put(java.lang.Object,int,java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap:java.lang.Object put(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap:java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap:void purgeStaleEntries()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$HashIterator:void remove()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.MonitorWebSocketServlet$Pruner:void run()",
            "org.jboss.netty.channel.group.CombinedIterator:void remove()",
            "org.jboss.netty.channel.socket.nio.AbstractNioWorker:void process(java.nio.channels.Selector)",
            "org.jboss.netty.channel.socket.nio.NioClientBoss:void processSelectedKeys(java.util.Set)",
            "org.jboss.netty.channel.socket.nio.NioDatagramChannel:org.jboss.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress)",
            "org.jboss.netty.channel.socket.nio.NioServerBoss:void process(java.nio.channels.Selector)",
            "org.jboss.netty.handler.codec.http.HttpCodecUtil:void removeTransferEncodingChunked(org.jboss.netty.handler.codec.http.HttpMessage)",
            "org.jboss.netty.handler.codec.http.HttpHeaders:void removeTransferEncodingChunked(org.jboss.netty.handler.codec.http.HttpMessage)",
            "org.jboss.netty.util.HashedWheelTimer$Worker:void fetchExpiredTimeouts(java.util.List,org.jboss.netty.util.internal.ReusableIterator,long)",
            "org.apache.commons.lang3.exception.DefaultExceptionContext:org.apache.commons.lang3.exception.DefaultExceptionContext setContextValue(java.lang.String,java.lang.Object)"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$KeySet:boolean remove(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Coordinator:void removeListener(org.onlab.stc.StepProcessListener)",
            "org.onlab.graph.MutableAdjacencyListsGraph:void removeVertex(org.onlab.graph.Vertex)",
            "org.onlab.graph.MutableAdjacencyListsGraph:void removeEdge(org.onlab.graph.Edge)",
            "org.jboss.netty.util.DefaultObjectSizeEstimator:int estimateSize(java.lang.Class,java.util.Set)",
            "org.jboss.netty.util.HashedWheelTimer$HashedWheelTimeout:void cancel()",
            "org.jboss.netty.util.VirtualExecutorService$ChildExecutorRunnable:void run()",
            "org.apache.commons.lang.builder.HashCodeBuilder:void unregister(java.lang.Object)",
            "org.apache.commons.lang3.builder.EqualsBuilder:void unregister(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang3.builder.HashCodeBuilder:void unregister(java.lang.Object)"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$EntrySet:boolean remove(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Coordinator:void removeListener(org.onlab.stc.StepProcessListener)",
            "org.onlab.graph.MutableAdjacencyListsGraph:void removeVertex(org.onlab.graph.Vertex)",
            "org.onlab.graph.MutableAdjacencyListsGraph:void removeEdge(org.onlab.graph.Edge)",
            "org.jboss.netty.util.DefaultObjectSizeEstimator:int estimateSize(java.lang.Class,java.util.Set)",
            "org.jboss.netty.util.HashedWheelTimer$HashedWheelTimeout:void cancel()",
            "org.jboss.netty.util.VirtualExecutorService$ChildExecutorRunnable:void run()",
            "org.apache.commons.lang.builder.HashCodeBuilder:void unregister(java.lang.Object)",
            "org.apache.commons.lang3.builder.EqualsBuilder:void unregister(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang3.builder.HashCodeBuilder:void unregister(java.lang.Object)"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Values:boolean contains(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap:boolean contains(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:java.lang.Object readValueUnderLock(org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$HashEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:java.lang.Object get(java.lang.Object,int)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:boolean containsValue(java.lang.Object)"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap:void purgeStaleEntries()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.ArrayUtils:boolean contains(java.lang.Object[],java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.builder.CompareToBuilder:void reflectionAppend(java.lang.Object,java.lang.Object,java.lang.Class,org.apache.commons.lang.builder.CompareToBuilder,boolean,java.lang.String[])",
            "org.apache.commons.lang.builder.EqualsBuilder:void reflectionAppend(java.lang.Object,java.lang.Object,java.lang.Class,org.apache.commons.lang.builder.EqualsBuilder,boolean,java.lang.String[])",
            "org.apache.commons.lang.builder.HashCodeBuilder:void reflectionAppend(java.lang.Object,java.lang.Class,org.apache.commons.lang.builder.HashCodeBuilder,boolean,java.lang.String[])"
        ]
    },
    "org.apache.commons.lang.exception.ExceptionUtils:boolean isCauseMethodName(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.exception.ExceptionUtils:void addCauseMethodName(java.lang.String)"
        ]
    },
    "org.apache.commons.lang.builder.EqualsBuilder:boolean reflectionEquals(java.lang.Object,java.lang.Object,boolean,java.lang.Class,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.builder.EqualsBuilder:boolean reflectionEquals(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang.builder.EqualsBuilder:boolean reflectionEquals(java.lang.Object,java.lang.Object,java.lang.String[])",
            "org.apache.commons.lang.builder.EqualsBuilder:boolean reflectionEquals(java.lang.Object,java.lang.Object,boolean)",
            "org.apache.commons.lang.builder.EqualsBuilder:boolean reflectionEquals(java.lang.Object,java.lang.Object,boolean,java.lang.Class)"
        ]
    },
    "org.apache.commons.lang.text.ExtendedMessageFormat:boolean equals(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.ConcurrentHashMap$EntrySet:boolean contains(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$Segment:boolean keyEq(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$Segment:boolean containsValue(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$Segment:boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$Segment:java.lang.Object remove(java.lang.Object,int,java.lang.Object,boolean)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$SimpleEntry:boolean eq(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$EntrySet:boolean contains(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$Segment:boolean containsValue(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$Segment:boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$Segment:java.lang.Object remove(java.lang.Object,int,java.lang.Object,boolean)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$SimpleEntry:boolean eq(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$EntrySet:boolean contains(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$Segment:boolean containsValue(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$Segment:boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$Segment:java.lang.Object remove(java.lang.Object,int,java.lang.Object,boolean)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$SimpleEntry:boolean eq(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$EntrySet:boolean contains(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:boolean keyEq(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:boolean containsValue(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:java.lang.Object remove(java.lang.Object,int,java.lang.Object,boolean)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$SimpleEntry:boolean eq(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang.ArrayUtils:int indexOf(java.lang.Object[],java.lang.Object,int)",
            "org.apache.commons.lang.ArrayUtils:int lastIndexOf(java.lang.Object[],java.lang.Object,int)",
            "org.apache.commons.lang.builder.EqualsBuilder:org.apache.commons.lang.builder.EqualsBuilder append(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang.IntHashMap:boolean contains(java.lang.Object)",
            "org.apache.commons.lang.mutable.MutableObject:boolean equals(java.lang.Object)",
            "org.apache.commons.lang.ObjectUtils:boolean equals(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang.time.FastDateFormat$Pair:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.AnnotationUtils:boolean memberEquals(java.lang.Class,java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang3.ArrayUtils:int indexOf(java.lang.Object[],java.lang.Object,int)",
            "org.apache.commons.lang3.ArrayUtils:int lastIndexOf(java.lang.Object[],java.lang.Object,int)",
            "org.apache.commons.lang3.builder.DiffBuilder:void <init>(java.lang.Object,java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle)",
            "org.apache.commons.lang3.builder.EqualsBuilder:org.apache.commons.lang3.builder.EqualsBuilder append(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang3.mutable.MutableObject:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.ObjectUtils:boolean equals(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang3.Range:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "com.esotericsoftware.kryo.util.IdentityMap:boolean containsValue(java.lang.Object,boolean)",
            "com.esotericsoftware.kryo.util.IdentityMap:java.lang.Object findKey(java.lang.Object,boolean)",
            "com.esotericsoftware.kryo.util.IntMap:boolean containsValue(java.lang.Object,boolean)",
            "com.esotericsoftware.kryo.util.IntMap:int findKey(java.lang.Object,boolean,int)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object put_internal(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object getStash(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object getStash(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object remove(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object removeStash(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsValue(java.lang.Object,boolean)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsKey(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsKeyStash(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object findKey(java.lang.Object,boolean)"
        ]
    },
    "org.apache.commons.lang3.AnnotationUtils:boolean annotationArrayMemberEquals(java.lang.'annotation'.Annotation[],java.lang.'annotation'.Annotation[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.AnnotationUtils:boolean arrayMemberEquals(java.lang.Class,java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.commons.lang3.ArrayUtils:boolean contains(java.lang.Object[],java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.builder.CompareToBuilder:void reflectionAppend(java.lang.Object,java.lang.Object,java.lang.Class,org.apache.commons.lang3.builder.CompareToBuilder,boolean,java.lang.String[])",
            "org.apache.commons.lang3.builder.EqualsBuilder:void reflectionAppend(java.lang.Object,java.lang.Object,java.lang.Class,org.apache.commons.lang3.builder.EqualsBuilder,boolean,java.lang.String[])",
            "org.apache.commons.lang3.builder.HashCodeBuilder:void reflectionAppend(java.lang.Object,java.lang.Class,org.apache.commons.lang3.builder.HashCodeBuilder,boolean,java.lang.String[])"
        ]
    },
    "org.apache.commons.lang3.text.ExtendedMessageFormat:boolean equals(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.ConcurrentHashMap$EntrySet:boolean contains(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$Segment:boolean keyEq(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$Segment:boolean containsValue(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$Segment:boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$Segment:java.lang.Object remove(java.lang.Object,int,java.lang.Object,boolean)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$SimpleEntry:boolean eq(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$EntrySet:boolean contains(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$Segment:boolean containsValue(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$Segment:boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$Segment:java.lang.Object remove(java.lang.Object,int,java.lang.Object,boolean)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$SimpleEntry:boolean eq(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$EntrySet:boolean contains(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$Segment:boolean containsValue(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$Segment:boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$Segment:java.lang.Object remove(java.lang.Object,int,java.lang.Object,boolean)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$SimpleEntry:boolean eq(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$EntrySet:boolean contains(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:boolean keyEq(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:boolean containsValue(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:java.lang.Object remove(java.lang.Object,int,java.lang.Object,boolean)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$SimpleEntry:boolean eq(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang.ArrayUtils:int indexOf(java.lang.Object[],java.lang.Object,int)",
            "org.apache.commons.lang.ArrayUtils:int lastIndexOf(java.lang.Object[],java.lang.Object,int)",
            "org.apache.commons.lang.builder.EqualsBuilder:org.apache.commons.lang.builder.EqualsBuilder append(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang.IntHashMap:boolean contains(java.lang.Object)",
            "org.apache.commons.lang.mutable.MutableObject:boolean equals(java.lang.Object)",
            "org.apache.commons.lang.ObjectUtils:boolean equals(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang.time.FastDateFormat$Pair:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.AnnotationUtils:boolean memberEquals(java.lang.Class,java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang3.ArrayUtils:int indexOf(java.lang.Object[],java.lang.Object,int)",
            "org.apache.commons.lang3.ArrayUtils:int lastIndexOf(java.lang.Object[],java.lang.Object,int)",
            "org.apache.commons.lang3.builder.DiffBuilder:void <init>(java.lang.Object,java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle)",
            "org.apache.commons.lang3.builder.EqualsBuilder:org.apache.commons.lang3.builder.EqualsBuilder append(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang3.mutable.MutableObject:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.ObjectUtils:boolean equals(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang3.Range:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "com.esotericsoftware.kryo.util.IdentityMap:boolean containsValue(java.lang.Object,boolean)",
            "com.esotericsoftware.kryo.util.IdentityMap:java.lang.Object findKey(java.lang.Object,boolean)",
            "com.esotericsoftware.kryo.util.IntMap:boolean containsValue(java.lang.Object,boolean)",
            "com.esotericsoftware.kryo.util.IntMap:int findKey(java.lang.Object,boolean,int)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object put_internal(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object getStash(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object getStash(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object remove(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object removeStash(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsValue(java.lang.Object,boolean)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsKey(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsKeyStash(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object findKey(java.lang.Object,boolean)"
        ]
    },
    "org.apache.commons.lang3.reflect.TypeLiteral:boolean equals(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.reflect.TypeUtils:boolean equals(java.lang.reflect.GenericArrayType,java.lang.reflect.Type)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.reflect.TypeUtils:boolean equals(java.lang.reflect.Type,java.lang.reflect.Type)",
            "org.apache.commons.lang3.reflect.TypeUtils:boolean access$100(java.lang.reflect.GenericArrayType,java.lang.reflect.Type)"
        ]
    },
    "org.apache.commons.lang3.reflect.TypeUtils:boolean equals(java.lang.reflect.Type[],java.lang.reflect.Type[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.reflect.TypeUtils:boolean equals(java.lang.reflect.ParameterizedType,java.lang.reflect.Type)",
            "org.apache.commons.lang3.reflect.TypeUtils:boolean equals(java.lang.reflect.WildcardType,java.lang.reflect.Type)"
        ]
    },
    "org.apache.commons.lang.time.DurationFormatUtils:java.lang.String formatDurationHMS(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.time.StopWatch:java.lang.String toString()",
            "org.apache.commons.lang.time.StopWatch:java.lang.String toSplitString()"
        ]
    },
    "org.apache.commons.lang.time.DurationFormatUtils:java.lang.String formatDurationWords(long,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.time.DurationFormatUtils:java.lang.String formatDurationHMS(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.time.StopWatch:java.lang.String toString()",
            "org.apache.commons.lang3.time.StopWatch:java.lang.String toSplitString()"
        ]
    },
    "org.apache.commons.lang3.time.DurationFormatUtils:java.lang.String formatDurationWords(long,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.enum.ValuedEnum:void <init>(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.enums.ValuedEnum:void <init>(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.builder.ToStringStyle:void append(java.lang.StringBuffer,java.lang.String,java.lang.Object,java.lang.Boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.builder.ToStringBuilder:org.apache.commons.lang.builder.ToStringBuilder append(java.lang.Object)",
            "org.apache.commons.lang.builder.ToStringBuilder:org.apache.commons.lang.builder.ToStringBuilder append(java.lang.String,java.lang.Object)",
            "org.apache.commons.lang.builder.ToStringBuilder:org.apache.commons.lang.builder.ToStringBuilder append(java.lang.String,java.lang.Object,boolean)"
        ]
    },
    "org.apache.commons.lang.builder.ToStringStyle:void appendDetail(java.lang.StringBuffer,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.builder.ToStringStyle:void appendInternal(java.lang.StringBuffer,java.lang.String,java.lang.Object,boolean)",
            "org.apache.commons.lang.builder.ToStringStyle:void append(java.lang.StringBuffer,java.lang.String,java.lang.Object[],java.lang.Boolean)"
        ]
    },
    "org.apache.commons.lang.builder.ToStringStyle:void reflectionAppendArrayDetail(java.lang.StringBuffer,java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.builder.ReflectionToStringBuilder:org.apache.commons.lang.builder.ToStringBuilder reflectionAppendArray(java.lang.Object)"
        ]
    },
    "org.apache.commons.lang.builder.ToStringBuilder:void <init>(java.lang.Object,org.apache.commons.lang.builder.ToStringStyle,java.lang.StringBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.builder.ReflectionToStringBuilder:void <init>(java.lang.Object,org.apache.commons.lang.builder.ToStringStyle,java.lang.StringBuffer)",
            "org.apache.commons.lang.builder.ReflectionToStringBuilder:void <init>(java.lang.Object,org.apache.commons.lang.builder.ToStringStyle,java.lang.StringBuffer,java.lang.Class,boolean)",
            "org.apache.commons.lang.builder.ReflectionToStringBuilder:void <init>(java.lang.Object,org.apache.commons.lang.builder.ToStringStyle,java.lang.StringBuffer,java.lang.Class,boolean,boolean)",
            "org.apache.commons.lang.builder.ToStringBuilder:void <init>(java.lang.Object)",
            "org.apache.commons.lang.builder.ToStringBuilder:void <init>(java.lang.Object,org.apache.commons.lang.builder.ToStringStyle)"
        ]
    },
    "org.apache.commons.lang.reflect.ConstructorUtils:java.lang.Object invokeConstructor(java.lang.Class,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.reflect.MethodUtils:java.lang.Object invokeMethod(java.lang.Object,java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.reflect.MethodUtils:java.lang.Object invokeStaticMethod(java.lang.Class,java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.stc.Main:void startMonitorServer(org.onlab.stc.Monitor)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Main:void run()"
        ]
    },
    "org.apache.commons.lang.exception.ExceptionUtils:java.lang.String[] getRootCauseStackTrace(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.exception.ExceptionUtils:void printRootCauseStackTrace(java.lang.Throwable,java.io.PrintStream)",
            "org.apache.commons.lang.exception.ExceptionUtils:void printRootCauseStackTrace(java.lang.Throwable,java.io.PrintWriter)"
        ]
    },
    "org.apache.commons.lang3.exception.ExceptionUtils:java.lang.String[] getRootCauseStackTrace(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.exception.ExceptionUtils:void printRootCauseStackTrace(java.lang.Throwable,java.io.PrintStream)",
            "org.apache.commons.lang3.exception.ExceptionUtils:void printRootCauseStackTrace(java.lang.Throwable,java.io.PrintWriter)"
        ]
    },
    "com.esotericsoftware.kryo.Kryo:boolean writeReferenceOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeClassAndObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.Kryo:int readReferenceOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readClassAndObject(com.esotericsoftware.kryo.io.Input)"
        ]
    },
    "com.esotericsoftware.kryo.util.Util:void log(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeClassAndObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.Kryo:boolean writeReferenceOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,boolean)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readClassAndObject(com.esotericsoftware.kryo.io.Input)",
            "com.esotericsoftware.kryo.Kryo:int readReferenceOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class,boolean)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object copy(java.lang.Object)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object copy(java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object copyShallow(java.lang.Object)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object copyShallow(java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.util.DefaultClassResolver:com.esotericsoftware.kryo.Registration writeClass(com.esotericsoftware.kryo.io.Output,java.lang.Class)",
            "com.esotericsoftware.kryo.util.DefaultClassResolver:com.esotericsoftware.kryo.Registration readClass(com.esotericsoftware.kryo.io.Input)"
        ]
    },
    "com.esotericsoftware.kryo.Kryo:void reset()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:com.esotericsoftware.kryo.Registration writeClass(com.esotericsoftware.kryo.io.Output,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeClassAndObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.Kryo:com.esotericsoftware.kryo.Registration readClass(com.esotericsoftware.kryo.io.Input)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readClassAndObject(com.esotericsoftware.kryo.io.Input)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object copy(java.lang.Object)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object copy(java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object copyShallow(java.lang.Object)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object copyShallow(java.lang.Object,com.esotericsoftware.kryo.Serializer)"
        ]
    },
    "com.esotericsoftware.kryo.Kryo:void setRegistrationRequired(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.util.KryoNamespace:com.esotericsoftware.kryo.Kryo create()"
        ]
    },
    "com.esotericsoftware.kryo.Kryo:boolean setReferences(boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.Kryo:void setReferenceResolver(com.esotericsoftware.kryo.ReferenceResolver)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.Kryo:void pushGenericsScope(java.lang.Class,com.esotericsoftware.kryo.Generics)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.FieldSerializer:void rebuildCachedFields(boolean)",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.Registration:void setSerializer(com.esotericsoftware.kryo.Serializer)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:com.esotericsoftware.kryo.Registration register(java.lang.Class,com.esotericsoftware.kryo.Serializer)"
        ]
    },
    "com.esotericsoftware.kryo.io.InputChunked:void readChunkSize()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.InputChunked:int fill(byte[],int,int)",
            "com.esotericsoftware.kryo.io.InputChunked:void nextChunks()"
        ]
    },
    "com.esotericsoftware.kryo.io.InputChunked:void nextChunks()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.CompatibleFieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.io.OutputChunked:void writeChunkSize()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.OutputChunked:void flush()"
        ]
    },
    "com.esotericsoftware.kryo.io.OutputChunked:void endChunks()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.CompatibleFieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ObjectArraySerializer:void setGenerics(com.esotericsoftware.kryo.Kryo,java.lang.Class[])": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeClassAndObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readClassAndObject(com.esotericsoftware.kryo.io.Input)",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ObjectArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object[])",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ObjectArraySerializer:java.lang.Object[] read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.ObjectField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.ObjectField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.FieldSerializer:com.esotericsoftware.kryo.serializers.FieldSerializer$CachedField newCachedField(java.lang.reflect.Field,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.FieldSerializer:void createCachedFields(com.esotericsoftware.kryo.util.IntArray,java.util.List,java.util.List,int)",
            "com.esotericsoftware.kryo.serializers.FieldSerializerUnsafeUtilImpl:void createUnsafeCacheFieldsAndRegions(java.util.List,java.util.List,int,com.esotericsoftware.kryo.util.IntArray)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.FieldSerializer:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.FieldSerializer:void <init>(com.esotericsoftware.kryo.Kryo,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:void <init>(com.esotericsoftware.kryo.Kryo,java.lang.Class,java.lang.Class[])",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:void rebuildCachedFields(boolean)",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:com.esotericsoftware.kryo.serializers.FieldSerializer$CachedFieldFactory getAsmFieldFactory()",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:com.esotericsoftware.kryo.serializers.FieldSerializer$CachedFieldFactory getObjectFieldFactory()",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:com.esotericsoftware.kryo.serializers.FieldSerializer$CachedFieldFactory getUnsafeFieldFactory()",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:void setUseAsm(boolean)",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:void <clinit>()"
        ]
    },
    "com.esotericsoftware.kryo.serializers.FieldSerializerGenericsUtil:com.esotericsoftware.kryo.Generics buildGenericsScope(java.lang.Class,java.lang.Class[])": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.FieldSerializer:void rebuildCachedFields(boolean)",
            "com.esotericsoftware.kryo.serializers.FieldSerializerGenericsUtil:com.esotericsoftware.kryo.serializers.FieldSerializer$CachedField newCachedFieldOfGenericType(java.lang.reflect.Field,int,java.lang.Class[],java.lang.reflect.Type)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.FieldSerializerUnsafeUtilImpl:void createUnsafeCacheFieldsAndRegions(java.util.List,java.util.List,int,com.esotericsoftware.kryo.util.IntArray)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.FieldSerializer:void createCachedFields(com.esotericsoftware.kryo.util.IntArray,java.util.List,java.util.List,int)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.TaggedFieldSerializer:void initializeCachedFields()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.FieldSerializer:void rebuildCachedFields(boolean)",
            "com.esotericsoftware.kryo.serializers.TaggedFieldSerializer:void removeField(java.lang.String)",
            "com.esotericsoftware.kryo.serializers.TaggedFieldSerializer:void removeField(com.esotericsoftware.kryo.serializers.FieldSerializer$CachedField)"
        ]
    },
    "com.esotericsoftware.kryo.util.DefaultClassResolver:void writeName(com.esotericsoftware.kryo.io.Output,java.lang.Class,com.esotericsoftware.kryo.Registration)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.util.DefaultClassResolver:com.esotericsoftware.kryo.Registration writeClass(com.esotericsoftware.kryo.io.Output,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.util.UnsafeUtil:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.ByteBufferInput:void release()",
            "com.esotericsoftware.kryo.io.ByteBufferInput:void <init>(long,int)",
            "com.esotericsoftware.kryo.io.ByteBufferOutput:void <init>(long,int)",
            "com.esotericsoftware.kryo.io.ByteBufferOutput:void release()",
            "com.esotericsoftware.kryo.io.UnsafeInput:int readInt()",
            "com.esotericsoftware.kryo.io.UnsafeInput:float readFloat()",
            "com.esotericsoftware.kryo.io.UnsafeInput:short readShort()",
            "com.esotericsoftware.kryo.io.UnsafeInput:long readLong()",
            "com.esotericsoftware.kryo.io.UnsafeInput:double readDouble()",
            "com.esotericsoftware.kryo.io.UnsafeInput:char readChar()",
            "com.esotericsoftware.kryo.io.UnsafeInput:int[] readInts(int,boolean)",
            "com.esotericsoftware.kryo.io.UnsafeInput:long[] readLongs(int,boolean)",
            "com.esotericsoftware.kryo.io.UnsafeInput:int[] readInts(int)",
            "com.esotericsoftware.kryo.io.UnsafeInput:long[] readLongs(int)",
            "com.esotericsoftware.kryo.io.UnsafeInput:float[] readFloats(int)",
            "com.esotericsoftware.kryo.io.UnsafeInput:short[] readShorts(int)",
            "com.esotericsoftware.kryo.io.UnsafeInput:char[] readChars(int)",
            "com.esotericsoftware.kryo.io.UnsafeInput:double[] readDoubles(int)",
            "com.esotericsoftware.kryo.io.UnsafeInput:void readBytes(java.lang.Object,long,long,int)",
            "com.esotericsoftware.kryo.io.UnsafeMemoryInput:int readInt()",
            "com.esotericsoftware.kryo.io.UnsafeMemoryInput:float readFloat()",
            "com.esotericsoftware.kryo.io.UnsafeMemoryInput:short readShort()",
            "com.esotericsoftware.kryo.io.UnsafeMemoryInput:long readLong()",
            "com.esotericsoftware.kryo.io.UnsafeMemoryInput:char readChar()",
            "com.esotericsoftware.kryo.io.UnsafeMemoryInput:double readDouble()",
            "com.esotericsoftware.kryo.io.UnsafeMemoryInput:int[] readInts(int,boolean)",
            "com.esotericsoftware.kryo.io.UnsafeMemoryInput:long[] readLongs(int,boolean)",
            "com.esotericsoftware.kryo.io.UnsafeMemoryInput:float[] readFloats(int)",
            "com.esotericsoftware.kryo.io.UnsafeMemoryInput:short[] readShorts(int)",
            "com.esotericsoftware.kryo.io.UnsafeMemoryInput:char[] readChars(int)",
            "com.esotericsoftware.kryo.io.UnsafeMemoryInput:double[] readDoubles(int)",
            "com.esotericsoftware.kryo.io.UnsafeMemoryInput:void readBytes(java.lang.Object,long,long,int)",
            "com.esotericsoftware.kryo.io.UnsafeMemoryOutput:void writeInt(int)",
            "com.esotericsoftware.kryo.io.UnsafeMemoryOutput:void writeFloat(float)",
            "com.esotericsoftware.kryo.io.UnsafeMemoryOutput:void writeShort(int)",
            "com.esotericsoftware.kryo.io.UnsafeMemoryOutput:void writeLong(long)",
            "com.esotericsoftware.kryo.io.UnsafeMemoryOutput:void writeChar(char)",
            "com.esotericsoftware.kryo.io.UnsafeMemoryOutput:void writeDouble(double)",
            "com.esotericsoftware.kryo.io.UnsafeMemoryOutput:void writeInts(int[],boolean)",
            "com.esotericsoftware.kryo.io.UnsafeMemoryOutput:void writeLongs(long[],boolean)",
            "com.esotericsoftware.kryo.io.UnsafeMemoryOutput:void writeInts(int[])",
            "com.esotericsoftware.kryo.io.UnsafeMemoryOutput:void writeLongs(long[])",
            "com.esotericsoftware.kryo.io.UnsafeMemoryOutput:void writeFloats(float[])",
            "com.esotericsoftware.kryo.io.UnsafeMemoryOutput:void writeShorts(short[])",
            "com.esotericsoftware.kryo.io.UnsafeMemoryOutput:void writeChars(char[])",
            "com.esotericsoftware.kryo.io.UnsafeMemoryOutput:void writeDoubles(double[])",
            "com.esotericsoftware.kryo.io.UnsafeMemoryOutput:void writeBytes(java.lang.Object,long,long,long)",
            "com.esotericsoftware.kryo.io.UnsafeOutput:void writeInt(int)",
            "com.esotericsoftware.kryo.io.UnsafeOutput:void writeFloat(float)",
            "com.esotericsoftware.kryo.io.UnsafeOutput:void writeShort(int)",
            "com.esotericsoftware.kryo.io.UnsafeOutput:void writeLong(long)",
            "com.esotericsoftware.kryo.io.UnsafeOutput:void writeDouble(double)",
            "com.esotericsoftware.kryo.io.UnsafeOutput:void writeChar(char)",
            "com.esotericsoftware.kryo.io.UnsafeOutput:void writeInts(int[],boolean)",
            "com.esotericsoftware.kryo.io.UnsafeOutput:void writeLongs(long[],boolean)",
            "com.esotericsoftware.kryo.io.UnsafeOutput:void writeInts(int[])",
            "com.esotericsoftware.kryo.io.UnsafeOutput:void writeLongs(long[])",
            "com.esotericsoftware.kryo.io.UnsafeOutput:void writeFloats(float[])",
            "com.esotericsoftware.kryo.io.UnsafeOutput:void writeShorts(short[])",
            "com.esotericsoftware.kryo.io.UnsafeOutput:void writeChars(char[])",
            "com.esotericsoftware.kryo.io.UnsafeOutput:void writeDoubles(double[])",
            "com.esotericsoftware.kryo.io.UnsafeOutput:void writeBytes(java.lang.Object,long,long,long)",
            "com.esotericsoftware.kryo.serializers.FieldSerializerUnsafeUtilImpl:void createUnsafeCacheFieldsAndRegions(java.util.List,java.util.List,int,com.esotericsoftware.kryo.util.IntArray)",
            "com.esotericsoftware.kryo.serializers.FieldSerializerUnsafeUtilImpl:int fieldSizeOf(java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.FieldSerializerUnsafeUtilImpl:long getObjectFieldOffset(java.lang.reflect.Field)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeBooleanField:void <init>(java.lang.reflect.Field)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeBooleanField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeBooleanField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeBooleanField:void copy(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeByteField:void <init>(java.lang.reflect.Field)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeByteField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeByteField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeByteField:void copy(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeCharField:void <init>(java.lang.reflect.Field)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeCharField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeCharField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeCharField:void copy(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeDoubleField:void <init>(java.lang.reflect.Field)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeDoubleField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeDoubleField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeDoubleField:void copy(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeFloatField:void <init>(java.lang.reflect.Field)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeFloatField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeFloatField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeFloatField:void copy(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeIntField:void <init>(java.lang.reflect.Field)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeIntField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeIntField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeIntField:void copy(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeLongField:void <init>(java.lang.reflect.Field)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeLongField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeLongField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeLongField:void copy(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeObjectField:java.lang.Object getField(java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeObjectField:void setField(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeObjectField:void copy(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeRegionField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeRegionField:void readSlow(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeRegionField:void copy(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeShortField:void <init>(java.lang.reflect.Field)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeShortField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeShortField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeShortField:void copy(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeStringField:void <init>(java.lang.reflect.Field)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeStringField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeStringField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeStringField:void copy(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.FastestStreamFactory:void <clinit>()",
            "com.esotericsoftware.kryo.util.UnsafeUtil$1:int compare(java.lang.reflect.Field,java.lang.reflect.Field)",
            "com.esotericsoftware.kryo.util.UnsafeUtil:sun.misc.Unsafe unsafe()",
            "com.esotericsoftware.kryo.util.UnsafeUtil:java.lang.reflect.Field[] sortFieldsByOffset(java.util.List)",
            "com.esotericsoftware.kryo.util.UnsafeUtil:java.nio.ByteBuffer getDirectBufferAt(long,int)",
            "com.esotericsoftware.kryo.util.UnsafeUtil:void <clinit>()"
        ]
    },
    "org.apache.commons.lang.text.StrSubstitutor:java.lang.String replace(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.text.StrSubstitutor:java.lang.String replace(java.lang.String,int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.text.StrSubstitutor:java.lang.String replace(char[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.text.StrSubstitutor:java.lang.String replace(char[],int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.text.StrSubstitutor:java.lang.String replace(java.lang.StringBuffer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.text.StrSubstitutor:java.lang.String replace(java.lang.StringBuffer,int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.text.StrSubstitutor:java.lang.String replace(org.apache.commons.lang.text.StrBuilder)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.text.StrSubstitutor:java.lang.String replace(org.apache.commons.lang.text.StrBuilder,int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.text.StrSubstitutor:boolean replaceIn(java.lang.StringBuffer,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.text.StrSubstitutor:boolean replaceIn(java.lang.StringBuffer)"
        ]
    },
    "org.apache.commons.lang.text.StrSubstitutor:boolean replaceIn(org.apache.commons.lang.text.StrBuilder)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.text.StrSubstitutor:boolean replaceIn(org.apache.commons.lang.text.StrBuilder,int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.builder.ToStringBuilder:org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.ArrayUtils:java.lang.String toString(java.lang.Object,java.lang.String)"
        ]
    },
    "org.apache.commons.lang3.builder.ToStringBuilder:org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.AnnotationUtils:java.lang.String toString(java.lang.'annotation'.Annotation)",
            "org.apache.commons.lang3.builder.DiffResult:java.lang.String toString(org.apache.commons.lang3.builder.ToStringStyle)",
            "org.apache.commons.lang3.builder.ReflectionToStringBuilder:void appendFieldsIn(java.lang.Class)"
        ]
    },
    "org.apache.commons.lang3.builder.ToStringBuilder:org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.builder.ToStringStyle:void append(java.lang.StringBuffer,java.lang.String,java.lang.Object[],java.lang.Boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.builder.ToStringBuilder:org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.Object[])",
            "org.apache.commons.lang3.builder.ToStringBuilder:org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,java.lang.Object[])",
            "org.apache.commons.lang3.builder.ToStringBuilder:org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,java.lang.Object[],boolean)"
        ]
    },
    "org.apache.commons.lang3.builder.ReflectionToStringBuilder:org.apache.commons.lang3.builder.ReflectionToStringBuilder reflectionAppendArray(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.builder.ReflectionToStringBuilder:void appendFieldsIn(java.lang.Class)"
        ]
    },
    "org.apache.commons.lang3.builder.ReflectionToStringBuilder:void <init>(java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle,java.lang.StringBuffer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.builder.ReflectionToStringBuilder:void <init>(java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle,java.lang.StringBuffer,java.lang.Class,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.builder.ReflectionToStringBuilder:java.lang.String toString(java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle,boolean,boolean,java.lang.Class)"
        ]
    },
    "org.apache.commons.lang3.builder.ToStringBuilder:void <init>(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.builder.ReflectionToStringBuilder:void <init>(java.lang.Object)"
        ]
    },
    "org.apache.commons.lang3.builder.ToStringBuilder:void <init>(java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.AnnotationUtils:java.lang.String toString(java.lang.'annotation'.Annotation)",
            "org.apache.commons.lang3.ArrayUtils:java.lang.String toString(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang3.builder.DiffResult:java.lang.String toString(org.apache.commons.lang3.builder.ToStringStyle)",
            "org.apache.commons.lang3.builder.ReflectionToStringBuilder:void <init>(java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle)"
        ]
    },
    "org.apache.commons.lang.exception.NestableError:java.lang.String getMessage(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.exception.NestableDelegate:java.lang.String getMessage(int)",
            "org.apache.commons.lang.exception.NestableDelegate:java.lang.String[] getMessages()"
        ]
    },
    "org.apache.commons.lang.exception.NestableException:java.lang.String getMessage(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.exception.NestableDelegate:java.lang.String getMessage(int)",
            "org.apache.commons.lang.exception.NestableDelegate:java.lang.String[] getMessages()"
        ]
    },
    "org.apache.commons.lang.exception.NestableRuntimeException:java.lang.String getMessage(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.exception.NestableDelegate:java.lang.String getMessage(int)",
            "org.apache.commons.lang.exception.NestableDelegate:java.lang.String[] getMessages()"
        ]
    },
    "org.apache.commons.lang.NotImplementedException:java.lang.String getMessage(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.exception.NestableDelegate:java.lang.String getMessage(int)",
            "org.apache.commons.lang.exception.NestableDelegate:java.lang.String[] getMessages()"
        ]
    },
    "org.apache.commons.lang.exception.NestableError:java.lang.String[] getMessages()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.exception.NestableException:java.lang.String[] getMessages()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.exception.NestableRuntimeException:java.lang.String[] getMessages()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.NotImplementedException:java.lang.String[] getMessages()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.reflect.TypeUtils:boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.TypeVariable,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.reflect.TypeUtils:boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type,java.util.Map)",
            "org.apache.commons.lang3.reflect.TypeUtils:boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.TypeVariable,java.util.Map)"
        ]
    },
    "org.apache.commons.lang3.text.StrSubstitutor:java.lang.String replace(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.text.StrSubstitutor:java.lang.String replace(java.lang.String,int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.text.StrSubstitutor:java.lang.String replace(char[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.text.StrSubstitutor:java.lang.String replace(char[],int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.text.StrSubstitutor:java.lang.String replace(java.lang.StringBuffer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.text.StrSubstitutor:java.lang.String replace(java.lang.StringBuffer,int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.text.StrSubstitutor:java.lang.String replace(java.lang.CharSequence,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.text.StrSubstitutor:java.lang.String replace(java.lang.CharSequence)"
        ]
    },
    "org.apache.commons.lang3.text.StrSubstitutor:java.lang.String replace(org.apache.commons.lang3.text.StrBuilder)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.text.StrSubstitutor:java.lang.String replace(org.apache.commons.lang3.text.StrBuilder,int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.text.StrSubstitutor:boolean replaceIn(java.lang.StringBuffer,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.text.StrSubstitutor:boolean replaceIn(java.lang.StringBuffer)"
        ]
    },
    "org.apache.commons.lang3.text.StrSubstitutor:boolean replaceIn(java.lang.StringBuilder,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.text.StrSubstitutor:boolean replaceIn(java.lang.StringBuilder)"
        ]
    },
    "org.apache.commons.lang3.text.StrSubstitutor:boolean replaceIn(org.apache.commons.lang3.text.StrBuilder)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.text.StrSubstitutor:boolean replaceIn(org.apache.commons.lang3.text.StrBuilder,int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.time.FastDateFormat:void <init>(java.lang.String,java.util.TimeZone,java.util.Locale)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.time.FastDateFormat$1:org.apache.commons.lang3.time.FastDateFormat createInstance(java.lang.String,java.util.TimeZone,java.util.Locale)"
        ]
    },
    "org.apache.commons.lang.text.CompositeFormat:java.lang.Object parseObject(java.lang.String,java.text.ParsePosition)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.text.CompositeFormat:java.lang.Object parseObject(java.lang.String,java.text.ParsePosition)",
            "org.apache.commons.lang3.text.CompositeFormat:java.lang.Object parseObject(java.lang.String,java.text.ParsePosition)"
        ]
    },
    "org.apache.commons.lang3.text.CompositeFormat:java.lang.Object parseObject(java.lang.String,java.text.ParsePosition)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.text.CompositeFormat:java.lang.Object parseObject(java.lang.String,java.text.ParsePosition)",
            "org.apache.commons.lang3.text.CompositeFormat:java.lang.Object parseObject(java.lang.String,java.text.ParsePosition)"
        ]
    },
    "com.eclipsesource.json.JsonObject:com.eclipsesource.json.JsonObject readFrom(java.io.Reader)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.eclipsesource.json.JsonObject:com.eclipsesource.json.JsonObject readFrom(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.eclipsesource.json.JsonArray:com.eclipsesource.json.JsonArray readFrom(java.io.Reader)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.eclipsesource.json.JsonArray:com.eclipsesource.json.JsonArray readFrom(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.eclipsesource.json.JsonLiteral:boolean asBoolean()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$StringArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeClassAndObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.EnumSet)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$CollectionsSingletonListSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeClassAndObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.EnumSet)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.AbstractNioWorkerPool:void init()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.AbstractNioWorkerPool:void <init>(java.util.concurrent.Executor,int,boolean)",
            "org.jboss.netty.channel.socket.nio.NioWorkerPool:void <init>(java.util.concurrent.Executor,int,org.jboss.netty.util.ThreadNameDeterminer)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.AbstractNioBossPool:void <init>(java.util.concurrent.Executor,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.channel.socket.nio.NioClientBossPool:void <init>(java.util.concurrent.Executor,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.NioClientSocketChannelFactory:void <init>(java.util.concurrent.Executor,int,org.jboss.netty.channel.socket.nio.WorkerPool)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioClientSocketChannelFactory:void <init>(java.util.concurrent.Executor,int,org.jboss.netty.channel.socket.nio.WorkerPool,org.jboss.netty.util.Timer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.channel.socket.nio.NioServerBossPool:void <init>(java.util.concurrent.Executor,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.channel.socket.nio.NioServerSocketChannelFactory:void <init>(java.util.concurrent.Executor,int,org.jboss.netty.channel.socket.nio.WorkerPool)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.NioServerSocketChannelFactory:void <init>(java.util.concurrent.Executor,int,java.util.concurrent.Executor,int)",
            "org.jboss.netty.channel.socket.nio.NioServerSocketChannelFactory:void <init>(java.util.concurrent.Executor,org.jboss.netty.channel.socket.nio.WorkerPool)"
        ]
    },
    "org.onlab.graph.Heap:void <init>(java.util.List,java.util.Comparator)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.graph.DijkstraGraphSearch:org.onlab.graph.Heap createMinQueue(java.util.Set,java.util.Comparator)"
        ]
    },
    "org.onlab.graph.Heap:java.lang.Object extractExtreme()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.graph.DijkstraGraphSearch:org.onlab.graph.GraphPathSearch$Result search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)"
        ]
    },
    "org.apache.commons.lang.builder.CompareToBuilder:void reflectionAppend(java.lang.Object,java.lang.Object,java.lang.Class,org.apache.commons.lang.builder.CompareToBuilder,boolean,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.builder.CompareToBuilder:int reflectionCompare(java.lang.Object,java.lang.Object,boolean,java.lang.Class,java.lang.String[])"
        ]
    },
    "org.apache.commons.lang.builder.CompareToBuilder:org.apache.commons.lang.builder.CompareToBuilder append(java.lang.Object[],java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.builder.CompareToBuilder:void reflectionAppend(java.lang.Object,java.lang.Object,java.lang.Class,org.apache.commons.lang3.builder.CompareToBuilder,boolean,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.builder.CompareToBuilder:int reflectionCompare(java.lang.Object,java.lang.Object,boolean,java.lang.Class,java.lang.String[])"
        ]
    },
    "org.apache.commons.lang3.tuple.Pair:int compareTo(org.apache.commons.lang3.tuple.Pair)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.tuple.Pair:int compareTo(java.lang.Object)"
        ]
    },
    "org.apache.commons.lang3.tuple.Triple:int compareTo(org.apache.commons.lang3.tuple.Triple)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.tuple.Triple:int compareTo(java.lang.Object)"
        ]
    },
    "org.apache.commons.lang3.builder.CompareToBuilder:org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object[],java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.Range:org.apache.commons.lang3.Range is(java.lang.Comparable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.Range:org.apache.commons.lang3.Range is(java.lang.Object,java.util.Comparator)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.Range:org.apache.commons.lang3.Range between(java.lang.Comparable,java.lang.Comparable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.packet.LLDP:org.onlab.packet.LLDP lambda$deserializer$11(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.LLDP$lambda_deserializer_11__71:org.onlab.packet.IPacket deserialize(byte[],int,int)"
        ]
    },
    "org.onlab.packet.ONOSLLDP:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.packet.ONOSLLDP:void <init>(org.onlab.packet.LLDP)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.ONOSLLDP:org.onlab.packet.ONOSLLDP parseONOSLLDP(org.onlab.packet.Ethernet)"
        ]
    },
    "org.onlab.packet.Ip4Address:void <init>(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.Ip4Address:org.onlab.packet.Ip4Address valueOf(int)",
            "org.onlab.packet.Ip4Address:org.onlab.packet.Ip4Address valueOf(byte[])",
            "org.onlab.packet.Ip4Address:org.onlab.packet.Ip4Address valueOf(java.net.InetAddress)",
            "org.onlab.packet.Ip4Address:org.onlab.packet.Ip4Address makeMaskPrefix(int)"
        ]
    },
    "org.onlab.packet.Ip6Address:void <init>(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.Ip6Address:org.onlab.packet.Ip6Address valueOf(byte[])",
            "org.onlab.packet.Ip6Address:org.onlab.packet.Ip6Address valueOf(java.net.InetAddress)",
            "org.onlab.packet.Ip6Address:org.onlab.packet.Ip6Address makeMaskPrefix(int)"
        ]
    },
    "org.onlab.packet.IpAddress:org.onlab.packet.IpAddress valueOf(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.IpPrefix:org.onlab.packet.IpPrefix valueOf(int,int)",
            "org.onlab.packet.pim.PIMAddrGroup:org.onlab.packet.pim.PIMAddrGroup deserialize(java.nio.ByteBuffer)",
            "org.onlab.packet.pim.PIMAddrSource:org.onlab.packet.pim.PIMAddrSource deserialize(java.nio.ByteBuffer)",
            "org.onlab.packet.pim.PIMAddrUnicast:org.onlab.packet.pim.PIMAddrUnicast deserialize(java.nio.ByteBuffer)"
        ]
    },
    "org.onlab.packet.IpAddress:org.onlab.packet.IpAddress valueOf(org.onlab.packet.IpAddress$Version,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.IpAddress:org.onlab.packet.IpAddress valueOf(org.onlab.packet.IpAddress$Version,byte[],int)",
            "org.onlab.packet.IpAddress:org.onlab.packet.IpAddress makeMaskedAddress(org.onlab.packet.IpAddress,int)",
            "org.onlab.packet.IpPrefix:org.onlab.packet.IpPrefix valueOf(org.onlab.packet.IpAddress$Version,byte[],int)"
        ]
    },
    "org.onlab.packet.IpAddress:org.onlab.packet.IpAddress valueOf(java.net.InetAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.IpAddress:org.onlab.packet.IpAddress valueOf(java.lang.String)"
        ]
    },
    "org.onlab.packet.IpAddress:org.onlab.packet.IpAddress makeMaskPrefix(org.onlab.packet.IpAddress$Version,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.packet.IpAddress:org.onlab.packet.IpPrefix toIpPrefix()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.pim.PIMJoinPrune:org.onlab.packet.pim.PIMJoinPrune lambda$deserializer$31(byte[],int,int)"
        ]
    },
    "org.onlab.packet.IpAddress:void checkArguments(org.onlab.packet.IpAddress$Version,byte[],int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.Ip4Address:org.onlab.packet.Ip4Address valueOf(byte[],int)",
            "org.onlab.packet.Ip6Address:org.onlab.packet.Ip6Address valueOf(byte[],int)",
            "org.onlab.packet.IpAddress:void <init>(org.onlab.packet.IpAddress$Version,byte[])",
            "org.onlab.packet.IpAddress:org.onlab.packet.IpAddress valueOf(org.onlab.packet.IpAddress$Version,byte[],int)"
        ]
    },
    "org.onlab.packet.IpAddress:byte[] makeMaskPrefixArray(org.onlab.packet.IpAddress$Version,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.Ip4Address:org.onlab.packet.Ip4Address makeMaskPrefix(int)",
            "org.onlab.packet.Ip6Address:org.onlab.packet.Ip6Address makeMaskPrefix(int)",
            "org.onlab.packet.IpAddress:org.onlab.packet.IpAddress makeMaskPrefix(org.onlab.packet.IpAddress$Version,int)",
            "org.onlab.packet.IpAddress:byte[] makeMaskedAddressArray(org.onlab.packet.IpAddress,int)"
        ]
    },
    "org.onlab.packet.IpPrefix:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.IGMP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.pim.PIMHelloOption:java.lang.String toString()",
            "org.onlab.util.Tools:java.lang.String get(java.util.Dictionary,java.lang.String)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:java.lang.String toString(java.lang.Object)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdyHeaders:java.lang.String toString(java.lang.Object)",
            "org.jboss.netty.util.internal.StringUtil:java.lang.String stripControlCharacters(java.lang.Object)",
            "org.apache.commons.lang.builder.ReflectionToStringBuilder:java.lang.String[] toNoNullStringArray(java.lang.Object[])",
            "org.apache.commons.lang.mutable.MutableObject:java.lang.String toString()",
            "org.apache.commons.lang.ObjectUtils:java.lang.String toString(java.lang.Object)",
            "org.apache.commons.lang.ObjectUtils:java.lang.String toString(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.lang.Object[],char,int,int)",
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.lang.Object[],java.lang.String,int,int)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder append(java.lang.Object)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendFixedWidthPadLeft(java.lang.Object,int,char)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendFixedWidthPadRight(java.lang.Object,int,char)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder insert(int,java.lang.Object)",
            "org.apache.commons.lang.text.StrLookup$MapStrLookup:java.lang.String lookup(java.lang.String)",
            "org.apache.commons.lang.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Properties)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:java.lang.String toString()",
            "org.apache.commons.lang.time.DurationFormatUtils:java.lang.String format(org.apache.commons.lang.time.DurationFormatUtils$Token[],int,int,int,int,int,int,int,boolean)",
            "org.apache.commons.lang3.builder.ReflectionToStringBuilder:java.lang.String[] toNoNullStringArray(java.lang.Object[])",
            "org.apache.commons.lang3.exception.DefaultExceptionContext:java.lang.String getFormattedExceptionMessage(java.lang.String)",
            "org.apache.commons.lang3.mutable.MutableObject:java.lang.String toString()",
            "org.apache.commons.lang3.ObjectUtils:java.lang.String toString(java.lang.Object)",
            "org.apache.commons.lang3.ObjectUtils:java.lang.String toString(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder append(java.lang.Object)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadLeft(java.lang.Object,int,char)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadRight(java.lang.Object,int,char)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder insert(int,java.lang.Object)",
            "org.apache.commons.lang3.text.StrLookup$MapStrLookup:java.lang.String lookup(java.lang.String)",
            "org.apache.commons.lang3.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Properties)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:java.lang.String toString()",
            "org.apache.commons.lang3.time.DurationFormatUtils:java.lang.String format(org.apache.commons.lang3.time.DurationFormatUtils$Token[],long,long,long,long,long,long,long,boolean)"
        ]
    },
    "org.onlab.packet.pim.PIMHello:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.IGMP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.pim.PIMHelloOption:java.lang.String toString()",
            "org.onlab.util.Tools:java.lang.String get(java.util.Dictionary,java.lang.String)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:java.lang.String toString(java.lang.Object)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdyHeaders:java.lang.String toString(java.lang.Object)",
            "org.jboss.netty.util.internal.StringUtil:java.lang.String stripControlCharacters(java.lang.Object)",
            "org.apache.commons.lang.builder.ReflectionToStringBuilder:java.lang.String[] toNoNullStringArray(java.lang.Object[])",
            "org.apache.commons.lang.mutable.MutableObject:java.lang.String toString()",
            "org.apache.commons.lang.ObjectUtils:java.lang.String toString(java.lang.Object)",
            "org.apache.commons.lang.ObjectUtils:java.lang.String toString(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.lang.Object[],char,int,int)",
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.lang.Object[],java.lang.String,int,int)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder append(java.lang.Object)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendFixedWidthPadLeft(java.lang.Object,int,char)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendFixedWidthPadRight(java.lang.Object,int,char)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder insert(int,java.lang.Object)",
            "org.apache.commons.lang.text.StrLookup$MapStrLookup:java.lang.String lookup(java.lang.String)",
            "org.apache.commons.lang.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Properties)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:java.lang.String toString()",
            "org.apache.commons.lang.time.DurationFormatUtils:java.lang.String format(org.apache.commons.lang.time.DurationFormatUtils$Token[],int,int,int,int,int,int,int,boolean)",
            "org.apache.commons.lang3.builder.ReflectionToStringBuilder:java.lang.String[] toNoNullStringArray(java.lang.Object[])",
            "org.apache.commons.lang3.exception.DefaultExceptionContext:java.lang.String getFormattedExceptionMessage(java.lang.String)",
            "org.apache.commons.lang3.mutable.MutableObject:java.lang.String toString()",
            "org.apache.commons.lang3.ObjectUtils:java.lang.String toString(java.lang.Object)",
            "org.apache.commons.lang3.ObjectUtils:java.lang.String toString(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder append(java.lang.Object)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadLeft(java.lang.Object,int,char)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadRight(java.lang.Object,int,char)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder insert(int,java.lang.Object)",
            "org.apache.commons.lang3.text.StrLookup$MapStrLookup:java.lang.String lookup(java.lang.String)",
            "org.apache.commons.lang3.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Properties)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:java.lang.String toString()",
            "org.apache.commons.lang3.time.DurationFormatUtils:java.lang.String format(org.apache.commons.lang3.time.DurationFormatUtils$Token[],long,long,long,long,long,long,long,boolean)"
        ]
    },
    "org.onlab.packet.IpPrefix:void <init>(org.onlab.packet.IpAddress,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.Ip4Prefix:void <init>(org.onlab.packet.Ip4Address,int)",
            "org.onlab.packet.Ip6Prefix:void <init>(org.onlab.packet.Ip6Address,int)",
            "org.onlab.packet.IpPrefix:org.onlab.packet.IpPrefix valueOf(int,int)",
            "org.onlab.packet.IpPrefix:org.onlab.packet.IpPrefix valueOf(org.onlab.packet.IpAddress$Version,byte[],int)",
            "org.onlab.packet.IpPrefix:org.onlab.packet.IpPrefix valueOf(org.onlab.packet.IpAddress,int)",
            "org.onlab.packet.IpPrefix:org.onlab.packet.IpPrefix valueOf(java.lang.String)"
        ]
    },
    "org.jboss.netty.buffer.ChannelBuffers:org.jboss.netty.buffer.ChannelBuffer wrappedBuffer(boolean,org.jboss.netty.buffer.ChannelBuffer[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.buffer.ChannelBuffers:org.jboss.netty.buffer.ChannelBuffer wrappedBuffer(org.jboss.netty.buffer.ChannelBuffer[])",
            "org.jboss.netty.buffer.ChannelBuffers:org.jboss.netty.buffer.ChannelBuffer copiedBuffer(org.jboss.netty.buffer.ChannelBuffer[])",
            "org.jboss.netty.buffer.ChannelBuffers:org.jboss.netty.buffer.ChannelBuffer copiedBuffer(java.nio.ByteBuffer[])"
        ]
    },
    "org.jboss.netty.buffer.CompositeChannelBuffer:org.jboss.netty.buffer.ChannelBuffer slice(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.buffer.AbstractChannelBuffer:org.jboss.netty.buffer.ChannelBuffer readSlice(int)",
            "org.jboss.netty.buffer.AbstractChannelBuffer:org.jboss.netty.buffer.ChannelBuffer slice()",
            "org.jboss.netty.buffer.DirectChannelBufferFactory:org.jboss.netty.buffer.ChannelBuffer allocateBigEndianBuffer(int)",
            "org.jboss.netty.buffer.DirectChannelBufferFactory:org.jboss.netty.buffer.ChannelBuffer allocateLittleEndianBuffer(int)",
            "org.jboss.netty.buffer.DuplicatedChannelBuffer:org.jboss.netty.buffer.ChannelBuffer slice(int,int)",
            "org.jboss.netty.buffer.ReadOnlyChannelBuffer:org.jboss.netty.buffer.ChannelBuffer slice(int,int)",
            "org.jboss.netty.buffer.TruncatedChannelBuffer:org.jboss.netty.buffer.ChannelBuffer slice(int,int)",
            "org.jboss.netty.handler.codec.base64.Base64:org.jboss.netty.buffer.ChannelBuffer encode(org.jboss.netty.buffer.ChannelBuffer,int,int,boolean,org.jboss.netty.handler.codec.base64.Base64Dialect,org.jboss.netty.buffer.ChannelBufferFactory)",
            "org.jboss.netty.handler.codec.base64.Base64:org.jboss.netty.buffer.ChannelBuffer decode(org.jboss.netty.buffer.ChannelBuffer,int,int,org.jboss.netty.handler.codec.base64.Base64Dialect,org.jboss.netty.buffer.ChannelBufferFactory)",
            "org.jboss.netty.handler.codec.frame.DelimiterBasedFrameDecoder:void <init>(int,boolean,boolean,org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.frame.DelimiterBasedFrameDecoder:void <init>(int,boolean,boolean,org.jboss.netty.buffer.ChannelBuffer[])",
            "org.jboss.netty.handler.codec.http.HttpMessageEncoder:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)",
            "org.jboss.netty.handler.codec.http.multipart.AbstractMemoryHttpData:org.jboss.netty.buffer.ChannelBuffer getChunk(int)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void readFileUploadByteMultipartStandard(java.lang.String)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void readFileUploadByteMultipart(java.lang.String)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void loadFieldMultipartStandard(java.lang.String)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void loadFieldMultipart(java.lang.String)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder:org.jboss.netty.buffer.ChannelBuffer fillChannelBuffer()",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributesStandard()",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributes()",
            "org.jboss.netty.handler.codec.marshalling.MarshallingDecoder:org.jboss.netty.buffer.ChannelBuffer extractFrame(org.jboss.netty.buffer.ChannelBuffer,int,int)",
            "org.jboss.netty.handler.codec.replay.ReplayingDecoder:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.codec.replay.ReplayingDecoderBuffer:org.jboss.netty.buffer.ChannelBuffer slice(int,int)",
            "org.jboss.netty.handler.codec.serialization.ObjectDecoder:org.jboss.netty.buffer.ChannelBuffer extractFrame(org.jboss.netty.buffer.ChannelBuffer,int,int)",
            "org.jboss.netty.handler.codec.spdy.SpdyFrameDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)"
        ]
    },
    "org.jboss.netty.buffer.CompositeChannelBuffer:void discardReadBytes()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.serialization.CompatibleObjectEncoder:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)",
            "org.jboss.netty.handler.codec.spdy.SpdyHeaderBlockZlibDecoder:int decompress(org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame)"
        ]
    },
    "org.jboss.netty.handler.codec.compression.ZlibDecoder:void <init>(org.jboss.netty.handler.codec.compression.ZlibWrapper)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.compression.ZlibDecoder:void <init>()",
            "org.jboss.netty.handler.codec.http.HttpContentDecompressor:org.jboss.netty.handler.codec.embedder.DecoderEmbedder newContentDecoder(java.lang.String)"
        ]
    },
    "org.jboss.netty.handler.codec.compression.ZlibEncoder:void <init>(org.jboss.netty.handler.codec.compression.ZlibWrapper,int,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.compression.ZlibEncoder:void <init>(org.jboss.netty.handler.codec.compression.ZlibWrapper,int)",
            "org.jboss.netty.handler.codec.http.HttpContentCompressor:org.jboss.netty.handler.codec.embedder.EncoderEmbedder newContentEncoder(org.jboss.netty.handler.codec.http.HttpMessage,java.lang.String)"
        ]
    },
    "org.jboss.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBody()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void <init>(org.jboss.netty.handler.codec.http.multipart.HttpDataFactory,org.jboss.netty.handler.codec.http.HttpRequest,java.nio.charset.Charset)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void offer(org.jboss.netty.handler.codec.http.HttpChunk)"
        ]
    },
    "org.jboss.netty.handler.codec.serialization.CompatibleObjectDecoder:java.lang.Object decodeLast(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.serialization.CompatibleObjectDecoderState)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.serialization.CompatibleObjectDecoder:java.lang.Object decodeLast(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,java.lang.Enum)"
        ]
    },
    "org.jboss.netty.handler.codec.serialization.CompatibleObjectDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,java.lang.Enum)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.replay.ReplayingDecoder:java.lang.Object decodeLast(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,java.lang.Enum)",
            "org.jboss.netty.handler.codec.replay.ReplayingDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.replay.ReplayingDecoder:void callDecode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.buffer.ChannelBuffer,java.net.SocketAddress)"
        ]
    },
    "org.jboss.netty.logging.InternalLoggerFactory$1:boolean isEnabled(org.jboss.netty.logging.InternalLogLevel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.logging.LoggingHandler:void log(org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.logging.InternalLoggerFactory$1:boolean isEnabled(org.jboss.netty.logging.InternalLogLevel)"
        ]
    },
    "org.jboss.netty.logging.InternalLoggerFactory$1:void log(org.jboss.netty.logging.InternalLogLevel,java.lang.String,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.logging.LoggingHandler:void log(org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.logging.InternalLoggerFactory$1:void log(org.jboss.netty.logging.InternalLogLevel,java.lang.String,java.lang.Throwable)"
        ]
    },
    "org.jboss.netty.logging.InternalLoggerFactory$1:void log(org.jboss.netty.logging.InternalLogLevel,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.logging.LoggingHandler:void log(org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.logging.InternalLoggerFactory$1:void log(org.jboss.netty.logging.InternalLogLevel,java.lang.String)"
        ]
    },
    "org.jboss.netty.util.internal.jzlib.ZStream:int deflate(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.compression.ZlibEncoder:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)",
            "org.jboss.netty.handler.codec.compression.ZlibEncoder:org.jboss.netty.channel.ChannelFuture finishEncode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.codec.spdy.SpdyHeaderBlockJZlibEncoder:void encode(org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.util.internal.jzlib.Deflate:int deflateParams(org.jboss.netty.util.internal.jzlib.ZStream,int,int)"
        ]
    },
    "org.jboss.netty.util.internal.jzlib.Inflate:int inflateInit(org.jboss.netty.util.internal.jzlib.ZStream,int,org.jboss.netty.util.internal.jzlib.JZlib$WrapperType)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.jzlib.ZStream:int inflateInit(int,java.lang.Enum)"
        ]
    },
    "org.jboss.netty.util.internal.jzlib.Inflate:int inflateSync(org.jboss.netty.util.internal.jzlib.ZStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.jzlib.ZStream:int inflateSync()"
        ]
    },
    "org.jboss.netty.util.internal.jzlib.Deflate:void fill_window()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.jzlib.Deflate:int deflate_stored(int)",
            "org.jboss.netty.util.internal.jzlib.Deflate:int deflate_fast(int)",
            "org.jboss.netty.util.internal.jzlib.Deflate:int deflate_slow(int)"
        ]
    },
    "org.apache.commons.lang.text.ExtendedMessageFormat:int readArgumentIndex(java.lang.String,java.text.ParsePosition)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.text.ExtendedMessageFormat:void applyPattern(java.lang.String)",
            "org.apache.commons.lang.text.ExtendedMessageFormat:java.lang.String insertFormats(java.lang.String,java.util.ArrayList)"
        ]
    },
    "org.apache.commons.lang.text.ExtendedMessageFormat:java.lang.String parseFormatDescription(java.lang.String,java.text.ParsePosition)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.text.ExtendedMessageFormat:void applyPattern(java.lang.String)"
        ]
    },
    "org.apache.commons.lang.text.StrSubstitutor:void <init>(org.apache.commons.lang.text.StrLookup,java.lang.String,java.lang.String,char)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.text.StrSubstitutor:void <init>(java.util.Map,java.lang.String,java.lang.String)",
            "org.apache.commons.lang.text.StrSubstitutor:void <init>(java.util.Map,java.lang.String,java.lang.String,char)"
        ]
    },
    "org.apache.commons.lang.text.StrSubstitutor:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.text.StrSubstitutor:void <init>(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Map)"
        ]
    },
    "org.apache.commons.lang.text.StrSubstitutor:void <init>(org.apache.commons.lang.text.StrLookup)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.text.StrSubstitutor:java.lang.String replaceSystemProperties(java.lang.Object)"
        ]
    },
    "org.apache.commons.lang.text.StrBuilder$StrBuilderTokenizer:void <init>(org.apache.commons.lang.text.StrBuilder)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrTokenizer asTokenizer()"
        ]
    },
    "org.apache.commons.lang.text.StrTokenizer:void <init>(java.lang.String,char)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.text.StrTokenizer:void <init>(java.lang.String,char,char)"
        ]
    },
    "org.apache.commons.lang.text.StrTokenizer:void <init>(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.text.StrTokenizer:void <init>(java.lang.String,org.apache.commons.lang.text.StrMatcher)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.text.StrTokenizer:void <init>(java.lang.String,org.apache.commons.lang.text.StrMatcher,org.apache.commons.lang.text.StrMatcher)"
        ]
    },
    "org.apache.commons.lang.text.StrTokenizer:void <init>(char[],char)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.text.StrTokenizer:void <init>(char[],char,char)"
        ]
    },
    "org.apache.commons.lang.text.StrTokenizer:void <init>(char[],java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.text.StrTokenizer:void <init>(char[],org.apache.commons.lang.text.StrMatcher)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.text.StrTokenizer:void <init>(char[],org.apache.commons.lang.text.StrMatcher,org.apache.commons.lang.text.StrMatcher)"
        ]
    },
    "org.apache.commons.lang.text.StrTokenizer:void <init>(java.lang.String,char,char)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.text.StrTokenizer:void <init>(char[],char,char)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.text.StrTokenizer:org.apache.commons.lang.text.StrTokenizer getCSVInstance()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.text.StrTokenizer:org.apache.commons.lang.text.StrTokenizer getCSVInstance(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.text.StrTokenizer:org.apache.commons.lang.text.StrTokenizer getCSVInstance(char[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.text.StrTokenizer:org.apache.commons.lang.text.StrTokenizer getTSVInstance()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.text.StrTokenizer:org.apache.commons.lang.text.StrTokenizer getTSVInstance(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.text.StrTokenizer:org.apache.commons.lang.text.StrTokenizer getTSVInstance(char[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.text.StrTokenizer:void <init>(char[],char,char)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.text.StrTokenizer:void <init>(char[],org.apache.commons.lang3.text.StrMatcher,org.apache.commons.lang3.text.StrMatcher)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.reflect.TypeUtils$ParameterizedTypeImpl:boolean equals(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.ConcurrentHashMap$EntrySet:boolean contains(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$Segment:boolean keyEq(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$Segment:boolean containsValue(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$Segment:boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$Segment:java.lang.Object remove(java.lang.Object,int,java.lang.Object,boolean)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$SimpleEntry:boolean eq(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$EntrySet:boolean contains(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$Segment:boolean containsValue(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$Segment:boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$Segment:java.lang.Object remove(java.lang.Object,int,java.lang.Object,boolean)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$SimpleEntry:boolean eq(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$EntrySet:boolean contains(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$Segment:boolean containsValue(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$Segment:boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$Segment:java.lang.Object remove(java.lang.Object,int,java.lang.Object,boolean)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$SimpleEntry:boolean eq(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$EntrySet:boolean contains(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:boolean keyEq(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:boolean containsValue(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:java.lang.Object remove(java.lang.Object,int,java.lang.Object,boolean)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$SimpleEntry:boolean eq(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang.ArrayUtils:int indexOf(java.lang.Object[],java.lang.Object,int)",
            "org.apache.commons.lang.ArrayUtils:int lastIndexOf(java.lang.Object[],java.lang.Object,int)",
            "org.apache.commons.lang.builder.EqualsBuilder:org.apache.commons.lang.builder.EqualsBuilder append(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang.IntHashMap:boolean contains(java.lang.Object)",
            "org.apache.commons.lang.mutable.MutableObject:boolean equals(java.lang.Object)",
            "org.apache.commons.lang.ObjectUtils:boolean equals(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang.time.FastDateFormat$Pair:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.AnnotationUtils:boolean memberEquals(java.lang.Class,java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang3.ArrayUtils:int indexOf(java.lang.Object[],java.lang.Object,int)",
            "org.apache.commons.lang3.ArrayUtils:int lastIndexOf(java.lang.Object[],java.lang.Object,int)",
            "org.apache.commons.lang3.builder.DiffBuilder:void <init>(java.lang.Object,java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle)",
            "org.apache.commons.lang3.builder.EqualsBuilder:org.apache.commons.lang3.builder.EqualsBuilder append(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang3.mutable.MutableObject:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.ObjectUtils:boolean equals(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang3.Range:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.reflect.TypeUtils:boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.ParameterizedType,java.util.Map)",
            "org.apache.commons.lang3.reflect.TypeUtils:java.lang.reflect.Type unrollVariableAssignments(java.lang.reflect.TypeVariable,java.util.Map)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "com.esotericsoftware.kryo.util.IdentityMap:boolean containsValue(java.lang.Object,boolean)",
            "com.esotericsoftware.kryo.util.IdentityMap:java.lang.Object findKey(java.lang.Object,boolean)",
            "com.esotericsoftware.kryo.util.IntMap:boolean containsValue(java.lang.Object,boolean)",
            "com.esotericsoftware.kryo.util.IntMap:int findKey(java.lang.Object,boolean,int)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object put_internal(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object getStash(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object getStash(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object remove(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object removeStash(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsValue(java.lang.Object,boolean)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsKey(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsKeyStash(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object findKey(java.lang.Object,boolean)"
        ]
    },
    "org.apache.commons.lang3.reflect.TypeUtils$GenericArrayTypeImpl:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.IGMP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.pim.PIMHelloOption:java.lang.String toString()",
            "org.onlab.util.Tools:java.lang.String get(java.util.Dictionary,java.lang.String)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:java.lang.String toString(java.lang.Object)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdyHeaders:java.lang.String toString(java.lang.Object)",
            "org.jboss.netty.util.internal.StringUtil:java.lang.String stripControlCharacters(java.lang.Object)",
            "org.apache.commons.lang.builder.ReflectionToStringBuilder:java.lang.String[] toNoNullStringArray(java.lang.Object[])",
            "org.apache.commons.lang.mutable.MutableObject:java.lang.String toString()",
            "org.apache.commons.lang.ObjectUtils:java.lang.String toString(java.lang.Object)",
            "org.apache.commons.lang.ObjectUtils:java.lang.String toString(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.lang.Object[],char,int,int)",
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.lang.Object[],java.lang.String,int,int)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder append(java.lang.Object)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendFixedWidthPadLeft(java.lang.Object,int,char)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendFixedWidthPadRight(java.lang.Object,int,char)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder insert(int,java.lang.Object)",
            "org.apache.commons.lang.text.StrLookup$MapStrLookup:java.lang.String lookup(java.lang.String)",
            "org.apache.commons.lang.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Properties)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:java.lang.String toString()",
            "org.apache.commons.lang.time.DurationFormatUtils:java.lang.String format(org.apache.commons.lang.time.DurationFormatUtils$Token[],int,int,int,int,int,int,int,boolean)",
            "org.apache.commons.lang3.builder.ReflectionToStringBuilder:java.lang.String[] toNoNullStringArray(java.lang.Object[])",
            "org.apache.commons.lang3.exception.DefaultExceptionContext:java.lang.String getFormattedExceptionMessage(java.lang.String)",
            "org.apache.commons.lang3.mutable.MutableObject:java.lang.String toString()",
            "org.apache.commons.lang3.ObjectUtils:java.lang.String toString(java.lang.Object)",
            "org.apache.commons.lang3.ObjectUtils:java.lang.String toString(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang3.reflect.TypeUtils:java.lang.String parameterizedTypeToString(java.lang.reflect.ParameterizedType)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder append(java.lang.Object)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadLeft(java.lang.Object,int,char)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadRight(java.lang.Object,int,char)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder insert(int,java.lang.Object)",
            "org.apache.commons.lang3.text.StrLookup$MapStrLookup:java.lang.String lookup(java.lang.String)",
            "org.apache.commons.lang3.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Properties)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:java.lang.String toString()",
            "org.apache.commons.lang3.time.DurationFormatUtils:java.lang.String format(org.apache.commons.lang3.time.DurationFormatUtils$Token[],long,long,long,long,long,long,long,boolean)"
        ]
    },
    "org.apache.commons.lang3.reflect.TypeUtils$ParameterizedTypeImpl:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.IGMP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.pim.PIMHelloOption:java.lang.String toString()",
            "org.onlab.util.Tools:java.lang.String get(java.util.Dictionary,java.lang.String)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:java.lang.String toString(java.lang.Object)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdyHeaders:java.lang.String toString(java.lang.Object)",
            "org.jboss.netty.util.internal.StringUtil:java.lang.String stripControlCharacters(java.lang.Object)",
            "org.apache.commons.lang.builder.ReflectionToStringBuilder:java.lang.String[] toNoNullStringArray(java.lang.Object[])",
            "org.apache.commons.lang.mutable.MutableObject:java.lang.String toString()",
            "org.apache.commons.lang.ObjectUtils:java.lang.String toString(java.lang.Object)",
            "org.apache.commons.lang.ObjectUtils:java.lang.String toString(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.lang.Object[],char,int,int)",
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.lang.Object[],java.lang.String,int,int)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder append(java.lang.Object)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendFixedWidthPadLeft(java.lang.Object,int,char)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendFixedWidthPadRight(java.lang.Object,int,char)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder insert(int,java.lang.Object)",
            "org.apache.commons.lang.text.StrLookup$MapStrLookup:java.lang.String lookup(java.lang.String)",
            "org.apache.commons.lang.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Properties)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:java.lang.String toString()",
            "org.apache.commons.lang.time.DurationFormatUtils:java.lang.String format(org.apache.commons.lang.time.DurationFormatUtils$Token[],int,int,int,int,int,int,int,boolean)",
            "org.apache.commons.lang3.builder.ReflectionToStringBuilder:java.lang.String[] toNoNullStringArray(java.lang.Object[])",
            "org.apache.commons.lang3.exception.DefaultExceptionContext:java.lang.String getFormattedExceptionMessage(java.lang.String)",
            "org.apache.commons.lang3.mutable.MutableObject:java.lang.String toString()",
            "org.apache.commons.lang3.ObjectUtils:java.lang.String toString(java.lang.Object)",
            "org.apache.commons.lang3.ObjectUtils:java.lang.String toString(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang3.reflect.TypeUtils:java.lang.String parameterizedTypeToString(java.lang.reflect.ParameterizedType)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder append(java.lang.Object)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadLeft(java.lang.Object,int,char)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadRight(java.lang.Object,int,char)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder insert(int,java.lang.Object)",
            "org.apache.commons.lang3.text.StrLookup$MapStrLookup:java.lang.String lookup(java.lang.String)",
            "org.apache.commons.lang3.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Properties)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:java.lang.String toString()",
            "org.apache.commons.lang3.time.DurationFormatUtils:java.lang.String format(org.apache.commons.lang3.time.DurationFormatUtils$Token[],long,long,long,long,long,long,long,boolean)"
        ]
    },
    "org.apache.commons.lang3.reflect.TypeUtils$WildcardTypeImpl:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.IGMP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.pim.PIMHelloOption:java.lang.String toString()",
            "org.onlab.util.Tools:java.lang.String get(java.util.Dictionary,java.lang.String)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:java.lang.String toString(java.lang.Object)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdyHeaders:java.lang.String toString(java.lang.Object)",
            "org.jboss.netty.util.internal.StringUtil:java.lang.String stripControlCharacters(java.lang.Object)",
            "org.apache.commons.lang.builder.ReflectionToStringBuilder:java.lang.String[] toNoNullStringArray(java.lang.Object[])",
            "org.apache.commons.lang.mutable.MutableObject:java.lang.String toString()",
            "org.apache.commons.lang.ObjectUtils:java.lang.String toString(java.lang.Object)",
            "org.apache.commons.lang.ObjectUtils:java.lang.String toString(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.lang.Object[],char,int,int)",
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.lang.Object[],java.lang.String,int,int)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder append(java.lang.Object)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendFixedWidthPadLeft(java.lang.Object,int,char)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendFixedWidthPadRight(java.lang.Object,int,char)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder insert(int,java.lang.Object)",
            "org.apache.commons.lang.text.StrLookup$MapStrLookup:java.lang.String lookup(java.lang.String)",
            "org.apache.commons.lang.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Properties)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:java.lang.String toString()",
            "org.apache.commons.lang.time.DurationFormatUtils:java.lang.String format(org.apache.commons.lang.time.DurationFormatUtils$Token[],int,int,int,int,int,int,int,boolean)",
            "org.apache.commons.lang3.builder.ReflectionToStringBuilder:java.lang.String[] toNoNullStringArray(java.lang.Object[])",
            "org.apache.commons.lang3.exception.DefaultExceptionContext:java.lang.String getFormattedExceptionMessage(java.lang.String)",
            "org.apache.commons.lang3.mutable.MutableObject:java.lang.String toString()",
            "org.apache.commons.lang3.ObjectUtils:java.lang.String toString(java.lang.Object)",
            "org.apache.commons.lang3.ObjectUtils:java.lang.String toString(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang3.reflect.TypeUtils:java.lang.String parameterizedTypeToString(java.lang.reflect.ParameterizedType)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder append(java.lang.Object)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadLeft(java.lang.Object,int,char)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadRight(java.lang.Object,int,char)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder insert(int,java.lang.Object)",
            "org.apache.commons.lang3.text.StrLookup$MapStrLookup:java.lang.String lookup(java.lang.String)",
            "org.apache.commons.lang3.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Properties)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:java.lang.String toString()",
            "org.apache.commons.lang3.time.DurationFormatUtils:java.lang.String format(org.apache.commons.lang3.time.DurationFormatUtils$Token[],long,long,long,long,long,long,long,boolean)"
        ]
    },
    "org.apache.commons.lang3.reflect.TypeUtils:java.lang.String toLongString(java.lang.reflect.TypeVariable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.reflect.TypeLiteral:void <init>()"
        ]
    },
    "org.apache.commons.lang3.reflect.TypeUtils:java.lang.String genericArrayTypeToString(java.lang.reflect.GenericArrayType)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.reflect.TypeUtils:java.lang.String toString(java.lang.reflect.Type)"
        ]
    },
    "org.apache.commons.lang3.reflect.TypeUtils:java.lang.StringBuilder appendAllTo(java.lang.StringBuilder,java.lang.String,java.lang.reflect.Type[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.reflect.TypeUtils:java.lang.String classToString(java.lang.Class)",
            "org.apache.commons.lang3.reflect.TypeUtils:java.lang.String typeVariableToString(java.lang.reflect.TypeVariable)",
            "org.apache.commons.lang3.reflect.TypeUtils:java.lang.String parameterizedTypeToString(java.lang.reflect.ParameterizedType)",
            "org.apache.commons.lang3.reflect.TypeUtils:java.lang.String wildcardTypeToString(java.lang.reflect.WildcardType)"
        ]
    },
    "org.apache.commons.lang3.reflect.TypeUtils$WildcardTypeImpl:boolean equals(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.ConcurrentHashMap$EntrySet:boolean contains(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$Segment:boolean keyEq(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$Segment:boolean containsValue(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$Segment:boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$Segment:java.lang.Object remove(java.lang.Object,int,java.lang.Object,boolean)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$SimpleEntry:boolean eq(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$EntrySet:boolean contains(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$Segment:boolean containsValue(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$Segment:boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$Segment:java.lang.Object remove(java.lang.Object,int,java.lang.Object,boolean)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$SimpleEntry:boolean eq(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$EntrySet:boolean contains(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$Segment:boolean containsValue(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$Segment:boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$Segment:java.lang.Object remove(java.lang.Object,int,java.lang.Object,boolean)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$SimpleEntry:boolean eq(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$EntrySet:boolean contains(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:boolean keyEq(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:boolean containsValue(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:java.lang.Object remove(java.lang.Object,int,java.lang.Object,boolean)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$SimpleEntry:boolean eq(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang.ArrayUtils:int indexOf(java.lang.Object[],java.lang.Object,int)",
            "org.apache.commons.lang.ArrayUtils:int lastIndexOf(java.lang.Object[],java.lang.Object,int)",
            "org.apache.commons.lang.builder.EqualsBuilder:org.apache.commons.lang.builder.EqualsBuilder append(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang.IntHashMap:boolean contains(java.lang.Object)",
            "org.apache.commons.lang.mutable.MutableObject:boolean equals(java.lang.Object)",
            "org.apache.commons.lang.ObjectUtils:boolean equals(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang.time.FastDateFormat$Pair:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.AnnotationUtils:boolean memberEquals(java.lang.Class,java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang3.ArrayUtils:int indexOf(java.lang.Object[],java.lang.Object,int)",
            "org.apache.commons.lang3.ArrayUtils:int lastIndexOf(java.lang.Object[],java.lang.Object,int)",
            "org.apache.commons.lang3.builder.DiffBuilder:void <init>(java.lang.Object,java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle)",
            "org.apache.commons.lang3.builder.EqualsBuilder:org.apache.commons.lang3.builder.EqualsBuilder append(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang3.mutable.MutableObject:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.ObjectUtils:boolean equals(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang3.Range:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.reflect.TypeUtils:boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.ParameterizedType,java.util.Map)",
            "org.apache.commons.lang3.reflect.TypeUtils:java.lang.reflect.Type unrollVariableAssignments(java.lang.reflect.TypeVariable,java.util.Map)",
            "org.apache.commons.lang3.reflect.TypeUtils:boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.WildcardType,java.util.Map)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "com.esotericsoftware.kryo.util.IdentityMap:boolean containsValue(java.lang.Object,boolean)",
            "com.esotericsoftware.kryo.util.IdentityMap:java.lang.Object findKey(java.lang.Object,boolean)",
            "com.esotericsoftware.kryo.util.IntMap:boolean containsValue(java.lang.Object,boolean)",
            "com.esotericsoftware.kryo.util.IntMap:int findKey(java.lang.Object,boolean,int)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object put_internal(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object getStash(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object getStash(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object remove(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object removeStash(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsValue(java.lang.Object,boolean)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsKey(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsKeyStash(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object findKey(java.lang.Object,boolean)"
        ]
    },
    "org.apache.commons.lang3.text.ExtendedMessageFormat:int readArgumentIndex(java.lang.String,java.text.ParsePosition)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.text.ExtendedMessageFormat:void applyPattern(java.lang.String)",
            "org.apache.commons.lang3.text.ExtendedMessageFormat:java.lang.String insertFormats(java.lang.String,java.util.ArrayList)"
        ]
    },
    "org.apache.commons.lang3.text.ExtendedMessageFormat:java.lang.String parseFormatDescription(java.lang.String,java.text.ParsePosition)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.text.ExtendedMessageFormat:void applyPattern(java.lang.String)"
        ]
    },
    "org.apache.commons.lang3.text.StrSubstitutor:void <init>(org.apache.commons.lang3.text.StrLookup,java.lang.String,java.lang.String,char)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.text.StrSubstitutor:void <init>(java.util.Map,java.lang.String,java.lang.String)",
            "org.apache.commons.lang3.text.StrSubstitutor:void <init>(java.util.Map,java.lang.String,java.lang.String,char)"
        ]
    },
    "org.apache.commons.lang3.text.StrSubstitutor:void <init>(org.apache.commons.lang3.text.StrLookup,java.lang.String,java.lang.String,char,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.text.StrSubstitutor:void <init>(java.util.Map,java.lang.String,java.lang.String,char,java.lang.String)"
        ]
    },
    "org.apache.commons.lang3.text.StrSubstitutor:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.text.StrSubstitutor:void <init>(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Map)"
        ]
    },
    "org.apache.commons.lang3.text.StrSubstitutor:void <init>(org.apache.commons.lang3.text.StrLookup)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.text.StrSubstitutor:java.lang.String replaceSystemProperties(java.lang.Object)"
        ]
    },
    "org.apache.commons.lang3.text.StrSubstitutor:void <init>(org.apache.commons.lang3.text.StrLookup,org.apache.commons.lang3.text.StrMatcher,org.apache.commons.lang3.text.StrMatcher,char)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.text.StrSubstitutor:void <init>()",
            "org.apache.commons.lang3.text.StrSubstitutor:void <init>(java.util.Map)",
            "org.apache.commons.lang3.text.StrSubstitutor:void <init>(org.apache.commons.lang3.text.StrLookup)"
        ]
    },
    "org.apache.commons.lang3.text.StrBuilder$StrBuilderTokenizer:void <init>(org.apache.commons.lang3.text.StrBuilder)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrTokenizer asTokenizer()"
        ]
    },
    "org.apache.commons.lang3.text.StrTokenizer:void <init>(java.lang.String,char)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.text.StrTokenizer:void <init>(java.lang.String,char,char)"
        ]
    },
    "org.apache.commons.lang3.text.StrTokenizer:void <init>(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.text.StrTokenizer:void <init>(java.lang.String,org.apache.commons.lang3.text.StrMatcher)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.text.StrTokenizer:void <init>(java.lang.String,org.apache.commons.lang3.text.StrMatcher,org.apache.commons.lang3.text.StrMatcher)"
        ]
    },
    "org.apache.commons.lang3.text.StrTokenizer:void <init>(java.lang.String,char,char)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.text.StrTokenizer:org.apache.commons.lang3.text.StrTokenizer getCSVInstance()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.text.StrTokenizer:org.apache.commons.lang3.text.StrTokenizer getCSVInstance(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.text.StrTokenizer:org.apache.commons.lang3.text.StrTokenizer getTSVInstance()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.text.StrTokenizer:org.apache.commons.lang3.text.StrTokenizer getTSVInstance(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.stc.MonitorLayout$lambda_follow_25__35:boolean test(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.util.ExtendedSet:java.lang.Object lambda$conditionalRemove$19(java.util.function.Predicate,java.util.concurrent.atomic.AtomicBoolean,java.lang.Object,java.lang.Object)",
            "org.onlab.util.ExtendedSet:java.lang.Object lambda$insertOrReplace$18(java.util.function.Predicate,java.util.concurrent.atomic.AtomicBoolean,java.lang.Object,java.lang.Object,java.lang.Object)"
        ]
    },
    "org.onlab.stc.Monitor:void lambda$scenarioData$34(com.fasterxml.jackson.databind.node.ArrayNode,org.onlab.stc.Step)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.stc.Main:boolean lambda$printSummary$39(org.onlab.stc.Step)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Main$lambda_printSummary_39__26:boolean test(java.lang.Object)"
        ]
    },
    "org.onlab.stc.Main:boolean lambda$printSummary$38(org.onlab.stc.Step)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Main$lambda_printSummary_38__25:boolean test(java.lang.Object)"
        ]
    },
    "org.onlab.stc.Main:boolean lambda$printSummary$37(org.onlab.stc.Step)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Main$lambda_printSummary_37__24:boolean test(java.lang.Object)"
        ]
    },
    "org.onlab.graph.DijkstraGraphSearch$PathCostComparator:int compare(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.graph.Heap:void bubbleUp()",
            "org.onlab.graph.Heap:void heapify(int)",
            "org.apache.commons.lang.builder.CompareToBuilder:org.apache.commons.lang.builder.CompareToBuilder append(java.lang.Object,java.lang.Object,java.util.Comparator)",
            "org.apache.commons.lang3.builder.CompareToBuilder:org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object,java.util.Comparator)",
            "org.apache.commons.lang3.Range:void <init>(java.lang.Object,java.lang.Object,java.util.Comparator)",
            "org.apache.commons.lang3.Range:boolean contains(java.lang.Object)",
            "org.apache.commons.lang3.Range:boolean isAfter(java.lang.Object)",
            "org.apache.commons.lang3.Range:boolean isStartedBy(java.lang.Object)",
            "org.apache.commons.lang3.Range:boolean isEndedBy(java.lang.Object)",
            "org.apache.commons.lang3.Range:boolean isBefore(java.lang.Object)",
            "org.apache.commons.lang3.Range:org.apache.commons.lang3.Range intersectionWith(org.apache.commons.lang3.Range)"
        ]
    },
    "org.onlab.graph.SuurballeGraphSearch$lambda_search_16__54:double weight(org.onlab.graph.Edge)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.graph.AbstractGraphPathSearch$DefaultResult:boolean relaxEdge(org.onlab.graph.Edge,double,org.onlab.graph.EdgeWeight,boolean[])",
            "org.onlab.graph.BreadthFirstSearch:org.onlab.graph.GraphPathSearch$Result search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)",
            "org.onlab.graph.DepthFirstSearch:org.onlab.graph.DepthFirstSearch$SpanningTreeResult search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)",
            "org.onlab.graph.KShortestPathsSearch$InnerEdgeWeighter:double weight(org.onlab.graph.Edge)",
            "org.onlab.graph.KShortestPathsSearch:java.lang.Double calculatePathCost(org.onlab.graph.EdgeWeight,java.util.List)",
            "org.onlab.graph.SrlgGraphSearch$2:double weight(org.onlab.graph.Edge)",
            "org.onlab.graph.SuurballeGraphSearch:double lambda$search$16(org.onlab.graph.EdgeWeight,org.onlab.graph.AbstractGraphPathSearch$DefaultResult,org.onlab.graph.Edge)",
            "org.onlab.graph.SuurballeGraphSearch:double lambda$search$15(org.onlab.graph.EdgeWeight,org.onlab.graph.AbstractGraphPathSearch$DefaultResult,org.onlab.graph.Edge)",
            "org.onlab.graph.TarjanGraphSearch:org.onlab.graph.TarjanGraphSearch$VertexData connect(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,org.onlab.graph.TarjanGraphSearch$SccResult)"
        ]
    },
    "org.onlab.graph.SuurballeGraphSearch$lambda_search_15__53:double weight(org.onlab.graph.Edge)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.graph.AbstractGraphPathSearch$DefaultResult:boolean relaxEdge(org.onlab.graph.Edge,double,org.onlab.graph.EdgeWeight,boolean[])",
            "org.onlab.graph.BreadthFirstSearch:org.onlab.graph.GraphPathSearch$Result search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)",
            "org.onlab.graph.DepthFirstSearch:org.onlab.graph.DepthFirstSearch$SpanningTreeResult search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)",
            "org.onlab.graph.KShortestPathsSearch$InnerEdgeWeighter:double weight(org.onlab.graph.Edge)",
            "org.onlab.graph.KShortestPathsSearch:java.lang.Double calculatePathCost(org.onlab.graph.EdgeWeight,java.util.List)",
            "org.onlab.graph.SrlgGraphSearch$2:double weight(org.onlab.graph.Edge)",
            "org.onlab.graph.SuurballeGraphSearch:double lambda$search$16(org.onlab.graph.EdgeWeight,org.onlab.graph.AbstractGraphPathSearch$DefaultResult,org.onlab.graph.Edge)",
            "org.onlab.graph.SuurballeGraphSearch:double lambda$search$15(org.onlab.graph.EdgeWeight,org.onlab.graph.AbstractGraphPathSearch$DefaultResult,org.onlab.graph.Edge)",
            "org.onlab.graph.TarjanGraphSearch:org.onlab.graph.TarjanGraphSearch$VertexData connect(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,org.onlab.graph.TarjanGraphSearch$SccResult)"
        ]
    },
    "org.jboss.netty.handler.codec.http.QueryStringDecoder:java.util.Map getParameters()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void parseBody()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void <init>(org.jboss.netty.handler.codec.http.multipart.HttpDataFactory,org.jboss.netty.handler.codec.http.HttpRequest,java.nio.charset.Charset)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void offer(org.jboss.netty.handler.codec.http.HttpChunk)"
        ]
    },
    "org.jboss.netty.buffer.ChannelBuffers:org.jboss.netty.buffer.ChannelBuffer copiedBuffer(java.nio.ByteOrder,java.nio.CharBuffer,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.buffer.ChannelBuffers:org.jboss.netty.buffer.ChannelBuffer copiedBuffer(java.nio.ByteOrder,java.lang.CharSequence,java.nio.charset.Charset)",
            "org.jboss.netty.buffer.ChannelBuffers:org.jboss.netty.buffer.ChannelBuffer copiedBuffer(java.nio.ByteOrder,java.lang.CharSequence,int,int,java.nio.charset.Charset)",
            "org.jboss.netty.buffer.ChannelBuffers:org.jboss.netty.buffer.ChannelBuffer copiedBuffer(java.nio.ByteOrder,char[],int,int,java.nio.charset.Charset)"
        ]
    },
    "org.jboss.netty.handler.codec.socks.SocksAuthRequest:void <init>(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.socks.SocksAuthRequestDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.socks.SocksAuthRequestDecoder$State)"
        ]
    },
    "org.jboss.netty.handler.codec.socks.SocksAuthRequest:void encodeAsByteBuf(org.jboss.netty.buffer.ChannelBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.socks.SocksMessageEncoder:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)"
        ]
    },
    "org.jboss.netty.buffer.AbstractChannelBuffer:java.lang.String toString(int,int,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.buffer.AbstractChannelBuffer:java.lang.String toString(java.nio.charset.Charset)",
            "org.jboss.netty.buffer.AbstractChannelBuffer:java.lang.String toString(int,int,java.lang.String)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributesStandard()",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributes()",
            "org.jboss.netty.handler.codec.replay.ReplayingDecoderBuffer:java.lang.String toString(int,int,java.nio.charset.Charset)"
        ]
    },
    "org.apache.commons.lang.Entities:void escape(java.io.Writer,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.Entities:java.lang.String escape(java.lang.String)",
            "org.apache.commons.lang.StringEscapeUtils:void escapeHtml(java.io.Writer,java.lang.String)",
            "org.apache.commons.lang.StringEscapeUtils:void escapeXml(java.io.Writer,java.lang.String)"
        ]
    },
    "org.apache.commons.lang.Entities:void doUnescape(java.io.Writer,java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.Entities:java.lang.String unescape(java.lang.String)",
            "org.apache.commons.lang.Entities:void unescape(java.io.Writer,java.lang.String)"
        ]
    },
    "org.apache.commons.lang.enum.EnumUtils:java.util.Map getEnumMap(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.enum.Enum:java.util.Iterator iterator(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.enum.EnumUtils:java.util.List getEnumList(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.enum.EnumUtils:java.util.Iterator iterator(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.enums.EnumUtils:java.util.Map getEnumMap(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.enums.Enum:java.util.Iterator iterator(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.enums.EnumUtils:java.util.List getEnumList(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.enums.EnumUtils:java.util.Iterator iterator(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.time.DateFormatUtils:java.lang.String formatUTC(long,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.time.DateFormatUtils:java.lang.String formatUTC(java.util.Date,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.time.DateFormatUtils:java.lang.String formatUTC(long,java.lang.String,java.util.Locale)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.time.DateFormatUtils:java.lang.String formatUTC(java.util.Date,java.lang.String,java.util.Locale)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.time.DateFormatUtils:java.lang.String format(long,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.time.DateFormatUtils:java.lang.String format(java.util.Date,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.time.DateFormatUtils:java.lang.String format(long,java.lang.String,java.util.TimeZone)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.time.DateFormatUtils:java.lang.String format(java.util.Date,java.lang.String,java.util.TimeZone)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.time.DateFormatUtils:java.lang.String format(long,java.lang.String,java.util.Locale)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.time.DateFormatUtils:java.lang.String format(java.util.Date,java.lang.String,java.util.Locale)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.time.DateFormatUtils:java.lang.String format(long,java.lang.String,java.util.TimeZone,java.util.Locale)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.time.DateFormatUtils:java.lang.String format(java.util.Calendar,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.time.DateFormatUtils:java.lang.String format(java.util.Calendar,java.lang.String,java.util.TimeZone)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.time.DateFormatUtils:java.lang.String format(java.util.Calendar,java.lang.String,java.util.Locale)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.time.DateFormatUtils:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.time.DateFormatUtils:java.lang.String formatUTC(long,java.lang.String)",
            "org.apache.commons.lang.time.DateFormatUtils:java.lang.String formatUTC(java.util.Date,java.lang.String)",
            "org.apache.commons.lang.time.DateFormatUtils:java.lang.String formatUTC(long,java.lang.String,java.util.Locale)",
            "org.apache.commons.lang.time.DateFormatUtils:java.lang.String formatUTC(java.util.Date,java.lang.String,java.util.Locale)",
            "org.apache.commons.lang.time.DateFormatUtils:java.lang.String format(long,java.lang.String)",
            "org.apache.commons.lang.time.DateFormatUtils:java.lang.String format(java.util.Date,java.lang.String)",
            "org.apache.commons.lang.time.DateFormatUtils:java.lang.String format(java.util.Calendar,java.lang.String)",
            "org.apache.commons.lang.time.DateFormatUtils:java.lang.String format(long,java.lang.String,java.util.TimeZone)",
            "org.apache.commons.lang.time.DateFormatUtils:java.lang.String format(java.util.Date,java.lang.String,java.util.TimeZone)",
            "org.apache.commons.lang.time.DateFormatUtils:java.lang.String format(java.util.Calendar,java.lang.String,java.util.TimeZone)",
            "org.apache.commons.lang.time.DateFormatUtils:java.lang.String format(long,java.lang.String,java.util.Locale)",
            "org.apache.commons.lang.time.DateFormatUtils:java.lang.String format(java.util.Date,java.lang.String,java.util.Locale)",
            "org.apache.commons.lang.time.DateFormatUtils:java.lang.String format(java.util.Calendar,java.lang.String,java.util.Locale)",
            "org.apache.commons.lang.time.DateFormatUtils:java.lang.String format(long,java.lang.String,java.util.TimeZone,java.util.Locale)",
            "org.apache.commons.lang.time.DateFormatUtils:void <clinit>()"
        ]
    },
    "org.apache.commons.lang.time.FastDateFormat:java.util.List parsePattern()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.time.FastDateFormat:void init()"
        ]
    },
    "org.apache.commons.lang.time.FastDateFormat:java.lang.StringBuffer applyRules(java.util.Calendar,java.lang.StringBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.time.FastDateFormat:java.lang.String format(java.util.Date)",
            "org.apache.commons.lang.time.FastDateFormat:java.lang.StringBuffer format(java.util.Date,java.lang.StringBuffer)",
            "org.apache.commons.lang.time.FastDateFormat:java.lang.StringBuffer format(java.util.Calendar,java.lang.StringBuffer)"
        ]
    },
    "org.apache.commons.lang3.builder.DiffBuilder:org.apache.commons.lang3.builder.DiffBuilder append(java.lang.String,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.builder.DiffBuilder:org.apache.commons.lang3.builder.DiffBuilder append(java.lang.String,float[],float[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.builder.DiffBuilder:org.apache.commons.lang3.builder.DiffBuilder append(java.lang.String,java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.commons.lang3.builder.DiffBuilder:org.apache.commons.lang3.builder.DiffBuilder append(java.lang.String,int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.builder.DiffBuilder:org.apache.commons.lang3.builder.DiffBuilder append(java.lang.String,int[],int[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.builder.DiffBuilder:org.apache.commons.lang3.builder.DiffBuilder append(java.lang.String,java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.commons.lang3.builder.DiffBuilder:org.apache.commons.lang3.builder.DiffBuilder append(java.lang.String,long,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.builder.DiffBuilder:org.apache.commons.lang3.builder.DiffBuilder append(java.lang.String,long[],long[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.builder.DiffBuilder:org.apache.commons.lang3.builder.DiffBuilder append(java.lang.String,java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.commons.lang3.builder.DiffBuilder:org.apache.commons.lang3.builder.DiffBuilder append(java.lang.String,short,short)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.builder.DiffBuilder:org.apache.commons.lang3.builder.DiffBuilder append(java.lang.String,short[],short[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.builder.DiffBuilder:org.apache.commons.lang3.builder.DiffBuilder append(java.lang.String,java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.commons.lang3.builder.DiffBuilder:org.apache.commons.lang3.builder.DiffBuilder append(java.lang.String,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.builder.DiffBuilder:org.apache.commons.lang3.builder.DiffBuilder append(java.lang.String,java.lang.Object[],java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.builder.DiffBuilder:org.apache.commons.lang3.builder.DiffBuilder append(java.lang.String,java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.commons.lang3.builder.DiffBuilder:org.apache.commons.lang3.builder.DiffBuilder append(java.lang.String,boolean[],boolean[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.builder.DiffBuilder:org.apache.commons.lang3.builder.DiffBuilder append(java.lang.String,java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.commons.lang3.builder.DiffBuilder:org.apache.commons.lang3.builder.DiffBuilder append(java.lang.String,byte,byte)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.builder.DiffBuilder:org.apache.commons.lang3.builder.DiffBuilder append(java.lang.String,byte[],byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.builder.DiffBuilder:org.apache.commons.lang3.builder.DiffBuilder append(java.lang.String,java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.commons.lang3.builder.DiffBuilder:org.apache.commons.lang3.builder.DiffBuilder append(java.lang.String,char,char)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.builder.DiffBuilder:org.apache.commons.lang3.builder.DiffBuilder append(java.lang.String,char[],char[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.builder.DiffBuilder:org.apache.commons.lang3.builder.DiffBuilder append(java.lang.String,java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.commons.lang3.builder.DiffBuilder:org.apache.commons.lang3.builder.DiffBuilder append(java.lang.String,double,double)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.builder.DiffBuilder:org.apache.commons.lang3.builder.DiffBuilder append(java.lang.String,double[],double[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.builder.DiffBuilder:org.apache.commons.lang3.builder.DiffBuilder append(java.lang.String,java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.commons.lang3.builder.DiffBuilder:org.apache.commons.lang3.builder.DiffBuilder append(java.lang.String,float,float)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.time.FastDatePrinter:java.util.List parsePattern()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.time.FastDatePrinter:void init()"
        ]
    },
    "org.apache.commons.lang3.time.FastDatePrinter:java.lang.StringBuffer applyRules(java.util.Calendar,java.lang.StringBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.time.FastDateFormat:java.lang.StringBuffer applyRules(java.util.Calendar,java.lang.StringBuffer)",
            "org.apache.commons.lang3.time.FastDatePrinter:java.lang.String applyRulesToString(java.util.Calendar)",
            "org.apache.commons.lang3.time.FastDatePrinter:java.lang.StringBuffer format(java.util.Date,java.lang.StringBuffer)",
            "org.apache.commons.lang3.time.FastDatePrinter:java.lang.StringBuffer format(java.util.Calendar,java.lang.StringBuffer)"
        ]
    },
    "org.apache.commons.lang3.time.DateFormatUtils:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.time.DateFormatUtils:java.lang.String formatUTC(long,java.lang.String)",
            "org.apache.commons.lang3.time.DateFormatUtils:java.lang.String formatUTC(java.util.Date,java.lang.String)",
            "org.apache.commons.lang3.time.DateFormatUtils:java.lang.String formatUTC(long,java.lang.String,java.util.Locale)",
            "org.apache.commons.lang3.time.DateFormatUtils:java.lang.String formatUTC(java.util.Date,java.lang.String,java.util.Locale)",
            "org.apache.commons.lang3.time.DateFormatUtils:java.lang.String format(long,java.lang.String)",
            "org.apache.commons.lang3.time.DateFormatUtils:java.lang.String format(java.util.Date,java.lang.String)",
            "org.apache.commons.lang3.time.DateFormatUtils:java.lang.String format(java.util.Calendar,java.lang.String)",
            "org.apache.commons.lang3.time.DateFormatUtils:java.lang.String format(long,java.lang.String,java.util.TimeZone)",
            "org.apache.commons.lang3.time.DateFormatUtils:java.lang.String format(java.util.Date,java.lang.String,java.util.TimeZone)",
            "org.apache.commons.lang3.time.DateFormatUtils:java.lang.String format(java.util.Calendar,java.lang.String,java.util.TimeZone)",
            "org.apache.commons.lang3.time.DateFormatUtils:java.lang.String format(long,java.lang.String,java.util.Locale)",
            "org.apache.commons.lang3.time.DateFormatUtils:java.lang.String format(java.util.Date,java.lang.String,java.util.Locale)",
            "org.apache.commons.lang3.time.DateFormatUtils:java.lang.String format(java.util.Calendar,java.lang.String,java.util.Locale)",
            "org.apache.commons.lang3.time.DateFormatUtils:java.lang.String format(long,java.lang.String,java.util.TimeZone,java.util.Locale)",
            "org.apache.commons.lang3.time.DateFormatUtils:void <clinit>()"
        ]
    },
    "org.apache.commons.lang3.time.DateFormatUtils:java.lang.String format(java.util.Date,java.lang.String,java.util.TimeZone,java.util.Locale)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.time.DateFormatUtils:java.lang.String formatUTC(long,java.lang.String)",
            "org.apache.commons.lang3.time.DateFormatUtils:java.lang.String formatUTC(java.util.Date,java.lang.String)",
            "org.apache.commons.lang3.time.DateFormatUtils:java.lang.String formatUTC(long,java.lang.String,java.util.Locale)",
            "org.apache.commons.lang3.time.DateFormatUtils:java.lang.String formatUTC(java.util.Date,java.lang.String,java.util.Locale)",
            "org.apache.commons.lang3.time.DateFormatUtils:java.lang.String format(long,java.lang.String)",
            "org.apache.commons.lang3.time.DateFormatUtils:java.lang.String format(java.util.Date,java.lang.String)",
            "org.apache.commons.lang3.time.DateFormatUtils:java.lang.String format(long,java.lang.String,java.util.TimeZone)",
            "org.apache.commons.lang3.time.DateFormatUtils:java.lang.String format(java.util.Date,java.lang.String,java.util.TimeZone)",
            "org.apache.commons.lang3.time.DateFormatUtils:java.lang.String format(long,java.lang.String,java.util.Locale)",
            "org.apache.commons.lang3.time.DateFormatUtils:java.lang.String format(java.util.Date,java.lang.String,java.util.Locale)",
            "org.apache.commons.lang3.time.DateFormatUtils:java.lang.String format(long,java.lang.String,java.util.TimeZone,java.util.Locale)"
        ]
    },
    "org.apache.commons.lang3.time.DateFormatUtils:java.lang.String format(java.util.Calendar,java.lang.String,java.util.TimeZone,java.util.Locale)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.time.DateFormatUtils:java.lang.String format(java.util.Calendar,java.lang.String)",
            "org.apache.commons.lang3.time.DateFormatUtils:java.lang.String format(java.util.Calendar,java.lang.String,java.util.TimeZone)",
            "org.apache.commons.lang3.time.DateFormatUtils:java.lang.String format(java.util.Calendar,java.lang.String,java.util.Locale)"
        ]
    },
    "org.apache.commons.lang3.time.FormatCache:java.text.Format getDateTimeInstance(int,int,java.util.TimeZone,java.util.Locale)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.time.FastDateFormat:org.apache.commons.lang3.time.FastDateFormat getDateTimeInstance(int,int)",
            "org.apache.commons.lang3.time.FastDateFormat:org.apache.commons.lang3.time.FastDateFormat getDateTimeInstance(int,int,java.util.Locale)",
            "org.apache.commons.lang3.time.FastDateFormat:org.apache.commons.lang3.time.FastDateFormat getDateTimeInstance(int,int,java.util.TimeZone,java.util.Locale)",
            "org.apache.commons.lang3.time.FormatCache:java.text.Format getInstance()"
        ]
    },
    "org.apache.commons.lang3.time.FormatCache:java.text.Format getDateInstance(int,java.util.TimeZone,java.util.Locale)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.time.FastDateFormat:org.apache.commons.lang3.time.FastDateFormat getDateInstance(int)",
            "org.apache.commons.lang3.time.FastDateFormat:org.apache.commons.lang3.time.FastDateFormat getDateInstance(int,java.util.Locale)",
            "org.apache.commons.lang3.time.FastDateFormat:org.apache.commons.lang3.time.FastDateFormat getDateInstance(int,java.util.TimeZone)",
            "org.apache.commons.lang3.time.FastDateFormat:org.apache.commons.lang3.time.FastDateFormat getDateInstance(int,java.util.TimeZone,java.util.Locale)"
        ]
    },
    "org.apache.commons.lang3.time.FormatCache:java.text.Format getTimeInstance(int,java.util.TimeZone,java.util.Locale)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.time.FastDateFormat:org.apache.commons.lang3.time.FastDateFormat getTimeInstance(int)",
            "org.apache.commons.lang3.time.FastDateFormat:org.apache.commons.lang3.time.FastDateFormat getTimeInstance(int,java.util.Locale)",
            "org.apache.commons.lang3.time.FastDateFormat:org.apache.commons.lang3.time.FastDateFormat getTimeInstance(int,java.util.TimeZone)",
            "org.apache.commons.lang3.time.FastDateFormat:org.apache.commons.lang3.time.FastDateFormat getTimeInstance(int,java.util.TimeZone,java.util.Locale)"
        ]
    },
    "org.onlab.util.Tools:java.lang.Object lambda$retryable$35(java.util.function.Supplier,java.lang.Class,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.util.Tools$lambda_retryable_35__110:java.lang.Object get()"
        ]
    },
    "org.onlab.util.ExtendedSet:java.lang.Object lambda$conditionalRemove$19(java.util.function.Predicate,java.util.concurrent.atomic.AtomicBoolean,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.util.ExtendedSet:java.lang.Object lambda$insertOrReplace$18(java.util.function.Predicate,java.util.concurrent.atomic.AtomicBoolean,java.lang.Object,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.stc.Coordinator$Delegate:void onOutput(org.onlab.stc.Step,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Coordinator$Delegate:void lambda$onOutput$16(org.onlab.stc.Step,java.lang.String,org.onlab.stc.StepProcessListener)",
            "org.onlab.stc.StepProcessor:void processOutput(java.io.PrintWriter)"
        ]
    },
    "org.onlab.packet.pim.PIMHello$lambda_deserializer_0__94:org.onlab.packet.IPacket deserialize(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.EAPOL:org.onlab.packet.EAPOL lambda$deserializer$53(byte[],int,int)",
            "org.onlab.packet.Ethernet:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.Ethernet:org.onlab.packet.Ethernet lambda$deserializer$10(byte[],int,int)",
            "org.onlab.packet.ICMP:org.onlab.packet.ICMP lambda$deserializer$29(byte[],int,int)",
            "org.onlab.packet.ICMP6:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ICMP6:org.onlab.packet.ICMP6 lambda$deserializer$40(byte[],int,int)",
            "org.onlab.packet.IGMP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IPv4:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IPv4:org.onlab.packet.IPv4 lambda$deserializer$24(byte[],int,int)",
            "org.onlab.packet.IPv6:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IPv6:org.onlab.packet.IPv6 lambda$deserializer$48(byte[],int,int)",
            "org.onlab.packet.MPLS:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.MPLS:org.onlab.packet.MPLS lambda$deserializer$12(byte[],int,int)",
            "org.onlab.packet.PIM:org.onlab.packet.PIM lambda$deserializer$49(byte[],int,int)",
            "org.onlab.packet.TCP:org.onlab.packet.TCP lambda$deserializer$39(byte[],int,int)",
            "org.onlab.packet.UDP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.UDP:org.onlab.packet.UDP lambda$deserializer$45(byte[],int,int)",
            "org.onlab.packet.ipv6.Authentication:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Authentication:org.onlab.packet.ipv6.Authentication lambda$deserializer$46(byte[],int,int)",
            "org.onlab.packet.ipv6.BaseOptions:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.BaseOptions:org.onlab.packet.ipv6.BaseOptions lambda$deserializer$13(byte[],int,int)",
            "org.onlab.packet.ipv6.EncapSecurityPayload:org.onlab.packet.ipv6.EncapSecurityPayload lambda$deserializer$51(byte[],int,int)",
            "org.onlab.packet.ipv6.Fragment:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Fragment:org.onlab.packet.ipv6.Fragment lambda$deserializer$26(byte[],int,int)",
            "org.onlab.packet.ipv6.Routing:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Routing:org.onlab.packet.ipv6.Routing lambda$deserializer$50(byte[],int,int)",
            "org.onlab.packet.ndp.NeighborAdvertisement:org.onlab.packet.ndp.NeighborAdvertisement lambda$deserializer$1(byte[],int,int)",
            "org.onlab.packet.ndp.NeighborSolicitation:org.onlab.packet.ndp.NeighborSolicitation lambda$deserializer$42(byte[],int,int)",
            "org.onlab.packet.ndp.Redirect:org.onlab.packet.ndp.Redirect lambda$deserializer$47(byte[],int,int)",
            "org.onlab.packet.ndp.RouterAdvertisement:org.onlab.packet.ndp.RouterAdvertisement lambda$deserializer$41(byte[],int,int)",
            "org.onlab.packet.ndp.RouterSolicitation:org.onlab.packet.ndp.RouterSolicitation lambda$deserializer$44(byte[],int,int)"
        ]
    },
    "org.jboss.netty.handler.codec.http.HttpHeaders:long getContentLength(org.jboss.netty.handler.codec.http.HttpMessage)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.http.HttpHeaders:long getContentLength(org.jboss.netty.handler.codec.http.HttpMessage,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.HttpMessageDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.http.HttpMessageDecoder$State)",
            "org.jboss.netty.handler.codec.http.HttpMessageDecoder:java.lang.Object readFixedLengthContent(org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.http.HttpMessageDecoder:org.jboss.netty.handler.codec.http.HttpMessageDecoder$State readHeaders(org.jboss.netty.buffer.ChannelBuffer)"
        ]
    },
    "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder:void <init>(org.jboss.netty.handler.codec.http.multipart.HttpDataFactory,org.jboss.netty.handler.codec.http.HttpRequest,boolean,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder:void <init>(org.jboss.netty.handler.codec.http.HttpRequest,boolean)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder:void <init>(org.jboss.netty.handler.codec.http.multipart.HttpDataFactory,org.jboss.netty.handler.codec.http.HttpRequest,boolean)"
        ]
    },
    "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor:void <init>(int,long,long,long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor:void <init>(int,long,long)",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor:void <init>(int,long,long,long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor:void <init>(int,long,long,long,java.util.concurrent.TimeUnit,java.util.concurrent.ThreadFactory)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.execution.OrderedDownstreamThreadPoolExecutor:void <init>(int,long,java.util.concurrent.TimeUnit,java.util.concurrent.ThreadFactory)"
        ]
    },
    "org.jboss.netty.handler.traffic.ChannelTrafficShapingHandler:void <init>(org.jboss.netty.util.Timer,long,long,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.traffic.ChannelTrafficShapingHandler:void <init>(org.jboss.netty.util.Timer,long,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.traffic.ChannelTrafficShapingHandler:void <init>(org.jboss.netty.util.Timer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.traffic.ChannelTrafficShapingHandler:void <init>(org.jboss.netty.util.Timer,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.Entities:void addEntities(java.lang.String[][])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.Entities:void fillWithHtml40Entities(org.apache.commons.lang.Entities)",
            "org.apache.commons.lang.Entities:void <clinit>()"
        ]
    },
    "org.jboss.netty.channel.AbstractServerChannel:void <init>(org.jboss.netty.channel.ChannelFactory,org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelSink)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.local.DefaultLocalServerChannel:void <init>(org.jboss.netty.channel.ChannelFactory,org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelSink)",
            "org.jboss.netty.channel.socket.nio.NioServerSocketChannel:void <init>(org.jboss.netty.channel.ChannelFactory,org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelSink,org.jboss.netty.channel.socket.nio.Boss,org.jboss.netty.channel.socket.nio.WorkerPool)",
            "org.jboss.netty.channel.socket.oio.OioServerSocketChannel:void <init>(org.jboss.netty.channel.ChannelFactory,org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelSink)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.AbstractNioChannel:void <init>(org.jboss.netty.channel.Channel,org.jboss.netty.channel.ChannelFactory,org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelSink,org.jboss.netty.channel.socket.nio.AbstractNioWorker,java.nio.channels.SelectableChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.NioDatagramChannel:void <init>(org.jboss.netty.channel.ChannelFactory,org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelSink,org.jboss.netty.channel.socket.nio.NioDatagramWorker,org.jboss.netty.channel.socket.InternetProtocolFamily)",
            "org.jboss.netty.channel.socket.nio.NioSocketChannel:void <init>(org.jboss.netty.channel.Channel,org.jboss.netty.channel.ChannelFactory,org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelSink,java.nio.channels.SocketChannel,org.jboss.netty.channel.socket.nio.NioWorker)"
        ]
    },
    "org.jboss.netty.channel.socket.oio.AbstractOioChannel:void <init>(org.jboss.netty.channel.Channel,org.jboss.netty.channel.ChannelFactory,org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelSink)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.oio.OioDatagramChannel:void <init>(org.jboss.netty.channel.ChannelFactory,org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelSink)",
            "org.jboss.netty.channel.socket.oio.OioSocketChannel:void <init>(org.jboss.netty.channel.Channel,org.jboss.netty.channel.ChannelFactory,org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelSink,java.net.Socket)"
        ]
    },
    "org.onlab.util.Tools:java.util.concurrent.ThreadFactory groupedThreads(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.util.SharedExecutors:void setPoolSize(int)",
            "org.onlab.util.SharedExecutors:void <clinit>()"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioClientBoss:void connect(java.nio.channels.SelectionKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.NioClientBoss:void processSelectedKeys(java.util.Set)"
        ]
    },
    "org.jboss.netty.handler.ssl.SslHandler:void cancelHandshakeTimeout()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.ssl.SslHandler:void channelDisconnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.handler.ssl.SslHandler:void setHandshakeSuccess(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.handler.ssl.SslHandler:void setHandshakeFailure(org.jboss.netty.channel.Channel,javax.net.ssl.SSLException)"
        ]
    },
    "org.jboss.netty.handler.timeout.IdleStateHandler:void destroy(org.jboss.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.timeout.IdleStateHandler:void beforeRemove(org.jboss.netty.channel.ChannelHandlerContext)",
            "org.jboss.netty.handler.timeout.IdleStateHandler:void channelClosed(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)"
        ]
    },
    "org.jboss.netty.handler.timeout.ReadTimeoutHandler:void destroy(org.jboss.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.timeout.ReadTimeoutHandler:void beforeRemove(org.jboss.netty.channel.ChannelHandlerContext)",
            "org.jboss.netty.handler.timeout.ReadTimeoutHandler:void channelClosed(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)"
        ]
    },
    "org.jboss.netty.handler.timeout.WriteTimeoutHandler$TimeoutCanceller:void operationComplete(org.jboss.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.CompleteChannelFuture:void addListener(org.jboss.netty.channel.ChannelFutureListener)",
            "org.jboss.netty.channel.DefaultChannelFuture:void notifyListener(org.jboss.netty.channel.ChannelFutureListener)"
        ]
    },
    "org.jboss.netty.handler.traffic.AbstractTrafficShapingHandler:void releaseExternalResources()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.NioClientSocketChannelFactory:void releasePools()",
            "org.jboss.netty.channel.socket.nio.NioDatagramChannelFactory:void releasePool()",
            "org.jboss.netty.channel.socket.nio.NioServerSocketChannelFactory:void releasePools()",
            "org.jboss.netty.channel.socket.nio.ShareableWorkerPool:void destroy()",
            "org.jboss.netty.handler.execution.ChainedExecutor:void releaseExternal(java.util.concurrent.Executor)",
            "org.jboss.netty.handler.execution.ExecutionHandler:void releaseExternalResources()",
            "org.jboss.netty.util.ExternalResourceUtil:void release(org.jboss.netty.util.ExternalResourceReleasable[])"
        ]
    },
    "org.jboss.netty.handler.traffic.TrafficCounter:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.traffic.AbstractTrafficShapingHandler:void releaseExternalResources()",
            "org.jboss.netty.handler.traffic.ChannelTrafficShapingHandler:void channelClosed(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.handler.traffic.TrafficCounter:void configure(long)"
        ]
    },
    "org.jboss.netty.util.HashedWheelTimer$Worker:void fetchExpiredTimeouts(java.util.List,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.HashedWheelTimer$Worker:void run()"
        ]
    },
    "org.apache.commons.lang.builder.ToStringBuilder:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.IGMP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.pim.PIMHelloOption:java.lang.String toString()",
            "org.onlab.util.Tools:java.lang.String get(java.util.Dictionary,java.lang.String)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:java.lang.String toString(java.lang.Object)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdyHeaders:java.lang.String toString(java.lang.Object)",
            "org.jboss.netty.util.internal.StringUtil:java.lang.String stripControlCharacters(java.lang.Object)",
            "org.apache.commons.lang.ArrayUtils:java.lang.String toString(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang.builder.ReflectionToStringBuilder:java.lang.String[] toNoNullStringArray(java.lang.Object[])",
            "org.apache.commons.lang.builder.ReflectionToStringBuilder:java.lang.String toString()",
            "org.apache.commons.lang.mutable.MutableObject:java.lang.String toString()",
            "org.apache.commons.lang.ObjectUtils:java.lang.String toString(java.lang.Object)",
            "org.apache.commons.lang.ObjectUtils:java.lang.String toString(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.lang.Object[],char,int,int)",
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.lang.Object[],java.lang.String,int,int)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder append(java.lang.Object)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendFixedWidthPadLeft(java.lang.Object,int,char)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendFixedWidthPadRight(java.lang.Object,int,char)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder insert(int,java.lang.Object)",
            "org.apache.commons.lang.text.StrLookup$MapStrLookup:java.lang.String lookup(java.lang.String)",
            "org.apache.commons.lang.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Properties)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:java.lang.String toString()",
            "org.apache.commons.lang.time.DurationFormatUtils:java.lang.String format(org.apache.commons.lang.time.DurationFormatUtils$Token[],int,int,int,int,int,int,int,boolean)",
            "org.apache.commons.lang3.builder.ReflectionToStringBuilder:java.lang.String[] toNoNullStringArray(java.lang.Object[])",
            "org.apache.commons.lang3.exception.DefaultExceptionContext:java.lang.String getFormattedExceptionMessage(java.lang.String)",
            "org.apache.commons.lang3.mutable.MutableObject:java.lang.String toString()",
            "org.apache.commons.lang3.ObjectUtils:java.lang.String toString(java.lang.Object)",
            "org.apache.commons.lang3.ObjectUtils:java.lang.String toString(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder append(java.lang.Object)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadLeft(java.lang.Object,int,char)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadRight(java.lang.Object,int,char)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder insert(int,java.lang.Object)",
            "org.apache.commons.lang3.text.StrLookup$MapStrLookup:java.lang.String lookup(java.lang.String)",
            "org.apache.commons.lang3.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Properties)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:java.lang.String toString()",
            "org.apache.commons.lang3.time.DurationFormatUtils:java.lang.String format(org.apache.commons.lang3.time.DurationFormatUtils$Token[],long,long,long,long,long,long,long,boolean)"
        ]
    },
    "org.apache.commons.lang3.builder.ToStringBuilder:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.IGMP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.pim.PIMHelloOption:java.lang.String toString()",
            "org.onlab.util.Tools:java.lang.String get(java.util.Dictionary,java.lang.String)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:java.lang.String toString(java.lang.Object)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdyHeaders:java.lang.String toString(java.lang.Object)",
            "org.jboss.netty.util.internal.StringUtil:java.lang.String stripControlCharacters(java.lang.Object)",
            "org.apache.commons.lang.builder.ReflectionToStringBuilder:java.lang.String[] toNoNullStringArray(java.lang.Object[])",
            "org.apache.commons.lang.mutable.MutableObject:java.lang.String toString()",
            "org.apache.commons.lang.ObjectUtils:java.lang.String toString(java.lang.Object)",
            "org.apache.commons.lang.ObjectUtils:java.lang.String toString(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.lang.Object[],char,int,int)",
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.lang.Object[],java.lang.String,int,int)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder append(java.lang.Object)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendFixedWidthPadLeft(java.lang.Object,int,char)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendFixedWidthPadRight(java.lang.Object,int,char)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder insert(int,java.lang.Object)",
            "org.apache.commons.lang.text.StrLookup$MapStrLookup:java.lang.String lookup(java.lang.String)",
            "org.apache.commons.lang.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Properties)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:java.lang.String toString()",
            "org.apache.commons.lang.time.DurationFormatUtils:java.lang.String format(org.apache.commons.lang.time.DurationFormatUtils$Token[],int,int,int,int,int,int,int,boolean)",
            "org.apache.commons.lang3.ArrayUtils:java.lang.String toString(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang3.builder.ReflectionToStringBuilder:java.lang.String[] toNoNullStringArray(java.lang.Object[])",
            "org.apache.commons.lang3.builder.ReflectionToStringBuilder:java.lang.String toString()",
            "org.apache.commons.lang3.builder.ToStringBuilder:java.lang.String build()",
            "org.apache.commons.lang3.exception.DefaultExceptionContext:java.lang.String getFormattedExceptionMessage(java.lang.String)",
            "org.apache.commons.lang3.mutable.MutableObject:java.lang.String toString()",
            "org.apache.commons.lang3.ObjectUtils:java.lang.String toString(java.lang.Object)",
            "org.apache.commons.lang3.ObjectUtils:java.lang.String toString(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder append(java.lang.Object)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadLeft(java.lang.Object,int,char)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadRight(java.lang.Object,int,char)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder insert(int,java.lang.Object)",
            "org.apache.commons.lang3.text.StrLookup$MapStrLookup:java.lang.String lookup(java.lang.String)",
            "org.apache.commons.lang3.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Properties)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:java.lang.String toString()",
            "org.apache.commons.lang3.time.DurationFormatUtils:java.lang.String format(org.apache.commons.lang3.time.DurationFormatUtils$Token[],long,long,long,long,long,long,long,boolean)"
        ]
    },
    "org.objectweb.asm.ClassReader:void accept(org.objectweb.asm.ClassVisitor,org.objectweb.asm.Attribute[],int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.objectweb.asm.ClassReader:void accept(org.objectweb.asm.ClassVisitor,int)"
        ]
    },
    "com.eclipsesource.json.JsonParser:com.eclipsesource.json.JsonValue readValue()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.eclipsesource.json.JsonParser:com.eclipsesource.json.JsonValue parse()",
            "com.eclipsesource.json.JsonParser:com.eclipsesource.json.JsonArray readArray()",
            "com.eclipsesource.json.JsonParser:com.eclipsesource.json.JsonObject readObject()"
        ]
    },
    "com.eclipsesource.json.JsonObject:void <init>(com.eclipsesource.json.JsonObject)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.eclipsesource.json.JsonObject:com.eclipsesource.json.JsonObject unmodifiableObject(com.eclipsesource.json.JsonObject)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.Kryo:com.esotericsoftware.kryo.Registration register(java.lang.Class,com.esotericsoftware.kryo.Serializer,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.util.KryoNamespace:com.esotericsoftware.kryo.Kryo create()",
            "com.esotericsoftware.kryo.Kryo:com.esotericsoftware.kryo.Registration register(java.lang.Class,int)"
        ]
    },
    "com.esotericsoftware.kryo.Kryo:com.esotericsoftware.kryo.Registration readClass(com.esotericsoftware.kryo.io.Input)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readClassAndObject(com.esotericsoftware.kryo.io.Input)",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ObjectArraySerializer:java.lang.Object[] read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$ClassSerializer:java.lang.Class read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:java.util.EnumSet read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.ObjectField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.Kryo:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.util.KryoNamespace:com.esotericsoftware.kryo.Kryo create()"
        ]
    },
    "com.esotericsoftware.kryo.Kryo:void <init>(com.esotericsoftware.kryo.ReferenceResolver)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.Kryo:void <init>(com.esotericsoftware.kryo.ClassResolver,com.esotericsoftware.kryo.ReferenceResolver)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.serializers.BeanSerializer:java.lang.Object copy(com.esotericsoftware.kryo.Kryo,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:java.lang.Object copy(java.lang.Object)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object copy(java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object copyShallow(java.lang.Object)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object copyShallow(java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:java.lang.Object copy(com.esotericsoftware.kryo.Kryo,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:java.lang.Object copy(com.esotericsoftware.kryo.Kryo,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.CollectionSerializer:java.util.Collection create(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.CollectionSerializer:java.util.Collection read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.CollectionSerializer:java.util.Collection createCopy(com.esotericsoftware.kryo.Kryo,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.CollectionSerializer:java.util.Collection copy(com.esotericsoftware.kryo.Kryo,java.util.Collection)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$DateSerializer:java.util.Date create(com.esotericsoftware.kryo.Kryo,java.lang.Class,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$DateSerializer:java.util.Date read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$DateSerializer:java.util.Date copy(com.esotericsoftware.kryo.Kryo,java.util.Date)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$KryoSerializableSerializer:com.esotericsoftware.kryo.KryoSerializable read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$KryoSerializableSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.FieldSerializer:java.lang.Object create(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.CompatibleFieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.TaggedFieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.FieldSerializer:java.lang.Object createCopy(com.esotericsoftware.kryo.Kryo,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.FieldSerializer:java.lang.Object copy(com.esotericsoftware.kryo.Kryo,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.MapSerializer:java.util.Map create(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.MapSerializer:java.util.Map read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.MapSerializer:java.util.Map createCopy(com.esotericsoftware.kryo.Kryo,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.MapSerializer:java.util.Map copy(com.esotericsoftware.kryo.Kryo,java.util.Map)"
        ]
    },
    "com.esotericsoftware.kryo.Kryo:com.esotericsoftware.kryo.Registration writeClass(com.esotericsoftware.kryo.io.Output,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:void writeClassAndObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$ClassSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.EnumSet)",
            "com.esotericsoftware.kryo.serializers.ObjectField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.SpdyHeaderBlockZlibDecoder:void decode(org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.spdy.SpdyFrameDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)"
        ]
    },
    "org.jboss.netty.handler.codec.http.DefaultHttpHeaders$HeaderEntry:java.lang.Object setValue(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$Segment:java.lang.Object get(java.lang.Object,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap:java.lang.Object get(java.lang.Object)"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap:java.lang.Object replace(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap:java.lang.Object put(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Compiler:boolean registerStep(org.onlab.stc.Step,org.apache.commons.configuration.HierarchicalConfiguration,java.lang.String,org.onlab.stc.Group)",
            "org.onlab.stc.Compiler:void processSequentialRequirements(java.lang.String,java.lang.String,java.lang.String)",
            "org.onlab.stc.Compiler:void processRequirements(org.onlab.stc.Step,java.lang.String,java.lang.String)",
            "org.onlab.stc.Coordinator:void scrapeForVariables(java.lang.String)",
            "org.onlab.stc.MonitorLayout:void <init>(org.onlab.stc.Compiler)",
            "org.onlab.stc.MonitorLayout:void createBox(org.onlab.stc.Step)",
            "org.onlab.stc.ScenarioStore:void add(org.onlab.stc.StepEvent)",
            "org.onlab.stc.ScenarioStore:void lambda$reset$17(org.onlab.stc.Step)",
            "org.onlab.graph.AbstractGraphPathSearch$DefaultResult:void updateVertex(org.onlab.graph.Vertex,org.onlab.graph.Edge,double,boolean)",
            "org.onlab.graph.DepthFirstSearch$SpanningTreeResult:void markEdge(org.onlab.graph.Edge,org.onlab.graph.DepthFirstSearch$EdgeType)",
            "org.onlab.graph.SrlgGraphSearch:void <init>(java.util.Map)",
            "org.onlab.graph.TarjanGraphSearch$SccResult:org.onlab.graph.TarjanGraphSearch$VertexData addData(org.onlab.graph.Vertex)",
            "org.onlab.packet.Ethernet:void <clinit>()",
            "org.onlab.packet.ICMP6:void <clinit>()",
            "org.onlab.packet.IPv4:void <clinit>()",
            "org.onlab.packet.IPv6:void <clinit>()",
            "org.onlab.packet.MPLS:void <clinit>()",
            "org.onlab.packet.PIM:void <clinit>()",
            "org.onlab.packet.UDP:void <clinit>()",
            "org.onlab.packet.pim.PIMHello:void createDefaultOptions()",
            "org.onlab.packet.pim.PIMHello:void addOption(org.onlab.packet.pim.PIMHelloOption)",
            "org.jboss.netty.bootstrap.Bootstrap:void setOption(java.lang.String,java.lang.Object)",
            "org.jboss.netty.bootstrap.Bootstrap:boolean isOrderedMap(java.util.Map)",
            "org.jboss.netty.bootstrap.ServerBootstrap$Binder:void channelOpen(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.jboss.netty.channel.ChannelLocal:java.lang.Object set(org.jboss.netty.channel.Channel,java.lang.Object)",
            "org.jboss.netty.channel.DefaultChannelPipeline:void addFirst(java.lang.String,org.jboss.netty.channel.ChannelHandler)",
            "org.jboss.netty.channel.DefaultChannelPipeline:void addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)",
            "org.jboss.netty.channel.DefaultChannelPipeline:void addBefore(java.lang.String,java.lang.String,org.jboss.netty.channel.ChannelHandler)",
            "org.jboss.netty.channel.DefaultChannelPipeline:void addAfter(java.lang.String,java.lang.String,org.jboss.netty.channel.ChannelHandler)",
            "org.jboss.netty.channel.DefaultChannelPipeline:org.jboss.netty.channel.ChannelHandler replace(org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext,java.lang.String,org.jboss.netty.channel.ChannelHandler)",
            "org.jboss.netty.channel.DefaultChannelPipeline:void init(java.lang.String,org.jboss.netty.channel.ChannelHandler)",
            "org.jboss.netty.channel.StaticChannelPipeline:void <init>(org.jboss.netty.channel.ChannelHandler[])",
            "org.jboss.netty.channel.socket.nio.NioDatagramChannel:org.jboss.netty.channel.ChannelFuture joinGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress)",
            "org.jboss.netty.handler.codec.http.HttpMethod:void <clinit>()",
            "org.jboss.netty.handler.codec.http.QueryStringDecoder:boolean addParam(java.util.Map,java.lang.String,java.lang.String)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void addHttpData(org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData findMultipartDisposition()",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder:void <clinit>()",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void addHttpData(org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData)",
            "org.jboss.netty.handler.codec.rtsp.RtspMethods:void <clinit>()",
            "org.jboss.netty.handler.codec.serialization.CachingClassResolver:java.lang.Class resolve(java.lang.String)",
            "org.jboss.netty.handler.codec.serialization.ReferenceMap:java.lang.Object put(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.handler.codec.serialization.ReferenceMap:void putAll(java.util.Map)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame:void setValue(int,int,boolean,boolean)",
            "org.jboss.netty.handler.codec.spdy.SpdyHttpDecoder:org.jboss.netty.handler.codec.http.HttpMessage putMessage(int,org.jboss.netty.handler.codec.http.HttpMessage)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:void acceptStream(int,byte,boolean,boolean,int,int,boolean)",
            "org.jboss.netty.handler.ipfilter.OneIpFilterHandler:boolean accept(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent,java.net.InetSocketAddress)",
            "org.jboss.netty.util.CharsetUtil:java.nio.charset.CharsetEncoder getEncoder(java.nio.charset.Charset)",
            "org.jboss.netty.util.CharsetUtil:java.nio.charset.CharsetDecoder getDecoder(java.nio.charset.Charset)",
            "org.jboss.netty.util.DefaultObjectSizeEstimator:void <init>()",
            "org.jboss.netty.util.MapBackedSet:boolean add(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$WriteThroughEntry:java.lang.Object setValue(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap:void putAll(java.util.Map)",
            "org.apache.commons.lang.builder.ToStringStyle:void register(java.lang.Object)",
            "org.apache.commons.lang.CharSet:void <clinit>()",
            "org.apache.commons.lang.ClassUtils:void addAbbreviation(java.lang.String,java.lang.String)",
            "org.apache.commons.lang.ClassUtils:void <clinit>()",
            "org.apache.commons.lang.Entities$MapIntMap:void add(java.lang.String,int)",
            "org.apache.commons.lang.Entities$PrimitiveEntityMap:void add(java.lang.String,int)",
            "org.apache.commons.lang.enum.Enum:void init(java.lang.String)",
            "org.apache.commons.lang.enums.Enum:void init(java.lang.String)",
            "org.apache.commons.lang.LocaleUtils:java.util.List languagesByCountry(java.lang.String)",
            "org.apache.commons.lang.LocaleUtils:java.util.List countriesByLanguage(java.lang.String)",
            "org.apache.commons.lang.time.FastDateFormat:org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String,java.util.TimeZone,java.util.Locale)",
            "org.apache.commons.lang.time.FastDateFormat:org.apache.commons.lang.time.FastDateFormat getDateInstance(int,java.util.TimeZone,java.util.Locale)",
            "org.apache.commons.lang.time.FastDateFormat:org.apache.commons.lang.time.FastDateFormat getTimeInstance(int,java.util.TimeZone,java.util.Locale)",
            "org.apache.commons.lang.time.FastDateFormat:org.apache.commons.lang.time.FastDateFormat getDateTimeInstance(int,int,java.util.TimeZone,java.util.Locale)",
            "org.apache.commons.lang.time.FastDateFormat:java.lang.String getTimeZoneDisplay(java.util.TimeZone,boolean,int,java.util.Locale)",
            "org.apache.commons.lang3.builder.ToStringStyle:void register(java.lang.Object)",
            "org.apache.commons.lang3.CharSet:void <clinit>()",
            "org.apache.commons.lang3.ClassUtils:void <clinit>()",
            "org.apache.commons.lang3.concurrent.MultiBackgroundInitializer:void addInitializer(java.lang.String,org.apache.commons.lang3.concurrent.BackgroundInitializer)",
            "org.apache.commons.lang3.reflect.TypeUtils:java.util.Map getTypeArguments(java.lang.reflect.ParameterizedType,java.lang.Class,java.util.Map)",
            "org.apache.commons.lang3.reflect.TypeUtils:void mapTypeVariablesToArguments(java.lang.Class,java.lang.reflect.ParameterizedType,java.util.Map)",
            "org.apache.commons.lang3.SerializationUtils$ClassLoaderAwareObjectInputStream:void <init>(java.io.InputStream,java.lang.ClassLoader)",
            "com.esotericsoftware.kryo.Generics:void add(java.lang.String,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.MapSerializer:java.util.Map read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.MapSerializer:java.util.Map copy(com.esotericsoftware.kryo.Kryo,java.util.Map)"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap:java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.metrics.MetricsComponent:org.onlab.metrics.MetricsFeature registerFeature(java.lang.String)",
            "org.onlab.metrics.MetricsManager:org.onlab.metrics.MetricsComponent registerComponent(java.lang.String)",
            "org.onlab.util.ExtendedSet:boolean add(java.lang.Object)",
            "org.onlab.util.ExtendedSet:java.lang.Boolean lambda$addAll$20(java.lang.Object)",
            "org.jboss.netty.channel.AbstractChannel:java.lang.Integer allocateId(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.channel.ChannelLocal:java.lang.Object setIfAbsent(org.jboss.netty.channel.Channel,java.lang.Object)",
            "org.jboss.netty.channel.group.DefaultChannelGroup:boolean add(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.channel.local.LocalChannelRegistry:boolean register(org.jboss.netty.channel.local.LocalAddress,org.jboss.netty.channel.Channel)",
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor:java.util.concurrent.atomic.AtomicLong getChannelCounter(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.handler.execution.OrderedDownstreamThreadPoolExecutor:java.util.concurrent.Executor getChildExecutor(org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor:java.util.concurrent.Executor getChildExecutor(org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.util.DefaultObjectSizeEstimator:int estimateSize(java.lang.Class,java.util.Set)",
            "org.apache.commons.lang3.concurrent.ConcurrentUtils:java.lang.Object putIfAbsent(java.util.concurrent.ConcurrentMap,java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang3.LocaleUtils:java.util.List languagesByCountry(java.lang.String)",
            "org.apache.commons.lang3.LocaleUtils:java.util.List countriesByLanguage(java.lang.String)",
            "org.apache.commons.lang3.time.FastDateParser:org.apache.commons.lang3.time.FastDateParser$Strategy getLocaleSpecificStrategy(int,java.util.Calendar)",
            "org.apache.commons.lang3.time.FastDatePrinter:java.lang.String getTimeZoneDisplay(java.util.TimeZone,boolean,int,java.util.Locale)",
            "org.apache.commons.lang3.time.FormatCache:java.text.Format getInstance(java.lang.String,java.util.TimeZone,java.util.Locale)",
            "org.apache.commons.lang3.time.FormatCache:java.lang.String getPatternForStyle(java.lang.Integer,java.lang.Integer,java.util.Locale)"
        ]
    },
    "org.apache.commons.lang.exception.ExceptionUtils:void addCauseMethodName(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.builder.EqualsBuilder:boolean reflectionEquals(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.builder.EqualsBuilder:boolean reflectionEquals(java.lang.Object,java.lang.Object,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.builder.EqualsBuilder:boolean reflectionEquals(java.lang.Object,java.lang.Object,java.util.Collection)"
        ]
    },
    "org.apache.commons.lang.builder.EqualsBuilder:boolean reflectionEquals(java.lang.Object,java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.builder.EqualsBuilder:boolean reflectionEquals(java.lang.Object,java.lang.Object,boolean,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.AnnotationUtils:boolean arrayMemberEquals(java.lang.Class,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.AnnotationUtils:boolean memberEquals(java.lang.Class,java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.commons.lang3.reflect.TypeUtils:boolean access$100(java.lang.reflect.GenericArrayType,java.lang.reflect.Type)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.reflect.TypeUtils$GenericArrayTypeImpl:boolean equals(java.lang.Object)"
        ]
    },
    "org.apache.commons.lang.time.StopWatch:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.IGMP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.pim.PIMHelloOption:java.lang.String toString()",
            "org.onlab.util.Tools:java.lang.String get(java.util.Dictionary,java.lang.String)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:java.lang.String toString(java.lang.Object)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdyHeaders:java.lang.String toString(java.lang.Object)",
            "org.jboss.netty.util.internal.StringUtil:java.lang.String stripControlCharacters(java.lang.Object)",
            "org.apache.commons.lang.builder.ReflectionToStringBuilder:java.lang.String[] toNoNullStringArray(java.lang.Object[])",
            "org.apache.commons.lang.mutable.MutableObject:java.lang.String toString()",
            "org.apache.commons.lang.ObjectUtils:java.lang.String toString(java.lang.Object)",
            "org.apache.commons.lang.ObjectUtils:java.lang.String toString(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.lang.Object[],char,int,int)",
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.lang.Object[],java.lang.String,int,int)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder append(java.lang.Object)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendFixedWidthPadLeft(java.lang.Object,int,char)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendFixedWidthPadRight(java.lang.Object,int,char)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder insert(int,java.lang.Object)",
            "org.apache.commons.lang.text.StrLookup$MapStrLookup:java.lang.String lookup(java.lang.String)",
            "org.apache.commons.lang.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Properties)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:java.lang.String toString()",
            "org.apache.commons.lang.time.DurationFormatUtils:java.lang.String format(org.apache.commons.lang.time.DurationFormatUtils$Token[],int,int,int,int,int,int,int,boolean)",
            "org.apache.commons.lang3.builder.ReflectionToStringBuilder:java.lang.String[] toNoNullStringArray(java.lang.Object[])",
            "org.apache.commons.lang3.exception.DefaultExceptionContext:java.lang.String getFormattedExceptionMessage(java.lang.String)",
            "org.apache.commons.lang3.mutable.MutableObject:java.lang.String toString()",
            "org.apache.commons.lang3.ObjectUtils:java.lang.String toString(java.lang.Object)",
            "org.apache.commons.lang3.ObjectUtils:java.lang.String toString(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder append(java.lang.Object)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadLeft(java.lang.Object,int,char)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadRight(java.lang.Object,int,char)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder insert(int,java.lang.Object)",
            "org.apache.commons.lang3.text.StrLookup$MapStrLookup:java.lang.String lookup(java.lang.String)",
            "org.apache.commons.lang3.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Properties)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:java.lang.String toString()",
            "org.apache.commons.lang3.time.DurationFormatUtils:java.lang.String format(org.apache.commons.lang3.time.DurationFormatUtils$Token[],long,long,long,long,long,long,long,boolean)"
        ]
    },
    "org.apache.commons.lang.time.StopWatch:java.lang.String toSplitString()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.time.StopWatch:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.IGMP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.pim.PIMHelloOption:java.lang.String toString()",
            "org.onlab.util.Tools:java.lang.String get(java.util.Dictionary,java.lang.String)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:java.lang.String toString(java.lang.Object)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdyHeaders:java.lang.String toString(java.lang.Object)",
            "org.jboss.netty.util.internal.StringUtil:java.lang.String stripControlCharacters(java.lang.Object)",
            "org.apache.commons.lang.builder.ReflectionToStringBuilder:java.lang.String[] toNoNullStringArray(java.lang.Object[])",
            "org.apache.commons.lang.mutable.MutableObject:java.lang.String toString()",
            "org.apache.commons.lang.ObjectUtils:java.lang.String toString(java.lang.Object)",
            "org.apache.commons.lang.ObjectUtils:java.lang.String toString(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.lang.Object[],char,int,int)",
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.lang.Object[],java.lang.String,int,int)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder append(java.lang.Object)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendFixedWidthPadLeft(java.lang.Object,int,char)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendFixedWidthPadRight(java.lang.Object,int,char)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder insert(int,java.lang.Object)",
            "org.apache.commons.lang.text.StrLookup$MapStrLookup:java.lang.String lookup(java.lang.String)",
            "org.apache.commons.lang.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Properties)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:java.lang.String toString()",
            "org.apache.commons.lang.time.DurationFormatUtils:java.lang.String format(org.apache.commons.lang.time.DurationFormatUtils$Token[],int,int,int,int,int,int,int,boolean)",
            "org.apache.commons.lang3.builder.ReflectionToStringBuilder:java.lang.String[] toNoNullStringArray(java.lang.Object[])",
            "org.apache.commons.lang3.exception.DefaultExceptionContext:java.lang.String getFormattedExceptionMessage(java.lang.String)",
            "org.apache.commons.lang3.mutable.MutableObject:java.lang.String toString()",
            "org.apache.commons.lang3.ObjectUtils:java.lang.String toString(java.lang.Object)",
            "org.apache.commons.lang3.ObjectUtils:java.lang.String toString(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder append(java.lang.Object)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadLeft(java.lang.Object,int,char)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadRight(java.lang.Object,int,char)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder insert(int,java.lang.Object)",
            "org.apache.commons.lang3.text.StrLookup$MapStrLookup:java.lang.String lookup(java.lang.String)",
            "org.apache.commons.lang3.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Properties)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:java.lang.String toString()",
            "org.apache.commons.lang3.time.DurationFormatUtils:java.lang.String format(org.apache.commons.lang3.time.DurationFormatUtils$Token[],long,long,long,long,long,long,long,boolean)"
        ]
    },
    "org.apache.commons.lang3.time.StopWatch:java.lang.String toSplitString()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.builder.ToStringBuilder:org.apache.commons.lang.builder.ToStringBuilder append(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.ArrayUtils:java.lang.String toString(java.lang.Object,java.lang.String)"
        ]
    },
    "org.apache.commons.lang.builder.ToStringBuilder:org.apache.commons.lang.builder.ToStringBuilder append(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.builder.ReflectionToStringBuilder:void appendFieldsIn(java.lang.Class)"
        ]
    },
    "org.apache.commons.lang.builder.ToStringBuilder:org.apache.commons.lang.builder.ToStringBuilder append(java.lang.String,java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.builder.ToStringStyle:void append(java.lang.StringBuffer,java.lang.String,java.lang.Object[],java.lang.Boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.builder.ToStringBuilder:org.apache.commons.lang.builder.ToStringBuilder append(java.lang.Object[])",
            "org.apache.commons.lang.builder.ToStringBuilder:org.apache.commons.lang.builder.ToStringBuilder append(java.lang.String,java.lang.Object[])",
            "org.apache.commons.lang.builder.ToStringBuilder:org.apache.commons.lang.builder.ToStringBuilder append(java.lang.String,java.lang.Object[],boolean)"
        ]
    },
    "org.apache.commons.lang.builder.ReflectionToStringBuilder:org.apache.commons.lang.builder.ToStringBuilder reflectionAppendArray(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.builder.ReflectionToStringBuilder:void appendFieldsIn(java.lang.Class)"
        ]
    },
    "org.apache.commons.lang.builder.ReflectionToStringBuilder:void <init>(java.lang.Object,org.apache.commons.lang.builder.ToStringStyle,java.lang.StringBuffer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.builder.ReflectionToStringBuilder:void <init>(java.lang.Object,org.apache.commons.lang.builder.ToStringStyle,java.lang.StringBuffer,java.lang.Class,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.builder.ReflectionToStringBuilder:java.lang.String toString(java.lang.Object,org.apache.commons.lang.builder.ToStringStyle,boolean,java.lang.Class)"
        ]
    },
    "org.apache.commons.lang.builder.ReflectionToStringBuilder:void <init>(java.lang.Object,org.apache.commons.lang.builder.ToStringStyle,java.lang.StringBuffer,java.lang.Class,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.builder.ReflectionToStringBuilder:java.lang.String toString(java.lang.Object,org.apache.commons.lang.builder.ToStringStyle,boolean,boolean,java.lang.Class)"
        ]
    },
    "org.apache.commons.lang.builder.ToStringBuilder:void <init>(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.builder.ReflectionToStringBuilder:void <init>(java.lang.Object)"
        ]
    },
    "org.apache.commons.lang.builder.ToStringBuilder:void <init>(java.lang.Object,org.apache.commons.lang.builder.ToStringStyle)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.ArrayUtils:java.lang.String toString(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang.builder.ReflectionToStringBuilder:void <init>(java.lang.Object,org.apache.commons.lang.builder.ToStringStyle)"
        ]
    },
    "org.apache.commons.lang.exception.ExceptionUtils:void printRootCauseStackTrace(java.lang.Throwable,java.io.PrintStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.exception.ExceptionUtils:void printRootCauseStackTrace(java.lang.Throwable)"
        ]
    },
    "org.apache.commons.lang.exception.ExceptionUtils:void printRootCauseStackTrace(java.lang.Throwable,java.io.PrintWriter)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.exception.ExceptionUtils:void printRootCauseStackTrace(java.lang.Throwable,java.io.PrintStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.exception.ExceptionUtils:void printRootCauseStackTrace(java.lang.Throwable)"
        ]
    },
    "org.apache.commons.lang3.exception.ExceptionUtils:void printRootCauseStackTrace(java.lang.Throwable,java.io.PrintWriter)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.io.InputChunked:int fill(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.Input:int require(int)",
            "com.esotericsoftware.kryo.io.Input:int optional(int)"
        ]
    },
    "com.esotericsoftware.kryo.io.OutputChunked:void flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.KryoObjectOutput:void flush()",
            "com.esotericsoftware.kryo.io.Output:boolean require(int)",
            "com.esotericsoftware.kryo.io.Output:void close()",
            "com.esotericsoftware.kryo.io.OutputChunked:void endChunks()",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.FieldSerializer:void createCachedFields(com.esotericsoftware.kryo.util.IntArray,java.util.List,java.util.List,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.FieldSerializer:void rebuildCachedFields(boolean)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.FieldSerializer:com.esotericsoftware.kryo.serializers.FieldSerializer$CachedFieldFactory getAsmFieldFactory()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.FieldSerializer:com.esotericsoftware.kryo.serializers.FieldSerializer$CachedField newMatchingCachedField(java.lang.reflect.Field,int,java.lang.Class,java.lang.reflect.Type,java.lang.Class[])"
        ]
    },
    "com.esotericsoftware.kryo.serializers.FieldSerializer:com.esotericsoftware.kryo.serializers.FieldSerializer$CachedFieldFactory getObjectFieldFactory()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.FieldSerializer:com.esotericsoftware.kryo.serializers.FieldSerializer$CachedField newMatchingCachedField(java.lang.reflect.Field,int,java.lang.Class,java.lang.reflect.Type,java.lang.Class[])"
        ]
    },
    "com.esotericsoftware.kryo.serializers.FieldSerializer:com.esotericsoftware.kryo.serializers.FieldSerializer$CachedFieldFactory getUnsafeFieldFactory()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.FieldSerializer:com.esotericsoftware.kryo.serializers.FieldSerializer$CachedField newMatchingCachedField(java.lang.reflect.Field,int,java.lang.Class,java.lang.reflect.Type,java.lang.Class[])"
        ]
    },
    "com.esotericsoftware.kryo.serializers.TaggedFieldSerializer:void removeField(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.serializers.TaggedFieldSerializer:void removeField(com.esotericsoftware.kryo.serializers.FieldSerializer$CachedField)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.FieldSerializer:void rebuildCachedFields(boolean)"
        ]
    },
    "com.esotericsoftware.kryo.io.ByteBufferInput:void release()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.io.ByteBufferInput:void <init>(long,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.UnsafeMemoryInput:void <init>(long,int)"
        ]
    },
    "com.esotericsoftware.kryo.io.ByteBufferOutput:void <init>(long,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.UnsafeMemoryOutput:void <init>(long,int)"
        ]
    },
    "com.esotericsoftware.kryo.io.ByteBufferOutput:void release()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.util.KryoNamespace:byte[] serialize(java.lang.Object,int)"
        ]
    },
    "com.esotericsoftware.kryo.io.UnsafeInput:int readInt()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.Input:float readFloat()",
            "com.esotericsoftware.kryo.io.Input:int[] readInts(int)",
            "com.esotericsoftware.kryo.io.KryoDataInput:int readInt()",
            "com.esotericsoftware.kryo.io.UnsafeInput:int readInt(boolean)",
            "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmIntField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.ObjectField$ObjectIntField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeIntField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.UnsafeInput:float readFloat()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.Input:float[] readFloats(int)",
            "com.esotericsoftware.kryo.io.KryoDataInput:float readFloat()",
            "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmFloatField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$FloatSerializer:java.lang.Float read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.ObjectField$ObjectFloatField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeFloatField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.UnsafeInput:short readShort()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.Input:short[] readShorts(int)",
            "com.esotericsoftware.kryo.io.KryoDataInput:short readShort()",
            "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmShortField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$ShortSerializer:java.lang.Short read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.ObjectField$ObjectShortField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeShortField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.UnsafeInput:long readLong()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.Input:double readDouble()",
            "com.esotericsoftware.kryo.io.Input:long[] readLongs(int)",
            "com.esotericsoftware.kryo.io.KryoDataInput:long readLong()",
            "com.esotericsoftware.kryo.io.UnsafeInput:long readLong(boolean)",
            "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmLongField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.ObjectField$ObjectLongField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeLongField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeRegionField:void readSlow(com.esotericsoftware.kryo.io.Input,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.UnsafeInput:double readDouble()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.Input:double[] readDoubles(int)",
            "com.esotericsoftware.kryo.io.KryoDataInput:double readDouble()",
            "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmDoubleField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$DoubleSerializer:java.lang.Double read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.ObjectField$ObjectDoubleField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeDoubleField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.UnsafeInput:char readChar()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.Input:char[] readChars(int)",
            "com.esotericsoftware.kryo.io.KryoDataInput:char readChar()",
            "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmCharField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$CharSerializer:java.lang.Character read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.ObjectField$ObjectCharField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeCharField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.UnsafeInput:int[] readInts(int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$IntArraySerializer:int[] read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.io.UnsafeInput:long[] readLongs(int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$LongArraySerializer:long[] read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.io.UnsafeInput:int[] readInts(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.io.UnsafeInput:long[] readLongs(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.io.UnsafeInput:float[] readFloats(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$FloatArraySerializer:float[] read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.io.UnsafeInput:short[] readShorts(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ShortArraySerializer:short[] read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.io.UnsafeInput:char[] readChars(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$CharArraySerializer:char[] read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.io.UnsafeInput:double[] readDoubles(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$DoubleArraySerializer:double[] read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.io.UnsafeInput:void readBytes(java.lang.Object,long,long,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.UnsafeInput:int[] readInts(int,boolean)",
            "com.esotericsoftware.kryo.io.UnsafeInput:long[] readLongs(int,boolean)",
            "com.esotericsoftware.kryo.io.UnsafeInput:int[] readInts(int)",
            "com.esotericsoftware.kryo.io.UnsafeInput:long[] readLongs(int)",
            "com.esotericsoftware.kryo.io.UnsafeInput:float[] readFloats(int)",
            "com.esotericsoftware.kryo.io.UnsafeInput:short[] readShorts(int)",
            "com.esotericsoftware.kryo.io.UnsafeInput:char[] readChars(int)",
            "com.esotericsoftware.kryo.io.UnsafeInput:double[] readDoubles(int)",
            "com.esotericsoftware.kryo.io.UnsafeInput:void readBytes(java.lang.Object,long,long)"
        ]
    },
    "com.esotericsoftware.kryo.io.UnsafeMemoryInput:int readInt()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.ByteBufferInput:int readInt(boolean)",
            "com.esotericsoftware.kryo.io.Input:float readFloat()",
            "com.esotericsoftware.kryo.io.Input:int[] readInts(int)",
            "com.esotericsoftware.kryo.io.KryoDataInput:int readInt()",
            "com.esotericsoftware.kryo.io.UnsafeMemoryInput:int readInt(boolean)",
            "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmIntField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.ObjectField$ObjectIntField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeIntField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.UnsafeMemoryInput:float readFloat()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.Input:float[] readFloats(int)",
            "com.esotericsoftware.kryo.io.KryoDataInput:float readFloat()",
            "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmFloatField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$FloatSerializer:java.lang.Float read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.ObjectField$ObjectFloatField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeFloatField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.UnsafeMemoryInput:short readShort()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.Input:short[] readShorts(int)",
            "com.esotericsoftware.kryo.io.KryoDataInput:short readShort()",
            "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmShortField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$ShortSerializer:java.lang.Short read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.ObjectField$ObjectShortField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeShortField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.UnsafeMemoryInput:long readLong()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.ByteBufferInput:long readLong(boolean)",
            "com.esotericsoftware.kryo.io.Input:double readDouble()",
            "com.esotericsoftware.kryo.io.Input:long[] readLongs(int)",
            "com.esotericsoftware.kryo.io.KryoDataInput:long readLong()",
            "com.esotericsoftware.kryo.io.UnsafeMemoryInput:long readLong(boolean)",
            "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmLongField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.ObjectField$ObjectLongField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeLongField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeRegionField:void readSlow(com.esotericsoftware.kryo.io.Input,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.UnsafeMemoryInput:char readChar()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.Input:char[] readChars(int)",
            "com.esotericsoftware.kryo.io.KryoDataInput:char readChar()",
            "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmCharField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$CharSerializer:java.lang.Character read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.ObjectField$ObjectCharField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeCharField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.UnsafeMemoryInput:double readDouble()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.Input:double[] readDoubles(int)",
            "com.esotericsoftware.kryo.io.KryoDataInput:double readDouble()",
            "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmDoubleField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$DoubleSerializer:java.lang.Double read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.ObjectField$ObjectDoubleField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeDoubleField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.UnsafeMemoryInput:int[] readInts(int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$IntArraySerializer:int[] read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.io.UnsafeMemoryInput:long[] readLongs(int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$LongArraySerializer:long[] read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.io.UnsafeMemoryInput:float[] readFloats(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$FloatArraySerializer:float[] read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.io.UnsafeMemoryInput:short[] readShorts(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ShortArraySerializer:short[] read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.io.UnsafeMemoryInput:char[] readChars(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$CharArraySerializer:char[] read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.io.UnsafeMemoryInput:double[] readDoubles(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$DoubleArraySerializer:double[] read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.io.UnsafeMemoryInput:void readBytes(java.lang.Object,long,long,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.UnsafeMemoryInput:int[] readInts(int,boolean)",
            "com.esotericsoftware.kryo.io.UnsafeMemoryInput:long[] readLongs(int,boolean)",
            "com.esotericsoftware.kryo.io.UnsafeMemoryInput:float[] readFloats(int)",
            "com.esotericsoftware.kryo.io.UnsafeMemoryInput:short[] readShorts(int)",
            "com.esotericsoftware.kryo.io.UnsafeMemoryInput:char[] readChars(int)",
            "com.esotericsoftware.kryo.io.UnsafeMemoryInput:double[] readDoubles(int)",
            "com.esotericsoftware.kryo.io.UnsafeMemoryInput:void readBytes(java.lang.Object,long,long)"
        ]
    },
    "com.esotericsoftware.kryo.io.UnsafeMemoryOutput:void writeInt(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.ByteBufferOutput:int writeInt(int,boolean)",
            "com.esotericsoftware.kryo.io.ByteBufferOutput:int writeVarInt(int,boolean)",
            "com.esotericsoftware.kryo.io.ByteBufferOutput:int writeVarLong(long,boolean)",
            "com.esotericsoftware.kryo.io.KryoDataOutput:void writeInt(int)",
            "com.esotericsoftware.kryo.io.Output:void writeFloat(float)",
            "com.esotericsoftware.kryo.io.Output:void writeInts(int[])",
            "com.esotericsoftware.kryo.io.UnsafeMemoryOutput:int writeInt(int,boolean)",
            "com.esotericsoftware.kryo.io.UnsafeMemoryOutput:void writeLittleEndianInt(int)",
            "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmIntField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.ObjectField$ObjectIntField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeIntField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.UnsafeMemoryOutput:void writeFloat(float)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.KryoDataOutput:void writeFloat(float)",
            "com.esotericsoftware.kryo.io.Output:void writeFloats(float[])",
            "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmFloatField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$FloatSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Float)",
            "com.esotericsoftware.kryo.serializers.ObjectField$ObjectFloatField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeFloatField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.UnsafeMemoryOutput:void writeShort(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.KryoDataOutput:void writeShort(int)",
            "com.esotericsoftware.kryo.io.Output:void writeShorts(short[])",
            "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmShortField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$ShortSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Short)",
            "com.esotericsoftware.kryo.serializers.ObjectField$ObjectShortField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeShortField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.UnsafeMemoryOutput:void writeLong(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.ByteBufferOutput:int writeVarInt(int,boolean)",
            "com.esotericsoftware.kryo.io.ByteBufferOutput:int writeLong(long,boolean)",
            "com.esotericsoftware.kryo.io.ByteBufferOutput:int writeVarLong(long,boolean)",
            "com.esotericsoftware.kryo.io.KryoDataOutput:void writeLong(long)",
            "com.esotericsoftware.kryo.io.Output:void writeDouble(double)",
            "com.esotericsoftware.kryo.io.Output:void writeLongs(long[])",
            "com.esotericsoftware.kryo.io.UnsafeMemoryOutput:int writeLong(long,boolean)",
            "com.esotericsoftware.kryo.io.UnsafeMemoryOutput:void writeLittleEndianLong(long)",
            "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmLongField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.ObjectField$ObjectLongField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeLongField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeRegionField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.UnsafeMemoryOutput:void writeChar(char)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.KryoDataOutput:void writeChar(int)",
            "com.esotericsoftware.kryo.io.Output:void writeChars(char[])",
            "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmCharField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$CharSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Character)",
            "com.esotericsoftware.kryo.serializers.ObjectField$ObjectCharField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeCharField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.UnsafeMemoryOutput:void writeDouble(double)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.KryoDataOutput:void writeDouble(double)",
            "com.esotericsoftware.kryo.io.Output:void writeDoubles(double[])",
            "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmDoubleField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$DoubleSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Double)",
            "com.esotericsoftware.kryo.serializers.ObjectField$ObjectDoubleField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeDoubleField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.UnsafeMemoryOutput:void writeInts(int[],boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$IntArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,int[])"
        ]
    },
    "com.esotericsoftware.kryo.io.UnsafeMemoryOutput:void writeLongs(long[],boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$LongArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,long[])"
        ]
    },
    "com.esotericsoftware.kryo.io.UnsafeMemoryOutput:void writeInts(int[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.io.UnsafeMemoryOutput:void writeLongs(long[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.io.UnsafeMemoryOutput:void writeFloats(float[])": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$FloatArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,float[])"
        ]
    },
    "com.esotericsoftware.kryo.io.UnsafeMemoryOutput:void writeShorts(short[])": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ShortArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,short[])"
        ]
    },
    "com.esotericsoftware.kryo.io.UnsafeMemoryOutput:void writeChars(char[])": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$CharArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,char[])"
        ]
    },
    "com.esotericsoftware.kryo.io.UnsafeMemoryOutput:void writeDoubles(double[])": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$DoubleArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,double[])"
        ]
    },
    "com.esotericsoftware.kryo.io.UnsafeMemoryOutput:void writeBytes(java.lang.Object,long,long,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.UnsafeMemoryOutput:void writeInts(int[],boolean)",
            "com.esotericsoftware.kryo.io.UnsafeMemoryOutput:void writeLongs(long[],boolean)",
            "com.esotericsoftware.kryo.io.UnsafeMemoryOutput:void writeInts(int[])",
            "com.esotericsoftware.kryo.io.UnsafeMemoryOutput:void writeLongs(long[])",
            "com.esotericsoftware.kryo.io.UnsafeMemoryOutput:void writeFloats(float[])",
            "com.esotericsoftware.kryo.io.UnsafeMemoryOutput:void writeShorts(short[])",
            "com.esotericsoftware.kryo.io.UnsafeMemoryOutput:void writeChars(char[])",
            "com.esotericsoftware.kryo.io.UnsafeMemoryOutput:void writeDoubles(double[])",
            "com.esotericsoftware.kryo.io.UnsafeMemoryOutput:void writeBytes(java.lang.Object,long,long)"
        ]
    },
    "com.esotericsoftware.kryo.io.UnsafeOutput:void writeInt(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.KryoDataOutput:void writeInt(int)",
            "com.esotericsoftware.kryo.io.Output:void writeFloat(float)",
            "com.esotericsoftware.kryo.io.Output:void writeInts(int[])",
            "com.esotericsoftware.kryo.io.UnsafeOutput:void writeLittleEndianInt(int)",
            "com.esotericsoftware.kryo.io.UnsafeOutput:int writeInt(int,boolean)",
            "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmIntField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.ObjectField$ObjectIntField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeIntField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.UnsafeOutput:void writeFloat(float)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.KryoDataOutput:void writeFloat(float)",
            "com.esotericsoftware.kryo.io.Output:void writeFloats(float[])",
            "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmFloatField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$FloatSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Float)",
            "com.esotericsoftware.kryo.serializers.ObjectField$ObjectFloatField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeFloatField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.UnsafeOutput:void writeShort(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.KryoDataOutput:void writeShort(int)",
            "com.esotericsoftware.kryo.io.Output:void writeShorts(short[])",
            "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmShortField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$ShortSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Short)",
            "com.esotericsoftware.kryo.serializers.ObjectField$ObjectShortField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeShortField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.UnsafeOutput:void writeLong(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.KryoDataOutput:void writeLong(long)",
            "com.esotericsoftware.kryo.io.Output:void writeDouble(double)",
            "com.esotericsoftware.kryo.io.Output:void writeLongs(long[])",
            "com.esotericsoftware.kryo.io.UnsafeOutput:void writeLittleEndianLong(long)",
            "com.esotericsoftware.kryo.io.UnsafeOutput:int writeLong(long,boolean)",
            "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmLongField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.ObjectField$ObjectLongField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeLongField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeRegionField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.UnsafeOutput:void writeDouble(double)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.KryoDataOutput:void writeDouble(double)",
            "com.esotericsoftware.kryo.io.Output:void writeDoubles(double[])",
            "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmDoubleField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$DoubleSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Double)",
            "com.esotericsoftware.kryo.serializers.ObjectField$ObjectDoubleField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeDoubleField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.UnsafeOutput:void writeChar(char)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.KryoDataOutput:void writeChar(int)",
            "com.esotericsoftware.kryo.io.Output:void writeChars(char[])",
            "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmCharField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$CharSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Character)",
            "com.esotericsoftware.kryo.serializers.ObjectField$ObjectCharField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeCharField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.UnsafeOutput:void writeInts(int[],boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$IntArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,int[])"
        ]
    },
    "com.esotericsoftware.kryo.io.UnsafeOutput:void writeLongs(long[],boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$LongArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,long[])"
        ]
    },
    "com.esotericsoftware.kryo.io.UnsafeOutput:void writeInts(int[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.io.UnsafeOutput:void writeLongs(long[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.io.UnsafeOutput:void writeFloats(float[])": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$FloatArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,float[])"
        ]
    },
    "com.esotericsoftware.kryo.io.UnsafeOutput:void writeShorts(short[])": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ShortArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,short[])"
        ]
    },
    "com.esotericsoftware.kryo.io.UnsafeOutput:void writeChars(char[])": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$CharArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,char[])"
        ]
    },
    "com.esotericsoftware.kryo.io.UnsafeOutput:void writeDoubles(double[])": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$DoubleArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,double[])"
        ]
    },
    "com.esotericsoftware.kryo.io.UnsafeOutput:void writeBytes(java.lang.Object,long,long,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.UnsafeOutput:void writeInts(int[],boolean)",
            "com.esotericsoftware.kryo.io.UnsafeOutput:void writeLongs(long[],boolean)",
            "com.esotericsoftware.kryo.io.UnsafeOutput:void writeInts(int[])",
            "com.esotericsoftware.kryo.io.UnsafeOutput:void writeLongs(long[])",
            "com.esotericsoftware.kryo.io.UnsafeOutput:void writeFloats(float[])",
            "com.esotericsoftware.kryo.io.UnsafeOutput:void writeShorts(short[])",
            "com.esotericsoftware.kryo.io.UnsafeOutput:void writeChars(char[])",
            "com.esotericsoftware.kryo.io.UnsafeOutput:void writeDoubles(double[])",
            "com.esotericsoftware.kryo.io.UnsafeOutput:void writeBytes(java.lang.Object,long,long)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.FieldSerializerUnsafeUtilImpl:int fieldSizeOf(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.FieldSerializerUnsafeUtilImpl:void createUnsafeCacheFieldsAndRegions(java.util.List,java.util.List,int,com.esotericsoftware.kryo.util.IntArray)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.FieldSerializerUnsafeUtilImpl:long getObjectFieldOffset(java.lang.reflect.Field)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.FieldSerializer:com.esotericsoftware.kryo.serializers.FieldSerializer$CachedField newCachedField(java.lang.reflect.Field,int,int)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeBooleanField:void <init>(java.lang.reflect.Field)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.UnsafeCachedFieldFactory:com.esotericsoftware.kryo.serializers.FieldSerializer$CachedField createCachedField(java.lang.Class,java.lang.reflect.Field,com.esotericsoftware.kryo.serializers.FieldSerializer)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeBooleanField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.CompatibleFieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.TaggedFieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeBooleanField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.CompatibleFieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.TaggedFieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeBooleanField:void copy(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.FieldSerializer:java.lang.Object copy(com.esotericsoftware.kryo.Kryo,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeByteField:void <init>(java.lang.reflect.Field)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.UnsafeCachedFieldFactory:com.esotericsoftware.kryo.serializers.FieldSerializer$CachedField createCachedField(java.lang.Class,java.lang.reflect.Field,com.esotericsoftware.kryo.serializers.FieldSerializer)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeByteField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.CompatibleFieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.TaggedFieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeByteField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.CompatibleFieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.TaggedFieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeByteField:void copy(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.FieldSerializer:java.lang.Object copy(com.esotericsoftware.kryo.Kryo,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeCharField:void <init>(java.lang.reflect.Field)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.UnsafeCachedFieldFactory:com.esotericsoftware.kryo.serializers.FieldSerializer$CachedField createCachedField(java.lang.Class,java.lang.reflect.Field,com.esotericsoftware.kryo.serializers.FieldSerializer)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeCharField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.CompatibleFieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.TaggedFieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeCharField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.CompatibleFieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.TaggedFieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeCharField:void copy(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.FieldSerializer:java.lang.Object copy(com.esotericsoftware.kryo.Kryo,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeDoubleField:void <init>(java.lang.reflect.Field)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.UnsafeCachedFieldFactory:com.esotericsoftware.kryo.serializers.FieldSerializer$CachedField createCachedField(java.lang.Class,java.lang.reflect.Field,com.esotericsoftware.kryo.serializers.FieldSerializer)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeDoubleField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.CompatibleFieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.TaggedFieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeDoubleField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.CompatibleFieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.TaggedFieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeDoubleField:void copy(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.FieldSerializer:java.lang.Object copy(com.esotericsoftware.kryo.Kryo,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeFloatField:void <init>(java.lang.reflect.Field)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.UnsafeCachedFieldFactory:com.esotericsoftware.kryo.serializers.FieldSerializer$CachedField createCachedField(java.lang.Class,java.lang.reflect.Field,com.esotericsoftware.kryo.serializers.FieldSerializer)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeFloatField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.CompatibleFieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.TaggedFieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeFloatField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.CompatibleFieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.TaggedFieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeFloatField:void copy(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.FieldSerializer:java.lang.Object copy(com.esotericsoftware.kryo.Kryo,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeIntField:void <init>(java.lang.reflect.Field)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.UnsafeCachedFieldFactory:com.esotericsoftware.kryo.serializers.FieldSerializer$CachedField createCachedField(java.lang.Class,java.lang.reflect.Field,com.esotericsoftware.kryo.serializers.FieldSerializer)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeIntField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.CompatibleFieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.TaggedFieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeIntField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.CompatibleFieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.TaggedFieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeIntField:void copy(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.FieldSerializer:java.lang.Object copy(com.esotericsoftware.kryo.Kryo,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeLongField:void <init>(java.lang.reflect.Field)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.UnsafeCachedFieldFactory:com.esotericsoftware.kryo.serializers.FieldSerializer$CachedField createCachedField(java.lang.Class,java.lang.reflect.Field,com.esotericsoftware.kryo.serializers.FieldSerializer)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeLongField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.CompatibleFieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.TaggedFieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeLongField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.CompatibleFieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.TaggedFieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeLongField:void copy(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.FieldSerializer:java.lang.Object copy(com.esotericsoftware.kryo.Kryo,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeObjectField:java.lang.Object getField(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.ObjectField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.ObjectField:void copy(java.lang.Object,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeObjectField:void setField(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.ObjectField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.ObjectField:void copy(java.lang.Object,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeRegionField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.CompatibleFieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.TaggedFieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeRegionField:void readSlow(com.esotericsoftware.kryo.io.Input,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeRegionField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeRegionField:void copy(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.FieldSerializer:java.lang.Object copy(com.esotericsoftware.kryo.Kryo,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeShortField:void <init>(java.lang.reflect.Field)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.UnsafeCachedFieldFactory:com.esotericsoftware.kryo.serializers.FieldSerializer$CachedField createCachedField(java.lang.Class,java.lang.reflect.Field,com.esotericsoftware.kryo.serializers.FieldSerializer)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeShortField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.CompatibleFieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.TaggedFieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeShortField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.CompatibleFieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.TaggedFieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeShortField:void copy(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.FieldSerializer:java.lang.Object copy(com.esotericsoftware.kryo.Kryo,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeStringField:void <init>(java.lang.reflect.Field)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.UnsafeCachedFieldFactory:com.esotericsoftware.kryo.serializers.FieldSerializer$CachedField createCachedField(java.lang.Class,java.lang.reflect.Field,com.esotericsoftware.kryo.serializers.FieldSerializer)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeStringField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.CompatibleFieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.TaggedFieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeStringField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.CompatibleFieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.TaggedFieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeStringField:void copy(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.FieldSerializer:java.lang.Object copy(com.esotericsoftware.kryo.Kryo,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.util.FastestStreamFactory:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.util.FastestStreamFactory:com.esotericsoftware.kryo.io.Input getInput()",
            "com.esotericsoftware.kryo.util.FastestStreamFactory:com.esotericsoftware.kryo.io.Input getInput(int)",
            "com.esotericsoftware.kryo.util.FastestStreamFactory:com.esotericsoftware.kryo.io.Input getInput(byte[])",
            "com.esotericsoftware.kryo.util.FastestStreamFactory:com.esotericsoftware.kryo.io.Input getInput(byte[],int,int)",
            "com.esotericsoftware.kryo.util.FastestStreamFactory:com.esotericsoftware.kryo.io.Input getInput(java.io.InputStream)",
            "com.esotericsoftware.kryo.util.FastestStreamFactory:com.esotericsoftware.kryo.io.Input getInput(java.io.InputStream,int)",
            "com.esotericsoftware.kryo.util.FastestStreamFactory:com.esotericsoftware.kryo.io.Output getOutput()",
            "com.esotericsoftware.kryo.util.FastestStreamFactory:com.esotericsoftware.kryo.io.Output getOutput(int)",
            "com.esotericsoftware.kryo.util.FastestStreamFactory:com.esotericsoftware.kryo.io.Output getOutput(int,int)",
            "com.esotericsoftware.kryo.util.FastestStreamFactory:com.esotericsoftware.kryo.io.Output getOutput(byte[])",
            "com.esotericsoftware.kryo.util.FastestStreamFactory:com.esotericsoftware.kryo.io.Output getOutput(byte[],int)",
            "com.esotericsoftware.kryo.util.FastestStreamFactory:com.esotericsoftware.kryo.io.Output getOutput(java.io.OutputStream)",
            "com.esotericsoftware.kryo.util.FastestStreamFactory:com.esotericsoftware.kryo.io.Output getOutput(java.io.OutputStream,int)",
            "com.esotericsoftware.kryo.util.FastestStreamFactory:void <clinit>()"
        ]
    },
    "com.esotericsoftware.kryo.util.UnsafeUtil$1:int compare(java.lang.reflect.Field,java.lang.reflect.Field)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.util.UnsafeUtil$1:int compare(java.lang.Object,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.util.UnsafeUtil:sun.misc.Unsafe unsafe()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.UnsafeInput:int readInt()",
            "com.esotericsoftware.kryo.io.UnsafeInput:float readFloat()",
            "com.esotericsoftware.kryo.io.UnsafeInput:short readShort()",
            "com.esotericsoftware.kryo.io.UnsafeInput:long readLong()",
            "com.esotericsoftware.kryo.io.UnsafeInput:double readDouble()",
            "com.esotericsoftware.kryo.io.UnsafeInput:char readChar()",
            "com.esotericsoftware.kryo.io.UnsafeInput:void readBytes(java.lang.Object,long,long,int)",
            "com.esotericsoftware.kryo.io.UnsafeMemoryInput:int readInt()",
            "com.esotericsoftware.kryo.io.UnsafeMemoryInput:float readFloat()",
            "com.esotericsoftware.kryo.io.UnsafeMemoryInput:short readShort()",
            "com.esotericsoftware.kryo.io.UnsafeMemoryInput:long readLong()",
            "com.esotericsoftware.kryo.io.UnsafeMemoryInput:char readChar()",
            "com.esotericsoftware.kryo.io.UnsafeMemoryInput:double readDouble()",
            "com.esotericsoftware.kryo.io.UnsafeMemoryInput:void readBytes(java.lang.Object,long,long,int)",
            "com.esotericsoftware.kryo.io.UnsafeMemoryOutput:void writeInt(int)",
            "com.esotericsoftware.kryo.io.UnsafeMemoryOutput:void writeFloat(float)",
            "com.esotericsoftware.kryo.io.UnsafeMemoryOutput:void writeShort(int)",
            "com.esotericsoftware.kryo.io.UnsafeMemoryOutput:void writeLong(long)",
            "com.esotericsoftware.kryo.io.UnsafeMemoryOutput:void writeChar(char)",
            "com.esotericsoftware.kryo.io.UnsafeMemoryOutput:void writeDouble(double)",
            "com.esotericsoftware.kryo.io.UnsafeMemoryOutput:void writeBytes(java.lang.Object,long,long,long)",
            "com.esotericsoftware.kryo.io.UnsafeOutput:void writeInt(int)",
            "com.esotericsoftware.kryo.io.UnsafeOutput:void writeFloat(float)",
            "com.esotericsoftware.kryo.io.UnsafeOutput:void writeShort(int)",
            "com.esotericsoftware.kryo.io.UnsafeOutput:void writeLong(long)",
            "com.esotericsoftware.kryo.io.UnsafeOutput:void writeDouble(double)",
            "com.esotericsoftware.kryo.io.UnsafeOutput:void writeChar(char)",
            "com.esotericsoftware.kryo.io.UnsafeOutput:void writeBytes(java.lang.Object,long,long,long)",
            "com.esotericsoftware.kryo.serializers.FieldSerializerUnsafeUtilImpl:void createUnsafeCacheFieldsAndRegions(java.util.List,java.util.List,int,com.esotericsoftware.kryo.util.IntArray)",
            "com.esotericsoftware.kryo.serializers.FieldSerializerUnsafeUtilImpl:int fieldSizeOf(java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.FieldSerializerUnsafeUtilImpl:long getObjectFieldOffset(java.lang.reflect.Field)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeBooleanField:void <init>(java.lang.reflect.Field)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeBooleanField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeBooleanField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeBooleanField:void copy(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeByteField:void <init>(java.lang.reflect.Field)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeByteField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeByteField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeByteField:void copy(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeCharField:void <init>(java.lang.reflect.Field)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeCharField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeCharField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeCharField:void copy(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeDoubleField:void <init>(java.lang.reflect.Field)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeDoubleField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeDoubleField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeDoubleField:void copy(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeFloatField:void <init>(java.lang.reflect.Field)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeFloatField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeFloatField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeFloatField:void copy(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeIntField:void <init>(java.lang.reflect.Field)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeIntField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeIntField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeIntField:void copy(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeLongField:void <init>(java.lang.reflect.Field)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeLongField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeLongField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeLongField:void copy(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeObjectField:java.lang.Object getField(java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeObjectField:void setField(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeObjectField:void copy(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeRegionField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeRegionField:void readSlow(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeRegionField:void copy(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeShortField:void <init>(java.lang.reflect.Field)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeShortField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeShortField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeShortField:void copy(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeStringField:void <init>(java.lang.reflect.Field)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeStringField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeStringField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeStringField:void copy(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.FastestStreamFactory:void <clinit>()",
            "com.esotericsoftware.kryo.util.UnsafeUtil$1:int compare(java.lang.reflect.Field,java.lang.reflect.Field)",
            "com.esotericsoftware.kryo.util.UnsafeUtil:java.lang.reflect.Field[] sortFieldsByOffset(java.util.List)"
        ]
    },
    "com.esotericsoftware.kryo.util.UnsafeUtil:java.nio.ByteBuffer getDirectBufferAt(long,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.ByteBufferInput:void <init>(long,int)",
            "com.esotericsoftware.kryo.io.ByteBufferOutput:void <init>(long,int)"
        ]
    },
    "org.apache.commons.lang.text.StrSubstitutor:boolean replaceIn(java.lang.StringBuffer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.ArrayUtils:java.lang.String toString(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.ArrayUtils:java.lang.String toString(java.lang.Object)"
        ]
    },
    "org.apache.commons.lang3.AnnotationUtils:java.lang.String toString(java.lang.'annotation'.Annotation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.AnnotationUtils$1:void appendDetail(java.lang.StringBuffer,java.lang.String,java.lang.Object)"
        ]
    },
    "org.apache.commons.lang3.builder.ReflectionToStringBuilder:void appendFieldsIn(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.builder.ReflectionToStringBuilder:java.lang.String toString()"
        ]
    },
    "org.apache.commons.lang3.builder.ToStringBuilder:org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.builder.ToStringBuilder:org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.builder.ToStringBuilder:org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,java.lang.Object[],boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.builder.ReflectionToStringBuilder:java.lang.String toString(java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle,boolean,boolean,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.builder.ReflectionToStringBuilder:java.lang.String toString(java.lang.Object)",
            "org.apache.commons.lang3.builder.ReflectionToStringBuilder:java.lang.String toString(java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle)",
            "org.apache.commons.lang3.builder.ReflectionToStringBuilder:java.lang.String toString(java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle,boolean)",
            "org.apache.commons.lang3.builder.ReflectionToStringBuilder:java.lang.String toString(java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle,boolean,boolean)",
            "org.apache.commons.lang3.builder.ToStringBuilder:java.lang.String reflectionToString(java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle,boolean)",
            "org.apache.commons.lang3.builder.ToStringBuilder:java.lang.String reflectionToString(java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle,boolean,java.lang.Class)"
        ]
    },
    "org.apache.commons.lang3.builder.ReflectionToStringBuilder:void <init>(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.builder.ReflectionToStringBuilder:java.lang.String toStringExclude(java.lang.Object,java.lang.String[])"
        ]
    },
    "org.apache.commons.lang3.builder.ReflectionToStringBuilder:void <init>(java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.text.StrSubstitutor:java.lang.String replace(java.lang.CharSequence)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.text.StrSubstitutor:boolean replaceIn(java.lang.StringBuffer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.text.StrSubstitutor:boolean replaceIn(java.lang.StringBuilder)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.time.FastDateFormat$1:org.apache.commons.lang3.time.FastDateFormat createInstance(java.lang.String,java.util.TimeZone,java.util.Locale)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.time.FastDateFormat$1:java.text.Format createInstance(java.lang.String,java.util.TimeZone,java.util.Locale)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.AbstractNioWorkerPool:void <init>(java.util.concurrent.Executor,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.AbstractNioWorkerPool:void <init>(java.util.concurrent.Executor,int)",
            "org.jboss.netty.channel.socket.nio.NioWorkerPool:void <init>(java.util.concurrent.Executor,int,org.jboss.netty.util.ThreadNameDeterminer)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioWorkerPool:void <init>(java.util.concurrent.Executor,int,org.jboss.netty.util.ThreadNameDeterminer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.NioWorkerPool:void <init>(java.util.concurrent.Executor,int)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioClientSocketChannelFactory:void <init>(java.util.concurrent.Executor,int,org.jboss.netty.channel.socket.nio.WorkerPool)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.NioClientSocketChannelFactory:void <init>(java.util.concurrent.Executor,java.util.concurrent.Executor,int,int)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioServerSocketChannelFactory:void <init>(java.util.concurrent.Executor,int,java.util.concurrent.Executor,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.NioServerSocketChannelFactory:void <init>(java.util.concurrent.Executor,java.util.concurrent.Executor,int)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioServerSocketChannelFactory:void <init>(java.util.concurrent.Executor,org.jboss.netty.channel.socket.nio.WorkerPool)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.graph.DijkstraGraphSearch:org.onlab.graph.Heap createMinQueue(java.util.Set,java.util.Comparator)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.graph.DijkstraGraphSearch:org.onlab.graph.GraphPathSearch$Result search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)"
        ]
    },
    "org.apache.commons.lang.builder.CompareToBuilder:int reflectionCompare(java.lang.Object,java.lang.Object,boolean,java.lang.Class,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.builder.CompareToBuilder:int reflectionCompare(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang.builder.CompareToBuilder:int reflectionCompare(java.lang.Object,java.lang.Object,boolean)",
            "org.apache.commons.lang.builder.CompareToBuilder:int reflectionCompare(java.lang.Object,java.lang.Object,java.lang.String[])",
            "org.apache.commons.lang.builder.CompareToBuilder:int reflectionCompare(java.lang.Object,java.lang.Object,boolean,java.lang.Class)"
        ]
    },
    "org.apache.commons.lang3.builder.CompareToBuilder:int reflectionCompare(java.lang.Object,java.lang.Object,boolean,java.lang.Class,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.builder.CompareToBuilder:int reflectionCompare(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang3.builder.CompareToBuilder:int reflectionCompare(java.lang.Object,java.lang.Object,boolean)",
            "org.apache.commons.lang3.builder.CompareToBuilder:int reflectionCompare(java.lang.Object,java.lang.Object,java.lang.String[])"
        ]
    },
    "org.apache.commons.lang3.tuple.Pair:int compareTo(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.builder.CompareToBuilder:org.apache.commons.lang.builder.CompareToBuilder append(java.lang.Object,java.lang.Object,java.util.Comparator)",
            "org.apache.commons.lang.math.NumberRange:void <init>(java.lang.Number,java.lang.Number)",
            "org.apache.commons.lang.math.NumberRange:boolean containsNumber(java.lang.Number)",
            "org.apache.commons.lang.ObjectUtils:int compare(java.lang.Comparable,java.lang.Comparable,boolean)",
            "org.apache.commons.lang3.builder.CompareToBuilder:org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object,java.util.Comparator)",
            "org.apache.commons.lang3.ObjectUtils:int compare(java.lang.Comparable,java.lang.Comparable,boolean)",
            "org.apache.commons.lang3.Range$ComparableComparator:int compare(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang3.Validate:void inclusiveBetween(java.lang.Object,java.lang.Object,java.lang.Comparable)",
            "org.apache.commons.lang3.Validate:void inclusiveBetween(java.lang.Object,java.lang.Object,java.lang.Comparable,java.lang.String,java.lang.Object[])",
            "org.apache.commons.lang3.Validate:void exclusiveBetween(java.lang.Object,java.lang.Object,java.lang.Comparable)",
            "org.apache.commons.lang3.Validate:void exclusiveBetween(java.lang.Object,java.lang.Object,java.lang.Comparable,java.lang.String,java.lang.Object[])"
        ]
    },
    "org.apache.commons.lang3.tuple.Triple:int compareTo(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.builder.CompareToBuilder:org.apache.commons.lang.builder.CompareToBuilder append(java.lang.Object,java.lang.Object,java.util.Comparator)",
            "org.apache.commons.lang.math.NumberRange:void <init>(java.lang.Number,java.lang.Number)",
            "org.apache.commons.lang.math.NumberRange:boolean containsNumber(java.lang.Number)",
            "org.apache.commons.lang.ObjectUtils:int compare(java.lang.Comparable,java.lang.Comparable,boolean)",
            "org.apache.commons.lang3.builder.CompareToBuilder:org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object,java.util.Comparator)",
            "org.apache.commons.lang3.ObjectUtils:int compare(java.lang.Comparable,java.lang.Comparable,boolean)",
            "org.apache.commons.lang3.Range$ComparableComparator:int compare(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang3.Validate:void inclusiveBetween(java.lang.Object,java.lang.Object,java.lang.Comparable)",
            "org.apache.commons.lang3.Validate:void inclusiveBetween(java.lang.Object,java.lang.Object,java.lang.Comparable,java.lang.String,java.lang.Object[])",
            "org.apache.commons.lang3.Validate:void exclusiveBetween(java.lang.Object,java.lang.Object,java.lang.Comparable)",
            "org.apache.commons.lang3.Validate:void exclusiveBetween(java.lang.Object,java.lang.Object,java.lang.Comparable,java.lang.String,java.lang.Object[])"
        ]
    },
    "org.onlab.packet.LLDP$lambda_deserializer_11__71:org.onlab.packet.IPacket deserialize(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.EAPOL:org.onlab.packet.EAPOL lambda$deserializer$53(byte[],int,int)",
            "org.onlab.packet.Ethernet:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.Ethernet:org.onlab.packet.Ethernet lambda$deserializer$10(byte[],int,int)",
            "org.onlab.packet.ICMP:org.onlab.packet.ICMP lambda$deserializer$29(byte[],int,int)",
            "org.onlab.packet.ICMP6:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ICMP6:org.onlab.packet.ICMP6 lambda$deserializer$40(byte[],int,int)",
            "org.onlab.packet.IGMP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IPv4:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IPv4:org.onlab.packet.IPv4 lambda$deserializer$24(byte[],int,int)",
            "org.onlab.packet.IPv6:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IPv6:org.onlab.packet.IPv6 lambda$deserializer$48(byte[],int,int)",
            "org.onlab.packet.MPLS:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.MPLS:org.onlab.packet.MPLS lambda$deserializer$12(byte[],int,int)",
            "org.onlab.packet.PIM:org.onlab.packet.PIM lambda$deserializer$49(byte[],int,int)",
            "org.onlab.packet.TCP:org.onlab.packet.TCP lambda$deserializer$39(byte[],int,int)",
            "org.onlab.packet.UDP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.UDP:org.onlab.packet.UDP lambda$deserializer$45(byte[],int,int)",
            "org.onlab.packet.ipv6.Authentication:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Authentication:org.onlab.packet.ipv6.Authentication lambda$deserializer$46(byte[],int,int)",
            "org.onlab.packet.ipv6.BaseOptions:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.BaseOptions:org.onlab.packet.ipv6.BaseOptions lambda$deserializer$13(byte[],int,int)",
            "org.onlab.packet.ipv6.EncapSecurityPayload:org.onlab.packet.ipv6.EncapSecurityPayload lambda$deserializer$51(byte[],int,int)",
            "org.onlab.packet.ipv6.Fragment:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Fragment:org.onlab.packet.ipv6.Fragment lambda$deserializer$26(byte[],int,int)",
            "org.onlab.packet.ipv6.Routing:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Routing:org.onlab.packet.ipv6.Routing lambda$deserializer$50(byte[],int,int)",
            "org.onlab.packet.ndp.NeighborAdvertisement:org.onlab.packet.ndp.NeighborAdvertisement lambda$deserializer$1(byte[],int,int)",
            "org.onlab.packet.ndp.NeighborSolicitation:org.onlab.packet.ndp.NeighborSolicitation lambda$deserializer$42(byte[],int,int)",
            "org.onlab.packet.ndp.Redirect:org.onlab.packet.ndp.Redirect lambda$deserializer$47(byte[],int,int)",
            "org.onlab.packet.ndp.RouterAdvertisement:org.onlab.packet.ndp.RouterAdvertisement lambda$deserializer$41(byte[],int,int)",
            "org.onlab.packet.ndp.RouterSolicitation:org.onlab.packet.ndp.RouterSolicitation lambda$deserializer$44(byte[],int,int)"
        ]
    },
    "org.onlab.packet.Ip4Address:org.onlab.packet.Ip4Address valueOf(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.IGMPMembership:org.onlab.packet.IGMPGroup deserialize(java.nio.ByteBuffer)",
            "org.onlab.packet.IGMPQuery:org.onlab.packet.IGMPGroup deserialize(java.nio.ByteBuffer)",
            "org.onlab.packet.Ip4Prefix:org.onlab.packet.Ip4Prefix valueOf(int,int)"
        ]
    },
    "org.onlab.packet.Ip4Address:org.onlab.packet.Ip4Address valueOf(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.Ip4Address:org.onlab.packet.Ip4Address valueOf(byte[],int)",
            "org.onlab.packet.Ip4Address:org.onlab.packet.Ip4Address makeMaskedAddress(org.onlab.packet.Ip4Address,int)",
            "org.onlab.packet.Ip4Prefix:org.onlab.packet.Ip4Prefix valueOf(byte[],int)",
            "org.onlab.packet.IpAddress:org.onlab.packet.Ip4Address getIp4Address()"
        ]
    },
    "org.onlab.packet.Ip4Address:org.onlab.packet.Ip4Address valueOf(java.net.InetAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.Ip4Address:org.onlab.packet.Ip4Address valueOf(java.lang.String)"
        ]
    },
    "org.onlab.packet.Ip4Address:org.onlab.packet.Ip4Address makeMaskPrefix(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.packet.Ip6Address:org.onlab.packet.Ip6Address valueOf(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.Ethernet:java.lang.String toString()",
            "org.onlab.packet.Ip6Address:org.onlab.packet.Ip6Address valueOf(byte[],int)",
            "org.onlab.packet.Ip6Address:org.onlab.packet.Ip6Address makeMaskedAddress(org.onlab.packet.Ip6Address,int)",
            "org.onlab.packet.Ip6Prefix:org.onlab.packet.Ip6Prefix valueOf(byte[],int)",
            "org.onlab.packet.IpAddress:org.onlab.packet.Ip6Address getIp6Address()"
        ]
    },
    "org.onlab.packet.Ip6Address:org.onlab.packet.Ip6Address valueOf(java.net.InetAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.Ip6Address:org.onlab.packet.Ip6Address valueOf(java.lang.String)"
        ]
    },
    "org.onlab.packet.Ip6Address:org.onlab.packet.Ip6Address makeMaskPrefix(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.packet.IpPrefix:org.onlab.packet.IpPrefix valueOf(int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.packet.pim.PIMAddrGroup:org.onlab.packet.pim.PIMAddrGroup deserialize(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.pim.PIMJoinPrune:org.onlab.packet.pim.PIMJoinPrune lambda$deserializer$31(byte[],int,int)"
        ]
    },
    "org.onlab.packet.pim.PIMAddrSource:org.onlab.packet.pim.PIMAddrSource deserialize(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.pim.PIMAddrSource:org.onlab.packet.pim.PIMAddrSource deserialize(byte[],int,int)",
            "org.onlab.packet.pim.PIMJoinPrune:org.onlab.packet.pim.PIMJoinPrune lambda$deserializer$31(byte[],int,int)"
        ]
    },
    "org.onlab.packet.pim.PIMAddrUnicast:org.onlab.packet.pim.PIMAddrUnicast deserialize(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.pim.PIMJoinPrune:org.onlab.packet.pim.PIMJoinPrune lambda$deserializer$31(byte[],int,int)"
        ]
    },
    "org.onlab.packet.IpAddress:org.onlab.packet.IpAddress valueOf(org.onlab.packet.IpAddress$Version,byte[],int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.packet.IpAddress:org.onlab.packet.IpAddress makeMaskedAddress(org.onlab.packet.IpAddress,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.IpPrefix:void <init>(org.onlab.packet.IpAddress,int)",
            "org.onlab.packet.IpPrefix:boolean contains(org.onlab.packet.IpPrefix)",
            "org.onlab.packet.IpPrefix:boolean contains(org.onlab.packet.IpAddress)"
        ]
    },
    "org.onlab.packet.IpPrefix:org.onlab.packet.IpPrefix valueOf(org.onlab.packet.IpAddress$Version,byte[],int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.packet.IpAddress:org.onlab.packet.IpAddress valueOf(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.IpPrefix:org.onlab.packet.IpPrefix valueOf(java.lang.String)",
            "org.onlab.packet.PIM:void <clinit>()",
            "org.onlab.packet.pim.PIMAddrUnicast:void <init>(java.lang.String)"
        ]
    },
    "org.onlab.packet.pim.PIMJoinPrune:org.onlab.packet.pim.PIMJoinPrune lambda$deserializer$31(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.pim.PIMJoinPrune$lambda_deserializer_31__93:org.onlab.packet.IPacket deserialize(byte[],int,int)"
        ]
    },
    "org.onlab.packet.Ip4Address:org.onlab.packet.Ip4Address valueOf(byte[],int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.packet.Ip6Address:org.onlab.packet.Ip6Address valueOf(byte[],int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.pim.PIMAddrGroup:org.onlab.packet.pim.PIMAddrGroup deserialize(java.nio.ByteBuffer)",
            "org.onlab.packet.pim.PIMAddrSource:org.onlab.packet.pim.PIMAddrSource deserialize(java.nio.ByteBuffer)",
            "org.onlab.packet.pim.PIMAddrUnicast:org.onlab.packet.pim.PIMAddrUnicast deserialize(java.nio.ByteBuffer)"
        ]
    },
    "org.onlab.packet.IpAddress:byte[] makeMaskedAddressArray(org.onlab.packet.IpAddress,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.Ip4Address:org.onlab.packet.Ip4Address makeMaskedAddress(org.onlab.packet.Ip4Address,int)",
            "org.onlab.packet.Ip6Address:org.onlab.packet.Ip6Address makeMaskedAddress(org.onlab.packet.Ip6Address,int)",
            "org.onlab.packet.IpAddress:org.onlab.packet.IpAddress makeMaskedAddress(org.onlab.packet.IpAddress,int)"
        ]
    },
    "org.onlab.packet.Ip4Prefix:void <init>(org.onlab.packet.Ip4Address,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.Ip4Prefix:org.onlab.packet.Ip4Prefix valueOf(int,int)",
            "org.onlab.packet.Ip4Prefix:org.onlab.packet.Ip4Prefix valueOf(byte[],int)",
            "org.onlab.packet.Ip4Prefix:org.onlab.packet.Ip4Prefix valueOf(org.onlab.packet.Ip4Address,int)",
            "org.onlab.packet.Ip4Prefix:org.onlab.packet.Ip4Prefix valueOf(java.lang.String)"
        ]
    },
    "org.onlab.packet.Ip6Prefix:void <init>(org.onlab.packet.Ip6Address,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.Ip6Prefix:org.onlab.packet.Ip6Prefix valueOf(byte[],int)",
            "org.onlab.packet.Ip6Prefix:org.onlab.packet.Ip6Prefix valueOf(org.onlab.packet.Ip6Address,int)",
            "org.onlab.packet.Ip6Prefix:org.onlab.packet.Ip6Prefix valueOf(java.lang.String)"
        ]
    },
    "org.onlab.packet.IpPrefix:org.onlab.packet.IpPrefix valueOf(org.onlab.packet.IpAddress,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.IpAddress:org.onlab.packet.IpPrefix toIpPrefix()"
        ]
    },
    "org.onlab.packet.IpPrefix:org.onlab.packet.IpPrefix valueOf(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.pim.PIMAddrGroup:void setAddr(java.lang.String)",
            "org.onlab.packet.pim.PIMAddrSource:void setAddr(java.lang.String)",
            "org.onlab.packet.pim.PIMJoinPrune:void addJoinPrune(java.lang.String,java.lang.String,boolean)"
        ]
    },
    "org.jboss.netty.buffer.ChannelBuffers:org.jboss.netty.buffer.ChannelBuffer wrappedBuffer(org.jboss.netty.buffer.ChannelBuffer[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.frame.FrameDecoder:org.jboss.netty.buffer.ChannelBuffer appendToCumulation(org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.frame.LengthFieldPrepender:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)",
            "org.jboss.netty.handler.codec.http.HttpChunkAggregator:void appendToCumulation(org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.http.HttpContentDecoder:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.codec.http.HttpContentDecoder:org.jboss.netty.buffer.ChannelBuffer decode(org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.http.HttpContentDecoder:org.jboss.netty.buffer.ChannelBuffer finishDecode()",
            "org.jboss.netty.handler.codec.http.HttpContentEncoder:void writeRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.codec.http.HttpContentEncoder:org.jboss.netty.buffer.ChannelBuffer encode(org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.http.HttpContentEncoder:org.jboss.netty.buffer.ChannelBuffer finishEncode()",
            "org.jboss.netty.handler.codec.http.HttpMessageEncoder:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)",
            "org.jboss.netty.handler.codec.http.multipart.AbstractMemoryHttpData:void addContent(org.jboss.netty.buffer.ChannelBuffer,boolean)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void offer(org.jboss.netty.handler.codec.http.HttpChunk)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder:org.jboss.netty.handler.codec.http.HttpChunk encodeNextChunkMultipart(int)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder:org.jboss.netty.handler.codec.http.HttpChunk encodeNextChunkUrlEncoded(int)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void offer(org.jboss.netty.handler.codec.http.HttpChunk)",
            "org.jboss.netty.handler.codec.http.multipart.InternalAttribute:org.jboss.netty.buffer.ChannelBuffer toChannelBuffer()",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocket08FrameEncoder:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)",
            "org.jboss.netty.handler.codec.protobuf.ProtobufVarint32LengthFieldPrepender:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)",
            "org.jboss.netty.handler.codec.spdy.SpdyFrameEncoder:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.queue.BufferedWriteHandler:java.util.List consolidatedWrite(java.util.List)"
        ]
    },
    "org.jboss.netty.buffer.ChannelBuffers:org.jboss.netty.buffer.ChannelBuffer copiedBuffer(org.jboss.netty.buffer.ChannelBuffer[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.buffer.ChannelBuffers:org.jboss.netty.buffer.ChannelBuffer copiedBuffer(java.nio.ByteBuffer[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.buffer.AbstractChannelBuffer:org.jboss.netty.buffer.ChannelBuffer readSlice(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.buffer.AbstractChannelBuffer:org.jboss.netty.buffer.ChannelBuffer readSlice(org.jboss.netty.buffer.ChannelBufferIndexFinder)",
            "org.jboss.netty.handler.codec.replay.ReplayingDecoderBuffer:org.jboss.netty.buffer.ChannelBuffer readSlice(org.jboss.netty.buffer.ChannelBufferIndexFinder)",
            "org.jboss.netty.handler.codec.replay.ReplayingDecoderBuffer:org.jboss.netty.buffer.ChannelBuffer readSlice(int)",
            "org.jboss.netty.handler.codec.spdy.SpdyHttpEncoder:org.jboss.netty.handler.codec.spdy.SpdyDataFrame[] createSpdyDataFrames(int,org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:void updateSendWindowSize(org.jboss.netty.channel.ChannelHandlerContext,int,int)"
        ]
    },
    "org.jboss.netty.buffer.AbstractChannelBuffer:org.jboss.netty.buffer.ChannelBuffer slice()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.buffer.ChannelBuffers:org.jboss.netty.buffer.ChannelBuffer wrappedBuffer(org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.buffer.ChannelBuffers:org.jboss.netty.buffer.ChannelBuffer wrappedBuffer(boolean,org.jboss.netty.buffer.ChannelBuffer[])",
            "org.jboss.netty.buffer.CompositeChannelBuffer:java.util.List decompose(int,int)",
            "org.jboss.netty.handler.codec.frame.FrameDecoder:org.jboss.netty.buffer.ChannelBuffer updateCumulation(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.buffer.ChannelBuffer)"
        ]
    },
    "org.jboss.netty.buffer.DirectChannelBufferFactory:org.jboss.netty.buffer.ChannelBuffer allocateBigEndianBuffer(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.buffer.DirectChannelBufferFactory:org.jboss.netty.buffer.ChannelBuffer getBuffer(java.nio.ByteOrder,int)"
        ]
    },
    "org.jboss.netty.buffer.DirectChannelBufferFactory:org.jboss.netty.buffer.ChannelBuffer allocateLittleEndianBuffer(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.buffer.DirectChannelBufferFactory:org.jboss.netty.buffer.ChannelBuffer getBuffer(java.nio.ByteOrder,int)"
        ]
    },
    "org.jboss.netty.buffer.DuplicatedChannelBuffer:org.jboss.netty.buffer.ChannelBuffer slice(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.buffer.AbstractChannelBuffer:org.jboss.netty.buffer.ChannelBuffer readSlice(int)",
            "org.jboss.netty.buffer.AbstractChannelBuffer:org.jboss.netty.buffer.ChannelBuffer slice()",
            "org.jboss.netty.buffer.DirectChannelBufferFactory:org.jboss.netty.buffer.ChannelBuffer allocateBigEndianBuffer(int)",
            "org.jboss.netty.buffer.DirectChannelBufferFactory:org.jboss.netty.buffer.ChannelBuffer allocateLittleEndianBuffer(int)",
            "org.jboss.netty.buffer.DuplicatedChannelBuffer:org.jboss.netty.buffer.ChannelBuffer slice(int,int)",
            "org.jboss.netty.buffer.ReadOnlyChannelBuffer:org.jboss.netty.buffer.ChannelBuffer slice(int,int)",
            "org.jboss.netty.buffer.TruncatedChannelBuffer:org.jboss.netty.buffer.ChannelBuffer slice(int,int)",
            "org.jboss.netty.handler.codec.base64.Base64:org.jboss.netty.buffer.ChannelBuffer encode(org.jboss.netty.buffer.ChannelBuffer,int,int,boolean,org.jboss.netty.handler.codec.base64.Base64Dialect,org.jboss.netty.buffer.ChannelBufferFactory)",
            "org.jboss.netty.handler.codec.base64.Base64:org.jboss.netty.buffer.ChannelBuffer decode(org.jboss.netty.buffer.ChannelBuffer,int,int,org.jboss.netty.handler.codec.base64.Base64Dialect,org.jboss.netty.buffer.ChannelBufferFactory)",
            "org.jboss.netty.handler.codec.frame.DelimiterBasedFrameDecoder:void <init>(int,boolean,boolean,org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.frame.DelimiterBasedFrameDecoder:void <init>(int,boolean,boolean,org.jboss.netty.buffer.ChannelBuffer[])",
            "org.jboss.netty.handler.codec.http.HttpMessageEncoder:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)",
            "org.jboss.netty.handler.codec.http.multipart.AbstractMemoryHttpData:org.jboss.netty.buffer.ChannelBuffer getChunk(int)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void readFileUploadByteMultipartStandard(java.lang.String)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void readFileUploadByteMultipart(java.lang.String)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void loadFieldMultipartStandard(java.lang.String)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void loadFieldMultipart(java.lang.String)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder:org.jboss.netty.buffer.ChannelBuffer fillChannelBuffer()",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributesStandard()",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributes()",
            "org.jboss.netty.handler.codec.marshalling.MarshallingDecoder:org.jboss.netty.buffer.ChannelBuffer extractFrame(org.jboss.netty.buffer.ChannelBuffer,int,int)",
            "org.jboss.netty.handler.codec.replay.ReplayingDecoder:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.codec.replay.ReplayingDecoderBuffer:org.jboss.netty.buffer.ChannelBuffer slice(int,int)",
            "org.jboss.netty.handler.codec.serialization.ObjectDecoder:org.jboss.netty.buffer.ChannelBuffer extractFrame(org.jboss.netty.buffer.ChannelBuffer,int,int)",
            "org.jboss.netty.handler.codec.spdy.SpdyFrameDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)"
        ]
    },
    "org.jboss.netty.buffer.ReadOnlyChannelBuffer:org.jboss.netty.buffer.ChannelBuffer slice(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.buffer.AbstractChannelBuffer:org.jboss.netty.buffer.ChannelBuffer readSlice(int)",
            "org.jboss.netty.buffer.AbstractChannelBuffer:org.jboss.netty.buffer.ChannelBuffer slice()",
            "org.jboss.netty.buffer.DirectChannelBufferFactory:org.jboss.netty.buffer.ChannelBuffer allocateBigEndianBuffer(int)",
            "org.jboss.netty.buffer.DirectChannelBufferFactory:org.jboss.netty.buffer.ChannelBuffer allocateLittleEndianBuffer(int)",
            "org.jboss.netty.buffer.DuplicatedChannelBuffer:org.jboss.netty.buffer.ChannelBuffer slice(int,int)",
            "org.jboss.netty.buffer.ReadOnlyChannelBuffer:org.jboss.netty.buffer.ChannelBuffer slice(int,int)",
            "org.jboss.netty.buffer.TruncatedChannelBuffer:org.jboss.netty.buffer.ChannelBuffer slice(int,int)",
            "org.jboss.netty.handler.codec.base64.Base64:org.jboss.netty.buffer.ChannelBuffer encode(org.jboss.netty.buffer.ChannelBuffer,int,int,boolean,org.jboss.netty.handler.codec.base64.Base64Dialect,org.jboss.netty.buffer.ChannelBufferFactory)",
            "org.jboss.netty.handler.codec.base64.Base64:org.jboss.netty.buffer.ChannelBuffer decode(org.jboss.netty.buffer.ChannelBuffer,int,int,org.jboss.netty.handler.codec.base64.Base64Dialect,org.jboss.netty.buffer.ChannelBufferFactory)",
            "org.jboss.netty.handler.codec.frame.DelimiterBasedFrameDecoder:void <init>(int,boolean,boolean,org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.frame.DelimiterBasedFrameDecoder:void <init>(int,boolean,boolean,org.jboss.netty.buffer.ChannelBuffer[])",
            "org.jboss.netty.handler.codec.http.HttpMessageEncoder:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)",
            "org.jboss.netty.handler.codec.http.multipart.AbstractMemoryHttpData:org.jboss.netty.buffer.ChannelBuffer getChunk(int)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void readFileUploadByteMultipartStandard(java.lang.String)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void readFileUploadByteMultipart(java.lang.String)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void loadFieldMultipartStandard(java.lang.String)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void loadFieldMultipart(java.lang.String)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder:org.jboss.netty.buffer.ChannelBuffer fillChannelBuffer()",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributesStandard()",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributes()",
            "org.jboss.netty.handler.codec.marshalling.MarshallingDecoder:org.jboss.netty.buffer.ChannelBuffer extractFrame(org.jboss.netty.buffer.ChannelBuffer,int,int)",
            "org.jboss.netty.handler.codec.replay.ReplayingDecoder:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.codec.replay.ReplayingDecoderBuffer:org.jboss.netty.buffer.ChannelBuffer slice(int,int)",
            "org.jboss.netty.handler.codec.serialization.ObjectDecoder:org.jboss.netty.buffer.ChannelBuffer extractFrame(org.jboss.netty.buffer.ChannelBuffer,int,int)",
            "org.jboss.netty.handler.codec.spdy.SpdyFrameDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)"
        ]
    },
    "org.jboss.netty.buffer.TruncatedChannelBuffer:org.jboss.netty.buffer.ChannelBuffer slice(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.buffer.AbstractChannelBuffer:org.jboss.netty.buffer.ChannelBuffer readSlice(int)",
            "org.jboss.netty.buffer.AbstractChannelBuffer:org.jboss.netty.buffer.ChannelBuffer slice()",
            "org.jboss.netty.buffer.DirectChannelBufferFactory:org.jboss.netty.buffer.ChannelBuffer allocateBigEndianBuffer(int)",
            "org.jboss.netty.buffer.DirectChannelBufferFactory:org.jboss.netty.buffer.ChannelBuffer allocateLittleEndianBuffer(int)",
            "org.jboss.netty.buffer.DuplicatedChannelBuffer:org.jboss.netty.buffer.ChannelBuffer slice(int,int)",
            "org.jboss.netty.buffer.ReadOnlyChannelBuffer:org.jboss.netty.buffer.ChannelBuffer slice(int,int)",
            "org.jboss.netty.buffer.TruncatedChannelBuffer:org.jboss.netty.buffer.ChannelBuffer slice(int,int)",
            "org.jboss.netty.handler.codec.base64.Base64:org.jboss.netty.buffer.ChannelBuffer encode(org.jboss.netty.buffer.ChannelBuffer,int,int,boolean,org.jboss.netty.handler.codec.base64.Base64Dialect,org.jboss.netty.buffer.ChannelBufferFactory)",
            "org.jboss.netty.handler.codec.base64.Base64:org.jboss.netty.buffer.ChannelBuffer decode(org.jboss.netty.buffer.ChannelBuffer,int,int,org.jboss.netty.handler.codec.base64.Base64Dialect,org.jboss.netty.buffer.ChannelBufferFactory)",
            "org.jboss.netty.handler.codec.frame.DelimiterBasedFrameDecoder:void <init>(int,boolean,boolean,org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.frame.DelimiterBasedFrameDecoder:void <init>(int,boolean,boolean,org.jboss.netty.buffer.ChannelBuffer[])",
            "org.jboss.netty.handler.codec.http.HttpMessageEncoder:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)",
            "org.jboss.netty.handler.codec.http.multipart.AbstractMemoryHttpData:org.jboss.netty.buffer.ChannelBuffer getChunk(int)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void readFileUploadByteMultipartStandard(java.lang.String)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void readFileUploadByteMultipart(java.lang.String)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void loadFieldMultipartStandard(java.lang.String)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void loadFieldMultipart(java.lang.String)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder:org.jboss.netty.buffer.ChannelBuffer fillChannelBuffer()",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributesStandard()",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributes()",
            "org.jboss.netty.handler.codec.marshalling.MarshallingDecoder:org.jboss.netty.buffer.ChannelBuffer extractFrame(org.jboss.netty.buffer.ChannelBuffer,int,int)",
            "org.jboss.netty.handler.codec.replay.ReplayingDecoder:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.codec.replay.ReplayingDecoderBuffer:org.jboss.netty.buffer.ChannelBuffer slice(int,int)",
            "org.jboss.netty.handler.codec.serialization.ObjectDecoder:org.jboss.netty.buffer.ChannelBuffer extractFrame(org.jboss.netty.buffer.ChannelBuffer,int,int)",
            "org.jboss.netty.handler.codec.spdy.SpdyFrameDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)"
        ]
    },
    "org.jboss.netty.handler.codec.base64.Base64:org.jboss.netty.buffer.ChannelBuffer encode(org.jboss.netty.buffer.ChannelBuffer,int,int,boolean,org.jboss.netty.handler.codec.base64.Base64Dialect,org.jboss.netty.buffer.ChannelBufferFactory)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.base64.Base64:org.jboss.netty.buffer.ChannelBuffer encode(org.jboss.netty.buffer.ChannelBuffer,boolean,org.jboss.netty.handler.codec.base64.Base64Dialect,org.jboss.netty.buffer.ChannelBufferFactory)",
            "org.jboss.netty.handler.codec.base64.Base64:org.jboss.netty.buffer.ChannelBuffer encode(org.jboss.netty.buffer.ChannelBuffer,int,int,org.jboss.netty.handler.codec.base64.Base64Dialect,org.jboss.netty.buffer.ChannelBufferFactory)",
            "org.jboss.netty.handler.codec.base64.Base64:org.jboss.netty.buffer.ChannelBuffer encode(org.jboss.netty.buffer.ChannelBuffer,int,int,boolean,org.jboss.netty.handler.codec.base64.Base64Dialect)",
            "org.jboss.netty.handler.codec.base64.Base64:org.jboss.netty.buffer.ChannelBuffer encode(org.jboss.netty.buffer.ChannelBuffer,int,int,boolean,org.jboss.netty.buffer.ChannelBufferFactory)"
        ]
    },
    "org.jboss.netty.handler.codec.base64.Base64:org.jboss.netty.buffer.ChannelBuffer decode(org.jboss.netty.buffer.ChannelBuffer,int,int,org.jboss.netty.handler.codec.base64.Base64Dialect,org.jboss.netty.buffer.ChannelBufferFactory)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.base64.Base64:org.jboss.netty.buffer.ChannelBuffer decode(org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.base64.Base64Dialect,org.jboss.netty.buffer.ChannelBufferFactory)",
            "org.jboss.netty.handler.codec.base64.Base64:org.jboss.netty.buffer.ChannelBuffer decode(org.jboss.netty.buffer.ChannelBuffer,int,int,org.jboss.netty.handler.codec.base64.Base64Dialect)",
            "org.jboss.netty.handler.codec.base64.Base64:org.jboss.netty.buffer.ChannelBuffer decode(org.jboss.netty.buffer.ChannelBuffer,int,int,org.jboss.netty.buffer.ChannelBufferFactory)"
        ]
    },
    "org.jboss.netty.handler.codec.frame.DelimiterBasedFrameDecoder:void <init>(int,boolean,boolean,org.jboss.netty.buffer.ChannelBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.frame.DelimiterBasedFrameDecoder:void <init>(int,boolean,org.jboss.netty.buffer.ChannelBuffer)"
        ]
    },
    "org.jboss.netty.handler.codec.frame.DelimiterBasedFrameDecoder:void <init>(int,boolean,boolean,org.jboss.netty.buffer.ChannelBuffer[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.frame.DelimiterBasedFrameDecoder:void <init>(int,boolean,boolean,org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.frame.DelimiterBasedFrameDecoder:void <init>(int,boolean,org.jboss.netty.buffer.ChannelBuffer[])"
        ]
    },
    "org.jboss.netty.handler.codec.http.multipart.AbstractMemoryHttpData:org.jboss.netty.buffer.ChannelBuffer getChunk(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder:org.jboss.netty.handler.codec.http.HttpChunk encodeNextChunkMultipart(int)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder:org.jboss.netty.handler.codec.http.HttpChunk encodeNextChunkUrlEncoded(int)",
            "org.jboss.netty.handler.codec.http.multipart.MixedAttribute:org.jboss.netty.buffer.ChannelBuffer getChunk(int)",
            "org.jboss.netty.handler.codec.http.multipart.MixedFileUpload:org.jboss.netty.buffer.ChannelBuffer getChunk(int)"
        ]
    },
    "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void readFileUploadByteMultipartStandard(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void readFileUploadByteMultipart(java.lang.String)"
        ]
    },
    "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void readFileUploadByteMultipart(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData getFileUpload(java.lang.String)"
        ]
    },
    "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void loadFieldMultipartStandard(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void loadFieldMultipart(java.lang.String)"
        ]
    },
    "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void loadFieldMultipart(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData decodeMultipart(org.jboss.netty.handler.codec.http.multipart.HttpPostRequestDecoder$MultiPartStatus)"
        ]
    },
    "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder:org.jboss.netty.buffer.ChannelBuffer fillChannelBuffer()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder:org.jboss.netty.handler.codec.http.HttpChunk encodeNextChunkMultipart(int)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder:org.jboss.netty.handler.codec.http.HttpChunk encodeNextChunkUrlEncoded(int)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder:org.jboss.netty.handler.codec.http.HttpChunk nextChunk()"
        ]
    },
    "org.jboss.netty.handler.codec.marshalling.MarshallingDecoder:org.jboss.netty.buffer.ChannelBuffer extractFrame(org.jboss.netty.buffer.ChannelBuffer,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)"
        ]
    },
    "org.jboss.netty.handler.codec.replay.ReplayingDecoderBuffer:org.jboss.netty.buffer.ChannelBuffer slice(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.buffer.DirectChannelBufferFactory:org.jboss.netty.buffer.ChannelBuffer allocateBigEndianBuffer(int)",
            "org.jboss.netty.buffer.DirectChannelBufferFactory:org.jboss.netty.buffer.ChannelBuffer allocateLittleEndianBuffer(int)",
            "org.jboss.netty.buffer.DuplicatedChannelBuffer:org.jboss.netty.buffer.ChannelBuffer slice(int,int)",
            "org.jboss.netty.buffer.ReadOnlyChannelBuffer:org.jboss.netty.buffer.ChannelBuffer slice(int,int)",
            "org.jboss.netty.buffer.TruncatedChannelBuffer:org.jboss.netty.buffer.ChannelBuffer slice(int,int)",
            "org.jboss.netty.handler.codec.base64.Base64:org.jboss.netty.buffer.ChannelBuffer encode(org.jboss.netty.buffer.ChannelBuffer,int,int,boolean,org.jboss.netty.handler.codec.base64.Base64Dialect,org.jboss.netty.buffer.ChannelBufferFactory)",
            "org.jboss.netty.handler.codec.base64.Base64:org.jboss.netty.buffer.ChannelBuffer decode(org.jboss.netty.buffer.ChannelBuffer,int,int,org.jboss.netty.handler.codec.base64.Base64Dialect,org.jboss.netty.buffer.ChannelBufferFactory)",
            "org.jboss.netty.handler.codec.frame.DelimiterBasedFrameDecoder:void <init>(int,boolean,boolean,org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.frame.DelimiterBasedFrameDecoder:void <init>(int,boolean,boolean,org.jboss.netty.buffer.ChannelBuffer[])",
            "org.jboss.netty.handler.codec.http.HttpMessageEncoder:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)",
            "org.jboss.netty.handler.codec.http.multipart.AbstractMemoryHttpData:org.jboss.netty.buffer.ChannelBuffer getChunk(int)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void readFileUploadByteMultipartStandard(java.lang.String)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void readFileUploadByteMultipart(java.lang.String)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void loadFieldMultipartStandard(java.lang.String)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void loadFieldMultipart(java.lang.String)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder:org.jboss.netty.buffer.ChannelBuffer fillChannelBuffer()",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributesStandard()",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributes()",
            "org.jboss.netty.handler.codec.marshalling.MarshallingDecoder:org.jboss.netty.buffer.ChannelBuffer extractFrame(org.jboss.netty.buffer.ChannelBuffer,int,int)",
            "org.jboss.netty.handler.codec.replay.ReplayingDecoder:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.codec.replay.ReplayingDecoderBuffer:org.jboss.netty.buffer.ChannelBuffer slice(int,int)",
            "org.jboss.netty.handler.codec.serialization.ObjectDecoder:org.jboss.netty.buffer.ChannelBuffer extractFrame(org.jboss.netty.buffer.ChannelBuffer,int,int)",
            "org.jboss.netty.handler.codec.spdy.SpdyFrameDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)"
        ]
    },
    "org.jboss.netty.handler.codec.serialization.ObjectDecoder:org.jboss.netty.buffer.ChannelBuffer extractFrame(org.jboss.netty.buffer.ChannelBuffer,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)"
        ]
    },
    "org.jboss.netty.handler.codec.serialization.CompatibleObjectEncoder:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.oneone.OneToOneEncoder:boolean doEncode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.compression.ZlibDecoder:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.compression.ZlibEncoder:void <init>(org.jboss.netty.handler.codec.compression.ZlibWrapper,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.compression.ZlibEncoder:void <init>(int)",
            "org.jboss.netty.handler.codec.compression.ZlibEncoder:void <init>(org.jboss.netty.handler.codec.compression.ZlibWrapper)"
        ]
    },
    "org.jboss.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void offer(org.jboss.netty.handler.codec.http.HttpChunk)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestDecoder:void offer(org.jboss.netty.handler.codec.http.HttpChunk)"
        ]
    },
    "org.jboss.netty.handler.codec.serialization.CompatibleObjectDecoder:java.lang.Object decodeLast(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,java.lang.Enum)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.replay.ReplayingDecoder:java.lang.Object decodeLast(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.replay.ReplayingDecoder:void cleanup(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.compression.ZlibEncoder:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.oneone.OneToOneEncoder:boolean doEncode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.SpdyHeaderBlockJZlibEncoder:void encode(org.jboss.netty.buffer.ChannelBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.spdy.SpdyHeaderBlockJZlibEncoder:org.jboss.netty.buffer.ChannelBuffer encode(org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame)"
        ]
    },
    "org.jboss.netty.util.internal.jzlib.Deflate:int deflateParams(org.jboss.netty.util.internal.jzlib.ZStream,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.jzlib.ZStream:int deflateParams(int,int)"
        ]
    },
    "org.jboss.netty.util.internal.jzlib.ZStream:int inflateInit(int,java.lang.Enum)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.jzlib.ZStream:int inflateInit(java.lang.Enum)",
            "org.jboss.netty.util.internal.jzlib.ZStream:int inflateInit(int)"
        ]
    },
    "org.jboss.netty.util.internal.jzlib.ZStream:int inflateSync()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.util.internal.jzlib.Deflate:int deflate_stored(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.jzlib.Deflate:int deflate(org.jboss.netty.util.internal.jzlib.ZStream,int)"
        ]
    },
    "org.jboss.netty.util.internal.jzlib.Deflate:int deflate_fast(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.jzlib.Deflate:int deflate(org.jboss.netty.util.internal.jzlib.ZStream,int)"
        ]
    },
    "org.jboss.netty.util.internal.jzlib.Deflate:int deflate_slow(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.jzlib.Deflate:int deflate(org.jboss.netty.util.internal.jzlib.ZStream,int)"
        ]
    },
    "org.apache.commons.lang.text.StrSubstitutor:void <init>(java.util.Map,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Map,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.commons.lang.text.StrSubstitutor:void <init>(java.util.Map,java.lang.String,java.lang.String,char)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrTokenizer asTokenizer()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.text.StrTokenizer:void <init>(java.lang.String,org.apache.commons.lang.text.StrMatcher,org.apache.commons.lang.text.StrMatcher)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.text.StrTokenizer:void <init>(char[],org.apache.commons.lang.text.StrMatcher,org.apache.commons.lang.text.StrMatcher)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.reflect.TypeUtils:java.lang.String classToString(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.reflect.TypeUtils:java.lang.String toString(java.lang.reflect.Type)",
            "org.apache.commons.lang3.reflect.TypeUtils:java.lang.String classToString(java.lang.Class)"
        ]
    },
    "org.apache.commons.lang3.reflect.TypeUtils:java.lang.String typeVariableToString(java.lang.reflect.TypeVariable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.reflect.TypeUtils:java.lang.String toString(java.lang.reflect.Type)",
            "org.apache.commons.lang3.reflect.TypeUtils:java.lang.String toLongString(java.lang.reflect.TypeVariable)"
        ]
    },
    "org.apache.commons.lang3.text.StrSubstitutor:void <init>(java.util.Map,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Map,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.commons.lang3.text.StrSubstitutor:void <init>(java.util.Map,java.lang.String,java.lang.String,char)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.text.StrSubstitutor:void <init>(java.util.Map,java.lang.String,java.lang.String,char,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrTokenizer asTokenizer()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.text.StrTokenizer:void <init>(java.lang.String,org.apache.commons.lang3.text.StrMatcher,org.apache.commons.lang3.text.StrMatcher)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.stc.Main$lambda_printSummary_39__26:boolean test(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.util.ExtendedSet:java.lang.Object lambda$conditionalRemove$19(java.util.function.Predicate,java.util.concurrent.atomic.AtomicBoolean,java.lang.Object,java.lang.Object)",
            "org.onlab.util.ExtendedSet:java.lang.Object lambda$insertOrReplace$18(java.util.function.Predicate,java.util.concurrent.atomic.AtomicBoolean,java.lang.Object,java.lang.Object,java.lang.Object)"
        ]
    },
    "org.onlab.stc.Main$lambda_printSummary_38__25:boolean test(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.util.ExtendedSet:java.lang.Object lambda$conditionalRemove$19(java.util.function.Predicate,java.util.concurrent.atomic.AtomicBoolean,java.lang.Object,java.lang.Object)",
            "org.onlab.util.ExtendedSet:java.lang.Object lambda$insertOrReplace$18(java.util.function.Predicate,java.util.concurrent.atomic.AtomicBoolean,java.lang.Object,java.lang.Object,java.lang.Object)"
        ]
    },
    "org.onlab.stc.Main$lambda_printSummary_37__24:boolean test(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.util.ExtendedSet:java.lang.Object lambda$conditionalRemove$19(java.util.function.Predicate,java.util.concurrent.atomic.AtomicBoolean,java.lang.Object,java.lang.Object)",
            "org.onlab.util.ExtendedSet:java.lang.Object lambda$insertOrReplace$18(java.util.function.Predicate,java.util.concurrent.atomic.AtomicBoolean,java.lang.Object,java.lang.Object,java.lang.Object)"
        ]
    },
    "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void offer(org.jboss.netty.handler.codec.http.HttpChunk)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestDecoder:void offer(org.jboss.netty.handler.codec.http.HttpChunk)"
        ]
    },
    "org.jboss.netty.buffer.ChannelBuffers:org.jboss.netty.buffer.ChannelBuffer copiedBuffer(java.nio.ByteOrder,java.lang.CharSequence,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.buffer.ChannelBuffers:org.jboss.netty.buffer.ChannelBuffer copiedBuffer(java.lang.CharSequence,java.nio.charset.Charset)",
            "org.jboss.netty.buffer.ChannelBuffers:org.jboss.netty.buffer.ChannelBuffer copiedBuffer(java.nio.ByteOrder,java.lang.String,java.lang.String)",
            "org.jboss.netty.handler.codec.string.StringEncoder:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)"
        ]
    },
    "org.jboss.netty.buffer.ChannelBuffers:org.jboss.netty.buffer.ChannelBuffer copiedBuffer(java.nio.ByteOrder,java.lang.CharSequence,int,int,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.buffer.ChannelBuffers:org.jboss.netty.buffer.ChannelBuffer copiedBuffer(java.lang.CharSequence,int,int,java.nio.charset.Charset)"
        ]
    },
    "org.jboss.netty.buffer.ChannelBuffers:org.jboss.netty.buffer.ChannelBuffer copiedBuffer(java.nio.ByteOrder,char[],int,int,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.buffer.ChannelBuffers:org.jboss.netty.buffer.ChannelBuffer copiedBuffer(java.nio.ByteOrder,java.lang.CharSequence,int,int,java.nio.charset.Charset)",
            "org.jboss.netty.buffer.ChannelBuffers:org.jboss.netty.buffer.ChannelBuffer copiedBuffer(char[],java.nio.charset.Charset)",
            "org.jboss.netty.buffer.ChannelBuffers:org.jboss.netty.buffer.ChannelBuffer copiedBuffer(char[],int,int,java.nio.charset.Charset)",
            "org.jboss.netty.buffer.ChannelBuffers:org.jboss.netty.buffer.ChannelBuffer copiedBuffer(java.nio.ByteOrder,char[],java.nio.charset.Charset)"
        ]
    },
    "org.jboss.netty.buffer.AbstractChannelBuffer:java.lang.String toString(java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.buffer.AbstractChannelBuffer:java.lang.String toString(java.lang.String)",
            "org.jboss.netty.handler.codec.http.multipart.AbstractMemoryHttpData:java.lang.String getString(java.nio.charset.Charset)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:java.lang.String readLineStandard()",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:java.lang.String readLine()",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void setFinalBuffer(org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.http.multipart.MemoryAttribute:java.lang.String getValue()",
            "org.jboss.netty.handler.codec.http.websocket.DefaultWebSocketFrame:java.lang.String getTextData()",
            "org.jboss.netty.handler.codec.http.websocketx.CloseWebSocketFrame:java.lang.String getReasonText()",
            "org.jboss.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame:java.lang.String getText()",
            "org.jboss.netty.handler.codec.http.websocketx.TextWebSocketFrame:java.lang.String getText()",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketUtil:java.lang.String base64(byte[])",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketUtil:java.lang.String base64(org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.socks.SocksAuthRequestDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.socks.SocksAuthRequestDecoder$State)",
            "org.jboss.netty.handler.codec.socks.SocksCmdRequestDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.socks.SocksCmdRequestDecoder$State)",
            "org.jboss.netty.handler.codec.socks.SocksCmdResponseDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.socks.SocksCmdResponseDecoder$State)",
            "org.jboss.netty.handler.codec.string.StringDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)"
        ]
    },
    "org.jboss.netty.buffer.AbstractChannelBuffer:java.lang.String toString(int,int,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.buffer.AbstractChannelBuffer:java.lang.String toString(int,int,java.lang.String,org.jboss.netty.buffer.ChannelBufferIndexFinder)",
            "org.jboss.netty.handler.codec.replay.ReplayingDecoderBuffer:java.lang.String toString(int,int,java.lang.String)"
        ]
    },
    "org.jboss.netty.handler.codec.replay.ReplayingDecoderBuffer:java.lang.String toString(int,int,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributesStandard()",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributes()",
            "org.jboss.netty.handler.codec.replay.ReplayingDecoderBuffer:java.lang.String toString(int,int,java.nio.charset.Charset)"
        ]
    },
    "org.apache.commons.lang.Entities:java.lang.String escape(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.StringEscapeUtils:java.lang.String escapeXml(java.lang.String)"
        ]
    },
    "org.apache.commons.lang.StringEscapeUtils:void escapeHtml(java.io.Writer,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.StringEscapeUtils:java.lang.String escapeHtml(java.lang.String)"
        ]
    },
    "org.apache.commons.lang.StringEscapeUtils:void escapeXml(java.io.Writer,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.Entities:java.lang.String unescape(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.StringEscapeUtils:java.lang.String unescapeXml(java.lang.String)"
        ]
    },
    "org.apache.commons.lang.Entities:void unescape(java.io.Writer,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.StringEscapeUtils:void unescapeHtml(java.io.Writer,java.lang.String)",
            "org.apache.commons.lang.StringEscapeUtils:void unescapeXml(java.io.Writer,java.lang.String)"
        ]
    },
    "org.apache.commons.lang.time.FastDateFormat:void init()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.time.FastDateFormat:org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String,java.util.TimeZone,java.util.Locale)",
            "org.apache.commons.lang.time.FastDateFormat:void readObject(java.io.ObjectInputStream)"
        ]
    },
    "org.apache.commons.lang.time.FastDateFormat:java.lang.String format(java.util.Date)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.time.DateFormatUtils:java.lang.String format(java.util.Date,java.lang.String,java.util.TimeZone,java.util.Locale)",
            "org.apache.commons.lang.time.FastDateFormat:java.lang.String format(long)"
        ]
    },
    "org.apache.commons.lang.time.FastDateFormat:java.lang.StringBuffer format(java.util.Date,java.lang.StringBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.time.FastDateFormat:java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)",
            "org.apache.commons.lang.time.FastDateFormat:java.lang.StringBuffer format(long,java.lang.StringBuffer)"
        ]
    },
    "org.apache.commons.lang.time.FastDateFormat:java.lang.StringBuffer format(java.util.Calendar,java.lang.StringBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.time.FastDateFormat:java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)",
            "org.apache.commons.lang.time.FastDateFormat:java.lang.String format(java.util.Calendar)"
        ]
    },
    "org.apache.commons.lang3.time.FastDatePrinter:void init()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.time.FastDatePrinter:void <init>(java.lang.String,java.util.TimeZone,java.util.Locale)",
            "org.apache.commons.lang3.time.FastDatePrinter:void readObject(java.io.ObjectInputStream)"
        ]
    },
    "org.apache.commons.lang3.time.FastDateFormat:java.lang.StringBuffer applyRules(java.util.Calendar,java.lang.StringBuffer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.time.FastDatePrinter:java.lang.String applyRulesToString(java.util.Calendar)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.time.FastDatePrinter:java.lang.String format(long)",
            "org.apache.commons.lang3.time.FastDatePrinter:java.lang.String format(java.util.Date)"
        ]
    },
    "org.apache.commons.lang3.time.FastDatePrinter:java.lang.StringBuffer format(java.util.Date,java.lang.StringBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.time.FastDateFormat:java.lang.StringBuffer format(java.util.Date,java.lang.StringBuffer)",
            "org.apache.commons.lang3.time.FastDatePrinter:java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)",
            "org.apache.commons.lang3.time.FastDatePrinter:java.lang.StringBuffer format(long,java.lang.StringBuffer)"
        ]
    },
    "org.apache.commons.lang3.time.FastDatePrinter:java.lang.StringBuffer format(java.util.Calendar,java.lang.StringBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.time.FastDateFormat:java.lang.StringBuffer format(java.util.Calendar,java.lang.StringBuffer)",
            "org.apache.commons.lang3.time.FastDatePrinter:java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)",
            "org.apache.commons.lang3.time.FastDatePrinter:java.lang.String format(java.util.Calendar)"
        ]
    },
    "org.apache.commons.lang3.time.DateFormatUtils:java.lang.String formatUTC(long,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.time.DateFormatUtils:java.lang.String formatUTC(java.util.Date,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.time.DateFormatUtils:java.lang.String formatUTC(long,java.lang.String,java.util.Locale)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.time.DateFormatUtils:java.lang.String formatUTC(java.util.Date,java.lang.String,java.util.Locale)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.time.DateFormatUtils:java.lang.String format(long,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.time.DateFormatUtils:java.lang.String format(java.util.Date,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.time.DateFormatUtils:java.lang.String format(java.util.Calendar,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.time.DateFormatUtils:java.lang.String format(long,java.lang.String,java.util.TimeZone)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.time.DateFormatUtils:java.lang.String format(java.util.Date,java.lang.String,java.util.TimeZone)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.time.DateFormatUtils:java.lang.String format(java.util.Calendar,java.lang.String,java.util.TimeZone)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.time.DateFormatUtils:java.lang.String format(long,java.lang.String,java.util.Locale)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.time.DateFormatUtils:java.lang.String format(java.util.Date,java.lang.String,java.util.Locale)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.time.DateFormatUtils:java.lang.String format(java.util.Calendar,java.lang.String,java.util.Locale)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.time.DateFormatUtils:java.lang.String format(long,java.lang.String,java.util.TimeZone,java.util.Locale)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.time.FastDateFormat:org.apache.commons.lang3.time.FastDateFormat getDateTimeInstance(int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.time.FastDateFormat:org.apache.commons.lang3.time.FastDateFormat getDateTimeInstance(int,int,java.util.Locale)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.time.FastDateFormat:org.apache.commons.lang3.time.FastDateFormat getDateTimeInstance(int,int,java.util.TimeZone,java.util.Locale)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.time.FastDateFormat:org.apache.commons.lang3.time.FastDateFormat getDateTimeInstance(int,int,java.util.TimeZone)"
        ]
    },
    "org.apache.commons.lang3.time.FormatCache:java.text.Format getInstance()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.time.FastDateFormat:org.apache.commons.lang3.time.FastDateFormat getInstance()"
        ]
    },
    "org.apache.commons.lang3.time.FastDateFormat:org.apache.commons.lang3.time.FastDateFormat getDateInstance(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.time.FastDateFormat:org.apache.commons.lang3.time.FastDateFormat getDateInstance(int,java.util.Locale)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.time.FastDateFormat:org.apache.commons.lang3.time.FastDateFormat getDateInstance(int,java.util.TimeZone)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.time.FastDateFormat:org.apache.commons.lang3.time.FastDateFormat getDateInstance(int,java.util.TimeZone,java.util.Locale)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.time.FastDateFormat:org.apache.commons.lang3.time.FastDateFormat getTimeInstance(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.time.FastDateFormat:org.apache.commons.lang3.time.FastDateFormat getTimeInstance(int,java.util.Locale)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.time.FastDateFormat:org.apache.commons.lang3.time.FastDateFormat getTimeInstance(int,java.util.TimeZone)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.time.FastDateFormat:org.apache.commons.lang3.time.FastDateFormat getTimeInstance(int,java.util.TimeZone,java.util.Locale)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.util.Tools$lambda_retryable_35__110:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.util.Tools:java.lang.Object lambda$null$34(java.util.function.Supplier,java.lang.Object)"
        ]
    },
    "org.onlab.stc.Coordinator$Delegate:void lambda$onOutput$16(org.onlab.stc.Step,java.lang.String,org.onlab.stc.StepProcessListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.stc.StepProcessor:void processOutput(java.io.PrintWriter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.StepProcessor:int execute()"
        ]
    },
    "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder:void <init>(org.jboss.netty.handler.codec.http.HttpRequest,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder:void <init>(org.jboss.netty.handler.codec.http.multipart.HttpDataFactory,org.jboss.netty.handler.codec.http.HttpRequest,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor:void <init>(int,long,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor:void <init>(int,long,long)"
        ]
    },
    "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor:void <init>(int,long,long,long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.execution.OrderedDownstreamThreadPoolExecutor:void <init>(int,long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.jboss.netty.handler.execution.OrderedDownstreamThreadPoolExecutor:void <init>(int,long,java.util.concurrent.TimeUnit,java.util.concurrent.ThreadFactory)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.Entities:void fillWithHtml40Entities(org.apache.commons.lang.Entities)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.Entities:void <clinit>()"
        ]
    },
    "org.apache.commons.lang.Entities:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.Entities:void fillWithHtml40Entities(org.apache.commons.lang.Entities)",
            "org.apache.commons.lang.Entities:void <clinit>()",
            "org.apache.commons.lang.StringEscapeUtils:void escapeHtml(java.io.Writer,java.lang.String)",
            "org.apache.commons.lang.StringEscapeUtils:void unescapeHtml(java.io.Writer,java.lang.String)",
            "org.apache.commons.lang.StringEscapeUtils:void escapeXml(java.io.Writer,java.lang.String)",
            "org.apache.commons.lang.StringEscapeUtils:java.lang.String escapeXml(java.lang.String)",
            "org.apache.commons.lang.StringEscapeUtils:void unescapeXml(java.io.Writer,java.lang.String)",
            "org.apache.commons.lang.StringEscapeUtils:java.lang.String unescapeXml(java.lang.String)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioSocketChannel:void <init>(org.jboss.netty.channel.Channel,org.jboss.netty.channel.ChannelFactory,org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelSink,java.nio.channels.SocketChannel,org.jboss.netty.channel.socket.nio.NioWorker)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.NioAcceptedSocketChannel:void <init>(org.jboss.netty.channel.ChannelFactory,org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.Channel,org.jboss.netty.channel.ChannelSink,java.nio.channels.SocketChannel,org.jboss.netty.channel.socket.nio.NioWorker,java.lang.Thread)",
            "org.jboss.netty.channel.socket.nio.NioClientSocketChannel:void <init>(org.jboss.netty.channel.ChannelFactory,org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelSink,org.jboss.netty.channel.socket.nio.NioWorker)"
        ]
    },
    "org.jboss.netty.channel.socket.oio.OioSocketChannel:void <init>(org.jboss.netty.channel.Channel,org.jboss.netty.channel.ChannelFactory,org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelSink,java.net.Socket)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.oio.OioAcceptedSocketChannel:void <init>(org.jboss.netty.channel.Channel,org.jboss.netty.channel.ChannelFactory,org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelSink,java.net.Socket)",
            "org.jboss.netty.channel.socket.oio.OioClientSocketChannel:void <init>(org.jboss.netty.channel.ChannelFactory,org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelSink)"
        ]
    },
    "org.onlab.util.SharedExecutors:void setPoolSize(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.util.SharedExecutors:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.util.SharedExecutors:java.util.concurrent.ExecutorService getSingleThreadExecutor()",
            "org.onlab.util.SharedExecutors:java.util.concurrent.ExecutorService getPoolThreadExecutor()",
            "org.onlab.util.SharedExecutors:java.util.Timer getTimer()",
            "org.onlab.util.SharedExecutors:void setPoolSize(int)",
            "org.onlab.util.SharedExecutors:void shutdown()",
            "org.onlab.util.SharedExecutors:void <clinit>()"
        ]
    },
    "org.jboss.netty.handler.timeout.IdleStateHandler:void beforeRemove(org.jboss.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.DefaultChannelPipeline:void callBeforeRemove(org.jboss.netty.channel.ChannelHandlerContext)",
            "org.jboss.netty.channel.StaticChannelPipeline:void callBeforeRemove(org.jboss.netty.channel.ChannelHandlerContext)"
        ]
    },
    "org.jboss.netty.handler.timeout.ReadTimeoutHandler:void beforeRemove(org.jboss.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.DefaultChannelPipeline:void callBeforeRemove(org.jboss.netty.channel.ChannelHandlerContext)",
            "org.jboss.netty.channel.StaticChannelPipeline:void callBeforeRemove(org.jboss.netty.channel.ChannelHandlerContext)"
        ]
    },
    "org.apache.commons.lang.ArrayUtils:java.lang.String toString(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.ArrayUtils:java.lang.String toString(java.lang.Object)"
        ]
    },
    "org.apache.commons.lang.builder.ReflectionToStringBuilder:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.IGMP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.pim.PIMHelloOption:java.lang.String toString()",
            "org.onlab.util.Tools:java.lang.String get(java.util.Dictionary,java.lang.String)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:java.lang.String toString(java.lang.Object)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdyHeaders:java.lang.String toString(java.lang.Object)",
            "org.jboss.netty.util.internal.StringUtil:java.lang.String stripControlCharacters(java.lang.Object)",
            "org.apache.commons.lang.ArrayUtils:java.lang.String toString(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang.builder.ReflectionToStringBuilder:java.lang.String toString(java.lang.Object,org.apache.commons.lang.builder.ToStringStyle,boolean,boolean,java.lang.Class)",
            "org.apache.commons.lang.builder.ReflectionToStringBuilder:java.lang.String toString(java.lang.Object,org.apache.commons.lang.builder.ToStringStyle,boolean,java.lang.Class)",
            "org.apache.commons.lang.builder.ReflectionToStringBuilder:java.lang.String[] toNoNullStringArray(java.lang.Object[])",
            "org.apache.commons.lang.builder.ReflectionToStringBuilder:java.lang.String toStringExclude(java.lang.Object,java.lang.String[])",
            "org.apache.commons.lang.mutable.MutableObject:java.lang.String toString()",
            "org.apache.commons.lang.ObjectUtils:java.lang.String toString(java.lang.Object)",
            "org.apache.commons.lang.ObjectUtils:java.lang.String toString(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.lang.Object[],char,int,int)",
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.lang.Object[],java.lang.String,int,int)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder append(java.lang.Object)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendFixedWidthPadLeft(java.lang.Object,int,char)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendFixedWidthPadRight(java.lang.Object,int,char)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder insert(int,java.lang.Object)",
            "org.apache.commons.lang.text.StrLookup$MapStrLookup:java.lang.String lookup(java.lang.String)",
            "org.apache.commons.lang.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Properties)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:java.lang.String toString()",
            "org.apache.commons.lang.time.DurationFormatUtils:java.lang.String format(org.apache.commons.lang.time.DurationFormatUtils$Token[],int,int,int,int,int,int,int,boolean)",
            "org.apache.commons.lang3.builder.ReflectionToStringBuilder:java.lang.String[] toNoNullStringArray(java.lang.Object[])",
            "org.apache.commons.lang3.exception.DefaultExceptionContext:java.lang.String getFormattedExceptionMessage(java.lang.String)",
            "org.apache.commons.lang3.mutable.MutableObject:java.lang.String toString()",
            "org.apache.commons.lang3.ObjectUtils:java.lang.String toString(java.lang.Object)",
            "org.apache.commons.lang3.ObjectUtils:java.lang.String toString(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder append(java.lang.Object)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadLeft(java.lang.Object,int,char)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadRight(java.lang.Object,int,char)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder insert(int,java.lang.Object)",
            "org.apache.commons.lang3.text.StrLookup$MapStrLookup:java.lang.String lookup(java.lang.String)",
            "org.apache.commons.lang3.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Properties)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:java.lang.String toString()",
            "org.apache.commons.lang3.time.DurationFormatUtils:java.lang.String format(org.apache.commons.lang3.time.DurationFormatUtils$Token[],long,long,long,long,long,long,long,boolean)"
        ]
    },
    "org.apache.commons.lang3.builder.ReflectionToStringBuilder:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.IGMP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.pim.PIMHelloOption:java.lang.String toString()",
            "org.onlab.util.Tools:java.lang.String get(java.util.Dictionary,java.lang.String)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:java.lang.String toString(java.lang.Object)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdyHeaders:java.lang.String toString(java.lang.Object)",
            "org.jboss.netty.util.internal.StringUtil:java.lang.String stripControlCharacters(java.lang.Object)",
            "org.apache.commons.lang.builder.ReflectionToStringBuilder:java.lang.String[] toNoNullStringArray(java.lang.Object[])",
            "org.apache.commons.lang.mutable.MutableObject:java.lang.String toString()",
            "org.apache.commons.lang.ObjectUtils:java.lang.String toString(java.lang.Object)",
            "org.apache.commons.lang.ObjectUtils:java.lang.String toString(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.lang.Object[],char,int,int)",
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.lang.Object[],java.lang.String,int,int)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder append(java.lang.Object)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendFixedWidthPadLeft(java.lang.Object,int,char)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendFixedWidthPadRight(java.lang.Object,int,char)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder insert(int,java.lang.Object)",
            "org.apache.commons.lang.text.StrLookup$MapStrLookup:java.lang.String lookup(java.lang.String)",
            "org.apache.commons.lang.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Properties)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:java.lang.String toString()",
            "org.apache.commons.lang.time.DurationFormatUtils:java.lang.String format(org.apache.commons.lang.time.DurationFormatUtils$Token[],int,int,int,int,int,int,int,boolean)",
            "org.apache.commons.lang3.ArrayUtils:java.lang.String toString(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang3.builder.ReflectionToStringBuilder:java.lang.String toString(java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle,boolean,boolean,java.lang.Class)",
            "org.apache.commons.lang3.builder.ReflectionToStringBuilder:java.lang.String[] toNoNullStringArray(java.lang.Object[])",
            "org.apache.commons.lang3.builder.ReflectionToStringBuilder:java.lang.String toStringExclude(java.lang.Object,java.lang.String[])",
            "org.apache.commons.lang3.builder.ToStringBuilder:java.lang.String build()",
            "org.apache.commons.lang3.exception.DefaultExceptionContext:java.lang.String getFormattedExceptionMessage(java.lang.String)",
            "org.apache.commons.lang3.mutable.MutableObject:java.lang.String toString()",
            "org.apache.commons.lang3.ObjectUtils:java.lang.String toString(java.lang.Object)",
            "org.apache.commons.lang3.ObjectUtils:java.lang.String toString(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder append(java.lang.Object)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadLeft(java.lang.Object,int,char)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadRight(java.lang.Object,int,char)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder insert(int,java.lang.Object)",
            "org.apache.commons.lang3.text.StrLookup$MapStrLookup:java.lang.String lookup(java.lang.String)",
            "org.apache.commons.lang3.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Properties)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:java.lang.String toString()",
            "org.apache.commons.lang3.time.DurationFormatUtils:java.lang.String format(org.apache.commons.lang3.time.DurationFormatUtils$Token[],long,long,long,long,long,long,long,boolean)"
        ]
    },
    "org.apache.commons.lang3.builder.ToStringBuilder:java.lang.String build()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.AnnotationUtils:java.lang.String toString(java.lang.'annotation'.Annotation)",
            "org.apache.commons.lang3.builder.DiffResult:java.lang.String toString(org.apache.commons.lang3.builder.ToStringStyle)",
            "org.apache.commons.lang3.builder.ToStringBuilder:java.lang.Object build()"
        ]
    },
    "org.objectweb.asm.ClassReader:void accept(org.objectweb.asm.ClassVisitor,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.objectweb.asm.ClassWriter:byte[] toByteArray()"
        ]
    },
    "com.eclipsesource.json.JsonParser:com.eclipsesource.json.JsonValue parse()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.eclipsesource.json.JsonValue:com.eclipsesource.json.JsonValue readFrom(java.io.Reader)",
            "com.eclipsesource.json.JsonValue:com.eclipsesource.json.JsonValue readFrom(java.lang.String)"
        ]
    },
    "com.eclipsesource.json.JsonParser:com.eclipsesource.json.JsonArray readArray()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.eclipsesource.json.JsonParser:com.eclipsesource.json.JsonValue readValue()"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$ClassSerializer:java.lang.Class read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$ClassSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$DateSerializer:java.util.Date read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$DateSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$DateSerializer:java.util.Date copy(com.esotericsoftware.kryo.Kryo,java.util.Date)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$DateSerializer:java.lang.Object copy(com.esotericsoftware.kryo.Kryo,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$KryoSerializableSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readClassAndObject(com.esotericsoftware.kryo.io.Input)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:java.util.EnumSet read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$ClassSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$ClassSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap:java.lang.Object get(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.Compiler:org.onlab.stc.Step getStep(java.lang.String)",
            "org.onlab.stc.Compiler:void processSequentialRequirements(java.lang.String,java.lang.String,java.lang.String)",
            "org.onlab.stc.Compiler:void processRequirements(org.onlab.stc.Step,java.lang.String,java.lang.String)",
            "org.onlab.stc.Compiler:org.onlab.stc.Step getStep(java.lang.String,java.lang.String)",
            "org.onlab.stc.Coordinator:java.lang.String substitute(java.lang.String)",
            "org.onlab.stc.MonitorLayout:void computeLayout(org.onlab.stc.Group,int,int)",
            "org.onlab.stc.MonitorLayout:org.onlab.stc.MonitorLayout$Box updateBox(org.onlab.stc.Step,int,int,org.onlab.stc.Group)",
            "org.onlab.stc.MonitorLayout:boolean visit(org.onlab.stc.Step,int,int,org.onlab.stc.Group)",
            "org.onlab.stc.MonitorLayout:int bottomMostTier(org.onlab.stc.Step)",
            "org.onlab.stc.MonitorLayout:org.onlab.stc.MonitorLayout$Box get(org.onlab.stc.Step)",
            "org.onlab.stc.MonitorLayout:int lambda$computeBreadth$28(org.onlab.stc.Step)",
            "org.onlab.stc.ScenarioStore:org.onlab.stc.Coordinator$Status getStatus(org.onlab.stc.Step)",
            "org.onlab.graph.AbstractGraphPathSearch$DefaultResult:boolean hasCost(org.onlab.graph.Vertex)",
            "org.onlab.graph.AbstractGraphPathSearch$DefaultResult:double cost(org.onlab.graph.Vertex)",
            "org.onlab.graph.AbstractGraphPathSearch$DefaultResult:void updateVertex(org.onlab.graph.Vertex,org.onlab.graph.Edge,double,boolean)",
            "org.onlab.graph.AbstractGraphPathSearch:void buildAllPaths(org.onlab.graph.AbstractGraphPathSearch$DefaultResult,org.onlab.graph.Vertex,org.onlab.graph.Vertex,int)",
            "org.onlab.graph.DepthFirstSearch:boolean isForwardEdge(org.onlab.graph.AbstractGraphPathSearch$DefaultResult,org.onlab.graph.Edge)",
            "org.onlab.graph.SrlgGraphSearch$2:double weight(org.onlab.graph.Edge)",
            "org.onlab.graph.SrlgGraphSearch:void <init>(java.util.Map)",
            "org.onlab.graph.TarjanGraphSearch$SccResult:org.onlab.graph.TarjanGraphSearch$VertexData data(org.onlab.graph.Vertex)",
            "org.onlab.metrics.MetricsComponent:org.onlab.metrics.MetricsFeature registerFeature(java.lang.String)",
            "org.onlab.metrics.MetricsManager:org.onlab.metrics.MetricsComponent registerComponent(java.lang.String)",
            "org.onlab.packet.Ethernet:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.Ethernet:org.onlab.packet.Ethernet lambda$deserializer$10(byte[],int,int)",
            "org.onlab.packet.ICMP6:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ICMP6:org.onlab.packet.ICMP6 lambda$deserializer$40(byte[],int,int)",
            "org.onlab.packet.IPv4:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IPv4:org.onlab.packet.IPv4 lambda$deserializer$24(byte[],int,int)",
            "org.onlab.packet.IPv6:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IPv6:org.onlab.packet.IPv6 lambda$deserializer$48(byte[],int,int)",
            "org.onlab.packet.MPLS:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.MPLS:org.onlab.packet.MPLS lambda$deserializer$12(byte[],int,int)",
            "org.onlab.packet.PIM:org.onlab.packet.PIM lambda$deserializer$49(byte[],int,int)",
            "org.onlab.packet.UDP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.UDP:org.onlab.packet.UDP lambda$deserializer$45(byte[],int,int)",
            "org.onlab.packet.ipv6.Authentication:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Authentication:org.onlab.packet.ipv6.Authentication lambda$deserializer$46(byte[],int,int)",
            "org.onlab.packet.ipv6.BaseOptions:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.BaseOptions:org.onlab.packet.ipv6.BaseOptions lambda$deserializer$13(byte[],int,int)",
            "org.onlab.packet.ipv6.Fragment:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Fragment:org.onlab.packet.ipv6.Fragment lambda$deserializer$26(byte[],int,int)",
            "org.onlab.packet.ipv6.Routing:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Routing:org.onlab.packet.ipv6.Routing lambda$deserializer$50(byte[],int,int)",
            "org.onlab.packet.pim.PIMHello:byte[] serialize()",
            "org.onlab.util.ExtendedSet:java.lang.Object get(java.lang.Object)",
            "org.jboss.netty.bootstrap.Bootstrap:java.lang.Object getOption(java.lang.String)",
            "org.jboss.netty.channel.ChannelLocal:java.lang.Object get(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.channel.DefaultChannelPipeline:org.jboss.netty.channel.ChannelHandler get(java.lang.String)",
            "org.jboss.netty.channel.DefaultChannelPipeline:org.jboss.netty.channel.ChannelHandlerContext getContext(java.lang.String)",
            "org.jboss.netty.channel.StaticChannelPipeline:org.jboss.netty.channel.ChannelHandler get(java.lang.String)",
            "org.jboss.netty.channel.StaticChannelPipeline:org.jboss.netty.channel.ChannelHandlerContext getContext(java.lang.String)",
            "org.jboss.netty.channel.group.DefaultChannelGroup:org.jboss.netty.channel.Channel find(java.lang.Integer)",
            "org.jboss.netty.channel.group.DefaultChannelGroupFuture:org.jboss.netty.channel.ChannelFuture find(java.lang.Integer)",
            "org.jboss.netty.channel.group.DefaultChannelGroupFuture:org.jboss.netty.channel.ChannelFuture find(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.channel.local.LocalChannelRegistry:org.jboss.netty.channel.Channel getChannel(org.jboss.netty.channel.local.LocalAddress)",
            "org.jboss.netty.channel.socket.nio.NioDatagramChannel:org.jboss.netty.channel.ChannelFuture joinGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress)",
            "org.jboss.netty.channel.socket.nio.NioDatagramChannel:org.jboss.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress)",
            "org.jboss.netty.channel.socket.nio.NioDatagramChannel:org.jboss.netty.channel.ChannelFuture block(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress)",
            "org.jboss.netty.handler.codec.http.HttpMethod:org.jboss.netty.handler.codec.http.HttpMethod valueOf(java.lang.String)",
            "org.jboss.netty.handler.codec.http.QueryStringDecoder:boolean addParam(java.util.Map,java.lang.String,java.lang.String)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:java.util.List getBodyHttpDatas(java.lang.String)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData getBodyHttpData(java.lang.String)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void addHttpData(org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData decodeMultipart(org.jboss.netty.handler.codec.http.multipart.HttpPostRequestDecoder$MultiPartStatus)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData findMultipartDisposition()",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData getFileUpload(java.lang.String)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:java.util.List getBodyHttpDatas(java.lang.String)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData getBodyHttpData(java.lang.String)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void addHttpData(org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData)",
            "org.jboss.netty.handler.codec.rtsp.RtspMethods:org.jboss.netty.handler.codec.http.HttpMethod valueOf(java.lang.String)",
            "org.jboss.netty.handler.codec.serialization.CachingClassResolver:java.lang.Class resolve(java.lang.String)",
            "org.jboss.netty.handler.codec.serialization.ReferenceMap:java.lang.Object get(java.lang.Object)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame:int getValue(int)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame:void setValue(int,int,boolean,boolean)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame:boolean isPersistValue(int)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame:void setPersistValue(int,boolean)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame:boolean isPersisted(int)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdySettingsFrame:void setPersisted(int,boolean)",
            "org.jboss.netty.handler.codec.spdy.SpdyHttpDecoder:org.jboss.netty.handler.codec.http.HttpMessage getMessage(int)",
            "org.jboss.netty.handler.codec.spdy.SpdySession$PriorityComparator:int compare(java.lang.Integer,java.lang.Integer)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:boolean isRemoteSideClosed(int)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:void closeRemoteSide(int,boolean)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:boolean isLocalSideClosed(int)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:void closeLocalSide(int,boolean)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:boolean hasReceivedReply(int)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:void receivedReply(int)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:int getSendWindowSize(int)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:int updateSendWindowSize(int,int)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:int updateReceiveWindowSize(int,int)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:int getReceiveWindowSizeLowerBound(int)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:boolean putPendingWrite(int,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:org.jboss.netty.channel.MessageEvent getPendingWrite(int)",
            "org.jboss.netty.handler.codec.spdy.SpdySession:org.jboss.netty.channel.MessageEvent removePendingWrite(int)",
            "org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor:java.util.concurrent.atomic.AtomicLong getChannelCounter(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.handler.execution.OrderedDownstreamThreadPoolExecutor:java.util.concurrent.Executor getChildExecutor(org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor:java.util.concurrent.Executor getChildExecutor(org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.util.CharsetUtil:java.nio.charset.CharsetEncoder getEncoder(java.nio.charset.Charset)",
            "org.jboss.netty.util.CharsetUtil:java.nio.charset.CharsetDecoder getDecoder(java.nio.charset.Charset)",
            "org.jboss.netty.util.DefaultObjectSizeEstimator:int estimateSize(java.lang.Class,java.util.Set)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$EntrySet:boolean contains(java.lang.Object)",
            "org.apache.commons.lang.CharSet:org.apache.commons.lang.CharSet getInstance(java.lang.String)",
            "org.apache.commons.lang.ClassUtils:java.lang.String getShortClassName(java.lang.String)",
            "org.apache.commons.lang.ClassUtils:java.lang.Class primitiveToWrapper(java.lang.Class)",
            "org.apache.commons.lang.ClassUtils:java.lang.Class wrapperToPrimitive(java.lang.Class)",
            "org.apache.commons.lang.ClassUtils:java.lang.Class getClass(java.lang.ClassLoader,java.lang.String,boolean)",
            "org.apache.commons.lang.ClassUtils:java.lang.String toCanonicalName(java.lang.String)",
            "org.apache.commons.lang.ClassUtils:java.lang.String getCanonicalName(java.lang.String)",
            "org.apache.commons.lang.ClassUtils:void <clinit>()",
            "org.apache.commons.lang.Entities$MapIntMap:java.lang.String name(int)",
            "org.apache.commons.lang.Entities$MapIntMap:int value(java.lang.String)",
            "org.apache.commons.lang.Entities$PrimitiveEntityMap:int value(java.lang.String)",
            "org.apache.commons.lang.enum.Enum:void init(java.lang.String)",
            "org.apache.commons.lang.enum.Enum:java.lang.Object readResolve()",
            "org.apache.commons.lang.enum.Enum:org.apache.commons.lang.'enum'.Enum getEnum(java.lang.Class,java.lang.String)",
            "org.apache.commons.lang.enum.Enum:org.apache.commons.lang.'enum'.Enum$Entry getEntry(java.lang.Class)",
            "org.apache.commons.lang.enum.Enum:org.apache.commons.lang.'enum'.Enum$Entry createEntry(java.lang.Class)",
            "org.apache.commons.lang.enums.Enum:void init(java.lang.String)",
            "org.apache.commons.lang.enums.Enum:java.lang.Object readResolve()",
            "org.apache.commons.lang.enums.Enum:org.apache.commons.lang.enums.Enum getEnum(java.lang.Class,java.lang.String)",
            "org.apache.commons.lang.enums.Enum:org.apache.commons.lang.enums.Enum$Entry getEntry(java.lang.Class)",
            "org.apache.commons.lang.enums.Enum:org.apache.commons.lang.enums.Enum$Entry createEntry(java.lang.Class)",
            "org.apache.commons.lang.LocaleUtils:java.util.List languagesByCountry(java.lang.String)",
            "org.apache.commons.lang.LocaleUtils:java.util.List countriesByLanguage(java.lang.String)",
            "org.apache.commons.lang.text.ExtendedMessageFormat:java.text.Format getFormat(java.lang.String)",
            "org.apache.commons.lang.text.StrLookup$MapStrLookup:java.lang.String lookup(java.lang.String)",
            "org.apache.commons.lang.time.FastDateFormat:org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String,java.util.TimeZone,java.util.Locale)",
            "org.apache.commons.lang.time.FastDateFormat:org.apache.commons.lang.time.FastDateFormat getDateInstance(int,java.util.TimeZone,java.util.Locale)",
            "org.apache.commons.lang.time.FastDateFormat:org.apache.commons.lang.time.FastDateFormat getTimeInstance(int,java.util.TimeZone,java.util.Locale)",
            "org.apache.commons.lang.time.FastDateFormat:org.apache.commons.lang.time.FastDateFormat getDateTimeInstance(int,int,java.util.TimeZone,java.util.Locale)",
            "org.apache.commons.lang.time.FastDateFormat:java.lang.String getTimeZoneDisplay(java.util.TimeZone,boolean,int,java.util.Locale)",
            "org.apache.commons.lang3.builder.Diff:void <init>(java.lang.String)",
            "org.apache.commons.lang3.CharSet:org.apache.commons.lang3.CharSet getInstance(java.lang.String[])",
            "org.apache.commons.lang3.ClassUtils:java.lang.String getShortClassName(java.lang.String)",
            "org.apache.commons.lang3.ClassUtils:java.lang.Class primitiveToWrapper(java.lang.Class)",
            "org.apache.commons.lang3.ClassUtils:java.lang.Class wrapperToPrimitive(java.lang.Class)",
            "org.apache.commons.lang3.ClassUtils:java.lang.Class getClass(java.lang.ClassLoader,java.lang.String,boolean)",
            "org.apache.commons.lang3.ClassUtils:java.lang.String toCanonicalName(java.lang.String)",
            "org.apache.commons.lang3.ClassUtils:java.lang.String getCanonicalName(java.lang.String)",
            "org.apache.commons.lang3.ClassUtils:void <clinit>()",
            "org.apache.commons.lang3.concurrent.ConcurrentUtils:java.lang.Object createIfAbsent(java.util.concurrent.ConcurrentMap,java.lang.Object,org.apache.commons.lang3.concurrent.ConcurrentInitializer)",
            "org.apache.commons.lang3.concurrent.MultiBackgroundInitializer$MultiBackgroundInitializerResults:java.lang.Object getResultObject(java.lang.String)",
            "org.apache.commons.lang3.concurrent.MultiBackgroundInitializer$MultiBackgroundInitializerResults:org.apache.commons.lang3.concurrent.ConcurrentException getException(java.lang.String)",
            "org.apache.commons.lang3.concurrent.MultiBackgroundInitializer$MultiBackgroundInitializerResults:org.apache.commons.lang3.concurrent.BackgroundInitializer checkName(java.lang.String)",
            "org.apache.commons.lang3.LocaleUtils:java.util.List languagesByCountry(java.lang.String)",
            "org.apache.commons.lang3.LocaleUtils:java.util.List countriesByLanguage(java.lang.String)",
            "org.apache.commons.lang3.reflect.TypeLiteral:void <init>()",
            "org.apache.commons.lang3.reflect.TypeUtils:java.lang.reflect.Type unrollVariableAssignments(java.lang.reflect.TypeVariable,java.util.Map)",
            "org.apache.commons.lang3.reflect.TypeUtils:java.lang.reflect.Type substituteTypeVariables(java.lang.reflect.Type,java.util.Map)",
            "org.apache.commons.lang3.reflect.TypeUtils:java.util.Map getTypeArguments(java.lang.reflect.ParameterizedType,java.lang.Class,java.util.Map)",
            "org.apache.commons.lang3.reflect.TypeUtils:void mapTypeVariablesToArguments(java.lang.Class,java.lang.reflect.ParameterizedType,java.util.Map)",
            "org.apache.commons.lang3.reflect.TypeUtils:java.lang.Class getRawType(java.lang.reflect.Type,java.lang.reflect.Type)",
            "org.apache.commons.lang3.reflect.TypeUtils:java.lang.reflect.Type unrollVariables(java.util.Map,java.lang.reflect.Type)",
            "org.apache.commons.lang3.reflect.TypeUtils:java.lang.reflect.Type[] extractTypeArgumentsFrom(java.util.Map,java.lang.reflect.TypeVariable[])",
            "org.apache.commons.lang3.SerializationUtils$ClassLoaderAwareObjectInputStream:java.lang.Class resolveClass(java.io.ObjectStreamClass)",
            "org.apache.commons.lang3.text.ExtendedMessageFormat:java.text.Format getFormat(java.lang.String)",
            "org.apache.commons.lang3.text.StrLookup$MapStrLookup:java.lang.String lookup(java.lang.String)",
            "org.apache.commons.lang3.time.FastDateParser$TextStrategy:void setCalendar(org.apache.commons.lang3.time.FastDateParser,java.util.Calendar,java.lang.String)",
            "org.apache.commons.lang3.time.FastDateParser:org.apache.commons.lang3.time.FastDateParser$Strategy getLocaleSpecificStrategy(int,java.util.Calendar)",
            "org.apache.commons.lang3.time.FastDatePrinter:java.lang.String getTimeZoneDisplay(java.util.TimeZone,boolean,int,java.util.Locale)",
            "org.apache.commons.lang3.time.FormatCache:java.text.Format getInstance(java.lang.String,java.util.TimeZone,java.util.Locale)",
            "org.apache.commons.lang3.time.FormatCache:java.lang.String getPatternForStyle(java.lang.Integer,java.lang.Integer,java.util.Locale)",
            "com.esotericsoftware.kryo.Generics:java.lang.Class getConcreteClass(java.lang.String)",
            "org.onlab.stc.MonitorLayout$get__40:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$WriteThroughEntry:java.lang.Object setValue(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.reflect.TypeUtils$GenericArrayTypeImpl:boolean equals(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.ConcurrentHashMap$EntrySet:boolean contains(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$Segment:boolean keyEq(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$Segment:boolean containsValue(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$Segment:boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$Segment:java.lang.Object remove(java.lang.Object,int,java.lang.Object,boolean)",
            "org.jboss.netty.util.internal.ConcurrentHashMap$SimpleEntry:boolean eq(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$EntrySet:boolean contains(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$Segment:boolean containsValue(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$Segment:boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$Segment:java.lang.Object remove(java.lang.Object,int,java.lang.Object,boolean)",
            "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$SimpleEntry:boolean eq(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$EntrySet:boolean contains(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$Segment:boolean containsValue(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$Segment:boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$Segment:java.lang.Object remove(java.lang.Object,int,java.lang.Object,boolean)",
            "org.jboss.netty.util.internal.ConcurrentIdentityWeakKeyHashMap$SimpleEntry:boolean eq(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$EntrySet:boolean contains(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:boolean keyEq(java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:boolean containsValue(java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$Segment:java.lang.Object remove(java.lang.Object,int,java.lang.Object,boolean)",
            "org.jboss.netty.util.internal.ConcurrentWeakKeyHashMap$SimpleEntry:boolean eq(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang.ArrayUtils:int indexOf(java.lang.Object[],java.lang.Object,int)",
            "org.apache.commons.lang.ArrayUtils:int lastIndexOf(java.lang.Object[],java.lang.Object,int)",
            "org.apache.commons.lang.builder.EqualsBuilder:org.apache.commons.lang.builder.EqualsBuilder append(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang.IntHashMap:boolean contains(java.lang.Object)",
            "org.apache.commons.lang.mutable.MutableObject:boolean equals(java.lang.Object)",
            "org.apache.commons.lang.ObjectUtils:boolean equals(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang.time.FastDateFormat$Pair:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.AnnotationUtils:boolean memberEquals(java.lang.Class,java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang3.ArrayUtils:int indexOf(java.lang.Object[],java.lang.Object,int)",
            "org.apache.commons.lang3.ArrayUtils:int lastIndexOf(java.lang.Object[],java.lang.Object,int)",
            "org.apache.commons.lang3.builder.DiffBuilder:void <init>(java.lang.Object,java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle)",
            "org.apache.commons.lang3.builder.EqualsBuilder:org.apache.commons.lang3.builder.EqualsBuilder append(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang3.mutable.MutableObject:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.ObjectUtils:boolean equals(java.lang.Object,java.lang.Object)",
            "org.apache.commons.lang3.Range:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.reflect.TypeUtils:boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.ParameterizedType,java.util.Map)",
            "org.apache.commons.lang3.reflect.TypeUtils:java.lang.reflect.Type unrollVariableAssignments(java.lang.reflect.TypeVariable,java.util.Map)",
            "org.apache.commons.lang3.reflect.TypeUtils:boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.GenericArrayType,java.util.Map)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "com.esotericsoftware.kryo.util.IdentityMap:boolean containsValue(java.lang.Object,boolean)",
            "com.esotericsoftware.kryo.util.IdentityMap:java.lang.Object findKey(java.lang.Object,boolean)",
            "com.esotericsoftware.kryo.util.IntMap:boolean containsValue(java.lang.Object,boolean)",
            "com.esotericsoftware.kryo.util.IntMap:int findKey(java.lang.Object,boolean,int)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object put_internal(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object getStash(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object get(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object getStash(java.lang.Object,java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object remove(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object removeStash(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsValue(java.lang.Object,boolean)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsKey(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:boolean containsKeyStash(java.lang.Object)",
            "com.esotericsoftware.kryo.util.ObjectMap:java.lang.Object findKey(java.lang.Object,boolean)"
        ]
    },
    "org.apache.commons.lang.builder.ReflectionToStringBuilder:void appendFieldsIn(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.builder.ReflectionToStringBuilder:java.lang.String toString()"
        ]
    },
    "org.apache.commons.lang.builder.ToStringBuilder:org.apache.commons.lang.builder.ToStringBuilder append(java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.builder.ToStringBuilder:org.apache.commons.lang.builder.ToStringBuilder append(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.builder.ToStringBuilder:org.apache.commons.lang.builder.ToStringBuilder append(java.lang.String,java.lang.Object[],boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.builder.ReflectionToStringBuilder:java.lang.String toString(java.lang.Object,org.apache.commons.lang.builder.ToStringStyle,boolean,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.builder.ReflectionToStringBuilder:java.lang.String toString(java.lang.Object,org.apache.commons.lang.builder.ToStringStyle,boolean,boolean,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.builder.ReflectionToStringBuilder:java.lang.String toString(java.lang.Object)",
            "org.apache.commons.lang.builder.ReflectionToStringBuilder:java.lang.String toString(java.lang.Object,org.apache.commons.lang.builder.ToStringStyle)",
            "org.apache.commons.lang.builder.ReflectionToStringBuilder:java.lang.String toString(java.lang.Object,org.apache.commons.lang.builder.ToStringStyle,boolean)",
            "org.apache.commons.lang.builder.ReflectionToStringBuilder:java.lang.String toString(java.lang.Object,org.apache.commons.lang.builder.ToStringStyle,boolean,boolean)",
            "org.apache.commons.lang.builder.ToStringBuilder:java.lang.String reflectionToString(java.lang.Object,org.apache.commons.lang.builder.ToStringStyle,boolean)",
            "org.apache.commons.lang.builder.ToStringBuilder:java.lang.String reflectionToString(java.lang.Object,org.apache.commons.lang.builder.ToStringStyle,boolean,java.lang.Class)"
        ]
    },
    "org.apache.commons.lang.builder.ReflectionToStringBuilder:void <init>(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.builder.ReflectionToStringBuilder:java.lang.String toStringExclude(java.lang.Object,java.lang.String[])"
        ]
    },
    "org.apache.commons.lang.builder.ReflectionToStringBuilder:void <init>(java.lang.Object,org.apache.commons.lang.builder.ToStringStyle)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.exception.ExceptionUtils:void printRootCauseStackTrace(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.exception.ExceptionUtils:void printRootCauseStackTrace(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.io.Input:int require(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.Input:void skip(int)",
            "com.esotericsoftware.kryo.io.Input:byte readByte()",
            "com.esotericsoftware.kryo.io.Input:int readByteUnsigned()",
            "com.esotericsoftware.kryo.io.Input:void readBytes(byte[],int,int)",
            "com.esotericsoftware.kryo.io.Input:int readInt()",
            "com.esotericsoftware.kryo.io.Input:int readVarInt(boolean)",
            "com.esotericsoftware.kryo.io.Input:int readInt_slow(boolean)",
            "com.esotericsoftware.kryo.io.Input:java.lang.String readString()",
            "com.esotericsoftware.kryo.io.Input:int readUtf8Length_slow(int)",
            "com.esotericsoftware.kryo.io.Input:void readUtf8(int)",
            "com.esotericsoftware.kryo.io.Input:void readUtf8_slow(int,int)",
            "com.esotericsoftware.kryo.io.Input:java.lang.String readAscii_slow()",
            "com.esotericsoftware.kryo.io.Input:java.lang.StringBuilder readStringBuilder()",
            "com.esotericsoftware.kryo.io.Input:short readShort()",
            "com.esotericsoftware.kryo.io.Input:int readShortUnsigned()",
            "com.esotericsoftware.kryo.io.Input:long readLong()",
            "com.esotericsoftware.kryo.io.Input:long readVarLong(boolean)",
            "com.esotericsoftware.kryo.io.Input:long readLong_slow(boolean)",
            "com.esotericsoftware.kryo.io.Input:boolean readBoolean()",
            "com.esotericsoftware.kryo.io.Input:char readChar()",
            "com.esotericsoftware.kryo.io.UnsafeInput:int readInt()",
            "com.esotericsoftware.kryo.io.UnsafeInput:float readFloat()",
            "com.esotericsoftware.kryo.io.UnsafeInput:short readShort()",
            "com.esotericsoftware.kryo.io.UnsafeInput:long readLong()",
            "com.esotericsoftware.kryo.io.UnsafeInput:double readDouble()",
            "com.esotericsoftware.kryo.io.UnsafeInput:char readChar()",
            "com.esotericsoftware.kryo.io.UnsafeInput:void readBytes(java.lang.Object,long,long,int)"
        ]
    },
    "com.esotericsoftware.kryo.io.Input:int optional(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.Input:boolean eof()",
            "com.esotericsoftware.kryo.io.Input:int read()",
            "com.esotericsoftware.kryo.io.Input:int read(byte[],int,int)",
            "com.esotericsoftware.kryo.io.Input:boolean canReadInt()",
            "com.esotericsoftware.kryo.io.Input:boolean canReadLong()"
        ]
    },
    "com.esotericsoftware.kryo.io.KryoObjectOutput:void flush()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.io.Output:boolean require(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.Output:void write(int)",
            "com.esotericsoftware.kryo.io.Output:void writeByte(byte)",
            "com.esotericsoftware.kryo.io.Output:void writeByte(int)",
            "com.esotericsoftware.kryo.io.Output:void writeBytes(byte[],int,int)",
            "com.esotericsoftware.kryo.io.Output:void writeInt(int)",
            "com.esotericsoftware.kryo.io.Output:int writeVarInt(int,boolean)",
            "com.esotericsoftware.kryo.io.Output:void writeUtf8Length(int)",
            "com.esotericsoftware.kryo.io.Output:void writeString_slow(java.lang.CharSequence,int,int)",
            "com.esotericsoftware.kryo.io.Output:void writeAscii_slow(java.lang.String,int)",
            "com.esotericsoftware.kryo.io.Output:void writeShort(int)",
            "com.esotericsoftware.kryo.io.Output:void writeLong(long)",
            "com.esotericsoftware.kryo.io.Output:int writeVarLong(long,boolean)",
            "com.esotericsoftware.kryo.io.Output:void writeBoolean(boolean)",
            "com.esotericsoftware.kryo.io.Output:void writeChar(char)",
            "com.esotericsoftware.kryo.io.UnsafeOutput:void writeInt(int)",
            "com.esotericsoftware.kryo.io.UnsafeOutput:void writeFloat(float)",
            "com.esotericsoftware.kryo.io.UnsafeOutput:void writeShort(int)",
            "com.esotericsoftware.kryo.io.UnsafeOutput:void writeLong(long)",
            "com.esotericsoftware.kryo.io.UnsafeOutput:void writeDouble(double)",
            "com.esotericsoftware.kryo.io.UnsafeOutput:void writeChar(char)",
            "com.esotericsoftware.kryo.io.UnsafeOutput:void writeBytes(java.lang.Object,long,long,long)"
        ]
    },
    "com.esotericsoftware.kryo.io.Output:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.ByteBufferOutput:void close()",
            "com.esotericsoftware.kryo.io.KryoObjectOutput:void close()",
            "com.esotericsoftware.kryo.io.Output:void close()"
        ]
    },
    "com.esotericsoftware.kryo.io.UnsafeMemoryInput:void <init>(long,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.io.UnsafeMemoryOutput:void <init>(long,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.io.Input:float readFloat()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.Input:float[] readFloats(int)",
            "com.esotericsoftware.kryo.io.KryoDataInput:float readFloat()",
            "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmFloatField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$FloatSerializer:java.lang.Float read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.ObjectField$ObjectFloatField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeFloatField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.Input:int[] readInts(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.ByteBufferInput:int[] readInts(int)"
        ]
    },
    "com.esotericsoftware.kryo.io.KryoDataInput:int readInt()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.io.UnsafeInput:int readInt(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.Input:float readFloat(float,boolean)",
            "com.esotericsoftware.kryo.io.Input:int[] readInts(int,boolean)",
            "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmIntField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$BigDecimalSerializer:java.math.BigDecimal read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$CalendarSerializer:java.util.Calendar read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:java.util.EnumSet read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$IntSerializer:java.lang.Integer read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.MapSerializer:java.util.Map read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.ObjectField$ObjectIntField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeIntField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmIntField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.CompatibleFieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.TaggedFieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.ObjectField$ObjectIntField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.CompatibleFieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.TaggedFieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.io.Input:float[] readFloats(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.ByteBufferInput:float[] readFloats(int)",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$FloatArraySerializer:float[] read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.io.KryoDataInput:float readFloat()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmFloatField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.CompatibleFieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.TaggedFieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$FloatSerializer:java.lang.Float read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$FloatSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.ObjectField$ObjectFloatField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.CompatibleFieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.TaggedFieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.io.Input:short[] readShorts(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.ByteBufferInput:short[] readShorts(int)",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ShortArraySerializer:short[] read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.io.KryoDataInput:short readShort()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmShortField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.CompatibleFieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.TaggedFieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$ShortSerializer:java.lang.Short read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$ShortSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.ObjectField$ObjectShortField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.CompatibleFieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.TaggedFieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.io.Input:double readDouble()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.Input:double[] readDoubles(int)",
            "com.esotericsoftware.kryo.io.KryoDataInput:double readDouble()",
            "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmDoubleField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$DoubleSerializer:java.lang.Double read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.ObjectField$ObjectDoubleField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeDoubleField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.Input:long[] readLongs(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.ByteBufferInput:long[] readLongs(int)"
        ]
    },
    "com.esotericsoftware.kryo.io.KryoDataInput:long readLong()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.io.UnsafeInput:long readLong(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.Input:double readDouble(double,boolean)",
            "com.esotericsoftware.kryo.io.Input:long[] readLongs(int,boolean)",
            "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmLongField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$CalendarSerializer:java.util.Calendar read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$DateSerializer:java.util.Date read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$LongSerializer:java.lang.Long read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.ObjectField$ObjectLongField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeLongField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmLongField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.CompatibleFieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.TaggedFieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.ObjectField$ObjectLongField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.CompatibleFieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.TaggedFieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.io.Input:double[] readDoubles(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.ByteBufferInput:double[] readDoubles(int)",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$DoubleArraySerializer:double[] read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.io.KryoDataInput:double readDouble()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmDoubleField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.CompatibleFieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.TaggedFieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$DoubleSerializer:java.lang.Double read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$DoubleSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.ObjectField$ObjectDoubleField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.CompatibleFieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.TaggedFieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.io.Input:char[] readChars(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.ByteBufferInput:char[] readChars(int)",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$CharArraySerializer:char[] read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.io.KryoDataInput:char readChar()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmCharField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.CompatibleFieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.TaggedFieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$CharSerializer:java.lang.Character read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$CharSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.ObjectField$ObjectCharField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.CompatibleFieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.TaggedFieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$IntArraySerializer:int[] read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$IntArraySerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$LongArraySerializer:long[] read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$LongArraySerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$FloatArraySerializer:float[] read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$FloatArraySerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ShortArraySerializer:short[] read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ShortArraySerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$CharArraySerializer:char[] read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$CharArraySerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$DoubleArraySerializer:double[] read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$DoubleArraySerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.io.UnsafeInput:void readBytes(java.lang.Object,long,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.io.ByteBufferInput:int readInt(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.ByteBufferInput:float readFloat(float,boolean)",
            "com.esotericsoftware.kryo.io.Input:float readFloat(float,boolean)",
            "com.esotericsoftware.kryo.io.Input:int[] readInts(int,boolean)",
            "com.esotericsoftware.kryo.io.UnsafeMemoryInput:int readInt(boolean)",
            "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmIntField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$BigDecimalSerializer:java.math.BigDecimal read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$CalendarSerializer:java.util.Calendar read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:java.util.EnumSet read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$IntSerializer:java.lang.Integer read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.MapSerializer:java.util.Map read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.ObjectField$ObjectIntField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeIntField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.UnsafeMemoryInput:int readInt(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.ByteBufferInput:float readFloat(float,boolean)",
            "com.esotericsoftware.kryo.io.Input:float readFloat(float,boolean)",
            "com.esotericsoftware.kryo.io.Input:int[] readInts(int,boolean)",
            "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmIntField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$BigDecimalSerializer:java.math.BigDecimal read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$CalendarSerializer:java.util.Calendar read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:java.util.EnumSet read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$IntSerializer:java.lang.Integer read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.MapSerializer:java.util.Map read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.ObjectField$ObjectIntField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeIntField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.ByteBufferInput:long readLong(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.ByteBufferInput:double readDouble(double,boolean)",
            "com.esotericsoftware.kryo.io.Input:double readDouble(double,boolean)",
            "com.esotericsoftware.kryo.io.Input:long[] readLongs(int,boolean)",
            "com.esotericsoftware.kryo.io.UnsafeMemoryInput:long readLong(boolean)",
            "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmLongField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$CalendarSerializer:java.util.Calendar read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$DateSerializer:java.util.Date read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$LongSerializer:java.lang.Long read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.ObjectField$ObjectLongField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeLongField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.UnsafeMemoryInput:long readLong(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.ByteBufferInput:double readDouble(double,boolean)",
            "com.esotericsoftware.kryo.io.Input:double readDouble(double,boolean)",
            "com.esotericsoftware.kryo.io.Input:long[] readLongs(int,boolean)",
            "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmLongField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$CalendarSerializer:java.util.Calendar read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$DateSerializer:java.util.Date read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$LongSerializer:java.lang.Long read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.ObjectField$ObjectLongField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeLongField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.UnsafeMemoryInput:void readBytes(java.lang.Object,long,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.io.ByteBufferOutput:int writeInt(int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.ByteBufferOutput:int writeFloat(float,float,boolean)",
            "com.esotericsoftware.kryo.io.Output:int writeFloat(float,float,boolean)",
            "com.esotericsoftware.kryo.io.Output:void writeInts(int[],boolean)",
            "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmIntField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$BigDecimalSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.math.BigDecimal)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$CalendarSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.Calendar)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.EnumSet)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$IntSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Integer)",
            "com.esotericsoftware.kryo.serializers.MapSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.Map)",
            "com.esotericsoftware.kryo.serializers.ObjectField$ObjectIntField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeIntField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.ByteBufferOutput:int writeVarInt(int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:boolean writeReferenceOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,boolean)",
            "com.esotericsoftware.kryo.io.ByteBufferOutput:int writeInt(int,boolean)",
            "com.esotericsoftware.kryo.io.Output:int writeInt(int,boolean)",
            "com.esotericsoftware.kryo.serializers.CollectionSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.Collection)",
            "com.esotericsoftware.kryo.serializers.CompatibleFieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$BooleanArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,boolean[])",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ByteArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,byte[])",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$CharArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,char[])",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$DoubleArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,double[])",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$FloatArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,float[])",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$IntArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,int[])",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$LongArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,long[])",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ObjectArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object[])",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ShortArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,short[])",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$StringArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.String[])",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$BigDecimalSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.math.BigDecimal)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$BigIntegerSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.math.BigInteger)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Enum)",
            "com.esotericsoftware.kryo.serializers.TaggedFieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.util.DefaultClassResolver:com.esotericsoftware.kryo.Registration writeClass(com.esotericsoftware.kryo.io.Output,java.lang.Class)",
            "com.esotericsoftware.kryo.util.DefaultClassResolver:void writeName(com.esotericsoftware.kryo.io.Output,java.lang.Class,com.esotericsoftware.kryo.Registration)"
        ]
    },
    "com.esotericsoftware.kryo.io.ByteBufferOutput:int writeVarLong(long,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.ByteBufferOutput:int writeLong(long,boolean)",
            "com.esotericsoftware.kryo.io.Output:int writeLong(long,boolean)"
        ]
    },
    "com.esotericsoftware.kryo.io.KryoDataOutput:void writeInt(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.io.Output:void writeFloat(float)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.KryoDataOutput:void writeFloat(float)",
            "com.esotericsoftware.kryo.io.Output:void writeFloats(float[])",
            "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmFloatField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$FloatSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Float)",
            "com.esotericsoftware.kryo.serializers.ObjectField$ObjectFloatField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeFloatField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.Output:void writeInts(int[])": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.ByteBufferOutput:void writeInts(int[])"
        ]
    },
    "com.esotericsoftware.kryo.io.UnsafeMemoryOutput:int writeInt(int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.ByteBufferOutput:int writeFloat(float,float,boolean)",
            "com.esotericsoftware.kryo.io.Output:int writeFloat(float,float,boolean)",
            "com.esotericsoftware.kryo.io.Output:void writeInts(int[],boolean)",
            "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmIntField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$BigDecimalSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.math.BigDecimal)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$CalendarSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.Calendar)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.EnumSet)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$IntSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Integer)",
            "com.esotericsoftware.kryo.serializers.MapSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.Map)",
            "com.esotericsoftware.kryo.serializers.ObjectField$ObjectIntField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeIntField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.UnsafeMemoryOutput:void writeLittleEndianInt(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.UnsafeMemoryOutput:int writeVarInt(int,boolean)",
            "com.esotericsoftware.kryo.io.UnsafeMemoryOutput:int writeVarLong(long,boolean)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmIntField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.CompatibleFieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.TaggedFieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.ObjectField$ObjectIntField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.CompatibleFieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.TaggedFieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.KryoDataOutput:void writeFloat(float)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.io.Output:void writeFloats(float[])": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.ByteBufferOutput:void writeFloats(float[])",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$FloatArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,float[])"
        ]
    },
    "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmFloatField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.CompatibleFieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.TaggedFieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$FloatSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Float)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$FloatSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.ObjectField$ObjectFloatField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.CompatibleFieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.TaggedFieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.KryoDataOutput:void writeShort(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.io.Output:void writeShorts(short[])": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.ByteBufferOutput:void writeShorts(short[])",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ShortArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,short[])"
        ]
    },
    "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmShortField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.CompatibleFieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.TaggedFieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$ShortSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Short)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$ShortSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.ObjectField$ObjectShortField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.CompatibleFieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.TaggedFieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.ByteBufferOutput:int writeLong(long,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.ByteBufferOutput:int writeDouble(double,double,boolean)",
            "com.esotericsoftware.kryo.io.Output:int writeDouble(double,double,boolean)",
            "com.esotericsoftware.kryo.io.Output:void writeLongs(long[],boolean)",
            "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmLongField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$CalendarSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.Calendar)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$DateSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.Date)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$LongSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Long)",
            "com.esotericsoftware.kryo.serializers.ObjectField$ObjectLongField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeLongField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.KryoDataOutput:void writeLong(long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.io.Output:void writeDouble(double)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.KryoDataOutput:void writeDouble(double)",
            "com.esotericsoftware.kryo.io.Output:void writeDoubles(double[])",
            "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmDoubleField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$DoubleSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Double)",
            "com.esotericsoftware.kryo.serializers.ObjectField$ObjectDoubleField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeDoubleField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.Output:void writeLongs(long[])": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.ByteBufferOutput:void writeLongs(long[])"
        ]
    },
    "com.esotericsoftware.kryo.io.UnsafeMemoryOutput:int writeLong(long,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.ByteBufferOutput:int writeDouble(double,double,boolean)",
            "com.esotericsoftware.kryo.io.Output:int writeDouble(double,double,boolean)",
            "com.esotericsoftware.kryo.io.Output:void writeLongs(long[],boolean)",
            "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmLongField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$CalendarSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.Calendar)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$DateSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.Date)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$LongSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Long)",
            "com.esotericsoftware.kryo.serializers.ObjectField$ObjectLongField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeLongField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.UnsafeMemoryOutput:void writeLittleEndianLong(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.UnsafeMemoryOutput:int writeVarInt(int,boolean)",
            "com.esotericsoftware.kryo.io.UnsafeMemoryOutput:int writeVarLong(long,boolean)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmLongField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.CompatibleFieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.TaggedFieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.ObjectField$ObjectLongField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.CompatibleFieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.TaggedFieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.KryoDataOutput:void writeChar(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.io.Output:void writeChars(char[])": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.ByteBufferOutput:void writeChars(char[])",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$CharArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,char[])"
        ]
    },
    "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmCharField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.CompatibleFieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.TaggedFieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$CharSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Character)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$CharSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.ObjectField$ObjectCharField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.CompatibleFieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.TaggedFieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.KryoDataOutput:void writeDouble(double)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.io.Output:void writeDoubles(double[])": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.ByteBufferOutput:void writeDoubles(double[])",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$DoubleArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,double[])"
        ]
    },
    "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmDoubleField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.CompatibleFieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.TaggedFieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$DoubleSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Double)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$DoubleSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.ObjectField$ObjectDoubleField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.CompatibleFieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.TaggedFieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$IntArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,int[])": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$IntArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$LongArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,long[])": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$LongArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$FloatArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,float[])": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$FloatArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ShortArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,short[])": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ShortArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$CharArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,char[])": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$CharArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$DoubleArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,double[])": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$DoubleArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.UnsafeMemoryOutput:void writeBytes(java.lang.Object,long,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeRegionField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.UnsafeOutput:void writeLittleEndianInt(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.UnsafeOutput:int writeVarInt(int,boolean)",
            "com.esotericsoftware.kryo.io.UnsafeOutput:int writeVarLong(long,boolean)"
        ]
    },
    "com.esotericsoftware.kryo.io.UnsafeOutput:int writeInt(int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.Output:int writeFloat(float,float,boolean)",
            "com.esotericsoftware.kryo.io.Output:void writeInts(int[],boolean)",
            "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmIntField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$BigDecimalSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.math.BigDecimal)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$CalendarSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.Calendar)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.EnumSet)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$IntSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Integer)",
            "com.esotericsoftware.kryo.serializers.MapSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.Map)",
            "com.esotericsoftware.kryo.serializers.ObjectField$ObjectIntField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeIntField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.UnsafeOutput:void writeLittleEndianLong(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.UnsafeOutput:int writeVarInt(int,boolean)",
            "com.esotericsoftware.kryo.io.UnsafeOutput:int writeVarLong(long,boolean)"
        ]
    },
    "com.esotericsoftware.kryo.io.UnsafeOutput:int writeLong(long,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.Output:int writeDouble(double,double,boolean)",
            "com.esotericsoftware.kryo.io.Output:void writeLongs(long[],boolean)",
            "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmLongField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$CalendarSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.Calendar)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$DateSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.Date)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$LongSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Long)",
            "com.esotericsoftware.kryo.serializers.ObjectField$ObjectLongField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeLongField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.UnsafeOutput:void writeBytes(java.lang.Object,long,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeRegionField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.UnsafeCachedFieldFactory:com.esotericsoftware.kryo.serializers.FieldSerializer$CachedField createCachedField(java.lang.Class,java.lang.reflect.Field,com.esotericsoftware.kryo.serializers.FieldSerializer)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.FieldSerializer:com.esotericsoftware.kryo.serializers.FieldSerializer$CachedField newMatchingCachedField(java.lang.reflect.Field,int,java.lang.Class,java.lang.reflect.Type,java.lang.Class[])"
        ]
    },
    "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeRegionField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.CompatibleFieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.TaggedFieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.util.FastestStreamFactory:com.esotericsoftware.kryo.io.Input getInput()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.util.FastestStreamFactory:com.esotericsoftware.kryo.io.Input getInput(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.util.FastestStreamFactory:com.esotericsoftware.kryo.io.Input getInput(byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.util.FastestStreamFactory:com.esotericsoftware.kryo.io.Input getInput(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.util.FastestStreamFactory:com.esotericsoftware.kryo.io.Input getInput(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.util.FastestStreamFactory:com.esotericsoftware.kryo.io.Input getInput(java.io.InputStream,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.util.FastestStreamFactory:com.esotericsoftware.kryo.io.Output getOutput()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.util.FastestStreamFactory:com.esotericsoftware.kryo.io.Output getOutput(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.util.FastestStreamFactory:com.esotericsoftware.kryo.io.Output getOutput(int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.util.FastestStreamFactory:com.esotericsoftware.kryo.io.Output getOutput(byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.util.FastestStreamFactory:com.esotericsoftware.kryo.io.Output getOutput(byte[],int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.util.FastestStreamFactory:com.esotericsoftware.kryo.io.Output getOutput(java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.util.FastestStreamFactory:com.esotericsoftware.kryo.io.Output getOutput(java.io.OutputStream,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.util.UnsafeUtil$1:int compare(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.graph.Heap:void bubbleUp()",
            "org.onlab.graph.Heap:void heapify(int)",
            "org.apache.commons.lang.builder.CompareToBuilder:org.apache.commons.lang.builder.CompareToBuilder append(java.lang.Object,java.lang.Object,java.util.Comparator)",
            "org.apache.commons.lang3.builder.CompareToBuilder:org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object,java.util.Comparator)",
            "org.apache.commons.lang3.Range:void <init>(java.lang.Object,java.lang.Object,java.util.Comparator)",
            "org.apache.commons.lang3.Range:boolean contains(java.lang.Object)",
            "org.apache.commons.lang3.Range:boolean isAfter(java.lang.Object)",
            "org.apache.commons.lang3.Range:boolean isStartedBy(java.lang.Object)",
            "org.apache.commons.lang3.Range:boolean isEndedBy(java.lang.Object)",
            "org.apache.commons.lang3.Range:boolean isBefore(java.lang.Object)",
            "org.apache.commons.lang3.Range:org.apache.commons.lang3.Range intersectionWith(org.apache.commons.lang3.Range)"
        ]
    },
    "org.apache.commons.lang3.ArrayUtils:java.lang.String toString(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.ClassUtils:java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])"
        ]
    },
    "org.apache.commons.lang3.AnnotationUtils$1:void appendDetail(java.lang.StringBuffer,java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.builder.ToStringStyle:void appendInternal(java.lang.StringBuffer,java.lang.String,java.lang.Object,boolean)"
        ]
    },
    "org.apache.commons.lang3.builder.ReflectionToStringBuilder:java.lang.String toString(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.builder.ToStringBuilder:java.lang.String reflectionToString(java.lang.Object)"
        ]
    },
    "org.apache.commons.lang3.builder.ReflectionToStringBuilder:java.lang.String toString(java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.builder.RecursiveToStringStyle:void appendDetail(java.lang.StringBuffer,java.lang.String,java.lang.Object)",
            "org.apache.commons.lang3.builder.ToStringBuilder:java.lang.String reflectionToString(java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle)"
        ]
    },
    "org.apache.commons.lang3.builder.ReflectionToStringBuilder:java.lang.String toString(java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.builder.ReflectionToStringBuilder:java.lang.String toString(java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.builder.ToStringBuilder:java.lang.String reflectionToString(java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.builder.ToStringBuilder:java.lang.String reflectionToString(java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle,boolean,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.time.FastDateFormat$1:java.text.Format createInstance(java.lang.String,java.util.TimeZone,java.util.Locale)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.time.FormatCache:java.text.Format getInstance(java.lang.String,java.util.TimeZone,java.util.Locale)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.AbstractNioWorkerPool:void <init>(java.util.concurrent.Executor,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.NioDatagramWorkerPool:void <init>(java.util.concurrent.Executor,int)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioWorkerPool:void <init>(java.util.concurrent.Executor,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.NioClientSocketChannelFactory:void <init>(java.util.concurrent.Executor,java.util.concurrent.Executor,int,int)",
            "org.jboss.netty.channel.socket.nio.NioServerSocketChannelFactory:void <init>(java.util.concurrent.Executor,int,java.util.concurrent.Executor,int)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioClientSocketChannelFactory:void <init>(java.util.concurrent.Executor,java.util.concurrent.Executor,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.NioClientSocketChannelFactory:void <init>(java.util.concurrent.Executor,java.util.concurrent.Executor)",
            "org.jboss.netty.channel.socket.nio.NioClientSocketChannelFactory:void <init>(java.util.concurrent.Executor,java.util.concurrent.Executor,int)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioServerSocketChannelFactory:void <init>(java.util.concurrent.Executor,java.util.concurrent.Executor,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.NioServerSocketChannelFactory:void <init>(java.util.concurrent.Executor,java.util.concurrent.Executor)"
        ]
    },
    "org.apache.commons.lang.builder.CompareToBuilder:int reflectionCompare(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.builder.CompareToBuilder:int reflectionCompare(java.lang.Object,java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.builder.CompareToBuilder:int reflectionCompare(java.lang.Object,java.lang.Object,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.builder.CompareToBuilder:int reflectionCompare(java.lang.Object,java.lang.Object,java.util.Collection)"
        ]
    },
    "org.apache.commons.lang.builder.CompareToBuilder:int reflectionCompare(java.lang.Object,java.lang.Object,boolean,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.builder.CompareToBuilder:int reflectionCompare(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.builder.CompareToBuilder:int reflectionCompare(java.lang.Object,java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.builder.CompareToBuilder:int reflectionCompare(java.lang.Object,java.lang.Object,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.builder.CompareToBuilder:int reflectionCompare(java.lang.Object,java.lang.Object,java.util.Collection)"
        ]
    },
    "org.apache.commons.lang.math.NumberRange:void <init>(java.lang.Number,java.lang.Number)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.math.NumberRange:boolean containsNumber(java.lang.Number)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.math.Range:boolean containsRange(org.apache.commons.lang.math.Range)",
            "org.apache.commons.lang.math.Range:boolean overlapsRange(org.apache.commons.lang.math.Range)"
        ]
    },
    "org.apache.commons.lang.ObjectUtils:int compare(java.lang.Comparable,java.lang.Comparable,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.ObjectUtils:java.lang.Object min(java.lang.Comparable,java.lang.Comparable)",
            "org.apache.commons.lang.ObjectUtils:java.lang.Object max(java.lang.Comparable,java.lang.Comparable)",
            "org.apache.commons.lang.ObjectUtils:int compare(java.lang.Comparable,java.lang.Comparable)"
        ]
    },
    "org.apache.commons.lang3.ObjectUtils:int compare(java.lang.Comparable,java.lang.Comparable,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.ObjectUtils:java.lang.Comparable min(java.lang.Comparable[])",
            "org.apache.commons.lang3.ObjectUtils:java.lang.Comparable max(java.lang.Comparable[])",
            "org.apache.commons.lang3.ObjectUtils:int compare(java.lang.Comparable,java.lang.Comparable)"
        ]
    },
    "org.apache.commons.lang3.Range$ComparableComparator:int compare(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.graph.Heap:void bubbleUp()",
            "org.onlab.graph.Heap:void heapify(int)",
            "org.apache.commons.lang.builder.CompareToBuilder:org.apache.commons.lang.builder.CompareToBuilder append(java.lang.Object,java.lang.Object,java.util.Comparator)",
            "org.apache.commons.lang3.builder.CompareToBuilder:org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object,java.util.Comparator)",
            "org.apache.commons.lang3.Range:void <init>(java.lang.Object,java.lang.Object,java.util.Comparator)",
            "org.apache.commons.lang3.Range:boolean contains(java.lang.Object)",
            "org.apache.commons.lang3.Range:boolean isAfter(java.lang.Object)",
            "org.apache.commons.lang3.Range:boolean isStartedBy(java.lang.Object)",
            "org.apache.commons.lang3.Range:boolean isEndedBy(java.lang.Object)",
            "org.apache.commons.lang3.Range:boolean isBefore(java.lang.Object)",
            "org.apache.commons.lang3.Range:org.apache.commons.lang3.Range intersectionWith(org.apache.commons.lang3.Range)"
        ]
    },
    "org.apache.commons.lang3.Validate:void inclusiveBetween(java.lang.Object,java.lang.Object,java.lang.Comparable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.Validate:void inclusiveBetween(java.lang.Object,java.lang.Object,java.lang.Comparable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.Validate:void exclusiveBetween(java.lang.Object,java.lang.Object,java.lang.Comparable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.Validate:void exclusiveBetween(java.lang.Object,java.lang.Object,java.lang.Comparable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.packet.IGMPMembership:org.onlab.packet.IGMPGroup deserialize(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.IGMP:org.onlab.packet.IGMP lambda$deserializer$30(byte[],int,int)"
        ]
    },
    "org.onlab.packet.IGMPQuery:org.onlab.packet.IGMPGroup deserialize(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.IGMP:org.onlab.packet.IGMP lambda$deserializer$30(byte[],int,int)"
        ]
    },
    "org.onlab.packet.Ip4Prefix:org.onlab.packet.Ip4Prefix valueOf(int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.packet.Ip4Address:org.onlab.packet.Ip4Address makeMaskedAddress(org.onlab.packet.Ip4Address,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.IpAddress:org.onlab.packet.IpAddress makeMaskedAddress(org.onlab.packet.IpAddress,int)"
        ]
    },
    "org.onlab.packet.Ip4Prefix:org.onlab.packet.Ip4Prefix valueOf(byte[],int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.packet.IpAddress:org.onlab.packet.Ip4Address getIp4Address()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.IpPrefix:org.onlab.packet.Ip4Prefix getIp4Prefix()"
        ]
    },
    "org.onlab.packet.Ip4Address:org.onlab.packet.Ip4Address valueOf(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.Ip4Prefix:org.onlab.packet.Ip4Prefix valueOf(java.lang.String)"
        ]
    },
    "org.onlab.packet.Ip6Address:org.onlab.packet.Ip6Address makeMaskedAddress(org.onlab.packet.Ip6Address,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.IpAddress:org.onlab.packet.IpAddress makeMaskedAddress(org.onlab.packet.IpAddress,int)"
        ]
    },
    "org.onlab.packet.Ip6Prefix:org.onlab.packet.Ip6Prefix valueOf(byte[],int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.packet.IpAddress:org.onlab.packet.Ip6Address getIp6Address()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.IpPrefix:org.onlab.packet.Ip6Prefix getIp6Prefix()"
        ]
    },
    "org.onlab.packet.Ip6Address:org.onlab.packet.Ip6Address valueOf(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.Ip6Prefix:org.onlab.packet.Ip6Prefix valueOf(java.lang.String)"
        ]
    },
    "org.onlab.packet.pim.PIMAddrSource:org.onlab.packet.pim.PIMAddrSource deserialize(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.packet.IpPrefix:boolean contains(org.onlab.packet.IpPrefix)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.packet.IpPrefix:boolean contains(org.onlab.packet.IpAddress)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.packet.pim.PIMAddrUnicast:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.packet.pim.PIMJoinPrune$lambda_deserializer_31__93:org.onlab.packet.IPacket deserialize(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.EAPOL:org.onlab.packet.EAPOL lambda$deserializer$53(byte[],int,int)",
            "org.onlab.packet.Ethernet:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.Ethernet:org.onlab.packet.Ethernet lambda$deserializer$10(byte[],int,int)",
            "org.onlab.packet.ICMP:org.onlab.packet.ICMP lambda$deserializer$29(byte[],int,int)",
            "org.onlab.packet.ICMP6:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ICMP6:org.onlab.packet.ICMP6 lambda$deserializer$40(byte[],int,int)",
            "org.onlab.packet.IGMP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IPv4:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IPv4:org.onlab.packet.IPv4 lambda$deserializer$24(byte[],int,int)",
            "org.onlab.packet.IPv6:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IPv6:org.onlab.packet.IPv6 lambda$deserializer$48(byte[],int,int)",
            "org.onlab.packet.MPLS:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.MPLS:org.onlab.packet.MPLS lambda$deserializer$12(byte[],int,int)",
            "org.onlab.packet.PIM:org.onlab.packet.PIM lambda$deserializer$49(byte[],int,int)",
            "org.onlab.packet.TCP:org.onlab.packet.TCP lambda$deserializer$39(byte[],int,int)",
            "org.onlab.packet.UDP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.UDP:org.onlab.packet.UDP lambda$deserializer$45(byte[],int,int)",
            "org.onlab.packet.ipv6.Authentication:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Authentication:org.onlab.packet.ipv6.Authentication lambda$deserializer$46(byte[],int,int)",
            "org.onlab.packet.ipv6.BaseOptions:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.BaseOptions:org.onlab.packet.ipv6.BaseOptions lambda$deserializer$13(byte[],int,int)",
            "org.onlab.packet.ipv6.EncapSecurityPayload:org.onlab.packet.ipv6.EncapSecurityPayload lambda$deserializer$51(byte[],int,int)",
            "org.onlab.packet.ipv6.Fragment:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Fragment:org.onlab.packet.ipv6.Fragment lambda$deserializer$26(byte[],int,int)",
            "org.onlab.packet.ipv6.Routing:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Routing:org.onlab.packet.ipv6.Routing lambda$deserializer$50(byte[],int,int)",
            "org.onlab.packet.ndp.NeighborAdvertisement:org.onlab.packet.ndp.NeighborAdvertisement lambda$deserializer$1(byte[],int,int)",
            "org.onlab.packet.ndp.NeighborSolicitation:org.onlab.packet.ndp.NeighborSolicitation lambda$deserializer$42(byte[],int,int)",
            "org.onlab.packet.ndp.Redirect:org.onlab.packet.ndp.Redirect lambda$deserializer$47(byte[],int,int)",
            "org.onlab.packet.ndp.RouterAdvertisement:org.onlab.packet.ndp.RouterAdvertisement lambda$deserializer$41(byte[],int,int)",
            "org.onlab.packet.ndp.RouterSolicitation:org.onlab.packet.ndp.RouterSolicitation lambda$deserializer$44(byte[],int,int)"
        ]
    },
    "org.onlab.packet.Ip4Prefix:org.onlab.packet.Ip4Prefix valueOf(org.onlab.packet.Ip4Address,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.IpPrefix:org.onlab.packet.Ip4Prefix getIp4Prefix()"
        ]
    },
    "org.onlab.packet.Ip4Prefix:org.onlab.packet.Ip4Prefix valueOf(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.packet.Ip6Prefix:org.onlab.packet.Ip6Prefix valueOf(org.onlab.packet.Ip6Address,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.IpPrefix:org.onlab.packet.Ip6Prefix getIp6Prefix()"
        ]
    },
    "org.onlab.packet.Ip6Prefix:org.onlab.packet.Ip6Prefix valueOf(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.packet.pim.PIMAddrGroup:void setAddr(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.pim.PIMAddrGroup:void <init>(java.lang.String)"
        ]
    },
    "org.onlab.packet.pim.PIMAddrSource:void setAddr(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.pim.PIMAddrSource:void <init>(java.lang.String)"
        ]
    },
    "org.onlab.packet.pim.PIMJoinPrune:void addJoinPrune(java.lang.String,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.pim.PIMJoinPrune:void addJoin(java.lang.String,java.lang.String)",
            "org.onlab.packet.pim.PIMJoinPrune:void addPrune(java.lang.String,java.lang.String)"
        ]
    },
    "org.jboss.netty.handler.codec.frame.FrameDecoder:org.jboss.netty.buffer.ChannelBuffer appendToCumulation(org.jboss.netty.buffer.ChannelBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.frame.FrameDecoder:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.codec.replay.ReplayingDecoder:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.frame.LengthFieldPrepender:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.oneone.OneToOneEncoder:boolean doEncode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.http.multipart.AbstractMemoryHttpData:void addContent(org.jboss.netty.buffer.ChannelBuffer,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void readFileUploadByteMultipartStandard(java.lang.String)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void readFileUploadByteMultipart(java.lang.String)",
            "org.jboss.netty.handler.codec.http.multipart.MemoryAttribute:void addContent(org.jboss.netty.buffer.ChannelBuffer,boolean)",
            "org.jboss.netty.handler.codec.http.multipart.MixedFileUpload:void addContent(org.jboss.netty.buffer.ChannelBuffer,boolean)"
        ]
    },
    "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder:org.jboss.netty.handler.codec.http.HttpChunk encodeNextChunkMultipart(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder:org.jboss.netty.handler.codec.http.HttpChunk nextChunk()"
        ]
    },
    "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder:org.jboss.netty.handler.codec.http.HttpChunk encodeNextChunkUrlEncoded(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder:org.jboss.netty.handler.codec.http.HttpChunk nextChunk()"
        ]
    },
    "org.jboss.netty.handler.codec.http.multipart.InternalAttribute:org.jboss.netty.buffer.ChannelBuffer toChannelBuffer()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder:org.jboss.netty.handler.codec.http.HttpChunk encodeNextChunkMultipart(int)"
        ]
    },
    "org.jboss.netty.handler.codec.http.websocketx.WebSocket08FrameEncoder:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.oneone.OneToOneEncoder:boolean doEncode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.protobuf.ProtobufVarint32LengthFieldPrepender:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.oneone.OneToOneEncoder:boolean doEncode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)"
        ]
    },
    "org.jboss.netty.buffer.AbstractChannelBuffer:org.jboss.netty.buffer.ChannelBuffer readSlice(org.jboss.netty.buffer.ChannelBufferIndexFinder)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.replay.ReplayingDecoderBuffer:org.jboss.netty.buffer.ChannelBuffer readSlice(org.jboss.netty.buffer.ChannelBufferIndexFinder)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.replay.ReplayingDecoderBuffer:org.jboss.netty.buffer.ChannelBuffer readSlice(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.replay.ReplayingDecoderBuffer:org.jboss.netty.buffer.ChannelBuffer readSlice(org.jboss.netty.buffer.ChannelBufferIndexFinder)",
            "org.jboss.netty.handler.codec.replay.ReplayingDecoderBuffer:org.jboss.netty.buffer.ChannelBuffer readSlice(int)",
            "org.jboss.netty.handler.codec.spdy.SpdyHttpEncoder:org.jboss.netty.handler.codec.spdy.SpdyDataFrame[] createSpdyDataFrames(int,org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.codec.spdy.SpdySessionHandler:void updateSendWindowSize(org.jboss.netty.channel.ChannelHandlerContext,int,int)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.SpdyHttpEncoder:org.jboss.netty.handler.codec.spdy.SpdyDataFrame[] createSpdyDataFrames(int,org.jboss.netty.buffer.ChannelBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.spdy.SpdyHttpEncoder:void writeChunk(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelFuture,int,org.jboss.netty.handler.codec.http.HttpChunk,java.net.SocketAddress)",
            "org.jboss.netty.handler.codec.spdy.SpdyHttpEncoder:org.jboss.netty.channel.ChannelFuture getMessageFuture(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent,int,org.jboss.netty.handler.codec.http.HttpMessage)"
        ]
    },
    "org.jboss.netty.buffer.ChannelBuffers:org.jboss.netty.buffer.ChannelBuffer wrappedBuffer(org.jboss.netty.buffer.ChannelBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.buffer.ChannelBuffers:org.jboss.netty.buffer.ChannelBuffer wrappedBuffer(boolean,org.jboss.netty.buffer.ChannelBuffer[])"
        ]
    },
    "org.jboss.netty.handler.codec.frame.FrameDecoder:org.jboss.netty.buffer.ChannelBuffer updateCumulation(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.buffer.ChannelBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.frame.FrameDecoder:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.codec.replay.ReplayingDecoder:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)"
        ]
    },
    "org.jboss.netty.buffer.DirectChannelBufferFactory:org.jboss.netty.buffer.ChannelBuffer getBuffer(java.nio.ByteOrder,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.buffer.AbstractChannelBuffer:org.jboss.netty.buffer.ChannelBuffer readBytes(int)",
            "org.jboss.netty.buffer.AbstractChannelBufferFactory:org.jboss.netty.buffer.ChannelBuffer getBuffer(int)",
            "org.jboss.netty.buffer.CompositeChannelBuffer:org.jboss.netty.buffer.ChannelBuffer copy(int,int)",
            "org.jboss.netty.buffer.DirectChannelBufferFactory:org.jboss.netty.buffer.ChannelBuffer getBuffer(java.nio.ByteOrder,byte[],int,int)",
            "org.jboss.netty.buffer.DirectChannelBufferFactory:org.jboss.netty.buffer.ChannelBuffer getBuffer(java.nio.ByteBuffer)",
            "org.jboss.netty.buffer.DynamicChannelBuffer:void <init>(java.nio.ByteOrder,int,org.jboss.netty.buffer.ChannelBufferFactory)",
            "org.jboss.netty.buffer.DynamicChannelBuffer:void ensureWritableBytes(int)",
            "org.jboss.netty.handler.codec.base64.Base64:org.jboss.netty.buffer.ChannelBuffer encode(org.jboss.netty.buffer.ChannelBuffer,int,int,boolean,org.jboss.netty.handler.codec.base64.Base64Dialect,org.jboss.netty.buffer.ChannelBufferFactory)",
            "org.jboss.netty.handler.codec.base64.Base64:org.jboss.netty.buffer.ChannelBuffer decode(org.jboss.netty.buffer.ChannelBuffer,int,int,org.jboss.netty.handler.codec.base64.Base64Dialect,org.jboss.netty.buffer.ChannelBufferFactory)",
            "org.jboss.netty.handler.codec.frame.LengthFieldPrepender:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)",
            "org.jboss.netty.handler.codec.http.websocket.WebSocketFrameEncoder:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocket00FrameEncoder:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)",
            "org.jboss.netty.handler.codec.protobuf.ProtobufVarint32LengthFieldPrepender:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)"
        ]
    },
    "org.jboss.netty.handler.codec.base64.Base64:org.jboss.netty.buffer.ChannelBuffer encode(org.jboss.netty.buffer.ChannelBuffer,boolean,org.jboss.netty.handler.codec.base64.Base64Dialect,org.jboss.netty.buffer.ChannelBufferFactory)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.base64.Base64:org.jboss.netty.buffer.ChannelBuffer encode(org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.base64.Base64Dialect,org.jboss.netty.buffer.ChannelBufferFactory)",
            "org.jboss.netty.handler.codec.base64.Base64:org.jboss.netty.buffer.ChannelBuffer encode(org.jboss.netty.buffer.ChannelBuffer,boolean,org.jboss.netty.handler.codec.base64.Base64Dialect)",
            "org.jboss.netty.handler.codec.base64.Base64:org.jboss.netty.buffer.ChannelBuffer encode(org.jboss.netty.buffer.ChannelBuffer,boolean,org.jboss.netty.buffer.ChannelBufferFactory)"
        ]
    },
    "org.jboss.netty.handler.codec.base64.Base64:org.jboss.netty.buffer.ChannelBuffer encode(org.jboss.netty.buffer.ChannelBuffer,int,int,org.jboss.netty.handler.codec.base64.Base64Dialect,org.jboss.netty.buffer.ChannelBufferFactory)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.base64.Base64:org.jboss.netty.buffer.ChannelBuffer encode(org.jboss.netty.buffer.ChannelBuffer,int,int,org.jboss.netty.buffer.ChannelBufferFactory)"
        ]
    },
    "org.jboss.netty.handler.codec.base64.Base64:org.jboss.netty.buffer.ChannelBuffer encode(org.jboss.netty.buffer.ChannelBuffer,int,int,boolean,org.jboss.netty.handler.codec.base64.Base64Dialect)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.base64.Base64:org.jboss.netty.buffer.ChannelBuffer encode(org.jboss.netty.buffer.ChannelBuffer,int,int,org.jboss.netty.handler.codec.base64.Base64Dialect)",
            "org.jboss.netty.handler.codec.base64.Base64:org.jboss.netty.buffer.ChannelBuffer encode(org.jboss.netty.buffer.ChannelBuffer,int,int,boolean)",
            "org.jboss.netty.handler.codec.base64.Base64Encoder:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)"
        ]
    },
    "org.jboss.netty.handler.codec.base64.Base64:org.jboss.netty.buffer.ChannelBuffer encode(org.jboss.netty.buffer.ChannelBuffer,int,int,boolean,org.jboss.netty.buffer.ChannelBufferFactory)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.base64.Base64:org.jboss.netty.buffer.ChannelBuffer decode(org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.base64.Base64Dialect,org.jboss.netty.buffer.ChannelBufferFactory)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.base64.Base64:org.jboss.netty.buffer.ChannelBuffer decode(org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.base64.Base64Dialect)",
            "org.jboss.netty.handler.codec.base64.Base64:org.jboss.netty.buffer.ChannelBuffer decode(org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.buffer.ChannelBufferFactory)"
        ]
    },
    "org.jboss.netty.handler.codec.base64.Base64:org.jboss.netty.buffer.ChannelBuffer decode(org.jboss.netty.buffer.ChannelBuffer,int,int,org.jboss.netty.handler.codec.base64.Base64Dialect)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.base64.Base64:org.jboss.netty.buffer.ChannelBuffer decode(org.jboss.netty.buffer.ChannelBuffer,int,int)",
            "org.jboss.netty.handler.codec.base64.Base64Decoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)"
        ]
    },
    "org.jboss.netty.handler.codec.base64.Base64:org.jboss.netty.buffer.ChannelBuffer decode(org.jboss.netty.buffer.ChannelBuffer,int,int,org.jboss.netty.buffer.ChannelBufferFactory)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.frame.DelimiterBasedFrameDecoder:void <init>(int,boolean,org.jboss.netty.buffer.ChannelBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.frame.DelimiterBasedFrameDecoder:void <init>(int,org.jboss.netty.buffer.ChannelBuffer)"
        ]
    },
    "org.jboss.netty.handler.codec.frame.DelimiterBasedFrameDecoder:void <init>(int,boolean,org.jboss.netty.buffer.ChannelBuffer[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.frame.DelimiterBasedFrameDecoder:void <init>(int,org.jboss.netty.buffer.ChannelBuffer[])"
        ]
    },
    "org.jboss.netty.handler.codec.http.multipart.MixedAttribute:org.jboss.netty.buffer.ChannelBuffer getChunk(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder:org.jboss.netty.handler.codec.http.HttpChunk encodeNextChunkMultipart(int)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder:org.jboss.netty.handler.codec.http.HttpChunk encodeNextChunkUrlEncoded(int)",
            "org.jboss.netty.handler.codec.http.multipart.MixedAttribute:org.jboss.netty.buffer.ChannelBuffer getChunk(int)"
        ]
    },
    "org.jboss.netty.handler.codec.http.multipart.MixedFileUpload:org.jboss.netty.buffer.ChannelBuffer getChunk(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder:org.jboss.netty.handler.codec.http.HttpChunk encodeNextChunkMultipart(int)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder:org.jboss.netty.handler.codec.http.HttpChunk encodeNextChunkUrlEncoded(int)",
            "org.jboss.netty.handler.codec.http.multipart.MixedFileUpload:org.jboss.netty.buffer.ChannelBuffer getChunk(int)"
        ]
    },
    "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder:org.jboss.netty.handler.codec.http.HttpChunk nextChunk()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder:org.jboss.netty.handler.codec.http.HttpRequest finalizeRequest()",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder:java.lang.Object nextChunk()"
        ]
    },
    "org.jboss.netty.handler.codec.compression.ZlibEncoder:void <init>(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.compression.ZlibEncoder:void <init>()"
        ]
    },
    "org.jboss.netty.handler.codec.compression.ZlibEncoder:void <init>(org.jboss.netty.handler.codec.compression.ZlibWrapper)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestDecoder:void offer(org.jboss.netty.handler.codec.http.HttpChunk)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestDecoder:void offer(org.jboss.netty.handler.codec.http.HttpChunk)"
        ]
    },
    "org.jboss.netty.util.internal.jzlib.ZStream:int deflateParams(int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.util.internal.jzlib.ZStream:int inflateInit(java.lang.Enum)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.compression.ZlibDecoder:void <init>(org.jboss.netty.handler.codec.compression.ZlibWrapper)",
            "org.jboss.netty.handler.codec.compression.ZlibDecoder:void <init>(byte[])"
        ]
    },
    "org.jboss.netty.util.internal.jzlib.ZStream:int inflateInit(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.util.internal.jzlib.ZStream:int inflateInit()"
        ]
    },
    "org.jboss.netty.buffer.ChannelBuffers:org.jboss.netty.buffer.ChannelBuffer copiedBuffer(java.lang.CharSequence,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.buffer.ChannelBuffers:org.jboss.netty.buffer.ChannelBuffer copiedBuffer(java.lang.String,java.lang.String)",
            "org.jboss.netty.handler.codec.base64.Base64Decoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)",
            "org.jboss.netty.handler.codec.http.HttpChunkAggregator:void <clinit>()",
            "org.jboss.netty.handler.codec.http.HttpMessageEncoder:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)",
            "org.jboss.netty.handler.codec.http.HttpMessageEncoder:void <clinit>()",
            "org.jboss.netty.handler.codec.http.multipart.InternalAttribute:org.jboss.netty.buffer.ChannelBuffer toChannelBuffer()",
            "org.jboss.netty.handler.codec.http.websocket.DefaultWebSocketFrame:void <init>(java.lang.String)",
            "org.jboss.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame:void setText(java.lang.String)",
            "org.jboss.netty.handler.codec.http.websocketx.TextWebSocketFrame:void <init>(java.lang.String)",
            "org.jboss.netty.handler.codec.http.websocketx.TextWebSocketFrame:void <init>(boolean,int,java.lang.String)",
            "org.jboss.netty.handler.codec.http.websocketx.TextWebSocketFrame:void setText(java.lang.String)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker07:org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker08:org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker13:org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerHandshaker07:org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel,org.jboss.netty.handler.codec.http.HttpRequest)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerHandshaker08:org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel,org.jboss.netty.handler.codec.http.HttpRequest)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerHandshaker13:org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel,org.jboss.netty.handler.codec.http.HttpRequest)"
        ]
    },
    "org.jboss.netty.buffer.ChannelBuffers:org.jboss.netty.buffer.ChannelBuffer copiedBuffer(java.nio.ByteOrder,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.string.StringEncoder:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.oneone.OneToOneEncoder:boolean doEncode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)"
        ]
    },
    "org.jboss.netty.buffer.ChannelBuffers:org.jboss.netty.buffer.ChannelBuffer copiedBuffer(java.lang.CharSequence,int,int,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.buffer.ChannelBuffers:org.jboss.netty.buffer.ChannelBuffer copiedBuffer(char[],java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.buffer.ChannelBuffers:org.jboss.netty.buffer.ChannelBuffer copiedBuffer(char[],int,int,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.buffer.ChannelBuffers:org.jboss.netty.buffer.ChannelBuffer copiedBuffer(java.nio.ByteOrder,char[],java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.buffer.AbstractChannelBuffer:java.lang.String toString(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.http.multipart.AbstractMemoryHttpData:java.lang.String getString(java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.multipart.AbstractMemoryHttpData:java.lang.String getString()",
            "org.jboss.netty.handler.codec.http.multipart.MixedAttribute:java.lang.String getString(java.nio.charset.Charset)",
            "org.jboss.netty.handler.codec.http.multipart.MixedFileUpload:java.lang.String getString(java.nio.charset.Charset)"
        ]
    },
    "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:java.lang.String readLineStandard()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:java.lang.String readLine()"
        ]
    },
    "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:java.lang.String readLine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData findMultipartDisposition()"
        ]
    },
    "org.jboss.netty.handler.codec.http.multipart.MemoryAttribute:java.lang.String getValue()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData decodeMultipart(org.jboss.netty.handler.codec.http.multipart.HttpPostRequestDecoder$MultiPartStatus)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData getFileUpload(java.lang.String)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder:void addBodyHttpData(org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData)",
            "org.jboss.netty.handler.codec.http.multipart.MemoryAttribute:java.lang.String toString()",
            "org.jboss.netty.handler.codec.http.multipart.MixedAttribute:java.lang.String getValue()"
        ]
    },
    "org.jboss.netty.handler.codec.http.websocket.DefaultWebSocketFrame:java.lang.String getTextData()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.http.websocketx.CloseWebSocketFrame:java.lang.String getReasonText()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame:java.lang.String getText()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.http.websocketx.TextWebSocketFrame:java.lang.String getText()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.websocketx.TextWebSocketFrame:java.lang.String toString()"
        ]
    },
    "org.jboss.netty.handler.codec.http.websocketx.WebSocketUtil:java.lang.String base64(byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.http.websocketx.WebSocketUtil:java.lang.String base64(org.jboss.netty.buffer.ChannelBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker07:org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker08:org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker13:org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerHandshaker07:org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel,org.jboss.netty.handler.codec.http.HttpRequest)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerHandshaker08:org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel,org.jboss.netty.handler.codec.http.HttpRequest)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerHandshaker13:org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel,org.jboss.netty.handler.codec.http.HttpRequest)"
        ]
    },
    "org.jboss.netty.handler.codec.string.StringDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.oneone.OneToOneDecoder:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.buffer.AbstractChannelBuffer:java.lang.String toString(int,int,java.lang.String,org.jboss.netty.buffer.ChannelBufferIndexFinder)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.buffer.AbstractChannelBuffer:java.lang.String toString(java.lang.String,org.jboss.netty.buffer.ChannelBufferIndexFinder)",
            "org.jboss.netty.handler.codec.replay.ReplayingDecoderBuffer:java.lang.String toString(int,int,java.lang.String,org.jboss.netty.buffer.ChannelBufferIndexFinder)"
        ]
    },
    "org.jboss.netty.handler.codec.replay.ReplayingDecoderBuffer:java.lang.String toString(int,int,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.replay.ReplayingDecoderBuffer:java.lang.String toString(int,int,java.lang.String)"
        ]
    },
    "org.apache.commons.lang.StringEscapeUtils:java.lang.String escapeXml(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.StringEscapeUtils:java.lang.String escapeHtml(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.StringEscapeUtils:java.lang.String unescapeXml(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.StringEscapeUtils:void unescapeHtml(java.io.Writer,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.StringEscapeUtils:java.lang.String unescapeHtml(java.lang.String)"
        ]
    },
    "org.apache.commons.lang.StringEscapeUtils:void unescapeXml(java.io.Writer,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.time.FastDateFormat:void readObject(java.io.ObjectInputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.time.FastDateFormat:java.lang.String format(long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.time.FastDateFormat:java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.text.CompositeFormat:java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)",
            "org.apache.commons.lang3.text.CompositeFormat:java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)"
        ]
    },
    "org.apache.commons.lang.time.FastDateFormat:java.lang.StringBuffer format(long,java.lang.StringBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.time.FastDateFormat:java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)"
        ]
    },
    "org.apache.commons.lang.time.FastDateFormat:java.lang.String format(java.util.Calendar)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.time.DateFormatUtils:java.lang.String format(java.util.Calendar,java.lang.String,java.util.TimeZone,java.util.Locale)"
        ]
    },
    "org.apache.commons.lang3.time.FastDatePrinter:void <init>(java.lang.String,java.util.TimeZone,java.util.Locale)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.time.FastDateFormat:void <init>(java.lang.String,java.util.TimeZone,java.util.Locale,java.util.Date)"
        ]
    },
    "org.apache.commons.lang3.time.FastDatePrinter:void readObject(java.io.ObjectInputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.time.FastDatePrinter:java.lang.String format(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.time.FastDateFormat:java.lang.String format(long)"
        ]
    },
    "org.apache.commons.lang3.time.FastDatePrinter:java.lang.String format(java.util.Date)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.time.FastDateFormat:java.lang.String format(java.util.Date)"
        ]
    },
    "org.apache.commons.lang3.time.FastDateFormat:java.lang.StringBuffer format(java.util.Date,java.lang.StringBuffer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.time.FastDatePrinter:java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.time.FastDateFormat:java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)"
        ]
    },
    "org.apache.commons.lang3.time.FastDatePrinter:java.lang.StringBuffer format(long,java.lang.StringBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.time.FastDateFormat:java.lang.StringBuffer format(long,java.lang.StringBuffer)",
            "org.apache.commons.lang3.time.FastDatePrinter:java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)"
        ]
    },
    "org.apache.commons.lang3.time.FastDateFormat:java.lang.StringBuffer format(java.util.Calendar,java.lang.StringBuffer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.time.FastDatePrinter:java.lang.String format(java.util.Calendar)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.time.FastDateFormat:java.lang.String format(java.util.Calendar)"
        ]
    },
    "org.apache.commons.lang3.time.FastDateFormat:org.apache.commons.lang3.time.FastDateFormat getDateTimeInstance(int,int,java.util.TimeZone)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.time.FastDateFormat:org.apache.commons.lang3.time.FastDateFormat getInstance()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.util.Tools:java.lang.Object lambda$null$34(java.util.function.Supplier,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.util.Tools$lambda_null_34__111:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.onlab.stc.StepProcessor:int execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.stc.StepProcessor:void run()"
        ]
    },
    "org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor:void <init>(int,long,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.execution.OrderedDownstreamThreadPoolExecutor:void <init>(int)"
        ]
    },
    "org.jboss.netty.handler.execution.OrderedDownstreamThreadPoolExecutor:void <init>(int,long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.util.SharedExecutors:java.util.concurrent.ExecutorService getSingleThreadExecutor()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.util.SharedExecutors:java.util.concurrent.ExecutorService getPoolThreadExecutor()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.util.SharedExecutors:java.util.Timer getTimer()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.util.SharedExecutors:void shutdown()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.ArrayUtils:java.lang.String toString(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.ClassUtils:java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])"
        ]
    },
    "org.apache.commons.lang3.builder.ToStringBuilder:java.lang.Object build()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.objectweb.asm.ClassWriter:byte[] toByteArray()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.objectweb.asm.ClassWriter:byte[] toByteArray()",
            "com.esotericsoftware.reflectasm.ConstructorAccess:com.esotericsoftware.reflectasm.ConstructorAccess get(java.lang.Class)",
            "com.esotericsoftware.reflectasm.FieldAccess:com.esotericsoftware.reflectasm.FieldAccess get(java.lang.Class)",
            "com.esotericsoftware.reflectasm.MethodAccess:com.esotericsoftware.reflectasm.MethodAccess get(java.lang.Class)"
        ]
    },
    "com.eclipsesource.json.JsonValue:com.eclipsesource.json.JsonValue readFrom(java.io.Reader)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.eclipsesource.json.JsonArray:com.eclipsesource.json.JsonArray readFrom(java.io.Reader)",
            "com.eclipsesource.json.JsonObject:com.eclipsesource.json.JsonObject readFrom(java.io.Reader)"
        ]
    },
    "com.eclipsesource.json.JsonValue:com.eclipsesource.json.JsonValue readFrom(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.eclipsesource.json.JsonArray:com.eclipsesource.json.JsonArray readFrom(java.lang.String)",
            "com.eclipsesource.json.JsonObject:com.eclipsesource.json.JsonObject readFrom(java.lang.String)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$ClassSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readClassAndObject(com.esotericsoftware.kryo.io.Input)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:java.util.EnumSet read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$DateSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readClassAndObject(com.esotericsoftware.kryo.io.Input)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:java.util.EnumSet read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$DateSerializer:java.lang.Object copy(com.esotericsoftware.kryo.Kryo,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:java.lang.Object copy(java.lang.Object)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object copy(java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object copyShallow(java.lang.Object)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object copyShallow(java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:java.lang.Object copy(com.esotericsoftware.kryo.Kryo,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:java.lang.Object copy(com.esotericsoftware.kryo.Kryo,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$ClassSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeClassAndObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.EnumSet)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "org.apache.commons.lang.builder.ReflectionToStringBuilder:java.lang.String toString(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.builder.ToStringBuilder:java.lang.String reflectionToString(java.lang.Object)"
        ]
    },
    "org.apache.commons.lang.builder.ReflectionToStringBuilder:java.lang.String toString(java.lang.Object,org.apache.commons.lang.builder.ToStringStyle)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.builder.ToStringBuilder:java.lang.String reflectionToString(java.lang.Object,org.apache.commons.lang.builder.ToStringStyle)"
        ]
    },
    "org.apache.commons.lang.builder.ReflectionToStringBuilder:java.lang.String toString(java.lang.Object,org.apache.commons.lang.builder.ToStringStyle,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.builder.ReflectionToStringBuilder:java.lang.String toString(java.lang.Object,org.apache.commons.lang.builder.ToStringStyle,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.builder.ToStringBuilder:java.lang.String reflectionToString(java.lang.Object,org.apache.commons.lang.builder.ToStringStyle,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.builder.ToStringBuilder:java.lang.String reflectionToString(java.lang.Object,org.apache.commons.lang.builder.ToStringStyle,boolean,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.io.Input:void skip(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.ByteBufferInput:long skip(long)",
            "com.esotericsoftware.kryo.io.Input:long skip(long)",
            "com.esotericsoftware.kryo.io.InputChunked:void nextChunks()"
        ]
    },
    "com.esotericsoftware.kryo.io.Input:byte readByte()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.io.KryoDataInput:byte readByte()",
            "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmByteField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$ByteSerializer:java.lang.Byte read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.ObjectField$ObjectByteField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeByteField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeRegionField:void readSlow(com.esotericsoftware.kryo.io.Input,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.Input:int readByteUnsigned()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.KryoDataInput:int readUnsignedByte()"
        ]
    },
    "com.esotericsoftware.kryo.io.Input:void readBytes(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.Input:byte[] readBytes(int)",
            "com.esotericsoftware.kryo.io.Input:void readBytes(byte[])",
            "com.esotericsoftware.kryo.io.KryoDataInput:void readFully(byte[],int,int)"
        ]
    },
    "com.esotericsoftware.kryo.io.Input:int readInt()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.FastInput:int readInt(boolean)",
            "com.esotericsoftware.kryo.io.Input:float readFloat()",
            "com.esotericsoftware.kryo.io.Input:int[] readInts(int)",
            "com.esotericsoftware.kryo.io.KryoDataInput:int readInt()",
            "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmIntField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.ObjectField$ObjectIntField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeIntField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.Input:int readVarInt(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:int readReferenceOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class,boolean)",
            "com.esotericsoftware.kryo.io.Input:int readInt(boolean)",
            "com.esotericsoftware.kryo.serializers.CollectionSerializer:java.util.Collection read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.CompatibleFieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$BooleanArraySerializer:boolean[] read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ByteArraySerializer:byte[] read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$CharArraySerializer:char[] read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$DoubleArraySerializer:double[] read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$FloatArraySerializer:float[] read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$IntArraySerializer:int[] read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$LongArraySerializer:long[] read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ObjectArraySerializer:java.lang.Object[] read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ShortArraySerializer:short[] read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$StringArraySerializer:java.lang.String[] read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$BigIntegerSerializer:java.math.BigInteger read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSerializer:java.lang.Enum read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.TaggedFieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.util.DefaultClassResolver:com.esotericsoftware.kryo.Registration readClass(com.esotericsoftware.kryo.io.Input)",
            "com.esotericsoftware.kryo.util.DefaultClassResolver:com.esotericsoftware.kryo.Registration readName(com.esotericsoftware.kryo.io.Input)"
        ]
    },
    "com.esotericsoftware.kryo.io.Input:int readInt_slow(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.Input:int readVarInt(boolean)"
        ]
    },
    "com.esotericsoftware.kryo.io.Input:java.lang.String readString()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.KryoDataInput:java.lang.String readUTF()",
            "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmStringField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.CompatibleFieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$StringArraySerializer:java.lang.String[] read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$CurrencySerializer:java.util.Currency read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$LocaleSerializer:java.util.Locale read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$StringBufferSerializer:java.lang.StringBuffer read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$StringSerializer:java.lang.String read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$TimeZoneSerializer:java.util.TimeZone read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeStringField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.util.DefaultClassResolver:com.esotericsoftware.kryo.Registration readName(com.esotericsoftware.kryo.io.Input)"
        ]
    },
    "com.esotericsoftware.kryo.io.Input:int readUtf8Length_slow(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.Input:java.lang.String readString()",
            "com.esotericsoftware.kryo.io.Input:java.lang.StringBuilder readStringBuilder()"
        ]
    },
    "com.esotericsoftware.kryo.io.Input:void readUtf8(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.Input:java.lang.String readString()",
            "com.esotericsoftware.kryo.io.Input:java.lang.StringBuilder readStringBuilder()"
        ]
    },
    "com.esotericsoftware.kryo.io.Input:void readUtf8_slow(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.Input:void readUtf8(int)"
        ]
    },
    "com.esotericsoftware.kryo.io.Input:java.lang.String readAscii_slow()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.Input:java.lang.String readAscii()"
        ]
    },
    "com.esotericsoftware.kryo.io.Input:java.lang.StringBuilder readStringBuilder()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$StringBuilderSerializer:java.lang.StringBuilder read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.io.Input:short readShort()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.Input:short[] readShorts(int)",
            "com.esotericsoftware.kryo.io.KryoDataInput:short readShort()",
            "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmShortField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$ShortSerializer:java.lang.Short read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.ObjectField$ObjectShortField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeShortField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.Input:int readShortUnsigned()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.KryoDataInput:int readUnsignedShort()"
        ]
    },
    "com.esotericsoftware.kryo.io.Input:long readLong()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.FastInput:long readLong(boolean)",
            "com.esotericsoftware.kryo.io.Input:double readDouble()",
            "com.esotericsoftware.kryo.io.Input:long[] readLongs(int)",
            "com.esotericsoftware.kryo.io.KryoDataInput:long readLong()",
            "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmLongField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.ObjectField$ObjectLongField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeLongField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeRegionField:void readSlow(com.esotericsoftware.kryo.io.Input,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.Input:long readVarLong(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.Input:long readLong(boolean)"
        ]
    },
    "com.esotericsoftware.kryo.io.Input:long readLong_slow(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.Input:long readVarLong(boolean)"
        ]
    },
    "com.esotericsoftware.kryo.io.Input:boolean readBoolean()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.KryoDataInput:boolean readBoolean()",
            "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmBooleanField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$BooleanArraySerializer:boolean[] read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$BooleanSerializer:java.lang.Boolean read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$CalendarSerializer:java.util.Calendar read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.ObjectField$ObjectBooleanField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeBooleanField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.Input:char readChar()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.Input:char[] readChars(int)",
            "com.esotericsoftware.kryo.io.KryoDataInput:char readChar()",
            "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmCharField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$CharSerializer:java.lang.Character read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.ObjectField$ObjectCharField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeCharField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.Input:boolean eof()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.io.Input:int read()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.objectweb.asm.ClassReader:byte[] a(java.io.InputStream,boolean)",
            "com.esotericsoftware.kryo.io.InputChunked:void readChunkSize()",
            "com.esotericsoftware.kryo.io.KryoObjectInput:int read()",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$ClassSerializer:java.lang.Class read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.io.Input:int read(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.buffer.ByteBufferBackedChannelBuffer:int setBytes(int,java.io.InputStream,int)",
            "org.jboss.netty.buffer.HeapChannelBuffer:int setBytes(int,java.io.InputStream,int)",
            "org.objectweb.asm.ClassReader:byte[] a(java.io.InputStream,boolean)",
            "com.esotericsoftware.kryo.io.ByteBufferInput:int fill(java.nio.ByteBuffer,int,int)",
            "com.esotericsoftware.kryo.io.Input:int fill(byte[],int,int)",
            "com.esotericsoftware.kryo.io.Input:int read(byte[])",
            "com.esotericsoftware.kryo.io.KryoObjectInput:int read(byte[],int,int)"
        ]
    },
    "com.esotericsoftware.kryo.io.Input:boolean canReadInt()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.io.Input:boolean canReadLong()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.io.Output:void write(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.KryoDataOutput:void write(int)",
            "com.esotericsoftware.kryo.io.KryoDataOutput:void writeBytes(java.lang.String)",
            "com.esotericsoftware.kryo.io.KryoDataOutput:void writeChars(java.lang.String)",
            "com.esotericsoftware.kryo.io.OutputChunked:void writeChunkSize()",
            "com.esotericsoftware.kryo.io.OutputChunked:void endChunks()",
            "com.esotericsoftware.kryo.io.UnsafeOutput:int writeVarInt(int,boolean)",
            "com.esotericsoftware.kryo.io.UnsafeOutput:int writeVarLong(long,boolean)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeRegionField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.Output:void writeByte(byte)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmByteField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$ByteSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Byte)",
            "com.esotericsoftware.kryo.serializers.ObjectField$ObjectByteField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeByteField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.Output:void writeByte(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.KryoDataOutput:void writeByte(int)",
            "com.esotericsoftware.kryo.io.Output:void writeString(java.lang.String)",
            "com.esotericsoftware.kryo.io.Output:void writeString(java.lang.CharSequence)",
            "com.esotericsoftware.kryo.io.Output:void writeAscii(java.lang.String)",
            "com.esotericsoftware.kryo.io.UnsafeOutput:int writeVarLong(long,boolean)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$BigIntegerSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.math.BigInteger)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$ClassSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.io.Output:void writeBytes(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.Output:void write(byte[])",
            "com.esotericsoftware.kryo.io.Output:void write(byte[],int,int)",
            "com.esotericsoftware.kryo.io.Output:void writeBytes(byte[])"
        ]
    },
    "com.esotericsoftware.kryo.io.Output:void writeInt(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.FastOutput:int writeInt(int,boolean)",
            "com.esotericsoftware.kryo.io.KryoDataOutput:void writeInt(int)",
            "com.esotericsoftware.kryo.io.Output:void writeFloat(float)",
            "com.esotericsoftware.kryo.io.Output:void writeInts(int[])",
            "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmIntField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.ObjectField$ObjectIntField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeIntField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.Output:int writeVarInt(int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:boolean writeReferenceOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,boolean)",
            "com.esotericsoftware.kryo.io.Output:int writeInt(int,boolean)",
            "com.esotericsoftware.kryo.serializers.CollectionSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.Collection)",
            "com.esotericsoftware.kryo.serializers.CompatibleFieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$BooleanArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,boolean[])",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ByteArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,byte[])",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$CharArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,char[])",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$DoubleArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,double[])",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$FloatArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,float[])",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$IntArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,int[])",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$LongArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,long[])",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ObjectArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object[])",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ShortArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,short[])",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$StringArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.String[])",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$BigDecimalSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.math.BigDecimal)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$BigIntegerSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.math.BigInteger)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Enum)",
            "com.esotericsoftware.kryo.serializers.TaggedFieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.util.DefaultClassResolver:com.esotericsoftware.kryo.Registration writeClass(com.esotericsoftware.kryo.io.Output,java.lang.Class)",
            "com.esotericsoftware.kryo.util.DefaultClassResolver:void writeName(com.esotericsoftware.kryo.io.Output,java.lang.Class,com.esotericsoftware.kryo.Registration)"
        ]
    },
    "com.esotericsoftware.kryo.io.Output:void writeUtf8Length(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.Output:void writeString(java.lang.String)",
            "com.esotericsoftware.kryo.io.Output:void writeString(java.lang.CharSequence)"
        ]
    },
    "com.esotericsoftware.kryo.io.Output:void writeString_slow(java.lang.CharSequence,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.Output:void writeString(java.lang.String)",
            "com.esotericsoftware.kryo.io.Output:void writeString(java.lang.CharSequence)"
        ]
    },
    "com.esotericsoftware.kryo.io.Output:void writeAscii_slow(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.Output:void writeString(java.lang.String)",
            "com.esotericsoftware.kryo.io.Output:void writeAscii(java.lang.String)"
        ]
    },
    "com.esotericsoftware.kryo.io.Output:void writeShort(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.KryoDataOutput:void writeShort(int)",
            "com.esotericsoftware.kryo.io.Output:void writeShorts(short[])",
            "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmShortField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$ShortSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Short)",
            "com.esotericsoftware.kryo.serializers.ObjectField$ObjectShortField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeShortField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.Output:void writeLong(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.FastOutput:int writeLong(long,boolean)",
            "com.esotericsoftware.kryo.io.KryoDataOutput:void writeLong(long)",
            "com.esotericsoftware.kryo.io.Output:void writeDouble(double)",
            "com.esotericsoftware.kryo.io.Output:void writeLongs(long[])",
            "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmLongField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.ObjectField$ObjectLongField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeLongField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeRegionField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.Output:int writeVarLong(long,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.Output:int writeLong(long,boolean)"
        ]
    },
    "com.esotericsoftware.kryo.io.Output:void writeBoolean(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.KryoDataOutput:void writeBoolean(boolean)",
            "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmBooleanField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$BooleanArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,boolean[])",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$BooleanSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Boolean)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$CalendarSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.Calendar)",
            "com.esotericsoftware.kryo.serializers.ObjectField$ObjectBooleanField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeBooleanField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.Output:void writeChar(char)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.KryoDataOutput:void writeChar(int)",
            "com.esotericsoftware.kryo.io.Output:void writeChars(char[])",
            "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmCharField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$CharSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Character)",
            "com.esotericsoftware.kryo.serializers.ObjectField$ObjectCharField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeCharField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.ByteBufferOutput:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.ByteBufferOutput:void close()",
            "com.esotericsoftware.kryo.io.KryoObjectOutput:void close()",
            "com.esotericsoftware.kryo.io.Output:void close()"
        ]
    },
    "com.esotericsoftware.kryo.io.KryoObjectOutput:void close()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.io.ByteBufferInput:int[] readInts(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.io.Input:float readFloat(float,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.io.Input:int[] readInts(int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.UnsafeInput:int[] readInts(int,boolean)",
            "com.esotericsoftware.kryo.io.UnsafeMemoryInput:int[] readInts(int,boolean)",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$IntArraySerializer:int[] read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$BigDecimalSerializer:java.math.BigDecimal read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$BigDecimalSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$CalendarSerializer:java.util.Calendar read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$CalendarSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$IntSerializer:java.lang.Integer read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$IntSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.io.ByteBufferInput:float[] readFloats(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$FloatArraySerializer:float[] read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$FloatSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readClassAndObject(com.esotericsoftware.kryo.io.Input)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:java.util.EnumSet read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.io.ByteBufferInput:short[] readShorts(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ShortArraySerializer:short[] read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$ShortSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readClassAndObject(com.esotericsoftware.kryo.io.Input)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:java.util.EnumSet read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.io.ByteBufferInput:long[] readLongs(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.io.Input:double readDouble(double,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.io.Input:long[] readLongs(int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.UnsafeInput:long[] readLongs(int,boolean)",
            "com.esotericsoftware.kryo.io.UnsafeMemoryInput:long[] readLongs(int,boolean)",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$LongArraySerializer:long[] read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$LongSerializer:java.lang.Long read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$LongSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.io.ByteBufferInput:double[] readDoubles(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$DoubleArraySerializer:double[] read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$DoubleSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readClassAndObject(com.esotericsoftware.kryo.io.Input)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:java.util.EnumSet read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.io.ByteBufferInput:char[] readChars(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$CharArraySerializer:char[] read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$CharSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readClassAndObject(com.esotericsoftware.kryo.io.Input)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:java.util.EnumSet read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$IntArraySerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readClassAndObject(com.esotericsoftware.kryo.io.Input)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:java.util.EnumSet read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$LongArraySerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readClassAndObject(com.esotericsoftware.kryo.io.Input)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:java.util.EnumSet read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$FloatArraySerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readClassAndObject(com.esotericsoftware.kryo.io.Input)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:java.util.EnumSet read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ShortArraySerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readClassAndObject(com.esotericsoftware.kryo.io.Input)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:java.util.EnumSet read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$CharArraySerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readClassAndObject(com.esotericsoftware.kryo.io.Input)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:java.util.EnumSet read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$DoubleArraySerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readClassAndObject(com.esotericsoftware.kryo.io.Input)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:java.util.EnumSet read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.io.ByteBufferInput:float readFloat(float,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.io.ByteBufferInput:double readDouble(double,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.io.ByteBufferOutput:int writeFloat(float,float,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.io.Output:int writeFloat(float,float,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.io.Output:void writeInts(int[],boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.UnsafeMemoryOutput:void writeInts(int[],boolean)",
            "com.esotericsoftware.kryo.io.UnsafeOutput:void writeInts(int[],boolean)",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$IntArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,int[])"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$BigDecimalSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.math.BigDecimal)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$BigDecimalSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$CalendarSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.Calendar)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$CalendarSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$IntSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Integer)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$IntSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.Output:int writeInt(int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.Output:int writeFloat(float,float,boolean)",
            "com.esotericsoftware.kryo.io.Output:void writeInts(int[],boolean)",
            "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmIntField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$BigDecimalSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.math.BigDecimal)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$CalendarSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.Calendar)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.EnumSet)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$IntSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Integer)",
            "com.esotericsoftware.kryo.serializers.MapSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.Map)",
            "com.esotericsoftware.kryo.serializers.ObjectField$ObjectIntField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeIntField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$BooleanArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,boolean[])": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$BooleanArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ByteArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ByteArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$BigIntegerSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.math.BigInteger)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$BigDecimalSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.math.BigDecimal)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$BigIntegerSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Enum)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.Output:int writeLong(long,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.Output:int writeDouble(double,double,boolean)",
            "com.esotericsoftware.kryo.io.Output:void writeLongs(long[],boolean)",
            "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmLongField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$CalendarSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.Calendar)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$DateSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.Date)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$LongSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Long)",
            "com.esotericsoftware.kryo.serializers.ObjectField$ObjectLongField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeLongField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.ByteBufferOutput:void writeInts(int[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.io.UnsafeMemoryOutput:int writeVarInt(int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:boolean writeReferenceOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,boolean)",
            "com.esotericsoftware.kryo.io.ByteBufferOutput:int writeInt(int,boolean)",
            "com.esotericsoftware.kryo.io.Output:int writeInt(int,boolean)",
            "com.esotericsoftware.kryo.io.UnsafeMemoryOutput:int writeInt(int,boolean)",
            "com.esotericsoftware.kryo.serializers.CollectionSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.Collection)",
            "com.esotericsoftware.kryo.serializers.CompatibleFieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$BooleanArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,boolean[])",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ByteArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,byte[])",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$CharArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,char[])",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$DoubleArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,double[])",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$FloatArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,float[])",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$IntArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,int[])",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$LongArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,long[])",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ObjectArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object[])",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ShortArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,short[])",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$StringArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.String[])",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$BigDecimalSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.math.BigDecimal)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$BigIntegerSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.math.BigInteger)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Enum)",
            "com.esotericsoftware.kryo.serializers.TaggedFieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.util.DefaultClassResolver:com.esotericsoftware.kryo.Registration writeClass(com.esotericsoftware.kryo.io.Output,java.lang.Class)",
            "com.esotericsoftware.kryo.util.DefaultClassResolver:void writeName(com.esotericsoftware.kryo.io.Output,java.lang.Class,com.esotericsoftware.kryo.Registration)"
        ]
    },
    "com.esotericsoftware.kryo.io.UnsafeMemoryOutput:int writeVarLong(long,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.ByteBufferOutput:int writeLong(long,boolean)",
            "com.esotericsoftware.kryo.io.Output:int writeLong(long,boolean)",
            "com.esotericsoftware.kryo.io.UnsafeMemoryOutput:int writeLong(long,boolean)"
        ]
    },
    "com.esotericsoftware.kryo.io.ByteBufferOutput:void writeFloats(float[])": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$FloatArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,float[])"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$FloatSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeClassAndObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.EnumSet)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.ByteBufferOutput:void writeShorts(short[])": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ShortArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,short[])"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$ShortSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeClassAndObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.EnumSet)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.ByteBufferOutput:int writeDouble(double,double,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.io.Output:int writeDouble(double,double,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.io.Output:void writeLongs(long[],boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.UnsafeMemoryOutput:void writeLongs(long[],boolean)",
            "com.esotericsoftware.kryo.io.UnsafeOutput:void writeLongs(long[],boolean)",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$LongArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,long[])"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$DateSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.Date)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$DateSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$LongSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Long)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$LongSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.ByteBufferOutput:void writeLongs(long[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.io.ByteBufferOutput:void writeChars(char[])": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$CharArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,char[])"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$CharSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeClassAndObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.EnumSet)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.ByteBufferOutput:void writeDoubles(double[])": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$DoubleArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,double[])"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$DoubleSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeClassAndObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.EnumSet)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$IntArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeClassAndObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.EnumSet)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$LongArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeClassAndObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.EnumSet)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$FloatArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeClassAndObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.EnumSet)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ShortArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeClassAndObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.EnumSet)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$CharArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeClassAndObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.EnumSet)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$DoubleArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeClassAndObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.EnumSet)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.UnsafeOutput:int writeVarInt(int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:boolean writeReferenceOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,boolean)",
            "com.esotericsoftware.kryo.io.Output:int writeInt(int,boolean)",
            "com.esotericsoftware.kryo.io.UnsafeOutput:int writeInt(int,boolean)",
            "com.esotericsoftware.kryo.serializers.CollectionSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.Collection)",
            "com.esotericsoftware.kryo.serializers.CompatibleFieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$BooleanArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,boolean[])",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ByteArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,byte[])",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$CharArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,char[])",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$DoubleArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,double[])",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$FloatArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,float[])",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$IntArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,int[])",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$LongArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,long[])",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ObjectArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object[])",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ShortArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,short[])",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$StringArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.String[])",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$BigDecimalSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.math.BigDecimal)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$BigIntegerSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.math.BigInteger)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Enum)",
            "com.esotericsoftware.kryo.serializers.TaggedFieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.util.DefaultClassResolver:com.esotericsoftware.kryo.Registration writeClass(com.esotericsoftware.kryo.io.Output,java.lang.Class)",
            "com.esotericsoftware.kryo.util.DefaultClassResolver:void writeName(com.esotericsoftware.kryo.io.Output,java.lang.Class,com.esotericsoftware.kryo.Registration)"
        ]
    },
    "com.esotericsoftware.kryo.io.UnsafeOutput:int writeVarLong(long,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.Output:int writeLong(long,boolean)",
            "com.esotericsoftware.kryo.io.UnsafeOutput:int writeLong(long,boolean)"
        ]
    },
    "org.apache.commons.lang3.builder.ToStringBuilder:java.lang.String reflectionToString(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.builder.ToStringBuilder:java.lang.String reflectionToString(java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.channel.socket.nio.NioDatagramWorkerPool:void <init>(java.util.concurrent.Executor,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.NioDatagramChannelFactory:void <init>(org.jboss.netty.channel.socket.InternetProtocolFamily)",
            "org.jboss.netty.channel.socket.nio.NioDatagramChannelFactory:void <init>(java.util.concurrent.Executor,int)",
            "org.jboss.netty.channel.socket.nio.NioDatagramChannelFactory:void <init>(java.util.concurrent.Executor,int,org.jboss.netty.channel.socket.InternetProtocolFamily)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioClientSocketChannelFactory:void <init>(java.util.concurrent.Executor,java.util.concurrent.Executor)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.NioClientSocketChannelFactory:void <init>()"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioClientSocketChannelFactory:void <init>(java.util.concurrent.Executor,java.util.concurrent.Executor,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.channel.socket.nio.NioServerSocketChannelFactory:void <init>(java.util.concurrent.Executor,java.util.concurrent.Executor)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.NioServerSocketChannelFactory:void <init>()"
        ]
    },
    "org.apache.commons.lang.math.Range:boolean containsRange(org.apache.commons.lang.math.Range)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.math.Range:boolean overlapsRange(org.apache.commons.lang.math.Range)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.ObjectUtils:java.lang.Object min(java.lang.Comparable,java.lang.Comparable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.ObjectUtils:java.lang.Object max(java.lang.Comparable,java.lang.Comparable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.ObjectUtils:int compare(java.lang.Comparable,java.lang.Comparable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.ObjectUtils:java.lang.Comparable min(java.lang.Comparable[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.ObjectUtils:java.lang.Comparable max(java.lang.Comparable[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.ObjectUtils:int compare(java.lang.Comparable,java.lang.Comparable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.packet.IGMP:org.onlab.packet.IGMP lambda$deserializer$30(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.IGMP$lambda_deserializer_30__89:org.onlab.packet.IPacket deserialize(byte[],int,int)"
        ]
    },
    "org.onlab.packet.IpPrefix:org.onlab.packet.Ip4Prefix getIp4Prefix()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.packet.IpPrefix:org.onlab.packet.Ip6Prefix getIp6Prefix()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.packet.pim.PIMAddrGroup:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.packet.pim.PIMAddrSource:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.packet.pim.PIMJoinPrune:void addJoin(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.packet.pim.PIMJoinPrune:void addPrune(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.http.multipart.MemoryAttribute:void addContent(org.jboss.netty.buffer.ChannelBuffer,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void loadFieldMultipartStandard(java.lang.String)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void loadFieldMultipart(java.lang.String)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributesStandard()",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributes()",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void setFinalBuffer(org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.http.multipart.MixedAttribute:void addContent(org.jboss.netty.buffer.ChannelBuffer,boolean)"
        ]
    },
    "org.jboss.netty.handler.codec.http.multipart.MixedFileUpload:void addContent(org.jboss.netty.buffer.ChannelBuffer,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void readFileUploadByteMultipartStandard(java.lang.String)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void readFileUploadByteMultipart(java.lang.String)",
            "org.jboss.netty.handler.codec.http.multipart.MixedFileUpload:void addContent(org.jboss.netty.buffer.ChannelBuffer,boolean)"
        ]
    },
    "org.jboss.netty.buffer.AbstractChannelBuffer:org.jboss.netty.buffer.ChannelBuffer readBytes(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.buffer.AbstractChannelBuffer:org.jboss.netty.buffer.ChannelBuffer readBytes(org.jboss.netty.buffer.ChannelBufferIndexFinder)",
            "org.jboss.netty.handler.codec.frame.FrameDecoder:void replace(java.lang.String,org.jboss.netty.channel.ChannelHandler)",
            "org.jboss.netty.handler.codec.http.HttpClientCodec$Decoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.http.HttpMessageDecoder$State)",
            "org.jboss.netty.handler.codec.http.HttpMessageDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.http.HttpMessageDecoder$State)",
            "org.jboss.netty.handler.codec.http.HttpMessageDecoder:java.lang.Object readFixedLengthContent(org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.http.websocket.WebSocketFrameDecoder:org.jboss.netty.handler.codec.http.websocket.WebSocketFrame decodeBinaryFrame(int,org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.http.websocket.WebSocketFrameDecoder:org.jboss.netty.handler.codec.http.websocket.WebSocketFrame decodeTextFrame(int,org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocket00FrameDecoder:org.jboss.netty.handler.codec.http.websocketx.WebSocketFrame decodeBinaryFrame(byte,org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocket00FrameDecoder:org.jboss.netty.handler.codec.http.websocketx.WebSocketFrame decodeTextFrame(org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder$State)",
            "org.jboss.netty.handler.codec.protobuf.ProtobufVarint32FrameDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.replay.ReplayingDecoderBuffer:org.jboss.netty.buffer.ChannelBuffer readBytes(org.jboss.netty.buffer.ChannelBufferIndexFinder)",
            "org.jboss.netty.handler.codec.replay.ReplayingDecoderBuffer:org.jboss.netty.buffer.ChannelBuffer readBytes(int)",
            "org.jboss.netty.handler.codec.serialization.CompatibleObjectEncoder:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)",
            "org.jboss.netty.handler.codec.socks.SocksAuthRequestDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.socks.SocksAuthRequestDecoder$State)",
            "org.jboss.netty.handler.codec.socks.SocksCmdRequestDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.socks.SocksCmdRequestDecoder$State)",
            "org.jboss.netty.handler.codec.socks.SocksCmdResponseDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.socks.SocksCmdResponseDecoder$State)",
            "org.jboss.netty.handler.codec.spdy.SpdyFrameDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)"
        ]
    },
    "org.jboss.netty.buffer.AbstractChannelBufferFactory:org.jboss.netty.buffer.ChannelBuffer getBuffer(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.NioDatagramWorker:boolean read(java.nio.channels.SelectionKey)",
            "org.jboss.netty.channel.socket.nio.NioWorker:boolean read(java.nio.channels.SelectionKey)",
            "org.jboss.netty.handler.codec.frame.FixedLengthFrameDecoder:org.jboss.netty.buffer.ChannelBuffer newCumulationBuffer(org.jboss.netty.channel.ChannelHandlerContext,int)",
            "org.jboss.netty.handler.codec.frame.FrameDecoder:org.jboss.netty.buffer.ChannelBuffer newCumulationBuffer(org.jboss.netty.channel.ChannelHandlerContext,int)",
            "org.jboss.netty.handler.codec.frame.FrameDecoder:org.jboss.netty.buffer.ChannelBuffer extractFrame(org.jboss.netty.buffer.ChannelBuffer,int,int)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder$State)",
            "org.jboss.netty.handler.ssl.SslHandler:void wrap(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel)",
            "org.jboss.netty.handler.ssl.SslHandler:org.jboss.netty.channel.ChannelFuture wrapNonAppData(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel)",
            "org.jboss.netty.handler.ssl.SslHandler:org.jboss.netty.buffer.ChannelBuffer unwrap(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,int,int)"
        ]
    },
    "org.jboss.netty.buffer.CompositeChannelBuffer:org.jboss.netty.buffer.ChannelBuffer copy(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.buffer.AbstractChannelBuffer:org.jboss.netty.buffer.ChannelBuffer copy()",
            "org.jboss.netty.buffer.DuplicatedChannelBuffer:org.jboss.netty.buffer.ChannelBuffer copy(int,int)",
            "org.jboss.netty.buffer.DynamicChannelBuffer:org.jboss.netty.buffer.ChannelBuffer copy(int,int)",
            "org.jboss.netty.buffer.ReadOnlyChannelBuffer:org.jboss.netty.buffer.ChannelBuffer copy(int,int)",
            "org.jboss.netty.buffer.SlicedChannelBuffer:org.jboss.netty.buffer.ChannelBuffer copy(int,int)",
            "org.jboss.netty.buffer.TruncatedChannelBuffer:org.jboss.netty.buffer.ChannelBuffer copy(int,int)",
            "org.jboss.netty.handler.codec.replay.ReplayingDecoderBuffer:org.jboss.netty.buffer.ChannelBuffer copy(int,int)"
        ]
    },
    "org.jboss.netty.buffer.DirectChannelBufferFactory:org.jboss.netty.buffer.ChannelBuffer getBuffer(java.nio.ByteOrder,byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.buffer.AbstractChannelBufferFactory:org.jboss.netty.buffer.ChannelBuffer getBuffer(byte[],int,int)",
            "org.jboss.netty.handler.codec.compression.ZlibEncoder:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)"
        ]
    },
    "org.jboss.netty.buffer.DirectChannelBufferFactory:org.jboss.netty.buffer.ChannelBuffer getBuffer(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.buffer.DynamicChannelBuffer:void <init>(java.nio.ByteOrder,int,org.jboss.netty.buffer.ChannelBufferFactory)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.buffer.ChannelBuffers:org.jboss.netty.buffer.ChannelBuffer dynamicBuffer(org.jboss.netty.buffer.ChannelBufferFactory)",
            "org.jboss.netty.buffer.ChannelBuffers:org.jboss.netty.buffer.ChannelBuffer dynamicBuffer(int,org.jboss.netty.buffer.ChannelBufferFactory)",
            "org.jboss.netty.buffer.ChannelBuffers:org.jboss.netty.buffer.ChannelBuffer dynamicBuffer(java.nio.ByteOrder,int,org.jboss.netty.buffer.ChannelBufferFactory)",
            "org.jboss.netty.buffer.DynamicChannelBuffer:void <init>(java.nio.ByteOrder,int)",
            "org.jboss.netty.buffer.DynamicChannelBuffer:org.jboss.netty.buffer.ChannelBuffer copy(int,int)",
            "org.jboss.netty.handler.codec.replay.UnsafeDynamicChannelBuffer:void <init>(org.jboss.netty.buffer.ChannelBufferFactory,int)"
        ]
    },
    "org.jboss.netty.buffer.DynamicChannelBuffer:void ensureWritableBytes(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.buffer.DynamicChannelBuffer:void writeByte(int)",
            "org.jboss.netty.buffer.DynamicChannelBuffer:void writeShort(int)",
            "org.jboss.netty.buffer.DynamicChannelBuffer:void writeMedium(int)",
            "org.jboss.netty.buffer.DynamicChannelBuffer:void writeInt(int)",
            "org.jboss.netty.buffer.DynamicChannelBuffer:void writeLong(long)",
            "org.jboss.netty.buffer.DynamicChannelBuffer:void writeBytes(byte[],int,int)",
            "org.jboss.netty.buffer.DynamicChannelBuffer:void writeBytes(org.jboss.netty.buffer.ChannelBuffer,int,int)",
            "org.jboss.netty.buffer.DynamicChannelBuffer:void writeBytes(java.nio.ByteBuffer)",
            "org.jboss.netty.buffer.DynamicChannelBuffer:int writeBytes(java.io.InputStream,int)",
            "org.jboss.netty.buffer.DynamicChannelBuffer:int writeBytes(java.nio.channels.ScatteringByteChannel,int)",
            "org.jboss.netty.buffer.DynamicChannelBuffer:void writeZero(int)",
            "org.jboss.netty.handler.codec.spdy.SpdyHeaderBlockZlibEncoder:void encode(org.jboss.netty.buffer.ChannelBuffer)"
        ]
    },
    "org.jboss.netty.handler.codec.http.websocket.WebSocketFrameEncoder:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.oneone.OneToOneEncoder:boolean doEncode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.http.websocketx.WebSocket00FrameEncoder:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.oneone.OneToOneEncoder:boolean doEncode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.base64.Base64:org.jboss.netty.buffer.ChannelBuffer encode(org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.base64.Base64Dialect,org.jboss.netty.buffer.ChannelBufferFactory)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.base64.Base64:org.jboss.netty.buffer.ChannelBuffer encode(org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.buffer.ChannelBufferFactory)"
        ]
    },
    "org.jboss.netty.handler.codec.base64.Base64:org.jboss.netty.buffer.ChannelBuffer encode(org.jboss.netty.buffer.ChannelBuffer,boolean,org.jboss.netty.handler.codec.base64.Base64Dialect)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.base64.Base64:org.jboss.netty.buffer.ChannelBuffer encode(org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.base64.Base64Dialect)",
            "org.jboss.netty.handler.codec.base64.Base64:org.jboss.netty.buffer.ChannelBuffer encode(org.jboss.netty.buffer.ChannelBuffer,boolean)"
        ]
    },
    "org.jboss.netty.handler.codec.base64.Base64:org.jboss.netty.buffer.ChannelBuffer encode(org.jboss.netty.buffer.ChannelBuffer,boolean,org.jboss.netty.buffer.ChannelBufferFactory)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.base64.Base64:org.jboss.netty.buffer.ChannelBuffer encode(org.jboss.netty.buffer.ChannelBuffer,int,int,org.jboss.netty.buffer.ChannelBufferFactory)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.base64.Base64:org.jboss.netty.buffer.ChannelBuffer encode(org.jboss.netty.buffer.ChannelBuffer,int,int,org.jboss.netty.handler.codec.base64.Base64Dialect)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.base64.Base64:org.jboss.netty.buffer.ChannelBuffer encode(org.jboss.netty.buffer.ChannelBuffer,int,int)"
        ]
    },
    "org.jboss.netty.handler.codec.base64.Base64:org.jboss.netty.buffer.ChannelBuffer encode(org.jboss.netty.buffer.ChannelBuffer,int,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.base64.Base64Encoder:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.oneone.OneToOneEncoder:boolean doEncode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.base64.Base64:org.jboss.netty.buffer.ChannelBuffer decode(org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.base64.Base64Dialect)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.base64.Base64:org.jboss.netty.buffer.ChannelBuffer decode(org.jboss.netty.buffer.ChannelBuffer)"
        ]
    },
    "org.jboss.netty.handler.codec.base64.Base64:org.jboss.netty.buffer.ChannelBuffer decode(org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.buffer.ChannelBufferFactory)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.base64.Base64:org.jboss.netty.buffer.ChannelBuffer decode(org.jboss.netty.buffer.ChannelBuffer,int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.base64.Base64Decoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.oneone.OneToOneDecoder:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.frame.DelimiterBasedFrameDecoder:void <init>(int,org.jboss.netty.buffer.ChannelBuffer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.frame.DelimiterBasedFrameDecoder:void <init>(int,org.jboss.netty.buffer.ChannelBuffer[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder:java.lang.Object nextChunk()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.stream.ChunkedWriteHandler:void flush(org.jboss.netty.channel.ChannelHandlerContext,boolean)"
        ]
    },
    "org.jboss.netty.handler.codec.compression.ZlibEncoder:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.compression.ZlibDecoder:void <init>(byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.util.internal.jzlib.ZStream:int inflateInit()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.buffer.ChannelBuffers:org.jboss.netty.buffer.ChannelBuffer copiedBuffer(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.http.HttpChunkAggregator:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.HttpChunkAggregator:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.codec.http.HttpChunkAggregator:void <clinit>()",
            "org.jboss.netty.handler.codec.rtsp.RtspMessageDecoder:void <init>(int,int,int)",
            "org.jboss.netty.handler.codec.spdy.SpdyOrHttpChooser:void addHttpHandlers(org.jboss.netty.channel.ChannelHandlerContext)"
        ]
    },
    "org.jboss.netty.handler.codec.http.HttpMessageEncoder:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.HttpMessageEncoder:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)",
            "org.jboss.netty.handler.codec.http.HttpMessageEncoder:void encodeHeaders(org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.http.HttpMessage)",
            "org.jboss.netty.handler.codec.http.HttpMessageEncoder:void encodeTrailingHeaders(org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.http.HttpChunkTrailer)",
            "org.jboss.netty.handler.codec.http.HttpMessageEncoder:void encodeHeader(org.jboss.netty.buffer.ChannelBuffer,java.lang.String,java.lang.String)",
            "org.jboss.netty.handler.codec.http.HttpMessageEncoder:void <clinit>()"
        ]
    },
    "org.jboss.netty.handler.codec.http.websocket.DefaultWebSocketFrame:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame:void setText(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame:void <init>(boolean,int,java.lang.String)"
        ]
    },
    "org.jboss.netty.handler.codec.http.websocketx.TextWebSocketFrame:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.http.websocketx.TextWebSocketFrame:void <init>(boolean,int,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.http.websocketx.TextWebSocketFrame:void setText(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.http.multipart.AbstractMemoryHttpData:java.lang.String getString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.multipart.MixedAttribute:java.lang.String getString()",
            "org.jboss.netty.handler.codec.http.multipart.MixedFileUpload:java.lang.String getString()"
        ]
    },
    "org.jboss.netty.handler.codec.http.multipart.MixedAttribute:java.lang.String getString(java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.multipart.MixedAttribute:java.lang.String getString(java.nio.charset.Charset)"
        ]
    },
    "org.jboss.netty.handler.codec.http.multipart.MixedFileUpload:java.lang.String getString(java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.multipart.MixedFileUpload:java.lang.String getString(java.nio.charset.Charset)"
        ]
    },
    "org.jboss.netty.handler.codec.http.multipart.MemoryAttribute:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.IGMP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.pim.PIMHelloOption:java.lang.String toString()",
            "org.onlab.util.Tools:java.lang.String get(java.util.Dictionary,java.lang.String)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:java.lang.String toString(java.lang.Object)",
            "org.jboss.netty.handler.codec.http.multipart.MixedAttribute:java.lang.String toString()",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdyHeaders:java.lang.String toString(java.lang.Object)",
            "org.jboss.netty.util.internal.StringUtil:java.lang.String stripControlCharacters(java.lang.Object)",
            "org.apache.commons.lang.builder.ReflectionToStringBuilder:java.lang.String[] toNoNullStringArray(java.lang.Object[])",
            "org.apache.commons.lang.mutable.MutableObject:java.lang.String toString()",
            "org.apache.commons.lang.ObjectUtils:java.lang.String toString(java.lang.Object)",
            "org.apache.commons.lang.ObjectUtils:java.lang.String toString(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.lang.Object[],char,int,int)",
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.lang.Object[],java.lang.String,int,int)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder append(java.lang.Object)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendFixedWidthPadLeft(java.lang.Object,int,char)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendFixedWidthPadRight(java.lang.Object,int,char)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder insert(int,java.lang.Object)",
            "org.apache.commons.lang.text.StrLookup$MapStrLookup:java.lang.String lookup(java.lang.String)",
            "org.apache.commons.lang.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Properties)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:java.lang.String toString()",
            "org.apache.commons.lang.time.DurationFormatUtils:java.lang.String format(org.apache.commons.lang.time.DurationFormatUtils$Token[],int,int,int,int,int,int,int,boolean)",
            "org.apache.commons.lang3.builder.ReflectionToStringBuilder:java.lang.String[] toNoNullStringArray(java.lang.Object[])",
            "org.apache.commons.lang3.exception.DefaultExceptionContext:java.lang.String getFormattedExceptionMessage(java.lang.String)",
            "org.apache.commons.lang3.mutable.MutableObject:java.lang.String toString()",
            "org.apache.commons.lang3.ObjectUtils:java.lang.String toString(java.lang.Object)",
            "org.apache.commons.lang3.ObjectUtils:java.lang.String toString(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder append(java.lang.Object)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadLeft(java.lang.Object,int,char)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadRight(java.lang.Object,int,char)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder insert(int,java.lang.Object)",
            "org.apache.commons.lang3.text.StrLookup$MapStrLookup:java.lang.String lookup(java.lang.String)",
            "org.apache.commons.lang3.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Properties)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:java.lang.String toString()",
            "org.apache.commons.lang3.time.DurationFormatUtils:java.lang.String format(org.apache.commons.lang3.time.DurationFormatUtils$Token[],long,long,long,long,long,long,long,boolean)"
        ]
    },
    "org.jboss.netty.handler.codec.http.multipart.MixedAttribute:java.lang.String getValue()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData decodeMultipart(org.jboss.netty.handler.codec.http.multipart.HttpPostRequestDecoder$MultiPartStatus)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData getFileUpload(java.lang.String)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder:void addBodyHttpData(org.jboss.netty.handler.codec.http.multipart.InterfaceHttpData)",
            "org.jboss.netty.handler.codec.http.multipart.MixedAttribute:java.lang.String getValue()"
        ]
    },
    "org.jboss.netty.handler.codec.http.websocketx.TextWebSocketFrame:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.IGMP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.pim.PIMHelloOption:java.lang.String toString()",
            "org.onlab.util.Tools:java.lang.String get(java.util.Dictionary,java.lang.String)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:java.lang.String toString(java.lang.Object)",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdyHeaders:java.lang.String toString(java.lang.Object)",
            "org.jboss.netty.util.internal.StringUtil:java.lang.String stripControlCharacters(java.lang.Object)",
            "org.apache.commons.lang.builder.ReflectionToStringBuilder:java.lang.String[] toNoNullStringArray(java.lang.Object[])",
            "org.apache.commons.lang.mutable.MutableObject:java.lang.String toString()",
            "org.apache.commons.lang.ObjectUtils:java.lang.String toString(java.lang.Object)",
            "org.apache.commons.lang.ObjectUtils:java.lang.String toString(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.lang.Object[],char,int,int)",
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.lang.Object[],java.lang.String,int,int)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder append(java.lang.Object)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendFixedWidthPadLeft(java.lang.Object,int,char)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendFixedWidthPadRight(java.lang.Object,int,char)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder insert(int,java.lang.Object)",
            "org.apache.commons.lang.text.StrLookup$MapStrLookup:java.lang.String lookup(java.lang.String)",
            "org.apache.commons.lang.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Properties)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:java.lang.String toString()",
            "org.apache.commons.lang.time.DurationFormatUtils:java.lang.String format(org.apache.commons.lang.time.DurationFormatUtils$Token[],int,int,int,int,int,int,int,boolean)",
            "org.apache.commons.lang3.builder.ReflectionToStringBuilder:java.lang.String[] toNoNullStringArray(java.lang.Object[])",
            "org.apache.commons.lang3.exception.DefaultExceptionContext:java.lang.String getFormattedExceptionMessage(java.lang.String)",
            "org.apache.commons.lang3.mutable.MutableObject:java.lang.String toString()",
            "org.apache.commons.lang3.ObjectUtils:java.lang.String toString(java.lang.Object)",
            "org.apache.commons.lang3.ObjectUtils:java.lang.String toString(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder append(java.lang.Object)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadLeft(java.lang.Object,int,char)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadRight(java.lang.Object,int,char)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder insert(int,java.lang.Object)",
            "org.apache.commons.lang3.text.StrLookup$MapStrLookup:java.lang.String lookup(java.lang.String)",
            "org.apache.commons.lang3.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Properties)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:java.lang.String toString()",
            "org.apache.commons.lang3.time.DurationFormatUtils:java.lang.String format(org.apache.commons.lang3.time.DurationFormatUtils$Token[],long,long,long,long,long,long,long,boolean)"
        ]
    },
    "org.jboss.netty.buffer.AbstractChannelBuffer:java.lang.String toString(java.lang.String,org.jboss.netty.buffer.ChannelBufferIndexFinder)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.replay.ReplayingDecoderBuffer:java.lang.String toString(int,int,java.lang.String,org.jboss.netty.buffer.ChannelBufferIndexFinder)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.replay.ReplayingDecoderBuffer:java.lang.String toString(int,int,java.lang.String,org.jboss.netty.buffer.ChannelBufferIndexFinder)"
        ]
    },
    "org.apache.commons.lang.StringEscapeUtils:java.lang.String unescapeHtml(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.text.CompositeFormat:java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.text.CompositeFormat:java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)",
            "org.apache.commons.lang3.text.CompositeFormat:java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)"
        ]
    },
    "org.apache.commons.lang3.text.CompositeFormat:java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.text.CompositeFormat:java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)",
            "org.apache.commons.lang3.text.CompositeFormat:java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)"
        ]
    },
    "org.apache.commons.lang3.time.FastDateFormat:java.lang.String format(long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.time.FastDateFormat:java.lang.String format(java.util.Date)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.time.DateFormatUtils:java.lang.String format(java.util.Date,java.lang.String,java.util.TimeZone,java.util.Locale)"
        ]
    },
    "org.apache.commons.lang3.time.FastDateFormat:java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang.text.CompositeFormat:java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)",
            "org.apache.commons.lang3.text.CompositeFormat:java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)"
        ]
    },
    "org.apache.commons.lang3.time.FastDateFormat:java.lang.StringBuffer format(long,java.lang.StringBuffer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang3.time.FastDateFormat:java.lang.String format(java.util.Calendar)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.lang3.time.DateFormatUtils:java.lang.String format(java.util.Calendar,java.lang.String,java.util.TimeZone,java.util.Locale)"
        ]
    },
    "org.onlab.util.Tools$lambda_null_34__111:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.util.RetryingFunction:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.jboss.netty.handler.execution.OrderedDownstreamThreadPoolExecutor:void <init>(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.reflectasm.ConstructorAccess:com.esotericsoftware.reflectasm.ConstructorAccess get(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo$DefaultInstantiatorStrategy:org.objenesis.instantiator.ObjectInstantiator newInstantiatorOf(java.lang.Class)"
        ]
    },
    "com.esotericsoftware.reflectasm.FieldAccess:com.esotericsoftware.reflectasm.FieldAccess get(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.FieldSerializer:void rebuildCachedFields(boolean)"
        ]
    },
    "com.esotericsoftware.reflectasm.MethodAccess:com.esotericsoftware.reflectasm.MethodAccess get(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.BeanSerializer:void <init>(com.esotericsoftware.kryo.Kryo,java.lang.Class)"
        ]
    },
    "org.apache.commons.lang.builder.ToStringBuilder:java.lang.String reflectionToString(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.lang.builder.ToStringBuilder:java.lang.String reflectionToString(java.lang.Object,org.apache.commons.lang.builder.ToStringStyle)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.io.ByteBufferInput:long skip(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.KryoDataInput:int skipBytes(int)",
            "com.esotericsoftware.kryo.io.KryoObjectInput:long skip(long)"
        ]
    },
    "com.esotericsoftware.kryo.io.Input:long skip(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.KryoDataInput:int skipBytes(int)",
            "com.esotericsoftware.kryo.io.KryoObjectInput:long skip(long)"
        ]
    },
    "com.esotericsoftware.kryo.io.KryoDataInput:byte readByte()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmByteField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.CompatibleFieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.TaggedFieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$ByteSerializer:java.lang.Byte read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$ByteSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.ObjectField$ObjectByteField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.CompatibleFieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.TaggedFieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.io.KryoDataInput:int readUnsignedByte()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.io.Input:byte[] readBytes(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ByteArraySerializer:byte[] read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$BigIntegerSerializer:java.math.BigInteger read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.io.Input:void readBytes(byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.io.KryoDataInput:void readFully(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.KryoDataInput:void readFully(byte[])"
        ]
    },
    "com.esotericsoftware.kryo.io.FastInput:int readInt(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.Input:float readFloat(float,boolean)",
            "com.esotericsoftware.kryo.io.Input:int[] readInts(int,boolean)",
            "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmIntField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$BigDecimalSerializer:java.math.BigDecimal read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$CalendarSerializer:java.util.Calendar read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:java.util.EnumSet read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$IntSerializer:java.lang.Integer read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.MapSerializer:java.util.Map read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.ObjectField$ObjectIntField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeIntField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.Input:int readInt(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.Input:float readFloat(float,boolean)",
            "com.esotericsoftware.kryo.io.Input:int[] readInts(int,boolean)",
            "com.esotericsoftware.kryo.io.UnsafeInput:int readInt(boolean)",
            "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmIntField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$BigDecimalSerializer:java.math.BigDecimal read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$CalendarSerializer:java.util.Calendar read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:java.util.EnumSet read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$IntSerializer:java.lang.Integer read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.MapSerializer:java.util.Map read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.ObjectField$ObjectIntField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeIntField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$BooleanArraySerializer:boolean[] read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$BooleanArraySerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ByteArraySerializer:byte[] read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ByteArraySerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$BigIntegerSerializer:java.math.BigInteger read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$BigDecimalSerializer:java.math.BigDecimal read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$BigIntegerSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSerializer:java.lang.Enum read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.io.KryoDataInput:java.lang.String readUTF()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmStringField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.CompatibleFieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.TaggedFieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$CurrencySerializer:java.util.Currency read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$CurrencySerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$LocaleSerializer:java.util.Locale read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$LocaleSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$StringBufferSerializer:java.lang.StringBuffer read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$StringBufferSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$StringSerializer:java.lang.String read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$StringSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$TimeZoneSerializer:java.util.TimeZone read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$CalendarSerializer:java.util.Calendar read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$TimeZoneSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.io.Input:java.lang.String readAscii()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.Input:java.lang.String readString()",
            "com.esotericsoftware.kryo.io.Input:java.lang.StringBuilder readStringBuilder()"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$StringBuilderSerializer:java.lang.StringBuilder read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$StringBuilderSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.io.KryoDataInput:int readUnsignedShort()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.io.FastInput:long readLong(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.Input:double readDouble(double,boolean)",
            "com.esotericsoftware.kryo.io.Input:long[] readLongs(int,boolean)",
            "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmLongField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$CalendarSerializer:java.util.Calendar read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$DateSerializer:java.util.Date read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$LongSerializer:java.lang.Long read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.ObjectField$ObjectLongField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeLongField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.Input:long readLong(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.Input:double readDouble(double,boolean)",
            "com.esotericsoftware.kryo.io.Input:long[] readLongs(int,boolean)",
            "com.esotericsoftware.kryo.io.UnsafeInput:long readLong(boolean)",
            "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmLongField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$CalendarSerializer:java.util.Calendar read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$DateSerializer:java.util.Date read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$LongSerializer:java.lang.Long read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.ObjectField$ObjectLongField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeLongField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.KryoDataInput:boolean readBoolean()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmBooleanField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.CompatibleFieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.TaggedFieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$BooleanSerializer:java.lang.Boolean read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$BooleanSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.ObjectField$ObjectBooleanField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.CompatibleFieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.TaggedFieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "org.objectweb.asm.ClassReader:byte[] a(java.io.InputStream,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.objectweb.asm.ClassReader:void <init>(java.io.InputStream)",
            "org.objectweb.asm.ClassReader:void <init>(java.lang.String)"
        ]
    },
    "com.esotericsoftware.kryo.io.KryoObjectInput:int read()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.buffer.ByteBufferBackedChannelBuffer:int setBytes(int,java.io.InputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.buffer.AbstractChannelBuffer:int writeBytes(java.io.InputStream,int)",
            "org.jboss.netty.buffer.CompositeChannelBuffer:int setBytes(int,java.io.InputStream,int)",
            "org.jboss.netty.buffer.DuplicatedChannelBuffer:int setBytes(int,java.io.InputStream,int)",
            "org.jboss.netty.buffer.DynamicChannelBuffer:int setBytes(int,java.io.InputStream,int)",
            "org.jboss.netty.buffer.SlicedChannelBuffer:int setBytes(int,java.io.InputStream,int)",
            "org.jboss.netty.buffer.TruncatedChannelBuffer:int setBytes(int,java.io.InputStream,int)"
        ]
    },
    "org.jboss.netty.buffer.HeapChannelBuffer:int setBytes(int,java.io.InputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.buffer.AbstractChannelBuffer:int writeBytes(java.io.InputStream,int)",
            "org.jboss.netty.buffer.CompositeChannelBuffer:int setBytes(int,java.io.InputStream,int)",
            "org.jboss.netty.buffer.DuplicatedChannelBuffer:int setBytes(int,java.io.InputStream,int)",
            "org.jboss.netty.buffer.DynamicChannelBuffer:int setBytes(int,java.io.InputStream,int)",
            "org.jboss.netty.buffer.SlicedChannelBuffer:int setBytes(int,java.io.InputStream,int)",
            "org.jboss.netty.buffer.TruncatedChannelBuffer:int setBytes(int,java.io.InputStream,int)"
        ]
    },
    "com.esotericsoftware.kryo.io.ByteBufferInput:int fill(java.nio.ByteBuffer,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.ByteBufferInput:int require(int)",
            "com.esotericsoftware.kryo.io.ByteBufferInput:int optional(int)"
        ]
    },
    "com.esotericsoftware.kryo.io.Input:int fill(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.Input:int require(int)",
            "com.esotericsoftware.kryo.io.Input:int optional(int)",
            "com.esotericsoftware.kryo.io.InputChunked:int fill(byte[],int,int)"
        ]
    },
    "com.esotericsoftware.kryo.io.Input:int read(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.multipart.AbstractDiskHttpData:void setContent(java.io.InputStream)",
            "org.jboss.netty.handler.codec.http.multipart.AbstractMemoryHttpData:void setContent(java.io.InputStream)",
            "com.esotericsoftware.kryo.io.KryoObjectInput:int read(byte[])"
        ]
    },
    "com.esotericsoftware.kryo.io.KryoObjectInput:int read(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.io.KryoDataOutput:void write(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.io.KryoDataOutput:void writeBytes(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.io.KryoDataOutput:void writeChars(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmByteField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.CompatibleFieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.TaggedFieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$ByteSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Byte)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$ByteSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.ObjectField$ObjectByteField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.CompatibleFieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.TaggedFieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.KryoDataOutput:void writeByte(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.io.Output:void writeString(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.KryoDataOutput:void writeUTF(java.lang.String)",
            "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmStringField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.CompatibleFieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$StringArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.String[])",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$CurrencySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.Currency)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$LocaleSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.Locale)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$StringSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.String)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$TimeZoneSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.TimeZone)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeStringField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.util.DefaultClassResolver:void writeName(com.esotericsoftware.kryo.io.Output,java.lang.Class,com.esotericsoftware.kryo.Registration)"
        ]
    },
    "com.esotericsoftware.kryo.io.Output:void writeString(java.lang.CharSequence)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$StringBufferSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.StringBuffer)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$StringBuilderSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.StringBuilder)"
        ]
    },
    "com.esotericsoftware.kryo.io.Output:void writeAscii(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$LocaleSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.Locale)"
        ]
    },
    "com.esotericsoftware.kryo.io.Output:void write(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.buffer.ByteBufferBackedChannelBuffer:void getBytes(int,java.io.OutputStream,int)",
            "com.esotericsoftware.kryo.io.KryoDataOutput:void write(byte[])"
        ]
    },
    "com.esotericsoftware.kryo.io.Output:void write(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.buffer.ByteBufferBackedChannelBuffer:void getBytes(int,java.io.OutputStream,int)",
            "org.jboss.netty.buffer.HeapChannelBuffer:void getBytes(int,java.io.OutputStream,int)",
            "com.esotericsoftware.kryo.io.ByteBufferOutput:void flush()",
            "com.esotericsoftware.kryo.io.KryoDataOutput:void write(byte[],int,int)",
            "com.esotericsoftware.kryo.io.Output:void flush()"
        ]
    },
    "com.esotericsoftware.kryo.io.Output:void writeBytes(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ByteArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,byte[])",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$BigIntegerSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.math.BigInteger)"
        ]
    },
    "com.esotericsoftware.kryo.io.FastOutput:int writeInt(int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.Output:int writeFloat(float,float,boolean)",
            "com.esotericsoftware.kryo.io.Output:void writeInts(int[],boolean)",
            "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmIntField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$BigDecimalSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.math.BigDecimal)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$CalendarSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.Calendar)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.EnumSet)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$IntSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Integer)",
            "com.esotericsoftware.kryo.serializers.MapSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.Map)",
            "com.esotericsoftware.kryo.serializers.ObjectField$ObjectIntField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeIntField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.FastOutput:int writeLong(long,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.Output:int writeDouble(double,double,boolean)",
            "com.esotericsoftware.kryo.io.Output:void writeLongs(long[],boolean)",
            "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmLongField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$CalendarSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.Calendar)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$DateSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.Date)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$LongSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Long)",
            "com.esotericsoftware.kryo.serializers.ObjectField$ObjectLongField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeLongField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.KryoDataOutput:void writeBoolean(boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmBooleanField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.CompatibleFieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.TaggedFieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$BooleanSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$BooleanSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.ObjectField$ObjectBooleanField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.CompatibleFieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.TaggedFieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$BigDecimalSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readClassAndObject(com.esotericsoftware.kryo.io.Input)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:java.util.EnumSet read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$CalendarSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readClassAndObject(com.esotericsoftware.kryo.io.Input)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:java.util.EnumSet read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$IntSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readClassAndObject(com.esotericsoftware.kryo.io.Input)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:java.util.EnumSet read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$LongSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readClassAndObject(com.esotericsoftware.kryo.io.Input)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:java.util.EnumSet read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$BigDecimalSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeClassAndObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.EnumSet)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$CalendarSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeClassAndObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.EnumSet)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$IntSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeClassAndObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.EnumSet)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$BooleanArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeClassAndObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.EnumSet)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ByteArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeClassAndObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.EnumSet)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$BigIntegerSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeClassAndObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.EnumSet)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeClassAndObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.EnumSet)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$DateSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeClassAndObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.EnumSet)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$LongSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeClassAndObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.EnumSet)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioDatagramChannelFactory:void <init>(org.jboss.netty.channel.socket.InternetProtocolFamily)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.NioDatagramChannelFactory:void <init>()"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioDatagramChannelFactory:void <init>(java.util.concurrent.Executor,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.NioDatagramChannelFactory:void <init>(java.util.concurrent.Executor)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioDatagramChannelFactory:void <init>(java.util.concurrent.Executor,int,org.jboss.netty.channel.socket.InternetProtocolFamily)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.nio.NioDatagramChannelFactory:void <init>(java.util.concurrent.Executor,org.jboss.netty.channel.socket.InternetProtocolFamily)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioClientSocketChannelFactory:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.channel.socket.nio.NioServerSocketChannelFactory:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.onlab.packet.IGMP$lambda_deserializer_30__89:org.onlab.packet.IPacket deserialize(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.EAPOL:org.onlab.packet.EAPOL lambda$deserializer$53(byte[],int,int)",
            "org.onlab.packet.Ethernet:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.Ethernet:org.onlab.packet.Ethernet lambda$deserializer$10(byte[],int,int)",
            "org.onlab.packet.ICMP:org.onlab.packet.ICMP lambda$deserializer$29(byte[],int,int)",
            "org.onlab.packet.ICMP6:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ICMP6:org.onlab.packet.ICMP6 lambda$deserializer$40(byte[],int,int)",
            "org.onlab.packet.IGMP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IPv4:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IPv4:org.onlab.packet.IPv4 lambda$deserializer$24(byte[],int,int)",
            "org.onlab.packet.IPv6:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.IPv6:org.onlab.packet.IPv6 lambda$deserializer$48(byte[],int,int)",
            "org.onlab.packet.MPLS:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.MPLS:org.onlab.packet.MPLS lambda$deserializer$12(byte[],int,int)",
            "org.onlab.packet.PIM:org.onlab.packet.PIM lambda$deserializer$49(byte[],int,int)",
            "org.onlab.packet.TCP:org.onlab.packet.TCP lambda$deserializer$39(byte[],int,int)",
            "org.onlab.packet.UDP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.UDP:org.onlab.packet.UDP lambda$deserializer$45(byte[],int,int)",
            "org.onlab.packet.ipv6.Authentication:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Authentication:org.onlab.packet.ipv6.Authentication lambda$deserializer$46(byte[],int,int)",
            "org.onlab.packet.ipv6.BaseOptions:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.BaseOptions:org.onlab.packet.ipv6.BaseOptions lambda$deserializer$13(byte[],int,int)",
            "org.onlab.packet.ipv6.EncapSecurityPayload:org.onlab.packet.ipv6.EncapSecurityPayload lambda$deserializer$51(byte[],int,int)",
            "org.onlab.packet.ipv6.Fragment:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Fragment:org.onlab.packet.ipv6.Fragment lambda$deserializer$26(byte[],int,int)",
            "org.onlab.packet.ipv6.Routing:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.ipv6.Routing:org.onlab.packet.ipv6.Routing lambda$deserializer$50(byte[],int,int)",
            "org.onlab.packet.ndp.NeighborAdvertisement:org.onlab.packet.ndp.NeighborAdvertisement lambda$deserializer$1(byte[],int,int)",
            "org.onlab.packet.ndp.NeighborSolicitation:org.onlab.packet.ndp.NeighborSolicitation lambda$deserializer$42(byte[],int,int)",
            "org.onlab.packet.ndp.Redirect:org.onlab.packet.ndp.Redirect lambda$deserializer$47(byte[],int,int)",
            "org.onlab.packet.ndp.RouterAdvertisement:org.onlab.packet.ndp.RouterAdvertisement lambda$deserializer$41(byte[],int,int)",
            "org.onlab.packet.ndp.RouterSolicitation:org.onlab.packet.ndp.RouterSolicitation lambda$deserializer$44(byte[],int,int)"
        ]
    },
    "org.jboss.netty.handler.codec.http.multipart.MixedAttribute:void addContent(org.jboss.netty.buffer.ChannelBuffer,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void loadFieldMultipartStandard(java.lang.String)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void loadFieldMultipart(java.lang.String)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributesStandard()",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributes()",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void setFinalBuffer(org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.http.multipart.MixedAttribute:void addContent(org.jboss.netty.buffer.ChannelBuffer,boolean)"
        ]
    },
    "org.jboss.netty.buffer.AbstractChannelBuffer:org.jboss.netty.buffer.ChannelBuffer readBytes(org.jboss.netty.buffer.ChannelBufferIndexFinder)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.http.websocket.WebSocketFrameDecoder:org.jboss.netty.handler.codec.http.websocket.WebSocketFrame decodeBinaryFrame(int,org.jboss.netty.buffer.ChannelBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.websocket.WebSocketFrameDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.replay.VoidEnum)"
        ]
    },
    "org.jboss.netty.handler.codec.http.websocket.WebSocketFrameDecoder:org.jboss.netty.handler.codec.http.websocket.WebSocketFrame decodeTextFrame(int,org.jboss.netty.buffer.ChannelBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.websocket.WebSocketFrameDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.replay.VoidEnum)"
        ]
    },
    "org.jboss.netty.handler.codec.http.websocketx.WebSocket00FrameDecoder:org.jboss.netty.handler.codec.http.websocketx.WebSocketFrame decodeBinaryFrame(byte,org.jboss.netty.buffer.ChannelBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.websocketx.WebSocket00FrameDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.replay.VoidEnum)"
        ]
    },
    "org.jboss.netty.handler.codec.http.websocketx.WebSocket00FrameDecoder:org.jboss.netty.handler.codec.http.websocketx.WebSocketFrame decodeTextFrame(org.jboss.netty.buffer.ChannelBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.websocketx.WebSocket00FrameDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.replay.VoidEnum)"
        ]
    },
    "org.jboss.netty.handler.codec.protobuf.ProtobufVarint32FrameDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.frame.FrameDecoder:java.lang.Object decodeLast(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.frame.FrameDecoder:void callDecode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,java.net.SocketAddress)"
        ]
    },
    "org.jboss.netty.handler.codec.replay.ReplayingDecoderBuffer:org.jboss.netty.buffer.ChannelBuffer readBytes(org.jboss.netty.buffer.ChannelBufferIndexFinder)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.replay.ReplayingDecoderBuffer:org.jboss.netty.buffer.ChannelBuffer readBytes(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.frame.FrameDecoder:void replace(java.lang.String,org.jboss.netty.channel.ChannelHandler)",
            "org.jboss.netty.handler.codec.http.HttpClientCodec$Decoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.http.HttpMessageDecoder$State)",
            "org.jboss.netty.handler.codec.http.HttpMessageDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.http.HttpMessageDecoder$State)",
            "org.jboss.netty.handler.codec.http.HttpMessageDecoder:java.lang.Object readFixedLengthContent(org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.http.websocket.WebSocketFrameDecoder:org.jboss.netty.handler.codec.http.websocket.WebSocketFrame decodeBinaryFrame(int,org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.http.websocket.WebSocketFrameDecoder:org.jboss.netty.handler.codec.http.websocket.WebSocketFrame decodeTextFrame(int,org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocket00FrameDecoder:org.jboss.netty.handler.codec.http.websocketx.WebSocketFrame decodeBinaryFrame(byte,org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocket00FrameDecoder:org.jboss.netty.handler.codec.http.websocketx.WebSocketFrame decodeTextFrame(org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder$State)",
            "org.jboss.netty.handler.codec.protobuf.ProtobufVarint32FrameDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.replay.ReplayingDecoderBuffer:org.jboss.netty.buffer.ChannelBuffer readBytes(org.jboss.netty.buffer.ChannelBufferIndexFinder)",
            "org.jboss.netty.handler.codec.replay.ReplayingDecoderBuffer:org.jboss.netty.buffer.ChannelBuffer readBytes(int)",
            "org.jboss.netty.handler.codec.serialization.CompatibleObjectEncoder:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)",
            "org.jboss.netty.handler.codec.socks.SocksAuthRequestDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.socks.SocksAuthRequestDecoder$State)",
            "org.jboss.netty.handler.codec.socks.SocksCmdRequestDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.socks.SocksCmdRequestDecoder$State)",
            "org.jboss.netty.handler.codec.socks.SocksCmdResponseDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.socks.SocksCmdResponseDecoder$State)",
            "org.jboss.netty.handler.codec.spdy.SpdyFrameDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)"
        ]
    },
    "org.jboss.netty.handler.codec.frame.FixedLengthFrameDecoder:org.jboss.netty.buffer.ChannelBuffer newCumulationBuffer(org.jboss.netty.channel.ChannelHandlerContext,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.frame.FrameDecoder:org.jboss.netty.buffer.ChannelBuffer updateCumulation(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.buffer.ChannelBuffer)"
        ]
    },
    "org.jboss.netty.handler.codec.frame.FrameDecoder:org.jboss.netty.buffer.ChannelBuffer newCumulationBuffer(org.jboss.netty.channel.ChannelHandlerContext,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.frame.FixedLengthFrameDecoder:org.jboss.netty.buffer.ChannelBuffer newCumulationBuffer(org.jboss.netty.channel.ChannelHandlerContext,int)",
            "org.jboss.netty.handler.codec.frame.FrameDecoder:org.jboss.netty.buffer.ChannelBuffer updateCumulation(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.replay.ReplayingDecoder:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.frame.FrameDecoder:org.jboss.netty.buffer.ChannelBuffer extractFrame(org.jboss.netty.buffer.ChannelBuffer,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.frame.DelimiterBasedFrameDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.frame.FixedLengthFrameDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.frame.LineBasedFrameDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)"
        ]
    },
    "org.jboss.netty.buffer.AbstractChannelBuffer:org.jboss.netty.buffer.ChannelBuffer copy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.buffer.ChannelBuffers:org.jboss.netty.buffer.ChannelBuffer copiedBuffer(org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.frame.FrameDecoder:org.jboss.netty.buffer.ChannelBuffer appendToCumulation(org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.http.HttpChunkAggregator:void appendToCumulation(org.jboss.netty.buffer.ChannelBuffer)"
        ]
    },
    "org.jboss.netty.buffer.DuplicatedChannelBuffer:org.jboss.netty.buffer.ChannelBuffer copy(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.buffer.AbstractChannelBuffer:org.jboss.netty.buffer.ChannelBuffer copy()",
            "org.jboss.netty.buffer.DuplicatedChannelBuffer:org.jboss.netty.buffer.ChannelBuffer copy(int,int)",
            "org.jboss.netty.buffer.DynamicChannelBuffer:org.jboss.netty.buffer.ChannelBuffer copy(int,int)",
            "org.jboss.netty.buffer.ReadOnlyChannelBuffer:org.jboss.netty.buffer.ChannelBuffer copy(int,int)",
            "org.jboss.netty.buffer.SlicedChannelBuffer:org.jboss.netty.buffer.ChannelBuffer copy(int,int)",
            "org.jboss.netty.buffer.TruncatedChannelBuffer:org.jboss.netty.buffer.ChannelBuffer copy(int,int)",
            "org.jboss.netty.handler.codec.replay.ReplayingDecoderBuffer:org.jboss.netty.buffer.ChannelBuffer copy(int,int)"
        ]
    },
    "org.jboss.netty.buffer.DynamicChannelBuffer:org.jboss.netty.buffer.ChannelBuffer copy(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.buffer.AbstractChannelBuffer:org.jboss.netty.buffer.ChannelBuffer copy()",
            "org.jboss.netty.buffer.DuplicatedChannelBuffer:org.jboss.netty.buffer.ChannelBuffer copy(int,int)",
            "org.jboss.netty.buffer.DynamicChannelBuffer:org.jboss.netty.buffer.ChannelBuffer copy(int,int)",
            "org.jboss.netty.buffer.ReadOnlyChannelBuffer:org.jboss.netty.buffer.ChannelBuffer copy(int,int)",
            "org.jboss.netty.buffer.SlicedChannelBuffer:org.jboss.netty.buffer.ChannelBuffer copy(int,int)",
            "org.jboss.netty.buffer.TruncatedChannelBuffer:org.jboss.netty.buffer.ChannelBuffer copy(int,int)",
            "org.jboss.netty.handler.codec.replay.ReplayingDecoderBuffer:org.jboss.netty.buffer.ChannelBuffer copy(int,int)"
        ]
    },
    "org.jboss.netty.buffer.ReadOnlyChannelBuffer:org.jboss.netty.buffer.ChannelBuffer copy(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.buffer.AbstractChannelBuffer:org.jboss.netty.buffer.ChannelBuffer copy()",
            "org.jboss.netty.buffer.DuplicatedChannelBuffer:org.jboss.netty.buffer.ChannelBuffer copy(int,int)",
            "org.jboss.netty.buffer.DynamicChannelBuffer:org.jboss.netty.buffer.ChannelBuffer copy(int,int)",
            "org.jboss.netty.buffer.ReadOnlyChannelBuffer:org.jboss.netty.buffer.ChannelBuffer copy(int,int)",
            "org.jboss.netty.buffer.SlicedChannelBuffer:org.jboss.netty.buffer.ChannelBuffer copy(int,int)",
            "org.jboss.netty.buffer.TruncatedChannelBuffer:org.jboss.netty.buffer.ChannelBuffer copy(int,int)",
            "org.jboss.netty.handler.codec.replay.ReplayingDecoderBuffer:org.jboss.netty.buffer.ChannelBuffer copy(int,int)"
        ]
    },
    "org.jboss.netty.buffer.SlicedChannelBuffer:org.jboss.netty.buffer.ChannelBuffer copy(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.buffer.AbstractChannelBuffer:org.jboss.netty.buffer.ChannelBuffer copy()",
            "org.jboss.netty.buffer.DuplicatedChannelBuffer:org.jboss.netty.buffer.ChannelBuffer copy(int,int)",
            "org.jboss.netty.buffer.DynamicChannelBuffer:org.jboss.netty.buffer.ChannelBuffer copy(int,int)",
            "org.jboss.netty.buffer.ReadOnlyChannelBuffer:org.jboss.netty.buffer.ChannelBuffer copy(int,int)",
            "org.jboss.netty.buffer.SlicedChannelBuffer:org.jboss.netty.buffer.ChannelBuffer copy(int,int)",
            "org.jboss.netty.buffer.TruncatedChannelBuffer:org.jboss.netty.buffer.ChannelBuffer copy(int,int)",
            "org.jboss.netty.handler.codec.replay.ReplayingDecoderBuffer:org.jboss.netty.buffer.ChannelBuffer copy(int,int)"
        ]
    },
    "org.jboss.netty.buffer.TruncatedChannelBuffer:org.jboss.netty.buffer.ChannelBuffer copy(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.buffer.AbstractChannelBuffer:org.jboss.netty.buffer.ChannelBuffer copy()",
            "org.jboss.netty.buffer.DuplicatedChannelBuffer:org.jboss.netty.buffer.ChannelBuffer copy(int,int)",
            "org.jboss.netty.buffer.DynamicChannelBuffer:org.jboss.netty.buffer.ChannelBuffer copy(int,int)",
            "org.jboss.netty.buffer.ReadOnlyChannelBuffer:org.jboss.netty.buffer.ChannelBuffer copy(int,int)",
            "org.jboss.netty.buffer.SlicedChannelBuffer:org.jboss.netty.buffer.ChannelBuffer copy(int,int)",
            "org.jboss.netty.buffer.TruncatedChannelBuffer:org.jboss.netty.buffer.ChannelBuffer copy(int,int)",
            "org.jboss.netty.handler.codec.replay.ReplayingDecoderBuffer:org.jboss.netty.buffer.ChannelBuffer copy(int,int)"
        ]
    },
    "org.jboss.netty.handler.codec.replay.ReplayingDecoderBuffer:org.jboss.netty.buffer.ChannelBuffer copy(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.buffer.DuplicatedChannelBuffer:org.jboss.netty.buffer.ChannelBuffer copy(int,int)",
            "org.jboss.netty.buffer.DynamicChannelBuffer:org.jboss.netty.buffer.ChannelBuffer copy(int,int)",
            "org.jboss.netty.buffer.ReadOnlyChannelBuffer:org.jboss.netty.buffer.ChannelBuffer copy(int,int)",
            "org.jboss.netty.buffer.SlicedChannelBuffer:org.jboss.netty.buffer.ChannelBuffer copy(int,int)",
            "org.jboss.netty.buffer.TruncatedChannelBuffer:org.jboss.netty.buffer.ChannelBuffer copy(int,int)",
            "org.jboss.netty.handler.codec.replay.ReplayingDecoderBuffer:org.jboss.netty.buffer.ChannelBuffer copy(int,int)"
        ]
    },
    "org.jboss.netty.buffer.AbstractChannelBufferFactory:org.jboss.netty.buffer.ChannelBuffer getBuffer(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.oio.OioDatagramWorker:boolean process()",
            "org.jboss.netty.channel.socket.oio.OioWorker:boolean process()",
            "org.jboss.netty.handler.codec.compression.ZlibEncoder:org.jboss.netty.channel.ChannelFuture finishEncode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.codec.protobuf.ProtobufEncoder:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)"
        ]
    },
    "org.jboss.netty.buffer.ChannelBuffers:org.jboss.netty.buffer.ChannelBuffer dynamicBuffer(org.jboss.netty.buffer.ChannelBufferFactory)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.compression.JdkZlibEncoder:org.jboss.netty.channel.ChannelFuture finishEncode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.codec.http.HttpMessageEncoder:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)",
            "org.jboss.netty.handler.codec.serialization.CompatibleObjectEncoder:org.jboss.netty.buffer.ChannelBuffer buffer(org.jboss.netty.channel.ChannelHandlerContext)",
            "org.jboss.netty.handler.codec.spdy.SpdyHttpDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)"
        ]
    },
    "org.jboss.netty.buffer.ChannelBuffers:org.jboss.netty.buffer.ChannelBuffer dynamicBuffer(int,org.jboss.netty.buffer.ChannelBufferFactory)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.compression.JdkZlibEncoder:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)",
            "org.jboss.netty.handler.codec.marshalling.ChannelBufferByteOutput:void <init>(org.jboss.netty.buffer.ChannelBufferFactory,int)",
            "org.jboss.netty.handler.codec.serialization.ObjectEncoder:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)"
        ]
    },
    "org.jboss.netty.buffer.ChannelBuffers:org.jboss.netty.buffer.ChannelBuffer dynamicBuffer(java.nio.ByteOrder,int,org.jboss.netty.buffer.ChannelBufferFactory)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.compression.ZlibDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)"
        ]
    },
    "org.jboss.netty.buffer.DynamicChannelBuffer:void <init>(java.nio.ByteOrder,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.buffer.ChannelBuffers:org.jboss.netty.buffer.ChannelBuffer dynamicBuffer(java.nio.ByteOrder,int)",
            "org.jboss.netty.buffer.DynamicChannelBuffer:void <init>(int)"
        ]
    },
    "org.jboss.netty.handler.codec.replay.UnsafeDynamicChannelBuffer:void <init>(org.jboss.netty.buffer.ChannelBufferFactory,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.replay.UnsafeDynamicChannelBuffer:void <init>(org.jboss.netty.buffer.ChannelBufferFactory)"
        ]
    },
    "org.jboss.netty.buffer.DynamicChannelBuffer:void writeByte(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.buffer.AbstractChannelBuffer:void writeZero(int)",
            "org.jboss.netty.buffer.ChannelBufferOutputStream:void write(int)",
            "org.jboss.netty.handler.codec.compression.JdkZlibEncoder:org.jboss.netty.channel.ChannelFuture finishEncode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.codec.frame.LengthFieldPrepender:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)",
            "org.jboss.netty.handler.codec.http.HttpMessageEncoder:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)",
            "org.jboss.netty.handler.codec.http.HttpMessageEncoder:void encodeHeader(org.jboss.netty.buffer.ChannelBuffer,java.lang.String,java.lang.String)",
            "org.jboss.netty.handler.codec.http.HttpMessageEncoder:void encodeAscii(java.lang.String,org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.http.HttpRequestEncoder:void encodeInitialLine(org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.http.HttpMessage)",
            "org.jboss.netty.handler.codec.http.HttpResponseEncoder:void encodeInitialLine(org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.http.HttpMessage)",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:java.lang.String readLineStandard()",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:java.lang.String readLine()",
            "org.jboss.netty.handler.codec.http.websocket.WebSocketFrameEncoder:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocket00FrameEncoder:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocket08FrameEncoder:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)",
            "org.jboss.netty.handler.codec.marshalling.ChannelBufferByteOutput:void write(int)",
            "org.jboss.netty.handler.codec.rtsp.RtspRequestEncoder:void encodeInitialLine(org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.http.HttpMessage)",
            "org.jboss.netty.handler.codec.rtsp.RtspResponseEncoder:void encodeInitialLine(org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.http.HttpMessage)",
            "org.jboss.netty.handler.codec.socks.SocksAuthRequest:void encodeAsByteBuf(org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.socks.SocksAuthResponse:void encodeAsByteBuf(org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.socks.SocksCmdRequest:void encodeAsByteBuf(org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.socks.SocksCmdResponse:void encodeAsByteBuf(org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.socks.SocksInitRequest:void encodeAsByteBuf(org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.socks.SocksInitResponse:void encodeAsByteBuf(org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.spdy.SpdyFrameEncoder:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.codec.spdy.SpdyHeaderBlockRawEncoder:org.jboss.netty.buffer.ChannelBuffer encode(org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame)"
        ]
    },
    "org.jboss.netty.buffer.DynamicChannelBuffer:void writeShort(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.buffer.AbstractChannelBuffer:void writeChar(int)",
            "org.jboss.netty.buffer.ChannelBufferOutputStream:void writeShort(int)",
            "org.jboss.netty.handler.codec.frame.LengthFieldPrepender:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)",
            "org.jboss.netty.handler.codec.http.websocketx.CloseWebSocketFrame:void <init>(boolean,int,int,java.lang.String)",
            "org.jboss.netty.handler.codec.socks.SocksCmdRequest:void encodeAsByteBuf(org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.socks.SocksCmdResponse:void encodeAsByteBuf(org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.spdy.SpdyFrameEncoder:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.buffer.DynamicChannelBuffer:void writeMedium(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.frame.LengthFieldPrepender:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)",
            "org.jboss.netty.handler.codec.spdy.SpdyFrameEncoder:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.buffer.DynamicChannelBuffer:void writeInt(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.buffer.AbstractChannelBuffer:void writeFloat(float)",
            "org.jboss.netty.buffer.AbstractChannelBuffer:void writeZero(int)",
            "org.jboss.netty.buffer.ChannelBufferOutputStream:void writeInt(int)",
            "org.jboss.netty.handler.codec.frame.LengthFieldPrepender:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerHandshaker00:org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel,org.jboss.netty.handler.codec.http.HttpRequest)",
            "org.jboss.netty.handler.codec.spdy.SpdyFrameEncoder:void handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.codec.spdy.SpdyHeaderBlockRawEncoder:void writeLengthField(org.jboss.netty.buffer.ChannelBuffer,int)"
        ]
    },
    "org.jboss.netty.buffer.DynamicChannelBuffer:void writeLong(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.buffer.AbstractChannelBuffer:void writeDouble(double)",
            "org.jboss.netty.buffer.AbstractChannelBuffer:void writeZero(int)",
            "org.jboss.netty.buffer.ChannelBufferOutputStream:void writeLong(long)",
            "org.jboss.netty.handler.codec.frame.LengthFieldPrepender:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocket08FrameEncoder:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketServerHandshaker00:org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel,org.jboss.netty.handler.codec.http.HttpRequest)"
        ]
    },
    "org.jboss.netty.buffer.DynamicChannelBuffer:void writeBytes(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.buffer.AbstractChannelBuffer:void writeBytes(byte[])",
            "org.jboss.netty.buffer.ChannelBufferOutputStream:void write(byte[],int,int)",
            "org.jboss.netty.buffer.DirectChannelBufferFactory:org.jboss.netty.buffer.ChannelBuffer getBuffer(java.nio.ByteOrder,byte[],int,int)",
            "org.jboss.netty.handler.codec.compression.JdkZlibEncoder:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)",
            "org.jboss.netty.handler.codec.compression.JdkZlibEncoder:org.jboss.netty.channel.ChannelFuture finishEncode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
            "org.jboss.netty.handler.codec.compression.ZlibDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)",
            "org.jboss.netty.handler.codec.http.multipart.AbstractMemoryHttpData:void setContent(java.io.InputStream)",
            "org.jboss.netty.handler.codec.marshalling.ChannelBufferByteOutput:void write(byte[],int,int)",
            "org.jboss.netty.handler.codec.spdy.SpdyHeaderBlockJZlibEncoder:void encode(org.jboss.netty.buffer.ChannelBuffer)"
        ]
    },
    "org.jboss.netty.buffer.DynamicChannelBuffer:void writeBytes(org.jboss.netty.buffer.ChannelBuffer,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.buffer.AbstractChannelBuffer:org.jboss.netty.buffer.ChannelBuffer readBytes(int)",
            "org.jboss.netty.buffer.AbstractChannelBuffer:void writeBytes(org.jboss.netty.buffer.ChannelBuffer,int)",
            "org.jboss.netty.buffer.DynamicChannelBuffer:void ensureWritableBytes(int)",
            "org.jboss.netty.handler.codec.frame.FrameDecoder:org.jboss.netty.buffer.ChannelBuffer extractFrame(org.jboss.netty.buffer.ChannelBuffer,int,int)",
            "org.jboss.netty.handler.codec.http.websocket.WebSocketFrameEncoder:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocket00FrameEncoder:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)",
            "org.jboss.netty.handler.codec.replay.ReplayingDecoder:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)"
        ]
    },
    "org.jboss.netty.buffer.DynamicChannelBuffer:void writeBytes(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.buffer.DirectChannelBufferFactory:org.jboss.netty.buffer.ChannelBuffer getBuffer(java.nio.ByteBuffer)",
            "org.jboss.netty.buffer.HeapChannelBufferFactory:org.jboss.netty.buffer.ChannelBuffer getBuffer(java.nio.ByteBuffer)",
            "org.jboss.netty.handler.ssl.SslHandler:void wrap(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel)",
            "org.jboss.netty.handler.ssl.SslHandler:org.jboss.netty.channel.ChannelFuture wrapNonAppData(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel)",
            "org.jboss.netty.handler.ssl.SslHandler:org.jboss.netty.buffer.ChannelBuffer unwrap(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,int,int)"
        ]
    },
    "org.jboss.netty.buffer.DynamicChannelBuffer:int writeBytes(java.io.InputStream,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.buffer.DynamicChannelBuffer:int writeBytes(java.nio.channels.ScatteringByteChannel,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.buffer.DynamicChannelBuffer:void writeZero(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.spdy.SpdyHeaderBlockZlibEncoder:void encode(org.jboss.netty.buffer.ChannelBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.spdy.SpdyHeaderBlockZlibEncoder:org.jboss.netty.buffer.ChannelBuffer encode(org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame)"
        ]
    },
    "org.jboss.netty.handler.codec.base64.Base64:org.jboss.netty.buffer.ChannelBuffer encode(org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.buffer.ChannelBufferFactory)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.base64.Base64:org.jboss.netty.buffer.ChannelBuffer encode(org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.base64.Base64Dialect)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.base64.Base64:org.jboss.netty.buffer.ChannelBuffer encode(org.jboss.netty.buffer.ChannelBuffer)"
        ]
    },
    "org.jboss.netty.handler.codec.base64.Base64:org.jboss.netty.buffer.ChannelBuffer encode(org.jboss.netty.buffer.ChannelBuffer,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.base64.Base64:org.jboss.netty.buffer.ChannelBuffer encode(org.jboss.netty.buffer.ChannelBuffer,int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.base64.Base64:org.jboss.netty.buffer.ChannelBuffer decode(org.jboss.netty.buffer.ChannelBuffer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.http.HttpMessageEncoder:void encodeHeader(org.jboss.netty.buffer.ChannelBuffer,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.HttpMessageEncoder:void encodeHeaders(org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.http.HttpMessage)",
            "org.jboss.netty.handler.codec.http.HttpMessageEncoder:void encodeTrailingHeaders(org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.http.HttpChunkTrailer)"
        ]
    },
    "org.jboss.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame:void <init>(boolean,int,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.http.multipart.MixedAttribute:java.lang.String getString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.multipart.MixedAttribute:java.lang.String getString()"
        ]
    },
    "org.jboss.netty.handler.codec.http.multipart.MixedFileUpload:java.lang.String getString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.multipart.MixedFileUpload:java.lang.String getString()"
        ]
    },
    "org.jboss.netty.handler.codec.http.multipart.MixedAttribute:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.packet.IGMP:org.onlab.packet.IPacket deserialize(byte[],int,int)",
            "org.onlab.packet.pim.PIMHelloOption:java.lang.String toString()",
            "org.onlab.util.Tools:java.lang.String get(java.util.Dictionary,java.lang.String)",
            "org.jboss.netty.handler.codec.http.DefaultHttpHeaders:java.lang.String toString(java.lang.Object)",
            "org.jboss.netty.handler.codec.http.multipart.MixedAttribute:java.lang.String toString()",
            "org.jboss.netty.handler.codec.spdy.DefaultSpdyHeaders:java.lang.String toString(java.lang.Object)",
            "org.jboss.netty.util.internal.StringUtil:java.lang.String stripControlCharacters(java.lang.Object)",
            "org.apache.commons.lang.builder.ReflectionToStringBuilder:java.lang.String[] toNoNullStringArray(java.lang.Object[])",
            "org.apache.commons.lang.mutable.MutableObject:java.lang.String toString()",
            "org.apache.commons.lang.ObjectUtils:java.lang.String toString(java.lang.Object)",
            "org.apache.commons.lang.ObjectUtils:java.lang.String toString(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.lang.Object[],char,int,int)",
            "org.apache.commons.lang.StringUtils:java.lang.String join(java.lang.Object[],java.lang.String,int,int)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder append(java.lang.Object)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendFixedWidthPadLeft(java.lang.Object,int,char)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder appendFixedWidthPadRight(java.lang.Object,int,char)",
            "org.apache.commons.lang.text.StrBuilder:org.apache.commons.lang.text.StrBuilder insert(int,java.lang.Object)",
            "org.apache.commons.lang.text.StrLookup$MapStrLookup:java.lang.String lookup(java.lang.String)",
            "org.apache.commons.lang.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Properties)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang.time.DurationFormatUtils$Token:java.lang.String toString()",
            "org.apache.commons.lang.time.DurationFormatUtils:java.lang.String format(org.apache.commons.lang.time.DurationFormatUtils$Token[],int,int,int,int,int,int,int,boolean)",
            "org.apache.commons.lang3.builder.ReflectionToStringBuilder:java.lang.String[] toNoNullStringArray(java.lang.Object[])",
            "org.apache.commons.lang3.exception.DefaultExceptionContext:java.lang.String getFormattedExceptionMessage(java.lang.String)",
            "org.apache.commons.lang3.mutable.MutableObject:java.lang.String toString()",
            "org.apache.commons.lang3.ObjectUtils:java.lang.String toString(java.lang.Object)",
            "org.apache.commons.lang3.ObjectUtils:java.lang.String toString(java.lang.Object,java.lang.String)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder append(java.lang.Object)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadLeft(java.lang.Object,int,char)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadRight(java.lang.Object,int,char)",
            "org.apache.commons.lang3.text.StrBuilder:org.apache.commons.lang3.text.StrBuilder insert(int,java.lang.Object)",
            "org.apache.commons.lang3.text.StrLookup$MapStrLookup:java.lang.String lookup(java.lang.String)",
            "org.apache.commons.lang3.text.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Properties)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:boolean equals(java.lang.Object)",
            "org.apache.commons.lang3.time.DurationFormatUtils$Token:java.lang.String toString()",
            "org.apache.commons.lang3.time.DurationFormatUtils:java.lang.String format(org.apache.commons.lang3.time.DurationFormatUtils$Token[],long,long,long,long,long,long,long,boolean)"
        ]
    },
    "com.esotericsoftware.kryo.Kryo$DefaultInstantiatorStrategy:org.objenesis.instantiator.ObjectInstantiator newInstantiatorOf(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo$DefaultInstantiatorStrategy:org.objenesis.instantiator.ObjectInstantiator newInstantiatorOf(java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:org.objenesis.instantiator.ObjectInstantiator newInstantiator(java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.io.KryoDataInput:int skipBytes(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.io.KryoObjectInput:long skip(long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$ByteSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readClassAndObject(com.esotericsoftware.kryo.io.Input)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:java.util.EnumSet read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.io.KryoDataInput:void readFully(byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$BooleanArraySerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readClassAndObject(com.esotericsoftware.kryo.io.Input)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:java.util.EnumSet read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ByteArraySerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readClassAndObject(com.esotericsoftware.kryo.io.Input)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:java.util.EnumSet read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$BigIntegerSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readClassAndObject(com.esotericsoftware.kryo.io.Input)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:java.util.EnumSet read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readClassAndObject(com.esotericsoftware.kryo.io.Input)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:java.util.EnumSet read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$CurrencySerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readClassAndObject(com.esotericsoftware.kryo.io.Input)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:java.util.EnumSet read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$LocaleSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readClassAndObject(com.esotericsoftware.kryo.io.Input)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:java.util.EnumSet read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$StringBufferSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readClassAndObject(com.esotericsoftware.kryo.io.Input)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:java.util.EnumSet read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$StringSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readClassAndObject(com.esotericsoftware.kryo.io.Input)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:java.util.EnumSet read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$TimeZoneSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readClassAndObject(com.esotericsoftware.kryo.io.Input)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:java.util.EnumSet read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$StringBuilderSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readClassAndObject(com.esotericsoftware.kryo.io.Input)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:java.util.EnumSet read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$BooleanSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readClassAndObject(com.esotericsoftware.kryo.io.Input)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:java.util.EnumSet read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "org.objectweb.asm.ClassReader:void <init>(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.objectweb.asm.ClassReader:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.buffer.AbstractChannelBuffer:int writeBytes(java.io.InputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.buffer.DynamicChannelBuffer:int writeBytes(java.io.InputStream,int)"
        ]
    },
    "org.jboss.netty.buffer.CompositeChannelBuffer:int setBytes(int,java.io.InputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.buffer.AbstractChannelBuffer:int writeBytes(java.io.InputStream,int)",
            "org.jboss.netty.buffer.CompositeChannelBuffer:int setBytes(int,java.io.InputStream,int)",
            "org.jboss.netty.buffer.DuplicatedChannelBuffer:int setBytes(int,java.io.InputStream,int)",
            "org.jboss.netty.buffer.DynamicChannelBuffer:int setBytes(int,java.io.InputStream,int)",
            "org.jboss.netty.buffer.SlicedChannelBuffer:int setBytes(int,java.io.InputStream,int)",
            "org.jboss.netty.buffer.TruncatedChannelBuffer:int setBytes(int,java.io.InputStream,int)"
        ]
    },
    "org.jboss.netty.buffer.DuplicatedChannelBuffer:int setBytes(int,java.io.InputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.buffer.AbstractChannelBuffer:int writeBytes(java.io.InputStream,int)",
            "org.jboss.netty.buffer.CompositeChannelBuffer:int setBytes(int,java.io.InputStream,int)",
            "org.jboss.netty.buffer.DuplicatedChannelBuffer:int setBytes(int,java.io.InputStream,int)",
            "org.jboss.netty.buffer.DynamicChannelBuffer:int setBytes(int,java.io.InputStream,int)",
            "org.jboss.netty.buffer.SlicedChannelBuffer:int setBytes(int,java.io.InputStream,int)",
            "org.jboss.netty.buffer.TruncatedChannelBuffer:int setBytes(int,java.io.InputStream,int)"
        ]
    },
    "org.jboss.netty.buffer.DynamicChannelBuffer:int setBytes(int,java.io.InputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.buffer.AbstractChannelBuffer:int writeBytes(java.io.InputStream,int)",
            "org.jboss.netty.buffer.CompositeChannelBuffer:int setBytes(int,java.io.InputStream,int)",
            "org.jboss.netty.buffer.DuplicatedChannelBuffer:int setBytes(int,java.io.InputStream,int)",
            "org.jboss.netty.buffer.DynamicChannelBuffer:int setBytes(int,java.io.InputStream,int)",
            "org.jboss.netty.buffer.SlicedChannelBuffer:int setBytes(int,java.io.InputStream,int)",
            "org.jboss.netty.buffer.TruncatedChannelBuffer:int setBytes(int,java.io.InputStream,int)"
        ]
    },
    "org.jboss.netty.buffer.SlicedChannelBuffer:int setBytes(int,java.io.InputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.buffer.AbstractChannelBuffer:int writeBytes(java.io.InputStream,int)",
            "org.jboss.netty.buffer.CompositeChannelBuffer:int setBytes(int,java.io.InputStream,int)",
            "org.jboss.netty.buffer.DuplicatedChannelBuffer:int setBytes(int,java.io.InputStream,int)",
            "org.jboss.netty.buffer.DynamicChannelBuffer:int setBytes(int,java.io.InputStream,int)",
            "org.jboss.netty.buffer.SlicedChannelBuffer:int setBytes(int,java.io.InputStream,int)",
            "org.jboss.netty.buffer.TruncatedChannelBuffer:int setBytes(int,java.io.InputStream,int)"
        ]
    },
    "org.jboss.netty.buffer.TruncatedChannelBuffer:int setBytes(int,java.io.InputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.buffer.AbstractChannelBuffer:int writeBytes(java.io.InputStream,int)",
            "org.jboss.netty.buffer.CompositeChannelBuffer:int setBytes(int,java.io.InputStream,int)",
            "org.jboss.netty.buffer.DuplicatedChannelBuffer:int setBytes(int,java.io.InputStream,int)",
            "org.jboss.netty.buffer.DynamicChannelBuffer:int setBytes(int,java.io.InputStream,int)",
            "org.jboss.netty.buffer.SlicedChannelBuffer:int setBytes(int,java.io.InputStream,int)",
            "org.jboss.netty.buffer.TruncatedChannelBuffer:int setBytes(int,java.io.InputStream,int)"
        ]
    },
    "com.esotericsoftware.kryo.io.ByteBufferInput:int require(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.ByteBufferInput:byte readByte()",
            "com.esotericsoftware.kryo.io.ByteBufferInput:int readByteUnsigned()",
            "com.esotericsoftware.kryo.io.ByteBufferInput:void readBytes(byte[],int,int)",
            "com.esotericsoftware.kryo.io.ByteBufferInput:int readInt()",
            "com.esotericsoftware.kryo.io.ByteBufferInput:int readVarInt(boolean)",
            "com.esotericsoftware.kryo.io.ByteBufferInput:int readInt_slow(boolean)",
            "com.esotericsoftware.kryo.io.ByteBufferInput:java.lang.String readString()",
            "com.esotericsoftware.kryo.io.ByteBufferInput:int readUtf8Length_slow(int)",
            "com.esotericsoftware.kryo.io.ByteBufferInput:void readUtf8(int)",
            "com.esotericsoftware.kryo.io.ByteBufferInput:void readUtf8_slow(int,int)",
            "com.esotericsoftware.kryo.io.ByteBufferInput:java.lang.String readAscii_slow()",
            "com.esotericsoftware.kryo.io.ByteBufferInput:java.lang.StringBuilder readStringBuilder()",
            "com.esotericsoftware.kryo.io.ByteBufferInput:float readFloat()",
            "com.esotericsoftware.kryo.io.ByteBufferInput:short readShort()",
            "com.esotericsoftware.kryo.io.ByteBufferInput:int readShortUnsigned()",
            "com.esotericsoftware.kryo.io.ByteBufferInput:long readLong()",
            "com.esotericsoftware.kryo.io.ByteBufferInput:long readVarLong(boolean)",
            "com.esotericsoftware.kryo.io.ByteBufferInput:long readLong_slow(boolean)",
            "com.esotericsoftware.kryo.io.ByteBufferInput:boolean readBoolean()",
            "com.esotericsoftware.kryo.io.ByteBufferInput:char readChar()",
            "com.esotericsoftware.kryo.io.ByteBufferInput:double readDouble()",
            "com.esotericsoftware.kryo.io.Input:void skip(int)",
            "com.esotericsoftware.kryo.io.Input:byte readByte()",
            "com.esotericsoftware.kryo.io.Input:int readByteUnsigned()",
            "com.esotericsoftware.kryo.io.Input:void readBytes(byte[],int,int)",
            "com.esotericsoftware.kryo.io.Input:int readInt()",
            "com.esotericsoftware.kryo.io.Input:int readVarInt(boolean)",
            "com.esotericsoftware.kryo.io.Input:int readInt_slow(boolean)",
            "com.esotericsoftware.kryo.io.Input:java.lang.String readString()",
            "com.esotericsoftware.kryo.io.Input:int readUtf8Length_slow(int)",
            "com.esotericsoftware.kryo.io.Input:void readUtf8(int)",
            "com.esotericsoftware.kryo.io.Input:void readUtf8_slow(int,int)",
            "com.esotericsoftware.kryo.io.Input:java.lang.String readAscii_slow()",
            "com.esotericsoftware.kryo.io.Input:java.lang.StringBuilder readStringBuilder()",
            "com.esotericsoftware.kryo.io.Input:short readShort()",
            "com.esotericsoftware.kryo.io.Input:int readShortUnsigned()",
            "com.esotericsoftware.kryo.io.Input:long readLong()",
            "com.esotericsoftware.kryo.io.Input:long readVarLong(boolean)",
            "com.esotericsoftware.kryo.io.Input:long readLong_slow(boolean)",
            "com.esotericsoftware.kryo.io.Input:boolean readBoolean()",
            "com.esotericsoftware.kryo.io.Input:char readChar()",
            "com.esotericsoftware.kryo.io.UnsafeMemoryInput:int readInt()",
            "com.esotericsoftware.kryo.io.UnsafeMemoryInput:float readFloat()",
            "com.esotericsoftware.kryo.io.UnsafeMemoryInput:short readShort()",
            "com.esotericsoftware.kryo.io.UnsafeMemoryInput:long readLong()",
            "com.esotericsoftware.kryo.io.UnsafeMemoryInput:char readChar()",
            "com.esotericsoftware.kryo.io.UnsafeMemoryInput:double readDouble()",
            "com.esotericsoftware.kryo.io.UnsafeMemoryInput:void readBytes(java.lang.Object,long,long,int)"
        ]
    },
    "com.esotericsoftware.kryo.io.ByteBufferInput:int optional(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.ByteBufferInput:int read()",
            "com.esotericsoftware.kryo.io.ByteBufferInput:int read(byte[],int,int)",
            "com.esotericsoftware.kryo.io.ByteBufferInput:boolean canReadInt()",
            "com.esotericsoftware.kryo.io.ByteBufferInput:boolean canReadLong()"
        ]
    },
    "org.jboss.netty.handler.codec.http.multipart.AbstractDiskHttpData:void setContent(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.multipart.MixedAttribute:void setContent(java.io.InputStream)",
            "org.jboss.netty.handler.codec.http.multipart.MixedFileUpload:void setContent(java.io.InputStream)"
        ]
    },
    "org.jboss.netty.handler.codec.http.multipart.AbstractMemoryHttpData:void setContent(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.multipart.MixedAttribute:void setContent(java.io.InputStream)",
            "org.jboss.netty.handler.codec.http.multipart.MixedFileUpload:void setContent(java.io.InputStream)"
        ]
    },
    "com.esotericsoftware.kryo.io.KryoObjectInput:int read(byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$ByteSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeClassAndObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.EnumSet)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.KryoDataOutput:void writeUTF(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmStringField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.CompatibleFieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.FieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.TaggedFieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$CurrencySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.Currency)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$CurrencySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$LocaleSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.Locale)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$LocaleSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$StringSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$StringSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$TimeZoneSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.TimeZone)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$CalendarSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.Calendar)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$TimeZoneSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$StringBufferSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.StringBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$StringBufferSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$StringBuilderSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.StringBuilder)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$StringBuilderSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "org.jboss.netty.buffer.ByteBufferBackedChannelBuffer:void getBytes(int,java.io.OutputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.buffer.AbstractChannelBuffer:void readBytes(java.io.OutputStream,int)",
            "org.jboss.netty.buffer.CompositeChannelBuffer:void getBytes(int,java.io.OutputStream,int)",
            "org.jboss.netty.buffer.DuplicatedChannelBuffer:void getBytes(int,java.io.OutputStream,int)",
            "org.jboss.netty.buffer.DynamicChannelBuffer:void getBytes(int,java.io.OutputStream,int)",
            "org.jboss.netty.buffer.ReadOnlyChannelBuffer:void getBytes(int,java.io.OutputStream,int)",
            "org.jboss.netty.buffer.SlicedChannelBuffer:void getBytes(int,java.io.OutputStream,int)",
            "org.jboss.netty.buffer.TruncatedChannelBuffer:void getBytes(int,java.io.OutputStream,int)",
            "org.jboss.netty.channel.socket.oio.OioWorker:void write(org.jboss.netty.channel.socket.oio.OioSocketChannel,org.jboss.netty.channel.ChannelFuture,java.lang.Object)",
            "org.jboss.netty.handler.codec.serialization.ObjectEncoderOutputStream:void writeObject(java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.KryoDataOutput:void write(byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.buffer.HeapChannelBuffer:void getBytes(int,java.io.OutputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.buffer.AbstractChannelBuffer:void readBytes(java.io.OutputStream,int)",
            "org.jboss.netty.buffer.CompositeChannelBuffer:void getBytes(int,java.io.OutputStream,int)",
            "org.jboss.netty.buffer.DuplicatedChannelBuffer:void getBytes(int,java.io.OutputStream,int)",
            "org.jboss.netty.buffer.DynamicChannelBuffer:void getBytes(int,java.io.OutputStream,int)",
            "org.jboss.netty.buffer.ReadOnlyChannelBuffer:void getBytes(int,java.io.OutputStream,int)",
            "org.jboss.netty.buffer.SlicedChannelBuffer:void getBytes(int,java.io.OutputStream,int)",
            "org.jboss.netty.buffer.TruncatedChannelBuffer:void getBytes(int,java.io.OutputStream,int)",
            "org.jboss.netty.channel.socket.oio.OioWorker:void write(org.jboss.netty.channel.socket.oio.OioSocketChannel,org.jboss.netty.channel.ChannelFuture,java.lang.Object)",
            "org.jboss.netty.handler.codec.serialization.ObjectEncoderOutputStream:void writeObject(java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.ByteBufferOutput:void flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.onlab.util.KryoNamespace:byte[] serialize(java.lang.Object,int)",
            "org.onlab.util.KryoNamespace:void serialize(java.lang.Object,java.nio.ByteBuffer)",
            "org.onlab.util.KryoNamespace:void serialize(java.lang.Object,java.io.OutputStream,int)",
            "com.esotericsoftware.kryo.io.ByteBufferOutput:boolean require(int)",
            "com.esotericsoftware.kryo.io.ByteBufferOutput:void close()",
            "com.esotericsoftware.kryo.io.KryoObjectOutput:void flush()",
            "com.esotericsoftware.kryo.io.Output:boolean require(int)",
            "com.esotericsoftware.kryo.io.Output:void close()",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.KryoDataOutput:void write(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.io.Output:void flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.KryoObjectOutput:void flush()",
            "com.esotericsoftware.kryo.io.Output:boolean require(int)",
            "com.esotericsoftware.kryo.io.Output:void close()",
            "com.esotericsoftware.kryo.io.OutputChunked:void flush()",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$BooleanSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeClassAndObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.EnumSet)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "org.jboss.netty.channel.socket.nio.NioDatagramChannelFactory:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.channel.socket.nio.NioDatagramChannelFactory:void <init>(java.util.concurrent.Executor)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.channel.socket.nio.NioDatagramChannelFactory:void <init>(java.util.concurrent.Executor,org.jboss.netty.channel.socket.InternetProtocolFamily)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.http.websocket.WebSocketFrameDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.replay.VoidEnum)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.websocket.WebSocketFrameDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,java.lang.Enum)"
        ]
    },
    "org.jboss.netty.handler.codec.http.websocketx.WebSocket00FrameDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.replay.VoidEnum)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.websocketx.WebSocket00FrameDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,java.lang.Enum)"
        ]
    },
    "org.jboss.netty.handler.codec.frame.FixedLengthFrameDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.frame.FrameDecoder:java.lang.Object decodeLast(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.frame.FrameDecoder:void callDecode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,java.net.SocketAddress)"
        ]
    },
    "org.jboss.netty.buffer.ChannelBuffers:org.jboss.netty.buffer.ChannelBuffer copiedBuffer(org.jboss.netty.buffer.ChannelBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.buffer.ChannelBuffers:org.jboss.netty.buffer.ChannelBuffer copiedBuffer(org.jboss.netty.buffer.ChannelBuffer[])"
        ]
    },
    "org.jboss.netty.handler.codec.protobuf.ProtobufEncoder:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.oneone.OneToOneEncoder:boolean doEncode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.serialization.CompatibleObjectEncoder:org.jboss.netty.buffer.ChannelBuffer buffer(org.jboss.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.serialization.CompatibleObjectEncoder:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)"
        ]
    },
    "org.jboss.netty.handler.codec.compression.JdkZlibEncoder:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.oneone.OneToOneEncoder:boolean doEncode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.marshalling.ChannelBufferByteOutput:void <init>(org.jboss.netty.buffer.ChannelBufferFactory,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.marshalling.CompatibleMarshallingEncoder:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)",
            "org.jboss.netty.handler.codec.marshalling.MarshallingEncoder:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)"
        ]
    },
    "org.jboss.netty.handler.codec.serialization.ObjectEncoder:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.oneone.OneToOneEncoder:boolean doEncode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.compression.ZlibDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.oneone.OneToOneDecoder:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "org.jboss.netty.buffer.ChannelBuffers:org.jboss.netty.buffer.ChannelBuffer dynamicBuffer(java.nio.ByteOrder,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.buffer.ChannelBuffers:org.jboss.netty.buffer.ChannelBuffer dynamicBuffer()",
            "org.jboss.netty.buffer.ChannelBuffers:org.jboss.netty.buffer.ChannelBuffer dynamicBuffer(int)",
            "org.jboss.netty.handler.codec.spdy.SpdyHeaderBlockRawEncoder:org.jboss.netty.buffer.ChannelBuffer encode(org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame)"
        ]
    },
    "org.jboss.netty.buffer.DynamicChannelBuffer:void <init>(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.replay.UnsafeDynamicChannelBuffer:void <init>(org.jboss.netty.buffer.ChannelBufferFactory)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.buffer.AbstractChannelBuffer:void writeZero(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.buffer.DynamicChannelBuffer:void writeZero(int)"
        ]
    },
    "org.jboss.netty.buffer.ChannelBufferOutputStream:void write(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.buffer.ChannelBufferOutputStream:void writeBoolean(boolean)",
            "org.jboss.netty.buffer.ChannelBufferOutputStream:void writeByte(int)",
            "org.jboss.netty.buffer.ChannelBufferOutputStream:void writeBytes(java.lang.String)",
            "com.esotericsoftware.kryo.io.OutputChunked:void writeChunkSize()",
            "com.esotericsoftware.kryo.io.OutputChunked:void endChunks()"
        ]
    },
    "org.jboss.netty.handler.codec.http.HttpMessageEncoder:void encodeAscii(java.lang.String,org.jboss.netty.buffer.ChannelBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.HttpMessageEncoder:void encodeHeader(org.jboss.netty.buffer.ChannelBuffer,java.lang.String,java.lang.String)",
            "org.jboss.netty.handler.codec.http.HttpResponseEncoder:void encodeInitialLine(org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.http.HttpMessage)"
        ]
    },
    "org.jboss.netty.handler.codec.http.HttpRequestEncoder:void encodeInitialLine(org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.http.HttpMessage)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.HttpMessageEncoder:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)"
        ]
    },
    "org.jboss.netty.handler.codec.http.HttpResponseEncoder:void encodeInitialLine(org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.http.HttpMessage)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.HttpMessageEncoder:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)"
        ]
    },
    "org.jboss.netty.handler.codec.marshalling.ChannelBufferByteOutput:void write(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.rtsp.RtspRequestEncoder:void encodeInitialLine(org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.http.HttpMessage)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.HttpMessageEncoder:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)"
        ]
    },
    "org.jboss.netty.handler.codec.rtsp.RtspResponseEncoder:void encodeInitialLine(org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.http.HttpMessage)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.HttpMessageEncoder:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)"
        ]
    },
    "org.jboss.netty.handler.codec.socks.SocksAuthResponse:void encodeAsByteBuf(org.jboss.netty.buffer.ChannelBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.socks.SocksMessageEncoder:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)"
        ]
    },
    "org.jboss.netty.handler.codec.socks.SocksInitResponse:void encodeAsByteBuf(org.jboss.netty.buffer.ChannelBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.socks.SocksMessageEncoder:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)"
        ]
    },
    "org.jboss.netty.buffer.AbstractChannelBuffer:void writeChar(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.buffer.ChannelBufferOutputStream:void writeShort(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.buffer.ChannelBufferOutputStream:void writeChar(int)"
        ]
    },
    "org.jboss.netty.handler.codec.http.websocketx.CloseWebSocketFrame:void <init>(boolean,int,int,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.websocketx.CloseWebSocketFrame:void <init>(int,java.lang.String)"
        ]
    },
    "org.jboss.netty.buffer.AbstractChannelBuffer:void writeFloat(float)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.buffer.ChannelBufferOutputStream:void writeInt(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.buffer.ChannelBufferOutputStream:void writeFloat(float)"
        ]
    },
    "org.jboss.netty.handler.codec.spdy.SpdyHeaderBlockRawEncoder:void writeLengthField(org.jboss.netty.buffer.ChannelBuffer,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.spdy.SpdyHeaderBlockRawEncoder:org.jboss.netty.buffer.ChannelBuffer encode(org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame)"
        ]
    },
    "org.jboss.netty.buffer.AbstractChannelBuffer:void writeDouble(double)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.buffer.ChannelBufferOutputStream:void writeLong(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.buffer.ChannelBufferOutputStream:void writeDouble(double)"
        ]
    },
    "org.jboss.netty.buffer.AbstractChannelBuffer:void writeBytes(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.buffer.ChannelBufferOutputStream:void write(byte[])",
            "org.jboss.netty.handler.codec.compression.JdkZlibEncoder:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)",
            "org.jboss.netty.handler.codec.http.HttpRequestEncoder:void encodeInitialLine(org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.http.HttpMessage)",
            "org.jboss.netty.handler.codec.http.websocketx.CloseWebSocketFrame:void <init>(boolean,int,int,java.lang.String)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocket08FrameEncoder:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)",
            "org.jboss.netty.handler.codec.marshalling.ChannelBufferByteOutput:void write(byte[])",
            "org.jboss.netty.handler.codec.marshalling.MarshallingEncoder:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)",
            "org.jboss.netty.handler.codec.rtsp.RtspRequestEncoder:void encodeInitialLine(org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.http.HttpMessage)",
            "org.jboss.netty.handler.codec.rtsp.RtspResponseEncoder:void encodeInitialLine(org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.http.HttpMessage)",
            "org.jboss.netty.handler.codec.socks.SocksAuthRequest:void encodeAsByteBuf(org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.socks.SocksCmdRequest:void encodeAsByteBuf(org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.socks.SocksCmdResponse:void encodeAsByteBuf(org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.spdy.SpdyHeaderBlockRawEncoder:org.jboss.netty.buffer.ChannelBuffer encode(org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame)"
        ]
    },
    "org.jboss.netty.buffer.ChannelBufferOutputStream:void write(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.buffer.ByteBufferBackedChannelBuffer:void getBytes(int,java.io.OutputStream,int)",
            "org.jboss.netty.buffer.HeapChannelBuffer:void getBytes(int,java.io.OutputStream,int)",
            "com.esotericsoftware.kryo.io.ByteBufferOutput:void flush()",
            "com.esotericsoftware.kryo.io.Output:void flush()"
        ]
    },
    "org.jboss.netty.handler.codec.marshalling.ChannelBufferByteOutput:void write(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.buffer.AbstractChannelBuffer:void writeBytes(org.jboss.netty.buffer.ChannelBuffer,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.buffer.AbstractChannelBuffer:void writeBytes(org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.http.HttpMessageDecoder:java.lang.Object readFixedLengthContent(org.jboss.netty.buffer.ChannelBuffer)"
        ]
    },
    "org.jboss.netty.buffer.HeapChannelBufferFactory:org.jboss.netty.buffer.ChannelBuffer getBuffer(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.base64.Base64:org.jboss.netty.buffer.ChannelBuffer encode(org.jboss.netty.buffer.ChannelBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketUtil:java.lang.String base64(byte[])",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocketUtil:java.lang.String base64(org.jboss.netty.buffer.ChannelBuffer)"
        ]
    },
    "com.esotericsoftware.kryo.Kryo:org.objenesis.instantiator.ObjectInstantiator newInstantiator(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:java.lang.Object newInstance(java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.io.ByteBufferInput:byte readByte()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.io.KryoDataInput:byte readByte()",
            "com.esotericsoftware.kryo.io.UnsafeMemoryInput:byte readByte()",
            "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmByteField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$ByteSerializer:java.lang.Byte read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.ObjectField$ObjectByteField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeByteField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeRegionField:void readSlow(com.esotericsoftware.kryo.io.Input,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.ByteBufferInput:int readByteUnsigned()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.KryoDataInput:int readUnsignedByte()"
        ]
    },
    "com.esotericsoftware.kryo.io.ByteBufferInput:void readBytes(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.ByteBufferInput:byte[] readBytes(int)",
            "com.esotericsoftware.kryo.io.ByteBufferInput:void readBytes(byte[])",
            "com.esotericsoftware.kryo.io.Input:byte[] readBytes(int)",
            "com.esotericsoftware.kryo.io.Input:void readBytes(byte[])",
            "com.esotericsoftware.kryo.io.KryoDataInput:void readFully(byte[],int,int)"
        ]
    },
    "com.esotericsoftware.kryo.io.ByteBufferInput:int readInt()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.ByteBufferInput:int readInt(boolean)",
            "com.esotericsoftware.kryo.io.Input:float readFloat()",
            "com.esotericsoftware.kryo.io.Input:int[] readInts(int)",
            "com.esotericsoftware.kryo.io.KryoDataInput:int readInt()",
            "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmIntField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.ObjectField$ObjectIntField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeIntField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.ByteBufferInput:int readVarInt(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:int readReferenceOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class,boolean)",
            "com.esotericsoftware.kryo.io.ByteBufferInput:int readInt(boolean)",
            "com.esotericsoftware.kryo.io.Input:int readInt(boolean)",
            "com.esotericsoftware.kryo.serializers.CollectionSerializer:java.util.Collection read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.CompatibleFieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$BooleanArraySerializer:boolean[] read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ByteArraySerializer:byte[] read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$CharArraySerializer:char[] read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$DoubleArraySerializer:double[] read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$FloatArraySerializer:float[] read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$IntArraySerializer:int[] read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$LongArraySerializer:long[] read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ObjectArraySerializer:java.lang.Object[] read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ShortArraySerializer:short[] read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$StringArraySerializer:java.lang.String[] read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$BigIntegerSerializer:java.math.BigInteger read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSerializer:java.lang.Enum read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.TaggedFieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.util.DefaultClassResolver:com.esotericsoftware.kryo.Registration readClass(com.esotericsoftware.kryo.io.Input)",
            "com.esotericsoftware.kryo.util.DefaultClassResolver:com.esotericsoftware.kryo.Registration readName(com.esotericsoftware.kryo.io.Input)"
        ]
    },
    "com.esotericsoftware.kryo.io.ByteBufferInput:int readInt_slow(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.ByteBufferInput:int readVarInt(boolean)"
        ]
    },
    "com.esotericsoftware.kryo.io.ByteBufferInput:java.lang.String readString()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.KryoDataInput:java.lang.String readUTF()",
            "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmStringField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.CompatibleFieldSerializer:java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$StringArraySerializer:java.lang.String[] read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$CurrencySerializer:java.util.Currency read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$LocaleSerializer:java.util.Locale read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$StringBufferSerializer:java.lang.StringBuffer read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$StringSerializer:java.lang.String read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$TimeZoneSerializer:java.util.TimeZone read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeStringField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.util.DefaultClassResolver:com.esotericsoftware.kryo.Registration readName(com.esotericsoftware.kryo.io.Input)"
        ]
    },
    "com.esotericsoftware.kryo.io.ByteBufferInput:int readUtf8Length_slow(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.ByteBufferInput:java.lang.String readString()",
            "com.esotericsoftware.kryo.io.ByteBufferInput:java.lang.StringBuilder readStringBuilder()"
        ]
    },
    "com.esotericsoftware.kryo.io.ByteBufferInput:void readUtf8(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.ByteBufferInput:java.lang.String readString()",
            "com.esotericsoftware.kryo.io.ByteBufferInput:java.lang.StringBuilder readStringBuilder()"
        ]
    },
    "com.esotericsoftware.kryo.io.ByteBufferInput:void readUtf8_slow(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.ByteBufferInput:void readUtf8(int)"
        ]
    },
    "com.esotericsoftware.kryo.io.ByteBufferInput:java.lang.String readAscii_slow()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.ByteBufferInput:java.lang.String readAscii()"
        ]
    },
    "com.esotericsoftware.kryo.io.ByteBufferInput:java.lang.StringBuilder readStringBuilder()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$StringBuilderSerializer:java.lang.StringBuilder read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.io.ByteBufferInput:float readFloat()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.Input:float[] readFloats(int)",
            "com.esotericsoftware.kryo.io.KryoDataInput:float readFloat()",
            "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmFloatField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$FloatSerializer:java.lang.Float read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.ObjectField$ObjectFloatField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeFloatField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.ByteBufferInput:short readShort()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.Input:short[] readShorts(int)",
            "com.esotericsoftware.kryo.io.KryoDataInput:short readShort()",
            "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmShortField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$ShortSerializer:java.lang.Short read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.ObjectField$ObjectShortField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeShortField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.ByteBufferInput:int readShortUnsigned()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.KryoDataInput:int readUnsignedShort()"
        ]
    },
    "com.esotericsoftware.kryo.io.ByteBufferInput:long readLong()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.ByteBufferInput:long readLong(boolean)",
            "com.esotericsoftware.kryo.io.Input:double readDouble()",
            "com.esotericsoftware.kryo.io.Input:long[] readLongs(int)",
            "com.esotericsoftware.kryo.io.KryoDataInput:long readLong()",
            "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmLongField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.ObjectField$ObjectLongField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeLongField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeRegionField:void readSlow(com.esotericsoftware.kryo.io.Input,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.ByteBufferInput:long readVarLong(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.ByteBufferInput:long readLong(boolean)",
            "com.esotericsoftware.kryo.io.Input:long readLong(boolean)"
        ]
    },
    "com.esotericsoftware.kryo.io.ByteBufferInput:long readLong_slow(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.ByteBufferInput:long readVarLong(boolean)"
        ]
    },
    "com.esotericsoftware.kryo.io.ByteBufferInput:boolean readBoolean()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.KryoDataInput:boolean readBoolean()",
            "com.esotericsoftware.kryo.io.UnsafeMemoryInput:boolean readBoolean()",
            "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmBooleanField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$BooleanArraySerializer:boolean[] read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$BooleanSerializer:java.lang.Boolean read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$CalendarSerializer:java.util.Calendar read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.ObjectField$ObjectBooleanField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeBooleanField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.ByteBufferInput:char readChar()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.Input:char[] readChars(int)",
            "com.esotericsoftware.kryo.io.KryoDataInput:char readChar()",
            "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmCharField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$CharSerializer:java.lang.Character read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.ObjectField$ObjectCharField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeCharField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.ByteBufferInput:double readDouble()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.Input:double[] readDoubles(int)",
            "com.esotericsoftware.kryo.io.KryoDataInput:double readDouble()",
            "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmDoubleField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$DoubleSerializer:java.lang.Double read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.ObjectField$ObjectDoubleField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeDoubleField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.ByteBufferInput:int read()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.objectweb.asm.ClassReader:byte[] a(java.io.InputStream,boolean)",
            "com.esotericsoftware.kryo.io.InputChunked:void readChunkSize()",
            "com.esotericsoftware.kryo.io.KryoObjectInput:int read()",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$ClassSerializer:java.lang.Class read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.io.ByteBufferInput:int read(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.buffer.ByteBufferBackedChannelBuffer:int setBytes(int,java.io.InputStream,int)",
            "org.jboss.netty.buffer.HeapChannelBuffer:int setBytes(int,java.io.InputStream,int)",
            "org.objectweb.asm.ClassReader:byte[] a(java.io.InputStream,boolean)",
            "com.esotericsoftware.kryo.io.ByteBufferInput:int fill(java.nio.ByteBuffer,int,int)",
            "com.esotericsoftware.kryo.io.ByteBufferInput:int read(byte[])",
            "com.esotericsoftware.kryo.io.Input:int fill(byte[],int,int)",
            "com.esotericsoftware.kryo.io.Input:int read(byte[])",
            "com.esotericsoftware.kryo.io.KryoObjectInput:int read(byte[],int,int)"
        ]
    },
    "com.esotericsoftware.kryo.io.ByteBufferInput:boolean canReadInt()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.io.ByteBufferInput:boolean canReadLong()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.handler.codec.http.multipart.MixedAttribute:void setContent(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.multipart.MixedAttribute:void setContent(java.io.InputStream)"
        ]
    },
    "org.jboss.netty.handler.codec.http.multipart.MixedFileUpload:void setContent(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.multipart.MixedFileUpload:void setContent(java.io.InputStream)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$CurrencySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeClassAndObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.EnumSet)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$LocaleSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeClassAndObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.EnumSet)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$StringSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeClassAndObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.EnumSet)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$TimeZoneSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeClassAndObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.EnumSet)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$StringBufferSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeClassAndObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.EnumSet)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.serializers.DefaultSerializers$StringBuilderSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.Kryo:void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.Kryo:void writeClassAndObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.BlowfishSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.EnumSet)",
            "com.esotericsoftware.kryo.serializers.DeflateSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "org.jboss.netty.buffer.AbstractChannelBuffer:void readBytes(java.io.OutputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.socket.http.HttpTunnelingServlet$OutboundConnectionHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)"
        ]
    },
    "org.jboss.netty.buffer.CompositeChannelBuffer:void getBytes(int,java.io.OutputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.buffer.AbstractChannelBuffer:void readBytes(java.io.OutputStream,int)",
            "org.jboss.netty.buffer.CompositeChannelBuffer:void getBytes(int,java.io.OutputStream,int)",
            "org.jboss.netty.buffer.DuplicatedChannelBuffer:void getBytes(int,java.io.OutputStream,int)",
            "org.jboss.netty.buffer.DynamicChannelBuffer:void getBytes(int,java.io.OutputStream,int)",
            "org.jboss.netty.buffer.ReadOnlyChannelBuffer:void getBytes(int,java.io.OutputStream,int)",
            "org.jboss.netty.buffer.SlicedChannelBuffer:void getBytes(int,java.io.OutputStream,int)",
            "org.jboss.netty.buffer.TruncatedChannelBuffer:void getBytes(int,java.io.OutputStream,int)",
            "org.jboss.netty.channel.socket.oio.OioWorker:void write(org.jboss.netty.channel.socket.oio.OioSocketChannel,org.jboss.netty.channel.ChannelFuture,java.lang.Object)",
            "org.jboss.netty.handler.codec.serialization.ObjectEncoderOutputStream:void writeObject(java.lang.Object)"
        ]
    },
    "org.jboss.netty.buffer.DuplicatedChannelBuffer:void getBytes(int,java.io.OutputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.buffer.AbstractChannelBuffer:void readBytes(java.io.OutputStream,int)",
            "org.jboss.netty.buffer.CompositeChannelBuffer:void getBytes(int,java.io.OutputStream,int)",
            "org.jboss.netty.buffer.DuplicatedChannelBuffer:void getBytes(int,java.io.OutputStream,int)",
            "org.jboss.netty.buffer.DynamicChannelBuffer:void getBytes(int,java.io.OutputStream,int)",
            "org.jboss.netty.buffer.ReadOnlyChannelBuffer:void getBytes(int,java.io.OutputStream,int)",
            "org.jboss.netty.buffer.SlicedChannelBuffer:void getBytes(int,java.io.OutputStream,int)",
            "org.jboss.netty.buffer.TruncatedChannelBuffer:void getBytes(int,java.io.OutputStream,int)",
            "org.jboss.netty.channel.socket.oio.OioWorker:void write(org.jboss.netty.channel.socket.oio.OioSocketChannel,org.jboss.netty.channel.ChannelFuture,java.lang.Object)",
            "org.jboss.netty.handler.codec.serialization.ObjectEncoderOutputStream:void writeObject(java.lang.Object)"
        ]
    },
    "org.jboss.netty.buffer.DynamicChannelBuffer:void getBytes(int,java.io.OutputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.buffer.AbstractChannelBuffer:void readBytes(java.io.OutputStream,int)",
            "org.jboss.netty.buffer.CompositeChannelBuffer:void getBytes(int,java.io.OutputStream,int)",
            "org.jboss.netty.buffer.DuplicatedChannelBuffer:void getBytes(int,java.io.OutputStream,int)",
            "org.jboss.netty.buffer.DynamicChannelBuffer:void getBytes(int,java.io.OutputStream,int)",
            "org.jboss.netty.buffer.ReadOnlyChannelBuffer:void getBytes(int,java.io.OutputStream,int)",
            "org.jboss.netty.buffer.SlicedChannelBuffer:void getBytes(int,java.io.OutputStream,int)",
            "org.jboss.netty.buffer.TruncatedChannelBuffer:void getBytes(int,java.io.OutputStream,int)",
            "org.jboss.netty.channel.socket.oio.OioWorker:void write(org.jboss.netty.channel.socket.oio.OioSocketChannel,org.jboss.netty.channel.ChannelFuture,java.lang.Object)",
            "org.jboss.netty.handler.codec.serialization.ObjectEncoderOutputStream:void writeObject(java.lang.Object)"
        ]
    },
    "org.jboss.netty.buffer.ReadOnlyChannelBuffer:void getBytes(int,java.io.OutputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.buffer.AbstractChannelBuffer:void readBytes(java.io.OutputStream,int)",
            "org.jboss.netty.buffer.CompositeChannelBuffer:void getBytes(int,java.io.OutputStream,int)",
            "org.jboss.netty.buffer.DuplicatedChannelBuffer:void getBytes(int,java.io.OutputStream,int)",
            "org.jboss.netty.buffer.DynamicChannelBuffer:void getBytes(int,java.io.OutputStream,int)",
            "org.jboss.netty.buffer.ReadOnlyChannelBuffer:void getBytes(int,java.io.OutputStream,int)",
            "org.jboss.netty.buffer.SlicedChannelBuffer:void getBytes(int,java.io.OutputStream,int)",
            "org.jboss.netty.buffer.TruncatedChannelBuffer:void getBytes(int,java.io.OutputStream,int)",
            "org.jboss.netty.channel.socket.oio.OioWorker:void write(org.jboss.netty.channel.socket.oio.OioSocketChannel,org.jboss.netty.channel.ChannelFuture,java.lang.Object)",
            "org.jboss.netty.handler.codec.serialization.ObjectEncoderOutputStream:void writeObject(java.lang.Object)"
        ]
    },
    "org.jboss.netty.buffer.SlicedChannelBuffer:void getBytes(int,java.io.OutputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.buffer.AbstractChannelBuffer:void readBytes(java.io.OutputStream,int)",
            "org.jboss.netty.buffer.CompositeChannelBuffer:void getBytes(int,java.io.OutputStream,int)",
            "org.jboss.netty.buffer.DuplicatedChannelBuffer:void getBytes(int,java.io.OutputStream,int)",
            "org.jboss.netty.buffer.DynamicChannelBuffer:void getBytes(int,java.io.OutputStream,int)",
            "org.jboss.netty.buffer.ReadOnlyChannelBuffer:void getBytes(int,java.io.OutputStream,int)",
            "org.jboss.netty.buffer.SlicedChannelBuffer:void getBytes(int,java.io.OutputStream,int)",
            "org.jboss.netty.buffer.TruncatedChannelBuffer:void getBytes(int,java.io.OutputStream,int)",
            "org.jboss.netty.channel.socket.oio.OioWorker:void write(org.jboss.netty.channel.socket.oio.OioSocketChannel,org.jboss.netty.channel.ChannelFuture,java.lang.Object)",
            "org.jboss.netty.handler.codec.serialization.ObjectEncoderOutputStream:void writeObject(java.lang.Object)"
        ]
    },
    "org.jboss.netty.buffer.TruncatedChannelBuffer:void getBytes(int,java.io.OutputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.buffer.AbstractChannelBuffer:void readBytes(java.io.OutputStream,int)",
            "org.jboss.netty.buffer.CompositeChannelBuffer:void getBytes(int,java.io.OutputStream,int)",
            "org.jboss.netty.buffer.DuplicatedChannelBuffer:void getBytes(int,java.io.OutputStream,int)",
            "org.jboss.netty.buffer.DynamicChannelBuffer:void getBytes(int,java.io.OutputStream,int)",
            "org.jboss.netty.buffer.ReadOnlyChannelBuffer:void getBytes(int,java.io.OutputStream,int)",
            "org.jboss.netty.buffer.SlicedChannelBuffer:void getBytes(int,java.io.OutputStream,int)",
            "org.jboss.netty.buffer.TruncatedChannelBuffer:void getBytes(int,java.io.OutputStream,int)",
            "org.jboss.netty.channel.socket.oio.OioWorker:void write(org.jboss.netty.channel.socket.oio.OioSocketChannel,org.jboss.netty.channel.ChannelFuture,java.lang.Object)",
            "org.jboss.netty.handler.codec.serialization.ObjectEncoderOutputStream:void writeObject(java.lang.Object)"
        ]
    },
    "org.jboss.netty.handler.codec.serialization.ObjectEncoderOutputStream:void writeObject(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.io.ByteBufferOutput:boolean require(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.ByteBufferOutput:void write(int)",
            "com.esotericsoftware.kryo.io.ByteBufferOutput:void writeByte(byte)",
            "com.esotericsoftware.kryo.io.ByteBufferOutput:void writeByte(int)",
            "com.esotericsoftware.kryo.io.ByteBufferOutput:void writeBytes(byte[],int,int)",
            "com.esotericsoftware.kryo.io.ByteBufferOutput:void writeInt(int)",
            "com.esotericsoftware.kryo.io.ByteBufferOutput:void writeUtf8Length(int)",
            "com.esotericsoftware.kryo.io.ByteBufferOutput:void writeString_slow(java.lang.CharSequence,int,int)",
            "com.esotericsoftware.kryo.io.ByteBufferOutput:void writeAscii_slow(java.lang.String,int)",
            "com.esotericsoftware.kryo.io.ByteBufferOutput:void writeFloat(float)",
            "com.esotericsoftware.kryo.io.ByteBufferOutput:void writeShort(int)",
            "com.esotericsoftware.kryo.io.ByteBufferOutput:void writeLong(long)",
            "com.esotericsoftware.kryo.io.ByteBufferOutput:int writeLongS(long,boolean)",
            "com.esotericsoftware.kryo.io.ByteBufferOutput:void writeBoolean(boolean)",
            "com.esotericsoftware.kryo.io.ByteBufferOutput:void writeChar(char)",
            "com.esotericsoftware.kryo.io.ByteBufferOutput:void writeDouble(double)",
            "com.esotericsoftware.kryo.io.Output:void write(int)",
            "com.esotericsoftware.kryo.io.Output:void writeByte(byte)",
            "com.esotericsoftware.kryo.io.Output:void writeByte(int)",
            "com.esotericsoftware.kryo.io.Output:void writeBytes(byte[],int,int)",
            "com.esotericsoftware.kryo.io.Output:void writeInt(int)",
            "com.esotericsoftware.kryo.io.Output:int writeVarInt(int,boolean)",
            "com.esotericsoftware.kryo.io.Output:void writeUtf8Length(int)",
            "com.esotericsoftware.kryo.io.Output:void writeString_slow(java.lang.CharSequence,int,int)",
            "com.esotericsoftware.kryo.io.Output:void writeAscii_slow(java.lang.String,int)",
            "com.esotericsoftware.kryo.io.Output:void writeShort(int)",
            "com.esotericsoftware.kryo.io.Output:void writeLong(long)",
            "com.esotericsoftware.kryo.io.Output:int writeVarLong(long,boolean)",
            "com.esotericsoftware.kryo.io.Output:void writeBoolean(boolean)",
            "com.esotericsoftware.kryo.io.Output:void writeChar(char)",
            "com.esotericsoftware.kryo.io.UnsafeMemoryOutput:void writeInt(int)",
            "com.esotericsoftware.kryo.io.UnsafeMemoryOutput:void writeFloat(float)",
            "com.esotericsoftware.kryo.io.UnsafeMemoryOutput:void writeShort(int)",
            "com.esotericsoftware.kryo.io.UnsafeMemoryOutput:void writeLong(long)",
            "com.esotericsoftware.kryo.io.UnsafeMemoryOutput:void writeChar(char)",
            "com.esotericsoftware.kryo.io.UnsafeMemoryOutput:void writeDouble(double)",
            "com.esotericsoftware.kryo.io.UnsafeMemoryOutput:void writeBytes(java.lang.Object,long,long,long)"
        ]
    },
    "org.jboss.netty.handler.codec.http.websocket.WebSocketFrameDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,java.lang.Enum)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.replay.ReplayingDecoder:java.lang.Object decodeLast(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,java.lang.Enum)",
            "org.jboss.netty.handler.codec.replay.ReplayingDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.replay.ReplayingDecoder:void callDecode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.buffer.ChannelBuffer,java.net.SocketAddress)"
        ]
    },
    "org.jboss.netty.handler.codec.http.websocketx.WebSocket00FrameDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,java.lang.Enum)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.replay.ReplayingDecoder:java.lang.Object decodeLast(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,java.lang.Enum)",
            "org.jboss.netty.handler.codec.replay.ReplayingDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.replay.ReplayingDecoder:void callDecode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.buffer.ChannelBuffer,java.net.SocketAddress)"
        ]
    },
    "org.jboss.netty.handler.codec.marshalling.CompatibleMarshallingEncoder:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.oneone.OneToOneEncoder:boolean doEncode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)"
        ]
    },
    "org.jboss.netty.handler.codec.marshalling.MarshallingEncoder:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.oneone.OneToOneEncoder:boolean doEncode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)"
        ]
    },
    "org.jboss.netty.buffer.ChannelBuffers:org.jboss.netty.buffer.ChannelBuffer dynamicBuffer()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.multipart.AbstractMemoryHttpData:void setContent(java.io.InputStream)",
            "org.jboss.netty.handler.codec.spdy.SpdyHeaderBlockJZlibEncoder:org.jboss.netty.buffer.ChannelBuffer encode(org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame)"
        ]
    },
    "org.jboss.netty.buffer.ChannelBuffers:org.jboss.netty.buffer.ChannelBuffer dynamicBuffer(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:java.lang.String readLineStandard()",
            "org.jboss.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:java.lang.String readLine()",
            "org.jboss.netty.handler.codec.serialization.ObjectEncoderOutputStream:void writeObject(java.lang.Object)",
            "org.jboss.netty.handler.codec.spdy.SpdyHeaderBlockZlibEncoder:org.jboss.netty.buffer.ChannelBuffer encode(org.jboss.netty.handler.codec.spdy.SpdyHeadersFrame)"
        ]
    },
    "org.jboss.netty.buffer.ChannelBufferOutputStream:void writeBoolean(boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.buffer.ChannelBufferOutputStream:void writeByte(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.buffer.ChannelBufferOutputStream:void writeBytes(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.buffer.ChannelBufferOutputStream:void writeChar(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.buffer.ChannelBufferOutputStream:void writeChars(java.lang.String)"
        ]
    },
    "org.jboss.netty.handler.codec.http.websocketx.CloseWebSocketFrame:void <init>(int,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.buffer.ChannelBufferOutputStream:void writeFloat(float)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.buffer.ChannelBufferOutputStream:void writeDouble(double)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.buffer.ChannelBufferOutputStream:void write(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.buffer.ByteBufferBackedChannelBuffer:void getBytes(int,java.io.OutputStream,int)",
            "org.jboss.netty.handler.codec.serialization.ObjectEncoder:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)"
        ]
    },
    "org.jboss.netty.handler.codec.marshalling.ChannelBufferByteOutput:void write(byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jboss.netty.buffer.AbstractChannelBuffer:void writeBytes(org.jboss.netty.buffer.ChannelBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.frame.FrameDecoder:org.jboss.netty.buffer.ChannelBuffer updateCumulation(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.buffer.ChannelBuffer)",
            "org.jboss.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder$State)",
            "org.jboss.netty.handler.codec.replay.ReplayingDecoder:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.jboss.netty.handler.codec.spdy.SpdyHttpDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.UnsafeMemoryInput:byte readByte()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.io.KryoDataInput:byte readByte()",
            "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmByteField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$ByteSerializer:java.lang.Byte read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.ObjectField$ObjectByteField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeByteField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeRegionField:void readSlow(com.esotericsoftware.kryo.io.Input,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.ByteBufferInput:byte[] readBytes(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ByteArraySerializer:byte[] read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$BigIntegerSerializer:java.math.BigInteger read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.io.ByteBufferInput:void readBytes(byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.io.ByteBufferInput:java.lang.String readAscii()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.ByteBufferInput:java.lang.String readString()",
            "com.esotericsoftware.kryo.io.ByteBufferInput:java.lang.StringBuilder readStringBuilder()"
        ]
    },
    "com.esotericsoftware.kryo.io.UnsafeMemoryInput:boolean readBoolean()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.KryoDataInput:boolean readBoolean()",
            "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmBooleanField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$BooleanArraySerializer:boolean[] read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$BooleanSerializer:java.lang.Boolean read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$CalendarSerializer:java.util.Calendar read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)",
            "com.esotericsoftware.kryo.serializers.ObjectField$ObjectBooleanField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeBooleanField:void read(com.esotericsoftware.kryo.io.Input,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.ByteBufferInput:int read(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.handler.codec.http.multipart.AbstractDiskHttpData:void setContent(java.io.InputStream)",
            "org.jboss.netty.handler.codec.http.multipart.AbstractMemoryHttpData:void setContent(java.io.InputStream)",
            "com.esotericsoftware.kryo.io.KryoObjectInput:int read(byte[])"
        ]
    },
    "org.jboss.netty.channel.socket.http.HttpTunnelingServlet$OutboundConnectionHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)"
        ]
    },
    "com.esotericsoftware.kryo.io.ByteBufferOutput:void write(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.ByteBufferOutput:int writeVarLong(long,boolean)",
            "com.esotericsoftware.kryo.io.KryoDataOutput:void write(int)",
            "com.esotericsoftware.kryo.io.KryoDataOutput:void writeBytes(java.lang.String)",
            "com.esotericsoftware.kryo.io.KryoDataOutput:void writeChars(java.lang.String)",
            "com.esotericsoftware.kryo.io.OutputChunked:void writeChunkSize()",
            "com.esotericsoftware.kryo.io.OutputChunked:void endChunks()",
            "com.esotericsoftware.kryo.io.UnsafeMemoryOutput:int writeVarLong(long,boolean)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeRegionField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.ByteBufferOutput:void writeByte(byte)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.io.UnsafeMemoryOutput:void writeByte(byte)",
            "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmByteField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$ByteSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Byte)",
            "com.esotericsoftware.kryo.serializers.ObjectField$ObjectByteField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeByteField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.ByteBufferOutput:void writeByte(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.ByteBufferOutput:int writeVarInt(int,boolean)",
            "com.esotericsoftware.kryo.io.ByteBufferOutput:void writeString(java.lang.String)",
            "com.esotericsoftware.kryo.io.ByteBufferOutput:void writeString(java.lang.CharSequence)",
            "com.esotericsoftware.kryo.io.ByteBufferOutput:void writeAscii(java.lang.String)",
            "com.esotericsoftware.kryo.io.ByteBufferOutput:int writeVarLong(long,boolean)",
            "com.esotericsoftware.kryo.io.KryoDataOutput:void writeByte(int)",
            "com.esotericsoftware.kryo.io.Output:void writeString(java.lang.String)",
            "com.esotericsoftware.kryo.io.Output:void writeString(java.lang.CharSequence)",
            "com.esotericsoftware.kryo.io.Output:void writeAscii(java.lang.String)",
            "com.esotericsoftware.kryo.io.UnsafeMemoryOutput:void writeByte(int)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$BigIntegerSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.math.BigInteger)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$ClassSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.io.ByteBufferOutput:void writeBytes(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.ByteBufferOutput:void write(byte[])",
            "com.esotericsoftware.kryo.io.ByteBufferOutput:void write(byte[],int,int)",
            "com.esotericsoftware.kryo.io.ByteBufferOutput:void writeBytes(byte[])",
            "com.esotericsoftware.kryo.io.Output:void write(byte[])",
            "com.esotericsoftware.kryo.io.Output:void write(byte[],int,int)",
            "com.esotericsoftware.kryo.io.Output:void writeBytes(byte[])"
        ]
    },
    "com.esotericsoftware.kryo.io.ByteBufferOutput:void writeInt(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.ByteBufferOutput:int writeInt(int,boolean)",
            "com.esotericsoftware.kryo.io.ByteBufferOutput:int writeVarInt(int,boolean)",
            "com.esotericsoftware.kryo.io.ByteBufferOutput:int writeVarLong(long,boolean)",
            "com.esotericsoftware.kryo.io.KryoDataOutput:void writeInt(int)",
            "com.esotericsoftware.kryo.io.Output:void writeFloat(float)",
            "com.esotericsoftware.kryo.io.Output:void writeInts(int[])",
            "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmIntField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.ObjectField$ObjectIntField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeIntField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.ByteBufferOutput:void writeUtf8Length(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.ByteBufferOutput:void writeString(java.lang.String)",
            "com.esotericsoftware.kryo.io.ByteBufferOutput:void writeString(java.lang.CharSequence)"
        ]
    },
    "com.esotericsoftware.kryo.io.ByteBufferOutput:void writeString_slow(java.lang.CharSequence,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.ByteBufferOutput:void writeString(java.lang.String)",
            "com.esotericsoftware.kryo.io.ByteBufferOutput:void writeString(java.lang.CharSequence)"
        ]
    },
    "com.esotericsoftware.kryo.io.ByteBufferOutput:void writeAscii_slow(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.ByteBufferOutput:void writeString(java.lang.String)",
            "com.esotericsoftware.kryo.io.ByteBufferOutput:void writeAscii(java.lang.String)"
        ]
    },
    "com.esotericsoftware.kryo.io.ByteBufferOutput:void writeFloat(float)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.KryoDataOutput:void writeFloat(float)",
            "com.esotericsoftware.kryo.io.Output:void writeFloats(float[])",
            "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmFloatField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$FloatSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Float)",
            "com.esotericsoftware.kryo.serializers.ObjectField$ObjectFloatField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeFloatField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.ByteBufferOutput:void writeShort(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.KryoDataOutput:void writeShort(int)",
            "com.esotericsoftware.kryo.io.Output:void writeShorts(short[])",
            "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmShortField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$ShortSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Short)",
            "com.esotericsoftware.kryo.serializers.ObjectField$ObjectShortField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeShortField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.ByteBufferOutput:void writeLong(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.ByteBufferOutput:int writeVarInt(int,boolean)",
            "com.esotericsoftware.kryo.io.ByteBufferOutput:int writeLong(long,boolean)",
            "com.esotericsoftware.kryo.io.ByteBufferOutput:int writeVarLong(long,boolean)",
            "com.esotericsoftware.kryo.io.KryoDataOutput:void writeLong(long)",
            "com.esotericsoftware.kryo.io.Output:void writeDouble(double)",
            "com.esotericsoftware.kryo.io.Output:void writeLongs(long[])",
            "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmLongField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.ObjectField$ObjectLongField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeLongField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeRegionField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.ByteBufferOutput:int writeLongS(long,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.io.ByteBufferOutput:void writeBoolean(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.KryoDataOutput:void writeBoolean(boolean)",
            "com.esotericsoftware.kryo.io.UnsafeMemoryOutput:void writeBoolean(boolean)",
            "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmBooleanField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$BooleanArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,boolean[])",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$BooleanSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Boolean)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$CalendarSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.Calendar)",
            "com.esotericsoftware.kryo.serializers.ObjectField$ObjectBooleanField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeBooleanField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.ByteBufferOutput:void writeChar(char)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.KryoDataOutput:void writeChar(int)",
            "com.esotericsoftware.kryo.io.Output:void writeChars(char[])",
            "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmCharField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$CharSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Character)",
            "com.esotericsoftware.kryo.serializers.ObjectField$ObjectCharField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeCharField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.ByteBufferOutput:void writeDouble(double)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.KryoDataOutput:void writeDouble(double)",
            "com.esotericsoftware.kryo.io.Output:void writeDoubles(double[])",
            "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmDoubleField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$DoubleSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Double)",
            "com.esotericsoftware.kryo.serializers.ObjectField$ObjectDoubleField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeDoubleField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "org.jboss.netty.buffer.ChannelBufferOutputStream:void writeChars(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.esotericsoftware.kryo.io.UnsafeMemoryOutput:void writeByte(byte)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,java.lang.Class)",
            "com.esotericsoftware.kryo.Kryo:void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer)",
            "com.esotericsoftware.kryo.io.UnsafeMemoryOutput:int writeVarInt(int,boolean)",
            "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmByteField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$ByteSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Byte)",
            "com.esotericsoftware.kryo.serializers.ObjectField$ObjectByteField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeByteField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    },
    "com.esotericsoftware.kryo.io.ByteBufferOutput:void writeString(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.KryoDataOutput:void writeUTF(java.lang.String)",
            "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmStringField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.CompatibleFieldSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$StringArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.String[])",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$CurrencySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.Currency)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$LocaleSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.Locale)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$StringSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.String)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$TimeZoneSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.TimeZone)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeStringField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.util.DefaultClassResolver:void writeName(com.esotericsoftware.kryo.io.Output,java.lang.Class,com.esotericsoftware.kryo.Registration)"
        ]
    },
    "com.esotericsoftware.kryo.io.ByteBufferOutput:void writeString(java.lang.CharSequence)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$StringBufferSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.StringBuffer)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$StringBuilderSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.StringBuilder)"
        ]
    },
    "com.esotericsoftware.kryo.io.ByteBufferOutput:void writeAscii(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$LocaleSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.Locale)"
        ]
    },
    "com.esotericsoftware.kryo.io.UnsafeMemoryOutput:void writeByte(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.ByteBufferOutput:int writeVarInt(int,boolean)",
            "com.esotericsoftware.kryo.io.ByteBufferOutput:void writeString(java.lang.String)",
            "com.esotericsoftware.kryo.io.ByteBufferOutput:void writeString(java.lang.CharSequence)",
            "com.esotericsoftware.kryo.io.ByteBufferOutput:void writeAscii(java.lang.String)",
            "com.esotericsoftware.kryo.io.ByteBufferOutput:int writeVarLong(long,boolean)",
            "com.esotericsoftware.kryo.io.KryoDataOutput:void writeByte(int)",
            "com.esotericsoftware.kryo.io.Output:void writeString(java.lang.String)",
            "com.esotericsoftware.kryo.io.Output:void writeString(java.lang.CharSequence)",
            "com.esotericsoftware.kryo.io.Output:void writeAscii(java.lang.String)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$BigIntegerSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.math.BigInteger)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$ClassSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Class)"
        ]
    },
    "com.esotericsoftware.kryo.io.ByteBufferOutput:void write(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.buffer.ByteBufferBackedChannelBuffer:void getBytes(int,java.io.OutputStream,int)",
            "com.esotericsoftware.kryo.io.KryoDataOutput:void write(byte[])"
        ]
    },
    "com.esotericsoftware.kryo.io.ByteBufferOutput:void write(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jboss.netty.buffer.ByteBufferBackedChannelBuffer:void getBytes(int,java.io.OutputStream,int)",
            "org.jboss.netty.buffer.HeapChannelBuffer:void getBytes(int,java.io.OutputStream,int)",
            "com.esotericsoftware.kryo.io.ByteBufferOutput:void flush()",
            "com.esotericsoftware.kryo.io.KryoDataOutput:void write(byte[],int,int)",
            "com.esotericsoftware.kryo.io.Output:void flush()"
        ]
    },
    "com.esotericsoftware.kryo.io.ByteBufferOutput:void writeBytes(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ByteArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,byte[])",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$BigIntegerSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.math.BigInteger)"
        ]
    },
    "com.esotericsoftware.kryo.io.UnsafeMemoryOutput:void writeBoolean(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.esotericsoftware.kryo.io.KryoDataOutput:void writeBoolean(boolean)",
            "com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmBooleanField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$BooleanArraySerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,boolean[])",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$BooleanSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Boolean)",
            "com.esotericsoftware.kryo.serializers.DefaultSerializers$CalendarSerializer:void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.Calendar)",
            "com.esotericsoftware.kryo.serializers.ObjectField$ObjectBooleanField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)",
            "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeBooleanField:void write(com.esotericsoftware.kryo.io.Output,java.lang.Object)"
        ]
    }
}