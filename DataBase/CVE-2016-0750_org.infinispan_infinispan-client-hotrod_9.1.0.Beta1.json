{
    "org.infinispan.client.hotrod.configuration.Configuration:java.util.Properties properties()": {
        "isVulRoot": true,
        "vulCaller": []
    },
    "org.infinispan.client.hotrod.configuration.ConfigurationBuilder:org.infinispan.client.hotrod.configuration.ConfigurationBuilder withProperties(java.util.Properties)": {
        "isVulRoot": true,
        "vulCaller": [
            "org.infinispan.client.hotrod.RemoteCacheManager:void <init>(boolean)",
            "org.infinispan.client.hotrod.configuration.AbstractConfigurationChildBuilder:org.infinispan.client.hotrod.configuration.ConfigurationBuilder withProperties(java.util.Properties)"
        ]
    },
    "org.infinispan.client.hotrod.RemoteCacheManager:void startRemoteCache(org.infinispan.client.hotrod.RemoteCacheManager$RemoteCacheHolder)": {
        "isVulRoot": true,
        "vulCaller": [
            "org.infinispan.client.hotrod.RemoteCacheManager:void start()",
            "org.infinispan.client.hotrod.RemoteCacheManager:org.infinispan.client.hotrod.RemoteCache createRemoteCache(java.lang.String,java.lang.Boolean)"
        ]
    },
    "org.infinispan.client.hotrod.RemoteCacheManager:void <init>(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.RemoteCacheManager:void <init>()"
        ]
    },
    "org.infinispan.client.hotrod.configuration.AbstractConfigurationChildBuilder:org.infinispan.client.hotrod.configuration.ConfigurationBuilder withProperties(java.util.Properties)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.infinispan.client.hotrod.RemoteCacheManager:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.RemoteCacheManager:void <init>(org.infinispan.client.hotrod.configuration.Configuration,boolean)",
            "org.infinispan.client.hotrod.RemoteCacheManager:void <init>(boolean)",
            "org.infinispan.client.hotrod.RemoteCacheManager$start__2:void run()",
            "org.infinispan.client.hotrod.RemoteCacheManager$start__4:void run()"
        ]
    },
    "org.infinispan.client.hotrod.RemoteCacheManager:org.infinispan.client.hotrod.RemoteCache createRemoteCache(java.lang.String,java.lang.Boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.RemoteCacheManager:org.infinispan.client.hotrod.RemoteCache getCache(java.lang.String,boolean)",
            "org.infinispan.client.hotrod.RemoteCacheManager:org.infinispan.client.hotrod.RemoteCache getCache(boolean)"
        ]
    },
    "org.infinispan.client.hotrod.RemoteCacheManager:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.infinispan.client.hotrod.RemoteCacheManager:void <init>(org.infinispan.client.hotrod.configuration.Configuration,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.RemoteCacheManager:void <init>(org.infinispan.client.hotrod.configuration.Configuration)"
        ]
    },
    "org.infinispan.client.hotrod.RemoteCacheManager$start__2:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.event.ClientListenerNotifier:void lambda$null$0(java.lang.Runnable)",
            "org.infinispan.client.hotrod.impl.protocol.TransportInputStream:void close()",
            "org.infinispan.client.hotrod.impl.protocol.TransportOutputStream:void close()"
        ]
    },
    "org.infinispan.client.hotrod.RemoteCacheManager$start__4:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.event.ClientListenerNotifier:void lambda$null$0(java.lang.Runnable)",
            "org.infinispan.client.hotrod.impl.protocol.TransportInputStream:void close()",
            "org.infinispan.client.hotrod.impl.protocol.TransportOutputStream:void close()"
        ]
    },
    "org.infinispan.client.hotrod.RemoteCacheManager:org.infinispan.client.hotrod.RemoteCache getCache(java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.RemoteCacheManager:org.infinispan.client.hotrod.RemoteCache getCache(java.lang.String)"
        ]
    },
    "org.infinispan.client.hotrod.RemoteCacheManager:org.infinispan.client.hotrod.RemoteCache getCache(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.RemoteCacheManager:org.infinispan.client.hotrod.RemoteCache getCache()"
        ]
    },
    "org.infinispan.client.hotrod.RemoteCacheManager:void <init>(org.infinispan.client.hotrod.configuration.Configuration)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.infinispan.client.hotrod.event.ClientListenerNotifier:void lambda$null$0(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.event.ClientListenerNotifier$lambda_null_0__9:void run()"
        ]
    },
    "org.infinispan.client.hotrod.impl.protocol.TransportInputStream:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.impl.transport.tcp.TcpTransport:void destroy()"
        ]
    },
    "org.infinispan.client.hotrod.impl.protocol.TransportOutputStream:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.impl.transport.tcp.SaslOutputStream:void close()",
            "org.infinispan.client.hotrod.impl.transport.tcp.TcpTransport:void destroy()"
        ]
    },
    "org.infinispan.client.hotrod.RemoteCacheManager:org.infinispan.client.hotrod.RemoteCache getCache(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.RemoteCacheManager:org.infinispan.commons.api.BasicCache getCache(java.lang.String)"
        ]
    },
    "org.infinispan.client.hotrod.RemoteCacheManager:org.infinispan.client.hotrod.RemoteCache getCache()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.RemoteCacheManager:org.infinispan.commons.api.BasicCache getCache()"
        ]
    },
    "org.infinispan.client.hotrod.event.ClientListenerNotifier$lambda_null_0__9:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.event.ClientListenerNotifier:void lambda$null$0(java.lang.Runnable)",
            "org.infinispan.client.hotrod.impl.protocol.TransportInputStream:void close()",
            "org.infinispan.client.hotrod.impl.protocol.TransportOutputStream:void close()"
        ]
    },
    "org.infinispan.client.hotrod.impl.transport.tcp.TcpTransport:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.impl.transport.tcp.TcpTransport:void release()"
        ]
    },
    "org.infinispan.client.hotrod.impl.transport.tcp.SaslOutputStream:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.impl.transport.tcp.SaslOutputStream:void close()",
            "org.infinispan.client.hotrod.impl.transport.tcp.TcpTransport:void destroy()"
        ]
    },
    "org.infinispan.client.hotrod.RemoteCacheManager:org.infinispan.commons.api.BasicCache getCache(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.infinispan.client.hotrod.RemoteCacheManager:org.infinispan.commons.api.BasicCache getCache()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.infinispan.client.hotrod.impl.transport.tcp.TcpTransport:void release()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.event.ClientListenerNotifier:void removeClientListener(org.infinispan.commons.marshall.WrappedByteArray)",
            "org.infinispan.client.hotrod.impl.transport.tcp.TransportObjectFactory:void destroyObject(java.net.SocketAddress,org.infinispan.client.hotrod.impl.transport.tcp.TcpTransport)"
        ]
    },
    "org.infinispan.client.hotrod.event.ClientListenerNotifier:void removeClientListener(org.infinispan.commons.marshall.WrappedByteArray)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.event.ClientListenerNotifier:void failoverClientListener(org.infinispan.commons.marshall.WrappedByteArray)",
            "org.infinispan.client.hotrod.event.ClientListenerNotifier:void removeClientListener(byte[])",
            "org.infinispan.client.hotrod.event.ClientListenerNotifier:void stop()"
        ]
    },
    "org.infinispan.client.hotrod.impl.transport.tcp.TransportObjectFactory:void destroyObject(java.net.SocketAddress,org.infinispan.client.hotrod.impl.transport.tcp.TcpTransport)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.impl.transport.tcp.TransportObjectFactory:void destroyObject(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.infinispan.client.hotrod.event.ClientListenerNotifier:void failoverClientListener(org.infinispan.commons.marshall.WrappedByteArray)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.event.ClientListenerNotifier:void failoverClientListener(byte[])"
        ]
    },
    "org.infinispan.client.hotrod.event.ClientListenerNotifier:void removeClientListener(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.impl.operations.AddClientListenerOperation:java.lang.Short executeOperation(org.infinispan.client.hotrod.impl.transport.Transport)",
            "org.infinispan.client.hotrod.impl.operations.RemoveClientListenerOperation:java.lang.Object execute()"
        ]
    },
    "org.infinispan.client.hotrod.event.ClientListenerNotifier:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.RemoteCacheManager:void stop()"
        ]
    },
    "org.infinispan.client.hotrod.impl.transport.tcp.TransportObjectFactory:void destroyObject(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.infinispan.client.hotrod.event.ClientListenerNotifier:void failoverClientListener(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.event.ClientListenerNotifier$EventDispatcher:void tryFailoverClientListener()"
        ]
    },
    "org.infinispan.client.hotrod.impl.operations.AddClientListenerOperation:java.lang.Short executeOperation(org.infinispan.client.hotrod.impl.transport.Transport)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.impl.operations.AddClientListenerOperation:java.lang.Object executeOperation(org.infinispan.client.hotrod.impl.transport.Transport)"
        ]
    },
    "org.infinispan.client.hotrod.impl.operations.RemoveClientListenerOperation:java.lang.Object execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.impl.RemoteCacheImpl:void removeClientListener(java.lang.Object)",
            "org.infinispan.client.hotrod.impl.operations.ParallelHotRodOperation:java.lang.Object executeSequential(org.infinispan.client.hotrod.impl.operations.HotRodOperation)",
            "org.infinispan.client.hotrod.impl.operations.ParallelHotRodOperation:java.lang.Object lambda$executeParallel$0(org.infinispan.client.hotrod.impl.operations.HotRodOperation)"
        ]
    },
    "org.infinispan.client.hotrod.RemoteCacheManager:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.RemoteCacheManager$stop__3:void run()",
            "org.infinispan.client.hotrod.RemoteCacheManager$stop__5:void run()"
        ]
    },
    "org.infinispan.client.hotrod.event.ClientListenerNotifier$EventDispatcher:void tryFailoverClientListener()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.event.ClientListenerNotifier$EventDispatcher:void run()"
        ]
    },
    "org.infinispan.client.hotrod.impl.operations.AddClientListenerOperation:java.lang.Object executeOperation(org.infinispan.client.hotrod.impl.transport.Transport)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.impl.operations.RetryOnFailureOperation:java.lang.Object execute()"
        ]
    },
    "org.infinispan.client.hotrod.impl.RemoteCacheImpl:void removeClientListener(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.event.ContinuousQueryImpl:void removeContinuousQueryListener(org.infinispan.query.api.continuous.ContinuousQueryListener)",
            "org.infinispan.client.hotrod.event.ContinuousQueryImpl:void removeAllListeners()",
            "org.infinispan.client.hotrod.near.NearCacheService:void stop(org.infinispan.client.hotrod.RemoteCache)"
        ]
    },
    "org.infinispan.client.hotrod.impl.operations.ParallelHotRodOperation:java.lang.Object executeSequential(org.infinispan.client.hotrod.impl.operations.HotRodOperation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.impl.operations.ParallelHotRodOperation:java.lang.Object execute()"
        ]
    },
    "org.infinispan.client.hotrod.impl.operations.ParallelHotRodOperation:java.lang.Object lambda$executeParallel$0(org.infinispan.client.hotrod.impl.operations.HotRodOperation)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.infinispan.client.hotrod.RemoteCacheManager$stop__3:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.event.ClientListenerNotifier:void lambda$null$0(java.lang.Runnable)",
            "org.infinispan.client.hotrod.impl.protocol.TransportInputStream:void close()",
            "org.infinispan.client.hotrod.impl.protocol.TransportOutputStream:void close()"
        ]
    },
    "org.infinispan.client.hotrod.RemoteCacheManager$stop__5:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.event.ClientListenerNotifier:void lambda$null$0(java.lang.Runnable)",
            "org.infinispan.client.hotrod.impl.protocol.TransportInputStream:void close()",
            "org.infinispan.client.hotrod.impl.protocol.TransportOutputStream:void close()"
        ]
    },
    "org.infinispan.client.hotrod.event.ClientListenerNotifier$EventDispatcher:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.event.ClientListenerNotifier:void lambda$null$0(java.lang.Runnable)",
            "org.infinispan.client.hotrod.impl.protocol.TransportInputStream:void close()",
            "org.infinispan.client.hotrod.impl.protocol.TransportOutputStream:void close()"
        ]
    },
    "org.infinispan.client.hotrod.impl.operations.RetryOnFailureOperation:java.lang.Object execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.event.ClientListenerNotifier:void failoverClientListener(org.infinispan.commons.marshall.WrappedByteArray)",
            "org.infinispan.client.hotrod.impl.RemoteCacheImpl:boolean removeWithVersion(java.lang.Object,long)",
            "org.infinispan.client.hotrod.impl.RemoteCacheImpl:boolean replaceWithVersion(java.lang.Object,java.lang.Object,long,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)",
            "org.infinispan.client.hotrod.impl.RemoteCacheImpl:org.infinispan.client.hotrod.VersionedValue getVersioned(java.lang.Object)",
            "org.infinispan.client.hotrod.impl.RemoteCacheImpl:org.infinispan.client.hotrod.MetadataValue getWithMetadata(java.lang.Object)",
            "org.infinispan.client.hotrod.impl.RemoteCacheImpl:int size()",
            "org.infinispan.client.hotrod.impl.RemoteCacheImpl:org.infinispan.client.hotrod.ServerStatistics stats()",
            "org.infinispan.client.hotrod.impl.RemoteCacheImpl:java.lang.Object put(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)",
            "org.infinispan.client.hotrod.impl.RemoteCacheImpl:java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)",
            "org.infinispan.client.hotrod.impl.RemoteCacheImpl:java.lang.Object replace(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)",
            "org.infinispan.client.hotrod.impl.RemoteCacheImpl:boolean containsKey(java.lang.Object)",
            "org.infinispan.client.hotrod.impl.RemoteCacheImpl:java.lang.Object get(java.lang.Object)",
            "org.infinispan.client.hotrod.impl.RemoteCacheImpl:java.util.Map getBulk(int)",
            "org.infinispan.client.hotrod.impl.RemoteCacheImpl:java.lang.Object remove(java.lang.Object)",
            "org.infinispan.client.hotrod.impl.RemoteCacheImpl:void clear()",
            "org.infinispan.client.hotrod.impl.RemoteCacheImpl:void addClientListener(java.lang.Object)",
            "org.infinispan.client.hotrod.impl.RemoteCacheImpl:void addClientListener(java.lang.Object,java.lang.Object[],java.lang.Object[])",
            "org.infinispan.client.hotrod.impl.RemoteCacheImpl:org.infinispan.client.hotrod.impl.operations.PingOperation$PingResult ping()",
            "org.infinispan.client.hotrod.impl.RemoteCacheImpl:java.util.Set keySet()",
            "org.infinispan.client.hotrod.impl.RemoteCacheImpl:java.lang.Object execute(java.lang.String,java.util.Map)",
            "org.infinispan.client.hotrod.impl.RemoteCacheManagerAdminImpl:void createCache(java.lang.String,java.lang.String,java.util.EnumSet)",
            "org.infinispan.client.hotrod.impl.RemoteCacheManagerAdminImpl:void removeCache(java.lang.String)",
            "org.infinispan.client.hotrod.impl.RemoteCacheManagerAdminImpl:void reindexCache(java.lang.String)",
            "org.infinispan.client.hotrod.impl.StreamingRemoteCacheImpl:java.io.InputStream get(java.lang.Object)",
            "org.infinispan.client.hotrod.impl.StreamingRemoteCacheImpl:java.io.OutputStream put(java.lang.Object,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)",
            "org.infinispan.client.hotrod.impl.StreamingRemoteCacheImpl:java.io.OutputStream putIfAbsent(java.lang.Object,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)",
            "org.infinispan.client.hotrod.impl.StreamingRemoteCacheImpl:java.io.OutputStream replaceWithVersion(java.lang.Object,long,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)",
            "org.infinispan.client.hotrod.impl.iteration.RemoteCloseableIterator:org.infinispan.client.hotrod.impl.operations.IterationStartResponse startInternal(java.util.Set)",
            "org.infinispan.client.hotrod.impl.operations.ParallelHotRodOperation:java.lang.Object executeSequential(org.infinispan.client.hotrod.impl.operations.HotRodOperation)",
            "org.infinispan.client.hotrod.impl.operations.ParallelHotRodOperation:java.lang.Object lambda$executeParallel$0(org.infinispan.client.hotrod.impl.operations.HotRodOperation)",
            "org.infinispan.client.hotrod.impl.query.RemoteQuery:void executeQuery()",
            "org.infinispan.client.hotrod.impl.transport.tcp.TcpTransportFactory:void reconnectListenersIfNeeded()"
        ]
    },
    "org.infinispan.client.hotrod.event.ContinuousQueryImpl:void removeContinuousQueryListener(org.infinispan.query.api.continuous.ContinuousQueryListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.infinispan.client.hotrod.event.ContinuousQueryImpl:void removeAllListeners()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.infinispan.client.hotrod.near.NearCacheService:void stop(org.infinispan.client.hotrod.RemoteCache)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.impl.InvalidatedNearRemoteCache:void stop()"
        ]
    },
    "org.infinispan.client.hotrod.impl.operations.ParallelHotRodOperation:java.lang.Object execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.impl.RemoteCacheImpl:void putAll(java.util.Map,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)",
            "org.infinispan.client.hotrod.impl.RemoteCacheImpl:java.util.Map getAll(java.util.Set)",
            "org.infinispan.client.hotrod.impl.operations.ParallelHotRodOperation:java.lang.Object executeSequential(org.infinispan.client.hotrod.impl.operations.HotRodOperation)",
            "org.infinispan.client.hotrod.impl.operations.ParallelHotRodOperation:java.lang.Object lambda$executeParallel$0(org.infinispan.client.hotrod.impl.operations.HotRodOperation)"
        ]
    },
    "org.infinispan.client.hotrod.impl.RemoteCacheImpl:boolean removeWithVersion(java.lang.Object,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.impl.InvalidatedNearRemoteCache:boolean removeWithVersion(java.lang.Object,long)",
            "org.infinispan.client.hotrod.impl.RemoteCacheImpl:java.lang.Boolean lambda$removeWithVersionAsync$0(java.lang.Object,long)"
        ]
    },
    "org.infinispan.client.hotrod.impl.RemoteCacheImpl:boolean replaceWithVersion(java.lang.Object,java.lang.Object,long,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.impl.InvalidatedNearRemoteCache:boolean replaceWithVersion(java.lang.Object,java.lang.Object,long,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)",
            "org.infinispan.client.hotrod.impl.RemoteCacheImpl:boolean replaceWithVersion(java.lang.Object,java.lang.Object,long,int,int)"
        ]
    },
    "org.infinispan.client.hotrod.impl.RemoteCacheImpl:org.infinispan.client.hotrod.VersionedValue getVersioned(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.impl.InvalidatedNearRemoteCache:org.infinispan.client.hotrod.VersionedValue getVersioned(java.lang.Object)"
        ]
    },
    "org.infinispan.client.hotrod.impl.RemoteCacheImpl:org.infinispan.client.hotrod.MetadataValue getWithMetadata(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.impl.RemoteCacheImpl:org.infinispan.client.hotrod.VersionedValue getVersioned(java.lang.Object)"
        ]
    },
    "org.infinispan.client.hotrod.impl.RemoteCacheImpl:int size()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.impl.RemoteCacheImpl:boolean isEmpty()"
        ]
    },
    "org.infinispan.client.hotrod.impl.RemoteCacheImpl:org.infinispan.client.hotrod.ServerStatistics stats()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.infinispan.client.hotrod.impl.RemoteCacheImpl:java.lang.Object put(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.impl.InvalidatedNearRemoteCache:java.lang.Object put(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)",
            "org.infinispan.client.hotrod.impl.RemoteCacheImpl:void set(java.lang.Object,java.lang.Object)",
            "org.infinispan.client.hotrod.impl.RemoteCacheImpl:java.lang.Object lambda$putAsync$3(int,java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)",
            "org.infinispan.client.hotrod.impl.RemoteCacheSupport:java.lang.Object put(java.lang.Object,java.lang.Object)",
            "org.infinispan.client.hotrod.impl.RemoteCacheSupport:java.lang.Object put(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.infinispan.client.hotrod.impl.RemoteCacheImpl:java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.impl.RemoteCacheImpl:java.lang.Object lambda$putIfAbsentAsync$4(int,java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)",
            "org.infinispan.client.hotrod.impl.RemoteCacheSupport:java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)",
            "org.infinispan.client.hotrod.impl.RemoteCacheSupport:java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.infinispan.client.hotrod.impl.RemoteCacheImpl:java.lang.Object replace(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.impl.InvalidatedNearRemoteCache:java.lang.Object replace(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)",
            "org.infinispan.client.hotrod.impl.RemoteCacheImpl:java.lang.Object lambda$replaceAsync$6(int,java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)",
            "org.infinispan.client.hotrod.impl.RemoteCacheSupport:java.lang.Object replace(java.lang.Object,java.lang.Object)",
            "org.infinispan.client.hotrod.impl.RemoteCacheSupport:java.lang.Object replace(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.infinispan.client.hotrod.impl.RemoteCacheImpl:boolean containsKey(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.infinispan.client.hotrod.impl.RemoteCacheImpl:java.lang.Object get(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.impl.RemoteCacheImpl:java.lang.Object lambda$getAsync$7(java.lang.Object)"
        ]
    },
    "org.infinispan.client.hotrod.impl.RemoteCacheImpl:java.util.Map getBulk(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.impl.RemoteCacheImpl:java.util.Map getBulk()"
        ]
    },
    "org.infinispan.client.hotrod.impl.RemoteCacheImpl:java.lang.Object remove(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.impl.InvalidatedNearRemoteCache:java.lang.Object remove(java.lang.Object)",
            "org.infinispan.client.hotrod.impl.RemoteCacheImpl:java.lang.Object lambda$removeAsync$5(int,java.lang.Object)"
        ]
    },
    "org.infinispan.client.hotrod.impl.RemoteCacheImpl:void clear()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.impl.InvalidatedNearRemoteCache:void clear()",
            "org.infinispan.client.hotrod.impl.RemoteCacheImpl$clear__10:void run()"
        ]
    },
    "org.infinispan.client.hotrod.impl.RemoteCacheImpl:void addClientListener(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.near.NearCacheService:void start(org.infinispan.client.hotrod.RemoteCache)"
        ]
    },
    "org.infinispan.client.hotrod.impl.RemoteCacheImpl:void addClientListener(java.lang.Object,java.lang.Object[],java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.event.ClientEvents:void addClientQueryListener(org.infinispan.client.hotrod.RemoteCache,java.lang.Object,org.infinispan.query.dsl.Query)",
            "org.infinispan.client.hotrod.event.ContinuousQueryImpl:void addContinuousQueryListener(java.lang.String,java.util.Map,org.infinispan.query.api.continuous.ContinuousQueryListener)"
        ]
    },
    "org.infinispan.client.hotrod.impl.RemoteCacheImpl:org.infinispan.client.hotrod.impl.operations.PingOperation$PingResult ping()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.impl.RemoteCacheImpl:org.infinispan.client.hotrod.impl.operations.PingOperation$PingResult resolveCompatibility()"
        ]
    },
    "org.infinispan.client.hotrod.impl.RemoteCacheImpl:java.util.Set keySet()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.infinispan.client.hotrod.impl.RemoteCacheImpl:java.lang.Object execute(java.lang.String,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.infinispan.client.hotrod.impl.RemoteCacheManagerAdminImpl:void createCache(java.lang.String,java.lang.String,java.util.EnumSet)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.impl.RemoteCacheManagerAdminImpl:void createCache(java.lang.String,java.lang.String)"
        ]
    },
    "org.infinispan.client.hotrod.impl.RemoteCacheManagerAdminImpl:void removeCache(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.infinispan.client.hotrod.impl.RemoteCacheManagerAdminImpl:void reindexCache(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.infinispan.client.hotrod.impl.StreamingRemoteCacheImpl:java.io.InputStream get(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.infinispan.client.hotrod.impl.StreamingRemoteCacheImpl:java.io.OutputStream put(java.lang.Object,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.impl.StreamingRemoteCacheImpl:java.io.OutputStream put(java.lang.Object)",
            "org.infinispan.client.hotrod.impl.StreamingRemoteCacheImpl:java.io.OutputStream put(java.lang.Object,long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.infinispan.client.hotrod.impl.StreamingRemoteCacheImpl:java.io.OutputStream putIfAbsent(java.lang.Object,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.impl.StreamingRemoteCacheImpl:java.io.OutputStream putIfAbsent(java.lang.Object)",
            "org.infinispan.client.hotrod.impl.StreamingRemoteCacheImpl:java.io.OutputStream putIfAbsent(java.lang.Object,long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.infinispan.client.hotrod.impl.StreamingRemoteCacheImpl:java.io.OutputStream replaceWithVersion(java.lang.Object,long,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.impl.StreamingRemoteCacheImpl:java.io.OutputStream replaceWithVersion(java.lang.Object,long)",
            "org.infinispan.client.hotrod.impl.StreamingRemoteCacheImpl:java.io.OutputStream replaceWithVersion(java.lang.Object,long,long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.infinispan.client.hotrod.impl.iteration.RemoteCloseableIterator:org.infinispan.client.hotrod.impl.operations.IterationStartResponse startInternal(java.util.Set)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.impl.iteration.RemoteCloseableIterator:void fetch()",
            "org.infinispan.client.hotrod.impl.iteration.RemoteCloseableIterator:void start()"
        ]
    },
    "org.infinispan.client.hotrod.impl.query.RemoteQuery:void executeQuery()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.impl.query.RemoteQuery:java.util.List list()",
            "org.infinispan.client.hotrod.impl.query.RemoteQuery:int getResultSize()"
        ]
    },
    "org.infinispan.client.hotrod.impl.transport.tcp.TcpTransportFactory:void reconnectListenersIfNeeded()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.impl.transport.tcp.TcpTransportFactory:org.infinispan.client.hotrod.impl.transport.Transport borrowTransportFromPool(java.net.SocketAddress)"
        ]
    },
    "org.infinispan.client.hotrod.impl.InvalidatedNearRemoteCache:void stop()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.infinispan.client.hotrod.impl.RemoteCacheImpl:void putAll(java.util.Map,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.impl.InvalidatedNearRemoteCache:void putAll(java.util.Map,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)",
            "org.infinispan.client.hotrod.impl.RemoteCacheImpl:java.lang.Void lambda$putAllAsync$2(java.util.Map,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)",
            "org.infinispan.client.hotrod.impl.RemoteCacheSupport:void putAll(java.util.Map,long,java.util.concurrent.TimeUnit)",
            "org.infinispan.client.hotrod.impl.RemoteCacheSupport:void putAll(java.util.Map)"
        ]
    },
    "org.infinispan.client.hotrod.impl.RemoteCacheImpl:java.util.Map getAll(java.util.Set)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.infinispan.client.hotrod.impl.InvalidatedNearRemoteCache:boolean removeWithVersion(java.lang.Object,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.impl.RemoteCacheImpl:java.lang.Boolean lambda$removeWithVersionAsync$0(java.lang.Object,long)"
        ]
    },
    "org.infinispan.client.hotrod.impl.RemoteCacheImpl:java.lang.Boolean lambda$removeWithVersionAsync$0(java.lang.Object,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.infinispan.client.hotrod.impl.InvalidatedNearRemoteCache:boolean replaceWithVersion(java.lang.Object,java.lang.Object,long,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.impl.RemoteCacheImpl:boolean replaceWithVersion(java.lang.Object,java.lang.Object,long,int,int)"
        ]
    },
    "org.infinispan.client.hotrod.impl.RemoteCacheImpl:boolean replaceWithVersion(java.lang.Object,java.lang.Object,long,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.impl.RemoteCacheImpl:java.lang.Boolean lambda$replaceWithVersionAsync$1(java.lang.Object,java.lang.Object,long,int,int)",
            "org.infinispan.client.hotrod.impl.RemoteCacheSupport:boolean replaceWithVersion(java.lang.Object,java.lang.Object,long,int)"
        ]
    },
    "org.infinispan.client.hotrod.impl.InvalidatedNearRemoteCache:org.infinispan.client.hotrod.VersionedValue getVersioned(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.impl.InvalidatedNearRemoteCache:java.lang.Object get(java.lang.Object)"
        ]
    },
    "org.infinispan.client.hotrod.impl.RemoteCacheImpl:boolean isEmpty()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.infinispan.client.hotrod.impl.InvalidatedNearRemoteCache:java.lang.Object put(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.impl.RemoteCacheImpl:void set(java.lang.Object,java.lang.Object)",
            "org.infinispan.client.hotrod.impl.RemoteCacheImpl:java.lang.Object lambda$putAsync$3(int,java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)",
            "org.infinispan.client.hotrod.impl.RemoteCacheSupport:java.lang.Object put(java.lang.Object,java.lang.Object)",
            "org.infinispan.client.hotrod.impl.RemoteCacheSupport:java.lang.Object put(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.infinispan.client.hotrod.impl.RemoteCacheImpl:void set(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.infinispan.client.hotrod.impl.RemoteCacheImpl:java.lang.Object lambda$putAsync$3(int,java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.infinispan.client.hotrod.impl.RemoteCacheSupport:java.lang.Object put(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.infinispan.client.hotrod.impl.RemoteCacheSupport:java.lang.Object put(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.infinispan.client.hotrod.impl.RemoteCacheImpl:java.lang.Object lambda$putIfAbsentAsync$4(int,java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.infinispan.client.hotrod.impl.RemoteCacheSupport:java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.infinispan.client.hotrod.impl.RemoteCacheSupport:java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.infinispan.client.hotrod.impl.InvalidatedNearRemoteCache:java.lang.Object replace(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.impl.RemoteCacheImpl:java.lang.Object lambda$replaceAsync$6(int,java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)",
            "org.infinispan.client.hotrod.impl.RemoteCacheSupport:java.lang.Object replace(java.lang.Object,java.lang.Object)",
            "org.infinispan.client.hotrod.impl.RemoteCacheSupport:java.lang.Object replace(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.infinispan.client.hotrod.impl.RemoteCacheImpl:java.lang.Object lambda$replaceAsync$6(int,java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.infinispan.client.hotrod.impl.RemoteCacheSupport:java.lang.Object replace(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.infinispan.client.hotrod.impl.RemoteCacheSupport:java.lang.Object replace(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.infinispan.client.hotrod.impl.RemoteCacheImpl:java.lang.Object lambda$getAsync$7(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.infinispan.client.hotrod.impl.RemoteCacheImpl:java.util.Map getBulk()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.infinispan.client.hotrod.impl.InvalidatedNearRemoteCache:java.lang.Object remove(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.impl.RemoteCacheImpl:java.lang.Object lambda$removeAsync$5(int,java.lang.Object)"
        ]
    },
    "org.infinispan.client.hotrod.impl.RemoteCacheImpl:java.lang.Object lambda$removeAsync$5(int,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.infinispan.client.hotrod.impl.InvalidatedNearRemoteCache:void clear()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.impl.RemoteCacheImpl$clear__10:void run()"
        ]
    },
    "org.infinispan.client.hotrod.impl.RemoteCacheImpl$clear__10:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.event.ClientListenerNotifier:void lambda$null$0(java.lang.Runnable)",
            "org.infinispan.client.hotrod.impl.protocol.TransportInputStream:void close()",
            "org.infinispan.client.hotrod.impl.protocol.TransportOutputStream:void close()"
        ]
    },
    "org.infinispan.client.hotrod.near.NearCacheService:void start(org.infinispan.client.hotrod.RemoteCache)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.impl.InvalidatedNearRemoteCache:void start()"
        ]
    },
    "org.infinispan.client.hotrod.event.ClientEvents:void addClientQueryListener(org.infinispan.client.hotrod.RemoteCache,java.lang.Object,org.infinispan.query.dsl.Query)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.infinispan.client.hotrod.event.ContinuousQueryImpl:void addContinuousQueryListener(java.lang.String,java.util.Map,org.infinispan.query.api.continuous.ContinuousQueryListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.event.ContinuousQueryImpl:void addContinuousQueryListener(java.lang.String,org.infinispan.query.api.continuous.ContinuousQueryListener)",
            "org.infinispan.client.hotrod.event.ContinuousQueryImpl:void addContinuousQueryListener(org.infinispan.query.dsl.Query,org.infinispan.query.api.continuous.ContinuousQueryListener)"
        ]
    },
    "org.infinispan.client.hotrod.impl.RemoteCacheImpl:org.infinispan.client.hotrod.impl.operations.PingOperation$PingResult resolveCompatibility()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.RemoteCacheManager:org.infinispan.client.hotrod.RemoteCache createRemoteCache(java.lang.String,java.lang.Boolean)"
        ]
    },
    "org.infinispan.client.hotrod.impl.RemoteCacheManagerAdminImpl:void createCache(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.infinispan.client.hotrod.impl.StreamingRemoteCacheImpl:java.io.OutputStream put(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.infinispan.client.hotrod.impl.StreamingRemoteCacheImpl:java.io.OutputStream put(java.lang.Object,long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.infinispan.client.hotrod.impl.StreamingRemoteCacheImpl:java.io.OutputStream putIfAbsent(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.infinispan.client.hotrod.impl.StreamingRemoteCacheImpl:java.io.OutputStream putIfAbsent(java.lang.Object,long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.infinispan.client.hotrod.impl.StreamingRemoteCacheImpl:java.io.OutputStream replaceWithVersion(java.lang.Object,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.infinispan.client.hotrod.impl.StreamingRemoteCacheImpl:java.io.OutputStream replaceWithVersion(java.lang.Object,long,long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.infinispan.client.hotrod.impl.iteration.RemoteCloseableIterator:void fetch()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.impl.iteration.RemoteCloseableIterator:boolean hasNext()",
            "org.infinispan.client.hotrod.impl.iteration.RemoteCloseableIterator:void fetch()"
        ]
    },
    "org.infinispan.client.hotrod.impl.iteration.RemoteCloseableIterator:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.impl.RemoteCacheImpl:org.infinispan.commons.util.CloseableIterator retrieveEntries(java.lang.String,java.lang.Object[],java.util.Set,int)",
            "org.infinispan.client.hotrod.impl.RemoteCacheImpl:org.infinispan.commons.util.CloseableIterator retrieveEntriesWithMetadata(java.util.Set,int)"
        ]
    },
    "org.infinispan.client.hotrod.impl.query.RemoteQuery:java.util.List list()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.infinispan.client.hotrod.impl.query.RemoteQuery:int getResultSize()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.infinispan.client.hotrod.impl.transport.tcp.TcpTransportFactory:org.infinispan.client.hotrod.impl.transport.Transport borrowTransportFromPool(java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.impl.transport.tcp.TcpTransportFactory:org.infinispan.client.hotrod.impl.transport.Transport getTransport(java.util.Set,byte[])",
            "org.infinispan.client.hotrod.impl.transport.tcp.TcpTransportFactory:org.infinispan.client.hotrod.impl.transport.Transport getAddressTransport(java.net.SocketAddress)",
            "org.infinispan.client.hotrod.impl.transport.tcp.TcpTransportFactory:org.infinispan.client.hotrod.impl.transport.Transport getTransport(java.lang.Object,java.util.Set,byte[])"
        ]
    },
    "org.infinispan.client.hotrod.impl.InvalidatedNearRemoteCache:void putAll(java.util.Map,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.impl.RemoteCacheImpl:java.lang.Void lambda$putAllAsync$2(java.util.Map,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)",
            "org.infinispan.client.hotrod.impl.RemoteCacheSupport:void putAll(java.util.Map,long,java.util.concurrent.TimeUnit)",
            "org.infinispan.client.hotrod.impl.RemoteCacheSupport:void putAll(java.util.Map)"
        ]
    },
    "org.infinispan.client.hotrod.impl.RemoteCacheImpl:java.lang.Void lambda$putAllAsync$2(java.util.Map,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.infinispan.client.hotrod.impl.RemoteCacheSupport:void putAll(java.util.Map,long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.infinispan.client.hotrod.impl.RemoteCacheSupport:void putAll(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.infinispan.client.hotrod.impl.RemoteCacheImpl:java.lang.Boolean lambda$replaceWithVersionAsync$1(java.lang.Object,java.lang.Object,long,int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.infinispan.client.hotrod.impl.RemoteCacheSupport:boolean replaceWithVersion(java.lang.Object,java.lang.Object,long,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.impl.RemoteCacheSupport:boolean replaceWithVersion(java.lang.Object,java.lang.Object,long)"
        ]
    },
    "org.infinispan.client.hotrod.impl.InvalidatedNearRemoteCache:java.lang.Object get(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.impl.RemoteCacheImpl:java.lang.Object lambda$getAsync$7(java.lang.Object)"
        ]
    },
    "org.infinispan.client.hotrod.impl.InvalidatedNearRemoteCache:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.RemoteCacheManager:org.infinispan.client.hotrod.RemoteCache createRemoteCache(java.lang.String,java.lang.Boolean)"
        ]
    },
    "org.infinispan.client.hotrod.event.ContinuousQueryImpl:void addContinuousQueryListener(java.lang.String,org.infinispan.query.api.continuous.ContinuousQueryListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.infinispan.client.hotrod.event.ContinuousQueryImpl:void addContinuousQueryListener(org.infinispan.query.dsl.Query,org.infinispan.query.api.continuous.ContinuousQueryListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.infinispan.client.hotrod.impl.iteration.RemoteCloseableIterator:boolean hasNext()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.impl.iteration.RemoteCloseableIterator:java.util.Map$Entry next()"
        ]
    },
    "org.infinispan.client.hotrod.impl.RemoteCacheImpl:org.infinispan.commons.util.CloseableIterator retrieveEntries(java.lang.String,java.lang.Object[],java.util.Set,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.impl.RemoteCacheImpl:org.infinispan.commons.util.CloseableIterator retrieveEntries(java.lang.String,java.util.Set,int)",
            "org.infinispan.client.hotrod.impl.RemoteCacheImpl:org.infinispan.commons.util.CloseableIterator retrieveEntriesByQuery(org.infinispan.query.dsl.Query,java.util.Set,int)"
        ]
    },
    "org.infinispan.client.hotrod.impl.RemoteCacheImpl:org.infinispan.commons.util.CloseableIterator retrieveEntriesWithMetadata(java.util.Set,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.infinispan.client.hotrod.impl.transport.tcp.TcpTransportFactory:org.infinispan.client.hotrod.impl.transport.Transport getTransport(java.util.Set,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.impl.operations.AbstractKeyOperation:org.infinispan.client.hotrod.impl.transport.Transport getTransport(int,java.util.Set)",
            "org.infinispan.client.hotrod.impl.operations.AddClientListenerOperation:org.infinispan.client.hotrod.impl.transport.Transport getTransport(int,java.util.Set)",
            "org.infinispan.client.hotrod.impl.operations.BulkGetKeysOperation:org.infinispan.client.hotrod.impl.transport.Transport getTransport(int,java.util.Set)",
            "org.infinispan.client.hotrod.impl.operations.BulkGetOperation:org.infinispan.client.hotrod.impl.transport.Transport getTransport(int,java.util.Set)",
            "org.infinispan.client.hotrod.impl.operations.ClearOperation:org.infinispan.client.hotrod.impl.transport.Transport getTransport(int,java.util.Set)",
            "org.infinispan.client.hotrod.impl.operations.ExecuteOperation:org.infinispan.client.hotrod.impl.transport.Transport getTransport(int,java.util.Set)",
            "org.infinispan.client.hotrod.impl.operations.FaultTolerantPingOperation:org.infinispan.client.hotrod.impl.transport.Transport getTransport(int,java.util.Set)",
            "org.infinispan.client.hotrod.impl.operations.IterationStartOperation:org.infinispan.client.hotrod.impl.transport.Transport getTransport(int,java.util.Set)",
            "org.infinispan.client.hotrod.impl.operations.QueryOperation:org.infinispan.client.hotrod.impl.transport.Transport getTransport(int,java.util.Set)",
            "org.infinispan.client.hotrod.impl.operations.SizeOperation:org.infinispan.client.hotrod.impl.transport.Transport getTransport(int,java.util.Set)",
            "org.infinispan.client.hotrod.impl.operations.StatsOperation:org.infinispan.client.hotrod.impl.transport.Transport getTransport(int,java.util.Set)"
        ]
    },
    "org.infinispan.client.hotrod.impl.transport.tcp.TcpTransportFactory:org.infinispan.client.hotrod.impl.transport.Transport getAddressTransport(java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.impl.operations.RemoveClientListenerOperation:java.lang.Object execute()"
        ]
    },
    "org.infinispan.client.hotrod.impl.transport.tcp.TcpTransportFactory:org.infinispan.client.hotrod.impl.transport.Transport getTransport(java.lang.Object,java.util.Set,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.impl.operations.AbstractKeyOperation:org.infinispan.client.hotrod.impl.transport.Transport getTransport(int,java.util.Set)",
            "org.infinispan.client.hotrod.impl.operations.GetAllOperation:org.infinispan.client.hotrod.impl.transport.Transport getTransport(int,java.util.Set)",
            "org.infinispan.client.hotrod.impl.operations.PutAllOperation:org.infinispan.client.hotrod.impl.transport.Transport getTransport(int,java.util.Set)"
        ]
    },
    "org.infinispan.client.hotrod.impl.RemoteCacheSupport:boolean replaceWithVersion(java.lang.Object,java.lang.Object,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.infinispan.client.hotrod.impl.iteration.RemoteCloseableIterator:java.util.Map$Entry next()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.impl.iteration.RemoteCloseableIterator:java.lang.Object next()"
        ]
    },
    "org.infinispan.client.hotrod.impl.RemoteCacheImpl:org.infinispan.commons.util.CloseableIterator retrieveEntries(java.lang.String,java.util.Set,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.impl.RemoteCacheImpl:org.infinispan.commons.util.CloseableIterator retrieveEntries(java.lang.String,int)"
        ]
    },
    "org.infinispan.client.hotrod.impl.RemoteCacheImpl:org.infinispan.commons.util.CloseableIterator retrieveEntriesByQuery(org.infinispan.query.dsl.Query,java.util.Set,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.infinispan.client.hotrod.impl.operations.AbstractKeyOperation:org.infinispan.client.hotrod.impl.transport.Transport getTransport(int,java.util.Set)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.impl.operations.RetryOnFailureOperation:java.lang.Object execute()"
        ]
    },
    "org.infinispan.client.hotrod.impl.operations.AddClientListenerOperation:org.infinispan.client.hotrod.impl.transport.Transport getTransport(int,java.util.Set)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.impl.operations.RetryOnFailureOperation:java.lang.Object execute()"
        ]
    },
    "org.infinispan.client.hotrod.impl.operations.BulkGetKeysOperation:org.infinispan.client.hotrod.impl.transport.Transport getTransport(int,java.util.Set)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.impl.operations.RetryOnFailureOperation:java.lang.Object execute()"
        ]
    },
    "org.infinispan.client.hotrod.impl.operations.BulkGetOperation:org.infinispan.client.hotrod.impl.transport.Transport getTransport(int,java.util.Set)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.impl.operations.RetryOnFailureOperation:java.lang.Object execute()"
        ]
    },
    "org.infinispan.client.hotrod.impl.operations.ClearOperation:org.infinispan.client.hotrod.impl.transport.Transport getTransport(int,java.util.Set)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.impl.operations.RetryOnFailureOperation:java.lang.Object execute()"
        ]
    },
    "org.infinispan.client.hotrod.impl.operations.ExecuteOperation:org.infinispan.client.hotrod.impl.transport.Transport getTransport(int,java.util.Set)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.impl.operations.RetryOnFailureOperation:java.lang.Object execute()"
        ]
    },
    "org.infinispan.client.hotrod.impl.operations.FaultTolerantPingOperation:org.infinispan.client.hotrod.impl.transport.Transport getTransport(int,java.util.Set)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.impl.operations.RetryOnFailureOperation:java.lang.Object execute()"
        ]
    },
    "org.infinispan.client.hotrod.impl.operations.IterationStartOperation:org.infinispan.client.hotrod.impl.transport.Transport getTransport(int,java.util.Set)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.impl.operations.RetryOnFailureOperation:java.lang.Object execute()"
        ]
    },
    "org.infinispan.client.hotrod.impl.operations.QueryOperation:org.infinispan.client.hotrod.impl.transport.Transport getTransport(int,java.util.Set)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.impl.operations.RetryOnFailureOperation:java.lang.Object execute()"
        ]
    },
    "org.infinispan.client.hotrod.impl.operations.SizeOperation:org.infinispan.client.hotrod.impl.transport.Transport getTransport(int,java.util.Set)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.impl.operations.RetryOnFailureOperation:java.lang.Object execute()"
        ]
    },
    "org.infinispan.client.hotrod.impl.operations.StatsOperation:org.infinispan.client.hotrod.impl.transport.Transport getTransport(int,java.util.Set)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.impl.operations.RetryOnFailureOperation:java.lang.Object execute()"
        ]
    },
    "org.infinispan.client.hotrod.impl.operations.GetAllOperation:org.infinispan.client.hotrod.impl.transport.Transport getTransport(int,java.util.Set)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.impl.operations.RetryOnFailureOperation:java.lang.Object execute()"
        ]
    },
    "org.infinispan.client.hotrod.impl.operations.PutAllOperation:org.infinispan.client.hotrod.impl.transport.Transport getTransport(int,java.util.Set)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.infinispan.client.hotrod.impl.operations.RetryOnFailureOperation:java.lang.Object execute()"
        ]
    },
    "org.infinispan.client.hotrod.impl.iteration.RemoteCloseableIterator:java.lang.Object next()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.infinispan.client.hotrod.impl.RemoteCacheImpl:org.infinispan.commons.util.CloseableIterator retrieveEntries(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": []
    }
}