{
    "org.apache.nifi.persistence.StandardSnippetDeserializer:org.apache.nifi.controller.StandardSnippet deserialize(java.io.InputStream)": {
        "isVulRoot": true,
        "vulCaller": [
            "org.apache.nifi.controller.SnippetManager:java.util.List parseBytes(byte[])"
        ]
    },
    "org.apache.nifi.controller.TemplateUtils:boolean isMoreData(java.io.InputStream)": {
        "isVulRoot": true,
        "vulCaller": [
            "org.apache.nifi.controller.TemplateUtils:java.util.List parseTemplateStream(byte[])"
        ]
    },
    "org.apache.nifi.controller.TemplateUtils:org.apache.nifi.web.api.dto.TemplateDTO parseDto(org.w3c.dom.Element)": {
        "isVulRoot": true,
        "vulCaller": [
            "org.apache.nifi.controller.StandardFlowSynchronizer:void addLocalTemplates(org.w3c.dom.Element,org.apache.nifi.groups.ProcessGroup,org.apache.nifi.controller.serialization.FlowEncodingVersion)",
            "org.apache.nifi.controller.StandardFlowSynchronizer:org.apache.nifi.groups.ProcessGroup updateProcessGroup(org.apache.nifi.controller.FlowController,org.apache.nifi.groups.ProcessGroup,org.w3c.dom.Element,org.apache.nifi.encrypt.StringEncryptor,org.apache.nifi.controller.serialization.FlowEncodingVersion)",
            "org.apache.nifi.controller.StandardFlowSynchronizer:org.apache.nifi.groups.ProcessGroup addProcessGroup(org.apache.nifi.controller.FlowController,org.apache.nifi.groups.ProcessGroup,org.w3c.dom.Element,org.apache.nifi.encrypt.StringEncryptor,org.apache.nifi.controller.serialization.FlowEncodingVersion)"
        ]
    },
    "org.apache.nifi.cluster.BulletinsPayload:org.apache.nifi.cluster.BulletinsPayload unmarshal(java.io.InputStream)": {
        "isVulRoot": true,
        "vulCaller": []
    },
    "org.apache.nifi.persistence.TemplateDeserializer:org.apache.nifi.web.api.dto.TemplateDTO deserialize(java.io.InputStream)": {
        "isVulRoot": true,
        "vulCaller": [
            "org.apache.nifi.controller.StandardFlowService:java.util.List loadTemplates()",
            "org.apache.nifi.controller.TemplateUtils:org.apache.nifi.web.api.dto.TemplateDTO parseDto(byte[])",
            "org.apache.nifi.controller.TemplateUtils:java.util.List parseTemplateStream(byte[])"
        ]
    },
    "org.apache.nifi.controller.SnippetManager:java.util.List parseBytes(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.nifi.controller.StandardFlowService:void loadSnippets(byte[])",
            "org.apache.nifi.controller.StandardFlowSynchronizer:void sync(org.apache.nifi.controller.FlowController,org.apache.nifi.cluster.protocol.DataFlow,org.apache.nifi.encrypt.StringEncryptor)"
        ]
    },
    "org.apache.nifi.controller.TemplateUtils:java.util.List parseTemplateStream(byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.nifi.controller.StandardFlowSynchronizer:void addLocalTemplates(org.w3c.dom.Element,org.apache.nifi.groups.ProcessGroup,org.apache.nifi.controller.serialization.FlowEncodingVersion)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.nifi.controller.StandardFlowSynchronizer:void sync(org.apache.nifi.controller.FlowController,org.apache.nifi.cluster.protocol.DataFlow,org.apache.nifi.encrypt.StringEncryptor)",
            "org.apache.nifi.controller.StandardFlowSynchronizer:void addLocalTemplates(org.w3c.dom.Element,org.apache.nifi.groups.ProcessGroup,org.apache.nifi.controller.serialization.FlowEncodingVersion)"
        ]
    },
    "org.apache.nifi.controller.StandardFlowSynchronizer:org.apache.nifi.groups.ProcessGroup updateProcessGroup(org.apache.nifi.controller.FlowController,org.apache.nifi.groups.ProcessGroup,org.w3c.dom.Element,org.apache.nifi.encrypt.StringEncryptor,org.apache.nifi.controller.serialization.FlowEncodingVersion)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.nifi.controller.StandardFlowSynchronizer:void sync(org.apache.nifi.controller.FlowController,org.apache.nifi.cluster.protocol.DataFlow,org.apache.nifi.encrypt.StringEncryptor)",
            "org.apache.nifi.controller.StandardFlowSynchronizer:org.apache.nifi.groups.ProcessGroup updateProcessGroup(org.apache.nifi.controller.FlowController,org.apache.nifi.groups.ProcessGroup,org.w3c.dom.Element,org.apache.nifi.encrypt.StringEncryptor,org.apache.nifi.controller.serialization.FlowEncodingVersion)"
        ]
    },
    "org.apache.nifi.controller.StandardFlowSynchronizer:org.apache.nifi.groups.ProcessGroup addProcessGroup(org.apache.nifi.controller.FlowController,org.apache.nifi.groups.ProcessGroup,org.w3c.dom.Element,org.apache.nifi.encrypt.StringEncryptor,org.apache.nifi.controller.serialization.FlowEncodingVersion)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.nifi.controller.StandardFlowSynchronizer:void sync(org.apache.nifi.controller.FlowController,org.apache.nifi.cluster.protocol.DataFlow,org.apache.nifi.encrypt.StringEncryptor)",
            "org.apache.nifi.controller.StandardFlowSynchronizer:org.apache.nifi.groups.ProcessGroup addProcessGroup(org.apache.nifi.controller.FlowController,org.apache.nifi.groups.ProcessGroup,org.w3c.dom.Element,org.apache.nifi.encrypt.StringEncryptor,org.apache.nifi.controller.serialization.FlowEncodingVersion)"
        ]
    },
    "org.apache.nifi.controller.StandardFlowService:java.util.List loadTemplates()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.nifi.controller.StandardFlowService:void loadFromBytes(org.apache.nifi.cluster.protocol.DataFlow,boolean)"
        ]
    },
    "org.apache.nifi.controller.TemplateUtils:org.apache.nifi.web.api.dto.TemplateDTO parseDto(byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.nifi.controller.StandardFlowService:void loadSnippets(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.nifi.controller.StandardFlowService:void loadFromConnectionResponse(org.apache.nifi.cluster.protocol.ConnectionResponse)"
        ]
    },
    "org.apache.nifi.controller.StandardFlowSynchronizer:void sync(org.apache.nifi.controller.FlowController,org.apache.nifi.cluster.protocol.DataFlow,org.apache.nifi.encrypt.StringEncryptor)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.nifi.controller.FlowController:void synchronize(org.apache.nifi.controller.serialization.FlowSynchronizer,org.apache.nifi.cluster.protocol.DataFlow)"
        ]
    },
    "org.apache.nifi.controller.StandardFlowService:void loadFromBytes(org.apache.nifi.cluster.protocol.DataFlow,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.nifi.controller.StandardFlowService:void load(org.apache.nifi.cluster.protocol.DataFlow)",
            "org.apache.nifi.controller.StandardFlowService:void loadFromConnectionResponse(org.apache.nifi.cluster.protocol.ConnectionResponse)"
        ]
    },
    "org.apache.nifi.controller.StandardFlowService:void loadFromConnectionResponse(org.apache.nifi.cluster.protocol.ConnectionResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.nifi.controller.StandardFlowService:void load(org.apache.nifi.cluster.protocol.DataFlow)",
            "org.apache.nifi.controller.StandardFlowService:void handleReconnectionRequest(org.apache.nifi.cluster.protocol.message.ReconnectionRequestMessage)"
        ]
    },
    "org.apache.nifi.controller.FlowController:void synchronize(org.apache.nifi.controller.serialization.FlowSynchronizer,org.apache.nifi.cluster.protocol.DataFlow)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.nifi.persistence.StandardXMLFlowConfigurationDAO:void load(org.apache.nifi.controller.FlowController,org.apache.nifi.cluster.protocol.DataFlow)"
        ]
    },
    "org.apache.nifi.controller.StandardFlowService:void load(org.apache.nifi.cluster.protocol.DataFlow)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.nifi.controller.StandardFlowService:void handleReconnectionRequest(org.apache.nifi.cluster.protocol.message.ReconnectionRequestMessage)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.nifi.controller.StandardFlowService:void access$300(org.apache.nifi.controller.StandardFlowService,org.apache.nifi.cluster.protocol.message.ReconnectionRequestMessage)"
        ]
    },
    "org.apache.nifi.persistence.StandardXMLFlowConfigurationDAO:void load(org.apache.nifi.controller.FlowController,org.apache.nifi.cluster.protocol.DataFlow)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.nifi.controller.StandardFlowService:void loadFromBytes(org.apache.nifi.cluster.protocol.DataFlow,boolean)"
        ]
    },
    "org.apache.nifi.controller.StandardFlowService:void access$300(org.apache.nifi.controller.StandardFlowService,org.apache.nifi.cluster.protocol.message.ReconnectionRequestMessage)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.nifi.controller.StandardFlowService$2:void run()"
        ]
    },
    "org.apache.nifi.controller.StandardFlowService$2:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.nifi.controller.scheduling.StandardProcessScheduler$1:void run()"
        ]
    },
    "org.apache.nifi.controller.scheduling.StandardProcessScheduler$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.nifi.controller.scheduling.StandardProcessScheduler$1:void run()"
        ]
    }
}