{
    "org.opencastproject.kernel.http.impl.HttpClientImpl:org.apache.http.conn.ssl.X509HostnameVerifier createHostNameVerifier()": {
        "isVulRoot": true,
        "vulCaller": [
            "org.opencastproject.kernel.http.impl.HttpClientImpl:org.apache.http.impl.client.DefaultHttpClient makeHttpClient()"
        ]
    },
    "org.opencastproject.kernel.http.impl.HttpClientImpl:javax.net.ssl.X509TrustManager createTrustManager()": {
        "isVulRoot": true,
        "vulCaller": [
            "org.opencastproject.kernel.http.impl.HttpClientImpl:org.apache.http.impl.client.DefaultHttpClient makeHttpClient()"
        ]
    },
    "org.opencastproject.kernel.http.impl.HttpClientImpl:org.apache.http.impl.client.DefaultHttpClient makeHttpClient()": {
        "isVulRoot": true,
        "vulCaller": [
            "org.opencastproject.kernel.http.impl.HttpClientImpl:void <init>()"
        ]
    },
    "org.opencastproject.kernel.http.impl.HttpClientImpl:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.opencastproject.kernel.http.impl.HttpClientFactory:org.opencastproject.kernel.http.api.HttpClient makeHttpClient()"
        ]
    },
    "org.opencastproject.kernel.http.impl.HttpClientFactory:org.opencastproject.kernel.http.api.HttpClient makeHttpClient()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.opencastproject.kernel.security.TrustedHttpClientImpl:org.opencastproject.kernel.http.api.HttpClient makeHttpClient(int,int)"
        ]
    },
    "org.opencastproject.kernel.security.TrustedHttpClientImpl:org.opencastproject.kernel.http.api.HttpClient makeHttpClient(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.opencastproject.kernel.security.TrustedHttpClientImpl:org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest,int,int)",
            "org.opencastproject.kernel.security.TrustedHttpClientImpl:org.apache.http.HttpResponse retryAuthAndRequestAfterNonceTimeout(org.apache.http.client.methods.HttpUriRequest,org.apache.http.HttpResponse)",
            "org.opencastproject.kernel.security.TrustedHttpClientImpl:java.lang.String[] getRealmAndNonce(org.apache.http.client.methods.HttpRequestBase)"
        ]
    },
    "org.opencastproject.kernel.security.TrustedHttpClientImpl:org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.opencastproject.kernel.security.TrustedHttpClientImpl:org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)",
            "org.opencastproject.kernel.security.TrustedHttpClientImpl:java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler,int,int)"
        ]
    },
    "org.opencastproject.kernel.security.TrustedHttpClientImpl:org.apache.http.HttpResponse retryAuthAndRequestAfterNonceTimeout(org.apache.http.client.methods.HttpUriRequest,org.apache.http.HttpResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.opencastproject.kernel.security.TrustedHttpClientImpl:org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest,int,int)"
        ]
    },
    "org.opencastproject.kernel.security.TrustedHttpClientImpl:java.lang.String[] getRealmAndNonce(org.apache.http.client.methods.HttpRequestBase)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.opencastproject.kernel.security.TrustedHttpClientImpl:void manuallyHandleDigestAuthentication(org.apache.http.client.methods.HttpUriRequest,org.opencastproject.kernel.http.api.HttpClient)"
        ]
    },
    "org.opencastproject.kernel.security.TrustedHttpClientImpl:org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.opencastproject.kernel.pingback.PingBackService:java.lang.String getRuntimeInfo(java.lang.String)"
        ]
    },
    "org.opencastproject.kernel.security.TrustedHttpClientImpl:java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.opencastproject.kernel.security.TrustedHttpClientImpl:java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler)"
        ]
    },
    "org.opencastproject.kernel.security.TrustedHttpClientImpl:void manuallyHandleDigestAuthentication(org.apache.http.client.methods.HttpUriRequest,org.opencastproject.kernel.http.api.HttpClient)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.opencastproject.kernel.security.TrustedHttpClientImpl:org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest,int,int)",
            "org.opencastproject.kernel.security.TrustedHttpClientImpl:org.apache.http.HttpResponse retryAuthAndRequestAfterNonceTimeout(org.apache.http.client.methods.HttpUriRequest,org.apache.http.HttpResponse)"
        ]
    },
    "org.opencastproject.kernel.pingback.PingBackService:java.lang.String getRuntimeInfo(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.opencastproject.kernel.pingback.PingBackService:java.lang.String access$000(org.opencastproject.kernel.pingback.PingBackService,java.lang.String)"
        ]
    },
    "org.opencastproject.kernel.security.TrustedHttpClientImpl:java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.opencastproject.kernel.pingback.PingBackService:java.lang.String access$000(org.opencastproject.kernel.pingback.PingBackService,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.opencastproject.kernel.pingback.PingBackService$1:void run()"
        ]
    },
    "org.opencastproject.kernel.pingback.PingBackService$1:void run()": {
        "isVulRoot": false,
        "vulCaller": []
    }
}