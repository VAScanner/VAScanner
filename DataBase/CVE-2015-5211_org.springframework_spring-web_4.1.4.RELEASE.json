{
    "org.springframework.web.accept.PathExtensionContentNegotiationStrategy:org.springframework.http.MediaType handleNoMatch(org.springframework.web.context.request.NativeWebRequest,java.lang.String)": {
        "isVulRoot": true,
        "vulCaller": [
            "org.springframework.web.accept.ServletPathExtensionContentNegotiationStrategy:org.springframework.http.MediaType handleNoMatch(org.springframework.web.context.request.NativeWebRequest,java.lang.String)",
            "org.springframework.web.accept.AbstractMappingContentNegotiationStrategy:java.util.List resolveMediaTypes(org.springframework.web.context.request.NativeWebRequest)"
        ]
    },
    "org.springframework.web.util.UrlPathHelper:java.lang.String decodeRequestString(javax.servlet.http.HttpServletRequest,java.lang.String)": {
        "isVulRoot": true,
        "vulCaller": [
            "org.springframework.web.util.UrlPathHelper:java.lang.String getContextPath(javax.servlet.http.HttpServletRequest)",
            "org.springframework.web.util.UrlPathHelper:java.lang.String getOriginatingContextPath(javax.servlet.http.HttpServletRequest)",
            "org.springframework.web.util.UrlPathHelper:java.lang.String decodeAndCleanUriString(javax.servlet.http.HttpServletRequest,java.lang.String)"
        ]
    },
    "org.springframework.web.accept.ContentNegotiationManagerFactoryBean:void afterPropertiesSet()": {
        "isVulRoot": true,
        "vulCaller": []
    },
    "org.springframework.web.util.WebUtils:java.lang.String extractFullFilenameFromUrlPath(java.lang.String)": {
        "isVulRoot": true,
        "vulCaller": [
            "org.springframework.web.util.WebUtils:java.lang.String extractFilenameFromUrlPath(java.lang.String)",
            "org.springframework.web.accept.PathExtensionContentNegotiationStrategy:java.lang.String getMediaTypeKey(org.springframework.web.context.request.NativeWebRequest)"
        ]
    },
    "org.springframework.http.converter.json.MappingJackson2HttpMessageConverter:void writePrefix(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)": {
        "isVulRoot": true,
        "vulCaller": [
            "org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter:void writeInternal(java.lang.Object,org.springframework.http.HttpOutputMessage)"
        ]
    },
    "org.springframework.web.accept.ServletPathExtensionContentNegotiationStrategy:org.springframework.http.MediaType handleNoMatch(org.springframework.web.context.request.NativeWebRequest,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.springframework.web.accept.AbstractMappingContentNegotiationStrategy:java.util.List resolveMediaTypes(org.springframework.web.context.request.NativeWebRequest)"
        ]
    },
    "org.springframework.web.accept.AbstractMappingContentNegotiationStrategy:java.util.List resolveMediaTypes(org.springframework.web.context.request.NativeWebRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.springframework.web.accept.ContentNegotiationManager:java.util.List resolveMediaTypes(org.springframework.web.context.request.NativeWebRequest)"
        ]
    },
    "org.springframework.web.util.UrlPathHelper:java.lang.String getContextPath(javax.servlet.http.HttpServletRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.springframework.web.util.UrlPathHelper:java.lang.String getPathWithinApplication(javax.servlet.http.HttpServletRequest)"
        ]
    },
    "org.springframework.web.util.UrlPathHelper:java.lang.String getOriginatingContextPath(javax.servlet.http.HttpServletRequest)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.springframework.web.util.UrlPathHelper:java.lang.String decodeAndCleanUriString(javax.servlet.http.HttpServletRequest,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.springframework.web.util.UrlPathHelper:java.lang.String getRequestUri(javax.servlet.http.HttpServletRequest)",
            "org.springframework.web.util.UrlPathHelper:java.lang.String getOriginatingRequestUri(javax.servlet.http.HttpServletRequest)"
        ]
    },
    "org.springframework.web.util.WebUtils:java.lang.String extractFilenameFromUrlPath(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.springframework.web.accept.PathExtensionContentNegotiationStrategy:java.lang.String getMediaTypeKey(org.springframework.web.context.request.NativeWebRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.springframework.web.accept.AbstractMappingContentNegotiationStrategy:java.util.List resolveMediaTypes(org.springframework.web.context.request.NativeWebRequest)"
        ]
    },
    "org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter:void writeInternal(java.lang.Object,org.springframework.http.HttpOutputMessage)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.springframework.http.converter.AbstractHttpMessageConverter$1:void writeTo(java.io.OutputStream)",
            "org.springframework.http.converter.AbstractHttpMessageConverter:void write(java.lang.Object,org.springframework.http.MediaType,org.springframework.http.HttpOutputMessage)"
        ]
    },
    "org.springframework.web.accept.ContentNegotiationManager:java.util.List resolveMediaTypes(org.springframework.web.context.request.NativeWebRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.springframework.web.accept.ContentNegotiationManager:java.util.List resolveMediaTypes(org.springframework.web.context.request.NativeWebRequest)"
        ]
    },
    "org.springframework.web.util.UrlPathHelper:java.lang.String getPathWithinApplication(javax.servlet.http.HttpServletRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.springframework.web.util.UrlPathHelper:java.lang.String getLookupPathForRequest(javax.servlet.http.HttpServletRequest)",
            "org.springframework.web.util.UrlPathHelper:java.lang.String getPathWithinServletMapping(javax.servlet.http.HttpServletRequest)"
        ]
    },
    "org.springframework.web.util.UrlPathHelper:java.lang.String getRequestUri(javax.servlet.http.HttpServletRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.springframework.web.context.request.async.WebAsyncManager:void startAsyncProcessing(java.lang.Object[])",
            "org.springframework.web.util.UrlPathHelper:java.lang.String getPathWithinApplication(javax.servlet.http.HttpServletRequest)"
        ]
    },
    "org.springframework.web.util.UrlPathHelper:java.lang.String getOriginatingRequestUri(javax.servlet.http.HttpServletRequest)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.springframework.http.converter.AbstractHttpMessageConverter$1:void writeTo(java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.springframework.http.client.HttpComponentsStreamingClientHttpRequest$StreamingHttpEntity:void writeTo(java.io.OutputStream)"
        ]
    },
    "org.springframework.http.converter.AbstractHttpMessageConverter:void write(java.lang.Object,org.springframework.http.MediaType,org.springframework.http.HttpOutputMessage)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.springframework.http.converter.FormHttpMessageConverter:void writePart(java.lang.String,org.springframework.http.HttpEntity,java.io.OutputStream)",
            "org.springframework.web.client.RestTemplate$HttpEntityRequestCallback:void doWithRequest(org.springframework.http.client.ClientHttpRequest)"
        ]
    },
    "org.springframework.web.util.UrlPathHelper:java.lang.String getLookupPathForRequest(javax.servlet.http.HttpServletRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.springframework.web.accept.PathExtensionContentNegotiationStrategy:java.lang.String getMediaTypeKey(org.springframework.web.context.request.NativeWebRequest)"
        ]
    },
    "org.springframework.web.util.UrlPathHelper:java.lang.String getPathWithinServletMapping(javax.servlet.http.HttpServletRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.springframework.web.util.UrlPathHelper:java.lang.String getLookupPathForRequest(javax.servlet.http.HttpServletRequest)"
        ]
    },
    "org.springframework.web.context.request.async.WebAsyncManager:void startAsyncProcessing(java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.springframework.web.context.request.async.WebAsyncManager:void startCallableProcessing(org.springframework.web.context.request.async.WebAsyncTask,java.lang.Object[])",
            "org.springframework.web.context.request.async.WebAsyncManager:void startDeferredResultProcessing(org.springframework.web.context.request.async.DeferredResult,java.lang.Object[])"
        ]
    },
    "org.springframework.http.client.HttpComponentsStreamingClientHttpRequest$StreamingHttpEntity:void writeTo(java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.springframework.http.converter.FormHttpMessageConverter:void writePart(java.lang.String,org.springframework.http.HttpEntity,java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.springframework.http.converter.FormHttpMessageConverter:void writeParts(java.io.OutputStream,org.springframework.util.MultiValueMap,byte[])"
        ]
    },
    "org.springframework.web.client.RestTemplate$HttpEntityRequestCallback:void doWithRequest(org.springframework.http.client.ClientHttpRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.springframework.web.client.RestTemplate:java.lang.Object doExecute(java.net.URI,org.springframework.http.HttpMethod,org.springframework.web.client.RequestCallback,org.springframework.web.client.ResponseExtractor)",
            "org.springframework.web.client.AsyncRestTemplate$AsyncRequestCallbackAdapter:void doWithRequest(org.springframework.http.client.AsyncClientHttpRequest)"
        ]
    },
    "org.springframework.web.context.request.async.WebAsyncManager:void startCallableProcessing(org.springframework.web.context.request.async.WebAsyncTask,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.springframework.web.context.request.async.WebAsyncManager:void startCallableProcessing(java.util.concurrent.Callable,java.lang.Object[])"
        ]
    },
    "org.springframework.web.context.request.async.WebAsyncManager:void startDeferredResultProcessing(org.springframework.web.context.request.async.DeferredResult,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.springframework.http.converter.FormHttpMessageConverter:void writeParts(java.io.OutputStream,org.springframework.util.MultiValueMap,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.springframework.http.converter.FormHttpMessageConverter:void writeMultipart(org.springframework.util.MultiValueMap,org.springframework.http.HttpOutputMessage)"
        ]
    },
    "org.springframework.web.client.RestTemplate:java.lang.Object doExecute(java.net.URI,org.springframework.http.HttpMethod,org.springframework.web.client.RequestCallback,org.springframework.web.client.ResponseExtractor)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.springframework.web.client.RestTemplate:java.lang.Object execute(java.lang.String,org.springframework.http.HttpMethod,org.springframework.web.client.RequestCallback,org.springframework.web.client.ResponseExtractor,java.lang.Object[])",
            "org.springframework.web.client.RestTemplate:java.lang.Object execute(java.lang.String,org.springframework.http.HttpMethod,org.springframework.web.client.RequestCallback,org.springframework.web.client.ResponseExtractor,java.util.Map)",
            "org.springframework.web.client.RestTemplate:java.lang.Object execute(java.net.URI,org.springframework.http.HttpMethod,org.springframework.web.client.RequestCallback,org.springframework.web.client.ResponseExtractor)"
        ]
    },
    "org.springframework.web.client.AsyncRestTemplate$AsyncRequestCallbackAdapter:void doWithRequest(org.springframework.http.client.AsyncClientHttpRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.springframework.web.client.AsyncRestTemplate:org.springframework.util.concurrent.ListenableFuture doExecute(java.net.URI,org.springframework.http.HttpMethod,org.springframework.web.client.AsyncRequestCallback,org.springframework.web.client.ResponseExtractor)"
        ]
    },
    "org.springframework.web.context.request.async.WebAsyncManager:void startCallableProcessing(java.util.concurrent.Callable,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.springframework.http.converter.FormHttpMessageConverter:void writeMultipart(org.springframework.util.MultiValueMap,org.springframework.http.HttpOutputMessage)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.springframework.http.converter.FormHttpMessageConverter:void write(org.springframework.util.MultiValueMap,org.springframework.http.MediaType,org.springframework.http.HttpOutputMessage)"
        ]
    },
    "org.springframework.web.client.RestTemplate:java.lang.Object execute(java.lang.String,org.springframework.http.HttpMethod,org.springframework.web.client.RequestCallback,org.springframework.web.client.ResponseExtractor,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.springframework.web.client.RestTemplate:java.lang.Object getForObject(java.lang.String,java.lang.Class,java.lang.Object[])",
            "org.springframework.web.client.RestTemplate:org.springframework.http.ResponseEntity getForEntity(java.lang.String,java.lang.Class,java.lang.Object[])",
            "org.springframework.web.client.RestTemplate:org.springframework.http.HttpHeaders headForHeaders(java.lang.String,java.lang.Object[])",
            "org.springframework.web.client.RestTemplate:java.net.URI postForLocation(java.lang.String,java.lang.Object,java.lang.Object[])",
            "org.springframework.web.client.RestTemplate:java.lang.Object postForObject(java.lang.String,java.lang.Object,java.lang.Class,java.lang.Object[])",
            "org.springframework.web.client.RestTemplate:org.springframework.http.ResponseEntity postForEntity(java.lang.String,java.lang.Object,java.lang.Class,java.lang.Object[])",
            "org.springframework.web.client.RestTemplate:void put(java.lang.String,java.lang.Object,java.lang.Object[])",
            "org.springframework.web.client.RestTemplate:void delete(java.lang.String,java.lang.Object[])",
            "org.springframework.web.client.RestTemplate:java.util.Set optionsForAllow(java.lang.String,java.lang.Object[])",
            "org.springframework.web.client.RestTemplate:org.springframework.http.ResponseEntity exchange(java.lang.String,org.springframework.http.HttpMethod,org.springframework.http.HttpEntity,java.lang.Class,java.lang.Object[])",
            "org.springframework.web.client.RestTemplate:org.springframework.http.ResponseEntity exchange(java.lang.String,org.springframework.http.HttpMethod,org.springframework.http.HttpEntity,org.springframework.core.ParameterizedTypeReference,java.lang.Object[])"
        ]
    },
    "org.springframework.web.client.RestTemplate:java.lang.Object execute(java.lang.String,org.springframework.http.HttpMethod,org.springframework.web.client.RequestCallback,org.springframework.web.client.ResponseExtractor,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.springframework.web.client.RestTemplate:java.lang.Object getForObject(java.lang.String,java.lang.Class,java.util.Map)",
            "org.springframework.web.client.RestTemplate:org.springframework.http.ResponseEntity getForEntity(java.lang.String,java.lang.Class,java.util.Map)",
            "org.springframework.web.client.RestTemplate:org.springframework.http.HttpHeaders headForHeaders(java.lang.String,java.util.Map)",
            "org.springframework.web.client.RestTemplate:java.net.URI postForLocation(java.lang.String,java.lang.Object,java.util.Map)",
            "org.springframework.web.client.RestTemplate:java.lang.Object postForObject(java.lang.String,java.lang.Object,java.lang.Class,java.util.Map)",
            "org.springframework.web.client.RestTemplate:org.springframework.http.ResponseEntity postForEntity(java.lang.String,java.lang.Object,java.lang.Class,java.util.Map)",
            "org.springframework.web.client.RestTemplate:void put(java.lang.String,java.lang.Object,java.util.Map)",
            "org.springframework.web.client.RestTemplate:void delete(java.lang.String,java.util.Map)",
            "org.springframework.web.client.RestTemplate:java.util.Set optionsForAllow(java.lang.String,java.util.Map)",
            "org.springframework.web.client.RestTemplate:org.springframework.http.ResponseEntity exchange(java.lang.String,org.springframework.http.HttpMethod,org.springframework.http.HttpEntity,java.lang.Class,java.util.Map)",
            "org.springframework.web.client.RestTemplate:org.springframework.http.ResponseEntity exchange(java.lang.String,org.springframework.http.HttpMethod,org.springframework.http.HttpEntity,org.springframework.core.ParameterizedTypeReference,java.util.Map)"
        ]
    },
    "org.springframework.web.client.RestTemplate:java.lang.Object execute(java.net.URI,org.springframework.http.HttpMethod,org.springframework.web.client.RequestCallback,org.springframework.web.client.ResponseExtractor)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.springframework.web.client.RestTemplate:java.lang.Object getForObject(java.net.URI,java.lang.Class)",
            "org.springframework.web.client.RestTemplate:org.springframework.http.ResponseEntity getForEntity(java.net.URI,java.lang.Class)",
            "org.springframework.web.client.RestTemplate:org.springframework.http.HttpHeaders headForHeaders(java.net.URI)",
            "org.springframework.web.client.RestTemplate:java.net.URI postForLocation(java.net.URI,java.lang.Object)",
            "org.springframework.web.client.RestTemplate:java.lang.Object postForObject(java.net.URI,java.lang.Object,java.lang.Class)",
            "org.springframework.web.client.RestTemplate:org.springframework.http.ResponseEntity postForEntity(java.net.URI,java.lang.Object,java.lang.Class)",
            "org.springframework.web.client.RestTemplate:void put(java.net.URI,java.lang.Object)",
            "org.springframework.web.client.RestTemplate:void delete(java.net.URI)",
            "org.springframework.web.client.RestTemplate:java.util.Set optionsForAllow(java.net.URI)",
            "org.springframework.web.client.RestTemplate:org.springframework.http.ResponseEntity exchange(java.net.URI,org.springframework.http.HttpMethod,org.springframework.http.HttpEntity,java.lang.Class)",
            "org.springframework.web.client.RestTemplate:org.springframework.http.ResponseEntity exchange(java.net.URI,org.springframework.http.HttpMethod,org.springframework.http.HttpEntity,org.springframework.core.ParameterizedTypeReference)",
            "org.springframework.web.client.RestTemplate:org.springframework.http.ResponseEntity exchange(org.springframework.http.RequestEntity,java.lang.Class)",
            "org.springframework.web.client.RestTemplate:org.springframework.http.ResponseEntity exchange(org.springframework.http.RequestEntity,org.springframework.core.ParameterizedTypeReference)"
        ]
    },
    "org.springframework.web.client.AsyncRestTemplate:org.springframework.util.concurrent.ListenableFuture doExecute(java.net.URI,org.springframework.http.HttpMethod,org.springframework.web.client.AsyncRequestCallback,org.springframework.web.client.ResponseExtractor)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.springframework.web.client.AsyncRestTemplate:org.springframework.util.concurrent.ListenableFuture execute(java.lang.String,org.springframework.http.HttpMethod,org.springframework.web.client.AsyncRequestCallback,org.springframework.web.client.ResponseExtractor,java.lang.Object[])",
            "org.springframework.web.client.AsyncRestTemplate:org.springframework.util.concurrent.ListenableFuture execute(java.lang.String,org.springframework.http.HttpMethod,org.springframework.web.client.AsyncRequestCallback,org.springframework.web.client.ResponseExtractor,java.util.Map)",
            "org.springframework.web.client.AsyncRestTemplate:org.springframework.util.concurrent.ListenableFuture execute(java.net.URI,org.springframework.http.HttpMethod,org.springframework.web.client.AsyncRequestCallback,org.springframework.web.client.ResponseExtractor)"
        ]
    },
    "org.springframework.http.converter.FormHttpMessageConverter:void write(org.springframework.util.MultiValueMap,org.springframework.http.MediaType,org.springframework.http.HttpOutputMessage)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.springframework.http.converter.FormHttpMessageConverter:void write(java.lang.Object,org.springframework.http.MediaType,org.springframework.http.HttpOutputMessage)"
        ]
    },
    "org.springframework.web.client.RestTemplate:java.lang.Object getForObject(java.lang.String,java.lang.Class,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.springframework.web.client.RestTemplate:org.springframework.http.ResponseEntity getForEntity(java.lang.String,java.lang.Class,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.springframework.web.client.RestTemplate:org.springframework.http.HttpHeaders headForHeaders(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.springframework.web.client.RestTemplate:java.net.URI postForLocation(java.lang.String,java.lang.Object,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.springframework.web.client.RestTemplate:java.lang.Object postForObject(java.lang.String,java.lang.Object,java.lang.Class,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.springframework.web.client.RestTemplate:org.springframework.http.ResponseEntity postForEntity(java.lang.String,java.lang.Object,java.lang.Class,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.springframework.web.client.RestTemplate:void put(java.lang.String,java.lang.Object,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.springframework.web.client.RestTemplate:void delete(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.springframework.web.client.RestTemplate:java.util.Set optionsForAllow(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.springframework.web.client.RestTemplate:org.springframework.http.ResponseEntity exchange(java.lang.String,org.springframework.http.HttpMethod,org.springframework.http.HttpEntity,java.lang.Class,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.springframework.web.client.RestTemplate:org.springframework.http.ResponseEntity exchange(java.lang.String,org.springframework.http.HttpMethod,org.springframework.http.HttpEntity,org.springframework.core.ParameterizedTypeReference,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.springframework.web.client.RestTemplate:java.lang.Object getForObject(java.lang.String,java.lang.Class,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.springframework.web.client.RestTemplate:org.springframework.http.ResponseEntity getForEntity(java.lang.String,java.lang.Class,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.springframework.web.client.RestTemplate:org.springframework.http.HttpHeaders headForHeaders(java.lang.String,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.springframework.web.client.RestTemplate:java.net.URI postForLocation(java.lang.String,java.lang.Object,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.springframework.web.client.RestTemplate:java.lang.Object postForObject(java.lang.String,java.lang.Object,java.lang.Class,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.springframework.web.client.RestTemplate:org.springframework.http.ResponseEntity postForEntity(java.lang.String,java.lang.Object,java.lang.Class,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.springframework.web.client.RestTemplate:void put(java.lang.String,java.lang.Object,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.springframework.web.client.RestTemplate:void delete(java.lang.String,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.springframework.web.client.RestTemplate:java.util.Set optionsForAllow(java.lang.String,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.springframework.web.client.RestTemplate:org.springframework.http.ResponseEntity exchange(java.lang.String,org.springframework.http.HttpMethod,org.springframework.http.HttpEntity,java.lang.Class,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.springframework.web.client.RestTemplate:org.springframework.http.ResponseEntity exchange(java.lang.String,org.springframework.http.HttpMethod,org.springframework.http.HttpEntity,org.springframework.core.ParameterizedTypeReference,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.springframework.web.client.RestTemplate:java.lang.Object getForObject(java.net.URI,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.springframework.web.client.RestTemplate:org.springframework.http.ResponseEntity getForEntity(java.net.URI,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.springframework.web.client.RestTemplate:org.springframework.http.HttpHeaders headForHeaders(java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.springframework.web.client.RestTemplate:java.net.URI postForLocation(java.net.URI,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.springframework.web.client.RestTemplate:java.lang.Object postForObject(java.net.URI,java.lang.Object,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.springframework.web.client.RestTemplate:org.springframework.http.ResponseEntity postForEntity(java.net.URI,java.lang.Object,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.springframework.web.client.RestTemplate:void put(java.net.URI,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.springframework.web.client.RestTemplate:void delete(java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.springframework.web.client.RestTemplate:java.util.Set optionsForAllow(java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.springframework.web.client.RestTemplate:org.springframework.http.ResponseEntity exchange(java.net.URI,org.springframework.http.HttpMethod,org.springframework.http.HttpEntity,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.springframework.web.client.RestTemplate:org.springframework.http.ResponseEntity exchange(java.net.URI,org.springframework.http.HttpMethod,org.springframework.http.HttpEntity,org.springframework.core.ParameterizedTypeReference)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.springframework.web.client.RestTemplate:org.springframework.http.ResponseEntity exchange(org.springframework.http.RequestEntity,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.springframework.web.client.RestTemplate:org.springframework.http.ResponseEntity exchange(org.springframework.http.RequestEntity,org.springframework.core.ParameterizedTypeReference)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.springframework.web.client.AsyncRestTemplate:org.springframework.util.concurrent.ListenableFuture execute(java.lang.String,org.springframework.http.HttpMethod,org.springframework.web.client.AsyncRequestCallback,org.springframework.web.client.ResponseExtractor,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.springframework.web.client.AsyncRestTemplate:org.springframework.util.concurrent.ListenableFuture getForEntity(java.lang.String,java.lang.Class,java.lang.Object[])",
            "org.springframework.web.client.AsyncRestTemplate:org.springframework.util.concurrent.ListenableFuture headForHeaders(java.lang.String,java.lang.Object[])",
            "org.springframework.web.client.AsyncRestTemplate:org.springframework.util.concurrent.ListenableFuture postForLocation(java.lang.String,org.springframework.http.HttpEntity,java.lang.Object[])",
            "org.springframework.web.client.AsyncRestTemplate:org.springframework.util.concurrent.ListenableFuture postForEntity(java.lang.String,org.springframework.http.HttpEntity,java.lang.Class,java.lang.Object[])",
            "org.springframework.web.client.AsyncRestTemplate:org.springframework.util.concurrent.ListenableFuture put(java.lang.String,org.springframework.http.HttpEntity,java.lang.Object[])",
            "org.springframework.web.client.AsyncRestTemplate:org.springframework.util.concurrent.ListenableFuture delete(java.lang.String,java.lang.Object[])",
            "org.springframework.web.client.AsyncRestTemplate:org.springframework.util.concurrent.ListenableFuture optionsForAllow(java.lang.String,java.lang.Object[])",
            "org.springframework.web.client.AsyncRestTemplate:org.springframework.util.concurrent.ListenableFuture exchange(java.lang.String,org.springframework.http.HttpMethod,org.springframework.http.HttpEntity,java.lang.Class,java.lang.Object[])",
            "org.springframework.web.client.AsyncRestTemplate:org.springframework.util.concurrent.ListenableFuture exchange(java.lang.String,org.springframework.http.HttpMethod,org.springframework.http.HttpEntity,org.springframework.core.ParameterizedTypeReference,java.lang.Object[])"
        ]
    },
    "org.springframework.web.client.AsyncRestTemplate:org.springframework.util.concurrent.ListenableFuture execute(java.lang.String,org.springframework.http.HttpMethod,org.springframework.web.client.AsyncRequestCallback,org.springframework.web.client.ResponseExtractor,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.springframework.web.client.AsyncRestTemplate:org.springframework.util.concurrent.ListenableFuture getForEntity(java.lang.String,java.lang.Class,java.util.Map)",
            "org.springframework.web.client.AsyncRestTemplate:org.springframework.util.concurrent.ListenableFuture headForHeaders(java.lang.String,java.util.Map)",
            "org.springframework.web.client.AsyncRestTemplate:org.springframework.util.concurrent.ListenableFuture postForLocation(java.lang.String,org.springframework.http.HttpEntity,java.util.Map)",
            "org.springframework.web.client.AsyncRestTemplate:org.springframework.util.concurrent.ListenableFuture postForEntity(java.lang.String,org.springframework.http.HttpEntity,java.lang.Class,java.util.Map)",
            "org.springframework.web.client.AsyncRestTemplate:org.springframework.util.concurrent.ListenableFuture put(java.lang.String,org.springframework.http.HttpEntity,java.util.Map)",
            "org.springframework.web.client.AsyncRestTemplate:org.springframework.util.concurrent.ListenableFuture delete(java.lang.String,java.util.Map)",
            "org.springframework.web.client.AsyncRestTemplate:org.springframework.util.concurrent.ListenableFuture optionsForAllow(java.lang.String,java.util.Map)",
            "org.springframework.web.client.AsyncRestTemplate:org.springframework.util.concurrent.ListenableFuture exchange(java.lang.String,org.springframework.http.HttpMethod,org.springframework.http.HttpEntity,java.lang.Class,java.util.Map)",
            "org.springframework.web.client.AsyncRestTemplate:org.springframework.util.concurrent.ListenableFuture exchange(java.lang.String,org.springframework.http.HttpMethod,org.springframework.http.HttpEntity,org.springframework.core.ParameterizedTypeReference,java.util.Map)"
        ]
    },
    "org.springframework.web.client.AsyncRestTemplate:org.springframework.util.concurrent.ListenableFuture execute(java.net.URI,org.springframework.http.HttpMethod,org.springframework.web.client.AsyncRequestCallback,org.springframework.web.client.ResponseExtractor)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.springframework.web.client.AsyncRestTemplate:org.springframework.util.concurrent.ListenableFuture getForEntity(java.net.URI,java.lang.Class)",
            "org.springframework.web.client.AsyncRestTemplate:org.springframework.util.concurrent.ListenableFuture headForHeaders(java.net.URI)",
            "org.springframework.web.client.AsyncRestTemplate:org.springframework.util.concurrent.ListenableFuture postForLocation(java.net.URI,org.springframework.http.HttpEntity)",
            "org.springframework.web.client.AsyncRestTemplate:org.springframework.util.concurrent.ListenableFuture postForEntity(java.net.URI,org.springframework.http.HttpEntity,java.lang.Class)",
            "org.springframework.web.client.AsyncRestTemplate:org.springframework.util.concurrent.ListenableFuture put(java.net.URI,org.springframework.http.HttpEntity)",
            "org.springframework.web.client.AsyncRestTemplate:org.springframework.util.concurrent.ListenableFuture delete(java.net.URI)",
            "org.springframework.web.client.AsyncRestTemplate:org.springframework.util.concurrent.ListenableFuture optionsForAllow(java.net.URI)",
            "org.springframework.web.client.AsyncRestTemplate:org.springframework.util.concurrent.ListenableFuture exchange(java.net.URI,org.springframework.http.HttpMethod,org.springframework.http.HttpEntity,java.lang.Class)",
            "org.springframework.web.client.AsyncRestTemplate:org.springframework.util.concurrent.ListenableFuture exchange(java.net.URI,org.springframework.http.HttpMethod,org.springframework.http.HttpEntity,org.springframework.core.ParameterizedTypeReference)"
        ]
    },
    "org.springframework.http.converter.FormHttpMessageConverter:void write(java.lang.Object,org.springframework.http.MediaType,org.springframework.http.HttpOutputMessage)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.springframework.http.converter.FormHttpMessageConverter:void writePart(java.lang.String,org.springframework.http.HttpEntity,java.io.OutputStream)",
            "org.springframework.web.client.RestTemplate$HttpEntityRequestCallback:void doWithRequest(org.springframework.http.client.ClientHttpRequest)"
        ]
    },
    "org.springframework.web.client.AsyncRestTemplate:org.springframework.util.concurrent.ListenableFuture getForEntity(java.lang.String,java.lang.Class,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.springframework.web.client.AsyncRestTemplate:org.springframework.util.concurrent.ListenableFuture headForHeaders(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.springframework.web.client.AsyncRestTemplate:org.springframework.util.concurrent.ListenableFuture postForLocation(java.lang.String,org.springframework.http.HttpEntity,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.springframework.web.client.AsyncRestTemplate:org.springframework.util.concurrent.ListenableFuture postForEntity(java.lang.String,org.springframework.http.HttpEntity,java.lang.Class,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.springframework.web.client.AsyncRestTemplate:org.springframework.util.concurrent.ListenableFuture put(java.lang.String,org.springframework.http.HttpEntity,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.springframework.web.client.AsyncRestTemplate:org.springframework.util.concurrent.ListenableFuture delete(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.springframework.web.client.AsyncRestTemplate:org.springframework.util.concurrent.ListenableFuture optionsForAllow(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.springframework.web.client.AsyncRestTemplate:org.springframework.util.concurrent.ListenableFuture exchange(java.lang.String,org.springframework.http.HttpMethod,org.springframework.http.HttpEntity,java.lang.Class,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.springframework.web.client.AsyncRestTemplate:org.springframework.util.concurrent.ListenableFuture exchange(java.lang.String,org.springframework.http.HttpMethod,org.springframework.http.HttpEntity,org.springframework.core.ParameterizedTypeReference,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.springframework.web.client.AsyncRestTemplate:org.springframework.util.concurrent.ListenableFuture getForEntity(java.lang.String,java.lang.Class,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.springframework.web.client.AsyncRestTemplate:org.springframework.util.concurrent.ListenableFuture headForHeaders(java.lang.String,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.springframework.web.client.AsyncRestTemplate:org.springframework.util.concurrent.ListenableFuture postForLocation(java.lang.String,org.springframework.http.HttpEntity,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.springframework.web.client.AsyncRestTemplate:org.springframework.util.concurrent.ListenableFuture postForEntity(java.lang.String,org.springframework.http.HttpEntity,java.lang.Class,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.springframework.web.client.AsyncRestTemplate:org.springframework.util.concurrent.ListenableFuture put(java.lang.String,org.springframework.http.HttpEntity,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.springframework.web.client.AsyncRestTemplate:org.springframework.util.concurrent.ListenableFuture delete(java.lang.String,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.springframework.web.client.AsyncRestTemplate:org.springframework.util.concurrent.ListenableFuture optionsForAllow(java.lang.String,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.springframework.web.client.AsyncRestTemplate:org.springframework.util.concurrent.ListenableFuture exchange(java.lang.String,org.springframework.http.HttpMethod,org.springframework.http.HttpEntity,java.lang.Class,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.springframework.web.client.AsyncRestTemplate:org.springframework.util.concurrent.ListenableFuture exchange(java.lang.String,org.springframework.http.HttpMethod,org.springframework.http.HttpEntity,org.springframework.core.ParameterizedTypeReference,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.springframework.web.client.AsyncRestTemplate:org.springframework.util.concurrent.ListenableFuture getForEntity(java.net.URI,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.springframework.web.client.AsyncRestTemplate:org.springframework.util.concurrent.ListenableFuture headForHeaders(java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.springframework.web.client.AsyncRestTemplate:org.springframework.util.concurrent.ListenableFuture postForLocation(java.net.URI,org.springframework.http.HttpEntity)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.springframework.web.client.AsyncRestTemplate:org.springframework.util.concurrent.ListenableFuture postForEntity(java.net.URI,org.springframework.http.HttpEntity,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.springframework.web.client.AsyncRestTemplate:org.springframework.util.concurrent.ListenableFuture put(java.net.URI,org.springframework.http.HttpEntity)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.springframework.web.client.AsyncRestTemplate:org.springframework.util.concurrent.ListenableFuture delete(java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.springframework.web.client.AsyncRestTemplate:org.springframework.util.concurrent.ListenableFuture optionsForAllow(java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.springframework.web.client.AsyncRestTemplate:org.springframework.util.concurrent.ListenableFuture exchange(java.net.URI,org.springframework.http.HttpMethod,org.springframework.http.HttpEntity,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.springframework.web.client.AsyncRestTemplate:org.springframework.util.concurrent.ListenableFuture exchange(java.net.URI,org.springframework.http.HttpMethod,org.springframework.http.HttpEntity,org.springframework.core.ParameterizedTypeReference)": {
        "isVulRoot": false,
        "vulCaller": []
    }
}