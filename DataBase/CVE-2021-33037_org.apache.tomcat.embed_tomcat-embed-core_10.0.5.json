{
    "org.apache.coyote.http11.Http11Processor:void addInputFilter(org.apache.coyote.http11.InputFilter[],java.lang.String)": {
        "isVulRoot": true,
        "vulCaller": [
            "org.apache.coyote.http11.Http11Processor:void prepareRequest()"
        ]
    },
    "org.apache.coyote.http11.Http11Processor:void prepareRequest()": {
        "isVulRoot": true,
        "vulCaller": [
            "org.apache.coyote.http11.Http11Processor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState service(org.apache.tomcat.util.net.SocketWrapperBase)"
        ]
    },
    "org.apache.coyote.http11.Http11Processor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState service(org.apache.tomcat.util.net.SocketWrapperBase)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProcessorLight:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState process(org.apache.tomcat.util.net.SocketWrapperBase,org.apache.tomcat.util.net.SocketEvent)",
            "org.apache.coyote.AbstractProcessorLight:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState checkForPipelinedData(org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState,org.apache.tomcat.util.net.SocketWrapperBase)"
        ]
    },
    "org.apache.coyote.AbstractProcessorLight:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState process(org.apache.tomcat.util.net.SocketWrapperBase,org.apache.tomcat.util.net.SocketEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProtocol$ConnectionHandler:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState process(org.apache.tomcat.util.net.SocketWrapperBase,org.apache.tomcat.util.net.SocketEvent)",
            "org.apache.coyote.http2.StreamProcessor:void process(org.apache.tomcat.util.net.SocketEvent)"
        ]
    },
    "org.apache.coyote.AbstractProcessorLight:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState checkForPipelinedData(org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState,org.apache.tomcat.util.net.SocketWrapperBase)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProcessorLight:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState process(org.apache.tomcat.util.net.SocketWrapperBase,org.apache.tomcat.util.net.SocketEvent)"
        ]
    },
    "org.apache.coyote.AbstractProtocol$ConnectionHandler:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState process(org.apache.tomcat.util.net.SocketWrapperBase,org.apache.tomcat.util.net.SocketEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.AprEndpoint$SocketProcessor:void doRun()",
            "org.apache.tomcat.util.net.AprEndpoint$SocketWithOptionsProcessor:void run()",
            "org.apache.tomcat.util.net.Nio2Endpoint$SocketProcessor:void doRun()",
            "org.apache.tomcat.util.net.NioEndpoint$SocketProcessor:void doRun()"
        ]
    },
    "org.apache.coyote.http2.StreamProcessor:void process(org.apache.tomcat.util.net.SocketEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.StreamProcessor:void processSocketEvent(org.apache.tomcat.util.net.SocketEvent,boolean)",
            "org.apache.coyote.http2.StreamRunnable:void run()"
        ]
    },
    "org.apache.tomcat.util.net.AprEndpoint$SocketProcessor:void doRun()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SocketProcessorBase:void run()"
        ]
    },
    "org.apache.tomcat.util.net.AprEndpoint$SocketWithOptionsProcessor:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.AsyncContextImpl$RunnableWrapper:void run()",
            "org.apache.catalina.core.AsyncContextImpl:void doInternalDispatch()",
            "org.apache.catalina.core.StandardThreadExecutor:void execute(java.lang.Runnable)",
            "org.apache.coyote.AbstractProcessor:void execute(java.lang.Runnable)",
            "org.apache.coyote.AsyncStateMachine:void asyncRun(java.lang.Runnable)",
            "org.apache.tomcat.util.net.AprEndpoint:boolean setSocketOptions(java.lang.Long)",
            "org.apache.tomcat.util.net.Nio2Endpoint:void stopInternal()",
            "org.apache.tomcat.util.net.SecureNio2Channel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()",
            "org.apache.tomcat.util.net.SecureNioChannel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()",
            "org.apache.tomcat.util.net.SocketWrapperBase:void execute(java.lang.Runnable)",
            "org.apache.tomcat.util.threads.InlineExecutorService:void execute(java.lang.Runnable)",
            "org.apache.tomcat.util.threads.ScheduledThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.tomcat.util.threads.TaskThread$WrappingRunnable:void run()",
            "org.apache.tomcat.util.threads.ThreadPoolExecutor:void execute(java.lang.Runnable,long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$SocketProcessor:void doRun()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SocketProcessorBase:void run()"
        ]
    },
    "org.apache.tomcat.util.net.NioEndpoint$SocketProcessor:void doRun()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SocketProcessorBase:void run()"
        ]
    },
    "org.apache.coyote.http2.StreamProcessor:void processSocketEvent(org.apache.tomcat.util.net.SocketEvent,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProcessor:void setErrorState(org.apache.coyote.ErrorState,java.lang.Throwable)",
            "org.apache.coyote.AbstractProcessor:void action(org.apache.coyote.ActionCode,java.lang.Object)",
            "org.apache.coyote.AbstractProcessor:void doTimeoutAsync()",
            "org.apache.coyote.http2.StreamProcessor:void executeDispatches()"
        ]
    },
    "org.apache.coyote.http2.StreamRunnable:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.AsyncContextImpl$RunnableWrapper:void run()",
            "org.apache.catalina.core.AsyncContextImpl:void doInternalDispatch()",
            "org.apache.catalina.core.StandardThreadExecutor:void execute(java.lang.Runnable)",
            "org.apache.coyote.AbstractProcessor:void execute(java.lang.Runnable)",
            "org.apache.coyote.AsyncStateMachine:void asyncRun(java.lang.Runnable)",
            "org.apache.coyote.http2.Http2UpgradeHandler:void processStreamOnContainerThread(org.apache.coyote.http2.StreamProcessor,org.apache.tomcat.util.net.SocketEvent)",
            "org.apache.coyote.http2.Http2UpgradeHandler:void executeQueuedStream()",
            "org.apache.tomcat.util.net.Nio2Endpoint:void stopInternal()",
            "org.apache.tomcat.util.net.SecureNio2Channel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()",
            "org.apache.tomcat.util.net.SecureNioChannel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()",
            "org.apache.tomcat.util.net.SocketWrapperBase:void execute(java.lang.Runnable)",
            "org.apache.tomcat.util.threads.InlineExecutorService:void execute(java.lang.Runnable)",
            "org.apache.tomcat.util.threads.ScheduledThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.tomcat.util.threads.TaskThread$WrappingRunnable:void run()",
            "org.apache.tomcat.util.threads.ThreadPoolExecutor:void execute(java.lang.Runnable,long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.apache.tomcat.util.net.SocketProcessorBase:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.AsyncContextImpl$RunnableWrapper:void run()",
            "org.apache.catalina.core.AsyncContextImpl:void doInternalDispatch()",
            "org.apache.catalina.core.StandardThreadExecutor:void execute(java.lang.Runnable)",
            "org.apache.coyote.AbstractProcessor:void execute(java.lang.Runnable)",
            "org.apache.coyote.AsyncStateMachine:void asyncRun(java.lang.Runnable)",
            "org.apache.tomcat.util.net.AbstractEndpoint:boolean processSocket(org.apache.tomcat.util.net.SocketWrapperBase,org.apache.tomcat.util.net.SocketEvent,boolean)",
            "org.apache.tomcat.util.net.Nio2Endpoint$SocketProcessor:void doRun()",
            "org.apache.tomcat.util.net.Nio2Endpoint:void stopInternal()",
            "org.apache.tomcat.util.net.SecureNio2Channel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()",
            "org.apache.tomcat.util.net.SecureNioChannel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()",
            "org.apache.tomcat.util.net.SocketWrapperBase:void execute(java.lang.Runnable)",
            "org.apache.tomcat.util.threads.InlineExecutorService:void execute(java.lang.Runnable)",
            "org.apache.tomcat.util.threads.ScheduledThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.tomcat.util.threads.TaskThread$WrappingRunnable:void run()",
            "org.apache.tomcat.util.threads.ThreadPoolExecutor:void execute(java.lang.Runnable,long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.apache.catalina.core.AsyncContextImpl$RunnableWrapper:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.AsyncContextImpl$RunnableWrapper:void run()",
            "org.apache.catalina.core.AsyncContextImpl:void doInternalDispatch()",
            "org.apache.catalina.core.StandardThreadExecutor:void execute(java.lang.Runnable)",
            "org.apache.coyote.AbstractProcessor:void execute(java.lang.Runnable)",
            "org.apache.coyote.AsyncStateMachine:void asyncRun(java.lang.Runnable)",
            "org.apache.tomcat.util.net.Nio2Endpoint:void stopInternal()",
            "org.apache.tomcat.util.net.SecureNio2Channel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()",
            "org.apache.tomcat.util.net.SecureNioChannel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()",
            "org.apache.tomcat.util.net.SocketWrapperBase:void execute(java.lang.Runnable)",
            "org.apache.tomcat.util.threads.InlineExecutorService:void execute(java.lang.Runnable)",
            "org.apache.tomcat.util.threads.ScheduledThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.tomcat.util.threads.TaskThread$WrappingRunnable:void run()",
            "org.apache.tomcat.util.threads.ThreadPoolExecutor:void execute(java.lang.Runnable,long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.apache.catalina.core.AsyncContextImpl:void doInternalDispatch()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.StandardWrapperValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)"
        ]
    },
    "org.apache.catalina.core.StandardThreadExecutor:void execute(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.AbstractEndpoint:boolean processSocket(org.apache.tomcat.util.net.SocketWrapperBase,org.apache.tomcat.util.net.SocketEvent,boolean)",
            "org.apache.tomcat.util.net.AprEndpoint:boolean setSocketOptions(java.lang.Long)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2Acceptor:void completed(java.nio.channels.AsynchronousSocketChannel,java.lang.Void)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2Acceptor:void failed(java.lang.Throwable,java.lang.Void)",
            "org.apache.tomcat.util.net.Nio2Endpoint$SocketProcessor:void doRun()",
            "org.apache.tomcat.util.net.Nio2Endpoint:void startAcceptorThread()",
            "org.apache.tomcat.util.net.Nio2Endpoint:void resume()",
            "org.apache.tomcat.util.net.Nio2Endpoint:void stopInternal()",
            "org.apache.tomcat.util.net.SocketWrapperBase$OperationState:boolean process()",
            "org.apache.tomcat.util.net.SocketWrapperBase:void execute(java.lang.Runnable)"
        ]
    },
    "org.apache.coyote.AbstractProcessor:void execute(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AsyncStateMachine:void asyncRun(java.lang.Runnable)"
        ]
    },
    "org.apache.coyote.AsyncStateMachine:void asyncRun(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProcessor:void action(org.apache.coyote.ActionCode,java.lang.Object)"
        ]
    },
    "org.apache.tomcat.util.net.AprEndpoint:boolean setSocketOptions(java.lang.Long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.AprEndpoint:boolean setSocketOptions(java.lang.Object)"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint:void stopInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.AbstractEndpoint:void stop()"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SecureNio2Channel$1:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$2:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$FutureRead:java.lang.Integer unwrap(int,long,java.util.concurrent.TimeUnit)",
            "org.apache.tomcat.util.net.SecureNio2Channel$FutureWrite:void wrap()",
            "org.apache.tomcat.util.net.SecureNio2Channel:int handshakeInternal(boolean)",
            "org.apache.tomcat.util.net.SecureNio2Channel:javax.net.ssl.SSLEngineResult handshakeUnwrap()",
            "org.apache.tomcat.util.net.SecureNio2Channel:void write(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void write(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)"
        ]
    },
    "org.apache.tomcat.util.net.SecureNioChannel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SecureNioChannel:int handshake(boolean,boolean)",
            "org.apache.tomcat.util.net.SecureNioChannel:javax.net.ssl.SSLEngineResult handshakeUnwrap(boolean)",
            "org.apache.tomcat.util.net.SecureNioChannel:int read(java.nio.ByteBuffer)",
            "org.apache.tomcat.util.net.SecureNioChannel:long read(java.nio.ByteBuffer[],int,int)",
            "org.apache.tomcat.util.net.SecureNioChannel:int write(java.nio.ByteBuffer)",
            "org.apache.tomcat.util.net.SecureNioChannel:long write(java.nio.ByteBuffer[],int,int)"
        ]
    },
    "org.apache.tomcat.util.net.SocketWrapperBase:void execute(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProcessor:void execute(java.lang.Runnable)",
            "org.apache.coyote.http2.Http2UpgradeHandler:void processStreamOnContainerThread(org.apache.coyote.http2.StreamProcessor,org.apache.tomcat.util.net.SocketEvent)",
            "org.apache.coyote.http2.Http2UpgradeHandler:void executeQueuedStream()"
        ]
    },
    "org.apache.tomcat.util.threads.InlineExecutorService:void execute(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.AbstractEndpoint:boolean processSocket(org.apache.tomcat.util.net.SocketWrapperBase,org.apache.tomcat.util.net.SocketEvent,boolean)",
            "org.apache.tomcat.util.net.AprEndpoint:boolean setSocketOptions(java.lang.Long)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2Acceptor:void completed(java.nio.channels.AsynchronousSocketChannel,java.lang.Void)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2Acceptor:void failed(java.lang.Throwable,java.lang.Void)",
            "org.apache.tomcat.util.net.Nio2Endpoint$SocketProcessor:void doRun()",
            "org.apache.tomcat.util.net.Nio2Endpoint:void startAcceptorThread()",
            "org.apache.tomcat.util.net.Nio2Endpoint:void resume()",
            "org.apache.tomcat.util.net.Nio2Endpoint:void stopInternal()",
            "org.apache.tomcat.util.net.SocketWrapperBase$OperationState:boolean process()",
            "org.apache.tomcat.util.net.SocketWrapperBase:void execute(java.lang.Runnable)"
        ]
    },
    "org.apache.tomcat.util.threads.ScheduledThreadPoolExecutor:void execute(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.AbstractEndpoint:boolean processSocket(org.apache.tomcat.util.net.SocketWrapperBase,org.apache.tomcat.util.net.SocketEvent,boolean)",
            "org.apache.tomcat.util.net.AprEndpoint:boolean setSocketOptions(java.lang.Long)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2Acceptor:void completed(java.nio.channels.AsynchronousSocketChannel,java.lang.Void)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2Acceptor:void failed(java.lang.Throwable,java.lang.Void)",
            "org.apache.tomcat.util.net.Nio2Endpoint$SocketProcessor:void doRun()",
            "org.apache.tomcat.util.net.Nio2Endpoint:void startAcceptorThread()",
            "org.apache.tomcat.util.net.Nio2Endpoint:void resume()",
            "org.apache.tomcat.util.net.Nio2Endpoint:void stopInternal()",
            "org.apache.tomcat.util.net.SocketWrapperBase$OperationState:boolean process()",
            "org.apache.tomcat.util.net.SocketWrapperBase:void execute(java.lang.Runnable)",
            "org.apache.tomcat.util.threads.ScheduledThreadPoolExecutor:void execute(java.lang.Runnable)"
        ]
    },
    "org.apache.tomcat.util.threads.TaskThread$WrappingRunnable:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.AsyncContextImpl$RunnableWrapper:void run()",
            "org.apache.catalina.core.AsyncContextImpl:void doInternalDispatch()",
            "org.apache.catalina.core.StandardThreadExecutor:void execute(java.lang.Runnable)",
            "org.apache.coyote.AbstractProcessor:void execute(java.lang.Runnable)",
            "org.apache.coyote.AsyncStateMachine:void asyncRun(java.lang.Runnable)",
            "org.apache.tomcat.util.net.Nio2Endpoint:void stopInternal()",
            "org.apache.tomcat.util.net.SecureNio2Channel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()",
            "org.apache.tomcat.util.net.SecureNioChannel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()",
            "org.apache.tomcat.util.net.SocketWrapperBase:void execute(java.lang.Runnable)",
            "org.apache.tomcat.util.threads.InlineExecutorService:void execute(java.lang.Runnable)",
            "org.apache.tomcat.util.threads.ScheduledThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.tomcat.util.threads.TaskThread$WrappingRunnable:void run()",
            "org.apache.tomcat.util.threads.ThreadPoolExecutor:void execute(java.lang.Runnable,long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.apache.tomcat.util.threads.ThreadPoolExecutor:void execute(java.lang.Runnable,long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.StandardThreadExecutor:void execute(java.lang.Runnable,long,java.util.concurrent.TimeUnit)",
            "org.apache.tomcat.util.threads.ThreadPoolExecutor:void execute(java.lang.Runnable)"
        ]
    },
    "org.apache.coyote.AbstractProcessor:void setErrorState(org.apache.coyote.ErrorState,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProcessor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState dispatch(org.apache.tomcat.util.net.SocketEvent)",
            "org.apache.coyote.AbstractProcessor:void parseHost(org.apache.tomcat.util.buf.MessageBytes)",
            "org.apache.coyote.AbstractProcessor:void action(org.apache.coyote.ActionCode,java.lang.Object)",
            "org.apache.coyote.AbstractProcessor:void handleIOException(java.io.IOException)",
            "org.apache.coyote.ajp.AjpProcessor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState service(org.apache.tomcat.util.net.SocketWrapperBase)",
            "org.apache.coyote.ajp.AjpProcessor:void prepareRequest()",
            "org.apache.coyote.ajp.AjpProcessor:void populateHost()",
            "org.apache.coyote.ajp.AjpProcessor:void access$400(org.apache.coyote.ajp.AjpProcessor,org.apache.coyote.ErrorState,java.lang.Throwable)",
            "org.apache.coyote.ajp.AjpProcessor:void access$700(org.apache.coyote.ajp.AjpProcessor,org.apache.coyote.ErrorState,java.lang.Throwable)",
            "org.apache.coyote.http11.Http11Processor:void addInputFilter(org.apache.coyote.http11.InputFilter[],java.lang.String)",
            "org.apache.coyote.http11.Http11Processor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState service(org.apache.tomcat.util.net.SocketWrapperBase)",
            "org.apache.coyote.http11.Http11Processor:boolean handleIncompleteRequestLineRead()",
            "org.apache.coyote.http11.Http11Processor:void prepareRequestProtocol()",
            "org.apache.coyote.http11.Http11Processor:void prepareRequest()",
            "org.apache.coyote.http11.Http11Processor:void badRequest(java.lang.String)",
            "org.apache.coyote.http11.Http11Processor:void endRequest()",
            "org.apache.coyote.http11.Http11Processor:void ack(org.apache.coyote.ContinueResponseTiming)",
            "org.apache.coyote.http11.Http11Processor:org.apache.tomcat.util.net.SendfileState processSendfile(org.apache.tomcat.util.net.SocketWrapperBase)",
            "org.apache.coyote.http2.StreamProcessor:void ack(org.apache.coyote.ContinueResponseTiming)",
            "org.apache.coyote.http2.StreamProcessor:void doPush(org.apache.coyote.Request)",
            "org.apache.coyote.http2.StreamProcessor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState service(org.apache.tomcat.util.net.SocketWrapperBase)"
        ]
    },
    "org.apache.coyote.AbstractProcessor:void action(org.apache.coyote.ActionCode,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProcessor:void action(org.apache.coyote.ActionCode,java.lang.Object)",
            "org.apache.coyote.Request:void action(org.apache.coyote.ActionCode,java.lang.Object)",
            "org.apache.coyote.Response:void action(org.apache.coyote.ActionCode,java.lang.Object)",
            "org.apache.coyote.ajp.AjpProcessor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState service(org.apache.tomcat.util.net.SocketWrapperBase)",
            "org.apache.coyote.http11.Http11Processor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState service(org.apache.tomcat.util.net.SocketWrapperBase)",
            "org.apache.coyote.http11.Http11Processor:void endRequest()",
            "org.apache.coyote.http2.StreamProcessor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState service(org.apache.tomcat.util.net.SocketWrapperBase)"
        ]
    },
    "org.apache.coyote.AbstractProcessor:void doTimeoutAsync()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProcessor:void timeoutAsync(long)"
        ]
    },
    "org.apache.coyote.http2.StreamProcessor:void executeDispatches()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProcessor:void action(org.apache.coyote.ActionCode,java.lang.Object)"
        ]
    },
    "org.apache.coyote.http2.Http2UpgradeHandler:void processStreamOnContainerThread(org.apache.coyote.http2.StreamProcessor,org.apache.tomcat.util.net.SocketEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2UpgradeHandler:void processStreamOnContainerThread(org.apache.coyote.http2.Stream)",
            "org.apache.coyote.http2.StreamProcessor:void processSocketEvent(org.apache.tomcat.util.net.SocketEvent,boolean)"
        ]
    },
    "org.apache.coyote.http2.Http2UpgradeHandler:void executeQueuedStream()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.StreamProcessor:void process(org.apache.tomcat.util.net.SocketEvent)"
        ]
    },
    "org.apache.tomcat.util.net.AbstractEndpoint:boolean processSocket(org.apache.tomcat.util.net.SocketWrapperBase,org.apache.tomcat.util.net.SocketEvent,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.AprEndpoint$Poller:void maintain()",
            "org.apache.tomcat.util.net.AprEndpoint:boolean processSocket(long,org.apache.tomcat.util.net.SocketEvent)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$1:void completed(java.lang.Integer,org.apache.tomcat.util.net.Nio2Endpoint$SendfileData)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$1:void failed(java.lang.Throwable,org.apache.tomcat.util.net.Nio2Endpoint$SendfileData)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$2:void completed(java.lang.Integer,java.nio.ByteBuffer)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$2:void failed(java.lang.Throwable,java.nio.ByteBuffer)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$3:void completed(java.lang.Integer,java.nio.ByteBuffer)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$3:void failed(java.lang.Throwable,java.nio.ByteBuffer)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$4:void completed(java.lang.Long,java.nio.ByteBuffer[])",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$4:void failed(java.lang.Throwable,java.nio.ByteBuffer[])",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:void registerReadInterest()",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:void registerWriteInterest()",
            "org.apache.tomcat.util.net.Nio2Endpoint:boolean setSocketOptions(java.nio.channels.AsynchronousSocketChannel)",
            "org.apache.tomcat.util.net.NioEndpoint$Poller:void add(org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper,int)",
            "org.apache.tomcat.util.net.NioEndpoint$Poller:void processKey(java.nio.channels.SelectionKey,org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper)",
            "org.apache.tomcat.util.net.NioEndpoint$Poller:org.apache.tomcat.util.net.SendfileState processSendfile(java.nio.channels.SelectionKey,org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper,boolean)",
            "org.apache.tomcat.util.net.NioEndpoint$Poller:void timeout(int,boolean)",
            "org.apache.tomcat.util.net.SecureNio2Channel$HandshakeReadCompletionHandler:void completed(java.lang.Integer,org.apache.tomcat.util.net.SocketWrapperBase)",
            "org.apache.tomcat.util.net.SecureNio2Channel$HandshakeReadCompletionHandler:void failed(java.lang.Throwable,org.apache.tomcat.util.net.SocketWrapperBase)",
            "org.apache.tomcat.util.net.SecureNio2Channel$HandshakeWriteCompletionHandler:void completed(java.lang.Integer,org.apache.tomcat.util.net.SocketWrapperBase)",
            "org.apache.tomcat.util.net.SecureNio2Channel$HandshakeWriteCompletionHandler:void failed(java.lang.Throwable,org.apache.tomcat.util.net.SocketWrapperBase)",
            "org.apache.tomcat.util.net.SocketWrapperBase:void processSocket(org.apache.tomcat.util.net.SocketEvent,boolean)"
        ]
    },
    "org.apache.catalina.core.StandardWrapperValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.AuthenticatorBase:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.authenticator.SingleSignOn:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.connector.CoyoteAdapter:boolean asyncDispatch(org.apache.coyote.Request,org.apache.coyote.Response,org.apache.tomcat.util.net.SocketEvent)",
            "org.apache.catalina.connector.CoyoteAdapter:void service(org.apache.coyote.Request,org.apache.coyote.Response)",
            "org.apache.catalina.core.StandardContextValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.core.StandardEngineValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.core.StandardHostValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.AbstractAccessLogValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.CrawlerSessionManagerValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.ErrorReportValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.HealthCheckValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.JDBCAccessLogValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.LoadBalancerDrainingValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.PersistentValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.RemoteIpValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.RequestFilterValve:void process(java.lang.String,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.RequestFilterValve:void denyRequest(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.SSLValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.SemaphoreValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.StuckThreadDetectionValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.rewrite.RewriteValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$Nio2Acceptor:void completed(java.nio.channels.AsynchronousSocketChannel,java.lang.Void)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2Acceptor:void completed(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$Nio2Acceptor:void failed(java.lang.Throwable,java.lang.Void)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2Acceptor:void failed(java.lang.Throwable,java.lang.Object)"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint:void startAcceptorThread()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint:void startInternal()"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint:void resume()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProtocol:void resume()"
        ]
    },
    "org.apache.tomcat.util.net.SocketWrapperBase$OperationState:boolean process()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.AprEndpoint$Poller:void maintain()",
            "org.apache.tomcat.util.net.AprEndpoint:boolean processSocket(long,org.apache.tomcat.util.net.SocketEvent)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$Nio2OperationState$1:void completed(java.lang.Long,java.nio.ByteBuffer[])",
            "org.apache.tomcat.util.net.NioEndpoint$Poller:void processKey(java.nio.channels.SelectionKey,org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper)",
            "org.apache.tomcat.util.net.NioEndpoint$Poller:void timeout(int,boolean)"
        ]
    },
    "org.apache.tomcat.util.net.AprEndpoint:boolean setSocketOptions(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Acceptor:void run()"
        ]
    },
    "org.apache.tomcat.util.net.AbstractEndpoint:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProtocol:void stop()",
            "org.apache.tomcat.util.net.AprEndpoint:void unbind()",
            "org.apache.tomcat.util.net.Nio2Endpoint:void unbind()",
            "org.apache.tomcat.util.net.NioEndpoint:void unbind()"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel$1:void completed(java.lang.Integer,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SecureNio2Channel$1:void completed(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel$2:void completed(java.lang.Integer,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SecureNio2Channel$2:void completed(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel$FutureRead:java.lang.Integer unwrap(int,long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SecureNio2Channel$FutureRead:java.lang.Integer get()",
            "org.apache.tomcat.util.net.SecureNio2Channel$FutureRead:java.lang.Integer get(long,java.util.concurrent.TimeUnit)",
            "org.apache.tomcat.util.net.SecureNio2Channel$FutureRead:java.lang.Integer unwrap(int,long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel$FutureWrite:void wrap()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SecureNio2Channel$FutureWrite:void <init>(org.apache.tomcat.util.net.SecureNio2Channel,java.nio.ByteBuffer)",
            "org.apache.tomcat.util.net.SecureNio2Channel$FutureWrite:java.lang.Integer get()",
            "org.apache.tomcat.util.net.SecureNio2Channel$FutureWrite:java.lang.Integer get(long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel:int handshakeInternal(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SecureNio2Channel:int handshake()",
            "org.apache.tomcat.util.net.SecureNio2Channel:int handshakeInternal(boolean)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void rehandshake()"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel:javax.net.ssl.SSLEngineResult handshakeUnwrap()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SecureNio2Channel:int handshakeInternal(boolean)"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel:void write(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Channel:void write(java.nio.ByteBuffer,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$1:void completed(java.lang.Integer,org.apache.tomcat.util.net.Nio2Endpoint$SendfileData)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$3:void completed(java.lang.Integer,java.nio.ByteBuffer)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:boolean flushNonBlockingInternal(boolean)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:org.apache.tomcat.util.net.SendfileState processSendfile(org.apache.tomcat.util.net.SendfileDataBase)",
            "org.apache.tomcat.util.net.SecureNio2Channel$3:void completed(java.lang.Integer,java.lang.Object)"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel:void write(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$3:void completed(java.lang.Integer,java.nio.ByteBuffer)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$4:void completed(java.lang.Long,java.nio.ByteBuffer[])",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$Nio2OperationState$1:void completed(java.lang.Long,java.nio.ByteBuffer[])",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$Nio2OperationState:void run()",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:boolean flushNonBlockingInternal(boolean)",
            "org.apache.tomcat.util.net.SecureNio2Channel$4:void completed(java.lang.Integer,java.lang.Object)"
        ]
    },
    "org.apache.tomcat.util.net.SecureNioChannel:int handshake(boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.NioEndpoint$SocketProcessor:void doRun()",
            "org.apache.tomcat.util.net.SecureNioChannel:void rehandshake(long)"
        ]
    },
    "org.apache.tomcat.util.net.SecureNioChannel:javax.net.ssl.SSLEngineResult handshakeUnwrap(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SecureNioChannel:int handshake(boolean,boolean)"
        ]
    },
    "org.apache.tomcat.util.net.SecureNioChannel:int read(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper:int fillReadBuffer(boolean,java.nio.ByteBuffer)"
        ]
    },
    "org.apache.tomcat.util.net.SecureNioChannel:long read(java.nio.ByteBuffer[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.NioChannel:long read(java.nio.ByteBuffer[])",
            "org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper$NioOperationState:void run()"
        ]
    },
    "org.apache.tomcat.util.net.SecureNioChannel:int write(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper$NioOperationState:void run()",
            "org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper:void doWrite(boolean,java.nio.ByteBuffer)"
        ]
    },
    "org.apache.tomcat.util.net.SecureNioChannel:long write(java.nio.ByteBuffer[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.NioChannel:long write(java.nio.ByteBuffer[])",
            "org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper$NioOperationState:void run()"
        ]
    },
    "org.apache.catalina.core.StandardThreadExecutor:void execute(java.lang.Runnable,long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tomcat.util.threads.ThreadPoolExecutor:void execute(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.StandardThreadExecutor:void execute(java.lang.Runnable)",
            "org.apache.tomcat.util.net.AbstractEndpoint:boolean processSocket(org.apache.tomcat.util.net.SocketWrapperBase,org.apache.tomcat.util.net.SocketEvent,boolean)",
            "org.apache.tomcat.util.net.AprEndpoint:boolean setSocketOptions(java.lang.Long)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2Acceptor:void completed(java.nio.channels.AsynchronousSocketChannel,java.lang.Void)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2Acceptor:void failed(java.lang.Throwable,java.lang.Void)",
            "org.apache.tomcat.util.net.Nio2Endpoint$SocketProcessor:void doRun()",
            "org.apache.tomcat.util.net.Nio2Endpoint:void startAcceptorThread()",
            "org.apache.tomcat.util.net.Nio2Endpoint:void resume()",
            "org.apache.tomcat.util.net.Nio2Endpoint:void stopInternal()",
            "org.apache.tomcat.util.net.SocketWrapperBase$OperationState:boolean process()",
            "org.apache.tomcat.util.net.SocketWrapperBase:void execute(java.lang.Runnable)"
        ]
    },
    "org.apache.coyote.AbstractProcessor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState dispatch(org.apache.tomcat.util.net.SocketEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProcessorLight:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState process(org.apache.tomcat.util.net.SocketWrapperBase,org.apache.tomcat.util.net.SocketEvent)"
        ]
    },
    "org.apache.coyote.AbstractProcessor:void parseHost(org.apache.tomcat.util.buf.MessageBytes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.ajp.AjpProcessor:void prepareRequest()",
            "org.apache.coyote.http11.Http11Processor:void prepareRequest()"
        ]
    },
    "org.apache.coyote.AbstractProcessor:void handleIOException(java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProcessor:void action(org.apache.coyote.ActionCode,java.lang.Object)"
        ]
    },
    "org.apache.coyote.ajp.AjpProcessor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState service(org.apache.tomcat.util.net.SocketWrapperBase)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProcessorLight:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState process(org.apache.tomcat.util.net.SocketWrapperBase,org.apache.tomcat.util.net.SocketEvent)",
            "org.apache.coyote.AbstractProcessorLight:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState checkForPipelinedData(org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState,org.apache.tomcat.util.net.SocketWrapperBase)"
        ]
    },
    "org.apache.coyote.ajp.AjpProcessor:void prepareRequest()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.ajp.AjpProcessor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState service(org.apache.tomcat.util.net.SocketWrapperBase)"
        ]
    },
    "org.apache.coyote.ajp.AjpProcessor:void populateHost()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProcessor:void parseHost(org.apache.tomcat.util.buf.MessageBytes)"
        ]
    },
    "org.apache.coyote.ajp.AjpProcessor:void access$400(org.apache.coyote.ajp.AjpProcessor,org.apache.coyote.ErrorState,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.ajp.AjpProcessor$SocketOutputBuffer:int doWrite(java.nio.ByteBuffer)"
        ]
    },
    "org.apache.coyote.ajp.AjpProcessor:void access$700(org.apache.coyote.ajp.AjpProcessor,org.apache.coyote.ErrorState,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.ajp.AjpProcessor$SocketOutputBuffer:int doWrite(java.nio.ByteBuffer)"
        ]
    },
    "org.apache.coyote.http11.Http11Processor:boolean handleIncompleteRequestLineRead()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11Processor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState service(org.apache.tomcat.util.net.SocketWrapperBase)"
        ]
    },
    "org.apache.coyote.http11.Http11Processor:void prepareRequestProtocol()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11Processor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState service(org.apache.tomcat.util.net.SocketWrapperBase)"
        ]
    },
    "org.apache.coyote.http11.Http11Processor:void badRequest(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11Processor:void prepareRequest()"
        ]
    },
    "org.apache.coyote.http11.Http11Processor:void endRequest()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11Processor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState service(org.apache.tomcat.util.net.SocketWrapperBase)",
            "org.apache.coyote.http11.Http11Processor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState dispatchEndRequest()"
        ]
    },
    "org.apache.coyote.http11.Http11Processor:void ack(org.apache.coyote.ContinueResponseTiming)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProcessor:void action(org.apache.coyote.ActionCode,java.lang.Object)"
        ]
    },
    "org.apache.coyote.http11.Http11Processor:org.apache.tomcat.util.net.SendfileState processSendfile(org.apache.tomcat.util.net.SocketWrapperBase)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11Processor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState service(org.apache.tomcat.util.net.SocketWrapperBase)"
        ]
    },
    "org.apache.coyote.http2.StreamProcessor:void ack(org.apache.coyote.ContinueResponseTiming)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProcessor:void action(org.apache.coyote.ActionCode,java.lang.Object)"
        ]
    },
    "org.apache.coyote.http2.StreamProcessor:void doPush(org.apache.coyote.Request)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProcessor:void action(org.apache.coyote.ActionCode,java.lang.Object)"
        ]
    },
    "org.apache.coyote.http2.StreamProcessor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState service(org.apache.tomcat.util.net.SocketWrapperBase)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProcessorLight:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState process(org.apache.tomcat.util.net.SocketWrapperBase,org.apache.tomcat.util.net.SocketEvent)",
            "org.apache.coyote.AbstractProcessorLight:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState checkForPipelinedData(org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState,org.apache.tomcat.util.net.SocketWrapperBase)"
        ]
    },
    "org.apache.coyote.Request:void action(org.apache.coyote.ActionCode,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.AuthenticatorBase:java.security.cert.X509Certificate[] getRequestCertificates(org.apache.catalina.connector.Request)",
            "org.apache.catalina.authenticator.FormAuthenticator:boolean restoreRequest(org.apache.catalina.connector.Request,org.apache.catalina.Session)",
            "org.apache.catalina.connector.InputBuffer:int available()",
            "org.apache.catalina.connector.InputBuffer:boolean isReady()",
            "org.apache.catalina.connector.Request$8:java.lang.Object get(org.apache.catalina.connector.Request,java.lang.String)",
            "org.apache.catalina.connector.Request$9:java.lang.Object get(org.apache.catalina.connector.Request,java.lang.String)",
            "org.apache.catalina.connector.Request:java.lang.Object getAttribute(java.lang.String)",
            "org.apache.catalina.connector.Request:java.lang.String getRemoteAddr()",
            "org.apache.catalina.connector.Request:java.lang.String getPeerAddr()",
            "org.apache.catalina.connector.Request:java.lang.String getRemoteHost()",
            "org.apache.catalina.connector.Request:int getRemotePort()",
            "org.apache.catalina.connector.Request:java.lang.String getLocalName()",
            "org.apache.catalina.connector.Request:java.lang.String getLocalAddr()",
            "org.apache.catalina.connector.Request:int getLocalPort()",
            "org.apache.catalina.connector.Request:boolean isAsyncDispatching()",
            "org.apache.catalina.connector.Request:boolean isAsyncCompleting()",
            "org.apache.catalina.connector.Request:boolean isAsync()",
            "org.apache.catalina.connector.Request:jakarta.servlet.http.PushBuilder newPushBuilder(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.connector.Request:jakarta.servlet.http.HttpUpgradeHandler upgrade(java.lang.Class)",
            "org.apache.catalina.connector.Request:void checkSwallowInput()",
            "org.apache.catalina.core.ApplicationPushBuilder:void push()",
            "org.apache.catalina.core.AsyncContextImpl$AsyncRunnable:void run()",
            "org.apache.catalina.core.AsyncContextImpl$RunnableWrapper:void run()",
            "org.apache.catalina.core.AsyncContextImpl:void complete()",
            "org.apache.catalina.core.AsyncContextImpl:boolean timeout()",
            "org.apache.catalina.core.AsyncContextImpl:void dispatch(jakarta.servlet.ServletContext,java.lang.String)",
            "org.apache.catalina.core.AsyncContextImpl:void start(java.lang.Runnable)",
            "org.apache.catalina.core.AsyncContextImpl:boolean isStarted()",
            "org.apache.catalina.core.AsyncContextImpl:void setStarted(org.apache.catalina.Context,jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,boolean)",
            "org.apache.catalina.core.AsyncContextImpl:void setTimeout(long)",
            "org.apache.catalina.core.AsyncContextImpl:void setErrorState(java.lang.Throwable,boolean)",
            "org.apache.catalina.valves.AbstractAccessLogValve$ConnectionStatusElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.coyote.Request:void setReadListener(jakarta.servlet.ReadListener)",
            "org.apache.coyote.Request:boolean checkRegisterForRead()",
            "org.apache.coyote.Request:boolean isTrailerFieldsReady()",
            "org.apache.coyote.Request:boolean isFinished()",
            "org.apache.coyote.Request:int doRead(org.apache.tomcat.util.net.ApplicationBufferHandler)",
            "org.apache.coyote.RequestInfo:java.lang.String getRemoteAddr()",
            "org.apache.coyote.RequestInfo:java.lang.String getPeerAddr()",
            "org.apache.coyote.http11.Http11Processor:void populatePort()",
            "org.apache.coyote.http2.Stream$StreamInputBuffer:void onDataAvailable()"
        ]
    },
    "org.apache.coyote.Response:void action(org.apache.coyote.ActionCode,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.CoyoteAdapter:boolean asyncDispatch(org.apache.coyote.Request,org.apache.coyote.Response,org.apache.tomcat.util.net.SocketEvent)",
            "org.apache.catalina.connector.CoyoteAdapter:void service(org.apache.coyote.Request,org.apache.coyote.Response)",
            "org.apache.catalina.connector.CoyoteAdapter:boolean postParseRequest(org.apache.coyote.Request,org.apache.catalina.connector.Request,org.apache.coyote.Response,org.apache.catalina.connector.Response)",
            "org.apache.catalina.connector.OutputBuffer:void close()",
            "org.apache.catalina.connector.OutputBuffer:void doFlush(boolean)",
            "org.apache.catalina.connector.Response:void sendAcknowledgement(org.apache.coyote.ContinueResponseTiming)",
            "org.apache.catalina.core.StandardHostValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.ErrorReportValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.ErrorReportValve:void report(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,java.lang.Throwable)",
            "org.apache.catalina.valves.JsonErrorReportValve:void report(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,java.lang.Throwable)",
            "org.apache.coyote.Response:void setTrailerFields(java.util.function.Supplier)",
            "org.apache.coyote.Response:void sendHeaders()",
            "org.apache.coyote.Response:long getBytesWritten(boolean)",
            "org.apache.coyote.Response:void setWriteListener(jakarta.servlet.WriteListener)",
            "org.apache.coyote.Response:boolean checkRegisterForWrite()",
            "org.apache.coyote.http11.Http11OutputBuffer$SocketOutputBuffer:int doWrite(java.nio.ByteBuffer)",
            "org.apache.coyote.http11.Http11OutputBuffer:int doWrite(java.nio.ByteBuffer)",
            "org.apache.coyote.http2.WindowAllocationManager:void notify(int)"
        ]
    },
    "org.apache.coyote.AbstractProcessor:void timeoutAsync(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProtocol:void stop()",
            "org.apache.coyote.AbstractProtocol:void lambda$startAsyncTimeout$1()"
        ]
    },
    "org.apache.coyote.http2.Http2UpgradeHandler:void processStreamOnContainerThread(org.apache.coyote.http2.Stream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2UpgradeHandler:void processConnection(jakarta.servlet.http.WebConnection,org.apache.coyote.http2.Stream)",
            "org.apache.coyote.http2.Http2UpgradeHandler:void push(org.apache.coyote.Request,org.apache.coyote.http2.Stream)",
            "org.apache.coyote.http2.Http2UpgradeHandler:void headersEnd(int)"
        ]
    },
    "org.apache.tomcat.util.net.AprEndpoint$Poller:void maintain()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.AprEndpoint$Poller:void run()"
        ]
    },
    "org.apache.tomcat.util.net.AprEndpoint:boolean processSocket(long,org.apache.tomcat.util.net.SocketEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.AprEndpoint$Poller:void run()",
            "org.apache.tomcat.util.net.AprEndpoint$Sendfile:void run()"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$1:void completed(java.lang.Integer,org.apache.tomcat.util.net.Nio2Endpoint$SendfileData)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$1:void completed(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$1:void failed(java.lang.Throwable,org.apache.tomcat.util.net.Nio2Endpoint$SendfileData)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$1:void completed(java.lang.Integer,org.apache.tomcat.util.net.Nio2Endpoint$SendfileData)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$1:void failed(java.lang.Throwable,java.lang.Object)"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$2:void completed(java.lang.Integer,java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$2:void completed(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$2:void failed(java.lang.Throwable,java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$2:void completed(java.lang.Integer,java.nio.ByteBuffer)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$2:void failed(java.lang.Throwable,java.lang.Object)"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$3:void completed(java.lang.Integer,java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$3:void completed(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$3:void failed(java.lang.Throwable,java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$3:void completed(java.lang.Integer,java.nio.ByteBuffer)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$3:void failed(java.lang.Throwable,java.lang.Object)"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$4:void completed(java.lang.Long,java.nio.ByteBuffer[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$4:void completed(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$4:void failed(java.lang.Throwable,java.nio.ByteBuffer[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$4:void completed(java.lang.Long,java.nio.ByteBuffer[])",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$4:void failed(java.lang.Throwable,java.lang.Object)"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:void registerReadInterest()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProtocol$ConnectionHandler:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState process(org.apache.tomcat.util.net.SocketWrapperBase,org.apache.tomcat.util.net.SocketEvent)",
            "org.apache.coyote.AbstractProtocol$ConnectionHandler:void longPoll(org.apache.tomcat.util.net.SocketWrapperBase,org.apache.coyote.Processor)",
            "org.apache.coyote.ajp.AjpProcessor:void registerReadInterest()",
            "org.apache.coyote.http11.Http11Processor:void registerReadInterest()",
            "org.apache.coyote.http11.upgrade.UpgradeServletInputStream:void setReadListener(jakarta.servlet.ReadListener)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$1:void completed(java.lang.Integer,org.apache.tomcat.util.net.Nio2Endpoint$SendfileData)",
            "org.apache.tomcat.util.net.NioEndpoint$SocketProcessor:void doRun()"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:void registerWriteInterest()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11OutputBuffer:boolean isReady()",
            "org.apache.coyote.http11.Http11OutputBuffer:void registerWriteInterest()",
            "org.apache.coyote.http11.upgrade.UpgradeServletOutputStream:void setWriteListener(jakarta.servlet.WriteListener)",
            "org.apache.coyote.http11.upgrade.UpgradeServletOutputStream:void flushInternal(boolean,boolean)",
            "org.apache.coyote.http2.Http2UpgradeHandler:void processWrites()",
            "org.apache.tomcat.util.net.NioEndpoint$SocketProcessor:void doRun()",
            "org.apache.tomcat.util.net.SocketWrapperBase:boolean isReadyForWrite()"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint:boolean setSocketOptions(java.nio.channels.AsynchronousSocketChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2Acceptor:void completed(java.nio.channels.AsynchronousSocketChannel,java.lang.Void)",
            "org.apache.tomcat.util.net.Nio2Endpoint:boolean setSocketOptions(java.lang.Object)"
        ]
    },
    "org.apache.tomcat.util.net.NioEndpoint$Poller:void add(org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper:void registerReadInterest()",
            "org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper:void registerWriteInterest()",
            "org.apache.tomcat.util.net.NioEndpoint$Poller:org.apache.tomcat.util.net.SendfileState processSendfile(java.nio.channels.SelectionKey,org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper,boolean)"
        ]
    },
    "org.apache.tomcat.util.net.NioEndpoint$Poller:void processKey(java.nio.channels.SelectionKey,org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.NioEndpoint$Poller:void run()"
        ]
    },
    "org.apache.tomcat.util.net.NioEndpoint$Poller:org.apache.tomcat.util.net.SendfileState processSendfile(java.nio.channels.SelectionKey,org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper:org.apache.tomcat.util.net.SendfileState processSendfile(org.apache.tomcat.util.net.SendfileDataBase)",
            "org.apache.tomcat.util.net.NioEndpoint$Poller:void processKey(java.nio.channels.SelectionKey,org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper)"
        ]
    },
    "org.apache.tomcat.util.net.NioEndpoint$Poller:void timeout(int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.NioEndpoint$Poller:void run()"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel$HandshakeReadCompletionHandler:void completed(java.lang.Integer,org.apache.tomcat.util.net.SocketWrapperBase)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SecureNio2Channel$HandshakeReadCompletionHandler:void completed(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel$HandshakeReadCompletionHandler:void failed(java.lang.Throwable,org.apache.tomcat.util.net.SocketWrapperBase)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SecureNio2Channel$HandshakeReadCompletionHandler:void completed(java.lang.Integer,org.apache.tomcat.util.net.SocketWrapperBase)",
            "org.apache.tomcat.util.net.SecureNio2Channel$HandshakeReadCompletionHandler:void failed(java.lang.Throwable,java.lang.Object)"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel$HandshakeWriteCompletionHandler:void completed(java.lang.Integer,org.apache.tomcat.util.net.SocketWrapperBase)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SecureNio2Channel$HandshakeWriteCompletionHandler:void completed(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel$HandshakeWriteCompletionHandler:void failed(java.lang.Throwable,org.apache.tomcat.util.net.SocketWrapperBase)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SecureNio2Channel$HandshakeWriteCompletionHandler:void completed(java.lang.Integer,org.apache.tomcat.util.net.SocketWrapperBase)",
            "org.apache.tomcat.util.net.SecureNio2Channel$HandshakeWriteCompletionHandler:void failed(java.lang.Throwable,java.lang.Object)"
        ]
    },
    "org.apache.tomcat.util.net.SocketWrapperBase:void processSocket(org.apache.tomcat.util.net.SocketEvent,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProcessor:void processSocketEvent(org.apache.tomcat.util.net.SocketEvent,boolean)",
            "org.apache.coyote.AbstractProcessor:void executeDispatches()",
            "org.apache.coyote.http2.Http2UpgradeHandler:void timeoutAsync(long)"
        ]
    },
    "org.apache.catalina.authenticator.AuthenticatorBase:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.AuthenticatorBase:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.authenticator.SingleSignOn:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.connector.CoyoteAdapter:boolean asyncDispatch(org.apache.coyote.Request,org.apache.coyote.Response,org.apache.tomcat.util.net.SocketEvent)",
            "org.apache.catalina.connector.CoyoteAdapter:void service(org.apache.coyote.Request,org.apache.coyote.Response)",
            "org.apache.catalina.core.StandardContextValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.core.StandardEngineValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.core.StandardHostValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.AbstractAccessLogValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.CrawlerSessionManagerValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.ErrorReportValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.HealthCheckValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.JDBCAccessLogValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.LoadBalancerDrainingValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.PersistentValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.RemoteIpValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.RequestFilterValve:void process(java.lang.String,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.RequestFilterValve:void denyRequest(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.SSLValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.SemaphoreValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.StuckThreadDetectionValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.rewrite.RewriteValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)"
        ]
    },
    "org.apache.catalina.authenticator.SingleSignOn:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.AuthenticatorBase:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.authenticator.SingleSignOn:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.connector.CoyoteAdapter:boolean asyncDispatch(org.apache.coyote.Request,org.apache.coyote.Response,org.apache.tomcat.util.net.SocketEvent)",
            "org.apache.catalina.connector.CoyoteAdapter:void service(org.apache.coyote.Request,org.apache.coyote.Response)",
            "org.apache.catalina.core.StandardContextValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.core.StandardEngineValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.core.StandardHostValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.AbstractAccessLogValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.CrawlerSessionManagerValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.ErrorReportValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.HealthCheckValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.JDBCAccessLogValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.LoadBalancerDrainingValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.PersistentValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.RemoteIpValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.RequestFilterValve:void process(java.lang.String,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.RequestFilterValve:void denyRequest(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.SSLValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.SemaphoreValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.StuckThreadDetectionValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.rewrite.RewriteValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)"
        ]
    },
    "org.apache.catalina.connector.CoyoteAdapter:boolean asyncDispatch(org.apache.coyote.Request,org.apache.coyote.Response,org.apache.tomcat.util.net.SocketEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProcessor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState dispatch(org.apache.tomcat.util.net.SocketEvent)"
        ]
    },
    "org.apache.catalina.connector.CoyoteAdapter:void service(org.apache.coyote.Request,org.apache.coyote.Response)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.ajp.AjpProcessor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState service(org.apache.tomcat.util.net.SocketWrapperBase)",
            "org.apache.coyote.http11.Http11Processor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState service(org.apache.tomcat.util.net.SocketWrapperBase)",
            "org.apache.coyote.http2.StreamProcessor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState service(org.apache.tomcat.util.net.SocketWrapperBase)"
        ]
    },
    "org.apache.catalina.core.StandardContextValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.AuthenticatorBase:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.authenticator.SingleSignOn:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.connector.CoyoteAdapter:boolean asyncDispatch(org.apache.coyote.Request,org.apache.coyote.Response,org.apache.tomcat.util.net.SocketEvent)",
            "org.apache.catalina.connector.CoyoteAdapter:void service(org.apache.coyote.Request,org.apache.coyote.Response)",
            "org.apache.catalina.core.StandardContextValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.core.StandardEngineValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.core.StandardHostValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.AbstractAccessLogValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.CrawlerSessionManagerValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.ErrorReportValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.HealthCheckValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.JDBCAccessLogValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.LoadBalancerDrainingValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.PersistentValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.RemoteIpValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.RequestFilterValve:void process(java.lang.String,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.RequestFilterValve:void denyRequest(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.SSLValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.SemaphoreValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.StuckThreadDetectionValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.rewrite.RewriteValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)"
        ]
    },
    "org.apache.catalina.core.StandardEngineValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.AuthenticatorBase:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.authenticator.SingleSignOn:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.connector.CoyoteAdapter:boolean asyncDispatch(org.apache.coyote.Request,org.apache.coyote.Response,org.apache.tomcat.util.net.SocketEvent)",
            "org.apache.catalina.connector.CoyoteAdapter:void service(org.apache.coyote.Request,org.apache.coyote.Response)",
            "org.apache.catalina.core.StandardContextValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.core.StandardEngineValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.core.StandardHostValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.AbstractAccessLogValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.CrawlerSessionManagerValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.ErrorReportValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.HealthCheckValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.JDBCAccessLogValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.LoadBalancerDrainingValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.PersistentValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.RemoteIpValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.RequestFilterValve:void process(java.lang.String,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.RequestFilterValve:void denyRequest(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.SSLValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.SemaphoreValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.StuckThreadDetectionValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.rewrite.RewriteValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)"
        ]
    },
    "org.apache.catalina.core.StandardHostValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.AuthenticatorBase:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.authenticator.SingleSignOn:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.connector.CoyoteAdapter:boolean asyncDispatch(org.apache.coyote.Request,org.apache.coyote.Response,org.apache.tomcat.util.net.SocketEvent)",
            "org.apache.catalina.connector.CoyoteAdapter:void service(org.apache.coyote.Request,org.apache.coyote.Response)",
            "org.apache.catalina.core.StandardContextValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.core.StandardEngineValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.core.StandardHostValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.AbstractAccessLogValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.CrawlerSessionManagerValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.ErrorReportValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.HealthCheckValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.JDBCAccessLogValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.LoadBalancerDrainingValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.PersistentValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.RemoteIpValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.RequestFilterValve:void process(java.lang.String,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.RequestFilterValve:void denyRequest(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.SSLValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.SemaphoreValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.StuckThreadDetectionValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.rewrite.RewriteValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)"
        ]
    },
    "org.apache.catalina.valves.AbstractAccessLogValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.AuthenticatorBase:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.authenticator.SingleSignOn:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.connector.CoyoteAdapter:boolean asyncDispatch(org.apache.coyote.Request,org.apache.coyote.Response,org.apache.tomcat.util.net.SocketEvent)",
            "org.apache.catalina.connector.CoyoteAdapter:void service(org.apache.coyote.Request,org.apache.coyote.Response)",
            "org.apache.catalina.core.StandardContextValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.core.StandardEngineValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.core.StandardHostValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.AbstractAccessLogValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.CrawlerSessionManagerValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.ErrorReportValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.HealthCheckValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.JDBCAccessLogValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.LoadBalancerDrainingValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.PersistentValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.RemoteIpValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.RequestFilterValve:void process(java.lang.String,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.RequestFilterValve:void denyRequest(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.SSLValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.SemaphoreValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.StuckThreadDetectionValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.rewrite.RewriteValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)"
        ]
    },
    "org.apache.catalina.valves.CrawlerSessionManagerValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.AuthenticatorBase:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.authenticator.SingleSignOn:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.connector.CoyoteAdapter:boolean asyncDispatch(org.apache.coyote.Request,org.apache.coyote.Response,org.apache.tomcat.util.net.SocketEvent)",
            "org.apache.catalina.connector.CoyoteAdapter:void service(org.apache.coyote.Request,org.apache.coyote.Response)",
            "org.apache.catalina.core.StandardContextValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.core.StandardEngineValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.core.StandardHostValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.AbstractAccessLogValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.CrawlerSessionManagerValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.ErrorReportValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.HealthCheckValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.JDBCAccessLogValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.LoadBalancerDrainingValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.PersistentValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.RemoteIpValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.RequestFilterValve:void process(java.lang.String,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.RequestFilterValve:void denyRequest(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.SSLValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.SemaphoreValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.StuckThreadDetectionValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.rewrite.RewriteValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)"
        ]
    },
    "org.apache.catalina.valves.ErrorReportValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.AuthenticatorBase:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.authenticator.SingleSignOn:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.connector.CoyoteAdapter:boolean asyncDispatch(org.apache.coyote.Request,org.apache.coyote.Response,org.apache.tomcat.util.net.SocketEvent)",
            "org.apache.catalina.connector.CoyoteAdapter:void service(org.apache.coyote.Request,org.apache.coyote.Response)",
            "org.apache.catalina.core.StandardContextValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.core.StandardEngineValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.core.StandardHostValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.AbstractAccessLogValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.CrawlerSessionManagerValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.ErrorReportValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.HealthCheckValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.JDBCAccessLogValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.LoadBalancerDrainingValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.PersistentValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.RemoteIpValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.RequestFilterValve:void process(java.lang.String,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.RequestFilterValve:void denyRequest(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.SSLValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.SemaphoreValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.StuckThreadDetectionValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.rewrite.RewriteValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)"
        ]
    },
    "org.apache.catalina.valves.HealthCheckValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.AuthenticatorBase:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.authenticator.SingleSignOn:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.connector.CoyoteAdapter:boolean asyncDispatch(org.apache.coyote.Request,org.apache.coyote.Response,org.apache.tomcat.util.net.SocketEvent)",
            "org.apache.catalina.connector.CoyoteAdapter:void service(org.apache.coyote.Request,org.apache.coyote.Response)",
            "org.apache.catalina.core.StandardContextValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.core.StandardEngineValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.core.StandardHostValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.AbstractAccessLogValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.CrawlerSessionManagerValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.ErrorReportValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.HealthCheckValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.JDBCAccessLogValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.LoadBalancerDrainingValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.PersistentValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.RemoteIpValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.RequestFilterValve:void process(java.lang.String,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.RequestFilterValve:void denyRequest(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.SSLValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.SemaphoreValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.StuckThreadDetectionValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.rewrite.RewriteValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)"
        ]
    },
    "org.apache.catalina.valves.JDBCAccessLogValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.AuthenticatorBase:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.authenticator.SingleSignOn:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.connector.CoyoteAdapter:boolean asyncDispatch(org.apache.coyote.Request,org.apache.coyote.Response,org.apache.tomcat.util.net.SocketEvent)",
            "org.apache.catalina.connector.CoyoteAdapter:void service(org.apache.coyote.Request,org.apache.coyote.Response)",
            "org.apache.catalina.core.StandardContextValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.core.StandardEngineValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.core.StandardHostValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.AbstractAccessLogValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.CrawlerSessionManagerValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.ErrorReportValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.HealthCheckValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.JDBCAccessLogValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.LoadBalancerDrainingValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.PersistentValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.RemoteIpValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.RequestFilterValve:void process(java.lang.String,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.RequestFilterValve:void denyRequest(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.SSLValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.SemaphoreValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.StuckThreadDetectionValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.rewrite.RewriteValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)"
        ]
    },
    "org.apache.catalina.valves.LoadBalancerDrainingValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.AuthenticatorBase:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.authenticator.SingleSignOn:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.connector.CoyoteAdapter:boolean asyncDispatch(org.apache.coyote.Request,org.apache.coyote.Response,org.apache.tomcat.util.net.SocketEvent)",
            "org.apache.catalina.connector.CoyoteAdapter:void service(org.apache.coyote.Request,org.apache.coyote.Response)",
            "org.apache.catalina.core.StandardContextValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.core.StandardEngineValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.core.StandardHostValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.AbstractAccessLogValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.CrawlerSessionManagerValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.ErrorReportValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.HealthCheckValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.JDBCAccessLogValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.LoadBalancerDrainingValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.PersistentValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.RemoteIpValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.RequestFilterValve:void process(java.lang.String,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.RequestFilterValve:void denyRequest(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.SSLValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.SemaphoreValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.StuckThreadDetectionValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.rewrite.RewriteValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)"
        ]
    },
    "org.apache.catalina.valves.PersistentValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.AuthenticatorBase:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.authenticator.SingleSignOn:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.connector.CoyoteAdapter:boolean asyncDispatch(org.apache.coyote.Request,org.apache.coyote.Response,org.apache.tomcat.util.net.SocketEvent)",
            "org.apache.catalina.connector.CoyoteAdapter:void service(org.apache.coyote.Request,org.apache.coyote.Response)",
            "org.apache.catalina.core.StandardContextValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.core.StandardEngineValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.core.StandardHostValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.AbstractAccessLogValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.CrawlerSessionManagerValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.ErrorReportValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.HealthCheckValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.JDBCAccessLogValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.LoadBalancerDrainingValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.PersistentValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.RemoteIpValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.RequestFilterValve:void process(java.lang.String,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.RequestFilterValve:void denyRequest(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.SSLValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.SemaphoreValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.StuckThreadDetectionValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.rewrite.RewriteValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)"
        ]
    },
    "org.apache.catalina.valves.RemoteIpValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.AuthenticatorBase:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.authenticator.SingleSignOn:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.connector.CoyoteAdapter:boolean asyncDispatch(org.apache.coyote.Request,org.apache.coyote.Response,org.apache.tomcat.util.net.SocketEvent)",
            "org.apache.catalina.connector.CoyoteAdapter:void service(org.apache.coyote.Request,org.apache.coyote.Response)",
            "org.apache.catalina.core.StandardContextValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.core.StandardEngineValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.core.StandardHostValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.AbstractAccessLogValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.CrawlerSessionManagerValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.ErrorReportValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.HealthCheckValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.JDBCAccessLogValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.LoadBalancerDrainingValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.PersistentValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.RemoteIpValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.RequestFilterValve:void process(java.lang.String,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.RequestFilterValve:void denyRequest(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.SSLValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.SemaphoreValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.StuckThreadDetectionValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.rewrite.RewriteValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)"
        ]
    },
    "org.apache.catalina.valves.RequestFilterValve:void process(java.lang.String,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.valves.RemoteAddrValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.RemoteCIDRValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.RemoteHostValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)"
        ]
    },
    "org.apache.catalina.valves.RequestFilterValve:void denyRequest(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.valves.RequestFilterValve:void process(java.lang.String,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)"
        ]
    },
    "org.apache.catalina.valves.SSLValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.AuthenticatorBase:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.authenticator.SingleSignOn:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.connector.CoyoteAdapter:boolean asyncDispatch(org.apache.coyote.Request,org.apache.coyote.Response,org.apache.tomcat.util.net.SocketEvent)",
            "org.apache.catalina.connector.CoyoteAdapter:void service(org.apache.coyote.Request,org.apache.coyote.Response)",
            "org.apache.catalina.core.StandardContextValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.core.StandardEngineValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.core.StandardHostValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.AbstractAccessLogValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.CrawlerSessionManagerValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.ErrorReportValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.HealthCheckValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.JDBCAccessLogValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.LoadBalancerDrainingValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.PersistentValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.RemoteIpValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.RequestFilterValve:void process(java.lang.String,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.RequestFilterValve:void denyRequest(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.SSLValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.SemaphoreValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.StuckThreadDetectionValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.rewrite.RewriteValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)"
        ]
    },
    "org.apache.catalina.valves.SemaphoreValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.AuthenticatorBase:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.authenticator.SingleSignOn:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.connector.CoyoteAdapter:boolean asyncDispatch(org.apache.coyote.Request,org.apache.coyote.Response,org.apache.tomcat.util.net.SocketEvent)",
            "org.apache.catalina.connector.CoyoteAdapter:void service(org.apache.coyote.Request,org.apache.coyote.Response)",
            "org.apache.catalina.core.StandardContextValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.core.StandardEngineValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.core.StandardHostValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.AbstractAccessLogValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.CrawlerSessionManagerValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.ErrorReportValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.HealthCheckValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.JDBCAccessLogValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.LoadBalancerDrainingValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.PersistentValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.RemoteIpValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.RequestFilterValve:void process(java.lang.String,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.RequestFilterValve:void denyRequest(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.SSLValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.SemaphoreValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.StuckThreadDetectionValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.rewrite.RewriteValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)"
        ]
    },
    "org.apache.catalina.valves.StuckThreadDetectionValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.AuthenticatorBase:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.authenticator.SingleSignOn:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.connector.CoyoteAdapter:boolean asyncDispatch(org.apache.coyote.Request,org.apache.coyote.Response,org.apache.tomcat.util.net.SocketEvent)",
            "org.apache.catalina.connector.CoyoteAdapter:void service(org.apache.coyote.Request,org.apache.coyote.Response)",
            "org.apache.catalina.core.StandardContextValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.core.StandardEngineValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.core.StandardHostValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.AbstractAccessLogValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.CrawlerSessionManagerValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.ErrorReportValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.HealthCheckValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.JDBCAccessLogValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.LoadBalancerDrainingValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.PersistentValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.RemoteIpValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.RequestFilterValve:void process(java.lang.String,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.RequestFilterValve:void denyRequest(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.SSLValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.SemaphoreValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.StuckThreadDetectionValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.rewrite.RewriteValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)"
        ]
    },
    "org.apache.catalina.valves.rewrite.RewriteValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.AuthenticatorBase:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.authenticator.SingleSignOn:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.connector.CoyoteAdapter:boolean asyncDispatch(org.apache.coyote.Request,org.apache.coyote.Response,org.apache.tomcat.util.net.SocketEvent)",
            "org.apache.catalina.connector.CoyoteAdapter:void service(org.apache.coyote.Request,org.apache.coyote.Response)",
            "org.apache.catalina.core.StandardContextValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.core.StandardEngineValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.core.StandardHostValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.AbstractAccessLogValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.CrawlerSessionManagerValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.ErrorReportValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.HealthCheckValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.JDBCAccessLogValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.LoadBalancerDrainingValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.PersistentValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.RemoteIpValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.RequestFilterValve:void process(java.lang.String,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.RequestFilterValve:void denyRequest(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.SSLValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.SemaphoreValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.StuckThreadDetectionValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.rewrite.RewriteValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$Nio2Acceptor:void completed(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SecureNio2Channel$1:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$2:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$3:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$4:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void read(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void read(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SocketWrapperBase$VectoredIOCompletionHandler:void completed(java.lang.Long,org.apache.tomcat.util.net.SocketWrapperBase$OperationState)"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$Nio2Acceptor:void failed(java.lang.Throwable,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2AsyncUpgradeHandler$SendfileCompletionHandler:void failed(java.lang.Throwable,org.apache.coyote.http2.SendfileData)",
            "org.apache.tomcat.util.net.Nio2Channel$3:void read(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.Nio2Channel$3:void read(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.Nio2Channel$3:void write(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.Nio2Channel$3:void write(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SecureNio2Channel$1:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$2:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$3:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$4:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void write(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void write(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SocketWrapperBase$VectoredIOCompletionHandler:void failed(java.lang.Throwable,org.apache.tomcat.util.net.SocketWrapperBase$OperationState)",
            "org.apache.tomcat.util.net.SocketWrapperBase:org.apache.tomcat.util.net.SocketWrapperBase$CompletionState vectoredOperation(boolean,java.nio.ByteBuffer[],int,int,org.apache.tomcat.util.net.SocketWrapperBase$BlockingMode,long,java.util.concurrent.TimeUnit,java.lang.Object,org.apache.tomcat.util.net.SocketWrapperBase$CompletionCheck,java.nio.channels.CompletionHandler)"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint:void startInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.AbstractEndpoint:void start()"
        ]
    },
    "org.apache.coyote.AbstractProtocol:void resume()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.Connector:void resume()"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$Nio2OperationState$1:void completed(java.lang.Long,java.nio.ByteBuffer[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$Nio2OperationState$1:void completed(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.tomcat.util.net.Acceptor:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.AsyncContextImpl$RunnableWrapper:void run()",
            "org.apache.catalina.core.AsyncContextImpl:void doInternalDispatch()",
            "org.apache.catalina.core.StandardThreadExecutor:void execute(java.lang.Runnable)",
            "org.apache.coyote.AbstractProcessor:void execute(java.lang.Runnable)",
            "org.apache.coyote.AsyncStateMachine:void asyncRun(java.lang.Runnable)",
            "org.apache.tomcat.util.net.Nio2Endpoint:void startAcceptorThread()",
            "org.apache.tomcat.util.net.Nio2Endpoint:void resume()",
            "org.apache.tomcat.util.net.Nio2Endpoint:void stopInternal()",
            "org.apache.tomcat.util.net.SecureNio2Channel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()",
            "org.apache.tomcat.util.net.SecureNioChannel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()",
            "org.apache.tomcat.util.net.SocketWrapperBase:void execute(java.lang.Runnable)",
            "org.apache.tomcat.util.threads.InlineExecutorService:void execute(java.lang.Runnable)",
            "org.apache.tomcat.util.threads.ScheduledThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.tomcat.util.threads.TaskThread$WrappingRunnable:void run()",
            "org.apache.tomcat.util.threads.ThreadPoolExecutor:void execute(java.lang.Runnable,long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.apache.coyote.AbstractProtocol:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.Connector:void stopInternal()"
        ]
    },
    "org.apache.tomcat.util.net.AprEndpoint:void unbind()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.AbstractEndpoint:void bindWithCleanup()",
            "org.apache.tomcat.util.net.AbstractEndpoint:void stop()",
            "org.apache.tomcat.util.net.AbstractEndpoint:void destroy()"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint:void unbind()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.AbstractEndpoint:void bindWithCleanup()",
            "org.apache.tomcat.util.net.AbstractEndpoint:void stop()",
            "org.apache.tomcat.util.net.AbstractEndpoint:void destroy()"
        ]
    },
    "org.apache.tomcat.util.net.NioEndpoint:void unbind()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.AbstractEndpoint:void bindWithCleanup()",
            "org.apache.tomcat.util.net.AbstractEndpoint:void stop()",
            "org.apache.tomcat.util.net.AbstractEndpoint:void destroy()"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel$1:void completed(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SecureNio2Channel$1:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$2:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$3:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$4:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void read(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void read(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SocketWrapperBase$VectoredIOCompletionHandler:void completed(java.lang.Long,org.apache.tomcat.util.net.SocketWrapperBase$OperationState)"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel$2:void completed(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SecureNio2Channel$1:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$2:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$3:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$4:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void read(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void read(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SocketWrapperBase$VectoredIOCompletionHandler:void completed(java.lang.Long,org.apache.tomcat.util.net.SocketWrapperBase$OperationState)"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel$FutureRead:java.lang.Integer get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SecureNio2Channel$FutureRead:java.lang.Object get()"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel$FutureRead:java.lang.Integer get(long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SecureNio2Channel$FutureRead:java.lang.Object get(long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel$FutureWrite:void <init>(org.apache.tomcat.util.net.SecureNio2Channel,java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SecureNio2Channel$FutureWrite:void <init>(org.apache.tomcat.util.net.SecureNio2Channel,java.nio.ByteBuffer,org.apache.tomcat.util.net.SecureNio2Channel$1)"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel$FutureWrite:java.lang.Integer get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SecureNio2Channel$FutureWrite:java.lang.Integer get()",
            "org.apache.tomcat.util.net.SecureNio2Channel$FutureWrite:java.lang.Object get()"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel$FutureWrite:java.lang.Integer get(long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SecureNio2Channel$FutureWrite:java.lang.Integer get(long,java.util.concurrent.TimeUnit)",
            "org.apache.tomcat.util.net.SecureNio2Channel$FutureWrite:java.lang.Object get(long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel:int handshake()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint$SocketProcessor:void doRun()"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel:void rehandshake()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:void doClientAuth(org.apache.tomcat.util.net.SSLSupport)"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Channel:void write(java.nio.ByteBuffer,java.lang.Object,java.nio.channels.CompletionHandler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:boolean flushNonBlockingInternal(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:boolean isReadyForWrite()",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:void writeNonBlocking(byte[],int,int)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:void writeNonBlockingInternal(java.nio.ByteBuffer)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:boolean flushNonBlocking()"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:org.apache.tomcat.util.net.SendfileState processSendfile(org.apache.tomcat.util.net.SendfileDataBase)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11Processor:org.apache.tomcat.util.net.SendfileState processSendfile(org.apache.tomcat.util.net.SocketWrapperBase)"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel$3:void completed(java.lang.Integer,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SecureNio2Channel$3:void completed(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$Nio2OperationState:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.AsyncContextImpl$RunnableWrapper:void run()",
            "org.apache.catalina.core.AsyncContextImpl:void doInternalDispatch()",
            "org.apache.catalina.core.StandardThreadExecutor:void execute(java.lang.Runnable)",
            "org.apache.coyote.AbstractProcessor:void execute(java.lang.Runnable)",
            "org.apache.coyote.AsyncStateMachine:void asyncRun(java.lang.Runnable)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$Nio2OperationState:void start()",
            "org.apache.tomcat.util.net.Nio2Endpoint:void stopInternal()",
            "org.apache.tomcat.util.net.SecureNio2Channel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()",
            "org.apache.tomcat.util.net.SecureNioChannel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()",
            "org.apache.tomcat.util.net.SocketWrapperBase$OperationState:boolean process()",
            "org.apache.tomcat.util.net.SocketWrapperBase$OperationState:void start()",
            "org.apache.tomcat.util.net.SocketWrapperBase$VectoredIOCompletionHandler:void completed(java.lang.Long,org.apache.tomcat.util.net.SocketWrapperBase$OperationState)",
            "org.apache.tomcat.util.net.SocketWrapperBase:void execute(java.lang.Runnable)",
            "org.apache.tomcat.util.net.SocketWrapperBase:org.apache.tomcat.util.net.SocketWrapperBase$CompletionState vectoredOperation(boolean,java.nio.ByteBuffer[],int,int,org.apache.tomcat.util.net.SocketWrapperBase$BlockingMode,long,java.util.concurrent.TimeUnit,java.lang.Object,org.apache.tomcat.util.net.SocketWrapperBase$CompletionCheck,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.threads.InlineExecutorService:void execute(java.lang.Runnable)",
            "org.apache.tomcat.util.threads.ScheduledThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.tomcat.util.threads.TaskThread$WrappingRunnable:void run()",
            "org.apache.tomcat.util.threads.ThreadPoolExecutor:void execute(java.lang.Runnable,long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel$4:void completed(java.lang.Integer,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SecureNio2Channel$4:void completed(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.tomcat.util.net.SecureNioChannel:void rehandshake(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper:void doClientAuth(org.apache.tomcat.util.net.SSLSupport)"
        ]
    },
    "org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper:int fillReadBuffer(boolean,java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper:int read(boolean,java.nio.ByteBuffer)",
            "org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper:int fillReadBuffer(boolean)"
        ]
    },
    "org.apache.tomcat.util.net.NioChannel:long read(java.nio.ByteBuffer[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper$NioOperationState:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.AsyncContextImpl$RunnableWrapper:void run()",
            "org.apache.catalina.core.AsyncContextImpl:void doInternalDispatch()",
            "org.apache.catalina.core.StandardThreadExecutor:void execute(java.lang.Runnable)",
            "org.apache.coyote.AbstractProcessor:void execute(java.lang.Runnable)",
            "org.apache.coyote.AsyncStateMachine:void asyncRun(java.lang.Runnable)",
            "org.apache.tomcat.util.net.Nio2Endpoint:void stopInternal()",
            "org.apache.tomcat.util.net.SecureNio2Channel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()",
            "org.apache.tomcat.util.net.SecureNioChannel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()",
            "org.apache.tomcat.util.net.SocketWrapperBase$OperationState:boolean process()",
            "org.apache.tomcat.util.net.SocketWrapperBase$OperationState:void start()",
            "org.apache.tomcat.util.net.SocketWrapperBase$VectoredIOCompletionHandler:void completed(java.lang.Long,org.apache.tomcat.util.net.SocketWrapperBase$OperationState)",
            "org.apache.tomcat.util.net.SocketWrapperBase:void execute(java.lang.Runnable)",
            "org.apache.tomcat.util.net.SocketWrapperBase:org.apache.tomcat.util.net.SocketWrapperBase$CompletionState vectoredOperation(boolean,java.nio.ByteBuffer[],int,int,org.apache.tomcat.util.net.SocketWrapperBase$BlockingMode,long,java.util.concurrent.TimeUnit,java.lang.Object,org.apache.tomcat.util.net.SocketWrapperBase$CompletionCheck,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.threads.InlineExecutorService:void execute(java.lang.Runnable)",
            "org.apache.tomcat.util.threads.ScheduledThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.tomcat.util.threads.TaskThread$WrappingRunnable:void run()",
            "org.apache.tomcat.util.threads.ThreadPoolExecutor:void execute(java.lang.Runnable,long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper:void doWrite(boolean,java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SocketWrapperBase:void doWrite(boolean)"
        ]
    },
    "org.apache.tomcat.util.net.NioChannel:long write(java.nio.ByteBuffer[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.coyote.ajp.AjpProcessor$SocketOutputBuffer:int doWrite(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.Response:void doWrite(java.nio.ByteBuffer)"
        ]
    },
    "org.apache.coyote.http11.Http11Processor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState dispatchEndRequest()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProcessor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState dispatch(org.apache.tomcat.util.net.SocketEvent)"
        ]
    },
    "org.apache.catalina.authenticator.AuthenticatorBase:java.security.cert.X509Certificate[] getRequestCertificates(org.apache.catalina.connector.Request)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.AuthenticatorBase:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.authenticator.SSLAuthenticator:boolean doAuthenticate(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.authenticator.FormAuthenticator:boolean restoreRequest(org.apache.catalina.connector.Request,org.apache.catalina.Session)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.FormAuthenticator:boolean doAuthenticate(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.connector.InputBuffer:int available()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.CoyoteInputStream$PrivilegedAvailable:java.lang.Integer run()",
            "org.apache.catalina.connector.CoyoteInputStream:int available()",
            "org.apache.catalina.connector.InputBuffer:boolean ready()"
        ]
    },
    "org.apache.catalina.connector.InputBuffer:boolean isReady()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.CoyoteInputStream:boolean isReady()",
            "org.apache.catalina.connector.CoyoteInputStream:void checkNonBlockingRead()"
        ]
    },
    "org.apache.catalina.connector.Request$8:java.lang.Object get(org.apache.catalina.connector.Request,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.Request:java.lang.Object getAttribute(java.lang.String)"
        ]
    },
    "org.apache.catalina.connector.Request$9:java.lang.Object get(org.apache.catalina.connector.Request,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.Request:java.lang.Object getAttribute(java.lang.String)"
        ]
    },
    "org.apache.catalina.connector.Request:java.lang.Object getAttribute(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletRequestWrapper:java.lang.Object getAttribute(java.lang.String)",
            "org.apache.catalina.authenticator.AuthenticatorBase:java.security.cert.X509Certificate[] getRequestCertificates(org.apache.catalina.connector.Request)",
            "org.apache.catalina.authenticator.AuthenticatorBase:void register(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse,java.security.Principal,java.lang.String,java.lang.String,java.lang.String,boolean,boolean)",
            "org.apache.catalina.connector.CoyoteAdapter:boolean asyncDispatch(org.apache.coyote.Request,org.apache.coyote.Response,org.apache.tomcat.util.net.SocketEvent)",
            "org.apache.catalina.connector.CoyoteAdapter:void service(org.apache.coyote.Request,org.apache.coyote.Response)",
            "org.apache.catalina.connector.CoyoteAdapter:void parseSessionSslId(org.apache.catalina.connector.Request)",
            "org.apache.catalina.connector.Request:java.util.Enumeration getAttributeNames()",
            "org.apache.catalina.connector.Request:jakarta.servlet.RequestDispatcher getRequestDispatcher(java.lang.String)",
            "org.apache.catalina.connector.RequestFacade:java.lang.Object getAttribute(java.lang.String)",
            "org.apache.catalina.core.ApplicationDispatcher:void doForward(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)",
            "org.apache.catalina.core.ApplicationDispatcher:void processRequest(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,org.apache.catalina.core.ApplicationDispatcher$State)",
            "org.apache.catalina.core.ApplicationDispatcher:jakarta.servlet.ServletRequest wrapRequest(org.apache.catalina.core.ApplicationDispatcher$State)",
            "org.apache.catalina.core.ApplicationFilterFactory:org.apache.catalina.core.ApplicationFilterChain createFilterChain(jakarta.servlet.ServletRequest,org.apache.catalina.Wrapper,jakarta.servlet.Servlet)",
            "org.apache.catalina.core.ApplicationHttpRequest:java.lang.Object getAttribute(java.lang.String)",
            "org.apache.catalina.core.ApplicationHttpRequest:void setRequest(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.core.ApplicationRequest:void setRequest(jakarta.servlet.ServletRequest)",
            "org.apache.catalina.core.AsyncContextImpl:void dispatch(jakarta.servlet.ServletContext,java.lang.String)",
            "org.apache.catalina.core.StandardHostValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.filters.FailedRequestFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.filters.FailedRequestFilter:boolean isGoodRequest(jakarta.servlet.ServletRequest)",
            "org.apache.catalina.servlets.CGIServlet$CGIEnvironment:boolean setupFromRequest(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.servlets.CGIServlet:void printServletEnvironment(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.servlets.DefaultServlet:java.lang.String getRelativePath(jakarta.servlet.http.HttpServletRequest,boolean)",
            "org.apache.catalina.servlets.DefaultServlet:void serveResource(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,boolean,java.lang.String)",
            "org.apache.catalina.servlets.DefaultServlet:boolean checkSendfile(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.catalina.WebResource,long,org.apache.tomcat.util.http.parser.Ranges$Entry)",
            "org.apache.catalina.servlets.WebdavServlet:java.lang.String getRelativePath(jakarta.servlet.http.HttpServletRequest,boolean)",
            "org.apache.catalina.valves.AbstractAccessLogValve$ByteSentElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.AbstractAccessLogValve$ConnectionStatusElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.AbstractAccessLogValve$HostElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.AbstractAccessLogValve$LocalServerNameElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.AbstractAccessLogValve$PortElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.AbstractAccessLogValve$ProtocolElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.AbstractAccessLogValve$RemoteAddrElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.AbstractAccessLogValve$RequestAttributeElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.AbstractAccessLogValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.AbstractAccessLogValve:void log(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.ErrorReportValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.ExtendedAccessLogValve$RequestAttributeElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.JDBCAccessLogValve:void log(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.LoadBalancerDrainingValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.rewrite.ResolverImpl:java.lang.String resolveEnv(java.lang.String)",
            "org.apache.catalina.valves.rewrite.ResolverImpl:java.lang.String resolveSsl(java.lang.String)"
        ]
    },
    "org.apache.catalina.connector.Request:java.lang.String getRemoteAddr()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletRequestWrapper:java.lang.String getRemoteAddr()",
            "org.apache.catalina.authenticator.DigestAuthenticator$DigestInfo:boolean validate(org.apache.catalina.connector.Request)",
            "org.apache.catalina.authenticator.DigestAuthenticator:java.lang.String generateNonce(org.apache.catalina.connector.Request)",
            "org.apache.catalina.connector.Request:java.lang.String getRemoteHost()",
            "org.apache.catalina.connector.RequestFacade:java.lang.String getRemoteAddr()",
            "org.apache.catalina.filters.RemoteAddrFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.filters.RemoteCIDRFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.filters.RemoteIpFilter$XForwardedRequest:void <init>(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.filters.RemoteIpFilter:void doFilter(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.filters.RequestDumperFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.servlets.CGIServlet$CGIEnvironment:boolean setCGIEnvironment(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.servlets.CGIServlet:void printServletEnvironment(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.valves.AbstractAccessLogValve$RemoteAddrElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.AbstractAccessLogValve$RemoteAddrElement:void cache(org.apache.catalina.connector.Request)",
            "org.apache.catalina.valves.CrawlerSessionManagerValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.JDBCAccessLogValve:void log(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.RemoteAddrValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.RemoteCIDRValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.RemoteIpValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.rewrite.ResolverImpl:java.lang.String resolve(java.lang.String)"
        ]
    },
    "org.apache.catalina.connector.Request:java.lang.String getPeerAddr()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.valves.AbstractAccessLogValve$RemoteAddrElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.AbstractAccessLogValve$RemoteAddrElement:void cache(org.apache.catalina.connector.Request)",
            "org.apache.catalina.valves.RemoteAddrValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.RemoteCIDRValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)"
        ]
    },
    "org.apache.catalina.connector.Request:java.lang.String getRemoteHost()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletRequestWrapper:java.lang.String getRemoteHost()",
            "org.apache.catalina.connector.RequestFacade:java.lang.String getRemoteHost()",
            "org.apache.catalina.filters.RemoteHostFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.filters.RemoteIpFilter$XForwardedRequest:void <init>(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.filters.RemoteIpFilter:void doFilter(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.filters.RequestDumperFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.servlets.CGIServlet$CGIEnvironment:boolean setCGIEnvironment(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.servlets.CGIServlet:void printServletEnvironment(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.valves.AbstractAccessLogValve$HostElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.AbstractAccessLogValve$HostElement:void cache(org.apache.catalina.connector.Request)",
            "org.apache.catalina.valves.JDBCAccessLogValve:void log(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.RemoteHostValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.RemoteIpValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.rewrite.ResolverImpl:java.lang.String resolve(java.lang.String)"
        ]
    },
    "org.apache.catalina.connector.Request:int getRemotePort()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletRequestWrapper:int getRemotePort()",
            "org.apache.catalina.connector.RequestFacade:int getRemotePort()",
            "org.apache.catalina.valves.AbstractAccessLogValve$PortElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.AbstractAccessLogValve$PortElement:void cache(org.apache.catalina.connector.Request)",
            "org.apache.catalina.valves.rewrite.ResolverImpl:java.lang.String resolve(java.lang.String)"
        ]
    },
    "org.apache.catalina.connector.Request:java.lang.String getLocalName()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletRequestWrapper:java.lang.String getLocalName()",
            "org.apache.catalina.connector.RequestFacade:java.lang.String getLocalName()",
            "org.apache.catalina.filters.RemoteIpFilter$XForwardedRequest:void <init>(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.valves.RemoteIpValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.rewrite.ResolverImpl:java.lang.String resolve(java.lang.String)"
        ]
    },
    "org.apache.catalina.connector.Request:java.lang.String getLocalAddr()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletRequestWrapper:java.lang.String getLocalAddr()",
            "org.apache.catalina.connector.RequestFacade:java.lang.String getLocalAddr()",
            "org.apache.catalina.valves.rewrite.ResolverImpl:java.lang.String resolve(java.lang.String)"
        ]
    },
    "org.apache.catalina.connector.Request:int getLocalPort()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletRequestWrapper:int getLocalPort()",
            "org.apache.catalina.connector.RequestFacade:int getLocalPort()",
            "org.apache.catalina.filters.RemoteIpFilter$XForwardedRequest:void <init>(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.valves.RemoteIpValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.rewrite.ResolverImpl:java.lang.String resolve(java.lang.String)"
        ]
    },
    "org.apache.catalina.connector.Request:boolean isAsyncDispatching()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.CoyoteAdapter:boolean asyncDispatch(org.apache.coyote.Request,org.apache.coyote.Response,org.apache.tomcat.util.net.SocketEvent)",
            "org.apache.catalina.core.StandardWrapperValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)"
        ]
    },
    "org.apache.catalina.connector.Request:boolean isAsyncCompleting()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.CoyoteAdapter:boolean asyncDispatch(org.apache.coyote.Request,org.apache.coyote.Response,org.apache.tomcat.util.net.SocketEvent)",
            "org.apache.catalina.connector.CoyoteAdapter:void service(org.apache.coyote.Request,org.apache.coyote.Response)",
            "org.apache.catalina.valves.ErrorReportValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)"
        ]
    },
    "org.apache.catalina.connector.Request:boolean isAsync()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.CoyoteAdapter:boolean asyncDispatch(org.apache.coyote.Request,org.apache.coyote.Response,org.apache.tomcat.util.net.SocketEvent)",
            "org.apache.catalina.connector.CoyoteAdapter:void service(org.apache.coyote.Request,org.apache.coyote.Response)",
            "org.apache.catalina.core.AsyncContextImpl:void doInternalDispatch()",
            "org.apache.catalina.core.StandardHostValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.ErrorReportValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.PersistentValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)"
        ]
    },
    "org.apache.catalina.connector.Request:jakarta.servlet.http.PushBuilder newPushBuilder(jakarta.servlet.http.HttpServletRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.Request:jakarta.servlet.http.PushBuilder newPushBuilder()",
            "org.apache.catalina.connector.RequestFacade:jakarta.servlet.http.PushBuilder newPushBuilder(jakarta.servlet.http.HttpServletRequest)"
        ]
    },
    "org.apache.catalina.connector.Request:jakarta.servlet.http.HttpUpgradeHandler upgrade(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletRequestWrapper:jakarta.servlet.http.HttpUpgradeHandler upgrade(java.lang.Class)",
            "org.apache.catalina.connector.RequestFacade:jakarta.servlet.http.HttpUpgradeHandler upgrade(java.lang.Class)"
        ]
    },
    "org.apache.catalina.connector.Request:void checkSwallowInput()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.Request:void finishRequest()",
            "org.apache.catalina.connector.Request:void parseParts(boolean)",
            "org.apache.catalina.connector.Request:void parseParameters()",
            "org.apache.catalina.connector.Request:byte[] readChunkedPostBody()"
        ]
    },
    "org.apache.catalina.core.ApplicationPushBuilder:void push()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.core.AsyncContextImpl$AsyncRunnable:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.AsyncContextImpl$RunnableWrapper:void run()",
            "org.apache.catalina.core.AsyncContextImpl:void doInternalDispatch()",
            "org.apache.catalina.core.StandardThreadExecutor:void execute(java.lang.Runnable)",
            "org.apache.coyote.AbstractProcessor:void execute(java.lang.Runnable)",
            "org.apache.coyote.AsyncStateMachine:void asyncRun(java.lang.Runnable)",
            "org.apache.tomcat.util.net.Nio2Endpoint:void stopInternal()",
            "org.apache.tomcat.util.net.SecureNio2Channel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()",
            "org.apache.tomcat.util.net.SecureNioChannel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()",
            "org.apache.tomcat.util.net.SocketWrapperBase:void execute(java.lang.Runnable)",
            "org.apache.tomcat.util.threads.InlineExecutorService:void execute(java.lang.Runnable)",
            "org.apache.tomcat.util.threads.ScheduledThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.tomcat.util.threads.TaskThread$WrappingRunnable:void run()",
            "org.apache.tomcat.util.threads.ThreadPoolExecutor:void execute(java.lang.Runnable,long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.apache.catalina.core.AsyncContextImpl:void complete()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.AsyncContextImpl:void setErrorState(java.lang.Throwable,boolean)"
        ]
    },
    "org.apache.catalina.core.AsyncContextImpl:boolean timeout()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.CoyoteAdapter:boolean asyncDispatch(org.apache.coyote.Request,org.apache.coyote.Response,org.apache.tomcat.util.net.SocketEvent)"
        ]
    },
    "org.apache.catalina.core.AsyncContextImpl:void dispatch(jakarta.servlet.ServletContext,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.AsyncContextImpl:void dispatch(java.lang.String)"
        ]
    },
    "org.apache.catalina.core.AsyncContextImpl:void start(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.core.AsyncContextImpl:boolean isStarted()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.Request:boolean isAsyncStarted()"
        ]
    },
    "org.apache.catalina.core.AsyncContextImpl:void setStarted(org.apache.catalina.Context,jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.Request:jakarta.servlet.AsyncContext startAsync(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)"
        ]
    },
    "org.apache.catalina.core.AsyncContextImpl:void setTimeout(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.Request:jakarta.servlet.AsyncContext startAsync(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)"
        ]
    },
    "org.apache.catalina.core.AsyncContextImpl:void setErrorState(java.lang.Throwable,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.CoyoteAdapter:boolean asyncDispatch(org.apache.coyote.Request,org.apache.coyote.Response,org.apache.tomcat.util.net.SocketEvent)",
            "org.apache.catalina.connector.CoyoteAdapter:void service(org.apache.coyote.Request,org.apache.coyote.Response)"
        ]
    },
    "org.apache.catalina.valves.AbstractAccessLogValve$ConnectionStatusElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.valves.AbstractAccessLogValve:void log(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)"
        ]
    },
    "org.apache.coyote.Request:void setReadListener(jakarta.servlet.ReadListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.InputBuffer:void setReadListener(jakarta.servlet.ReadListener)"
        ]
    },
    "org.apache.coyote.Request:boolean checkRegisterForRead()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.Request:boolean isReady()"
        ]
    },
    "org.apache.coyote.Request:boolean isTrailerFieldsReady()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.Request:boolean isTrailerFieldsReady()"
        ]
    },
    "org.apache.coyote.Request:boolean isFinished()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.InputBuffer:boolean isFinished()",
            "org.apache.catalina.connector.Request:boolean isFinished()",
            "org.apache.coyote.Request:void setReadListener(jakarta.servlet.ReadListener)"
        ]
    },
    "org.apache.coyote.Request:int doRead(org.apache.tomcat.util.net.ApplicationBufferHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.InputBuffer:int realReadBytes()"
        ]
    },
    "org.apache.coyote.RequestInfo:java.lang.String getRemoteAddr()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.RequestInfo:java.lang.String getRemoteAddrForwarded()"
        ]
    },
    "org.apache.coyote.RequestInfo:java.lang.String getPeerAddr()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.coyote.http11.Http11Processor:void populatePort()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProcessor:void parseHost(org.apache.tomcat.util.buf.MessageBytes)"
        ]
    },
    "org.apache.coyote.http2.Stream$StreamInputBuffer:void onDataAvailable()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2UpgradeHandler:void endRequestBodyFrame(int,int)"
        ]
    },
    "org.apache.catalina.connector.CoyoteAdapter:boolean postParseRequest(org.apache.coyote.Request,org.apache.catalina.connector.Request,org.apache.coyote.Response,org.apache.catalina.connector.Response)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.CoyoteAdapter:void service(org.apache.coyote.Request,org.apache.coyote.Response)",
            "org.apache.catalina.connector.CoyoteAdapter:boolean prepare(org.apache.coyote.Request,org.apache.coyote.Response)"
        ]
    },
    "org.apache.catalina.connector.OutputBuffer:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.CoyoteOutputStream:void close()",
            "org.apache.catalina.connector.CoyoteWriter:void close()",
            "org.apache.catalina.connector.Response:void finishResponse()",
            "org.apache.naming.factory.LookupFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.tomcat.util.http.fileupload.IOUtils:void closeQuietly(java.io.Closeable)"
        ]
    },
    "org.apache.catalina.connector.OutputBuffer:void doFlush(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.OutputBuffer:void close()",
            "org.apache.catalina.connector.OutputBuffer:void flush()"
        ]
    },
    "org.apache.catalina.connector.Response:void sendAcknowledgement(org.apache.coyote.ContinueResponseTiming)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.FormAuthenticator:boolean doAuthenticate(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.authenticator.FormAuthenticator:void saveRequest(org.apache.catalina.connector.Request,org.apache.catalina.Session)",
            "org.apache.catalina.core.StandardContextValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)"
        ]
    },
    "org.apache.catalina.valves.ErrorReportValve:void report(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.valves.ErrorReportValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)"
        ]
    },
    "org.apache.catalina.valves.JsonErrorReportValve:void report(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.valves.ErrorReportValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)"
        ]
    },
    "org.apache.coyote.Response:void setTrailerFields(java.util.function.Supplier)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.Response:void setTrailerFields(java.util.function.Supplier)"
        ]
    },
    "org.apache.coyote.Response:void sendHeaders()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.OutputBuffer:void doFlush(boolean)",
            "org.apache.coyote.http2.Http2OutputBuffer:int doWrite(java.nio.ByteBuffer)"
        ]
    },
    "org.apache.coyote.Response:long getBytesWritten(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.Response:long getBytesWritten(boolean)"
        ]
    },
    "org.apache.coyote.Response:void setWriteListener(jakarta.servlet.WriteListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.OutputBuffer:void setWriteListener(jakarta.servlet.WriteListener)"
        ]
    },
    "org.apache.coyote.Response:boolean checkRegisterForWrite()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.OutputBuffer:void checkRegisterForWrite()",
            "org.apache.coyote.Response:boolean isReady()",
            "org.apache.coyote.ajp.AjpProcessor:boolean flushBufferedWrite()"
        ]
    },
    "org.apache.coyote.http11.Http11OutputBuffer$SocketOutputBuffer:int doWrite(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.Response:void doWrite(java.nio.ByteBuffer)",
            "org.apache.coyote.http11.Http11OutputBuffer:int doWrite(java.nio.ByteBuffer)",
            "org.apache.coyote.http11.filters.ChunkedOutputFilter:int doWrite(java.nio.ByteBuffer)",
            "org.apache.coyote.http11.filters.ChunkedOutputFilter:void end()",
            "org.apache.coyote.http11.filters.GzipOutputFilter$FakeOutputStream:void write(int)",
            "org.apache.coyote.http11.filters.GzipOutputFilter$FakeOutputStream:void write(byte[],int,int)",
            "org.apache.coyote.http11.filters.IdentityOutputFilter:int doWrite(java.nio.ByteBuffer)",
            "org.apache.coyote.http2.Http2OutputBuffer:int doWrite(java.nio.ByteBuffer)"
        ]
    },
    "org.apache.coyote.http11.Http11OutputBuffer:int doWrite(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.Response:void doWrite(java.nio.ByteBuffer)",
            "org.apache.coyote.http11.Http11OutputBuffer:int doWrite(java.nio.ByteBuffer)",
            "org.apache.coyote.http11.filters.ChunkedOutputFilter:int doWrite(java.nio.ByteBuffer)",
            "org.apache.coyote.http11.filters.ChunkedOutputFilter:void end()",
            "org.apache.coyote.http11.filters.GzipOutputFilter$FakeOutputStream:void write(int)",
            "org.apache.coyote.http11.filters.GzipOutputFilter$FakeOutputStream:void write(byte[],int,int)",
            "org.apache.coyote.http11.filters.IdentityOutputFilter:int doWrite(java.nio.ByteBuffer)",
            "org.apache.coyote.http2.Http2OutputBuffer:int doWrite(java.nio.ByteBuffer)"
        ]
    },
    "org.apache.coyote.http2.WindowAllocationManager:void notify(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.WindowAllocationManager:void notifyStream()",
            "org.apache.coyote.http2.WindowAllocationManager:void notifyConnection()",
            "org.apache.coyote.http2.WindowAllocationManager:void notifyAny()"
        ]
    },
    "org.apache.coyote.AbstractProtocol:void lambda$startAsyncTimeout$1()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProtocol$lambda_startAsyncTimeout_1__11:void run()"
        ]
    },
    "org.apache.coyote.http2.Http2UpgradeHandler:void processConnection(jakarta.servlet.http.WebConnection,org.apache.coyote.http2.Stream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2AsyncUpgradeHandler:void processConnectionCallback(jakarta.servlet.http.WebConnection,org.apache.coyote.http2.Stream)",
            "org.apache.coyote.http2.Http2UpgradeHandler:void init(jakarta.servlet.http.WebConnection)"
        ]
    },
    "org.apache.coyote.http2.Http2UpgradeHandler:void push(org.apache.coyote.Request,org.apache.coyote.http2.Stream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Stream$PrivilegedPush:java.lang.Void run()",
            "org.apache.coyote.http2.Stream:void push(org.apache.coyote.http2.Http2UpgradeHandler,org.apache.coyote.Request,org.apache.coyote.http2.Stream)"
        ]
    },
    "org.apache.coyote.http2.Http2UpgradeHandler:void headersEnd(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2AsyncUpgradeHandler:void headersEnd(int)",
            "org.apache.coyote.http2.Http2Parser:void onHeadersComplete(int)"
        ]
    },
    "org.apache.tomcat.util.net.AprEndpoint$Poller:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.AsyncContextImpl$RunnableWrapper:void run()",
            "org.apache.catalina.core.AsyncContextImpl:void doInternalDispatch()",
            "org.apache.catalina.core.StandardThreadExecutor:void execute(java.lang.Runnable)",
            "org.apache.coyote.AbstractProcessor:void execute(java.lang.Runnable)",
            "org.apache.coyote.AsyncStateMachine:void asyncRun(java.lang.Runnable)",
            "org.apache.tomcat.util.net.AprEndpoint:void startInternal()",
            "org.apache.tomcat.util.net.Nio2Endpoint:void stopInternal()",
            "org.apache.tomcat.util.net.SecureNio2Channel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()",
            "org.apache.tomcat.util.net.SecureNioChannel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()",
            "org.apache.tomcat.util.net.SocketWrapperBase:void execute(java.lang.Runnable)",
            "org.apache.tomcat.util.threads.InlineExecutorService:void execute(java.lang.Runnable)",
            "org.apache.tomcat.util.threads.ScheduledThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.tomcat.util.threads.TaskThread$WrappingRunnable:void run()",
            "org.apache.tomcat.util.threads.ThreadPoolExecutor:void execute(java.lang.Runnable,long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.apache.tomcat.util.net.AprEndpoint$Sendfile:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.AsyncContextImpl$RunnableWrapper:void run()",
            "org.apache.catalina.core.AsyncContextImpl:void doInternalDispatch()",
            "org.apache.catalina.core.StandardThreadExecutor:void execute(java.lang.Runnable)",
            "org.apache.coyote.AbstractProcessor:void execute(java.lang.Runnable)",
            "org.apache.coyote.AsyncStateMachine:void asyncRun(java.lang.Runnable)",
            "org.apache.tomcat.util.net.AprEndpoint:void startInternal()",
            "org.apache.tomcat.util.net.Nio2Endpoint:void stopInternal()",
            "org.apache.tomcat.util.net.SecureNio2Channel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()",
            "org.apache.tomcat.util.net.SecureNioChannel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()",
            "org.apache.tomcat.util.net.SocketWrapperBase:void execute(java.lang.Runnable)",
            "org.apache.tomcat.util.threads.InlineExecutorService:void execute(java.lang.Runnable)",
            "org.apache.tomcat.util.threads.ScheduledThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.tomcat.util.threads.TaskThread$WrappingRunnable:void run()",
            "org.apache.tomcat.util.threads.ThreadPoolExecutor:void execute(java.lang.Runnable,long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$1:void completed(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SecureNio2Channel$1:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$2:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$3:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$4:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void read(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void read(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SocketWrapperBase$VectoredIOCompletionHandler:void completed(java.lang.Long,org.apache.tomcat.util.net.SocketWrapperBase$OperationState)"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$1:void failed(java.lang.Throwable,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2AsyncUpgradeHandler$SendfileCompletionHandler:void failed(java.lang.Throwable,org.apache.coyote.http2.SendfileData)",
            "org.apache.tomcat.util.net.Nio2Channel$3:void read(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.Nio2Channel$3:void read(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.Nio2Channel$3:void write(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.Nio2Channel$3:void write(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SecureNio2Channel$1:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$2:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$3:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$4:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void write(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void write(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SocketWrapperBase$VectoredIOCompletionHandler:void failed(java.lang.Throwable,org.apache.tomcat.util.net.SocketWrapperBase$OperationState)",
            "org.apache.tomcat.util.net.SocketWrapperBase:org.apache.tomcat.util.net.SocketWrapperBase$CompletionState vectoredOperation(boolean,java.nio.ByteBuffer[],int,int,org.apache.tomcat.util.net.SocketWrapperBase$BlockingMode,long,java.util.concurrent.TimeUnit,java.lang.Object,org.apache.tomcat.util.net.SocketWrapperBase$CompletionCheck,java.nio.channels.CompletionHandler)"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$2:void completed(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SecureNio2Channel$1:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$2:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$3:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$4:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void read(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void read(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SocketWrapperBase$VectoredIOCompletionHandler:void completed(java.lang.Long,org.apache.tomcat.util.net.SocketWrapperBase$OperationState)"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$2:void failed(java.lang.Throwable,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2AsyncUpgradeHandler$SendfileCompletionHandler:void failed(java.lang.Throwable,org.apache.coyote.http2.SendfileData)",
            "org.apache.tomcat.util.net.Nio2Channel$3:void read(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.Nio2Channel$3:void read(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.Nio2Channel$3:void write(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.Nio2Channel$3:void write(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SecureNio2Channel$1:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$2:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$3:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$4:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void write(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void write(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SocketWrapperBase$VectoredIOCompletionHandler:void failed(java.lang.Throwable,org.apache.tomcat.util.net.SocketWrapperBase$OperationState)",
            "org.apache.tomcat.util.net.SocketWrapperBase:org.apache.tomcat.util.net.SocketWrapperBase$CompletionState vectoredOperation(boolean,java.nio.ByteBuffer[],int,int,org.apache.tomcat.util.net.SocketWrapperBase$BlockingMode,long,java.util.concurrent.TimeUnit,java.lang.Object,org.apache.tomcat.util.net.SocketWrapperBase$CompletionCheck,java.nio.channels.CompletionHandler)"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$3:void completed(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SecureNio2Channel$1:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$2:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$3:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$4:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void read(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void read(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SocketWrapperBase$VectoredIOCompletionHandler:void completed(java.lang.Long,org.apache.tomcat.util.net.SocketWrapperBase$OperationState)"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$3:void failed(java.lang.Throwable,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2AsyncUpgradeHandler$SendfileCompletionHandler:void failed(java.lang.Throwable,org.apache.coyote.http2.SendfileData)",
            "org.apache.tomcat.util.net.Nio2Channel$3:void read(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.Nio2Channel$3:void read(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.Nio2Channel$3:void write(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.Nio2Channel$3:void write(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SecureNio2Channel$1:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$2:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$3:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$4:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void write(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void write(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SocketWrapperBase$VectoredIOCompletionHandler:void failed(java.lang.Throwable,org.apache.tomcat.util.net.SocketWrapperBase$OperationState)",
            "org.apache.tomcat.util.net.SocketWrapperBase:org.apache.tomcat.util.net.SocketWrapperBase$CompletionState vectoredOperation(boolean,java.nio.ByteBuffer[],int,int,org.apache.tomcat.util.net.SocketWrapperBase$BlockingMode,long,java.util.concurrent.TimeUnit,java.lang.Object,org.apache.tomcat.util.net.SocketWrapperBase$CompletionCheck,java.nio.channels.CompletionHandler)"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$4:void completed(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SecureNio2Channel$1:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$2:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$3:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$4:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void read(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void read(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SocketWrapperBase$VectoredIOCompletionHandler:void completed(java.lang.Long,org.apache.tomcat.util.net.SocketWrapperBase$OperationState)"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$4:void failed(java.lang.Throwable,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2AsyncUpgradeHandler$SendfileCompletionHandler:void failed(java.lang.Throwable,org.apache.coyote.http2.SendfileData)",
            "org.apache.tomcat.util.net.Nio2Channel$3:void read(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.Nio2Channel$3:void read(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.Nio2Channel$3:void write(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.Nio2Channel$3:void write(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SecureNio2Channel$1:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$2:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$3:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$4:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void write(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void write(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SocketWrapperBase$VectoredIOCompletionHandler:void failed(java.lang.Throwable,org.apache.tomcat.util.net.SocketWrapperBase$OperationState)",
            "org.apache.tomcat.util.net.SocketWrapperBase:org.apache.tomcat.util.net.SocketWrapperBase$CompletionState vectoredOperation(boolean,java.nio.ByteBuffer[],int,int,org.apache.tomcat.util.net.SocketWrapperBase$BlockingMode,long,java.util.concurrent.TimeUnit,java.lang.Object,org.apache.tomcat.util.net.SocketWrapperBase$CompletionCheck,java.nio.channels.CompletionHandler)"
        ]
    },
    "org.apache.coyote.AbstractProtocol$ConnectionHandler:void longPoll(org.apache.tomcat.util.net.SocketWrapperBase,org.apache.coyote.Processor)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProtocol$ConnectionHandler:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState process(org.apache.tomcat.util.net.SocketWrapperBase,org.apache.tomcat.util.net.SocketEvent)"
        ]
    },
    "org.apache.coyote.ajp.AjpProcessor:void registerReadInterest()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProcessor:boolean isReadyForRead()"
        ]
    },
    "org.apache.coyote.http11.Http11Processor:void registerReadInterest()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProcessor:boolean isReadyForRead()"
        ]
    },
    "org.apache.coyote.http11.upgrade.UpgradeServletInputStream:void setReadListener(jakarta.servlet.ReadListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.coyote.http11.Http11OutputBuffer:boolean isReady()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11Processor:boolean isReadyForWrite()"
        ]
    },
    "org.apache.coyote.http11.Http11OutputBuffer:void registerWriteInterest()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11Processor:boolean flushBufferedWrite()"
        ]
    },
    "org.apache.coyote.http11.upgrade.UpgradeServletOutputStream:void setWriteListener(jakarta.servlet.WriteListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.coyote.http11.upgrade.UpgradeServletOutputStream:void flushInternal(boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.upgrade.UpgradeServletOutputStream:void flush()",
            "org.apache.coyote.http11.upgrade.UpgradeServletOutputStream:void close()",
            "org.apache.coyote.http11.upgrade.UpgradeServletOutputStream:void onWritePossible()"
        ]
    },
    "org.apache.coyote.http2.Http2UpgradeHandler:void processWrites()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2UpgradeHandler:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState upgradeDispatch(org.apache.tomcat.util.net.SocketEvent)"
        ]
    },
    "org.apache.tomcat.util.net.SocketWrapperBase:boolean isReadyForWrite()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.ajp.AjpProcessor:boolean isReadyForWrite()",
            "org.apache.coyote.http11.upgrade.UpgradeServletOutputStream:boolean isReady()",
            "org.apache.coyote.http11.upgrade.UpgradeServletOutputStream:void onWritePossible()"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint:boolean setSocketOptions(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Acceptor:void run()"
        ]
    },
    "org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper:void registerReadInterest()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProtocol$ConnectionHandler:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState process(org.apache.tomcat.util.net.SocketWrapperBase,org.apache.tomcat.util.net.SocketEvent)",
            "org.apache.coyote.AbstractProtocol$ConnectionHandler:void longPoll(org.apache.tomcat.util.net.SocketWrapperBase,org.apache.coyote.Processor)",
            "org.apache.coyote.ajp.AjpProcessor:void registerReadInterest()",
            "org.apache.coyote.http11.Http11Processor:void registerReadInterest()",
            "org.apache.coyote.http11.upgrade.UpgradeServletInputStream:void setReadListener(jakarta.servlet.ReadListener)",
            "org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper$NioOperationState:void run()",
            "org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper:int fillReadBuffer(boolean,java.nio.ByteBuffer)",
            "org.apache.tomcat.util.net.NioEndpoint$SocketProcessor:void doRun()"
        ]
    },
    "org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper:void registerWriteInterest()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11OutputBuffer:boolean isReady()",
            "org.apache.coyote.http11.Http11OutputBuffer:void registerWriteInterest()",
            "org.apache.coyote.http11.upgrade.UpgradeServletOutputStream:void setWriteListener(jakarta.servlet.WriteListener)",
            "org.apache.coyote.http11.upgrade.UpgradeServletOutputStream:void flushInternal(boolean,boolean)",
            "org.apache.coyote.http2.Http2UpgradeHandler:void processWrites()",
            "org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper$NioOperationState:void run()",
            "org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper:void doWrite(boolean,java.nio.ByteBuffer)",
            "org.apache.tomcat.util.net.NioEndpoint$SocketProcessor:void doRun()",
            "org.apache.tomcat.util.net.SocketWrapperBase:boolean isReadyForWrite()"
        ]
    },
    "org.apache.tomcat.util.net.NioEndpoint$Poller:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.AsyncContextImpl$RunnableWrapper:void run()",
            "org.apache.catalina.core.AsyncContextImpl:void doInternalDispatch()",
            "org.apache.catalina.core.StandardThreadExecutor:void execute(java.lang.Runnable)",
            "org.apache.coyote.AbstractProcessor:void execute(java.lang.Runnable)",
            "org.apache.coyote.AsyncStateMachine:void asyncRun(java.lang.Runnable)",
            "org.apache.tomcat.util.net.Nio2Endpoint:void stopInternal()",
            "org.apache.tomcat.util.net.SecureNio2Channel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()",
            "org.apache.tomcat.util.net.SecureNioChannel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()",
            "org.apache.tomcat.util.net.SocketWrapperBase:void execute(java.lang.Runnable)",
            "org.apache.tomcat.util.threads.InlineExecutorService:void execute(java.lang.Runnable)",
            "org.apache.tomcat.util.threads.ScheduledThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.tomcat.util.threads.TaskThread$WrappingRunnable:void run()",
            "org.apache.tomcat.util.threads.ThreadPoolExecutor:void execute(java.lang.Runnable,long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper:org.apache.tomcat.util.net.SendfileState processSendfile(org.apache.tomcat.util.net.SendfileDataBase)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11Processor:org.apache.tomcat.util.net.SendfileState processSendfile(org.apache.tomcat.util.net.SocketWrapperBase)"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel$HandshakeReadCompletionHandler:void completed(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SecureNio2Channel$1:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$2:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$3:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$4:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void read(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void read(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SocketWrapperBase$VectoredIOCompletionHandler:void completed(java.lang.Long,org.apache.tomcat.util.net.SocketWrapperBase$OperationState)"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel$HandshakeReadCompletionHandler:void failed(java.lang.Throwable,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2AsyncUpgradeHandler$SendfileCompletionHandler:void failed(java.lang.Throwable,org.apache.coyote.http2.SendfileData)",
            "org.apache.tomcat.util.net.Nio2Channel$3:void read(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.Nio2Channel$3:void read(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.Nio2Channel$3:void write(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.Nio2Channel$3:void write(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SecureNio2Channel$1:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$2:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$3:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$4:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void write(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void write(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SocketWrapperBase$VectoredIOCompletionHandler:void failed(java.lang.Throwable,org.apache.tomcat.util.net.SocketWrapperBase$OperationState)",
            "org.apache.tomcat.util.net.SocketWrapperBase:org.apache.tomcat.util.net.SocketWrapperBase$CompletionState vectoredOperation(boolean,java.nio.ByteBuffer[],int,int,org.apache.tomcat.util.net.SocketWrapperBase$BlockingMode,long,java.util.concurrent.TimeUnit,java.lang.Object,org.apache.tomcat.util.net.SocketWrapperBase$CompletionCheck,java.nio.channels.CompletionHandler)"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel$HandshakeWriteCompletionHandler:void completed(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SecureNio2Channel$1:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$2:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$3:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$4:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void read(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void read(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SocketWrapperBase$VectoredIOCompletionHandler:void completed(java.lang.Long,org.apache.tomcat.util.net.SocketWrapperBase$OperationState)"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel$HandshakeWriteCompletionHandler:void failed(java.lang.Throwable,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2AsyncUpgradeHandler$SendfileCompletionHandler:void failed(java.lang.Throwable,org.apache.coyote.http2.SendfileData)",
            "org.apache.tomcat.util.net.Nio2Channel$3:void read(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.Nio2Channel$3:void read(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.Nio2Channel$3:void write(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.Nio2Channel$3:void write(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SecureNio2Channel$1:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$2:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$3:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$4:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void write(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void write(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SocketWrapperBase$VectoredIOCompletionHandler:void failed(java.lang.Throwable,org.apache.tomcat.util.net.SocketWrapperBase$OperationState)",
            "org.apache.tomcat.util.net.SocketWrapperBase:org.apache.tomcat.util.net.SocketWrapperBase$CompletionState vectoredOperation(boolean,java.nio.ByteBuffer[],int,int,org.apache.tomcat.util.net.SocketWrapperBase$BlockingMode,long,java.util.concurrent.TimeUnit,java.lang.Object,org.apache.tomcat.util.net.SocketWrapperBase$CompletionCheck,java.nio.channels.CompletionHandler)"
        ]
    },
    "org.apache.coyote.AbstractProcessor:void processSocketEvent(org.apache.tomcat.util.net.SocketEvent,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProcessor:void setErrorState(org.apache.coyote.ErrorState,java.lang.Throwable)",
            "org.apache.coyote.AbstractProcessor:void action(org.apache.coyote.ActionCode,java.lang.Object)",
            "org.apache.coyote.AbstractProcessor:void doTimeoutAsync()"
        ]
    },
    "org.apache.coyote.AbstractProcessor:void executeDispatches()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProcessor:void action(org.apache.coyote.ActionCode,java.lang.Object)"
        ]
    },
    "org.apache.coyote.http2.Http2UpgradeHandler:void timeoutAsync(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.upgrade.UpgradeProcessorInternal:void timeoutAsync(long)",
            "org.apache.coyote.http2.Http2AsyncUpgradeHandler:void timeoutAsync(long)"
        ]
    },
    "org.apache.catalina.valves.RemoteAddrValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.AuthenticatorBase:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.authenticator.SingleSignOn:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.connector.CoyoteAdapter:boolean asyncDispatch(org.apache.coyote.Request,org.apache.coyote.Response,org.apache.tomcat.util.net.SocketEvent)",
            "org.apache.catalina.connector.CoyoteAdapter:void service(org.apache.coyote.Request,org.apache.coyote.Response)",
            "org.apache.catalina.core.StandardContextValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.core.StandardEngineValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.core.StandardHostValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.AbstractAccessLogValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.CrawlerSessionManagerValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.ErrorReportValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.HealthCheckValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.JDBCAccessLogValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.LoadBalancerDrainingValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.PersistentValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.RemoteIpValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.RequestFilterValve:void process(java.lang.String,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.RequestFilterValve:void denyRequest(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.SSLValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.SemaphoreValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.StuckThreadDetectionValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.rewrite.RewriteValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)"
        ]
    },
    "org.apache.catalina.valves.RemoteCIDRValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.AuthenticatorBase:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.authenticator.SingleSignOn:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.connector.CoyoteAdapter:boolean asyncDispatch(org.apache.coyote.Request,org.apache.coyote.Response,org.apache.tomcat.util.net.SocketEvent)",
            "org.apache.catalina.connector.CoyoteAdapter:void service(org.apache.coyote.Request,org.apache.coyote.Response)",
            "org.apache.catalina.core.StandardContextValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.core.StandardEngineValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.core.StandardHostValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.AbstractAccessLogValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.CrawlerSessionManagerValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.ErrorReportValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.HealthCheckValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.JDBCAccessLogValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.LoadBalancerDrainingValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.PersistentValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.RemoteIpValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.RequestFilterValve:void process(java.lang.String,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.RequestFilterValve:void denyRequest(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.SSLValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.SemaphoreValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.StuckThreadDetectionValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.rewrite.RewriteValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)"
        ]
    },
    "org.apache.catalina.valves.RemoteHostValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.AuthenticatorBase:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.authenticator.SingleSignOn:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.connector.CoyoteAdapter:boolean asyncDispatch(org.apache.coyote.Request,org.apache.coyote.Response,org.apache.tomcat.util.net.SocketEvent)",
            "org.apache.catalina.connector.CoyoteAdapter:void service(org.apache.coyote.Request,org.apache.coyote.Response)",
            "org.apache.catalina.core.StandardContextValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.core.StandardEngineValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.core.StandardHostValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.AbstractAccessLogValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.CrawlerSessionManagerValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.ErrorReportValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.HealthCheckValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.JDBCAccessLogValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.LoadBalancerDrainingValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.PersistentValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.RemoteIpValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.RequestFilterValve:void process(java.lang.String,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.RequestFilterValve:void denyRequest(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.SSLValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.SemaphoreValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.StuckThreadDetectionValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.rewrite.RewriteValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel:void read(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Channel:void read(java.nio.ByteBuffer,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:int fillReadBuffer(boolean,java.nio.ByteBuffer)"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel:void read(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$Nio2OperationState:void run()"
        ]
    },
    "org.apache.tomcat.util.net.SocketWrapperBase$VectoredIOCompletionHandler:void completed(java.lang.Long,org.apache.tomcat.util.net.SocketWrapperBase$OperationState)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.AprEndpoint$AprSocketWrapper$AprOperationState:void run()",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$Nio2OperationState:void run()",
            "org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper$NioOperationState:void run()",
            "org.apache.tomcat.util.net.SocketWrapperBase$VectoredIOCompletionHandler:void completed(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.coyote.http2.Http2AsyncUpgradeHandler$SendfileCompletionHandler:void failed(java.lang.Throwable,org.apache.coyote.http2.SendfileData)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2AsyncUpgradeHandler$SendfileCompletionHandler:void completed(java.lang.Long,org.apache.coyote.http2.SendfileData)",
            "org.apache.coyote.http2.Http2AsyncUpgradeHandler$SendfileCompletionHandler:void failed(java.lang.Throwable,java.lang.Object)"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Channel$3:void read(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Channel:void read(java.nio.ByteBuffer,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:int fillReadBuffer(boolean,java.nio.ByteBuffer)"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Channel$3:void read(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$Nio2OperationState:void run()"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Channel$3:void write(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Channel:void write(java.nio.ByteBuffer,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$1:void completed(java.lang.Integer,org.apache.tomcat.util.net.Nio2Endpoint$SendfileData)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$3:void completed(java.lang.Integer,java.nio.ByteBuffer)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:boolean flushNonBlockingInternal(boolean)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:org.apache.tomcat.util.net.SendfileState processSendfile(org.apache.tomcat.util.net.SendfileDataBase)"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Channel$3:void write(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$3:void completed(java.lang.Integer,java.nio.ByteBuffer)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$4:void completed(java.lang.Long,java.nio.ByteBuffer[])",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$Nio2OperationState$1:void completed(java.lang.Long,java.nio.ByteBuffer[])",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$Nio2OperationState:void run()",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:boolean flushNonBlockingInternal(boolean)"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel$1:void failed(java.lang.Throwable,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2AsyncUpgradeHandler$SendfileCompletionHandler:void failed(java.lang.Throwable,org.apache.coyote.http2.SendfileData)",
            "org.apache.tomcat.util.net.Nio2Channel$3:void read(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.Nio2Channel$3:void read(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.Nio2Channel$3:void write(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.Nio2Channel$3:void write(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SecureNio2Channel$1:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$1:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$2:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$3:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$4:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void write(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void write(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SocketWrapperBase$VectoredIOCompletionHandler:void failed(java.lang.Throwable,org.apache.tomcat.util.net.SocketWrapperBase$OperationState)",
            "org.apache.tomcat.util.net.SocketWrapperBase:org.apache.tomcat.util.net.SocketWrapperBase$CompletionState vectoredOperation(boolean,java.nio.ByteBuffer[],int,int,org.apache.tomcat.util.net.SocketWrapperBase$BlockingMode,long,java.util.concurrent.TimeUnit,java.lang.Object,org.apache.tomcat.util.net.SocketWrapperBase$CompletionCheck,java.nio.channels.CompletionHandler)"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel$2:void failed(java.lang.Throwable,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2AsyncUpgradeHandler$SendfileCompletionHandler:void failed(java.lang.Throwable,org.apache.coyote.http2.SendfileData)",
            "org.apache.tomcat.util.net.Nio2Channel$3:void read(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.Nio2Channel$3:void read(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.Nio2Channel$3:void write(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.Nio2Channel$3:void write(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SecureNio2Channel$1:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$2:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$2:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$3:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$4:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void write(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void write(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SocketWrapperBase$VectoredIOCompletionHandler:void failed(java.lang.Throwable,org.apache.tomcat.util.net.SocketWrapperBase$OperationState)",
            "org.apache.tomcat.util.net.SocketWrapperBase:org.apache.tomcat.util.net.SocketWrapperBase$CompletionState vectoredOperation(boolean,java.nio.ByteBuffer[],int,int,org.apache.tomcat.util.net.SocketWrapperBase$BlockingMode,long,java.util.concurrent.TimeUnit,java.lang.Object,org.apache.tomcat.util.net.SocketWrapperBase$CompletionCheck,java.nio.channels.CompletionHandler)"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel$3:void failed(java.lang.Throwable,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2AsyncUpgradeHandler$SendfileCompletionHandler:void failed(java.lang.Throwable,org.apache.coyote.http2.SendfileData)",
            "org.apache.tomcat.util.net.Nio2Channel$3:void read(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.Nio2Channel$3:void read(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.Nio2Channel$3:void write(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.Nio2Channel$3:void write(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SecureNio2Channel$1:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$2:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$3:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$3:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$4:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void write(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void write(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SocketWrapperBase$VectoredIOCompletionHandler:void failed(java.lang.Throwable,org.apache.tomcat.util.net.SocketWrapperBase$OperationState)",
            "org.apache.tomcat.util.net.SocketWrapperBase:org.apache.tomcat.util.net.SocketWrapperBase$CompletionState vectoredOperation(boolean,java.nio.ByteBuffer[],int,int,org.apache.tomcat.util.net.SocketWrapperBase$BlockingMode,long,java.util.concurrent.TimeUnit,java.lang.Object,org.apache.tomcat.util.net.SocketWrapperBase$CompletionCheck,java.nio.channels.CompletionHandler)"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel$4:void failed(java.lang.Throwable,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2AsyncUpgradeHandler$SendfileCompletionHandler:void failed(java.lang.Throwable,org.apache.coyote.http2.SendfileData)",
            "org.apache.tomcat.util.net.Nio2Channel$3:void read(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.Nio2Channel$3:void read(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.Nio2Channel$3:void write(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.Nio2Channel$3:void write(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SecureNio2Channel$1:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$2:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$3:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$4:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$4:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void write(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void write(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SocketWrapperBase$VectoredIOCompletionHandler:void failed(java.lang.Throwable,org.apache.tomcat.util.net.SocketWrapperBase$OperationState)",
            "org.apache.tomcat.util.net.SocketWrapperBase:org.apache.tomcat.util.net.SocketWrapperBase$CompletionState vectoredOperation(boolean,java.nio.ByteBuffer[],int,int,org.apache.tomcat.util.net.SocketWrapperBase$BlockingMode,long,java.util.concurrent.TimeUnit,java.lang.Object,org.apache.tomcat.util.net.SocketWrapperBase$CompletionCheck,java.nio.channels.CompletionHandler)"
        ]
    },
    "org.apache.tomcat.util.net.SocketWrapperBase$VectoredIOCompletionHandler:void failed(java.lang.Throwable,org.apache.tomcat.util.net.SocketWrapperBase$OperationState)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.AprEndpoint$AprSocketWrapper$AprOperationState:void run()",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$Nio2OperationState$1:void failed(java.lang.Throwable,java.nio.ByteBuffer[])",
            "org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper$NioOperationState:void run()",
            "org.apache.tomcat.util.net.SocketWrapperBase$VectoredIOCompletionHandler:void completed(java.lang.Long,org.apache.tomcat.util.net.SocketWrapperBase$OperationState)",
            "org.apache.tomcat.util.net.SocketWrapperBase$VectoredIOCompletionHandler:void failed(java.lang.Throwable,java.lang.Object)"
        ]
    },
    "org.apache.tomcat.util.net.SocketWrapperBase:org.apache.tomcat.util.net.SocketWrapperBase$CompletionState vectoredOperation(boolean,java.nio.ByteBuffer[],int,int,org.apache.tomcat.util.net.SocketWrapperBase$BlockingMode,long,java.util.concurrent.TimeUnit,java.lang.Object,org.apache.tomcat.util.net.SocketWrapperBase$CompletionCheck,java.nio.channels.CompletionHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SocketWrapperBase:org.apache.tomcat.util.net.SocketWrapperBase$CompletionState read(java.nio.ByteBuffer[],int,int,org.apache.tomcat.util.net.SocketWrapperBase$BlockingMode,long,java.util.concurrent.TimeUnit,java.lang.Object,org.apache.tomcat.util.net.SocketWrapperBase$CompletionCheck,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SocketWrapperBase:org.apache.tomcat.util.net.SocketWrapperBase$CompletionState write(java.nio.ByteBuffer[],int,int,org.apache.tomcat.util.net.SocketWrapperBase$BlockingMode,long,java.util.concurrent.TimeUnit,java.lang.Object,org.apache.tomcat.util.net.SocketWrapperBase$CompletionCheck,java.nio.channels.CompletionHandler)"
        ]
    },
    "org.apache.tomcat.util.net.AbstractEndpoint:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProtocol:void start()"
        ]
    },
    "org.apache.catalina.connector.Connector:void resume()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$Nio2OperationState$1:void completed(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SecureNio2Channel$1:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$2:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$3:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$4:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void read(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void read(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SocketWrapperBase$VectoredIOCompletionHandler:void completed(java.lang.Long,org.apache.tomcat.util.net.SocketWrapperBase$OperationState)"
        ]
    },
    "org.apache.catalina.connector.Connector:void stopInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void stop()"
        ]
    },
    "org.apache.tomcat.util.net.AbstractEndpoint:void bindWithCleanup()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.AbstractEndpoint:void init()",
            "org.apache.tomcat.util.net.AbstractEndpoint:void start()"
        ]
    },
    "org.apache.tomcat.util.net.AbstractEndpoint:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProtocol:void destroy()"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel$FutureRead:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ContainerBase:void startInternal()",
            "org.apache.catalina.core.ContainerBase:void stopInternal()",
            "org.apache.catalina.startup.ContextConfig:void processAnnotationsInParallel(java.util.Set,boolean,java.util.Map)",
            "org.apache.catalina.startup.HostConfig:void deployDescriptors(java.io.File,java.lang.String[])",
            "org.apache.catalina.startup.HostConfig:void deployWARs(java.io.File,java.lang.String[])",
            "org.apache.catalina.startup.HostConfig:void deployDirectories(java.io.File,java.lang.String[])",
            "org.apache.catalina.startup.HostConfig:void migrateLegacyApps()",
            "org.apache.catalina.startup.UserConfig:void deploy()",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:int fillReadBuffer(boolean,java.nio.ByteBuffer)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:void doWrite(boolean,java.nio.ByteBuffer)",
            "org.apache.tomcat.util.net.Nio2Endpoint:java.nio.channels.AsynchronousSocketChannel serverSocketAccept()",
            "org.apache.tomcat.util.net.SecureNio2Channel$FutureFlush:java.lang.Boolean get()",
            "org.apache.tomcat.util.net.SecureNio2Channel$FutureRead:java.lang.Integer get()",
            "org.apache.tomcat.util.net.SecureNio2Channel$FutureRead:java.lang.Integer unwrap(int,long,java.util.concurrent.TimeUnit)",
            "org.apache.tomcat.util.net.SecureNio2Channel$FutureWrite:java.lang.Integer get()",
            "org.apache.tomcat.util.net.SecureNio2Channel:int handshakeInternal(boolean)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void close()"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel$FutureRead:java.lang.Object get(long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:int fillReadBuffer(boolean,java.nio.ByteBuffer)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:void doWrite(boolean,java.nio.ByteBuffer)",
            "org.apache.tomcat.util.net.SecureNio2Channel$FutureFlush:java.lang.Boolean get(long,java.util.concurrent.TimeUnit)",
            "org.apache.tomcat.util.net.SecureNio2Channel$FutureRead:java.lang.Integer get(long,java.util.concurrent.TimeUnit)",
            "org.apache.tomcat.util.net.SecureNio2Channel$FutureRead:java.lang.Integer unwrap(int,long,java.util.concurrent.TimeUnit)",
            "org.apache.tomcat.util.net.SecureNio2Channel$FutureWrite:java.lang.Integer get(long,java.util.concurrent.TimeUnit)",
            "org.apache.tomcat.util.net.SecureNio2Channel:int handshakeInternal(boolean)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void close()"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel$FutureWrite:void <init>(org.apache.tomcat.util.net.SecureNio2Channel,java.nio.ByteBuffer,org.apache.tomcat.util.net.SecureNio2Channel$1)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SecureNio2Channel:java.util.concurrent.Future write(java.nio.ByteBuffer)"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel$FutureWrite:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ContainerBase:void startInternal()",
            "org.apache.catalina.core.ContainerBase:void stopInternal()",
            "org.apache.catalina.startup.ContextConfig:void processAnnotationsInParallel(java.util.Set,boolean,java.util.Map)",
            "org.apache.catalina.startup.HostConfig:void deployDescriptors(java.io.File,java.lang.String[])",
            "org.apache.catalina.startup.HostConfig:void deployWARs(java.io.File,java.lang.String[])",
            "org.apache.catalina.startup.HostConfig:void deployDirectories(java.io.File,java.lang.String[])",
            "org.apache.catalina.startup.HostConfig:void migrateLegacyApps()",
            "org.apache.catalina.startup.UserConfig:void deploy()",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:int fillReadBuffer(boolean,java.nio.ByteBuffer)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:void doWrite(boolean,java.nio.ByteBuffer)",
            "org.apache.tomcat.util.net.Nio2Endpoint:java.nio.channels.AsynchronousSocketChannel serverSocketAccept()",
            "org.apache.tomcat.util.net.SecureNio2Channel$FutureFlush:java.lang.Boolean get()",
            "org.apache.tomcat.util.net.SecureNio2Channel$FutureRead:java.lang.Integer get()",
            "org.apache.tomcat.util.net.SecureNio2Channel$FutureRead:java.lang.Integer unwrap(int,long,java.util.concurrent.TimeUnit)",
            "org.apache.tomcat.util.net.SecureNio2Channel$FutureWrite:java.lang.Integer get()",
            "org.apache.tomcat.util.net.SecureNio2Channel:int handshakeInternal(boolean)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void close()"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel$FutureWrite:java.lang.Object get(long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:int fillReadBuffer(boolean,java.nio.ByteBuffer)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:void doWrite(boolean,java.nio.ByteBuffer)",
            "org.apache.tomcat.util.net.SecureNio2Channel$FutureFlush:java.lang.Boolean get(long,java.util.concurrent.TimeUnit)",
            "org.apache.tomcat.util.net.SecureNio2Channel$FutureRead:java.lang.Integer get(long,java.util.concurrent.TimeUnit)",
            "org.apache.tomcat.util.net.SecureNio2Channel$FutureRead:java.lang.Integer unwrap(int,long,java.util.concurrent.TimeUnit)",
            "org.apache.tomcat.util.net.SecureNio2Channel$FutureWrite:java.lang.Integer get(long,java.util.concurrent.TimeUnit)",
            "org.apache.tomcat.util.net.SecureNio2Channel:int handshakeInternal(boolean)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void close()"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:void doClientAuth(org.apache.tomcat.util.net.SSLSupport)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11Processor:void sslReHandShake()"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:boolean isReadyForWrite()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.ajp.AjpProcessor:boolean isReadyForWrite()",
            "org.apache.coyote.http11.upgrade.UpgradeServletOutputStream:boolean isReady()",
            "org.apache.coyote.http11.upgrade.UpgradeServletOutputStream:void onWritePossible()"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:void writeNonBlocking(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SocketWrapperBase:void write(boolean,byte[],int,int)"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:void writeNonBlockingInternal(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:void writeNonBlocking(java.nio.ByteBuffer)",
            "org.apache.tomcat.util.net.SocketWrapperBase:void writeNonBlocking(java.nio.ByteBuffer)",
            "org.apache.tomcat.util.net.WriteBuffer:boolean write(org.apache.tomcat.util.net.SocketWrapperBase,boolean)"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:boolean flushNonBlocking()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SocketWrapperBase:boolean flush(boolean)"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel$3:void completed(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SecureNio2Channel$1:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$2:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$3:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$4:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void read(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void read(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SocketWrapperBase$VectoredIOCompletionHandler:void completed(java.lang.Long,org.apache.tomcat.util.net.SocketWrapperBase$OperationState)"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$Nio2OperationState:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SocketWrapperBase:org.apache.tomcat.util.net.SocketWrapperBase$CompletionState vectoredOperation(boolean,java.nio.ByteBuffer[],int,int,org.apache.tomcat.util.net.SocketWrapperBase$BlockingMode,long,java.util.concurrent.TimeUnit,java.lang.Object,org.apache.tomcat.util.net.SocketWrapperBase$CompletionCheck,java.nio.channels.CompletionHandler)"
        ]
    },
    "org.apache.tomcat.util.net.SocketWrapperBase$OperationState:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SocketWrapperBase:org.apache.tomcat.util.net.SocketWrapperBase$CompletionState vectoredOperation(boolean,java.nio.ByteBuffer[],int,int,org.apache.tomcat.util.net.SocketWrapperBase$BlockingMode,long,java.util.concurrent.TimeUnit,java.lang.Object,org.apache.tomcat.util.net.SocketWrapperBase$CompletionCheck,java.nio.channels.CompletionHandler)"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel$4:void completed(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SecureNio2Channel$1:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$2:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$3:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$4:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void read(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void read(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SocketWrapperBase$VectoredIOCompletionHandler:void completed(java.lang.Long,org.apache.tomcat.util.net.SocketWrapperBase$OperationState)"
        ]
    },
    "org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper:void doClientAuth(org.apache.tomcat.util.net.SSLSupport)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11Processor:void sslReHandShake()"
        ]
    },
    "org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper:int read(boolean,java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11InputBuffer:boolean fill(boolean)"
        ]
    },
    "org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper:int fillReadBuffer(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper:boolean isReadyForRead()",
            "org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper:int read(boolean,byte[],int,int)",
            "org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper:int read(boolean,java.nio.ByteBuffer)"
        ]
    },
    "org.apache.tomcat.util.net.SocketWrapperBase:void doWrite(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SocketWrapperBase:void writeBlocking(byte[],int,int)",
            "org.apache.tomcat.util.net.SocketWrapperBase:void writeBlocking(java.nio.ByteBuffer)",
            "org.apache.tomcat.util.net.SocketWrapperBase:void writeNonBlocking(byte[],int,int)",
            "org.apache.tomcat.util.net.SocketWrapperBase:void writeNonBlockingInternal(java.nio.ByteBuffer)",
            "org.apache.tomcat.util.net.SocketWrapperBase:void flushBlocking()",
            "org.apache.tomcat.util.net.SocketWrapperBase:boolean flushNonBlocking()"
        ]
    },
    "org.apache.coyote.Response:void doWrite(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.OutputBuffer:void realWriteBytes(java.nio.ByteBuffer)"
        ]
    },
    "org.apache.catalina.authenticator.SSLAuthenticator:boolean doAuthenticate(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.AuthenticatorBase:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.authenticator.AuthenticatorBase:boolean authenticate(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.authenticator.FormAuthenticator:boolean doAuthenticate(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.AuthenticatorBase:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.authenticator.AuthenticatorBase:boolean authenticate(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.connector.CoyoteInputStream$PrivilegedAvailable:java.lang.Integer run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.CoyoteInputStream$PrivilegedAvailable:java.lang.Object run()"
        ]
    },
    "org.apache.catalina.connector.CoyoteInputStream:int available()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.webresources.AbstractArchiveResource$JarInputStreamWrapper:int available()",
            "org.apache.catalina.webresources.TrackedInputStream:int available()"
        ]
    },
    "org.apache.catalina.connector.InputBuffer:boolean ready()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.CoyoteReader:boolean ready()"
        ]
    },
    "org.apache.catalina.connector.CoyoteInputStream:boolean isReady()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.connector.CoyoteInputStream:void checkNonBlockingRead()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.CoyoteInputStream:int read()",
            "org.apache.catalina.connector.CoyoteInputStream:int read(byte[],int,int)",
            "org.apache.catalina.connector.CoyoteInputStream:int read(java.nio.ByteBuffer)"
        ]
    },
    "jakarta.servlet.ServletRequestWrapper:java.lang.Object getAttribute(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletRequestWrapper:java.lang.Object getAttribute(java.lang.String)",
            "org.apache.catalina.core.ApplicationDispatcher:void doForward(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)",
            "org.apache.catalina.core.ApplicationDispatcher:void processRequest(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,org.apache.catalina.core.ApplicationDispatcher$State)",
            "org.apache.catalina.core.ApplicationDispatcher:jakarta.servlet.ServletRequest wrapRequest(org.apache.catalina.core.ApplicationDispatcher$State)",
            "org.apache.catalina.core.ApplicationFilterFactory:org.apache.catalina.core.ApplicationFilterChain createFilterChain(jakarta.servlet.ServletRequest,org.apache.catalina.Wrapper,jakarta.servlet.Servlet)",
            "org.apache.catalina.core.ApplicationHttpRequest:java.lang.Object getAttribute(java.lang.String)",
            "org.apache.catalina.core.ApplicationHttpRequest:void setRequest(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.core.ApplicationRequest:void setRequest(jakarta.servlet.ServletRequest)",
            "org.apache.catalina.filters.FailedRequestFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.filters.FailedRequestFilter:boolean isGoodRequest(jakarta.servlet.ServletRequest)",
            "org.apache.catalina.servlets.CGIServlet$CGIEnvironment:boolean setupFromRequest(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.servlets.CGIServlet:void printServletEnvironment(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.servlets.DefaultServlet:java.lang.String getRelativePath(jakarta.servlet.http.HttpServletRequest,boolean)",
            "org.apache.catalina.servlets.DefaultServlet:void serveResource(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,boolean,java.lang.String)",
            "org.apache.catalina.servlets.DefaultServlet:boolean checkSendfile(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.catalina.WebResource,long,org.apache.tomcat.util.http.parser.Ranges$Entry)",
            "org.apache.catalina.servlets.WebdavServlet:java.lang.String getRelativePath(jakarta.servlet.http.HttpServletRequest,boolean)",
            "org.apache.catalina.valves.AbstractAccessLogValve:void log(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)"
        ]
    },
    "org.apache.catalina.authenticator.AuthenticatorBase:void register(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse,java.security.Principal,java.lang.String,java.lang.String,java.lang.String,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.AuthenticatorBase:boolean authenticateJaspic(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,org.apache.catalina.authenticator.AuthenticatorBase$JaspicState,boolean)",
            "org.apache.catalina.authenticator.AuthenticatorBase:void register(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse,java.security.Principal,java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.catalina.authenticator.FormAuthenticator:void register(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse,java.security.Principal,java.lang.String,java.lang.String,java.lang.String,boolean,boolean)"
        ]
    },
    "org.apache.catalina.connector.CoyoteAdapter:void parseSessionSslId(org.apache.catalina.connector.Request)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.CoyoteAdapter:boolean postParseRequest(org.apache.coyote.Request,org.apache.catalina.connector.Request,org.apache.coyote.Response,org.apache.catalina.connector.Response)"
        ]
    },
    "org.apache.catalina.connector.Request:java.util.Enumeration getAttributeNames()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletRequestWrapper:java.util.Enumeration getAttributeNames()",
            "org.apache.catalina.connector.RequestFacade$GetAttributePrivilegedAction:java.util.Enumeration run()",
            "org.apache.catalina.connector.RequestFacade:java.util.Enumeration getAttributeNames()",
            "org.apache.catalina.core.ApplicationHttpRequest$AttributeNamesEnumerator:void <init>(org.apache.catalina.core.ApplicationHttpRequest)",
            "org.apache.catalina.core.ApplicationRequest:void setRequest(jakarta.servlet.ServletRequest)",
            "org.apache.catalina.servlets.CGIServlet:void printServletEnvironment(jakarta.servlet.http.HttpServletRequest)"
        ]
    },
    "org.apache.catalina.connector.Request:jakarta.servlet.RequestDispatcher getRequestDispatcher(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletRequestWrapper:jakarta.servlet.RequestDispatcher getRequestDispatcher(java.lang.String)",
            "org.apache.catalina.connector.RequestFacade$GetRequestDispatcherPrivilegedAction:jakarta.servlet.RequestDispatcher run()",
            "org.apache.catalina.connector.RequestFacade:jakarta.servlet.RequestDispatcher getRequestDispatcher(java.lang.String)"
        ]
    },
    "org.apache.catalina.connector.RequestFacade:java.lang.Object getAttribute(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletRequestWrapper:java.lang.Object getAttribute(java.lang.String)",
            "org.apache.catalina.core.ApplicationDispatcher:void doForward(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)",
            "org.apache.catalina.core.ApplicationDispatcher:void processRequest(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,org.apache.catalina.core.ApplicationDispatcher$State)",
            "org.apache.catalina.core.ApplicationDispatcher:jakarta.servlet.ServletRequest wrapRequest(org.apache.catalina.core.ApplicationDispatcher$State)",
            "org.apache.catalina.core.ApplicationFilterFactory:org.apache.catalina.core.ApplicationFilterChain createFilterChain(jakarta.servlet.ServletRequest,org.apache.catalina.Wrapper,jakarta.servlet.Servlet)",
            "org.apache.catalina.core.ApplicationHttpRequest:java.lang.Object getAttribute(java.lang.String)",
            "org.apache.catalina.core.ApplicationHttpRequest:void setRequest(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.core.ApplicationRequest:void setRequest(jakarta.servlet.ServletRequest)",
            "org.apache.catalina.filters.FailedRequestFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.filters.FailedRequestFilter:boolean isGoodRequest(jakarta.servlet.ServletRequest)",
            "org.apache.catalina.servlets.CGIServlet$CGIEnvironment:boolean setupFromRequest(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.servlets.CGIServlet:void printServletEnvironment(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.servlets.DefaultServlet:java.lang.String getRelativePath(jakarta.servlet.http.HttpServletRequest,boolean)",
            "org.apache.catalina.servlets.DefaultServlet:void serveResource(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,boolean,java.lang.String)",
            "org.apache.catalina.servlets.DefaultServlet:boolean checkSendfile(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.catalina.WebResource,long,org.apache.tomcat.util.http.parser.Ranges$Entry)",
            "org.apache.catalina.servlets.WebdavServlet:java.lang.String getRelativePath(jakarta.servlet.http.HttpServletRequest,boolean)",
            "org.apache.catalina.valves.AbstractAccessLogValve:void log(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)"
        ]
    },
    "org.apache.catalina.core.ApplicationDispatcher:void doForward(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationDispatcher:void forward(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)",
            "org.apache.catalina.core.ApplicationDispatcher:void access$000(org.apache.catalina.core.ApplicationDispatcher,jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)"
        ]
    },
    "org.apache.catalina.core.ApplicationDispatcher:void processRequest(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,org.apache.catalina.core.ApplicationDispatcher$State)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationDispatcher:void doForward(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)"
        ]
    },
    "org.apache.catalina.core.ApplicationDispatcher:jakarta.servlet.ServletRequest wrapRequest(org.apache.catalina.core.ApplicationDispatcher$State)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationDispatcher:void doForward(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)",
            "org.apache.catalina.core.ApplicationDispatcher:void doInclude(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)",
            "org.apache.catalina.core.ApplicationDispatcher:void doDispatch(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)"
        ]
    },
    "org.apache.catalina.core.ApplicationFilterFactory:org.apache.catalina.core.ApplicationFilterChain createFilterChain(jakarta.servlet.ServletRequest,org.apache.catalina.Wrapper,jakarta.servlet.Servlet)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationDispatcher:void invoke(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,org.apache.catalina.core.ApplicationDispatcher$State)",
            "org.apache.catalina.core.StandardWrapperValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)"
        ]
    },
    "org.apache.catalina.core.ApplicationHttpRequest:java.lang.Object getAttribute(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletRequestWrapper:java.lang.Object getAttribute(java.lang.String)",
            "org.apache.catalina.core.ApplicationDispatcher:void doForward(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)",
            "org.apache.catalina.core.ApplicationDispatcher:void processRequest(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,org.apache.catalina.core.ApplicationDispatcher$State)",
            "org.apache.catalina.core.ApplicationDispatcher:jakarta.servlet.ServletRequest wrapRequest(org.apache.catalina.core.ApplicationDispatcher$State)",
            "org.apache.catalina.core.ApplicationFilterFactory:org.apache.catalina.core.ApplicationFilterChain createFilterChain(jakarta.servlet.ServletRequest,org.apache.catalina.Wrapper,jakarta.servlet.Servlet)",
            "org.apache.catalina.core.ApplicationHttpRequest$AttributeNamesEnumerator:void <init>(org.apache.catalina.core.ApplicationHttpRequest)",
            "org.apache.catalina.core.ApplicationHttpRequest$AttributeNamesEnumerator:java.lang.String nextElement()",
            "org.apache.catalina.core.ApplicationHttpRequest:java.lang.Object getAttribute(java.lang.String)",
            "org.apache.catalina.core.ApplicationHttpRequest:jakarta.servlet.RequestDispatcher getRequestDispatcher(java.lang.String)",
            "org.apache.catalina.core.ApplicationHttpRequest:void setRequest(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.core.ApplicationRequest:void setRequest(jakarta.servlet.ServletRequest)",
            "org.apache.catalina.filters.FailedRequestFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.filters.FailedRequestFilter:boolean isGoodRequest(jakarta.servlet.ServletRequest)",
            "org.apache.catalina.servlets.CGIServlet$CGIEnvironment:boolean setupFromRequest(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.servlets.CGIServlet:void printServletEnvironment(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.servlets.DefaultServlet:java.lang.String getRelativePath(jakarta.servlet.http.HttpServletRequest,boolean)",
            "org.apache.catalina.servlets.DefaultServlet:void serveResource(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,boolean,java.lang.String)",
            "org.apache.catalina.servlets.DefaultServlet:boolean checkSendfile(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.catalina.WebResource,long,org.apache.tomcat.util.http.parser.Ranges$Entry)",
            "org.apache.catalina.servlets.WebdavServlet:java.lang.String getRelativePath(jakarta.servlet.http.HttpServletRequest,boolean)",
            "org.apache.catalina.valves.AbstractAccessLogValve:void log(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)"
        ]
    },
    "org.apache.catalina.core.ApplicationHttpRequest:void setRequest(jakarta.servlet.http.HttpServletRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationHttpRequest:void <init>(jakarta.servlet.http.HttpServletRequest,org.apache.catalina.Context,boolean)"
        ]
    },
    "org.apache.catalina.core.ApplicationRequest:void setRequest(jakarta.servlet.ServletRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationDispatcher:void unwrapRequest(org.apache.catalina.core.ApplicationDispatcher$State)",
            "org.apache.catalina.core.ApplicationDispatcher:jakarta.servlet.ServletRequest wrapRequest(org.apache.catalina.core.ApplicationDispatcher$State)",
            "org.apache.catalina.core.ApplicationRequest:void <init>(jakarta.servlet.ServletRequest)"
        ]
    },
    "org.apache.catalina.filters.FailedRequestFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationFilterChain:void internalDoFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)"
        ]
    },
    "org.apache.catalina.filters.FailedRequestFilter:boolean isGoodRequest(jakarta.servlet.ServletRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.FailedRequestFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)"
        ]
    },
    "org.apache.catalina.servlets.CGIServlet$CGIEnvironment:boolean setupFromRequest(jakarta.servlet.http.HttpServletRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.CGIServlet$CGIEnvironment:void <init>(org.apache.catalina.servlets.CGIServlet,jakarta.servlet.http.HttpServletRequest,jakarta.servlet.ServletContext)"
        ]
    },
    "org.apache.catalina.servlets.CGIServlet:void printServletEnvironment(jakarta.servlet.http.HttpServletRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.CGIServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.servlets.DefaultServlet:java.lang.String getRelativePath(jakarta.servlet.http.HttpServletRequest,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.DefaultServlet:java.lang.String getRelativePath(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.servlets.DefaultServlet:void serveResource(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,boolean,java.lang.String)"
        ]
    },
    "org.apache.catalina.servlets.DefaultServlet:void serveResource(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,boolean,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.DefaultServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.DefaultServlet:void doHead(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.servlets.DefaultServlet:boolean checkSendfile(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.catalina.WebResource,long,org.apache.tomcat.util.http.parser.Ranges$Entry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.DefaultServlet:void serveResource(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,boolean,java.lang.String)"
        ]
    },
    "org.apache.catalina.servlets.WebdavServlet:java.lang.String getRelativePath(jakarta.servlet.http.HttpServletRequest,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.DefaultServlet:java.lang.String getRelativePath(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.servlets.DefaultServlet:void serveResource(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,boolean,java.lang.String)",
            "org.apache.catalina.servlets.WebdavServlet:java.lang.String getRelativePath(jakarta.servlet.http.HttpServletRequest)"
        ]
    },
    "org.apache.catalina.valves.AbstractAccessLogValve$ByteSentElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.valves.AbstractAccessLogValve:void log(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)"
        ]
    },
    "org.apache.catalina.valves.AbstractAccessLogValve$HostElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.valves.AbstractAccessLogValve:void log(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)"
        ]
    },
    "org.apache.catalina.valves.AbstractAccessLogValve$LocalServerNameElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.valves.AbstractAccessLogValve:void log(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)"
        ]
    },
    "org.apache.catalina.valves.AbstractAccessLogValve$PortElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.valves.AbstractAccessLogValve:void log(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)"
        ]
    },
    "org.apache.catalina.valves.AbstractAccessLogValve$ProtocolElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.valves.AbstractAccessLogValve:void log(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)"
        ]
    },
    "org.apache.catalina.valves.AbstractAccessLogValve$RemoteAddrElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.valves.AbstractAccessLogValve:void log(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)"
        ]
    },
    "org.apache.catalina.valves.AbstractAccessLogValve$RequestAttributeElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.valves.AbstractAccessLogValve:void log(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)"
        ]
    },
    "org.apache.catalina.valves.AbstractAccessLogValve:void log(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.AccessLogAdapter:void log(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.core.ContainerBase:void logAccess(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long,boolean)",
            "org.apache.catalina.core.StandardEngine:void logAccess(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long,boolean)"
        ]
    },
    "org.apache.catalina.valves.ExtendedAccessLogValve$RequestAttributeElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.valves.AbstractAccessLogValve:void log(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)"
        ]
    },
    "org.apache.catalina.valves.JDBCAccessLogValve:void log(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.AccessLogAdapter:void log(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.core.ContainerBase:void logAccess(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long,boolean)",
            "org.apache.catalina.core.StandardEngine:void logAccess(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long,boolean)"
        ]
    },
    "org.apache.catalina.valves.rewrite.ResolverImpl:java.lang.String resolveEnv(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.valves.rewrite.Substitution$ServerVariableEnvElement:java.lang.String evaluate(java.util.regex.Matcher,java.util.regex.Matcher,org.apache.catalina.valves.rewrite.Resolver)"
        ]
    },
    "org.apache.catalina.valves.rewrite.ResolverImpl:java.lang.String resolveSsl(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.valves.rewrite.Substitution$ServerVariableSslElement:java.lang.String evaluate(java.util.regex.Matcher,java.util.regex.Matcher,org.apache.catalina.valves.rewrite.Resolver)"
        ]
    },
    "jakarta.servlet.ServletRequestWrapper:java.lang.String getRemoteAddr()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletRequestWrapper:java.lang.String getRemoteAddr()",
            "org.apache.catalina.filters.RemoteAddrFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.filters.RemoteCIDRFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.filters.RemoteIpFilter$XForwardedRequest:void <init>(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.filters.RemoteIpFilter:void doFilter(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.filters.RequestDumperFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.servlets.CGIServlet$CGIEnvironment:boolean setCGIEnvironment(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.servlets.CGIServlet:void printServletEnvironment(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.valves.RemoteAddrValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.RemoteCIDRValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)"
        ]
    },
    "org.apache.catalina.authenticator.DigestAuthenticator$DigestInfo:boolean validate(org.apache.catalina.connector.Request)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.DigestAuthenticator:boolean doAuthenticate(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.authenticator.DigestAuthenticator:java.lang.String generateNonce(org.apache.catalina.connector.Request)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.DigestAuthenticator:boolean doAuthenticate(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.connector.RequestFacade:java.lang.String getRemoteAddr()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletRequestWrapper:java.lang.String getRemoteAddr()",
            "org.apache.catalina.filters.RemoteAddrFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.filters.RemoteCIDRFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.filters.RemoteIpFilter$XForwardedRequest:void <init>(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.filters.RemoteIpFilter:void doFilter(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.filters.RequestDumperFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.servlets.CGIServlet$CGIEnvironment:boolean setCGIEnvironment(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.servlets.CGIServlet:void printServletEnvironment(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.valves.RemoteAddrValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.RemoteCIDRValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)"
        ]
    },
    "org.apache.catalina.filters.RemoteAddrFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationFilterChain:void internalDoFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)"
        ]
    },
    "org.apache.catalina.filters.RemoteCIDRFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationFilterChain:void internalDoFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)"
        ]
    },
    "org.apache.catalina.filters.RemoteIpFilter$XForwardedRequest:void <init>(jakarta.servlet.http.HttpServletRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.RemoteIpFilter:void doFilter(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,jakarta.servlet.FilterChain)"
        ]
    },
    "org.apache.catalina.filters.RemoteIpFilter:void doFilter(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,jakarta.servlet.FilterChain)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.RemoteIpFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)"
        ]
    },
    "org.apache.catalina.filters.RequestDumperFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationFilterChain:void internalDoFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)"
        ]
    },
    "org.apache.catalina.servlets.CGIServlet$CGIEnvironment:boolean setCGIEnvironment(jakarta.servlet.http.HttpServletRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.CGIServlet$CGIEnvironment:void <init>(org.apache.catalina.servlets.CGIServlet,jakarta.servlet.http.HttpServletRequest,jakarta.servlet.ServletContext)"
        ]
    },
    "org.apache.catalina.valves.AbstractAccessLogValve$RemoteAddrElement:void cache(org.apache.catalina.connector.Request)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.valves.AbstractAccessLogValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)"
        ]
    },
    "org.apache.catalina.valves.rewrite.ResolverImpl:java.lang.String resolve(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.valves.rewrite.Substitution$ServerVariableElement:java.lang.String evaluate(java.util.regex.Matcher,java.util.regex.Matcher,org.apache.catalina.valves.rewrite.Resolver)"
        ]
    },
    "jakarta.servlet.ServletRequestWrapper:java.lang.String getRemoteHost()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletRequestWrapper:java.lang.String getRemoteHost()",
            "org.apache.catalina.filters.RemoteHostFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.filters.RemoteIpFilter$XForwardedRequest:void <init>(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.filters.RemoteIpFilter:void doFilter(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.filters.RequestDumperFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.servlets.CGIServlet$CGIEnvironment:boolean setCGIEnvironment(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.servlets.CGIServlet:void printServletEnvironment(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.valves.RemoteHostValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)"
        ]
    },
    "org.apache.catalina.connector.RequestFacade:java.lang.String getRemoteHost()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletRequestWrapper:java.lang.String getRemoteHost()",
            "org.apache.catalina.filters.RemoteHostFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.filters.RemoteIpFilter$XForwardedRequest:void <init>(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.filters.RemoteIpFilter:void doFilter(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.filters.RequestDumperFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.servlets.CGIServlet$CGIEnvironment:boolean setCGIEnvironment(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.servlets.CGIServlet:void printServletEnvironment(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.valves.RemoteHostValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)"
        ]
    },
    "org.apache.catalina.filters.RemoteHostFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationFilterChain:void internalDoFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)"
        ]
    },
    "org.apache.catalina.valves.AbstractAccessLogValve$HostElement:void cache(org.apache.catalina.connector.Request)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.valves.AbstractAccessLogValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)"
        ]
    },
    "jakarta.servlet.ServletRequestWrapper:int getRemotePort()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletRequestWrapper:int getRemotePort()"
        ]
    },
    "org.apache.catalina.connector.RequestFacade:int getRemotePort()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletRequestWrapper:int getRemotePort()"
        ]
    },
    "org.apache.catalina.valves.AbstractAccessLogValve$PortElement:void cache(org.apache.catalina.connector.Request)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.valves.AbstractAccessLogValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)"
        ]
    },
    "jakarta.servlet.ServletRequestWrapper:java.lang.String getLocalName()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletRequestWrapper:java.lang.String getLocalName()",
            "org.apache.catalina.filters.RemoteIpFilter$XForwardedRequest:void <init>(jakarta.servlet.http.HttpServletRequest)"
        ]
    },
    "org.apache.catalina.connector.RequestFacade:java.lang.String getLocalName()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletRequestWrapper:java.lang.String getLocalName()",
            "org.apache.catalina.filters.RemoteIpFilter$XForwardedRequest:void <init>(jakarta.servlet.http.HttpServletRequest)"
        ]
    },
    "jakarta.servlet.ServletRequestWrapper:java.lang.String getLocalAddr()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletRequestWrapper:java.lang.String getLocalAddr()"
        ]
    },
    "org.apache.catalina.connector.RequestFacade:java.lang.String getLocalAddr()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletRequestWrapper:java.lang.String getLocalAddr()"
        ]
    },
    "jakarta.servlet.ServletRequestWrapper:int getLocalPort()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletRequestWrapper:int getLocalPort()",
            "org.apache.catalina.filters.RemoteIpFilter$XForwardedRequest:void <init>(jakarta.servlet.http.HttpServletRequest)"
        ]
    },
    "org.apache.catalina.connector.RequestFacade:int getLocalPort()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletRequestWrapper:int getLocalPort()",
            "org.apache.catalina.filters.RemoteIpFilter$XForwardedRequest:void <init>(jakarta.servlet.http.HttpServletRequest)"
        ]
    },
    "org.apache.catalina.connector.Request:jakarta.servlet.http.PushBuilder newPushBuilder()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletRequestWrapper:jakarta.servlet.http.PushBuilder newPushBuilder()",
            "org.apache.catalina.connector.RequestFacade:jakarta.servlet.http.PushBuilder newPushBuilder()"
        ]
    },
    "org.apache.catalina.connector.RequestFacade:jakarta.servlet.http.PushBuilder newPushBuilder(jakarta.servlet.http.HttpServletRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationHttpRequest:jakarta.servlet.http.PushBuilder newPushBuilder()",
            "org.apache.catalina.filters.RemoteIpFilter$XForwardedRequest:jakarta.servlet.http.PushBuilder newPushBuilder()"
        ]
    },
    "jakarta.servlet.http.HttpServletRequestWrapper:jakarta.servlet.http.HttpUpgradeHandler upgrade(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletRequestWrapper:jakarta.servlet.http.HttpUpgradeHandler upgrade(java.lang.Class)"
        ]
    },
    "org.apache.catalina.connector.RequestFacade:jakarta.servlet.http.HttpUpgradeHandler upgrade(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletRequestWrapper:jakarta.servlet.http.HttpUpgradeHandler upgrade(java.lang.Class)"
        ]
    },
    "org.apache.catalina.connector.Request:void finishRequest()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.CoyoteAdapter:boolean asyncDispatch(org.apache.coyote.Request,org.apache.coyote.Response,org.apache.tomcat.util.net.SocketEvent)",
            "org.apache.catalina.connector.CoyoteAdapter:void service(org.apache.coyote.Request,org.apache.coyote.Response)"
        ]
    },
    "org.apache.catalina.connector.Request:void parseParts(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.Request:java.util.Collection getParts()",
            "org.apache.catalina.connector.Request:void parseParameters()"
        ]
    },
    "org.apache.catalina.connector.Request:void parseParameters()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.Request:java.lang.String getParameter(java.lang.String)",
            "org.apache.catalina.connector.Request:java.util.Enumeration getParameterNames()",
            "org.apache.catalina.connector.Request:java.lang.String[] getParameterValues(java.lang.String)"
        ]
    },
    "org.apache.catalina.connector.Request:byte[] readChunkedPostBody()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.Request:void parseParameters()"
        ]
    },
    "org.apache.catalina.core.AsyncContextImpl:void dispatch(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.AsyncContextImpl:void dispatch()"
        ]
    },
    "org.apache.catalina.connector.Request:boolean isAsyncStarted()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletRequestWrapper:boolean isAsyncStarted()",
            "org.apache.catalina.connector.Request:jakarta.servlet.AsyncContext getAsyncContext()",
            "org.apache.catalina.connector.RequestFacade:boolean isAsyncStarted()",
            "org.apache.catalina.core.ApplicationDispatcher:void doForward(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)",
            "org.apache.catalina.core.ApplicationDispatcher:void unwrapRequest(org.apache.catalina.core.ApplicationDispatcher$State)",
            "org.apache.catalina.core.ApplicationDispatcher:void unwrapResponse(org.apache.catalina.core.ApplicationDispatcher$State)"
        ]
    },
    "org.apache.catalina.connector.Request:jakarta.servlet.AsyncContext startAsync(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletRequestWrapper:jakarta.servlet.AsyncContext startAsync(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)",
            "org.apache.catalina.connector.Request:jakarta.servlet.AsyncContext startAsync()",
            "org.apache.catalina.connector.RequestFacade:jakarta.servlet.AsyncContext startAsync(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)"
        ]
    },
    "org.apache.catalina.connector.InputBuffer:void setReadListener(jakarta.servlet.ReadListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.CoyoteInputStream:void setReadListener(jakarta.servlet.ReadListener)"
        ]
    },
    "org.apache.coyote.Request:boolean isReady()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.InputBuffer:boolean isReady()",
            "org.apache.coyote.Request:void setReadListener(jakarta.servlet.ReadListener)"
        ]
    },
    "org.apache.catalina.connector.Request:boolean isTrailerFieldsReady()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletRequestWrapper:boolean isTrailerFieldsReady()",
            "org.apache.catalina.connector.Request:java.util.Map getTrailerFields()",
            "org.apache.catalina.connector.RequestFacade:boolean isTrailerFieldsReady()"
        ]
    },
    "org.apache.catalina.connector.InputBuffer:boolean isFinished()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.CoyoteInputStream:boolean isFinished()",
            "org.apache.catalina.connector.InputBuffer:boolean isReady()"
        ]
    },
    "org.apache.catalina.connector.Request:boolean isFinished()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.CoyoteAdapter:boolean asyncDispatch(org.apache.coyote.Request,org.apache.coyote.Response,org.apache.tomcat.util.net.SocketEvent)",
            "org.apache.catalina.connector.CoyoteAdapter:void service(org.apache.coyote.Request,org.apache.coyote.Response)"
        ]
    },
    "org.apache.catalina.connector.InputBuffer:int realReadBytes()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.InputBuffer:int realReadChars()",
            "org.apache.catalina.connector.InputBuffer:boolean checkByteBufferEof()",
            "org.apache.tomcat.util.buf.B2CConverter:void convert(java.nio.ByteBuffer,java.nio.CharBuffer,org.apache.tomcat.util.buf.ByteChunk$ByteInputChannel,boolean)",
            "org.apache.tomcat.util.buf.ByteChunk:boolean checkEof()"
        ]
    },
    "org.apache.coyote.RequestInfo:java.lang.String getRemoteAddrForwarded()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.coyote.http2.Http2UpgradeHandler:void endRequestBodyFrame(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2AsyncUpgradeHandler:void endRequestBodyFrame(int,int)",
            "org.apache.coyote.http2.Http2Parser:void readDataFrame(int,int,int,java.nio.ByteBuffer)"
        ]
    },
    "org.apache.catalina.connector.CoyoteAdapter:boolean prepare(org.apache.coyote.Request,org.apache.coyote.Response)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.valves.rewrite.RewriteValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)"
        ]
    },
    "org.apache.catalina.connector.CoyoteOutputStream:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServlet:void doTrace(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.core.ApplicationDispatcher:void doForward(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)",
            "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream:void close()",
            "org.apache.catalina.startup.Catalina:void stopServer(java.lang.String[])",
            "org.apache.catalina.valves.ErrorReportValve:boolean sendErrorPage(java.lang.String,org.apache.catalina.connector.Response)",
            "org.apache.juli.FileHandler:void openWriter()",
            "org.apache.naming.factory.LookupFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.tomcat.util.http.fileupload.IOUtils:void closeQuietly(java.io.Closeable)",
            "org.apache.tomcat.util.http.fileupload.ThresholdingOutputStream:void close()",
            "org.apache.tomcat.util.http.fileupload.util.Streams:long copy(java.io.InputStream,java.io.OutputStream,boolean,byte[])"
        ]
    },
    "org.apache.catalina.connector.CoyoteWriter:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationDispatcher:void doForward(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)",
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void close()",
            "org.apache.catalina.manager.HTMLManagerServlet:void list(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.ManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.ManagerServlet:void doPut(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.host.HTMLHostManagerServlet:void list(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.host.HostManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.WebdavServlet:void doLock(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.WebdavServlet:void sendReport(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,java.util.Hashtable)",
            "org.apache.catalina.users.MemoryUserDatabase:void save()",
            "org.apache.catalina.valves.AccessLogValve:void close(boolean)",
            "org.apache.juli.FileHandler:void closeWriter()",
            "org.apache.juli.JdkLoggerFormatter:java.lang.String format(java.util.logging.LogRecord)",
            "org.apache.naming.factory.LookupFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.tomcat.util.http.fileupload.IOUtils:void closeQuietly(java.io.Closeable)"
        ]
    },
    "org.apache.catalina.connector.Response:void finishResponse()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.CoyoteAdapter:boolean asyncDispatch(org.apache.coyote.Request,org.apache.coyote.Response,org.apache.tomcat.util.net.SocketEvent)",
            "org.apache.catalina.connector.CoyoteAdapter:void service(org.apache.coyote.Request,org.apache.coyote.Response)",
            "org.apache.catalina.core.StandardHostValve:void status(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.core.StandardHostValve:void throwable(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,java.lang.Throwable)",
            "org.apache.catalina.valves.ErrorReportValve:void report(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,java.lang.Throwable)",
            "org.apache.catalina.valves.JsonErrorReportValve:void report(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,java.lang.Throwable)"
        ]
    },
    "org.apache.naming.factory.LookupFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.naming.NamingContext:java.lang.Object lookup(javax.naming.Name,boolean)",
            "org.apache.naming.factory.FactoryBase:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.naming.factory.LookupFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.IOUtils:void closeQuietly(java.io.Closeable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.disk.DiskFileItem:byte[] get()",
            "org.apache.tomcat.util.http.fileupload.disk.DiskFileItem:void write(java.io.File)",
            "org.apache.tomcat.util.http.fileupload.impl.FileItemIteratorImpl:void init(org.apache.tomcat.util.http.fileupload.FileUploadBase,org.apache.tomcat.util.http.fileupload.RequestContext)",
            "org.apache.tomcat.util.http.fileupload.util.Streams:long copy(java.io.InputStream,java.io.OutputStream,boolean,byte[])"
        ]
    },
    "org.apache.catalina.connector.OutputBuffer:void flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.CoyoteOutputStream:void flush()",
            "org.apache.catalina.connector.CoyoteWriter:void flush()",
            "org.apache.catalina.connector.Response:long getBytesWritten(boolean)",
            "org.apache.catalina.connector.Response:void flushBuffer()"
        ]
    },
    "org.apache.catalina.authenticator.FormAuthenticator:void saveRequest(org.apache.catalina.connector.Request,org.apache.catalina.Session)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.FormAuthenticator:boolean doAuthenticate(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.connector.Response:void setTrailerFields(java.util.function.Supplier)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletResponseWrapper:void setTrailerFields(java.util.function.Supplier)",
            "org.apache.catalina.connector.ResponseFacade:void setTrailerFields(java.util.function.Supplier)"
        ]
    },
    "org.apache.coyote.http2.Http2OutputBuffer:int doWrite(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.Response:void doWrite(java.nio.ByteBuffer)",
            "org.apache.coyote.http11.Http11OutputBuffer:int doWrite(java.nio.ByteBuffer)",
            "org.apache.coyote.http11.filters.ChunkedOutputFilter:int doWrite(java.nio.ByteBuffer)",
            "org.apache.coyote.http11.filters.ChunkedOutputFilter:void end()",
            "org.apache.coyote.http11.filters.GzipOutputFilter$FakeOutputStream:void write(int)",
            "org.apache.coyote.http11.filters.GzipOutputFilter$FakeOutputStream:void write(byte[],int,int)",
            "org.apache.coyote.http11.filters.IdentityOutputFilter:int doWrite(java.nio.ByteBuffer)",
            "org.apache.coyote.http2.Http2OutputBuffer:int doWrite(java.nio.ByteBuffer)"
        ]
    },
    "org.apache.catalina.connector.Response:long getBytesWritten(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.valves.AbstractAccessLogValve$ByteSentElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.JDBCAccessLogValve:void log(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)"
        ]
    },
    "org.apache.catalina.connector.OutputBuffer:void setWriteListener(jakarta.servlet.WriteListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.CoyoteOutputStream:void setWriteListener(jakarta.servlet.WriteListener)"
        ]
    },
    "org.apache.catalina.connector.OutputBuffer:void checkRegisterForWrite()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.CoyoteOutputStream:void checkRegisterForWrite()"
        ]
    },
    "org.apache.coyote.Response:boolean isReady()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.OutputBuffer:boolean isReady()",
            "org.apache.coyote.Response:void setWriteListener(jakarta.servlet.WriteListener)"
        ]
    },
    "org.apache.coyote.ajp.AjpProcessor:boolean flushBufferedWrite()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProcessor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState dispatch(org.apache.tomcat.util.net.SocketEvent)"
        ]
    },
    "org.apache.coyote.http11.filters.ChunkedOutputFilter:int doWrite(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.Response:void doWrite(java.nio.ByteBuffer)",
            "org.apache.coyote.http11.Http11OutputBuffer:int doWrite(java.nio.ByteBuffer)",
            "org.apache.coyote.http11.filters.ChunkedOutputFilter:int doWrite(java.nio.ByteBuffer)",
            "org.apache.coyote.http11.filters.ChunkedOutputFilter:void end()",
            "org.apache.coyote.http11.filters.GzipOutputFilter$FakeOutputStream:void write(int)",
            "org.apache.coyote.http11.filters.GzipOutputFilter$FakeOutputStream:void write(byte[],int,int)",
            "org.apache.coyote.http11.filters.IdentityOutputFilter:int doWrite(java.nio.ByteBuffer)",
            "org.apache.coyote.http2.Http2OutputBuffer:int doWrite(java.nio.ByteBuffer)"
        ]
    },
    "org.apache.coyote.http11.filters.ChunkedOutputFilter:void end()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11OutputBuffer:void end()",
            "org.apache.coyote.http11.filters.ChunkedOutputFilter:void end()",
            "org.apache.coyote.http11.filters.GzipOutputFilter:void end()",
            "org.apache.coyote.http11.filters.IdentityOutputFilter:void end()",
            "org.apache.coyote.http11.filters.VoidOutputFilter:void end()",
            "org.apache.coyote.http2.Http2AsyncUpgradeHandler$SendfileCompletionHandler:void completed(java.lang.Long,org.apache.coyote.http2.SendfileData)",
            "org.apache.coyote.http2.Http2OutputBuffer:void end()",
            "org.apache.coyote.http2.StreamProcessor:void finishResponse()"
        ]
    },
    "org.apache.coyote.http11.filters.GzipOutputFilter$FakeOutputStream:void write(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.Catalina:void stopServer(java.lang.String[])",
            "org.apache.tomcat.util.http.fileupload.ThresholdingOutputStream:void write(int)",
            "org.apache.tomcat.util.http.fileupload.util.mime.QuotedPrintableDecoder:int decode(byte[],java.io.OutputStream)"
        ]
    },
    "org.apache.coyote.http11.filters.GzipOutputFilter$FakeOutputStream:void write(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.IOTools:void flow(java.io.InputStream,java.io.OutputStream)",
            "org.apache.tomcat.util.http.fileupload.ByteArrayOutputStream:void writeTo(java.io.OutputStream)",
            "org.apache.tomcat.util.http.fileupload.IOUtils:long copyLarge(java.io.InputStream,java.io.OutputStream)",
            "org.apache.tomcat.util.http.fileupload.ThresholdingOutputStream:void write(byte[],int,int)",
            "org.apache.tomcat.util.http.fileupload.util.Streams:long copy(java.io.InputStream,java.io.OutputStream,boolean,byte[])"
        ]
    },
    "org.apache.coyote.http11.filters.IdentityOutputFilter:int doWrite(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.Response:void doWrite(java.nio.ByteBuffer)",
            "org.apache.coyote.http11.Http11OutputBuffer:int doWrite(java.nio.ByteBuffer)",
            "org.apache.coyote.http11.filters.ChunkedOutputFilter:int doWrite(java.nio.ByteBuffer)",
            "org.apache.coyote.http11.filters.ChunkedOutputFilter:void end()",
            "org.apache.coyote.http11.filters.GzipOutputFilter$FakeOutputStream:void write(int)",
            "org.apache.coyote.http11.filters.GzipOutputFilter$FakeOutputStream:void write(byte[],int,int)",
            "org.apache.coyote.http11.filters.IdentityOutputFilter:int doWrite(java.nio.ByteBuffer)",
            "org.apache.coyote.http2.Http2OutputBuffer:int doWrite(java.nio.ByteBuffer)"
        ]
    },
    "org.apache.coyote.http2.WindowAllocationManager:void notifyStream()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Stream:void incrementWindowSize(int)"
        ]
    },
    "org.apache.coyote.http2.WindowAllocationManager:void notifyConnection()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Stream:void notifyConnection()"
        ]
    },
    "org.apache.coyote.http2.WindowAllocationManager:void notifyAny()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Stream:void cancelAllocationRequests()"
        ]
    },
    "org.apache.coyote.AbstractProtocol$lambda_startAsyncTimeout_1__11:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.AsyncContextImpl$RunnableWrapper:void run()",
            "org.apache.catalina.core.AsyncContextImpl:void doInternalDispatch()",
            "org.apache.catalina.core.StandardThreadExecutor:void execute(java.lang.Runnable)",
            "org.apache.coyote.AbstractProcessor:void execute(java.lang.Runnable)",
            "org.apache.coyote.AsyncStateMachine:void asyncRun(java.lang.Runnable)",
            "org.apache.tomcat.util.net.Nio2Endpoint:void stopInternal()",
            "org.apache.tomcat.util.net.SecureNio2Channel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()",
            "org.apache.tomcat.util.net.SecureNioChannel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()",
            "org.apache.tomcat.util.net.SocketWrapperBase:void execute(java.lang.Runnable)",
            "org.apache.tomcat.util.threads.InlineExecutorService:void execute(java.lang.Runnable)",
            "org.apache.tomcat.util.threads.ScheduledThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.tomcat.util.threads.TaskThread$WrappingRunnable:void run()",
            "org.apache.tomcat.util.threads.ThreadPoolExecutor:void execute(java.lang.Runnable,long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.apache.coyote.http2.Http2AsyncUpgradeHandler:void processConnectionCallback(jakarta.servlet.http.WebConnection,org.apache.coyote.http2.Stream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2AsyncParser$PrefaceCompletionHandler:void completed(java.lang.Long,java.lang.Void)"
        ]
    },
    "org.apache.coyote.http2.Http2UpgradeHandler:void init(jakarta.servlet.http.WebConnection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProtocol$ConnectionHandler:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState process(org.apache.tomcat.util.net.SocketWrapperBase,org.apache.tomcat.util.net.SocketEvent)",
            "org.apache.coyote.http2.Http2AsyncUpgradeHandler:void init(jakarta.servlet.http.WebConnection)",
            "org.apache.coyote.http2.Http2UpgradeHandler:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState upgradeDispatch(org.apache.tomcat.util.net.SocketEvent)"
        ]
    },
    "org.apache.coyote.http2.Stream$PrivilegedPush:java.lang.Void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Stream$PrivilegedPush:java.lang.Object run()"
        ]
    },
    "org.apache.coyote.http2.Stream:void push(org.apache.coyote.http2.Http2UpgradeHandler,org.apache.coyote.Request,org.apache.coyote.http2.Stream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Stream:void push(org.apache.coyote.Request)"
        ]
    },
    "org.apache.coyote.http2.Http2AsyncUpgradeHandler:void headersEnd(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2Parser:void onHeadersComplete(int)"
        ]
    },
    "org.apache.coyote.http2.Http2Parser:void onHeadersComplete(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2Parser:void readHeadersFrame(int,int,int,java.nio.ByteBuffer)",
            "org.apache.coyote.http2.Http2Parser:void readContinuationFrame(int,int,int,java.nio.ByteBuffer)"
        ]
    },
    "org.apache.tomcat.util.net.AprEndpoint:void startInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.AbstractEndpoint:void start()"
        ]
    },
    "org.apache.coyote.AbstractProcessor:boolean isReadyForRead()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProcessor:void action(org.apache.coyote.ActionCode,java.lang.Object)"
        ]
    },
    "org.apache.coyote.http11.Http11Processor:boolean isReadyForWrite()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProcessor:void action(org.apache.coyote.ActionCode,java.lang.Object)"
        ]
    },
    "org.apache.coyote.http11.Http11Processor:boolean flushBufferedWrite()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProcessor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState dispatch(org.apache.tomcat.util.net.SocketEvent)"
        ]
    },
    "org.apache.coyote.http11.upgrade.UpgradeServletOutputStream:void flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream:void flush()",
            "org.apache.catalina.startup.Catalina:void stopServer(java.lang.String[])",
            "org.apache.tomcat.util.http.fileupload.ThresholdingOutputStream:void flush()",
            "org.apache.tomcat.util.http.fileupload.util.Streams:long copy(java.io.InputStream,java.io.OutputStream,boolean,byte[])"
        ]
    },
    "org.apache.coyote.http11.upgrade.UpgradeServletOutputStream:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServlet:void doTrace(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.core.ApplicationDispatcher:void doForward(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)",
            "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream:void close()",
            "org.apache.catalina.startup.Catalina:void stopServer(java.lang.String[])",
            "org.apache.catalina.valves.ErrorReportValve:boolean sendErrorPage(java.lang.String,org.apache.catalina.connector.Response)",
            "org.apache.coyote.http11.upgrade.UpgradeProcessorExternal:void close()",
            "org.apache.coyote.http11.upgrade.UpgradeProcessorExternal:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState dispatch(org.apache.tomcat.util.net.SocketEvent)",
            "org.apache.coyote.http11.upgrade.UpgradeServletOutputStream:void onError(java.lang.Throwable)",
            "org.apache.juli.FileHandler:void openWriter()",
            "org.apache.naming.factory.LookupFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.tomcat.util.http.fileupload.IOUtils:void closeQuietly(java.io.Closeable)",
            "org.apache.tomcat.util.http.fileupload.ThresholdingOutputStream:void close()",
            "org.apache.tomcat.util.http.fileupload.util.Streams:long copy(java.io.InputStream,java.io.OutputStream,boolean,byte[])"
        ]
    },
    "org.apache.coyote.http11.upgrade.UpgradeServletOutputStream:void onWritePossible()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.upgrade.UpgradeProcessorExternal:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState dispatch(org.apache.tomcat.util.net.SocketEvent)"
        ]
    },
    "org.apache.coyote.http2.Http2UpgradeHandler:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState upgradeDispatch(org.apache.tomcat.util.net.SocketEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.upgrade.UpgradeProcessorInternal:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState dispatch(org.apache.tomcat.util.net.SocketEvent)",
            "org.apache.coyote.http2.Http2AsyncUpgradeHandler:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState upgradeDispatch(org.apache.tomcat.util.net.SocketEvent)"
        ]
    },
    "org.apache.coyote.ajp.AjpProcessor:boolean isReadyForWrite()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProcessor:void action(org.apache.coyote.ActionCode,java.lang.Object)"
        ]
    },
    "org.apache.coyote.http11.upgrade.UpgradeServletOutputStream:boolean isReady()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.coyote.http11.upgrade.UpgradeProcessorInternal:void timeoutAsync(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProtocol:void stop()",
            "org.apache.coyote.AbstractProtocol:void lambda$startAsyncTimeout$1()"
        ]
    },
    "org.apache.coyote.http2.Http2AsyncUpgradeHandler:void timeoutAsync(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.upgrade.UpgradeProcessorInternal:void timeoutAsync(long)"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Channel:void read(java.nio.ByteBuffer,java.lang.Object,java.nio.channels.CompletionHandler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:int fillReadBuffer(boolean,java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:int read(boolean,java.nio.ByteBuffer)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:int fillReadBuffer(boolean)"
        ]
    },
    "org.apache.tomcat.util.net.AprEndpoint$AprSocketWrapper$AprOperationState:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.AsyncContextImpl$RunnableWrapper:void run()",
            "org.apache.catalina.core.AsyncContextImpl:void doInternalDispatch()",
            "org.apache.catalina.core.StandardThreadExecutor:void execute(java.lang.Runnable)",
            "org.apache.coyote.AbstractProcessor:void execute(java.lang.Runnable)",
            "org.apache.coyote.AsyncStateMachine:void asyncRun(java.lang.Runnable)",
            "org.apache.tomcat.util.net.Nio2Endpoint:void stopInternal()",
            "org.apache.tomcat.util.net.SecureNio2Channel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()",
            "org.apache.tomcat.util.net.SecureNioChannel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()",
            "org.apache.tomcat.util.net.SocketWrapperBase$OperationState:boolean process()",
            "org.apache.tomcat.util.net.SocketWrapperBase$OperationState:void start()",
            "org.apache.tomcat.util.net.SocketWrapperBase$VectoredIOCompletionHandler:void completed(java.lang.Long,org.apache.tomcat.util.net.SocketWrapperBase$OperationState)",
            "org.apache.tomcat.util.net.SocketWrapperBase:void execute(java.lang.Runnable)",
            "org.apache.tomcat.util.net.SocketWrapperBase:org.apache.tomcat.util.net.SocketWrapperBase$CompletionState vectoredOperation(boolean,java.nio.ByteBuffer[],int,int,org.apache.tomcat.util.net.SocketWrapperBase$BlockingMode,long,java.util.concurrent.TimeUnit,java.lang.Object,org.apache.tomcat.util.net.SocketWrapperBase$CompletionCheck,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.threads.InlineExecutorService:void execute(java.lang.Runnable)",
            "org.apache.tomcat.util.threads.ScheduledThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.tomcat.util.threads.TaskThread$WrappingRunnable:void run()",
            "org.apache.tomcat.util.threads.ThreadPoolExecutor:void execute(java.lang.Runnable,long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.apache.tomcat.util.net.SocketWrapperBase$VectoredIOCompletionHandler:void completed(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SecureNio2Channel$1:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$2:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$3:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$4:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void read(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void read(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SocketWrapperBase$VectoredIOCompletionHandler:void completed(java.lang.Long,org.apache.tomcat.util.net.SocketWrapperBase$OperationState)"
        ]
    },
    "org.apache.coyote.http2.Http2AsyncUpgradeHandler$SendfileCompletionHandler:void completed(java.lang.Long,org.apache.coyote.http2.SendfileData)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2AsyncUpgradeHandler$SendfileCompletionHandler:void completed(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.coyote.http2.Http2AsyncUpgradeHandler$SendfileCompletionHandler:void failed(java.lang.Throwable,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2AsyncUpgradeHandler$SendfileCompletionHandler:void failed(java.lang.Throwable,org.apache.coyote.http2.SendfileData)",
            "org.apache.tomcat.util.net.Nio2Channel$3:void read(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.Nio2Channel$3:void read(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.Nio2Channel$3:void write(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.Nio2Channel$3:void write(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SecureNio2Channel$1:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$2:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$3:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$4:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void write(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void write(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SocketWrapperBase$VectoredIOCompletionHandler:void failed(java.lang.Throwable,org.apache.tomcat.util.net.SocketWrapperBase$OperationState)",
            "org.apache.tomcat.util.net.SocketWrapperBase:org.apache.tomcat.util.net.SocketWrapperBase$CompletionState vectoredOperation(boolean,java.nio.ByteBuffer[],int,int,org.apache.tomcat.util.net.SocketWrapperBase$BlockingMode,long,java.util.concurrent.TimeUnit,java.lang.Object,org.apache.tomcat.util.net.SocketWrapperBase$CompletionCheck,java.nio.channels.CompletionHandler)"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$Nio2OperationState$1:void failed(java.lang.Throwable,java.nio.ByteBuffer[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$Nio2OperationState$1:void completed(java.lang.Long,java.nio.ByteBuffer[])",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$Nio2OperationState$1:void failed(java.lang.Throwable,java.lang.Object)"
        ]
    },
    "org.apache.tomcat.util.net.SocketWrapperBase$VectoredIOCompletionHandler:void failed(java.lang.Throwable,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2AsyncUpgradeHandler$SendfileCompletionHandler:void failed(java.lang.Throwable,org.apache.coyote.http2.SendfileData)",
            "org.apache.tomcat.util.net.Nio2Channel$3:void read(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.Nio2Channel$3:void read(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.Nio2Channel$3:void write(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.Nio2Channel$3:void write(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SecureNio2Channel$1:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$2:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$3:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$4:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void write(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void write(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SocketWrapperBase$VectoredIOCompletionHandler:void failed(java.lang.Throwable,org.apache.tomcat.util.net.SocketWrapperBase$OperationState)",
            "org.apache.tomcat.util.net.SocketWrapperBase:org.apache.tomcat.util.net.SocketWrapperBase$CompletionState vectoredOperation(boolean,java.nio.ByteBuffer[],int,int,org.apache.tomcat.util.net.SocketWrapperBase$BlockingMode,long,java.util.concurrent.TimeUnit,java.lang.Object,org.apache.tomcat.util.net.SocketWrapperBase$CompletionCheck,java.nio.channels.CompletionHandler)"
        ]
    },
    "org.apache.tomcat.util.net.SocketWrapperBase:org.apache.tomcat.util.net.SocketWrapperBase$CompletionState read(java.nio.ByteBuffer[],int,int,org.apache.tomcat.util.net.SocketWrapperBase$BlockingMode,long,java.util.concurrent.TimeUnit,java.lang.Object,org.apache.tomcat.util.net.SocketWrapperBase$CompletionCheck,java.nio.channels.CompletionHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SocketWrapperBase:org.apache.tomcat.util.net.SocketWrapperBase$CompletionState read(long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler,java.nio.ByteBuffer[])",
            "org.apache.tomcat.util.net.SocketWrapperBase:org.apache.tomcat.util.net.SocketWrapperBase$CompletionState read(org.apache.tomcat.util.net.SocketWrapperBase$BlockingMode,long,java.util.concurrent.TimeUnit,java.lang.Object,org.apache.tomcat.util.net.SocketWrapperBase$CompletionCheck,java.nio.channels.CompletionHandler,java.nio.ByteBuffer[])"
        ]
    },
    "org.apache.tomcat.util.net.SocketWrapperBase:org.apache.tomcat.util.net.SocketWrapperBase$CompletionState write(java.nio.ByteBuffer[],int,int,org.apache.tomcat.util.net.SocketWrapperBase$BlockingMode,long,java.util.concurrent.TimeUnit,java.lang.Object,org.apache.tomcat.util.net.SocketWrapperBase$CompletionCheck,java.nio.channels.CompletionHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SocketWrapperBase:org.apache.tomcat.util.net.SocketWrapperBase$CompletionState write(long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler,java.nio.ByteBuffer[])",
            "org.apache.tomcat.util.net.SocketWrapperBase:org.apache.tomcat.util.net.SocketWrapperBase$CompletionState write(org.apache.tomcat.util.net.SocketWrapperBase$BlockingMode,long,java.util.concurrent.TimeUnit,java.lang.Object,org.apache.tomcat.util.net.SocketWrapperBase$CompletionCheck,java.nio.channels.CompletionHandler,java.nio.ByteBuffer[])"
        ]
    },
    "org.apache.coyote.AbstractProtocol:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.Connector:void startInternal()",
            "org.apache.coyote.ajp.AbstractAjpProtocol:void start()"
        ]
    },
    "org.apache.catalina.util.LifecycleBase:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ContainerBase$StopChild:java.lang.Void call()",
            "org.apache.catalina.core.ContainerBase:void setCluster(org.apache.catalina.Cluster)",
            "org.apache.catalina.core.ContainerBase:void setRealm(org.apache.catalina.Realm)",
            "org.apache.catalina.core.ContainerBase:void removeChild(org.apache.catalina.Container)",
            "org.apache.catalina.core.ContainerBase:void stopInternal()",
            "org.apache.catalina.core.StandardContext:void setLoader(org.apache.catalina.Loader)",
            "org.apache.catalina.core.StandardContext:void setManager(org.apache.catalina.Manager)",
            "org.apache.catalina.core.StandardContext:void setNamingResources(org.apache.catalina.deploy.NamingResourcesImpl)",
            "org.apache.catalina.core.StandardContext:void reload()",
            "org.apache.catalina.core.StandardContext:boolean resourcesStop()",
            "org.apache.catalina.core.StandardContext:void stopInternal()",
            "org.apache.catalina.core.StandardPipeline:void stopInternal()",
            "org.apache.catalina.core.StandardPipeline:void setBasic(org.apache.catalina.Valve)",
            "org.apache.catalina.core.StandardPipeline:void removeValve(org.apache.catalina.Valve)",
            "org.apache.catalina.core.StandardServer:void removeService(org.apache.catalina.Service)",
            "org.apache.catalina.core.StandardServer:void stopInternal()",
            "org.apache.catalina.core.StandardService:void setContainer(org.apache.catalina.Engine)",
            "org.apache.catalina.core.StandardService:void removeConnector(org.apache.catalina.connector.Connector)",
            "org.apache.catalina.core.StandardService:void removeExecutor(org.apache.catalina.Executor)",
            "org.apache.catalina.core.StandardService:void stopInternal()",
            "org.apache.catalina.manager.ManagerServlet:void stop(java.io.PrintWriter,org.apache.catalina.util.ContextName,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.ManagerServlet:void undeploy(java.io.PrintWriter,org.apache.catalina.util.ContextName,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.host.HostManagerServlet:void stop(java.io.PrintWriter,java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.realm.CombinedRealm:void stopInternal()",
            "org.apache.catalina.session.ManagerBase:void stopInternal()",
            "org.apache.catalina.session.PersistentManagerBase:void stopInternal()",
            "org.apache.catalina.startup.Catalina:void stopServer(java.lang.String[])",
            "org.apache.catalina.startup.Catalina:void stop()",
            "org.apache.catalina.startup.Tomcat:void stop()",
            "org.apache.catalina.util.LifecycleBase:void start()",
            "org.apache.catalina.util.LifecycleBase:void destroy()",
            "org.apache.catalina.valves.rewrite.RewriteValve:void stopInternal()",
            "org.apache.catalina.webresources.StandardRoot:void stopInternal()"
        ]
    },
    "org.apache.tomcat.util.net.AbstractEndpoint:void init()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProtocol:void init()"
        ]
    },
    "org.apache.coyote.AbstractProtocol:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.Connector:void destroyInternal()",
            "org.apache.coyote.http11.AbstractHttp11Protocol:void destroy()"
        ]
    },
    "org.apache.catalina.core.ContainerBase:void startInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.StandardEngine:void startInternal()",
            "org.apache.catalina.core.StandardHost:void startInternal()",
            "org.apache.catalina.core.StandardWrapper:void startInternal()"
        ]
    },
    "org.apache.catalina.core.ContainerBase:void stopInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.StandardWrapper:void stopInternal()",
            "org.apache.catalina.util.LifecycleBase:void stop()"
        ]
    },
    "org.apache.catalina.startup.ContextConfig:void processAnnotationsInParallel(java.util.Set,boolean,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.ContextConfig:void processAnnotations(java.util.Set,boolean,java.util.Map)"
        ]
    },
    "org.apache.catalina.startup.HostConfig:void deployDescriptors(java.io.File,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.HostConfig:void deployApps()"
        ]
    },
    "org.apache.catalina.startup.HostConfig:void deployWARs(java.io.File,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.HostConfig:void deployApps()"
        ]
    },
    "org.apache.catalina.startup.HostConfig:void deployDirectories(java.io.File,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.HostConfig:void deployApps()"
        ]
    },
    "org.apache.catalina.startup.HostConfig:void migrateLegacyApps()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.HostConfig:void deployApps()"
        ]
    },
    "org.apache.catalina.startup.UserConfig:void deploy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.UserConfig:void start()"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:void doWrite(boolean,java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SocketWrapperBase:void doWrite(boolean)"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint:java.nio.channels.AsynchronousSocketChannel serverSocketAccept()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint:java.lang.Object serverSocketAccept()"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel$FutureFlush:java.lang.Boolean get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SecureNio2Channel$FutureFlush:java.lang.Object get()"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.naming.factory.LookupFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.tomcat.util.http.fileupload.IOUtils:void closeQuietly(java.io.Closeable)",
            "org.apache.tomcat.util.net.Nio2Channel:void close(boolean)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void close(boolean)"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel$FutureFlush:java.lang.Boolean get(long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SecureNio2Channel$FutureFlush:java.lang.Object get(long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel:java.util.concurrent.Future write(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:void doWrite(boolean,java.nio.ByteBuffer)"
        ]
    },
    "org.apache.coyote.http11.Http11Processor:void sslReHandShake()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProcessor:void action(org.apache.coyote.ActionCode,java.lang.Object)"
        ]
    },
    "org.apache.tomcat.util.net.SocketWrapperBase:void write(boolean,byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.ajp.AjpProcessor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState service(org.apache.tomcat.util.net.SocketWrapperBase)",
            "org.apache.coyote.ajp.AjpProcessor:boolean refillReadBuffer(boolean)",
            "org.apache.coyote.ajp.AjpProcessor:void prepareResponse()",
            "org.apache.coyote.ajp.AjpProcessor:void flush()",
            "org.apache.coyote.ajp.AjpProcessor:void finishResponse()",
            "org.apache.coyote.ajp.AjpProcessor:void writeData(java.nio.ByteBuffer)",
            "org.apache.coyote.http11.Http11OutputBuffer:void sendAck()",
            "org.apache.coyote.http11.upgrade.UpgradeServletOutputStream:void writeInternal(byte[],int,int)",
            "org.apache.coyote.http2.Http2UpgradeHandler$DefaultHeaderFrameBuffers:void endFrame()",
            "org.apache.coyote.http2.Http2UpgradeHandler$PingManager:void sendPing(boolean)",
            "org.apache.coyote.http2.Http2UpgradeHandler$PingManager:void receivePing(byte[],boolean)",
            "org.apache.coyote.http2.Http2UpgradeHandler:void sendStreamReset(org.apache.coyote.http2.StreamException)",
            "org.apache.coyote.http2.Http2UpgradeHandler:void writeSettings()",
            "org.apache.coyote.http2.Http2UpgradeHandler:void writeGoAwayFrame(int,long,byte[])",
            "org.apache.coyote.http2.Http2UpgradeHandler:void writeBody(org.apache.coyote.http2.Stream,java.nio.ByteBuffer,int,boolean)",
            "org.apache.coyote.http2.Http2UpgradeHandler:void writeWindowUpdate(org.apache.coyote.http2.AbstractNonZeroStream,int,boolean)",
            "org.apache.coyote.http2.Http2UpgradeHandler:void settingsEnd(boolean)"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:void writeNonBlocking(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SocketWrapperBase:void write(boolean,java.nio.ByteBuffer)"
        ]
    },
    "org.apache.tomcat.util.net.SocketWrapperBase:void writeNonBlocking(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SocketWrapperBase:void write(boolean,java.nio.ByteBuffer)"
        ]
    },
    "org.apache.tomcat.util.net.WriteBuffer:boolean write(org.apache.tomcat.util.net.SocketWrapperBase,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SocketWrapperBase:void flushBlocking()",
            "org.apache.tomcat.util.net.SocketWrapperBase:boolean flushNonBlocking()"
        ]
    },
    "org.apache.tomcat.util.net.SocketWrapperBase:boolean flush(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.ajp.AjpProcessor:boolean flushBufferedWrite()",
            "org.apache.coyote.ajp.AjpProcessor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState service(org.apache.tomcat.util.net.SocketWrapperBase)",
            "org.apache.coyote.ajp.AjpProcessor:boolean refillReadBuffer(boolean)",
            "org.apache.coyote.ajp.AjpProcessor:void prepareResponse()",
            "org.apache.coyote.ajp.AjpProcessor:void flush()",
            "org.apache.coyote.ajp.AjpProcessor:void finishResponse()",
            "org.apache.coyote.ajp.AjpProcessor:void writeData(java.nio.ByteBuffer)",
            "org.apache.coyote.http11.Http11OutputBuffer$SocketOutputBuffer:void end()",
            "org.apache.coyote.http11.Http11OutputBuffer$SocketOutputBuffer:void flush()",
            "org.apache.coyote.http11.Http11OutputBuffer:boolean flushBuffer(boolean)",
            "org.apache.coyote.http11.upgrade.UpgradeServletOutputStream:void flushInternal(boolean,boolean)",
            "org.apache.coyote.http2.Http2UpgradeHandler$DefaultHeaderFrameBuffers:void endFrame()",
            "org.apache.coyote.http2.Http2UpgradeHandler$PingManager:void sendPing(boolean)",
            "org.apache.coyote.http2.Http2UpgradeHandler$PingManager:void receivePing(byte[],boolean)",
            "org.apache.coyote.http2.Http2UpgradeHandler:void sendStreamReset(org.apache.coyote.http2.StreamException)",
            "org.apache.coyote.http2.Http2UpgradeHandler:void writeSettings()",
            "org.apache.coyote.http2.Http2UpgradeHandler:void writeGoAwayFrame(int,long,byte[])",
            "org.apache.coyote.http2.Http2UpgradeHandler:void writeBody(org.apache.coyote.http2.Stream,java.nio.ByteBuffer,int,boolean)",
            "org.apache.coyote.http2.Http2UpgradeHandler:void writeWindowUpdate(org.apache.coyote.http2.AbstractNonZeroStream,int,boolean)",
            "org.apache.coyote.http2.Http2UpgradeHandler:void processWrites()",
            "org.apache.coyote.http2.Http2UpgradeHandler:void settingsEnd(boolean)",
            "org.apache.tomcat.util.net.AprEndpoint$AprSocketWrapper$AprOperationState:void run()"
        ]
    },
    "org.apache.coyote.http11.Http11InputBuffer:boolean fill(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11InputBuffer:boolean parseRequestLine(boolean,int,int)",
            "org.apache.coyote.http11.Http11InputBuffer:int available(boolean)",
            "org.apache.coyote.http11.Http11InputBuffer:org.apache.coyote.http11.Http11InputBuffer$HeaderParseStatus parseHeader()",
            "org.apache.coyote.http11.Http11InputBuffer:org.apache.coyote.http11.Http11InputBuffer$HeaderParseStatus skipLine()",
            "org.apache.coyote.http11.Http11InputBuffer:boolean access$300(org.apache.coyote.http11.Http11InputBuffer,boolean)"
        ]
    },
    "org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper:boolean isReadyForRead()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.upgrade.UpgradeServletInputStream:boolean isReady()",
            "org.apache.coyote.http11.upgrade.UpgradeServletInputStream:void onDataAvailable()"
        ]
    },
    "org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper:int read(boolean,byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.ajp.AjpProcessor:boolean read(byte[],int,int,boolean)",
            "org.apache.coyote.http11.upgrade.UpgradeServletInputStream:int read(byte[],int,int)",
            "org.apache.coyote.http11.upgrade.UpgradeServletInputStream:int readInternal()",
            "org.apache.coyote.http2.Http2UpgradeHandler:boolean fill(boolean,byte[],int,int)"
        ]
    },
    "org.apache.tomcat.util.net.SocketWrapperBase:void writeBlocking(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SocketWrapperBase:void write(boolean,byte[],int,int)"
        ]
    },
    "org.apache.tomcat.util.net.SocketWrapperBase:void writeBlocking(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SocketWrapperBase:void write(boolean,java.nio.ByteBuffer)",
            "org.apache.tomcat.util.net.WriteBuffer:boolean write(org.apache.tomcat.util.net.SocketWrapperBase,boolean)"
        ]
    },
    "org.apache.tomcat.util.net.SocketWrapperBase:void writeNonBlocking(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SocketWrapperBase:void write(boolean,byte[],int,int)"
        ]
    },
    "org.apache.tomcat.util.net.SocketWrapperBase:void writeNonBlockingInternal(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SocketWrapperBase:void writeNonBlocking(java.nio.ByteBuffer)",
            "org.apache.tomcat.util.net.WriteBuffer:boolean write(org.apache.tomcat.util.net.SocketWrapperBase,boolean)"
        ]
    },
    "org.apache.tomcat.util.net.SocketWrapperBase:void flushBlocking()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:void flushBlocking()",
            "org.apache.tomcat.util.net.SocketWrapperBase:boolean flush(boolean)"
        ]
    },
    "org.apache.tomcat.util.net.SocketWrapperBase:boolean flushNonBlocking()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SocketWrapperBase:boolean flush(boolean)"
        ]
    },
    "org.apache.catalina.connector.OutputBuffer:void realWriteBytes(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.OutputBuffer:void appendByteArray(byte[],int,int)",
            "org.apache.catalina.connector.OutputBuffer:void appendByteBuffer(java.nio.ByteBuffer)",
            "org.apache.catalina.connector.OutputBuffer:void flushByteBuffer()"
        ]
    },
    "org.apache.catalina.authenticator.AuthenticatorBase:boolean authenticate(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.Request:boolean authenticate(jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.connector.CoyoteInputStream$PrivilegedAvailable:java.lang.Object run()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.security.auth.message.config.AuthConfigFactory:jakarta.security.auth.message.config.AuthConfigFactory getFactory()",
            "org.apache.catalina.connector.CoyoteInputStream:int available()",
            "org.apache.catalina.core.ApplicationFilterChain:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)"
        ]
    },
    "org.apache.catalina.webresources.AbstractArchiveResource$JarInputStreamWrapper:int available()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.webresources.AbstractArchiveResource$JarInputStreamWrapper:int available()",
            "org.apache.catalina.webresources.TrackedInputStream:int available()"
        ]
    },
    "org.apache.catalina.webresources.TrackedInputStream:int available()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.webresources.AbstractArchiveResource$JarInputStreamWrapper:int available()",
            "org.apache.catalina.webresources.TrackedInputStream:int available()"
        ]
    },
    "org.apache.catalina.connector.CoyoteReader:boolean ready()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.connector.CoyoteInputStream:int read()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletInputStream:int readLine(byte[],int,int)",
            "org.apache.catalina.core.StandardServer:void await()",
            "org.apache.catalina.servlets.CGIServlet$HTTPHeaderInputStream:int read()",
            "org.apache.catalina.servlets.DefaultServlet:void skip(java.io.InputStream,int)",
            "org.apache.catalina.webresources.AbstractArchiveResource$JarInputStreamWrapper:int read()",
            "org.apache.catalina.webresources.TrackedInputStream:int read()"
        ]
    },
    "org.apache.catalina.connector.CoyoteInputStream:int read(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpUtils:java.util.Hashtable parsePostData(int,jakarta.servlet.ServletInputStream)",
            "org.apache.catalina.connector.CoyoteInputStream:int read(byte[])",
            "org.apache.catalina.connector.Request:int readPostBody(byte[],int)",
            "org.apache.catalina.connector.Request:byte[] readChunkedPostBody()",
            "org.apache.catalina.loader.WebappClassLoaderBase:void clearReferencesJdbc()",
            "org.apache.catalina.util.IOTools:int readFully(java.io.InputStream,byte[])",
            "org.apache.catalina.webresources.AbstractArchiveResource$JarInputStreamWrapper:int read(byte[],int,int)",
            "org.apache.catalina.webresources.TrackedInputStream:int read(byte[],int,int)",
            "org.apache.tomcat.util.http.fileupload.ByteArrayOutputStream:int write(java.io.InputStream)",
            "org.apache.tomcat.util.http.fileupload.IOUtils:int read(java.io.InputStream,byte[],int,int)",
            "org.apache.tomcat.util.http.fileupload.MultipartStream$ItemInputStream:int makeAvailable()",
            "org.apache.tomcat.util.http.fileupload.MultipartStream:byte readByte()"
        ]
    },
    "org.apache.catalina.connector.CoyoteInputStream:int read(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.authenticator.AuthenticatorBase:boolean authenticateJaspic(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,org.apache.catalina.authenticator.AuthenticatorBase$JaspicState,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.AuthenticatorBase:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.authenticator.AuthenticatorBase:boolean authenticate(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.authenticator.AuthenticatorBase:void register(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse,java.security.Principal,java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.AuthenticatorBase:boolean authenticateJaspic(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,org.apache.catalina.authenticator.AuthenticatorBase$JaspicState,boolean)",
            "org.apache.catalina.authenticator.AuthenticatorBase:boolean checkForCachedAuthentication(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse,boolean)",
            "org.apache.catalina.authenticator.AuthenticatorBase:void login(java.lang.String,java.lang.String,org.apache.catalina.connector.Request)",
            "org.apache.catalina.authenticator.AuthenticatorBase:void logout(org.apache.catalina.connector.Request)",
            "org.apache.catalina.authenticator.BasicAuthenticator:boolean doAuthenticate(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.authenticator.DigestAuthenticator:boolean doAuthenticate(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.authenticator.FormAuthenticator:boolean doAuthenticate(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.authenticator.SSLAuthenticator:boolean doAuthenticate(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.authenticator.SpnegoAuthenticator:boolean doAuthenticate(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.authenticator.FormAuthenticator:void register(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse,java.security.Principal,java.lang.String,java.lang.String,java.lang.String,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.AuthenticatorBase:boolean authenticateJaspic(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,org.apache.catalina.authenticator.AuthenticatorBase$JaspicState,boolean)",
            "org.apache.catalina.authenticator.AuthenticatorBase:void register(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse,java.security.Principal,java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "jakarta.servlet.ServletRequestWrapper:java.util.Enumeration getAttributeNames()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletRequestWrapper:java.util.Enumeration getAttributeNames()",
            "org.apache.catalina.core.ApplicationHttpRequest$AttributeNamesEnumerator:void <init>(org.apache.catalina.core.ApplicationHttpRequest)",
            "org.apache.catalina.core.ApplicationRequest:void setRequest(jakarta.servlet.ServletRequest)",
            "org.apache.catalina.servlets.CGIServlet:void printServletEnvironment(jakarta.servlet.http.HttpServletRequest)"
        ]
    },
    "org.apache.catalina.connector.RequestFacade$GetAttributePrivilegedAction:java.util.Enumeration run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.RequestFacade$GetAttributePrivilegedAction:java.lang.Object run()"
        ]
    },
    "org.apache.catalina.connector.RequestFacade:java.util.Enumeration getAttributeNames()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletRequestWrapper:java.util.Enumeration getAttributeNames()",
            "org.apache.catalina.core.ApplicationHttpRequest$AttributeNamesEnumerator:void <init>(org.apache.catalina.core.ApplicationHttpRequest)",
            "org.apache.catalina.core.ApplicationRequest:void setRequest(jakarta.servlet.ServletRequest)",
            "org.apache.catalina.servlets.CGIServlet:void printServletEnvironment(jakarta.servlet.http.HttpServletRequest)"
        ]
    },
    "org.apache.catalina.core.ApplicationHttpRequest$AttributeNamesEnumerator:void <init>(org.apache.catalina.core.ApplicationHttpRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationHttpRequest:java.util.Enumeration getAttributeNames()"
        ]
    },
    "jakarta.servlet.ServletRequestWrapper:jakarta.servlet.RequestDispatcher getRequestDispatcher(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletRequestWrapper:jakarta.servlet.RequestDispatcher getRequestDispatcher(java.lang.String)"
        ]
    },
    "org.apache.catalina.connector.RequestFacade$GetRequestDispatcherPrivilegedAction:jakarta.servlet.RequestDispatcher run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.RequestFacade$GetRequestDispatcherPrivilegedAction:java.lang.Object run()"
        ]
    },
    "org.apache.catalina.connector.RequestFacade:jakarta.servlet.RequestDispatcher getRequestDispatcher(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletRequestWrapper:jakarta.servlet.RequestDispatcher getRequestDispatcher(java.lang.String)"
        ]
    },
    "org.apache.catalina.core.ApplicationDispatcher:void forward(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.FormAuthenticator:void forwardToLoginPage(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.descriptor.web.LoginConfig)",
            "org.apache.catalina.authenticator.FormAuthenticator:void forwardToErrorPage(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.descriptor.web.LoginConfig)",
            "org.apache.catalina.core.StandardHostValve:boolean custom(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,org.apache.tomcat.util.descriptor.web.ErrorPage)",
            "org.apache.catalina.manager.HTMLManagerServlet:void sslConnectorCiphers(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.HTMLManagerServlet:void sslConnectorCerts(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.HTMLManagerServlet:void sslConnectorTrustedCerts(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.res.StringManager)"
        ]
    },
    "org.apache.catalina.core.ApplicationDispatcher:void access$000(org.apache.catalina.core.ApplicationDispatcher,jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationDispatcher$PrivilegedForward:java.lang.Void run()"
        ]
    },
    "org.apache.catalina.core.ApplicationDispatcher:void doInclude(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationDispatcher:void include(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)",
            "org.apache.catalina.core.ApplicationDispatcher:void access$100(org.apache.catalina.core.ApplicationDispatcher,jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)"
        ]
    },
    "org.apache.catalina.core.ApplicationDispatcher:void doDispatch(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationDispatcher:void dispatch(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)",
            "org.apache.catalina.core.ApplicationDispatcher:void access$200(org.apache.catalina.core.ApplicationDispatcher,jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)"
        ]
    },
    "org.apache.catalina.core.ApplicationDispatcher:void invoke(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,org.apache.catalina.core.ApplicationDispatcher$State)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationDispatcher:void processRequest(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,org.apache.catalina.core.ApplicationDispatcher$State)",
            "org.apache.catalina.core.ApplicationDispatcher:void doInclude(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)",
            "org.apache.catalina.core.ApplicationDispatcher:void doDispatch(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)"
        ]
    },
    "org.apache.catalina.core.ApplicationHttpRequest$AttributeNamesEnumerator:java.lang.String nextElement()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationHttpRequest$AttributeNamesEnumerator:java.lang.Object nextElement()"
        ]
    },
    "org.apache.catalina.core.ApplicationHttpRequest:jakarta.servlet.RequestDispatcher getRequestDispatcher(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletRequestWrapper:jakarta.servlet.RequestDispatcher getRequestDispatcher(java.lang.String)"
        ]
    },
    "org.apache.catalina.core.ApplicationHttpRequest:void <init>(jakarta.servlet.http.HttpServletRequest,org.apache.catalina.Context,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationDispatcher:jakarta.servlet.ServletRequest wrapRequest(org.apache.catalina.core.ApplicationDispatcher$State)"
        ]
    },
    "org.apache.catalina.core.ApplicationDispatcher:void unwrapRequest(org.apache.catalina.core.ApplicationDispatcher$State)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationDispatcher:void invoke(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,org.apache.catalina.core.ApplicationDispatcher$State)"
        ]
    },
    "org.apache.catalina.core.ApplicationRequest:void <init>(jakarta.servlet.ServletRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationDispatcher:jakarta.servlet.ServletRequest wrapRequest(org.apache.catalina.core.ApplicationDispatcher$State)"
        ]
    },
    "org.apache.catalina.core.ApplicationFilterChain:void internalDoFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationFilterChain:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)",
            "org.apache.catalina.core.ApplicationFilterChain:java.lang.Void lambda$doFilter$0(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)"
        ]
    },
    "org.apache.catalina.servlets.CGIServlet$CGIEnvironment:void <init>(org.apache.catalina.servlets.CGIServlet,jakarta.servlet.http.HttpServletRequest,jakarta.servlet.ServletContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.CGIServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.servlets.CGIServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServlet:void doHead(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "jakarta.servlet.http.HttpServlet:void service(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.CGIServlet:void service(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.servlets.DefaultServlet:java.lang.String getRelativePath(jakarta.servlet.http.HttpServletRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.DefaultServlet:void doPut(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.DefaultServlet:void doDelete(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.servlets.DefaultServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServlet:void doHead(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "jakarta.servlet.http.HttpServlet:void service(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.DefaultServlet:void service(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.DefaultServlet:void doPost(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.WebdavServlet:void service(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.servlets.DefaultServlet:void doHead(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServlet:void service(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.servlets.WebdavServlet:java.lang.String getRelativePath(jakarta.servlet.http.HttpServletRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.DefaultServlet:void doPut(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.DefaultServlet:void doDelete(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.WebdavServlet:void service(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.WebdavServlet:void doPropfind(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.WebdavServlet:void doMkcol(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.WebdavServlet:void doPut(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.WebdavServlet:void doMove(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.WebdavServlet:void doLock(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.WebdavServlet:void doUnlock(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.WebdavServlet:boolean isLocked(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.servlets.WebdavServlet:boolean copyResource(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.WebdavServlet:boolean deleteResource(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.WebdavServlet:void sendReport(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,java.util.Hashtable)",
            "org.apache.catalina.servlets.WebdavServlet:void parseLockNullProperties(jakarta.servlet.http.HttpServletRequest,org.apache.catalina.util.XMLWriter,java.lang.String,int,java.util.Vector)",
            "org.apache.catalina.servlets.WebdavServlet:java.lang.String determineMethodsAllowed(jakarta.servlet.http.HttpServletRequest)"
        ]
    },
    "org.apache.catalina.core.AccessLogAdapter:void log(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.AccessLogAdapter:void log(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.core.ContainerBase:void logAccess(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long,boolean)",
            "org.apache.catalina.core.StandardEngine:void logAccess(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long,boolean)"
        ]
    },
    "org.apache.catalina.core.ContainerBase:void logAccess(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.CoyoteAdapter:boolean asyncDispatch(org.apache.coyote.Request,org.apache.coyote.Response,org.apache.tomcat.util.net.SocketEvent)",
            "org.apache.catalina.connector.CoyoteAdapter:void service(org.apache.coyote.Request,org.apache.coyote.Response)",
            "org.apache.catalina.connector.CoyoteAdapter:void log(org.apache.coyote.Request,org.apache.coyote.Response,long)",
            "org.apache.catalina.connector.CoyoteAdapter:boolean postParseRequest(org.apache.coyote.Request,org.apache.catalina.connector.Request,org.apache.coyote.Response,org.apache.catalina.connector.Response)",
            "org.apache.catalina.core.ContainerBase:void logAccess(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long,boolean)"
        ]
    },
    "org.apache.catalina.core.StandardEngine:void logAccess(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.CoyoteAdapter:void service(org.apache.coyote.Request,org.apache.coyote.Response)",
            "org.apache.catalina.connector.CoyoteAdapter:void log(org.apache.coyote.Request,org.apache.coyote.Response,long)",
            "org.apache.catalina.connector.CoyoteAdapter:boolean postParseRequest(org.apache.coyote.Request,org.apache.catalina.connector.Request,org.apache.coyote.Response,org.apache.catalina.connector.Response)",
            "org.apache.catalina.core.ContainerBase:void logAccess(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long,boolean)"
        ]
    },
    "org.apache.catalina.valves.rewrite.Substitution$ServerVariableEnvElement:java.lang.String evaluate(java.util.regex.Matcher,java.util.regex.Matcher,org.apache.catalina.valves.rewrite.Resolver)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.valves.rewrite.Substitution:java.lang.String evaluateSubstitution(org.apache.catalina.valves.rewrite.Substitution$SubstitutionElement[],java.util.regex.Matcher,java.util.regex.Matcher,org.apache.catalina.valves.rewrite.Resolver)"
        ]
    },
    "org.apache.catalina.valves.rewrite.Substitution$ServerVariableSslElement:java.lang.String evaluate(java.util.regex.Matcher,java.util.regex.Matcher,org.apache.catalina.valves.rewrite.Resolver)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.valves.rewrite.Substitution:java.lang.String evaluateSubstitution(org.apache.catalina.valves.rewrite.Substitution$SubstitutionElement[],java.util.regex.Matcher,java.util.regex.Matcher,org.apache.catalina.valves.rewrite.Resolver)"
        ]
    },
    "org.apache.catalina.authenticator.DigestAuthenticator:boolean doAuthenticate(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.AuthenticatorBase:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.authenticator.AuthenticatorBase:boolean authenticate(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.filters.RemoteIpFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationFilterChain:void internalDoFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)"
        ]
    },
    "org.apache.catalina.valves.rewrite.Substitution$ServerVariableElement:java.lang.String evaluate(java.util.regex.Matcher,java.util.regex.Matcher,org.apache.catalina.valves.rewrite.Resolver)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.valves.rewrite.Substitution:java.lang.String evaluateSubstitution(org.apache.catalina.valves.rewrite.Substitution$SubstitutionElement[],java.util.regex.Matcher,java.util.regex.Matcher,org.apache.catalina.valves.rewrite.Resolver)"
        ]
    },
    "jakarta.servlet.http.HttpServletRequestWrapper:jakarta.servlet.http.PushBuilder newPushBuilder()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletRequestWrapper:jakarta.servlet.http.PushBuilder newPushBuilder()"
        ]
    },
    "org.apache.catalina.connector.RequestFacade:jakarta.servlet.http.PushBuilder newPushBuilder()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletRequestWrapper:jakarta.servlet.http.PushBuilder newPushBuilder()"
        ]
    },
    "org.apache.catalina.core.ApplicationHttpRequest:jakarta.servlet.http.PushBuilder newPushBuilder()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletRequestWrapper:jakarta.servlet.http.PushBuilder newPushBuilder()"
        ]
    },
    "org.apache.catalina.filters.RemoteIpFilter$XForwardedRequest:jakarta.servlet.http.PushBuilder newPushBuilder()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletRequestWrapper:jakarta.servlet.http.PushBuilder newPushBuilder()"
        ]
    },
    "org.apache.catalina.connector.Request:java.util.Collection getParts()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletRequestWrapper:java.util.Collection getParts()",
            "org.apache.catalina.connector.Request:jakarta.servlet.http.Part getPart(java.lang.String)",
            "org.apache.catalina.connector.RequestFacade:java.util.Collection getParts()"
        ]
    },
    "org.apache.catalina.connector.Request:java.lang.String getParameter(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletRequestWrapper:java.lang.String getParameter(java.lang.String)",
            "org.apache.catalina.authenticator.FormAuthenticator:boolean doAuthenticate(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.connector.RequestFacade$GetParameterPrivilegedAction:java.lang.String run()",
            "org.apache.catalina.connector.RequestFacade:java.lang.String getParameter(java.lang.String)",
            "org.apache.catalina.filters.CsrfPreventionFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.filters.FailedRequestFilter:boolean isGoodRequest(jakarta.servlet.ServletRequest)",
            "org.apache.catalina.manager.HTMLManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.HTMLManagerServlet:void doPost(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.HTMLManagerServlet:java.lang.String expireSessions(org.apache.catalina.util.ContextName,jakarta.servlet.http.HttpServletRequest,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.HTMLManagerServlet:void doSessions(org.apache.catalina.util.ContextName,jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.HTMLManagerServlet:void displaySessionsListPage(org.apache.catalina.util.ContextName,jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.JMXProxyServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.ManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.ManagerServlet:void doPut(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.ManagerServlet:void expireSessions(java.io.PrintWriter,org.apache.catalina.util.ContextName,jakarta.servlet.http.HttpServletRequest,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.StatusManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.host.HTMLHostManagerServlet:void doPost(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.host.HostManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.host.HostManagerServlet:void add(jakarta.servlet.http.HttpServletRequest,java.io.PrintWriter,java.lang.String,boolean,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.host.HostManagerServlet:boolean booleanParameter(jakarta.servlet.http.HttpServletRequest,java.lang.String,boolean,boolean)",
            "org.apache.catalina.valves.ExtendedAccessLogValve$RequestParameterElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)"
        ]
    },
    "org.apache.catalina.connector.Request:java.util.Enumeration getParameterNames()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletRequestWrapper:java.util.Enumeration getParameterNames()",
            "org.apache.catalina.connector.Request:java.util.Map getParameterMap()",
            "org.apache.catalina.connector.RequestFacade$GetParameterNamesPrivilegedAction:java.util.Enumeration run()",
            "org.apache.catalina.connector.RequestFacade:java.util.Enumeration getParameterNames()",
            "org.apache.catalina.filters.RequestDumperFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.servlets.CGIServlet:void printServletEnvironment(jakarta.servlet.http.HttpServletRequest)"
        ]
    },
    "org.apache.catalina.connector.Request:java.lang.String[] getParameterValues(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletRequestWrapper:java.lang.String[] getParameterValues(java.lang.String)",
            "org.apache.catalina.connector.Request:java.util.Map getParameterMap()",
            "org.apache.catalina.connector.RequestFacade$GetParameterValuePrivilegedAction:java.lang.String[] run()",
            "org.apache.catalina.connector.RequestFacade:java.lang.String[] getParameterValues(java.lang.String)",
            "org.apache.catalina.filters.RequestDumperFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.manager.HTMLManagerServlet:void doSessions(org.apache.catalina.util.ContextName,jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.servlets.CGIServlet:void printServletEnvironment(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.filters.RestCsrfPreventionFilter$RestCsrfPreventionStrategy$getParameterValues__34:java.lang.Object getNonce(java.lang.Object,java.lang.String)"
        ]
    },
    "org.apache.catalina.core.AsyncContextImpl:void dispatch()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jakarta.servlet.ServletRequestWrapper:boolean isAsyncStarted()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletRequestWrapper:boolean isAsyncStarted()",
            "org.apache.catalina.core.ApplicationDispatcher:void doForward(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)",
            "org.apache.catalina.core.ApplicationDispatcher:void unwrapRequest(org.apache.catalina.core.ApplicationDispatcher$State)",
            "org.apache.catalina.core.ApplicationDispatcher:void unwrapResponse(org.apache.catalina.core.ApplicationDispatcher$State)"
        ]
    },
    "org.apache.catalina.connector.Request:jakarta.servlet.AsyncContext getAsyncContext()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletRequestWrapper:jakarta.servlet.AsyncContext getAsyncContext()",
            "org.apache.catalina.connector.RequestFacade:jakarta.servlet.AsyncContext getAsyncContext()",
            "org.apache.catalina.core.ApplicationDispatcher:void unwrapRequest(org.apache.catalina.core.ApplicationDispatcher$State)",
            "org.apache.catalina.core.ApplicationDispatcher:void unwrapResponse(org.apache.catalina.core.ApplicationDispatcher$State)"
        ]
    },
    "org.apache.catalina.connector.RequestFacade:boolean isAsyncStarted()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletRequestWrapper:boolean isAsyncStarted()",
            "org.apache.catalina.core.ApplicationDispatcher:void doForward(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)",
            "org.apache.catalina.core.ApplicationDispatcher:void unwrapRequest(org.apache.catalina.core.ApplicationDispatcher$State)",
            "org.apache.catalina.core.ApplicationDispatcher:void unwrapResponse(org.apache.catalina.core.ApplicationDispatcher$State)"
        ]
    },
    "org.apache.catalina.core.ApplicationDispatcher:void unwrapResponse(org.apache.catalina.core.ApplicationDispatcher$State)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationDispatcher:void invoke(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,org.apache.catalina.core.ApplicationDispatcher$State)"
        ]
    },
    "jakarta.servlet.ServletRequestWrapper:jakarta.servlet.AsyncContext startAsync(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletRequestWrapper:jakarta.servlet.AsyncContext startAsync(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)"
        ]
    },
    "org.apache.catalina.connector.Request:jakarta.servlet.AsyncContext startAsync()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletRequestWrapper:jakarta.servlet.AsyncContext startAsync()",
            "org.apache.catalina.connector.RequestFacade:jakarta.servlet.AsyncContext startAsync()"
        ]
    },
    "org.apache.catalina.connector.RequestFacade:jakarta.servlet.AsyncContext startAsync(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletRequestWrapper:jakarta.servlet.AsyncContext startAsync(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)"
        ]
    },
    "org.apache.catalina.connector.CoyoteInputStream:void setReadListener(jakarta.servlet.ReadListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jakarta.servlet.http.HttpServletRequestWrapper:boolean isTrailerFieldsReady()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletRequestWrapper:boolean isTrailerFieldsReady()"
        ]
    },
    "org.apache.catalina.connector.Request:java.util.Map getTrailerFields()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletRequestWrapper:java.util.Map getTrailerFields()",
            "org.apache.catalina.connector.RequestFacade:java.util.Map getTrailerFields()"
        ]
    },
    "org.apache.catalina.connector.RequestFacade:boolean isTrailerFieldsReady()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletRequestWrapper:boolean isTrailerFieldsReady()"
        ]
    },
    "org.apache.catalina.connector.CoyoteInputStream:boolean isFinished()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.connector.InputBuffer:int realReadChars()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.InputBuffer:long skip(long)",
            "org.apache.catalina.connector.InputBuffer:boolean checkCharBufferEof()"
        ]
    },
    "org.apache.catalina.connector.InputBuffer:boolean checkByteBufferEof()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.InputBuffer:int readByte()",
            "org.apache.catalina.connector.InputBuffer:int read(byte[],int,int)",
            "org.apache.catalina.connector.InputBuffer:int read(java.nio.ByteBuffer)"
        ]
    },
    "org.apache.tomcat.util.buf.B2CConverter:void convert(java.nio.ByteBuffer,java.nio.CharBuffer,org.apache.tomcat.util.buf.ByteChunk$ByteInputChannel,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.InputBuffer:int realReadChars()"
        ]
    },
    "org.apache.tomcat.util.buf.ByteChunk:boolean checkEof()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.buf.ByteChunk:int subtract()",
            "org.apache.tomcat.util.buf.ByteChunk:byte subtractB()",
            "org.apache.tomcat.util.buf.ByteChunk:int subtract(byte[],int,int)",
            "org.apache.tomcat.util.buf.ByteChunk:int subtract(java.nio.ByteBuffer)"
        ]
    },
    "org.apache.coyote.http2.Http2AsyncUpgradeHandler:void endRequestBodyFrame(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2Parser:void readDataFrame(int,int,int,java.nio.ByteBuffer)"
        ]
    },
    "org.apache.coyote.http2.Http2Parser:void readDataFrame(int,int,int,java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2AsyncParser$FrameCompletionHandler:void completed(java.lang.Long,java.lang.Void)",
            "org.apache.coyote.http2.Http2Parser:boolean readFrame(boolean,org.apache.coyote.http2.FrameType)"
        ]
    },
    "jakarta.servlet.http.HttpServlet:void doTrace(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServlet:void service(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServlet:void doTrace(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.core.ApplicationDispatcher:void doForward(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)",
            "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream:void close()",
            "org.apache.catalina.startup.Catalina:void stopServer(java.lang.String[])",
            "org.apache.catalina.valves.ErrorReportValve:boolean sendErrorPage(java.lang.String,org.apache.catalina.connector.Response)",
            "org.apache.juli.FileHandler:void openWriter()",
            "org.apache.naming.factory.LookupFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.tomcat.util.http.fileupload.IOUtils:void closeQuietly(java.io.Closeable)",
            "org.apache.tomcat.util.http.fileupload.ThresholdingOutputStream:void close()",
            "org.apache.tomcat.util.http.fileupload.util.Streams:long copy(java.io.InputStream,java.io.OutputStream,boolean,byte[])"
        ]
    },
    "org.apache.catalina.startup.Catalina:void stopServer(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.Catalina:void stopServer()"
        ]
    },
    "org.apache.catalina.valves.ErrorReportValve:boolean sendErrorPage(java.lang.String,org.apache.catalina.connector.Response)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.valves.ErrorReportValve:void report(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,java.lang.Throwable)"
        ]
    },
    "org.apache.juli.FileHandler:void openWriter()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.juli.FileHandler:void publish(java.util.logging.LogRecord)",
            "org.apache.juli.FileHandler:void open()"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.ThresholdingOutputStream:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream:void close()"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.util.Streams:long copy(java.io.InputStream,java.io.OutputStream,boolean,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.FileUploadBase:java.util.List parseRequest(org.apache.tomcat.util.http.fileupload.RequestContext)",
            "org.apache.tomcat.util.http.fileupload.util.Streams:long copy(java.io.InputStream,java.io.OutputStream,boolean)"
        ]
    },
    "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationDispatcher:void doForward(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)",
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void close()",
            "org.apache.catalina.manager.HTMLManagerServlet:void list(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.ManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.ManagerServlet:void doPut(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.host.HTMLHostManagerServlet:void list(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.host.HostManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.WebdavServlet:void doLock(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.WebdavServlet:void sendReport(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,java.util.Hashtable)",
            "org.apache.catalina.users.MemoryUserDatabase:void save()",
            "org.apache.catalina.valves.AccessLogValve:void close(boolean)",
            "org.apache.juli.FileHandler:void closeWriter()",
            "org.apache.juli.JdkLoggerFormatter:java.lang.String format(java.util.logging.LogRecord)",
            "org.apache.naming.factory.LookupFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.tomcat.util.http.fileupload.IOUtils:void closeQuietly(java.io.Closeable)"
        ]
    },
    "org.apache.catalina.manager.HTMLManagerServlet:void list(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,java.lang.String,org.apache.tomcat.util.res.StringManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.HTMLManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.HTMLManagerServlet:void doPost(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.manager.ManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServlet:void doHead(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "jakarta.servlet.http.HttpServlet:void service(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.manager.ManagerServlet:void doPut(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServlet:void service(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.manager.host.HTMLHostManagerServlet:void list(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,java.lang.String,org.apache.tomcat.util.res.StringManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.host.HTMLHostManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.host.HTMLHostManagerServlet:void doPost(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.manager.host.HostManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServlet:void doHead(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "jakarta.servlet.http.HttpServlet:void service(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.servlets.WebdavServlet:void doLock(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.WebdavServlet:void service(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.servlets.WebdavServlet:void sendReport(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,java.util.Hashtable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.WebdavServlet:boolean copyResource(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.WebdavServlet:boolean deleteResource(java.lang.String,jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,boolean)"
        ]
    },
    "org.apache.catalina.users.MemoryUserDatabase:void save()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.users.MemoryUserDatabase:void close()",
            "org.apache.catalina.users.MemoryUserDatabaseFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)"
        ]
    },
    "org.apache.catalina.valves.AccessLogValve:void close(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.valves.AccessLogValve:void rotate()",
            "org.apache.catalina.valves.AccessLogValve:boolean rotate(java.lang.String)",
            "org.apache.catalina.valves.AccessLogValve:void log(java.io.CharArrayWriter)",
            "org.apache.catalina.valves.AccessLogValve:void stopInternal()"
        ]
    },
    "org.apache.juli.FileHandler:void closeWriter()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.juli.FileHandler:void publish(java.util.logging.LogRecord)",
            "org.apache.juli.FileHandler:void close()"
        ]
    },
    "org.apache.juli.JdkLoggerFormatter:java.lang.String format(java.util.logging.LogRecord)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.juli.FileHandler:void publish(java.util.logging.LogRecord)"
        ]
    },
    "org.apache.catalina.core.StandardHostValve:void status(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.StandardHostValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.core.StandardHostValve:void throwable(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,java.lang.Throwable)"
        ]
    },
    "org.apache.catalina.core.StandardHostValve:void throwable(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.AsyncContextImpl:void setErrorState(java.lang.Throwable,boolean)",
            "org.apache.catalina.core.StandardHostValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)"
        ]
    },
    "org.apache.naming.NamingContext:java.lang.Object lookup(javax.naming.Name,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.naming.NamingContext:java.lang.Object lookup(javax.naming.Name)",
            "org.apache.naming.NamingContext:java.lang.Object lookup(java.lang.String)",
            "org.apache.naming.NamingContext:java.lang.Object lookupLink(javax.naming.Name)",
            "org.apache.naming.NamingContext:java.lang.Object lookupLink(java.lang.String)"
        ]
    },
    "org.apache.naming.factory.FactoryBase:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.naming.NamingContext:java.lang.Object lookup(javax.naming.Name,boolean)",
            "org.apache.naming.factory.FactoryBase:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.naming.factory.LookupFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.disk.DiskFileItem:byte[] get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.disk.DiskFileItem:java.lang.String getString(java.lang.String)",
            "org.apache.tomcat.util.http.fileupload.disk.DiskFileItem:java.lang.String getString()",
            "org.apache.tomcat.util.http.fileupload.disk.DiskFileItem:void write(java.io.File)"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.disk.DiskFileItem:void write(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationPart:void write(java.lang.String)"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.impl.FileItemIteratorImpl:void init(org.apache.tomcat.util.http.fileupload.FileUploadBase,org.apache.tomcat.util.http.fileupload.RequestContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.impl.FileItemIteratorImpl:org.apache.tomcat.util.http.fileupload.MultipartStream getMultiPartStream()"
        ]
    },
    "org.apache.catalina.connector.CoyoteOutputStream:void flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream:void flush()",
            "org.apache.catalina.startup.Catalina:void stopServer(java.lang.String[])",
            "org.apache.tomcat.util.http.fileupload.ThresholdingOutputStream:void flush()",
            "org.apache.tomcat.util.http.fileupload.util.Streams:long copy(java.io.InputStream,java.io.OutputStream,boolean,byte[])"
        ]
    },
    "org.apache.catalina.connector.CoyoteWriter:void flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.NoBodyResponse:void setContentLength()",
            "org.apache.catalina.connector.CoyoteWriter:boolean checkError()",
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void flush()",
            "org.apache.catalina.filters.RemoteCIDRFilter:void sendErrorWhenNotHttp(jakarta.servlet.ServletResponse)",
            "org.apache.catalina.filters.RequestFilter:void sendErrorWhenNotHttp(jakarta.servlet.ServletResponse)",
            "org.apache.catalina.manager.HTMLManagerServlet:void list(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.ManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.ManagerServlet:void doPut(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.host.HTMLHostManagerServlet:void list(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.host.HostManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.DefaultServlet:void serveResource(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,boolean,java.lang.String)",
            "org.apache.catalina.servlets.DefaultServlet:java.io.InputStream renderHtml(jakarta.servlet.http.HttpServletRequest,java.lang.String,org.apache.catalina.WebResource,java.lang.String)",
            "org.apache.catalina.util.DOMWriter:void print(org.w3c.dom.Node)",
            "org.apache.catalina.valves.AccessLogValve:void backgroundProcess()",
            "org.apache.catalina.valves.AccessLogValve:void close(boolean)",
            "org.apache.catalina.valves.AccessLogValve:void log(java.io.CharArrayWriter)",
            "org.apache.catalina.webresources.TrackedInputStream:java.lang.String toString()",
            "org.apache.juli.FileHandler:void publish(java.util.logging.LogRecord)",
            "org.apache.juli.FileHandler:void closeWriter()",
            "org.apache.juli.FileHandler:void flush()"
        ]
    },
    "org.apache.catalina.connector.Response:void flushBuffer()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletResponseWrapper:void flushBuffer()",
            "jakarta.servlet.http.NoBodyOutputStream:void checkCommit()",
            "org.apache.catalina.connector.Response:void sendRedirect(java.lang.String,int)",
            "org.apache.catalina.connector.ResponseFacade$FlushBufferPrivilegedAction:java.lang.Void run()",
            "org.apache.catalina.connector.ResponseFacade:void flushBuffer()",
            "org.apache.catalina.valves.ErrorReportValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)"
        ]
    },
    "jakarta.servlet.http.HttpServletResponseWrapper:void setTrailerFields(java.util.function.Supplier)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletResponseWrapper:void setTrailerFields(java.util.function.Supplier)"
        ]
    },
    "org.apache.catalina.connector.ResponseFacade:void setTrailerFields(java.util.function.Supplier)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletResponseWrapper:void setTrailerFields(java.util.function.Supplier)"
        ]
    },
    "org.apache.catalina.connector.CoyoteOutputStream:void setWriteListener(jakarta.servlet.WriteListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.connector.CoyoteOutputStream:void checkRegisterForWrite()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.CoyoteOutputStream:void write(int)",
            "org.apache.catalina.connector.CoyoteOutputStream:void write(byte[],int,int)",
            "org.apache.catalina.connector.CoyoteOutputStream:void write(java.nio.ByteBuffer)",
            "org.apache.catalina.connector.CoyoteOutputStream:void flush()"
        ]
    },
    "org.apache.catalina.connector.OutputBuffer:boolean isReady()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.CoyoteOutputStream:boolean checkNonBlockingWrite()",
            "org.apache.catalina.connector.CoyoteOutputStream:boolean isReady()"
        ]
    },
    "org.apache.coyote.http11.Http11OutputBuffer:void end()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11OutputBuffer:void end()",
            "org.apache.coyote.http11.Http11Processor:void endRequest()",
            "org.apache.coyote.http11.Http11Processor:void finishResponse()",
            "org.apache.coyote.http11.filters.ChunkedOutputFilter:void end()",
            "org.apache.coyote.http11.filters.GzipOutputFilter:void end()",
            "org.apache.coyote.http11.filters.IdentityOutputFilter:void end()",
            "org.apache.coyote.http11.filters.VoidOutputFilter:void end()",
            "org.apache.coyote.http2.Http2AsyncUpgradeHandler$SendfileCompletionHandler:void completed(java.lang.Long,org.apache.coyote.http2.SendfileData)",
            "org.apache.coyote.http2.Http2OutputBuffer:void end()",
            "org.apache.coyote.http2.StreamProcessor:void finishResponse()"
        ]
    },
    "org.apache.coyote.http11.filters.GzipOutputFilter:void end()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11OutputBuffer:void end()",
            "org.apache.coyote.http11.filters.ChunkedOutputFilter:void end()",
            "org.apache.coyote.http11.filters.GzipOutputFilter:void end()",
            "org.apache.coyote.http11.filters.IdentityOutputFilter:void end()",
            "org.apache.coyote.http11.filters.VoidOutputFilter:void end()",
            "org.apache.coyote.http2.Http2AsyncUpgradeHandler$SendfileCompletionHandler:void completed(java.lang.Long,org.apache.coyote.http2.SendfileData)",
            "org.apache.coyote.http2.Http2OutputBuffer:void end()",
            "org.apache.coyote.http2.StreamProcessor:void finishResponse()"
        ]
    },
    "org.apache.coyote.http11.filters.IdentityOutputFilter:void end()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11OutputBuffer:void end()",
            "org.apache.coyote.http11.filters.ChunkedOutputFilter:void end()",
            "org.apache.coyote.http11.filters.GzipOutputFilter:void end()",
            "org.apache.coyote.http11.filters.IdentityOutputFilter:void end()",
            "org.apache.coyote.http11.filters.VoidOutputFilter:void end()",
            "org.apache.coyote.http2.Http2AsyncUpgradeHandler$SendfileCompletionHandler:void completed(java.lang.Long,org.apache.coyote.http2.SendfileData)",
            "org.apache.coyote.http2.Http2OutputBuffer:void end()",
            "org.apache.coyote.http2.StreamProcessor:void finishResponse()"
        ]
    },
    "org.apache.coyote.http11.filters.VoidOutputFilter:void end()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11OutputBuffer:void end()",
            "org.apache.coyote.http11.filters.ChunkedOutputFilter:void end()",
            "org.apache.coyote.http11.filters.GzipOutputFilter:void end()",
            "org.apache.coyote.http11.filters.IdentityOutputFilter:void end()",
            "org.apache.coyote.http11.filters.VoidOutputFilter:void end()",
            "org.apache.coyote.http2.Http2AsyncUpgradeHandler$SendfileCompletionHandler:void completed(java.lang.Long,org.apache.coyote.http2.SendfileData)",
            "org.apache.coyote.http2.Http2OutputBuffer:void end()",
            "org.apache.coyote.http2.StreamProcessor:void finishResponse()"
        ]
    },
    "org.apache.coyote.http2.Http2OutputBuffer:void end()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11OutputBuffer:void end()",
            "org.apache.coyote.http11.filters.ChunkedOutputFilter:void end()",
            "org.apache.coyote.http11.filters.GzipOutputFilter:void end()",
            "org.apache.coyote.http11.filters.IdentityOutputFilter:void end()",
            "org.apache.coyote.http11.filters.VoidOutputFilter:void end()",
            "org.apache.coyote.http2.Http2AsyncUpgradeHandler$SendfileCompletionHandler:void completed(java.lang.Long,org.apache.coyote.http2.SendfileData)",
            "org.apache.coyote.http2.Http2OutputBuffer:void end()",
            "org.apache.coyote.http2.StreamProcessor:void finishResponse()"
        ]
    },
    "org.apache.coyote.http2.StreamProcessor:void finishResponse()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProcessor:void action(org.apache.coyote.ActionCode,java.lang.Object)"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.ThresholdingOutputStream:void write(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.Catalina:void stopServer(java.lang.String[])",
            "org.apache.tomcat.util.http.fileupload.ThresholdingOutputStream:void write(int)",
            "org.apache.tomcat.util.http.fileupload.util.mime.QuotedPrintableDecoder:int decode(byte[],java.io.OutputStream)"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.util.mime.QuotedPrintableDecoder:int decode(byte[],java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.util.mime.MimeUtility:java.lang.String decodeWord(java.lang.String)"
        ]
    },
    "org.apache.catalina.util.IOTools:void flow(java.io.InputStream,java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.ManagerServlet:void uploadWar(java.io.PrintWriter,jakarta.servlet.http.HttpServletRequest,java.io.File,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.servlets.CGIServlet$CGIRunner:void run()",
            "org.apache.catalina.startup.HostConfig:void deployWAR(org.apache.catalina.util.ContextName,java.io.File)",
            "org.apache.catalina.startup.Tomcat:org.apache.catalina.Context addWebapp(java.lang.String,java.net.URL)",
            "org.apache.catalina.valves.ErrorReportValve:boolean sendErrorPage(java.lang.String,org.apache.catalina.connector.Response)",
            "org.apache.catalina.webresources.ExtractingRoot:void processWebInfLib()"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.ByteArrayOutputStream:void writeTo(java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream:void thresholdReached()"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.IOUtils:long copyLarge(java.io.InputStream,java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.IOUtils:int copy(java.io.InputStream,java.io.OutputStream)"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.ThresholdingOutputStream:void write(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.IOTools:void flow(java.io.InputStream,java.io.OutputStream)",
            "org.apache.tomcat.util.http.fileupload.ByteArrayOutputStream:void writeTo(java.io.OutputStream)",
            "org.apache.tomcat.util.http.fileupload.IOUtils:long copyLarge(java.io.InputStream,java.io.OutputStream)",
            "org.apache.tomcat.util.http.fileupload.ThresholdingOutputStream:void write(byte[],int,int)",
            "org.apache.tomcat.util.http.fileupload.util.Streams:long copy(java.io.InputStream,java.io.OutputStream,boolean,byte[])"
        ]
    },
    "org.apache.coyote.http2.Stream:void incrementWindowSize(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2UpgradeHandler:void setting(org.apache.coyote.http2.Setting,long)",
            "org.apache.coyote.http2.Http2UpgradeHandler:void incrementWindowSize(int,int)"
        ]
    },
    "org.apache.coyote.http2.Stream:void notifyConnection()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2UpgradeHandler:void incrementWindowSize(int)"
        ]
    },
    "org.apache.coyote.http2.Stream:void cancelAllocationRequests()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Stream:void receiveReset(long)",
            "org.apache.coyote.http2.Stream:void close(org.apache.coyote.http2.Http2Exception)"
        ]
    },
    "org.apache.coyote.http2.Http2AsyncParser$PrefaceCompletionHandler:void completed(java.lang.Long,java.lang.Void)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2AsyncParser$FrameCompletionHandler:void completed(java.lang.Object,java.lang.Object)",
            "org.apache.coyote.http2.Http2AsyncParser$PrefaceCompletionHandler:void completed(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.coyote.http2.Http2AsyncUpgradeHandler:void init(jakarta.servlet.http.WebConnection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProtocol$ConnectionHandler:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState process(org.apache.tomcat.util.net.SocketWrapperBase,org.apache.tomcat.util.net.SocketEvent)",
            "org.apache.coyote.http2.Http2UpgradeHandler:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState upgradeDispatch(org.apache.tomcat.util.net.SocketEvent)"
        ]
    },
    "org.apache.coyote.http2.Stream$PrivilegedPush:java.lang.Object run()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.security.auth.message.config.AuthConfigFactory:jakarta.security.auth.message.config.AuthConfigFactory getFactory()",
            "org.apache.catalina.core.ApplicationFilterChain:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)",
            "org.apache.coyote.http2.Stream:void push(org.apache.coyote.http2.Http2UpgradeHandler,org.apache.coyote.Request,org.apache.coyote.http2.Stream)"
        ]
    },
    "org.apache.coyote.http2.Stream:void push(org.apache.coyote.Request)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.StreamProcessor:void doPush(org.apache.coyote.Request)"
        ]
    },
    "org.apache.coyote.http2.Http2Parser:void readHeadersFrame(int,int,int,java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2AsyncParser$FrameCompletionHandler:void completed(java.lang.Long,java.lang.Void)",
            "org.apache.coyote.http2.Http2Parser:boolean readFrame(boolean,org.apache.coyote.http2.FrameType)"
        ]
    },
    "org.apache.coyote.http2.Http2Parser:void readContinuationFrame(int,int,int,java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2AsyncParser$FrameCompletionHandler:void completed(java.lang.Long,java.lang.Void)",
            "org.apache.coyote.http2.Http2Parser:boolean readFrame(boolean,org.apache.coyote.http2.FrameType)"
        ]
    },
    "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream:void flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream:void flush()",
            "org.apache.catalina.startup.Catalina:void stopServer(java.lang.String[])",
            "org.apache.tomcat.util.http.fileupload.ThresholdingOutputStream:void flush()",
            "org.apache.tomcat.util.http.fileupload.util.Streams:long copy(java.io.InputStream,java.io.OutputStream,boolean,byte[])"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.ThresholdingOutputStream:void flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.Catalina:void stopServer(java.lang.String[])",
            "org.apache.tomcat.util.http.fileupload.ThresholdingOutputStream:void flush()",
            "org.apache.tomcat.util.http.fileupload.ThresholdingOutputStream:void close()",
            "org.apache.tomcat.util.http.fileupload.util.Streams:long copy(java.io.InputStream,java.io.OutputStream,boolean,byte[])"
        ]
    },
    "org.apache.coyote.http11.upgrade.UpgradeProcessorExternal:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.naming.factory.LookupFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)"
        ]
    },
    "org.apache.coyote.http11.upgrade.UpgradeProcessorExternal:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState dispatch(org.apache.tomcat.util.net.SocketEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProcessorLight:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState process(org.apache.tomcat.util.net.SocketWrapperBase,org.apache.tomcat.util.net.SocketEvent)"
        ]
    },
    "org.apache.coyote.http11.upgrade.UpgradeServletOutputStream:void onError(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.upgrade.UpgradeServletOutputStream:void flushInternal(boolean,boolean)",
            "org.apache.coyote.http11.upgrade.UpgradeServletOutputStream:void onWritePossible()"
        ]
    },
    "org.apache.coyote.http11.upgrade.UpgradeProcessorInternal:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState dispatch(org.apache.tomcat.util.net.SocketEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProcessorLight:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState process(org.apache.tomcat.util.net.SocketWrapperBase,org.apache.tomcat.util.net.SocketEvent)"
        ]
    },
    "org.apache.coyote.http2.Http2AsyncUpgradeHandler:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState upgradeDispatch(org.apache.tomcat.util.net.SocketEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.upgrade.UpgradeProcessorInternal:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState dispatch(org.apache.tomcat.util.net.SocketEvent)",
            "org.apache.coyote.http2.Http2AsyncParser$FrameCompletionHandler:void completed(java.lang.Long,java.lang.Void)",
            "org.apache.coyote.http2.Http2AsyncParser$FrameCompletionHandler:void failed(java.lang.Throwable,java.lang.Void)",
            "org.apache.coyote.http2.Http2AsyncParser$PrefaceCompletionHandler:void completed(java.lang.Long,java.lang.Void)"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:int read(boolean,java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11InputBuffer:boolean fill(boolean)"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:int fillReadBuffer(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:boolean isReadyForRead()",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:int read(boolean,byte[],int,int)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:int read(boolean,java.nio.ByteBuffer)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:void registerReadInterest()"
        ]
    },
    "org.apache.coyote.http2.Http2AsyncUpgradeHandler$SendfileCompletionHandler:void completed(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SecureNio2Channel$1:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$2:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$3:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$4:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void read(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void read(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SocketWrapperBase$VectoredIOCompletionHandler:void completed(java.lang.Long,org.apache.tomcat.util.net.SocketWrapperBase$OperationState)"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$Nio2OperationState$1:void failed(java.lang.Throwable,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2AsyncUpgradeHandler$SendfileCompletionHandler:void failed(java.lang.Throwable,org.apache.coyote.http2.SendfileData)",
            "org.apache.tomcat.util.net.Nio2Channel$3:void read(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.Nio2Channel$3:void read(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.Nio2Channel$3:void write(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.Nio2Channel$3:void write(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SecureNio2Channel$1:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$2:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$3:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$4:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void write(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void write(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SocketWrapperBase$VectoredIOCompletionHandler:void failed(java.lang.Throwable,org.apache.tomcat.util.net.SocketWrapperBase$OperationState)",
            "org.apache.tomcat.util.net.SocketWrapperBase:org.apache.tomcat.util.net.SocketWrapperBase$CompletionState vectoredOperation(boolean,java.nio.ByteBuffer[],int,int,org.apache.tomcat.util.net.SocketWrapperBase$BlockingMode,long,java.util.concurrent.TimeUnit,java.lang.Object,org.apache.tomcat.util.net.SocketWrapperBase$CompletionCheck,java.nio.channels.CompletionHandler)"
        ]
    },
    "org.apache.tomcat.util.net.SocketWrapperBase:org.apache.tomcat.util.net.SocketWrapperBase$CompletionState read(long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler,java.nio.ByteBuffer[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tomcat.util.net.SocketWrapperBase:org.apache.tomcat.util.net.SocketWrapperBase$CompletionState read(org.apache.tomcat.util.net.SocketWrapperBase$BlockingMode,long,java.util.concurrent.TimeUnit,java.lang.Object,org.apache.tomcat.util.net.SocketWrapperBase$CompletionCheck,java.nio.channels.CompletionHandler,java.nio.ByteBuffer[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2AsyncParser:void readConnectionPreface(jakarta.servlet.http.WebConnection,org.apache.coyote.http2.Stream)",
            "org.apache.coyote.http2.Http2AsyncParser:boolean readFrame(boolean,org.apache.coyote.http2.FrameType)"
        ]
    },
    "org.apache.tomcat.util.net.SocketWrapperBase:org.apache.tomcat.util.net.SocketWrapperBase$CompletionState write(long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler,java.nio.ByteBuffer[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tomcat.util.net.SocketWrapperBase:org.apache.tomcat.util.net.SocketWrapperBase$CompletionState write(org.apache.tomcat.util.net.SocketWrapperBase$BlockingMode,long,java.util.concurrent.TimeUnit,java.lang.Object,org.apache.tomcat.util.net.SocketWrapperBase$CompletionCheck,java.nio.channels.CompletionHandler,java.nio.ByteBuffer[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2AsyncUpgradeHandler$AsyncPingManager:void sendPing(boolean)",
            "org.apache.coyote.http2.Http2AsyncUpgradeHandler$AsyncPingManager:void receivePing(byte[],boolean)",
            "org.apache.coyote.http2.Http2AsyncUpgradeHandler$SendfileCompletionHandler:void completed(java.lang.Long,org.apache.coyote.http2.SendfileData)",
            "org.apache.coyote.http2.Http2AsyncUpgradeHandler:void writeSettings()",
            "org.apache.coyote.http2.Http2AsyncUpgradeHandler:void sendStreamReset(org.apache.coyote.http2.StreamException)",
            "org.apache.coyote.http2.Http2AsyncUpgradeHandler:void writeGoAwayFrame(int,long,byte[])",
            "org.apache.coyote.http2.Http2AsyncUpgradeHandler:void writeHeaders(org.apache.coyote.http2.Stream,int,org.apache.tomcat.util.http.MimeHeaders,boolean,int)",
            "org.apache.coyote.http2.Http2AsyncUpgradeHandler:void writeBody(org.apache.coyote.http2.Stream,java.nio.ByteBuffer,int,boolean)",
            "org.apache.coyote.http2.Http2AsyncUpgradeHandler:void writeWindowUpdate(org.apache.coyote.http2.AbstractNonZeroStream,int,boolean)",
            "org.apache.coyote.http2.Http2AsyncUpgradeHandler:void settingsEnd(boolean)",
            "org.apache.coyote.http2.Http2AsyncUpgradeHandler:org.apache.tomcat.util.net.SendfileState processSendfile(org.apache.coyote.http2.SendfileData)"
        ]
    },
    "org.apache.catalina.connector.Connector:void startInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void start()"
        ]
    },
    "org.apache.coyote.ajp.AbstractAjpProtocol:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.Connector:void startInternal()"
        ]
    },
    "org.apache.catalina.core.ContainerBase$StopChild:java.lang.Void call()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ContainerBase$StopChild:java.lang.Object call()"
        ]
    },
    "org.apache.catalina.core.ContainerBase:void setCluster(org.apache.catalina.Cluster)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.core.ContainerBase:void setRealm(org.apache.catalina.Realm)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.StandardEngine:org.apache.catalina.Realm getRealm()",
            "org.apache.catalina.mbeans.MBeanFactory:java.lang.String addRealmToParent(java.lang.String,org.apache.catalina.Realm)",
            "org.apache.catalina.mbeans.MBeanFactory:void removeRealm(java.lang.String)",
            "org.apache.catalina.startup.Tomcat:org.apache.catalina.Engine getEngine()"
        ]
    },
    "org.apache.catalina.core.ContainerBase:void removeChild(org.apache.catalina.Container)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ContainerBase:void destroyInternal()",
            "org.apache.catalina.core.StandardContext:void removeChild(org.apache.catalina.Container)",
            "org.apache.catalina.manager.host.HostManagerServlet:void remove(java.io.PrintWriter,java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.mbeans.ContainerMBean:void removeChild(java.lang.String)",
            "org.apache.catalina.mbeans.MBeanFactory:void removeContext(java.lang.String)",
            "org.apache.catalina.mbeans.MBeanFactory:void removeHost(java.lang.String)",
            "org.apache.catalina.startup.HostConfig:void undeploy(org.apache.catalina.startup.HostConfig$DeployedApplication)",
            "org.apache.catalina.startup.HostConfig:void unmanageApp(java.lang.String)"
        ]
    },
    "org.apache.catalina.core.StandardContext:void setLoader(org.apache.catalina.Loader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.StandardContext:void startInternal()",
            "org.apache.catalina.mbeans.MBeanFactory:java.lang.String createWebappLoader(java.lang.String)",
            "org.apache.catalina.mbeans.MBeanFactory:void removeLoader(java.lang.String)"
        ]
    },
    "org.apache.catalina.core.StandardContext:void setManager(org.apache.catalina.Manager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.StandardContext:void startInternal()",
            "org.apache.catalina.mbeans.MBeanFactory:java.lang.String createStandardManager(java.lang.String)",
            "org.apache.catalina.mbeans.MBeanFactory:void removeManager(java.lang.String)"
        ]
    },
    "org.apache.catalina.core.StandardContext:void setNamingResources(org.apache.catalina.deploy.NamingResourcesImpl)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.StandardContext:org.apache.catalina.deploy.NamingResourcesImpl getNamingResources()"
        ]
    },
    "org.apache.catalina.core.StandardContext:void reload()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.loader.WebappLoader:void backgroundProcess()",
            "org.apache.catalina.manager.ManagerServlet:void reload(java.io.PrintWriter,org.apache.catalina.util.ContextName,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.startup.HostConfig:void reload(org.apache.catalina.startup.HostConfig$DeployedApplication,java.io.File,java.lang.String)"
        ]
    },
    "org.apache.catalina.core.StandardContext:boolean resourcesStop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.StandardContext:void stopInternal()"
        ]
    },
    "org.apache.catalina.core.StandardContext:void stopInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void stop()"
        ]
    },
    "org.apache.catalina.core.StandardPipeline:void stopInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void stop()"
        ]
    },
    "org.apache.catalina.core.StandardPipeline:void setBasic(org.apache.catalina.Valve)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.StandardContext:void <init>()",
            "org.apache.catalina.core.StandardEngine:void <init>()",
            "org.apache.catalina.core.StandardHost:void <init>()",
            "org.apache.catalina.core.StandardWrapper:void <init>()"
        ]
    },
    "org.apache.catalina.core.StandardPipeline:void removeValve(org.apache.catalina.Valve)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.StandardPipeline:void destroyInternal()",
            "org.apache.catalina.mbeans.ContainerMBean:void removeValve(java.lang.String)",
            "org.apache.catalina.mbeans.MBeanFactory:void removeValve(java.lang.String)"
        ]
    },
    "org.apache.catalina.core.StandardServer:void removeService(org.apache.catalina.Service)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.mbeans.MBeanFactory:void removeService(java.lang.String)"
        ]
    },
    "org.apache.catalina.core.StandardServer:void stopInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void stop()"
        ]
    },
    "org.apache.catalina.core.StandardService:void setContainer(org.apache.catalina.Engine)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.mbeans.MBeanFactory:java.lang.String createStandardServiceEngine(java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.catalina.startup.Tomcat:org.apache.catalina.Engine getEngine()"
        ]
    },
    "org.apache.catalina.core.StandardService:void removeConnector(org.apache.catalina.connector.Connector)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.Connector:void destroyInternal()",
            "org.apache.catalina.mbeans.MBeanFactory:void removeConnector(java.lang.String)"
        ]
    },
    "org.apache.catalina.core.StandardService:void removeExecutor(org.apache.catalina.Executor)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.core.StandardService:void stopInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void stop()"
        ]
    },
    "org.apache.catalina.manager.ManagerServlet:void stop(java.io.PrintWriter,org.apache.catalina.util.ContextName,org.apache.tomcat.util.res.StringManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.HTMLManagerServlet:java.lang.String stop(org.apache.catalina.util.ContextName,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.ManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.manager.ManagerServlet:void undeploy(java.io.PrintWriter,org.apache.catalina.util.ContextName,org.apache.tomcat.util.res.StringManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.HTMLManagerServlet:java.lang.String undeploy(org.apache.catalina.util.ContextName,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.ManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.manager.host.HostManagerServlet:void stop(java.io.PrintWriter,java.lang.String,org.apache.tomcat.util.res.StringManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.host.HTMLHostManagerServlet:java.lang.String stop(java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.host.HostManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.realm.CombinedRealm:void stopInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void stop()"
        ]
    },
    "org.apache.catalina.session.ManagerBase:void stopInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.session.PersistentManagerBase:void stopInternal()",
            "org.apache.catalina.session.StandardManager:void stopInternal()"
        ]
    },
    "org.apache.catalina.session.PersistentManagerBase:void stopInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void stop()"
        ]
    },
    "org.apache.catalina.startup.Catalina:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.Catalina$CatalinaShutdownHook:void run()",
            "org.apache.catalina.startup.Catalina:void start()"
        ]
    },
    "org.apache.catalina.startup.Tomcat:void stop()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.util.LifecycleBase:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ContainerBase$StartChild:java.lang.Void call()",
            "org.apache.catalina.core.ContainerBase:void setCluster(org.apache.catalina.Cluster)",
            "org.apache.catalina.core.ContainerBase:void setRealm(org.apache.catalina.Realm)",
            "org.apache.catalina.core.ContainerBase:void addChildInternal(org.apache.catalina.Container)",
            "org.apache.catalina.core.ContainerBase:void startInternal()",
            "org.apache.catalina.core.StandardContext:void setLoader(org.apache.catalina.Loader)",
            "org.apache.catalina.core.StandardContext:void setManager(org.apache.catalina.Manager)",
            "org.apache.catalina.core.StandardContext:void setNamingResources(org.apache.catalina.deploy.NamingResourcesImpl)",
            "org.apache.catalina.core.StandardContext:void reload()",
            "org.apache.catalina.core.StandardContext:void resourcesStart()",
            "org.apache.catalina.core.StandardContext:void startInternal()",
            "org.apache.catalina.core.StandardPipeline:void startInternal()",
            "org.apache.catalina.core.StandardPipeline:void setBasic(org.apache.catalina.Valve)",
            "org.apache.catalina.core.StandardPipeline:void addValve(org.apache.catalina.Valve)",
            "org.apache.catalina.core.StandardServer:void addService(org.apache.catalina.Service)",
            "org.apache.catalina.core.StandardServer:void startInternal()",
            "org.apache.catalina.core.StandardService:void setContainer(org.apache.catalina.Engine)",
            "org.apache.catalina.core.StandardService:void addConnector(org.apache.catalina.connector.Connector)",
            "org.apache.catalina.core.StandardService:void addExecutor(org.apache.catalina.Executor)",
            "org.apache.catalina.core.StandardService:void startInternal()",
            "org.apache.catalina.manager.ManagerServlet:void start(java.io.PrintWriter,org.apache.catalina.util.ContextName,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.host.HostManagerServlet:void start(java.io.PrintWriter,java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.realm.CombinedRealm:void startInternal()",
            "org.apache.catalina.session.ManagerBase:void startInternal()",
            "org.apache.catalina.session.PersistentManagerBase:void startInternal()",
            "org.apache.catalina.startup.Catalina:void start()",
            "org.apache.catalina.startup.HostConfig:void reload(org.apache.catalina.startup.HostConfig$DeployedApplication,java.io.File,java.lang.String)",
            "org.apache.catalina.startup.Tomcat:void start()",
            "org.apache.catalina.valves.rewrite.RewriteValve:void parse(java.io.BufferedReader)",
            "org.apache.catalina.webresources.AbstractSingleArchiveResourceSet:void <init>(org.apache.catalina.WebResourceRoot,java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.catalina.webresources.DirResourceSet:void <init>(org.apache.catalina.WebResourceRoot,java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.catalina.webresources.FileResourceSet:void <init>(org.apache.catalina.WebResourceRoot,java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.catalina.webresources.JarWarResourceSet:void <init>(org.apache.catalina.WebResourceRoot,java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.catalina.webresources.StandardRoot:void startInternal()"
        ]
    },
    "org.apache.catalina.util.LifecycleBase:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ContainerBase:void removeChild(org.apache.catalina.Container)",
            "org.apache.catalina.core.ContainerBase:void destroyInternal()",
            "org.apache.catalina.core.StandardContext:void setManager(org.apache.catalina.Manager)",
            "org.apache.catalina.core.StandardContext:void setNamingResources(org.apache.catalina.deploy.NamingResourcesImpl)",
            "org.apache.catalina.core.StandardContext:void destroyInternal()",
            "org.apache.catalina.core.StandardPipeline:void removeValve(org.apache.catalina.Valve)",
            "org.apache.catalina.core.StandardServer:void destroyInternal()",
            "org.apache.catalina.core.StandardService:void destroyInternal()",
            "org.apache.catalina.manager.host.HostManagerServlet:void remove(java.io.PrintWriter,java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.mbeans.MBeanFactory:void removeConnector(java.lang.String)",
            "org.apache.catalina.mbeans.MBeanFactory:void removeContext(java.lang.String)",
            "org.apache.catalina.realm.CombinedRealm:void destroyInternal()",
            "org.apache.catalina.startup.Catalina:void stopServer(java.lang.String[])",
            "org.apache.catalina.startup.Catalina:void start()",
            "org.apache.catalina.startup.Catalina:void stop()",
            "org.apache.catalina.startup.Tomcat:void destroy()",
            "org.apache.catalina.util.LifecycleBase:void stop()",
            "org.apache.catalina.webresources.StandardRoot:void stopInternal()",
            "org.apache.catalina.webresources.StandardRoot:void destroyInternal()"
        ]
    },
    "org.apache.catalina.valves.rewrite.RewriteValve:void stopInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void stop()"
        ]
    },
    "org.apache.catalina.webresources.StandardRoot:void stopInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void stop()",
            "org.apache.catalina.webresources.ExtractingRoot:void stopInternal()"
        ]
    },
    "org.apache.coyote.AbstractProtocol:void init()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.Connector:void initInternal()",
            "org.apache.coyote.http11.AbstractHttp11Protocol:void init()"
        ]
    },
    "org.apache.catalina.connector.Connector:void destroyInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void destroy()"
        ]
    },
    "org.apache.coyote.http11.AbstractHttp11Protocol:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.Connector:void destroyInternal()"
        ]
    },
    "org.apache.catalina.core.StandardEngine:void startInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void start()"
        ]
    },
    "org.apache.catalina.core.StandardHost:void startInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void start()"
        ]
    },
    "org.apache.catalina.core.StandardWrapper:void startInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void start()"
        ]
    },
    "org.apache.catalina.core.StandardWrapper:void stopInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void stop()"
        ]
    },
    "org.apache.catalina.startup.ContextConfig:void processAnnotations(java.util.Set,boolean,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.ContextConfig:void processClasses(org.apache.tomcat.util.descriptor.web.WebXml,java.util.Set)"
        ]
    },
    "org.apache.catalina.startup.HostConfig:void deployApps()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.HostConfig:void start()",
            "org.apache.catalina.startup.HostConfig:void check()"
        ]
    },
    "org.apache.catalina.startup.UserConfig:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.UserConfig:void lifecycleEvent(org.apache.catalina.LifecycleEvent)"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint:java.lang.Object serverSocketAccept()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Acceptor:void run()"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel$FutureFlush:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ContainerBase:void startInternal()",
            "org.apache.catalina.core.ContainerBase:void stopInternal()",
            "org.apache.catalina.startup.ContextConfig:void processAnnotationsInParallel(java.util.Set,boolean,java.util.Map)",
            "org.apache.catalina.startup.HostConfig:void deployDescriptors(java.io.File,java.lang.String[])",
            "org.apache.catalina.startup.HostConfig:void deployWARs(java.io.File,java.lang.String[])",
            "org.apache.catalina.startup.HostConfig:void deployDirectories(java.io.File,java.lang.String[])",
            "org.apache.catalina.startup.HostConfig:void migrateLegacyApps()",
            "org.apache.catalina.startup.UserConfig:void deploy()",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:int fillReadBuffer(boolean,java.nio.ByteBuffer)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:void doWrite(boolean,java.nio.ByteBuffer)",
            "org.apache.tomcat.util.net.Nio2Endpoint:java.nio.channels.AsynchronousSocketChannel serverSocketAccept()",
            "org.apache.tomcat.util.net.SecureNio2Channel$FutureFlush:java.lang.Boolean get()",
            "org.apache.tomcat.util.net.SecureNio2Channel$FutureRead:java.lang.Integer get()",
            "org.apache.tomcat.util.net.SecureNio2Channel$FutureRead:java.lang.Integer unwrap(int,long,java.util.concurrent.TimeUnit)",
            "org.apache.tomcat.util.net.SecureNio2Channel$FutureWrite:java.lang.Integer get()",
            "org.apache.tomcat.util.net.SecureNio2Channel:int handshakeInternal(boolean)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void close()"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Channel:void close(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:void doClose()"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel:void close(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:void doClose()",
            "org.apache.tomcat.util.net.SecureNio2Channel:void closeSilently()"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel$FutureFlush:java.lang.Object get(long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:int fillReadBuffer(boolean,java.nio.ByteBuffer)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:void doWrite(boolean,java.nio.ByteBuffer)",
            "org.apache.tomcat.util.net.SecureNio2Channel$FutureFlush:java.lang.Boolean get(long,java.util.concurrent.TimeUnit)",
            "org.apache.tomcat.util.net.SecureNio2Channel$FutureRead:java.lang.Integer get(long,java.util.concurrent.TimeUnit)",
            "org.apache.tomcat.util.net.SecureNio2Channel$FutureRead:java.lang.Integer unwrap(int,long,java.util.concurrent.TimeUnit)",
            "org.apache.tomcat.util.net.SecureNio2Channel$FutureWrite:java.lang.Integer get(long,java.util.concurrent.TimeUnit)",
            "org.apache.tomcat.util.net.SecureNio2Channel:int handshakeInternal(boolean)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void close()"
        ]
    },
    "org.apache.coyote.ajp.AjpProcessor:boolean refillReadBuffer(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.ajp.AjpProcessor$SocketInputBuffer:int doRead(org.apache.tomcat.util.net.ApplicationBufferHandler)",
            "org.apache.coyote.ajp.AjpProcessor:void finishResponse()",
            "org.apache.coyote.ajp.AjpProcessor:int available(boolean)"
        ]
    },
    "org.apache.coyote.ajp.AjpProcessor:void prepareResponse()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProcessor:void action(org.apache.coyote.ActionCode,java.lang.Object)",
            "org.apache.coyote.ajp.AjpProcessor$SocketOutputBuffer:int doWrite(java.nio.ByteBuffer)"
        ]
    },
    "org.apache.coyote.ajp.AjpProcessor:void flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProcessor:void action(org.apache.coyote.ActionCode,java.lang.Object)"
        ]
    },
    "org.apache.coyote.ajp.AjpProcessor:void finishResponse()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProcessor:void action(org.apache.coyote.ActionCode,java.lang.Object)",
            "org.apache.coyote.ajp.AjpProcessor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState service(org.apache.tomcat.util.net.SocketWrapperBase)"
        ]
    },
    "org.apache.coyote.ajp.AjpProcessor:void writeData(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.ajp.AjpProcessor:void access$600(org.apache.coyote.ajp.AjpProcessor,java.nio.ByteBuffer)"
        ]
    },
    "org.apache.coyote.http11.Http11OutputBuffer:void sendAck()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11Processor:void ack(org.apache.coyote.ContinueResponseTiming)"
        ]
    },
    "org.apache.coyote.http11.upgrade.UpgradeServletOutputStream:void writeInternal(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.upgrade.UpgradeServletOutputStream:void write(int)",
            "org.apache.coyote.http11.upgrade.UpgradeServletOutputStream:void write(byte[],int,int)"
        ]
    },
    "org.apache.coyote.http2.Http2UpgradeHandler$DefaultHeaderFrameBuffers:void endFrame()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2UpgradeHandler:org.apache.coyote.http2.Http2UpgradeHandler$HeaderFrameBuffers doWriteHeaders(org.apache.coyote.http2.Stream,int,org.apache.tomcat.util.http.MimeHeaders,boolean,int)"
        ]
    },
    "org.apache.coyote.http2.Http2UpgradeHandler$PingManager:void sendPing(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2UpgradeHandler:void processConnection(jakarta.servlet.http.WebConnection,org.apache.coyote.http2.Stream)",
            "org.apache.coyote.http2.Http2UpgradeHandler:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState upgradeDispatch(org.apache.tomcat.util.net.SocketEvent)",
            "org.apache.coyote.http2.Http2UpgradeHandler:void processWrites()"
        ]
    },
    "org.apache.coyote.http2.Http2UpgradeHandler$PingManager:void receivePing(byte[],boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2AsyncUpgradeHandler$AsyncPingManager:void receivePing(byte[],boolean)",
            "org.apache.coyote.http2.Http2UpgradeHandler:void pingReceive(byte[],boolean)"
        ]
    },
    "org.apache.coyote.http2.Http2UpgradeHandler:void sendStreamReset(org.apache.coyote.http2.StreamException)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2UpgradeHandler:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState upgradeDispatch(org.apache.tomcat.util.net.SocketEvent)",
            "org.apache.coyote.http2.Stream:void close(org.apache.coyote.http2.Http2Exception)"
        ]
    },
    "org.apache.coyote.http2.Http2UpgradeHandler:void writeSettings()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2UpgradeHandler:void init(jakarta.servlet.http.WebConnection)"
        ]
    },
    "org.apache.coyote.http2.Http2UpgradeHandler:void writeGoAwayFrame(int,long,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2UpgradeHandler:void pause()",
            "org.apache.coyote.http2.Http2UpgradeHandler:void checkPauseState()",
            "org.apache.coyote.http2.Http2UpgradeHandler:void closeConnection(org.apache.coyote.http2.Http2Exception)"
        ]
    },
    "org.apache.coyote.http2.Http2UpgradeHandler:void writeBody(org.apache.coyote.http2.Stream,java.nio.ByteBuffer,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Stream$StreamOutputBuffer:boolean flush(boolean,boolean)"
        ]
    },
    "org.apache.coyote.http2.Http2UpgradeHandler:void writeWindowUpdate(org.apache.coyote.http2.AbstractNonZeroStream,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2UpgradeHandler:void onSwallowedDataFramePayload(int,int)",
            "org.apache.coyote.http2.Stream$StreamInputBuffer:int doRead(org.apache.tomcat.util.net.ApplicationBufferHandler)"
        ]
    },
    "org.apache.coyote.http2.Http2UpgradeHandler:void settingsEnd(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2Parser:void readSettingsFrame(int,int,java.nio.ByteBuffer)"
        ]
    },
    "org.apache.tomcat.util.net.SocketWrapperBase:void write(boolean,java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11OutputBuffer$SocketOutputBuffer:int doWrite(java.nio.ByteBuffer)",
            "org.apache.coyote.http11.Http11OutputBuffer:void commit()",
            "org.apache.coyote.http2.Http2UpgradeHandler$DefaultHeaderFrameBuffers:void endFrame()",
            "org.apache.coyote.http2.Http2UpgradeHandler:void writeBody(org.apache.coyote.http2.Stream,java.nio.ByteBuffer,int,boolean)",
            "org.apache.tomcat.util.net.AprEndpoint$AprSocketWrapper$AprOperationState:void run()"
        ]
    },
    "org.apache.coyote.http11.Http11OutputBuffer$SocketOutputBuffer:void end()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11OutputBuffer:void end()",
            "org.apache.coyote.http11.filters.ChunkedOutputFilter:void end()",
            "org.apache.coyote.http11.filters.GzipOutputFilter:void end()",
            "org.apache.coyote.http11.filters.IdentityOutputFilter:void end()",
            "org.apache.coyote.http11.filters.VoidOutputFilter:void end()",
            "org.apache.coyote.http2.Http2AsyncUpgradeHandler$SendfileCompletionHandler:void completed(java.lang.Long,org.apache.coyote.http2.SendfileData)",
            "org.apache.coyote.http2.Http2OutputBuffer:void end()",
            "org.apache.coyote.http2.StreamProcessor:void finishResponse()"
        ]
    },
    "org.apache.coyote.http11.Http11OutputBuffer$SocketOutputBuffer:void flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11OutputBuffer:void flush()",
            "org.apache.coyote.http11.filters.ChunkedOutputFilter:void flush()",
            "org.apache.coyote.http11.filters.GzipOutputFilter:void flush()",
            "org.apache.coyote.http11.filters.IdentityOutputFilter:void flush()",
            "org.apache.coyote.http11.filters.VoidOutputFilter:void flush()",
            "org.apache.coyote.http2.Http2OutputBuffer:void flush()",
            "org.apache.coyote.http2.StreamProcessor:void flush()"
        ]
    },
    "org.apache.coyote.http11.Http11OutputBuffer:boolean flushBuffer(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11OutputBuffer:void sendAck()",
            "org.apache.coyote.http11.Http11Processor:boolean flushBufferedWrite()"
        ]
    },
    "org.apache.coyote.http11.Http11InputBuffer:boolean parseRequestLine(boolean,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11Processor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState service(org.apache.tomcat.util.net.SocketWrapperBase)"
        ]
    },
    "org.apache.coyote.http11.Http11InputBuffer:int available(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11InputBuffer:int available()",
            "org.apache.coyote.http11.Http11Processor:int available(boolean)"
        ]
    },
    "org.apache.coyote.http11.Http11InputBuffer:org.apache.coyote.http11.Http11InputBuffer$HeaderParseStatus parseHeader()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11InputBuffer:boolean parseHeaders()"
        ]
    },
    "org.apache.coyote.http11.Http11InputBuffer:org.apache.coyote.http11.Http11InputBuffer$HeaderParseStatus skipLine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11InputBuffer:org.apache.coyote.http11.Http11InputBuffer$HeaderParseStatus parseHeader()"
        ]
    },
    "org.apache.coyote.http11.Http11InputBuffer:boolean access$300(org.apache.coyote.http11.Http11InputBuffer,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11InputBuffer$SocketInputBuffer:int doRead(org.apache.tomcat.util.net.ApplicationBufferHandler)"
        ]
    },
    "org.apache.coyote.http11.upgrade.UpgradeServletInputStream:boolean isReady()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.coyote.http11.upgrade.UpgradeServletInputStream:void onDataAvailable()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.upgrade.UpgradeProcessorExternal:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState dispatch(org.apache.tomcat.util.net.SocketEvent)"
        ]
    },
    "org.apache.coyote.ajp.AjpProcessor:boolean read(byte[],int,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.ajp.AjpProcessor:boolean readMessage(org.apache.coyote.ajp.AjpMessage,boolean)"
        ]
    },
    "org.apache.coyote.http11.upgrade.UpgradeServletInputStream:int read(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpUtils:java.util.Hashtable parsePostData(int,jakarta.servlet.ServletInputStream)",
            "org.apache.catalina.connector.Request:int readPostBody(byte[],int)",
            "org.apache.catalina.connector.Request:byte[] readChunkedPostBody()",
            "org.apache.catalina.loader.WebappClassLoaderBase:void clearReferencesJdbc()",
            "org.apache.catalina.util.IOTools:int readFully(java.io.InputStream,byte[])",
            "org.apache.catalina.webresources.AbstractArchiveResource$JarInputStreamWrapper:int read(byte[],int,int)",
            "org.apache.catalina.webresources.TrackedInputStream:int read(byte[],int,int)",
            "org.apache.tomcat.util.http.fileupload.ByteArrayOutputStream:int write(java.io.InputStream)",
            "org.apache.tomcat.util.http.fileupload.IOUtils:int read(java.io.InputStream,byte[],int,int)",
            "org.apache.tomcat.util.http.fileupload.MultipartStream$ItemInputStream:int makeAvailable()",
            "org.apache.tomcat.util.http.fileupload.MultipartStream:byte readByte()"
        ]
    },
    "org.apache.coyote.http11.upgrade.UpgradeServletInputStream:int readInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.upgrade.UpgradeServletInputStream:int read()",
            "org.apache.coyote.http11.upgrade.UpgradeServletInputStream:int readLine(byte[],int,int)"
        ]
    },
    "org.apache.coyote.http2.Http2UpgradeHandler:boolean fill(boolean,byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2AsyncUpgradeHandler:boolean fill(boolean,byte[],int,int)",
            "org.apache.coyote.http2.Http2Parser$Input:boolean fill(boolean,byte[])",
            "org.apache.coyote.http2.Http2Parser$Input:boolean fill(boolean,java.nio.ByteBuffer,int)",
            "org.apache.coyote.http2.Http2Parser:void swallowPayload(int,int,int,boolean,java.nio.ByteBuffer)"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:void flushBlocking()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SocketWrapperBase:boolean flush(boolean)"
        ]
    },
    "org.apache.catalina.connector.OutputBuffer:void appendByteArray(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.OutputBuffer:void append(byte[],int,int)"
        ]
    },
    "org.apache.catalina.connector.OutputBuffer:void appendByteBuffer(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.OutputBuffer:void append(java.nio.ByteBuffer)"
        ]
    },
    "org.apache.catalina.connector.OutputBuffer:void flushByteBuffer()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.OutputBuffer:void doFlush(boolean)",
            "org.apache.catalina.connector.OutputBuffer:void writeBytes(byte[],int,int)",
            "org.apache.catalina.connector.OutputBuffer:void writeBytes(java.nio.ByteBuffer)",
            "org.apache.catalina.connector.OutputBuffer:void writeByte(int)",
            "org.apache.catalina.connector.OutputBuffer:void realWriteChars(java.nio.CharBuffer)",
            "org.apache.catalina.connector.OutputBuffer:void append(byte[],int,int)",
            "org.apache.catalina.connector.OutputBuffer:void append(java.nio.ByteBuffer)"
        ]
    },
    "org.apache.catalina.connector.Request:boolean authenticate(jakarta.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletRequestWrapper:boolean authenticate(jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.connector.RequestFacade:boolean authenticate(jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "jakarta.security.auth.message.config.AuthConfigFactory:jakarta.security.auth.message.config.AuthConfigFactory getFactory()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.AuthenticatorBase:java.util.Optional findJaspicProvider()"
        ]
    },
    "org.apache.catalina.core.ApplicationFilterChain:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpFilter:void doFilter(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.core.ApplicationDispatcher:void invoke(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,org.apache.catalina.core.ApplicationDispatcher$State)",
            "org.apache.catalina.core.StandardWrapperValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.filters.AddDefaultCharsetFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.filters.CorsFilter:void handleSimpleCORS(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.filters.CorsFilter:void handleNonCORS(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.filters.CsrfPreventionFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.filters.ExpiresFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.filters.FailedRequestFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.filters.HttpHeaderSecurityFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.filters.RemoteCIDRFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.filters.RemoteIpFilter:void doFilter(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.filters.RemoteIpFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.filters.RequestDumperFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.filters.RequestFilter:void process(java.lang.String,jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.filters.RestCsrfPreventionFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.filters.SessionInitializerFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.filters.SetCharacterEncodingFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.filters.WebdavFixFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)"
        ]
    },
    "jakarta.servlet.ServletInputStream:int readLine(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.core.StandardServer:void await()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.Catalina:void await()",
            "org.apache.catalina.startup.Tomcat:void main(java.lang.String[])"
        ]
    },
    "org.apache.catalina.servlets.CGIServlet$HTTPHeaderInputStream:int read()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.StandardServer:void await()",
            "org.apache.catalina.servlets.CGIServlet$HTTPHeaderInputStream:int read()",
            "org.apache.catalina.servlets.DefaultServlet:void skip(java.io.InputStream,int)",
            "org.apache.catalina.webresources.AbstractArchiveResource$JarInputStreamWrapper:int read()",
            "org.apache.catalina.webresources.TrackedInputStream:int read()"
        ]
    },
    "org.apache.catalina.servlets.DefaultServlet:void skip(java.io.InputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.DefaultServlet:java.nio.charset.Charset processBom(java.io.InputStream)"
        ]
    },
    "org.apache.catalina.webresources.AbstractArchiveResource$JarInputStreamWrapper:int read()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.StandardServer:void await()",
            "org.apache.catalina.servlets.CGIServlet$HTTPHeaderInputStream:int read()",
            "org.apache.catalina.servlets.DefaultServlet:void skip(java.io.InputStream,int)",
            "org.apache.catalina.webresources.AbstractArchiveResource$JarInputStreamWrapper:int read()",
            "org.apache.catalina.webresources.TrackedInputStream:int read()"
        ]
    },
    "org.apache.catalina.webresources.TrackedInputStream:int read()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.StandardServer:void await()",
            "org.apache.catalina.servlets.CGIServlet$HTTPHeaderInputStream:int read()",
            "org.apache.catalina.servlets.DefaultServlet:void skip(java.io.InputStream,int)",
            "org.apache.catalina.webresources.AbstractArchiveResource$JarInputStreamWrapper:int read()",
            "org.apache.catalina.webresources.TrackedInputStream:int read()"
        ]
    },
    "jakarta.servlet.http.HttpUtils:java.util.Hashtable parsePostData(int,jakarta.servlet.ServletInputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.connector.CoyoteInputStream:int read(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.FormAuthenticator:boolean restoreRequest(org.apache.catalina.connector.Request,org.apache.catalina.Session)",
            "org.apache.catalina.authenticator.FormAuthenticator:void saveRequest(org.apache.catalina.connector.Request,org.apache.catalina.Session)",
            "org.apache.catalina.loader.WebappClassLoaderBase:java.io.InputStream getResourceAsStream(java.lang.String)",
            "org.apache.catalina.servlets.CGIServlet$CGIRunner:void run()",
            "org.apache.catalina.servlets.DefaultServlet:java.nio.charset.Charset processBom(java.io.InputStream)",
            "org.apache.catalina.servlets.DefaultServlet:java.io.IOException copyRange(java.io.InputStream,jakarta.servlet.ServletOutputStream)",
            "org.apache.catalina.servlets.DefaultServlet:java.io.IOException copyRange(java.io.InputStream,jakarta.servlet.ServletOutputStream,long,long)",
            "org.apache.catalina.startup.ExpandWar:void expand(java.io.InputStream,java.io.File)",
            "org.apache.catalina.util.IOTools:void flow(java.io.InputStream,java.io.OutputStream)",
            "org.apache.catalina.webresources.AbstractArchiveResource$JarInputStreamWrapper:int read(byte[])",
            "org.apache.catalina.webresources.TrackedInputStream:int read(byte[])",
            "org.apache.tomcat.util.http.fileupload.IOUtils:long copyLarge(java.io.InputStream,java.io.OutputStream)",
            "org.apache.tomcat.util.http.fileupload.util.Streams:long copy(java.io.InputStream,java.io.OutputStream,boolean,byte[])",
            "org.apache.tomcat.util.security.KeyStoreUtil:void load(java.security.KeyStore,java.io.InputStream,char[])"
        ]
    },
    "org.apache.catalina.connector.Request:int readPostBody(byte[],int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.Request:void parseParameters()"
        ]
    },
    "org.apache.catalina.loader.WebappClassLoaderBase:void clearReferencesJdbc()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.loader.WebappClassLoaderBase:void clearReferences()"
        ]
    },
    "org.apache.catalina.util.IOTools:int readFully(java.io.InputStream,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.DefaultServlet:javax.xml.transform.Source findXsltSource(org.apache.catalina.WebResource)"
        ]
    },
    "org.apache.catalina.webresources.AbstractArchiveResource$JarInputStreamWrapper:int read(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.Request:int readPostBody(byte[],int)",
            "org.apache.catalina.connector.Request:byte[] readChunkedPostBody()",
            "org.apache.catalina.loader.WebappClassLoaderBase:void clearReferencesJdbc()",
            "org.apache.catalina.util.IOTools:int readFully(java.io.InputStream,byte[])",
            "org.apache.catalina.webresources.AbstractArchiveResource$JarInputStreamWrapper:int read(byte[],int,int)",
            "org.apache.catalina.webresources.AbstractArchiveResource:byte[] getContent()",
            "org.apache.catalina.webresources.TrackedInputStream:int read(byte[],int,int)",
            "org.apache.tomcat.util.http.fileupload.ByteArrayOutputStream:int write(java.io.InputStream)",
            "org.apache.tomcat.util.http.fileupload.IOUtils:int read(java.io.InputStream,byte[],int,int)",
            "org.apache.tomcat.util.http.fileupload.MultipartStream$ItemInputStream:int makeAvailable()",
            "org.apache.tomcat.util.http.fileupload.MultipartStream:byte readByte()"
        ]
    },
    "org.apache.catalina.webresources.TrackedInputStream:int read(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.Request:int readPostBody(byte[],int)",
            "org.apache.catalina.connector.Request:byte[] readChunkedPostBody()",
            "org.apache.catalina.loader.WebappClassLoaderBase:void clearReferencesJdbc()",
            "org.apache.catalina.util.IOTools:int readFully(java.io.InputStream,byte[])",
            "org.apache.catalina.webresources.AbstractArchiveResource$JarInputStreamWrapper:int read(byte[],int,int)",
            "org.apache.catalina.webresources.TrackedInputStream:int read(byte[],int,int)",
            "org.apache.tomcat.util.http.fileupload.ByteArrayOutputStream:int write(java.io.InputStream)",
            "org.apache.tomcat.util.http.fileupload.IOUtils:int read(java.io.InputStream,byte[],int,int)",
            "org.apache.tomcat.util.http.fileupload.MultipartStream$ItemInputStream:int makeAvailable()",
            "org.apache.tomcat.util.http.fileupload.MultipartStream:byte readByte()"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.ByteArrayOutputStream:int write(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tomcat.util.http.fileupload.IOUtils:int read(java.io.InputStream,byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.IOUtils:void readFully(java.io.InputStream,byte[],int,int)"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.MultipartStream$ItemInputStream:int makeAvailable()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.MultipartStream$ItemInputStream:int read()",
            "org.apache.tomcat.util.http.fileupload.MultipartStream$ItemInputStream:int read(byte[],int,int)",
            "org.apache.tomcat.util.http.fileupload.MultipartStream$ItemInputStream:void close(boolean)",
            "org.apache.tomcat.util.http.fileupload.MultipartStream$ItemInputStream:long skip(long)"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.MultipartStream:byte readByte()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.MultipartStream:boolean readBoundary()",
            "org.apache.tomcat.util.http.fileupload.MultipartStream:java.lang.String readHeaders()"
        ]
    },
    "org.apache.catalina.authenticator.AuthenticatorBase:boolean checkForCachedAuthentication(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.AuthenticatorBase:boolean authenticateJaspic(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,org.apache.catalina.authenticator.AuthenticatorBase$JaspicState,boolean)",
            "org.apache.catalina.authenticator.BasicAuthenticator:boolean doAuthenticate(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.authenticator.DigestAuthenticator:boolean doAuthenticate(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.authenticator.FormAuthenticator:boolean doAuthenticate(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.authenticator.NonLoginAuthenticator:boolean doAuthenticate(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.authenticator.SSLAuthenticator:boolean doAuthenticate(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.authenticator.SpnegoAuthenticator:boolean doAuthenticate(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.authenticator.AuthenticatorBase:void login(java.lang.String,java.lang.String,org.apache.catalina.connector.Request)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.Request:void login(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.catalina.authenticator.AuthenticatorBase:void logout(org.apache.catalina.connector.Request)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.Request:void logout()"
        ]
    },
    "org.apache.catalina.authenticator.BasicAuthenticator:boolean doAuthenticate(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.AuthenticatorBase:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.authenticator.AuthenticatorBase:boolean authenticate(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.authenticator.SpnegoAuthenticator:boolean doAuthenticate(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.AuthenticatorBase:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.authenticator.AuthenticatorBase:boolean authenticate(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.connector.RequestFacade$GetAttributePrivilegedAction:java.lang.Object run()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.security.auth.message.config.AuthConfigFactory:java.lang.String getFactoryClassName()",
            "jakarta.servlet.http.Cookie:void <clinit>()",
            "org.apache.catalina.connector.RequestFacade:java.util.Enumeration getAttributeNames()",
            "org.apache.catalina.startup.ClassLoaderFactory:java.lang.ClassLoader createClassLoader(java.io.File[],java.io.File[],java.lang.ClassLoader)",
            "org.apache.catalina.startup.ClassLoaderFactory:java.lang.ClassLoader createClassLoader(java.util.List,java.lang.ClassLoader)",
            "org.apache.catalina.util.Introspection:java.lang.reflect.Field[] getDeclaredFields(java.lang.Class)",
            "org.apache.catalina.util.Introspection:java.lang.reflect.Method[] getDeclaredMethods(java.lang.Class)",
            "org.apache.juli.ClassLoaderLogManager:boolean addLogger(java.util.logging.Logger)",
            "org.apache.juli.ClassLoaderLogManager:org.apache.juli.ClassLoaderLogManager$ClassLoaderLogInfo getClassLoaderInfo(java.lang.ClassLoader)",
            "org.apache.juli.ClassLoaderLogManager:void doSetParentLogger(java.util.logging.Logger,java.util.logging.Logger)",
            "org.apache.juli.FileHandler$1:java.lang.Thread newThread(java.lang.Runnable)",
            "org.apache.naming.factory.MailSessionFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.naming.factory.SendMailFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.tomcat.util.compat.JrePlatform:void <clinit>()"
        ]
    },
    "org.apache.catalina.core.ApplicationHttpRequest:java.util.Enumeration getAttributeNames()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletRequestWrapper:java.util.Enumeration getAttributeNames()",
            "org.apache.catalina.core.ApplicationHttpRequest$AttributeNamesEnumerator:void <init>(org.apache.catalina.core.ApplicationHttpRequest)",
            "org.apache.catalina.core.ApplicationRequest:void setRequest(jakarta.servlet.ServletRequest)",
            "org.apache.catalina.servlets.CGIServlet:void printServletEnvironment(jakarta.servlet.http.HttpServletRequest)"
        ]
    },
    "org.apache.catalina.connector.RequestFacade$GetRequestDispatcherPrivilegedAction:java.lang.Object run()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.security.auth.message.config.AuthConfigFactory:java.lang.String getFactoryClassName()",
            "jakarta.servlet.http.Cookie:void <clinit>()",
            "org.apache.catalina.connector.RequestFacade:jakarta.servlet.RequestDispatcher getRequestDispatcher(java.lang.String)",
            "org.apache.catalina.startup.ClassLoaderFactory:java.lang.ClassLoader createClassLoader(java.io.File[],java.io.File[],java.lang.ClassLoader)",
            "org.apache.catalina.startup.ClassLoaderFactory:java.lang.ClassLoader createClassLoader(java.util.List,java.lang.ClassLoader)",
            "org.apache.catalina.util.Introspection:java.lang.reflect.Field[] getDeclaredFields(java.lang.Class)",
            "org.apache.catalina.util.Introspection:java.lang.reflect.Method[] getDeclaredMethods(java.lang.Class)",
            "org.apache.juli.ClassLoaderLogManager:boolean addLogger(java.util.logging.Logger)",
            "org.apache.juli.ClassLoaderLogManager:org.apache.juli.ClassLoaderLogManager$ClassLoaderLogInfo getClassLoaderInfo(java.lang.ClassLoader)",
            "org.apache.juli.ClassLoaderLogManager:void doSetParentLogger(java.util.logging.Logger,java.util.logging.Logger)",
            "org.apache.juli.FileHandler$1:java.lang.Thread newThread(java.lang.Runnable)",
            "org.apache.naming.factory.MailSessionFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.naming.factory.SendMailFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.tomcat.util.compat.JrePlatform:void <clinit>()"
        ]
    },
    "org.apache.catalina.authenticator.FormAuthenticator:void forwardToLoginPage(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.descriptor.web.LoginConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.FormAuthenticator:boolean doAuthenticate(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.authenticator.FormAuthenticator:void forwardToErrorPage(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.descriptor.web.LoginConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.FormAuthenticator:boolean doAuthenticate(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.core.StandardHostValve:boolean custom(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,org.apache.tomcat.util.descriptor.web.ErrorPage)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.StandardHostValve:void status(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.core.StandardHostValve:void throwable(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,java.lang.Throwable)"
        ]
    },
    "org.apache.catalina.manager.HTMLManagerServlet:void sslConnectorCiphers(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.res.StringManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.HTMLManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.manager.HTMLManagerServlet:void sslConnectorCerts(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.res.StringManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.HTMLManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.manager.HTMLManagerServlet:void sslConnectorTrustedCerts(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.res.StringManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.HTMLManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.core.ApplicationDispatcher$PrivilegedForward:java.lang.Void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationDispatcher$PrivilegedForward:java.lang.Object run()"
        ]
    },
    "org.apache.catalina.core.ApplicationDispatcher:void include(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.StandardHostValve:boolean custom(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,org.apache.tomcat.util.descriptor.web.ErrorPage)",
            "org.apache.catalina.manager.HTMLManagerServlet:void displaySessionsListPage(org.apache.catalina.util.ContextName,jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.HTMLManagerServlet:void displaySessionDetailPage(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.catalina.util.ContextName,java.lang.String,org.apache.tomcat.util.res.StringManager)"
        ]
    },
    "org.apache.catalina.core.ApplicationDispatcher:void access$100(org.apache.catalina.core.ApplicationDispatcher,jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationDispatcher$PrivilegedInclude:java.lang.Void run()"
        ]
    },
    "org.apache.catalina.core.ApplicationDispatcher:void dispatch(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.AsyncContextImpl$AsyncRunnable:void run()"
        ]
    },
    "org.apache.catalina.core.ApplicationDispatcher:void access$200(org.apache.catalina.core.ApplicationDispatcher,jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationDispatcher$PrivilegedDispatch:java.lang.Void run()"
        ]
    },
    "org.apache.catalina.core.ApplicationHttpRequest$AttributeNamesEnumerator:java.lang.Object nextElement()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServlet:void doTrace(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.authenticator.FormAuthenticator:void saveRequest(org.apache.catalina.connector.Request,org.apache.catalina.Session)",
            "org.apache.catalina.connector.Request:java.util.Map getParameterMap()",
            "org.apache.catalina.connector.Request:void parseLocales()",
            "org.apache.catalina.connector.Response:java.util.Collection getHeaders(java.lang.String)",
            "org.apache.catalina.core.ApplicationHttpRequest$AttributeNamesEnumerator:java.lang.String findNext()",
            "org.apache.catalina.core.ApplicationHttpRequest:void mergeParameters()",
            "org.apache.catalina.core.ApplicationPushBuilder:void <init>(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.core.ApplicationRequest:void setRequest(jakarta.servlet.ServletRequest)",
            "org.apache.catalina.filters.ExpiresFilter:void init(jakarta.servlet.FilterConfig)",
            "org.apache.catalina.filters.FilterBase:void init(jakarta.servlet.FilterConfig)",
            "org.apache.catalina.filters.RemoteIpFilter$XForwardedRequest:void <init>(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.filters.RemoteIpFilter:void doFilter(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.filters.RequestDumperFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.loader.JdbcLeakPrevention:java.util.List clearJdbcDriverRegistrations()",
            "org.apache.catalina.loader.WebappClassLoaderBase$CombinedEnumeration:java.net.URL nextElement()",
            "org.apache.catalina.loader.WebappClassLoaderBase:java.util.Enumeration findResources(java.lang.String)",
            "org.apache.catalina.manager.StatusManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.StatusTransformer:void writeConnectorState(java.io.PrintWriter,javax.management.ObjectName,java.lang.String,javax.management.MBeanServer,java.util.Vector,java.util.Vector,int,java.lang.Object[])",
            "org.apache.catalina.manager.util.SessionUtils:java.util.Locale guessLocaleFromSession(jakarta.servlet.http.HttpSession)",
            "org.apache.catalina.manager.util.SessionUtils:java.lang.Object guessUserFromSession(org.apache.catalina.Session)",
            "org.apache.catalina.servlets.CGIServlet$CGIEnvironment:boolean setCGIEnvironment(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.servlets.CGIServlet$CGIRunner:java.lang.String[] hashToStringArray(java.util.Hashtable)",
            "org.apache.catalina.servlets.CGIServlet:void init(jakarta.servlet.ServletConfig)",
            "org.apache.catalina.servlets.CGIServlet:void printServletEnvironment(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.servlets.DefaultServlet:org.apache.catalina.servlets.DefaultServlet$PrecompressedResource getBestPrecompressedResource(jakarta.servlet.http.HttpServletRequest,java.util.List)",
            "org.apache.catalina.servlets.WebdavServlet$LockInfo:java.lang.String toString()",
            "org.apache.catalina.servlets.WebdavServlet$LockInfo:void toXML(org.apache.catalina.util.XMLWriter)",
            "org.apache.catalina.servlets.WebdavServlet:void doPropfind(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.WebdavServlet:void doLock(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.WebdavServlet:void doUnlock(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.WebdavServlet:boolean isLocked(java.lang.String,java.lang.String)",
            "org.apache.catalina.servlets.WebdavServlet:boolean copyResource(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.WebdavServlet:void sendReport(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,java.util.Hashtable)",
            "org.apache.catalina.servlets.WebdavServlet:void generatePropFindResponse(org.apache.catalina.util.XMLWriter,java.lang.String,java.lang.String,int,java.util.Vector,boolean,boolean,long,long,long,java.lang.String,java.lang.String)",
            "org.apache.catalina.servlets.WebdavServlet:boolean generateLockDiscovery(java.lang.String,org.apache.catalina.util.XMLWriter)",
            "org.apache.catalina.session.ManagerBase:java.util.HashMap getSession(java.lang.String)",
            "org.apache.catalina.startup.CatalinaProperties:void loadProperties()",
            "org.apache.catalina.startup.ExpandWar:java.lang.String expand(org.apache.catalina.Host,java.net.URL,java.lang.String)",
            "org.apache.catalina.startup.ExpandWar:void validate(org.apache.catalina.Host,java.net.URL,java.lang.String)",
            "org.apache.catalina.startup.UserConfig:void deploy()",
            "org.apache.catalina.startup.WebappServiceLoader:java.util.List load(java.lang.Class)",
            "org.apache.catalina.valves.AbstractAccessLogValve$HeaderElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.CrawlerSessionManagerValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.RemoteIpValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.webresources.AbstractSingleArchiveResourceSet:java.util.Map getArchiveEntries(boolean)",
            "org.apache.catalina.webresources.JarContents:void <init>(java.util.jar.JarFile)",
            "org.apache.coyote.CompressionConfig:boolean useCompression(org.apache.coyote.Request,org.apache.coyote.Response)",
            "org.apache.coyote.http2.Http2Protocol:boolean accept(org.apache.coyote.Request)",
            "org.apache.naming.AbstractRef:java.lang.String toString()",
            "org.apache.naming.NamingContext:void <init>(java.util.Hashtable,java.lang.String,java.util.HashMap)",
            "org.apache.naming.factory.BeanFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.naming.factory.MailSessionFactory:jakarta.mail.Session lambda$getObjectInstance$0(javax.naming.Reference)",
            "org.apache.naming.factory.SendMailFactory:jakarta.mail.internet.MimePartDataSource lambda$getObjectInstance$0(javax.naming.Reference)",
            "org.apache.naming.factory.webservices.ServiceRefFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.tomcat.util.http.MimeHeaders:java.lang.String toString()",
            "org.apache.tomcat.util.http.ResponseUtil$HeaderAdapter:java.util.Collection getHeaders(java.lang.String)",
            "org.apache.tomcat.util.http.parser.TokenList:boolean parseTokenList(java.util.Enumeration,java.util.Collection)",
            "org.apache.tomcat.util.http.parser.Upgrade:java.util.List parse(java.util.Enumeration)",
            "org.apache.tomcat.util.modeler.modules.MbeansDescriptorsIntrospectionSource:org.apache.tomcat.util.modeler.ManagedBean createManagedBean(org.apache.tomcat.util.modeler.Registry,java.lang.String,java.lang.Class,java.lang.String)",
            "org.apache.tomcat.util.net.AbstractEndpoint:java.net.InetSocketAddress getUnlockAddress(java.net.InetSocketAddress)",
            "org.apache.tomcat.util.net.SSLUtilBase:javax.net.ssl.KeyManager[] getKeyManagers()",
            "org.apache.tomcat.util.net.SSLUtilBase:void checkTrustStoreEntries(java.security.KeyStore)",
            "org.apache.tomcat.util.res.StringManager:org.apache.tomcat.util.res.StringManager getManager(java.lang.String,java.util.Enumeration)",
            "org.apache.tomcat.util.scan.JarFileUrlJar:void nextEntry()"
        ]
    },
    "org.apache.catalina.core.ApplicationFilterChain:java.lang.Void lambda$doFilter$0(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationFilterChain$lambda_doFilter_0__7:java.lang.Object run()"
        ]
    },
    "jakarta.servlet.http.HttpServlet:void doHead(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServlet:void service(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "jakarta.servlet.http.HttpServlet:void service(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServlet:void service(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)",
            "org.apache.catalina.servlets.CGIServlet:void service(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.DefaultServlet:void service(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.servlets.CGIServlet:void service(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServlet:void service(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)"
        ]
    },
    "org.apache.catalina.servlets.DefaultServlet:void doPut(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServlet:void service(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.WebdavServlet:void doPut(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.servlets.DefaultServlet:void doDelete(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServlet:void service(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.servlets.DefaultServlet:void service(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServlet:void service(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)",
            "org.apache.catalina.servlets.WebdavServlet:void service(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.servlets.DefaultServlet:void doPost(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServlet:void service(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.servlets.WebdavServlet:void service(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServlet:void service(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)"
        ]
    },
    "org.apache.catalina.servlets.WebdavServlet:void doPropfind(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.WebdavServlet:void service(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.servlets.WebdavServlet:void doMkcol(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.WebdavServlet:void service(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.servlets.WebdavServlet:void doPut(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServlet:void service(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.servlets.WebdavServlet:void doMove(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.WebdavServlet:void service(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.servlets.WebdavServlet:void doUnlock(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.WebdavServlet:void service(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.servlets.WebdavServlet:boolean isLocked(jakarta.servlet.http.HttpServletRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.WebdavServlet:void doProppatch(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.WebdavServlet:void doMkcol(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.WebdavServlet:void doDelete(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.WebdavServlet:void doPut(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.WebdavServlet:void doMove(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.WebdavServlet:void doLock(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.WebdavServlet:void doUnlock(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.servlets.WebdavServlet:boolean copyResource(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.WebdavServlet:void doCopy(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.WebdavServlet:void doMove(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.servlets.WebdavServlet:boolean deleteResource(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.WebdavServlet:void doDelete(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.servlets.WebdavServlet:void parseLockNullProperties(jakarta.servlet.http.HttpServletRequest,org.apache.catalina.util.XMLWriter,java.lang.String,int,java.util.Vector)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.WebdavServlet:void doPropfind(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.servlets.WebdavServlet:java.lang.String determineMethodsAllowed(jakarta.servlet.http.HttpServletRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.DefaultServlet:void doOptions(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.DefaultServlet:void sendNotAllowed(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.WebdavServlet:void doOptions(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.connector.CoyoteAdapter:void log(org.apache.coyote.Request,org.apache.coyote.Response,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.CoyoteAdapter:boolean asyncDispatch(org.apache.coyote.Request,org.apache.coyote.Response,org.apache.tomcat.util.net.SocketEvent)",
            "org.apache.catalina.connector.CoyoteAdapter:void checkRecycled(org.apache.coyote.Request,org.apache.coyote.Response)",
            "org.apache.coyote.AbstractProcessor:void logAccess(org.apache.tomcat.util.net.SocketWrapperBase)",
            "org.apache.coyote.ajp.AjpProcessor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState service(org.apache.tomcat.util.net.SocketWrapperBase)",
            "org.apache.coyote.ajp.AjpProcessor:void prepareRequest()",
            "org.apache.coyote.http11.Http11Processor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState service(org.apache.tomcat.util.net.SocketWrapperBase)",
            "org.apache.coyote.http11.Http11Processor:void prepareRequest()"
        ]
    },
    "org.apache.catalina.valves.rewrite.Substitution:java.lang.String evaluateSubstitution(org.apache.catalina.valves.rewrite.Substitution$SubstitutionElement[],java.util.regex.Matcher,java.util.regex.Matcher,org.apache.catalina.valves.rewrite.Resolver)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.valves.rewrite.Substitution:java.lang.String evaluate(java.util.regex.Matcher,java.util.regex.Matcher,org.apache.catalina.valves.rewrite.Resolver)",
            "org.apache.catalina.valves.rewrite.Substitution:java.lang.String access$100(org.apache.catalina.valves.rewrite.Substitution,org.apache.catalina.valves.rewrite.Substitution$SubstitutionElement[],java.util.regex.Matcher,java.util.regex.Matcher,org.apache.catalina.valves.rewrite.Resolver)"
        ]
    },
    "jakarta.servlet.http.HttpServletRequestWrapper:java.util.Collection getParts()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletRequestWrapper:java.util.Collection getParts()"
        ]
    },
    "org.apache.catalina.connector.Request:jakarta.servlet.http.Part getPart(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletRequestWrapper:jakarta.servlet.http.Part getPart(java.lang.String)",
            "org.apache.catalina.connector.RequestFacade:jakarta.servlet.http.Part getPart(java.lang.String)",
            "org.apache.catalina.manager.HTMLManagerServlet:java.lang.String upload(jakarta.servlet.http.HttpServletRequest,org.apache.tomcat.util.res.StringManager)"
        ]
    },
    "org.apache.catalina.connector.RequestFacade:java.util.Collection getParts()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletRequestWrapper:java.util.Collection getParts()"
        ]
    },
    "jakarta.servlet.ServletRequestWrapper:java.lang.String getParameter(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletRequestWrapper:java.lang.String getParameter(java.lang.String)",
            "org.apache.catalina.filters.CsrfPreventionFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.filters.FailedRequestFilter:boolean isGoodRequest(jakarta.servlet.ServletRequest)",
            "org.apache.catalina.manager.HTMLManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.HTMLManagerServlet:void doPost(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.HTMLManagerServlet:java.lang.String expireSessions(org.apache.catalina.util.ContextName,jakarta.servlet.http.HttpServletRequest,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.HTMLManagerServlet:void doSessions(org.apache.catalina.util.ContextName,jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.HTMLManagerServlet:void displaySessionsListPage(org.apache.catalina.util.ContextName,jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.JMXProxyServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.ManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.ManagerServlet:void doPut(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.ManagerServlet:void expireSessions(java.io.PrintWriter,org.apache.catalina.util.ContextName,jakarta.servlet.http.HttpServletRequest,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.StatusManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.host.HTMLHostManagerServlet:void doPost(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.host.HostManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.host.HostManagerServlet:void add(jakarta.servlet.http.HttpServletRequest,java.io.PrintWriter,java.lang.String,boolean,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.host.HostManagerServlet:boolean booleanParameter(jakarta.servlet.http.HttpServletRequest,java.lang.String,boolean,boolean)"
        ]
    },
    "org.apache.catalina.connector.RequestFacade$GetParameterPrivilegedAction:java.lang.String run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.RequestFacade$GetParameterPrivilegedAction:java.lang.Object run()"
        ]
    },
    "org.apache.catalina.connector.RequestFacade:java.lang.String getParameter(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletRequestWrapper:java.lang.String getParameter(java.lang.String)",
            "org.apache.catalina.filters.CsrfPreventionFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.filters.FailedRequestFilter:boolean isGoodRequest(jakarta.servlet.ServletRequest)",
            "org.apache.catalina.manager.HTMLManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.HTMLManagerServlet:void doPost(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.HTMLManagerServlet:java.lang.String expireSessions(org.apache.catalina.util.ContextName,jakarta.servlet.http.HttpServletRequest,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.HTMLManagerServlet:void doSessions(org.apache.catalina.util.ContextName,jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.HTMLManagerServlet:void displaySessionsListPage(org.apache.catalina.util.ContextName,jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.JMXProxyServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.ManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.ManagerServlet:void doPut(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.ManagerServlet:void expireSessions(java.io.PrintWriter,org.apache.catalina.util.ContextName,jakarta.servlet.http.HttpServletRequest,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.StatusManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.host.HTMLHostManagerServlet:void doPost(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.host.HostManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.host.HostManagerServlet:void add(jakarta.servlet.http.HttpServletRequest,java.io.PrintWriter,java.lang.String,boolean,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.host.HostManagerServlet:boolean booleanParameter(jakarta.servlet.http.HttpServletRequest,java.lang.String,boolean,boolean)"
        ]
    },
    "org.apache.catalina.filters.CsrfPreventionFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationFilterChain:void internalDoFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)"
        ]
    },
    "org.apache.catalina.manager.HTMLManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServlet:void doHead(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "jakarta.servlet.http.HttpServlet:void service(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.HTMLManagerServlet:void doPost(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.manager.HTMLManagerServlet:void doPost(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServlet:void service(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.manager.HTMLManagerServlet:java.lang.String expireSessions(org.apache.catalina.util.ContextName,jakarta.servlet.http.HttpServletRequest,org.apache.tomcat.util.res.StringManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.HTMLManagerServlet:void doPost(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.manager.HTMLManagerServlet:void doSessions(org.apache.catalina.util.ContextName,jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.res.StringManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.HTMLManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.manager.HTMLManagerServlet:void displaySessionsListPage(org.apache.catalina.util.ContextName,jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.res.StringManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.HTMLManagerServlet:void doSessions(org.apache.catalina.util.ContextName,jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.res.StringManager)"
        ]
    },
    "org.apache.catalina.manager.JMXProxyServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServlet:void doHead(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "jakarta.servlet.http.HttpServlet:void service(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.manager.ManagerServlet:void expireSessions(java.io.PrintWriter,org.apache.catalina.util.ContextName,jakarta.servlet.http.HttpServletRequest,org.apache.tomcat.util.res.StringManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.ManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.manager.StatusManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServlet:void doHead(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "jakarta.servlet.http.HttpServlet:void service(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.manager.host.HTMLHostManagerServlet:void doPost(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServlet:void service(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.manager.host.HostManagerServlet:void add(jakarta.servlet.http.HttpServletRequest,java.io.PrintWriter,java.lang.String,boolean,org.apache.tomcat.util.res.StringManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.host.HTMLHostManagerServlet:java.lang.String add(jakarta.servlet.http.HttpServletRequest,java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.host.HostManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.manager.host.HostManagerServlet:boolean booleanParameter(jakarta.servlet.http.HttpServletRequest,java.lang.String,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.host.HostManagerServlet:void add(jakarta.servlet.http.HttpServletRequest,java.io.PrintWriter,java.lang.String,boolean,org.apache.tomcat.util.res.StringManager)"
        ]
    },
    "org.apache.catalina.valves.ExtendedAccessLogValve$RequestParameterElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.valves.AbstractAccessLogValve:void log(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)"
        ]
    },
    "jakarta.servlet.ServletRequestWrapper:java.util.Enumeration getParameterNames()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletRequestWrapper:java.util.Enumeration getParameterNames()",
            "org.apache.catalina.filters.RequestDumperFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.servlets.CGIServlet:void printServletEnvironment(jakarta.servlet.http.HttpServletRequest)"
        ]
    },
    "org.apache.catalina.connector.Request:java.util.Map getParameterMap()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletRequestWrapper:java.util.Map getParameterMap()",
            "org.apache.catalina.connector.RequestFacade$GetParameterMapPrivilegedAction:java.util.Map run()",
            "org.apache.catalina.connector.RequestFacade:java.util.Map getParameterMap()",
            "org.apache.catalina.core.ApplicationHttpRequest:void parseParameters()"
        ]
    },
    "org.apache.catalina.connector.RequestFacade$GetParameterNamesPrivilegedAction:java.util.Enumeration run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.RequestFacade$GetParameterNamesPrivilegedAction:java.lang.Object run()"
        ]
    },
    "org.apache.catalina.connector.RequestFacade:java.util.Enumeration getParameterNames()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletRequestWrapper:java.util.Enumeration getParameterNames()",
            "org.apache.catalina.filters.RequestDumperFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.servlets.CGIServlet:void printServletEnvironment(jakarta.servlet.http.HttpServletRequest)"
        ]
    },
    "jakarta.servlet.ServletRequestWrapper:java.lang.String[] getParameterValues(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletRequestWrapper:java.lang.String[] getParameterValues(java.lang.String)",
            "org.apache.catalina.filters.RequestDumperFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.manager.HTMLManagerServlet:void doSessions(org.apache.catalina.util.ContextName,jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.servlets.CGIServlet:void printServletEnvironment(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.filters.RestCsrfPreventionFilter$RestCsrfPreventionStrategy$getParameterValues__34:java.lang.Object getNonce(java.lang.Object,java.lang.String)"
        ]
    },
    "org.apache.catalina.connector.RequestFacade$GetParameterValuePrivilegedAction:java.lang.String[] run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.RequestFacade$GetParameterValuePrivilegedAction:java.lang.Object run()"
        ]
    },
    "org.apache.catalina.connector.RequestFacade:java.lang.String[] getParameterValues(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletRequestWrapper:java.lang.String[] getParameterValues(java.lang.String)",
            "org.apache.catalina.filters.RequestDumperFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.manager.HTMLManagerServlet:void doSessions(org.apache.catalina.util.ContextName,jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.servlets.CGIServlet:void printServletEnvironment(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.filters.RestCsrfPreventionFilter$RestCsrfPreventionStrategy$getParameterValues__34:java.lang.Object getNonce(java.lang.Object,java.lang.String)"
        ]
    },
    "org.apache.catalina.filters.RestCsrfPreventionFilter$RestCsrfPreventionStrategy$getParameterValues__34:java.lang.Object getNonce(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.RestCsrfPreventionFilter$FetchRequest:boolean apply(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.filters.RestCsrfPreventionFilter$StateChangingRequest:boolean apply(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.filters.RestCsrfPreventionFilter$StateChangingRequest:java.lang.String extractNonceFromRequest(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.filters.RestCsrfPreventionFilter$StateChangingRequest:java.lang.String extractNonceFromRequestParams(jakarta.servlet.http.HttpServletRequest)"
        ]
    },
    "jakarta.servlet.ServletRequestWrapper:jakarta.servlet.AsyncContext getAsyncContext()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletRequestWrapper:jakarta.servlet.AsyncContext getAsyncContext()",
            "org.apache.catalina.core.ApplicationDispatcher:void unwrapRequest(org.apache.catalina.core.ApplicationDispatcher$State)",
            "org.apache.catalina.core.ApplicationDispatcher:void unwrapResponse(org.apache.catalina.core.ApplicationDispatcher$State)"
        ]
    },
    "org.apache.catalina.connector.RequestFacade:jakarta.servlet.AsyncContext getAsyncContext()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletRequestWrapper:jakarta.servlet.AsyncContext getAsyncContext()",
            "org.apache.catalina.core.ApplicationDispatcher:void unwrapRequest(org.apache.catalina.core.ApplicationDispatcher$State)",
            "org.apache.catalina.core.ApplicationDispatcher:void unwrapResponse(org.apache.catalina.core.ApplicationDispatcher$State)"
        ]
    },
    "jakarta.servlet.ServletRequestWrapper:jakarta.servlet.AsyncContext startAsync()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletRequestWrapper:jakarta.servlet.AsyncContext startAsync()"
        ]
    },
    "org.apache.catalina.connector.RequestFacade:jakarta.servlet.AsyncContext startAsync()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletRequestWrapper:jakarta.servlet.AsyncContext startAsync()"
        ]
    },
    "jakarta.servlet.http.HttpServletRequestWrapper:java.util.Map getTrailerFields()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletRequestWrapper:java.util.Map getTrailerFields()"
        ]
    },
    "org.apache.catalina.connector.RequestFacade:java.util.Map getTrailerFields()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletRequestWrapper:java.util.Map getTrailerFields()"
        ]
    },
    "org.apache.catalina.connector.InputBuffer:long skip(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.CoyoteReader:long skip(long)"
        ]
    },
    "org.apache.catalina.connector.InputBuffer:boolean checkCharBufferEof()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.InputBuffer:int read()",
            "org.apache.catalina.connector.InputBuffer:int read(char[],int,int)"
        ]
    },
    "org.apache.catalina.connector.InputBuffer:int readByte()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.CoyoteInputStream$PrivilegedRead:java.lang.Integer run()",
            "org.apache.catalina.connector.CoyoteInputStream:int read()"
        ]
    },
    "org.apache.catalina.connector.InputBuffer:int read(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.CoyoteInputStream$PrivilegedReadArray:java.lang.Integer run()",
            "org.apache.catalina.connector.CoyoteInputStream:int read(byte[],int,int)"
        ]
    },
    "org.apache.catalina.connector.InputBuffer:int read(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.CoyoteInputStream$PrivilegedReadBuffer:java.lang.Integer run()",
            "org.apache.catalina.connector.CoyoteInputStream:int read(java.nio.ByteBuffer)"
        ]
    },
    "org.apache.tomcat.util.buf.ByteChunk:int subtract()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tomcat.util.buf.ByteChunk:byte subtractB()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.buf.B2CConverter:void convert(org.apache.tomcat.util.buf.ByteChunk,org.apache.tomcat.util.buf.CharChunk,boolean)"
        ]
    },
    "org.apache.tomcat.util.buf.ByteChunk:int subtract(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.buf.B2CConverter:void convert(org.apache.tomcat.util.buf.ByteChunk,org.apache.tomcat.util.buf.CharChunk,boolean)"
        ]
    },
    "org.apache.tomcat.util.buf.ByteChunk:int subtract(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.filters.SavedRequestInputFilter:int doRead(org.apache.tomcat.util.net.ApplicationBufferHandler)"
        ]
    },
    "org.apache.coyote.http2.Http2AsyncParser$FrameCompletionHandler:void completed(java.lang.Long,java.lang.Void)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2AsyncParser$FrameCompletionHandler:void completed(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.coyote.http2.Http2Parser:boolean readFrame(boolean,org.apache.coyote.http2.FrameType)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2Parser:boolean readFrame(boolean)",
            "org.apache.coyote.http2.Http2Parser:void readConnectionPreface(jakarta.servlet.http.WebConnection,org.apache.coyote.http2.Stream)"
        ]
    },
    "org.apache.catalina.startup.Catalina:void stopServer()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.juli.FileHandler:void publish(java.util.logging.LogRecord)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.juli.AsyncFileHandler:void publishInternal(java.util.logging.LogRecord)"
        ]
    },
    "org.apache.juli.FileHandler:void open()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.juli.AsyncFileHandler:void open()"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.Catalina:void stopServer(java.lang.String[])",
            "org.apache.juli.FileHandler:void openWriter()",
            "org.apache.naming.factory.LookupFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.tomcat.util.http.fileupload.IOUtils:void closeQuietly(java.io.Closeable)",
            "org.apache.tomcat.util.http.fileupload.ThresholdingOutputStream:void close()",
            "org.apache.tomcat.util.http.fileupload.util.Streams:long copy(java.io.InputStream,java.io.OutputStream,boolean,byte[])"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.FileUploadBase:java.util.List parseRequest(org.apache.tomcat.util.http.fileupload.RequestContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.Request:void parseParts(boolean)",
            "org.apache.tomcat.util.http.fileupload.FileUploadBase:java.util.Map parseParameterMap(org.apache.tomcat.util.http.fileupload.RequestContext)"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.util.Streams:long copy(java.io.InputStream,java.io.OutputStream,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.MultipartStream:int readBodyData(java.io.OutputStream)",
            "org.apache.tomcat.util.http.fileupload.util.Streams:java.lang.String asString(java.io.InputStream)",
            "org.apache.tomcat.util.http.fileupload.util.Streams:java.lang.String asString(java.io.InputStream,java.lang.String)"
        ]
    },
    "org.apache.catalina.manager.host.HTMLHostManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServlet:void doHead(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "jakarta.servlet.http.HttpServlet:void service(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.host.HTMLHostManagerServlet:void doPost(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.servlets.WebdavServlet:boolean deleteResource(java.lang.String,jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.WebdavServlet:void doMove(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.WebdavServlet:boolean copyResource(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.WebdavServlet:boolean deleteResource(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.users.MemoryUserDatabase:void close()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.users.MemoryUserDatabaseFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.naming.NamingContext:java.lang.Object lookup(javax.naming.Name,boolean)",
            "org.apache.naming.factory.FactoryBase:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.naming.factory.LookupFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)"
        ]
    },
    "org.apache.catalina.valves.AccessLogValve:void rotate()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.valves.AccessLogValve:void log(java.io.CharArrayWriter)"
        ]
    },
    "org.apache.catalina.valves.AccessLogValve:boolean rotate(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.valves.AccessLogValve:void log(java.io.CharArrayWriter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.valves.AbstractAccessLogValve:void log(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)"
        ]
    },
    "org.apache.catalina.valves.AccessLogValve:void stopInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void stop()"
        ]
    },
    "org.apache.juli.FileHandler:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.juli.AsyncFileHandler:void close()",
            "org.apache.juli.ClassLoaderLogManager:void resetLoggers(org.apache.juli.ClassLoaderLogManager$ClassLoaderLogInfo)"
        ]
    },
    "org.apache.naming.NamingContext:java.lang.Object lookup(javax.naming.Name)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.naming.NamingContext:void rename(javax.naming.Name,javax.naming.Name)",
            "org.apache.naming.NamingContext:java.lang.Object lookup(javax.naming.Name,boolean)",
            "org.apache.naming.NamingContextBindingsEnumeration:javax.naming.Binding nextElementInternal()",
            "org.apache.naming.SelectorContext:java.lang.Object lookup(javax.naming.Name)"
        ]
    },
    "org.apache.naming.NamingContext:java.lang.Object lookup(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.DefaultInstanceManager:void lookupFieldResource(javax.naming.Context,java.lang.Object,java.lang.reflect.Field,java.lang.String,java.lang.Class)",
            "org.apache.catalina.core.DefaultInstanceManager:void lookupMethodResource(javax.naming.Context,java.lang.Object,java.lang.reflect.Method,java.lang.String,java.lang.Class)",
            "org.apache.catalina.core.NamingContextListener:void addResource(org.apache.tomcat.util.descriptor.web.ContextResource)",
            "org.apache.catalina.core.NamingContextListener:void createSubcontexts(javax.naming.Context,java.lang.String)",
            "org.apache.catalina.deploy.NamingResourcesImpl:void cleanUp()",
            "org.apache.catalina.mbeans.GlobalResourcesLifecycleListener:void createMBeans(java.lang.String,javax.naming.Context)",
            "org.apache.catalina.realm.DataSourceRealm:java.sql.Connection open()",
            "org.apache.catalina.realm.UserDatabaseRealm:org.apache.catalina.UserDatabase getUserDatabase()",
            "org.apache.catalina.session.DataSourceStore:java.sql.Connection open()",
            "org.apache.naming.NamingContext:java.lang.Object lookup(javax.naming.Name,boolean)",
            "org.apache.naming.SelectorContext:java.lang.Object lookup(java.lang.String)",
            "org.apache.naming.factory.ResourceLinkFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)"
        ]
    },
    "org.apache.naming.NamingContext:java.lang.Object lookupLink(javax.naming.Name)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.naming.SelectorContext:java.lang.Object lookupLink(javax.naming.Name)"
        ]
    },
    "org.apache.naming.NamingContext:java.lang.Object lookupLink(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.naming.SelectorContext:java.lang.Object lookupLink(java.lang.String)"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.disk.DiskFileItem:java.lang.String getString(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationPart:java.lang.String getString(java.lang.String)"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.disk.DiskFileItem:java.lang.String getString()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.core.ApplicationPart:void write(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.HTMLManagerServlet:java.lang.String upload(jakarta.servlet.http.HttpServletRequest,org.apache.tomcat.util.res.StringManager)"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.impl.FileItemIteratorImpl:org.apache.tomcat.util.http.fileupload.MultipartStream getMultiPartStream()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.impl.FileItemIteratorImpl:boolean findNextItem()",
            "org.apache.tomcat.util.http.fileupload.impl.FileItemStreamImpl:void <init>(org.apache.tomcat.util.http.fileupload.impl.FileItemIteratorImpl,java.lang.String,java.lang.String,java.lang.String,boolean,long)"
        ]
    },
    "jakarta.servlet.http.NoBodyResponse:void setContentLength()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServlet:void doHead(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.connector.CoyoteWriter:boolean checkError()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.users.MemoryUserDatabase:void save()"
        ]
    },
    "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.NoBodyResponse:void setContentLength()",
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void flush()",
            "org.apache.catalina.filters.RemoteCIDRFilter:void sendErrorWhenNotHttp(jakarta.servlet.ServletResponse)",
            "org.apache.catalina.filters.RequestFilter:void sendErrorWhenNotHttp(jakarta.servlet.ServletResponse)",
            "org.apache.catalina.manager.HTMLManagerServlet:void list(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.ManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.ManagerServlet:void doPut(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.host.HTMLHostManagerServlet:void list(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.host.HostManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.DefaultServlet:void serveResource(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,boolean,java.lang.String)",
            "org.apache.catalina.servlets.DefaultServlet:java.io.InputStream renderHtml(jakarta.servlet.http.HttpServletRequest,java.lang.String,org.apache.catalina.WebResource,java.lang.String)",
            "org.apache.catalina.util.DOMWriter:void print(org.w3c.dom.Node)",
            "org.apache.catalina.valves.AccessLogValve:void backgroundProcess()",
            "org.apache.catalina.valves.AccessLogValve:void close(boolean)",
            "org.apache.catalina.valves.AccessLogValve:void log(java.io.CharArrayWriter)",
            "org.apache.catalina.webresources.TrackedInputStream:java.lang.String toString()",
            "org.apache.juli.FileHandler:void publish(java.util.logging.LogRecord)",
            "org.apache.juli.FileHandler:void closeWriter()",
            "org.apache.juli.FileHandler:void flush()"
        ]
    },
    "org.apache.catalina.filters.RemoteCIDRFilter:void sendErrorWhenNotHttp(jakarta.servlet.ServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.RemoteCIDRFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)"
        ]
    },
    "org.apache.catalina.filters.RequestFilter:void sendErrorWhenNotHttp(jakarta.servlet.ServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.RequestFilter:void process(java.lang.String,jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)"
        ]
    },
    "org.apache.catalina.servlets.DefaultServlet:java.io.InputStream renderHtml(jakarta.servlet.http.HttpServletRequest,java.lang.String,org.apache.catalina.WebResource,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.DefaultServlet:java.io.InputStream render(jakarta.servlet.http.HttpServletRequest,java.lang.String,org.apache.catalina.WebResource,java.lang.String)"
        ]
    },
    "org.apache.catalina.util.DOMWriter:void print(org.w3c.dom.Node)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.WebdavServlet:void doLock(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.util.DOMWriter:void print(org.w3c.dom.Node)",
            "org.apache.catalina.util.DOMWriter:void printChildren(org.w3c.dom.Node)"
        ]
    },
    "org.apache.catalina.valves.AccessLogValve:void backgroundProcess()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ContainerBase:void backgroundProcess()"
        ]
    },
    "org.apache.catalina.webresources.TrackedInputStream:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.Connector:java.lang.String createObjectNameKeyProperties(java.lang.String)",
            "org.apache.catalina.connector.Request$2:java.lang.Object get(org.apache.catalina.connector.Request,java.lang.String)",
            "org.apache.catalina.connector.Request:void setAttribute(java.lang.String,java.lang.Object)",
            "org.apache.catalina.core.ApplicationFilterFactory:org.apache.catalina.core.ApplicationFilterChain createFilterChain(jakarta.servlet.ServletRequest,org.apache.catalina.Wrapper,jakarta.servlet.Servlet)",
            "org.apache.catalina.core.ApplicationHttpRequest:java.lang.Object getAttribute(java.lang.String)",
            "org.apache.catalina.core.DefaultInstanceManager:void loadProperties(java.util.Set,java.lang.String,java.lang.String,org.apache.juli.logging.Log)",
            "org.apache.catalina.core.NamingContextListener:void addResourceLink(org.apache.tomcat.util.descriptor.web.ContextResourceLink)",
            "org.apache.catalina.loader.WebappClassLoaderBase:void checkThreadLocalMapForLeaks(java.lang.Object,java.lang.reflect.Field)",
            "org.apache.catalina.manager.JMXProxyServlet:void getAttribute(java.io.PrintWriter,java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.catalina.manager.JMXProxyServlet:void output(java.lang.String,java.io.PrintWriter,java.lang.Object)",
            "org.apache.catalina.manager.JspHelper:java.lang.String escapeXml(java.lang.Object)",
            "org.apache.catalina.mapper.MapperListener:void containerEvent(org.apache.catalina.ContainerEvent)",
            "org.apache.catalina.mbeans.MBeanDumper:java.lang.String valueToString(java.lang.Object)",
            "org.apache.catalina.realm.JNDIRealm:java.lang.String getAttributeValue(java.lang.String,javax.naming.directory.Attributes)",
            "org.apache.catalina.servlets.CGIServlet$CGIRunner:java.lang.String[] hashToStringArray(java.util.Hashtable)",
            "org.apache.catalina.session.ManagerBase:java.lang.String getSessionAttribute(java.lang.String,java.lang.String)",
            "org.apache.catalina.users.MemoryUserDatabaseFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.catalina.util.ToStringUtil:java.lang.String containedToString(java.lang.Object,java.lang.Object,java.lang.String)",
            "org.apache.catalina.valves.AbstractAccessLogValve$HostElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.AbstractAccessLogValve$LocalServerNameElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.AbstractAccessLogValve$PortElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.AbstractAccessLogValve$ProtocolElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.AbstractAccessLogValve$RemoteAddrElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.AbstractAccessLogValve$RequestAttributeElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.AbstractAccessLogValve$SessionAttributeElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.ExtendedAccessLogValve:java.lang.String wrap(java.lang.Object)",
            "org.apache.catalina.valves.rewrite.ResolverImpl:java.lang.String resolveEnv(java.lang.String)",
            "org.apache.catalina.webresources.StandardRoot:java.util.List getTrackedResources()",
            "org.apache.naming.ContextBindings:java.lang.String getThreadName()",
            "org.apache.naming.ContextBindings:java.lang.String getClassLoaderName()",
            "org.apache.naming.factory.DataSourceLinkFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.naming.factory.EjbFactory:java.lang.Object getLinked(javax.naming.Reference)",
            "org.apache.naming.factory.FactoryBase:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.naming.factory.LookupFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.naming.factory.OpenEjbFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.naming.factory.ResourceLinkFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.tomcat.util.descriptor.web.CallMethodMultiRule:void end(java.lang.String,java.lang.String)",
            "org.apache.tomcat.util.descriptor.web.WebXml:void appendElement(java.lang.StringBuilder,java.lang.String,java.lang.String,java.lang.Object)",
            "org.apache.tomcat.util.digester.CallMethodRule:void end(java.lang.String,java.lang.String)",
            "org.apache.tomcat.util.json.JSONParser:java.lang.String objectKey()",
            "org.apache.tomcat.util.modeler.BaseModelMBean:java.lang.String toString()",
            "org.apache.tomcat.util.net.AbstractEndpoint:java.lang.String getProperty(java.lang.String)",
            "org.apache.tomcat.util.security.Escape:java.lang.String htmlElementContent(java.lang.Object)"
        ]
    },
    "org.apache.juli.FileHandler:void flush()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jakarta.servlet.ServletResponseWrapper:void flushBuffer()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletResponseWrapper:void flushBuffer()",
            "jakarta.servlet.http.NoBodyOutputStream:void checkCommit()"
        ]
    },
    "jakarta.servlet.http.NoBodyOutputStream:void checkCommit()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.NoBodyOutputStream:void write(int)",
            "jakarta.servlet.http.NoBodyOutputStream:void write(byte[],int,int)"
        ]
    },
    "org.apache.catalina.connector.Response:void sendRedirect(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.FormAuthenticator:boolean doAuthenticate(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.connector.Response:void sendRedirect(java.lang.String)",
            "org.apache.catalina.realm.RealmBase:boolean hasUserDataPermission(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,org.apache.tomcat.util.descriptor.web.SecurityConstraint[])"
        ]
    },
    "org.apache.catalina.connector.ResponseFacade$FlushBufferPrivilegedAction:java.lang.Void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.ResponseFacade$FlushBufferPrivilegedAction:java.lang.Object run()"
        ]
    },
    "org.apache.catalina.connector.ResponseFacade:void flushBuffer()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletResponseWrapper:void flushBuffer()",
            "jakarta.servlet.http.NoBodyOutputStream:void checkCommit()"
        ]
    },
    "org.apache.catalina.connector.CoyoteOutputStream:void write(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream:void write(int)",
            "org.apache.catalina.startup.Catalina:void stopServer(java.lang.String[])",
            "org.apache.tomcat.util.http.fileupload.ThresholdingOutputStream:void write(int)",
            "org.apache.tomcat.util.http.fileupload.util.mime.QuotedPrintableDecoder:int decode(byte[],java.io.OutputStream)"
        ]
    },
    "org.apache.catalina.connector.CoyoteOutputStream:void write(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.CoyoteOutputStream:void write(byte[])",
            "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream:void write(byte[],int,int)",
            "org.apache.catalina.servlets.CGIServlet$CGIRunner:void run()",
            "org.apache.catalina.servlets.DefaultServlet:java.io.IOException copyRange(java.io.InputStream,jakarta.servlet.ServletOutputStream)",
            "org.apache.catalina.servlets.DefaultServlet:java.io.IOException copyRange(java.io.InputStream,jakarta.servlet.ServletOutputStream,long,long)",
            "org.apache.catalina.util.IOTools:void flow(java.io.InputStream,java.io.OutputStream)",
            "org.apache.tomcat.util.http.fileupload.ByteArrayOutputStream:void writeTo(java.io.OutputStream)",
            "org.apache.tomcat.util.http.fileupload.IOUtils:long copyLarge(java.io.InputStream,java.io.OutputStream)",
            "org.apache.tomcat.util.http.fileupload.ThresholdingOutputStream:void write(byte[],int,int)",
            "org.apache.tomcat.util.http.fileupload.util.Streams:long copy(java.io.InputStream,java.io.OutputStream,boolean,byte[])"
        ]
    },
    "org.apache.catalina.connector.CoyoteOutputStream:void write(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.connector.CoyoteOutputStream:boolean checkNonBlockingWrite()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.CoyoteOutputStream:void write(int)",
            "org.apache.catalina.connector.CoyoteOutputStream:void write(byte[],int,int)",
            "org.apache.catalina.connector.CoyoteOutputStream:void write(java.nio.ByteBuffer)",
            "org.apache.catalina.connector.CoyoteOutputStream:void flush()"
        ]
    },
    "org.apache.catalina.connector.CoyoteOutputStream:boolean isReady()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.coyote.http11.Http11Processor:void finishResponse()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProcessor:void action(org.apache.coyote.ActionCode,java.lang.Object)"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.util.mime.MimeUtility:java.lang.String decodeWord(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.util.mime.MimeUtility:java.lang.String decodeText(java.lang.String)"
        ]
    },
    "org.apache.catalina.manager.ManagerServlet:void uploadWar(java.io.PrintWriter,jakarta.servlet.http.HttpServletRequest,java.io.File,org.apache.tomcat.util.res.StringManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.ManagerServlet:void deploy(java.io.PrintWriter,java.lang.String,org.apache.catalina.util.ContextName,java.lang.String,boolean,jakarta.servlet.http.HttpServletRequest,org.apache.tomcat.util.res.StringManager)"
        ]
    },
    "org.apache.catalina.servlets.CGIServlet$CGIRunner:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.CGIServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.startup.HostConfig:void deployWAR(org.apache.catalina.util.ContextName,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.HostConfig$DeployWar:void run()",
            "org.apache.catalina.startup.HostConfig:void deployApps(java.lang.String)"
        ]
    },
    "org.apache.catalina.startup.Tomcat:org.apache.catalina.Context addWebapp(java.lang.String,java.net.URL)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.webresources.ExtractingRoot:void processWebInfLib()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.webresources.StandardRoot:void startInternal()"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream:void thresholdReached()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.ThresholdingOutputStream:void checkThreshold(int)"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.IOUtils:int copy(java.io.InputStream,java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.disk.DiskFileItem:void write(java.io.File)"
        ]
    },
    "org.apache.coyote.http2.Http2UpgradeHandler:void setting(org.apache.coyote.http2.Setting,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2AsyncUpgradeHandler:void setting(org.apache.coyote.http2.Setting,long)",
            "org.apache.coyote.http2.Http2Parser:void readSettingsFrame(int,int,java.nio.ByteBuffer)"
        ]
    },
    "org.apache.coyote.http2.Http2UpgradeHandler:void incrementWindowSize(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2AsyncUpgradeHandler:void incrementWindowSize(int,int)",
            "org.apache.coyote.http2.Http2Parser:void readWindowUpdateFrame(int,java.nio.ByteBuffer)"
        ]
    },
    "org.apache.coyote.http2.Http2UpgradeHandler:void incrementWindowSize(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2UpgradeHandler:void incrementWindowSize(int,int)"
        ]
    },
    "org.apache.coyote.http2.Stream:void receiveReset(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2UpgradeHandler:void close()",
            "org.apache.coyote.http2.Http2UpgradeHandler:void reset(int,long)"
        ]
    },
    "org.apache.coyote.http2.Stream:void close(org.apache.coyote.http2.Http2Exception)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2UpgradeHandler:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState upgradeDispatch(org.apache.tomcat.util.net.SocketEvent)",
            "org.apache.coyote.http2.Http2UpgradeHandler:void setting(org.apache.coyote.http2.Setting,long)",
            "org.apache.coyote.http2.StreamProcessor:void process(org.apache.tomcat.util.net.SocketEvent)"
        ]
    },
    "org.apache.coyote.http2.Http2AsyncParser$FrameCompletionHandler:void completed(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SecureNio2Channel$1:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$2:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$3:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$4:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void read(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void read(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SocketWrapperBase$VectoredIOCompletionHandler:void completed(java.lang.Long,org.apache.tomcat.util.net.SocketWrapperBase$OperationState)"
        ]
    },
    "org.apache.coyote.http2.Http2AsyncParser$PrefaceCompletionHandler:void completed(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SecureNio2Channel$1:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$2:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$3:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$4:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void read(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void read(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SocketWrapperBase$VectoredIOCompletionHandler:void completed(java.lang.Long,org.apache.tomcat.util.net.SocketWrapperBase$OperationState)"
        ]
    },
    "org.apache.coyote.http2.Http2AsyncParser$FrameCompletionHandler:void failed(java.lang.Throwable,java.lang.Void)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2AsyncParser$FrameCompletionHandler:void failed(java.lang.Throwable,java.lang.Object)"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:boolean isReadyForRead()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.upgrade.UpgradeServletInputStream:boolean isReady()",
            "org.apache.coyote.http11.upgrade.UpgradeServletInputStream:void onDataAvailable()"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:int read(boolean,byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.ajp.AjpProcessor:boolean read(byte[],int,int,boolean)",
            "org.apache.coyote.http11.upgrade.UpgradeServletInputStream:int read(byte[],int,int)",
            "org.apache.coyote.http11.upgrade.UpgradeServletInputStream:int readInternal()",
            "org.apache.coyote.http2.Http2UpgradeHandler:boolean fill(boolean,byte[],int,int)"
        ]
    },
    "org.apache.coyote.http2.Http2AsyncParser:void readConnectionPreface(jakarta.servlet.http.WebConnection,org.apache.coyote.http2.Stream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2UpgradeHandler:void init(jakarta.servlet.http.WebConnection)"
        ]
    },
    "org.apache.coyote.http2.Http2AsyncParser:boolean readFrame(boolean,org.apache.coyote.http2.FrameType)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2Parser:boolean readFrame(boolean)",
            "org.apache.coyote.http2.Http2Parser:void readConnectionPreface(jakarta.servlet.http.WebConnection,org.apache.coyote.http2.Stream)"
        ]
    },
    "org.apache.coyote.http2.Http2AsyncUpgradeHandler$AsyncPingManager:void sendPing(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2UpgradeHandler:void processConnection(jakarta.servlet.http.WebConnection,org.apache.coyote.http2.Stream)",
            "org.apache.coyote.http2.Http2UpgradeHandler:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState upgradeDispatch(org.apache.tomcat.util.net.SocketEvent)",
            "org.apache.coyote.http2.Http2UpgradeHandler:void processWrites()"
        ]
    },
    "org.apache.coyote.http2.Http2AsyncUpgradeHandler$AsyncPingManager:void receivePing(byte[],boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2UpgradeHandler:void pingReceive(byte[],boolean)"
        ]
    },
    "org.apache.coyote.http2.Http2AsyncUpgradeHandler:void writeSettings()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2UpgradeHandler:void init(jakarta.servlet.http.WebConnection)"
        ]
    },
    "org.apache.coyote.http2.Http2AsyncUpgradeHandler:void sendStreamReset(org.apache.coyote.http2.StreamException)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2UpgradeHandler:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState upgradeDispatch(org.apache.tomcat.util.net.SocketEvent)",
            "org.apache.coyote.http2.Stream:void close(org.apache.coyote.http2.Http2Exception)"
        ]
    },
    "org.apache.coyote.http2.Http2AsyncUpgradeHandler:void writeGoAwayFrame(int,long,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2UpgradeHandler:void pause()",
            "org.apache.coyote.http2.Http2UpgradeHandler:void checkPauseState()",
            "org.apache.coyote.http2.Http2UpgradeHandler:void closeConnection(org.apache.coyote.http2.Http2Exception)"
        ]
    },
    "org.apache.coyote.http2.Http2AsyncUpgradeHandler:void writeHeaders(org.apache.coyote.http2.Stream,int,org.apache.tomcat.util.http.MimeHeaders,boolean,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2UpgradeHandler:void push(org.apache.coyote.Request,org.apache.coyote.http2.Stream)",
            "org.apache.coyote.http2.Stream:void writeHeaders()",
            "org.apache.coyote.http2.Stream:void writeTrailers()",
            "org.apache.coyote.http2.Stream:void writeAck()"
        ]
    },
    "org.apache.coyote.http2.Http2AsyncUpgradeHandler:void writeBody(org.apache.coyote.http2.Stream,java.nio.ByteBuffer,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Stream$StreamOutputBuffer:boolean flush(boolean,boolean)"
        ]
    },
    "org.apache.coyote.http2.Http2AsyncUpgradeHandler:void writeWindowUpdate(org.apache.coyote.http2.AbstractNonZeroStream,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2UpgradeHandler:void onSwallowedDataFramePayload(int,int)",
            "org.apache.coyote.http2.Stream$StreamInputBuffer:int doRead(org.apache.tomcat.util.net.ApplicationBufferHandler)"
        ]
    },
    "org.apache.coyote.http2.Http2AsyncUpgradeHandler:void settingsEnd(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2Parser:void readSettingsFrame(int,int,java.nio.ByteBuffer)"
        ]
    },
    "org.apache.coyote.http2.Http2AsyncUpgradeHandler:org.apache.tomcat.util.net.SendfileState processSendfile(org.apache.coyote.http2.SendfileData)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.StreamProcessor:void finishResponse()"
        ]
    },
    "org.apache.catalina.core.ContainerBase$StopChild:java.lang.Object call()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.core.StandardEngine:org.apache.catalina.Realm getRealm()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.AuthenticatorBase:boolean reauthenticateFromSSO(java.lang.String,org.apache.catalina.connector.Request)",
            "org.apache.catalina.authenticator.jaspic.CallbackHandlerImpl:void handle(javax.security.auth.callback.Callback[])",
            "org.apache.catalina.core.ContainerBase:org.apache.catalina.Realm getRealm()",
            "org.apache.catalina.core.StandardEngine:void initInternal()"
        ]
    },
    "org.apache.catalina.mbeans.MBeanFactory:java.lang.String addRealmToParent(java.lang.String,org.apache.catalina.Realm)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.mbeans.MBeanFactory:java.lang.String createDataSourceRealm(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.catalina.mbeans.MBeanFactory:java.lang.String createJNDIRealm(java.lang.String)",
            "org.apache.catalina.mbeans.MBeanFactory:java.lang.String createMemoryRealm(java.lang.String)",
            "org.apache.catalina.mbeans.MBeanFactory:java.lang.String createUserDatabaseRealm(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.catalina.mbeans.MBeanFactory:void removeRealm(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.startup.Tomcat:org.apache.catalina.Engine getEngine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.Tomcat:void setHost(org.apache.catalina.Host)",
            "org.apache.catalina.startup.Tomcat:org.apache.catalina.Host getHost()"
        ]
    },
    "org.apache.catalina.core.ContainerBase:void destroyInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.StandardContext:void destroyInternal()",
            "org.apache.catalina.util.LifecycleBase:void destroy()"
        ]
    },
    "org.apache.catalina.core.StandardContext:void removeChild(org.apache.catalina.Container)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ContainerBase:void destroyInternal()",
            "org.apache.catalina.core.StandardContext:void addChild(org.apache.catalina.Container)",
            "org.apache.catalina.core.StandardContext:void resetContext()",
            "org.apache.catalina.mbeans.ContainerMBean:void removeChild(java.lang.String)",
            "org.apache.catalina.startup.ContextConfig:void configureStop()"
        ]
    },
    "org.apache.catalina.manager.host.HostManagerServlet:void remove(java.io.PrintWriter,java.lang.String,org.apache.tomcat.util.res.StringManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.host.HTMLHostManagerServlet:java.lang.String remove(java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.host.HostManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.mbeans.ContainerMBean:void removeChild(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.mbeans.MBeanFactory:void removeContext(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.mbeans.MBeanFactory:void removeHost(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.startup.HostConfig:void undeploy(org.apache.catalina.startup.HostConfig$DeployedApplication)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.HostConfig:void checkResources(org.apache.catalina.startup.HostConfig$DeployedApplication,boolean)",
            "org.apache.catalina.startup.HostConfig:void checkUndeploy()"
        ]
    },
    "org.apache.catalina.startup.HostConfig:void unmanageApp(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.core.StandardContext:void startInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void start()"
        ]
    },
    "org.apache.catalina.mbeans.MBeanFactory:java.lang.String createWebappLoader(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.mbeans.MBeanFactory:void removeLoader(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.mbeans.MBeanFactory:java.lang.String createStandardManager(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.mbeans.MBeanFactory:void removeManager(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.core.StandardContext:org.apache.catalina.deploy.NamingResourcesImpl getNamingResources()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.NamingContextListener:void lifecycleEvent(org.apache.catalina.LifecycleEvent)",
            "org.apache.catalina.core.StandardContext:org.apache.tomcat.InstanceManager createInstanceManager()",
            "org.apache.catalina.startup.ContextConfig:void configureContext(org.apache.tomcat.util.descriptor.web.WebXml)",
            "org.apache.catalina.startup.SetNextNamingRule:void end(java.lang.String,java.lang.String)",
            "org.apache.catalina.startup.WebAnnotationSet:void addResource(org.apache.catalina.Context,jakarta.'annotation'.Resource,java.lang.String,java.lang.Class)"
        ]
    },
    "org.apache.catalina.loader.WebappLoader:void backgroundProcess()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.StandardContext:void backgroundProcess()"
        ]
    },
    "org.apache.catalina.manager.ManagerServlet:void reload(java.io.PrintWriter,org.apache.catalina.util.ContextName,org.apache.tomcat.util.res.StringManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.HTMLManagerServlet:java.lang.String reload(org.apache.catalina.util.ContextName,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.ManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.startup.HostConfig:void reload(org.apache.catalina.startup.HostConfig$DeployedApplication,java.io.File,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.HostConfig:void checkResources(org.apache.catalina.startup.HostConfig$DeployedApplication,boolean)"
        ]
    },
    "org.apache.catalina.core.StandardContext:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.mbeans.MBeanFactory:java.lang.String createStandardContext(java.lang.String,java.lang.String,java.lang.String,boolean,boolean)",
            "org.apache.catalina.startup.Tomcat:org.apache.catalina.Context createContext(org.apache.catalina.Host,java.lang.String)"
        ]
    },
    "org.apache.catalina.core.StandardEngine:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.mbeans.MBeanFactory:java.lang.String createStandardServiceEngine(java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.catalina.startup.Tomcat:org.apache.catalina.Engine getEngine()"
        ]
    },
    "org.apache.catalina.core.StandardHost:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.host.HostManagerServlet:void add(java.io.PrintWriter,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean,boolean,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.mbeans.MBeanFactory:java.lang.String createStandardHost(java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)",
            "org.apache.catalina.startup.Tomcat:org.apache.catalina.Host getHost()"
        ]
    },
    "org.apache.catalina.core.StandardWrapper:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.StandardContext:org.apache.catalina.Wrapper createWrapper()",
            "org.apache.catalina.startup.Tomcat$ExistingStandardWrapper:void <init>(jakarta.servlet.Servlet)"
        ]
    },
    "org.apache.catalina.core.StandardPipeline:void destroyInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void destroy()"
        ]
    },
    "org.apache.catalina.mbeans.ContainerMBean:void removeValve(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.mbeans.MBeanFactory:void removeValve(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.mbeans.MBeanFactory:void removeService(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.mbeans.MBeanFactory:java.lang.String createStandardServiceEngine(java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.mbeans.MBeanFactory:void removeConnector(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.manager.HTMLManagerServlet:java.lang.String stop(org.apache.catalina.util.ContextName,org.apache.tomcat.util.res.StringManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.HTMLManagerServlet:void doPost(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.manager.HTMLManagerServlet:java.lang.String undeploy(org.apache.catalina.util.ContextName,org.apache.tomcat.util.res.StringManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.HTMLManagerServlet:void doPost(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.manager.host.HTMLHostManagerServlet:java.lang.String stop(java.lang.String,org.apache.tomcat.util.res.StringManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.host.HTMLHostManagerServlet:void doPost(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.session.StandardManager:void stopInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void stop()"
        ]
    },
    "org.apache.catalina.startup.Catalina$CatalinaShutdownHook:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.AsyncContextImpl$RunnableWrapper:void run()",
            "org.apache.catalina.core.AsyncContextImpl:void doInternalDispatch()",
            "org.apache.catalina.core.StandardThreadExecutor:void execute(java.lang.Runnable)",
            "org.apache.catalina.servlets.CGIServlet$CGIRunner:void run()",
            "org.apache.coyote.AbstractProcessor:void execute(java.lang.Runnable)",
            "org.apache.coyote.AsyncStateMachine:void asyncRun(java.lang.Runnable)",
            "org.apache.tomcat.util.net.AbstractEndpoint:void startAcceptorThread()",
            "org.apache.tomcat.util.net.AprEndpoint$Poller:void start()",
            "org.apache.tomcat.util.net.AprEndpoint$Sendfile:void start()",
            "org.apache.tomcat.util.net.Nio2Endpoint:void stopInternal()",
            "org.apache.tomcat.util.net.NioEndpoint:void startInternal()",
            "org.apache.tomcat.util.net.SecureNio2Channel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()",
            "org.apache.tomcat.util.net.SecureNioChannel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()",
            "org.apache.tomcat.util.net.SocketWrapperBase:void execute(java.lang.Runnable)",
            "org.apache.tomcat.util.threads.InlineExecutorService:void execute(java.lang.Runnable)",
            "org.apache.tomcat.util.threads.ScheduledThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.tomcat.util.threads.TaskThread$WrappingRunnable:void run()",
            "org.apache.tomcat.util.threads.ThreadPoolExecutor:void execute(java.lang.Runnable,long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.apache.catalina.startup.Catalina:void start()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.core.ContainerBase$StartChild:java.lang.Void call()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ContainerBase$StartChild:java.lang.Object call()"
        ]
    },
    "org.apache.catalina.core.ContainerBase:void addChildInternal(org.apache.catalina.Container)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ContainerBase:void addChild(org.apache.catalina.Container)",
            "org.apache.catalina.core.ContainerBase:void access$000(org.apache.catalina.core.ContainerBase,org.apache.catalina.Container)"
        ]
    },
    "org.apache.catalina.core.StandardContext:void resourcesStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.StandardContext:void startInternal()"
        ]
    },
    "org.apache.catalina.core.StandardPipeline:void startInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void start()"
        ]
    },
    "org.apache.catalina.core.StandardPipeline:void addValve(org.apache.catalina.Valve)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ContainerBase:void addValve(org.apache.catalina.Valve)",
            "org.apache.catalina.core.StandardHost:void startInternal()",
            "org.apache.catalina.mbeans.ContainerMBean:java.lang.String addValve(java.lang.String)",
            "org.apache.catalina.mbeans.MBeanFactory:java.lang.String createValve(java.lang.String,java.lang.String)",
            "org.apache.catalina.startup.ContextConfig:void authenticatorConfig()",
            "org.apache.catalina.startup.Tomcat$FixContextListener:void lifecycleEvent(org.apache.catalina.LifecycleEvent)"
        ]
    },
    "org.apache.catalina.core.StandardServer:void addService(org.apache.catalina.Service)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.mbeans.MBeanFactory:java.lang.String createStandardServiceEngine(java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.catalina.startup.Tomcat:org.apache.catalina.Server getServer()"
        ]
    },
    "org.apache.catalina.core.StandardServer:void startInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void start()"
        ]
    },
    "org.apache.catalina.core.StandardService:void addConnector(org.apache.catalina.connector.Connector)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.mbeans.MBeanFactory:java.lang.String createConnector(java.lang.String,java.lang.String,int,boolean,boolean)",
            "org.apache.catalina.mbeans.ServiceMBean:void addConnector(java.lang.String,int,boolean,boolean)",
            "org.apache.catalina.startup.Tomcat:org.apache.catalina.connector.Connector getConnector()",
            "org.apache.catalina.startup.Tomcat:void setConnector(org.apache.catalina.connector.Connector)"
        ]
    },
    "org.apache.catalina.core.StandardService:void addExecutor(org.apache.catalina.Executor)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.mbeans.ServiceMBean:void addExecutor(java.lang.String)"
        ]
    },
    "org.apache.catalina.core.StandardService:void startInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void start()"
        ]
    },
    "org.apache.catalina.manager.ManagerServlet:void start(java.io.PrintWriter,org.apache.catalina.util.ContextName,org.apache.tomcat.util.res.StringManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.HTMLManagerServlet:java.lang.String start(org.apache.catalina.util.ContextName,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.ManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.manager.host.HostManagerServlet:void start(java.io.PrintWriter,java.lang.String,org.apache.tomcat.util.res.StringManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.host.HTMLHostManagerServlet:java.lang.String start(java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.host.HostManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.realm.CombinedRealm:void startInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.realm.LockOutRealm:void startInternal()",
            "org.apache.catalina.util.LifecycleBase:void start()"
        ]
    },
    "org.apache.catalina.session.ManagerBase:void startInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.session.PersistentManagerBase:void startInternal()",
            "org.apache.catalina.session.StandardManager:void startInternal()"
        ]
    },
    "org.apache.catalina.session.PersistentManagerBase:void startInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void start()"
        ]
    },
    "org.apache.catalina.startup.Tomcat:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.Tomcat:void main(java.lang.String[])"
        ]
    },
    "org.apache.catalina.valves.rewrite.RewriteValve:void parse(java.io.BufferedReader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.valves.rewrite.RewriteValve:void startInternal()",
            "org.apache.catalina.valves.rewrite.RewriteValve:void setConfiguration(java.lang.String)"
        ]
    },
    "org.apache.catalina.webresources.AbstractSingleArchiveResourceSet:void <init>(org.apache.catalina.WebResourceRoot,java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.webresources.JarResourceSet:void <init>(org.apache.catalina.WebResourceRoot,java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.catalina.webresources.WarResourceSet:void <init>(org.apache.catalina.WebResourceRoot,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.catalina.webresources.DirResourceSet:void <init>(org.apache.catalina.WebResourceRoot,java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.webresources.StandardRoot:void createWebResourceSet(org.apache.catalina.WebResourceRoot$ResourceSetType,java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.catalina.webresources.StandardRoot:org.apache.catalina.WebResourceSet createMainResourceSet()"
        ]
    },
    "org.apache.catalina.webresources.FileResourceSet:void <init>(org.apache.catalina.WebResourceRoot,java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.webresources.StandardRoot:void createWebResourceSet(org.apache.catalina.WebResourceRoot$ResourceSetType,java.lang.String,java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.catalina.webresources.JarWarResourceSet:void <init>(org.apache.catalina.WebResourceRoot,java.lang.String,java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.webresources.StandardRoot:void createWebResourceSet(org.apache.catalina.WebResourceRoot$ResourceSetType,java.lang.String,java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.catalina.webresources.StandardRoot:void startInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void start()"
        ]
    },
    "org.apache.catalina.core.StandardContext:void destroyInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void destroy()"
        ]
    },
    "org.apache.catalina.core.StandardServer:void destroyInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void destroy()"
        ]
    },
    "org.apache.catalina.core.StandardService:void destroyInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void destroy()"
        ]
    },
    "org.apache.catalina.realm.CombinedRealm:void destroyInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void destroy()"
        ]
    },
    "org.apache.catalina.startup.Tomcat:void destroy()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.webresources.StandardRoot:void destroyInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void destroy()"
        ]
    },
    "org.apache.catalina.webresources.ExtractingRoot:void stopInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void stop()"
        ]
    },
    "org.apache.catalina.connector.Connector:void initInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void init()"
        ]
    },
    "org.apache.coyote.http11.AbstractHttp11Protocol:void init()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.Connector:void initInternal()"
        ]
    },
    "org.apache.catalina.startup.ContextConfig:void processClasses(org.apache.tomcat.util.descriptor.web.WebXml,java.util.Set)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.ContextConfig:void webConfig()"
        ]
    },
    "org.apache.catalina.startup.HostConfig:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.HostConfig:void lifecycleEvent(org.apache.catalina.LifecycleEvent)"
        ]
    },
    "org.apache.catalina.startup.HostConfig:void check()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.HostConfig:void lifecycleEvent(org.apache.catalina.LifecycleEvent)"
        ]
    },
    "org.apache.catalina.startup.UserConfig:void lifecycleEvent(org.apache.catalina.LifecycleEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void fireLifecycleEvent(java.lang.String,java.lang.Object)"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:void doClose()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SocketWrapperBase:void close()"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel:void closeSilently()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SecureNio2Channel:void rehandshake()",
            "org.apache.tomcat.util.net.SecureNio2Channel:void close()"
        ]
    },
    "org.apache.coyote.ajp.AjpProcessor$SocketInputBuffer:int doRead(org.apache.tomcat.util.net.ApplicationBufferHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.Request:int doRead(org.apache.tomcat.util.net.ApplicationBufferHandler)",
            "org.apache.coyote.http11.Http11InputBuffer:int doRead(org.apache.tomcat.util.net.ApplicationBufferHandler)",
            "org.apache.coyote.http11.filters.BufferedInputFilter:void setRequest(org.apache.coyote.Request)",
            "org.apache.coyote.http11.filters.ChunkedInputFilter:int readBytes()",
            "org.apache.coyote.http11.filters.IdentityInputFilter:int doRead(org.apache.tomcat.util.net.ApplicationBufferHandler)",
            "org.apache.coyote.http11.filters.IdentityInputFilter:long end()"
        ]
    },
    "org.apache.coyote.ajp.AjpProcessor:int available(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProcessor:void action(org.apache.coyote.ActionCode,java.lang.Object)",
            "org.apache.coyote.AbstractProcessor:boolean isReadyForRead()",
            "org.apache.coyote.ajp.AjpProcessor:void dispatchNonBlockingRead()"
        ]
    },
    "org.apache.coyote.ajp.AjpProcessor:void access$600(org.apache.coyote.ajp.AjpProcessor,java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.ajp.AjpProcessor$SocketOutputBuffer:int doWrite(java.nio.ByteBuffer)"
        ]
    },
    "org.apache.coyote.http11.upgrade.UpgradeServletOutputStream:void write(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream:void write(int)",
            "org.apache.catalina.startup.Catalina:void stopServer(java.lang.String[])",
            "org.apache.tomcat.util.http.fileupload.ThresholdingOutputStream:void write(int)",
            "org.apache.tomcat.util.http.fileupload.util.mime.QuotedPrintableDecoder:int decode(byte[],java.io.OutputStream)"
        ]
    },
    "org.apache.coyote.http11.upgrade.UpgradeServletOutputStream:void write(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream:void write(byte[],int,int)",
            "org.apache.catalina.servlets.CGIServlet$CGIRunner:void run()",
            "org.apache.catalina.servlets.DefaultServlet:java.io.IOException copyRange(java.io.InputStream,jakarta.servlet.ServletOutputStream)",
            "org.apache.catalina.servlets.DefaultServlet:java.io.IOException copyRange(java.io.InputStream,jakarta.servlet.ServletOutputStream,long,long)",
            "org.apache.catalina.util.IOTools:void flow(java.io.InputStream,java.io.OutputStream)",
            "org.apache.tomcat.util.http.fileupload.ByteArrayOutputStream:void writeTo(java.io.OutputStream)",
            "org.apache.tomcat.util.http.fileupload.IOUtils:long copyLarge(java.io.InputStream,java.io.OutputStream)",
            "org.apache.tomcat.util.http.fileupload.ThresholdingOutputStream:void write(byte[],int,int)",
            "org.apache.tomcat.util.http.fileupload.util.Streams:long copy(java.io.InputStream,java.io.OutputStream,boolean,byte[])"
        ]
    },
    "org.apache.coyote.http2.Http2UpgradeHandler:org.apache.coyote.http2.Http2UpgradeHandler$HeaderFrameBuffers doWriteHeaders(org.apache.coyote.http2.Stream,int,org.apache.tomcat.util.http.MimeHeaders,boolean,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2AsyncUpgradeHandler:void writeHeaders(org.apache.coyote.http2.Stream,int,org.apache.tomcat.util.http.MimeHeaders,boolean,int)",
            "org.apache.coyote.http2.Http2UpgradeHandler:void writeHeaders(org.apache.coyote.http2.Stream,int,org.apache.tomcat.util.http.MimeHeaders,boolean,int)"
        ]
    },
    "org.apache.coyote.http2.Http2UpgradeHandler:void pingReceive(byte[],boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2AsyncUpgradeHandler:void pingReceive(byte[],boolean)",
            "org.apache.coyote.http2.Http2Parser:void readPingFrame(int,java.nio.ByteBuffer)"
        ]
    },
    "org.apache.coyote.http2.Http2UpgradeHandler:void pause()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.upgrade.UpgradeProcessorInternal:void pause()",
            "org.apache.coyote.http2.Http2AsyncUpgradeHandler:void pause()"
        ]
    },
    "org.apache.coyote.http2.Http2UpgradeHandler:void checkPauseState()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2UpgradeHandler:org.apache.coyote.http2.HpackDecoder$HeaderEmitter headersStart(int,boolean)"
        ]
    },
    "org.apache.coyote.http2.Http2UpgradeHandler:void closeConnection(org.apache.coyote.http2.Http2Exception)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2AsyncParser$PrefaceCompletionHandler:void completed(java.lang.Long,java.lang.Void)",
            "org.apache.coyote.http2.Http2UpgradeHandler:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState upgradeDispatch(org.apache.tomcat.util.net.SocketEvent)",
            "org.apache.coyote.http2.Stream:void close(org.apache.coyote.http2.Http2Exception)"
        ]
    },
    "org.apache.coyote.http2.Stream$StreamOutputBuffer:boolean flush(boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Stream$StreamOutputBuffer:int doWrite(java.nio.ByteBuffer)",
            "org.apache.coyote.http2.Stream$StreamOutputBuffer:boolean flush(boolean)",
            "org.apache.coyote.http2.Stream$StreamOutputBuffer:boolean writeFromBuffer(java.nio.ByteBuffer,boolean)"
        ]
    },
    "org.apache.coyote.http2.Http2UpgradeHandler:void onSwallowedDataFramePayload(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2AsyncUpgradeHandler:void onSwallowedDataFramePayload(int,int)",
            "org.apache.coyote.http2.Http2Parser:void swallowPayload(int,int,int,boolean,java.nio.ByteBuffer)",
            "org.apache.coyote.http2.Http2UpgradeHandler:void endRequestBodyFrame(int,int)",
            "org.apache.coyote.http2.Stream$StreamInputBuffer:void swallowUnread()"
        ]
    },
    "org.apache.coyote.http2.Stream$StreamInputBuffer:int doRead(org.apache.tomcat.util.net.ApplicationBufferHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.Request:int doRead(org.apache.tomcat.util.net.ApplicationBufferHandler)",
            "org.apache.coyote.http11.Http11InputBuffer:int doRead(org.apache.tomcat.util.net.ApplicationBufferHandler)",
            "org.apache.coyote.http11.filters.BufferedInputFilter:void setRequest(org.apache.coyote.Request)",
            "org.apache.coyote.http11.filters.ChunkedInputFilter:int readBytes()",
            "org.apache.coyote.http11.filters.IdentityInputFilter:int doRead(org.apache.tomcat.util.net.ApplicationBufferHandler)",
            "org.apache.coyote.http11.filters.IdentityInputFilter:long end()"
        ]
    },
    "org.apache.coyote.http2.Http2Parser:void readSettingsFrame(int,int,java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2AsyncParser$FrameCompletionHandler:void completed(java.lang.Long,java.lang.Void)",
            "org.apache.coyote.http2.Http2AsyncParser$PrefaceCompletionHandler:void completed(java.lang.Long,java.lang.Void)",
            "org.apache.coyote.http2.Http2Parser:boolean readFrame(boolean,org.apache.coyote.http2.FrameType)"
        ]
    },
    "org.apache.coyote.http11.Http11OutputBuffer:void commit()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11Processor:void prepareResponse()"
        ]
    },
    "org.apache.coyote.http11.Http11OutputBuffer:void flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11OutputBuffer:void flush()",
            "org.apache.coyote.http11.Http11Processor:void flush()",
            "org.apache.coyote.http11.filters.ChunkedOutputFilter:void flush()",
            "org.apache.coyote.http11.filters.GzipOutputFilter:void flush()",
            "org.apache.coyote.http11.filters.IdentityOutputFilter:void flush()",
            "org.apache.coyote.http11.filters.VoidOutputFilter:void flush()",
            "org.apache.coyote.http2.Http2OutputBuffer:void flush()",
            "org.apache.coyote.http2.StreamProcessor:void flush()"
        ]
    },
    "org.apache.coyote.http11.filters.ChunkedOutputFilter:void flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11OutputBuffer:void flush()",
            "org.apache.coyote.http11.filters.ChunkedOutputFilter:void flush()",
            "org.apache.coyote.http11.filters.GzipOutputFilter:void flush()",
            "org.apache.coyote.http11.filters.IdentityOutputFilter:void flush()",
            "org.apache.coyote.http11.filters.VoidOutputFilter:void flush()",
            "org.apache.coyote.http2.Http2OutputBuffer:void flush()",
            "org.apache.coyote.http2.StreamProcessor:void flush()"
        ]
    },
    "org.apache.coyote.http11.filters.GzipOutputFilter:void flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11OutputBuffer:void flush()",
            "org.apache.coyote.http11.filters.ChunkedOutputFilter:void flush()",
            "org.apache.coyote.http11.filters.GzipOutputFilter:void flush()",
            "org.apache.coyote.http11.filters.IdentityOutputFilter:void flush()",
            "org.apache.coyote.http11.filters.VoidOutputFilter:void flush()",
            "org.apache.coyote.http2.Http2OutputBuffer:void flush()",
            "org.apache.coyote.http2.StreamProcessor:void flush()"
        ]
    },
    "org.apache.coyote.http11.filters.IdentityOutputFilter:void flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11OutputBuffer:void flush()",
            "org.apache.coyote.http11.filters.ChunkedOutputFilter:void flush()",
            "org.apache.coyote.http11.filters.GzipOutputFilter:void flush()",
            "org.apache.coyote.http11.filters.IdentityOutputFilter:void flush()",
            "org.apache.coyote.http11.filters.VoidOutputFilter:void flush()",
            "org.apache.coyote.http2.Http2OutputBuffer:void flush()",
            "org.apache.coyote.http2.StreamProcessor:void flush()"
        ]
    },
    "org.apache.coyote.http11.filters.VoidOutputFilter:void flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11OutputBuffer:void flush()",
            "org.apache.coyote.http11.filters.ChunkedOutputFilter:void flush()",
            "org.apache.coyote.http11.filters.GzipOutputFilter:void flush()",
            "org.apache.coyote.http11.filters.IdentityOutputFilter:void flush()",
            "org.apache.coyote.http11.filters.VoidOutputFilter:void flush()",
            "org.apache.coyote.http2.Http2OutputBuffer:void flush()",
            "org.apache.coyote.http2.StreamProcessor:void flush()"
        ]
    },
    "org.apache.coyote.http2.Http2OutputBuffer:void flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11OutputBuffer:void flush()",
            "org.apache.coyote.http11.filters.ChunkedOutputFilter:void flush()",
            "org.apache.coyote.http11.filters.GzipOutputFilter:void flush()",
            "org.apache.coyote.http11.filters.IdentityOutputFilter:void flush()",
            "org.apache.coyote.http11.filters.VoidOutputFilter:void flush()",
            "org.apache.coyote.http2.Http2OutputBuffer:void flush()",
            "org.apache.coyote.http2.StreamProcessor:void flush()"
        ]
    },
    "org.apache.coyote.http2.StreamProcessor:void flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProcessor:void action(org.apache.coyote.ActionCode,java.lang.Object)"
        ]
    },
    "org.apache.coyote.http11.Http11InputBuffer:int available()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.ajp.AjpProcessor:int available(boolean)",
            "org.apache.coyote.http11.Http11InputBuffer:int available(boolean)",
            "org.apache.coyote.http11.filters.BufferedInputFilter:int available()",
            "org.apache.coyote.http11.filters.ChunkedInputFilter:int available()",
            "org.apache.coyote.http11.filters.IdentityInputFilter:int available()"
        ]
    },
    "org.apache.coyote.http11.Http11Processor:int available(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProcessor:void action(org.apache.coyote.ActionCode,java.lang.Object)",
            "org.apache.coyote.AbstractProcessor:boolean isReadyForRead()",
            "org.apache.coyote.http11.Http11Processor:org.apache.tomcat.util.net.SendfileState processSendfile(org.apache.tomcat.util.net.SocketWrapperBase)"
        ]
    },
    "org.apache.coyote.http11.Http11InputBuffer:boolean parseHeaders()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11Processor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState service(org.apache.tomcat.util.net.SocketWrapperBase)"
        ]
    },
    "org.apache.coyote.http11.Http11InputBuffer$SocketInputBuffer:int doRead(org.apache.tomcat.util.net.ApplicationBufferHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.Request:int doRead(org.apache.tomcat.util.net.ApplicationBufferHandler)",
            "org.apache.coyote.http11.Http11InputBuffer:int doRead(org.apache.tomcat.util.net.ApplicationBufferHandler)",
            "org.apache.coyote.http11.filters.BufferedInputFilter:void setRequest(org.apache.coyote.Request)",
            "org.apache.coyote.http11.filters.ChunkedInputFilter:int readBytes()",
            "org.apache.coyote.http11.filters.IdentityInputFilter:int doRead(org.apache.tomcat.util.net.ApplicationBufferHandler)",
            "org.apache.coyote.http11.filters.IdentityInputFilter:long end()"
        ]
    },
    "org.apache.coyote.ajp.AjpProcessor:boolean readMessage(org.apache.coyote.ajp.AjpMessage,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.ajp.AjpProcessor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState service(org.apache.tomcat.util.net.SocketWrapperBase)",
            "org.apache.coyote.ajp.AjpProcessor:boolean receive(boolean)"
        ]
    },
    "org.apache.coyote.http11.upgrade.UpgradeServletInputStream:int read()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletInputStream:int readLine(byte[],int,int)",
            "org.apache.catalina.core.StandardServer:void await()",
            "org.apache.catalina.servlets.CGIServlet$HTTPHeaderInputStream:int read()",
            "org.apache.catalina.servlets.DefaultServlet:void skip(java.io.InputStream,int)",
            "org.apache.catalina.webresources.AbstractArchiveResource$JarInputStreamWrapper:int read()",
            "org.apache.catalina.webresources.TrackedInputStream:int read()"
        ]
    },
    "org.apache.coyote.http11.upgrade.UpgradeServletInputStream:int readLine(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.coyote.http2.Http2AsyncUpgradeHandler:boolean fill(boolean,byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2Parser$Input:boolean fill(boolean,byte[])",
            "org.apache.coyote.http2.Http2Parser$Input:boolean fill(boolean,java.nio.ByteBuffer,int)",
            "org.apache.coyote.http2.Http2Parser:void swallowPayload(int,int,int,boolean,java.nio.ByteBuffer)"
        ]
    },
    "org.apache.coyote.http2.Http2Parser$Input:boolean fill(boolean,byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.coyote.http2.Http2Parser$Input:boolean fill(boolean,java.nio.ByteBuffer,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.coyote.http2.Http2Parser:void swallowPayload(int,int,int,boolean,java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2AsyncParser$FrameCompletionHandler:void completed(java.lang.Long,java.lang.Void)",
            "org.apache.coyote.http2.Http2AsyncParser$PrefaceCompletionHandler:void completed(java.lang.Long,java.lang.Void)",
            "org.apache.coyote.http2.Http2Parser:boolean readFrame(boolean,org.apache.coyote.http2.FrameType)",
            "org.apache.coyote.http2.Http2Parser:void readDataFrame(int,int,int,java.nio.ByteBuffer)",
            "org.apache.coyote.http2.Http2Parser:void readHeadersFrame(int,int,int,java.nio.ByteBuffer)",
            "org.apache.coyote.http2.Http2Parser:void readUnknownFrame(int,int,int,int,java.nio.ByteBuffer)"
        ]
    },
    "org.apache.catalina.connector.OutputBuffer:void append(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.OutputBuffer:void writeBytes(byte[],int,int)"
        ]
    },
    "org.apache.catalina.connector.OutputBuffer:void append(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.OutputBuffer:void writeBytes(java.nio.ByteBuffer)"
        ]
    },
    "org.apache.catalina.connector.OutputBuffer:void writeBytes(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.OutputBuffer:void write(byte[],int,int)"
        ]
    },
    "org.apache.catalina.connector.OutputBuffer:void writeBytes(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.OutputBuffer:void write(java.nio.ByteBuffer)"
        ]
    },
    "org.apache.catalina.connector.OutputBuffer:void writeByte(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.CoyoteOutputStream:void write(int)"
        ]
    },
    "org.apache.catalina.connector.OutputBuffer:void realWriteChars(java.nio.CharBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.OutputBuffer:void append(char[],int,int)",
            "org.apache.catalina.connector.OutputBuffer:void flushCharBuffer()"
        ]
    },
    "jakarta.servlet.http.HttpServletRequestWrapper:boolean authenticate(jakarta.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletRequestWrapper:boolean authenticate(jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.connector.RequestFacade:boolean authenticate(jakarta.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletRequestWrapper:boolean authenticate(jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.authenticator.AuthenticatorBase:java.util.Optional findJaspicProvider()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.AuthenticatorBase:jakarta.security.auth.message.config.AuthConfigProvider getJaspicProvider()",
            "org.apache.catalina.authenticator.AuthenticatorBase:void notify(java.lang.String,java.lang.String)"
        ]
    },
    "jakarta.servlet.http.HttpFilter:void doFilter(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,jakarta.servlet.FilterChain)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.filters.AddDefaultCharsetFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationFilterChain:void internalDoFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)"
        ]
    },
    "org.apache.catalina.filters.CorsFilter:void handleSimpleCORS(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,jakarta.servlet.FilterChain)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.CorsFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)"
        ]
    },
    "org.apache.catalina.filters.CorsFilter:void handleNonCORS(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,jakarta.servlet.FilterChain)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.CorsFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)"
        ]
    },
    "org.apache.catalina.filters.ExpiresFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationFilterChain:void internalDoFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)"
        ]
    },
    "org.apache.catalina.filters.HttpHeaderSecurityFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationFilterChain:void internalDoFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)"
        ]
    },
    "org.apache.catalina.filters.RequestFilter:void process(java.lang.String,jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.RemoteAddrFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.filters.RemoteHostFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)"
        ]
    },
    "org.apache.catalina.filters.RestCsrfPreventionFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationFilterChain:void internalDoFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)"
        ]
    },
    "org.apache.catalina.filters.SessionInitializerFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationFilterChain:void internalDoFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)"
        ]
    },
    "org.apache.catalina.filters.SetCharacterEncodingFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationFilterChain:void internalDoFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)"
        ]
    },
    "org.apache.catalina.filters.WebdavFixFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationFilterChain:void internalDoFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)"
        ]
    },
    "org.apache.catalina.startup.Catalina:void await()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.Catalina:void start()"
        ]
    },
    "org.apache.catalina.startup.Tomcat:void main(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.servlets.DefaultServlet:java.nio.charset.Charset processBom(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.DefaultServlet:void serveResource(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,boolean,java.lang.String)"
        ]
    },
    "org.apache.catalina.loader.WebappClassLoaderBase:java.io.InputStream getResourceAsStream(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.DefaultInstanceManager:void loadProperties(java.util.Set,java.lang.String,java.lang.String,org.apache.juli.logging.Log)",
            "org.apache.catalina.loader.WebappClassLoaderBase:java.io.InputStream getResourceAsStream(java.lang.String)",
            "org.apache.catalina.loader.WebappClassLoaderBase:void clearReferencesJdbc()",
            "org.apache.catalina.startup.CatalinaBaseConfigurationSource:org.apache.tomcat.util.file.ConfigurationSource$Resource getServerXml()",
            "org.apache.catalina.startup.CatalinaBaseConfigurationSource:org.apache.tomcat.util.file.ConfigurationSource$Resource getResource(java.lang.String)",
            "org.apache.catalina.startup.ContextConfig:void populateJavaClassCache(java.lang.String,java.util.Map)",
            "org.apache.catalina.startup.ContextConfig:void <clinit>()",
            "org.apache.juli.ClassLoaderLogManager:void readConfiguration(java.lang.ClassLoader)"
        ]
    },
    "org.apache.catalina.servlets.DefaultServlet:java.io.IOException copyRange(java.io.InputStream,jakarta.servlet.ServletOutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.DefaultServlet:void copy(java.io.InputStream,jakarta.servlet.ServletOutputStream)"
        ]
    },
    "org.apache.catalina.servlets.DefaultServlet:java.io.IOException copyRange(java.io.InputStream,jakarta.servlet.ServletOutputStream,long,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.DefaultServlet:void copy(org.apache.catalina.WebResource,long,jakarta.servlet.ServletOutputStream,org.apache.tomcat.util.http.parser.Ranges$Entry)",
            "org.apache.catalina.servlets.DefaultServlet:void copy(org.apache.catalina.WebResource,long,jakarta.servlet.ServletOutputStream,org.apache.tomcat.util.http.parser.Ranges,java.lang.String)"
        ]
    },
    "org.apache.catalina.startup.ExpandWar:void expand(java.io.InputStream,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.ExpandWar:java.lang.String expand(org.apache.catalina.Host,java.net.URL,java.lang.String)"
        ]
    },
    "org.apache.catalina.webresources.AbstractArchiveResource$JarInputStreamWrapper:int read(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.loader.WebappClassLoaderBase:java.io.InputStream getResourceAsStream(java.lang.String)",
            "org.apache.catalina.servlets.CGIServlet$CGIRunner:void run()",
            "org.apache.catalina.servlets.DefaultServlet:java.nio.charset.Charset processBom(java.io.InputStream)",
            "org.apache.catalina.servlets.DefaultServlet:java.io.IOException copyRange(java.io.InputStream,jakarta.servlet.ServletOutputStream)",
            "org.apache.catalina.servlets.DefaultServlet:java.io.IOException copyRange(java.io.InputStream,jakarta.servlet.ServletOutputStream,long,long)",
            "org.apache.catalina.startup.ExpandWar:void expand(java.io.InputStream,java.io.File)",
            "org.apache.catalina.util.IOTools:void flow(java.io.InputStream,java.io.OutputStream)",
            "org.apache.catalina.webresources.AbstractArchiveResource$JarInputStreamWrapper:int read(byte[])",
            "org.apache.catalina.webresources.TrackedInputStream:int read(byte[])",
            "org.apache.tomcat.util.http.fileupload.IOUtils:long copyLarge(java.io.InputStream,java.io.OutputStream)",
            "org.apache.tomcat.util.http.fileupload.util.Streams:long copy(java.io.InputStream,java.io.OutputStream,boolean,byte[])",
            "org.apache.tomcat.util.security.KeyStoreUtil:void load(java.security.KeyStore,java.io.InputStream,char[])"
        ]
    },
    "org.apache.catalina.webresources.TrackedInputStream:int read(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.loader.WebappClassLoaderBase:java.io.InputStream getResourceAsStream(java.lang.String)",
            "org.apache.catalina.servlets.CGIServlet$CGIRunner:void run()",
            "org.apache.catalina.servlets.DefaultServlet:java.nio.charset.Charset processBom(java.io.InputStream)",
            "org.apache.catalina.servlets.DefaultServlet:java.io.IOException copyRange(java.io.InputStream,jakarta.servlet.ServletOutputStream)",
            "org.apache.catalina.servlets.DefaultServlet:java.io.IOException copyRange(java.io.InputStream,jakarta.servlet.ServletOutputStream,long,long)",
            "org.apache.catalina.startup.ExpandWar:void expand(java.io.InputStream,java.io.File)",
            "org.apache.catalina.util.IOTools:void flow(java.io.InputStream,java.io.OutputStream)",
            "org.apache.catalina.webresources.AbstractArchiveResource$JarInputStreamWrapper:int read(byte[])",
            "org.apache.catalina.webresources.TrackedInputStream:int read(byte[])",
            "org.apache.tomcat.util.http.fileupload.IOUtils:long copyLarge(java.io.InputStream,java.io.OutputStream)",
            "org.apache.tomcat.util.http.fileupload.util.Streams:long copy(java.io.InputStream,java.io.OutputStream,boolean,byte[])",
            "org.apache.tomcat.util.security.KeyStoreUtil:void load(java.security.KeyStore,java.io.InputStream,char[])"
        ]
    },
    "org.apache.tomcat.util.security.KeyStoreUtil:void load(java.security.KeyStore,java.io.InputStream,char[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SSLUtilBase:java.security.KeyStore getStore(java.lang.String,java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.catalina.loader.WebappClassLoaderBase:void clearReferences()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.loader.WebappClassLoaderBase:void stop()"
        ]
    },
    "org.apache.catalina.servlets.DefaultServlet:javax.xml.transform.Source findXsltSource(org.apache.catalina.WebResource)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.DefaultServlet:java.io.InputStream render(jakarta.servlet.http.HttpServletRequest,java.lang.String,org.apache.catalina.WebResource,java.lang.String)"
        ]
    },
    "org.apache.catalina.webresources.AbstractArchiveResource:byte[] getContent()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.loader.WebappClassLoaderBase:java.lang.Class findClassInternal(java.lang.String)",
            "org.apache.catalina.servlets.DefaultServlet:void serveResource(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,boolean,java.lang.String)",
            "org.apache.catalina.webresources.CachedResource:byte[] getContent()"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.IOUtils:void readFully(java.io.InputStream,byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.IOUtils:void readFully(java.io.InputStream,byte[])"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.MultipartStream$ItemInputStream:int read()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.StandardServer:void await()",
            "org.apache.catalina.servlets.CGIServlet$HTTPHeaderInputStream:int read()",
            "org.apache.catalina.servlets.DefaultServlet:void skip(java.io.InputStream,int)",
            "org.apache.catalina.webresources.AbstractArchiveResource$JarInputStreamWrapper:int read()",
            "org.apache.catalina.webresources.TrackedInputStream:int read()"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.MultipartStream$ItemInputStream:int read(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.Request:int readPostBody(byte[],int)",
            "org.apache.catalina.connector.Request:byte[] readChunkedPostBody()",
            "org.apache.catalina.loader.WebappClassLoaderBase:void clearReferencesJdbc()",
            "org.apache.catalina.util.IOTools:int readFully(java.io.InputStream,byte[])",
            "org.apache.catalina.webresources.AbstractArchiveResource$JarInputStreamWrapper:int read(byte[],int,int)",
            "org.apache.catalina.webresources.TrackedInputStream:int read(byte[],int,int)",
            "org.apache.tomcat.util.http.fileupload.ByteArrayOutputStream:int write(java.io.InputStream)",
            "org.apache.tomcat.util.http.fileupload.IOUtils:int read(java.io.InputStream,byte[],int,int)",
            "org.apache.tomcat.util.http.fileupload.MultipartStream$ItemInputStream:int makeAvailable()",
            "org.apache.tomcat.util.http.fileupload.MultipartStream:byte readByte()"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.MultipartStream$ItemInputStream:void close(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.MultipartStream$ItemInputStream:void close()",
            "org.apache.tomcat.util.http.fileupload.impl.FileItemStreamImpl$1:void raiseError(long,long)"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.MultipartStream$ItemInputStream:long skip(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.DefaultServlet:java.io.IOException copyRange(java.io.InputStream,jakarta.servlet.ServletOutputStream,long,long)",
            "org.apache.catalina.webresources.AbstractArchiveResource$JarInputStreamWrapper:long skip(long)",
            "org.apache.catalina.webresources.TrackedInputStream:long skip(long)",
            "org.apache.tomcat.util.http.fileupload.MultipartStream$ItemInputStream:void close(boolean)"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.MultipartStream:boolean readBoundary()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.MultipartStream:boolean skipPreamble()",
            "org.apache.tomcat.util.http.fileupload.impl.FileItemIteratorImpl:boolean findNextItem()"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.MultipartStream:java.lang.String readHeaders()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.impl.FileItemIteratorImpl:boolean findNextItem()"
        ]
    },
    "org.apache.catalina.authenticator.NonLoginAuthenticator:boolean doAuthenticate(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.AuthenticatorBase:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.authenticator.AuthenticatorBase:boolean authenticate(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.connector.Request:void login(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletRequestWrapper:void login(java.lang.String,java.lang.String)",
            "org.apache.catalina.connector.RequestFacade:void login(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.catalina.connector.Request:void logout()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletRequestWrapper:void logout()",
            "org.apache.catalina.connector.Request:java.security.Principal getUserPrincipal()",
            "org.apache.catalina.connector.RequestFacade:void logout()"
        ]
    },
    "jakarta.security.auth.message.config.AuthConfigFactory:java.lang.String getFactoryClassName()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.security.auth.message.config.AuthConfigFactory:jakarta.security.auth.message.config.AuthConfigFactory getFactory()"
        ]
    },
    "jakarta.servlet.http.Cookie:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.Cookie:void <init>(java.lang.String,java.lang.String)",
            "jakarta.servlet.http.Cookie:void <clinit>()",
            "org.apache.catalina.authenticator.AuthenticatorBase:void register(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse,java.security.Principal,java.lang.String,java.lang.String,java.lang.String,boolean,boolean)",
            "org.apache.catalina.connector.Request:void addCookie(jakarta.servlet.http.Cookie)",
            "org.apache.catalina.connector.Request:void convertCookies()",
            "org.apache.catalina.core.ApplicationPushBuilder:void <init>(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.core.ApplicationSessionCookieConfig:jakarta.servlet.http.Cookie createSessionCookie(org.apache.catalina.Context,java.lang.String,boolean)",
            "org.apache.catalina.valves.rewrite.RewriteValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "jakarta.servlet.http.Cookie$lambda_static_0__3:java.lang.Object run()",
            "jakarta.servlet.http.Cookie$lambda_static_1__4:java.lang.Object run()",
            "jakarta.servlet.http.Cookie$lambda_static_2__5:java.lang.Object run()"
        ]
    },
    "org.apache.catalina.startup.ClassLoaderFactory:java.lang.ClassLoader createClassLoader(java.io.File[],java.io.File[],java.lang.ClassLoader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.Tool:void main(java.lang.String[])"
        ]
    },
    "org.apache.catalina.startup.ClassLoaderFactory:java.lang.ClassLoader createClassLoader(java.util.List,java.lang.ClassLoader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.Bootstrap:java.lang.ClassLoader createClassLoader(java.lang.String,java.lang.ClassLoader)"
        ]
    },
    "org.apache.catalina.util.Introspection:java.lang.reflect.Field[] getDeclaredFields(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.DefaultInstanceManager:void populateAnnotationsCache(java.lang.Class,java.util.Map)",
            "org.apache.catalina.deploy.NamingResourcesImpl:java.lang.Class getFieldType(java.lang.Class,java.lang.String)",
            "org.apache.catalina.startup.WebAnnotationSet:void loadFieldsAnnotation(org.apache.catalina.Context,java.lang.Class)"
        ]
    },
    "org.apache.catalina.util.Introspection:java.lang.reflect.Method[] getDeclaredMethods(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.DefaultInstanceManager:void populateAnnotationsCache(java.lang.Class,java.util.Map)",
            "org.apache.catalina.deploy.NamingResourcesImpl:java.lang.Class getSetterType(java.lang.Class,java.lang.String)",
            "org.apache.catalina.startup.WebAnnotationSet:void loadMethodsAnnotation(org.apache.catalina.Context,java.lang.Class)"
        ]
    },
    "org.apache.juli.ClassLoaderLogManager:boolean addLogger(java.util.logging.Logger)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.juli.ClassLoaderLogManager:void readConfiguration(java.lang.ClassLoader)"
        ]
    },
    "org.apache.juli.ClassLoaderLogManager:org.apache.juli.ClassLoaderLogManager$ClassLoaderLogInfo getClassLoaderInfo(java.lang.ClassLoader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.juli.ClassLoaderLogManager:boolean addLogger(java.util.logging.Logger)",
            "org.apache.juli.ClassLoaderLogManager:java.util.logging.Logger getLogger(java.lang.String)",
            "org.apache.juli.ClassLoaderLogManager:java.util.Enumeration getLoggerNames()",
            "org.apache.juli.ClassLoaderLogManager:java.lang.String findProperty(java.lang.String)",
            "org.apache.juli.ClassLoaderLogManager:void reset()",
            "org.apache.juli.ClassLoaderLogManager:void readConfiguration(java.lang.ClassLoader)"
        ]
    },
    "org.apache.juli.ClassLoaderLogManager:void doSetParentLogger(java.util.logging.Logger,java.util.logging.Logger)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.juli.ClassLoaderLogManager$LogNode:void setParentLogger(java.util.logging.Logger)",
            "org.apache.juli.ClassLoaderLogManager:boolean addLogger(java.util.logging.Logger)"
        ]
    },
    "org.apache.juli.FileHandler$1:java.lang.Thread newThread(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.naming.factory.MailSessionFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.naming.NamingContext:java.lang.Object lookup(javax.naming.Name,boolean)",
            "org.apache.naming.factory.FactoryBase:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.naming.factory.LookupFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)"
        ]
    },
    "org.apache.naming.factory.SendMailFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.naming.NamingContext:java.lang.Object lookup(javax.naming.Name,boolean)",
            "org.apache.naming.factory.FactoryBase:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.naming.factory.LookupFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)"
        ]
    },
    "org.apache.tomcat.util.compat.JrePlatform:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.CGIServlet:void <clinit>()",
            "org.apache.catalina.webresources.AbstractFileResourceSet:java.io.File file(java.lang.String,boolean)",
            "org.apache.tomcat.util.compat.JrePlatform:void <clinit>()",
            "org.apache.tomcat.util.compat.JrePlatform$lambda_static_0__26:java.lang.Object run()"
        ]
    },
    "org.apache.catalina.core.ApplicationDispatcher$PrivilegedForward:java.lang.Object run()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.security.auth.message.config.AuthConfigFactory:jakarta.security.auth.message.config.AuthConfigFactory getFactory()",
            "org.apache.catalina.core.ApplicationDispatcher:void forward(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)",
            "org.apache.catalina.core.ApplicationFilterChain:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)"
        ]
    },
    "org.apache.catalina.manager.HTMLManagerServlet:void displaySessionDetailPage(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.catalina.util.ContextName,java.lang.String,org.apache.tomcat.util.res.StringManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.HTMLManagerServlet:void doSessions(org.apache.catalina.util.ContextName,jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.res.StringManager)"
        ]
    },
    "org.apache.catalina.core.ApplicationDispatcher$PrivilegedInclude:java.lang.Void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationDispatcher$PrivilegedInclude:java.lang.Object run()"
        ]
    },
    "org.apache.catalina.core.ApplicationDispatcher$PrivilegedDispatch:java.lang.Void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationDispatcher$PrivilegedDispatch:java.lang.Object run()"
        ]
    },
    "org.apache.catalina.connector.Request:void parseLocales()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.Request:java.util.Locale getLocale()",
            "org.apache.catalina.connector.Request:java.util.Enumeration getLocales()"
        ]
    },
    "org.apache.catalina.connector.Response:java.util.Collection getHeaders(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletResponseWrapper:java.util.Collection getHeaders(java.lang.String)",
            "org.apache.catalina.connector.ResponseFacade:java.util.Collection getHeaders(java.lang.String)",
            "org.apache.catalina.filters.RequestDumperFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.valves.AbstractAccessLogValve$ResponseHeaderElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.ExtendedAccessLogValve$ResponseAllHeaderElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.tomcat.util.http.ResponseUtil$ResponseAdapter:java.util.Collection getHeaders(java.lang.String)"
        ]
    },
    "org.apache.catalina.core.ApplicationHttpRequest$AttributeNamesEnumerator:java.lang.String findNext()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationHttpRequest$AttributeNamesEnumerator:boolean hasMoreElements()",
            "org.apache.catalina.core.ApplicationHttpRequest$AttributeNamesEnumerator:java.lang.String nextElement()"
        ]
    },
    "org.apache.catalina.core.ApplicationHttpRequest:void mergeParameters()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationHttpRequest:void parseParameters()"
        ]
    },
    "org.apache.catalina.core.ApplicationPushBuilder:void <init>(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.Request:jakarta.servlet.http.PushBuilder newPushBuilder(jakarta.servlet.http.HttpServletRequest)"
        ]
    },
    "org.apache.catalina.filters.ExpiresFilter:void init(jakarta.servlet.FilterConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationFilterConfig:void initFilter()"
        ]
    },
    "org.apache.catalina.filters.FilterBase:void init(jakarta.servlet.FilterConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationFilterConfig:void initFilter()",
            "org.apache.catalina.filters.AddDefaultCharsetFilter:void init(jakarta.servlet.FilterConfig)",
            "org.apache.catalina.filters.CsrfPreventionFilterBase:void init(jakarta.servlet.FilterConfig)",
            "org.apache.catalina.filters.HttpHeaderSecurityFilter:void init(jakarta.servlet.FilterConfig)"
        ]
    },
    "org.apache.catalina.loader.JdbcLeakPrevention:java.util.List clearJdbcDriverRegistrations()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.loader.WebappClassLoaderBase$CombinedEnumeration:java.net.URL nextElement()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.loader.WebappClassLoaderBase$CombinedEnumeration:java.lang.Object nextElement()"
        ]
    },
    "org.apache.catalina.loader.WebappClassLoaderBase:java.util.Enumeration findResources(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.loader.WebappClassLoaderBase:java.util.Enumeration getResources(java.lang.String)"
        ]
    },
    "org.apache.catalina.manager.StatusTransformer:void writeConnectorState(java.io.PrintWriter,javax.management.ObjectName,java.lang.String,javax.management.MBeanServer,java.util.Vector,java.util.Vector,int,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.StatusManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.manager.util.SessionUtils:java.util.Locale guessLocaleFromSession(jakarta.servlet.http.HttpSession)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.util.SessionUtils:java.util.Locale guessLocaleFromSession(org.apache.catalina.Session)"
        ]
    },
    "org.apache.catalina.manager.util.SessionUtils:java.lang.Object guessUserFromSession(org.apache.catalina.Session)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.JspHelper:java.lang.String guessDisplayUserFromSession(org.apache.catalina.Session)"
        ]
    },
    "org.apache.catalina.servlets.CGIServlet$CGIRunner:java.lang.String[] hashToStringArray(java.util.Hashtable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.CGIServlet$CGIRunner:void run()"
        ]
    },
    "org.apache.catalina.servlets.CGIServlet:void init(jakarta.servlet.ServletConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.StandardWrapper:void initServlet(jakarta.servlet.Servlet)",
            "org.apache.catalina.startup.Tomcat$ExistingStandardWrapper:jakarta.servlet.Servlet loadServlet()"
        ]
    },
    "org.apache.catalina.servlets.DefaultServlet:org.apache.catalina.servlets.DefaultServlet$PrecompressedResource getBestPrecompressedResource(jakarta.servlet.http.HttpServletRequest,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.DefaultServlet:void serveResource(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,boolean,java.lang.String)"
        ]
    },
    "org.apache.catalina.servlets.WebdavServlet$LockInfo:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.Connector:java.lang.String createObjectNameKeyProperties(java.lang.String)",
            "org.apache.catalina.connector.Request$2:java.lang.Object get(org.apache.catalina.connector.Request,java.lang.String)",
            "org.apache.catalina.connector.Request:void setAttribute(java.lang.String,java.lang.Object)",
            "org.apache.catalina.core.ApplicationFilterFactory:org.apache.catalina.core.ApplicationFilterChain createFilterChain(jakarta.servlet.ServletRequest,org.apache.catalina.Wrapper,jakarta.servlet.Servlet)",
            "org.apache.catalina.core.ApplicationHttpRequest:java.lang.Object getAttribute(java.lang.String)",
            "org.apache.catalina.core.DefaultInstanceManager:void loadProperties(java.util.Set,java.lang.String,java.lang.String,org.apache.juli.logging.Log)",
            "org.apache.catalina.core.NamingContextListener:void addResourceLink(org.apache.tomcat.util.descriptor.web.ContextResourceLink)",
            "org.apache.catalina.loader.WebappClassLoaderBase:void checkThreadLocalMapForLeaks(java.lang.Object,java.lang.reflect.Field)",
            "org.apache.catalina.manager.JMXProxyServlet:void getAttribute(java.io.PrintWriter,java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.catalina.manager.JMXProxyServlet:void output(java.lang.String,java.io.PrintWriter,java.lang.Object)",
            "org.apache.catalina.manager.JspHelper:java.lang.String escapeXml(java.lang.Object)",
            "org.apache.catalina.mapper.MapperListener:void containerEvent(org.apache.catalina.ContainerEvent)",
            "org.apache.catalina.mbeans.MBeanDumper:java.lang.String valueToString(java.lang.Object)",
            "org.apache.catalina.realm.JNDIRealm:java.lang.String getAttributeValue(java.lang.String,javax.naming.directory.Attributes)",
            "org.apache.catalina.servlets.CGIServlet$CGIRunner:java.lang.String[] hashToStringArray(java.util.Hashtable)",
            "org.apache.catalina.session.ManagerBase:java.lang.String getSessionAttribute(java.lang.String,java.lang.String)",
            "org.apache.catalina.users.MemoryUserDatabaseFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.catalina.util.ToStringUtil:java.lang.String containedToString(java.lang.Object,java.lang.Object,java.lang.String)",
            "org.apache.catalina.valves.AbstractAccessLogValve$HostElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.AbstractAccessLogValve$LocalServerNameElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.AbstractAccessLogValve$PortElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.AbstractAccessLogValve$ProtocolElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.AbstractAccessLogValve$RemoteAddrElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.AbstractAccessLogValve$RequestAttributeElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.AbstractAccessLogValve$SessionAttributeElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.ExtendedAccessLogValve:java.lang.String wrap(java.lang.Object)",
            "org.apache.catalina.valves.rewrite.ResolverImpl:java.lang.String resolveEnv(java.lang.String)",
            "org.apache.naming.ContextBindings:java.lang.String getThreadName()",
            "org.apache.naming.ContextBindings:java.lang.String getClassLoaderName()",
            "org.apache.naming.factory.DataSourceLinkFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.naming.factory.EjbFactory:java.lang.Object getLinked(javax.naming.Reference)",
            "org.apache.naming.factory.FactoryBase:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.naming.factory.LookupFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.naming.factory.OpenEjbFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.naming.factory.ResourceLinkFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.tomcat.util.descriptor.web.CallMethodMultiRule:void end(java.lang.String,java.lang.String)",
            "org.apache.tomcat.util.descriptor.web.WebXml:void appendElement(java.lang.StringBuilder,java.lang.String,java.lang.String,java.lang.Object)",
            "org.apache.tomcat.util.digester.CallMethodRule:void end(java.lang.String,java.lang.String)",
            "org.apache.tomcat.util.json.JSONParser:java.lang.String objectKey()",
            "org.apache.tomcat.util.modeler.BaseModelMBean:java.lang.String toString()",
            "org.apache.tomcat.util.net.AbstractEndpoint:java.lang.String getProperty(java.lang.String)",
            "org.apache.tomcat.util.security.Escape:java.lang.String htmlElementContent(java.lang.Object)"
        ]
    },
    "org.apache.catalina.servlets.WebdavServlet$LockInfo:void toXML(org.apache.catalina.util.XMLWriter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.WebdavServlet:void doLock(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.WebdavServlet:boolean generateLockDiscovery(java.lang.String,org.apache.catalina.util.XMLWriter)"
        ]
    },
    "org.apache.catalina.servlets.WebdavServlet:boolean isLocked(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.WebdavServlet:boolean isLocked(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.servlets.WebdavServlet:boolean deleteResource(java.lang.String,jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,boolean)",
            "org.apache.catalina.servlets.WebdavServlet:void deleteCollection(jakarta.servlet.http.HttpServletRequest,java.lang.String,java.util.Hashtable)"
        ]
    },
    "org.apache.catalina.servlets.WebdavServlet:void generatePropFindResponse(org.apache.catalina.util.XMLWriter,java.lang.String,java.lang.String,int,java.util.Vector,boolean,boolean,long,long,long,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.WebdavServlet:void parseProperties(jakarta.servlet.http.HttpServletRequest,org.apache.catalina.util.XMLWriter,java.lang.String,int,java.util.Vector)",
            "org.apache.catalina.servlets.WebdavServlet:void parseLockNullProperties(jakarta.servlet.http.HttpServletRequest,org.apache.catalina.util.XMLWriter,java.lang.String,int,java.util.Vector)"
        ]
    },
    "org.apache.catalina.servlets.WebdavServlet:boolean generateLockDiscovery(java.lang.String,org.apache.catalina.util.XMLWriter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.WebdavServlet:void generatePropFindResponse(org.apache.catalina.util.XMLWriter,java.lang.String,java.lang.String,int,java.util.Vector,boolean,boolean,long,long,long,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.catalina.session.ManagerBase:java.util.HashMap getSession(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.startup.CatalinaProperties:void loadProperties()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.CatalinaProperties:void <clinit>()"
        ]
    },
    "org.apache.catalina.startup.ExpandWar:java.lang.String expand(org.apache.catalina.Host,java.net.URL,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.ContextConfig:void fixDocBase()"
        ]
    },
    "org.apache.catalina.startup.ExpandWar:void validate(org.apache.catalina.Host,java.net.URL,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.ContextConfig:void fixDocBase()"
        ]
    },
    "org.apache.catalina.startup.WebappServiceLoader:java.util.List load(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.ContextConfig:void processServletContainerInitializers()"
        ]
    },
    "org.apache.catalina.valves.AbstractAccessLogValve$HeaderElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.valves.AbstractAccessLogValve:void log(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)"
        ]
    },
    "org.apache.catalina.webresources.AbstractSingleArchiveResourceSet:java.util.Map getArchiveEntries(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.webresources.AbstractArchiveResourceSet:java.lang.String[] list(java.lang.String)",
            "org.apache.catalina.webresources.AbstractArchiveResourceSet:java.util.Set listWebAppPaths(java.lang.String)",
            "org.apache.catalina.webresources.AbstractArchiveResourceSet:org.apache.catalina.WebResource getResource(java.lang.String)"
        ]
    },
    "org.apache.catalina.webresources.JarContents:void <init>(java.util.jar.JarFile)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.webresources.AbstractArchiveResourceSet:java.util.jar.JarFile openJarFile()"
        ]
    },
    "org.apache.coyote.CompressionConfig:boolean useCompression(org.apache.coyote.Request,org.apache.coyote.Response)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.AbstractHttp11Protocol:boolean useCompression(org.apache.coyote.Request,org.apache.coyote.Response)"
        ]
    },
    "org.apache.coyote.http2.Http2Protocol:boolean accept(org.apache.coyote.Request)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11Processor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState service(org.apache.tomcat.util.net.SocketWrapperBase)"
        ]
    },
    "org.apache.naming.AbstractRef:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.Connector:java.lang.String createObjectNameKeyProperties(java.lang.String)",
            "org.apache.catalina.connector.Request$2:java.lang.Object get(org.apache.catalina.connector.Request,java.lang.String)",
            "org.apache.catalina.connector.Request:void setAttribute(java.lang.String,java.lang.Object)",
            "org.apache.catalina.core.ApplicationFilterFactory:org.apache.catalina.core.ApplicationFilterChain createFilterChain(jakarta.servlet.ServletRequest,org.apache.catalina.Wrapper,jakarta.servlet.Servlet)",
            "org.apache.catalina.core.ApplicationHttpRequest:java.lang.Object getAttribute(java.lang.String)",
            "org.apache.catalina.core.DefaultInstanceManager:void loadProperties(java.util.Set,java.lang.String,java.lang.String,org.apache.juli.logging.Log)",
            "org.apache.catalina.core.NamingContextListener:void addResourceLink(org.apache.tomcat.util.descriptor.web.ContextResourceLink)",
            "org.apache.catalina.loader.WebappClassLoaderBase:void checkThreadLocalMapForLeaks(java.lang.Object,java.lang.reflect.Field)",
            "org.apache.catalina.manager.JMXProxyServlet:void getAttribute(java.io.PrintWriter,java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.catalina.manager.JMXProxyServlet:void output(java.lang.String,java.io.PrintWriter,java.lang.Object)",
            "org.apache.catalina.manager.JspHelper:java.lang.String escapeXml(java.lang.Object)",
            "org.apache.catalina.mapper.MapperListener:void containerEvent(org.apache.catalina.ContainerEvent)",
            "org.apache.catalina.mbeans.MBeanDumper:java.lang.String valueToString(java.lang.Object)",
            "org.apache.catalina.realm.JNDIRealm:java.lang.String getAttributeValue(java.lang.String,javax.naming.directory.Attributes)",
            "org.apache.catalina.servlets.CGIServlet$CGIRunner:java.lang.String[] hashToStringArray(java.util.Hashtable)",
            "org.apache.catalina.session.ManagerBase:java.lang.String getSessionAttribute(java.lang.String,java.lang.String)",
            "org.apache.catalina.users.MemoryUserDatabaseFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.catalina.util.ToStringUtil:java.lang.String containedToString(java.lang.Object,java.lang.Object,java.lang.String)",
            "org.apache.catalina.valves.AbstractAccessLogValve$HostElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.AbstractAccessLogValve$LocalServerNameElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.AbstractAccessLogValve$PortElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.AbstractAccessLogValve$ProtocolElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.AbstractAccessLogValve$RemoteAddrElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.AbstractAccessLogValve$RequestAttributeElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.AbstractAccessLogValve$SessionAttributeElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.ExtendedAccessLogValve:java.lang.String wrap(java.lang.Object)",
            "org.apache.catalina.valves.rewrite.ResolverImpl:java.lang.String resolveEnv(java.lang.String)",
            "org.apache.naming.ContextBindings:java.lang.String getThreadName()",
            "org.apache.naming.ContextBindings:java.lang.String getClassLoaderName()",
            "org.apache.naming.factory.DataSourceLinkFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.naming.factory.EjbFactory:java.lang.Object getLinked(javax.naming.Reference)",
            "org.apache.naming.factory.FactoryBase:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.naming.factory.LookupFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.naming.factory.OpenEjbFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.naming.factory.ResourceLinkFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.tomcat.util.descriptor.web.CallMethodMultiRule:void end(java.lang.String,java.lang.String)",
            "org.apache.tomcat.util.descriptor.web.WebXml:void appendElement(java.lang.StringBuilder,java.lang.String,java.lang.String,java.lang.Object)",
            "org.apache.tomcat.util.digester.CallMethodRule:void end(java.lang.String,java.lang.String)",
            "org.apache.tomcat.util.json.JSONParser:java.lang.String objectKey()",
            "org.apache.tomcat.util.modeler.BaseModelMBean:java.lang.String toString()",
            "org.apache.tomcat.util.net.AbstractEndpoint:java.lang.String getProperty(java.lang.String)",
            "org.apache.tomcat.util.security.Escape:java.lang.String htmlElementContent(java.lang.Object)"
        ]
    },
    "org.apache.naming.NamingContext:void <init>(java.util.Hashtable,java.lang.String,java.util.HashMap)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.naming.NamingContext:void <init>(java.util.Hashtable,java.lang.String)",
            "org.apache.naming.NamingContext:java.lang.Object lookup(javax.naming.Name,boolean)"
        ]
    },
    "org.apache.naming.factory.BeanFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.naming.NamingContext:java.lang.Object lookup(javax.naming.Name,boolean)",
            "org.apache.naming.factory.FactoryBase:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.naming.factory.LookupFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)"
        ]
    },
    "org.apache.naming.factory.MailSessionFactory:jakarta.mail.Session lambda$getObjectInstance$0(javax.naming.Reference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.naming.factory.MailSessionFactory$lambda_getObjectInstance_0__67:java.lang.Object run()"
        ]
    },
    "org.apache.naming.factory.SendMailFactory:jakarta.mail.internet.MimePartDataSource lambda$getObjectInstance$0(javax.naming.Reference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.naming.factory.SendMailFactory$lambda_getObjectInstance_0__68:java.lang.Object run()"
        ]
    },
    "org.apache.naming.factory.webservices.ServiceRefFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.naming.NamingContext:java.lang.Object lookup(javax.naming.Name,boolean)",
            "org.apache.naming.factory.FactoryBase:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.naming.factory.LookupFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)"
        ]
    },
    "org.apache.tomcat.util.http.MimeHeaders:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.Connector:java.lang.String createObjectNameKeyProperties(java.lang.String)",
            "org.apache.catalina.connector.Request$2:java.lang.Object get(org.apache.catalina.connector.Request,java.lang.String)",
            "org.apache.catalina.connector.Request:void setAttribute(java.lang.String,java.lang.Object)",
            "org.apache.catalina.core.ApplicationFilterFactory:org.apache.catalina.core.ApplicationFilterChain createFilterChain(jakarta.servlet.ServletRequest,org.apache.catalina.Wrapper,jakarta.servlet.Servlet)",
            "org.apache.catalina.core.ApplicationHttpRequest:java.lang.Object getAttribute(java.lang.String)",
            "org.apache.catalina.core.DefaultInstanceManager:void loadProperties(java.util.Set,java.lang.String,java.lang.String,org.apache.juli.logging.Log)",
            "org.apache.catalina.core.NamingContextListener:void addResourceLink(org.apache.tomcat.util.descriptor.web.ContextResourceLink)",
            "org.apache.catalina.loader.WebappClassLoaderBase:void checkThreadLocalMapForLeaks(java.lang.Object,java.lang.reflect.Field)",
            "org.apache.catalina.manager.JMXProxyServlet:void getAttribute(java.io.PrintWriter,java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.catalina.manager.JMXProxyServlet:void output(java.lang.String,java.io.PrintWriter,java.lang.Object)",
            "org.apache.catalina.manager.JspHelper:java.lang.String escapeXml(java.lang.Object)",
            "org.apache.catalina.mapper.MapperListener:void containerEvent(org.apache.catalina.ContainerEvent)",
            "org.apache.catalina.mbeans.MBeanDumper:java.lang.String valueToString(java.lang.Object)",
            "org.apache.catalina.realm.JNDIRealm:java.lang.String getAttributeValue(java.lang.String,javax.naming.directory.Attributes)",
            "org.apache.catalina.servlets.CGIServlet$CGIRunner:java.lang.String[] hashToStringArray(java.util.Hashtable)",
            "org.apache.catalina.session.ManagerBase:java.lang.String getSessionAttribute(java.lang.String,java.lang.String)",
            "org.apache.catalina.users.MemoryUserDatabaseFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.catalina.util.ToStringUtil:java.lang.String containedToString(java.lang.Object,java.lang.Object,java.lang.String)",
            "org.apache.catalina.valves.AbstractAccessLogValve$HostElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.AbstractAccessLogValve$LocalServerNameElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.AbstractAccessLogValve$PortElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.AbstractAccessLogValve$ProtocolElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.AbstractAccessLogValve$RemoteAddrElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.AbstractAccessLogValve$RequestAttributeElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.AbstractAccessLogValve$SessionAttributeElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.ExtendedAccessLogValve:java.lang.String wrap(java.lang.Object)",
            "org.apache.catalina.valves.rewrite.ResolverImpl:java.lang.String resolveEnv(java.lang.String)",
            "org.apache.naming.ContextBindings:java.lang.String getThreadName()",
            "org.apache.naming.ContextBindings:java.lang.String getClassLoaderName()",
            "org.apache.naming.factory.DataSourceLinkFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.naming.factory.EjbFactory:java.lang.Object getLinked(javax.naming.Reference)",
            "org.apache.naming.factory.FactoryBase:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.naming.factory.LookupFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.naming.factory.OpenEjbFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.naming.factory.ResourceLinkFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.tomcat.util.descriptor.web.CallMethodMultiRule:void end(java.lang.String,java.lang.String)",
            "org.apache.tomcat.util.descriptor.web.WebXml:void appendElement(java.lang.StringBuilder,java.lang.String,java.lang.String,java.lang.Object)",
            "org.apache.tomcat.util.digester.CallMethodRule:void end(java.lang.String,java.lang.String)",
            "org.apache.tomcat.util.json.JSONParser:java.lang.String objectKey()",
            "org.apache.tomcat.util.modeler.BaseModelMBean:java.lang.String toString()",
            "org.apache.tomcat.util.net.AbstractEndpoint:java.lang.String getProperty(java.lang.String)",
            "org.apache.tomcat.util.security.Escape:java.lang.String htmlElementContent(java.lang.Object)"
        ]
    },
    "org.apache.tomcat.util.http.ResponseUtil$HeaderAdapter:java.util.Collection getHeaders(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.ResponseUtil:void addVaryFieldName(org.apache.tomcat.util.http.ResponseUtil$Adapter,java.lang.String)"
        ]
    },
    "org.apache.tomcat.util.http.parser.TokenList:boolean parseTokenList(java.util.Enumeration,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.CompressionConfig:boolean useCompression(org.apache.coyote.Request,org.apache.coyote.Response)",
            "org.apache.coyote.http11.Http11Processor:void prepareRequest()",
            "org.apache.coyote.http11.Http11Processor:boolean isConnectionToken(org.apache.tomcat.util.http.MimeHeaders,java.lang.String)"
        ]
    },
    "org.apache.tomcat.util.http.parser.Upgrade:java.util.List parse(java.util.Enumeration)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.Request:java.lang.String getUpgradeProtocolName(java.lang.Class)"
        ]
    },
    "org.apache.tomcat.util.modeler.modules.MbeansDescriptorsIntrospectionSource:org.apache.tomcat.util.modeler.ManagedBean createManagedBean(org.apache.tomcat.util.modeler.Registry,java.lang.String,java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.modeler.modules.MbeansDescriptorsIntrospectionSource:void execute()"
        ]
    },
    "org.apache.tomcat.util.net.AbstractEndpoint:java.net.InetSocketAddress getUnlockAddress(java.net.InetSocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.AbstractEndpoint:void unlockAccept()"
        ]
    },
    "org.apache.tomcat.util.net.SSLUtilBase:javax.net.ssl.KeyManager[] getKeyManagers()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SSLUtilBase:org.apache.tomcat.util.net.SSLContext createSSLContext(java.util.List)",
            "org.apache.tomcat.util.net.openssl.OpenSSLUtil:javax.net.ssl.KeyManager[] getKeyManagers()"
        ]
    },
    "org.apache.tomcat.util.net.SSLUtilBase:void checkTrustStoreEntries(java.security.KeyStore)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SSLUtilBase:javax.net.ssl.TrustManager[] getTrustManagers()"
        ]
    },
    "org.apache.tomcat.util.res.StringManager:org.apache.tomcat.util.res.StringManager getManager(java.lang.String,java.util.Enumeration)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.HTMLManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.HTMLManagerServlet:void doPost(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.ManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.ManagerServlet:void doPut(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.StatusManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.host.HTMLHostManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.host.HTMLHostManagerServlet:void doPost(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.host.HostManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.valves.ErrorReportValve:void report(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,java.lang.Throwable)",
            "org.apache.catalina.valves.JsonErrorReportValve:void report(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,java.lang.Throwable)",
            "org.apache.tomcat.util.Diagnostics:java.lang.String getThreadDump(java.util.Enumeration)",
            "org.apache.tomcat.util.Diagnostics:java.lang.String getVMInfo(java.util.Enumeration)"
        ]
    },
    "org.apache.tomcat.util.scan.JarFileUrlJar:void nextEntry()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.ContextConfig:void processResourceJARs(java.util.Set)",
            "org.apache.catalina.startup.ContextConfig:void processAnnotationsJar(java.net.URL,org.apache.tomcat.util.descriptor.web.WebXml,boolean,java.util.Map)",
            "org.apache.tomcat.util.scan.ReferenceCountedJar:void nextEntry()"
        ]
    },
    "org.apache.catalina.core.ApplicationFilterChain$lambda_doFilter_0__7:java.lang.Object run()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.security.auth.message.config.AuthConfigFactory:jakarta.security.auth.message.config.AuthConfigFactory getFactory()",
            "org.apache.catalina.core.ApplicationFilterChain:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)"
        ]
    },
    "jakarta.servlet.http.HttpServlet:void service(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationFilterChain:void internalDoFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)"
        ]
    },
    "org.apache.catalina.servlets.WebdavServlet:void doProppatch(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.WebdavServlet:void service(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.servlets.WebdavServlet:void doDelete(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServlet:void service(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.servlets.WebdavServlet:void doCopy(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.WebdavServlet:void service(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.servlets.DefaultServlet:void doOptions(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServlet:void service(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.servlets.DefaultServlet:void sendNotAllowed(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.DefaultServlet:void doPut(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.DefaultServlet:void doDelete(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.WebdavServlet:void doPropfind(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.WebdavServlet:void doMkcol(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.WebdavServlet:void doDelete(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.WebdavServlet:void doPut(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.servlets.WebdavServlet:void doOptions(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServlet:void service(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.connector.CoyoteAdapter:void checkRecycled(org.apache.coyote.Request,org.apache.coyote.Response)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.ajp.AjpProcessor:void recycle()",
            "org.apache.coyote.http11.Http11Processor:void recycle()"
        ]
    },
    "org.apache.coyote.AbstractProcessor:void logAccess(org.apache.tomcat.util.net.SocketWrapperBase)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProcessorLight:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState process(org.apache.tomcat.util.net.SocketWrapperBase,org.apache.tomcat.util.net.SocketEvent)"
        ]
    },
    "org.apache.catalina.valves.rewrite.Substitution:java.lang.String evaluate(java.util.regex.Matcher,java.util.regex.Matcher,org.apache.catalina.valves.rewrite.Resolver)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.valves.rewrite.RewriteCond:boolean evaluate(java.util.regex.Matcher,java.util.regex.Matcher,org.apache.catalina.valves.rewrite.Resolver)",
            "org.apache.catalina.valves.rewrite.RewriteRule:java.lang.CharSequence evaluate(java.lang.CharSequence,org.apache.catalina.valves.rewrite.Resolver)"
        ]
    },
    "org.apache.catalina.valves.rewrite.Substitution:java.lang.String access$100(org.apache.catalina.valves.rewrite.Substitution,org.apache.catalina.valves.rewrite.Substitution$SubstitutionElement[],java.util.regex.Matcher,java.util.regex.Matcher,org.apache.catalina.valves.rewrite.Resolver)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.valves.rewrite.Substitution$MapElement:java.lang.String evaluate(java.util.regex.Matcher,java.util.regex.Matcher,org.apache.catalina.valves.rewrite.Resolver)"
        ]
    },
    "jakarta.servlet.http.HttpServletRequestWrapper:jakarta.servlet.http.Part getPart(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletRequestWrapper:jakarta.servlet.http.Part getPart(java.lang.String)",
            "org.apache.catalina.manager.HTMLManagerServlet:java.lang.String upload(jakarta.servlet.http.HttpServletRequest,org.apache.tomcat.util.res.StringManager)"
        ]
    },
    "org.apache.catalina.connector.RequestFacade:jakarta.servlet.http.Part getPart(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletRequestWrapper:jakarta.servlet.http.Part getPart(java.lang.String)",
            "org.apache.catalina.manager.HTMLManagerServlet:java.lang.String upload(jakarta.servlet.http.HttpServletRequest,org.apache.tomcat.util.res.StringManager)"
        ]
    },
    "org.apache.catalina.manager.HTMLManagerServlet:java.lang.String upload(jakarta.servlet.http.HttpServletRequest,org.apache.tomcat.util.res.StringManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.HTMLManagerServlet:void doPost(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.connector.RequestFacade$GetParameterPrivilegedAction:java.lang.Object run()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.security.auth.message.config.AuthConfigFactory:java.lang.String getFactoryClassName()",
            "jakarta.servlet.http.Cookie:void <clinit>()",
            "org.apache.catalina.connector.RequestFacade:java.lang.String getParameter(java.lang.String)",
            "org.apache.catalina.startup.ClassLoaderFactory:java.lang.ClassLoader createClassLoader(java.io.File[],java.io.File[],java.lang.ClassLoader)",
            "org.apache.catalina.startup.ClassLoaderFactory:java.lang.ClassLoader createClassLoader(java.util.List,java.lang.ClassLoader)",
            "org.apache.catalina.util.Introspection:java.lang.reflect.Field[] getDeclaredFields(java.lang.Class)",
            "org.apache.catalina.util.Introspection:java.lang.reflect.Method[] getDeclaredMethods(java.lang.Class)",
            "org.apache.juli.ClassLoaderLogManager:boolean addLogger(java.util.logging.Logger)",
            "org.apache.juli.ClassLoaderLogManager:org.apache.juli.ClassLoaderLogManager$ClassLoaderLogInfo getClassLoaderInfo(java.lang.ClassLoader)",
            "org.apache.juli.ClassLoaderLogManager:void doSetParentLogger(java.util.logging.Logger,java.util.logging.Logger)",
            "org.apache.juli.FileHandler$1:java.lang.Thread newThread(java.lang.Runnable)",
            "org.apache.naming.factory.MailSessionFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.naming.factory.SendMailFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.tomcat.util.compat.JrePlatform:void <clinit>()"
        ]
    },
    "org.apache.catalina.manager.host.HTMLHostManagerServlet:java.lang.String add(jakarta.servlet.http.HttpServletRequest,java.lang.String,org.apache.tomcat.util.res.StringManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.host.HTMLHostManagerServlet:void doPost(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "jakarta.servlet.ServletRequestWrapper:java.util.Map getParameterMap()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletRequestWrapper:java.util.Map getParameterMap()",
            "org.apache.catalina.core.ApplicationHttpRequest:void parseParameters()"
        ]
    },
    "org.apache.catalina.connector.RequestFacade$GetParameterMapPrivilegedAction:java.util.Map run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.RequestFacade$GetParameterMapPrivilegedAction:java.lang.Object run()"
        ]
    },
    "org.apache.catalina.connector.RequestFacade:java.util.Map getParameterMap()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletRequestWrapper:java.util.Map getParameterMap()",
            "org.apache.catalina.core.ApplicationHttpRequest:void parseParameters()"
        ]
    },
    "org.apache.catalina.core.ApplicationHttpRequest:void parseParameters()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationHttpRequest:java.lang.String getParameter(java.lang.String)",
            "org.apache.catalina.core.ApplicationHttpRequest:java.util.Map getParameterMap()",
            "org.apache.catalina.core.ApplicationHttpRequest:java.util.Enumeration getParameterNames()",
            "org.apache.catalina.core.ApplicationHttpRequest:java.lang.String[] getParameterValues(java.lang.String)"
        ]
    },
    "org.apache.catalina.connector.RequestFacade$GetParameterNamesPrivilegedAction:java.lang.Object run()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.security.auth.message.config.AuthConfigFactory:java.lang.String getFactoryClassName()",
            "jakarta.servlet.http.Cookie:void <clinit>()",
            "org.apache.catalina.connector.RequestFacade:java.util.Enumeration getParameterNames()",
            "org.apache.catalina.startup.ClassLoaderFactory:java.lang.ClassLoader createClassLoader(java.io.File[],java.io.File[],java.lang.ClassLoader)",
            "org.apache.catalina.startup.ClassLoaderFactory:java.lang.ClassLoader createClassLoader(java.util.List,java.lang.ClassLoader)",
            "org.apache.catalina.util.Introspection:java.lang.reflect.Field[] getDeclaredFields(java.lang.Class)",
            "org.apache.catalina.util.Introspection:java.lang.reflect.Method[] getDeclaredMethods(java.lang.Class)",
            "org.apache.juli.ClassLoaderLogManager:boolean addLogger(java.util.logging.Logger)",
            "org.apache.juli.ClassLoaderLogManager:org.apache.juli.ClassLoaderLogManager$ClassLoaderLogInfo getClassLoaderInfo(java.lang.ClassLoader)",
            "org.apache.juli.ClassLoaderLogManager:void doSetParentLogger(java.util.logging.Logger,java.util.logging.Logger)",
            "org.apache.juli.FileHandler$1:java.lang.Thread newThread(java.lang.Runnable)",
            "org.apache.naming.factory.MailSessionFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.naming.factory.SendMailFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.tomcat.util.compat.JrePlatform:void <clinit>()"
        ]
    },
    "org.apache.catalina.connector.RequestFacade$GetParameterValuePrivilegedAction:java.lang.Object run()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.security.auth.message.config.AuthConfigFactory:java.lang.String getFactoryClassName()",
            "jakarta.servlet.http.Cookie:void <clinit>()",
            "org.apache.catalina.connector.RequestFacade:java.lang.String[] getParameterValues(java.lang.String)",
            "org.apache.catalina.startup.ClassLoaderFactory:java.lang.ClassLoader createClassLoader(java.io.File[],java.io.File[],java.lang.ClassLoader)",
            "org.apache.catalina.startup.ClassLoaderFactory:java.lang.ClassLoader createClassLoader(java.util.List,java.lang.ClassLoader)",
            "org.apache.catalina.util.Introspection:java.lang.reflect.Field[] getDeclaredFields(java.lang.Class)",
            "org.apache.catalina.util.Introspection:java.lang.reflect.Method[] getDeclaredMethods(java.lang.Class)",
            "org.apache.juli.ClassLoaderLogManager:boolean addLogger(java.util.logging.Logger)",
            "org.apache.juli.ClassLoaderLogManager:org.apache.juli.ClassLoaderLogManager$ClassLoaderLogInfo getClassLoaderInfo(java.lang.ClassLoader)",
            "org.apache.juli.ClassLoaderLogManager:void doSetParentLogger(java.util.logging.Logger,java.util.logging.Logger)",
            "org.apache.juli.FileHandler$1:java.lang.Thread newThread(java.lang.Runnable)",
            "org.apache.naming.factory.MailSessionFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.naming.factory.SendMailFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.tomcat.util.compat.JrePlatform:void <clinit>()"
        ]
    },
    "org.apache.catalina.filters.RestCsrfPreventionFilter$FetchRequest:boolean apply(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.RestCsrfPreventionFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)"
        ]
    },
    "org.apache.catalina.filters.RestCsrfPreventionFilter$StateChangingRequest:boolean apply(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.RestCsrfPreventionFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)"
        ]
    },
    "org.apache.catalina.filters.RestCsrfPreventionFilter$StateChangingRequest:java.lang.String extractNonceFromRequest(jakarta.servlet.http.HttpServletRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.RestCsrfPreventionFilter$StateChangingRequest:boolean apply(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.filters.RestCsrfPreventionFilter$StateChangingRequest:java.lang.String extractNonceFromRequestParams(jakarta.servlet.http.HttpServletRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.RestCsrfPreventionFilter$StateChangingRequest:java.lang.String extractNonceFromRequest(jakarta.servlet.http.HttpServletRequest)"
        ]
    },
    "org.apache.catalina.connector.CoyoteReader:long skip(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.CoyoteReader:java.lang.String readLine()"
        ]
    },
    "org.apache.catalina.connector.InputBuffer:int read()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.CoyoteReader:int read()",
            "org.apache.tomcat.util.http.parser.Host:int parse(java.io.Reader)",
            "org.apache.tomcat.util.http.parser.HttpParser:int skipLws(java.io.Reader)",
            "org.apache.tomcat.util.http.parser.HttpParser:org.apache.tomcat.util.http.parser.SkipResult skipConstant(java.io.Reader,java.lang.String)",
            "org.apache.tomcat.util.http.parser.HttpParser:java.lang.String readToken(java.io.Reader)",
            "org.apache.tomcat.util.http.parser.HttpParser:java.lang.String readDigits(java.io.Reader)",
            "org.apache.tomcat.util.http.parser.HttpParser:java.lang.String readQuotedString(java.io.Reader,boolean)",
            "org.apache.tomcat.util.http.parser.HttpParser:java.lang.String readQuotedToken(java.io.Reader)",
            "org.apache.tomcat.util.http.parser.HttpParser:java.lang.String readLhex(java.io.Reader)",
            "org.apache.tomcat.util.http.parser.HttpParser:double readWeight(java.io.Reader,char)",
            "org.apache.tomcat.util.http.parser.HttpParser:int readHostIPv4(java.io.Reader,boolean)",
            "org.apache.tomcat.util.http.parser.HttpParser:int readHostIPv6(java.io.Reader)",
            "org.apache.tomcat.util.http.parser.HttpParser:int readHostDomainName(java.io.Reader)",
            "org.apache.tomcat.util.http.parser.HttpParser:org.apache.tomcat.util.http.parser.SkipResult skipUntil(java.io.Reader,int,char)"
        ]
    },
    "org.apache.catalina.connector.InputBuffer:int read(char[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.CoyoteReader:int read(char[])",
            "org.apache.catalina.connector.CoyoteReader:int read(char[],int,int)",
            "org.apache.catalina.connector.InputBuffer:int read(char[])",
            "org.apache.tomcat.util.json.JavaCharStream:void FillBuff()"
        ]
    },
    "org.apache.catalina.connector.CoyoteInputStream$PrivilegedRead:java.lang.Integer run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.CoyoteInputStream$PrivilegedRead:java.lang.Object run()"
        ]
    },
    "org.apache.catalina.connector.CoyoteInputStream$PrivilegedReadArray:java.lang.Integer run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.CoyoteInputStream$PrivilegedReadArray:java.lang.Object run()"
        ]
    },
    "org.apache.catalina.connector.CoyoteInputStream$PrivilegedReadBuffer:java.lang.Integer run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.CoyoteInputStream$PrivilegedReadBuffer:java.lang.Object run()"
        ]
    },
    "org.apache.tomcat.util.buf.B2CConverter:void convert(org.apache.tomcat.util.buf.ByteChunk,org.apache.tomcat.util.buf.CharChunk,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.CoyoteAdapter:void convertURI(org.apache.tomcat.util.buf.MessageBytes,org.apache.catalina.connector.Request)"
        ]
    },
    "org.apache.coyote.http11.filters.SavedRequestInputFilter:int doRead(org.apache.tomcat.util.net.ApplicationBufferHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.Request:int doRead(org.apache.tomcat.util.net.ApplicationBufferHandler)",
            "org.apache.coyote.http11.Http11InputBuffer:int doRead(org.apache.tomcat.util.net.ApplicationBufferHandler)",
            "org.apache.coyote.http11.filters.BufferedInputFilter:void setRequest(org.apache.coyote.Request)",
            "org.apache.coyote.http11.filters.ChunkedInputFilter:int readBytes()",
            "org.apache.coyote.http11.filters.IdentityInputFilter:int doRead(org.apache.tomcat.util.net.ApplicationBufferHandler)",
            "org.apache.coyote.http11.filters.IdentityInputFilter:long end()"
        ]
    },
    "org.apache.coyote.http2.Http2Parser:boolean readFrame(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2UpgradeHandler:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState upgradeDispatch(org.apache.tomcat.util.net.SocketEvent)"
        ]
    },
    "org.apache.coyote.http2.Http2Parser:void readConnectionPreface(jakarta.servlet.http.WebConnection,org.apache.coyote.http2.Stream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2UpgradeHandler:void init(jakarta.servlet.http.WebConnection)"
        ]
    },
    "org.apache.juli.AsyncFileHandler:void publishInternal(java.util.logging.LogRecord)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.juli.AsyncFileHandler$LogEntry:boolean flush()"
        ]
    },
    "org.apache.juli.AsyncFileHandler:void open()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tomcat.util.http.fileupload.FileUploadBase:java.util.Map parseParameterMap(org.apache.tomcat.util.http.fileupload.RequestContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.servlet.ServletFileUpload:java.util.Map parseParameterMap(jakarta.servlet.http.HttpServletRequest)"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.MultipartStream:int readBodyData(java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.MultipartStream:int discardBodyData()"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.util.Streams:java.lang.String asString(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tomcat.util.http.fileupload.util.Streams:java.lang.String asString(java.io.InputStream,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.juli.AsyncFileHandler:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.juli.ClassLoaderLogManager:void resetLoggers(org.apache.juli.ClassLoaderLogManager$ClassLoaderLogInfo)"
        ]
    },
    "org.apache.juli.ClassLoaderLogManager:void resetLoggers(org.apache.juli.ClassLoaderLogManager$ClassLoaderLogInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.juli.ClassLoaderLogManager:void reset()",
            "org.apache.juli.ClassLoaderLogManager:void shutdown()"
        ]
    },
    "org.apache.naming.NamingContext:void rename(javax.naming.Name,javax.naming.Name)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.naming.NamingContext:void rename(java.lang.String,java.lang.String)",
            "org.apache.naming.SelectorContext:void rename(javax.naming.Name,javax.naming.Name)"
        ]
    },
    "org.apache.naming.NamingContextBindingsEnumeration:javax.naming.Binding nextElementInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.naming.NamingContextBindingsEnumeration:javax.naming.Binding next()",
            "org.apache.naming.NamingContextBindingsEnumeration:javax.naming.Binding nextElement()"
        ]
    },
    "org.apache.naming.SelectorContext:java.lang.Object lookup(javax.naming.Name)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.naming.NamingContext:java.lang.Object lookup(javax.naming.Name,boolean)",
            "org.apache.naming.NamingContextBindingsEnumeration:javax.naming.Binding nextElementInternal()",
            "org.apache.naming.SelectorContext:java.lang.Object lookup(javax.naming.Name)"
        ]
    },
    "org.apache.catalina.core.DefaultInstanceManager:void lookupFieldResource(javax.naming.Context,java.lang.Object,java.lang.reflect.Field,java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.DefaultInstanceManager:void processAnnotations(java.lang.Object,java.util.Map)"
        ]
    },
    "org.apache.catalina.core.DefaultInstanceManager:void lookupMethodResource(javax.naming.Context,java.lang.Object,java.lang.reflect.Method,java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.DefaultInstanceManager:void processAnnotations(java.lang.Object,java.util.Map)"
        ]
    },
    "org.apache.catalina.core.NamingContextListener:void addResource(org.apache.tomcat.util.descriptor.web.ContextResource)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.NamingContextListener:void processGlobalResourcesChange(java.lang.String,java.lang.Object,java.lang.Object)",
            "org.apache.catalina.core.NamingContextListener:void createNamingContext()"
        ]
    },
    "org.apache.catalina.core.NamingContextListener:void createSubcontexts(javax.naming.Context,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.NamingContextListener:void addEjb(org.apache.tomcat.util.descriptor.web.ContextEjb)",
            "org.apache.catalina.core.NamingContextListener:void addEnvironment(org.apache.tomcat.util.descriptor.web.ContextEnvironment)",
            "org.apache.catalina.core.NamingContextListener:void addService(org.apache.tomcat.util.descriptor.web.ContextService)",
            "org.apache.catalina.core.NamingContextListener:void addResource(org.apache.tomcat.util.descriptor.web.ContextResource)",
            "org.apache.catalina.core.NamingContextListener:void addResourceEnvRef(org.apache.tomcat.util.descriptor.web.ContextResourceEnvRef)",
            "org.apache.catalina.core.NamingContextListener:void addResourceLink(org.apache.tomcat.util.descriptor.web.ContextResourceLink)"
        ]
    },
    "org.apache.catalina.deploy.NamingResourcesImpl:void cleanUp()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.deploy.NamingResourcesImpl:void stopInternal()"
        ]
    },
    "org.apache.catalina.mbeans.GlobalResourcesLifecycleListener:void createMBeans(java.lang.String,javax.naming.Context)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.mbeans.GlobalResourcesLifecycleListener:void createMBeans()",
            "org.apache.catalina.mbeans.GlobalResourcesLifecycleListener:void createMBeans(java.lang.String,javax.naming.Context)"
        ]
    },
    "org.apache.catalina.realm.DataSourceRealm:java.sql.Connection open()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.realm.DataSourceRealm:java.security.Principal authenticate(java.lang.String,java.lang.String)",
            "org.apache.catalina.realm.DataSourceRealm:java.lang.String getPassword(java.lang.String)",
            "org.apache.catalina.realm.DataSourceRealm:java.security.Principal getPrincipal(java.lang.String)",
            "org.apache.catalina.realm.DataSourceRealm:java.util.ArrayList getRoles(java.lang.String)"
        ]
    },
    "org.apache.catalina.realm.UserDatabaseRealm:org.apache.catalina.UserDatabase getUserDatabase()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.realm.UserDatabaseRealm:boolean hasRole(org.apache.catalina.Wrapper,java.security.Principal,java.lang.String)",
            "org.apache.catalina.realm.UserDatabaseRealm:void backgroundProcess()",
            "org.apache.catalina.realm.UserDatabaseRealm:java.lang.String getPassword(java.lang.String)",
            "org.apache.catalina.realm.UserDatabaseRealm:java.security.Principal getPrincipal(java.lang.String)",
            "org.apache.catalina.realm.UserDatabaseRealm:void startInternal()"
        ]
    },
    "org.apache.catalina.session.DataSourceStore:java.sql.Connection open()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.session.DataSourceStore:java.sql.Connection getConnection()"
        ]
    },
    "org.apache.naming.SelectorContext:java.lang.Object lookup(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.DefaultInstanceManager:void lookupFieldResource(javax.naming.Context,java.lang.Object,java.lang.reflect.Field,java.lang.String,java.lang.Class)",
            "org.apache.catalina.core.DefaultInstanceManager:void lookupMethodResource(javax.naming.Context,java.lang.Object,java.lang.reflect.Method,java.lang.String,java.lang.Class)",
            "org.apache.catalina.core.NamingContextListener:void addResource(org.apache.tomcat.util.descriptor.web.ContextResource)",
            "org.apache.catalina.core.NamingContextListener:void createSubcontexts(javax.naming.Context,java.lang.String)",
            "org.apache.catalina.deploy.NamingResourcesImpl:void cleanUp()",
            "org.apache.catalina.mbeans.GlobalResourcesLifecycleListener:void createMBeans(java.lang.String,javax.naming.Context)",
            "org.apache.catalina.realm.DataSourceRealm:java.sql.Connection open()",
            "org.apache.catalina.realm.UserDatabaseRealm:org.apache.catalina.UserDatabase getUserDatabase()",
            "org.apache.catalina.session.DataSourceStore:java.sql.Connection open()",
            "org.apache.naming.SelectorContext:java.lang.Object lookup(java.lang.String)",
            "org.apache.naming.factory.ResourceLinkFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)"
        ]
    },
    "org.apache.naming.factory.ResourceLinkFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.naming.NamingContext:java.lang.Object lookup(javax.naming.Name,boolean)",
            "org.apache.naming.factory.DataSourceLinkFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.naming.factory.FactoryBase:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.naming.factory.LookupFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)"
        ]
    },
    "org.apache.naming.SelectorContext:java.lang.Object lookupLink(javax.naming.Name)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.naming.SelectorContext:java.lang.Object lookupLink(javax.naming.Name)"
        ]
    },
    "org.apache.naming.SelectorContext:java.lang.Object lookupLink(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.naming.SelectorContext:java.lang.Object lookupLink(java.lang.String)"
        ]
    },
    "org.apache.catalina.core.ApplicationPart:java.lang.String getString(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.Request:void parseParts(boolean)"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.impl.FileItemIteratorImpl:boolean findNextItem()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.impl.FileItemIteratorImpl:void <init>(org.apache.tomcat.util.http.fileupload.FileUploadBase,org.apache.tomcat.util.http.fileupload.RequestContext)",
            "org.apache.tomcat.util.http.fileupload.impl.FileItemIteratorImpl:boolean hasNext()"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.impl.FileItemStreamImpl:void <init>(org.apache.tomcat.util.http.fileupload.impl.FileItemIteratorImpl,java.lang.String,java.lang.String,java.lang.String,boolean,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.impl.FileItemIteratorImpl:boolean findNextItem()"
        ]
    },
    "org.apache.catalina.servlets.DefaultServlet:java.io.InputStream render(jakarta.servlet.http.HttpServletRequest,java.lang.String,org.apache.catalina.WebResource,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.DefaultServlet:void serveResource(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,boolean,java.lang.String)"
        ]
    },
    "org.apache.catalina.util.DOMWriter:void printChildren(org.w3c.dom.Node)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.DOMWriter:void print(org.w3c.dom.Node)"
        ]
    },
    "org.apache.catalina.core.ContainerBase:void backgroundProcess()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor:void processChildren(org.apache.catalina.Container)",
            "org.apache.catalina.core.StandardContext:void backgroundProcess()",
            "org.apache.catalina.core.StandardWrapper:void backgroundProcess()"
        ]
    },
    "org.apache.catalina.connector.Connector:java.lang.String createObjectNameKeyProperties(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.Connector:java.lang.String getObjectNameKeyProperties()"
        ]
    },
    "org.apache.catalina.connector.Request$2:java.lang.Object get(org.apache.catalina.connector.Request,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.Request:java.lang.Object getAttribute(java.lang.String)"
        ]
    },
    "org.apache.catalina.connector.Request:void setAttribute(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletRequestWrapper:void setAttribute(java.lang.String,java.lang.Object)",
            "org.apache.catalina.authenticator.FormAuthenticator:void forwardToLoginPage(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.descriptor.web.LoginConfig)",
            "org.apache.catalina.authenticator.FormAuthenticator:void forwardToErrorPage(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.descriptor.web.LoginConfig)",
            "org.apache.catalina.connector.RequestFacade:void setAttribute(java.lang.String,java.lang.Object)",
            "org.apache.catalina.core.ApplicationDispatcher:void processRequest(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,org.apache.catalina.core.ApplicationDispatcher$State)",
            "org.apache.catalina.core.ApplicationFilterChain:void internalDoFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)",
            "org.apache.catalina.core.ApplicationHttpRequest:void setAttribute(java.lang.String,java.lang.Object)",
            "org.apache.catalina.core.ApplicationRequest:void setAttribute(java.lang.String,java.lang.Object)",
            "org.apache.catalina.core.AsyncContextImpl:void dispatch(jakarta.servlet.ServletContext,java.lang.String)",
            "org.apache.catalina.core.AsyncContextImpl:void setErrorState(java.lang.Throwable,boolean)",
            "org.apache.catalina.core.StandardContext:boolean fireRequestInitEvent(jakarta.servlet.ServletRequest)",
            "org.apache.catalina.core.StandardContext:boolean fireRequestDestroyEvent(jakarta.servlet.ServletRequest)",
            "org.apache.catalina.core.StandardContextValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.core.StandardHostValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.core.StandardHostValve:void status(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.core.StandardHostValve:void throwable(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,java.lang.Throwable)",
            "org.apache.catalina.core.StandardWrapperValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.core.StandardWrapperValve:void exception(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,java.lang.Throwable)",
            "org.apache.catalina.filters.CorsFilter:void decorateCORSProperties(jakarta.servlet.http.HttpServletRequest,org.apache.catalina.filters.CorsFilter$CORSRequestType)",
            "org.apache.catalina.filters.CsrfPreventionFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.filters.RemoteIpFilter:void doFilter(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.manager.HTMLManagerServlet:void sslConnectorCiphers(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.HTMLManagerServlet:void sslConnectorCerts(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.HTMLManagerServlet:void sslConnectorTrustedCerts(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.HTMLManagerServlet:void doSessions(org.apache.catalina.util.ContextName,jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.HTMLManagerServlet:void displaySessionsListPage(org.apache.catalina.util.ContextName,jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.HTMLManagerServlet:void displaySessionDetailPage(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.catalina.util.ContextName,java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.servlets.DefaultServlet:boolean checkSendfile(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.catalina.WebResource,long,org.apache.tomcat.util.http.parser.Ranges$Entry)",
            "org.apache.catalina.valves.RemoteIpValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.SSLValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.rewrite.RewriteValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)"
        ]
    },
    "org.apache.catalina.core.DefaultInstanceManager:void loadProperties(java.util.Set,java.lang.String,java.lang.String,org.apache.juli.logging.Log)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.DefaultInstanceManager:void <init>(javax.naming.Context,java.util.Map,org.apache.catalina.Context,java.lang.ClassLoader)"
        ]
    },
    "org.apache.catalina.core.NamingContextListener:void addResourceLink(org.apache.tomcat.util.descriptor.web.ContextResourceLink)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.NamingContextListener:void processGlobalResourcesChange(java.lang.String,java.lang.Object,java.lang.Object)",
            "org.apache.catalina.core.NamingContextListener:void createNamingContext()"
        ]
    },
    "org.apache.catalina.loader.WebappClassLoaderBase:void checkThreadLocalMapForLeaks(java.lang.Object,java.lang.reflect.Field)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.loader.WebappClassLoaderBase:void checkThreadLocalsForLeaks()"
        ]
    },
    "org.apache.catalina.manager.JMXProxyServlet:void getAttribute(java.io.PrintWriter,java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.JMXProxyServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.manager.JMXProxyServlet:void output(java.lang.String,java.io.PrintWriter,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.JMXProxyServlet:void invokeOperation(java.io.PrintWriter,java.lang.String,java.lang.String,java.lang.String[])",
            "org.apache.catalina.manager.JMXProxyServlet:void output(java.lang.String,java.io.PrintWriter,java.lang.Object)"
        ]
    },
    "org.apache.catalina.manager.JspHelper:java.lang.String escapeXml(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.JspHelper:java.lang.String guessDisplayUserFromSession(org.apache.catalina.Session)"
        ]
    },
    "org.apache.catalina.mapper.MapperListener:void containerEvent(org.apache.catalina.ContainerEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ContainerBase:void fireContainerEvent(java.lang.String,java.lang.Object)"
        ]
    },
    "org.apache.catalina.mbeans.MBeanDumper:java.lang.String valueToString(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.mbeans.MBeanDumper:java.lang.String dumpBeans(javax.management.MBeanServer,java.util.Set)",
            "org.apache.catalina.mbeans.MBeanDumper:java.lang.String tableItemToString(java.lang.Object)"
        ]
    },
    "org.apache.catalina.realm.JNDIRealm:java.lang.String getAttributeValue(java.lang.String,javax.naming.directory.Attributes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.realm.JNDIRealm:org.apache.catalina.realm.JNDIRealm$User getUserByPattern(javax.naming.directory.DirContext,java.lang.String,java.lang.String[],java.lang.String)",
            "org.apache.catalina.realm.JNDIRealm:org.apache.catalina.realm.JNDIRealm$User getUserBySearch(org.apache.catalina.realm.JNDIRealm$JNDIConnection,java.lang.String,java.lang.String[])",
            "org.apache.catalina.realm.JNDIRealm:java.util.List getRoles(org.apache.catalina.realm.JNDIRealm$JNDIConnection,org.apache.catalina.realm.JNDIRealm$User)"
        ]
    },
    "org.apache.catalina.session.ManagerBase:java.lang.String getSessionAttribute(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.session.ManagerBase:java.util.HashMap getSession(java.lang.String)"
        ]
    },
    "org.apache.catalina.util.ToStringUtil:java.lang.String containedToString(java.lang.Object,java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.ToStringUtil:java.lang.String toString(java.lang.Object,org.apache.catalina.Container)",
            "org.apache.catalina.util.ToStringUtil:java.lang.String toString(java.lang.Object,org.apache.catalina.Manager)"
        ]
    },
    "org.apache.catalina.valves.AbstractAccessLogValve$SessionAttributeElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.valves.AbstractAccessLogValve:void log(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)"
        ]
    },
    "org.apache.catalina.valves.ExtendedAccessLogValve:java.lang.String wrap(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.valves.ExtendedAccessLogValve$10:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.ExtendedAccessLogValve$11:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.ExtendedAccessLogValve$12:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.ExtendedAccessLogValve$14:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.ExtendedAccessLogValve$4:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.ExtendedAccessLogValve$5:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.ExtendedAccessLogValve$6:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.ExtendedAccessLogValve$7:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.ExtendedAccessLogValve$8:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.ExtendedAccessLogValve$9:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.ExtendedAccessLogValve$CookieElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.ExtendedAccessLogValve$RequestAttributeElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.ExtendedAccessLogValve$RequestHeaderElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.ExtendedAccessLogValve$RequestParameterElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.ExtendedAccessLogValve$ResponseAllHeaderElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.ExtendedAccessLogValve$ResponseHeaderElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.ExtendedAccessLogValve$ServletContextElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.ExtendedAccessLogValve$SessionAttributeElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)"
        ]
    },
    "org.apache.catalina.webresources.StandardRoot:java.util.List getTrackedResources()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.naming.ContextBindings:java.lang.String getThreadName()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.naming.SelectorContext:javax.naming.Context getBoundContext()"
        ]
    },
    "org.apache.naming.ContextBindings:java.lang.String getClassLoaderName()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.naming.SelectorContext:javax.naming.Context getBoundContext()"
        ]
    },
    "org.apache.naming.factory.DataSourceLinkFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.naming.NamingContext:java.lang.Object lookup(javax.naming.Name,boolean)",
            "org.apache.naming.factory.FactoryBase:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.naming.factory.LookupFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)"
        ]
    },
    "org.apache.naming.factory.EjbFactory:java.lang.Object getLinked(javax.naming.Reference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.naming.factory.FactoryBase:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)"
        ]
    },
    "org.apache.naming.factory.OpenEjbFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.naming.NamingContext:java.lang.Object lookup(javax.naming.Name,boolean)",
            "org.apache.naming.factory.FactoryBase:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.naming.factory.LookupFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)"
        ]
    },
    "org.apache.tomcat.util.descriptor.web.CallMethodMultiRule:void end(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.digester.Digester:void endElement(java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.tomcat.util.descriptor.web.WebXml:void appendElement(java.lang.StringBuilder,java.lang.String,java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.descriptor.web.WebXml:java.lang.String toXml()"
        ]
    },
    "org.apache.tomcat.util.digester.CallMethodRule:void end(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.descriptor.web.CallMethodMultiRule:void end(java.lang.String,java.lang.String)",
            "org.apache.tomcat.util.descriptor.web.LifecycleCallbackRule:void end(java.lang.String,java.lang.String)",
            "org.apache.tomcat.util.digester.Digester:void endElement(java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.tomcat.util.json.JSONParser:java.lang.String objectKey()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.json.JSONParser:java.util.LinkedHashMap object()"
        ]
    },
    "org.apache.tomcat.util.modeler.BaseModelMBean:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.Connector:java.lang.String createObjectNameKeyProperties(java.lang.String)",
            "org.apache.catalina.connector.Request$2:java.lang.Object get(org.apache.catalina.connector.Request,java.lang.String)",
            "org.apache.catalina.connector.Request:void setAttribute(java.lang.String,java.lang.Object)",
            "org.apache.catalina.core.ApplicationFilterFactory:org.apache.catalina.core.ApplicationFilterChain createFilterChain(jakarta.servlet.ServletRequest,org.apache.catalina.Wrapper,jakarta.servlet.Servlet)",
            "org.apache.catalina.core.ApplicationHttpRequest:java.lang.Object getAttribute(java.lang.String)",
            "org.apache.catalina.core.DefaultInstanceManager:void loadProperties(java.util.Set,java.lang.String,java.lang.String,org.apache.juli.logging.Log)",
            "org.apache.catalina.core.NamingContextListener:void addResourceLink(org.apache.tomcat.util.descriptor.web.ContextResourceLink)",
            "org.apache.catalina.loader.WebappClassLoaderBase:void checkThreadLocalMapForLeaks(java.lang.Object,java.lang.reflect.Field)",
            "org.apache.catalina.manager.JMXProxyServlet:void getAttribute(java.io.PrintWriter,java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.catalina.manager.JMXProxyServlet:void output(java.lang.String,java.io.PrintWriter,java.lang.Object)",
            "org.apache.catalina.manager.JspHelper:java.lang.String escapeXml(java.lang.Object)",
            "org.apache.catalina.mapper.MapperListener:void containerEvent(org.apache.catalina.ContainerEvent)",
            "org.apache.catalina.mbeans.MBeanDumper:java.lang.String valueToString(java.lang.Object)",
            "org.apache.catalina.realm.JNDIRealm:java.lang.String getAttributeValue(java.lang.String,javax.naming.directory.Attributes)",
            "org.apache.catalina.servlets.CGIServlet$CGIRunner:java.lang.String[] hashToStringArray(java.util.Hashtable)",
            "org.apache.catalina.session.ManagerBase:java.lang.String getSessionAttribute(java.lang.String,java.lang.String)",
            "org.apache.catalina.users.MemoryUserDatabaseFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.catalina.util.ToStringUtil:java.lang.String containedToString(java.lang.Object,java.lang.Object,java.lang.String)",
            "org.apache.catalina.valves.AbstractAccessLogValve$HostElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.AbstractAccessLogValve$LocalServerNameElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.AbstractAccessLogValve$PortElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.AbstractAccessLogValve$ProtocolElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.AbstractAccessLogValve$RemoteAddrElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.AbstractAccessLogValve$RequestAttributeElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.AbstractAccessLogValve$SessionAttributeElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.ExtendedAccessLogValve:java.lang.String wrap(java.lang.Object)",
            "org.apache.catalina.valves.rewrite.ResolverImpl:java.lang.String resolveEnv(java.lang.String)",
            "org.apache.naming.ContextBindings:java.lang.String getThreadName()",
            "org.apache.naming.ContextBindings:java.lang.String getClassLoaderName()",
            "org.apache.naming.factory.DataSourceLinkFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.naming.factory.EjbFactory:java.lang.Object getLinked(javax.naming.Reference)",
            "org.apache.naming.factory.FactoryBase:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.naming.factory.LookupFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.naming.factory.OpenEjbFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.naming.factory.ResourceLinkFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.tomcat.util.descriptor.web.CallMethodMultiRule:void end(java.lang.String,java.lang.String)",
            "org.apache.tomcat.util.descriptor.web.WebXml:void appendElement(java.lang.StringBuilder,java.lang.String,java.lang.String,java.lang.Object)",
            "org.apache.tomcat.util.digester.CallMethodRule:void end(java.lang.String,java.lang.String)",
            "org.apache.tomcat.util.json.JSONParser:java.lang.String objectKey()",
            "org.apache.tomcat.util.modeler.BaseModelMBean:java.lang.String toString()",
            "org.apache.tomcat.util.net.AbstractEndpoint:java.lang.String getProperty(java.lang.String)",
            "org.apache.tomcat.util.security.Escape:java.lang.String htmlElementContent(java.lang.Object)"
        ]
    },
    "org.apache.tomcat.util.net.AbstractEndpoint:java.lang.String getProperty(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProtocol:java.lang.String getProperty(java.lang.String)"
        ]
    },
    "org.apache.tomcat.util.security.Escape:java.lang.String htmlElementContent(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.StatusTransformer:void writeProcessorState(java.io.PrintWriter,javax.management.ObjectName,javax.management.MBeanServer,int)"
        ]
    },
    "jakarta.servlet.http.NoBodyOutputStream:void write(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream:void write(int)",
            "org.apache.catalina.startup.Catalina:void stopServer(java.lang.String[])",
            "org.apache.tomcat.util.http.fileupload.ThresholdingOutputStream:void write(int)",
            "org.apache.tomcat.util.http.fileupload.util.mime.QuotedPrintableDecoder:int decode(byte[],java.io.OutputStream)"
        ]
    },
    "jakarta.servlet.http.NoBodyOutputStream:void write(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream:void write(byte[],int,int)",
            "org.apache.catalina.servlets.CGIServlet$CGIRunner:void run()",
            "org.apache.catalina.servlets.DefaultServlet:java.io.IOException copyRange(java.io.InputStream,jakarta.servlet.ServletOutputStream)",
            "org.apache.catalina.servlets.DefaultServlet:java.io.IOException copyRange(java.io.InputStream,jakarta.servlet.ServletOutputStream,long,long)",
            "org.apache.catalina.util.IOTools:void flow(java.io.InputStream,java.io.OutputStream)",
            "org.apache.tomcat.util.http.fileupload.ByteArrayOutputStream:void writeTo(java.io.OutputStream)",
            "org.apache.tomcat.util.http.fileupload.IOUtils:long copyLarge(java.io.InputStream,java.io.OutputStream)",
            "org.apache.tomcat.util.http.fileupload.ThresholdingOutputStream:void write(byte[],int,int)",
            "org.apache.tomcat.util.http.fileupload.util.Streams:long copy(java.io.InputStream,java.io.OutputStream,boolean,byte[])"
        ]
    },
    "org.apache.catalina.connector.Response:void sendRedirect(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletResponseWrapper:void sendRedirect(java.lang.String)",
            "org.apache.catalina.authenticator.FormAuthenticator:boolean doAuthenticate(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.connector.CoyoteAdapter:boolean postParseRequest(org.apache.coyote.Request,org.apache.catalina.connector.Request,org.apache.coyote.Response,org.apache.catalina.connector.Response)",
            "org.apache.catalina.connector.ResponseFacade:void sendRedirect(java.lang.String)",
            "org.apache.catalina.core.ApplicationHttpResponse:void sendRedirect(java.lang.String)",
            "org.apache.catalina.filters.WebdavFixFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.servlets.DefaultServlet:void doDirectoryRedirect(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.valves.rewrite.RewriteValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)"
        ]
    },
    "org.apache.catalina.realm.RealmBase:boolean hasUserDataPermission(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,org.apache.tomcat.util.descriptor.web.SecurityConstraint[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.AuthenticatorBase:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)"
        ]
    },
    "org.apache.catalina.connector.ResponseFacade$FlushBufferPrivilegedAction:java.lang.Object run()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.security.auth.message.config.AuthConfigFactory:jakarta.security.auth.message.config.AuthConfigFactory getFactory()",
            "org.apache.catalina.connector.ResponseFacade:void flushBuffer()",
            "org.apache.catalina.core.ApplicationFilterChain:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)"
        ]
    },
    "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream:void write(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream:void write(int)",
            "org.apache.catalina.startup.Catalina:void stopServer(java.lang.String[])",
            "org.apache.tomcat.util.http.fileupload.ThresholdingOutputStream:void write(int)",
            "org.apache.tomcat.util.http.fileupload.util.mime.QuotedPrintableDecoder:int decode(byte[],java.io.OutputStream)"
        ]
    },
    "org.apache.catalina.connector.CoyoteOutputStream:void write(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletOutputStream:void print(java.lang.String)",
            "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream:void write(byte[])",
            "org.apache.catalina.servlets.DefaultServlet:void serveResource(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,boolean,java.lang.String)",
            "org.apache.tomcat.util.http.fileupload.ThresholdingOutputStream:void write(byte[])"
        ]
    },
    "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream:void write(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream:void write(byte[],int,int)",
            "org.apache.catalina.servlets.CGIServlet$CGIRunner:void run()",
            "org.apache.catalina.servlets.DefaultServlet:java.io.IOException copyRange(java.io.InputStream,jakarta.servlet.ServletOutputStream)",
            "org.apache.catalina.servlets.DefaultServlet:java.io.IOException copyRange(java.io.InputStream,jakarta.servlet.ServletOutputStream,long,long)",
            "org.apache.catalina.util.IOTools:void flow(java.io.InputStream,java.io.OutputStream)",
            "org.apache.tomcat.util.http.fileupload.ByteArrayOutputStream:void writeTo(java.io.OutputStream)",
            "org.apache.tomcat.util.http.fileupload.IOUtils:long copyLarge(java.io.InputStream,java.io.OutputStream)",
            "org.apache.tomcat.util.http.fileupload.ThresholdingOutputStream:void write(byte[],int,int)",
            "org.apache.tomcat.util.http.fileupload.util.Streams:long copy(java.io.InputStream,java.io.OutputStream,boolean,byte[])"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.util.mime.MimeUtility:java.lang.String decodeText(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.ParameterParser:java.util.Map parse(char[],int,int,char)"
        ]
    },
    "org.apache.catalina.manager.ManagerServlet:void deploy(java.io.PrintWriter,java.lang.String,org.apache.catalina.util.ContextName,java.lang.String,boolean,jakarta.servlet.http.HttpServletRequest,org.apache.tomcat.util.res.StringManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.ManagerServlet:void doPut(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.startup.HostConfig$DeployWar:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.AsyncContextImpl$RunnableWrapper:void run()",
            "org.apache.catalina.core.AsyncContextImpl:void doInternalDispatch()",
            "org.apache.catalina.core.StandardThreadExecutor:void execute(java.lang.Runnable)",
            "org.apache.coyote.AbstractProcessor:void execute(java.lang.Runnable)",
            "org.apache.coyote.AsyncStateMachine:void asyncRun(java.lang.Runnable)",
            "org.apache.tomcat.util.net.Nio2Endpoint:void stopInternal()",
            "org.apache.tomcat.util.net.SecureNio2Channel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()",
            "org.apache.tomcat.util.net.SecureNioChannel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()",
            "org.apache.tomcat.util.net.SocketWrapperBase:void execute(java.lang.Runnable)",
            "org.apache.tomcat.util.threads.InlineExecutorService:void execute(java.lang.Runnable)",
            "org.apache.tomcat.util.threads.ScheduledThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.tomcat.util.threads.TaskThread$WrappingRunnable:void run()",
            "org.apache.tomcat.util.threads.ThreadPoolExecutor:void execute(java.lang.Runnable,long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.apache.catalina.startup.HostConfig:void deployApps(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.HostConfig:void check(java.lang.String)"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.ThresholdingOutputStream:void checkThreshold(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.ThresholdingOutputStream:void write(int)",
            "org.apache.tomcat.util.http.fileupload.ThresholdingOutputStream:void write(byte[])",
            "org.apache.tomcat.util.http.fileupload.ThresholdingOutputStream:void write(byte[],int,int)"
        ]
    },
    "org.apache.coyote.http2.Http2AsyncUpgradeHandler:void setting(org.apache.coyote.http2.Setting,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2Parser:void readSettingsFrame(int,int,java.nio.ByteBuffer)"
        ]
    },
    "org.apache.coyote.http2.Http2AsyncUpgradeHandler:void incrementWindowSize(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2Parser:void readWindowUpdateFrame(int,java.nio.ByteBuffer)"
        ]
    },
    "org.apache.coyote.http2.Http2Parser:void readWindowUpdateFrame(int,java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2AsyncParser$FrameCompletionHandler:void completed(java.lang.Long,java.lang.Void)",
            "org.apache.coyote.http2.Http2Parser:boolean readFrame(boolean,org.apache.coyote.http2.FrameType)"
        ]
    },
    "org.apache.coyote.http2.Http2UpgradeHandler:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2UpgradeHandler:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState upgradeDispatch(org.apache.tomcat.util.net.SocketEvent)",
            "org.apache.coyote.http2.Http2UpgradeHandler:void closeConnection(org.apache.coyote.http2.Http2Exception)",
            "org.apache.coyote.http2.Http2UpgradeHandler:void handleAppInitiatedIOException(java.io.IOException)",
            "org.apache.coyote.http2.Http2UpgradeHandler:int reserveWindowSize(org.apache.coyote.http2.Stream,int,boolean)",
            "org.apache.coyote.http2.Http2UpgradeHandler:void goaway(int,long,java.lang.String)"
        ]
    },
    "org.apache.coyote.http2.Http2UpgradeHandler:void reset(int,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2AsyncUpgradeHandler:void reset(int,long)",
            "org.apache.coyote.http2.Http2Parser:void readRstFrame(int,java.nio.ByteBuffer)"
        ]
    },
    "org.apache.coyote.http2.Http2AsyncParser$FrameCompletionHandler:void failed(java.lang.Throwable,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2AsyncUpgradeHandler$SendfileCompletionHandler:void failed(java.lang.Throwable,org.apache.coyote.http2.SendfileData)",
            "org.apache.tomcat.util.net.Nio2Channel$3:void read(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.Nio2Channel$3:void read(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.Nio2Channel$3:void write(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.Nio2Channel$3:void write(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SecureNio2Channel$1:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$2:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$3:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$4:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void write(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void write(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SocketWrapperBase$VectoredIOCompletionHandler:void failed(java.lang.Throwable,org.apache.tomcat.util.net.SocketWrapperBase$OperationState)",
            "org.apache.tomcat.util.net.SocketWrapperBase:org.apache.tomcat.util.net.SocketWrapperBase$CompletionState vectoredOperation(boolean,java.nio.ByteBuffer[],int,int,org.apache.tomcat.util.net.SocketWrapperBase$BlockingMode,long,java.util.concurrent.TimeUnit,java.lang.Object,org.apache.tomcat.util.net.SocketWrapperBase$CompletionCheck,java.nio.channels.CompletionHandler)"
        ]
    },
    "org.apache.coyote.http2.Stream:void writeHeaders()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.StreamProcessor:void prepareResponse()"
        ]
    },
    "org.apache.coyote.http2.Stream:void writeTrailers()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Stream$StreamOutputBuffer:void end()"
        ]
    },
    "org.apache.coyote.http2.Stream:void writeAck()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.StreamProcessor:void ack(org.apache.coyote.ContinueResponseTiming)"
        ]
    },
    "org.apache.catalina.authenticator.AuthenticatorBase:boolean reauthenticateFromSSO(java.lang.String,org.apache.catalina.connector.Request)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.AuthenticatorBase:boolean checkForCachedAuthentication(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse,boolean)"
        ]
    },
    "org.apache.catalina.authenticator.jaspic.CallbackHandlerImpl:void handle(javax.security.auth.callback.Callback[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.realm.JAASMemoryLoginModule:boolean login()",
            "org.apache.catalina.realm.JAASMemoryLoginModule:java.lang.String getCatalinaBase()"
        ]
    },
    "org.apache.catalina.core.ContainerBase:org.apache.catalina.Realm getRealm()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.AuthenticatorBase:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.authenticator.AuthenticatorBase:boolean checkForCachedAuthentication(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse,boolean)",
            "org.apache.catalina.authenticator.AuthenticatorBase:boolean reauthenticateFromSSO(java.lang.String,org.apache.catalina.connector.Request)",
            "org.apache.catalina.authenticator.AuthenticatorBase:java.security.Principal doLogin(org.apache.catalina.connector.Request,java.lang.String,java.lang.String)",
            "org.apache.catalina.authenticator.BasicAuthenticator:boolean doAuthenticate(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.authenticator.DigestAuthenticator:boolean doAuthenticate(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.authenticator.FormAuthenticator:boolean doAuthenticate(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.authenticator.SSLAuthenticator:boolean doAuthenticate(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.authenticator.SpnegoAuthenticator:boolean doAuthenticate(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.authenticator.jaspic.CallbackHandlerImpl:void handle(javax.security.auth.callback.Callback[])",
            "org.apache.catalina.connector.CoyoteAdapter:void doConnectorAuthenticationAuthorization(org.apache.coyote.Request,org.apache.catalina.connector.Request)",
            "org.apache.catalina.connector.Request:boolean isUserInRole(java.lang.String)",
            "org.apache.catalina.core.ContainerBase:org.apache.catalina.Realm getRealm()",
            "org.apache.catalina.core.StandardEngine:org.apache.catalina.Realm getRealm()",
            "org.apache.catalina.startup.ContextConfig:void authenticatorConfig()"
        ]
    },
    "org.apache.catalina.core.StandardEngine:void initInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void init()"
        ]
    },
    "org.apache.catalina.mbeans.MBeanFactory:java.lang.String createDataSourceRealm(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.mbeans.MBeanFactory:java.lang.String createJNDIRealm(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.mbeans.MBeanFactory:java.lang.String createMemoryRealm(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.mbeans.MBeanFactory:java.lang.String createUserDatabaseRealm(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.startup.Tomcat:void setHost(org.apache.catalina.Host)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.startup.Tomcat:org.apache.catalina.Host getHost()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.Tomcat:org.apache.catalina.Context addWebapp(java.lang.String,java.lang.String)",
            "org.apache.catalina.startup.Tomcat:org.apache.catalina.Context addWebapp(java.lang.String,java.net.URL)",
            "org.apache.catalina.startup.Tomcat:org.apache.catalina.Context addContext(java.lang.String,java.lang.String)",
            "org.apache.catalina.startup.Tomcat:org.apache.catalina.Wrapper addServlet(java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.catalina.startup.Tomcat:org.apache.catalina.Wrapper addServlet(java.lang.String,java.lang.String,jakarta.servlet.Servlet)",
            "org.apache.catalina.startup.Tomcat:org.apache.catalina.Context addContext(org.apache.catalina.Host,java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.catalina.startup.Tomcat:org.apache.catalina.Context addWebapp(org.apache.catalina.Host,java.lang.String,java.lang.String)",
            "org.apache.catalina.startup.Tomcat:org.apache.catalina.Context addWebapp(org.apache.catalina.Host,java.lang.String,java.lang.String,org.apache.catalina.LifecycleListener)",
            "org.apache.catalina.startup.Tomcat:java.lang.String getLoggerName(org.apache.catalina.Host,java.lang.String)",
            "org.apache.catalina.startup.Tomcat:org.apache.catalina.Context createContext(org.apache.catalina.Host,java.lang.String)",
            "org.apache.catalina.startup.Tomcat:void initWebappDefaults(java.lang.String)",
            "org.apache.catalina.startup.Tomcat:java.net.URL getWebappConfigFileFromDirectory(java.io.File,java.lang.String)",
            "org.apache.catalina.startup.Tomcat:java.net.URL getWebappConfigFileFromWar(java.io.File,java.lang.String)"
        ]
    },
    "org.apache.catalina.core.StandardContext:void addChild(org.apache.catalina.Container)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationContext:jakarta.servlet.ServletRegistration$Dynamic addServlet(java.lang.String,java.lang.String,jakarta.servlet.Servlet,java.util.Map)",
            "org.apache.catalina.mbeans.ContainerMBean:void addChild(java.lang.String,java.lang.String)",
            "org.apache.catalina.startup.ContextConfig:void configureContext(org.apache.tomcat.util.descriptor.web.WebXml)",
            "org.apache.catalina.startup.Tomcat:org.apache.catalina.Wrapper addServlet(org.apache.catalina.Context,java.lang.String,java.lang.String)",
            "org.apache.catalina.startup.Tomcat:org.apache.catalina.Wrapper addServlet(org.apache.catalina.Context,java.lang.String,jakarta.servlet.Servlet)"
        ]
    },
    "org.apache.catalina.core.StandardContext:void resetContext()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.StandardContext:void stopInternal()"
        ]
    },
    "org.apache.catalina.startup.ContextConfig:void configureStop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.ContextConfig:void lifecycleEvent(org.apache.catalina.LifecycleEvent)"
        ]
    },
    "org.apache.catalina.manager.host.HTMLHostManagerServlet:java.lang.String remove(java.lang.String,org.apache.tomcat.util.res.StringManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.host.HTMLHostManagerServlet:void doPost(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.startup.HostConfig:void checkResources(org.apache.catalina.startup.HostConfig$DeployedApplication,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.HostConfig:void check()",
            "org.apache.catalina.startup.HostConfig:void check(java.lang.String)"
        ]
    },
    "org.apache.catalina.startup.HostConfig:void checkUndeploy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.HostConfig:void check()"
        ]
    },
    "org.apache.catalina.core.NamingContextListener:void lifecycleEvent(org.apache.catalina.LifecycleEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void fireLifecycleEvent(java.lang.String,java.lang.Object)"
        ]
    },
    "org.apache.catalina.core.StandardContext:org.apache.tomcat.InstanceManager createInstanceManager()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.StandardContext:void startInternal()"
        ]
    },
    "org.apache.catalina.startup.ContextConfig:void configureContext(org.apache.tomcat.util.descriptor.web.WebXml)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.ContextConfig:void webConfig()"
        ]
    },
    "org.apache.catalina.startup.SetNextNamingRule:void end(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.digester.Digester:void endElement(java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.catalina.startup.WebAnnotationSet:void addResource(org.apache.catalina.Context,jakarta.'annotation'.Resource,java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.WebAnnotationSet:void loadFieldsAnnotation(org.apache.catalina.Context,java.lang.Class)",
            "org.apache.catalina.startup.WebAnnotationSet:void loadMethodsAnnotation(org.apache.catalina.Context,java.lang.Class)",
            "org.apache.catalina.startup.WebAnnotationSet:void addResource(org.apache.catalina.Context,jakarta.'annotation'.Resource)"
        ]
    },
    "org.apache.catalina.core.StandardContext:void backgroundProcess()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor:void processChildren(org.apache.catalina.Container)"
        ]
    },
    "org.apache.catalina.manager.HTMLManagerServlet:java.lang.String reload(org.apache.catalina.util.ContextName,org.apache.tomcat.util.res.StringManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.HTMLManagerServlet:void doPost(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.mbeans.MBeanFactory:java.lang.String createStandardContext(java.lang.String,java.lang.String,java.lang.String,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.mbeans.MBeanFactory:java.lang.String createStandardContext(java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.catalina.startup.Tomcat:org.apache.catalina.Context createContext(org.apache.catalina.Host,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.Tomcat:org.apache.catalina.Context addContext(org.apache.catalina.Host,java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.catalina.startup.Tomcat:org.apache.catalina.Context addWebapp(org.apache.catalina.Host,java.lang.String,java.lang.String,org.apache.catalina.LifecycleListener)"
        ]
    },
    "org.apache.catalina.manager.host.HostManagerServlet:void add(java.io.PrintWriter,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean,boolean,org.apache.tomcat.util.res.StringManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.host.HostManagerServlet:void add(jakarta.servlet.http.HttpServletRequest,java.io.PrintWriter,java.lang.String,boolean,org.apache.tomcat.util.res.StringManager)"
        ]
    },
    "org.apache.catalina.mbeans.MBeanFactory:java.lang.String createStandardHost(java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.core.StandardContext:org.apache.catalina.Wrapper createWrapper()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationContext:jakarta.servlet.ServletRegistration$Dynamic addServlet(java.lang.String,java.lang.String,jakarta.servlet.Servlet,java.util.Map)",
            "org.apache.catalina.startup.ContextConfig:void configureContext(org.apache.tomcat.util.descriptor.web.WebXml)",
            "org.apache.catalina.startup.Tomcat:org.apache.catalina.Wrapper addServlet(org.apache.catalina.Context,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.catalina.startup.Tomcat$ExistingStandardWrapper:void <init>(jakarta.servlet.Servlet)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.Tomcat:org.apache.catalina.Wrapper addServlet(org.apache.catalina.Context,java.lang.String,jakarta.servlet.Servlet)"
        ]
    },
    "org.apache.tomcat.util.net.AbstractEndpoint:void startAcceptorThread()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.AprEndpoint:void startInternal()",
            "org.apache.tomcat.util.net.NioEndpoint:void startInternal()"
        ]
    },
    "org.apache.tomcat.util.net.AprEndpoint$Poller:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.AprEndpoint:void startInternal()"
        ]
    },
    "org.apache.tomcat.util.net.AprEndpoint$Sendfile:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.AprEndpoint:void startInternal()"
        ]
    },
    "org.apache.tomcat.util.net.NioEndpoint:void startInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.AbstractEndpoint:void start()"
        ]
    },
    "org.apache.catalina.core.ContainerBase$StartChild:java.lang.Object call()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.core.ContainerBase:void addChild(org.apache.catalina.Container)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.StandardContext:void addChild(org.apache.catalina.Container)",
            "org.apache.catalina.core.StandardEngine:void addChild(org.apache.catalina.Container)",
            "org.apache.catalina.core.StandardHost:void addChild(org.apache.catalina.Container)"
        ]
    },
    "org.apache.catalina.core.ContainerBase:void access$000(org.apache.catalina.core.ContainerBase,org.apache.catalina.Container)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ContainerBase$PrivilegedAddChild:java.lang.Void run()"
        ]
    },
    "org.apache.catalina.core.ContainerBase:void addValve(org.apache.catalina.Valve)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.mbeans.ContainerMBean:java.lang.String addValve(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.mbeans.MBeanFactory:java.lang.String createValve(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.startup.ContextConfig:void authenticatorConfig()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.ContextConfig:void configureStart()"
        ]
    },
    "org.apache.catalina.startup.Tomcat$FixContextListener:void lifecycleEvent(org.apache.catalina.LifecycleEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void fireLifecycleEvent(java.lang.String,java.lang.Object)"
        ]
    },
    "org.apache.catalina.startup.Tomcat:org.apache.catalina.Server getServer()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.Tomcat:void init()",
            "org.apache.catalina.startup.Tomcat:void start()",
            "org.apache.catalina.startup.Tomcat:void stop()",
            "org.apache.catalina.startup.Tomcat:void destroy()",
            "org.apache.catalina.startup.Tomcat:org.apache.catalina.Service getService()",
            "org.apache.catalina.startup.Tomcat:org.apache.catalina.Engine getEngine()",
            "org.apache.catalina.startup.Tomcat:void enableNaming()",
            "org.apache.catalina.startup.Tomcat:void main(java.lang.String[])"
        ]
    },
    "org.apache.catalina.mbeans.MBeanFactory:java.lang.String createConnector(java.lang.String,java.lang.String,int,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.mbeans.MBeanFactory:java.lang.String createAjpConnector(java.lang.String,java.lang.String,int)",
            "org.apache.catalina.mbeans.MBeanFactory:java.lang.String createHttpConnector(java.lang.String,java.lang.String,int)",
            "org.apache.catalina.mbeans.MBeanFactory:java.lang.String createHttpsConnector(java.lang.String,java.lang.String,int)"
        ]
    },
    "org.apache.catalina.mbeans.ServiceMBean:void addConnector(java.lang.String,int,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.startup.Tomcat:org.apache.catalina.connector.Connector getConnector()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.startup.Tomcat:void setConnector(org.apache.catalina.connector.Connector)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.mbeans.ServiceMBean:void addExecutor(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.manager.HTMLManagerServlet:java.lang.String start(org.apache.catalina.util.ContextName,org.apache.tomcat.util.res.StringManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.HTMLManagerServlet:void doPost(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.manager.host.HTMLHostManagerServlet:java.lang.String start(java.lang.String,org.apache.tomcat.util.res.StringManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.host.HTMLHostManagerServlet:void doPost(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.realm.LockOutRealm:void startInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void start()"
        ]
    },
    "org.apache.catalina.session.StandardManager:void startInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void start()"
        ]
    },
    "org.apache.catalina.valves.rewrite.RewriteValve:void startInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void start()"
        ]
    },
    "org.apache.catalina.valves.rewrite.RewriteValve:void setConfiguration(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.webresources.JarResourceSet:void <init>(org.apache.catalina.WebResourceRoot,java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.webresources.StandardRoot:void createWebResourceSet(org.apache.catalina.WebResourceRoot$ResourceSetType,java.lang.String,java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.catalina.webresources.WarResourceSet:void <init>(org.apache.catalina.WebResourceRoot,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.webresources.StandardRoot:org.apache.catalina.WebResourceSet createMainResourceSet()"
        ]
    },
    "org.apache.catalina.webresources.StandardRoot:void createWebResourceSet(org.apache.catalina.WebResourceRoot$ResourceSetType,java.lang.String,java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.ContextConfig:void processResourceJARs(java.util.Set)",
            "org.apache.catalina.webresources.DirResourceSet:void <init>(org.apache.catalina.WebResourceRoot,java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.catalina.webresources.StandardRoot:void createWebResourceSet(org.apache.catalina.WebResourceRoot$ResourceSetType,java.lang.String,java.net.URL,java.lang.String)"
        ]
    },
    "org.apache.catalina.webresources.StandardRoot:org.apache.catalina.WebResourceSet createMainResourceSet()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.webresources.StandardRoot:void startInternal()"
        ]
    },
    "org.apache.catalina.util.LifecycleBase:void init()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.StandardContext:void setNamingResources(org.apache.catalina.deploy.NamingResourcesImpl)",
            "org.apache.catalina.core.StandardContext:void initInternal()",
            "org.apache.catalina.core.StandardServer:void initInternal()",
            "org.apache.catalina.core.StandardService:void initInternal()",
            "org.apache.catalina.mbeans.ContainerMBean:void addChild(java.lang.String,java.lang.String)",
            "org.apache.catalina.startup.Catalina:void load()",
            "org.apache.catalina.startup.Tomcat:void init()",
            "org.apache.catalina.util.LifecycleBase:void start()",
            "org.apache.catalina.webresources.StandardRoot:void initInternal()"
        ]
    },
    "org.apache.catalina.startup.ContextConfig:void webConfig()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.ContextConfig:void configureStart()"
        ]
    },
    "org.apache.catalina.startup.HostConfig:void lifecycleEvent(org.apache.catalina.LifecycleEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void fireLifecycleEvent(java.lang.String,java.lang.Object)"
        ]
    },
    "org.apache.catalina.util.LifecycleBase:void fireLifecycleEvent(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ContainerBase:void backgroundProcess()",
            "org.apache.catalina.core.StandardContext:void startInternal()",
            "org.apache.catalina.core.StandardContext:void stopInternal()",
            "org.apache.catalina.core.StandardServer:void startInternal()",
            "org.apache.catalina.core.StandardServer:void stopInternal()",
            "org.apache.catalina.core.StandardServer:void lambda$startPeriodicLifecycleEvent$1()",
            "org.apache.catalina.deploy.NamingResourcesImpl:void startInternal()",
            "org.apache.catalina.deploy.NamingResourcesImpl:void stopInternal()",
            "org.apache.catalina.util.LifecycleBase:void stop()",
            "org.apache.catalina.util.LifecycleBase:void setStateInternal(org.apache.catalina.LifecycleState,java.lang.Object,boolean)"
        ]
    },
    "org.apache.tomcat.util.net.SocketWrapperBase:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2UpgradeHandler:void close()",
            "org.apache.tomcat.util.net.AbstractEndpoint:void closeSocket(java.lang.Object)",
            "org.apache.tomcat.util.net.AprEndpoint$Poller:void run()",
            "org.apache.tomcat.util.net.AprEndpoint$SocketProcessor:void doRun()",
            "org.apache.tomcat.util.net.AprEndpoint$SocketWithOptionsProcessor:void run()",
            "org.apache.tomcat.util.net.AprEndpoint:void stopInternal()",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$1:void completed(java.lang.Integer,org.apache.tomcat.util.net.Nio2Endpoint$SendfileData)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$2:void failed(java.lang.Throwable,java.nio.ByteBuffer)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$3:void completed(java.lang.Integer,java.nio.ByteBuffer)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$3:void failed(java.lang.Throwable,java.nio.ByteBuffer)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$4:void completed(java.lang.Long,java.nio.ByteBuffer[])",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$4:void failed(java.lang.Throwable,java.nio.ByteBuffer[])",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:void registerReadInterest()",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:void registerWriteInterest()",
            "org.apache.tomcat.util.net.Nio2Endpoint$SocketProcessor:void doRun()",
            "org.apache.tomcat.util.net.Nio2Endpoint:void lambda$stopInternal$0()",
            "org.apache.tomcat.util.net.NioEndpoint$Poller:boolean events()",
            "org.apache.tomcat.util.net.NioEndpoint$Poller:void cancelledKey(java.nio.channels.SelectionKey,org.apache.tomcat.util.net.SocketWrapperBase)",
            "org.apache.tomcat.util.net.NioEndpoint$SocketProcessor:void doRun()"
        ]
    },
    "org.apache.coyote.http11.Http11InputBuffer:int doRead(org.apache.tomcat.util.net.ApplicationBufferHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.Request:int doRead(org.apache.tomcat.util.net.ApplicationBufferHandler)",
            "org.apache.coyote.http11.Http11InputBuffer:int doRead(org.apache.tomcat.util.net.ApplicationBufferHandler)",
            "org.apache.coyote.http11.filters.BufferedInputFilter:void setRequest(org.apache.coyote.Request)",
            "org.apache.coyote.http11.filters.ChunkedInputFilter:int readBytes()",
            "org.apache.coyote.http11.filters.IdentityInputFilter:int doRead(org.apache.tomcat.util.net.ApplicationBufferHandler)",
            "org.apache.coyote.http11.filters.IdentityInputFilter:long end()"
        ]
    },
    "org.apache.coyote.http11.filters.BufferedInputFilter:void setRequest(org.apache.coyote.Request)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11InputBuffer:void addActiveFilter(org.apache.coyote.http11.InputFilter)"
        ]
    },
    "org.apache.coyote.http11.filters.ChunkedInputFilter:int readBytes()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.filters.ChunkedInputFilter:int doRead(org.apache.tomcat.util.net.ApplicationBufferHandler)",
            "org.apache.coyote.http11.filters.ChunkedInputFilter:boolean parseChunkHeader()",
            "org.apache.coyote.http11.filters.ChunkedInputFilter:void parseCRLF(boolean)",
            "org.apache.coyote.http11.filters.ChunkedInputFilter:boolean parseHeader()"
        ]
    },
    "org.apache.coyote.http11.filters.IdentityInputFilter:int doRead(org.apache.tomcat.util.net.ApplicationBufferHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.Request:int doRead(org.apache.tomcat.util.net.ApplicationBufferHandler)",
            "org.apache.coyote.http11.Http11InputBuffer:int doRead(org.apache.tomcat.util.net.ApplicationBufferHandler)",
            "org.apache.coyote.http11.filters.BufferedInputFilter:void setRequest(org.apache.coyote.Request)",
            "org.apache.coyote.http11.filters.ChunkedInputFilter:int readBytes()",
            "org.apache.coyote.http11.filters.IdentityInputFilter:int doRead(org.apache.tomcat.util.net.ApplicationBufferHandler)",
            "org.apache.coyote.http11.filters.IdentityInputFilter:long end()"
        ]
    },
    "org.apache.coyote.http11.filters.IdentityInputFilter:long end()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11InputBuffer:void endRequest()"
        ]
    },
    "org.apache.coyote.ajp.AjpProcessor:void dispatchNonBlockingRead()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProcessor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState dispatch(org.apache.tomcat.util.net.SocketEvent)"
        ]
    },
    "org.apache.coyote.http2.Http2UpgradeHandler:void writeHeaders(org.apache.coyote.http2.Stream,int,org.apache.tomcat.util.http.MimeHeaders,boolean,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2UpgradeHandler:void push(org.apache.coyote.Request,org.apache.coyote.http2.Stream)",
            "org.apache.coyote.http2.Stream:void writeHeaders()",
            "org.apache.coyote.http2.Stream:void writeTrailers()",
            "org.apache.coyote.http2.Stream:void writeAck()"
        ]
    },
    "org.apache.coyote.http2.Http2AsyncUpgradeHandler:void pingReceive(byte[],boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2Parser:void readPingFrame(int,java.nio.ByteBuffer)"
        ]
    },
    "org.apache.coyote.http2.Http2Parser:void readPingFrame(int,java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2AsyncParser$FrameCompletionHandler:void completed(java.lang.Long,java.lang.Void)",
            "org.apache.coyote.http2.Http2Parser:boolean readFrame(boolean,org.apache.coyote.http2.FrameType)"
        ]
    },
    "org.apache.coyote.http11.upgrade.UpgradeProcessorInternal:void pause()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProtocol$ConnectionHandler:void pause()"
        ]
    },
    "org.apache.coyote.http2.Http2AsyncUpgradeHandler:void pause()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.upgrade.UpgradeProcessorInternal:void pause()"
        ]
    },
    "org.apache.coyote.http2.Http2UpgradeHandler:org.apache.coyote.http2.HpackDecoder$HeaderEmitter headersStart(int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2AsyncUpgradeHandler:org.apache.coyote.http2.HpackDecoder$HeaderEmitter headersStart(int,boolean)",
            "org.apache.coyote.http2.Http2Parser:void readHeadersFrame(int,int,int,java.nio.ByteBuffer)"
        ]
    },
    "org.apache.coyote.http2.Stream$StreamOutputBuffer:int doWrite(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.Response:void doWrite(java.nio.ByteBuffer)",
            "org.apache.coyote.http11.Http11OutputBuffer:int doWrite(java.nio.ByteBuffer)",
            "org.apache.coyote.http11.filters.ChunkedOutputFilter:int doWrite(java.nio.ByteBuffer)",
            "org.apache.coyote.http11.filters.ChunkedOutputFilter:void end()",
            "org.apache.coyote.http11.filters.GzipOutputFilter$FakeOutputStream:void write(int)",
            "org.apache.coyote.http11.filters.GzipOutputFilter$FakeOutputStream:void write(byte[],int,int)",
            "org.apache.coyote.http11.filters.IdentityOutputFilter:int doWrite(java.nio.ByteBuffer)",
            "org.apache.coyote.http2.Http2OutputBuffer:int doWrite(java.nio.ByteBuffer)"
        ]
    },
    "org.apache.coyote.http2.Stream$StreamOutputBuffer:boolean flush(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Stream$StreamOutputBuffer:void end()",
            "org.apache.coyote.http2.Stream$StreamOutputBuffer:void flush()",
            "org.apache.coyote.http2.Stream:boolean flush(boolean)"
        ]
    },
    "org.apache.coyote.http2.Stream$StreamOutputBuffer:boolean writeFromBuffer(java.nio.ByteBuffer,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.WriteBuffer:boolean write(org.apache.tomcat.util.net.WriteBuffer$Sink,boolean)"
        ]
    },
    "org.apache.coyote.http2.Http2AsyncUpgradeHandler:void onSwallowedDataFramePayload(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2Parser:void swallowPayload(int,int,int,boolean,java.nio.ByteBuffer)",
            "org.apache.coyote.http2.Http2UpgradeHandler:void endRequestBodyFrame(int,int)",
            "org.apache.coyote.http2.Stream$StreamInputBuffer:void swallowUnread()"
        ]
    },
    "org.apache.coyote.http2.Stream$StreamInputBuffer:void swallowUnread()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Stream$StreamInputBuffer:void onDataAvailable()",
            "org.apache.coyote.http2.Stream$StreamInputBuffer:void access$600(org.apache.coyote.http2.Stream$StreamInputBuffer)"
        ]
    },
    "org.apache.coyote.http11.Http11Processor:void prepareResponse()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProcessor:void action(org.apache.coyote.ActionCode,java.lang.Object)"
        ]
    },
    "org.apache.coyote.http11.Http11Processor:void flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProcessor:void action(org.apache.coyote.ActionCode,java.lang.Object)"
        ]
    },
    "org.apache.coyote.http11.filters.BufferedInputFilter:int available()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.ajp.AjpProcessor:int available(boolean)",
            "org.apache.coyote.http11.Http11InputBuffer:int available(boolean)",
            "org.apache.coyote.http11.filters.BufferedInputFilter:int available()",
            "org.apache.coyote.http11.filters.ChunkedInputFilter:int available()",
            "org.apache.coyote.http11.filters.IdentityInputFilter:int available()"
        ]
    },
    "org.apache.coyote.http11.filters.ChunkedInputFilter:int available()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.ajp.AjpProcessor:int available(boolean)",
            "org.apache.coyote.http11.Http11InputBuffer:int available(boolean)",
            "org.apache.coyote.http11.filters.BufferedInputFilter:int available()",
            "org.apache.coyote.http11.filters.ChunkedInputFilter:int available()",
            "org.apache.coyote.http11.filters.IdentityInputFilter:int available()"
        ]
    },
    "org.apache.coyote.http11.filters.IdentityInputFilter:int available()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.ajp.AjpProcessor:int available(boolean)",
            "org.apache.coyote.http11.Http11InputBuffer:int available(boolean)",
            "org.apache.coyote.http11.filters.BufferedInputFilter:int available()",
            "org.apache.coyote.http11.filters.ChunkedInputFilter:int available()",
            "org.apache.coyote.http11.filters.IdentityInputFilter:int available()"
        ]
    },
    "org.apache.coyote.ajp.AjpProcessor:boolean receive(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.ajp.AjpProcessor:boolean refillReadBuffer(boolean)"
        ]
    },
    "org.apache.coyote.http2.Http2Parser:void readUnknownFrame(int,int,int,int,java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2AsyncParser$FrameCompletionHandler:void completed(java.lang.Long,java.lang.Void)",
            "org.apache.coyote.http2.Http2Parser:boolean readFrame(boolean,org.apache.coyote.http2.FrameType)"
        ]
    },
    "org.apache.catalina.connector.OutputBuffer:void write(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.CoyoteOutputStream:void write(byte[],int,int)"
        ]
    },
    "org.apache.catalina.connector.OutputBuffer:void write(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.CoyoteOutputStream:void write(java.nio.ByteBuffer)"
        ]
    },
    "org.apache.catalina.connector.OutputBuffer:void append(char[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.OutputBuffer:void write(char[],int,int)"
        ]
    },
    "org.apache.catalina.connector.OutputBuffer:void flushCharBuffer()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.OutputBuffer:void close()",
            "org.apache.catalina.connector.OutputBuffer:void doFlush(boolean)",
            "org.apache.catalina.connector.OutputBuffer:void write(int)",
            "org.apache.catalina.connector.OutputBuffer:void write(java.lang.String,int,int)",
            "org.apache.catalina.connector.OutputBuffer:void append(char[],int,int)"
        ]
    },
    "org.apache.catalina.authenticator.AuthenticatorBase:jakarta.security.auth.message.config.AuthConfigProvider getJaspicProvider()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.AuthenticatorBase:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.authenticator.AuthenticatorBase:boolean authenticate(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.authenticator.AuthenticatorBase:void logout(org.apache.catalina.connector.Request)"
        ]
    },
    "org.apache.catalina.authenticator.AuthenticatorBase:void notify(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.jaspic.AuthConfigFactoryImpl:void addRegistrationContextImpl(java.lang.String,java.lang.String,java.lang.String,org.apache.catalina.authenticator.jaspic.AuthConfigFactoryImpl$RegistrationContextImpl)",
            "org.apache.catalina.authenticator.jaspic.AuthConfigFactoryImpl:boolean removeRegistration(java.lang.String)"
        ]
    },
    "org.apache.catalina.filters.CorsFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationFilterChain:void internalDoFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)"
        ]
    },
    "org.apache.catalina.startup.CatalinaBaseConfigurationSource:org.apache.tomcat.util.file.ConfigurationSource$Resource getServerXml()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.Catalina:void parseServerXml(boolean)"
        ]
    },
    "org.apache.catalina.startup.CatalinaBaseConfigurationSource:org.apache.tomcat.util.file.ConfigurationSource$Resource getResource(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.realm.MemoryRealm:void startInternal()",
            "org.apache.catalina.startup.CatalinaBaseConfigurationSource:org.apache.tomcat.util.file.ConfigurationSource$Resource getServerXml()",
            "org.apache.catalina.startup.ContextConfig:void contextConfig(org.apache.tomcat.util.digester.Digester)",
            "org.apache.catalina.startup.ContextConfig:org.xml.sax.InputSource getWebXmlSource(java.lang.String,boolean)",
            "org.apache.catalina.users.MemoryUserDatabase:void open()",
            "org.apache.catalina.valves.rewrite.RewriteValve:void startInternal()",
            "org.apache.tomcat.util.file.ConfigurationSource:org.apache.tomcat.util.file.ConfigurationSource$Resource getConfResource(java.lang.String)",
            "org.apache.tomcat.util.net.SSLUtilBase:java.security.KeyStore getStore(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.tomcat.util.net.SSLUtilBase:java.util.Collection getCRLs(java.lang.String)",
            "org.apache.tomcat.util.net.jsse.PEMFile:void <init>(java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.catalina.startup.ContextConfig:void populateJavaClassCache(java.lang.String,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.ContextConfig:void populateJavaClassCache(java.lang.String,org.apache.tomcat.util.bcel.classfile.JavaClass,java.util.Map)"
        ]
    },
    "org.apache.catalina.startup.ContextConfig:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.mbeans.ContainerMBean:void addChild(java.lang.String,java.lang.String)",
            "org.apache.catalina.mbeans.MBeanFactory:java.lang.String createStandardContext(java.lang.String,java.lang.String,java.lang.String,boolean,boolean)",
            "org.apache.catalina.startup.ContextConfig$AnnotationScanTask:void run()",
            "org.apache.catalina.startup.ContextConfig$HostWebXmlCacheCleaner:void lifecycleEvent(org.apache.catalina.LifecycleEvent)",
            "org.apache.catalina.startup.ContextConfig:void lifecycleEvent(org.apache.catalina.LifecycleEvent)",
            "org.apache.catalina.startup.ContextConfig:void authenticatorConfig()",
            "org.apache.catalina.startup.ContextConfig:void contextConfig(org.apache.tomcat.util.digester.Digester)",
            "org.apache.catalina.startup.ContextConfig:void processContextConfig(org.apache.tomcat.util.digester.Digester,java.net.URL,java.io.InputStream)",
            "org.apache.catalina.startup.ContextConfig:void antiLocking()",
            "org.apache.catalina.startup.ContextConfig:void init()",
            "org.apache.catalina.startup.ContextConfig:void beforeStart()",
            "org.apache.catalina.startup.ContextConfig:void configureStart()",
            "org.apache.catalina.startup.ContextConfig:void configureStop()",
            "org.apache.catalina.startup.ContextConfig:void destroy()",
            "org.apache.catalina.startup.ContextConfig:void validateSecurityRoles()",
            "org.apache.catalina.startup.ContextConfig:void webConfig()",
            "org.apache.catalina.startup.ContextConfig:void configureContext(org.apache.tomcat.util.descriptor.web.WebXml)",
            "org.apache.catalina.startup.ContextConfig:org.apache.tomcat.util.descriptor.web.WebXml getTomcatWebXmlFragment(org.apache.tomcat.util.descriptor.web.WebXmlParser)",
            "org.apache.catalina.startup.ContextConfig:org.apache.tomcat.util.descriptor.web.WebXml getDefaultWebXmlFragment(org.apache.tomcat.util.descriptor.web.WebXmlParser)",
            "org.apache.catalina.startup.ContextConfig:void convertJsp(org.apache.tomcat.util.descriptor.web.ServletDef,java.util.Map)",
            "org.apache.catalina.startup.ContextConfig:void processServletContainerInitializers()",
            "org.apache.catalina.startup.ContextConfig:void processResourceJARs(java.util.Set)",
            "org.apache.catalina.startup.ContextConfig:org.xml.sax.InputSource getContextWebXmlSource()",
            "org.apache.catalina.startup.ContextConfig:org.xml.sax.InputSource getWebXmlSource(java.lang.String,boolean)",
            "org.apache.catalina.startup.ContextConfig:void processAnnotationsInParallel(java.util.Set,boolean,java.util.Map)",
            "org.apache.catalina.startup.ContextConfig:void processAnnotationsWebResource(org.apache.catalina.WebResource,org.apache.tomcat.util.descriptor.web.WebXml,boolean,java.util.Map)",
            "org.apache.catalina.startup.ContextConfig:void processAnnotationsUrl(java.net.URL,org.apache.tomcat.util.descriptor.web.WebXml,boolean,java.util.Map)",
            "org.apache.catalina.startup.ContextConfig:void processAnnotationsJar(java.net.URL,org.apache.tomcat.util.descriptor.web.WebXml,boolean,java.util.Map)",
            "org.apache.catalina.startup.ContextConfig:void processAnnotationsFile(java.io.File,org.apache.tomcat.util.descriptor.web.WebXml,boolean,java.util.Map)",
            "org.apache.catalina.startup.ContextConfig:void checkHandlesTypes(org.apache.tomcat.util.bcel.classfile.JavaClass,java.util.Map)",
            "org.apache.catalina.startup.ContextConfig:void populateJavaClassCache(java.lang.String,java.util.Map)",
            "org.apache.catalina.startup.ContextConfig:void populateSCIsForCacheEntry(org.apache.catalina.startup.ContextConfig$JavaClassCacheEntry,java.util.Map)",
            "org.apache.catalina.startup.ContextConfig:java.util.Set getSCIsForClass(java.lang.String)",
            "org.apache.catalina.startup.ContextConfig:void processAnnotationWebServlet(java.lang.String,org.apache.tomcat.util.bcel.classfile.AnnotationEntry,org.apache.tomcat.util.descriptor.web.WebXml)",
            "org.apache.catalina.startup.ContextConfig:void processAnnotationWebFilter(java.lang.String,org.apache.tomcat.util.bcel.classfile.AnnotationEntry,org.apache.tomcat.util.descriptor.web.WebXml)",
            "org.apache.catalina.startup.ContextConfig:void <clinit>()"
        ]
    },
    "org.apache.juli.ClassLoaderLogManager:void readConfiguration(java.lang.ClassLoader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.juli.ClassLoaderLogManager:void readConfiguration()",
            "org.apache.juli.ClassLoaderLogManager:java.lang.Void lambda$getClassLoaderInfo$2(java.lang.ClassLoader)"
        ]
    },
    "org.apache.catalina.servlets.DefaultServlet:void copy(java.io.InputStream,jakarta.servlet.ServletOutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.DefaultServlet:void serveResource(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,boolean,java.lang.String)"
        ]
    },
    "org.apache.catalina.servlets.DefaultServlet:void copy(org.apache.catalina.WebResource,long,jakarta.servlet.ServletOutputStream,org.apache.tomcat.util.http.parser.Ranges$Entry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.DefaultServlet:void serveResource(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,boolean,java.lang.String)"
        ]
    },
    "org.apache.catalina.servlets.DefaultServlet:void copy(org.apache.catalina.WebResource,long,jakarta.servlet.ServletOutputStream,org.apache.tomcat.util.http.parser.Ranges,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.DefaultServlet:void serveResource(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,boolean,java.lang.String)"
        ]
    },
    "org.apache.tomcat.util.net.SSLUtilBase:java.security.KeyStore getStore(java.lang.String,java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SSLHostConfig:java.security.KeyStore getTruststore()",
            "org.apache.tomcat.util.net.SSLHostConfigCertificate:java.security.KeyStore getCertificateKeystore()"
        ]
    },
    "org.apache.catalina.loader.WebappClassLoaderBase:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ContainerBase:void setCluster(org.apache.catalina.Cluster)",
            "org.apache.catalina.core.ContainerBase:void setRealm(org.apache.catalina.Realm)",
            "org.apache.catalina.core.ContainerBase:void stopInternal()",
            "org.apache.catalina.core.StandardContext:void setLoader(org.apache.catalina.Loader)",
            "org.apache.catalina.core.StandardContext:void setManager(org.apache.catalina.Manager)",
            "org.apache.catalina.core.StandardContext:void stopInternal()",
            "org.apache.catalina.core.StandardPipeline:void stopInternal()",
            "org.apache.catalina.core.StandardPipeline:void setBasic(org.apache.catalina.Valve)",
            "org.apache.catalina.core.StandardPipeline:void removeValve(org.apache.catalina.Valve)",
            "org.apache.catalina.loader.WebappLoader:void stopInternal()",
            "org.apache.catalina.realm.CombinedRealm:void stopInternal()",
            "org.apache.catalina.session.ManagerBase:void stopInternal()",
            "org.apache.catalina.session.PersistentManagerBase:void stopInternal()",
            "org.apache.catalina.valves.rewrite.RewriteValve:void stopInternal()"
        ]
    },
    "org.apache.catalina.loader.WebappClassLoaderBase:java.lang.Class findClassInternal(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.loader.WebappClassLoaderBase$PrivilegedFindClassByName:java.lang.Class run()",
            "org.apache.catalina.loader.WebappClassLoaderBase:java.lang.Class findClass(java.lang.String)"
        ]
    },
    "org.apache.catalina.webresources.CachedResource:byte[] getContent()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.loader.WebappClassLoaderBase:java.lang.Class findClassInternal(java.lang.String)",
            "org.apache.catalina.servlets.DefaultServlet:void serveResource(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,boolean,java.lang.String)",
            "org.apache.catalina.webresources.CachedResource:java.io.InputStream getInputStream()",
            "org.apache.catalina.webresources.CachedResource:byte[] getContent()"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.IOUtils:void readFully(java.io.InputStream,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.disk.DiskFileItem:byte[] get()"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.MultipartStream$ItemInputStream:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.DefaultInstanceManager:void loadProperties(java.util.Set,java.lang.String,java.lang.String,org.apache.juli.logging.Log)",
            "org.apache.catalina.loader.WebappClassLoaderBase:java.io.InputStream getResourceAsStream(java.lang.String)",
            "org.apache.catalina.loader.WebappClassLoaderBase:void clearReferencesJdbc()",
            "org.apache.catalina.manager.host.HostManagerServlet:void add(java.io.PrintWriter,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean,boolean,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.realm.MemoryRealm:void startInternal()",
            "org.apache.catalina.servlets.CGIServlet$CGIEnvironment:void expandCGIScript()",
            "org.apache.catalina.servlets.CGIServlet$CGIRunner:void run()",
            "org.apache.catalina.servlets.DefaultServlet:void doPut(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.DefaultServlet:java.lang.String getReadme(org.apache.catalina.WebResource,java.lang.String)",
            "org.apache.catalina.servlets.DefaultServlet:javax.xml.transform.Source secureXslt(java.io.InputStream)",
            "org.apache.catalina.servlets.WebdavServlet:boolean copyResource(java.util.Hashtable,java.lang.String,java.lang.String)",
            "org.apache.catalina.startup.CatalinaBaseConfigurationSource:org.apache.tomcat.util.file.ConfigurationSource$Resource getServerXml()",
            "org.apache.catalina.startup.CatalinaBaseConfigurationSource:org.apache.tomcat.util.file.ConfigurationSource$Resource getResource(java.lang.String)",
            "org.apache.catalina.startup.CatalinaProperties:void loadProperties()",
            "org.apache.catalina.startup.ContextConfig:void processContextConfig(org.apache.tomcat.util.digester.Digester,java.net.URL,java.io.InputStream)",
            "org.apache.catalina.startup.ContextConfig:org.apache.tomcat.util.descriptor.web.WebXml getDefaultWebXmlFragment(org.apache.tomcat.util.descriptor.web.WebXmlParser)",
            "org.apache.catalina.startup.ContextConfig:org.xml.sax.InputSource getContextWebXmlSource()",
            "org.apache.catalina.startup.ContextConfig:org.xml.sax.InputSource getWebXmlSource(java.lang.String,boolean)",
            "org.apache.catalina.startup.ContextConfig:void processAnnotationsWebResource(org.apache.catalina.WebResource,org.apache.tomcat.util.descriptor.web.WebXml,boolean,java.util.Map)",
            "org.apache.catalina.startup.ContextConfig:void processAnnotationsJar(java.net.URL,org.apache.tomcat.util.descriptor.web.WebXml,boolean,java.util.Map)",
            "org.apache.catalina.startup.ContextConfig:void populateJavaClassCache(java.lang.String,java.util.Map)",
            "org.apache.catalina.startup.ContextConfig:void <clinit>()",
            "org.apache.catalina.startup.ExpandWar:java.lang.String expand(org.apache.catalina.Host,java.net.URL,java.lang.String)",
            "org.apache.catalina.startup.HostConfig:void deployWAR(org.apache.catalina.util.ContextName,java.io.File)",
            "org.apache.catalina.startup.Tomcat:org.apache.catalina.Context addWebapp(java.lang.String,java.net.URL)",
            "org.apache.catalina.startup.Tomcat:void addDefaultMimeTypeMappings(org.apache.catalina.Context)",
            "org.apache.catalina.startup.WebappServiceLoader:void parseConfigFile(java.util.LinkedHashSet,java.net.URL)",
            "org.apache.catalina.users.MemoryUserDatabase:void backgroundProcess()",
            "org.apache.catalina.util.CharsetMapper:void <init>(java.lang.String)",
            "org.apache.catalina.util.ExtensionValidator:boolean validateApplication(org.apache.catalina.WebResourceRoot,org.apache.catalina.Context)",
            "org.apache.catalina.util.ServerInfo:void <clinit>()",
            "org.apache.catalina.valves.rewrite.RewriteValve:void startInternal()",
            "org.apache.catalina.webresources.AbstractArchiveResource$JarInputStreamWrapper:void close()",
            "org.apache.catalina.webresources.ExtractingRoot:void processWebInfLib()",
            "org.apache.catalina.webresources.JarWarResourceSet:java.util.Map getArchiveEntries(boolean)",
            "org.apache.catalina.webresources.TrackedInputStream:void close()",
            "org.apache.juli.ClassLoaderLogManager:void readConfiguration(java.io.InputStream,java.lang.ClassLoader)",
            "org.apache.naming.factory.LookupFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.tomcat.util.descriptor.InputSourceUtil:void close(org.xml.sax.InputSource)",
            "org.apache.tomcat.util.descriptor.tagplugin.TagPluginParser:void parse(java.net.URL)",
            "org.apache.tomcat.util.file.ConfigurationSource$Resource:long getLastModified()",
            "org.apache.tomcat.util.file.ConfigurationSource$Resource:void close()",
            "org.apache.tomcat.util.http.fileupload.IOUtils:void closeQuietly(java.io.Closeable)",
            "org.apache.tomcat.util.http.fileupload.MultipartStream$ItemInputStream:void close(boolean)",
            "org.apache.tomcat.util.http.fileupload.impl.FileItemStreamImpl:void close()",
            "org.apache.tomcat.util.http.fileupload.util.Streams:long copy(java.io.InputStream,java.io.OutputStream,boolean,byte[])",
            "org.apache.tomcat.util.net.SSLUtilBase:java.security.KeyStore getStore(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.tomcat.util.net.SSLUtilBase:java.util.Collection getCRLs(java.lang.String)",
            "org.apache.tomcat.util.net.jsse.PEMFile:void <init>(java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.impl.FileItemStreamImpl$1:void raiseError(long,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.util.LimitedInputStream:void checkLimit()"
        ]
    },
    "org.apache.catalina.webresources.AbstractArchiveResource$JarInputStreamWrapper:long skip(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.DefaultServlet:java.io.IOException copyRange(java.io.InputStream,jakarta.servlet.ServletOutputStream,long,long)",
            "org.apache.catalina.webresources.AbstractArchiveResource$JarInputStreamWrapper:long skip(long)",
            "org.apache.catalina.webresources.TrackedInputStream:long skip(long)"
        ]
    },
    "org.apache.catalina.webresources.TrackedInputStream:long skip(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.DefaultServlet:java.io.IOException copyRange(java.io.InputStream,jakarta.servlet.ServletOutputStream,long,long)",
            "org.apache.catalina.webresources.AbstractArchiveResource$JarInputStreamWrapper:long skip(long)",
            "org.apache.catalina.webresources.TrackedInputStream:long skip(long)"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.MultipartStream:boolean skipPreamble()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.impl.FileItemIteratorImpl:boolean findNextItem()"
        ]
    },
    "jakarta.servlet.http.HttpServletRequestWrapper:void login(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletRequestWrapper:void login(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.catalina.connector.RequestFacade:void login(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletRequestWrapper:void login(java.lang.String,java.lang.String)"
        ]
    },
    "jakarta.servlet.http.HttpServletRequestWrapper:void logout()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletRequestWrapper:void logout()"
        ]
    },
    "org.apache.catalina.connector.Request:java.security.Principal getUserPrincipal()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletRequestWrapper:java.security.Principal getUserPrincipal()",
            "org.apache.catalina.authenticator.AuthenticatorBase:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.authenticator.AuthenticatorBase:boolean authenticateJaspic(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,org.apache.catalina.authenticator.AuthenticatorBase$JaspicState,boolean)",
            "org.apache.catalina.authenticator.AuthenticatorBase:boolean checkForCachedAuthentication(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse,boolean)",
            "org.apache.catalina.authenticator.AuthenticatorBase:boolean reauthenticateFromSSO(java.lang.String,org.apache.catalina.connector.Request)",
            "org.apache.catalina.authenticator.SingleSignOn:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.connector.Request:void login(java.lang.String,java.lang.String)",
            "org.apache.catalina.connector.RequestFacade:java.security.Principal getUserPrincipal()",
            "org.apache.catalina.core.ApplicationFilterChain:void internalDoFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)",
            "org.apache.catalina.servlets.CGIServlet:void printServletEnvironment(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.servlets.WebdavServlet:void doLock(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.connector.RequestFacade:void logout()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletRequestWrapper:void logout()"
        ]
    },
    "jakarta.servlet.http.Cookie:void <init>(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.AuthenticatorBase:void register(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse,java.security.Principal,java.lang.String,java.lang.String,java.lang.String,boolean,boolean)",
            "org.apache.catalina.connector.Request:void convertCookies()",
            "org.apache.catalina.core.ApplicationPushBuilder:void <init>(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.core.ApplicationSessionCookieConfig:jakarta.servlet.http.Cookie createSessionCookie(org.apache.catalina.Context,java.lang.String,boolean)",
            "org.apache.catalina.valves.rewrite.RewriteValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)"
        ]
    },
    "org.apache.catalina.connector.Request:void addCookie(jakarta.servlet.http.Cookie)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.FormAuthenticator:boolean restoreRequest(org.apache.catalina.connector.Request,org.apache.catalina.Session)"
        ]
    },
    "org.apache.catalina.connector.Request:void convertCookies()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.Request:void addCookie(jakarta.servlet.http.Cookie)",
            "org.apache.catalina.connector.Request:jakarta.servlet.http.Cookie[] getCookies()"
        ]
    },
    "org.apache.catalina.core.ApplicationSessionCookieConfig:jakarta.servlet.http.Cookie createSessionCookie(org.apache.catalina.Context,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.Request:void changeSessionId(java.lang.String)",
            "org.apache.catalina.connector.Request:org.apache.catalina.Session doGetSession(boolean)"
        ]
    },
    "jakarta.servlet.http.Cookie$lambda_static_0__3:java.lang.Object run()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.security.auth.message.config.AuthConfigFactory:java.lang.String getFactoryClassName()",
            "jakarta.servlet.http.Cookie:void <clinit>()",
            "org.apache.catalina.startup.ClassLoaderFactory:java.lang.ClassLoader createClassLoader(java.io.File[],java.io.File[],java.lang.ClassLoader)",
            "org.apache.catalina.startup.ClassLoaderFactory:java.lang.ClassLoader createClassLoader(java.util.List,java.lang.ClassLoader)",
            "org.apache.catalina.util.Introspection:java.lang.reflect.Field[] getDeclaredFields(java.lang.Class)",
            "org.apache.catalina.util.Introspection:java.lang.reflect.Method[] getDeclaredMethods(java.lang.Class)",
            "org.apache.juli.ClassLoaderLogManager:boolean addLogger(java.util.logging.Logger)",
            "org.apache.juli.ClassLoaderLogManager:org.apache.juli.ClassLoaderLogManager$ClassLoaderLogInfo getClassLoaderInfo(java.lang.ClassLoader)",
            "org.apache.juli.ClassLoaderLogManager:void doSetParentLogger(java.util.logging.Logger,java.util.logging.Logger)",
            "org.apache.juli.FileHandler$1:java.lang.Thread newThread(java.lang.Runnable)",
            "org.apache.naming.factory.MailSessionFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.naming.factory.SendMailFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.tomcat.util.compat.JrePlatform:void <clinit>()"
        ]
    },
    "jakarta.servlet.http.Cookie$lambda_static_1__4:java.lang.Object run()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.security.auth.message.config.AuthConfigFactory:java.lang.String getFactoryClassName()",
            "jakarta.servlet.http.Cookie:void <clinit>()",
            "org.apache.catalina.startup.ClassLoaderFactory:java.lang.ClassLoader createClassLoader(java.io.File[],java.io.File[],java.lang.ClassLoader)",
            "org.apache.catalina.startup.ClassLoaderFactory:java.lang.ClassLoader createClassLoader(java.util.List,java.lang.ClassLoader)",
            "org.apache.catalina.util.Introspection:java.lang.reflect.Field[] getDeclaredFields(java.lang.Class)",
            "org.apache.catalina.util.Introspection:java.lang.reflect.Method[] getDeclaredMethods(java.lang.Class)",
            "org.apache.juli.ClassLoaderLogManager:boolean addLogger(java.util.logging.Logger)",
            "org.apache.juli.ClassLoaderLogManager:org.apache.juli.ClassLoaderLogManager$ClassLoaderLogInfo getClassLoaderInfo(java.lang.ClassLoader)",
            "org.apache.juli.ClassLoaderLogManager:void doSetParentLogger(java.util.logging.Logger,java.util.logging.Logger)",
            "org.apache.juli.FileHandler$1:java.lang.Thread newThread(java.lang.Runnable)",
            "org.apache.naming.factory.MailSessionFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.naming.factory.SendMailFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.tomcat.util.compat.JrePlatform:void <clinit>()"
        ]
    },
    "jakarta.servlet.http.Cookie$lambda_static_2__5:java.lang.Object run()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.security.auth.message.config.AuthConfigFactory:java.lang.String getFactoryClassName()",
            "jakarta.servlet.http.Cookie:void <clinit>()",
            "org.apache.catalina.startup.ClassLoaderFactory:java.lang.ClassLoader createClassLoader(java.io.File[],java.io.File[],java.lang.ClassLoader)",
            "org.apache.catalina.startup.ClassLoaderFactory:java.lang.ClassLoader createClassLoader(java.util.List,java.lang.ClassLoader)",
            "org.apache.catalina.util.Introspection:java.lang.reflect.Field[] getDeclaredFields(java.lang.Class)",
            "org.apache.catalina.util.Introspection:java.lang.reflect.Method[] getDeclaredMethods(java.lang.Class)",
            "org.apache.juli.ClassLoaderLogManager:boolean addLogger(java.util.logging.Logger)",
            "org.apache.juli.ClassLoaderLogManager:org.apache.juli.ClassLoaderLogManager$ClassLoaderLogInfo getClassLoaderInfo(java.lang.ClassLoader)",
            "org.apache.juli.ClassLoaderLogManager:void doSetParentLogger(java.util.logging.Logger,java.util.logging.Logger)",
            "org.apache.juli.FileHandler$1:java.lang.Thread newThread(java.lang.Runnable)",
            "org.apache.naming.factory.MailSessionFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.naming.factory.SendMailFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.tomcat.util.compat.JrePlatform:void <clinit>()"
        ]
    },
    "org.apache.catalina.startup.Tool:void main(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.startup.Bootstrap:java.lang.ClassLoader createClassLoader(java.lang.String,java.lang.ClassLoader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.Bootstrap:void initClassLoaders()"
        ]
    },
    "org.apache.catalina.core.DefaultInstanceManager:void populateAnnotationsCache(java.lang.Class,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.DefaultInstanceManager:java.lang.Object newInstance(java.lang.Object,java.lang.Class)"
        ]
    },
    "org.apache.catalina.deploy.NamingResourcesImpl:java.lang.Class getFieldType(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.deploy.NamingResourcesImpl:java.lang.Class getCompatibleType(org.apache.catalina.Context,org.apache.tomcat.util.descriptor.web.ResourceBase,java.lang.Class)"
        ]
    },
    "org.apache.catalina.startup.WebAnnotationSet:void loadFieldsAnnotation(org.apache.catalina.Context,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.WebAnnotationSet:void loadApplicationListenerAnnotations(org.apache.catalina.Context)",
            "org.apache.catalina.startup.WebAnnotationSet:void loadApplicationFilterAnnotations(org.apache.catalina.Context)",
            "org.apache.catalina.startup.WebAnnotationSet:void loadApplicationServletAnnotations(org.apache.catalina.Context)"
        ]
    },
    "org.apache.catalina.deploy.NamingResourcesImpl:java.lang.Class getSetterType(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.deploy.NamingResourcesImpl:java.lang.Class getCompatibleType(org.apache.catalina.Context,org.apache.tomcat.util.descriptor.web.ResourceBase,java.lang.Class)"
        ]
    },
    "org.apache.catalina.startup.WebAnnotationSet:void loadMethodsAnnotation(org.apache.catalina.Context,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.WebAnnotationSet:void loadApplicationListenerAnnotations(org.apache.catalina.Context)",
            "org.apache.catalina.startup.WebAnnotationSet:void loadApplicationFilterAnnotations(org.apache.catalina.Context)",
            "org.apache.catalina.startup.WebAnnotationSet:void loadApplicationServletAnnotations(org.apache.catalina.Context)"
        ]
    },
    "org.apache.juli.ClassLoaderLogManager:java.util.logging.Logger getLogger(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.juli.ClassLoaderLogManager:java.util.Enumeration getLoggerNames()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.juli.ClassLoaderLogManager:java.lang.String findProperty(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.juli.ClassLoaderLogManager:java.lang.String getProperty(java.lang.String)"
        ]
    },
    "org.apache.juli.ClassLoaderLogManager:void reset()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.juli.ClassLoaderLogManager:void readConfiguration(java.io.InputStream)",
            "org.apache.juli.logging.LogFactory:void release(java.lang.ClassLoader)"
        ]
    },
    "org.apache.juli.ClassLoaderLogManager$LogNode:void setParentLogger(java.util.logging.Logger)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.juli.ClassLoaderLogManager$LogNode:void setParentLogger(java.util.logging.Logger)",
            "org.apache.juli.ClassLoaderLogManager:boolean addLogger(java.util.logging.Logger)"
        ]
    },
    "org.apache.catalina.servlets.CGIServlet:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.CGIServlet$CGIEnvironment:boolean setupFromRequest(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.servlets.CGIServlet$CGIEnvironment:java.lang.String[] findCGI(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.catalina.servlets.CGIServlet$CGIEnvironment:boolean setCGIEnvironment(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.servlets.CGIServlet$CGIEnvironment:void expandCGIScript()",
            "org.apache.catalina.servlets.CGIServlet$CGIRunner:void run()",
            "org.apache.catalina.servlets.CGIServlet$CGIRunner:int getSCFromHttpStatusLine(java.lang.String)",
            "org.apache.catalina.servlets.CGIServlet$CGIRunner:int getSCFromCGIStatusHeader(java.lang.String)",
            "org.apache.catalina.servlets.CGIServlet$CGIRunner:void sendToLog(java.io.BufferedReader)",
            "org.apache.catalina.servlets.CGIServlet:void <init>()",
            "org.apache.catalina.servlets.CGIServlet:void init(jakarta.servlet.ServletConfig)",
            "org.apache.catalina.servlets.CGIServlet:void printServletEnvironment(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.servlets.CGIServlet:void service(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.CGIServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.CGIServlet:void doOptions(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.CGIServlet:org.apache.juli.logging.Log access$200()",
            "org.apache.catalina.servlets.CGIServlet:org.apache.tomcat.util.res.StringManager access$300()",
            "org.apache.catalina.servlets.CGIServlet:java.lang.Object access$900()",
            "org.apache.catalina.servlets.CGIServlet:void <clinit>()"
        ]
    },
    "org.apache.catalina.webresources.AbstractFileResourceSet:java.io.File file(java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.webresources.DirResourceSet:org.apache.catalina.WebResource getResource(java.lang.String)",
            "org.apache.catalina.webresources.DirResourceSet:java.lang.String[] list(java.lang.String)",
            "org.apache.catalina.webresources.DirResourceSet:java.util.Set listWebAppPaths(java.lang.String)",
            "org.apache.catalina.webresources.DirResourceSet:boolean mkdir(java.lang.String)",
            "org.apache.catalina.webresources.DirResourceSet:boolean write(java.lang.String,java.io.InputStream,boolean)",
            "org.apache.catalina.webresources.DirResourceSet:void initInternal()",
            "org.apache.catalina.webresources.FileResourceSet:org.apache.catalina.WebResource getResource(java.lang.String)"
        ]
    },
    "org.apache.tomcat.util.compat.JrePlatform$lambda_static_0__26:java.lang.Object run()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.security.auth.message.config.AuthConfigFactory:java.lang.String getFactoryClassName()",
            "jakarta.servlet.http.Cookie:void <clinit>()",
            "org.apache.catalina.startup.ClassLoaderFactory:java.lang.ClassLoader createClassLoader(java.io.File[],java.io.File[],java.lang.ClassLoader)",
            "org.apache.catalina.startup.ClassLoaderFactory:java.lang.ClassLoader createClassLoader(java.util.List,java.lang.ClassLoader)",
            "org.apache.catalina.util.Introspection:java.lang.reflect.Field[] getDeclaredFields(java.lang.Class)",
            "org.apache.catalina.util.Introspection:java.lang.reflect.Method[] getDeclaredMethods(java.lang.Class)",
            "org.apache.juli.ClassLoaderLogManager:boolean addLogger(java.util.logging.Logger)",
            "org.apache.juli.ClassLoaderLogManager:org.apache.juli.ClassLoaderLogManager$ClassLoaderLogInfo getClassLoaderInfo(java.lang.ClassLoader)",
            "org.apache.juli.ClassLoaderLogManager:void doSetParentLogger(java.util.logging.Logger,java.util.logging.Logger)",
            "org.apache.juli.FileHandler$1:java.lang.Thread newThread(java.lang.Runnable)",
            "org.apache.naming.factory.MailSessionFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.naming.factory.SendMailFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.tomcat.util.compat.JrePlatform:void <clinit>()"
        ]
    },
    "org.apache.catalina.core.ApplicationDispatcher$PrivilegedInclude:java.lang.Object run()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.security.auth.message.config.AuthConfigFactory:jakarta.security.auth.message.config.AuthConfigFactory getFactory()",
            "org.apache.catalina.core.ApplicationDispatcher:void include(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)",
            "org.apache.catalina.core.ApplicationFilterChain:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)"
        ]
    },
    "org.apache.catalina.core.ApplicationDispatcher$PrivilegedDispatch:java.lang.Object run()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.security.auth.message.config.AuthConfigFactory:jakarta.security.auth.message.config.AuthConfigFactory getFactory()",
            "org.apache.catalina.core.ApplicationDispatcher:void dispatch(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)",
            "org.apache.catalina.core.ApplicationFilterChain:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)"
        ]
    },
    "org.apache.catalina.connector.Request:java.util.Locale getLocale()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletRequestWrapper:java.util.Locale getLocale()",
            "org.apache.catalina.connector.RequestFacade$GetLocalePrivilegedAction:java.util.Locale run()",
            "org.apache.catalina.connector.RequestFacade:java.util.Locale getLocale()",
            "org.apache.catalina.filters.RequestDumperFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.valves.ExtendedAccessLogValve$11:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)"
        ]
    },
    "org.apache.catalina.connector.Request:java.util.Enumeration getLocales()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletRequestWrapper:java.util.Enumeration getLocales()",
            "org.apache.catalina.authenticator.FormAuthenticator:void saveRequest(org.apache.catalina.connector.Request,org.apache.catalina.Session)",
            "org.apache.catalina.connector.RequestFacade$GetLocalesPrivilegedAction:java.util.Enumeration run()",
            "org.apache.catalina.connector.RequestFacade:java.util.Enumeration getLocales()",
            "org.apache.catalina.manager.HTMLManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.HTMLManagerServlet:void doPost(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.ManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.ManagerServlet:void doPut(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.StatusManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.host.HTMLHostManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.host.HTMLHostManagerServlet:void doPost(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.host.HostManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.CGIServlet:void printServletEnvironment(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.valves.ErrorReportValve:void report(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,java.lang.Throwable)",
            "org.apache.catalina.valves.JsonErrorReportValve:void report(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,java.lang.Throwable)"
        ]
    },
    "jakarta.servlet.http.HttpServletResponseWrapper:java.util.Collection getHeaders(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletResponseWrapper:java.util.Collection getHeaders(java.lang.String)",
            "org.apache.catalina.filters.RequestDumperFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.tomcat.util.http.ResponseUtil$ResponseAdapter:java.util.Collection getHeaders(java.lang.String)"
        ]
    },
    "org.apache.catalina.connector.ResponseFacade:java.util.Collection getHeaders(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletResponseWrapper:java.util.Collection getHeaders(java.lang.String)",
            "org.apache.catalina.filters.RequestDumperFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.tomcat.util.http.ResponseUtil$ResponseAdapter:java.util.Collection getHeaders(java.lang.String)"
        ]
    },
    "org.apache.catalina.valves.AbstractAccessLogValve$ResponseHeaderElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.valves.AbstractAccessLogValve:void log(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)"
        ]
    },
    "org.apache.catalina.valves.ExtendedAccessLogValve$ResponseAllHeaderElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.valves.AbstractAccessLogValve:void log(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)"
        ]
    },
    "org.apache.tomcat.util.http.ResponseUtil$ResponseAdapter:java.util.Collection getHeaders(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.ResponseUtil:void addVaryFieldName(org.apache.tomcat.util.http.ResponseUtil$Adapter,java.lang.String)"
        ]
    },
    "org.apache.catalina.core.ApplicationHttpRequest$AttributeNamesEnumerator:boolean hasMoreElements()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServlet:void doTrace(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.authenticator.FormAuthenticator:void saveRequest(org.apache.catalina.connector.Request,org.apache.catalina.Session)",
            "org.apache.catalina.connector.Request:java.util.Map getParameterMap()",
            "org.apache.catalina.connector.Request:void parseLocales()",
            "org.apache.catalina.connector.Response:java.util.Collection getHeaders(java.lang.String)",
            "org.apache.catalina.core.ApplicationHttpRequest$AttributeNamesEnumerator:java.lang.String findNext()",
            "org.apache.catalina.core.ApplicationHttpRequest:void mergeParameters()",
            "org.apache.catalina.core.ApplicationPushBuilder:void <init>(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.core.ApplicationRequest:void setRequest(jakarta.servlet.ServletRequest)",
            "org.apache.catalina.filters.ExpiresFilter:void init(jakarta.servlet.FilterConfig)",
            "org.apache.catalina.filters.FilterBase:void init(jakarta.servlet.FilterConfig)",
            "org.apache.catalina.filters.RemoteIpFilter$XForwardedRequest:void <init>(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.filters.RemoteIpFilter:void doFilter(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.filters.RequestDumperFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.loader.JdbcLeakPrevention:java.util.List clearJdbcDriverRegistrations()",
            "org.apache.catalina.loader.WebappClassLoaderBase$CombinedEnumeration:boolean inc()",
            "org.apache.catalina.loader.WebappClassLoaderBase:java.util.Enumeration findResources(java.lang.String)",
            "org.apache.catalina.manager.StatusManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.StatusTransformer:void writeConnectorState(java.io.PrintWriter,javax.management.ObjectName,java.lang.String,javax.management.MBeanServer,java.util.Vector,java.util.Vector,int,java.lang.Object[])",
            "org.apache.catalina.manager.util.SessionUtils:java.util.Locale guessLocaleFromSession(jakarta.servlet.http.HttpSession)",
            "org.apache.catalina.manager.util.SessionUtils:java.lang.Object guessUserFromSession(org.apache.catalina.Session)",
            "org.apache.catalina.servlets.CGIServlet$CGIEnvironment:boolean setCGIEnvironment(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.servlets.CGIServlet$CGIRunner:java.lang.String[] hashToStringArray(java.util.Hashtable)",
            "org.apache.catalina.servlets.CGIServlet:void init(jakarta.servlet.ServletConfig)",
            "org.apache.catalina.servlets.CGIServlet:void printServletEnvironment(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.servlets.DefaultServlet:org.apache.catalina.servlets.DefaultServlet$PrecompressedResource getBestPrecompressedResource(jakarta.servlet.http.HttpServletRequest,java.util.List)",
            "org.apache.catalina.servlets.WebdavServlet$LockInfo:java.lang.String toString()",
            "org.apache.catalina.servlets.WebdavServlet$LockInfo:void toXML(org.apache.catalina.util.XMLWriter)",
            "org.apache.catalina.servlets.WebdavServlet:void doPropfind(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.WebdavServlet:void doLock(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.WebdavServlet:void doUnlock(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.WebdavServlet:boolean isLocked(java.lang.String,java.lang.String)",
            "org.apache.catalina.servlets.WebdavServlet:void sendReport(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,java.util.Hashtable)",
            "org.apache.catalina.servlets.WebdavServlet:void generatePropFindResponse(org.apache.catalina.util.XMLWriter,java.lang.String,java.lang.String,int,java.util.Vector,boolean,boolean,long,long,long,java.lang.String,java.lang.String)",
            "org.apache.catalina.servlets.WebdavServlet:boolean generateLockDiscovery(java.lang.String,org.apache.catalina.util.XMLWriter)",
            "org.apache.catalina.session.ManagerBase:java.util.HashMap getSession(java.lang.String)",
            "org.apache.catalina.startup.CatalinaProperties:void loadProperties()",
            "org.apache.catalina.startup.ExpandWar:java.lang.String expand(org.apache.catalina.Host,java.net.URL,java.lang.String)",
            "org.apache.catalina.startup.ExpandWar:void validate(org.apache.catalina.Host,java.net.URL,java.lang.String)",
            "org.apache.catalina.startup.UserConfig:void deploy()",
            "org.apache.catalina.startup.WebappServiceLoader:java.util.List load(java.lang.Class)",
            "org.apache.catalina.valves.AbstractAccessLogValve$HeaderElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.CrawlerSessionManagerValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.RemoteIpValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.webresources.AbstractSingleArchiveResourceSet:java.util.Map getArchiveEntries(boolean)",
            "org.apache.catalina.webresources.JarContents:void <init>(java.util.jar.JarFile)",
            "org.apache.coyote.CompressionConfig:boolean useCompression(org.apache.coyote.Request,org.apache.coyote.Response)",
            "org.apache.coyote.http2.Http2Protocol:boolean accept(org.apache.coyote.Request)",
            "org.apache.naming.AbstractRef:java.lang.String toString()",
            "org.apache.naming.NamingContext:void <init>(java.util.Hashtable,java.lang.String,java.util.HashMap)",
            "org.apache.naming.factory.BeanFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.naming.factory.MailSessionFactory:jakarta.mail.Session lambda$getObjectInstance$0(javax.naming.Reference)",
            "org.apache.naming.factory.SendMailFactory:jakarta.mail.internet.MimePartDataSource lambda$getObjectInstance$0(javax.naming.Reference)",
            "org.apache.naming.factory.webservices.ServiceRefFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.tomcat.util.http.MimeHeaders:java.lang.String toString()",
            "org.apache.tomcat.util.http.ResponseUtil$HeaderAdapter:java.util.Collection getHeaders(java.lang.String)",
            "org.apache.tomcat.util.http.parser.TokenList:boolean parseTokenList(java.util.Enumeration,java.util.Collection)",
            "org.apache.tomcat.util.http.parser.Upgrade:java.util.List parse(java.util.Enumeration)",
            "org.apache.tomcat.util.modeler.modules.MbeansDescriptorsIntrospectionSource:org.apache.tomcat.util.modeler.ManagedBean createManagedBean(org.apache.tomcat.util.modeler.Registry,java.lang.String,java.lang.Class,java.lang.String)",
            "org.apache.tomcat.util.net.AbstractEndpoint:java.net.InetSocketAddress getUnlockAddress(java.net.InetSocketAddress)",
            "org.apache.tomcat.util.net.SSLUtilBase:javax.net.ssl.KeyManager[] getKeyManagers()",
            "org.apache.tomcat.util.net.SSLUtilBase:void checkTrustStoreEntries(java.security.KeyStore)",
            "org.apache.tomcat.util.res.StringManager:org.apache.tomcat.util.res.StringManager getManager(java.lang.String,java.util.Enumeration)",
            "org.apache.tomcat.util.scan.JarFileUrlJar:void nextEntry()"
        ]
    },
    "org.apache.catalina.core.ApplicationFilterConfig:void initFilter()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationFilterConfig:void <init>(org.apache.catalina.Context,org.apache.tomcat.util.descriptor.web.FilterDef)",
            "org.apache.catalina.core.ApplicationFilterConfig:jakarta.servlet.Filter getFilter()"
        ]
    },
    "org.apache.catalina.filters.AddDefaultCharsetFilter:void init(jakarta.servlet.FilterConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationFilterConfig:void initFilter()"
        ]
    },
    "org.apache.catalina.filters.CsrfPreventionFilterBase:void init(jakarta.servlet.FilterConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.CsrfPreventionFilter:void init(jakarta.servlet.FilterConfig)",
            "org.apache.catalina.filters.RestCsrfPreventionFilter:void init(jakarta.servlet.FilterConfig)"
        ]
    },
    "org.apache.catalina.filters.HttpHeaderSecurityFilter:void init(jakarta.servlet.FilterConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationFilterConfig:void initFilter()"
        ]
    },
    "org.apache.catalina.loader.WebappClassLoaderBase$CombinedEnumeration:java.lang.Object nextElement()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServlet:void doTrace(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.authenticator.FormAuthenticator:void saveRequest(org.apache.catalina.connector.Request,org.apache.catalina.Session)",
            "org.apache.catalina.connector.Request:java.util.Map getParameterMap()",
            "org.apache.catalina.connector.Request:void parseLocales()",
            "org.apache.catalina.connector.Response:java.util.Collection getHeaders(java.lang.String)",
            "org.apache.catalina.core.ApplicationHttpRequest$AttributeNamesEnumerator:java.lang.String findNext()",
            "org.apache.catalina.core.ApplicationHttpRequest:void mergeParameters()",
            "org.apache.catalina.core.ApplicationPushBuilder:void <init>(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.core.ApplicationRequest:void setRequest(jakarta.servlet.ServletRequest)",
            "org.apache.catalina.filters.ExpiresFilter:void init(jakarta.servlet.FilterConfig)",
            "org.apache.catalina.filters.FilterBase:void init(jakarta.servlet.FilterConfig)",
            "org.apache.catalina.filters.RemoteIpFilter$XForwardedRequest:void <init>(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.filters.RemoteIpFilter:void doFilter(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.filters.RequestDumperFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.loader.JdbcLeakPrevention:java.util.List clearJdbcDriverRegistrations()",
            "org.apache.catalina.loader.WebappClassLoaderBase$CombinedEnumeration:java.net.URL nextElement()",
            "org.apache.catalina.loader.WebappClassLoaderBase:java.util.Enumeration findResources(java.lang.String)",
            "org.apache.catalina.manager.StatusManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.StatusTransformer:void writeConnectorState(java.io.PrintWriter,javax.management.ObjectName,java.lang.String,javax.management.MBeanServer,java.util.Vector,java.util.Vector,int,java.lang.Object[])",
            "org.apache.catalina.manager.util.SessionUtils:java.util.Locale guessLocaleFromSession(jakarta.servlet.http.HttpSession)",
            "org.apache.catalina.manager.util.SessionUtils:java.lang.Object guessUserFromSession(org.apache.catalina.Session)",
            "org.apache.catalina.servlets.CGIServlet$CGIEnvironment:boolean setCGIEnvironment(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.servlets.CGIServlet$CGIRunner:java.lang.String[] hashToStringArray(java.util.Hashtable)",
            "org.apache.catalina.servlets.CGIServlet:void init(jakarta.servlet.ServletConfig)",
            "org.apache.catalina.servlets.CGIServlet:void printServletEnvironment(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.servlets.DefaultServlet:org.apache.catalina.servlets.DefaultServlet$PrecompressedResource getBestPrecompressedResource(jakarta.servlet.http.HttpServletRequest,java.util.List)",
            "org.apache.catalina.servlets.WebdavServlet$LockInfo:java.lang.String toString()",
            "org.apache.catalina.servlets.WebdavServlet$LockInfo:void toXML(org.apache.catalina.util.XMLWriter)",
            "org.apache.catalina.servlets.WebdavServlet:void doPropfind(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.WebdavServlet:void doLock(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.WebdavServlet:void doUnlock(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.WebdavServlet:boolean isLocked(java.lang.String,java.lang.String)",
            "org.apache.catalina.servlets.WebdavServlet:boolean copyResource(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.WebdavServlet:void sendReport(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,java.util.Hashtable)",
            "org.apache.catalina.servlets.WebdavServlet:void generatePropFindResponse(org.apache.catalina.util.XMLWriter,java.lang.String,java.lang.String,int,java.util.Vector,boolean,boolean,long,long,long,java.lang.String,java.lang.String)",
            "org.apache.catalina.servlets.WebdavServlet:boolean generateLockDiscovery(java.lang.String,org.apache.catalina.util.XMLWriter)",
            "org.apache.catalina.session.ManagerBase:java.util.HashMap getSession(java.lang.String)",
            "org.apache.catalina.startup.CatalinaProperties:void loadProperties()",
            "org.apache.catalina.startup.ExpandWar:java.lang.String expand(org.apache.catalina.Host,java.net.URL,java.lang.String)",
            "org.apache.catalina.startup.ExpandWar:void validate(org.apache.catalina.Host,java.net.URL,java.lang.String)",
            "org.apache.catalina.startup.UserConfig:void deploy()",
            "org.apache.catalina.startup.WebappServiceLoader:java.util.List load(java.lang.Class)",
            "org.apache.catalina.valves.AbstractAccessLogValve$HeaderElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.CrawlerSessionManagerValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.RemoteIpValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.webresources.AbstractSingleArchiveResourceSet:java.util.Map getArchiveEntries(boolean)",
            "org.apache.catalina.webresources.JarContents:void <init>(java.util.jar.JarFile)",
            "org.apache.coyote.CompressionConfig:boolean useCompression(org.apache.coyote.Request,org.apache.coyote.Response)",
            "org.apache.coyote.http2.Http2Protocol:boolean accept(org.apache.coyote.Request)",
            "org.apache.naming.AbstractRef:java.lang.String toString()",
            "org.apache.naming.NamingContext:void <init>(java.util.Hashtable,java.lang.String,java.util.HashMap)",
            "org.apache.naming.factory.BeanFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.naming.factory.MailSessionFactory:jakarta.mail.Session lambda$getObjectInstance$0(javax.naming.Reference)",
            "org.apache.naming.factory.SendMailFactory:jakarta.mail.internet.MimePartDataSource lambda$getObjectInstance$0(javax.naming.Reference)",
            "org.apache.naming.factory.webservices.ServiceRefFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.tomcat.util.http.MimeHeaders:java.lang.String toString()",
            "org.apache.tomcat.util.http.ResponseUtil$HeaderAdapter:java.util.Collection getHeaders(java.lang.String)",
            "org.apache.tomcat.util.http.parser.TokenList:boolean parseTokenList(java.util.Enumeration,java.util.Collection)",
            "org.apache.tomcat.util.http.parser.Upgrade:java.util.List parse(java.util.Enumeration)",
            "org.apache.tomcat.util.modeler.modules.MbeansDescriptorsIntrospectionSource:org.apache.tomcat.util.modeler.ManagedBean createManagedBean(org.apache.tomcat.util.modeler.Registry,java.lang.String,java.lang.Class,java.lang.String)",
            "org.apache.tomcat.util.net.AbstractEndpoint:java.net.InetSocketAddress getUnlockAddress(java.net.InetSocketAddress)",
            "org.apache.tomcat.util.net.SSLUtilBase:javax.net.ssl.KeyManager[] getKeyManagers()",
            "org.apache.tomcat.util.net.SSLUtilBase:void checkTrustStoreEntries(java.security.KeyStore)",
            "org.apache.tomcat.util.res.StringManager:org.apache.tomcat.util.res.StringManager getManager(java.lang.String,java.util.Enumeration)",
            "org.apache.tomcat.util.scan.JarFileUrlJar:void nextEntry()"
        ]
    },
    "org.apache.catalina.loader.WebappClassLoaderBase:java.util.Enumeration getResources(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.loader.WebappClassLoaderBase:java.util.Enumeration getResources(java.lang.String)",
            "org.apache.catalina.startup.WebappServiceLoader:java.util.List load(java.lang.Class)"
        ]
    },
    "org.apache.catalina.manager.util.SessionUtils:java.util.Locale guessLocaleFromSession(org.apache.catalina.Session)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.JspHelper:java.lang.String guessDisplayLocaleFromSession(org.apache.catalina.Session)"
        ]
    },
    "org.apache.catalina.manager.JspHelper:java.lang.String guessDisplayUserFromSession(org.apache.catalina.Session)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.HTMLManagerServlet$7:java.lang.Comparable getComparableObject(org.apache.catalina.Session)"
        ]
    },
    "org.apache.catalina.core.StandardWrapper:void initServlet(jakarta.servlet.Servlet)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.StandardWrapper:jakarta.servlet.Servlet allocate()",
            "org.apache.catalina.core.StandardWrapper:void load()",
            "org.apache.catalina.core.StandardWrapper:jakarta.servlet.Servlet loadServlet()"
        ]
    },
    "org.apache.catalina.startup.Tomcat$ExistingStandardWrapper:jakarta.servlet.Servlet loadServlet()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.StandardWrapper:java.lang.String[] getServletMethods()",
            "org.apache.catalina.core.StandardWrapper:jakarta.servlet.Servlet allocate()",
            "org.apache.catalina.core.StandardWrapper:void load()"
        ]
    },
    "org.apache.catalina.servlets.WebdavServlet:void deleteCollection(jakarta.servlet.http.HttpServletRequest,java.lang.String,java.util.Hashtable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.WebdavServlet:boolean deleteResource(java.lang.String,jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,boolean)",
            "org.apache.catalina.servlets.WebdavServlet:void deleteCollection(jakarta.servlet.http.HttpServletRequest,java.lang.String,java.util.Hashtable)"
        ]
    },
    "org.apache.catalina.servlets.WebdavServlet:void parseProperties(jakarta.servlet.http.HttpServletRequest,org.apache.catalina.util.XMLWriter,java.lang.String,int,java.util.Vector)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.WebdavServlet:void doPropfind(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.startup.CatalinaProperties:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.security.SecurityConfig:void <init>()",
            "org.apache.catalina.startup.Bootstrap:java.lang.ClassLoader createClassLoader(java.lang.String,java.lang.ClassLoader)",
            "org.apache.catalina.startup.CatalinaProperties:java.lang.String getProperty(java.lang.String)",
            "org.apache.catalina.startup.CatalinaProperties:void loadProperties()",
            "org.apache.catalina.startup.CatalinaProperties:void <clinit>()"
        ]
    },
    "org.apache.catalina.startup.ContextConfig:void fixDocBase()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.ContextConfig:void beforeStart()"
        ]
    },
    "org.apache.catalina.startup.ContextConfig:void processServletContainerInitializers()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.ContextConfig:void webConfig()"
        ]
    },
    "org.apache.catalina.webresources.AbstractArchiveResourceSet:java.lang.String[] list(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.webresources.StandardRoot:java.lang.String[] list(java.lang.String,boolean)"
        ]
    },
    "org.apache.catalina.webresources.AbstractArchiveResourceSet:java.util.Set listWebAppPaths(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.webresources.StandardRoot:java.util.Set listWebAppPaths(java.lang.String)"
        ]
    },
    "org.apache.catalina.webresources.AbstractArchiveResourceSet:org.apache.catalina.WebResource getResource(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.webresources.StandardRoot:boolean preResourceExists(java.lang.String)",
            "org.apache.catalina.webresources.StandardRoot:org.apache.catalina.WebResource getResourceInternal(java.lang.String,boolean)",
            "org.apache.catalina.webresources.StandardRoot:org.apache.catalina.WebResource[] getResourcesInternal(java.lang.String,boolean)"
        ]
    },
    "org.apache.catalina.webresources.AbstractArchiveResourceSet:java.util.jar.JarFile openJarFile()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.webresources.AbstractSingleArchiveResource:org.apache.catalina.webresources.AbstractArchiveResource$JarInputStreamWrapper getJarInputStreamWrapper()",
            "org.apache.catalina.webresources.AbstractSingleArchiveResourceSet:java.util.Map getArchiveEntries(boolean)",
            "org.apache.catalina.webresources.AbstractSingleArchiveResourceSet:java.util.jar.JarEntry getArchiveEntry(java.lang.String)",
            "org.apache.catalina.webresources.AbstractSingleArchiveResourceSet:boolean isMultiRelease()",
            "org.apache.catalina.webresources.JarWarResource:org.apache.catalina.webresources.AbstractArchiveResource$JarInputStreamWrapper getJarInputStreamWrapper()",
            "org.apache.catalina.webresources.JarWarResourceSet:java.util.Map getArchiveEntries(boolean)"
        ]
    },
    "org.apache.coyote.http11.AbstractHttp11Protocol:boolean useCompression(org.apache.coyote.Request,org.apache.coyote.Response)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11Processor:void prepareResponse()",
            "org.apache.coyote.http2.Http2Protocol:boolean useCompression(org.apache.coyote.Request,org.apache.coyote.Response)"
        ]
    },
    "org.apache.naming.NamingContext:void <init>(java.util.Hashtable,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.NamingContextListener:void lifecycleEvent(org.apache.catalina.LifecycleEvent)",
            "org.apache.naming.NamingContext:javax.naming.Context createSubcontext(javax.naming.Name)",
            "org.apache.naming.SelectorContext:javax.naming.Context getBoundContext()",
            "org.apache.naming.java.javaURLContextFactory:javax.naming.Context getInitialContext(java.util.Hashtable)"
        ]
    },
    "org.apache.naming.factory.MailSessionFactory$lambda_getObjectInstance_0__67:java.lang.Object run()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.security.auth.message.config.AuthConfigFactory:java.lang.String getFactoryClassName()",
            "jakarta.servlet.http.Cookie:void <clinit>()",
            "org.apache.catalina.startup.ClassLoaderFactory:java.lang.ClassLoader createClassLoader(java.io.File[],java.io.File[],java.lang.ClassLoader)",
            "org.apache.catalina.startup.ClassLoaderFactory:java.lang.ClassLoader createClassLoader(java.util.List,java.lang.ClassLoader)",
            "org.apache.catalina.util.Introspection:java.lang.reflect.Field[] getDeclaredFields(java.lang.Class)",
            "org.apache.catalina.util.Introspection:java.lang.reflect.Method[] getDeclaredMethods(java.lang.Class)",
            "org.apache.juli.ClassLoaderLogManager:boolean addLogger(java.util.logging.Logger)",
            "org.apache.juli.ClassLoaderLogManager:org.apache.juli.ClassLoaderLogManager$ClassLoaderLogInfo getClassLoaderInfo(java.lang.ClassLoader)",
            "org.apache.juli.ClassLoaderLogManager:void doSetParentLogger(java.util.logging.Logger,java.util.logging.Logger)",
            "org.apache.juli.FileHandler$1:java.lang.Thread newThread(java.lang.Runnable)",
            "org.apache.naming.factory.MailSessionFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.naming.factory.SendMailFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.tomcat.util.compat.JrePlatform:void <clinit>()"
        ]
    },
    "org.apache.naming.factory.SendMailFactory$lambda_getObjectInstance_0__68:java.lang.Object run()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.security.auth.message.config.AuthConfigFactory:java.lang.String getFactoryClassName()",
            "jakarta.servlet.http.Cookie:void <clinit>()",
            "org.apache.catalina.startup.ClassLoaderFactory:java.lang.ClassLoader createClassLoader(java.io.File[],java.io.File[],java.lang.ClassLoader)",
            "org.apache.catalina.startup.ClassLoaderFactory:java.lang.ClassLoader createClassLoader(java.util.List,java.lang.ClassLoader)",
            "org.apache.catalina.util.Introspection:java.lang.reflect.Field[] getDeclaredFields(java.lang.Class)",
            "org.apache.catalina.util.Introspection:java.lang.reflect.Method[] getDeclaredMethods(java.lang.Class)",
            "org.apache.juli.ClassLoaderLogManager:boolean addLogger(java.util.logging.Logger)",
            "org.apache.juli.ClassLoaderLogManager:org.apache.juli.ClassLoaderLogManager$ClassLoaderLogInfo getClassLoaderInfo(java.lang.ClassLoader)",
            "org.apache.juli.ClassLoaderLogManager:void doSetParentLogger(java.util.logging.Logger,java.util.logging.Logger)",
            "org.apache.juli.FileHandler$1:java.lang.Thread newThread(java.lang.Runnable)",
            "org.apache.naming.factory.MailSessionFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.naming.factory.SendMailFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.tomcat.util.compat.JrePlatform:void <clinit>()"
        ]
    },
    "org.apache.tomcat.util.http.ResponseUtil:void addVaryFieldName(org.apache.tomcat.util.http.ResponseUtil$Adapter,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.ResponseUtil:void addVaryFieldName(org.apache.tomcat.util.http.MimeHeaders,java.lang.String)",
            "org.apache.tomcat.util.http.ResponseUtil:void addVaryFieldName(jakarta.servlet.http.HttpServletResponse,java.lang.String)"
        ]
    },
    "org.apache.coyote.http11.Http11Processor:boolean isConnectionToken(org.apache.tomcat.util.http.MimeHeaders,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11Processor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState service(org.apache.tomcat.util.net.SocketWrapperBase)",
            "org.apache.coyote.http11.Http11Processor:void prepareResponse()"
        ]
    },
    "org.apache.catalina.connector.Request:java.lang.String getUpgradeProtocolName(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.Request:jakarta.servlet.http.HttpUpgradeHandler upgrade(java.lang.Class)"
        ]
    },
    "org.apache.tomcat.util.modeler.modules.MbeansDescriptorsIntrospectionSource:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.modeler.modules.MbeansDescriptorsIntrospectionSource:java.util.List loadDescriptors(org.apache.tomcat.util.modeler.Registry,java.lang.String,java.lang.Object)"
        ]
    },
    "org.apache.tomcat.util.net.AbstractEndpoint:void unlockAccept()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.AbstractEndpoint:void pause()",
            "org.apache.tomcat.util.net.AbstractEndpoint:void closeServerSocketGraceful()",
            "org.apache.tomcat.util.net.NioEndpoint:void unlockAccept()"
        ]
    },
    "org.apache.tomcat.util.net.SSLUtilBase:org.apache.tomcat.util.net.SSLContext createSSLContext(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.AbstractJsseEndpoint:void createSSLContext(org.apache.tomcat.util.net.SSLHostConfig)",
            "org.apache.tomcat.util.net.AprEndpoint:void createSSLContext(org.apache.tomcat.util.net.SSLHostConfig)"
        ]
    },
    "org.apache.tomcat.util.net.openssl.OpenSSLUtil:javax.net.ssl.KeyManager[] getKeyManagers()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.AprEndpoint:void createSSLContext(org.apache.tomcat.util.net.SSLHostConfig)",
            "org.apache.tomcat.util.net.SSLUtilBase:org.apache.tomcat.util.net.SSLContext createSSLContext(java.util.List)"
        ]
    },
    "org.apache.tomcat.util.net.SSLUtilBase:javax.net.ssl.TrustManager[] getTrustManagers()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SSLUtilBase:org.apache.tomcat.util.net.SSLContext createSSLContext(java.util.List)"
        ]
    },
    "org.apache.tomcat.util.Diagnostics:java.lang.String getThreadDump(java.util.Enumeration)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.ManagerServlet:void threadDump(java.io.PrintWriter,org.apache.tomcat.util.res.StringManager,java.util.Enumeration)"
        ]
    },
    "org.apache.tomcat.util.Diagnostics:java.lang.String getVMInfo(java.util.Enumeration)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.ManagerServlet:void vmInfo(java.io.PrintWriter,org.apache.tomcat.util.res.StringManager,java.util.Enumeration)"
        ]
    },
    "org.apache.catalina.startup.ContextConfig:void processResourceJARs(java.util.Set)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.ContextConfig:void webConfig()"
        ]
    },
    "org.apache.catalina.startup.ContextConfig:void processAnnotationsJar(java.net.URL,org.apache.tomcat.util.descriptor.web.WebXml,boolean,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.ContextConfig:void processAnnotationsUrl(java.net.URL,org.apache.tomcat.util.descriptor.web.WebXml,boolean,java.util.Map)"
        ]
    },
    "org.apache.tomcat.util.scan.ReferenceCountedJar:void nextEntry()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.ContextConfig:void processResourceJARs(java.util.Set)",
            "org.apache.catalina.startup.ContextConfig:void processAnnotationsJar(java.net.URL,org.apache.tomcat.util.descriptor.web.WebXml,boolean,java.util.Map)",
            "org.apache.tomcat.util.scan.ReferenceCountedJar:void nextEntry()"
        ]
    },
    "org.apache.coyote.ajp.AjpProcessor:void recycle()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProtocol$ConnectionHandler:void release(org.apache.coyote.Processor)",
            "org.apache.coyote.ajp.AjpProcessor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState dispatchEndRequest()",
            "org.apache.coyote.ajp.AjpProcessor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState service(org.apache.tomcat.util.net.SocketWrapperBase)"
        ]
    },
    "org.apache.coyote.http11.Http11Processor:void recycle()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProtocol$ConnectionHandler:void release(org.apache.coyote.Processor)"
        ]
    },
    "org.apache.catalina.valves.rewrite.RewriteCond:boolean evaluate(java.util.regex.Matcher,java.util.regex.Matcher,org.apache.catalina.valves.rewrite.Resolver)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.valves.rewrite.RewriteRule:java.lang.CharSequence evaluate(java.lang.CharSequence,org.apache.catalina.valves.rewrite.Resolver)"
        ]
    },
    "org.apache.catalina.valves.rewrite.RewriteRule:java.lang.CharSequence evaluate(java.lang.CharSequence,org.apache.catalina.valves.rewrite.Resolver)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.valves.rewrite.RewriteValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)"
        ]
    },
    "org.apache.catalina.valves.rewrite.Substitution$MapElement:java.lang.String evaluate(java.util.regex.Matcher,java.util.regex.Matcher,org.apache.catalina.valves.rewrite.Resolver)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.valves.rewrite.Substitution:java.lang.String evaluateSubstitution(org.apache.catalina.valves.rewrite.Substitution$SubstitutionElement[],java.util.regex.Matcher,java.util.regex.Matcher,org.apache.catalina.valves.rewrite.Resolver)"
        ]
    },
    "org.apache.catalina.connector.RequestFacade$GetParameterMapPrivilegedAction:java.lang.Object run()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.security.auth.message.config.AuthConfigFactory:java.lang.String getFactoryClassName()",
            "jakarta.servlet.http.Cookie:void <clinit>()",
            "org.apache.catalina.connector.RequestFacade:java.util.Map getParameterMap()",
            "org.apache.catalina.startup.ClassLoaderFactory:java.lang.ClassLoader createClassLoader(java.io.File[],java.io.File[],java.lang.ClassLoader)",
            "org.apache.catalina.startup.ClassLoaderFactory:java.lang.ClassLoader createClassLoader(java.util.List,java.lang.ClassLoader)",
            "org.apache.catalina.util.Introspection:java.lang.reflect.Field[] getDeclaredFields(java.lang.Class)",
            "org.apache.catalina.util.Introspection:java.lang.reflect.Method[] getDeclaredMethods(java.lang.Class)",
            "org.apache.juli.ClassLoaderLogManager:boolean addLogger(java.util.logging.Logger)",
            "org.apache.juli.ClassLoaderLogManager:org.apache.juli.ClassLoaderLogManager$ClassLoaderLogInfo getClassLoaderInfo(java.lang.ClassLoader)",
            "org.apache.juli.ClassLoaderLogManager:void doSetParentLogger(java.util.logging.Logger,java.util.logging.Logger)",
            "org.apache.juli.FileHandler$1:java.lang.Thread newThread(java.lang.Runnable)",
            "org.apache.naming.factory.MailSessionFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.naming.factory.SendMailFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.tomcat.util.compat.JrePlatform:void <clinit>()"
        ]
    },
    "org.apache.catalina.core.ApplicationHttpRequest:java.lang.String getParameter(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletRequestWrapper:java.lang.String getParameter(java.lang.String)",
            "org.apache.catalina.filters.CsrfPreventionFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.filters.FailedRequestFilter:boolean isGoodRequest(jakarta.servlet.ServletRequest)",
            "org.apache.catalina.manager.HTMLManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.HTMLManagerServlet:void doPost(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.HTMLManagerServlet:java.lang.String expireSessions(org.apache.catalina.util.ContextName,jakarta.servlet.http.HttpServletRequest,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.HTMLManagerServlet:void doSessions(org.apache.catalina.util.ContextName,jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.HTMLManagerServlet:void displaySessionsListPage(org.apache.catalina.util.ContextName,jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.JMXProxyServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.ManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.ManagerServlet:void doPut(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.ManagerServlet:void expireSessions(java.io.PrintWriter,org.apache.catalina.util.ContextName,jakarta.servlet.http.HttpServletRequest,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.StatusManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.host.HTMLHostManagerServlet:void doPost(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.host.HostManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.host.HostManagerServlet:void add(jakarta.servlet.http.HttpServletRequest,java.io.PrintWriter,java.lang.String,boolean,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.host.HostManagerServlet:boolean booleanParameter(jakarta.servlet.http.HttpServletRequest,java.lang.String,boolean,boolean)"
        ]
    },
    "org.apache.catalina.core.ApplicationHttpRequest:java.util.Map getParameterMap()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletRequestWrapper:java.util.Map getParameterMap()",
            "org.apache.catalina.core.ApplicationHttpRequest:void parseParameters()"
        ]
    },
    "org.apache.catalina.core.ApplicationHttpRequest:java.util.Enumeration getParameterNames()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletRequestWrapper:java.util.Enumeration getParameterNames()",
            "org.apache.catalina.filters.RequestDumperFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.servlets.CGIServlet:void printServletEnvironment(jakarta.servlet.http.HttpServletRequest)"
        ]
    },
    "org.apache.catalina.core.ApplicationHttpRequest:java.lang.String[] getParameterValues(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletRequestWrapper:java.lang.String[] getParameterValues(java.lang.String)",
            "org.apache.catalina.filters.RequestDumperFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.manager.HTMLManagerServlet:void doSessions(org.apache.catalina.util.ContextName,jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.servlets.CGIServlet:void printServletEnvironment(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.filters.RestCsrfPreventionFilter$RestCsrfPreventionStrategy$getParameterValues__34:java.lang.Object getNonce(java.lang.Object,java.lang.String)"
        ]
    },
    "org.apache.catalina.connector.CoyoteReader:java.lang.String readLine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.CGIServlet$CGIRunner:void run()",
            "org.apache.catalina.servlets.CGIServlet$CGIRunner:void sendToLog(java.io.BufferedReader)",
            "org.apache.catalina.startup.PasswdUserDatabase:void init()",
            "org.apache.catalina.startup.WebappServiceLoader:void parseConfigFile(java.util.LinkedHashSet,java.net.URL)",
            "org.apache.catalina.valves.rewrite.RewriteValve:void parse(java.io.BufferedReader)",
            "org.apache.tomcat.util.net.jsse.PEMFile:void <init>(java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.catalina.connector.CoyoteReader:int read()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.CoyoteReader:java.lang.String readLine()",
            "org.apache.tomcat.util.http.parser.Host:int parse(java.io.Reader)",
            "org.apache.tomcat.util.http.parser.HttpParser:int skipLws(java.io.Reader)",
            "org.apache.tomcat.util.http.parser.HttpParser:org.apache.tomcat.util.http.parser.SkipResult skipConstant(java.io.Reader,java.lang.String)",
            "org.apache.tomcat.util.http.parser.HttpParser:java.lang.String readToken(java.io.Reader)",
            "org.apache.tomcat.util.http.parser.HttpParser:java.lang.String readDigits(java.io.Reader)",
            "org.apache.tomcat.util.http.parser.HttpParser:java.lang.String readQuotedString(java.io.Reader,boolean)",
            "org.apache.tomcat.util.http.parser.HttpParser:java.lang.String readQuotedToken(java.io.Reader)",
            "org.apache.tomcat.util.http.parser.HttpParser:java.lang.String readLhex(java.io.Reader)",
            "org.apache.tomcat.util.http.parser.HttpParser:double readWeight(java.io.Reader,char)",
            "org.apache.tomcat.util.http.parser.HttpParser:int readHostIPv4(java.io.Reader,boolean)",
            "org.apache.tomcat.util.http.parser.HttpParser:int readHostIPv6(java.io.Reader)",
            "org.apache.tomcat.util.http.parser.HttpParser:int readHostDomainName(java.io.Reader)",
            "org.apache.tomcat.util.http.parser.HttpParser:org.apache.tomcat.util.http.parser.SkipResult skipUntil(java.io.Reader,int,char)"
        ]
    },
    "org.apache.tomcat.util.http.parser.Host:int parse(java.io.Reader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.parser.Host:int parse(org.apache.tomcat.util.buf.MessageBytes)",
            "org.apache.tomcat.util.http.parser.Host:int parse(java.lang.String)"
        ]
    },
    "org.apache.tomcat.util.http.parser.HttpParser:int skipLws(java.io.Reader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.parser.EntityTag:java.lang.Boolean compareEntityTag(java.io.StringReader,boolean,java.lang.String)",
            "org.apache.tomcat.util.http.parser.HttpParser:org.apache.tomcat.util.http.parser.SkipResult skipConstant(java.io.Reader,java.lang.String)",
            "org.apache.tomcat.util.http.parser.HttpParser:java.lang.String readToken(java.io.Reader)",
            "org.apache.tomcat.util.http.parser.HttpParser:java.lang.String readDigits(java.io.Reader)",
            "org.apache.tomcat.util.http.parser.HttpParser:java.lang.String readQuotedString(java.io.Reader,boolean)",
            "org.apache.tomcat.util.http.parser.HttpParser:java.lang.String readTokenOrQuotedString(java.io.Reader,boolean)",
            "org.apache.tomcat.util.http.parser.HttpParser:java.lang.String readQuotedToken(java.io.Reader)",
            "org.apache.tomcat.util.http.parser.HttpParser:java.lang.String readLhex(java.io.Reader)",
            "org.apache.tomcat.util.http.parser.HttpParser:double readWeight(java.io.Reader,char)",
            "org.apache.tomcat.util.http.parser.Upgrade:java.util.List parse(java.util.Enumeration)"
        ]
    },
    "org.apache.tomcat.util.http.parser.HttpParser:org.apache.tomcat.util.http.parser.SkipResult skipConstant(java.io.Reader,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.parser.AcceptEncoding:java.util.List parse(java.io.StringReader)",
            "org.apache.tomcat.util.http.parser.AcceptLanguage:java.util.List parse(java.io.StringReader)",
            "org.apache.tomcat.util.http.parser.Authorization:java.util.Map parseAuthorizationDigest(java.io.StringReader)",
            "org.apache.tomcat.util.http.parser.ContentRange:org.apache.tomcat.util.http.parser.ContentRange parse(java.io.StringReader)",
            "org.apache.tomcat.util.http.parser.EntityTag:java.lang.Boolean compareEntityTag(java.io.StringReader,boolean,java.lang.String)",
            "org.apache.tomcat.util.http.parser.MediaType:org.apache.tomcat.util.http.parser.MediaType parseMediaType(java.io.StringReader)",
            "org.apache.tomcat.util.http.parser.Ranges:org.apache.tomcat.util.http.parser.Ranges parse(java.io.StringReader)",
            "org.apache.tomcat.util.http.parser.TokenList:boolean parseTokenList(java.io.Reader,java.util.Collection)",
            "org.apache.tomcat.util.http.parser.Upgrade:java.util.List parse(java.util.Enumeration)"
        ]
    },
    "org.apache.tomcat.util.http.parser.HttpParser:java.lang.String readToken(java.io.Reader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.parser.AcceptEncoding:java.util.List parse(java.io.StringReader)",
            "org.apache.tomcat.util.http.parser.AcceptLanguage:java.util.List parse(java.io.StringReader)",
            "org.apache.tomcat.util.http.parser.Authorization:java.util.Map parseAuthorizationDigest(java.io.StringReader)",
            "org.apache.tomcat.util.http.parser.ContentRange:org.apache.tomcat.util.http.parser.ContentRange parse(java.io.StringReader)",
            "org.apache.tomcat.util.http.parser.HttpParser:java.lang.String readTokenOrQuotedString(java.io.Reader,boolean)",
            "org.apache.tomcat.util.http.parser.MediaType:org.apache.tomcat.util.http.parser.MediaType parseMediaType(java.io.StringReader)",
            "org.apache.tomcat.util.http.parser.Ranges:org.apache.tomcat.util.http.parser.Ranges parse(java.io.StringReader)",
            "org.apache.tomcat.util.http.parser.TokenList:boolean parseTokenList(java.io.Reader,java.util.Collection)",
            "org.apache.tomcat.util.http.parser.Upgrade:java.util.List parse(java.util.Enumeration)"
        ]
    },
    "org.apache.tomcat.util.http.parser.HttpParser:java.lang.String readDigits(java.io.Reader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.parser.HttpParser:long readLong(java.io.Reader)"
        ]
    },
    "org.apache.tomcat.util.http.parser.HttpParser:java.lang.String readQuotedString(java.io.Reader,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.parser.Authorization:java.util.Map parseAuthorizationDigest(java.io.StringReader)",
            "org.apache.tomcat.util.http.parser.EntityTag:java.lang.Boolean compareEntityTag(java.io.StringReader,boolean,java.lang.String)",
            "org.apache.tomcat.util.http.parser.HttpParser:java.lang.String readTokenOrQuotedString(java.io.Reader,boolean)"
        ]
    },
    "org.apache.tomcat.util.http.parser.HttpParser:java.lang.String readQuotedToken(java.io.Reader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.parser.Authorization:java.util.Map parseAuthorizationDigest(java.io.StringReader)"
        ]
    },
    "org.apache.tomcat.util.http.parser.HttpParser:java.lang.String readLhex(java.io.Reader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.parser.Authorization:java.util.Map parseAuthorizationDigest(java.io.StringReader)"
        ]
    },
    "org.apache.tomcat.util.http.parser.HttpParser:double readWeight(java.io.Reader,char)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.parser.AcceptEncoding:java.util.List parse(java.io.StringReader)",
            "org.apache.tomcat.util.http.parser.AcceptLanguage:java.util.List parse(java.io.StringReader)"
        ]
    },
    "org.apache.tomcat.util.http.parser.HttpParser:int readHostIPv4(java.io.Reader,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.parser.Host:int parse(java.io.Reader)",
            "org.apache.tomcat.util.http.parser.HttpParser:int readHostIPv6(java.io.Reader)"
        ]
    },
    "org.apache.tomcat.util.http.parser.HttpParser:int readHostIPv6(java.io.Reader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.parser.Host:int parse(java.io.Reader)"
        ]
    },
    "org.apache.tomcat.util.http.parser.HttpParser:int readHostDomainName(java.io.Reader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.parser.Host:int parse(java.io.Reader)",
            "org.apache.tomcat.util.http.parser.HttpParser:int readHostIPv4(java.io.Reader,boolean)"
        ]
    },
    "org.apache.tomcat.util.http.parser.HttpParser:org.apache.tomcat.util.http.parser.SkipResult skipUntil(java.io.Reader,int,char)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.parser.AcceptEncoding:java.util.List parse(java.io.StringReader)",
            "org.apache.tomcat.util.http.parser.AcceptLanguage:java.util.List parse(java.io.StringReader)",
            "org.apache.tomcat.util.http.parser.HttpParser:double readWeight(java.io.Reader,char)",
            "org.apache.tomcat.util.http.parser.TokenList:boolean parseTokenList(java.io.Reader,java.util.Collection)"
        ]
    },
    "org.apache.catalina.connector.CoyoteReader:int read(char[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.DefaultServlet:java.io.IOException copyRange(java.io.Reader,java.io.PrintWriter)",
            "org.apache.catalina.util.IOTools:void flow(java.io.Reader,java.io.Writer,char[])"
        ]
    },
    "org.apache.catalina.connector.CoyoteReader:int read(char[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.CoyoteReader:java.lang.String readLine()",
            "org.apache.tomcat.util.json.JavaCharStream:void FillBuff()"
        ]
    },
    "org.apache.catalina.connector.InputBuffer:int read(char[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.DefaultServlet:java.io.IOException copyRange(java.io.Reader,java.io.PrintWriter)",
            "org.apache.catalina.util.IOTools:void flow(java.io.Reader,java.io.Writer,char[])"
        ]
    },
    "org.apache.tomcat.util.json.JavaCharStream:void FillBuff()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.json.JavaCharStream:char ReadByte()"
        ]
    },
    "org.apache.catalina.connector.CoyoteInputStream$PrivilegedRead:java.lang.Object run()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.security.auth.message.config.AuthConfigFactory:jakarta.security.auth.message.config.AuthConfigFactory getFactory()",
            "org.apache.catalina.connector.CoyoteInputStream:int read()",
            "org.apache.catalina.core.ApplicationFilterChain:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)"
        ]
    },
    "org.apache.catalina.connector.CoyoteInputStream$PrivilegedReadArray:java.lang.Object run()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.security.auth.message.config.AuthConfigFactory:jakarta.security.auth.message.config.AuthConfigFactory getFactory()",
            "org.apache.catalina.connector.CoyoteInputStream:int read(byte[],int,int)",
            "org.apache.catalina.core.ApplicationFilterChain:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)"
        ]
    },
    "org.apache.catalina.connector.CoyoteInputStream$PrivilegedReadBuffer:java.lang.Object run()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.security.auth.message.config.AuthConfigFactory:jakarta.security.auth.message.config.AuthConfigFactory getFactory()",
            "org.apache.catalina.connector.CoyoteInputStream:int read(java.nio.ByteBuffer)",
            "org.apache.catalina.core.ApplicationFilterChain:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)"
        ]
    },
    "org.apache.catalina.connector.CoyoteAdapter:void convertURI(org.apache.tomcat.util.buf.MessageBytes,org.apache.catalina.connector.Request)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.CoyoteAdapter:boolean postParseRequest(org.apache.coyote.Request,org.apache.catalina.connector.Request,org.apache.coyote.Response,org.apache.catalina.connector.Response)"
        ]
    },
    "org.apache.juli.AsyncFileHandler$LogEntry:boolean flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.juli.AsyncFileHandler$LoggerThread:void run()"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.servlet.ServletFileUpload:java.util.Map parseParameterMap(jakarta.servlet.http.HttpServletRequest)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tomcat.util.http.fileupload.MultipartStream:int discardBodyData()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.MultipartStream:boolean skipPreamble()",
            "org.apache.tomcat.util.http.fileupload.impl.FileItemIteratorImpl:boolean findNextItem()"
        ]
    },
    "org.apache.juli.ClassLoaderLogManager:void shutdown()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.Catalina$CatalinaShutdownHook:void run()",
            "org.apache.juli.ClassLoaderLogManager$Cleaner:void run()"
        ]
    },
    "org.apache.naming.NamingContext:void rename(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.naming.SelectorContext:void rename(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.naming.SelectorContext:void rename(javax.naming.Name,javax.naming.Name)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.naming.SelectorContext:void rename(javax.naming.Name,javax.naming.Name)"
        ]
    },
    "org.apache.naming.NamingContextBindingsEnumeration:javax.naming.Binding next()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.naming.NamingContextBindingsEnumeration:java.lang.Object next()"
        ]
    },
    "org.apache.naming.NamingContextBindingsEnumeration:javax.naming.Binding nextElement()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.naming.NamingContextBindingsEnumeration:java.lang.Object nextElement()"
        ]
    },
    "org.apache.catalina.core.DefaultInstanceManager:void processAnnotations(java.lang.Object,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.DefaultInstanceManager:java.lang.Object newInstance(java.lang.Object,java.lang.Class)"
        ]
    },
    "org.apache.catalina.core.NamingContextListener:void processGlobalResourcesChange(java.lang.String,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.NamingContextListener:void propertyChange(java.beans.PropertyChangeEvent)"
        ]
    },
    "org.apache.catalina.core.NamingContextListener:void createNamingContext()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.NamingContextListener:void lifecycleEvent(org.apache.catalina.LifecycleEvent)"
        ]
    },
    "org.apache.catalina.core.NamingContextListener:void addEjb(org.apache.tomcat.util.descriptor.web.ContextEjb)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.NamingContextListener:void processGlobalResourcesChange(java.lang.String,java.lang.Object,java.lang.Object)",
            "org.apache.catalina.core.NamingContextListener:void createNamingContext()"
        ]
    },
    "org.apache.catalina.core.NamingContextListener:void addEnvironment(org.apache.tomcat.util.descriptor.web.ContextEnvironment)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.NamingContextListener:void processGlobalResourcesChange(java.lang.String,java.lang.Object,java.lang.Object)",
            "org.apache.catalina.core.NamingContextListener:void createNamingContext()"
        ]
    },
    "org.apache.catalina.core.NamingContextListener:void addService(org.apache.tomcat.util.descriptor.web.ContextService)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.NamingContextListener:void processGlobalResourcesChange(java.lang.String,java.lang.Object,java.lang.Object)",
            "org.apache.catalina.core.NamingContextListener:void createNamingContext()"
        ]
    },
    "org.apache.catalina.core.NamingContextListener:void addResourceEnvRef(org.apache.tomcat.util.descriptor.web.ContextResourceEnvRef)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.NamingContextListener:void processGlobalResourcesChange(java.lang.String,java.lang.Object,java.lang.Object)",
            "org.apache.catalina.core.NamingContextListener:void createNamingContext()"
        ]
    },
    "org.apache.catalina.deploy.NamingResourcesImpl:void stopInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void stop()"
        ]
    },
    "org.apache.catalina.mbeans.GlobalResourcesLifecycleListener:void createMBeans()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.mbeans.GlobalResourcesLifecycleListener:void lifecycleEvent(org.apache.catalina.LifecycleEvent)"
        ]
    },
    "org.apache.catalina.realm.DataSourceRealm:java.security.Principal authenticate(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.AuthenticatorBase:java.security.Principal doLogin(org.apache.catalina.connector.Request,java.lang.String,java.lang.String)",
            "org.apache.catalina.authenticator.BasicAuthenticator:boolean doAuthenticate(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.authenticator.FormAuthenticator:boolean doAuthenticate(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.authenticator.SingleSignOn:boolean reauthenticate(java.lang.String,org.apache.catalina.Realm,org.apache.catalina.connector.Request)",
            "org.apache.catalina.authenticator.jaspic.CallbackHandlerImpl:void handle(javax.security.auth.callback.Callback[])",
            "org.apache.catalina.realm.CombinedRealm:java.security.Principal authenticate(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.catalina.realm.DataSourceRealm:java.lang.String getPassword(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.realm.RealmBase:java.security.Principal authenticate(java.lang.String,java.lang.String)",
            "org.apache.catalina.realm.RealmBase:java.lang.String getDigest(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.catalina.realm.DataSourceRealm:java.security.Principal getPrincipal(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.realm.RealmBase:java.security.Principal authenticate(java.lang.String)",
            "org.apache.catalina.realm.RealmBase:java.security.Principal authenticate(java.lang.String,java.lang.String)",
            "org.apache.catalina.realm.RealmBase:java.security.Principal authenticate(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.catalina.realm.RealmBase:java.security.Principal getPrincipal(java.security.cert.X509Certificate)",
            "org.apache.catalina.realm.RealmBase:java.security.Principal getPrincipal(org.ietf.jgss.GSSName,org.ietf.jgss.GSSCredential)"
        ]
    },
    "org.apache.catalina.realm.DataSourceRealm:java.util.ArrayList getRoles(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.realm.UserDatabaseRealm:boolean hasRole(org.apache.catalina.Wrapper,java.security.Principal,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.Request:boolean isUserInRole(java.lang.String)",
            "org.apache.catalina.realm.CombinedRealm:boolean hasRole(org.apache.catalina.Wrapper,java.security.Principal,java.lang.String)",
            "org.apache.catalina.realm.RealmBase:boolean hasResourcePermission(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,org.apache.tomcat.util.descriptor.web.SecurityConstraint[],org.apache.catalina.Context)"
        ]
    },
    "org.apache.catalina.realm.UserDatabaseRealm:void backgroundProcess()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ContainerBase:void backgroundProcess()",
            "org.apache.catalina.realm.CombinedRealm:void backgroundProcess()"
        ]
    },
    "org.apache.catalina.realm.UserDatabaseRealm:java.lang.String getPassword(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.realm.RealmBase:java.security.Principal authenticate(java.lang.String,java.lang.String)",
            "org.apache.catalina.realm.RealmBase:java.lang.String getDigest(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.catalina.realm.UserDatabaseRealm:java.security.Principal getPrincipal(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.realm.RealmBase:java.security.Principal authenticate(java.lang.String)",
            "org.apache.catalina.realm.RealmBase:java.security.Principal authenticate(java.lang.String,java.lang.String)",
            "org.apache.catalina.realm.RealmBase:java.security.Principal authenticate(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.catalina.realm.RealmBase:java.security.Principal getPrincipal(java.security.cert.X509Certificate)",
            "org.apache.catalina.realm.RealmBase:java.security.Principal getPrincipal(org.ietf.jgss.GSSName,org.ietf.jgss.GSSCredential)"
        ]
    },
    "org.apache.catalina.realm.UserDatabaseRealm:void startInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void start()"
        ]
    },
    "org.apache.catalina.session.DataSourceStore:java.sql.Connection getConnection()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.session.DataSourceStore:java.lang.String[] keys(boolean)",
            "org.apache.catalina.session.DataSourceStore:int getSize()",
            "org.apache.catalina.session.DataSourceStore:org.apache.catalina.Session load(java.lang.String)",
            "org.apache.catalina.session.DataSourceStore:void remove(java.lang.String)",
            "org.apache.catalina.session.DataSourceStore:void clear()",
            "org.apache.catalina.session.DataSourceStore:void save(org.apache.catalina.Session)"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.impl.FileItemIteratorImpl:void <init>(org.apache.tomcat.util.http.fileupload.FileUploadBase,org.apache.tomcat.util.http.fileupload.RequestContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.FileUploadBase:org.apache.tomcat.util.http.fileupload.FileItemIterator getItemIterator(org.apache.tomcat.util.http.fileupload.RequestContext)"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.impl.FileItemIteratorImpl:boolean hasNext()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.FileUploadBase:java.util.List parseRequest(org.apache.tomcat.util.http.fileupload.RequestContext)",
            "org.apache.tomcat.util.http.fileupload.impl.FileItemIteratorImpl:org.apache.tomcat.util.http.fileupload.FileItemStream next()",
            "org.apache.tomcat.util.http.fileupload.impl.FileItemIteratorImpl:java.util.List getFileItems()"
        ]
    },
    "org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor:void processChildren(org.apache.catalina.Container)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor:void run()",
            "org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor:void processChildren(org.apache.catalina.Container)"
        ]
    },
    "org.apache.catalina.core.StandardWrapper:void backgroundProcess()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor:void processChildren(org.apache.catalina.Container)"
        ]
    },
    "org.apache.catalina.connector.Connector:java.lang.String getObjectNameKeyProperties()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleMBeanBase:void initInternal()"
        ]
    },
    "jakarta.servlet.ServletRequestWrapper:void setAttribute(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletRequestWrapper:void setAttribute(java.lang.String,java.lang.Object)",
            "org.apache.catalina.core.ApplicationDispatcher:void processRequest(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,org.apache.catalina.core.ApplicationDispatcher$State)",
            "org.apache.catalina.core.ApplicationFilterChain:void internalDoFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)",
            "org.apache.catalina.core.ApplicationHttpRequest:void setAttribute(java.lang.String,java.lang.Object)",
            "org.apache.catalina.core.ApplicationRequest:void setAttribute(java.lang.String,java.lang.Object)",
            "org.apache.catalina.core.StandardContext:boolean fireRequestInitEvent(jakarta.servlet.ServletRequest)",
            "org.apache.catalina.core.StandardContext:boolean fireRequestDestroyEvent(jakarta.servlet.ServletRequest)",
            "org.apache.catalina.filters.CorsFilter:void decorateCORSProperties(jakarta.servlet.http.HttpServletRequest,org.apache.catalina.filters.CorsFilter$CORSRequestType)",
            "org.apache.catalina.filters.CsrfPreventionFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.filters.RemoteIpFilter:void doFilter(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.manager.HTMLManagerServlet:void sslConnectorCiphers(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.HTMLManagerServlet:void sslConnectorCerts(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.HTMLManagerServlet:void sslConnectorTrustedCerts(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.HTMLManagerServlet:void doSessions(org.apache.catalina.util.ContextName,jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.HTMLManagerServlet:void displaySessionsListPage(org.apache.catalina.util.ContextName,jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.HTMLManagerServlet:void displaySessionDetailPage(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.catalina.util.ContextName,java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.servlets.DefaultServlet:boolean checkSendfile(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.catalina.WebResource,long,org.apache.tomcat.util.http.parser.Ranges$Entry)"
        ]
    },
    "org.apache.catalina.connector.RequestFacade:void setAttribute(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletRequestWrapper:void setAttribute(java.lang.String,java.lang.Object)",
            "org.apache.catalina.core.ApplicationDispatcher:void processRequest(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,org.apache.catalina.core.ApplicationDispatcher$State)",
            "org.apache.catalina.core.ApplicationFilterChain:void internalDoFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)",
            "org.apache.catalina.core.ApplicationHttpRequest:void setAttribute(java.lang.String,java.lang.Object)",
            "org.apache.catalina.core.ApplicationRequest:void setAttribute(java.lang.String,java.lang.Object)",
            "org.apache.catalina.core.StandardContext:boolean fireRequestInitEvent(jakarta.servlet.ServletRequest)",
            "org.apache.catalina.core.StandardContext:boolean fireRequestDestroyEvent(jakarta.servlet.ServletRequest)",
            "org.apache.catalina.filters.CorsFilter:void decorateCORSProperties(jakarta.servlet.http.HttpServletRequest,org.apache.catalina.filters.CorsFilter$CORSRequestType)",
            "org.apache.catalina.filters.CsrfPreventionFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.filters.RemoteIpFilter:void doFilter(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.manager.HTMLManagerServlet:void sslConnectorCiphers(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.HTMLManagerServlet:void sslConnectorCerts(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.HTMLManagerServlet:void sslConnectorTrustedCerts(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.HTMLManagerServlet:void doSessions(org.apache.catalina.util.ContextName,jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.HTMLManagerServlet:void displaySessionsListPage(org.apache.catalina.util.ContextName,jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.HTMLManagerServlet:void displaySessionDetailPage(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.catalina.util.ContextName,java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.servlets.DefaultServlet:boolean checkSendfile(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.catalina.WebResource,long,org.apache.tomcat.util.http.parser.Ranges$Entry)"
        ]
    },
    "org.apache.catalina.core.ApplicationHttpRequest:void setAttribute(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletRequestWrapper:void setAttribute(java.lang.String,java.lang.Object)",
            "org.apache.catalina.core.ApplicationDispatcher:void doForward(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)",
            "org.apache.catalina.core.ApplicationDispatcher:void processRequest(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,org.apache.catalina.core.ApplicationDispatcher$State)",
            "org.apache.catalina.core.ApplicationDispatcher:void doInclude(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)",
            "org.apache.catalina.core.ApplicationDispatcher:void doDispatch(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)",
            "org.apache.catalina.core.ApplicationFilterChain:void internalDoFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)",
            "org.apache.catalina.core.ApplicationHttpRequest:void setAttribute(java.lang.String,java.lang.Object)",
            "org.apache.catalina.core.ApplicationRequest:void setAttribute(java.lang.String,java.lang.Object)",
            "org.apache.catalina.core.StandardContext:boolean fireRequestInitEvent(jakarta.servlet.ServletRequest)",
            "org.apache.catalina.core.StandardContext:boolean fireRequestDestroyEvent(jakarta.servlet.ServletRequest)",
            "org.apache.catalina.filters.CorsFilter:void decorateCORSProperties(jakarta.servlet.http.HttpServletRequest,org.apache.catalina.filters.CorsFilter$CORSRequestType)",
            "org.apache.catalina.filters.CsrfPreventionFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.filters.RemoteIpFilter:void doFilter(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.manager.HTMLManagerServlet:void sslConnectorCiphers(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.HTMLManagerServlet:void sslConnectorCerts(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.HTMLManagerServlet:void sslConnectorTrustedCerts(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.HTMLManagerServlet:void doSessions(org.apache.catalina.util.ContextName,jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.HTMLManagerServlet:void displaySessionsListPage(org.apache.catalina.util.ContextName,jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.HTMLManagerServlet:void displaySessionDetailPage(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.catalina.util.ContextName,java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.servlets.DefaultServlet:boolean checkSendfile(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.catalina.WebResource,long,org.apache.tomcat.util.http.parser.Ranges$Entry)"
        ]
    },
    "org.apache.catalina.core.ApplicationRequest:void setAttribute(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletRequestWrapper:void setAttribute(java.lang.String,java.lang.Object)",
            "org.apache.catalina.core.ApplicationDispatcher:void processRequest(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,org.apache.catalina.core.ApplicationDispatcher$State)",
            "org.apache.catalina.core.ApplicationFilterChain:void internalDoFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)",
            "org.apache.catalina.core.ApplicationHttpRequest:void setAttribute(java.lang.String,java.lang.Object)",
            "org.apache.catalina.core.ApplicationRequest:void setAttribute(java.lang.String,java.lang.Object)",
            "org.apache.catalina.core.StandardContext:boolean fireRequestInitEvent(jakarta.servlet.ServletRequest)",
            "org.apache.catalina.core.StandardContext:boolean fireRequestDestroyEvent(jakarta.servlet.ServletRequest)",
            "org.apache.catalina.filters.CsrfPreventionFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)"
        ]
    },
    "org.apache.catalina.core.StandardContext:boolean fireRequestInitEvent(jakarta.servlet.ServletRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.FormAuthenticator:void forwardToLoginPage(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.descriptor.web.LoginConfig)",
            "org.apache.catalina.authenticator.FormAuthenticator:void forwardToErrorPage(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.descriptor.web.LoginConfig)",
            "org.apache.catalina.core.ApplicationDispatcher:void processRequest(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,org.apache.catalina.core.ApplicationDispatcher$State)",
            "org.apache.catalina.core.StandardHostValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)"
        ]
    },
    "org.apache.catalina.core.StandardContext:boolean fireRequestDestroyEvent(jakarta.servlet.ServletRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.FormAuthenticator:void forwardToLoginPage(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.descriptor.web.LoginConfig)",
            "org.apache.catalina.authenticator.FormAuthenticator:void forwardToErrorPage(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.descriptor.web.LoginConfig)",
            "org.apache.catalina.core.ApplicationDispatcher:void processRequest(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,org.apache.catalina.core.ApplicationDispatcher$State)",
            "org.apache.catalina.core.AsyncContextImpl:void fireOnComplete()",
            "org.apache.catalina.core.StandardHostValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)"
        ]
    },
    "org.apache.catalina.core.StandardWrapperValve:void exception(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.StandardWrapperValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)"
        ]
    },
    "org.apache.catalina.filters.CorsFilter:void decorateCORSProperties(jakarta.servlet.http.HttpServletRequest,org.apache.catalina.filters.CorsFilter$CORSRequestType)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.CorsFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)"
        ]
    },
    "org.apache.catalina.core.DefaultInstanceManager:void <init>(javax.naming.Context,java.util.Map,org.apache.catalina.Context,java.lang.ClassLoader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.StandardContext:org.apache.tomcat.InstanceManager createInstanceManager()"
        ]
    },
    "org.apache.catalina.loader.WebappClassLoaderBase:void checkThreadLocalsForLeaks()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.loader.WebappClassLoaderBase:void clearReferences()"
        ]
    },
    "org.apache.catalina.manager.JMXProxyServlet:void invokeOperation(java.io.PrintWriter,java.lang.String,java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.JMXProxyServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.core.ContainerBase:void fireContainerEvent(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationContext:void removeAttribute(java.lang.String)",
            "org.apache.catalina.core.ApplicationContext:void setAttribute(java.lang.String,java.lang.Object)",
            "org.apache.catalina.core.ContainerBase:void addChildInternal(org.apache.catalina.Container)",
            "org.apache.catalina.core.ContainerBase:void removeChild(org.apache.catalina.Container)",
            "org.apache.catalina.core.StandardContext:void addApplicationListener(java.lang.String)",
            "org.apache.catalina.core.StandardContext:void addApplicationParameter(org.apache.tomcat.util.descriptor.web.ApplicationParameter)",
            "org.apache.catalina.core.StandardContext:void addErrorPage(org.apache.tomcat.util.descriptor.web.ErrorPage)",
            "org.apache.catalina.core.StandardContext:void addFilterDef(org.apache.tomcat.util.descriptor.web.FilterDef)",
            "org.apache.catalina.core.StandardContext:void addFilterMap(org.apache.tomcat.util.descriptor.web.FilterMap)",
            "org.apache.catalina.core.StandardContext:void addFilterMapBefore(org.apache.tomcat.util.descriptor.web.FilterMap)",
            "org.apache.catalina.core.StandardContext:void addMessageDestination(org.apache.tomcat.util.descriptor.web.MessageDestination)",
            "org.apache.catalina.core.StandardContext:void addMimeMapping(java.lang.String,java.lang.String)",
            "org.apache.catalina.core.StandardContext:void addParameter(java.lang.String,java.lang.String)",
            "org.apache.catalina.core.StandardContext:void addRoleMapping(java.lang.String,java.lang.String)",
            "org.apache.catalina.core.StandardContext:void addSecurityRole(java.lang.String)",
            "org.apache.catalina.core.StandardContext:void addServletMappingDecoded(java.lang.String,java.lang.String,boolean)",
            "org.apache.catalina.core.StandardContext:void addWatchedResource(java.lang.String)",
            "org.apache.catalina.core.StandardContext:void addWelcomeFile(java.lang.String)",
            "org.apache.catalina.core.StandardContext:void addWrapperLifecycle(java.lang.String)",
            "org.apache.catalina.core.StandardContext:void addWrapperListener(java.lang.String)",
            "org.apache.catalina.core.StandardContext:void removeApplicationListener(java.lang.String)",
            "org.apache.catalina.core.StandardContext:void removeApplicationParameter(java.lang.String)",
            "org.apache.catalina.core.StandardContext:void removeConstraint(org.apache.tomcat.util.descriptor.web.SecurityConstraint)",
            "org.apache.catalina.core.StandardContext:void removeErrorPage(org.apache.tomcat.util.descriptor.web.ErrorPage)",
            "org.apache.catalina.core.StandardContext:void removeFilterDef(org.apache.tomcat.util.descriptor.web.FilterDef)",
            "org.apache.catalina.core.StandardContext:void removeFilterMap(org.apache.tomcat.util.descriptor.web.FilterMap)",
            "org.apache.catalina.core.StandardContext:void removeMessageDestination(java.lang.String)",
            "org.apache.catalina.core.StandardContext:void removeMimeMapping(java.lang.String)",
            "org.apache.catalina.core.StandardContext:void removeParameter(java.lang.String)",
            "org.apache.catalina.core.StandardContext:void removeRoleMapping(java.lang.String)",
            "org.apache.catalina.core.StandardContext:void removeSecurityRole(java.lang.String)",
            "org.apache.catalina.core.StandardContext:void removeServletMapping(java.lang.String)",
            "org.apache.catalina.core.StandardContext:void removeWatchedResource(java.lang.String)",
            "org.apache.catalina.core.StandardContext:void removeWelcomeFile(java.lang.String)",
            "org.apache.catalina.core.StandardContext:void removeWrapperLifecycle(java.lang.String)",
            "org.apache.catalina.core.StandardContext:void removeWrapperListener(java.lang.String)",
            "org.apache.catalina.core.StandardContext:boolean listenerStart()",
            "org.apache.catalina.core.StandardContext:boolean listenerStop()",
            "org.apache.catalina.core.StandardContext:void addPostConstructMethod(java.lang.String,java.lang.String)",
            "org.apache.catalina.core.StandardContext:void removePostConstructMethod(java.lang.String)",
            "org.apache.catalina.core.StandardContext:void addPreDestroyMethod(java.lang.String,java.lang.String)",
            "org.apache.catalina.core.StandardContext:void removePreDestroyMethod(java.lang.String)",
            "org.apache.catalina.core.StandardHost:void addAlias(java.lang.String)",
            "org.apache.catalina.core.StandardHost:void removeAlias(java.lang.String)",
            "org.apache.catalina.core.StandardPipeline:void addValve(org.apache.catalina.Valve)",
            "org.apache.catalina.core.StandardPipeline:void removeValve(org.apache.catalina.Valve)",
            "org.apache.catalina.core.StandardWrapper:void addInitParameter(java.lang.String,java.lang.String)",
            "org.apache.catalina.core.StandardWrapper:void addMapping(java.lang.String)",
            "org.apache.catalina.core.StandardWrapper:void addSecurityReference(java.lang.String,java.lang.String)",
            "org.apache.catalina.core.StandardWrapper:jakarta.servlet.Servlet loadServlet()",
            "org.apache.catalina.core.StandardWrapper:void removeInitParameter(java.lang.String)",
            "org.apache.catalina.core.StandardWrapper:void removeMapping(java.lang.String)",
            "org.apache.catalina.core.StandardWrapper:void removeSecurityReference(java.lang.String)",
            "org.apache.catalina.core.StandardWrapper:void unload()",
            "org.apache.catalina.session.StandardSession:void tellNew()",
            "org.apache.catalina.session.StandardSession:void tellChangedSessionId(java.lang.String,java.lang.String,boolean,boolean)",
            "org.apache.catalina.session.StandardSession:void expire(boolean)",
            "org.apache.catalina.session.StandardSession:void setAttribute(java.lang.String,java.lang.Object,boolean)",
            "org.apache.catalina.session.StandardSession:void removeAttributeInternal(java.lang.String,boolean)"
        ]
    },
    "org.apache.catalina.mbeans.MBeanDumper:java.lang.String dumpBeans(javax.management.MBeanServer,java.util.Set)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.JMXProxyServlet:void listBeans(java.io.PrintWriter,java.lang.String)"
        ]
    },
    "org.apache.catalina.mbeans.MBeanDumper:java.lang.String tableItemToString(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.mbeans.MBeanDumper:java.lang.String dumpBeans(javax.management.MBeanServer,java.util.Set)"
        ]
    },
    "org.apache.catalina.realm.JNDIRealm:org.apache.catalina.realm.JNDIRealm$User getUserByPattern(javax.naming.directory.DirContext,java.lang.String,java.lang.String[],java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.realm.JNDIRealm:org.apache.catalina.realm.JNDIRealm$User getUserByPattern(org.apache.catalina.realm.JNDIRealm$JNDIConnection,java.lang.String,java.lang.String,java.lang.String[],int)"
        ]
    },
    "org.apache.catalina.realm.JNDIRealm:org.apache.catalina.realm.JNDIRealm$User getUserBySearch(org.apache.catalina.realm.JNDIRealm$JNDIConnection,java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.realm.JNDIRealm:org.apache.catalina.realm.JNDIRealm$User getUser(org.apache.catalina.realm.JNDIRealm$JNDIConnection,java.lang.String,java.lang.String,int)"
        ]
    },
    "org.apache.catalina.realm.JNDIRealm:java.util.List getRoles(org.apache.catalina.realm.JNDIRealm$JNDIConnection,org.apache.catalina.realm.JNDIRealm$User)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.realm.JNDIRealm:java.security.Principal authenticate(org.apache.catalina.realm.JNDIRealm$JNDIConnection,java.lang.String,java.lang.String)",
            "org.apache.catalina.realm.JNDIRealm:java.security.Principal getPrincipal(org.apache.catalina.realm.JNDIRealm$JNDIConnection,java.lang.String,org.ietf.jgss.GSSCredential)"
        ]
    },
    "org.apache.catalina.util.ToStringUtil:java.lang.String toString(java.lang.Object,org.apache.catalina.Container)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.loader.WebappLoader:java.lang.String toString()",
            "org.apache.catalina.session.ManagerBase:java.lang.String toString()",
            "org.apache.catalina.util.ToStringUtil:java.lang.String toString(org.apache.catalina.Contained)"
        ]
    },
    "org.apache.catalina.util.ToStringUtil:java.lang.String toString(java.lang.Object,org.apache.catalina.Manager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.session.StoreBase:java.lang.String toString()"
        ]
    },
    "org.apache.catalina.valves.ExtendedAccessLogValve$10:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.valves.AbstractAccessLogValve:void log(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)"
        ]
    },
    "org.apache.catalina.valves.ExtendedAccessLogValve$11:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.valves.AbstractAccessLogValve:void log(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)"
        ]
    },
    "org.apache.catalina.valves.ExtendedAccessLogValve$12:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.valves.AbstractAccessLogValve:void log(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)"
        ]
    },
    "org.apache.catalina.valves.ExtendedAccessLogValve$14:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.valves.AbstractAccessLogValve:void log(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)"
        ]
    },
    "org.apache.catalina.valves.ExtendedAccessLogValve$4:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.valves.AbstractAccessLogValve:void log(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)"
        ]
    },
    "org.apache.catalina.valves.ExtendedAccessLogValve$5:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.valves.AbstractAccessLogValve:void log(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)"
        ]
    },
    "org.apache.catalina.valves.ExtendedAccessLogValve$6:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.valves.AbstractAccessLogValve:void log(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)"
        ]
    },
    "org.apache.catalina.valves.ExtendedAccessLogValve$7:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.valves.AbstractAccessLogValve:void log(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)"
        ]
    },
    "org.apache.catalina.valves.ExtendedAccessLogValve$8:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.valves.AbstractAccessLogValve:void log(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)"
        ]
    },
    "org.apache.catalina.valves.ExtendedAccessLogValve$9:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.valves.AbstractAccessLogValve:void log(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)"
        ]
    },
    "org.apache.catalina.valves.ExtendedAccessLogValve$CookieElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.valves.AbstractAccessLogValve:void log(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)"
        ]
    },
    "org.apache.catalina.valves.ExtendedAccessLogValve$RequestHeaderElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.valves.AbstractAccessLogValve:void log(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)"
        ]
    },
    "org.apache.catalina.valves.ExtendedAccessLogValve$ResponseHeaderElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.valves.AbstractAccessLogValve:void log(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)"
        ]
    },
    "org.apache.catalina.valves.ExtendedAccessLogValve$ServletContextElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.valves.AbstractAccessLogValve:void log(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)"
        ]
    },
    "org.apache.catalina.valves.ExtendedAccessLogValve$SessionAttributeElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.valves.AbstractAccessLogValve:void log(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)"
        ]
    },
    "org.apache.naming.SelectorContext:javax.naming.Context getBoundContext()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.naming.SelectorContext:java.lang.Object lookup(javax.naming.Name)",
            "org.apache.naming.SelectorContext:java.lang.Object lookup(java.lang.String)",
            "org.apache.naming.SelectorContext:void bind(javax.naming.Name,java.lang.Object)",
            "org.apache.naming.SelectorContext:void bind(java.lang.String,java.lang.Object)",
            "org.apache.naming.SelectorContext:void rebind(javax.naming.Name,java.lang.Object)",
            "org.apache.naming.SelectorContext:void rebind(java.lang.String,java.lang.Object)",
            "org.apache.naming.SelectorContext:void unbind(javax.naming.Name)",
            "org.apache.naming.SelectorContext:void unbind(java.lang.String)",
            "org.apache.naming.SelectorContext:void rename(javax.naming.Name,javax.naming.Name)",
            "org.apache.naming.SelectorContext:void rename(java.lang.String,java.lang.String)",
            "org.apache.naming.SelectorContext:javax.naming.NamingEnumeration list(javax.naming.Name)",
            "org.apache.naming.SelectorContext:javax.naming.NamingEnumeration list(java.lang.String)",
            "org.apache.naming.SelectorContext:javax.naming.NamingEnumeration listBindings(javax.naming.Name)",
            "org.apache.naming.SelectorContext:javax.naming.NamingEnumeration listBindings(java.lang.String)",
            "org.apache.naming.SelectorContext:void destroySubcontext(javax.naming.Name)",
            "org.apache.naming.SelectorContext:void destroySubcontext(java.lang.String)",
            "org.apache.naming.SelectorContext:javax.naming.Context createSubcontext(javax.naming.Name)",
            "org.apache.naming.SelectorContext:javax.naming.Context createSubcontext(java.lang.String)",
            "org.apache.naming.SelectorContext:java.lang.Object lookupLink(javax.naming.Name)",
            "org.apache.naming.SelectorContext:java.lang.Object lookupLink(java.lang.String)",
            "org.apache.naming.SelectorContext:javax.naming.NameParser getNameParser(javax.naming.Name)",
            "org.apache.naming.SelectorContext:javax.naming.NameParser getNameParser(java.lang.String)",
            "org.apache.naming.SelectorContext:java.lang.Object addToEnvironment(java.lang.String,java.lang.Object)",
            "org.apache.naming.SelectorContext:java.lang.Object removeFromEnvironment(java.lang.String)",
            "org.apache.naming.SelectorContext:java.util.Hashtable getEnvironment()",
            "org.apache.naming.SelectorContext:void close()"
        ]
    },
    "org.apache.tomcat.util.digester.Digester:void endElement(java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tomcat.util.descriptor.web.WebXml:java.lang.String toXml()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.ContextConfig:void webConfig()"
        ]
    },
    "org.apache.tomcat.util.descriptor.web.LifecycleCallbackRule:void end(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.digester.Digester:void endElement(java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.tomcat.util.json.JSONParser:java.util.LinkedHashMap object()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.json.JSONParser:java.util.LinkedHashMap parseObject()",
            "org.apache.tomcat.util.json.JSONParser:java.lang.Object anything()"
        ]
    },
    "org.apache.coyote.AbstractProtocol:java.lang.String getProperty(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.manager.StatusTransformer:void writeProcessorState(java.io.PrintWriter,javax.management.ObjectName,javax.management.MBeanServer,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.StatusTransformer:void writeConnectorState(java.io.PrintWriter,javax.management.ObjectName,java.lang.String,javax.management.MBeanServer,java.util.Vector,java.util.Vector,int,java.lang.Object[])"
        ]
    },
    "jakarta.servlet.http.HttpServletResponseWrapper:void sendRedirect(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletResponseWrapper:void sendRedirect(java.lang.String)",
            "org.apache.catalina.authenticator.FormAuthenticator:boolean doAuthenticate(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.core.ApplicationHttpResponse:void sendRedirect(java.lang.String)",
            "org.apache.catalina.filters.WebdavFixFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.servlets.DefaultServlet:void doDirectoryRedirect(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.connector.ResponseFacade:void sendRedirect(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletResponseWrapper:void sendRedirect(java.lang.String)",
            "org.apache.catalina.authenticator.FormAuthenticator:boolean doAuthenticate(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.core.ApplicationHttpResponse:void sendRedirect(java.lang.String)",
            "org.apache.catalina.filters.WebdavFixFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.servlets.DefaultServlet:void doDirectoryRedirect(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.core.ApplicationHttpResponse:void sendRedirect(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletResponseWrapper:void sendRedirect(java.lang.String)",
            "org.apache.catalina.authenticator.FormAuthenticator:boolean doAuthenticate(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.core.ApplicationHttpResponse:void sendRedirect(java.lang.String)",
            "org.apache.catalina.filters.WebdavFixFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.servlets.DefaultServlet:void doDirectoryRedirect(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.servlets.DefaultServlet:void doDirectoryRedirect(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.DefaultServlet:void serveResource(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,boolean,java.lang.String)"
        ]
    },
    "jakarta.servlet.ServletOutputStream:void print(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletOutputStream:void print(boolean)",
            "jakarta.servlet.ServletOutputStream:void print(char)",
            "jakarta.servlet.ServletOutputStream:void print(int)",
            "jakarta.servlet.ServletOutputStream:void print(long)",
            "jakarta.servlet.ServletOutputStream:void print(float)",
            "jakarta.servlet.ServletOutputStream:void print(double)",
            "jakarta.servlet.ServletOutputStream:void println()",
            "jakarta.servlet.ServletOutputStream:void println(java.lang.String)",
            "jakarta.servlet.ServletOutputStream:void println(boolean)",
            "jakarta.servlet.http.HttpServlet:void doTrace(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream:void print(java.lang.String)",
            "org.apache.catalina.servlets.DefaultServlet:void copy(org.apache.catalina.WebResource,long,jakarta.servlet.ServletOutputStream,org.apache.tomcat.util.http.parser.Ranges,java.lang.String)",
            "org.apache.catalina.valves.HealthCheckValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)"
        ]
    },
    "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream:void write(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletOutputStream:void print(java.lang.String)",
            "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream:void write(byte[])",
            "org.apache.catalina.servlets.DefaultServlet:void serveResource(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,boolean,java.lang.String)",
            "org.apache.tomcat.util.http.fileupload.ThresholdingOutputStream:void write(byte[])"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.ThresholdingOutputStream:void write(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.ThresholdingOutputStream:void write(byte[])"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.ParameterParser:java.util.Map parse(char[],int,int,char)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.ParameterParser:java.util.Map parse(char[],char)"
        ]
    },
    "org.apache.catalina.startup.HostConfig:void check(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.coyote.http2.Http2UpgradeHandler:void handleAppInitiatedIOException(java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2AsyncUpgradeHandler:void handleAsyncException()",
            "org.apache.coyote.http2.Http2UpgradeHandler$DefaultHeaderFrameBuffers:void endFrame()",
            "org.apache.coyote.http2.Http2UpgradeHandler:void writeBody(org.apache.coyote.http2.Stream,java.nio.ByteBuffer,int,boolean)",
            "org.apache.coyote.http2.Http2UpgradeHandler:void writeWindowUpdate(org.apache.coyote.http2.AbstractNonZeroStream,int,boolean)"
        ]
    },
    "org.apache.coyote.http2.Http2UpgradeHandler:int reserveWindowSize(org.apache.coyote.http2.Stream,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2AsyncUpgradeHandler$SendfileCompletionHandler:void completed(java.lang.Long,org.apache.coyote.http2.SendfileData)",
            "org.apache.coyote.http2.Http2AsyncUpgradeHandler:org.apache.tomcat.util.net.SendfileState processSendfile(org.apache.coyote.http2.SendfileData)",
            "org.apache.coyote.http2.Stream$StreamOutputBuffer:boolean flush(boolean,boolean)"
        ]
    },
    "org.apache.coyote.http2.Http2UpgradeHandler:void goaway(int,long,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2AsyncUpgradeHandler:void goaway(int,long,java.lang.String)",
            "org.apache.coyote.http2.Http2Parser:void readGoawayFrame(int,java.nio.ByteBuffer)"
        ]
    },
    "org.apache.coyote.http2.Http2AsyncUpgradeHandler:void reset(int,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2Parser:void readRstFrame(int,java.nio.ByteBuffer)"
        ]
    },
    "org.apache.coyote.http2.Http2Parser:void readRstFrame(int,java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2AsyncParser$FrameCompletionHandler:void completed(java.lang.Long,java.lang.Void)",
            "org.apache.coyote.http2.Http2Parser:boolean readFrame(boolean,org.apache.coyote.http2.FrameType)"
        ]
    },
    "org.apache.coyote.http2.StreamProcessor:void prepareResponse()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProcessor:void action(org.apache.coyote.ActionCode,java.lang.Object)"
        ]
    },
    "org.apache.coyote.http2.Stream$StreamOutputBuffer:void end()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11OutputBuffer:void end()",
            "org.apache.coyote.http11.filters.ChunkedOutputFilter:void end()",
            "org.apache.coyote.http11.filters.GzipOutputFilter:void end()",
            "org.apache.coyote.http11.filters.IdentityOutputFilter:void end()",
            "org.apache.coyote.http11.filters.VoidOutputFilter:void end()",
            "org.apache.coyote.http2.Http2AsyncUpgradeHandler$SendfileCompletionHandler:void completed(java.lang.Long,org.apache.coyote.http2.SendfileData)",
            "org.apache.coyote.http2.Http2OutputBuffer:void end()",
            "org.apache.coyote.http2.StreamProcessor:void finishResponse()"
        ]
    },
    "org.apache.catalina.realm.JAASMemoryLoginModule:boolean login()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.realm.JAASMemoryLoginModule:java.lang.String getCatalinaBase()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.realm.JAASMemoryLoginModule:void load()"
        ]
    },
    "org.apache.catalina.authenticator.AuthenticatorBase:java.security.Principal doLogin(org.apache.catalina.connector.Request,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.AuthenticatorBase:void login(java.lang.String,java.lang.String,org.apache.catalina.connector.Request)"
        ]
    },
    "org.apache.catalina.connector.CoyoteAdapter:void doConnectorAuthenticationAuthorization(org.apache.coyote.Request,org.apache.catalina.connector.Request)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.CoyoteAdapter:boolean postParseRequest(org.apache.coyote.Request,org.apache.catalina.connector.Request,org.apache.coyote.Response,org.apache.catalina.connector.Response)"
        ]
    },
    "org.apache.catalina.connector.Request:boolean isUserInRole(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletRequestWrapper:boolean isUserInRole(java.lang.String)",
            "org.apache.catalina.connector.RequestFacade:boolean isUserInRole(java.lang.String)"
        ]
    },
    "org.apache.catalina.startup.Tomcat:org.apache.catalina.Context addWebapp(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.Tomcat:org.apache.catalina.Context addWebapp(java.lang.String,java.net.URL)",
            "org.apache.catalina.startup.Tomcat:void main(java.lang.String[])"
        ]
    },
    "org.apache.catalina.startup.Tomcat:org.apache.catalina.Context addContext(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.startup.Tomcat:org.apache.catalina.Wrapper addServlet(java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.startup.Tomcat:org.apache.catalina.Wrapper addServlet(java.lang.String,java.lang.String,jakarta.servlet.Servlet)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.startup.Tomcat:org.apache.catalina.Context addContext(org.apache.catalina.Host,java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.Tomcat:org.apache.catalina.Context addContext(org.apache.catalina.Host,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.catalina.startup.Tomcat:org.apache.catalina.Context addWebapp(org.apache.catalina.Host,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.Tomcat:org.apache.catalina.Context addWebapp(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.catalina.startup.Tomcat:org.apache.catalina.Context addWebapp(org.apache.catalina.Host,java.lang.String,java.lang.String,org.apache.catalina.LifecycleListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.Tomcat:org.apache.catalina.Context addWebapp(org.apache.catalina.Host,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.catalina.startup.Tomcat:java.lang.String getLoggerName(org.apache.catalina.Host,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.Tomcat:void silence(org.apache.catalina.Host,java.lang.String)",
            "org.apache.catalina.startup.Tomcat:java.net.URL getWebappConfigFileFromDirectory(java.io.File,java.lang.String)",
            "org.apache.catalina.startup.Tomcat:java.net.URL getWebappConfigFileFromWar(java.io.File,java.lang.String)"
        ]
    },
    "org.apache.catalina.startup.Tomcat:void initWebappDefaults(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.startup.Tomcat:java.net.URL getWebappConfigFileFromDirectory(java.io.File,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.Tomcat:java.net.URL getWebappConfigFile(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.catalina.startup.Tomcat:java.net.URL getWebappConfigFileFromWar(java.io.File,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.Tomcat:java.net.URL getWebappConfigFile(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.catalina.core.ApplicationContext:jakarta.servlet.ServletRegistration$Dynamic addServlet(java.lang.String,java.lang.String,jakarta.servlet.Servlet,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationContext:jakarta.servlet.ServletRegistration$Dynamic addServlet(java.lang.String,java.lang.String)",
            "org.apache.catalina.core.ApplicationContext:jakarta.servlet.ServletRegistration$Dynamic addServlet(java.lang.String,jakarta.servlet.Servlet)",
            "org.apache.catalina.core.ApplicationContext:jakarta.servlet.ServletRegistration$Dynamic addServlet(java.lang.String,java.lang.Class)",
            "org.apache.catalina.core.ApplicationContext:jakarta.servlet.ServletRegistration$Dynamic addJspFile(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.catalina.mbeans.ContainerMBean:void addChild(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.startup.Tomcat:org.apache.catalina.Wrapper addServlet(org.apache.catalina.Context,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.Tomcat:org.apache.catalina.Wrapper addServlet(java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.catalina.startup.Tomcat:void initWebappDefaults(org.apache.catalina.Context)"
        ]
    },
    "org.apache.catalina.startup.Tomcat:org.apache.catalina.Wrapper addServlet(org.apache.catalina.Context,java.lang.String,jakarta.servlet.Servlet)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.Tomcat:org.apache.catalina.Wrapper addServlet(java.lang.String,java.lang.String,jakarta.servlet.Servlet)"
        ]
    },
    "org.apache.catalina.startup.ContextConfig:void lifecycleEvent(org.apache.catalina.LifecycleEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void fireLifecycleEvent(java.lang.String,java.lang.Object)"
        ]
    },
    "org.apache.catalina.startup.WebAnnotationSet:void addResource(org.apache.catalina.Context,jakarta.'annotation'.Resource)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.WebAnnotationSet:void loadClassAnnotation(org.apache.catalina.Context,java.lang.Class)"
        ]
    },
    "org.apache.catalina.mbeans.MBeanFactory:java.lang.String createStandardContext(java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.core.StandardEngine:void addChild(org.apache.catalina.Container)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.host.HostManagerServlet:void add(java.io.PrintWriter,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean,boolean,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.mbeans.ContainerMBean:void addChild(java.lang.String,java.lang.String)",
            "org.apache.catalina.mbeans.MBeanFactory:java.lang.String createStandardHost(java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)",
            "org.apache.catalina.startup.Tomcat:void setHost(org.apache.catalina.Host)",
            "org.apache.catalina.startup.Tomcat:org.apache.catalina.Host getHost()"
        ]
    },
    "org.apache.catalina.core.StandardHost:void addChild(org.apache.catalina.Container)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.mbeans.ContainerMBean:void addChild(java.lang.String,java.lang.String)",
            "org.apache.catalina.mbeans.MBeanFactory:java.lang.String createStandardContext(java.lang.String,java.lang.String,java.lang.String,boolean,boolean)",
            "org.apache.catalina.startup.HostConfig:void deployDescriptor(org.apache.catalina.util.ContextName,java.io.File)",
            "org.apache.catalina.startup.HostConfig:void deployWAR(org.apache.catalina.util.ContextName,java.io.File)",
            "org.apache.catalina.startup.HostConfig:void deployDirectory(org.apache.catalina.util.ContextName,java.io.File)",
            "org.apache.catalina.startup.HostConfig:void manageApp(org.apache.catalina.Context)",
            "org.apache.catalina.startup.Tomcat:org.apache.catalina.Context addContext(org.apache.catalina.Host,java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.catalina.startup.Tomcat:org.apache.catalina.Context addWebapp(org.apache.catalina.Host,java.lang.String,java.lang.String,org.apache.catalina.LifecycleListener)",
            "org.apache.catalina.startup.UserConfig:void deploy(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.catalina.core.ContainerBase$PrivilegedAddChild:java.lang.Void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ContainerBase$PrivilegedAddChild:java.lang.Object run()"
        ]
    },
    "org.apache.catalina.startup.ContextConfig:void configureStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.ContextConfig:void lifecycleEvent(org.apache.catalina.LifecycleEvent)"
        ]
    },
    "org.apache.catalina.startup.Tomcat:void init()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.startup.Tomcat:org.apache.catalina.Service getService()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.Tomcat:org.apache.catalina.connector.Connector getConnector()",
            "org.apache.catalina.startup.Tomcat:void setConnector(org.apache.catalina.connector.Connector)"
        ]
    },
    "org.apache.catalina.startup.Tomcat:void enableNaming()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.mbeans.MBeanFactory:java.lang.String createAjpConnector(java.lang.String,java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.mbeans.MBeanFactory:java.lang.String createHttpConnector(java.lang.String,java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.mbeans.MBeanFactory:java.lang.String createHttpsConnector(java.lang.String,java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.webresources.StandardRoot:void createWebResourceSet(org.apache.catalina.WebResourceRoot$ResourceSetType,java.lang.String,java.net.URL,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.StandardContext:void resourcesStart()",
            "org.apache.catalina.startup.ContextConfig:void processResourceJARs(java.util.Set)",
            "org.apache.catalina.webresources.ExtractingRoot:void processWebInfLib()",
            "org.apache.catalina.webresources.StandardRoot:void processWebInfLib()"
        ]
    },
    "org.apache.catalina.core.StandardContext:void initInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void init()"
        ]
    },
    "org.apache.catalina.core.StandardServer:void initInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void init()"
        ]
    },
    "org.apache.catalina.core.StandardService:void initInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void init()"
        ]
    },
    "org.apache.catalina.startup.Catalina:void load()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.Catalina:void load(java.lang.String[])",
            "org.apache.catalina.startup.Catalina:void start()",
            "org.apache.catalina.startup.Tomcat:void init(org.apache.tomcat.util.file.ConfigurationSource,java.lang.String[])"
        ]
    },
    "org.apache.catalina.webresources.StandardRoot:void initInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void init()"
        ]
    },
    "org.apache.catalina.core.StandardServer:void lambda$startPeriodicLifecycleEvent$1()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.StandardServer$lambda_startPeriodicLifecycleEvent_1__22:void run()"
        ]
    },
    "org.apache.catalina.deploy.NamingResourcesImpl:void startInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void start()"
        ]
    },
    "org.apache.catalina.util.LifecycleBase:void setStateInternal(org.apache.catalina.LifecycleState,java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void init()",
            "org.apache.catalina.util.LifecycleBase:void start()",
            "org.apache.catalina.util.LifecycleBase:void stop()",
            "org.apache.catalina.util.LifecycleBase:void destroy()",
            "org.apache.catalina.util.LifecycleBase:void setState(org.apache.catalina.LifecycleState)",
            "org.apache.catalina.util.LifecycleBase:void setState(org.apache.catalina.LifecycleState,java.lang.Object)",
            "org.apache.catalina.util.LifecycleBase:void handleSubClassException(java.lang.Throwable,java.lang.String,java.lang.Object[])"
        ]
    },
    "org.apache.tomcat.util.net.AbstractEndpoint:void closeSocket(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Acceptor:void run()",
            "org.apache.tomcat.util.net.AprEndpoint:void closeSocketInternal(long)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2Acceptor:void completed(java.nio.channels.AsynchronousSocketChannel,java.lang.Void)"
        ]
    },
    "org.apache.tomcat.util.net.AprEndpoint:void stopInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.AbstractEndpoint:void stop()"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint:void lambda$stopInternal$0()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint$lambda_stopInternal_0__50:void run()"
        ]
    },
    "org.apache.tomcat.util.net.NioEndpoint$Poller:boolean events()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.NioEndpoint$Poller:void run()"
        ]
    },
    "org.apache.tomcat.util.net.NioEndpoint$Poller:void cancelledKey(java.nio.channels.SelectionKey,org.apache.tomcat.util.net.SocketWrapperBase)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.NioEndpoint$Poller:boolean events()",
            "org.apache.tomcat.util.net.NioEndpoint$Poller:void processKey(java.nio.channels.SelectionKey,org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper)",
            "org.apache.tomcat.util.net.NioEndpoint$Poller:org.apache.tomcat.util.net.SendfileState processSendfile(java.nio.channels.SelectionKey,org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper,boolean)",
            "org.apache.tomcat.util.net.NioEndpoint$Poller:void timeout(int,boolean)",
            "org.apache.tomcat.util.net.NioEndpoint$SocketProcessor:void doRun()"
        ]
    },
    "org.apache.coyote.http11.Http11InputBuffer:void addActiveFilter(org.apache.coyote.http11.InputFilter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11Processor:void addInputFilter(org.apache.coyote.http11.InputFilter[],java.lang.String)",
            "org.apache.coyote.http11.Http11Processor:void prepareRequest()",
            "org.apache.coyote.http11.Http11Processor:void setRequestBody(org.apache.tomcat.util.buf.ByteChunk)",
            "org.apache.coyote.http11.Http11Processor:void sslReHandShake()"
        ]
    },
    "org.apache.coyote.http11.filters.ChunkedInputFilter:int doRead(org.apache.tomcat.util.net.ApplicationBufferHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.Request:int doRead(org.apache.tomcat.util.net.ApplicationBufferHandler)",
            "org.apache.coyote.http11.Http11InputBuffer:int doRead(org.apache.tomcat.util.net.ApplicationBufferHandler)",
            "org.apache.coyote.http11.filters.BufferedInputFilter:void setRequest(org.apache.coyote.Request)",
            "org.apache.coyote.http11.filters.ChunkedInputFilter:long end()",
            "org.apache.coyote.http11.filters.ChunkedInputFilter:int readBytes()",
            "org.apache.coyote.http11.filters.IdentityInputFilter:int doRead(org.apache.tomcat.util.net.ApplicationBufferHandler)",
            "org.apache.coyote.http11.filters.IdentityInputFilter:long end()"
        ]
    },
    "org.apache.coyote.http11.filters.ChunkedInputFilter:boolean parseChunkHeader()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.filters.ChunkedInputFilter:int doRead(org.apache.tomcat.util.net.ApplicationBufferHandler)"
        ]
    },
    "org.apache.coyote.http11.filters.ChunkedInputFilter:void parseCRLF(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.filters.ChunkedInputFilter:int doRead(org.apache.tomcat.util.net.ApplicationBufferHandler)",
            "org.apache.coyote.http11.filters.ChunkedInputFilter:boolean parseChunkHeader()",
            "org.apache.coyote.http11.filters.ChunkedInputFilter:boolean parseHeader()"
        ]
    },
    "org.apache.coyote.http11.filters.ChunkedInputFilter:boolean parseHeader()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.filters.ChunkedInputFilter:void parseEndChunk()"
        ]
    },
    "org.apache.coyote.http11.Http11InputBuffer:void endRequest()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11Processor:void endRequest()"
        ]
    },
    "org.apache.coyote.AbstractProtocol$ConnectionHandler:void pause()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.AbstractEndpoint:void pause()",
            "org.apache.tomcat.util.net.AbstractEndpoint:void closeServerSocketGraceful()"
        ]
    },
    "org.apache.coyote.http2.Http2AsyncUpgradeHandler:org.apache.coyote.http2.HpackDecoder$HeaderEmitter headersStart(int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2Parser:void readHeadersFrame(int,int,int,java.nio.ByteBuffer)"
        ]
    },
    "org.apache.coyote.http2.Stream$StreamOutputBuffer:void flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11OutputBuffer:void flush()",
            "org.apache.coyote.http11.filters.ChunkedOutputFilter:void flush()",
            "org.apache.coyote.http11.filters.GzipOutputFilter:void flush()",
            "org.apache.coyote.http11.filters.IdentityOutputFilter:void flush()",
            "org.apache.coyote.http11.filters.VoidOutputFilter:void flush()",
            "org.apache.coyote.http2.Http2OutputBuffer:void flush()",
            "org.apache.coyote.http2.StreamProcessor:void flush()"
        ]
    },
    "org.apache.coyote.http2.Stream:boolean flush(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.StreamProcessor:boolean flushBufferedWrite()"
        ]
    },
    "org.apache.tomcat.util.net.WriteBuffer:boolean write(org.apache.tomcat.util.net.WriteBuffer$Sink,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Stream$StreamOutputBuffer:boolean flush(boolean)"
        ]
    },
    "org.apache.coyote.http2.Stream$StreamInputBuffer:void access$600(org.apache.coyote.http2.Stream$StreamInputBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Stream:void close(org.apache.coyote.http2.Http2Exception)"
        ]
    },
    "org.apache.catalina.connector.OutputBuffer:void write(char[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.CoyoteWriter:void write(char[],int,int)",
            "org.apache.catalina.connector.OutputBuffer:void write(char[])",
            "org.apache.catalina.util.IOTools:void flow(java.io.Reader,java.io.Writer,char[])"
        ]
    },
    "org.apache.catalina.connector.OutputBuffer:void write(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.CoyoteWriter:void write(int)"
        ]
    },
    "org.apache.catalina.connector.OutputBuffer:void write(java.lang.String,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.CoyoteWriter:void write(java.lang.String,int,int)",
            "org.apache.catalina.connector.OutputBuffer:void write(java.lang.String)"
        ]
    },
    "org.apache.catalina.authenticator.jaspic.AuthConfigFactoryImpl:void addRegistrationContextImpl(java.lang.String,java.lang.String,java.lang.String,org.apache.catalina.authenticator.jaspic.AuthConfigFactoryImpl$RegistrationContextImpl)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.jaspic.AuthConfigFactoryImpl:java.lang.String doRegisterConfigProvider(java.lang.String,java.util.Map,java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.catalina.authenticator.jaspic.AuthConfigFactoryImpl:java.lang.String registerConfigProvider(jakarta.security.auth.message.config.AuthConfigProvider,java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.catalina.authenticator.jaspic.AuthConfigFactoryImpl:boolean removeRegistration(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.startup.Catalina:void parseServerXml(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.Catalina:void stopServer(java.lang.String[])",
            "org.apache.catalina.startup.Catalina:void load()"
        ]
    },
    "org.apache.catalina.realm.MemoryRealm:void startInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void start()"
        ]
    },
    "org.apache.catalina.startup.ContextConfig:void contextConfig(org.apache.tomcat.util.digester.Digester)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.ContextConfig:void init()"
        ]
    },
    "org.apache.catalina.startup.ContextConfig:org.xml.sax.InputSource getWebXmlSource(java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.ContextConfig:org.xml.sax.InputSource getGlobalWebXmlSource()",
            "org.apache.catalina.startup.ContextConfig:org.xml.sax.InputSource getHostWebXmlSource()"
        ]
    },
    "org.apache.catalina.users.MemoryUserDatabase:void open()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.users.MemoryUserDatabase:void backgroundProcess()",
            "org.apache.catalina.users.MemoryUserDatabaseFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)"
        ]
    },
    "org.apache.tomcat.util.file.ConfigurationSource:org.apache.tomcat.util.file.ConfigurationSource$Resource getConfResource(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tomcat.util.net.SSLUtilBase:java.util.Collection getCRLs(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SSLUtilBase:java.security.cert.CertPathParameters getParameters(java.lang.String,java.security.KeyStore,boolean)"
        ]
    },
    "org.apache.tomcat.util.net.jsse.PEMFile:void <init>(java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.jsse.PEMFile:void <init>(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.catalina.startup.ContextConfig:void populateJavaClassCache(java.lang.String,org.apache.tomcat.util.bcel.classfile.JavaClass,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.ContextConfig:void checkHandlesTypes(org.apache.tomcat.util.bcel.classfile.JavaClass,java.util.Map)",
            "org.apache.catalina.startup.ContextConfig:void populateJavaClassCache(java.lang.String,java.util.Map)"
        ]
    },
    "org.apache.catalina.startup.ContextConfig$AnnotationScanTask:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.AsyncContextImpl$RunnableWrapper:void run()",
            "org.apache.catalina.core.AsyncContextImpl:void doInternalDispatch()",
            "org.apache.catalina.core.StandardThreadExecutor:void execute(java.lang.Runnable)",
            "org.apache.coyote.AbstractProcessor:void execute(java.lang.Runnable)",
            "org.apache.coyote.AsyncStateMachine:void asyncRun(java.lang.Runnable)",
            "org.apache.tomcat.util.net.Nio2Endpoint:void stopInternal()",
            "org.apache.tomcat.util.net.SecureNio2Channel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()",
            "org.apache.tomcat.util.net.SecureNioChannel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()",
            "org.apache.tomcat.util.net.SocketWrapperBase:void execute(java.lang.Runnable)",
            "org.apache.tomcat.util.threads.InlineExecutorService:void execute(java.lang.Runnable)",
            "org.apache.tomcat.util.threads.ScheduledThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.tomcat.util.threads.TaskThread$WrappingRunnable:void run()",
            "org.apache.tomcat.util.threads.ThreadPoolExecutor:void execute(java.lang.Runnable,long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.apache.catalina.startup.ContextConfig$HostWebXmlCacheCleaner:void lifecycleEvent(org.apache.catalina.LifecycleEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void fireLifecycleEvent(java.lang.String,java.lang.Object)"
        ]
    },
    "org.apache.catalina.startup.ContextConfig:void processContextConfig(org.apache.tomcat.util.digester.Digester,java.net.URL,java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.ContextConfig:void contextConfig(org.apache.tomcat.util.digester.Digester)"
        ]
    },
    "org.apache.catalina.startup.ContextConfig:void antiLocking()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.ContextConfig:void beforeStart()"
        ]
    },
    "org.apache.catalina.startup.ContextConfig:void init()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.ContextConfig:void lifecycleEvent(org.apache.catalina.LifecycleEvent)"
        ]
    },
    "org.apache.catalina.startup.ContextConfig:void beforeStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.ContextConfig:void lifecycleEvent(org.apache.catalina.LifecycleEvent)"
        ]
    },
    "org.apache.catalina.startup.ContextConfig:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.ContextConfig:void lifecycleEvent(org.apache.catalina.LifecycleEvent)"
        ]
    },
    "org.apache.catalina.startup.ContextConfig:void validateSecurityRoles()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.ContextConfig:void configureStart()"
        ]
    },
    "org.apache.catalina.startup.ContextConfig:org.apache.tomcat.util.descriptor.web.WebXml getTomcatWebXmlFragment(org.apache.tomcat.util.descriptor.web.WebXmlParser)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.ContextConfig:void webConfig()"
        ]
    },
    "org.apache.catalina.startup.ContextConfig:org.apache.tomcat.util.descriptor.web.WebXml getDefaultWebXmlFragment(org.apache.tomcat.util.descriptor.web.WebXmlParser)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.ContextConfig:void webConfig()"
        ]
    },
    "org.apache.catalina.startup.ContextConfig:void convertJsp(org.apache.tomcat.util.descriptor.web.ServletDef,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.ContextConfig:void convertJsps(org.apache.tomcat.util.descriptor.web.WebXml)"
        ]
    },
    "org.apache.catalina.startup.ContextConfig:org.xml.sax.InputSource getContextWebXmlSource()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.ContextConfig:void webConfig()"
        ]
    },
    "org.apache.catalina.startup.ContextConfig:void processAnnotationsWebResource(org.apache.catalina.WebResource,org.apache.tomcat.util.descriptor.web.WebXml,boolean,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.ContextConfig:void processClasses(org.apache.tomcat.util.descriptor.web.WebXml,java.util.Set)",
            "org.apache.catalina.startup.ContextConfig:void processAnnotationsWebResource(org.apache.catalina.WebResource,org.apache.tomcat.util.descriptor.web.WebXml,boolean,java.util.Map)"
        ]
    },
    "org.apache.catalina.startup.ContextConfig:void processAnnotationsUrl(java.net.URL,org.apache.tomcat.util.descriptor.web.WebXml,boolean,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.ContextConfig:void scanWebXmlFragment(boolean,org.apache.tomcat.util.descriptor.web.WebXml,java.util.Map)"
        ]
    },
    "org.apache.catalina.startup.ContextConfig:void processAnnotationsFile(java.io.File,org.apache.tomcat.util.descriptor.web.WebXml,boolean,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.ContextConfig:void processAnnotationsUrl(java.net.URL,org.apache.tomcat.util.descriptor.web.WebXml,boolean,java.util.Map)",
            "org.apache.catalina.startup.ContextConfig:void processAnnotationsFile(java.io.File,org.apache.tomcat.util.descriptor.web.WebXml,boolean,java.util.Map)"
        ]
    },
    "org.apache.catalina.startup.ContextConfig:void checkHandlesTypes(org.apache.tomcat.util.bcel.classfile.JavaClass,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.ContextConfig:void processAnnotationsStream(java.io.InputStream,org.apache.tomcat.util.descriptor.web.WebXml,boolean,java.util.Map)"
        ]
    },
    "org.apache.catalina.startup.ContextConfig:void populateSCIsForCacheEntry(org.apache.catalina.startup.ContextConfig$JavaClassCacheEntry,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.ContextConfig:void checkHandlesTypes(org.apache.tomcat.util.bcel.classfile.JavaClass,java.util.Map)",
            "org.apache.catalina.startup.ContextConfig:void populateSCIsForCacheEntry(org.apache.catalina.startup.ContextConfig$JavaClassCacheEntry,java.util.Map)"
        ]
    },
    "org.apache.catalina.startup.ContextConfig:java.util.Set getSCIsForClass(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.ContextConfig:void populateSCIsForCacheEntry(org.apache.catalina.startup.ContextConfig$JavaClassCacheEntry,java.util.Map)"
        ]
    },
    "org.apache.catalina.startup.ContextConfig:void processAnnotationWebServlet(java.lang.String,org.apache.tomcat.util.bcel.classfile.AnnotationEntry,org.apache.tomcat.util.descriptor.web.WebXml)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.ContextConfig:void processClass(org.apache.tomcat.util.descriptor.web.WebXml,org.apache.tomcat.util.bcel.classfile.JavaClass)"
        ]
    },
    "org.apache.catalina.startup.ContextConfig:void processAnnotationWebFilter(java.lang.String,org.apache.tomcat.util.bcel.classfile.AnnotationEntry,org.apache.tomcat.util.descriptor.web.WebXml)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.ContextConfig:void processClass(org.apache.tomcat.util.descriptor.web.WebXml,org.apache.tomcat.util.bcel.classfile.JavaClass)"
        ]
    },
    "org.apache.juli.ClassLoaderLogManager:void readConfiguration()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.juli.ClassLoaderLogManager:java.lang.Void lambda$getClassLoaderInfo$2(java.lang.ClassLoader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.juli.ClassLoaderLogManager$lambda_getClassLoaderInfo_2__17:java.lang.Object run()"
        ]
    },
    "org.apache.tomcat.util.net.SSLHostConfig:java.security.KeyStore getTruststore()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SSLUtilBase:javax.net.ssl.TrustManager[] getTrustManagers()"
        ]
    },
    "org.apache.tomcat.util.net.SSLHostConfigCertificate:java.security.KeyStore getCertificateKeystore()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SSLUtilBase:javax.net.ssl.KeyManager[] getKeyManagers()"
        ]
    },
    "org.apache.catalina.loader.WebappLoader:void stopInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void stop()"
        ]
    },
    "org.apache.catalina.loader.WebappClassLoaderBase$PrivilegedFindClassByName:java.lang.Class run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.loader.WebappClassLoaderBase$PrivilegedFindClassByName:java.lang.Object run()"
        ]
    },
    "org.apache.catalina.loader.WebappClassLoaderBase:java.lang.Class findClass(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.loader.WebappClassLoaderBase:java.lang.Class loadClass(java.lang.String,boolean)"
        ]
    },
    "org.apache.catalina.webresources.CachedResource:java.io.InputStream getInputStream()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationContext:java.io.InputStream getResourceAsStream(java.lang.String)",
            "org.apache.catalina.loader.WebappClassLoaderBase:java.io.InputStream getResourceAsStream(java.lang.String)",
            "org.apache.catalina.servlets.DefaultServlet:java.io.File executePartialPut(jakarta.servlet.http.HttpServletRequest,org.apache.tomcat.util.http.parser.ContentRange,java.lang.String)",
            "org.apache.catalina.servlets.DefaultServlet:void serveResource(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,boolean,java.lang.String)",
            "org.apache.catalina.servlets.DefaultServlet:java.lang.String getReadme(org.apache.catalina.WebResource,java.lang.String)",
            "org.apache.catalina.servlets.DefaultServlet:javax.xml.transform.Source findXsltSource(org.apache.catalina.WebResource)",
            "org.apache.catalina.servlets.DefaultServlet:void copy(org.apache.catalina.WebResource,long,jakarta.servlet.ServletOutputStream,org.apache.tomcat.util.http.parser.Ranges$Entry)",
            "org.apache.catalina.servlets.DefaultServlet:void copy(org.apache.catalina.WebResource,long,jakarta.servlet.ServletOutputStream,org.apache.tomcat.util.http.parser.Ranges,java.lang.String)",
            "org.apache.catalina.servlets.WebdavServlet:boolean copyResource(java.util.Hashtable,java.lang.String,java.lang.String)",
            "org.apache.catalina.startup.ContextConfig:org.apache.tomcat.util.descriptor.web.WebXml getTomcatWebXmlFragment(org.apache.tomcat.util.descriptor.web.WebXmlParser)",
            "org.apache.catalina.startup.ContextConfig:void processAnnotationsWebResource(org.apache.catalina.WebResource,org.apache.tomcat.util.descriptor.web.WebXml,boolean,java.util.Map)",
            "org.apache.catalina.util.ExtensionValidator:boolean validateApplication(org.apache.catalina.WebResourceRoot,org.apache.catalina.Context)",
            "org.apache.catalina.webresources.CachedResource$CachedResourceJarURLConnection:java.io.InputStream getInputStream()",
            "org.apache.catalina.webresources.CachedResource$CachedResourceURLConnection:java.io.InputStream getInputStream()",
            "org.apache.catalina.webresources.CachedResource:java.io.InputStream getInputStream()",
            "org.apache.catalina.webresources.ExtractingRoot:void processWebInfLib()"
        ]
    },
    "org.apache.catalina.servlets.CGIServlet$CGIEnvironment:void expandCGIScript()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.CGIServlet$CGIEnvironment:boolean setCGIEnvironment(jakarta.servlet.http.HttpServletRequest)"
        ]
    },
    "org.apache.catalina.servlets.DefaultServlet:java.lang.String getReadme(org.apache.catalina.WebResource,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.DefaultServlet:java.io.InputStream renderXml(jakarta.servlet.http.HttpServletRequest,java.lang.String,org.apache.catalina.WebResource,javax.xml.transform.Source,java.lang.String)",
            "org.apache.catalina.servlets.DefaultServlet:java.io.InputStream renderHtml(jakarta.servlet.http.HttpServletRequest,java.lang.String,org.apache.catalina.WebResource,java.lang.String)"
        ]
    },
    "org.apache.catalina.servlets.DefaultServlet:javax.xml.transform.Source secureXslt(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.DefaultServlet:javax.xml.transform.Source findXsltSource(org.apache.catalina.WebResource)"
        ]
    },
    "org.apache.catalina.servlets.WebdavServlet:boolean copyResource(java.util.Hashtable,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.WebdavServlet:boolean copyResource(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.WebdavServlet:boolean copyResource(java.util.Hashtable,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.catalina.startup.Tomcat:void addDefaultMimeTypeMappings(org.apache.catalina.Context)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.Tomcat:void initWebappDefaults(org.apache.catalina.Context)"
        ]
    },
    "org.apache.catalina.startup.WebappServiceLoader:void parseConfigFile(java.util.LinkedHashSet,java.net.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.WebappServiceLoader:java.util.List load(java.lang.Class)"
        ]
    },
    "org.apache.catalina.users.MemoryUserDatabase:void backgroundProcess()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.realm.UserDatabaseRealm:void backgroundProcess()"
        ]
    },
    "org.apache.catalina.util.CharsetMapper:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.CharsetMapper:void <init>()"
        ]
    },
    "org.apache.catalina.util.ExtensionValidator:boolean validateApplication(org.apache.catalina.WebResourceRoot,org.apache.catalina.Context)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.StandardContext:void startInternal()"
        ]
    },
    "org.apache.catalina.util.ServerInfo:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.CoyoteAdapter:void <clinit>()",
            "org.apache.catalina.core.ApplicationContext:java.lang.String getServerInfo()",
            "org.apache.catalina.core.StandardEngine:void startInternal()",
            "org.apache.catalina.core.StandardServer:java.lang.String getServerInfo()",
            "org.apache.catalina.core.StandardServer:java.lang.String getServerBuilt()",
            "org.apache.catalina.core.StandardServer:java.lang.String getServerNumber()",
            "org.apache.catalina.manager.HTMLManagerServlet:void list(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.ManagerServlet:void serverinfo(java.io.PrintWriter,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.StatusManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.host.HTMLHostManagerServlet:void list(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.servlets.DefaultServlet:java.io.InputStream renderHtml(jakarta.servlet.http.HttpServletRequest,java.lang.String,org.apache.catalina.WebResource,java.lang.String)",
            "org.apache.catalina.startup.VersionLoggerListener:void log()",
            "org.apache.catalina.util.ServerInfo:java.lang.String getServerInfo()",
            "org.apache.catalina.util.ServerInfo:java.lang.String getServerBuilt()",
            "org.apache.catalina.util.ServerInfo:java.lang.String getServerNumber()",
            "org.apache.catalina.util.ServerInfo:void main(java.lang.String[])",
            "org.apache.catalina.util.ServerInfo:void <clinit>()",
            "org.apache.catalina.valves.ErrorReportValve:void report(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,java.lang.Throwable)",
            "org.apache.catalina.valves.ExtendedAccessLogValve:void open()"
        ]
    },
    "org.apache.catalina.webresources.AbstractArchiveResource$JarInputStreamWrapper:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.DefaultInstanceManager:void loadProperties(java.util.Set,java.lang.String,java.lang.String,org.apache.juli.logging.Log)",
            "org.apache.catalina.loader.WebappClassLoaderBase:java.io.InputStream getResourceAsStream(java.lang.String)",
            "org.apache.catalina.loader.WebappClassLoaderBase:void clearReferencesJdbc()",
            "org.apache.catalina.manager.host.HostManagerServlet:void add(java.io.PrintWriter,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean,boolean,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.realm.MemoryRealm:void startInternal()",
            "org.apache.catalina.servlets.CGIServlet$CGIEnvironment:void expandCGIScript()",
            "org.apache.catalina.servlets.CGIServlet$CGIRunner:void run()",
            "org.apache.catalina.servlets.DefaultServlet:void doPut(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.DefaultServlet:java.lang.String getReadme(org.apache.catalina.WebResource,java.lang.String)",
            "org.apache.catalina.servlets.DefaultServlet:javax.xml.transform.Source secureXslt(java.io.InputStream)",
            "org.apache.catalina.servlets.WebdavServlet:boolean copyResource(java.util.Hashtable,java.lang.String,java.lang.String)",
            "org.apache.catalina.startup.CatalinaBaseConfigurationSource:org.apache.tomcat.util.file.ConfigurationSource$Resource getServerXml()",
            "org.apache.catalina.startup.CatalinaBaseConfigurationSource:org.apache.tomcat.util.file.ConfigurationSource$Resource getResource(java.lang.String)",
            "org.apache.catalina.startup.CatalinaProperties:void loadProperties()",
            "org.apache.catalina.startup.ContextConfig:void processContextConfig(org.apache.tomcat.util.digester.Digester,java.net.URL,java.io.InputStream)",
            "org.apache.catalina.startup.ContextConfig:org.apache.tomcat.util.descriptor.web.WebXml getDefaultWebXmlFragment(org.apache.tomcat.util.descriptor.web.WebXmlParser)",
            "org.apache.catalina.startup.ContextConfig:org.xml.sax.InputSource getContextWebXmlSource()",
            "org.apache.catalina.startup.ContextConfig:org.xml.sax.InputSource getWebXmlSource(java.lang.String,boolean)",
            "org.apache.catalina.startup.ContextConfig:void processAnnotationsWebResource(org.apache.catalina.WebResource,org.apache.tomcat.util.descriptor.web.WebXml,boolean,java.util.Map)",
            "org.apache.catalina.startup.ContextConfig:void processAnnotationsJar(java.net.URL,org.apache.tomcat.util.descriptor.web.WebXml,boolean,java.util.Map)",
            "org.apache.catalina.startup.ContextConfig:void populateJavaClassCache(java.lang.String,java.util.Map)",
            "org.apache.catalina.startup.ContextConfig:void <clinit>()",
            "org.apache.catalina.startup.ExpandWar:java.lang.String expand(org.apache.catalina.Host,java.net.URL,java.lang.String)",
            "org.apache.catalina.startup.HostConfig:void deployWAR(org.apache.catalina.util.ContextName,java.io.File)",
            "org.apache.catalina.startup.Tomcat:org.apache.catalina.Context addWebapp(java.lang.String,java.net.URL)",
            "org.apache.catalina.startup.Tomcat:void addDefaultMimeTypeMappings(org.apache.catalina.Context)",
            "org.apache.catalina.startup.WebappServiceLoader:void parseConfigFile(java.util.LinkedHashSet,java.net.URL)",
            "org.apache.catalina.users.MemoryUserDatabase:void backgroundProcess()",
            "org.apache.catalina.util.CharsetMapper:void <init>(java.lang.String)",
            "org.apache.catalina.util.ExtensionValidator:boolean validateApplication(org.apache.catalina.WebResourceRoot,org.apache.catalina.Context)",
            "org.apache.catalina.util.ServerInfo:void <clinit>()",
            "org.apache.catalina.valves.rewrite.RewriteValve:void startInternal()",
            "org.apache.catalina.webresources.AbstractArchiveResource$JarInputStreamWrapper:void close()",
            "org.apache.catalina.webresources.AbstractArchiveResource:byte[] getContent()",
            "org.apache.catalina.webresources.ExtractingRoot:void processWebInfLib()",
            "org.apache.catalina.webresources.JarWarResourceSet:java.util.Map getArchiveEntries(boolean)",
            "org.apache.catalina.webresources.TrackedInputStream:void close()",
            "org.apache.juli.ClassLoaderLogManager:void readConfiguration(java.io.InputStream,java.lang.ClassLoader)",
            "org.apache.naming.factory.LookupFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.tomcat.util.descriptor.InputSourceUtil:void close(org.xml.sax.InputSource)",
            "org.apache.tomcat.util.descriptor.tagplugin.TagPluginParser:void parse(java.net.URL)",
            "org.apache.tomcat.util.file.ConfigurationSource$Resource:long getLastModified()",
            "org.apache.tomcat.util.file.ConfigurationSource$Resource:void close()",
            "org.apache.tomcat.util.http.fileupload.IOUtils:void closeQuietly(java.io.Closeable)",
            "org.apache.tomcat.util.http.fileupload.MultipartStream$ItemInputStream:void close(boolean)",
            "org.apache.tomcat.util.http.fileupload.impl.FileItemStreamImpl:void close()",
            "org.apache.tomcat.util.http.fileupload.util.Streams:long copy(java.io.InputStream,java.io.OutputStream,boolean,byte[])",
            "org.apache.tomcat.util.net.SSLUtilBase:java.security.KeyStore getStore(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.tomcat.util.net.SSLUtilBase:java.util.Collection getCRLs(java.lang.String)",
            "org.apache.tomcat.util.net.jsse.PEMFile:void <init>(java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.catalina.webresources.JarWarResourceSet:java.util.Map getArchiveEntries(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.webresources.AbstractArchiveResourceSet:java.lang.String[] list(java.lang.String)",
            "org.apache.catalina.webresources.AbstractArchiveResourceSet:java.util.Set listWebAppPaths(java.lang.String)",
            "org.apache.catalina.webresources.AbstractArchiveResourceSet:org.apache.catalina.WebResource getResource(java.lang.String)"
        ]
    },
    "org.apache.catalina.webresources.TrackedInputStream:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.DefaultInstanceManager:void loadProperties(java.util.Set,java.lang.String,java.lang.String,org.apache.juli.logging.Log)",
            "org.apache.catalina.loader.WebappClassLoaderBase:java.io.InputStream getResourceAsStream(java.lang.String)",
            "org.apache.catalina.loader.WebappClassLoaderBase:void clearReferencesJdbc()",
            "org.apache.catalina.manager.host.HostManagerServlet:void add(java.io.PrintWriter,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean,boolean,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.realm.MemoryRealm:void startInternal()",
            "org.apache.catalina.servlets.CGIServlet$CGIEnvironment:void expandCGIScript()",
            "org.apache.catalina.servlets.CGIServlet$CGIRunner:void run()",
            "org.apache.catalina.servlets.DefaultServlet:void doPut(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.DefaultServlet:java.lang.String getReadme(org.apache.catalina.WebResource,java.lang.String)",
            "org.apache.catalina.servlets.DefaultServlet:javax.xml.transform.Source secureXslt(java.io.InputStream)",
            "org.apache.catalina.servlets.WebdavServlet:boolean copyResource(java.util.Hashtable,java.lang.String,java.lang.String)",
            "org.apache.catalina.startup.CatalinaBaseConfigurationSource:org.apache.tomcat.util.file.ConfigurationSource$Resource getServerXml()",
            "org.apache.catalina.startup.CatalinaBaseConfigurationSource:org.apache.tomcat.util.file.ConfigurationSource$Resource getResource(java.lang.String)",
            "org.apache.catalina.startup.CatalinaProperties:void loadProperties()",
            "org.apache.catalina.startup.ContextConfig:void processContextConfig(org.apache.tomcat.util.digester.Digester,java.net.URL,java.io.InputStream)",
            "org.apache.catalina.startup.ContextConfig:org.apache.tomcat.util.descriptor.web.WebXml getDefaultWebXmlFragment(org.apache.tomcat.util.descriptor.web.WebXmlParser)",
            "org.apache.catalina.startup.ContextConfig:org.xml.sax.InputSource getContextWebXmlSource()",
            "org.apache.catalina.startup.ContextConfig:org.xml.sax.InputSource getWebXmlSource(java.lang.String,boolean)",
            "org.apache.catalina.startup.ContextConfig:void processAnnotationsWebResource(org.apache.catalina.WebResource,org.apache.tomcat.util.descriptor.web.WebXml,boolean,java.util.Map)",
            "org.apache.catalina.startup.ContextConfig:void processAnnotationsJar(java.net.URL,org.apache.tomcat.util.descriptor.web.WebXml,boolean,java.util.Map)",
            "org.apache.catalina.startup.ContextConfig:void populateJavaClassCache(java.lang.String,java.util.Map)",
            "org.apache.catalina.startup.ContextConfig:void <clinit>()",
            "org.apache.catalina.startup.ExpandWar:java.lang.String expand(org.apache.catalina.Host,java.net.URL,java.lang.String)",
            "org.apache.catalina.startup.HostConfig:void deployWAR(org.apache.catalina.util.ContextName,java.io.File)",
            "org.apache.catalina.startup.Tomcat:org.apache.catalina.Context addWebapp(java.lang.String,java.net.URL)",
            "org.apache.catalina.startup.Tomcat:void addDefaultMimeTypeMappings(org.apache.catalina.Context)",
            "org.apache.catalina.startup.WebappServiceLoader:void parseConfigFile(java.util.LinkedHashSet,java.net.URL)",
            "org.apache.catalina.users.MemoryUserDatabase:void backgroundProcess()",
            "org.apache.catalina.util.CharsetMapper:void <init>(java.lang.String)",
            "org.apache.catalina.util.ExtensionValidator:boolean validateApplication(org.apache.catalina.WebResourceRoot,org.apache.catalina.Context)",
            "org.apache.catalina.util.ServerInfo:void <clinit>()",
            "org.apache.catalina.valves.rewrite.RewriteValve:void startInternal()",
            "org.apache.catalina.webresources.AbstractArchiveResource$JarInputStreamWrapper:void close()",
            "org.apache.catalina.webresources.ExtractingRoot:void processWebInfLib()",
            "org.apache.catalina.webresources.JarWarResourceSet:java.util.Map getArchiveEntries(boolean)",
            "org.apache.catalina.webresources.StandardRoot:void stopInternal()",
            "org.apache.catalina.webresources.TrackedInputStream:void close()",
            "org.apache.juli.ClassLoaderLogManager:void readConfiguration(java.io.InputStream,java.lang.ClassLoader)",
            "org.apache.naming.factory.LookupFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.tomcat.util.descriptor.InputSourceUtil:void close(org.xml.sax.InputSource)",
            "org.apache.tomcat.util.descriptor.tagplugin.TagPluginParser:void parse(java.net.URL)",
            "org.apache.tomcat.util.file.ConfigurationSource$Resource:long getLastModified()",
            "org.apache.tomcat.util.file.ConfigurationSource$Resource:void close()",
            "org.apache.tomcat.util.http.fileupload.IOUtils:void closeQuietly(java.io.Closeable)",
            "org.apache.tomcat.util.http.fileupload.MultipartStream$ItemInputStream:void close(boolean)",
            "org.apache.tomcat.util.http.fileupload.impl.FileItemStreamImpl:void close()",
            "org.apache.tomcat.util.http.fileupload.util.Streams:long copy(java.io.InputStream,java.io.OutputStream,boolean,byte[])",
            "org.apache.tomcat.util.net.SSLUtilBase:java.security.KeyStore getStore(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.tomcat.util.net.SSLUtilBase:java.util.Collection getCRLs(java.lang.String)",
            "org.apache.tomcat.util.net.jsse.PEMFile:void <init>(java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.juli.ClassLoaderLogManager:void readConfiguration(java.io.InputStream,java.lang.ClassLoader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.juli.ClassLoaderLogManager:void readConfiguration(java.io.InputStream)",
            "org.apache.juli.ClassLoaderLogManager:void readConfiguration(java.lang.ClassLoader)"
        ]
    },
    "org.apache.tomcat.util.descriptor.InputSourceUtil:void close(org.xml.sax.InputSource)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.ContextConfig:org.apache.tomcat.util.descriptor.web.WebXml getDefaultWebXmlFragment(org.apache.tomcat.util.descriptor.web.WebXmlParser)",
            "org.apache.tomcat.util.descriptor.web.WebXmlParser:boolean parseWebXml(org.xml.sax.InputSource,org.apache.tomcat.util.descriptor.web.WebXml,boolean)"
        ]
    },
    "org.apache.tomcat.util.descriptor.tagplugin.TagPluginParser:void parse(java.net.URL)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tomcat.util.file.ConfigurationSource$Resource:long getLastModified()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.users.MemoryUserDatabase:void open()"
        ]
    },
    "org.apache.tomcat.util.file.ConfigurationSource$Resource:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.Catalina:void parseServerXml(boolean)",
            "org.apache.catalina.startup.ContextConfig:void contextConfig(org.apache.tomcat.util.digester.Digester)",
            "org.apache.catalina.users.MemoryUserDatabase:void open()",
            "org.apache.naming.factory.LookupFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.impl.FileItemStreamImpl:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.impl.FileItemIteratorImpl:boolean findNextItem()"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.util.LimitedInputStream:void checkLimit()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.util.LimitedInputStream:int read()",
            "org.apache.tomcat.util.http.fileupload.util.LimitedInputStream:int read(byte[],int,int)"
        ]
    },
    "jakarta.servlet.http.HttpServletRequestWrapper:java.security.Principal getUserPrincipal()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletRequestWrapper:java.security.Principal getUserPrincipal()",
            "org.apache.catalina.core.ApplicationFilterChain:void internalDoFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)",
            "org.apache.catalina.servlets.CGIServlet:void printServletEnvironment(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.servlets.WebdavServlet:void doLock(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.connector.RequestFacade:java.security.Principal getUserPrincipal()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletRequestWrapper:java.security.Principal getUserPrincipal()",
            "org.apache.catalina.core.ApplicationFilterChain:void internalDoFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)",
            "org.apache.catalina.servlets.CGIServlet:void printServletEnvironment(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.servlets.WebdavServlet:void doLock(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.connector.Request:jakarta.servlet.http.Cookie[] getCookies()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletRequestWrapper:jakarta.servlet.http.Cookie[] getCookies()",
            "org.apache.catalina.authenticator.FormAuthenticator:void saveRequest(org.apache.catalina.connector.Request,org.apache.catalina.Session)",
            "org.apache.catalina.authenticator.SingleSignOn:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.connector.RequestFacade$GetCookiesPrivilegedAction:jakarta.servlet.http.Cookie[] run()",
            "org.apache.catalina.connector.RequestFacade:jakarta.servlet.http.Cookie[] getCookies()",
            "org.apache.catalina.core.ApplicationPushBuilder:void <init>(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.filters.RequestDumperFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.servlets.CGIServlet:void printServletEnvironment(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.valves.AbstractAccessLogValve$CookieElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.ExtendedAccessLogValve$CookieElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.LoadBalancerDrainingValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)"
        ]
    },
    "org.apache.catalina.connector.Request:void changeSessionId(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.Request:java.lang.String changeSessionId()"
        ]
    },
    "org.apache.catalina.connector.Request:org.apache.catalina.Session doGetSession(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.Request:jakarta.servlet.http.HttpSession getSession()",
            "org.apache.catalina.connector.Request:jakarta.servlet.http.HttpSession getSession(boolean)",
            "org.apache.catalina.connector.Request:org.apache.catalina.Session getSessionInternal()",
            "org.apache.catalina.connector.Request:org.apache.catalina.Session getSessionInternal(boolean)"
        ]
    },
    "org.apache.catalina.startup.Bootstrap:void initClassLoaders()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.Bootstrap:void init()"
        ]
    },
    "org.apache.catalina.core.DefaultInstanceManager:java.lang.Object newInstance(java.lang.Object,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.DefaultInstanceManager:java.lang.Object newInstance(java.lang.Class)",
            "org.apache.catalina.core.DefaultInstanceManager:java.lang.Object newInstance(java.lang.String)",
            "org.apache.catalina.core.DefaultInstanceManager:java.lang.Object newInstance(java.lang.String,java.lang.ClassLoader)",
            "org.apache.catalina.core.DefaultInstanceManager:void newInstance(java.lang.Object)"
        ]
    },
    "org.apache.catalina.deploy.NamingResourcesImpl:java.lang.Class getCompatibleType(org.apache.catalina.Context,org.apache.tomcat.util.descriptor.web.ResourceBase,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.deploy.NamingResourcesImpl:boolean checkResourceType(org.apache.tomcat.util.descriptor.web.ResourceBase)"
        ]
    },
    "org.apache.catalina.startup.WebAnnotationSet:void loadApplicationListenerAnnotations(org.apache.catalina.Context)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.WebAnnotationSet:void loadApplicationAnnotations(org.apache.catalina.Context)"
        ]
    },
    "org.apache.catalina.startup.WebAnnotationSet:void loadApplicationFilterAnnotations(org.apache.catalina.Context)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.WebAnnotationSet:void loadApplicationAnnotations(org.apache.catalina.Context)"
        ]
    },
    "org.apache.catalina.startup.WebAnnotationSet:void loadApplicationServletAnnotations(org.apache.catalina.Context)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.WebAnnotationSet:void loadApplicationAnnotations(org.apache.catalina.Context)"
        ]
    },
    "org.apache.juli.ClassLoaderLogManager:java.lang.String getProperty(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.juli.ClassLoaderLogManager:boolean addLogger(java.util.logging.Logger)",
            "org.apache.juli.FileHandler:java.lang.String getProperty(java.lang.String,java.lang.String)",
            "org.apache.juli.OneLineFormatter:void <init>()"
        ]
    },
    "org.apache.juli.ClassLoaderLogManager:void readConfiguration(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.Tomcat:void <clinit>()"
        ]
    },
    "org.apache.juli.logging.LogFactory:void release(java.lang.ClassLoader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.loader.WebappClassLoaderBase:void clearReferences()"
        ]
    },
    "org.apache.catalina.servlets.CGIServlet$CGIEnvironment:java.lang.String[] findCGI(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.CGIServlet$CGIEnvironment:boolean setCGIEnvironment(jakarta.servlet.http.HttpServletRequest)"
        ]
    },
    "org.apache.catalina.servlets.CGIServlet$CGIRunner:int getSCFromHttpStatusLine(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.CGIServlet$CGIRunner:void run()"
        ]
    },
    "org.apache.catalina.servlets.CGIServlet$CGIRunner:int getSCFromCGIStatusHeader(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.CGIServlet$CGIRunner:void run()"
        ]
    },
    "org.apache.catalina.servlets.CGIServlet$CGIRunner:void sendToLog(java.io.BufferedReader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.CGIServlet$CGIRunner:void lambda$run$0(java.io.BufferedReader)"
        ]
    },
    "org.apache.catalina.servlets.CGIServlet:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.servlets.CGIServlet:void doOptions(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServlet:void service(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.servlets.CGIServlet:org.apache.juli.logging.Log access$200()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.CGIServlet$CGIEnvironment:boolean setupFromRequest(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.servlets.CGIServlet$CGIEnvironment:java.lang.String[] findCGI(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.catalina.servlets.CGIServlet$CGIEnvironment:void expandCGIScript()",
            "org.apache.catalina.servlets.CGIServlet$CGIRunner:void run()",
            "org.apache.catalina.servlets.CGIServlet$CGIRunner:int getSCFromHttpStatusLine(java.lang.String)",
            "org.apache.catalina.servlets.CGIServlet$CGIRunner:int getSCFromCGIStatusHeader(java.lang.String)",
            "org.apache.catalina.servlets.CGIServlet$CGIRunner:void sendToLog(java.io.BufferedReader)"
        ]
    },
    "org.apache.catalina.servlets.CGIServlet:org.apache.tomcat.util.res.StringManager access$300()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.CGIServlet$CGIEnvironment:boolean setupFromRequest(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.servlets.CGIServlet$CGIEnvironment:java.lang.String[] findCGI(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.catalina.servlets.CGIServlet$CGIEnvironment:void expandCGIScript()",
            "org.apache.catalina.servlets.CGIServlet$CGIRunner:void run()",
            "org.apache.catalina.servlets.CGIServlet$CGIRunner:int getSCFromHttpStatusLine(java.lang.String)",
            "org.apache.catalina.servlets.CGIServlet$CGIRunner:int getSCFromCGIStatusHeader(java.lang.String)",
            "org.apache.catalina.servlets.CGIServlet$CGIRunner:void sendToLog(java.io.BufferedReader)"
        ]
    },
    "org.apache.catalina.servlets.CGIServlet:java.lang.Object access$900()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.CGIServlet$CGIEnvironment:void expandCGIScript()"
        ]
    },
    "org.apache.catalina.webresources.DirResourceSet:org.apache.catalina.WebResource getResource(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.webresources.StandardRoot:boolean preResourceExists(java.lang.String)",
            "org.apache.catalina.webresources.StandardRoot:org.apache.catalina.WebResource getResourceInternal(java.lang.String,boolean)",
            "org.apache.catalina.webresources.StandardRoot:org.apache.catalina.WebResource[] getResourcesInternal(java.lang.String,boolean)"
        ]
    },
    "org.apache.catalina.webresources.DirResourceSet:java.lang.String[] list(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.webresources.StandardRoot:java.lang.String[] list(java.lang.String,boolean)"
        ]
    },
    "org.apache.catalina.webresources.DirResourceSet:java.util.Set listWebAppPaths(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.webresources.StandardRoot:java.util.Set listWebAppPaths(java.lang.String)"
        ]
    },
    "org.apache.catalina.webresources.DirResourceSet:boolean mkdir(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.webresources.StandardRoot:boolean mkdir(java.lang.String)"
        ]
    },
    "org.apache.catalina.webresources.DirResourceSet:boolean write(java.lang.String,java.io.InputStream,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.webresources.StandardRoot:boolean write(java.lang.String,java.io.InputStream,boolean)"
        ]
    },
    "org.apache.catalina.webresources.DirResourceSet:void initInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void init()"
        ]
    },
    "org.apache.catalina.webresources.FileResourceSet:org.apache.catalina.WebResource getResource(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.webresources.StandardRoot:boolean preResourceExists(java.lang.String)",
            "org.apache.catalina.webresources.StandardRoot:org.apache.catalina.WebResource getResourceInternal(java.lang.String,boolean)",
            "org.apache.catalina.webresources.StandardRoot:org.apache.catalina.WebResource[] getResourcesInternal(java.lang.String,boolean)"
        ]
    },
    "jakarta.servlet.ServletRequestWrapper:java.util.Locale getLocale()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletRequestWrapper:java.util.Locale getLocale()",
            "org.apache.catalina.filters.RequestDumperFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)"
        ]
    },
    "org.apache.catalina.connector.RequestFacade$GetLocalePrivilegedAction:java.util.Locale run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.RequestFacade$GetLocalePrivilegedAction:java.lang.Object run()"
        ]
    },
    "org.apache.catalina.connector.RequestFacade:java.util.Locale getLocale()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletRequestWrapper:java.util.Locale getLocale()",
            "org.apache.catalina.filters.RequestDumperFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)"
        ]
    },
    "jakarta.servlet.ServletRequestWrapper:java.util.Enumeration getLocales()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletRequestWrapper:java.util.Enumeration getLocales()",
            "org.apache.catalina.manager.HTMLManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.HTMLManagerServlet:void doPost(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.ManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.ManagerServlet:void doPut(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.StatusManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.host.HTMLHostManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.host.HTMLHostManagerServlet:void doPost(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.host.HostManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.CGIServlet:void printServletEnvironment(jakarta.servlet.http.HttpServletRequest)"
        ]
    },
    "org.apache.catalina.connector.RequestFacade$GetLocalesPrivilegedAction:java.util.Enumeration run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.RequestFacade$GetLocalesPrivilegedAction:java.lang.Object run()"
        ]
    },
    "org.apache.catalina.connector.RequestFacade:java.util.Enumeration getLocales()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletRequestWrapper:java.util.Enumeration getLocales()",
            "org.apache.catalina.manager.HTMLManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.HTMLManagerServlet:void doPost(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.ManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.ManagerServlet:void doPut(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.StatusManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.host.HTMLHostManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.host.HTMLHostManagerServlet:void doPost(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.host.HostManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.CGIServlet:void printServletEnvironment(jakarta.servlet.http.HttpServletRequest)"
        ]
    },
    "org.apache.catalina.loader.WebappClassLoaderBase$CombinedEnumeration:boolean inc()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.loader.WebappClassLoaderBase$CombinedEnumeration:boolean hasMoreElements()",
            "org.apache.catalina.loader.WebappClassLoaderBase$CombinedEnumeration:java.net.URL nextElement()"
        ]
    },
    "org.apache.catalina.core.ApplicationFilterConfig:void <init>(org.apache.catalina.Context,org.apache.tomcat.util.descriptor.web.FilterDef)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.StandardContext:boolean filterStart()"
        ]
    },
    "org.apache.catalina.core.ApplicationFilterConfig:jakarta.servlet.Filter getFilter()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationFilterChain:void internalDoFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)",
            "org.apache.catalina.core.ApplicationFilterConfig:void <init>(org.apache.catalina.Context,org.apache.tomcat.util.descriptor.web.FilterDef)"
        ]
    },
    "org.apache.catalina.filters.CsrfPreventionFilter:void init(jakarta.servlet.FilterConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationFilterConfig:void initFilter()"
        ]
    },
    "org.apache.catalina.filters.RestCsrfPreventionFilter:void init(jakarta.servlet.FilterConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationFilterConfig:void initFilter()"
        ]
    },
    "org.apache.catalina.manager.JspHelper:java.lang.String guessDisplayLocaleFromSession(org.apache.catalina.Session)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.HTMLManagerServlet$6:java.lang.Comparable getComparableObject(org.apache.catalina.Session)"
        ]
    },
    "org.apache.catalina.manager.HTMLManagerServlet$7:java.lang.Comparable getComparableObject(org.apache.catalina.Session)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.util.BaseSessionComparator:int compare(org.apache.catalina.Session,org.apache.catalina.Session)"
        ]
    },
    "org.apache.catalina.core.StandardWrapper:jakarta.servlet.Servlet allocate()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationDispatcher:void invoke(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,org.apache.catalina.core.ApplicationDispatcher$State)",
            "org.apache.catalina.core.StandardWrapperValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)"
        ]
    },
    "org.apache.catalina.core.StandardWrapper:void load()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.StandardContext:boolean loadOnStartup(org.apache.catalina.Container[])"
        ]
    },
    "org.apache.catalina.core.StandardWrapper:jakarta.servlet.Servlet loadServlet()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.StandardWrapper:java.lang.String[] getServletMethods()",
            "org.apache.catalina.core.StandardWrapper:jakarta.servlet.Servlet allocate()",
            "org.apache.catalina.core.StandardWrapper:void load()"
        ]
    },
    "org.apache.catalina.core.StandardWrapper:java.lang.String[] getServletMethods()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.CoyoteAdapter:boolean postParseRequest(org.apache.coyote.Request,org.apache.catalina.connector.Request,org.apache.coyote.Response,org.apache.catalina.connector.Response)"
        ]
    },
    "org.apache.catalina.security.SecurityConfig:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.security.SecurityConfig:org.apache.catalina.security.SecurityConfig newInstance()"
        ]
    },
    "org.apache.catalina.startup.CatalinaProperties:java.lang.String getProperty(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.security.SecurityConfig:void <init>()",
            "org.apache.catalina.startup.Bootstrap:java.lang.ClassLoader createClassLoader(java.lang.String,java.lang.ClassLoader)"
        ]
    },
    "org.apache.catalina.webresources.StandardRoot:java.lang.String[] list(java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.webresources.StandardRoot:java.lang.String[] list(java.lang.String)",
            "org.apache.catalina.webresources.StandardRoot:org.apache.catalina.WebResource[] listResources(java.lang.String,boolean)"
        ]
    },
    "org.apache.catalina.webresources.StandardRoot:java.util.Set listWebAppPaths(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationContext:java.util.Set getResourcePaths(java.lang.String)"
        ]
    },
    "org.apache.catalina.webresources.StandardRoot:boolean preResourceExists(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.webresources.StandardRoot:boolean mkdir(java.lang.String)",
            "org.apache.catalina.webresources.StandardRoot:boolean write(java.lang.String,java.io.InputStream,boolean)"
        ]
    },
    "org.apache.catalina.webresources.StandardRoot:org.apache.catalina.WebResource getResourceInternal(java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.webresources.Cache:org.apache.catalina.WebResource getResource(java.lang.String,boolean)",
            "org.apache.catalina.webresources.CachedResource:boolean validateResource(boolean)",
            "org.apache.catalina.webresources.StandardRoot:org.apache.catalina.WebResource getResource(java.lang.String,boolean,boolean)"
        ]
    },
    "org.apache.catalina.webresources.StandardRoot:org.apache.catalina.WebResource[] getResourcesInternal(java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.webresources.CachedResource:boolean validateResources(boolean)",
            "org.apache.catalina.webresources.StandardRoot:org.apache.catalina.WebResource[] getResources(java.lang.String,boolean)"
        ]
    },
    "org.apache.catalina.webresources.AbstractSingleArchiveResource:org.apache.catalina.webresources.AbstractArchiveResource$JarInputStreamWrapper getJarInputStreamWrapper()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.webresources.AbstractArchiveResource:byte[] getContent()",
            "org.apache.catalina.webresources.AbstractArchiveResource:java.io.InputStream doGetInputStream()"
        ]
    },
    "org.apache.catalina.webresources.AbstractSingleArchiveResourceSet:java.util.jar.JarEntry getArchiveEntry(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.webresources.AbstractArchiveResourceSet:org.apache.catalina.WebResource getResource(java.lang.String)"
        ]
    },
    "org.apache.catalina.webresources.AbstractSingleArchiveResourceSet:boolean isMultiRelease()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.webresources.AbstractArchiveResourceSet:org.apache.catalina.WebResource getResource(java.lang.String)"
        ]
    },
    "org.apache.catalina.webresources.JarWarResource:org.apache.catalina.webresources.AbstractArchiveResource$JarInputStreamWrapper getJarInputStreamWrapper()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.webresources.AbstractArchiveResource:byte[] getContent()",
            "org.apache.catalina.webresources.AbstractArchiveResource:java.io.InputStream doGetInputStream()"
        ]
    },
    "org.apache.coyote.http2.Http2Protocol:boolean useCompression(org.apache.coyote.Request,org.apache.coyote.Response)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.StreamProcessor:void prepareHeaders(org.apache.coyote.Request,org.apache.coyote.Response,boolean,org.apache.coyote.http2.Http2Protocol,org.apache.coyote.http2.Stream)"
        ]
    },
    "org.apache.naming.NamingContext:javax.naming.Context createSubcontext(javax.naming.Name)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.naming.NamingContext:javax.naming.Context createSubcontext(java.lang.String)",
            "org.apache.naming.SelectorContext:javax.naming.Context createSubcontext(javax.naming.Name)"
        ]
    },
    "org.apache.naming.java.javaURLContextFactory:javax.naming.Context getInitialContext(java.util.Hashtable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tomcat.util.http.ResponseUtil:void addVaryFieldName(org.apache.tomcat.util.http.MimeHeaders,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.CompressionConfig:boolean useCompression(org.apache.coyote.Request,org.apache.coyote.Response)"
        ]
    },
    "org.apache.tomcat.util.http.ResponseUtil:void addVaryFieldName(jakarta.servlet.http.HttpServletResponse,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.CorsFilter:void addStandardHeaders(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.DefaultServlet:void serveResource(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,boolean,java.lang.String)"
        ]
    },
    "org.apache.tomcat.util.modeler.modules.MbeansDescriptorsIntrospectionSource:java.util.List loadDescriptors(org.apache.tomcat.util.modeler.Registry,java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.modeler.Registry:java.util.List load(java.lang.String,java.lang.Object,java.lang.String)"
        ]
    },
    "org.apache.tomcat.util.net.AbstractEndpoint:void pause()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProtocol:void pause()",
            "org.apache.tomcat.util.net.AprEndpoint:void stopInternal()",
            "org.apache.tomcat.util.net.Nio2Endpoint:void stopInternal()",
            "org.apache.tomcat.util.net.NioEndpoint:void stopInternal()"
        ]
    },
    "org.apache.tomcat.util.net.AbstractEndpoint:void closeServerSocketGraceful()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProtocol:void closeServerSocketGraceful()"
        ]
    },
    "org.apache.tomcat.util.net.NioEndpoint:void unlockAccept()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.AbstractEndpoint:void pause()",
            "org.apache.tomcat.util.net.AbstractEndpoint:void closeServerSocketGraceful()"
        ]
    },
    "org.apache.tomcat.util.net.AbstractJsseEndpoint:void createSSLContext(org.apache.tomcat.util.net.SSLHostConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.AbstractEndpoint:void addSslHostConfig(org.apache.tomcat.util.net.SSLHostConfig,boolean)",
            "org.apache.tomcat.util.net.AbstractJsseEndpoint:void initialiseSsl()"
        ]
    },
    "org.apache.tomcat.util.net.AprEndpoint:void createSSLContext(org.apache.tomcat.util.net.SSLHostConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.AbstractEndpoint:void addSslHostConfig(org.apache.tomcat.util.net.SSLHostConfig,boolean)",
            "org.apache.tomcat.util.net.AprEndpoint:void bind()"
        ]
    },
    "org.apache.catalina.manager.ManagerServlet:void threadDump(java.io.PrintWriter,org.apache.tomcat.util.res.StringManager,java.util.Enumeration)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.ManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.manager.ManagerServlet:void vmInfo(java.io.PrintWriter,org.apache.tomcat.util.res.StringManager,java.util.Enumeration)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.ManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.coyote.AbstractProtocol$ConnectionHandler:void release(org.apache.coyote.Processor)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProtocol$ConnectionHandler:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState process(org.apache.tomcat.util.net.SocketWrapperBase,org.apache.tomcat.util.net.SocketEvent)",
            "org.apache.coyote.AbstractProtocol$ConnectionHandler:void release(org.apache.tomcat.util.net.SocketWrapperBase)"
        ]
    },
    "org.apache.coyote.ajp.AjpProcessor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState dispatchEndRequest()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProcessor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState dispatch(org.apache.tomcat.util.net.SocketEvent)"
        ]
    },
    "org.apache.catalina.startup.PasswdUserDatabase:void init()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.PasswdUserDatabase:void setUserConfig(org.apache.catalina.startup.UserConfig)"
        ]
    },
    "org.apache.tomcat.util.http.parser.Host:int parse(org.apache.tomcat.util.buf.MessageBytes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProcessor:void parseHost(org.apache.tomcat.util.buf.MessageBytes)",
            "org.apache.coyote.http2.Stream:void prepareRequest()"
        ]
    },
    "org.apache.tomcat.util.http.parser.Host:int parse(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.RemoteIpFilter:void doFilter(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.valves.RemoteIpValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.coyote.http2.Stream:void emitHeader(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.tomcat.util.http.parser.EntityTag:java.lang.Boolean compareEntityTag(java.io.StringReader,boolean,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.DefaultServlet:boolean checkIfMatch(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.catalina.WebResource)",
            "org.apache.catalina.servlets.DefaultServlet:boolean checkIfNoneMatch(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.catalina.WebResource)"
        ]
    },
    "org.apache.tomcat.util.http.parser.HttpParser:java.lang.String readTokenOrQuotedString(java.io.Reader,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.parser.Authorization:java.util.Map parseAuthorizationDigest(java.io.StringReader)",
            "org.apache.tomcat.util.http.parser.MediaType:org.apache.tomcat.util.http.parser.MediaType parseMediaType(java.io.StringReader)"
        ]
    },
    "org.apache.tomcat.util.http.parser.AcceptEncoding:java.util.List parse(java.io.StringReader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.CompressionConfig:boolean useCompression(org.apache.coyote.Request,org.apache.coyote.Response)"
        ]
    },
    "org.apache.tomcat.util.http.parser.AcceptLanguage:java.util.List parse(java.io.StringReader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.Request:void parseLocalesHeader(java.lang.String,java.util.TreeMap)"
        ]
    },
    "org.apache.tomcat.util.http.parser.Authorization:java.util.Map parseAuthorizationDigest(java.io.StringReader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.DigestAuthenticator$DigestInfo:boolean parse(org.apache.catalina.connector.Request,java.lang.String)"
        ]
    },
    "org.apache.tomcat.util.http.parser.ContentRange:org.apache.tomcat.util.http.parser.ContentRange parse(java.io.StringReader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.DefaultServlet:org.apache.tomcat.util.http.parser.ContentRange parseContentRange(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.tomcat.util.http.parser.MediaType:org.apache.tomcat.util.http.parser.MediaType parseMediaType(java.io.StringReader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.Response:void setContentType(java.lang.String)",
            "org.apache.tomcat.util.http.parser.MediaTypeCache:java.lang.String[] parse(java.lang.String)"
        ]
    },
    "org.apache.tomcat.util.http.parser.Ranges:org.apache.tomcat.util.http.parser.Ranges parse(java.io.StringReader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.DefaultServlet:org.apache.tomcat.util.http.parser.Ranges parseRange(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.catalina.WebResource)"
        ]
    },
    "org.apache.tomcat.util.http.parser.TokenList:boolean parseTokenList(java.io.Reader,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.ResponseUtil:void addVaryFieldName(org.apache.tomcat.util.http.ResponseUtil$Adapter,java.lang.String)",
            "org.apache.tomcat.util.http.parser.TokenList:boolean parseTokenList(java.util.Enumeration,java.util.Collection)"
        ]
    },
    "org.apache.tomcat.util.http.parser.HttpParser:long readLong(java.io.Reader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.parser.ContentRange:org.apache.tomcat.util.http.parser.ContentRange parse(java.io.StringReader)",
            "org.apache.tomcat.util.http.parser.Ranges:org.apache.tomcat.util.http.parser.Ranges parse(java.io.StringReader)"
        ]
    },
    "org.apache.catalina.servlets.DefaultServlet:java.io.IOException copyRange(java.io.Reader,java.io.PrintWriter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.DefaultServlet:java.lang.String getReadme(org.apache.catalina.WebResource,java.lang.String)",
            "org.apache.catalina.servlets.DefaultServlet:void copy(java.io.InputStream,java.io.PrintWriter,java.lang.String)"
        ]
    },
    "org.apache.catalina.util.IOTools:void flow(java.io.Reader,java.io.Writer,char[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.IOTools:void flow(java.io.Reader,java.io.Writer)"
        ]
    },
    "org.apache.tomcat.util.json.JavaCharStream:char ReadByte()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.json.JavaCharStream:char readChar()"
        ]
    },
    "org.apache.juli.AsyncFileHandler$LoggerThread:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.AsyncContextImpl$RunnableWrapper:void run()",
            "org.apache.catalina.core.AsyncContextImpl:void doInternalDispatch()",
            "org.apache.catalina.core.StandardThreadExecutor:void execute(java.lang.Runnable)",
            "org.apache.catalina.servlets.CGIServlet$CGIRunner:void run()",
            "org.apache.coyote.AbstractProcessor:void execute(java.lang.Runnable)",
            "org.apache.coyote.AsyncStateMachine:void asyncRun(java.lang.Runnable)",
            "org.apache.juli.AsyncFileHandler:void <clinit>()",
            "org.apache.tomcat.util.net.AbstractEndpoint:void startAcceptorThread()",
            "org.apache.tomcat.util.net.AprEndpoint$Poller:void start()",
            "org.apache.tomcat.util.net.AprEndpoint$Sendfile:void start()",
            "org.apache.tomcat.util.net.Nio2Endpoint:void stopInternal()",
            "org.apache.tomcat.util.net.NioEndpoint:void startInternal()",
            "org.apache.tomcat.util.net.SecureNio2Channel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()",
            "org.apache.tomcat.util.net.SecureNioChannel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()",
            "org.apache.tomcat.util.net.SocketWrapperBase:void execute(java.lang.Runnable)",
            "org.apache.tomcat.util.threads.InlineExecutorService:void execute(java.lang.Runnable)",
            "org.apache.tomcat.util.threads.ScheduledThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.tomcat.util.threads.TaskThread$WrappingRunnable:void run()",
            "org.apache.tomcat.util.threads.ThreadPoolExecutor:void execute(java.lang.Runnable,long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.apache.juli.ClassLoaderLogManager$Cleaner:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.AsyncContextImpl$RunnableWrapper:void run()",
            "org.apache.catalina.core.AsyncContextImpl:void doInternalDispatch()",
            "org.apache.catalina.core.StandardThreadExecutor:void execute(java.lang.Runnable)",
            "org.apache.catalina.servlets.CGIServlet$CGIRunner:void run()",
            "org.apache.coyote.AbstractProcessor:void execute(java.lang.Runnable)",
            "org.apache.coyote.AsyncStateMachine:void asyncRun(java.lang.Runnable)",
            "org.apache.tomcat.util.net.AbstractEndpoint:void startAcceptorThread()",
            "org.apache.tomcat.util.net.AprEndpoint$Poller:void start()",
            "org.apache.tomcat.util.net.AprEndpoint$Sendfile:void start()",
            "org.apache.tomcat.util.net.Nio2Endpoint:void stopInternal()",
            "org.apache.tomcat.util.net.NioEndpoint:void startInternal()",
            "org.apache.tomcat.util.net.SecureNio2Channel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()",
            "org.apache.tomcat.util.net.SecureNioChannel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()",
            "org.apache.tomcat.util.net.SocketWrapperBase:void execute(java.lang.Runnable)",
            "org.apache.tomcat.util.threads.InlineExecutorService:void execute(java.lang.Runnable)",
            "org.apache.tomcat.util.threads.ScheduledThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.tomcat.util.threads.TaskThread$WrappingRunnable:void run()",
            "org.apache.tomcat.util.threads.ThreadPoolExecutor:void execute(java.lang.Runnable,long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.apache.naming.SelectorContext:void rename(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.naming.SelectorContext:void rename(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.naming.NamingContextBindingsEnumeration:java.lang.Object next()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.ManagerServlet:void printResources(java.io.PrintWriter,java.lang.String,javax.naming.Context,java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.mbeans.GlobalResourcesLifecycleListener:void createMBeans(java.lang.String,javax.naming.Context)",
            "org.apache.catalina.realm.JNDIRealm:org.apache.catalina.realm.JNDIRealm$User getUserBySearch(org.apache.catalina.realm.JNDIRealm$JNDIConnection,java.lang.String,java.lang.String[])",
            "org.apache.catalina.realm.JNDIRealm:java.util.List getRoles(org.apache.catalina.realm.JNDIRealm$JNDIConnection,org.apache.catalina.realm.JNDIRealm$User)",
            "org.apache.catalina.realm.JNDIRealm:java.util.ArrayList addAttributeValues(java.lang.String,javax.naming.directory.Attributes,java.util.ArrayList)"
        ]
    },
    "org.apache.naming.NamingContextBindingsEnumeration:java.lang.Object nextElement()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServlet:void doTrace(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.authenticator.FormAuthenticator:void saveRequest(org.apache.catalina.connector.Request,org.apache.catalina.Session)",
            "org.apache.catalina.connector.Request:java.util.Map getParameterMap()",
            "org.apache.catalina.connector.Request:void parseLocales()",
            "org.apache.catalina.connector.Response:java.util.Collection getHeaders(java.lang.String)",
            "org.apache.catalina.core.ApplicationHttpRequest$AttributeNamesEnumerator:java.lang.String findNext()",
            "org.apache.catalina.core.ApplicationHttpRequest:void mergeParameters()",
            "org.apache.catalina.core.ApplicationPushBuilder:void <init>(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.core.ApplicationRequest:void setRequest(jakarta.servlet.ServletRequest)",
            "org.apache.catalina.filters.ExpiresFilter:void init(jakarta.servlet.FilterConfig)",
            "org.apache.catalina.filters.FilterBase:void init(jakarta.servlet.FilterConfig)",
            "org.apache.catalina.filters.RemoteIpFilter$XForwardedRequest:void <init>(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.filters.RemoteIpFilter:void doFilter(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.filters.RequestDumperFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.loader.JdbcLeakPrevention:java.util.List clearJdbcDriverRegistrations()",
            "org.apache.catalina.loader.WebappClassLoaderBase$CombinedEnumeration:java.net.URL nextElement()",
            "org.apache.catalina.loader.WebappClassLoaderBase:java.util.Enumeration findResources(java.lang.String)",
            "org.apache.catalina.manager.StatusManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.StatusTransformer:void writeConnectorState(java.io.PrintWriter,javax.management.ObjectName,java.lang.String,javax.management.MBeanServer,java.util.Vector,java.util.Vector,int,java.lang.Object[])",
            "org.apache.catalina.manager.util.SessionUtils:java.util.Locale guessLocaleFromSession(jakarta.servlet.http.HttpSession)",
            "org.apache.catalina.manager.util.SessionUtils:java.lang.Object guessUserFromSession(org.apache.catalina.Session)",
            "org.apache.catalina.servlets.CGIServlet$CGIEnvironment:boolean setCGIEnvironment(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.servlets.CGIServlet$CGIRunner:java.lang.String[] hashToStringArray(java.util.Hashtable)",
            "org.apache.catalina.servlets.CGIServlet:void init(jakarta.servlet.ServletConfig)",
            "org.apache.catalina.servlets.CGIServlet:void printServletEnvironment(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.servlets.DefaultServlet:org.apache.catalina.servlets.DefaultServlet$PrecompressedResource getBestPrecompressedResource(jakarta.servlet.http.HttpServletRequest,java.util.List)",
            "org.apache.catalina.servlets.WebdavServlet$LockInfo:java.lang.String toString()",
            "org.apache.catalina.servlets.WebdavServlet$LockInfo:void toXML(org.apache.catalina.util.XMLWriter)",
            "org.apache.catalina.servlets.WebdavServlet:void doPropfind(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.WebdavServlet:void doLock(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.WebdavServlet:void doUnlock(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.WebdavServlet:boolean isLocked(java.lang.String,java.lang.String)",
            "org.apache.catalina.servlets.WebdavServlet:boolean copyResource(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.WebdavServlet:void sendReport(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,java.util.Hashtable)",
            "org.apache.catalina.servlets.WebdavServlet:void generatePropFindResponse(org.apache.catalina.util.XMLWriter,java.lang.String,java.lang.String,int,java.util.Vector,boolean,boolean,long,long,long,java.lang.String,java.lang.String)",
            "org.apache.catalina.servlets.WebdavServlet:boolean generateLockDiscovery(java.lang.String,org.apache.catalina.util.XMLWriter)",
            "org.apache.catalina.session.ManagerBase:java.util.HashMap getSession(java.lang.String)",
            "org.apache.catalina.startup.CatalinaProperties:void loadProperties()",
            "org.apache.catalina.startup.ExpandWar:java.lang.String expand(org.apache.catalina.Host,java.net.URL,java.lang.String)",
            "org.apache.catalina.startup.ExpandWar:void validate(org.apache.catalina.Host,java.net.URL,java.lang.String)",
            "org.apache.catalina.startup.UserConfig:void deploy()",
            "org.apache.catalina.startup.WebappServiceLoader:java.util.List load(java.lang.Class)",
            "org.apache.catalina.valves.AbstractAccessLogValve$HeaderElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.CrawlerSessionManagerValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.RemoteIpValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.webresources.AbstractSingleArchiveResourceSet:java.util.Map getArchiveEntries(boolean)",
            "org.apache.catalina.webresources.JarContents:void <init>(java.util.jar.JarFile)",
            "org.apache.coyote.CompressionConfig:boolean useCompression(org.apache.coyote.Request,org.apache.coyote.Response)",
            "org.apache.coyote.http2.Http2Protocol:boolean accept(org.apache.coyote.Request)",
            "org.apache.naming.AbstractRef:java.lang.String toString()",
            "org.apache.naming.NamingContext:void <init>(java.util.Hashtable,java.lang.String,java.util.HashMap)",
            "org.apache.naming.factory.BeanFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.naming.factory.MailSessionFactory:jakarta.mail.Session lambda$getObjectInstance$0(javax.naming.Reference)",
            "org.apache.naming.factory.SendMailFactory:jakarta.mail.internet.MimePartDataSource lambda$getObjectInstance$0(javax.naming.Reference)",
            "org.apache.naming.factory.webservices.ServiceRefFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.tomcat.util.http.MimeHeaders:java.lang.String toString()",
            "org.apache.tomcat.util.http.ResponseUtil$HeaderAdapter:java.util.Collection getHeaders(java.lang.String)",
            "org.apache.tomcat.util.http.parser.TokenList:boolean parseTokenList(java.util.Enumeration,java.util.Collection)",
            "org.apache.tomcat.util.http.parser.Upgrade:java.util.List parse(java.util.Enumeration)",
            "org.apache.tomcat.util.modeler.modules.MbeansDescriptorsIntrospectionSource:org.apache.tomcat.util.modeler.ManagedBean createManagedBean(org.apache.tomcat.util.modeler.Registry,java.lang.String,java.lang.Class,java.lang.String)",
            "org.apache.tomcat.util.net.AbstractEndpoint:java.net.InetSocketAddress getUnlockAddress(java.net.InetSocketAddress)",
            "org.apache.tomcat.util.net.SSLUtilBase:javax.net.ssl.KeyManager[] getKeyManagers()",
            "org.apache.tomcat.util.net.SSLUtilBase:void checkTrustStoreEntries(java.security.KeyStore)",
            "org.apache.tomcat.util.res.StringManager:org.apache.tomcat.util.res.StringManager getManager(java.lang.String,java.util.Enumeration)",
            "org.apache.tomcat.util.scan.JarFileUrlJar:void nextEntry()"
        ]
    },
    "org.apache.catalina.core.NamingContextListener:void propertyChange(java.beans.PropertyChangeEvent)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.mbeans.GlobalResourcesLifecycleListener:void lifecycleEvent(org.apache.catalina.LifecycleEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void fireLifecycleEvent(java.lang.String,java.lang.Object)"
        ]
    },
    "org.apache.catalina.authenticator.SingleSignOn:boolean reauthenticate(java.lang.String,org.apache.catalina.Realm,org.apache.catalina.connector.Request)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.AuthenticatorBase:boolean reauthenticateFromSSO(java.lang.String,org.apache.catalina.connector.Request)"
        ]
    },
    "org.apache.catalina.realm.CombinedRealm:java.security.Principal authenticate(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.AuthenticatorBase:java.security.Principal doLogin(org.apache.catalina.connector.Request,java.lang.String,java.lang.String)",
            "org.apache.catalina.authenticator.BasicAuthenticator:boolean doAuthenticate(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.authenticator.FormAuthenticator:boolean doAuthenticate(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.authenticator.SingleSignOn:boolean reauthenticate(java.lang.String,org.apache.catalina.Realm,org.apache.catalina.connector.Request)",
            "org.apache.catalina.authenticator.jaspic.CallbackHandlerImpl:void handle(javax.security.auth.callback.Callback[])",
            "org.apache.catalina.realm.CombinedRealm:java.security.Principal authenticate(java.lang.String,java.lang.String)",
            "org.apache.catalina.realm.LockOutRealm:java.security.Principal authenticate(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.catalina.realm.RealmBase:java.security.Principal authenticate(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.AuthenticatorBase:java.security.Principal doLogin(org.apache.catalina.connector.Request,java.lang.String,java.lang.String)",
            "org.apache.catalina.authenticator.BasicAuthenticator:boolean doAuthenticate(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.authenticator.FormAuthenticator:boolean doAuthenticate(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.authenticator.SingleSignOn:boolean reauthenticate(java.lang.String,org.apache.catalina.Realm,org.apache.catalina.connector.Request)",
            "org.apache.catalina.authenticator.jaspic.CallbackHandlerImpl:void handle(javax.security.auth.callback.Callback[])",
            "org.apache.catalina.realm.CombinedRealm:java.security.Principal authenticate(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.catalina.realm.RealmBase:java.lang.String getDigest(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.realm.RealmBase:java.security.Principal authenticate(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.catalina.realm.RealmBase:java.security.Principal authenticate(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.AuthenticatorBase:boolean checkForCachedAuthentication(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse,boolean)",
            "org.apache.catalina.connector.CoyoteAdapter:void doConnectorAuthenticationAuthorization(org.apache.coyote.Request,org.apache.catalina.connector.Request)",
            "org.apache.catalina.realm.CombinedRealm:java.security.Principal authenticate(java.lang.String)"
        ]
    },
    "org.apache.catalina.realm.RealmBase:java.security.Principal authenticate(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.DigestAuthenticator$DigestInfo:java.security.Principal authenticate(org.apache.catalina.Realm)",
            "org.apache.catalina.realm.CombinedRealm:java.security.Principal authenticate(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.catalina.realm.JAASMemoryLoginModule:boolean login()"
        ]
    },
    "org.apache.catalina.realm.RealmBase:java.security.Principal getPrincipal(java.security.cert.X509Certificate)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.realm.RealmBase:java.security.Principal authenticate(java.security.cert.X509Certificate[])"
        ]
    },
    "org.apache.catalina.realm.RealmBase:java.security.Principal getPrincipal(org.ietf.jgss.GSSName,org.ietf.jgss.GSSCredential)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.realm.RealmBase:java.security.Principal authenticate(org.ietf.jgss.GSSContext,boolean)",
            "org.apache.catalina.realm.RealmBase:java.security.Principal authenticate(org.ietf.jgss.GSSName,org.ietf.jgss.GSSCredential)"
        ]
    },
    "org.apache.catalina.realm.CombinedRealm:boolean hasRole(org.apache.catalina.Wrapper,java.security.Principal,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.Request:boolean isUserInRole(java.lang.String)",
            "org.apache.catalina.realm.CombinedRealm:boolean hasRole(org.apache.catalina.Wrapper,java.security.Principal,java.lang.String)",
            "org.apache.catalina.realm.RealmBase:boolean hasResourcePermission(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,org.apache.tomcat.util.descriptor.web.SecurityConstraint[],org.apache.catalina.Context)"
        ]
    },
    "org.apache.catalina.realm.RealmBase:boolean hasResourcePermission(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,org.apache.tomcat.util.descriptor.web.SecurityConstraint[],org.apache.catalina.Context)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.AuthenticatorBase:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)"
        ]
    },
    "org.apache.catalina.realm.CombinedRealm:void backgroundProcess()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ContainerBase:void backgroundProcess()",
            "org.apache.catalina.realm.CombinedRealm:void backgroundProcess()"
        ]
    },
    "org.apache.catalina.session.DataSourceStore:java.lang.String[] keys(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.session.DataSourceStore:java.lang.String[] expiredKeys()",
            "org.apache.catalina.session.DataSourceStore:java.lang.String[] keys()"
        ]
    },
    "org.apache.catalina.session.DataSourceStore:int getSize()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.session.PersistentManagerBase:int getActiveSessionsFull()"
        ]
    },
    "org.apache.catalina.session.DataSourceStore:org.apache.catalina.Session load(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.session.PersistentManagerBase$PrivilegedStoreLoad:org.apache.catalina.Session run()",
            "org.apache.catalina.session.PersistentManagerBase:org.apache.catalina.Session loadSessionFromStore(java.lang.String)",
            "org.apache.catalina.session.StoreBase:void processExpires()",
            "org.apache.catalina.valves.PersistentValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)"
        ]
    },
    "org.apache.catalina.session.DataSourceStore:void remove(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.session.PersistentManagerBase$PrivilegedStoreRemove:java.lang.Void run()",
            "org.apache.catalina.session.PersistentManagerBase:void removeSession(java.lang.String)",
            "org.apache.catalina.session.StoreBase:void processExpires()",
            "org.apache.catalina.valves.PersistentValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)"
        ]
    },
    "org.apache.catalina.session.DataSourceStore:void clear()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.session.PersistentManagerBase$PrivilegedStoreClear:java.lang.Void run()",
            "org.apache.catalina.session.PersistentManagerBase:void clearStore()"
        ]
    },
    "org.apache.catalina.session.DataSourceStore:void save(org.apache.catalina.Session)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.session.PersistentManagerBase$PrivilegedStoreSave:java.lang.Void run()",
            "org.apache.catalina.session.PersistentManagerBase:void writeSession(org.apache.catalina.Session)",
            "org.apache.catalina.valves.PersistentValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.FileUploadBase:org.apache.tomcat.util.http.fileupload.FileItemIterator getItemIterator(org.apache.tomcat.util.http.fileupload.RequestContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.FileUploadBase:java.util.List parseRequest(org.apache.tomcat.util.http.fileupload.RequestContext)",
            "org.apache.tomcat.util.http.fileupload.servlet.ServletFileUpload:org.apache.tomcat.util.http.fileupload.FileItemIterator getItemIterator(jakarta.servlet.http.HttpServletRequest)"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.impl.FileItemIteratorImpl:org.apache.tomcat.util.http.fileupload.FileItemStream next()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.FileUploadBase:java.util.List parseRequest(org.apache.tomcat.util.http.fileupload.RequestContext)",
            "org.apache.tomcat.util.http.fileupload.impl.FileItemIteratorImpl:java.util.List getFileItems()"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.impl.FileItemIteratorImpl:java.util.List getFileItems()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.AsyncContextImpl$RunnableWrapper:void run()",
            "org.apache.catalina.core.AsyncContextImpl:void doInternalDispatch()",
            "org.apache.catalina.core.StandardThreadExecutor:void execute(java.lang.Runnable)",
            "org.apache.coyote.AbstractProcessor:void execute(java.lang.Runnable)",
            "org.apache.coyote.AsyncStateMachine:void asyncRun(java.lang.Runnable)",
            "org.apache.tomcat.util.net.Nio2Endpoint:void stopInternal()",
            "org.apache.tomcat.util.net.SecureNio2Channel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()",
            "org.apache.tomcat.util.net.SecureNioChannel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()",
            "org.apache.tomcat.util.net.SocketWrapperBase:void execute(java.lang.Runnable)",
            "org.apache.tomcat.util.threads.InlineExecutorService:void execute(java.lang.Runnable)",
            "org.apache.tomcat.util.threads.ScheduledThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.tomcat.util.threads.TaskThread$WrappingRunnable:void run()",
            "org.apache.tomcat.util.threads.ThreadPoolExecutor:void execute(java.lang.Runnable,long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.apache.catalina.util.LifecycleMBeanBase:void initInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.Connector:void initInternal()",
            "org.apache.catalina.core.ContainerBase:void initInternal()",
            "org.apache.catalina.core.StandardServer:void initInternal()",
            "org.apache.catalina.core.StandardService:void initInternal()",
            "org.apache.catalina.core.StandardThreadExecutor:void initInternal()",
            "org.apache.catalina.deploy.NamingResourcesImpl:void initInternal()",
            "org.apache.catalina.realm.RealmBase:void initInternal()",
            "org.apache.catalina.session.ManagerBase:void initInternal()",
            "org.apache.catalina.util.LifecycleBase:void init()",
            "org.apache.catalina.valves.ValveBase:void initInternal()",
            "org.apache.catalina.webresources.StandardRoot:void initInternal()"
        ]
    },
    "org.apache.catalina.core.AsyncContextImpl:void fireOnComplete()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.AsyncContextImpl:void doInternalDispatch()",
            "org.apache.coyote.AsyncStateMachine:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState asyncPostProcess()"
        ]
    },
    "org.apache.catalina.core.ApplicationContext:void removeAttribute(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationContext:void setAttribute(java.lang.String,java.lang.Object)",
            "org.apache.catalina.core.ApplicationContext:void clearAttributes()",
            "org.apache.catalina.core.ApplicationContextFacade:void removeAttribute(java.lang.String)",
            "org.apache.catalina.core.StandardContext$NoPluggabilityServletContext:void removeAttribute(java.lang.String)",
            "org.apache.catalina.loader.WebappLoader:void stopInternal()"
        ]
    },
    "org.apache.catalina.core.ApplicationContext:void setAttribute(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationContextFacade:void setAttribute(java.lang.String,java.lang.Object)",
            "org.apache.catalina.core.StandardContext$NoPluggabilityServletContext:void setAttribute(java.lang.String,java.lang.Object)",
            "org.apache.catalina.core.StandardContext:void setAltDDName(java.lang.String)",
            "org.apache.catalina.core.StandardContext:jakarta.servlet.ServletContext getServletContext()",
            "org.apache.catalina.core.StandardContext:void startInternal()",
            "org.apache.catalina.core.StandardContext:void postWorkDirectory()",
            "org.apache.catalina.filters.CsrfPreventionFilter:void init(jakarta.servlet.FilterConfig)",
            "org.apache.catalina.filters.RestCsrfPreventionFilter:void init(jakarta.servlet.FilterConfig)",
            "org.apache.catalina.loader.WebappLoader:void setClassPath()",
            "org.apache.tomcat.util.descriptor.web.WebXml:java.util.Set orderWebFragments(java.util.Map,jakarta.servlet.ServletContext)"
        ]
    },
    "org.apache.catalina.core.StandardContext:void addApplicationListener(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.ContextConfig:void configureContext(org.apache.tomcat.util.descriptor.web.WebXml)"
        ]
    },
    "org.apache.catalina.core.StandardContext:void addApplicationParameter(org.apache.tomcat.util.descriptor.web.ApplicationParameter)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.core.StandardContext:void addErrorPage(org.apache.tomcat.util.descriptor.web.ErrorPage)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.ContextConfig:void configureContext(org.apache.tomcat.util.descriptor.web.WebXml)"
        ]
    },
    "org.apache.catalina.core.StandardContext:void addFilterDef(org.apache.tomcat.util.descriptor.web.FilterDef)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationContext:jakarta.servlet.FilterRegistration$Dynamic addFilter(java.lang.String,java.lang.String,jakarta.servlet.Filter)",
            "org.apache.catalina.startup.ContextConfig:void configureContext(org.apache.tomcat.util.descriptor.web.WebXml)"
        ]
    },
    "org.apache.catalina.core.StandardContext:void addFilterMap(org.apache.tomcat.util.descriptor.web.FilterMap)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationFilterRegistration:void addMappingForServletNames(java.util.EnumSet,boolean,java.lang.String[])",
            "org.apache.catalina.core.ApplicationFilterRegistration:void addMappingForUrlPatterns(java.util.EnumSet,boolean,java.lang.String[])",
            "org.apache.catalina.startup.ContextConfig:void configureContext(org.apache.tomcat.util.descriptor.web.WebXml)"
        ]
    },
    "org.apache.catalina.core.StandardContext:void addFilterMapBefore(org.apache.tomcat.util.descriptor.web.FilterMap)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationFilterRegistration:void addMappingForServletNames(java.util.EnumSet,boolean,java.lang.String[])",
            "org.apache.catalina.core.ApplicationFilterRegistration:void addMappingForUrlPatterns(java.util.EnumSet,boolean,java.lang.String[])"
        ]
    },
    "org.apache.catalina.core.StandardContext:void addMessageDestination(org.apache.tomcat.util.descriptor.web.MessageDestination)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.core.StandardContext:void addMimeMapping(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.ContextConfig:void configureContext(org.apache.tomcat.util.descriptor.web.WebXml)",
            "org.apache.catalina.startup.Tomcat:void addDefaultMimeTypeMappings(org.apache.catalina.Context)"
        ]
    },
    "org.apache.catalina.core.StandardContext:void addParameter(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.ContextConfig:void configureContext(org.apache.tomcat.util.descriptor.web.WebXml)"
        ]
    },
    "org.apache.catalina.core.StandardContext:void addRoleMapping(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.core.StandardContext:void addSecurityRole(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationContext:void declareRoles(java.lang.String[])",
            "org.apache.catalina.startup.ContextConfig:void validateSecurityRoles()",
            "org.apache.catalina.startup.ContextConfig:void configureContext(org.apache.tomcat.util.descriptor.web.WebXml)",
            "org.apache.catalina.startup.WebAnnotationSet:void loadClassAnnotation(org.apache.catalina.Context,java.lang.Class)"
        ]
    },
    "org.apache.catalina.core.StandardContext:void addServletMappingDecoded(java.lang.String,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.Context:void addServletMappingDecoded(java.lang.String,java.lang.String)",
            "org.apache.catalina.startup.ContextConfig:void configureContext(org.apache.tomcat.util.descriptor.web.WebXml)"
        ]
    },
    "org.apache.catalina.core.StandardContext:void addWatchedResource(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.core.StandardContext:void addWelcomeFile(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.ContextConfig:void configureContext(org.apache.tomcat.util.descriptor.web.WebXml)",
            "org.apache.catalina.startup.Tomcat:void initWebappDefaults(org.apache.catalina.Context)"
        ]
    },
    "org.apache.catalina.core.StandardContext:void addWrapperLifecycle(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.core.StandardContext:void addWrapperListener(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.core.StandardContext:void removeApplicationListener(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.core.StandardContext:void removeApplicationParameter(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.core.StandardContext:void removeConstraint(org.apache.tomcat.util.descriptor.web.SecurityConstraint)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.StandardContext:java.util.Set addServletSecurity(jakarta.servlet.ServletRegistration$Dynamic,jakarta.servlet.ServletSecurityElement)",
            "org.apache.catalina.startup.ContextConfig:void configureStop()"
        ]
    },
    "org.apache.catalina.core.StandardContext:void removeErrorPage(org.apache.tomcat.util.descriptor.web.ErrorPage)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.ContextConfig:void configureStop()"
        ]
    },
    "org.apache.catalina.core.StandardContext:void removeFilterDef(org.apache.tomcat.util.descriptor.web.FilterDef)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.ContextConfig:void configureStop()"
        ]
    },
    "org.apache.catalina.core.StandardContext:void removeFilterMap(org.apache.tomcat.util.descriptor.web.FilterMap)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.ContextConfig:void configureStop()"
        ]
    },
    "org.apache.catalina.core.StandardContext:void removeMessageDestination(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.core.StandardContext:void removeMimeMapping(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.ContextConfig:void configureStop()"
        ]
    },
    "org.apache.catalina.core.StandardContext:void removeParameter(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.ContextConfig:void configureStop()"
        ]
    },
    "org.apache.catalina.core.StandardContext:void removeRoleMapping(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.core.StandardContext:void removeSecurityRole(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.ContextConfig:void configureStop()"
        ]
    },
    "org.apache.catalina.core.StandardContext:void removeServletMapping(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationServletRegistration:java.util.Set addMapping(java.lang.String[])",
            "org.apache.catalina.startup.ContextConfig:void configureStop()"
        ]
    },
    "org.apache.catalina.core.StandardContext:void removeWatchedResource(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.core.StandardContext:void removeWelcomeFile(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.ContextConfig:void configureStop()"
        ]
    },
    "org.apache.catalina.core.StandardContext:void removeWrapperLifecycle(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.ContextConfig:void configureStop()"
        ]
    },
    "org.apache.catalina.core.StandardContext:void removeWrapperListener(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.ContextConfig:void configureStop()"
        ]
    },
    "org.apache.catalina.core.StandardContext:boolean listenerStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.StandardContext:void startInternal()"
        ]
    },
    "org.apache.catalina.core.StandardContext:boolean listenerStop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.StandardContext:void stopInternal()"
        ]
    },
    "org.apache.catalina.core.StandardContext:void addPostConstructMethod(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.ContextConfig:void configureContext(org.apache.tomcat.util.descriptor.web.WebXml)"
        ]
    },
    "org.apache.catalina.core.StandardContext:void removePostConstructMethod(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.core.StandardContext:void addPreDestroyMethod(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.ContextConfig:void configureContext(org.apache.tomcat.util.descriptor.web.WebXml)"
        ]
    },
    "org.apache.catalina.core.StandardContext:void removePreDestroyMethod(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.core.StandardHost:void addAlias(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.host.HostManagerServlet:void add(java.io.PrintWriter,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean,boolean,org.apache.tomcat.util.res.StringManager)"
        ]
    },
    "org.apache.catalina.core.StandardHost:void removeAlias(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.core.StandardWrapper:void addInitParameter(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationContext:jakarta.servlet.ServletRegistration$Dynamic addServlet(java.lang.String,java.lang.String,jakarta.servlet.Servlet,java.util.Map)",
            "org.apache.catalina.core.ApplicationServletRegistration:boolean setInitParameter(java.lang.String,java.lang.String)",
            "org.apache.catalina.startup.ContextConfig:void configureContext(org.apache.tomcat.util.descriptor.web.WebXml)",
            "org.apache.catalina.startup.Tomcat:void initWebappDefaults(org.apache.catalina.Context)"
        ]
    },
    "org.apache.catalina.core.StandardWrapper:void addMapping(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.StandardContext:void addServletMappingDecoded(java.lang.String,java.lang.String,boolean)"
        ]
    },
    "org.apache.catalina.core.StandardWrapper:void addSecurityReference(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.ContextConfig:void configureContext(org.apache.tomcat.util.descriptor.web.WebXml)"
        ]
    },
    "org.apache.catalina.core.StandardWrapper:void removeInitParameter(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.core.StandardWrapper:void removeMapping(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.StandardContext:void addServletMappingDecoded(java.lang.String,java.lang.String,boolean)",
            "org.apache.catalina.core.StandardContext:void removeServletMapping(java.lang.String)"
        ]
    },
    "org.apache.catalina.core.StandardWrapper:void removeSecurityReference(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.core.StandardWrapper:void unload()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.StandardWrapper:void stopInternal()",
            "org.apache.catalina.core.StandardWrapperValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)"
        ]
    },
    "org.apache.catalina.session.StandardSession:void tellNew()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.session.PersistentManagerBase:void reactivateLoadedSession(java.lang.String,org.apache.catalina.Session)",
            "org.apache.catalina.session.StandardSession:void setId(java.lang.String,boolean)"
        ]
    },
    "org.apache.catalina.session.StandardSession:void tellChangedSessionId(java.lang.String,java.lang.String,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.session.ManagerBase:void changeSessionId(org.apache.catalina.Session,java.lang.String,boolean,boolean)"
        ]
    },
    "org.apache.catalina.session.StandardSession:void expire(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.session.StandardManager:void doUnload()",
            "org.apache.catalina.session.StandardSession:boolean isValid()",
            "org.apache.catalina.session.StandardSession:void expire()"
        ]
    },
    "org.apache.catalina.session.StandardSession:void setAttribute(java.lang.String,java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.session.StandardSession:void setAttribute(java.lang.String,java.lang.Object)"
        ]
    },
    "org.apache.catalina.session.StandardSession:void removeAttributeInternal(java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.session.StandardSession:void expire(boolean)",
            "org.apache.catalina.session.StandardSession:void removeAttribute(java.lang.String,boolean)",
            "org.apache.catalina.session.StandardSession:void doWriteObject(java.io.ObjectOutputStream)"
        ]
    },
    "org.apache.catalina.manager.JMXProxyServlet:void listBeans(java.io.PrintWriter,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.JMXProxyServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.realm.JNDIRealm:org.apache.catalina.realm.JNDIRealm$User getUserByPattern(org.apache.catalina.realm.JNDIRealm$JNDIConnection,java.lang.String,java.lang.String,java.lang.String[],int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.realm.JNDIRealm:org.apache.catalina.realm.JNDIRealm$User getUser(org.apache.catalina.realm.JNDIRealm$JNDIConnection,java.lang.String,java.lang.String,int)"
        ]
    },
    "org.apache.catalina.realm.JNDIRealm:org.apache.catalina.realm.JNDIRealm$User getUser(org.apache.catalina.realm.JNDIRealm$JNDIConnection,java.lang.String,java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.realm.JNDIRealm:java.security.Principal authenticate(org.apache.catalina.realm.JNDIRealm$JNDIConnection,java.lang.String,java.lang.String)",
            "org.apache.catalina.realm.JNDIRealm:org.apache.catalina.realm.JNDIRealm$User getUser(org.apache.catalina.realm.JNDIRealm$JNDIConnection,java.lang.String)",
            "org.apache.catalina.realm.JNDIRealm:org.apache.catalina.realm.JNDIRealm$User getUser(org.apache.catalina.realm.JNDIRealm$JNDIConnection,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.catalina.realm.JNDIRealm:java.security.Principal authenticate(org.apache.catalina.realm.JNDIRealm$JNDIConnection,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.realm.JNDIRealm:java.security.Principal authenticate(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.catalina.realm.JNDIRealm:java.security.Principal getPrincipal(org.apache.catalina.realm.JNDIRealm$JNDIConnection,java.lang.String,org.ietf.jgss.GSSCredential)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.realm.JNDIRealm:java.security.Principal getPrincipal(java.lang.String,org.ietf.jgss.GSSCredential)"
        ]
    },
    "org.apache.catalina.loader.WebappLoader:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.Connector:java.lang.String createObjectNameKeyProperties(java.lang.String)",
            "org.apache.catalina.connector.Request$2:java.lang.Object get(org.apache.catalina.connector.Request,java.lang.String)",
            "org.apache.catalina.connector.Request:void setAttribute(java.lang.String,java.lang.Object)",
            "org.apache.catalina.core.ApplicationFilterFactory:org.apache.catalina.core.ApplicationFilterChain createFilterChain(jakarta.servlet.ServletRequest,org.apache.catalina.Wrapper,jakarta.servlet.Servlet)",
            "org.apache.catalina.core.ApplicationHttpRequest:java.lang.Object getAttribute(java.lang.String)",
            "org.apache.catalina.core.DefaultInstanceManager:void loadProperties(java.util.Set,java.lang.String,java.lang.String,org.apache.juli.logging.Log)",
            "org.apache.catalina.core.NamingContextListener:void addResourceLink(org.apache.tomcat.util.descriptor.web.ContextResourceLink)",
            "org.apache.catalina.loader.WebappClassLoaderBase:void checkThreadLocalMapForLeaks(java.lang.Object,java.lang.reflect.Field)",
            "org.apache.catalina.manager.JMXProxyServlet:void getAttribute(java.io.PrintWriter,java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.catalina.manager.JMXProxyServlet:void output(java.lang.String,java.io.PrintWriter,java.lang.Object)",
            "org.apache.catalina.manager.JspHelper:java.lang.String escapeXml(java.lang.Object)",
            "org.apache.catalina.mapper.MapperListener:void containerEvent(org.apache.catalina.ContainerEvent)",
            "org.apache.catalina.mbeans.MBeanDumper:java.lang.String valueToString(java.lang.Object)",
            "org.apache.catalina.realm.JNDIRealm:java.lang.String getAttributeValue(java.lang.String,javax.naming.directory.Attributes)",
            "org.apache.catalina.servlets.CGIServlet$CGIRunner:java.lang.String[] hashToStringArray(java.util.Hashtable)",
            "org.apache.catalina.session.ManagerBase:java.lang.String getSessionAttribute(java.lang.String,java.lang.String)",
            "org.apache.catalina.users.MemoryUserDatabaseFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.catalina.util.LifecycleBase:void init()",
            "org.apache.catalina.util.LifecycleBase:void start()",
            "org.apache.catalina.util.LifecycleBase:void stop()",
            "org.apache.catalina.util.LifecycleBase:void destroy()",
            "org.apache.catalina.util.LifecycleBase:void invalidTransition(java.lang.String)",
            "org.apache.catalina.util.ToStringUtil:java.lang.String containedToString(java.lang.Object,java.lang.Object,java.lang.String)",
            "org.apache.catalina.valves.AbstractAccessLogValve$HostElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.AbstractAccessLogValve$LocalServerNameElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.AbstractAccessLogValve$PortElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.AbstractAccessLogValve$ProtocolElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.AbstractAccessLogValve$RemoteAddrElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.AbstractAccessLogValve$RequestAttributeElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.AbstractAccessLogValve$SessionAttributeElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.ExtendedAccessLogValve:java.lang.String wrap(java.lang.Object)",
            "org.apache.catalina.valves.rewrite.ResolverImpl:java.lang.String resolveEnv(java.lang.String)",
            "org.apache.naming.ContextBindings:java.lang.String getThreadName()",
            "org.apache.naming.ContextBindings:java.lang.String getClassLoaderName()",
            "org.apache.naming.factory.DataSourceLinkFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.naming.factory.EjbFactory:java.lang.Object getLinked(javax.naming.Reference)",
            "org.apache.naming.factory.FactoryBase:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.naming.factory.LookupFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.naming.factory.OpenEjbFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.naming.factory.ResourceLinkFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.tomcat.util.descriptor.web.CallMethodMultiRule:void end(java.lang.String,java.lang.String)",
            "org.apache.tomcat.util.descriptor.web.WebXml:void appendElement(java.lang.StringBuilder,java.lang.String,java.lang.String,java.lang.Object)",
            "org.apache.tomcat.util.digester.CallMethodRule:void end(java.lang.String,java.lang.String)",
            "org.apache.tomcat.util.json.JSONParser:java.lang.String objectKey()",
            "org.apache.tomcat.util.modeler.BaseModelMBean:java.lang.String toString()",
            "org.apache.tomcat.util.net.AbstractEndpoint:java.lang.String getProperty(java.lang.String)",
            "org.apache.tomcat.util.security.Escape:java.lang.String htmlElementContent(java.lang.Object)"
        ]
    },
    "org.apache.catalina.session.ManagerBase:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.Connector:java.lang.String createObjectNameKeyProperties(java.lang.String)",
            "org.apache.catalina.connector.Request$2:java.lang.Object get(org.apache.catalina.connector.Request,java.lang.String)",
            "org.apache.catalina.connector.Request:void setAttribute(java.lang.String,java.lang.Object)",
            "org.apache.catalina.core.ApplicationFilterFactory:org.apache.catalina.core.ApplicationFilterChain createFilterChain(jakarta.servlet.ServletRequest,org.apache.catalina.Wrapper,jakarta.servlet.Servlet)",
            "org.apache.catalina.core.ApplicationHttpRequest:java.lang.Object getAttribute(java.lang.String)",
            "org.apache.catalina.core.DefaultInstanceManager:void loadProperties(java.util.Set,java.lang.String,java.lang.String,org.apache.juli.logging.Log)",
            "org.apache.catalina.core.NamingContextListener:void addResourceLink(org.apache.tomcat.util.descriptor.web.ContextResourceLink)",
            "org.apache.catalina.loader.WebappClassLoaderBase:void checkThreadLocalMapForLeaks(java.lang.Object,java.lang.reflect.Field)",
            "org.apache.catalina.manager.JMXProxyServlet:void getAttribute(java.io.PrintWriter,java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.catalina.manager.JMXProxyServlet:void output(java.lang.String,java.io.PrintWriter,java.lang.Object)",
            "org.apache.catalina.manager.JspHelper:java.lang.String escapeXml(java.lang.Object)",
            "org.apache.catalina.mapper.MapperListener:void containerEvent(org.apache.catalina.ContainerEvent)",
            "org.apache.catalina.mbeans.MBeanDumper:java.lang.String valueToString(java.lang.Object)",
            "org.apache.catalina.realm.JNDIRealm:java.lang.String getAttributeValue(java.lang.String,javax.naming.directory.Attributes)",
            "org.apache.catalina.servlets.CGIServlet$CGIRunner:java.lang.String[] hashToStringArray(java.util.Hashtable)",
            "org.apache.catalina.session.ManagerBase:java.lang.String getSessionAttribute(java.lang.String,java.lang.String)",
            "org.apache.catalina.users.MemoryUserDatabaseFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.catalina.util.LifecycleBase:void init()",
            "org.apache.catalina.util.LifecycleBase:void start()",
            "org.apache.catalina.util.LifecycleBase:void stop()",
            "org.apache.catalina.util.LifecycleBase:void destroy()",
            "org.apache.catalina.util.LifecycleBase:void invalidTransition(java.lang.String)",
            "org.apache.catalina.util.ToStringUtil:java.lang.String containedToString(java.lang.Object,java.lang.Object,java.lang.String)",
            "org.apache.catalina.valves.AbstractAccessLogValve$HostElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.AbstractAccessLogValve$LocalServerNameElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.AbstractAccessLogValve$PortElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.AbstractAccessLogValve$ProtocolElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.AbstractAccessLogValve$RemoteAddrElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.AbstractAccessLogValve$RequestAttributeElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.AbstractAccessLogValve$SessionAttributeElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.ExtendedAccessLogValve:java.lang.String wrap(java.lang.Object)",
            "org.apache.catalina.valves.rewrite.ResolverImpl:java.lang.String resolveEnv(java.lang.String)",
            "org.apache.naming.ContextBindings:java.lang.String getThreadName()",
            "org.apache.naming.ContextBindings:java.lang.String getClassLoaderName()",
            "org.apache.naming.factory.DataSourceLinkFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.naming.factory.EjbFactory:java.lang.Object getLinked(javax.naming.Reference)",
            "org.apache.naming.factory.FactoryBase:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.naming.factory.LookupFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.naming.factory.OpenEjbFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.naming.factory.ResourceLinkFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.tomcat.util.descriptor.web.CallMethodMultiRule:void end(java.lang.String,java.lang.String)",
            "org.apache.tomcat.util.descriptor.web.WebXml:void appendElement(java.lang.StringBuilder,java.lang.String,java.lang.String,java.lang.Object)",
            "org.apache.tomcat.util.digester.CallMethodRule:void end(java.lang.String,java.lang.String)",
            "org.apache.tomcat.util.json.JSONParser:java.lang.String objectKey()",
            "org.apache.tomcat.util.modeler.BaseModelMBean:java.lang.String toString()",
            "org.apache.tomcat.util.net.AbstractEndpoint:java.lang.String getProperty(java.lang.String)",
            "org.apache.tomcat.util.security.Escape:java.lang.String htmlElementContent(java.lang.Object)"
        ]
    },
    "org.apache.catalina.util.ToStringUtil:java.lang.String toString(org.apache.catalina.Contained)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.StandardPipeline:java.lang.String toString()",
            "org.apache.catalina.realm.RealmBase:java.lang.String toString()",
            "org.apache.catalina.valves.ValveBase:java.lang.String toString()"
        ]
    },
    "org.apache.catalina.session.StoreBase:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.Connector:java.lang.String createObjectNameKeyProperties(java.lang.String)",
            "org.apache.catalina.connector.Request$2:java.lang.Object get(org.apache.catalina.connector.Request,java.lang.String)",
            "org.apache.catalina.connector.Request:void setAttribute(java.lang.String,java.lang.Object)",
            "org.apache.catalina.core.ApplicationFilterFactory:org.apache.catalina.core.ApplicationFilterChain createFilterChain(jakarta.servlet.ServletRequest,org.apache.catalina.Wrapper,jakarta.servlet.Servlet)",
            "org.apache.catalina.core.ApplicationHttpRequest:java.lang.Object getAttribute(java.lang.String)",
            "org.apache.catalina.core.DefaultInstanceManager:void loadProperties(java.util.Set,java.lang.String,java.lang.String,org.apache.juli.logging.Log)",
            "org.apache.catalina.core.NamingContextListener:void addResourceLink(org.apache.tomcat.util.descriptor.web.ContextResourceLink)",
            "org.apache.catalina.loader.WebappClassLoaderBase:void checkThreadLocalMapForLeaks(java.lang.Object,java.lang.reflect.Field)",
            "org.apache.catalina.manager.JMXProxyServlet:void getAttribute(java.io.PrintWriter,java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.catalina.manager.JMXProxyServlet:void output(java.lang.String,java.io.PrintWriter,java.lang.Object)",
            "org.apache.catalina.manager.JspHelper:java.lang.String escapeXml(java.lang.Object)",
            "org.apache.catalina.mapper.MapperListener:void containerEvent(org.apache.catalina.ContainerEvent)",
            "org.apache.catalina.mbeans.MBeanDumper:java.lang.String valueToString(java.lang.Object)",
            "org.apache.catalina.realm.JNDIRealm:java.lang.String getAttributeValue(java.lang.String,javax.naming.directory.Attributes)",
            "org.apache.catalina.servlets.CGIServlet$CGIRunner:java.lang.String[] hashToStringArray(java.util.Hashtable)",
            "org.apache.catalina.session.ManagerBase:java.lang.String getSessionAttribute(java.lang.String,java.lang.String)",
            "org.apache.catalina.users.MemoryUserDatabaseFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.catalina.util.LifecycleBase:void init()",
            "org.apache.catalina.util.LifecycleBase:void start()",
            "org.apache.catalina.util.LifecycleBase:void stop()",
            "org.apache.catalina.util.LifecycleBase:void destroy()",
            "org.apache.catalina.util.LifecycleBase:void invalidTransition(java.lang.String)",
            "org.apache.catalina.util.ToStringUtil:java.lang.String containedToString(java.lang.Object,java.lang.Object,java.lang.String)",
            "org.apache.catalina.valves.AbstractAccessLogValve$HostElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.AbstractAccessLogValve$LocalServerNameElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.AbstractAccessLogValve$PortElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.AbstractAccessLogValve$ProtocolElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.AbstractAccessLogValve$RemoteAddrElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.AbstractAccessLogValve$RequestAttributeElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.AbstractAccessLogValve$SessionAttributeElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.ExtendedAccessLogValve:java.lang.String wrap(java.lang.Object)",
            "org.apache.catalina.valves.rewrite.ResolverImpl:java.lang.String resolveEnv(java.lang.String)",
            "org.apache.naming.ContextBindings:java.lang.String getThreadName()",
            "org.apache.naming.ContextBindings:java.lang.String getClassLoaderName()",
            "org.apache.naming.factory.DataSourceLinkFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.naming.factory.EjbFactory:java.lang.Object getLinked(javax.naming.Reference)",
            "org.apache.naming.factory.FactoryBase:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.naming.factory.LookupFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.naming.factory.OpenEjbFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.naming.factory.ResourceLinkFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.tomcat.util.descriptor.web.CallMethodMultiRule:void end(java.lang.String,java.lang.String)",
            "org.apache.tomcat.util.descriptor.web.WebXml:void appendElement(java.lang.StringBuilder,java.lang.String,java.lang.String,java.lang.Object)",
            "org.apache.tomcat.util.digester.CallMethodRule:void end(java.lang.String,java.lang.String)",
            "org.apache.tomcat.util.json.JSONParser:java.lang.String objectKey()",
            "org.apache.tomcat.util.modeler.BaseModelMBean:java.lang.String toString()",
            "org.apache.tomcat.util.net.AbstractEndpoint:java.lang.String getProperty(java.lang.String)",
            "org.apache.tomcat.util.security.Escape:java.lang.String htmlElementContent(java.lang.Object)"
        ]
    },
    "org.apache.naming.SelectorContext:void bind(javax.naming.Name,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.naming.NamingContext:void bind(javax.naming.Name,java.lang.Object,boolean)",
            "org.apache.naming.SelectorContext:void bind(javax.naming.Name,java.lang.Object)"
        ]
    },
    "org.apache.naming.SelectorContext:void bind(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.NamingContextListener:void createNamingContext()",
            "org.apache.catalina.core.NamingContextListener:void addEjb(org.apache.tomcat.util.descriptor.web.ContextEjb)",
            "org.apache.catalina.core.NamingContextListener:void addEnvironment(org.apache.tomcat.util.descriptor.web.ContextEnvironment)",
            "org.apache.catalina.core.NamingContextListener:void addService(org.apache.tomcat.util.descriptor.web.ContextService)",
            "org.apache.catalina.core.NamingContextListener:void addResource(org.apache.tomcat.util.descriptor.web.ContextResource)",
            "org.apache.catalina.core.NamingContextListener:void addResourceEnvRef(org.apache.tomcat.util.descriptor.web.ContextResourceEnvRef)",
            "org.apache.catalina.core.NamingContextListener:void addResourceLink(org.apache.tomcat.util.descriptor.web.ContextResourceLink)",
            "org.apache.naming.SelectorContext:void bind(java.lang.String,java.lang.Object)"
        ]
    },
    "org.apache.naming.SelectorContext:void rebind(javax.naming.Name,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.naming.NamingContext:void bind(javax.naming.Name,java.lang.Object,boolean)",
            "org.apache.naming.SelectorContext:void rebind(javax.naming.Name,java.lang.Object)"
        ]
    },
    "org.apache.naming.SelectorContext:void rebind(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.naming.SelectorContext:void rebind(java.lang.String,java.lang.Object)"
        ]
    },
    "org.apache.naming.SelectorContext:void unbind(javax.naming.Name)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.naming.NamingContext:void unbind(javax.naming.Name)",
            "org.apache.naming.SelectorContext:void unbind(javax.naming.Name)"
        ]
    },
    "org.apache.naming.SelectorContext:void unbind(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.NamingContextListener:void removeEjb(java.lang.String)",
            "org.apache.catalina.core.NamingContextListener:void removeEnvironment(java.lang.String)",
            "org.apache.catalina.core.NamingContextListener:void removeLocalEjb(java.lang.String)",
            "org.apache.catalina.core.NamingContextListener:void removeMessageDestinationRef(java.lang.String)",
            "org.apache.catalina.core.NamingContextListener:void removeService(java.lang.String)",
            "org.apache.catalina.core.NamingContextListener:void removeResource(java.lang.String)",
            "org.apache.catalina.core.NamingContextListener:void removeResourceEnvRef(java.lang.String)",
            "org.apache.catalina.core.NamingContextListener:void removeResourceLink(java.lang.String)",
            "org.apache.naming.SelectorContext:void unbind(java.lang.String)"
        ]
    },
    "org.apache.naming.SelectorContext:javax.naming.NamingEnumeration list(javax.naming.Name)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.naming.NamingContext:javax.naming.NamingEnumeration list(javax.naming.Name)",
            "org.apache.naming.SelectorContext:javax.naming.NamingEnumeration list(javax.naming.Name)"
        ]
    },
    "org.apache.naming.SelectorContext:javax.naming.NamingEnumeration list(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.naming.SelectorContext:javax.naming.NamingEnumeration list(java.lang.String)"
        ]
    },
    "org.apache.naming.SelectorContext:javax.naming.NamingEnumeration listBindings(javax.naming.Name)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.naming.NamingContext:javax.naming.NamingEnumeration listBindings(javax.naming.Name)",
            "org.apache.naming.SelectorContext:javax.naming.NamingEnumeration listBindings(javax.naming.Name)"
        ]
    },
    "org.apache.naming.SelectorContext:javax.naming.NamingEnumeration listBindings(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.ManagerServlet:void printResources(java.io.PrintWriter,java.lang.String,javax.naming.Context,java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.mbeans.GlobalResourcesLifecycleListener:void createMBeans(java.lang.String,javax.naming.Context)",
            "org.apache.naming.SelectorContext:javax.naming.NamingEnumeration listBindings(java.lang.String)"
        ]
    },
    "org.apache.naming.SelectorContext:void destroySubcontext(javax.naming.Name)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.naming.NamingContext:void destroySubcontext(javax.naming.Name)",
            "org.apache.naming.SelectorContext:void destroySubcontext(javax.naming.Name)"
        ]
    },
    "org.apache.naming.SelectorContext:void destroySubcontext(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.naming.SelectorContext:void destroySubcontext(java.lang.String)"
        ]
    },
    "org.apache.naming.SelectorContext:javax.naming.Context createSubcontext(javax.naming.Name)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.naming.SelectorContext:javax.naming.Context createSubcontext(javax.naming.Name)"
        ]
    },
    "org.apache.naming.SelectorContext:javax.naming.Context createSubcontext(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.NamingContextListener:void createNamingContext()",
            "org.apache.catalina.core.NamingContextListener:void createSubcontexts(javax.naming.Context,java.lang.String)",
            "org.apache.naming.SelectorContext:javax.naming.Context createSubcontext(java.lang.String)"
        ]
    },
    "org.apache.naming.SelectorContext:javax.naming.NameParser getNameParser(javax.naming.Name)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.naming.NamingContext:javax.naming.NameParser getNameParser(javax.naming.Name)",
            "org.apache.naming.SelectorContext:javax.naming.NameParser getNameParser(javax.naming.Name)"
        ]
    },
    "org.apache.naming.SelectorContext:javax.naming.NameParser getNameParser(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.naming.SelectorContext:javax.naming.NameParser getNameParser(java.lang.String)"
        ]
    },
    "org.apache.naming.SelectorContext:java.lang.Object addToEnvironment(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.naming.SelectorContext:java.lang.Object addToEnvironment(java.lang.String,java.lang.Object)"
        ]
    },
    "org.apache.naming.SelectorContext:java.lang.Object removeFromEnvironment(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.naming.SelectorContext:java.lang.Object removeFromEnvironment(java.lang.String)"
        ]
    },
    "org.apache.naming.SelectorContext:java.util.Hashtable getEnvironment()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.naming.SelectorContext:java.util.Hashtable getEnvironment()"
        ]
    },
    "org.apache.naming.SelectorContext:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.naming.NamingContext:void destroySubcontext(javax.naming.Name)",
            "org.apache.naming.SelectorContext:void close()"
        ]
    },
    "org.apache.tomcat.util.json.JSONParser:java.util.LinkedHashMap parseObject()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tomcat.util.json.JSONParser:java.lang.Object anything()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.json.JSONParser:java.lang.Object parse()",
            "org.apache.tomcat.util.json.JSONParser:java.util.LinkedHashMap object()",
            "org.apache.tomcat.util.json.JSONParser:java.util.ArrayList list()"
        ]
    },
    "jakarta.servlet.ServletOutputStream:void print(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream:void print(boolean)"
        ]
    },
    "jakarta.servlet.ServletOutputStream:void print(char)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream:void print(char)"
        ]
    },
    "jakarta.servlet.ServletOutputStream:void print(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream:void print(int)"
        ]
    },
    "jakarta.servlet.ServletOutputStream:void print(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream:void print(long)"
        ]
    },
    "jakarta.servlet.ServletOutputStream:void print(float)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream:void print(float)"
        ]
    },
    "jakarta.servlet.ServletOutputStream:void print(double)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream:void print(double)"
        ]
    },
    "jakarta.servlet.ServletOutputStream:void println()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream:void println()",
            "org.apache.catalina.servlets.DefaultServlet:void copy(org.apache.catalina.WebResource,long,jakarta.servlet.ServletOutputStream,org.apache.tomcat.util.http.parser.Ranges,java.lang.String)"
        ]
    },
    "jakarta.servlet.ServletOutputStream:void println(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletOutputStream:void println(char)",
            "jakarta.servlet.ServletOutputStream:void println(int)",
            "jakarta.servlet.ServletOutputStream:void println(long)",
            "jakarta.servlet.ServletOutputStream:void println(float)",
            "jakarta.servlet.ServletOutputStream:void println(double)",
            "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream:void println(java.lang.String)",
            "org.apache.catalina.servlets.DefaultServlet:void copy(org.apache.catalina.WebResource,long,jakarta.servlet.ServletOutputStream,org.apache.tomcat.util.http.parser.Ranges,java.lang.String)"
        ]
    },
    "jakarta.servlet.ServletOutputStream:void println(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream:void println(boolean)"
        ]
    },
    "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream:void print(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletOutputStream:void print(boolean)",
            "jakarta.servlet.ServletOutputStream:void print(char)",
            "jakarta.servlet.ServletOutputStream:void print(int)",
            "jakarta.servlet.ServletOutputStream:void print(long)",
            "jakarta.servlet.ServletOutputStream:void print(float)",
            "jakarta.servlet.ServletOutputStream:void print(double)",
            "jakarta.servlet.ServletOutputStream:void println()",
            "jakarta.servlet.ServletOutputStream:void println(java.lang.String)",
            "jakarta.servlet.ServletOutputStream:void println(boolean)",
            "jakarta.servlet.http.HttpServlet:void doTrace(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream:void print(java.lang.String)",
            "org.apache.catalina.servlets.DefaultServlet:void copy(org.apache.catalina.WebResource,long,jakarta.servlet.ServletOutputStream,org.apache.tomcat.util.http.parser.Ranges,java.lang.String)",
            "org.apache.catalina.valves.HealthCheckValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.ParameterParser:java.util.Map parse(char[],char)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.ParameterParser:java.util.Map parse(java.lang.String,char)"
        ]
    },
    "org.apache.coyote.http2.Http2AsyncUpgradeHandler:void handleAsyncException()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2AsyncUpgradeHandler:void sendStreamReset(org.apache.coyote.http2.StreamException)",
            "org.apache.coyote.http2.Http2AsyncUpgradeHandler:void writeGoAwayFrame(int,long,byte[])",
            "org.apache.coyote.http2.Http2AsyncUpgradeHandler:void writeHeaders(org.apache.coyote.http2.Stream,int,org.apache.tomcat.util.http.MimeHeaders,boolean,int)",
            "org.apache.coyote.http2.Http2AsyncUpgradeHandler:void writeBody(org.apache.coyote.http2.Stream,java.nio.ByteBuffer,int,boolean)",
            "org.apache.coyote.http2.Http2AsyncUpgradeHandler:void writeWindowUpdate(org.apache.coyote.http2.AbstractNonZeroStream,int,boolean)",
            "org.apache.coyote.http2.Http2AsyncUpgradeHandler:void settingsEnd(boolean)",
            "org.apache.coyote.http2.Http2AsyncUpgradeHandler:org.apache.tomcat.util.net.SendfileState processSendfile(org.apache.coyote.http2.SendfileData)",
            "org.apache.coyote.http2.Http2AsyncUpgradeHandler:void access$300(org.apache.coyote.http2.Http2AsyncUpgradeHandler)"
        ]
    },
    "org.apache.coyote.http2.Http2AsyncUpgradeHandler:void goaway(int,long,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2Parser:void readGoawayFrame(int,java.nio.ByteBuffer)"
        ]
    },
    "org.apache.coyote.http2.Http2Parser:void readGoawayFrame(int,java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2AsyncParser$FrameCompletionHandler:void completed(java.lang.Long,java.lang.Void)",
            "org.apache.coyote.http2.Http2Parser:boolean readFrame(boolean,org.apache.coyote.http2.FrameType)"
        ]
    },
    "org.apache.catalina.realm.JAASMemoryLoginModule:void load()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.realm.JAASMemoryLoginModule:void initialize(javax.security.auth.Subject,javax.security.auth.callback.CallbackHandler,java.util.Map,java.util.Map)"
        ]
    },
    "jakarta.servlet.http.HttpServletRequestWrapper:boolean isUserInRole(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletRequestWrapper:boolean isUserInRole(java.lang.String)"
        ]
    },
    "org.apache.catalina.connector.RequestFacade:boolean isUserInRole(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletRequestWrapper:boolean isUserInRole(java.lang.String)"
        ]
    },
    "org.apache.catalina.startup.Tomcat:org.apache.catalina.Context addContext(org.apache.catalina.Host,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.Tomcat:org.apache.catalina.Context addContext(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.catalina.startup.Tomcat:void silence(org.apache.catalina.Host,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.Tomcat:org.apache.catalina.Context addContext(org.apache.catalina.Host,java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.catalina.startup.Tomcat:org.apache.catalina.Context addWebapp(org.apache.catalina.Host,java.lang.String,java.lang.String,org.apache.catalina.LifecycleListener)"
        ]
    },
    "org.apache.catalina.startup.Tomcat:java.net.URL getWebappConfigFile(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.Tomcat:org.apache.catalina.Context addWebapp(org.apache.catalina.Host,java.lang.String,java.lang.String,org.apache.catalina.LifecycleListener)"
        ]
    },
    "org.apache.catalina.core.ApplicationContext:jakarta.servlet.ServletRegistration$Dynamic addServlet(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationContextFacade:jakarta.servlet.ServletRegistration$Dynamic addServlet(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.catalina.core.ApplicationContext:jakarta.servlet.ServletRegistration$Dynamic addServlet(java.lang.String,jakarta.servlet.Servlet)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationContextFacade:jakarta.servlet.ServletRegistration$Dynamic addServlet(java.lang.String,jakarta.servlet.Servlet)"
        ]
    },
    "org.apache.catalina.core.ApplicationContext:jakarta.servlet.ServletRegistration$Dynamic addServlet(java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationContextFacade:jakarta.servlet.ServletRegistration$Dynamic addServlet(java.lang.String,java.lang.Class)"
        ]
    },
    "org.apache.catalina.core.ApplicationContext:jakarta.servlet.ServletRegistration$Dynamic addJspFile(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationContextFacade:jakarta.servlet.ServletRegistration$Dynamic addJspFile(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.catalina.startup.Tomcat:void initWebappDefaults(org.apache.catalina.Context)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.Tomcat$DefaultWebXmlListener:void lifecycleEvent(org.apache.catalina.LifecycleEvent)",
            "org.apache.catalina.startup.Tomcat:void initWebappDefaults(java.lang.String)"
        ]
    },
    "org.apache.catalina.startup.WebAnnotationSet:void loadClassAnnotation(org.apache.catalina.Context,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.WebAnnotationSet:void loadApplicationListenerAnnotations(org.apache.catalina.Context)",
            "org.apache.catalina.startup.WebAnnotationSet:void loadApplicationFilterAnnotations(org.apache.catalina.Context)",
            "org.apache.catalina.startup.WebAnnotationSet:void loadApplicationServletAnnotations(org.apache.catalina.Context)"
        ]
    },
    "org.apache.catalina.startup.HostConfig:void deployDescriptor(org.apache.catalina.util.ContextName,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.HostConfig$DeployDescriptor:void run()",
            "org.apache.catalina.startup.HostConfig:void deployApps(java.lang.String)"
        ]
    },
    "org.apache.catalina.startup.HostConfig:void deployDirectory(org.apache.catalina.util.ContextName,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.HostConfig$DeployDirectory:void run()",
            "org.apache.catalina.startup.HostConfig:void deployApps(java.lang.String)"
        ]
    },
    "org.apache.catalina.startup.HostConfig:void manageApp(org.apache.catalina.Context)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.startup.UserConfig:void deploy(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.UserConfig:void access$000(org.apache.catalina.startup.UserConfig,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.catalina.core.ContainerBase$PrivilegedAddChild:java.lang.Object run()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.security.auth.message.config.AuthConfigFactory:java.lang.String getFactoryClassName()",
            "jakarta.servlet.http.Cookie:void <clinit>()",
            "org.apache.catalina.core.ContainerBase:void addChild(org.apache.catalina.Container)",
            "org.apache.catalina.startup.ClassLoaderFactory:java.lang.ClassLoader createClassLoader(java.io.File[],java.io.File[],java.lang.ClassLoader)",
            "org.apache.catalina.startup.ClassLoaderFactory:java.lang.ClassLoader createClassLoader(java.util.List,java.lang.ClassLoader)",
            "org.apache.catalina.util.Introspection:java.lang.reflect.Field[] getDeclaredFields(java.lang.Class)",
            "org.apache.catalina.util.Introspection:java.lang.reflect.Method[] getDeclaredMethods(java.lang.Class)",
            "org.apache.juli.ClassLoaderLogManager:boolean addLogger(java.util.logging.Logger)",
            "org.apache.juli.ClassLoaderLogManager:org.apache.juli.ClassLoaderLogManager$ClassLoaderLogInfo getClassLoaderInfo(java.lang.ClassLoader)",
            "org.apache.juli.ClassLoaderLogManager:void doSetParentLogger(java.util.logging.Logger,java.util.logging.Logger)",
            "org.apache.juli.FileHandler$1:java.lang.Thread newThread(java.lang.Runnable)",
            "org.apache.naming.factory.MailSessionFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.naming.factory.SendMailFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.tomcat.util.compat.JrePlatform:void <clinit>()"
        ]
    },
    "org.apache.catalina.webresources.StandardRoot:void processWebInfLib()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.webresources.ExtractingRoot:void processWebInfLib()",
            "org.apache.catalina.webresources.StandardRoot:void startInternal()"
        ]
    },
    "org.apache.catalina.startup.Catalina:void load(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.Tomcat:void init(org.apache.tomcat.util.file.ConfigurationSource,java.lang.String[])"
        ]
    },
    "org.apache.catalina.startup.Tomcat:void init(org.apache.tomcat.util.file.ConfigurationSource,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.Tomcat:void init(org.apache.tomcat.util.file.ConfigurationSource)",
            "org.apache.catalina.startup.Tomcat:void main(java.lang.String[])"
        ]
    },
    "org.apache.catalina.core.StandardServer$lambda_startPeriodicLifecycleEvent_1__22:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.AsyncContextImpl$RunnableWrapper:void run()",
            "org.apache.catalina.core.AsyncContextImpl:void doInternalDispatch()",
            "org.apache.catalina.core.StandardThreadExecutor:void execute(java.lang.Runnable)",
            "org.apache.coyote.AbstractProcessor:void execute(java.lang.Runnable)",
            "org.apache.coyote.AsyncStateMachine:void asyncRun(java.lang.Runnable)",
            "org.apache.tomcat.util.net.Nio2Endpoint:void stopInternal()",
            "org.apache.tomcat.util.net.SecureNio2Channel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()",
            "org.apache.tomcat.util.net.SecureNioChannel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()",
            "org.apache.tomcat.util.net.SocketWrapperBase:void execute(java.lang.Runnable)",
            "org.apache.tomcat.util.threads.InlineExecutorService:void execute(java.lang.Runnable)",
            "org.apache.tomcat.util.threads.ScheduledThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.tomcat.util.threads.TaskThread$WrappingRunnable:void run()",
            "org.apache.tomcat.util.threads.ThreadPoolExecutor:void execute(java.lang.Runnable,long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.apache.catalina.util.LifecycleBase:void setState(org.apache.catalina.LifecycleState)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.Connector:void startInternal()",
            "org.apache.catalina.connector.Connector:void stopInternal()",
            "org.apache.catalina.core.ContainerBase:void startInternal()",
            "org.apache.catalina.core.ContainerBase:void stopInternal()",
            "org.apache.catalina.core.StandardContext:void startInternal()",
            "org.apache.catalina.core.StandardContext:void stopInternal()",
            "org.apache.catalina.core.StandardPipeline:void startInternal()",
            "org.apache.catalina.core.StandardPipeline:void stopInternal()",
            "org.apache.catalina.core.StandardServer:void startInternal()",
            "org.apache.catalina.core.StandardServer:void stopInternal()",
            "org.apache.catalina.core.StandardService:void startInternal()",
            "org.apache.catalina.core.StandardService:void stopInternal()",
            "org.apache.catalina.core.StandardThreadExecutor:void startInternal()",
            "org.apache.catalina.core.StandardThreadExecutor:void stopInternal()",
            "org.apache.catalina.deploy.NamingResourcesImpl:void startInternal()",
            "org.apache.catalina.deploy.NamingResourcesImpl:void stopInternal()",
            "org.apache.catalina.loader.WebappLoader:void startInternal()",
            "org.apache.catalina.loader.WebappLoader:void stopInternal()",
            "org.apache.catalina.mapper.MapperListener:void startInternal()",
            "org.apache.catalina.mapper.MapperListener:void stopInternal()",
            "org.apache.catalina.realm.RealmBase:void startInternal()",
            "org.apache.catalina.realm.RealmBase:void stopInternal()",
            "org.apache.catalina.session.PersistentManagerBase:void startInternal()",
            "org.apache.catalina.session.PersistentManagerBase:void stopInternal()",
            "org.apache.catalina.session.StandardManager:void startInternal()",
            "org.apache.catalina.session.StandardManager:void stopInternal()",
            "org.apache.catalina.session.StoreBase:void startInternal()",
            "org.apache.catalina.session.StoreBase:void stopInternal()",
            "org.apache.catalina.util.SessionIdGeneratorBase:void startInternal()",
            "org.apache.catalina.util.SessionIdGeneratorBase:void stopInternal()",
            "org.apache.catalina.valves.AbstractAccessLogValve:void startInternal()",
            "org.apache.catalina.valves.AbstractAccessLogValve:void stopInternal()",
            "org.apache.catalina.valves.JDBCAccessLogValve:void startInternal()",
            "org.apache.catalina.valves.JDBCAccessLogValve:void stopInternal()",
            "org.apache.catalina.valves.SemaphoreValve:void startInternal()",
            "org.apache.catalina.valves.SemaphoreValve:void stopInternal()",
            "org.apache.catalina.valves.ValveBase:void startInternal()",
            "org.apache.catalina.valves.ValveBase:void stopInternal()",
            "org.apache.catalina.webresources.AbstractResourceSet:void startInternal()",
            "org.apache.catalina.webresources.AbstractResourceSet:void stopInternal()",
            "org.apache.catalina.webresources.EmptyResourceSet:void startInternal()",
            "org.apache.catalina.webresources.EmptyResourceSet:void stopInternal()",
            "org.apache.catalina.webresources.StandardRoot:void startInternal()",
            "org.apache.catalina.webresources.StandardRoot:void stopInternal()"
        ]
    },
    "org.apache.catalina.util.LifecycleBase:void setState(org.apache.catalina.LifecycleState,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.util.LifecycleBase:void handleSubClassException(java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void init()",
            "org.apache.catalina.util.LifecycleBase:void start()",
            "org.apache.catalina.util.LifecycleBase:void stop()",
            "org.apache.catalina.util.LifecycleBase:void destroy()"
        ]
    },
    "org.apache.tomcat.util.net.AprEndpoint:void closeSocketInternal(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.AprEndpoint:void access$100(org.apache.tomcat.util.net.AprEndpoint,long)"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$lambda_stopInternal_0__50:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.AsyncContextImpl$RunnableWrapper:void run()",
            "org.apache.catalina.core.AsyncContextImpl:void doInternalDispatch()",
            "org.apache.catalina.core.StandardThreadExecutor:void execute(java.lang.Runnable)",
            "org.apache.coyote.AbstractProcessor:void execute(java.lang.Runnable)",
            "org.apache.coyote.AsyncStateMachine:void asyncRun(java.lang.Runnable)",
            "org.apache.tomcat.util.net.Nio2Endpoint:void stopInternal()",
            "org.apache.tomcat.util.net.SecureNio2Channel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()",
            "org.apache.tomcat.util.net.SecureNioChannel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()",
            "org.apache.tomcat.util.net.SocketWrapperBase:void execute(java.lang.Runnable)",
            "org.apache.tomcat.util.threads.InlineExecutorService:void execute(java.lang.Runnable)",
            "org.apache.tomcat.util.threads.ScheduledThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.tomcat.util.threads.TaskThread$WrappingRunnable:void run()",
            "org.apache.tomcat.util.threads.ThreadPoolExecutor:void execute(java.lang.Runnable,long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.apache.coyote.http11.Http11Processor:void setRequestBody(org.apache.tomcat.util.buf.ByteChunk)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProcessor:void action(org.apache.coyote.ActionCode,java.lang.Object)"
        ]
    },
    "org.apache.coyote.http11.filters.ChunkedInputFilter:long end()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11InputBuffer:void endRequest()"
        ]
    },
    "org.apache.coyote.http11.filters.ChunkedInputFilter:void parseEndChunk()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.filters.ChunkedInputFilter:int doRead(org.apache.tomcat.util.net.ApplicationBufferHandler)"
        ]
    },
    "org.apache.coyote.http2.StreamProcessor:boolean flushBufferedWrite()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProcessor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState dispatch(org.apache.tomcat.util.net.SocketEvent)"
        ]
    },
    "org.apache.catalina.connector.CoyoteWriter:void write(char[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.CoyoteWriter:void write(char[])",
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void write(char[],int,int)",
            "org.apache.catalina.servlets.DefaultServlet:java.io.IOException copyRange(java.io.Reader,java.io.PrintWriter)",
            "org.apache.catalina.util.IOTools:void flow(java.io.Reader,java.io.Writer,char[])"
        ]
    },
    "org.apache.catalina.connector.OutputBuffer:void write(char[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.connector.CoyoteWriter:void write(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.CoyoteWriter:void print(char)",
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void write(int)",
            "org.apache.catalina.manager.StatusTransformer:void writeProcessorState(java.io.PrintWriter,javax.management.ObjectName,javax.management.MBeanServer,int)"
        ]
    },
    "org.apache.catalina.connector.CoyoteWriter:void write(java.lang.String,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.CoyoteWriter:void write(java.lang.String)",
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void write(java.lang.String,int,int)"
        ]
    },
    "org.apache.catalina.connector.OutputBuffer:void write(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.jaspic.PersistentProviderRegistrations:void writeOptional(java.lang.String,java.lang.String,java.io.Writer)",
            "org.apache.catalina.util.XMLWriter:void sendData()"
        ]
    },
    "org.apache.catalina.authenticator.jaspic.AuthConfigFactoryImpl:java.lang.String doRegisterConfigProvider(java.lang.String,java.util.Map,java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.jaspic.AuthConfigFactoryImpl:java.lang.String registerConfigProvider(java.lang.String,java.util.Map,java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.catalina.authenticator.jaspic.AuthConfigFactoryImpl:void loadPersistentRegistrations()"
        ]
    },
    "org.apache.catalina.authenticator.jaspic.AuthConfigFactoryImpl:java.lang.String registerConfigProvider(jakarta.security.auth.message.config.AuthConfigProvider,java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.jaspic.SimpleAuthConfigProvider:void <init>(java.util.Map,jakarta.security.auth.message.config.AuthConfigFactory)"
        ]
    },
    "org.apache.catalina.startup.ContextConfig:org.xml.sax.InputSource getGlobalWebXmlSource()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.ContextConfig:org.apache.tomcat.util.descriptor.web.WebXml getDefaultWebXmlFragment(org.apache.tomcat.util.descriptor.web.WebXmlParser)"
        ]
    },
    "org.apache.catalina.startup.ContextConfig:org.xml.sax.InputSource getHostWebXmlSource()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.ContextConfig:org.apache.tomcat.util.descriptor.web.WebXml getDefaultWebXmlFragment(org.apache.tomcat.util.descriptor.web.WebXmlParser)"
        ]
    },
    "org.apache.tomcat.util.net.SSLUtilBase:java.security.cert.CertPathParameters getParameters(java.lang.String,java.security.KeyStore,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SSLUtilBase:javax.net.ssl.TrustManager[] getTrustManagers()"
        ]
    },
    "org.apache.tomcat.util.net.jsse.PEMFile:void <init>(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SSLUtilBase:javax.net.ssl.KeyManager[] getKeyManagers()",
            "org.apache.tomcat.util.net.jsse.PEMFile:void <init>(java.lang.String)"
        ]
    },
    "org.apache.catalina.startup.ContextConfig:void convertJsps(org.apache.tomcat.util.descriptor.web.WebXml)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.ContextConfig:void webConfig()"
        ]
    },
    "org.apache.catalina.startup.ContextConfig:void scanWebXmlFragment(boolean,org.apache.tomcat.util.descriptor.web.WebXml,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.ContextConfig:void processAnnotations(java.util.Set,boolean,java.util.Map)",
            "org.apache.catalina.startup.ContextConfig:void access$100(org.apache.catalina.startup.ContextConfig,boolean,org.apache.tomcat.util.descriptor.web.WebXml,java.util.Map)"
        ]
    },
    "org.apache.catalina.startup.ContextConfig:void processAnnotationsStream(java.io.InputStream,org.apache.tomcat.util.descriptor.web.WebXml,boolean,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.ContextConfig:void processAnnotationsWebResource(org.apache.catalina.WebResource,org.apache.tomcat.util.descriptor.web.WebXml,boolean,java.util.Map)",
            "org.apache.catalina.startup.ContextConfig:void processAnnotationsJar(java.net.URL,org.apache.tomcat.util.descriptor.web.WebXml,boolean,java.util.Map)",
            "org.apache.catalina.startup.ContextConfig:void processAnnotationsFile(java.io.File,org.apache.tomcat.util.descriptor.web.WebXml,boolean,java.util.Map)"
        ]
    },
    "org.apache.catalina.startup.ContextConfig:void processClass(org.apache.tomcat.util.descriptor.web.WebXml,org.apache.tomcat.util.bcel.classfile.JavaClass)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.ContextConfig:void processAnnotationsStream(java.io.InputStream,org.apache.tomcat.util.descriptor.web.WebXml,boolean,java.util.Map)"
        ]
    },
    "org.apache.juli.ClassLoaderLogManager$lambda_getClassLoaderInfo_2__17:java.lang.Object run()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.security.auth.message.config.AuthConfigFactory:java.lang.String getFactoryClassName()",
            "jakarta.servlet.http.Cookie:void <clinit>()",
            "org.apache.catalina.startup.ClassLoaderFactory:java.lang.ClassLoader createClassLoader(java.io.File[],java.io.File[],java.lang.ClassLoader)",
            "org.apache.catalina.startup.ClassLoaderFactory:java.lang.ClassLoader createClassLoader(java.util.List,java.lang.ClassLoader)",
            "org.apache.catalina.util.Introspection:java.lang.reflect.Field[] getDeclaredFields(java.lang.Class)",
            "org.apache.catalina.util.Introspection:java.lang.reflect.Method[] getDeclaredMethods(java.lang.Class)",
            "org.apache.juli.ClassLoaderLogManager:boolean addLogger(java.util.logging.Logger)",
            "org.apache.juli.ClassLoaderLogManager:org.apache.juli.ClassLoaderLogManager$ClassLoaderLogInfo getClassLoaderInfo(java.lang.ClassLoader)",
            "org.apache.juli.ClassLoaderLogManager:void doSetParentLogger(java.util.logging.Logger,java.util.logging.Logger)",
            "org.apache.juli.FileHandler$1:java.lang.Thread newThread(java.lang.Runnable)",
            "org.apache.naming.factory.MailSessionFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.naming.factory.SendMailFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.tomcat.util.compat.JrePlatform:void <clinit>()"
        ]
    },
    "org.apache.catalina.loader.WebappClassLoaderBase$PrivilegedFindClassByName:java.lang.Object run()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.security.auth.message.config.AuthConfigFactory:java.lang.String getFactoryClassName()",
            "jakarta.servlet.http.Cookie:void <clinit>()",
            "org.apache.catalina.loader.WebappClassLoaderBase:java.lang.Class findClass(java.lang.String)",
            "org.apache.catalina.startup.ClassLoaderFactory:java.lang.ClassLoader createClassLoader(java.io.File[],java.io.File[],java.lang.ClassLoader)",
            "org.apache.catalina.startup.ClassLoaderFactory:java.lang.ClassLoader createClassLoader(java.util.List,java.lang.ClassLoader)",
            "org.apache.catalina.util.Introspection:java.lang.reflect.Field[] getDeclaredFields(java.lang.Class)",
            "org.apache.catalina.util.Introspection:java.lang.reflect.Method[] getDeclaredMethods(java.lang.Class)",
            "org.apache.juli.ClassLoaderLogManager:boolean addLogger(java.util.logging.Logger)",
            "org.apache.juli.ClassLoaderLogManager:org.apache.juli.ClassLoaderLogManager$ClassLoaderLogInfo getClassLoaderInfo(java.lang.ClassLoader)",
            "org.apache.juli.ClassLoaderLogManager:void doSetParentLogger(java.util.logging.Logger,java.util.logging.Logger)",
            "org.apache.juli.FileHandler$1:java.lang.Thread newThread(java.lang.Runnable)",
            "org.apache.naming.factory.MailSessionFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.naming.factory.SendMailFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.tomcat.util.compat.JrePlatform:void <clinit>()"
        ]
    },
    "org.apache.catalina.loader.WebappClassLoaderBase:java.lang.Class loadClass(java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.loader.WebappClassLoaderBase:java.lang.Class loadClass(java.lang.String)"
        ]
    },
    "org.apache.catalina.core.ApplicationContext:java.io.InputStream getResourceAsStream(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationContextFacade:java.io.InputStream getResourceAsStream(java.lang.String)",
            "org.apache.catalina.core.StandardContext$NoPluggabilityServletContext:java.io.InputStream getResourceAsStream(java.lang.String)",
            "org.apache.catalina.manager.host.HostManagerServlet:void add(java.io.PrintWriter,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean,boolean,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.servlets.CGIServlet$CGIEnvironment:void expandCGIScript()",
            "org.apache.catalina.servlets.DefaultServlet:javax.xml.transform.Source findXsltSource(org.apache.catalina.WebResource)",
            "org.apache.catalina.startup.ContextConfig:org.xml.sax.InputSource getContextWebXmlSource()",
            "org.apache.catalina.valves.rewrite.RewriteValve:void startInternal()"
        ]
    },
    "org.apache.catalina.servlets.DefaultServlet:java.io.File executePartialPut(jakarta.servlet.http.HttpServletRequest,org.apache.tomcat.util.http.parser.ContentRange,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.DefaultServlet:void doPut(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.webresources.CachedResource$CachedResourceJarURLConnection:java.io.InputStream getInputStream()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.CatalinaBaseConfigurationSource:org.apache.tomcat.util.file.ConfigurationSource$Resource getResource(java.lang.String)",
            "org.apache.catalina.startup.ContextConfig:void processContextConfig(org.apache.tomcat.util.digester.Digester,java.net.URL,java.io.InputStream)",
            "org.apache.catalina.startup.ContextConfig:org.apache.tomcat.util.descriptor.web.WebXml getDefaultWebXmlFragment(org.apache.tomcat.util.descriptor.web.WebXmlParser)",
            "org.apache.catalina.startup.ExpandWar:java.lang.String expand(org.apache.catalina.Host,java.net.URL,java.lang.String)",
            "org.apache.catalina.startup.Tomcat:org.apache.catalina.Context addWebapp(java.lang.String,java.net.URL)",
            "org.apache.catalina.users.MemoryUserDatabase:void backgroundProcess()",
            "org.apache.catalina.webresources.war.WarURLConnection:java.io.InputStream getInputStream()",
            "org.apache.tomcat.util.file.ConfigurationSource$1:org.apache.tomcat.util.file.ConfigurationSource$Resource getResource(java.lang.String)",
            "org.apache.tomcat.util.file.ConfigurationSource$Resource:long getLastModified()",
            "org.apache.tomcat.util.scan.UrlJar:org.apache.tomcat.util.scan.NonClosingJarInputStream createJarInputStream()"
        ]
    },
    "org.apache.catalina.webresources.CachedResource$CachedResourceURLConnection:java.io.InputStream getInputStream()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.CatalinaBaseConfigurationSource:org.apache.tomcat.util.file.ConfigurationSource$Resource getResource(java.lang.String)",
            "org.apache.catalina.startup.ContextConfig:void processContextConfig(org.apache.tomcat.util.digester.Digester,java.net.URL,java.io.InputStream)",
            "org.apache.catalina.startup.ContextConfig:org.apache.tomcat.util.descriptor.web.WebXml getDefaultWebXmlFragment(org.apache.tomcat.util.descriptor.web.WebXmlParser)",
            "org.apache.catalina.startup.ExpandWar:java.lang.String expand(org.apache.catalina.Host,java.net.URL,java.lang.String)",
            "org.apache.catalina.startup.Tomcat:org.apache.catalina.Context addWebapp(java.lang.String,java.net.URL)",
            "org.apache.catalina.users.MemoryUserDatabase:void backgroundProcess()",
            "org.apache.catalina.webresources.war.WarURLConnection:java.io.InputStream getInputStream()",
            "org.apache.tomcat.util.file.ConfigurationSource$1:org.apache.tomcat.util.file.ConfigurationSource$Resource getResource(java.lang.String)",
            "org.apache.tomcat.util.file.ConfigurationSource$Resource:long getLastModified()",
            "org.apache.tomcat.util.scan.UrlJar:org.apache.tomcat.util.scan.NonClosingJarInputStream createJarInputStream()"
        ]
    },
    "org.apache.catalina.servlets.DefaultServlet:java.io.InputStream renderXml(jakarta.servlet.http.HttpServletRequest,java.lang.String,org.apache.catalina.WebResource,javax.xml.transform.Source,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.DefaultServlet:java.io.InputStream render(jakarta.servlet.http.HttpServletRequest,java.lang.String,org.apache.catalina.WebResource,java.lang.String)"
        ]
    },
    "org.apache.catalina.util.CharsetMapper:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.StandardContext:org.apache.catalina.util.CharsetMapper getCharsetMapper()"
        ]
    },
    "org.apache.catalina.connector.CoyoteAdapter:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.Connector:void initInternal()",
            "org.apache.catalina.connector.CoyoteAdapter:boolean asyncDispatch(org.apache.coyote.Request,org.apache.coyote.Response,org.apache.tomcat.util.net.SocketEvent)",
            "org.apache.catalina.connector.CoyoteAdapter:void service(org.apache.coyote.Request,org.apache.coyote.Response)",
            "org.apache.catalina.connector.CoyoteAdapter:void log(org.apache.coyote.Request,org.apache.coyote.Response,long)",
            "org.apache.catalina.connector.CoyoteAdapter:void checkRecycled(org.apache.coyote.Request,org.apache.coyote.Response)",
            "org.apache.catalina.connector.CoyoteAdapter:boolean postParseRequest(org.apache.coyote.Request,org.apache.catalina.connector.Request,org.apache.coyote.Response,org.apache.catalina.connector.Response)",
            "org.apache.catalina.connector.CoyoteAdapter:void doConnectorAuthenticationAuthorization(org.apache.coyote.Request,org.apache.catalina.connector.Request)",
            "org.apache.catalina.connector.CoyoteAdapter:void parsePathParameters(org.apache.coyote.Request,org.apache.catalina.connector.Request)",
            "org.apache.catalina.connector.CoyoteAdapter:void parseSessionSslId(org.apache.catalina.connector.Request)",
            "org.apache.catalina.connector.CoyoteAdapter:void parseSessionCookiesId(org.apache.catalina.connector.Request)",
            "org.apache.catalina.connector.CoyoteAdapter:boolean normalize(org.apache.tomcat.util.buf.MessageBytes,boolean)",
            "org.apache.catalina.connector.CoyoteAdapter:void <clinit>()",
            "org.apache.catalina.connector.CoyoteAdapter$lambda_static_0__12:java.lang.Object get()"
        ]
    },
    "org.apache.catalina.core.ApplicationContext:java.lang.String getServerInfo()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationContextFacade:java.lang.String getServerInfo()",
            "org.apache.catalina.core.StandardContext$NoPluggabilityServletContext:java.lang.String getServerInfo()",
            "org.apache.catalina.servlets.CGIServlet:void printServletEnvironment(jakarta.servlet.http.HttpServletRequest)"
        ]
    },
    "org.apache.catalina.core.StandardServer:java.lang.String getServerInfo()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.core.StandardServer:java.lang.String getServerBuilt()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.core.StandardServer:java.lang.String getServerNumber()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.manager.ManagerServlet:void serverinfo(java.io.PrintWriter,org.apache.tomcat.util.res.StringManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.ManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.startup.VersionLoggerListener:void log()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.VersionLoggerListener:void lifecycleEvent(org.apache.catalina.LifecycleEvent)"
        ]
    },
    "org.apache.catalina.util.ServerInfo:java.lang.String getServerInfo()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.CoyoteAdapter:void <clinit>()",
            "org.apache.catalina.core.ApplicationContext:java.lang.String getServerInfo()",
            "org.apache.catalina.core.StandardEngine:void startInternal()",
            "org.apache.catalina.core.StandardServer:java.lang.String getServerInfo()",
            "org.apache.catalina.manager.HTMLManagerServlet:void list(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.ManagerServlet:void serverinfo(java.io.PrintWriter,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.StatusManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.host.HTMLHostManagerServlet:void list(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.servlets.DefaultServlet:java.io.InputStream renderHtml(jakarta.servlet.http.HttpServletRequest,java.lang.String,org.apache.catalina.WebResource,java.lang.String)",
            "org.apache.catalina.startup.VersionLoggerListener:void log()",
            "org.apache.catalina.util.ServerInfo:void main(java.lang.String[])",
            "org.apache.catalina.valves.ErrorReportValve:void report(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,java.lang.Throwable)",
            "org.apache.catalina.valves.ExtendedAccessLogValve:void open()"
        ]
    },
    "org.apache.catalina.util.ServerInfo:java.lang.String getServerBuilt()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.StandardServer:java.lang.String getServerBuilt()",
            "org.apache.catalina.startup.VersionLoggerListener:void log()",
            "org.apache.catalina.util.ServerInfo:void main(java.lang.String[])"
        ]
    },
    "org.apache.catalina.util.ServerInfo:java.lang.String getServerNumber()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.StandardServer:java.lang.String getServerNumber()",
            "org.apache.catalina.startup.VersionLoggerListener:void log()",
            "org.apache.catalina.util.ServerInfo:void main(java.lang.String[])"
        ]
    },
    "org.apache.catalina.util.ServerInfo:void main(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.valves.ExtendedAccessLogValve:void open()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.valves.AccessLogValve:void rotate()",
            "org.apache.catalina.valves.AccessLogValve:boolean rotate(java.lang.String)",
            "org.apache.catalina.valves.AccessLogValve:void log(java.io.CharArrayWriter)",
            "org.apache.catalina.valves.AccessLogValve:void startInternal()"
        ]
    },
    "org.apache.tomcat.util.descriptor.web.WebXmlParser:boolean parseWebXml(org.xml.sax.InputSource,org.apache.tomcat.util.descriptor.web.WebXml,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.ContextConfig:void webConfig()",
            "org.apache.catalina.startup.ContextConfig:org.apache.tomcat.util.descriptor.web.WebXml getTomcatWebXmlFragment(org.apache.tomcat.util.descriptor.web.WebXmlParser)",
            "org.apache.catalina.startup.ContextConfig:org.apache.tomcat.util.descriptor.web.WebXml getDefaultWebXmlFragment(org.apache.tomcat.util.descriptor.web.WebXmlParser)",
            "org.apache.tomcat.util.descriptor.web.FragmentJarScannerCallback:void scan(org.apache.tomcat.Jar,java.lang.String,boolean)",
            "org.apache.tomcat.util.descriptor.web.FragmentJarScannerCallback:void scan(java.io.File,java.lang.String,boolean)",
            "org.apache.tomcat.util.descriptor.web.WebXmlParser:boolean parseWebXml(java.net.URL,org.apache.tomcat.util.descriptor.web.WebXml,boolean)"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.util.LimitedInputStream:int read()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.StandardServer:void await()",
            "org.apache.catalina.servlets.CGIServlet$HTTPHeaderInputStream:int read()",
            "org.apache.catalina.servlets.DefaultServlet:void skip(java.io.InputStream,int)",
            "org.apache.catalina.webresources.AbstractArchiveResource$JarInputStreamWrapper:int read()",
            "org.apache.catalina.webresources.TrackedInputStream:int read()"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.util.LimitedInputStream:int read(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.Request:int readPostBody(byte[],int)",
            "org.apache.catalina.connector.Request:byte[] readChunkedPostBody()",
            "org.apache.catalina.loader.WebappClassLoaderBase:void clearReferencesJdbc()",
            "org.apache.catalina.util.IOTools:int readFully(java.io.InputStream,byte[])",
            "org.apache.catalina.webresources.AbstractArchiveResource$JarInputStreamWrapper:int read(byte[],int,int)",
            "org.apache.catalina.webresources.TrackedInputStream:int read(byte[],int,int)",
            "org.apache.tomcat.util.http.fileupload.ByteArrayOutputStream:int write(java.io.InputStream)",
            "org.apache.tomcat.util.http.fileupload.IOUtils:int read(java.io.InputStream,byte[],int,int)",
            "org.apache.tomcat.util.http.fileupload.MultipartStream$ItemInputStream:int makeAvailable()",
            "org.apache.tomcat.util.http.fileupload.MultipartStream:byte readByte()"
        ]
    },
    "jakarta.servlet.http.HttpServletRequestWrapper:jakarta.servlet.http.Cookie[] getCookies()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletRequestWrapper:jakarta.servlet.http.Cookie[] getCookies()",
            "org.apache.catalina.core.ApplicationPushBuilder:void <init>(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.filters.RequestDumperFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.servlets.CGIServlet:void printServletEnvironment(jakarta.servlet.http.HttpServletRequest)"
        ]
    },
    "org.apache.catalina.connector.RequestFacade$GetCookiesPrivilegedAction:jakarta.servlet.http.Cookie[] run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.RequestFacade$GetCookiesPrivilegedAction:java.lang.Object run()"
        ]
    },
    "org.apache.catalina.connector.RequestFacade:jakarta.servlet.http.Cookie[] getCookies()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletRequestWrapper:jakarta.servlet.http.Cookie[] getCookies()",
            "org.apache.catalina.core.ApplicationPushBuilder:void <init>(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.filters.RequestDumperFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.servlets.CGIServlet:void printServletEnvironment(jakarta.servlet.http.HttpServletRequest)"
        ]
    },
    "org.apache.catalina.valves.AbstractAccessLogValve$CookieElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.valves.AbstractAccessLogValve:void log(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)"
        ]
    },
    "org.apache.catalina.connector.Request:java.lang.String changeSessionId()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletRequestWrapper:java.lang.String changeSessionId()",
            "org.apache.catalina.authenticator.AuthenticatorBase:java.lang.String changeSessionID(org.apache.catalina.connector.Request,org.apache.catalina.Session)",
            "org.apache.catalina.connector.RequestFacade:java.lang.String changeSessionId()"
        ]
    },
    "org.apache.catalina.connector.Request:jakarta.servlet.http.HttpSession getSession()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletRequestWrapper:jakarta.servlet.http.HttpSession getSession()",
            "org.apache.catalina.filters.SessionInitializerFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)"
        ]
    },
    "org.apache.catalina.connector.Request:jakarta.servlet.http.HttpSession getSession(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletRequestWrapper:jakarta.servlet.http.HttpSession getSession(boolean)",
            "org.apache.catalina.connector.Request:void setUserPrincipal(java.security.Principal)",
            "org.apache.catalina.connector.RequestFacade$GetSessionPrivilegedAction:jakarta.servlet.http.HttpSession run()",
            "org.apache.catalina.connector.RequestFacade:jakarta.servlet.http.HttpSession getSession(boolean)",
            "org.apache.catalina.core.ApplicationPushBuilder:void <init>(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.core.StandardHostValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.filters.CsrfPreventionFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.filters.RestCsrfPreventionFilter$FetchRequest:boolean apply(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.filters.RestCsrfPreventionFilter$StateChangingRequest:boolean apply(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.security.SecurityUtil:void execute(java.lang.reflect.Method,java.lang.Object,java.lang.Object[],java.security.Principal)",
            "org.apache.catalina.servlets.CGIServlet:void printServletEnvironment(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.valves.AbstractAccessLogValve$SessionAttributeElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.CrawlerSessionManagerValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.ExtendedAccessLogValve$SessionAttributeElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)"
        ]
    },
    "org.apache.catalina.connector.Request:org.apache.catalina.Session getSessionInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.Response:java.lang.String encodeRedirectURL(java.lang.String)",
            "org.apache.catalina.connector.Response:java.lang.String encodeURL(java.lang.String)"
        ]
    },
    "org.apache.catalina.connector.Request:org.apache.catalina.Session getSessionInternal(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.AuthenticatorBase:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.authenticator.AuthenticatorBase:boolean checkForCachedAuthentication(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse,boolean)",
            "org.apache.catalina.authenticator.AuthenticatorBase:boolean reauthenticateFromSSO(java.lang.String,org.apache.catalina.connector.Request)",
            "org.apache.catalina.authenticator.AuthenticatorBase:void register(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse,java.security.Principal,java.lang.String,java.lang.String,java.lang.String,boolean,boolean)",
            "org.apache.catalina.authenticator.FormAuthenticator:boolean doAuthenticate(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.authenticator.FormAuthenticator:boolean isContinuationRequired(org.apache.catalina.connector.Request)",
            "org.apache.catalina.authenticator.FormAuthenticator:void register(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse,java.security.Principal,java.lang.String,java.lang.String,java.lang.String,boolean,boolean)",
            "org.apache.catalina.authenticator.FormAuthenticator:void forwardToLoginPage(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.descriptor.web.LoginConfig)",
            "org.apache.catalina.authenticator.FormAuthenticator:boolean matchRequest(org.apache.catalina.connector.Request)",
            "org.apache.catalina.authenticator.NonLoginAuthenticator:boolean doAuthenticate(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.connector.Request:java.lang.String changeSessionId()",
            "org.apache.catalina.connector.Response:boolean isEncodeable(java.lang.String)",
            "org.apache.catalina.core.ApplicationPushBuilder:void <init>(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.valves.AbstractAccessLogValve$SessionIdElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.PersistentValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)"
        ]
    },
    "org.apache.catalina.startup.Bootstrap:void init()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.Bootstrap:void init(java.lang.String[])",
            "org.apache.catalina.startup.Bootstrap:void start()",
            "org.apache.catalina.startup.Bootstrap:void main(java.lang.String[])"
        ]
    },
    "org.apache.catalina.core.DefaultInstanceManager:java.lang.Object newInstance(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.Request:jakarta.servlet.http.HttpUpgradeHandler upgrade(java.lang.Class)",
            "org.apache.catalina.core.ApplicationContext:java.util.EventListener createListener(java.lang.Class)"
        ]
    },
    "org.apache.catalina.core.DefaultInstanceManager:java.lang.Object newInstance(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationContext:jakarta.servlet.Filter createFilter(java.lang.Class)",
            "org.apache.catalina.core.ApplicationContext:jakarta.servlet.Servlet createServlet(java.lang.Class)",
            "org.apache.catalina.core.ApplicationContext:void addListener(java.lang.String)",
            "org.apache.catalina.core.ApplicationFilterConfig:jakarta.servlet.Filter getFilter()",
            "org.apache.catalina.core.StandardContext:boolean listenerStart()",
            "org.apache.catalina.core.StandardWrapper:jakarta.servlet.Servlet loadServlet()"
        ]
    },
    "org.apache.catalina.core.DefaultInstanceManager:java.lang.Object newInstance(java.lang.String,java.lang.ClassLoader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.AsyncContextImpl:jakarta.servlet.AsyncListener createListener(java.lang.Class)"
        ]
    },
    "org.apache.catalina.core.DefaultInstanceManager:void newInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationFilterConfig:void <init>(org.apache.catalina.Context,org.apache.tomcat.util.descriptor.web.FilterDef)"
        ]
    },
    "org.apache.catalina.deploy.NamingResourcesImpl:boolean checkResourceType(org.apache.tomcat.util.descriptor.web.ResourceBase)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.deploy.NamingResourcesImpl:void addEnvironment(org.apache.tomcat.util.descriptor.web.ContextEnvironment)",
            "org.apache.catalina.deploy.NamingResourcesImpl:void addMessageDestinationRef(org.apache.tomcat.util.descriptor.web.MessageDestinationRef)",
            "org.apache.catalina.deploy.NamingResourcesImpl:void addResource(org.apache.tomcat.util.descriptor.web.ContextResource)",
            "org.apache.catalina.deploy.NamingResourcesImpl:void addResourceEnvRef(org.apache.tomcat.util.descriptor.web.ContextResourceEnvRef)"
        ]
    },
    "org.apache.catalina.startup.WebAnnotationSet:void loadApplicationAnnotations(org.apache.catalina.Context)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.ContextConfig:void applicationAnnotationsConfig()",
            "org.apache.catalina.startup.Tomcat$FixContextListener:void lifecycleEvent(org.apache.catalina.LifecycleEvent)"
        ]
    },
    "org.apache.juli.FileHandler:java.lang.String getProperty(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.juli.FileHandler:void configure()"
        ]
    },
    "org.apache.juli.OneLineFormatter:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.juli.FileHandler:void configure()"
        ]
    },
    "org.apache.catalina.startup.Tomcat:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.Tomcat$DefaultWebXmlListener:void lifecycleEvent(org.apache.catalina.LifecycleEvent)",
            "org.apache.catalina.startup.Tomcat$SimpleRealm:java.lang.String getPassword(java.lang.String)",
            "org.apache.catalina.startup.Tomcat$SimpleRealm:java.security.Principal getPrincipal(java.lang.String)",
            "org.apache.catalina.startup.Tomcat:org.apache.catalina.Context addWebapp(java.lang.String,java.net.URL)",
            "org.apache.catalina.startup.Tomcat:org.apache.catalina.Wrapper addServlet(java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.catalina.startup.Tomcat:org.apache.catalina.Wrapper addServlet(java.lang.String,java.lang.String,jakarta.servlet.Servlet)",
            "org.apache.catalina.startup.Tomcat:void initBaseDir()",
            "org.apache.catalina.startup.Tomcat:void setSilent(boolean)",
            "org.apache.catalina.startup.Tomcat:org.apache.catalina.Context createContext(org.apache.catalina.Host,java.lang.String)",
            "org.apache.catalina.startup.Tomcat:void initWebappDefaults(java.lang.String)",
            "org.apache.catalina.startup.Tomcat:void initWebappDefaults(org.apache.catalina.Context)",
            "org.apache.catalina.startup.Tomcat:void addDefaultMimeTypeMappings(org.apache.catalina.Context)",
            "org.apache.catalina.startup.Tomcat:java.net.URL getWebappConfigFileFromDirectory(java.io.File,java.lang.String)",
            "org.apache.catalina.startup.Tomcat:java.net.URL getWebappConfigFileFromWar(java.io.File,java.lang.String)",
            "org.apache.catalina.startup.Tomcat:void main(java.lang.String[])",
            "org.apache.catalina.startup.Tomcat:void <clinit>()"
        ]
    },
    "org.apache.catalina.servlets.CGIServlet$CGIRunner:void lambda$run$0(java.io.BufferedReader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.CGIServlet$CGIRunner$lambda_run_0__39:void run()"
        ]
    },
    "org.apache.catalina.webresources.StandardRoot:boolean mkdir(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.WebdavServlet:void doMkcol(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.WebdavServlet:boolean copyResource(java.util.Hashtable,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.catalina.webresources.StandardRoot:boolean write(java.lang.String,java.io.InputStream,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.DefaultServlet:void doPut(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.WebdavServlet:boolean copyResource(java.util.Hashtable,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.catalina.connector.RequestFacade$GetLocalePrivilegedAction:java.lang.Object run()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.security.auth.message.config.AuthConfigFactory:java.lang.String getFactoryClassName()",
            "jakarta.servlet.http.Cookie:void <clinit>()",
            "org.apache.catalina.connector.RequestFacade:java.util.Locale getLocale()",
            "org.apache.catalina.startup.ClassLoaderFactory:java.lang.ClassLoader createClassLoader(java.io.File[],java.io.File[],java.lang.ClassLoader)",
            "org.apache.catalina.startup.ClassLoaderFactory:java.lang.ClassLoader createClassLoader(java.util.List,java.lang.ClassLoader)",
            "org.apache.catalina.util.Introspection:java.lang.reflect.Field[] getDeclaredFields(java.lang.Class)",
            "org.apache.catalina.util.Introspection:java.lang.reflect.Method[] getDeclaredMethods(java.lang.Class)",
            "org.apache.juli.ClassLoaderLogManager:boolean addLogger(java.util.logging.Logger)",
            "org.apache.juli.ClassLoaderLogManager:org.apache.juli.ClassLoaderLogManager$ClassLoaderLogInfo getClassLoaderInfo(java.lang.ClassLoader)",
            "org.apache.juli.ClassLoaderLogManager:void doSetParentLogger(java.util.logging.Logger,java.util.logging.Logger)",
            "org.apache.juli.FileHandler$1:java.lang.Thread newThread(java.lang.Runnable)",
            "org.apache.naming.factory.MailSessionFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.naming.factory.SendMailFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.tomcat.util.compat.JrePlatform:void <clinit>()"
        ]
    },
    "org.apache.catalina.connector.RequestFacade$GetLocalesPrivilegedAction:java.lang.Object run()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.security.auth.message.config.AuthConfigFactory:java.lang.String getFactoryClassName()",
            "jakarta.servlet.http.Cookie:void <clinit>()",
            "org.apache.catalina.connector.RequestFacade:java.util.Enumeration getLocales()",
            "org.apache.catalina.startup.ClassLoaderFactory:java.lang.ClassLoader createClassLoader(java.io.File[],java.io.File[],java.lang.ClassLoader)",
            "org.apache.catalina.startup.ClassLoaderFactory:java.lang.ClassLoader createClassLoader(java.util.List,java.lang.ClassLoader)",
            "org.apache.catalina.util.Introspection:java.lang.reflect.Field[] getDeclaredFields(java.lang.Class)",
            "org.apache.catalina.util.Introspection:java.lang.reflect.Method[] getDeclaredMethods(java.lang.Class)",
            "org.apache.juli.ClassLoaderLogManager:boolean addLogger(java.util.logging.Logger)",
            "org.apache.juli.ClassLoaderLogManager:org.apache.juli.ClassLoaderLogManager$ClassLoaderLogInfo getClassLoaderInfo(java.lang.ClassLoader)",
            "org.apache.juli.ClassLoaderLogManager:void doSetParentLogger(java.util.logging.Logger,java.util.logging.Logger)",
            "org.apache.juli.FileHandler$1:java.lang.Thread newThread(java.lang.Runnable)",
            "org.apache.naming.factory.MailSessionFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.naming.factory.SendMailFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.tomcat.util.compat.JrePlatform:void <clinit>()"
        ]
    },
    "org.apache.catalina.loader.WebappClassLoaderBase$CombinedEnumeration:boolean hasMoreElements()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServlet:void doTrace(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.authenticator.FormAuthenticator:void saveRequest(org.apache.catalina.connector.Request,org.apache.catalina.Session)",
            "org.apache.catalina.connector.Request:java.util.Map getParameterMap()",
            "org.apache.catalina.connector.Request:void parseLocales()",
            "org.apache.catalina.connector.Response:java.util.Collection getHeaders(java.lang.String)",
            "org.apache.catalina.core.ApplicationHttpRequest$AttributeNamesEnumerator:java.lang.String findNext()",
            "org.apache.catalina.core.ApplicationHttpRequest:void mergeParameters()",
            "org.apache.catalina.core.ApplicationPushBuilder:void <init>(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.core.ApplicationRequest:void setRequest(jakarta.servlet.ServletRequest)",
            "org.apache.catalina.filters.ExpiresFilter:void init(jakarta.servlet.FilterConfig)",
            "org.apache.catalina.filters.FilterBase:void init(jakarta.servlet.FilterConfig)",
            "org.apache.catalina.filters.RemoteIpFilter$XForwardedRequest:void <init>(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.filters.RemoteIpFilter:void doFilter(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.filters.RequestDumperFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.loader.JdbcLeakPrevention:java.util.List clearJdbcDriverRegistrations()",
            "org.apache.catalina.loader.WebappClassLoaderBase$CombinedEnumeration:boolean inc()",
            "org.apache.catalina.loader.WebappClassLoaderBase:java.util.Enumeration findResources(java.lang.String)",
            "org.apache.catalina.manager.StatusManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.StatusTransformer:void writeConnectorState(java.io.PrintWriter,javax.management.ObjectName,java.lang.String,javax.management.MBeanServer,java.util.Vector,java.util.Vector,int,java.lang.Object[])",
            "org.apache.catalina.manager.util.SessionUtils:java.util.Locale guessLocaleFromSession(jakarta.servlet.http.HttpSession)",
            "org.apache.catalina.manager.util.SessionUtils:java.lang.Object guessUserFromSession(org.apache.catalina.Session)",
            "org.apache.catalina.servlets.CGIServlet$CGIEnvironment:boolean setCGIEnvironment(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.servlets.CGIServlet$CGIRunner:java.lang.String[] hashToStringArray(java.util.Hashtable)",
            "org.apache.catalina.servlets.CGIServlet:void init(jakarta.servlet.ServletConfig)",
            "org.apache.catalina.servlets.CGIServlet:void printServletEnvironment(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.servlets.DefaultServlet:org.apache.catalina.servlets.DefaultServlet$PrecompressedResource getBestPrecompressedResource(jakarta.servlet.http.HttpServletRequest,java.util.List)",
            "org.apache.catalina.servlets.WebdavServlet$LockInfo:java.lang.String toString()",
            "org.apache.catalina.servlets.WebdavServlet$LockInfo:void toXML(org.apache.catalina.util.XMLWriter)",
            "org.apache.catalina.servlets.WebdavServlet:void doPropfind(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.WebdavServlet:void doLock(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.WebdavServlet:void doUnlock(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.WebdavServlet:boolean isLocked(java.lang.String,java.lang.String)",
            "org.apache.catalina.servlets.WebdavServlet:void sendReport(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,java.util.Hashtable)",
            "org.apache.catalina.servlets.WebdavServlet:void generatePropFindResponse(org.apache.catalina.util.XMLWriter,java.lang.String,java.lang.String,int,java.util.Vector,boolean,boolean,long,long,long,java.lang.String,java.lang.String)",
            "org.apache.catalina.servlets.WebdavServlet:boolean generateLockDiscovery(java.lang.String,org.apache.catalina.util.XMLWriter)",
            "org.apache.catalina.session.ManagerBase:java.util.HashMap getSession(java.lang.String)",
            "org.apache.catalina.startup.CatalinaProperties:void loadProperties()",
            "org.apache.catalina.startup.ExpandWar:java.lang.String expand(org.apache.catalina.Host,java.net.URL,java.lang.String)",
            "org.apache.catalina.startup.ExpandWar:void validate(org.apache.catalina.Host,java.net.URL,java.lang.String)",
            "org.apache.catalina.startup.UserConfig:void deploy()",
            "org.apache.catalina.startup.WebappServiceLoader:java.util.List load(java.lang.Class)",
            "org.apache.catalina.valves.AbstractAccessLogValve$HeaderElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.CrawlerSessionManagerValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.RemoteIpValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.webresources.AbstractSingleArchiveResourceSet:java.util.Map getArchiveEntries(boolean)",
            "org.apache.catalina.webresources.JarContents:void <init>(java.util.jar.JarFile)",
            "org.apache.coyote.CompressionConfig:boolean useCompression(org.apache.coyote.Request,org.apache.coyote.Response)",
            "org.apache.coyote.http2.Http2Protocol:boolean accept(org.apache.coyote.Request)",
            "org.apache.naming.AbstractRef:java.lang.String toString()",
            "org.apache.naming.NamingContext:void <init>(java.util.Hashtable,java.lang.String,java.util.HashMap)",
            "org.apache.naming.factory.BeanFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.naming.factory.MailSessionFactory:jakarta.mail.Session lambda$getObjectInstance$0(javax.naming.Reference)",
            "org.apache.naming.factory.SendMailFactory:jakarta.mail.internet.MimePartDataSource lambda$getObjectInstance$0(javax.naming.Reference)",
            "org.apache.naming.factory.webservices.ServiceRefFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.tomcat.util.http.MimeHeaders:java.lang.String toString()",
            "org.apache.tomcat.util.http.ResponseUtil$HeaderAdapter:java.util.Collection getHeaders(java.lang.String)",
            "org.apache.tomcat.util.http.parser.TokenList:boolean parseTokenList(java.util.Enumeration,java.util.Collection)",
            "org.apache.tomcat.util.http.parser.Upgrade:java.util.List parse(java.util.Enumeration)",
            "org.apache.tomcat.util.modeler.modules.MbeansDescriptorsIntrospectionSource:org.apache.tomcat.util.modeler.ManagedBean createManagedBean(org.apache.tomcat.util.modeler.Registry,java.lang.String,java.lang.Class,java.lang.String)",
            "org.apache.tomcat.util.net.AbstractEndpoint:java.net.InetSocketAddress getUnlockAddress(java.net.InetSocketAddress)",
            "org.apache.tomcat.util.net.SSLUtilBase:javax.net.ssl.KeyManager[] getKeyManagers()",
            "org.apache.tomcat.util.net.SSLUtilBase:void checkTrustStoreEntries(java.security.KeyStore)",
            "org.apache.tomcat.util.res.StringManager:org.apache.tomcat.util.res.StringManager getManager(java.lang.String,java.util.Enumeration)",
            "org.apache.tomcat.util.scan.JarFileUrlJar:void nextEntry()"
        ]
    },
    "org.apache.catalina.core.StandardContext:boolean filterStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.StandardContext:void startInternal()"
        ]
    },
    "org.apache.catalina.manager.HTMLManagerServlet$6:java.lang.Comparable getComparableObject(org.apache.catalina.Session)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.util.BaseSessionComparator:int compare(org.apache.catalina.Session,org.apache.catalina.Session)"
        ]
    },
    "org.apache.catalina.manager.util.BaseSessionComparator:int compare(org.apache.catalina.Session,org.apache.catalina.Session)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.util.BaseSessionComparator:int compare(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.catalina.core.StandardContext:boolean loadOnStartup(org.apache.catalina.Container[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.StandardContext:void startInternal()"
        ]
    },
    "org.apache.catalina.security.SecurityConfig:org.apache.catalina.security.SecurityConfig newInstance()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.Catalina:void setSecurityProtection()"
        ]
    },
    "org.apache.catalina.webresources.StandardRoot:java.lang.String[] list(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.DefaultServlet:java.io.InputStream renderXml(jakarta.servlet.http.HttpServletRequest,java.lang.String,org.apache.catalina.WebResource,javax.xml.transform.Source,java.lang.String)",
            "org.apache.catalina.servlets.WebdavServlet:void doPropfind(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.WebdavServlet:boolean copyResource(java.util.Hashtable,java.lang.String,java.lang.String)",
            "org.apache.catalina.servlets.WebdavServlet:void deleteCollection(jakarta.servlet.http.HttpServletRequest,java.lang.String,java.util.Hashtable)",
            "org.apache.catalina.webresources.CachedResource$CachedResourceJarURLConnection:java.io.InputStream getInputStream()",
            "org.apache.catalina.webresources.CachedResource$CachedResourceURLConnection:java.io.InputStream getInputStream()"
        ]
    },
    "org.apache.catalina.webresources.StandardRoot:org.apache.catalina.WebResource[] listResources(java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.webresources.ExtractingRoot:void processWebInfLib()",
            "org.apache.catalina.webresources.StandardRoot:org.apache.catalina.WebResource[] listResources(java.lang.String)",
            "org.apache.catalina.webresources.StandardRoot:void processWebInfLib()"
        ]
    },
    "org.apache.catalina.core.ApplicationContext:java.util.Set getResourcePaths(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationContextFacade:java.util.Set getResourcePaths(java.lang.String)",
            "org.apache.catalina.core.StandardContext$NoPluggabilityServletContext:java.util.Set getResourcePaths(java.lang.String)",
            "org.apache.tomcat.util.scan.StandardJarScanner:void scan(org.apache.tomcat.JarScanType,jakarta.servlet.ServletContext,org.apache.tomcat.JarScannerCallback)"
        ]
    },
    "org.apache.catalina.webresources.Cache:org.apache.catalina.WebResource getResource(java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.webresources.StandardRoot:org.apache.catalina.WebResource getResource(java.lang.String,boolean,boolean)"
        ]
    },
    "org.apache.catalina.webresources.CachedResource:boolean validateResource(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.webresources.Cache:org.apache.catalina.WebResource getResource(java.lang.String,boolean)"
        ]
    },
    "org.apache.catalina.webresources.StandardRoot:org.apache.catalina.WebResource getResource(java.lang.String,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.webresources.CachedResource$CachedResourceJarURLConnection:org.apache.catalina.WebResource getResource()",
            "org.apache.catalina.webresources.CachedResource$CachedResourceURLConnection:org.apache.catalina.WebResource getResource()",
            "org.apache.catalina.webresources.StandardRoot:org.apache.catalina.WebResource getResource(java.lang.String)",
            "org.apache.catalina.webresources.StandardRoot:org.apache.catalina.WebResource getClassLoaderResource(java.lang.String)",
            "org.apache.catalina.webresources.StandardRoot:org.apache.catalina.WebResource[] listResources(java.lang.String,boolean)"
        ]
    },
    "org.apache.catalina.webresources.CachedResource:boolean validateResources(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.webresources.Cache:org.apache.catalina.WebResource[] getResources(java.lang.String,boolean)"
        ]
    },
    "org.apache.catalina.webresources.StandardRoot:org.apache.catalina.WebResource[] getResources(java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.webresources.StandardRoot:org.apache.catalina.WebResource[] getClassLoaderResources(java.lang.String)",
            "org.apache.catalina.webresources.StandardRoot:org.apache.catalina.WebResource[] getResources(java.lang.String)"
        ]
    },
    "org.apache.catalina.webresources.AbstractArchiveResource:java.io.InputStream doGetInputStream()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.webresources.AbstractResource:java.io.InputStream getInputStream()"
        ]
    },
    "org.apache.coyote.http2.StreamProcessor:void prepareHeaders(org.apache.coyote.Request,org.apache.coyote.Response,boolean,org.apache.coyote.http2.Http2Protocol,org.apache.coyote.http2.Stream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Stream:void <clinit>()",
            "org.apache.coyote.http2.StreamProcessor:void prepareResponse()"
        ]
    },
    "org.apache.naming.NamingContext:javax.naming.Context createSubcontext(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.NamingContextListener:void createNamingContext()",
            "org.apache.catalina.core.NamingContextListener:void createSubcontexts(javax.naming.Context,java.lang.String)",
            "org.apache.naming.SelectorContext:javax.naming.Context createSubcontext(java.lang.String)"
        ]
    },
    "org.apache.catalina.filters.CorsFilter:void addStandardHeaders(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.CorsFilter:void handleSimpleCORS(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.filters.CorsFilter:void handlePreflightCORS(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.filters.CorsFilter:void handleNonCORS(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,jakarta.servlet.FilterChain)"
        ]
    },
    "org.apache.tomcat.util.modeler.Registry:java.util.List load(java.lang.String,java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.modeler.Registry:org.apache.tomcat.util.modeler.ManagedBean findManagedBean(java.lang.Object,java.lang.Class,java.lang.String)",
            "org.apache.tomcat.util.modeler.Registry:void loadDescriptors(java.lang.String,java.lang.ClassLoader)"
        ]
    },
    "org.apache.coyote.AbstractProtocol:void pause()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.Connector:void pause()"
        ]
    },
    "org.apache.tomcat.util.net.NioEndpoint:void stopInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.AbstractEndpoint:void stop()"
        ]
    },
    "org.apache.coyote.AbstractProtocol:void closeServerSocketGraceful()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.StandardService:void stopInternal()"
        ]
    },
    "org.apache.tomcat.util.net.AbstractEndpoint:void addSslHostConfig(org.apache.tomcat.util.net.SSLHostConfig,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.AbstractEndpoint:void addSslHostConfig(org.apache.tomcat.util.net.SSLHostConfig)",
            "org.apache.tomcat.util.net.AbstractEndpoint:void reloadSslHostConfig(java.lang.String)"
        ]
    },
    "org.apache.tomcat.util.net.AbstractJsseEndpoint:void initialiseSsl()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint:void bind()",
            "org.apache.tomcat.util.net.NioEndpoint:void bind()"
        ]
    },
    "org.apache.tomcat.util.net.AprEndpoint:void bind()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.AbstractEndpoint:void bindWithCleanup()"
        ]
    },
    "org.apache.coyote.AbstractProtocol$ConnectionHandler:void release(org.apache.tomcat.util.net.SocketWrapperBase)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SocketWrapperBase:void close()"
        ]
    },
    "org.apache.catalina.startup.PasswdUserDatabase:void setUserConfig(org.apache.catalina.startup.UserConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.UserConfig:void deploy()"
        ]
    },
    "org.apache.coyote.http2.Stream:void prepareRequest()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Stream:void <init>(java.lang.Integer,org.apache.coyote.http2.Http2UpgradeHandler,org.apache.coyote.Request)"
        ]
    },
    "org.apache.coyote.http2.Stream:void emitHeader(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.HpackDecoder:void emitHeader(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.catalina.servlets.DefaultServlet:boolean checkIfMatch(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.catalina.WebResource)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.DefaultServlet:boolean checkIfHeaders(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.catalina.WebResource)"
        ]
    },
    "org.apache.catalina.servlets.DefaultServlet:boolean checkIfNoneMatch(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.catalina.WebResource)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.DefaultServlet:boolean checkIfHeaders(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.catalina.WebResource)"
        ]
    },
    "org.apache.catalina.connector.Request:void parseLocalesHeader(java.lang.String,java.util.TreeMap)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.Request:void parseLocales()"
        ]
    },
    "org.apache.catalina.authenticator.DigestAuthenticator$DigestInfo:boolean parse(org.apache.catalina.connector.Request,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.DigestAuthenticator:boolean doAuthenticate(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.servlets.DefaultServlet:org.apache.tomcat.util.http.parser.ContentRange parseContentRange(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.DefaultServlet:void doPut(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.coyote.Response:void setContentType(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.Response:void setContentType(java.lang.String)",
            "org.apache.coyote.Response:boolean checkSpecialHeader(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.tomcat.util.http.parser.MediaTypeCache:java.lang.String[] parse(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.Response:void setContentType(java.lang.String)"
        ]
    },
    "org.apache.catalina.servlets.DefaultServlet:org.apache.tomcat.util.http.parser.Ranges parseRange(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.catalina.WebResource)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.DefaultServlet:void serveResource(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,boolean,java.lang.String)"
        ]
    },
    "org.apache.catalina.servlets.DefaultServlet:void copy(java.io.InputStream,java.io.PrintWriter,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.DefaultServlet:void serveResource(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,boolean,java.lang.String)"
        ]
    },
    "org.apache.catalina.util.IOTools:void flow(java.io.Reader,java.io.Writer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tomcat.util.json.JavaCharStream:char readChar()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.json.JSONParserTokenManager:int jjMoveStringLiteralDfa1_0(long)",
            "org.apache.tomcat.util.json.JSONParserTokenManager:int jjMoveStringLiteralDfa2_0(long,long)",
            "org.apache.tomcat.util.json.JSONParserTokenManager:int jjMoveStringLiteralDfa3_0(long,long)",
            "org.apache.tomcat.util.json.JSONParserTokenManager:int jjMoveStringLiteralDfa4_0(long,long)",
            "org.apache.tomcat.util.json.JSONParserTokenManager:int jjStartNfaWithStates_0(int,int,int)",
            "org.apache.tomcat.util.json.JSONParserTokenManager:int jjMoveNfa_0(int,int)",
            "org.apache.tomcat.util.json.JSONParserTokenManager:org.apache.tomcat.util.json.Token getNextToken()",
            "org.apache.tomcat.util.json.JavaCharStream:char BeginToken()"
        ]
    },
    "org.apache.juli.AsyncFileHandler:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.juli.AsyncFileHandler$LoggerThread:void run()",
            "org.apache.juli.AsyncFileHandler:void publish(java.util.logging.LogRecord)",
            "org.apache.juli.AsyncFileHandler:void <clinit>()"
        ]
    },
    "org.apache.catalina.manager.ManagerServlet:void printResources(java.io.PrintWriter,java.lang.String,javax.naming.Context,java.lang.String,org.apache.tomcat.util.res.StringManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.ManagerServlet:void resources(java.io.PrintWriter,java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.ManagerServlet:void printResources(java.io.PrintWriter,java.lang.String,javax.naming.Context,java.lang.String,org.apache.tomcat.util.res.StringManager)"
        ]
    },
    "org.apache.catalina.realm.JNDIRealm:java.util.ArrayList addAttributeValues(java.lang.String,javax.naming.directory.Attributes,java.util.ArrayList)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.realm.JNDIRealm:org.apache.catalina.realm.JNDIRealm$User getUserByPattern(javax.naming.directory.DirContext,java.lang.String,java.lang.String[],java.lang.String)",
            "org.apache.catalina.realm.JNDIRealm:org.apache.catalina.realm.JNDIRealm$User getUserBySearch(org.apache.catalina.realm.JNDIRealm$JNDIConnection,java.lang.String,java.lang.String[])"
        ]
    },
    "org.apache.catalina.realm.LockOutRealm:java.security.Principal authenticate(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.AuthenticatorBase:java.security.Principal doLogin(org.apache.catalina.connector.Request,java.lang.String,java.lang.String)",
            "org.apache.catalina.authenticator.BasicAuthenticator:boolean doAuthenticate(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.authenticator.FormAuthenticator:boolean doAuthenticate(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.authenticator.SingleSignOn:boolean reauthenticate(java.lang.String,org.apache.catalina.Realm,org.apache.catalina.connector.Request)",
            "org.apache.catalina.authenticator.jaspic.CallbackHandlerImpl:void handle(javax.security.auth.callback.Callback[])",
            "org.apache.catalina.realm.CombinedRealm:java.security.Principal authenticate(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.catalina.realm.CombinedRealm:java.security.Principal authenticate(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.AuthenticatorBase:boolean checkForCachedAuthentication(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse,boolean)",
            "org.apache.catalina.connector.CoyoteAdapter:void doConnectorAuthenticationAuthorization(org.apache.coyote.Request,org.apache.catalina.connector.Request)",
            "org.apache.catalina.realm.CombinedRealm:java.security.Principal authenticate(java.lang.String)"
        ]
    },
    "org.apache.catalina.authenticator.DigestAuthenticator$DigestInfo:java.security.Principal authenticate(org.apache.catalina.Realm)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.DigestAuthenticator:boolean doAuthenticate(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.realm.CombinedRealm:java.security.Principal authenticate(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.DigestAuthenticator$DigestInfo:java.security.Principal authenticate(org.apache.catalina.Realm)",
            "org.apache.catalina.realm.CombinedRealm:java.security.Principal authenticate(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.catalina.realm.LockOutRealm:java.security.Principal authenticate(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.catalina.realm.RealmBase:java.security.Principal authenticate(java.security.cert.X509Certificate[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.SSLAuthenticator:boolean doAuthenticate(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.realm.CombinedRealm:java.security.Principal authenticate(java.security.cert.X509Certificate[])"
        ]
    },
    "org.apache.catalina.realm.RealmBase:java.security.Principal authenticate(org.ietf.jgss.GSSContext,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.SpnegoAuthenticator$AuthenticateAction:java.security.Principal run()",
            "org.apache.catalina.realm.CombinedRealm:java.security.Principal authenticate(org.ietf.jgss.GSSContext,boolean)"
        ]
    },
    "org.apache.catalina.realm.RealmBase:java.security.Principal authenticate(org.ietf.jgss.GSSName,org.ietf.jgss.GSSCredential)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.realm.CombinedRealm:java.security.Principal authenticate(org.ietf.jgss.GSSName,org.ietf.jgss.GSSCredential)"
        ]
    },
    "org.apache.catalina.session.DataSourceStore:java.lang.String[] expiredKeys()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.session.StoreBase:void processExpires()"
        ]
    },
    "org.apache.catalina.session.DataSourceStore:java.lang.String[] keys()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.session.PersistentManagerBase$PrivilegedStoreKeys:java.lang.String[] run()",
            "org.apache.catalina.session.PersistentManagerBase:void load()",
            "org.apache.catalina.session.PersistentManagerBase:java.util.Set getSessionIdsFull()",
            "org.apache.catalina.session.StoreBase:java.lang.String[] expiredKeys()"
        ]
    },
    "org.apache.catalina.session.PersistentManagerBase:int getActiveSessionsFull()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.HTMLManagerServlet:void list(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.startup.HostConfig:void checkUndeploy()"
        ]
    },
    "org.apache.catalina.session.PersistentManagerBase$PrivilegedStoreLoad:org.apache.catalina.Session run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.session.PersistentManagerBase$PrivilegedStoreLoad:java.lang.Object run()"
        ]
    },
    "org.apache.catalina.session.PersistentManagerBase:org.apache.catalina.Session loadSessionFromStore(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.session.PersistentManagerBase:org.apache.catalina.Session swapIn(java.lang.String)"
        ]
    },
    "org.apache.catalina.session.StoreBase:void processExpires()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.session.PersistentManagerBase:void processExpires()"
        ]
    },
    "org.apache.catalina.session.PersistentManagerBase$PrivilegedStoreRemove:java.lang.Void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.session.PersistentManagerBase$PrivilegedStoreRemove:java.lang.Object run()"
        ]
    },
    "org.apache.catalina.session.PersistentManagerBase:void removeSession(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.session.PersistentManagerBase:void remove(org.apache.catalina.Session,boolean)",
            "org.apache.catalina.session.PersistentManagerBase:org.apache.catalina.Session swapIn(java.lang.String)"
        ]
    },
    "org.apache.catalina.session.PersistentManagerBase$PrivilegedStoreClear:java.lang.Void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.session.PersistentManagerBase$PrivilegedStoreClear:java.lang.Object run()"
        ]
    },
    "org.apache.catalina.session.PersistentManagerBase:void clearStore()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.session.PersistentManagerBase$PrivilegedStoreSave:java.lang.Void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.session.PersistentManagerBase$PrivilegedStoreSave:java.lang.Object run()"
        ]
    },
    "org.apache.catalina.session.PersistentManagerBase:void writeSession(org.apache.catalina.Session)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.session.PersistentManagerBase:void swapOut(org.apache.catalina.Session)",
            "org.apache.catalina.session.PersistentManagerBase:void processMaxIdleBackups()"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.servlet.ServletFileUpload:org.apache.tomcat.util.http.fileupload.FileItemIterator getItemIterator(jakarta.servlet.http.HttpServletRequest)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.core.ContainerBase:void initInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.StandardContext:void initInternal()",
            "org.apache.catalina.core.StandardEngine:void initInternal()",
            "org.apache.catalina.util.LifecycleBase:void init()"
        ]
    },
    "org.apache.catalina.core.StandardThreadExecutor:void initInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void init()"
        ]
    },
    "org.apache.catalina.deploy.NamingResourcesImpl:void initInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void init()"
        ]
    },
    "org.apache.catalina.realm.RealmBase:void initInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void init()"
        ]
    },
    "org.apache.catalina.session.ManagerBase:void initInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void init()"
        ]
    },
    "org.apache.catalina.valves.ValveBase:void initInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.SpnegoAuthenticator:void initInternal()",
            "org.apache.catalina.util.LifecycleBase:void init()",
            "org.apache.catalina.valves.CrawlerSessionManagerValve:void initInternal()",
            "org.apache.catalina.valves.RequestFilterValve:void initInternal()",
            "org.apache.catalina.valves.StuckThreadDetectionValve:void initInternal()",
            "org.apache.catalina.valves.rewrite.RewriteValve:void initInternal()"
        ]
    },
    "org.apache.coyote.AsyncStateMachine:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState asyncPostProcess()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProcessor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState asyncPostProcess()",
            "org.apache.coyote.AbstractProcessor:void action(org.apache.coyote.ActionCode,java.lang.Object)"
        ]
    },
    "org.apache.catalina.core.ApplicationContext:void clearAttributes()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.StandardContext:void stopInternal()"
        ]
    },
    "org.apache.catalina.core.ApplicationContextFacade:void removeAttribute(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.StandardContext$NoPluggabilityServletContext:void removeAttribute(java.lang.String)",
            "org.apache.catalina.loader.WebappLoader:void stopInternal()"
        ]
    },
    "org.apache.catalina.core.StandardContext$NoPluggabilityServletContext:void removeAttribute(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.StandardContext$NoPluggabilityServletContext:void removeAttribute(java.lang.String)",
            "org.apache.catalina.loader.WebappLoader:void stopInternal()"
        ]
    },
    "org.apache.catalina.core.ApplicationContextFacade:void setAttribute(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.StandardContext$NoPluggabilityServletContext:void setAttribute(java.lang.String,java.lang.Object)",
            "org.apache.catalina.core.StandardContext:void startInternal()",
            "org.apache.catalina.filters.CsrfPreventionFilter:void init(jakarta.servlet.FilterConfig)",
            "org.apache.catalina.filters.RestCsrfPreventionFilter:void init(jakarta.servlet.FilterConfig)",
            "org.apache.catalina.loader.WebappLoader:void setClassPath()",
            "org.apache.tomcat.util.descriptor.web.WebXml:java.util.Set orderWebFragments(java.util.Map,jakarta.servlet.ServletContext)"
        ]
    },
    "org.apache.catalina.core.StandardContext$NoPluggabilityServletContext:void setAttribute(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.StandardContext$NoPluggabilityServletContext:void setAttribute(java.lang.String,java.lang.Object)",
            "org.apache.catalina.core.StandardContext:void startInternal()",
            "org.apache.catalina.filters.CsrfPreventionFilter:void init(jakarta.servlet.FilterConfig)",
            "org.apache.catalina.filters.RestCsrfPreventionFilter:void init(jakarta.servlet.FilterConfig)",
            "org.apache.catalina.loader.WebappLoader:void setClassPath()",
            "org.apache.tomcat.util.descriptor.web.WebXml:java.util.Set orderWebFragments(java.util.Map,jakarta.servlet.ServletContext)"
        ]
    },
    "org.apache.catalina.core.StandardContext:void setAltDDName(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.core.StandardContext:jakarta.servlet.ServletContext getServletContext()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.AuthenticatorBase:void startInternal()",
            "org.apache.catalina.authenticator.FormAuthenticator:void forwardToLoginPage(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.descriptor.web.LoginConfig)",
            "org.apache.catalina.authenticator.FormAuthenticator:void forwardToErrorPage(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.descriptor.web.LoginConfig)",
            "org.apache.catalina.connector.CoyoteAdapter:void parseSessionCookiesId(org.apache.catalina.connector.Request)",
            "org.apache.catalina.connector.Request:java.lang.String getRealPath(java.lang.String)",
            "org.apache.catalina.connector.Request:jakarta.servlet.RequestDispatcher getRequestDispatcher(java.lang.String)",
            "org.apache.catalina.connector.Request:void notifyAttributeAssigned(java.lang.String,java.lang.Object,java.lang.Object)",
            "org.apache.catalina.connector.Request:void notifyAttributeRemoved(java.lang.String,java.lang.Object)",
            "org.apache.catalina.connector.Request:jakarta.servlet.ServletContext getServletContext()",
            "org.apache.catalina.connector.Request:java.lang.String getPathTranslated()",
            "org.apache.catalina.connector.Request:void changeSessionId(java.lang.String)",
            "org.apache.catalina.connector.Request:void parseParts(boolean)",
            "org.apache.catalina.connector.Request:org.apache.catalina.Session doGetSession(boolean)",
            "org.apache.catalina.core.ApplicationContext:jakarta.servlet.ServletContext getContext(java.lang.String)",
            "org.apache.catalina.core.ApplicationContext:void removeAttribute(java.lang.String)",
            "org.apache.catalina.core.ApplicationContext:void setAttribute(java.lang.String,java.lang.Object)",
            "org.apache.catalina.core.ApplicationFilterConfig:jakarta.servlet.ServletContext getServletContext()",
            "org.apache.catalina.core.ApplicationHttpRequest:jakarta.servlet.ServletContext getServletContext()",
            "org.apache.catalina.core.ApplicationHttpRequest:jakarta.servlet.RequestDispatcher getRequestDispatcher(java.lang.String)",
            "org.apache.catalina.core.ApplicationSessionCookieConfig:jakarta.servlet.http.Cookie createSessionCookie(org.apache.catalina.Context,java.lang.String,boolean)",
            "org.apache.catalina.core.NamingContextListener:void addService(org.apache.tomcat.util.descriptor.web.ContextService)",
            "org.apache.catalina.core.StandardContext:boolean listenerStart()",
            "org.apache.catalina.core.StandardContext:boolean listenerStop()",
            "org.apache.catalina.core.StandardContext:void startInternal()",
            "org.apache.catalina.core.StandardContext:void mergeParameters()",
            "org.apache.catalina.core.StandardContext:boolean fireRequestInitEvent(jakarta.servlet.ServletRequest)",
            "org.apache.catalina.core.StandardContext:boolean fireRequestDestroyEvent(jakarta.servlet.ServletRequest)",
            "org.apache.catalina.core.StandardContext:void postWorkDirectory()",
            "org.apache.catalina.core.StandardHost$MemoryLeakTrackingListener:void lifecycleEvent(org.apache.catalina.LifecycleEvent)",
            "org.apache.catalina.core.StandardHostValve:boolean custom(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,org.apache.tomcat.util.descriptor.web.ErrorPage)",
            "org.apache.catalina.core.StandardWrapper:jakarta.servlet.ServletContext getServletContext()",
            "org.apache.catalina.loader.WebappLoader:void stopInternal()",
            "org.apache.catalina.loader.WebappLoader:void setPermissions()",
            "org.apache.catalina.loader.WebappLoader:void setClassPath()",
            "org.apache.catalina.session.FileStore:java.io.File directory()",
            "org.apache.catalina.session.StandardManager:java.io.File file()",
            "org.apache.catalina.session.StandardSession:jakarta.servlet.ServletContext getServletContext()",
            "org.apache.catalina.startup.ContextConfig:void webConfig()",
            "org.apache.catalina.startup.ContextConfig:void configureContext(org.apache.tomcat.util.descriptor.web.WebXml)",
            "org.apache.catalina.startup.ContextConfig:org.xml.sax.InputSource getContextWebXmlSource()",
            "org.apache.catalina.startup.ContextConfig:java.util.Map processJarsForWebFragments(org.apache.tomcat.util.descriptor.web.WebXml,org.apache.tomcat.util.descriptor.web.WebXmlParser)",
            "org.apache.catalina.startup.WebappServiceLoader:void <init>(org.apache.catalina.Context)",
            "org.apache.catalina.util.SessionConfig:java.lang.String getConfiguredSessionCookieName(org.apache.catalina.Context)",
            "org.apache.catalina.util.SessionConfig:java.lang.String getSessionCookiePath(org.apache.catalina.Context)",
            "org.apache.catalina.valves.ExtendedAccessLogValve$ServletContextElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.LoadBalancerDrainingValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.rewrite.RewriteValve:void startInternal()",
            "org.apache.catalina.webresources.ExtractingRoot:java.io.File getExpansionTarget()"
        ]
    },
    "org.apache.catalina.core.StandardContext:void postWorkDirectory()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.StandardContext:void setWorkDir(java.lang.String)",
            "org.apache.catalina.core.StandardContext:void startInternal()"
        ]
    },
    "org.apache.catalina.loader.WebappLoader:void setClassPath()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.loader.WebappLoader:void startInternal()"
        ]
    },
    "org.apache.tomcat.util.descriptor.web.WebXml:java.util.Set orderWebFragments(java.util.Map,jakarta.servlet.ServletContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.descriptor.web.WebXml:java.util.Set orderWebFragments(org.apache.tomcat.util.descriptor.web.WebXml,java.util.Map,jakarta.servlet.ServletContext)"
        ]
    },
    "org.apache.catalina.core.ApplicationContext:jakarta.servlet.FilterRegistration$Dynamic addFilter(java.lang.String,java.lang.String,jakarta.servlet.Filter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationContext:jakarta.servlet.FilterRegistration$Dynamic addFilter(java.lang.String,java.lang.String)",
            "org.apache.catalina.core.ApplicationContext:jakarta.servlet.FilterRegistration$Dynamic addFilter(java.lang.String,jakarta.servlet.Filter)",
            "org.apache.catalina.core.ApplicationContext:jakarta.servlet.FilterRegistration$Dynamic addFilter(java.lang.String,java.lang.Class)"
        ]
    },
    "org.apache.catalina.core.ApplicationFilterRegistration:void addMappingForServletNames(java.util.EnumSet,boolean,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.core.ApplicationFilterRegistration:void addMappingForUrlPatterns(java.util.EnumSet,boolean,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.core.ApplicationContext:void declareRoles(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationContextFacade:void declareRoles(java.lang.String[])"
        ]
    },
    "org.apache.catalina.Context:void addServletMappingDecoded(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.core.StandardContext:java.util.Set addServletSecurity(jakarta.servlet.ServletRegistration$Dynamic,jakarta.servlet.ServletSecurityElement)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationServletRegistration:java.util.Set setServletSecurity(jakarta.servlet.ServletSecurityElement)",
            "org.apache.catalina.core.ApplicationServletRegistration:java.util.Set addMapping(java.lang.String[])",
            "org.apache.catalina.startup.WebAnnotationSet:void loadApplicationServletAnnotations(org.apache.catalina.Context)"
        ]
    },
    "org.apache.catalina.core.ApplicationServletRegistration:java.util.Set addMapping(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.core.ApplicationServletRegistration:boolean setInitParameter(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationServletRegistration:java.util.Set setInitParameters(java.util.Map)"
        ]
    },
    "org.apache.catalina.session.PersistentManagerBase:void reactivateLoadedSession(java.lang.String,org.apache.catalina.Session)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.session.PersistentManagerBase:org.apache.catalina.Session swapIn(java.lang.String)"
        ]
    },
    "org.apache.catalina.session.StandardSession:void setId(java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.session.ManagerBase:void changeSessionId(org.apache.catalina.Session,java.lang.String,boolean,boolean)",
            "org.apache.catalina.session.StandardSession:void setId(java.lang.String)"
        ]
    },
    "org.apache.catalina.session.ManagerBase:void changeSessionId(org.apache.catalina.Session,java.lang.String,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.session.ManagerBase:java.lang.String rotateSessionId(org.apache.catalina.Session)",
            "org.apache.catalina.session.ManagerBase:void changeSessionId(org.apache.catalina.Session,java.lang.String)"
        ]
    },
    "org.apache.catalina.session.StandardManager:void doUnload()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.session.StandardManager$PrivilegedDoUnload:java.lang.Void run()",
            "org.apache.catalina.session.StandardManager:void unload()"
        ]
    },
    "org.apache.catalina.session.StandardSession:boolean isValid()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.Request:boolean isRequestedSessionIdValid()",
            "org.apache.catalina.connector.Request:org.apache.catalina.Session doGetSession(boolean)",
            "org.apache.catalina.core.ApplicationHttpRequest:jakarta.servlet.http.HttpSession getSession(boolean)",
            "org.apache.catalina.core.ApplicationHttpRequest:boolean isRequestedSessionIdValid()",
            "org.apache.catalina.session.DataSourceStore:void save(org.apache.catalina.Session)",
            "org.apache.catalina.session.ManagerBase:void processExpires()",
            "org.apache.catalina.session.PersistentManagerBase:void processExpires()",
            "org.apache.catalina.session.PersistentManagerBase:org.apache.catalina.Session swapIn(java.lang.String)",
            "org.apache.catalina.session.PersistentManagerBase:void swapOut(org.apache.catalina.Session)",
            "org.apache.catalina.session.PersistentManagerBase:void writeSession(org.apache.catalina.Session)",
            "org.apache.catalina.session.PersistentManagerBase:void stopInternal()",
            "org.apache.catalina.session.PersistentManagerBase:void processMaxIdleSwaps()",
            "org.apache.catalina.session.PersistentManagerBase:void processMaxIdleBackups()",
            "org.apache.catalina.session.StandardManager:void stopInternal()",
            "org.apache.catalina.valves.PersistentValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)"
        ]
    },
    "org.apache.catalina.session.StandardSession:void expire()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.FormAuthenticator:boolean doAuthenticate(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.authenticator.SingleSignOn:void expire(org.apache.catalina.authenticator.SingleSignOnSessionKey)",
            "org.apache.catalina.manager.ManagerServlet:void sessions(java.io.PrintWriter,org.apache.catalina.util.ContextName,int,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.session.ManagerBase:void expireSession(java.lang.String)",
            "org.apache.catalina.session.PersistentManagerBase:org.apache.catalina.Session swapIn(java.lang.String)",
            "org.apache.catalina.session.PersistentManagerBase:void stopInternal()",
            "org.apache.catalina.session.StandardManager:void doLoad()",
            "org.apache.catalina.session.StandardManager:void stopInternal()",
            "org.apache.catalina.session.StandardSession:void invalidate()",
            "org.apache.catalina.session.StoreBase:void processExpires()",
            "org.apache.catalina.valves.PersistentValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)"
        ]
    },
    "org.apache.catalina.session.StandardSession:void setAttribute(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.Request:void setUserPrincipal(java.security.Principal)",
            "org.apache.catalina.filters.CsrfPreventionFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.security.SecurityUtil:void execute(java.lang.reflect.Method,java.lang.Object,java.lang.Object[],java.security.Principal)",
            "org.apache.catalina.session.StandardSession:void putValue(java.lang.String,java.lang.Object)",
            "org.apache.catalina.session.StandardSessionFacade:void setAttribute(java.lang.String,java.lang.Object)",
            "org.apache.catalina.session.StandardSessionFacade:void putValue(java.lang.String,java.lang.Object)",
            "org.apache.catalina.valves.CrawlerSessionManagerValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.filters.RestCsrfPreventionFilter$RestCsrfPreventionStrategy$setAttribute__37:void setNonce(java.lang.Object,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.catalina.session.StandardSession:void removeAttribute(java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.session.StandardSession:void removeAttribute(java.lang.String)"
        ]
    },
    "org.apache.catalina.session.StandardSession:void doWriteObject(java.io.ObjectOutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.session.StandardSession:void writeObjectData(java.io.ObjectOutputStream)"
        ]
    },
    "org.apache.catalina.realm.JNDIRealm:org.apache.catalina.realm.JNDIRealm$User getUser(org.apache.catalina.realm.JNDIRealm$JNDIConnection,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.realm.JNDIRealm:java.security.Principal getPrincipal(org.apache.catalina.realm.JNDIRealm$JNDIConnection,java.lang.String,org.ietf.jgss.GSSCredential)"
        ]
    },
    "org.apache.catalina.realm.JNDIRealm:org.apache.catalina.realm.JNDIRealm$User getUser(org.apache.catalina.realm.JNDIRealm$JNDIConnection,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.realm.JNDIRealm:java.security.Principal authenticate(org.apache.catalina.realm.JNDIRealm$JNDIConnection,java.lang.String,java.lang.String)",
            "org.apache.catalina.realm.JNDIRealm:java.lang.String getPassword(java.lang.String)"
        ]
    },
    "org.apache.catalina.realm.JNDIRealm:java.security.Principal authenticate(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.AuthenticatorBase:java.security.Principal doLogin(org.apache.catalina.connector.Request,java.lang.String,java.lang.String)",
            "org.apache.catalina.authenticator.BasicAuthenticator:boolean doAuthenticate(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.authenticator.FormAuthenticator:boolean doAuthenticate(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.authenticator.SingleSignOn:boolean reauthenticate(java.lang.String,org.apache.catalina.Realm,org.apache.catalina.connector.Request)",
            "org.apache.catalina.authenticator.jaspic.CallbackHandlerImpl:void handle(javax.security.auth.callback.Callback[])",
            "org.apache.catalina.realm.CombinedRealm:java.security.Principal authenticate(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.catalina.realm.JNDIRealm:java.security.Principal getPrincipal(java.lang.String,org.ietf.jgss.GSSCredential)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.realm.JNDIRealm:java.security.Principal getPrincipal(java.lang.String)",
            "org.apache.catalina.realm.JNDIRealm:java.security.Principal getPrincipal(org.ietf.jgss.GSSName,org.ietf.jgss.GSSCredential)"
        ]
    },
    "org.apache.catalina.util.LifecycleBase:void invalidTransition(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void init()",
            "org.apache.catalina.util.LifecycleBase:void start()",
            "org.apache.catalina.util.LifecycleBase:void stop()",
            "org.apache.catalina.util.LifecycleBase:void destroy()",
            "org.apache.catalina.util.LifecycleBase:void setStateInternal(org.apache.catalina.LifecycleState,java.lang.Object,boolean)"
        ]
    },
    "org.apache.catalina.core.StandardPipeline:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.Connector:java.lang.String createObjectNameKeyProperties(java.lang.String)",
            "org.apache.catalina.connector.Request$2:java.lang.Object get(org.apache.catalina.connector.Request,java.lang.String)",
            "org.apache.catalina.connector.Request:void setAttribute(java.lang.String,java.lang.Object)",
            "org.apache.catalina.core.ApplicationFilterFactory:org.apache.catalina.core.ApplicationFilterChain createFilterChain(jakarta.servlet.ServletRequest,org.apache.catalina.Wrapper,jakarta.servlet.Servlet)",
            "org.apache.catalina.core.ApplicationHttpRequest:java.lang.Object getAttribute(java.lang.String)",
            "org.apache.catalina.core.DefaultInstanceManager:void loadProperties(java.util.Set,java.lang.String,java.lang.String,org.apache.juli.logging.Log)",
            "org.apache.catalina.core.NamingContextListener:void addResourceLink(org.apache.tomcat.util.descriptor.web.ContextResourceLink)",
            "org.apache.catalina.loader.WebappClassLoaderBase:void checkThreadLocalMapForLeaks(java.lang.Object,java.lang.reflect.Field)",
            "org.apache.catalina.manager.JMXProxyServlet:void getAttribute(java.io.PrintWriter,java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.catalina.manager.JMXProxyServlet:void output(java.lang.String,java.io.PrintWriter,java.lang.Object)",
            "org.apache.catalina.manager.JspHelper:java.lang.String escapeXml(java.lang.Object)",
            "org.apache.catalina.mapper.MapperListener:void containerEvent(org.apache.catalina.ContainerEvent)",
            "org.apache.catalina.mbeans.MBeanDumper:java.lang.String valueToString(java.lang.Object)",
            "org.apache.catalina.realm.JNDIRealm:java.lang.String getAttributeValue(java.lang.String,javax.naming.directory.Attributes)",
            "org.apache.catalina.servlets.CGIServlet$CGIRunner:java.lang.String[] hashToStringArray(java.util.Hashtable)",
            "org.apache.catalina.session.ManagerBase:java.lang.String getSessionAttribute(java.lang.String,java.lang.String)",
            "org.apache.catalina.users.MemoryUserDatabaseFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.catalina.util.LifecycleBase:void init()",
            "org.apache.catalina.util.LifecycleBase:void start()",
            "org.apache.catalina.util.LifecycleBase:void stop()",
            "org.apache.catalina.util.LifecycleBase:void destroy()",
            "org.apache.catalina.util.LifecycleBase:void invalidTransition(java.lang.String)",
            "org.apache.catalina.util.ToStringUtil:java.lang.String containedToString(java.lang.Object,java.lang.Object,java.lang.String)",
            "org.apache.catalina.valves.AbstractAccessLogValve$HostElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.AbstractAccessLogValve$LocalServerNameElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.AbstractAccessLogValve$PortElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.AbstractAccessLogValve$ProtocolElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.AbstractAccessLogValve$RemoteAddrElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.AbstractAccessLogValve$RequestAttributeElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.AbstractAccessLogValve$SessionAttributeElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.ExtendedAccessLogValve:java.lang.String wrap(java.lang.Object)",
            "org.apache.catalina.valves.rewrite.ResolverImpl:java.lang.String resolveEnv(java.lang.String)",
            "org.apache.naming.ContextBindings:java.lang.String getThreadName()",
            "org.apache.naming.ContextBindings:java.lang.String getClassLoaderName()",
            "org.apache.naming.factory.DataSourceLinkFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.naming.factory.EjbFactory:java.lang.Object getLinked(javax.naming.Reference)",
            "org.apache.naming.factory.FactoryBase:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.naming.factory.LookupFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.naming.factory.OpenEjbFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.naming.factory.ResourceLinkFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.tomcat.util.descriptor.web.CallMethodMultiRule:void end(java.lang.String,java.lang.String)",
            "org.apache.tomcat.util.descriptor.web.WebXml:void appendElement(java.lang.StringBuilder,java.lang.String,java.lang.String,java.lang.Object)",
            "org.apache.tomcat.util.digester.CallMethodRule:void end(java.lang.String,java.lang.String)",
            "org.apache.tomcat.util.json.JSONParser:java.lang.String objectKey()",
            "org.apache.tomcat.util.modeler.BaseModelMBean:java.lang.String toString()",
            "org.apache.tomcat.util.net.AbstractEndpoint:java.lang.String getProperty(java.lang.String)",
            "org.apache.tomcat.util.security.Escape:java.lang.String htmlElementContent(java.lang.Object)"
        ]
    },
    "org.apache.catalina.realm.RealmBase:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.Connector:java.lang.String createObjectNameKeyProperties(java.lang.String)",
            "org.apache.catalina.connector.Request$2:java.lang.Object get(org.apache.catalina.connector.Request,java.lang.String)",
            "org.apache.catalina.connector.Request:void setAttribute(java.lang.String,java.lang.Object)",
            "org.apache.catalina.core.ApplicationFilterFactory:org.apache.catalina.core.ApplicationFilterChain createFilterChain(jakarta.servlet.ServletRequest,org.apache.catalina.Wrapper,jakarta.servlet.Servlet)",
            "org.apache.catalina.core.ApplicationHttpRequest:java.lang.Object getAttribute(java.lang.String)",
            "org.apache.catalina.core.DefaultInstanceManager:void loadProperties(java.util.Set,java.lang.String,java.lang.String,org.apache.juli.logging.Log)",
            "org.apache.catalina.core.NamingContextListener:void addResourceLink(org.apache.tomcat.util.descriptor.web.ContextResourceLink)",
            "org.apache.catalina.loader.WebappClassLoaderBase:void checkThreadLocalMapForLeaks(java.lang.Object,java.lang.reflect.Field)",
            "org.apache.catalina.manager.JMXProxyServlet:void getAttribute(java.io.PrintWriter,java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.catalina.manager.JMXProxyServlet:void output(java.lang.String,java.io.PrintWriter,java.lang.Object)",
            "org.apache.catalina.manager.JspHelper:java.lang.String escapeXml(java.lang.Object)",
            "org.apache.catalina.mapper.MapperListener:void containerEvent(org.apache.catalina.ContainerEvent)",
            "org.apache.catalina.mbeans.MBeanDumper:java.lang.String valueToString(java.lang.Object)",
            "org.apache.catalina.realm.JNDIRealm:java.lang.String getAttributeValue(java.lang.String,javax.naming.directory.Attributes)",
            "org.apache.catalina.servlets.CGIServlet$CGIRunner:java.lang.String[] hashToStringArray(java.util.Hashtable)",
            "org.apache.catalina.session.ManagerBase:java.lang.String getSessionAttribute(java.lang.String,java.lang.String)",
            "org.apache.catalina.users.MemoryUserDatabaseFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.catalina.util.LifecycleBase:void init()",
            "org.apache.catalina.util.LifecycleBase:void start()",
            "org.apache.catalina.util.LifecycleBase:void stop()",
            "org.apache.catalina.util.LifecycleBase:void destroy()",
            "org.apache.catalina.util.LifecycleBase:void invalidTransition(java.lang.String)",
            "org.apache.catalina.util.ToStringUtil:java.lang.String containedToString(java.lang.Object,java.lang.Object,java.lang.String)",
            "org.apache.catalina.valves.AbstractAccessLogValve$HostElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.AbstractAccessLogValve$LocalServerNameElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.AbstractAccessLogValve$PortElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.AbstractAccessLogValve$ProtocolElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.AbstractAccessLogValve$RemoteAddrElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.AbstractAccessLogValve$RequestAttributeElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.AbstractAccessLogValve$SessionAttributeElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.ExtendedAccessLogValve:java.lang.String wrap(java.lang.Object)",
            "org.apache.catalina.valves.rewrite.ResolverImpl:java.lang.String resolveEnv(java.lang.String)",
            "org.apache.naming.ContextBindings:java.lang.String getThreadName()",
            "org.apache.naming.ContextBindings:java.lang.String getClassLoaderName()",
            "org.apache.naming.factory.DataSourceLinkFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.naming.factory.EjbFactory:java.lang.Object getLinked(javax.naming.Reference)",
            "org.apache.naming.factory.FactoryBase:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.naming.factory.LookupFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.naming.factory.OpenEjbFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.naming.factory.ResourceLinkFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.tomcat.util.descriptor.web.CallMethodMultiRule:void end(java.lang.String,java.lang.String)",
            "org.apache.tomcat.util.descriptor.web.WebXml:void appendElement(java.lang.StringBuilder,java.lang.String,java.lang.String,java.lang.Object)",
            "org.apache.tomcat.util.digester.CallMethodRule:void end(java.lang.String,java.lang.String)",
            "org.apache.tomcat.util.json.JSONParser:java.lang.String objectKey()",
            "org.apache.tomcat.util.modeler.BaseModelMBean:java.lang.String toString()",
            "org.apache.tomcat.util.net.AbstractEndpoint:java.lang.String getProperty(java.lang.String)",
            "org.apache.tomcat.util.security.Escape:java.lang.String htmlElementContent(java.lang.Object)"
        ]
    },
    "org.apache.catalina.valves.ValveBase:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.Connector:java.lang.String createObjectNameKeyProperties(java.lang.String)",
            "org.apache.catalina.connector.Request$2:java.lang.Object get(org.apache.catalina.connector.Request,java.lang.String)",
            "org.apache.catalina.connector.Request:void setAttribute(java.lang.String,java.lang.Object)",
            "org.apache.catalina.core.ApplicationFilterFactory:org.apache.catalina.core.ApplicationFilterChain createFilterChain(jakarta.servlet.ServletRequest,org.apache.catalina.Wrapper,jakarta.servlet.Servlet)",
            "org.apache.catalina.core.ApplicationHttpRequest:java.lang.Object getAttribute(java.lang.String)",
            "org.apache.catalina.core.DefaultInstanceManager:void loadProperties(java.util.Set,java.lang.String,java.lang.String,org.apache.juli.logging.Log)",
            "org.apache.catalina.core.NamingContextListener:void addResourceLink(org.apache.tomcat.util.descriptor.web.ContextResourceLink)",
            "org.apache.catalina.loader.WebappClassLoaderBase:void checkThreadLocalMapForLeaks(java.lang.Object,java.lang.reflect.Field)",
            "org.apache.catalina.manager.JMXProxyServlet:void getAttribute(java.io.PrintWriter,java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.catalina.manager.JMXProxyServlet:void output(java.lang.String,java.io.PrintWriter,java.lang.Object)",
            "org.apache.catalina.manager.JspHelper:java.lang.String escapeXml(java.lang.Object)",
            "org.apache.catalina.mapper.MapperListener:void containerEvent(org.apache.catalina.ContainerEvent)",
            "org.apache.catalina.mbeans.MBeanDumper:java.lang.String valueToString(java.lang.Object)",
            "org.apache.catalina.realm.JNDIRealm:java.lang.String getAttributeValue(java.lang.String,javax.naming.directory.Attributes)",
            "org.apache.catalina.servlets.CGIServlet$CGIRunner:java.lang.String[] hashToStringArray(java.util.Hashtable)",
            "org.apache.catalina.session.ManagerBase:java.lang.String getSessionAttribute(java.lang.String,java.lang.String)",
            "org.apache.catalina.users.MemoryUserDatabaseFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.catalina.util.LifecycleBase:void init()",
            "org.apache.catalina.util.LifecycleBase:void start()",
            "org.apache.catalina.util.LifecycleBase:void stop()",
            "org.apache.catalina.util.LifecycleBase:void destroy()",
            "org.apache.catalina.util.LifecycleBase:void invalidTransition(java.lang.String)",
            "org.apache.catalina.util.ToStringUtil:java.lang.String containedToString(java.lang.Object,java.lang.Object,java.lang.String)",
            "org.apache.catalina.valves.AbstractAccessLogValve$HostElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.AbstractAccessLogValve$LocalServerNameElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.AbstractAccessLogValve$PortElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.AbstractAccessLogValve$ProtocolElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.AbstractAccessLogValve$RemoteAddrElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.AbstractAccessLogValve$RequestAttributeElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.AbstractAccessLogValve$SessionAttributeElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.ExtendedAccessLogValve:java.lang.String wrap(java.lang.Object)",
            "org.apache.catalina.valves.rewrite.ResolverImpl:java.lang.String resolveEnv(java.lang.String)",
            "org.apache.naming.ContextBindings:java.lang.String getThreadName()",
            "org.apache.naming.ContextBindings:java.lang.String getClassLoaderName()",
            "org.apache.naming.factory.DataSourceLinkFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.naming.factory.EjbFactory:java.lang.Object getLinked(javax.naming.Reference)",
            "org.apache.naming.factory.FactoryBase:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.naming.factory.LookupFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.naming.factory.OpenEjbFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.naming.factory.ResourceLinkFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.tomcat.util.descriptor.web.CallMethodMultiRule:void end(java.lang.String,java.lang.String)",
            "org.apache.tomcat.util.descriptor.web.WebXml:void appendElement(java.lang.StringBuilder,java.lang.String,java.lang.String,java.lang.Object)",
            "org.apache.tomcat.util.digester.CallMethodRule:void end(java.lang.String,java.lang.String)",
            "org.apache.tomcat.util.json.JSONParser:java.lang.String objectKey()",
            "org.apache.tomcat.util.modeler.BaseModelMBean:java.lang.String toString()",
            "org.apache.tomcat.util.net.AbstractEndpoint:java.lang.String getProperty(java.lang.String)",
            "org.apache.tomcat.util.security.Escape:java.lang.String htmlElementContent(java.lang.Object)"
        ]
    },
    "org.apache.naming.NamingContext:void bind(javax.naming.Name,java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.naming.NamingContext:void bind(javax.naming.Name,java.lang.Object)",
            "org.apache.naming.NamingContext:void rebind(javax.naming.Name,java.lang.Object)"
        ]
    },
    "org.apache.naming.NamingContext:void unbind(javax.naming.Name)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.naming.NamingContext:void unbind(javax.naming.Name)",
            "org.apache.naming.NamingContext:void unbind(java.lang.String)",
            "org.apache.naming.NamingContext:void rename(javax.naming.Name,javax.naming.Name)",
            "org.apache.naming.SelectorContext:void unbind(javax.naming.Name)"
        ]
    },
    "org.apache.catalina.core.NamingContextListener:void removeEjb(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.NamingContextListener:void processGlobalResourcesChange(java.lang.String,java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.catalina.core.NamingContextListener:void removeEnvironment(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.NamingContextListener:void processGlobalResourcesChange(java.lang.String,java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.catalina.core.NamingContextListener:void removeLocalEjb(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.NamingContextListener:void processGlobalResourcesChange(java.lang.String,java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.catalina.core.NamingContextListener:void removeMessageDestinationRef(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.NamingContextListener:void processGlobalResourcesChange(java.lang.String,java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.catalina.core.NamingContextListener:void removeService(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.NamingContextListener:void processGlobalResourcesChange(java.lang.String,java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.catalina.core.NamingContextListener:void removeResource(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.NamingContextListener:void processGlobalResourcesChange(java.lang.String,java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.catalina.core.NamingContextListener:void removeResourceEnvRef(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.NamingContextListener:void processGlobalResourcesChange(java.lang.String,java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.catalina.core.NamingContextListener:void removeResourceLink(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.NamingContextListener:void processGlobalResourcesChange(java.lang.String,java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.naming.NamingContext:javax.naming.NamingEnumeration list(javax.naming.Name)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.naming.NamingContext:javax.naming.NamingEnumeration list(javax.naming.Name)",
            "org.apache.naming.NamingContext:javax.naming.NamingEnumeration list(java.lang.String)",
            "org.apache.naming.SelectorContext:javax.naming.NamingEnumeration list(javax.naming.Name)"
        ]
    },
    "org.apache.naming.NamingContext:javax.naming.NamingEnumeration listBindings(javax.naming.Name)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.naming.NamingContext:javax.naming.NamingEnumeration listBindings(javax.naming.Name)",
            "org.apache.naming.NamingContext:javax.naming.NamingEnumeration listBindings(java.lang.String)",
            "org.apache.naming.SelectorContext:javax.naming.NamingEnumeration listBindings(javax.naming.Name)"
        ]
    },
    "org.apache.naming.NamingContext:void destroySubcontext(javax.naming.Name)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.naming.NamingContext:void destroySubcontext(javax.naming.Name)",
            "org.apache.naming.NamingContext:void destroySubcontext(java.lang.String)",
            "org.apache.naming.SelectorContext:void destroySubcontext(javax.naming.Name)"
        ]
    },
    "org.apache.naming.NamingContext:javax.naming.NameParser getNameParser(javax.naming.Name)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.naming.NamingContext:javax.naming.NameParser getNameParser(javax.naming.Name)",
            "org.apache.naming.NamingContext:javax.naming.NameParser getNameParser(java.lang.String)",
            "org.apache.naming.SelectorContext:javax.naming.NameParser getNameParser(javax.naming.Name)"
        ]
    },
    "org.apache.tomcat.util.json.JSONParser:java.lang.Object parse()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tomcat.util.json.JSONParser:java.util.ArrayList list()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.json.JSONParser:java.util.ArrayList parseArray()",
            "org.apache.tomcat.util.json.JSONParser:java.lang.Object anything()"
        ]
    },
    "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream:void print(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream:void print(boolean)"
        ]
    },
    "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream:void print(char)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream:void print(char)"
        ]
    },
    "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream:void print(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream:void print(int)"
        ]
    },
    "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream:void print(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream:void print(long)"
        ]
    },
    "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream:void print(float)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream:void print(float)"
        ]
    },
    "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream:void print(double)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream:void print(double)"
        ]
    },
    "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream:void println()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream:void println()",
            "org.apache.catalina.servlets.DefaultServlet:void copy(org.apache.catalina.WebResource,long,jakarta.servlet.ServletOutputStream,org.apache.tomcat.util.http.parser.Ranges,java.lang.String)"
        ]
    },
    "jakarta.servlet.ServletOutputStream:void println(char)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream:void println(char)"
        ]
    },
    "jakarta.servlet.ServletOutputStream:void println(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream:void println(int)"
        ]
    },
    "jakarta.servlet.ServletOutputStream:void println(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream:void println(long)"
        ]
    },
    "jakarta.servlet.ServletOutputStream:void println(float)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream:void println(float)"
        ]
    },
    "jakarta.servlet.ServletOutputStream:void println(double)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream:void println(double)"
        ]
    },
    "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream:void println(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletOutputStream:void println(char)",
            "jakarta.servlet.ServletOutputStream:void println(int)",
            "jakarta.servlet.ServletOutputStream:void println(long)",
            "jakarta.servlet.ServletOutputStream:void println(float)",
            "jakarta.servlet.ServletOutputStream:void println(double)",
            "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream:void println(java.lang.String)",
            "org.apache.catalina.servlets.DefaultServlet:void copy(org.apache.catalina.WebResource,long,jakarta.servlet.ServletOutputStream,org.apache.tomcat.util.http.parser.Ranges,java.lang.String)"
        ]
    },
    "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream:void println(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream:void println(boolean)"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.ParameterParser:java.util.Map parse(java.lang.String,char)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationPart:java.lang.String getSubmittedFileName()",
            "org.apache.tomcat.util.http.fileupload.FileUploadBase:java.lang.String getFileName(java.lang.String)",
            "org.apache.tomcat.util.http.fileupload.FileUploadBase:java.lang.String getFieldName(java.lang.String)",
            "org.apache.tomcat.util.http.fileupload.ParameterParser:java.util.Map parse(java.lang.String,char[])",
            "org.apache.tomcat.util.http.fileupload.disk.DiskFileItem:java.lang.String getCharSet()"
        ]
    },
    "org.apache.coyote.http2.Http2AsyncUpgradeHandler:void access$300(org.apache.coyote.http2.Http2AsyncUpgradeHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2AsyncUpgradeHandler$AsyncPingManager:void sendPing(boolean)",
            "org.apache.coyote.http2.Http2AsyncUpgradeHandler$AsyncPingManager:void receivePing(byte[],boolean)",
            "org.apache.coyote.http2.Http2AsyncUpgradeHandler$SendfileCompletionHandler:void completed(java.lang.Long,org.apache.coyote.http2.SendfileData)"
        ]
    },
    "org.apache.catalina.realm.JAASMemoryLoginModule:void initialize(javax.security.auth.Subject,javax.security.auth.callback.CallbackHandler,java.util.Map,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.core.ApplicationContextFacade:jakarta.servlet.ServletRegistration$Dynamic addServlet(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.core.ApplicationContextFacade:jakarta.servlet.ServletRegistration$Dynamic addServlet(java.lang.String,jakarta.servlet.Servlet)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.core.ApplicationContextFacade:jakarta.servlet.ServletRegistration$Dynamic addServlet(java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.core.ApplicationContextFacade:jakarta.servlet.ServletRegistration$Dynamic addJspFile(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.startup.Tomcat$DefaultWebXmlListener:void lifecycleEvent(org.apache.catalina.LifecycleEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void fireLifecycleEvent(java.lang.String,java.lang.Object)"
        ]
    },
    "org.apache.catalina.startup.HostConfig$DeployDescriptor:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.AsyncContextImpl$RunnableWrapper:void run()",
            "org.apache.catalina.core.AsyncContextImpl:void doInternalDispatch()",
            "org.apache.catalina.core.StandardThreadExecutor:void execute(java.lang.Runnable)",
            "org.apache.coyote.AbstractProcessor:void execute(java.lang.Runnable)",
            "org.apache.coyote.AsyncStateMachine:void asyncRun(java.lang.Runnable)",
            "org.apache.tomcat.util.net.Nio2Endpoint:void stopInternal()",
            "org.apache.tomcat.util.net.SecureNio2Channel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()",
            "org.apache.tomcat.util.net.SecureNioChannel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()",
            "org.apache.tomcat.util.net.SocketWrapperBase:void execute(java.lang.Runnable)",
            "org.apache.tomcat.util.threads.InlineExecutorService:void execute(java.lang.Runnable)",
            "org.apache.tomcat.util.threads.ScheduledThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.tomcat.util.threads.TaskThread$WrappingRunnable:void run()",
            "org.apache.tomcat.util.threads.ThreadPoolExecutor:void execute(java.lang.Runnable,long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.apache.catalina.startup.HostConfig$DeployDirectory:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.AsyncContextImpl$RunnableWrapper:void run()",
            "org.apache.catalina.core.AsyncContextImpl:void doInternalDispatch()",
            "org.apache.catalina.core.StandardThreadExecutor:void execute(java.lang.Runnable)",
            "org.apache.coyote.AbstractProcessor:void execute(java.lang.Runnable)",
            "org.apache.coyote.AsyncStateMachine:void asyncRun(java.lang.Runnable)",
            "org.apache.tomcat.util.net.Nio2Endpoint:void stopInternal()",
            "org.apache.tomcat.util.net.SecureNio2Channel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()",
            "org.apache.tomcat.util.net.SecureNioChannel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()",
            "org.apache.tomcat.util.net.SocketWrapperBase:void execute(java.lang.Runnable)",
            "org.apache.tomcat.util.threads.InlineExecutorService:void execute(java.lang.Runnable)",
            "org.apache.tomcat.util.threads.ScheduledThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.tomcat.util.threads.TaskThread$WrappingRunnable:void run()",
            "org.apache.tomcat.util.threads.ThreadPoolExecutor:void execute(java.lang.Runnable,long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.apache.catalina.startup.UserConfig:void access$000(org.apache.catalina.startup.UserConfig,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.UserConfig$DeployUserDirectory:void run()"
        ]
    },
    "org.apache.catalina.startup.Tomcat:void init(org.apache.tomcat.util.file.ConfigurationSource)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.core.StandardThreadExecutor:void startInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void start()"
        ]
    },
    "org.apache.catalina.core.StandardThreadExecutor:void stopInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void stop()"
        ]
    },
    "org.apache.catalina.loader.WebappLoader:void startInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void start()"
        ]
    },
    "org.apache.catalina.mapper.MapperListener:void startInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void start()"
        ]
    },
    "org.apache.catalina.mapper.MapperListener:void stopInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void stop()"
        ]
    },
    "org.apache.catalina.realm.RealmBase:void startInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.realm.CombinedRealm:void startInternal()",
            "org.apache.catalina.realm.DataSourceRealm:void startInternal()",
            "org.apache.catalina.realm.JAASRealm:void startInternal()",
            "org.apache.catalina.realm.JNDIRealm:void startInternal()",
            "org.apache.catalina.realm.MemoryRealm:void startInternal()",
            "org.apache.catalina.realm.UserDatabaseRealm:void startInternal()",
            "org.apache.catalina.util.LifecycleBase:void start()"
        ]
    },
    "org.apache.catalina.realm.RealmBase:void stopInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.realm.CombinedRealm:void stopInternal()",
            "org.apache.catalina.realm.JNDIRealm:void stopInternal()",
            "org.apache.catalina.realm.UserDatabaseRealm:void stopInternal()",
            "org.apache.catalina.util.LifecycleBase:void stop()"
        ]
    },
    "org.apache.catalina.session.StoreBase:void startInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void start()"
        ]
    },
    "org.apache.catalina.session.StoreBase:void stopInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void stop()"
        ]
    },
    "org.apache.catalina.util.SessionIdGeneratorBase:void startInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void start()"
        ]
    },
    "org.apache.catalina.util.SessionIdGeneratorBase:void stopInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void stop()"
        ]
    },
    "org.apache.catalina.valves.AbstractAccessLogValve:void startInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.valves.AccessLogValve:void startInternal()"
        ]
    },
    "org.apache.catalina.valves.AbstractAccessLogValve:void stopInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.valves.AccessLogValve:void stopInternal()"
        ]
    },
    "org.apache.catalina.valves.JDBCAccessLogValve:void startInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void start()"
        ]
    },
    "org.apache.catalina.valves.JDBCAccessLogValve:void stopInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void stop()"
        ]
    },
    "org.apache.catalina.valves.SemaphoreValve:void startInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void start()"
        ]
    },
    "org.apache.catalina.valves.SemaphoreValve:void stopInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void stop()"
        ]
    },
    "org.apache.catalina.valves.ValveBase:void startInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.AuthenticatorBase:void startInternal()",
            "org.apache.catalina.authenticator.SingleSignOn:void startInternal()",
            "org.apache.catalina.util.LifecycleBase:void start()",
            "org.apache.catalina.valves.HealthCheckValve:void startInternal()",
            "org.apache.catalina.valves.RequestFilterValve:void startInternal()",
            "org.apache.catalina.valves.rewrite.RewriteValve:void startInternal()"
        ]
    },
    "org.apache.catalina.valves.ValveBase:void stopInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.AuthenticatorBase:void stopInternal()",
            "org.apache.catalina.authenticator.SingleSignOn:void stopInternal()",
            "org.apache.catalina.util.LifecycleBase:void stop()",
            "org.apache.catalina.valves.rewrite.RewriteValve:void stopInternal()"
        ]
    },
    "org.apache.catalina.webresources.AbstractResourceSet:void startInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void start()"
        ]
    },
    "org.apache.catalina.webresources.AbstractResourceSet:void stopInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void stop()"
        ]
    },
    "org.apache.catalina.webresources.EmptyResourceSet:void startInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void start()"
        ]
    },
    "org.apache.catalina.webresources.EmptyResourceSet:void stopInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void stop()"
        ]
    },
    "org.apache.tomcat.util.net.AprEndpoint:void access$100(org.apache.tomcat.util.net.AprEndpoint,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.AprEndpoint$Poller:void destroy()",
            "org.apache.tomcat.util.net.AprEndpoint$Poller:void run()",
            "org.apache.tomcat.util.net.AprEndpoint$Sendfile:void destroy()",
            "org.apache.tomcat.util.net.AprEndpoint$Sendfile:void run()"
        ]
    },
    "org.apache.catalina.connector.CoyoteWriter:void write(char[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.CoyoteWriter:void print(char[])",
            "org.apache.catalina.connector.CoyoteWriter:void println()",
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void write(char[])"
        ]
    },
    "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void write(char[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void write(char[],int,int)",
            "org.apache.catalina.servlets.DefaultServlet:java.io.IOException copyRange(java.io.Reader,java.io.PrintWriter)",
            "org.apache.catalina.util.IOTools:void flow(java.io.Reader,java.io.Writer,char[])"
        ]
    },
    "org.apache.catalina.connector.CoyoteWriter:void print(char)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.CoyoteWriter:void println(char)",
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void print(char)",
            "org.apache.catalina.manager.ManagerServlet:void printResources(java.io.PrintWriter,java.lang.String,javax.naming.Context,java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.StatusTransformer:void writeOSState(java.io.PrintWriter,int,java.lang.Object[])",
            "org.apache.catalina.manager.StatusTransformer:void writeVMState(java.io.PrintWriter,int,java.lang.Object[])",
            "org.apache.catalina.manager.StatusTransformer:void writeConnectorState(java.io.PrintWriter,javax.management.ObjectName,java.lang.String,javax.management.MBeanServer,java.util.Vector,java.util.Vector,int,java.lang.Object[])",
            "org.apache.catalina.util.DOMWriter:void print(org.w3c.dom.Node)"
        ]
    },
    "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void write(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void write(int)",
            "org.apache.catalina.manager.StatusTransformer:void writeProcessorState(java.io.PrintWriter,javax.management.ObjectName,javax.management.MBeanServer,int)"
        ]
    },
    "org.apache.catalina.connector.CoyoteWriter:void write(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.jaspic.PersistentProviderRegistrations:void writeOptional(java.lang.String,java.lang.String,java.io.Writer)",
            "org.apache.catalina.connector.CoyoteWriter:void print(boolean)",
            "org.apache.catalina.connector.CoyoteWriter:void print(int)",
            "org.apache.catalina.connector.CoyoteWriter:void print(long)",
            "org.apache.catalina.connector.CoyoteWriter:void print(float)",
            "org.apache.catalina.connector.CoyoteWriter:void print(double)",
            "org.apache.catalina.connector.CoyoteWriter:void print(java.lang.String)",
            "org.apache.catalina.connector.CoyoteWriter:void print(java.lang.Object)",
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void write(java.lang.String)",
            "org.apache.catalina.filters.RemoteCIDRFilter:void sendErrorWhenNotHttp(jakarta.servlet.ServletResponse)",
            "org.apache.catalina.filters.RequestFilter:void sendErrorWhenNotHttp(jakarta.servlet.ServletResponse)",
            "org.apache.catalina.manager.StatusTransformer:void writeHeader(java.io.PrintWriter,java.lang.Object[],int)",
            "org.apache.catalina.manager.StatusTransformer:void writeFooter(java.io.PrintWriter,int)",
            "org.apache.catalina.manager.StatusTransformer:void writeVMState(java.io.PrintWriter,int,java.lang.Object[])",
            "org.apache.catalina.manager.StatusTransformer:void writeConnectorState(java.io.PrintWriter,javax.management.ObjectName,java.lang.String,javax.management.MBeanServer,java.util.Vector,java.util.Vector,int,java.lang.Object[])",
            "org.apache.catalina.manager.StatusTransformer:void writeProcessorState(java.io.PrintWriter,javax.management.ObjectName,javax.management.MBeanServer,int)",
            "org.apache.catalina.servlets.DefaultServlet:java.io.InputStream renderHtml(jakarta.servlet.http.HttpServletRequest,java.lang.String,org.apache.catalina.WebResource,java.lang.String)",
            "org.apache.catalina.servlets.WebdavServlet:void doLock(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.WebdavServlet:void sendReport(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,java.util.Hashtable)",
            "org.apache.catalina.util.XMLWriter:void sendData()",
            "org.apache.catalina.valves.ErrorReportValve:void report(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,java.lang.Throwable)",
            "org.apache.catalina.valves.JsonErrorReportValve:void report(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,java.lang.Throwable)",
            "org.apache.juli.FileHandler:void publish(java.util.logging.LogRecord)",
            "org.apache.juli.FileHandler:void closeWriter()",
            "org.apache.juli.FileHandler:void openWriter()"
        ]
    },
    "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void write(java.lang.String,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void write(java.lang.String,int,int)"
        ]
    },
    "org.apache.catalina.authenticator.jaspic.PersistentProviderRegistrations:void writeOptional(java.lang.String,java.lang.String,java.io.Writer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.jaspic.PersistentProviderRegistrations:void writeProviders(org.apache.catalina.authenticator.jaspic.PersistentProviderRegistrations$Providers,java.io.File)"
        ]
    },
    "org.apache.catalina.util.XMLWriter:void sendData()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.WebdavServlet:void doPropfind(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.authenticator.jaspic.AuthConfigFactoryImpl:java.lang.String registerConfigProvider(java.lang.String,java.util.Map,java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.authenticator.jaspic.AuthConfigFactoryImpl:void loadPersistentRegistrations()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.jaspic.AuthConfigFactoryImpl:void <init>()",
            "org.apache.catalina.authenticator.jaspic.AuthConfigFactoryImpl:void refresh()"
        ]
    },
    "org.apache.catalina.authenticator.jaspic.SimpleAuthConfigProvider:void <init>(java.util.Map,jakarta.security.auth.message.config.AuthConfigFactory)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tomcat.util.net.jsse.PEMFile:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SSLUtilBase:javax.net.ssl.KeyManager[] getKeyManagers()"
        ]
    },
    "org.apache.catalina.startup.ContextConfig:void access$100(org.apache.catalina.startup.ContextConfig,boolean,org.apache.tomcat.util.descriptor.web.WebXml,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.ContextConfig$AnnotationScanTask:void run()"
        ]
    },
    "org.apache.catalina.loader.WebappClassLoaderBase:java.lang.Class loadClass(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.DefaultInstanceManager:java.lang.Object newInstance(java.lang.String,java.lang.ClassLoader)",
            "org.apache.catalina.core.DefaultInstanceManager:java.lang.Class loadClass(java.lang.String,java.lang.ClassLoader)",
            "org.apache.catalina.loader.WebappClassLoaderBase:java.lang.Class loadClass(java.lang.String,boolean)",
            "org.apache.catalina.security.SecurityClassLoad:void loadCorePackage(java.lang.ClassLoader)",
            "org.apache.catalina.security.SecurityClassLoad:void loadLoaderPackage(java.lang.ClassLoader)",
            "org.apache.catalina.security.SecurityClassLoad:void loadRealmPackage(java.lang.ClassLoader)",
            "org.apache.catalina.security.SecurityClassLoad:void loadServletsPackage(java.lang.ClassLoader)",
            "org.apache.catalina.security.SecurityClassLoad:void loadSessionPackage(java.lang.ClassLoader)",
            "org.apache.catalina.security.SecurityClassLoad:void loadUtilPackage(java.lang.ClassLoader)",
            "org.apache.catalina.security.SecurityClassLoad:void loadCoyotePackage(java.lang.ClassLoader)",
            "org.apache.catalina.security.SecurityClassLoad:void loadJakartaPackage(java.lang.ClassLoader)",
            "org.apache.catalina.security.SecurityClassLoad:void loadConnectorPackage(java.lang.ClassLoader)",
            "org.apache.catalina.security.SecurityClassLoad:void loadTomcatPackage(java.lang.ClassLoader)",
            "org.apache.catalina.startup.Bootstrap:void init()",
            "org.apache.catalina.startup.Catalina:void parseServerXml(boolean)",
            "org.apache.catalina.startup.Tool:void main(java.lang.String[])",
            "org.apache.catalina.util.CustomObjectInputStream:java.lang.Class resolveProxyClass(java.lang.String[])",
            "org.apache.catalina.util.Introspection:java.lang.Class loadClass(org.apache.catalina.Context,java.lang.String)",
            "org.apache.juli.ClassLoaderLogManager:void readConfiguration(java.io.InputStream,java.lang.ClassLoader)",
            "org.apache.juli.FileHandler:void configure()",
            "org.apache.naming.NamingContext:java.lang.Object lookup(javax.naming.Name,boolean)",
            "org.apache.naming.factory.BeanFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.naming.factory.FactoryBase:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.naming.factory.LookupFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.naming.factory.webservices.ServiceRefFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.tomcat.SimpleInstanceManager:java.lang.Object newInstance(java.lang.String)",
            "org.apache.tomcat.SimpleInstanceManager:java.lang.Object newInstance(java.lang.String,java.lang.ClassLoader)",
            "org.apache.tomcat.util.IntrospectionUtils:java.lang.Object callMethod1(java.lang.Object,java.lang.String,java.lang.Object,java.lang.String,java.lang.ClassLoader)",
            "org.apache.tomcat.util.digester.ObjectCreateRule:void begin(java.lang.String,java.lang.String,org.xml.sax.Attributes)",
            "org.apache.tomcat.util.modeler.BaseModelMBean:java.lang.Class getAttributeClass(java.lang.String)",
            "org.apache.tomcat.util.modeler.ManagedBean:javax.management.DynamicMBean createMBean(java.lang.Object)",
            "org.apache.tomcat.util.net.SSLUtilBase:javax.net.ssl.TrustManager[] getTrustManagers()"
        ]
    },
    "org.apache.catalina.core.ApplicationContextFacade:java.io.InputStream getResourceAsStream(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.StandardContext$NoPluggabilityServletContext:java.io.InputStream getResourceAsStream(java.lang.String)",
            "org.apache.catalina.manager.host.HostManagerServlet:void add(java.io.PrintWriter,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean,boolean,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.servlets.CGIServlet$CGIEnvironment:void expandCGIScript()",
            "org.apache.catalina.servlets.DefaultServlet:javax.xml.transform.Source findXsltSource(org.apache.catalina.WebResource)",
            "org.apache.catalina.startup.ContextConfig:org.xml.sax.InputSource getContextWebXmlSource()",
            "org.apache.catalina.valves.rewrite.RewriteValve:void startInternal()"
        ]
    },
    "org.apache.catalina.core.StandardContext$NoPluggabilityServletContext:java.io.InputStream getResourceAsStream(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.StandardContext$NoPluggabilityServletContext:java.io.InputStream getResourceAsStream(java.lang.String)",
            "org.apache.catalina.manager.host.HostManagerServlet:void add(java.io.PrintWriter,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean,boolean,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.servlets.CGIServlet$CGIEnvironment:void expandCGIScript()",
            "org.apache.catalina.servlets.DefaultServlet:javax.xml.transform.Source findXsltSource(org.apache.catalina.WebResource)",
            "org.apache.catalina.startup.ContextConfig:org.xml.sax.InputSource getContextWebXmlSource()",
            "org.apache.catalina.valves.rewrite.RewriteValve:void startInternal()"
        ]
    },
    "org.apache.catalina.webresources.war.WarURLConnection:java.io.InputStream getInputStream()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.CatalinaBaseConfigurationSource:org.apache.tomcat.util.file.ConfigurationSource$Resource getResource(java.lang.String)",
            "org.apache.catalina.startup.ContextConfig:void processContextConfig(org.apache.tomcat.util.digester.Digester,java.net.URL,java.io.InputStream)",
            "org.apache.catalina.startup.ContextConfig:org.apache.tomcat.util.descriptor.web.WebXml getDefaultWebXmlFragment(org.apache.tomcat.util.descriptor.web.WebXmlParser)",
            "org.apache.catalina.startup.ExpandWar:java.lang.String expand(org.apache.catalina.Host,java.net.URL,java.lang.String)",
            "org.apache.catalina.startup.Tomcat:org.apache.catalina.Context addWebapp(java.lang.String,java.net.URL)",
            "org.apache.catalina.users.MemoryUserDatabase:void backgroundProcess()",
            "org.apache.catalina.webresources.war.WarURLConnection:java.io.InputStream getInputStream()",
            "org.apache.tomcat.util.file.ConfigurationSource$1:org.apache.tomcat.util.file.ConfigurationSource$Resource getResource(java.lang.String)",
            "org.apache.tomcat.util.file.ConfigurationSource$Resource:long getLastModified()",
            "org.apache.tomcat.util.scan.UrlJar:org.apache.tomcat.util.scan.NonClosingJarInputStream createJarInputStream()"
        ]
    },
    "org.apache.tomcat.util.file.ConfigurationSource$1:org.apache.tomcat.util.file.ConfigurationSource$Resource getResource(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.realm.MemoryRealm:void startInternal()",
            "org.apache.catalina.startup.ContextConfig:void contextConfig(org.apache.tomcat.util.digester.Digester)",
            "org.apache.catalina.startup.ContextConfig:org.xml.sax.InputSource getWebXmlSource(java.lang.String,boolean)",
            "org.apache.catalina.users.MemoryUserDatabase:void open()",
            "org.apache.catalina.valves.rewrite.RewriteValve:void startInternal()",
            "org.apache.tomcat.util.file.ConfigurationSource:org.apache.tomcat.util.file.ConfigurationSource$Resource getConfResource(java.lang.String)",
            "org.apache.tomcat.util.net.SSLUtilBase:java.security.KeyStore getStore(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.tomcat.util.net.SSLUtilBase:java.util.Collection getCRLs(java.lang.String)",
            "org.apache.tomcat.util.net.jsse.PEMFile:void <init>(java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.tomcat.util.scan.UrlJar:org.apache.tomcat.util.scan.NonClosingJarInputStream createJarInputStream()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.scan.AbstractInputStreamJar:void reset()",
            "org.apache.tomcat.util.scan.AbstractInputStreamJar:void populateMrMap()"
        ]
    },
    "org.apache.catalina.core.StandardContext:org.apache.catalina.util.CharsetMapper getCharsetMapper()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.StandardContext:java.lang.String getCharset(java.util.Locale)",
            "org.apache.catalina.core.StandardContext:void addLocaleEncodingMappingParameter(java.lang.String,java.lang.String)",
            "org.apache.catalina.core.StandardContext:void startInternal()"
        ]
    },
    "org.apache.catalina.connector.CoyoteAdapter:void parsePathParameters(org.apache.coyote.Request,org.apache.catalina.connector.Request)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.CoyoteAdapter:boolean postParseRequest(org.apache.coyote.Request,org.apache.catalina.connector.Request,org.apache.coyote.Response,org.apache.catalina.connector.Response)"
        ]
    },
    "org.apache.catalina.connector.CoyoteAdapter:void parseSessionCookiesId(org.apache.catalina.connector.Request)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.CoyoteAdapter:boolean postParseRequest(org.apache.coyote.Request,org.apache.catalina.connector.Request,org.apache.coyote.Response,org.apache.catalina.connector.Response)"
        ]
    },
    "org.apache.catalina.connector.CoyoteAdapter:boolean normalize(org.apache.tomcat.util.buf.MessageBytes,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.CoyoteAdapter:boolean postParseRequest(org.apache.coyote.Request,org.apache.catalina.connector.Request,org.apache.coyote.Response,org.apache.catalina.connector.Response)"
        ]
    },
    "org.apache.catalina.connector.CoyoteAdapter$lambda_static_0__12:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.filters.ChunkedOutputFilter:void end()",
            "org.apache.coyote.http2.Stream:void writeTrailers()"
        ]
    },
    "org.apache.catalina.core.ApplicationContextFacade:java.lang.String getServerInfo()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.StandardContext$NoPluggabilityServletContext:java.lang.String getServerInfo()",
            "org.apache.catalina.servlets.CGIServlet:void printServletEnvironment(jakarta.servlet.http.HttpServletRequest)"
        ]
    },
    "org.apache.catalina.core.StandardContext$NoPluggabilityServletContext:java.lang.String getServerInfo()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.StandardContext$NoPluggabilityServletContext:java.lang.String getServerInfo()",
            "org.apache.catalina.servlets.CGIServlet:void printServletEnvironment(jakarta.servlet.http.HttpServletRequest)"
        ]
    },
    "org.apache.catalina.startup.VersionLoggerListener:void lifecycleEvent(org.apache.catalina.LifecycleEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void fireLifecycleEvent(java.lang.String,java.lang.Object)"
        ]
    },
    "org.apache.catalina.valves.AccessLogValve:void startInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void start()"
        ]
    },
    "org.apache.tomcat.util.descriptor.web.FragmentJarScannerCallback:void scan(org.apache.tomcat.Jar,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.scan.StandardJarScanner:void process(org.apache.tomcat.JarScanType,org.apache.tomcat.JarScannerCallback,java.net.URL,java.lang.String,boolean,java.util.Deque)"
        ]
    },
    "org.apache.tomcat.util.descriptor.web.FragmentJarScannerCallback:void scan(java.io.File,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.scan.StandardJarScanner:void process(org.apache.tomcat.JarScanType,org.apache.tomcat.JarScannerCallback,java.net.URL,java.lang.String,boolean,java.util.Deque)"
        ]
    },
    "org.apache.tomcat.util.descriptor.web.WebXmlParser:boolean parseWebXml(java.net.URL,org.apache.tomcat.util.descriptor.web.WebXml,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.connector.RequestFacade$GetCookiesPrivilegedAction:java.lang.Object run()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.security.auth.message.config.AuthConfigFactory:java.lang.String getFactoryClassName()",
            "jakarta.servlet.http.Cookie:void <clinit>()",
            "org.apache.catalina.connector.RequestFacade:jakarta.servlet.http.Cookie[] getCookies()",
            "org.apache.catalina.startup.ClassLoaderFactory:java.lang.ClassLoader createClassLoader(java.io.File[],java.io.File[],java.lang.ClassLoader)",
            "org.apache.catalina.startup.ClassLoaderFactory:java.lang.ClassLoader createClassLoader(java.util.List,java.lang.ClassLoader)",
            "org.apache.catalina.util.Introspection:java.lang.reflect.Field[] getDeclaredFields(java.lang.Class)",
            "org.apache.catalina.util.Introspection:java.lang.reflect.Method[] getDeclaredMethods(java.lang.Class)",
            "org.apache.juli.ClassLoaderLogManager:boolean addLogger(java.util.logging.Logger)",
            "org.apache.juli.ClassLoaderLogManager:org.apache.juli.ClassLoaderLogManager$ClassLoaderLogInfo getClassLoaderInfo(java.lang.ClassLoader)",
            "org.apache.juli.ClassLoaderLogManager:void doSetParentLogger(java.util.logging.Logger,java.util.logging.Logger)",
            "org.apache.juli.FileHandler$1:java.lang.Thread newThread(java.lang.Runnable)",
            "org.apache.naming.factory.MailSessionFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.naming.factory.SendMailFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.tomcat.util.compat.JrePlatform:void <clinit>()"
        ]
    },
    "jakarta.servlet.http.HttpServletRequestWrapper:java.lang.String changeSessionId()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletRequestWrapper:java.lang.String changeSessionId()"
        ]
    },
    "org.apache.catalina.authenticator.AuthenticatorBase:java.lang.String changeSessionID(org.apache.catalina.connector.Request,org.apache.catalina.Session)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.AuthenticatorBase:void register(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse,java.security.Principal,java.lang.String,java.lang.String,java.lang.String,boolean,boolean)",
            "org.apache.catalina.authenticator.FormAuthenticator:void forwardToLoginPage(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.descriptor.web.LoginConfig)"
        ]
    },
    "org.apache.catalina.connector.RequestFacade:java.lang.String changeSessionId()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletRequestWrapper:java.lang.String changeSessionId()"
        ]
    },
    "jakarta.servlet.http.HttpServletRequestWrapper:jakarta.servlet.http.HttpSession getSession()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletRequestWrapper:jakarta.servlet.http.HttpSession getSession()",
            "org.apache.catalina.filters.SessionInitializerFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)"
        ]
    },
    "jakarta.servlet.http.HttpServletRequestWrapper:jakarta.servlet.http.HttpSession getSession(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletRequestWrapper:jakarta.servlet.http.HttpSession getSession(boolean)",
            "org.apache.catalina.core.ApplicationHttpRequest:jakarta.servlet.http.HttpSession getSession(boolean)",
            "org.apache.catalina.core.ApplicationPushBuilder:void <init>(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.filters.CsrfPreventionFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.filters.RestCsrfPreventionFilter$FetchRequest:boolean apply(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.filters.RestCsrfPreventionFilter$StateChangingRequest:boolean apply(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.security.SecurityUtil:void execute(java.lang.reflect.Method,java.lang.Object,java.lang.Object[],java.security.Principal)",
            "org.apache.catalina.servlets.CGIServlet:void printServletEnvironment(jakarta.servlet.http.HttpServletRequest)"
        ]
    },
    "org.apache.catalina.connector.Request:void setUserPrincipal(java.security.Principal)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.AuthenticatorBase:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.authenticator.AuthenticatorBase:boolean authenticateJaspic(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,org.apache.catalina.authenticator.AuthenticatorBase$JaspicState,boolean)",
            "org.apache.catalina.authenticator.AuthenticatorBase:void register(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse,java.security.Principal,java.lang.String,java.lang.String,java.lang.String,boolean,boolean)",
            "org.apache.catalina.authenticator.SingleSignOn:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.authenticator.SingleSignOn:boolean reauthenticate(java.lang.String,org.apache.catalina.Realm,org.apache.catalina.connector.Request)",
            "org.apache.catalina.connector.CoyoteAdapter:void doConnectorAuthenticationAuthorization(org.apache.coyote.Request,org.apache.catalina.connector.Request)"
        ]
    },
    "org.apache.catalina.connector.RequestFacade$GetSessionPrivilegedAction:jakarta.servlet.http.HttpSession run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.RequestFacade$GetSessionPrivilegedAction:java.lang.Object run()"
        ]
    },
    "org.apache.catalina.connector.RequestFacade:jakarta.servlet.http.HttpSession getSession(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletRequestWrapper:jakarta.servlet.http.HttpSession getSession(boolean)",
            "org.apache.catalina.connector.RequestFacade:jakarta.servlet.http.HttpSession getSession()",
            "org.apache.catalina.core.ApplicationPushBuilder:void <init>(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.filters.CsrfPreventionFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.filters.RestCsrfPreventionFilter$FetchRequest:boolean apply(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.filters.RestCsrfPreventionFilter$StateChangingRequest:boolean apply(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.security.SecurityUtil:void execute(java.lang.reflect.Method,java.lang.Object,java.lang.Object[],java.security.Principal)",
            "org.apache.catalina.servlets.CGIServlet:void printServletEnvironment(jakarta.servlet.http.HttpServletRequest)"
        ]
    },
    "org.apache.catalina.security.SecurityUtil:void execute(java.lang.reflect.Method,java.lang.Object,java.lang.Object[],java.security.Principal)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.security.SecurityUtil:void doAsPrivilege(java.lang.String,jakarta.servlet.Servlet,java.lang.Class[],java.lang.Object[],java.security.Principal)",
            "org.apache.catalina.security.SecurityUtil:void doAsPrivilege(java.lang.String,jakarta.servlet.Filter,java.lang.Class[],java.lang.Object[],java.security.Principal)"
        ]
    },
    "org.apache.catalina.connector.Response:java.lang.String encodeRedirectURL(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletResponseWrapper:java.lang.String encodeRedirectURL(java.lang.String)",
            "org.apache.catalina.authenticator.FormAuthenticator:boolean doAuthenticate(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.connector.Response:java.lang.String encodeRedirectUrl(java.lang.String)",
            "org.apache.catalina.connector.ResponseFacade:java.lang.String encodeRedirectURL(java.lang.String)",
            "org.apache.catalina.connector.ResponseFacade:java.lang.String encodeRedirectUrl(java.lang.String)",
            "org.apache.catalina.servlets.DefaultServlet:void doDirectoryRedirect(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.connector.Response:java.lang.String encodeURL(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletResponseWrapper:java.lang.String encodeURL(java.lang.String)",
            "org.apache.catalina.connector.Response:java.lang.String encodeUrl(java.lang.String)",
            "org.apache.catalina.connector.ResponseFacade:java.lang.String encodeURL(java.lang.String)",
            "org.apache.catalina.connector.ResponseFacade:java.lang.String encodeUrl(java.lang.String)",
            "org.apache.catalina.manager.HTMLManagerServlet:void list(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.HTMLManagerServlet:void displaySessionDetailPage(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.catalina.util.ContextName,java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.StatusManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.host.HTMLHostManagerServlet:void list(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,java.lang.String,org.apache.tomcat.util.res.StringManager)"
        ]
    },
    "org.apache.catalina.authenticator.FormAuthenticator:boolean isContinuationRequired(org.apache.catalina.connector.Request)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.AuthenticatorBase:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)"
        ]
    },
    "org.apache.catalina.authenticator.FormAuthenticator:boolean matchRequest(org.apache.catalina.connector.Request)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.FormAuthenticator:boolean doAuthenticate(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.connector.Response:boolean isEncodeable(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.Response:java.lang.String encodeRedirectURL(java.lang.String)",
            "org.apache.catalina.connector.Response:java.lang.String encodeURL(java.lang.String)"
        ]
    },
    "org.apache.catalina.valves.AbstractAccessLogValve$SessionIdElement:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.valves.AbstractAccessLogValve:void log(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)"
        ]
    },
    "org.apache.catalina.startup.Bootstrap:void init(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.startup.Bootstrap:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.Bootstrap:void main(java.lang.String[])"
        ]
    },
    "org.apache.catalina.startup.Bootstrap:void main(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.core.ApplicationContext:java.util.EventListener createListener(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationContext:void addListener(java.lang.Class)",
            "org.apache.catalina.core.ApplicationContextFacade:java.util.EventListener createListener(java.lang.Class)"
        ]
    },
    "org.apache.catalina.core.ApplicationContext:jakarta.servlet.Filter createFilter(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationContextFacade:jakarta.servlet.Filter createFilter(java.lang.Class)"
        ]
    },
    "org.apache.catalina.core.ApplicationContext:jakarta.servlet.Servlet createServlet(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationContextFacade:jakarta.servlet.Servlet createServlet(java.lang.Class)"
        ]
    },
    "org.apache.catalina.core.ApplicationContext:void addListener(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationContextFacade:void addListener(java.lang.String)"
        ]
    },
    "org.apache.catalina.core.AsyncContextImpl:jakarta.servlet.AsyncListener createListener(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.deploy.NamingResourcesImpl:void addEnvironment(org.apache.tomcat.util.descriptor.web.ContextEnvironment)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.mbeans.ContextEnvironmentMBean:void setAttribute(javax.management.Attribute)",
            "org.apache.catalina.mbeans.NamingResourcesMBean:java.lang.String addEnvironment(java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.catalina.startup.ContextConfig:void configureContext(org.apache.tomcat.util.descriptor.web.WebXml)",
            "org.apache.catalina.startup.WebAnnotationSet:void addResource(org.apache.catalina.Context,jakarta.'annotation'.Resource,java.lang.String,java.lang.Class)"
        ]
    },
    "org.apache.catalina.deploy.NamingResourcesImpl:void addMessageDestinationRef(org.apache.tomcat.util.descriptor.web.MessageDestinationRef)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.ContextConfig:void configureContext(org.apache.tomcat.util.descriptor.web.WebXml)",
            "org.apache.catalina.startup.WebAnnotationSet:void addResource(org.apache.catalina.Context,jakarta.'annotation'.Resource,java.lang.String,java.lang.Class)"
        ]
    },
    "org.apache.catalina.deploy.NamingResourcesImpl:void addResource(org.apache.tomcat.util.descriptor.web.ContextResource)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.mbeans.ContextResourceMBean:void setAttribute(javax.management.Attribute)",
            "org.apache.catalina.mbeans.NamingResourcesMBean:java.lang.String addResource(java.lang.String,java.lang.String)",
            "org.apache.catalina.startup.ContextConfig:void configureContext(org.apache.tomcat.util.descriptor.web.WebXml)",
            "org.apache.catalina.startup.WebAnnotationSet:void addResource(org.apache.catalina.Context,jakarta.'annotation'.Resource,java.lang.String,java.lang.Class)"
        ]
    },
    "org.apache.catalina.deploy.NamingResourcesImpl:void addResourceEnvRef(org.apache.tomcat.util.descriptor.web.ContextResourceEnvRef)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.ContextConfig:void configureContext(org.apache.tomcat.util.descriptor.web.WebXml)",
            "org.apache.catalina.startup.WebAnnotationSet:void addResource(org.apache.catalina.Context,jakarta.'annotation'.Resource,java.lang.String,java.lang.Class)"
        ]
    },
    "org.apache.catalina.startup.ContextConfig:void applicationAnnotationsConfig()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.ContextConfig:void configureStart()"
        ]
    },
    "org.apache.juli.FileHandler:void configure()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.juli.FileHandler:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Boolean,java.lang.Integer)"
        ]
    },
    "org.apache.catalina.startup.Tomcat$SimpleRealm:java.lang.String getPassword(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.realm.RealmBase:java.security.Principal authenticate(java.lang.String,java.lang.String)",
            "org.apache.catalina.realm.RealmBase:java.lang.String getDigest(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.catalina.startup.Tomcat$SimpleRealm:java.security.Principal getPrincipal(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.realm.RealmBase:java.security.Principal authenticate(java.lang.String)",
            "org.apache.catalina.realm.RealmBase:java.security.Principal authenticate(java.lang.String,java.lang.String)",
            "org.apache.catalina.realm.RealmBase:java.security.Principal authenticate(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.catalina.realm.RealmBase:java.security.Principal getPrincipal(java.security.cert.X509Certificate)",
            "org.apache.catalina.realm.RealmBase:java.security.Principal getPrincipal(org.ietf.jgss.GSSName,org.ietf.jgss.GSSCredential)"
        ]
    },
    "org.apache.catalina.startup.Tomcat:void initBaseDir()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.Tomcat:org.apache.catalina.Server getServer()"
        ]
    },
    "org.apache.catalina.startup.Tomcat:void setSilent(boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.servlets.CGIServlet$CGIRunner$lambda_run_0__39:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.AsyncContextImpl$RunnableWrapper:void run()",
            "org.apache.catalina.core.AsyncContextImpl:void doInternalDispatch()",
            "org.apache.catalina.core.StandardThreadExecutor:void execute(java.lang.Runnable)",
            "org.apache.coyote.AbstractProcessor:void execute(java.lang.Runnable)",
            "org.apache.coyote.AsyncStateMachine:void asyncRun(java.lang.Runnable)",
            "org.apache.tomcat.util.net.Nio2Endpoint:void stopInternal()",
            "org.apache.tomcat.util.net.SecureNio2Channel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()",
            "org.apache.tomcat.util.net.SecureNioChannel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()",
            "org.apache.tomcat.util.net.SocketWrapperBase:void execute(java.lang.Runnable)",
            "org.apache.tomcat.util.threads.InlineExecutorService:void execute(java.lang.Runnable)",
            "org.apache.tomcat.util.threads.ScheduledThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.tomcat.util.threads.TaskThread$WrappingRunnable:void run()",
            "org.apache.tomcat.util.threads.ThreadPoolExecutor:void execute(java.lang.Runnable,long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.apache.catalina.manager.util.BaseSessionComparator:int compare(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.DefaultServlet$DirsFirstComparator:int compare(org.apache.catalina.WebResource,org.apache.catalina.WebResource)",
            "org.apache.catalina.servlets.DefaultServlet$ResourceLastModifiedDateComparator:int compare(org.apache.catalina.WebResource,org.apache.catalina.WebResource)",
            "org.apache.catalina.servlets.DefaultServlet$ResourceSizeComparator:int compare(org.apache.catalina.WebResource,org.apache.catalina.WebResource)"
        ]
    },
    "org.apache.catalina.startup.Catalina:void setSecurityProtection()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.Catalina:void <init>()"
        ]
    },
    "org.apache.catalina.webresources.StandardRoot:org.apache.catalina.WebResource[] listResources(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.loader.WebappClassLoaderBase:boolean modified()",
            "org.apache.catalina.loader.WebappClassLoaderBase:void start()",
            "org.apache.catalina.servlets.DefaultServlet:java.io.InputStream renderHtml(jakarta.servlet.http.HttpServletRequest,java.lang.String,org.apache.catalina.WebResource,java.lang.String)",
            "org.apache.catalina.startup.ContextConfig:void processClasses(org.apache.tomcat.util.descriptor.web.WebXml,java.util.Set)",
            "org.apache.catalina.startup.ContextConfig:void processAnnotationsWebResource(org.apache.catalina.WebResource,org.apache.tomcat.util.descriptor.web.WebXml,boolean,java.util.Map)"
        ]
    },
    "org.apache.catalina.core.ApplicationContextFacade:java.util.Set getResourcePaths(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.StandardContext$NoPluggabilityServletContext:java.util.Set getResourcePaths(java.lang.String)",
            "org.apache.tomcat.util.scan.StandardJarScanner:void scan(org.apache.tomcat.JarScanType,jakarta.servlet.ServletContext,org.apache.tomcat.JarScannerCallback)"
        ]
    },
    "org.apache.catalina.core.StandardContext$NoPluggabilityServletContext:java.util.Set getResourcePaths(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.StandardContext$NoPluggabilityServletContext:java.util.Set getResourcePaths(java.lang.String)",
            "org.apache.tomcat.util.scan.StandardJarScanner:void scan(org.apache.tomcat.JarScanType,jakarta.servlet.ServletContext,org.apache.tomcat.JarScannerCallback)"
        ]
    },
    "org.apache.tomcat.util.scan.StandardJarScanner:void scan(org.apache.tomcat.JarScanType,jakarta.servlet.ServletContext,org.apache.tomcat.JarScannerCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.ContextConfig:java.util.Map processJarsForWebFragments(org.apache.tomcat.util.descriptor.web.WebXml,org.apache.tomcat.util.descriptor.web.WebXmlParser)"
        ]
    },
    "org.apache.catalina.webresources.CachedResource$CachedResourceJarURLConnection:org.apache.catalina.WebResource getResource()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.webresources.CachedResource$CachedResourceJarURLConnection:java.io.InputStream getInputStream()",
            "org.apache.catalina.webresources.CachedResource$CachedResourceJarURLConnection:long getLastModified()",
            "org.apache.catalina.webresources.CachedResource$CachedResourceJarURLConnection:long getContentLengthLong()"
        ]
    },
    "org.apache.catalina.webresources.CachedResource$CachedResourceURLConnection:org.apache.catalina.WebResource getResource()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.webresources.CachedResource$CachedResourceURLConnection:java.io.InputStream getInputStream()",
            "org.apache.catalina.webresources.CachedResource$CachedResourceURLConnection:long getLastModified()",
            "org.apache.catalina.webresources.CachedResource$CachedResourceURLConnection:long getContentLengthLong()"
        ]
    },
    "org.apache.catalina.webresources.StandardRoot:org.apache.catalina.WebResource getResource(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationContext:java.net.URL getResource(java.lang.String)",
            "org.apache.catalina.core.ApplicationContext:java.io.InputStream getResourceAsStream(java.lang.String)",
            "org.apache.catalina.core.StandardContext:java.lang.String getRealPath(java.lang.String)",
            "org.apache.catalina.core.StandardContext:void resourcesStart()",
            "org.apache.catalina.loader.WebappClassLoaderBase:boolean check(java.security.Permission)",
            "org.apache.catalina.mapper.Mapper:void internalMapWrapper(org.apache.catalina.mapper.Mapper$ContextVersion,org.apache.tomcat.util.buf.CharChunk,org.apache.catalina.mapper.MappingData)",
            "org.apache.catalina.servlets.DefaultServlet:void doPut(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.DefaultServlet:java.io.File executePartialPut(jakarta.servlet.http.HttpServletRequest,org.apache.tomcat.util.http.parser.ContentRange,java.lang.String)",
            "org.apache.catalina.servlets.DefaultServlet:void doDelete(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.DefaultServlet:void serveResource(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,boolean,java.lang.String)",
            "org.apache.catalina.servlets.DefaultServlet:java.util.List getAvailablePrecompressedResources(java.lang.String)",
            "org.apache.catalina.servlets.DefaultServlet:java.io.InputStream renderXml(jakarta.servlet.http.HttpServletRequest,java.lang.String,org.apache.catalina.WebResource,javax.xml.transform.Source,java.lang.String)",
            "org.apache.catalina.servlets.DefaultServlet:java.lang.String getReadme(org.apache.catalina.WebResource,java.lang.String)",
            "org.apache.catalina.servlets.DefaultServlet:javax.xml.transform.Source findXsltSource(org.apache.catalina.WebResource)",
            "org.apache.catalina.servlets.WebdavServlet:void doPropfind(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.WebdavServlet:void doMkcol(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.WebdavServlet:void doPut(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.WebdavServlet:void doLock(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.WebdavServlet:boolean copyResource(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.WebdavServlet:boolean copyResource(java.util.Hashtable,java.lang.String,java.lang.String)",
            "org.apache.catalina.servlets.WebdavServlet:boolean deleteResource(java.lang.String,jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,boolean)",
            "org.apache.catalina.servlets.WebdavServlet:void deleteCollection(jakarta.servlet.http.HttpServletRequest,java.lang.String,java.util.Hashtable)",
            "org.apache.catalina.servlets.WebdavServlet:void parseProperties(jakarta.servlet.http.HttpServletRequest,org.apache.catalina.util.XMLWriter,java.lang.String,int,java.util.Vector)",
            "org.apache.catalina.servlets.WebdavServlet:java.lang.String determineMethodsAllowed(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.startup.ContextConfig:org.apache.tomcat.util.descriptor.web.WebXml getTomcatWebXmlFragment(org.apache.tomcat.util.descriptor.web.WebXmlParser)",
            "org.apache.catalina.util.ExtensionValidator:boolean validateApplication(org.apache.catalina.WebResourceRoot,org.apache.catalina.Context)",
            "org.apache.catalina.valves.rewrite.ResolverImpl:boolean resolveResource(int,java.lang.String)",
            "org.apache.catalina.webresources.FileResource:java.net.URL getCodeBase()"
        ]
    },
    "org.apache.catalina.webresources.StandardRoot:org.apache.catalina.WebResource getClassLoaderResource(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.loader.WebappClassLoaderBase:boolean modified()",
            "org.apache.catalina.loader.WebappClassLoaderBase:java.net.URL findResource(java.lang.String)",
            "org.apache.catalina.loader.WebappClassLoaderBase:java.io.InputStream getResourceAsStream(java.lang.String)",
            "org.apache.catalina.loader.WebappClassLoaderBase:java.lang.Class findClassInternal(java.lang.String)"
        ]
    },
    "org.apache.catalina.webresources.Cache:org.apache.catalina.WebResource[] getResources(java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.webresources.StandardRoot:org.apache.catalina.WebResource[] getResources(java.lang.String,boolean)"
        ]
    },
    "org.apache.catalina.webresources.StandardRoot:org.apache.catalina.WebResource[] getClassLoaderResources(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.loader.WebappClassLoaderBase:java.util.Enumeration findResources(java.lang.String)",
            "org.apache.catalina.util.ExtensionValidator:boolean validateApplication(org.apache.catalina.WebResourceRoot,org.apache.catalina.Context)"
        ]
    },
    "org.apache.catalina.webresources.StandardRoot:org.apache.catalina.WebResource[] getResources(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.loader.WebappClassLoaderBase:void start()"
        ]
    },
    "org.apache.catalina.webresources.AbstractResource:java.io.InputStream getInputStream()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationContext:java.io.InputStream getResourceAsStream(java.lang.String)",
            "org.apache.catalina.loader.WebappClassLoaderBase:java.io.InputStream getResourceAsStream(java.lang.String)",
            "org.apache.catalina.servlets.DefaultServlet:java.io.File executePartialPut(jakarta.servlet.http.HttpServletRequest,org.apache.tomcat.util.http.parser.ContentRange,java.lang.String)",
            "org.apache.catalina.servlets.DefaultServlet:void serveResource(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,boolean,java.lang.String)",
            "org.apache.catalina.servlets.DefaultServlet:java.lang.String getReadme(org.apache.catalina.WebResource,java.lang.String)",
            "org.apache.catalina.servlets.DefaultServlet:javax.xml.transform.Source findXsltSource(org.apache.catalina.WebResource)",
            "org.apache.catalina.servlets.DefaultServlet:void copy(org.apache.catalina.WebResource,long,jakarta.servlet.ServletOutputStream,org.apache.tomcat.util.http.parser.Ranges$Entry)",
            "org.apache.catalina.servlets.DefaultServlet:void copy(org.apache.catalina.WebResource,long,jakarta.servlet.ServletOutputStream,org.apache.tomcat.util.http.parser.Ranges,java.lang.String)",
            "org.apache.catalina.servlets.WebdavServlet:boolean copyResource(java.util.Hashtable,java.lang.String,java.lang.String)",
            "org.apache.catalina.startup.ContextConfig:org.apache.tomcat.util.descriptor.web.WebXml getTomcatWebXmlFragment(org.apache.tomcat.util.descriptor.web.WebXmlParser)",
            "org.apache.catalina.startup.ContextConfig:void processAnnotationsWebResource(org.apache.catalina.WebResource,org.apache.tomcat.util.descriptor.web.WebXml,boolean,java.util.Map)",
            "org.apache.catalina.util.ExtensionValidator:boolean validateApplication(org.apache.catalina.WebResourceRoot,org.apache.catalina.Context)",
            "org.apache.catalina.webresources.CachedResource$CachedResourceJarURLConnection:java.io.InputStream getInputStream()",
            "org.apache.catalina.webresources.CachedResource$CachedResourceURLConnection:java.io.InputStream getInputStream()",
            "org.apache.catalina.webresources.CachedResource:java.io.InputStream getInputStream()",
            "org.apache.catalina.webresources.ExtractingRoot:void processWebInfLib()"
        ]
    },
    "org.apache.coyote.http2.Stream:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2UpgradeHandler:void <init>(org.apache.coyote.http2.Http2Protocol,org.apache.coyote.Adapter,org.apache.coyote.Request)",
            "org.apache.coyote.http2.Http2UpgradeHandler:org.apache.coyote.http2.Stream createRemoteStream(int)",
            "org.apache.coyote.http2.Http2UpgradeHandler:org.apache.coyote.http2.Stream createLocalStream(org.apache.coyote.Request)",
            "org.apache.coyote.http2.Stream$StreamInputBuffer:int doRead(org.apache.tomcat.util.net.ApplicationBufferHandler)",
            "org.apache.coyote.http2.Stream$StreamInputBuffer:void onDataAvailable()",
            "org.apache.coyote.http2.Stream$StreamInputBuffer:void ensureBuffersExist()",
            "org.apache.coyote.http2.Stream$StreamInputBuffer:void swallowUnread()",
            "org.apache.coyote.http2.Stream$StreamOutputBuffer:int doWrite(java.nio.ByteBuffer)",
            "org.apache.coyote.http2.Stream$StreamOutputBuffer:boolean flush(boolean,boolean)",
            "org.apache.coyote.http2.Stream$StreamOutputBuffer:boolean isReady()",
            "org.apache.coyote.http2.Stream:void <init>(java.lang.Integer,org.apache.coyote.http2.Http2UpgradeHandler,org.apache.coyote.Request)",
            "org.apache.coyote.http2.Stream:void receiveReset(long)",
            "org.apache.coyote.http2.Stream:int reserveWindowSize(int,boolean)",
            "org.apache.coyote.http2.Stream:void emitHeader(java.lang.String,java.lang.String)",
            "org.apache.coyote.http2.Stream:boolean receivedEndOfHeaders()",
            "org.apache.coyote.http2.Stream:void writeAck()",
            "org.apache.coyote.http2.Stream:java.nio.ByteBuffer getInputByteBuffer()",
            "org.apache.coyote.http2.Stream:void receivedStartOfHeaders(boolean)",
            "org.apache.coyote.http2.Stream:void receivedData(int)",
            "org.apache.coyote.http2.Stream:void receivedEndOfStream()",
            "org.apache.coyote.http2.Stream:void close(org.apache.coyote.http2.Http2Exception)",
            "org.apache.coyote.http2.Stream:void recycle()",
            "org.apache.coyote.http2.Stream:void push(org.apache.coyote.Request)",
            "org.apache.coyote.http2.Stream:org.apache.tomcat.util.res.StringManager access$700()",
            "org.apache.coyote.http2.Stream:org.apache.juli.logging.Log access$900()",
            "org.apache.coyote.http2.Stream:void <clinit>()"
        ]
    },
    "org.apache.catalina.filters.CorsFilter:void handlePreflightCORS(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,jakarta.servlet.FilterChain)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.CorsFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)"
        ]
    },
    "org.apache.tomcat.util.modeler.Registry:org.apache.tomcat.util.modeler.ManagedBean findManagedBean(java.lang.Object,java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.modeler.Registry:void registerComponent(java.lang.Object,javax.management.ObjectName,java.lang.String)"
        ]
    },
    "org.apache.tomcat.util.modeler.Registry:void loadDescriptors(java.lang.String,java.lang.ClassLoader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.mbeans.MBeanUtils:org.apache.tomcat.util.modeler.Registry createRegistry()",
            "org.apache.tomcat.util.modeler.Registry:void findDescriptor(java.lang.Class,java.lang.String)"
        ]
    },
    "org.apache.catalina.connector.Connector:void pause()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.StandardService:void stopInternal()"
        ]
    },
    "org.apache.tomcat.util.net.AbstractEndpoint:void addSslHostConfig(org.apache.tomcat.util.net.SSLHostConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.AbstractHttp11Protocol:void addSslHostConfig(org.apache.tomcat.util.net.SSLHostConfig)"
        ]
    },
    "org.apache.tomcat.util.net.AbstractEndpoint:void reloadSslHostConfig(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.AbstractHttp11Protocol:void reloadSslHostConfig(java.lang.String)",
            "org.apache.tomcat.util.net.AbstractEndpoint:void reloadSslHostConfigs()"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint:void bind()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.AbstractEndpoint:void bindWithCleanup()"
        ]
    },
    "org.apache.tomcat.util.net.NioEndpoint:void bind()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.AbstractEndpoint:void bindWithCleanup()"
        ]
    },
    "org.apache.coyote.http2.Stream:void <init>(java.lang.Integer,org.apache.coyote.http2.Http2UpgradeHandler,org.apache.coyote.Request)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2UpgradeHandler:void <init>(org.apache.coyote.http2.Http2Protocol,org.apache.coyote.Adapter,org.apache.coyote.Request)",
            "org.apache.coyote.http2.Http2UpgradeHandler:org.apache.coyote.http2.Stream createLocalStream(org.apache.coyote.Request)",
            "org.apache.coyote.http2.Stream:void <init>(java.lang.Integer,org.apache.coyote.http2.Http2UpgradeHandler)"
        ]
    },
    "org.apache.coyote.http2.HpackDecoder:void emitHeader(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.HpackDecoder:void decode(java.nio.ByteBuffer)",
            "org.apache.coyote.http2.HpackDecoder:void handleIndex(int)",
            "org.apache.coyote.http2.HpackDecoder:void addStaticTableEntry(int)"
        ]
    },
    "org.apache.catalina.servlets.DefaultServlet:boolean checkIfHeaders(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.catalina.WebResource)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.DefaultServlet:void serveResource(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,boolean,java.lang.String)",
            "org.apache.catalina.servlets.WebdavServlet:boolean checkIfHeaders(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.catalina.WebResource)"
        ]
    },
    "org.apache.catalina.connector.Response:void setContentType(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletResponseWrapper:void setContentType(java.lang.String)",
            "jakarta.servlet.http.HttpServlet:void doTrace(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.connector.Response:boolean checkSpecialHeader(java.lang.String,java.lang.String)",
            "org.apache.catalina.connector.ResponseFacade$SetContentTypePrivilegedAction:java.lang.Void run()",
            "org.apache.catalina.connector.ResponseFacade:void setContentType(java.lang.String)",
            "org.apache.catalina.core.ApplicationHttpResponse:void setContentType(java.lang.String)",
            "org.apache.catalina.core.ApplicationResponse:void setContentType(java.lang.String)",
            "org.apache.catalina.filters.CorsFilter:void handleInvalidCORS(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.filters.RemoteCIDRFilter:void sendErrorWhenNotHttp(jakarta.servlet.ServletResponse)",
            "org.apache.catalina.filters.RequestFilter:void sendErrorWhenNotHttp(jakarta.servlet.ServletResponse)",
            "org.apache.catalina.manager.HTMLManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.HTMLManagerServlet:void doPost(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.JMXProxyServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.ManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.ManagerServlet:void doPut(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.StatusTransformer:void setContentType(jakarta.servlet.http.HttpServletResponse,int)",
            "org.apache.catalina.manager.host.HTMLHostManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.host.HTMLHostManagerServlet:void doPost(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.host.HostManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.DefaultServlet:void serveResource(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,boolean,java.lang.String)",
            "org.apache.catalina.servlets.WebdavServlet:void doPropfind(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.WebdavServlet:void doLock(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.valves.ErrorReportValve:void report(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,java.lang.Throwable)",
            "org.apache.catalina.valves.ErrorReportValve:boolean sendErrorPage(java.lang.String,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.HealthCheckValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.JsonErrorReportValve:void report(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,java.lang.Throwable)"
        ]
    },
    "org.apache.coyote.Response:boolean checkSpecialHeader(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.Response:void setHeader(java.lang.String,java.lang.String)",
            "org.apache.coyote.Response:void addHeader(java.lang.String,java.lang.String,java.nio.charset.Charset)"
        ]
    },
    "org.apache.tomcat.util.json.JSONParserTokenManager:int jjMoveStringLiteralDfa1_0(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.json.JSONParserTokenManager:int jjMoveStringLiteralDfa0_0()"
        ]
    },
    "org.apache.tomcat.util.json.JSONParserTokenManager:int jjMoveStringLiteralDfa2_0(long,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.json.JSONParserTokenManager:int jjMoveStringLiteralDfa1_0(long)"
        ]
    },
    "org.apache.tomcat.util.json.JSONParserTokenManager:int jjMoveStringLiteralDfa3_0(long,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.json.JSONParserTokenManager:int jjMoveStringLiteralDfa2_0(long,long)"
        ]
    },
    "org.apache.tomcat.util.json.JSONParserTokenManager:int jjMoveStringLiteralDfa4_0(long,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.json.JSONParserTokenManager:int jjMoveStringLiteralDfa3_0(long,long)"
        ]
    },
    "org.apache.tomcat.util.json.JSONParserTokenManager:int jjStartNfaWithStates_0(int,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.json.JSONParserTokenManager:int jjMoveStringLiteralDfa3_0(long,long)",
            "org.apache.tomcat.util.json.JSONParserTokenManager:int jjMoveStringLiteralDfa4_0(long,long)"
        ]
    },
    "org.apache.tomcat.util.json.JSONParserTokenManager:int jjMoveNfa_0(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.json.JSONParserTokenManager:int jjStartNfa_0(int,long)",
            "org.apache.tomcat.util.json.JSONParserTokenManager:int jjMoveStringLiteralDfa0_0()",
            "org.apache.tomcat.util.json.JSONParserTokenManager:int jjStartNfaWithStates_0(int,int,int)"
        ]
    },
    "org.apache.tomcat.util.json.JSONParserTokenManager:org.apache.tomcat.util.json.Token getNextToken()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.json.JSONParser:void <init>(java.io.InputStream,java.lang.String)",
            "org.apache.tomcat.util.json.JSONParser:void ReInit(java.io.InputStream,java.lang.String)",
            "org.apache.tomcat.util.json.JSONParser:void <init>(java.io.Reader)",
            "org.apache.tomcat.util.json.JSONParser:void ReInit(java.io.Reader)",
            "org.apache.tomcat.util.json.JSONParser:void <init>(org.apache.tomcat.util.json.JSONParserTokenManager)",
            "org.apache.tomcat.util.json.JSONParser:void ReInit(org.apache.tomcat.util.json.JSONParserTokenManager)",
            "org.apache.tomcat.util.json.JSONParser:org.apache.tomcat.util.json.Token jj_consume_token(int)",
            "org.apache.tomcat.util.json.JSONParser:org.apache.tomcat.util.json.Token getNextToken()",
            "org.apache.tomcat.util.json.JSONParser:org.apache.tomcat.util.json.Token getToken(int)"
        ]
    },
    "org.apache.tomcat.util.json.JavaCharStream:char BeginToken()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.json.JSONParserTokenManager:org.apache.tomcat.util.json.Token getNextToken()"
        ]
    },
    "org.apache.juli.AsyncFileHandler:void publish(java.util.logging.LogRecord)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.manager.ManagerServlet:void resources(java.io.PrintWriter,java.lang.String,org.apache.tomcat.util.res.StringManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.ManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.realm.LockOutRealm:java.security.Principal authenticate(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.DigestAuthenticator$DigestInfo:java.security.Principal authenticate(org.apache.catalina.Realm)",
            "org.apache.catalina.realm.CombinedRealm:java.security.Principal authenticate(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.catalina.realm.CombinedRealm:java.security.Principal authenticate(java.security.cert.X509Certificate[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.SSLAuthenticator:boolean doAuthenticate(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.realm.CombinedRealm:java.security.Principal authenticate(java.security.cert.X509Certificate[])",
            "org.apache.catalina.realm.LockOutRealm:java.security.Principal authenticate(java.security.cert.X509Certificate[])"
        ]
    },
    "org.apache.catalina.authenticator.SpnegoAuthenticator$AuthenticateAction:java.security.Principal run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.SpnegoAuthenticator$AuthenticateAction:java.lang.Object run()"
        ]
    },
    "org.apache.catalina.realm.CombinedRealm:java.security.Principal authenticate(org.ietf.jgss.GSSContext,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.SpnegoAuthenticator$AuthenticateAction:java.security.Principal run()",
            "org.apache.catalina.realm.CombinedRealm:java.security.Principal authenticate(org.ietf.jgss.GSSContext,boolean)",
            "org.apache.catalina.realm.LockOutRealm:java.security.Principal authenticate(org.ietf.jgss.GSSContext,boolean)"
        ]
    },
    "org.apache.catalina.realm.CombinedRealm:java.security.Principal authenticate(org.ietf.jgss.GSSName,org.ietf.jgss.GSSCredential)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.realm.CombinedRealm:java.security.Principal authenticate(org.ietf.jgss.GSSName,org.ietf.jgss.GSSCredential)",
            "org.apache.catalina.realm.LockOutRealm:java.security.Principal authenticate(org.ietf.jgss.GSSName,org.ietf.jgss.GSSCredential)"
        ]
    },
    "org.apache.catalina.session.PersistentManagerBase$PrivilegedStoreKeys:java.lang.String[] run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.session.PersistentManagerBase$PrivilegedStoreKeys:java.lang.Object run()"
        ]
    },
    "org.apache.catalina.session.PersistentManagerBase:void load()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.session.PersistentManagerBase:java.util.Set getSessionIdsFull()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.HTMLManagerServlet:java.util.List getSessionsForName(org.apache.catalina.util.ContextName,org.apache.tomcat.util.res.StringManager)"
        ]
    },
    "org.apache.catalina.session.StoreBase:java.lang.String[] expiredKeys()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.session.StoreBase:void processExpires()"
        ]
    },
    "org.apache.catalina.session.PersistentManagerBase$PrivilegedStoreLoad:java.lang.Object run()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.security.auth.message.config.AuthConfigFactory:jakarta.security.auth.message.config.AuthConfigFactory getFactory()",
            "org.apache.catalina.core.ApplicationFilterChain:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)",
            "org.apache.catalina.session.PersistentManagerBase:org.apache.catalina.Session securedStoreLoad(java.lang.String)"
        ]
    },
    "org.apache.catalina.session.PersistentManagerBase:org.apache.catalina.Session swapIn(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.session.PersistentManagerBase:org.apache.catalina.Session findSession(java.lang.String)",
            "org.apache.catalina.session.PersistentManagerBase:void load()"
        ]
    },
    "org.apache.catalina.session.PersistentManagerBase:void processExpires()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.session.ManagerBase:void backgroundProcess()"
        ]
    },
    "org.apache.catalina.session.PersistentManagerBase$PrivilegedStoreRemove:java.lang.Object run()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.security.auth.message.config.AuthConfigFactory:jakarta.security.auth.message.config.AuthConfigFactory getFactory()",
            "org.apache.catalina.core.ApplicationFilterChain:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)",
            "org.apache.catalina.session.PersistentManagerBase:void removeSession(java.lang.String)"
        ]
    },
    "org.apache.catalina.session.PersistentManagerBase:void remove(org.apache.catalina.Session,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.session.ManagerBase:void remove(org.apache.catalina.Session)",
            "org.apache.catalina.session.StandardSession:void expire(boolean)"
        ]
    },
    "org.apache.catalina.session.PersistentManagerBase$PrivilegedStoreClear:java.lang.Object run()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.security.auth.message.config.AuthConfigFactory:jakarta.security.auth.message.config.AuthConfigFactory getFactory()",
            "org.apache.catalina.core.ApplicationFilterChain:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)",
            "org.apache.catalina.session.PersistentManagerBase:void clearStore()"
        ]
    },
    "org.apache.catalina.session.PersistentManagerBase$PrivilegedStoreSave:java.lang.Object run()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.security.auth.message.config.AuthConfigFactory:jakarta.security.auth.message.config.AuthConfigFactory getFactory()",
            "org.apache.catalina.core.ApplicationFilterChain:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)",
            "org.apache.catalina.session.PersistentManagerBase:void writeSession(org.apache.catalina.Session)"
        ]
    },
    "org.apache.catalina.session.PersistentManagerBase:void swapOut(org.apache.catalina.Session)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.session.PersistentManagerBase:void unload()",
            "org.apache.catalina.session.PersistentManagerBase:void processMaxIdleSwaps()",
            "org.apache.catalina.session.PersistentManagerBase:void processMaxActiveSwaps()"
        ]
    },
    "org.apache.catalina.session.PersistentManagerBase:void processMaxIdleBackups()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.session.PersistentManagerBase:void processPersistenceChecks()"
        ]
    },
    "org.apache.catalina.authenticator.SpnegoAuthenticator:void initInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void init()"
        ]
    },
    "org.apache.catalina.valves.CrawlerSessionManagerValve:void initInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void init()"
        ]
    },
    "org.apache.catalina.valves.RequestFilterValve:void initInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void init()"
        ]
    },
    "org.apache.catalina.valves.StuckThreadDetectionValve:void initInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void init()"
        ]
    },
    "org.apache.catalina.valves.rewrite.RewriteValve:void initInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void init()"
        ]
    },
    "org.apache.coyote.AbstractProcessor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState asyncPostProcess()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProcessorLight:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState process(org.apache.tomcat.util.net.SocketWrapperBase,org.apache.tomcat.util.net.SocketEvent)"
        ]
    },
    "org.apache.catalina.authenticator.AuthenticatorBase:void startInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.DigestAuthenticator:void startInternal()",
            "org.apache.catalina.util.LifecycleBase:void start()"
        ]
    },
    "org.apache.catalina.connector.Request:java.lang.String getRealPath(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletRequestWrapper:java.lang.String getRealPath(java.lang.String)",
            "org.apache.catalina.connector.RequestFacade:java.lang.String getRealPath(java.lang.String)"
        ]
    },
    "org.apache.catalina.connector.Request:void notifyAttributeAssigned(java.lang.String,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.Request:void setAttribute(java.lang.String,java.lang.Object)",
            "org.apache.catalina.connector.Request:void access$000(org.apache.catalina.connector.Request,java.lang.String,java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.catalina.connector.Request:void notifyAttributeRemoved(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.Request:void removeAttribute(java.lang.String)"
        ]
    },
    "org.apache.catalina.connector.Request:jakarta.servlet.ServletContext getServletContext()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletRequestWrapper:jakarta.servlet.ServletContext getServletContext()",
            "org.apache.catalina.authenticator.AuthenticatorBase:void register(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse,java.security.Principal,java.lang.String,java.lang.String,java.lang.String,boolean,boolean)",
            "org.apache.catalina.authenticator.SingleSignOn:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.connector.CoyoteAdapter:boolean postParseRequest(org.apache.coyote.Request,org.apache.catalina.connector.Request,org.apache.coyote.Response,org.apache.catalina.connector.Response)",
            "org.apache.catalina.connector.CoyoteAdapter:void parseSessionSslId(org.apache.catalina.connector.Request)",
            "org.apache.catalina.connector.Request:java.lang.String getContextPath()",
            "org.apache.catalina.connector.RequestFacade:jakarta.servlet.ServletContext getServletContext()",
            "org.apache.catalina.connector.Response:boolean isEncodeable(java.lang.String)",
            "org.apache.catalina.core.ApplicationPushBuilder:void <init>(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.core.AsyncContextImpl:void dispatch(java.lang.String)",
            "org.apache.catalina.filters.ExpiresFilter:java.util.Date getExpirationDate(jakarta.servlet.http.HttpServletRequest,org.apache.catalina.filters.ExpiresFilter$XHttpServletResponse)",
            "org.apache.catalina.valves.rewrite.ResolverImpl:java.lang.String resolve(java.lang.String)",
            "org.apache.catalina.valves.rewrite.RewriteValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)"
        ]
    },
    "org.apache.catalina.connector.Request:java.lang.String getPathTranslated()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletRequestWrapper:java.lang.String getPathTranslated()",
            "org.apache.catalina.connector.RequestFacade:java.lang.String getPathTranslated()",
            "org.apache.catalina.servlets.CGIServlet:void printServletEnvironment(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.valves.rewrite.ResolverImpl:java.lang.String resolve(java.lang.String)"
        ]
    },
    "org.apache.catalina.core.ApplicationContext:jakarta.servlet.ServletContext getContext(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationContextFacade:jakarta.servlet.ServletContext getContext(java.lang.String)",
            "org.apache.catalina.core.StandardContext$NoPluggabilityServletContext:jakarta.servlet.ServletContext getContext(java.lang.String)"
        ]
    },
    "org.apache.catalina.core.ApplicationFilterConfig:jakarta.servlet.ServletContext getServletContext()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.GenericFilter:jakarta.servlet.ServletContext getServletContext()",
            "org.apache.catalina.core.ApplicationFilterConfig:void initFilter()",
            "org.apache.catalina.filters.CsrfPreventionFilter:void init(jakarta.servlet.FilterConfig)",
            "org.apache.catalina.filters.RestCsrfPreventionFilter:void init(jakarta.servlet.FilterConfig)"
        ]
    },
    "org.apache.catalina.core.ApplicationHttpRequest:jakarta.servlet.ServletContext getServletContext()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletRequestWrapper:jakarta.servlet.ServletContext getServletContext()",
            "org.apache.catalina.core.ApplicationHttpRequest:java.lang.String getPathTranslated()",
            "org.apache.catalina.core.ApplicationPushBuilder:void <init>(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.core.AsyncContextImpl:void dispatch(java.lang.String)",
            "org.apache.catalina.filters.ExpiresFilter:java.util.Date getExpirationDate(jakarta.servlet.http.HttpServletRequest,org.apache.catalina.filters.ExpiresFilter$XHttpServletResponse)"
        ]
    },
    "org.apache.catalina.core.StandardContext:void mergeParameters()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.StandardContext:void startInternal()"
        ]
    },
    "org.apache.catalina.core.StandardHost$MemoryLeakTrackingListener:void lifecycleEvent(org.apache.catalina.LifecycleEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void fireLifecycleEvent(java.lang.String,java.lang.Object)"
        ]
    },
    "org.apache.catalina.core.StandardWrapper:jakarta.servlet.ServletContext getServletContext()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.GenericServlet:jakarta.servlet.ServletContext getServletContext()",
            "org.apache.catalina.core.StandardWrapper:jakarta.servlet.Servlet loadServlet()",
            "org.apache.catalina.core.StandardWrapper:void initServlet(jakarta.servlet.Servlet)",
            "org.apache.catalina.core.StandardWrapper:void unavailable(jakarta.servlet.UnavailableException)",
            "org.apache.catalina.core.StandardWrapper:void unload()",
            "org.apache.catalina.core.StandardWrapper:void stopInternal()",
            "org.apache.catalina.core.StandardWrapperFacade:jakarta.servlet.ServletContext getServletContext()"
        ]
    },
    "org.apache.catalina.loader.WebappLoader:void setPermissions()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.loader.WebappLoader:void startInternal()"
        ]
    },
    "org.apache.catalina.session.FileStore:java.io.File directory()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.session.FileStore:int getSize()",
            "org.apache.catalina.session.FileStore:java.lang.String[] keys()",
            "org.apache.catalina.session.FileStore:java.io.File file(java.lang.String)"
        ]
    },
    "org.apache.catalina.session.StandardManager:java.io.File file()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.session.StandardManager:void doLoad()",
            "org.apache.catalina.session.StandardManager:void doUnload()"
        ]
    },
    "org.apache.catalina.session.StandardSession:jakarta.servlet.ServletContext getServletContext()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.session.StandardSessionFacade:jakarta.servlet.ServletContext getServletContext()"
        ]
    },
    "org.apache.catalina.startup.ContextConfig:java.util.Map processJarsForWebFragments(org.apache.tomcat.util.descriptor.web.WebXml,org.apache.tomcat.util.descriptor.web.WebXmlParser)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.ContextConfig:void webConfig()"
        ]
    },
    "org.apache.catalina.startup.WebappServiceLoader:void <init>(org.apache.catalina.Context)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.ContextConfig:void processServletContainerInitializers()"
        ]
    },
    "org.apache.catalina.util.SessionConfig:java.lang.String getConfiguredSessionCookieName(org.apache.catalina.Context)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.SessionConfig:java.lang.String getSessionCookieName(org.apache.catalina.Context)",
            "org.apache.catalina.util.SessionConfig:java.lang.String getSessionUriParamName(org.apache.catalina.Context)"
        ]
    },
    "org.apache.catalina.util.SessionConfig:java.lang.String getSessionCookiePath(org.apache.catalina.Context)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationSessionCookieConfig:jakarta.servlet.http.Cookie createSessionCookie(org.apache.catalina.Context,java.lang.String,boolean)",
            "org.apache.catalina.valves.LoadBalancerDrainingValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)"
        ]
    },
    "org.apache.catalina.webresources.ExtractingRoot:java.io.File getExpansionTarget()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.webresources.ExtractingRoot:void processWebInfLib()",
            "org.apache.catalina.webresources.ExtractingRoot:void stopInternal()"
        ]
    },
    "org.apache.catalina.core.StandardContext:void setWorkDir(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.StandardContext:void postWorkDirectory()"
        ]
    },
    "org.apache.tomcat.util.descriptor.web.WebXml:java.util.Set orderWebFragments(org.apache.tomcat.util.descriptor.web.WebXml,java.util.Map,jakarta.servlet.ServletContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.ContextConfig:void webConfig()"
        ]
    },
    "org.apache.catalina.core.ApplicationContext:jakarta.servlet.FilterRegistration$Dynamic addFilter(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationContextFacade:jakarta.servlet.FilterRegistration$Dynamic addFilter(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.catalina.core.ApplicationContext:jakarta.servlet.FilterRegistration$Dynamic addFilter(java.lang.String,jakarta.servlet.Filter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationContextFacade:jakarta.servlet.FilterRegistration$Dynamic addFilter(java.lang.String,jakarta.servlet.Filter)"
        ]
    },
    "org.apache.catalina.core.ApplicationContext:jakarta.servlet.FilterRegistration$Dynamic addFilter(java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationContextFacade:jakarta.servlet.FilterRegistration$Dynamic addFilter(java.lang.String,java.lang.Class)"
        ]
    },
    "org.apache.catalina.core.ApplicationContextFacade:void declareRoles(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.core.ApplicationServletRegistration:java.util.Set setServletSecurity(jakarta.servlet.ServletSecurityElement)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationContext:jakarta.servlet.ServletRegistration$Dynamic addServlet(java.lang.String,java.lang.String,jakarta.servlet.Servlet,java.util.Map)"
        ]
    },
    "org.apache.catalina.core.ApplicationServletRegistration:java.util.Set setInitParameters(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.session.StandardSession:void setId(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.session.ManagerBase:org.apache.catalina.Session createSession(java.lang.String)"
        ]
    },
    "org.apache.catalina.session.ManagerBase:java.lang.String rotateSessionId(org.apache.catalina.Session)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.Request:java.lang.String changeSessionId()"
        ]
    },
    "org.apache.catalina.session.ManagerBase:void changeSessionId(org.apache.catalina.Session,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.Manager:java.lang.String rotateSessionId(org.apache.catalina.Session)"
        ]
    },
    "org.apache.catalina.session.StandardManager$PrivilegedDoUnload:java.lang.Void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.session.StandardManager$PrivilegedDoUnload:java.lang.Object run()"
        ]
    },
    "org.apache.catalina.session.StandardManager:void unload()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.session.StandardManager:void stopInternal()"
        ]
    },
    "org.apache.catalina.connector.Request:boolean isRequestedSessionIdValid()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletRequestWrapper:boolean isRequestedSessionIdValid()",
            "org.apache.catalina.connector.CoyoteAdapter:void parseSessionCookiesId(org.apache.catalina.connector.Request)",
            "org.apache.catalina.connector.RequestFacade:boolean isRequestedSessionIdValid()",
            "org.apache.catalina.servlets.CGIServlet:void printServletEnvironment(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.valves.ExtendedAccessLogValve$8:void addElement(java.io.CharArrayWriter,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)",
            "org.apache.catalina.valves.LoadBalancerDrainingValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)"
        ]
    },
    "org.apache.catalina.core.ApplicationHttpRequest:jakarta.servlet.http.HttpSession getSession(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletRequestWrapper:jakarta.servlet.http.HttpSession getSession(boolean)",
            "org.apache.catalina.core.ApplicationHttpRequest:jakarta.servlet.http.HttpSession getSession()",
            "org.apache.catalina.core.ApplicationPushBuilder:void <init>(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.filters.CsrfPreventionFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.filters.RestCsrfPreventionFilter$FetchRequest:boolean apply(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.filters.RestCsrfPreventionFilter$StateChangingRequest:boolean apply(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.security.SecurityUtil:void execute(java.lang.reflect.Method,java.lang.Object,java.lang.Object[],java.security.Principal)",
            "org.apache.catalina.servlets.CGIServlet:void printServletEnvironment(jakarta.servlet.http.HttpServletRequest)"
        ]
    },
    "org.apache.catalina.core.ApplicationHttpRequest:boolean isRequestedSessionIdValid()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletRequestWrapper:boolean isRequestedSessionIdValid()",
            "org.apache.catalina.servlets.CGIServlet:void printServletEnvironment(jakarta.servlet.http.HttpServletRequest)"
        ]
    },
    "org.apache.catalina.session.ManagerBase:void processExpires()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.session.ManagerBase:void backgroundProcess()"
        ]
    },
    "org.apache.catalina.session.PersistentManagerBase:void processMaxIdleSwaps()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.session.PersistentManagerBase:void processPersistenceChecks()"
        ]
    },
    "org.apache.catalina.authenticator.SingleSignOn:void expire(org.apache.catalina.authenticator.SingleSignOnSessionKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.SingleSignOn:void deregister(java.lang.String)"
        ]
    },
    "org.apache.catalina.manager.ManagerServlet:void sessions(java.io.PrintWriter,org.apache.catalina.util.ContextName,int,org.apache.tomcat.util.res.StringManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.HTMLManagerServlet:java.lang.String sessions(org.apache.catalina.util.ContextName,int,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.ManagerServlet:void expireSessions(java.io.PrintWriter,org.apache.catalina.util.ContextName,jakarta.servlet.http.HttpServletRequest,org.apache.tomcat.util.res.StringManager)"
        ]
    },
    "org.apache.catalina.session.ManagerBase:void expireSession(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.session.StandardManager:void doLoad()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.session.StandardManager$PrivilegedDoLoad:java.lang.Void run()",
            "org.apache.catalina.session.StandardManager:void load()"
        ]
    },
    "org.apache.catalina.session.StandardSession:void invalidate()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.HTMLManagerServlet:int invalidateSessions(org.apache.catalina.util.ContextName,java.lang.String[],org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.session.StandardSessionFacade:void invalidate()"
        ]
    },
    "org.apache.catalina.session.StandardSession:void putValue(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.session.StandardSessionFacade:void setAttribute(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.Request:void setUserPrincipal(java.security.Principal)",
            "org.apache.catalina.filters.CsrfPreventionFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.security.SecurityUtil:void execute(java.lang.reflect.Method,java.lang.Object,java.lang.Object[],java.security.Principal)",
            "org.apache.catalina.session.StandardSessionFacade:void setAttribute(java.lang.String,java.lang.Object)",
            "org.apache.catalina.session.StandardSessionFacade:void putValue(java.lang.String,java.lang.Object)",
            "org.apache.catalina.valves.CrawlerSessionManagerValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.filters.RestCsrfPreventionFilter$RestCsrfPreventionStrategy$setAttribute__37:void setNonce(java.lang.Object,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.catalina.session.StandardSessionFacade:void putValue(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.filters.RestCsrfPreventionFilter$RestCsrfPreventionStrategy$setAttribute__37:void setNonce(java.lang.Object,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.RestCsrfPreventionFilter$FetchRequest:boolean apply(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.filters.RestCsrfPreventionFilter$StateChangingRequest:boolean apply(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.session.StandardSession:void removeAttribute(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.HTMLManagerServlet:boolean removeSessionAttribute(org.apache.catalina.util.ContextName,java.lang.String,java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.session.StandardSession:void removeValue(java.lang.String)",
            "org.apache.catalina.session.StandardSession:void setAttribute(java.lang.String,java.lang.Object,boolean)",
            "org.apache.catalina.session.StandardSessionFacade:void removeAttribute(java.lang.String)",
            "org.apache.catalina.session.StandardSessionFacade:void removeValue(java.lang.String)"
        ]
    },
    "org.apache.catalina.session.StandardSession:void writeObjectData(java.io.ObjectOutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.session.DataSourceStore:void save(org.apache.catalina.Session)",
            "org.apache.catalina.session.FileStore:void save(org.apache.catalina.Session)",
            "org.apache.catalina.session.StandardManager:void doUnload()"
        ]
    },
    "org.apache.catalina.realm.JNDIRealm:java.lang.String getPassword(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.realm.RealmBase:java.security.Principal authenticate(java.lang.String,java.lang.String)",
            "org.apache.catalina.realm.RealmBase:java.lang.String getDigest(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.catalina.realm.JNDIRealm:java.security.Principal getPrincipal(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.realm.RealmBase:java.security.Principal authenticate(java.lang.String)",
            "org.apache.catalina.realm.RealmBase:java.security.Principal authenticate(java.lang.String,java.lang.String)",
            "org.apache.catalina.realm.RealmBase:java.security.Principal authenticate(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.catalina.realm.RealmBase:java.security.Principal getPrincipal(java.security.cert.X509Certificate)",
            "org.apache.catalina.realm.RealmBase:java.security.Principal getPrincipal(org.ietf.jgss.GSSName,org.ietf.jgss.GSSCredential)"
        ]
    },
    "org.apache.catalina.realm.JNDIRealm:java.security.Principal getPrincipal(org.ietf.jgss.GSSName,org.ietf.jgss.GSSCredential)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.realm.RealmBase:java.security.Principal authenticate(org.ietf.jgss.GSSContext,boolean)",
            "org.apache.catalina.realm.RealmBase:java.security.Principal authenticate(org.ietf.jgss.GSSName,org.ietf.jgss.GSSCredential)"
        ]
    },
    "org.apache.naming.NamingContext:void bind(javax.naming.Name,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.naming.NamingContext:void bind(java.lang.String,java.lang.Object)",
            "org.apache.naming.NamingContext:void rename(javax.naming.Name,javax.naming.Name)",
            "org.apache.naming.NamingContext:javax.naming.Context createSubcontext(javax.naming.Name)",
            "org.apache.naming.NamingContext:void bind(javax.naming.Name,java.lang.Object,boolean)",
            "org.apache.naming.SelectorContext:void bind(javax.naming.Name,java.lang.Object)"
        ]
    },
    "org.apache.naming.NamingContext:void rebind(javax.naming.Name,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.naming.NamingContext:void rebind(java.lang.String,java.lang.Object)",
            "org.apache.naming.NamingContext:void bind(javax.naming.Name,java.lang.Object,boolean)",
            "org.apache.naming.SelectorContext:void rebind(javax.naming.Name,java.lang.Object)"
        ]
    },
    "org.apache.naming.NamingContext:void unbind(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.NamingContextListener:void removeEjb(java.lang.String)",
            "org.apache.catalina.core.NamingContextListener:void removeEnvironment(java.lang.String)",
            "org.apache.catalina.core.NamingContextListener:void removeLocalEjb(java.lang.String)",
            "org.apache.catalina.core.NamingContextListener:void removeMessageDestinationRef(java.lang.String)",
            "org.apache.catalina.core.NamingContextListener:void removeService(java.lang.String)",
            "org.apache.catalina.core.NamingContextListener:void removeResource(java.lang.String)",
            "org.apache.catalina.core.NamingContextListener:void removeResourceEnvRef(java.lang.String)",
            "org.apache.catalina.core.NamingContextListener:void removeResourceLink(java.lang.String)",
            "org.apache.naming.SelectorContext:void unbind(java.lang.String)"
        ]
    },
    "org.apache.naming.NamingContext:javax.naming.NamingEnumeration list(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.naming.SelectorContext:javax.naming.NamingEnumeration list(java.lang.String)"
        ]
    },
    "org.apache.naming.NamingContext:javax.naming.NamingEnumeration listBindings(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.ManagerServlet:void printResources(java.io.PrintWriter,java.lang.String,javax.naming.Context,java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.mbeans.GlobalResourcesLifecycleListener:void createMBeans(java.lang.String,javax.naming.Context)",
            "org.apache.naming.SelectorContext:javax.naming.NamingEnumeration listBindings(java.lang.String)"
        ]
    },
    "org.apache.naming.NamingContext:void destroySubcontext(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.naming.SelectorContext:void destroySubcontext(java.lang.String)"
        ]
    },
    "org.apache.naming.NamingContext:javax.naming.NameParser getNameParser(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.naming.SelectorContext:javax.naming.NameParser getNameParser(java.lang.String)"
        ]
    },
    "org.apache.tomcat.util.json.JSONParser:java.util.ArrayList parseArray()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream:void println(char)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream:void println(char)"
        ]
    },
    "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream:void println(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream:void println(int)"
        ]
    },
    "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream:void println(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream:void println(long)"
        ]
    },
    "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream:void println(float)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream:void println(float)"
        ]
    },
    "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream:void println(double)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream:void println(double)"
        ]
    },
    "org.apache.catalina.core.ApplicationPart:java.lang.String getSubmittedFileName()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.Request:void parseParts(boolean)",
            "org.apache.catalina.manager.HTMLManagerServlet:java.lang.String upload(jakarta.servlet.http.HttpServletRequest,org.apache.tomcat.util.res.StringManager)"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.FileUploadBase:java.lang.String getFileName(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.FileUploadBase:java.lang.String getFileName(org.apache.tomcat.util.http.fileupload.FileItemHeaders)"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.FileUploadBase:java.lang.String getFieldName(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.FileUploadBase:java.lang.String getFieldName(org.apache.tomcat.util.http.fileupload.FileItemHeaders)"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.ParameterParser:java.util.Map parse(java.lang.String,char[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.FileUploadBase:byte[] getBoundary(java.lang.String)"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.disk.DiskFileItem:java.lang.String getCharSet()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.disk.DiskFileItem:java.lang.String getString()"
        ]
    },
    "org.apache.catalina.startup.UserConfig$DeployUserDirectory:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.AsyncContextImpl$RunnableWrapper:void run()",
            "org.apache.catalina.core.AsyncContextImpl:void doInternalDispatch()",
            "org.apache.catalina.core.StandardThreadExecutor:void execute(java.lang.Runnable)",
            "org.apache.coyote.AbstractProcessor:void execute(java.lang.Runnable)",
            "org.apache.coyote.AsyncStateMachine:void asyncRun(java.lang.Runnable)",
            "org.apache.tomcat.util.net.Nio2Endpoint:void stopInternal()",
            "org.apache.tomcat.util.net.SecureNio2Channel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()",
            "org.apache.tomcat.util.net.SecureNioChannel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()",
            "org.apache.tomcat.util.net.SocketWrapperBase:void execute(java.lang.Runnable)",
            "org.apache.tomcat.util.threads.InlineExecutorService:void execute(java.lang.Runnable)",
            "org.apache.tomcat.util.threads.ScheduledThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.tomcat.util.threads.TaskThread$WrappingRunnable:void run()",
            "org.apache.tomcat.util.threads.ThreadPoolExecutor:void execute(java.lang.Runnable,long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.apache.catalina.realm.DataSourceRealm:void startInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void start()"
        ]
    },
    "org.apache.catalina.realm.JAASRealm:void startInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void start()"
        ]
    },
    "org.apache.catalina.realm.JNDIRealm:void startInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void start()"
        ]
    },
    "org.apache.catalina.realm.JNDIRealm:void stopInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void stop()"
        ]
    },
    "org.apache.catalina.realm.UserDatabaseRealm:void stopInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void stop()"
        ]
    },
    "org.apache.catalina.authenticator.SingleSignOn:void startInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void start()"
        ]
    },
    "org.apache.catalina.valves.HealthCheckValve:void startInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void start()"
        ]
    },
    "org.apache.catalina.valves.RequestFilterValve:void startInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void start()"
        ]
    },
    "org.apache.catalina.authenticator.AuthenticatorBase:void stopInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void stop()"
        ]
    },
    "org.apache.catalina.authenticator.SingleSignOn:void stopInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void stop()"
        ]
    },
    "org.apache.tomcat.util.net.AprEndpoint$Poller:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.AprEndpoint:void stopInternal()"
        ]
    },
    "org.apache.tomcat.util.net.AprEndpoint$Sendfile:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.AprEndpoint$Sendfile:void run()",
            "org.apache.tomcat.util.net.AprEndpoint:void stopInternal()"
        ]
    },
    "org.apache.catalina.connector.CoyoteWriter:void print(char[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.CoyoteWriter:void println(char[])",
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void print(char[])"
        ]
    },
    "org.apache.catalina.connector.CoyoteWriter:void println()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.CoyoteWriter:void println(boolean)",
            "org.apache.catalina.connector.CoyoteWriter:void println(char)",
            "org.apache.catalina.connector.CoyoteWriter:void println(int)",
            "org.apache.catalina.connector.CoyoteWriter:void println(long)",
            "org.apache.catalina.connector.CoyoteWriter:void println(float)",
            "org.apache.catalina.connector.CoyoteWriter:void println(double)",
            "org.apache.catalina.connector.CoyoteWriter:void println(char[])",
            "org.apache.catalina.connector.CoyoteWriter:void println(java.lang.String)",
            "org.apache.catalina.connector.CoyoteWriter:void println(java.lang.Object)",
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void println()",
            "org.apache.catalina.manager.JMXProxyServlet:void listBeans(java.io.PrintWriter,java.lang.String)",
            "org.apache.catalina.manager.ManagerServlet:void printResources(java.io.PrintWriter,java.lang.String,javax.naming.Context,java.lang.String,org.apache.tomcat.util.res.StringManager)"
        ]
    },
    "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void write(char[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void write(char[])"
        ]
    },
    "org.apache.catalina.connector.CoyoteWriter:void println(char)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void println(char)"
        ]
    },
    "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void print(char)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void print(char)",
            "org.apache.catalina.manager.ManagerServlet:void printResources(java.io.PrintWriter,java.lang.String,javax.naming.Context,java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.StatusTransformer:void writeOSState(java.io.PrintWriter,int,java.lang.Object[])",
            "org.apache.catalina.manager.StatusTransformer:void writeVMState(java.io.PrintWriter,int,java.lang.Object[])",
            "org.apache.catalina.manager.StatusTransformer:void writeConnectorState(java.io.PrintWriter,javax.management.ObjectName,java.lang.String,javax.management.MBeanServer,java.util.Vector,java.util.Vector,int,java.lang.Object[])",
            "org.apache.catalina.util.DOMWriter:void print(org.w3c.dom.Node)"
        ]
    },
    "org.apache.catalina.manager.StatusTransformer:void writeOSState(java.io.PrintWriter,int,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.StatusManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.manager.StatusTransformer:void writeVMState(java.io.PrintWriter,int,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.StatusManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.connector.CoyoteWriter:void print(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.CoyoteWriter:void println(boolean)",
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void print(boolean)"
        ]
    },
    "org.apache.catalina.connector.CoyoteWriter:void print(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.CoyoteWriter:void println(int)",
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void print(int)",
            "org.apache.catalina.manager.StatusTransformer:void writeJspMonitor(java.io.PrintWriter,java.util.Set,javax.management.MBeanServer,int)"
        ]
    },
    "org.apache.catalina.connector.CoyoteWriter:void print(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.CoyoteWriter:void println(long)",
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void print(long)"
        ]
    },
    "org.apache.catalina.connector.CoyoteWriter:void print(float)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.CoyoteWriter:void println(float)",
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void print(float)"
        ]
    },
    "org.apache.catalina.connector.CoyoteWriter:void print(double)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.CoyoteWriter:void println(double)",
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void print(double)"
        ]
    },
    "org.apache.catalina.connector.CoyoteWriter:void print(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.CoyoteWriter:void println(java.lang.String)",
            "org.apache.catalina.connector.Response:void sendRedirect(java.lang.String,int)",
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void print(java.lang.String)",
            "org.apache.catalina.manager.HTMLManagerServlet:void list(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.JMXProxyServlet:void getAttribute(java.io.PrintWriter,java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.catalina.manager.JMXProxyServlet:void listBeans(java.io.PrintWriter,java.lang.String)",
            "org.apache.catalina.manager.ManagerServlet:void vmInfo(java.io.PrintWriter,org.apache.tomcat.util.res.StringManager,java.util.Enumeration)",
            "org.apache.catalina.manager.ManagerServlet:void threadDump(java.io.PrintWriter,org.apache.tomcat.util.res.StringManager,java.util.Enumeration)",
            "org.apache.catalina.manager.ManagerServlet:void sslConnectorCiphers(java.io.PrintWriter,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.ManagerServlet:void printResources(java.io.PrintWriter,java.lang.String,javax.naming.Context,java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.StatusTransformer:void writeHeader(java.io.PrintWriter,java.lang.Object[],int)",
            "org.apache.catalina.manager.StatusTransformer:void writeBody(java.io.PrintWriter,java.lang.Object[],int)",
            "org.apache.catalina.manager.StatusTransformer:void writeManager(java.io.PrintWriter,java.lang.Object[],int)",
            "org.apache.catalina.manager.StatusTransformer:void writePageHeading(java.io.PrintWriter,java.lang.Object[],int)",
            "org.apache.catalina.manager.StatusTransformer:void writeServerInfo(java.io.PrintWriter,java.lang.Object[],int)",
            "org.apache.catalina.manager.StatusTransformer:void writeFooter(java.io.PrintWriter,int)",
            "org.apache.catalina.manager.StatusTransformer:void writeOSState(java.io.PrintWriter,int,java.lang.Object[])",
            "org.apache.catalina.manager.StatusTransformer:void writeVMState(java.io.PrintWriter,int,java.lang.Object[])",
            "org.apache.catalina.manager.StatusTransformer:void writeConnectorState(java.io.PrintWriter,javax.management.ObjectName,java.lang.String,javax.management.MBeanServer,java.util.Vector,java.util.Vector,int,java.lang.Object[])",
            "org.apache.catalina.manager.StatusTransformer:void writeProcessorState(java.io.PrintWriter,javax.management.ObjectName,javax.management.MBeanServer,int)",
            "org.apache.catalina.manager.StatusTransformer:void writeDetailedState(java.io.PrintWriter,javax.management.MBeanServer,int)",
            "org.apache.catalina.manager.StatusTransformer:void writeContext(java.io.PrintWriter,javax.management.ObjectName,javax.management.MBeanServer,int)",
            "org.apache.catalina.manager.StatusTransformer:void writeManager(java.io.PrintWriter,javax.management.ObjectName,javax.management.MBeanServer,int)",
            "org.apache.catalina.manager.StatusTransformer:void writeJspMonitor(java.io.PrintWriter,java.util.Set,javax.management.MBeanServer,int)",
            "org.apache.catalina.manager.StatusTransformer:void writeWrapper(java.io.PrintWriter,javax.management.ObjectName,javax.management.MBeanServer,int)",
            "org.apache.catalina.manager.host.HTMLHostManagerServlet:void list(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.users.MemoryUserDatabase:void save()",
            "org.apache.catalina.util.DOMWriter:void print(org.w3c.dom.Node)",
            "org.apache.tomcat.util.http.MimeHeaders:java.lang.String toString()"
        ]
    },
    "org.apache.catalina.connector.CoyoteWriter:void print(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.CoyoteWriter:void println(java.lang.Object)",
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void print(java.lang.Object)",
            "org.apache.catalina.manager.StatusTransformer:void writeOSState(java.io.PrintWriter,int,java.lang.Object[])",
            "org.apache.catalina.manager.StatusTransformer:void writeVMState(java.io.PrintWriter,int,java.lang.Object[])",
            "org.apache.catalina.manager.StatusTransformer:void writeConnectorState(java.io.PrintWriter,javax.management.ObjectName,java.lang.String,javax.management.MBeanServer,java.util.Vector,java.util.Vector,int,java.lang.Object[])",
            "org.apache.catalina.manager.StatusTransformer:void writeManager(java.io.PrintWriter,javax.management.ObjectName,javax.management.MBeanServer,int)",
            "org.apache.catalina.manager.StatusTransformer:void writeWrapper(java.io.PrintWriter,javax.management.ObjectName,javax.management.MBeanServer,int)"
        ]
    },
    "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void write(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.jaspic.PersistentProviderRegistrations:void writeOptional(java.lang.String,java.lang.String,java.io.Writer)",
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void write(java.lang.String)",
            "org.apache.catalina.filters.RemoteCIDRFilter:void sendErrorWhenNotHttp(jakarta.servlet.ServletResponse)",
            "org.apache.catalina.filters.RequestFilter:void sendErrorWhenNotHttp(jakarta.servlet.ServletResponse)",
            "org.apache.catalina.manager.StatusTransformer:void writeHeader(java.io.PrintWriter,java.lang.Object[],int)",
            "org.apache.catalina.manager.StatusTransformer:void writeFooter(java.io.PrintWriter,int)",
            "org.apache.catalina.manager.StatusTransformer:void writeVMState(java.io.PrintWriter,int,java.lang.Object[])",
            "org.apache.catalina.manager.StatusTransformer:void writeConnectorState(java.io.PrintWriter,javax.management.ObjectName,java.lang.String,javax.management.MBeanServer,java.util.Vector,java.util.Vector,int,java.lang.Object[])",
            "org.apache.catalina.manager.StatusTransformer:void writeProcessorState(java.io.PrintWriter,javax.management.ObjectName,javax.management.MBeanServer,int)",
            "org.apache.catalina.servlets.DefaultServlet:java.io.InputStream renderHtml(jakarta.servlet.http.HttpServletRequest,java.lang.String,org.apache.catalina.WebResource,java.lang.String)",
            "org.apache.catalina.servlets.WebdavServlet:void doLock(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.WebdavServlet:void sendReport(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,java.util.Hashtable)",
            "org.apache.catalina.util.XMLWriter:void sendData()",
            "org.apache.catalina.valves.ErrorReportValve:void report(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,java.lang.Throwable)",
            "org.apache.catalina.valves.JsonErrorReportValve:void report(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,java.lang.Throwable)",
            "org.apache.juli.FileHandler:void publish(java.util.logging.LogRecord)",
            "org.apache.juli.FileHandler:void closeWriter()",
            "org.apache.juli.FileHandler:void openWriter()"
        ]
    },
    "org.apache.catalina.manager.StatusTransformer:void writeHeader(java.io.PrintWriter,java.lang.Object[],int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.StatusManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.manager.StatusTransformer:void writeFooter(java.io.PrintWriter,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.StatusManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.authenticator.jaspic.PersistentProviderRegistrations:void writeProviders(org.apache.catalina.authenticator.jaspic.PersistentProviderRegistrations$Providers,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.jaspic.AuthConfigFactoryImpl:void savePersistentRegistrations()"
        ]
    },
    "org.apache.catalina.authenticator.jaspic.AuthConfigFactoryImpl:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.security.auth.message.config.AuthConfigFactory:jakarta.security.auth.message.config.AuthConfigFactory lambda$getFactory$0(java.lang.String)"
        ]
    },
    "org.apache.catalina.authenticator.jaspic.AuthConfigFactoryImpl:void refresh()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.core.DefaultInstanceManager:java.lang.Class loadClass(java.lang.String,java.lang.ClassLoader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.DefaultInstanceManager$PrivilegedLoadClass:java.lang.Class run()",
            "org.apache.catalina.core.DefaultInstanceManager:java.lang.Class loadClassMaybePrivileged(java.lang.String,java.lang.ClassLoader)"
        ]
    },
    "org.apache.catalina.security.SecurityClassLoad:void loadCorePackage(java.lang.ClassLoader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.security.SecurityClassLoad:void securityClassLoad(java.lang.ClassLoader,boolean)"
        ]
    },
    "org.apache.catalina.security.SecurityClassLoad:void loadLoaderPackage(java.lang.ClassLoader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.security.SecurityClassLoad:void securityClassLoad(java.lang.ClassLoader,boolean)"
        ]
    },
    "org.apache.catalina.security.SecurityClassLoad:void loadRealmPackage(java.lang.ClassLoader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.security.SecurityClassLoad:void securityClassLoad(java.lang.ClassLoader,boolean)"
        ]
    },
    "org.apache.catalina.security.SecurityClassLoad:void loadServletsPackage(java.lang.ClassLoader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.security.SecurityClassLoad:void securityClassLoad(java.lang.ClassLoader,boolean)"
        ]
    },
    "org.apache.catalina.security.SecurityClassLoad:void loadSessionPackage(java.lang.ClassLoader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.security.SecurityClassLoad:void securityClassLoad(java.lang.ClassLoader,boolean)"
        ]
    },
    "org.apache.catalina.security.SecurityClassLoad:void loadUtilPackage(java.lang.ClassLoader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.security.SecurityClassLoad:void securityClassLoad(java.lang.ClassLoader,boolean)"
        ]
    },
    "org.apache.catalina.security.SecurityClassLoad:void loadCoyotePackage(java.lang.ClassLoader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.security.SecurityClassLoad:void securityClassLoad(java.lang.ClassLoader,boolean)"
        ]
    },
    "org.apache.catalina.security.SecurityClassLoad:void loadJakartaPackage(java.lang.ClassLoader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.security.SecurityClassLoad:void securityClassLoad(java.lang.ClassLoader,boolean)"
        ]
    },
    "org.apache.catalina.security.SecurityClassLoad:void loadConnectorPackage(java.lang.ClassLoader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.security.SecurityClassLoad:void securityClassLoad(java.lang.ClassLoader,boolean)"
        ]
    },
    "org.apache.catalina.security.SecurityClassLoad:void loadTomcatPackage(java.lang.ClassLoader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.security.SecurityClassLoad:void securityClassLoad(java.lang.ClassLoader,boolean)"
        ]
    },
    "org.apache.catalina.util.CustomObjectInputStream:java.lang.Class resolveProxyClass(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.util.Introspection:java.lang.Class loadClass(org.apache.catalina.Context,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationContext:jakarta.servlet.ServletRegistration$Dynamic addServlet(java.lang.String,java.lang.String,jakarta.servlet.Servlet,java.util.Map)",
            "org.apache.catalina.deploy.NamingResourcesImpl:boolean checkResourceType(org.apache.tomcat.util.descriptor.web.ResourceBase)",
            "org.apache.catalina.deploy.NamingResourcesImpl:java.lang.Class getCompatibleType(org.apache.catalina.Context,org.apache.tomcat.util.descriptor.web.ResourceBase,java.lang.Class)",
            "org.apache.catalina.startup.ContextConfig:void checkHandlesTypes(org.apache.tomcat.util.bcel.classfile.JavaClass,java.util.Map)",
            "org.apache.catalina.startup.WebAnnotationSet:void loadApplicationListenerAnnotations(org.apache.catalina.Context)",
            "org.apache.catalina.startup.WebAnnotationSet:void loadApplicationFilterAnnotations(org.apache.catalina.Context)",
            "org.apache.catalina.startup.WebAnnotationSet:void loadApplicationServletAnnotations(org.apache.catalina.Context)"
        ]
    },
    "org.apache.tomcat.SimpleInstanceManager:java.lang.Object newInstance(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationContext:jakarta.servlet.Filter createFilter(java.lang.Class)",
            "org.apache.catalina.core.ApplicationContext:jakarta.servlet.Servlet createServlet(java.lang.Class)",
            "org.apache.catalina.core.ApplicationContext:void addListener(java.lang.String)",
            "org.apache.catalina.core.ApplicationFilterConfig:jakarta.servlet.Filter getFilter()",
            "org.apache.catalina.core.StandardContext:boolean listenerStart()",
            "org.apache.catalina.core.StandardWrapper:jakarta.servlet.Servlet loadServlet()"
        ]
    },
    "org.apache.tomcat.SimpleInstanceManager:java.lang.Object newInstance(java.lang.String,java.lang.ClassLoader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.AsyncContextImpl:jakarta.servlet.AsyncListener createListener(java.lang.Class)"
        ]
    },
    "org.apache.tomcat.util.IntrospectionUtils:java.lang.Object callMethod1(java.lang.Object,java.lang.String,java.lang.Object,java.lang.String,java.lang.ClassLoader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.SetNextNamingRule:void end(java.lang.String,java.lang.String)",
            "org.apache.tomcat.util.digester.SetNextRule:void end(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.tomcat.util.digester.ObjectCreateRule:void begin(java.lang.String,java.lang.String,org.xml.sax.Attributes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.ListenerCreateRule:void begin(java.lang.String,java.lang.String,org.xml.sax.Attributes)",
            "org.apache.tomcat.util.digester.Digester:void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)"
        ]
    },
    "org.apache.tomcat.util.modeler.BaseModelMBean:java.lang.Class getAttributeClass(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.modeler.ManagedBean:java.lang.reflect.Method getSetter(java.lang.String,org.apache.tomcat.util.modeler.BaseModelMBean,java.lang.Object)",
            "org.apache.tomcat.util.modeler.ManagedBean:java.lang.reflect.Method getInvoke(java.lang.String,java.lang.Object[],java.lang.String[],org.apache.tomcat.util.modeler.BaseModelMBean,java.lang.Object)"
        ]
    },
    "org.apache.tomcat.util.modeler.ManagedBean:javax.management.DynamicMBean createMBean(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.mbeans.MBeanUtils:javax.management.DynamicMBean createMBean(org.apache.tomcat.util.descriptor.web.ContextEnvironment)",
            "org.apache.catalina.mbeans.MBeanUtils:javax.management.DynamicMBean createMBean(org.apache.tomcat.util.descriptor.web.ContextResource)",
            "org.apache.catalina.mbeans.MBeanUtils:javax.management.DynamicMBean createMBean(org.apache.tomcat.util.descriptor.web.ContextResourceLink)",
            "org.apache.catalina.mbeans.MBeanUtils:javax.management.DynamicMBean createMBean(org.apache.catalina.Group)",
            "org.apache.catalina.mbeans.MBeanUtils:javax.management.DynamicMBean createMBean(org.apache.catalina.Role)",
            "org.apache.catalina.mbeans.MBeanUtils:javax.management.DynamicMBean createMBean(org.apache.catalina.User)",
            "org.apache.catalina.mbeans.MBeanUtils:javax.management.DynamicMBean createMBean(org.apache.catalina.UserDatabase)",
            "org.apache.tomcat.util.modeler.Registry:void registerComponent(java.lang.Object,javax.management.ObjectName,java.lang.String)"
        ]
    },
    "org.apache.tomcat.util.scan.AbstractInputStreamJar:void reset()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.scan.AbstractInputStreamJar:void nextEntry()",
            "org.apache.tomcat.util.scan.AbstractInputStreamJar:java.util.jar.Manifest getManifest()",
            "org.apache.tomcat.util.scan.AbstractInputStreamJar:void gotoEntry(java.lang.String)",
            "org.apache.tomcat.util.scan.ReferenceCountedJar:void reset()"
        ]
    },
    "org.apache.tomcat.util.scan.AbstractInputStreamJar:void populateMrMap()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.scan.AbstractInputStreamJar:void reset()"
        ]
    },
    "org.apache.catalina.core.StandardContext:java.lang.String getCharset(java.util.Locale)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.Response:void setLocale(java.util.Locale)"
        ]
    },
    "org.apache.catalina.core.StandardContext:void addLocaleEncodingMappingParameter(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.ContextConfig:void configureContext(org.apache.tomcat.util.descriptor.web.WebXml)"
        ]
    },
    "org.apache.tomcat.util.scan.StandardJarScanner:void process(org.apache.tomcat.JarScanType,org.apache.tomcat.JarScannerCallback,java.net.URL,java.lang.String,boolean,java.util.Deque)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.scan.StandardJarScanner:void scan(org.apache.tomcat.JarScanType,jakarta.servlet.ServletContext,org.apache.tomcat.JarScannerCallback)",
            "org.apache.tomcat.util.scan.StandardJarScanner:void processURLs(org.apache.tomcat.JarScanType,org.apache.tomcat.JarScannerCallback,java.util.Set,boolean,java.util.Deque)"
        ]
    },
    "org.apache.catalina.connector.RequestFacade$GetSessionPrivilegedAction:java.lang.Object run()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.security.auth.message.config.AuthConfigFactory:java.lang.String getFactoryClassName()",
            "jakarta.servlet.http.Cookie:void <clinit>()",
            "org.apache.catalina.connector.RequestFacade:jakarta.servlet.http.HttpSession getSession(boolean)",
            "org.apache.catalina.startup.ClassLoaderFactory:java.lang.ClassLoader createClassLoader(java.io.File[],java.io.File[],java.lang.ClassLoader)",
            "org.apache.catalina.startup.ClassLoaderFactory:java.lang.ClassLoader createClassLoader(java.util.List,java.lang.ClassLoader)",
            "org.apache.catalina.util.Introspection:java.lang.reflect.Field[] getDeclaredFields(java.lang.Class)",
            "org.apache.catalina.util.Introspection:java.lang.reflect.Method[] getDeclaredMethods(java.lang.Class)",
            "org.apache.juli.ClassLoaderLogManager:boolean addLogger(java.util.logging.Logger)",
            "org.apache.juli.ClassLoaderLogManager:org.apache.juli.ClassLoaderLogManager$ClassLoaderLogInfo getClassLoaderInfo(java.lang.ClassLoader)",
            "org.apache.juli.ClassLoaderLogManager:void doSetParentLogger(java.util.logging.Logger,java.util.logging.Logger)",
            "org.apache.juli.FileHandler$1:java.lang.Thread newThread(java.lang.Runnable)",
            "org.apache.naming.factory.MailSessionFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.naming.factory.SendMailFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.tomcat.util.compat.JrePlatform:void <clinit>()"
        ]
    },
    "org.apache.catalina.connector.RequestFacade:jakarta.servlet.http.HttpSession getSession()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletRequestWrapper:jakarta.servlet.http.HttpSession getSession()",
            "org.apache.catalina.filters.SessionInitializerFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)"
        ]
    },
    "org.apache.catalina.security.SecurityUtil:void doAsPrivilege(java.lang.String,jakarta.servlet.Servlet,java.lang.Class[],java.lang.Object[],java.security.Principal)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationFilterChain:void internalDoFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)",
            "org.apache.catalina.security.SecurityUtil:void doAsPrivilege(java.lang.String,jakarta.servlet.Servlet)",
            "org.apache.catalina.security.SecurityUtil:void doAsPrivilege(java.lang.String,jakarta.servlet.Servlet,java.lang.Class[],java.lang.Object[])"
        ]
    },
    "org.apache.catalina.security.SecurityUtil:void doAsPrivilege(java.lang.String,jakarta.servlet.Filter,java.lang.Class[],java.lang.Object[],java.security.Principal)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationFilterChain:void internalDoFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)",
            "org.apache.catalina.security.SecurityUtil:void doAsPrivilege(java.lang.String,jakarta.servlet.Filter,java.lang.Class[],java.lang.Object[])"
        ]
    },
    "jakarta.servlet.http.HttpServletResponseWrapper:java.lang.String encodeRedirectURL(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletResponseWrapper:java.lang.String encodeRedirectURL(java.lang.String)",
            "org.apache.catalina.authenticator.FormAuthenticator:boolean doAuthenticate(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.filters.CsrfPreventionFilter$CsrfResponseWrapper:java.lang.String encodeRedirectURL(java.lang.String)",
            "org.apache.catalina.servlets.DefaultServlet:void doDirectoryRedirect(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.connector.Response:java.lang.String encodeRedirectUrl(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletResponseWrapper:java.lang.String encodeRedirectUrl(java.lang.String)"
        ]
    },
    "org.apache.catalina.connector.ResponseFacade:java.lang.String encodeRedirectURL(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletResponseWrapper:java.lang.String encodeRedirectURL(java.lang.String)",
            "org.apache.catalina.authenticator.FormAuthenticator:boolean doAuthenticate(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.DefaultServlet:void doDirectoryRedirect(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.connector.ResponseFacade:java.lang.String encodeRedirectUrl(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletResponseWrapper:java.lang.String encodeRedirectUrl(java.lang.String)"
        ]
    },
    "jakarta.servlet.http.HttpServletResponseWrapper:java.lang.String encodeURL(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletResponseWrapper:java.lang.String encodeURL(java.lang.String)",
            "org.apache.catalina.filters.CsrfPreventionFilter$CsrfResponseWrapper:java.lang.String encodeURL(java.lang.String)",
            "org.apache.catalina.manager.HTMLManagerServlet:void list(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.HTMLManagerServlet:void displaySessionDetailPage(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.catalina.util.ContextName,java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.StatusManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.host.HTMLHostManagerServlet:void list(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,java.lang.String,org.apache.tomcat.util.res.StringManager)"
        ]
    },
    "org.apache.catalina.connector.Response:java.lang.String encodeUrl(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletResponseWrapper:java.lang.String encodeUrl(java.lang.String)"
        ]
    },
    "org.apache.catalina.connector.ResponseFacade:java.lang.String encodeURL(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletResponseWrapper:java.lang.String encodeURL(java.lang.String)",
            "org.apache.catalina.manager.HTMLManagerServlet:void list(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.HTMLManagerServlet:void displaySessionDetailPage(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.catalina.util.ContextName,java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.StatusManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.host.HTMLHostManagerServlet:void list(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,java.lang.String,org.apache.tomcat.util.res.StringManager)"
        ]
    },
    "org.apache.catalina.connector.ResponseFacade:java.lang.String encodeUrl(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletResponseWrapper:java.lang.String encodeUrl(java.lang.String)"
        ]
    },
    "org.apache.catalina.core.ApplicationContext:void addListener(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationContextFacade:void addListener(java.lang.Class)"
        ]
    },
    "org.apache.catalina.core.ApplicationContextFacade:java.util.EventListener createListener(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.core.ApplicationContextFacade:jakarta.servlet.Filter createFilter(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.core.ApplicationContextFacade:jakarta.servlet.Servlet createServlet(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.core.ApplicationContextFacade:void addListener(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.mbeans.ContextEnvironmentMBean:void setAttribute(javax.management.Attribute)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.modeler.BaseModelMBean:void setAttribute(javax.management.Attribute)",
            "org.apache.tomcat.util.modeler.BaseModelMBean:javax.management.AttributeList setAttributes(javax.management.AttributeList)"
        ]
    },
    "org.apache.catalina.mbeans.NamingResourcesMBean:java.lang.String addEnvironment(java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.mbeans.ContextResourceMBean:void setAttribute(javax.management.Attribute)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.modeler.BaseModelMBean:void setAttribute(javax.management.Attribute)",
            "org.apache.tomcat.util.modeler.BaseModelMBean:javax.management.AttributeList setAttributes(javax.management.AttributeList)"
        ]
    },
    "org.apache.catalina.mbeans.NamingResourcesMBean:java.lang.String addResource(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.juli.FileHandler:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Boolean,java.lang.Integer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.juli.FileHandler:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.Integer)"
        ]
    },
    "org.apache.catalina.servlets.DefaultServlet$DirsFirstComparator:int compare(org.apache.catalina.WebResource,org.apache.catalina.WebResource)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.DefaultServlet$DirsFirstComparator:int compare(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.catalina.servlets.DefaultServlet$ResourceLastModifiedDateComparator:int compare(org.apache.catalina.WebResource,org.apache.catalina.WebResource)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.DefaultServlet$ResourceLastModifiedDateComparator:int compare(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.catalina.servlets.DefaultServlet$ResourceSizeComparator:int compare(org.apache.catalina.WebResource,org.apache.catalina.WebResource)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.DefaultServlet$ResourceSizeComparator:int compare(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.catalina.startup.Catalina:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.Tomcat:void init(org.apache.tomcat.util.file.ConfigurationSource,java.lang.String[])"
        ]
    },
    "org.apache.catalina.loader.WebappClassLoaderBase:boolean modified()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.loader.WebappLoader:boolean modified()"
        ]
    },
    "org.apache.catalina.loader.WebappClassLoaderBase:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ContainerBase:void setCluster(org.apache.catalina.Cluster)",
            "org.apache.catalina.core.ContainerBase:void setRealm(org.apache.catalina.Realm)",
            "org.apache.catalina.core.ContainerBase:void startInternal()",
            "org.apache.catalina.core.StandardContext:void setLoader(org.apache.catalina.Loader)",
            "org.apache.catalina.core.StandardContext:void setManager(org.apache.catalina.Manager)",
            "org.apache.catalina.core.StandardContext:void startInternal()",
            "org.apache.catalina.core.StandardPipeline:void startInternal()",
            "org.apache.catalina.core.StandardPipeline:void setBasic(org.apache.catalina.Valve)",
            "org.apache.catalina.core.StandardPipeline:void addValve(org.apache.catalina.Valve)",
            "org.apache.catalina.loader.ParallelWebappClassLoader:org.apache.catalina.loader.ParallelWebappClassLoader copyWithoutTransformers()",
            "org.apache.catalina.loader.WebappClassLoader:org.apache.catalina.loader.WebappClassLoader copyWithoutTransformers()",
            "org.apache.catalina.loader.WebappLoader:void startInternal()",
            "org.apache.catalina.realm.CombinedRealm:void startInternal()",
            "org.apache.catalina.session.ManagerBase:void startInternal()",
            "org.apache.catalina.session.PersistentManagerBase:void startInternal()",
            "org.apache.catalina.valves.rewrite.RewriteValve:void parse(java.io.BufferedReader)"
        ]
    },
    "org.apache.catalina.webresources.CachedResource$CachedResourceJarURLConnection:long getLastModified()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.ContextConfig:org.apache.tomcat.util.descriptor.web.WebXml getDefaultWebXmlFragment(org.apache.tomcat.util.descriptor.web.WebXmlParser)",
            "org.apache.catalina.startup.ExpandWar:java.lang.String expand(org.apache.catalina.Host,java.net.URL,java.lang.String)",
            "org.apache.catalina.users.MemoryUserDatabase:void backgroundProcess()",
            "org.apache.catalina.webresources.war.WarURLConnection:long getLastModified()",
            "org.apache.tomcat.util.file.ConfigurationSource$Resource:long getLastModified()"
        ]
    },
    "org.apache.catalina.webresources.CachedResource$CachedResourceJarURLConnection:long getContentLengthLong()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.webresources.war.WarURLConnection:long getContentLengthLong()"
        ]
    },
    "org.apache.catalina.webresources.CachedResource$CachedResourceURLConnection:long getLastModified()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.ContextConfig:org.apache.tomcat.util.descriptor.web.WebXml getDefaultWebXmlFragment(org.apache.tomcat.util.descriptor.web.WebXmlParser)",
            "org.apache.catalina.startup.ExpandWar:java.lang.String expand(org.apache.catalina.Host,java.net.URL,java.lang.String)",
            "org.apache.catalina.users.MemoryUserDatabase:void backgroundProcess()",
            "org.apache.catalina.webresources.war.WarURLConnection:long getLastModified()",
            "org.apache.tomcat.util.file.ConfigurationSource$Resource:long getLastModified()"
        ]
    },
    "org.apache.catalina.webresources.CachedResource$CachedResourceURLConnection:long getContentLengthLong()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.webresources.war.WarURLConnection:long getContentLengthLong()"
        ]
    },
    "org.apache.catalina.core.ApplicationContext:java.net.URL getResource(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationContextFacade:java.net.URL getResource(java.lang.String)",
            "org.apache.catalina.core.NamingContextListener:void addService(org.apache.tomcat.util.descriptor.web.ContextService)",
            "org.apache.catalina.core.StandardContext$NoPluggabilityServletContext:java.net.URL getResource(java.lang.String)",
            "org.apache.catalina.startup.ContextConfig:org.xml.sax.InputSource getContextWebXmlSource()",
            "org.apache.catalina.startup.WebappServiceLoader:java.util.List load(java.lang.Class)",
            "org.apache.tomcat.util.scan.StandardJarScanner:void scan(org.apache.tomcat.JarScanType,jakarta.servlet.ServletContext,org.apache.tomcat.JarScannerCallback)"
        ]
    },
    "org.apache.catalina.core.StandardContext:java.lang.String getRealPath(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationContext:java.lang.String getRealPath(java.lang.String)"
        ]
    },
    "org.apache.catalina.loader.WebappClassLoaderBase:boolean check(java.security.Permission)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.digester.Digester$SystemPropertySource:java.lang.String getProperty(java.lang.String,java.lang.ClassLoader)",
            "org.apache.tomcat.util.digester.EnvironmentPropertySource:java.lang.String getProperty(java.lang.String,java.lang.ClassLoader)"
        ]
    },
    "org.apache.catalina.mapper.Mapper:void internalMapWrapper(org.apache.catalina.mapper.Mapper$ContextVersion,org.apache.tomcat.util.buf.CharChunk,org.apache.catalina.mapper.MappingData)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.mapper.Mapper:void map(org.apache.catalina.Context,org.apache.tomcat.util.buf.MessageBytes,org.apache.catalina.mapper.MappingData)",
            "org.apache.catalina.mapper.Mapper:void internalMap(org.apache.tomcat.util.buf.CharChunk,org.apache.tomcat.util.buf.CharChunk,java.lang.String,org.apache.catalina.mapper.MappingData)"
        ]
    },
    "org.apache.catalina.servlets.DefaultServlet:java.util.List getAvailablePrecompressedResources(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.DefaultServlet:void serveResource(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,boolean,java.lang.String)"
        ]
    },
    "org.apache.catalina.valves.rewrite.ResolverImpl:boolean resolveResource(int,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.valves.rewrite.RewriteCond$ResourceCondition:boolean evaluate(java.lang.String,org.apache.catalina.valves.rewrite.Resolver)"
        ]
    },
    "org.apache.catalina.webresources.FileResource:java.net.URL getCodeBase()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.loader.WebappClassLoaderBase:boolean check(java.security.Permission)",
            "org.apache.catalina.loader.WebappClassLoaderBase:java.lang.Class findClassInternal(java.lang.String)",
            "org.apache.catalina.webresources.CachedResource:java.net.URL getCodeBase()"
        ]
    },
    "org.apache.catalina.loader.WebappClassLoaderBase:java.net.URL findResource(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.loader.WebappClassLoaderBase$PrivilegedHasLoggingConfig:java.lang.Boolean run()",
            "org.apache.catalina.loader.WebappClassLoaderBase:java.net.URL getResource(java.lang.String)",
            "org.apache.catalina.loader.WebappClassLoaderBase:boolean hasLoggingConfig()",
            "org.apache.juli.ClassLoaderLogManager:void readConfiguration(java.lang.ClassLoader)"
        ]
    },
    "org.apache.coyote.http2.Http2UpgradeHandler:void <init>(org.apache.coyote.http2.Http2Protocol,org.apache.coyote.Adapter,org.apache.coyote.Request)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2AsyncUpgradeHandler:void <init>(org.apache.coyote.http2.Http2Protocol,org.apache.coyote.Adapter,org.apache.coyote.Request)",
            "org.apache.coyote.http2.Http2Protocol:org.apache.coyote.http11.upgrade.InternalHttpUpgradeHandler getInternalUpgradeHandler(org.apache.tomcat.util.net.SocketWrapperBase,org.apache.coyote.Adapter,org.apache.coyote.Request)"
        ]
    },
    "org.apache.coyote.http2.Http2UpgradeHandler:org.apache.coyote.http2.Stream createRemoteStream(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2UpgradeHandler:org.apache.coyote.http2.HpackDecoder$HeaderEmitter headersStart(int,boolean)",
            "org.apache.coyote.http2.Http2UpgradeHandler:void reprioritise(int,int,boolean,int)"
        ]
    },
    "org.apache.coyote.http2.Http2UpgradeHandler:org.apache.coyote.http2.Stream createLocalStream(org.apache.coyote.Request)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2UpgradeHandler:void push(org.apache.coyote.Request,org.apache.coyote.http2.Stream)"
        ]
    },
    "org.apache.coyote.http2.Stream$StreamInputBuffer:void ensureBuffersExist()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Stream$StreamInputBuffer:int doRead(org.apache.tomcat.util.net.ApplicationBufferHandler)",
            "org.apache.coyote.http2.Stream$StreamInputBuffer:boolean isReadyForRead()",
            "org.apache.coyote.http2.Stream$StreamInputBuffer:java.nio.ByteBuffer getInBuffer()"
        ]
    },
    "org.apache.coyote.http2.Stream$StreamOutputBuffer:boolean isReady()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Stream:boolean isReadyForWrite()"
        ]
    },
    "org.apache.coyote.http2.Stream:int reserveWindowSize(int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2AsyncUpgradeHandler$SendfileCompletionHandler:void completed(java.lang.Long,org.apache.coyote.http2.SendfileData)",
            "org.apache.coyote.http2.Http2AsyncUpgradeHandler:org.apache.tomcat.util.net.SendfileState processSendfile(org.apache.coyote.http2.SendfileData)",
            "org.apache.coyote.http2.Stream$StreamOutputBuffer:boolean flush(boolean,boolean)"
        ]
    },
    "org.apache.coyote.http2.Stream:boolean receivedEndOfHeaders()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2UpgradeHandler:void headersEnd(int)"
        ]
    },
    "org.apache.coyote.http2.Stream:java.nio.ByteBuffer getInputByteBuffer()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2UpgradeHandler:java.nio.ByteBuffer startRequestBodyFrame(int,int,boolean)",
            "org.apache.coyote.http2.Stream:void recycle()"
        ]
    },
    "org.apache.coyote.http2.Stream:void receivedStartOfHeaders(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2UpgradeHandler:org.apache.coyote.http2.HpackDecoder$HeaderEmitter headersStart(int,boolean)"
        ]
    },
    "org.apache.coyote.http2.Stream:void receivedData(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2UpgradeHandler:java.nio.ByteBuffer startRequestBodyFrame(int,int,boolean)"
        ]
    },
    "org.apache.coyote.http2.Stream:void receivedEndOfStream()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2UpgradeHandler:void receivedEndOfStream(int)",
            "org.apache.coyote.http2.StreamProcessor:void setRequestBody(org.apache.tomcat.util.buf.ByteChunk)"
        ]
    },
    "org.apache.coyote.http2.Stream:void recycle()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Stream:void close(org.apache.coyote.http2.Http2Exception)",
            "org.apache.coyote.http2.StreamProcessor:void process(org.apache.tomcat.util.net.SocketEvent)"
        ]
    },
    "org.apache.coyote.http2.Stream:org.apache.tomcat.util.res.StringManager access$700()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Stream$StreamInputBuffer:int doRead(org.apache.tomcat.util.net.ApplicationBufferHandler)",
            "org.apache.coyote.http2.Stream$StreamInputBuffer:void onDataAvailable()",
            "org.apache.coyote.http2.Stream$StreamInputBuffer:void swallowUnread()",
            "org.apache.coyote.http2.Stream$StreamOutputBuffer:int doWrite(java.nio.ByteBuffer)",
            "org.apache.coyote.http2.Stream$StreamOutputBuffer:boolean flush(boolean,boolean)"
        ]
    },
    "org.apache.coyote.http2.Stream:org.apache.juli.logging.Log access$900()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Stream$StreamInputBuffer:int doRead(org.apache.tomcat.util.net.ApplicationBufferHandler)",
            "org.apache.coyote.http2.Stream$StreamInputBuffer:void onDataAvailable()",
            "org.apache.coyote.http2.Stream$StreamInputBuffer:void swallowUnread()",
            "org.apache.coyote.http2.Stream$StreamOutputBuffer:boolean flush(boolean,boolean)"
        ]
    },
    "org.apache.tomcat.util.modeler.Registry:void registerComponent(java.lang.Object,javax.management.ObjectName,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationFilterConfig:void registerJMX()",
            "org.apache.catalina.core.NamingContextListener:void addResource(org.apache.tomcat.util.descriptor.web.ContextResource)",
            "org.apache.catalina.core.StandardWrapper:void load()",
            "org.apache.catalina.loader.WebappLoader:void startInternal()",
            "org.apache.catalina.startup.HostConfig:void start()",
            "org.apache.catalina.util.LifecycleMBeanBase:javax.management.ObjectName register(java.lang.Object,java.lang.String)",
            "org.apache.coyote.AbstractProtocol$ConnectionHandler:void register(org.apache.coyote.Processor)",
            "org.apache.coyote.AbstractProtocol:void init()",
            "org.apache.coyote.http11.AbstractHttp11Protocol:org.apache.coyote.http11.upgrade.UpgradeGroupInfo getUpgradeGroupInfo(java.lang.String)",
            "org.apache.coyote.http2.Http2Protocol:void setHttp11Protocol(org.apache.coyote.http11.AbstractHttp11Protocol)",
            "org.apache.tomcat.util.modeler.Registry:void registerComponent(java.lang.Object,java.lang.String,java.lang.String)",
            "org.apache.tomcat.util.net.AbstractEndpoint:void init()",
            "org.apache.tomcat.util.net.AbstractEndpoint:void registerJmx(org.apache.tomcat.util.net.SSLHostConfig)"
        ]
    },
    "org.apache.catalina.mbeans.MBeanUtils:org.apache.tomcat.util.modeler.Registry createRegistry()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.mbeans.GroupMBean:void <init>()",
            "org.apache.catalina.mbeans.MBeanUtils:void <clinit>()",
            "org.apache.catalina.mbeans.MemoryUserDatabaseMBean:void <init>()",
            "org.apache.catalina.mbeans.NamingResourcesMBean:void <init>()",
            "org.apache.catalina.mbeans.RoleMBean:void <init>()",
            "org.apache.catalina.mbeans.UserMBean:void <init>()"
        ]
    },
    "org.apache.tomcat.util.modeler.Registry:void findDescriptor(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.modeler.Registry:org.apache.tomcat.util.modeler.ManagedBean findManagedBean(java.lang.Object,java.lang.Class,java.lang.String)"
        ]
    },
    "org.apache.coyote.http11.AbstractHttp11Protocol:void addSslHostConfig(org.apache.tomcat.util.net.SSLHostConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.Connector:void addSslHostConfig(org.apache.tomcat.util.net.SSLHostConfig)"
        ]
    },
    "org.apache.coyote.http11.AbstractHttp11Protocol:void reloadSslHostConfig(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.ManagerServlet:void sslReload(java.io.PrintWriter,java.lang.String,org.apache.tomcat.util.res.StringManager)"
        ]
    },
    "org.apache.tomcat.util.net.AbstractEndpoint:void reloadSslHostConfigs()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.AbstractHttp11Protocol:void reloadSslHostConfigs()"
        ]
    },
    "org.apache.coyote.http2.Stream:void <init>(java.lang.Integer,org.apache.coyote.http2.Http2UpgradeHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2UpgradeHandler:org.apache.coyote.http2.Stream createRemoteStream(int)"
        ]
    },
    "org.apache.coyote.http2.HpackDecoder:void decode(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2Parser:void readHeaderPayload(int,int,java.nio.ByteBuffer)"
        ]
    },
    "org.apache.coyote.http2.HpackDecoder:void handleIndex(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.HpackDecoder:void decode(java.nio.ByteBuffer)"
        ]
    },
    "org.apache.coyote.http2.HpackDecoder:void addStaticTableEntry(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.HpackDecoder:void handleIndex(int)"
        ]
    },
    "org.apache.catalina.servlets.WebdavServlet:boolean checkIfHeaders(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.catalina.WebResource)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.DefaultServlet:void serveResource(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,boolean,java.lang.String)"
        ]
    },
    "jakarta.servlet.ServletResponseWrapper:void setContentType(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletResponseWrapper:void setContentType(java.lang.String)",
            "jakarta.servlet.http.HttpServlet:void doTrace(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.core.ApplicationHttpResponse:void setContentType(java.lang.String)",
            "org.apache.catalina.core.ApplicationResponse:void setContentType(java.lang.String)",
            "org.apache.catalina.filters.AddDefaultCharsetFilter$ResponseWrapper:void setContentType(java.lang.String)",
            "org.apache.catalina.filters.CorsFilter:void handleInvalidCORS(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.filters.RemoteCIDRFilter:void sendErrorWhenNotHttp(jakarta.servlet.ServletResponse)",
            "org.apache.catalina.filters.RequestFilter:void sendErrorWhenNotHttp(jakarta.servlet.ServletResponse)",
            "org.apache.catalina.manager.HTMLManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.HTMLManagerServlet:void doPost(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.JMXProxyServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.ManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.ManagerServlet:void doPut(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.StatusTransformer:void setContentType(jakarta.servlet.http.HttpServletResponse,int)",
            "org.apache.catalina.manager.host.HTMLHostManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.host.HTMLHostManagerServlet:void doPost(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.host.HostManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.DefaultServlet:void serveResource(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,boolean,java.lang.String)",
            "org.apache.catalina.servlets.WebdavServlet:void doPropfind(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.WebdavServlet:void doLock(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.connector.Response:boolean checkSpecialHeader(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.Response:void addHeader(java.lang.String,java.lang.String,java.nio.charset.Charset)",
            "org.apache.catalina.connector.Response:void setHeader(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.catalina.connector.ResponseFacade$SetContentTypePrivilegedAction:java.lang.Void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.ResponseFacade$SetContentTypePrivilegedAction:java.lang.Object run()"
        ]
    },
    "org.apache.catalina.connector.ResponseFacade:void setContentType(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletResponseWrapper:void setContentType(java.lang.String)",
            "jakarta.servlet.http.HttpServlet:void doTrace(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.core.ApplicationHttpResponse:void setContentType(java.lang.String)",
            "org.apache.catalina.core.ApplicationResponse:void setContentType(java.lang.String)",
            "org.apache.catalina.filters.CorsFilter:void handleInvalidCORS(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.filters.RemoteCIDRFilter:void sendErrorWhenNotHttp(jakarta.servlet.ServletResponse)",
            "org.apache.catalina.filters.RequestFilter:void sendErrorWhenNotHttp(jakarta.servlet.ServletResponse)",
            "org.apache.catalina.manager.HTMLManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.HTMLManagerServlet:void doPost(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.JMXProxyServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.ManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.ManagerServlet:void doPut(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.StatusTransformer:void setContentType(jakarta.servlet.http.HttpServletResponse,int)",
            "org.apache.catalina.manager.host.HTMLHostManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.host.HTMLHostManagerServlet:void doPost(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.host.HostManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.DefaultServlet:void serveResource(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,boolean,java.lang.String)",
            "org.apache.catalina.servlets.WebdavServlet:void doPropfind(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.WebdavServlet:void doLock(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.core.ApplicationHttpResponse:void setContentType(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletResponseWrapper:void setContentType(java.lang.String)",
            "jakarta.servlet.http.HttpServlet:void doTrace(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.core.ApplicationHttpResponse:void setContentType(java.lang.String)",
            "org.apache.catalina.core.ApplicationResponse:void setContentType(java.lang.String)",
            "org.apache.catalina.filters.CorsFilter:void handleInvalidCORS(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.filters.RemoteCIDRFilter:void sendErrorWhenNotHttp(jakarta.servlet.ServletResponse)",
            "org.apache.catalina.filters.RequestFilter:void sendErrorWhenNotHttp(jakarta.servlet.ServletResponse)",
            "org.apache.catalina.manager.HTMLManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.HTMLManagerServlet:void doPost(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.JMXProxyServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.ManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.ManagerServlet:void doPut(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.StatusTransformer:void setContentType(jakarta.servlet.http.HttpServletResponse,int)",
            "org.apache.catalina.manager.host.HTMLHostManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.host.HTMLHostManagerServlet:void doPost(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.host.HostManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.DefaultServlet:void serveResource(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,boolean,java.lang.String)",
            "org.apache.catalina.servlets.WebdavServlet:void doPropfind(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.WebdavServlet:void doLock(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.core.ApplicationResponse:void setContentType(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletResponseWrapper:void setContentType(java.lang.String)",
            "org.apache.catalina.core.ApplicationHttpResponse:void setContentType(java.lang.String)",
            "org.apache.catalina.core.ApplicationResponse:void setContentType(java.lang.String)",
            "org.apache.catalina.filters.RemoteCIDRFilter:void sendErrorWhenNotHttp(jakarta.servlet.ServletResponse)",
            "org.apache.catalina.filters.RequestFilter:void sendErrorWhenNotHttp(jakarta.servlet.ServletResponse)"
        ]
    },
    "org.apache.catalina.filters.CorsFilter:void handleInvalidCORS(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,jakarta.servlet.FilterChain)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.CorsFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.filters.CorsFilter:void handleSimpleCORS(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.filters.CorsFilter:void handlePreflightCORS(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,jakarta.servlet.FilterChain)"
        ]
    },
    "org.apache.catalina.manager.StatusTransformer:void setContentType(jakarta.servlet.http.HttpServletResponse,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.StatusManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.coyote.Response:void setHeader(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.CoyoteAdapter:boolean postParseRequest(org.apache.coyote.Request,org.apache.catalina.connector.Request,org.apache.coyote.Response,org.apache.catalina.connector.Response)",
            "org.apache.catalina.connector.Response:void setHeader(java.lang.String,java.lang.String)",
            "org.apache.coyote.http11.Http11Processor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState service(org.apache.tomcat.util.net.SocketWrapperBase)"
        ]
    },
    "org.apache.coyote.Response:void addHeader(java.lang.String,java.lang.String,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.Response:void addHeader(java.lang.String,java.lang.String,java.nio.charset.Charset)",
            "org.apache.coyote.Response:void addHeader(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.tomcat.util.json.JSONParserTokenManager:int jjMoveStringLiteralDfa0_0()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.json.JSONParserTokenManager:org.apache.tomcat.util.json.Token getNextToken()"
        ]
    },
    "org.apache.tomcat.util.json.JSONParserTokenManager:int jjStartNfa_0(int,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.json.JSONParserTokenManager:int jjMoveStringLiteralDfa1_0(long)",
            "org.apache.tomcat.util.json.JSONParserTokenManager:int jjMoveStringLiteralDfa2_0(long,long)",
            "org.apache.tomcat.util.json.JSONParserTokenManager:int jjMoveStringLiteralDfa3_0(long,long)",
            "org.apache.tomcat.util.json.JSONParserTokenManager:int jjMoveStringLiteralDfa4_0(long,long)"
        ]
    },
    "org.apache.tomcat.util.json.JSONParser:void <init>(java.io.InputStream,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.json.JSONParser:void <init>(java.io.InputStream)"
        ]
    },
    "org.apache.tomcat.util.json.JSONParser:void ReInit(java.io.InputStream,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.json.JSONParser:void ReInit(java.io.InputStream)"
        ]
    },
    "org.apache.tomcat.util.json.JSONParser:void <init>(java.io.Reader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.json.JSONParser:void <init>(java.lang.String)"
        ]
    },
    "org.apache.tomcat.util.json.JSONParser:void ReInit(java.io.Reader)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tomcat.util.json.JSONParser:void <init>(org.apache.tomcat.util.json.JSONParserTokenManager)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tomcat.util.json.JSONParser:void ReInit(org.apache.tomcat.util.json.JSONParserTokenManager)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tomcat.util.json.JSONParser:org.apache.tomcat.util.json.Token jj_consume_token(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.json.JSONParser:boolean ensureEOF()",
            "org.apache.tomcat.util.json.JSONParser:java.lang.Object anything()",
            "org.apache.tomcat.util.json.JSONParser:java.lang.String objectKey()",
            "org.apache.tomcat.util.json.JSONParser:java.util.LinkedHashMap object()",
            "org.apache.tomcat.util.json.JSONParser:java.util.ArrayList list()",
            "org.apache.tomcat.util.json.JSONParser:java.lang.Object value()",
            "org.apache.tomcat.util.json.JSONParser:java.lang.Object nullValue()",
            "org.apache.tomcat.util.json.JSONParser:java.lang.Boolean booleanValue()",
            "org.apache.tomcat.util.json.JSONParser:java.lang.Number number()",
            "org.apache.tomcat.util.json.JSONParser:java.lang.String string()",
            "org.apache.tomcat.util.json.JSONParser:java.lang.String doubleQuoteString()",
            "org.apache.tomcat.util.json.JSONParser:java.lang.String singleQuoteString()",
            "org.apache.tomcat.util.json.JSONParser:java.lang.String symbol()"
        ]
    },
    "org.apache.tomcat.util.json.JSONParser:org.apache.tomcat.util.json.Token getNextToken()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tomcat.util.json.JSONParser:org.apache.tomcat.util.json.Token getToken(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.realm.LockOutRealm:java.security.Principal authenticate(java.security.cert.X509Certificate[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.SSLAuthenticator:boolean doAuthenticate(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.realm.CombinedRealm:java.security.Principal authenticate(java.security.cert.X509Certificate[])"
        ]
    },
    "org.apache.catalina.authenticator.SpnegoAuthenticator$AuthenticateAction:java.lang.Object run()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.security.auth.message.config.AuthConfigFactory:java.lang.String getFactoryClassName()",
            "jakarta.servlet.http.Cookie:void <clinit>()",
            "org.apache.catalina.startup.ClassLoaderFactory:java.lang.ClassLoader createClassLoader(java.io.File[],java.io.File[],java.lang.ClassLoader)",
            "org.apache.catalina.startup.ClassLoaderFactory:java.lang.ClassLoader createClassLoader(java.util.List,java.lang.ClassLoader)",
            "org.apache.catalina.util.Introspection:java.lang.reflect.Field[] getDeclaredFields(java.lang.Class)",
            "org.apache.catalina.util.Introspection:java.lang.reflect.Method[] getDeclaredMethods(java.lang.Class)",
            "org.apache.juli.ClassLoaderLogManager:boolean addLogger(java.util.logging.Logger)",
            "org.apache.juli.ClassLoaderLogManager:org.apache.juli.ClassLoaderLogManager$ClassLoaderLogInfo getClassLoaderInfo(java.lang.ClassLoader)",
            "org.apache.juli.ClassLoaderLogManager:void doSetParentLogger(java.util.logging.Logger,java.util.logging.Logger)",
            "org.apache.juli.FileHandler$1:java.lang.Thread newThread(java.lang.Runnable)",
            "org.apache.naming.factory.MailSessionFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.naming.factory.SendMailFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.tomcat.util.compat.JrePlatform:void <clinit>()"
        ]
    },
    "org.apache.catalina.realm.LockOutRealm:java.security.Principal authenticate(org.ietf.jgss.GSSContext,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.SpnegoAuthenticator$AuthenticateAction:java.security.Principal run()",
            "org.apache.catalina.realm.CombinedRealm:java.security.Principal authenticate(org.ietf.jgss.GSSContext,boolean)"
        ]
    },
    "org.apache.catalina.realm.LockOutRealm:java.security.Principal authenticate(org.ietf.jgss.GSSName,org.ietf.jgss.GSSCredential)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.realm.CombinedRealm:java.security.Principal authenticate(org.ietf.jgss.GSSName,org.ietf.jgss.GSSCredential)"
        ]
    },
    "org.apache.catalina.session.PersistentManagerBase$PrivilegedStoreKeys:java.lang.Object run()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.security.auth.message.config.AuthConfigFactory:jakarta.security.auth.message.config.AuthConfigFactory getFactory()",
            "org.apache.catalina.core.ApplicationFilterChain:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)",
            "org.apache.catalina.session.PersistentManagerBase:void load()"
        ]
    },
    "org.apache.catalina.manager.HTMLManagerServlet:java.util.List getSessionsForName(org.apache.catalina.util.ContextName,org.apache.tomcat.util.res.StringManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.HTMLManagerServlet:org.apache.catalina.Session getSessionForNameAndId(org.apache.catalina.util.ContextName,java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.HTMLManagerServlet:void displaySessionsListPage(org.apache.catalina.util.ContextName,jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.res.StringManager)"
        ]
    },
    "org.apache.catalina.session.PersistentManagerBase:org.apache.catalina.Session securedStoreLoad(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.session.PersistentManagerBase:org.apache.catalina.Session loadSessionFromStore(java.lang.String)"
        ]
    },
    "org.apache.catalina.session.PersistentManagerBase:org.apache.catalina.Session findSession(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.Manager:java.lang.String rotateSessionId(org.apache.catalina.Session)",
            "org.apache.catalina.authenticator.SingleSignOn:void expire(org.apache.catalina.authenticator.SingleSignOnSessionKey)",
            "org.apache.catalina.connector.CoyoteAdapter:boolean postParseRequest(org.apache.coyote.Request,org.apache.catalina.connector.Request,org.apache.coyote.Response,org.apache.catalina.connector.Response)",
            "org.apache.catalina.connector.Request:boolean isRequestedSessionIdValid()",
            "org.apache.catalina.connector.Request:org.apache.catalina.Session doGetSession(boolean)",
            "org.apache.catalina.core.ApplicationHttpRequest:jakarta.servlet.http.HttpSession getSession(boolean)",
            "org.apache.catalina.core.ApplicationHttpRequest:boolean isRequestedSessionIdValid()",
            "org.apache.catalina.session.StoreBase:void processExpires()",
            "org.apache.catalina.valves.PersistentValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)"
        ]
    },
    "org.apache.catalina.session.ManagerBase:void backgroundProcess()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.StandardContext:void backgroundProcess()"
        ]
    },
    "org.apache.catalina.session.ManagerBase:void remove(org.apache.catalina.Session)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.session.StandardSession:void setId(java.lang.String,boolean)"
        ]
    },
    "org.apache.catalina.session.PersistentManagerBase:void unload()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.session.PersistentManagerBase:void stopInternal()"
        ]
    },
    "org.apache.catalina.session.PersistentManagerBase:void processMaxActiveSwaps()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.session.PersistentManagerBase:void processPersistenceChecks()"
        ]
    },
    "org.apache.catalina.session.PersistentManagerBase:void processPersistenceChecks()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.session.PersistentManagerBase:void processExpires()"
        ]
    },
    "org.apache.catalina.authenticator.DigestAuthenticator:void startInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void start()"
        ]
    },
    "jakarta.servlet.ServletRequestWrapper:java.lang.String getRealPath(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletRequestWrapper:java.lang.String getRealPath(java.lang.String)"
        ]
    },
    "org.apache.catalina.connector.RequestFacade:java.lang.String getRealPath(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletRequestWrapper:java.lang.String getRealPath(java.lang.String)"
        ]
    },
    "org.apache.catalina.connector.Request:void access$000(org.apache.catalina.connector.Request,java.lang.String,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.Request$3:void set(org.apache.catalina.connector.Request,java.lang.String,java.lang.Object)"
        ]
    },
    "org.apache.catalina.connector.Request:void removeAttribute(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletRequestWrapper:void removeAttribute(java.lang.String)",
            "org.apache.catalina.connector.Request:void setAttribute(java.lang.String,java.lang.Object)",
            "org.apache.catalina.connector.RequestFacade:void removeAttribute(java.lang.String)",
            "org.apache.catalina.core.ApplicationHttpRequest:void removeAttribute(java.lang.String)",
            "org.apache.catalina.core.ApplicationRequest:void removeAttribute(java.lang.String)"
        ]
    },
    "jakarta.servlet.ServletRequestWrapper:jakarta.servlet.ServletContext getServletContext()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletRequestWrapper:jakarta.servlet.ServletContext getServletContext()",
            "org.apache.catalina.core.ApplicationPushBuilder:void <init>(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.core.AsyncContextImpl:void dispatch(java.lang.String)",
            "org.apache.catalina.filters.ExpiresFilter:java.util.Date getExpirationDate(jakarta.servlet.http.HttpServletRequest,org.apache.catalina.filters.ExpiresFilter$XHttpServletResponse)"
        ]
    },
    "org.apache.catalina.connector.Request:java.lang.String getContextPath()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletRequestWrapper:java.lang.String getContextPath()",
            "org.apache.catalina.authenticator.FormAuthenticator:boolean doAuthenticate(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.connector.RequestFacade:java.lang.String getContextPath()",
            "org.apache.catalina.core.ApplicationDispatcher:void doForward(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)",
            "org.apache.catalina.core.ApplicationDispatcher:jakarta.servlet.ServletRequest wrapRequest(org.apache.catalina.core.ApplicationDispatcher$State)",
            "org.apache.catalina.core.ApplicationHttpRequest:void setRequest(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.core.ApplicationPushBuilder:jakarta.servlet.http.PushBuilder path(java.lang.String)",
            "org.apache.catalina.core.AsyncContextImpl:void dispatch()",
            "org.apache.catalina.core.AsyncContextImpl:void dispatch(jakarta.servlet.ServletContext,java.lang.String)",
            "org.apache.catalina.filters.RequestDumperFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.filters.WebdavFixFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.manager.HTMLManagerServlet:void list(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.StatusManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.host.HTMLHostManagerServlet:void list(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.servlets.CGIServlet$CGIEnvironment:boolean setupFromRequest(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.servlets.CGIServlet:void printServletEnvironment(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.servlets.DefaultServlet:java.lang.String getPathPrefix(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.servlets.WebdavServlet:java.lang.String getPathPrefix(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.servlets.WebdavServlet:boolean copyResource(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.WebdavServlet:void parseProperties(jakarta.servlet.http.HttpServletRequest,org.apache.catalina.util.XMLWriter,java.lang.String,int,java.util.Vector)",
            "org.apache.catalina.valves.rewrite.ResolverImpl:java.lang.String resolve(java.lang.String)",
            "org.apache.catalina.valves.rewrite.RewriteValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)"
        ]
    },
    "org.apache.catalina.connector.RequestFacade:jakarta.servlet.ServletContext getServletContext()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletRequestWrapper:jakarta.servlet.ServletContext getServletContext()",
            "org.apache.catalina.core.ApplicationPushBuilder:void <init>(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.core.AsyncContextImpl:void dispatch(java.lang.String)",
            "org.apache.catalina.filters.ExpiresFilter:java.util.Date getExpirationDate(jakarta.servlet.http.HttpServletRequest,org.apache.catalina.filters.ExpiresFilter$XHttpServletResponse)"
        ]
    },
    "org.apache.catalina.filters.ExpiresFilter:java.util.Date getExpirationDate(jakarta.servlet.http.HttpServletRequest,org.apache.catalina.filters.ExpiresFilter$XHttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.ExpiresFilter:void onBeforeWriteResponseBody(jakarta.servlet.http.HttpServletRequest,org.apache.catalina.filters.ExpiresFilter$XHttpServletResponse)"
        ]
    },
    "jakarta.servlet.http.HttpServletRequestWrapper:java.lang.String getPathTranslated()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletRequestWrapper:java.lang.String getPathTranslated()",
            "org.apache.catalina.servlets.CGIServlet:void printServletEnvironment(jakarta.servlet.http.HttpServletRequest)"
        ]
    },
    "org.apache.catalina.connector.RequestFacade:java.lang.String getPathTranslated()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletRequestWrapper:java.lang.String getPathTranslated()",
            "org.apache.catalina.servlets.CGIServlet:void printServletEnvironment(jakarta.servlet.http.HttpServletRequest)"
        ]
    },
    "org.apache.catalina.core.ApplicationContextFacade:jakarta.servlet.ServletContext getContext(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.StandardContext$NoPluggabilityServletContext:jakarta.servlet.ServletContext getContext(java.lang.String)"
        ]
    },
    "org.apache.catalina.core.StandardContext$NoPluggabilityServletContext:jakarta.servlet.ServletContext getContext(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.StandardContext$NoPluggabilityServletContext:jakarta.servlet.ServletContext getContext(java.lang.String)"
        ]
    },
    "jakarta.servlet.GenericFilter:jakarta.servlet.ServletContext getServletContext()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.GenericFilter:jakarta.servlet.ServletContext getServletContext()",
            "org.apache.catalina.filters.CsrfPreventionFilter:void init(jakarta.servlet.FilterConfig)",
            "org.apache.catalina.filters.RestCsrfPreventionFilter:void init(jakarta.servlet.FilterConfig)",
            "org.apache.catalina.filters.WebdavFixFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)"
        ]
    },
    "org.apache.catalina.core.ApplicationHttpRequest:java.lang.String getPathTranslated()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletRequestWrapper:java.lang.String getPathTranslated()",
            "org.apache.catalina.servlets.CGIServlet:void printServletEnvironment(jakarta.servlet.http.HttpServletRequest)"
        ]
    },
    "jakarta.servlet.GenericServlet:jakarta.servlet.ServletContext getServletContext()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.GenericServlet:jakarta.servlet.ServletContext getServletContext()",
            "jakarta.servlet.GenericServlet:void log(java.lang.String)",
            "jakarta.servlet.GenericServlet:void log(java.lang.String,java.lang.Throwable)",
            "org.apache.catalina.core.StandardWrapperFacade:jakarta.servlet.ServletContext getServletContext()",
            "org.apache.catalina.manager.HTMLManagerServlet:void sslConnectorCiphers(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.HTMLManagerServlet:void sslConnectorCerts(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.HTMLManagerServlet:void sslConnectorTrustedCerts(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.HTMLManagerServlet:void displaySessionsListPage(org.apache.catalina.util.ContextName,jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.HTMLManagerServlet:void displaySessionDetailPage(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.catalina.util.ContextName,java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.ManagerServlet:void init()",
            "org.apache.catalina.manager.host.HostManagerServlet:void add(java.io.PrintWriter,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean,boolean,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.host.HostManagerServlet:void start(java.io.PrintWriter,java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.host.HostManagerServlet:void stop(java.io.PrintWriter,java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.host.HostManagerServlet:void persist(java.io.PrintWriter,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.servlets.CGIServlet:void printServletEnvironment(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.servlets.CGIServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.DefaultServlet:void init()",
            "org.apache.catalina.servlets.DefaultServlet:java.io.File executePartialPut(jakarta.servlet.http.HttpServletRequest,org.apache.tomcat.util.http.parser.ContentRange,java.lang.String)",
            "org.apache.catalina.servlets.DefaultServlet:void serveResource(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,boolean,java.lang.String)",
            "org.apache.catalina.servlets.DefaultServlet:javax.xml.transform.Source findXsltSource(org.apache.catalina.WebResource)",
            "org.apache.catalina.servlets.WebdavServlet:javax.xml.parsers.DocumentBuilder getDocumentBuilder()",
            "org.apache.catalina.servlets.WebdavServlet:void parseProperties(jakarta.servlet.http.HttpServletRequest,org.apache.catalina.util.XMLWriter,java.lang.String,int,java.util.Vector)"
        ]
    },
    "org.apache.catalina.core.StandardWrapper:void unavailable(jakarta.servlet.UnavailableException)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationDispatcher:void invoke(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,org.apache.catalina.core.ApplicationDispatcher$State)",
            "org.apache.catalina.core.StandardWrapper:jakarta.servlet.Servlet loadServlet()",
            "org.apache.catalina.core.StandardWrapper:void initServlet(jakarta.servlet.Servlet)",
            "org.apache.catalina.core.StandardWrapperValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)"
        ]
    },
    "org.apache.catalina.core.StandardWrapperFacade:jakarta.servlet.ServletContext getServletContext()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.GenericServlet:jakarta.servlet.ServletContext getServletContext()",
            "org.apache.catalina.core.StandardWrapperFacade:jakarta.servlet.ServletContext getServletContext()"
        ]
    },
    "org.apache.catalina.session.FileStore:int getSize()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.session.PersistentManagerBase:int getActiveSessionsFull()"
        ]
    },
    "org.apache.catalina.session.FileStore:java.lang.String[] keys()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.session.FileStore:void clear()",
            "org.apache.catalina.session.PersistentManagerBase$PrivilegedStoreKeys:java.lang.String[] run()",
            "org.apache.catalina.session.PersistentManagerBase:void load()",
            "org.apache.catalina.session.PersistentManagerBase:java.util.Set getSessionIdsFull()",
            "org.apache.catalina.session.StoreBase:java.lang.String[] expiredKeys()"
        ]
    },
    "org.apache.catalina.session.FileStore:java.io.File file(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.session.FileStore:org.apache.catalina.Session load(java.lang.String)",
            "org.apache.catalina.session.FileStore:void remove(java.lang.String)",
            "org.apache.catalina.session.FileStore:void save(org.apache.catalina.Session)"
        ]
    },
    "org.apache.catalina.session.StandardSessionFacade:jakarta.servlet.ServletContext getServletContext()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.session.StandardSessionFacade:jakarta.servlet.ServletContext getServletContext()"
        ]
    },
    "org.apache.catalina.util.SessionConfig:java.lang.String getSessionCookieName(org.apache.catalina.Context)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.CoyoteAdapter:void parseSessionCookiesId(org.apache.catalina.connector.Request)",
            "org.apache.catalina.core.ApplicationPushBuilder:void <init>(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.core.ApplicationSessionCookieConfig:jakarta.servlet.http.Cookie createSessionCookie(org.apache.catalina.Context,java.lang.String,boolean)",
            "org.apache.catalina.valves.LoadBalancerDrainingValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)"
        ]
    },
    "org.apache.catalina.util.SessionConfig:java.lang.String getSessionUriParamName(org.apache.catalina.Context)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.CoyoteAdapter:boolean postParseRequest(org.apache.coyote.Request,org.apache.catalina.connector.Request,org.apache.coyote.Response,org.apache.catalina.connector.Response)",
            "org.apache.catalina.connector.Response:boolean doIsEncodeable(org.apache.catalina.Context,org.apache.catalina.connector.Request,org.apache.catalina.Session,java.lang.String)",
            "org.apache.catalina.connector.Response:java.lang.String toEncoded(java.lang.String,java.lang.String)",
            "org.apache.catalina.core.ApplicationPushBuilder:void <init>(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.realm.RealmBase:boolean hasUserDataPermission(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,org.apache.tomcat.util.descriptor.web.SecurityConstraint[])",
            "org.apache.catalina.valves.LoadBalancerDrainingValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)"
        ]
    },
    "org.apache.catalina.core.ApplicationContextFacade:jakarta.servlet.FilterRegistration$Dynamic addFilter(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.core.ApplicationContextFacade:jakarta.servlet.FilterRegistration$Dynamic addFilter(java.lang.String,jakarta.servlet.Filter)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.core.ApplicationContextFacade:jakarta.servlet.FilterRegistration$Dynamic addFilter(java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.session.ManagerBase:org.apache.catalina.Session createSession(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.Request:org.apache.catalina.Session doGetSession(boolean)",
            "org.apache.catalina.core.ApplicationHttpRequest:jakarta.servlet.http.HttpSession getSession(boolean)"
        ]
    },
    "org.apache.catalina.Manager:java.lang.String rotateSessionId(org.apache.catalina.Session)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.session.StandardManager$PrivilegedDoUnload:java.lang.Object run()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.security.auth.message.config.AuthConfigFactory:jakarta.security.auth.message.config.AuthConfigFactory getFactory()",
            "org.apache.catalina.core.ApplicationFilterChain:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)",
            "org.apache.catalina.session.StandardManager:void unload()"
        ]
    },
    "jakarta.servlet.http.HttpServletRequestWrapper:boolean isRequestedSessionIdValid()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletRequestWrapper:boolean isRequestedSessionIdValid()",
            "org.apache.catalina.core.ApplicationHttpRequest:boolean isRequestedSessionIdValid()",
            "org.apache.catalina.servlets.CGIServlet:void printServletEnvironment(jakarta.servlet.http.HttpServletRequest)"
        ]
    },
    "org.apache.catalina.connector.RequestFacade:boolean isRequestedSessionIdValid()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletRequestWrapper:boolean isRequestedSessionIdValid()",
            "org.apache.catalina.servlets.CGIServlet:void printServletEnvironment(jakarta.servlet.http.HttpServletRequest)"
        ]
    },
    "org.apache.catalina.core.ApplicationHttpRequest:jakarta.servlet.http.HttpSession getSession()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletRequestWrapper:jakarta.servlet.http.HttpSession getSession()",
            "org.apache.catalina.filters.SessionInitializerFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)"
        ]
    },
    "org.apache.catalina.authenticator.SingleSignOn:void deregister(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.AuthenticatorBase:void register(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse,java.security.Principal,java.lang.String,java.lang.String,java.lang.String,boolean,boolean)",
            "org.apache.catalina.authenticator.SingleSignOn:void sessionDestroyed(java.lang.String,org.apache.catalina.Session)",
            "org.apache.catalina.authenticator.SingleSignOn:void removeSession(java.lang.String,org.apache.catalina.Session)"
        ]
    },
    "org.apache.catalina.manager.HTMLManagerServlet:java.lang.String sessions(org.apache.catalina.util.ContextName,int,org.apache.tomcat.util.res.StringManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.HTMLManagerServlet:java.lang.String expireSessions(org.apache.catalina.util.ContextName,jakarta.servlet.http.HttpServletRequest,org.apache.tomcat.util.res.StringManager)"
        ]
    },
    "org.apache.catalina.session.StandardManager$PrivilegedDoLoad:java.lang.Void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.session.StandardManager$PrivilegedDoLoad:java.lang.Object run()"
        ]
    },
    "org.apache.catalina.session.StandardManager:void load()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.session.StandardManager:void startInternal()"
        ]
    },
    "org.apache.catalina.manager.HTMLManagerServlet:int invalidateSessions(org.apache.catalina.util.ContextName,java.lang.String[],org.apache.tomcat.util.res.StringManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.HTMLManagerServlet:void doSessions(org.apache.catalina.util.ContextName,jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.res.StringManager)"
        ]
    },
    "org.apache.catalina.session.StandardSessionFacade:void invalidate()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.HTMLManagerServlet:int invalidateSessions(org.apache.catalina.util.ContextName,java.lang.String[],org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.session.StandardSessionFacade:void invalidate()"
        ]
    },
    "org.apache.catalina.manager.HTMLManagerServlet:boolean removeSessionAttribute(org.apache.catalina.util.ContextName,java.lang.String,java.lang.String,org.apache.tomcat.util.res.StringManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.HTMLManagerServlet:void doSessions(org.apache.catalina.util.ContextName,jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.res.StringManager)"
        ]
    },
    "org.apache.catalina.session.StandardSession:void removeValue(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.session.StandardSessionFacade:void removeAttribute(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.HTMLManagerServlet:boolean removeSessionAttribute(org.apache.catalina.util.ContextName,java.lang.String,java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.session.StandardSessionFacade:void removeAttribute(java.lang.String)",
            "org.apache.catalina.session.StandardSessionFacade:void removeValue(java.lang.String)"
        ]
    },
    "org.apache.catalina.session.StandardSessionFacade:void removeValue(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.session.FileStore:void save(org.apache.catalina.Session)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.session.PersistentManagerBase$PrivilegedStoreSave:java.lang.Void run()",
            "org.apache.catalina.session.PersistentManagerBase:void writeSession(org.apache.catalina.Session)",
            "org.apache.catalina.valves.PersistentValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)"
        ]
    },
    "org.apache.naming.NamingContext:void bind(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.NamingContextListener:void createNamingContext()",
            "org.apache.catalina.core.NamingContextListener:void addEjb(org.apache.tomcat.util.descriptor.web.ContextEjb)",
            "org.apache.catalina.core.NamingContextListener:void addEnvironment(org.apache.tomcat.util.descriptor.web.ContextEnvironment)",
            "org.apache.catalina.core.NamingContextListener:void addService(org.apache.tomcat.util.descriptor.web.ContextService)",
            "org.apache.catalina.core.NamingContextListener:void addResource(org.apache.tomcat.util.descriptor.web.ContextResource)",
            "org.apache.catalina.core.NamingContextListener:void addResourceEnvRef(org.apache.tomcat.util.descriptor.web.ContextResourceEnvRef)",
            "org.apache.catalina.core.NamingContextListener:void addResourceLink(org.apache.tomcat.util.descriptor.web.ContextResourceLink)",
            "org.apache.naming.SelectorContext:void bind(java.lang.String,java.lang.Object)"
        ]
    },
    "org.apache.naming.NamingContext:void rebind(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.naming.SelectorContext:void rebind(java.lang.String,java.lang.Object)"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.FileUploadBase:java.lang.String getFileName(org.apache.tomcat.util.http.fileupload.FileItemHeaders)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.impl.FileItemIteratorImpl:boolean findNextItem()"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.FileUploadBase:java.lang.String getFieldName(org.apache.tomcat.util.http.fileupload.FileItemHeaders)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.impl.FileItemIteratorImpl:boolean findNextItem()"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.FileUploadBase:byte[] getBoundary(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.impl.FileItemIteratorImpl:void init(org.apache.tomcat.util.http.fileupload.FileUploadBase,org.apache.tomcat.util.http.fileupload.RequestContext)",
            "org.apache.tomcat.util.http.fileupload.impl.FileItemIteratorImpl:boolean findNextItem()"
        ]
    },
    "org.apache.catalina.connector.CoyoteWriter:void println(char[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void println(char[])"
        ]
    },
    "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void print(char[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void print(char[])"
        ]
    },
    "org.apache.catalina.connector.CoyoteWriter:void println(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void println(boolean)"
        ]
    },
    "org.apache.catalina.connector.CoyoteWriter:void println(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void println(int)"
        ]
    },
    "org.apache.catalina.connector.CoyoteWriter:void println(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void println(long)"
        ]
    },
    "org.apache.catalina.connector.CoyoteWriter:void println(float)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void println(float)"
        ]
    },
    "org.apache.catalina.connector.CoyoteWriter:void println(double)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void println(double)"
        ]
    },
    "org.apache.catalina.connector.CoyoteWriter:void println(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void println(java.lang.String)",
            "org.apache.catalina.manager.JMXProxyServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.JMXProxyServlet:void getAttribute(java.io.PrintWriter,java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.catalina.manager.JMXProxyServlet:void setAttribute(java.io.PrintWriter,java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.catalina.manager.JMXProxyServlet:void listBeans(java.io.PrintWriter,java.lang.String)",
            "org.apache.catalina.manager.JMXProxyServlet:void invokeOperation(java.io.PrintWriter,java.lang.String,java.lang.String,java.lang.String[])",
            "org.apache.catalina.manager.JMXProxyServlet:void output(java.lang.String,java.io.PrintWriter,java.lang.Object)",
            "org.apache.catalina.manager.ManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.ManagerServlet:void doPut(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.ManagerServlet:void findleaks(boolean,java.io.PrintWriter,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.ManagerServlet:void sslReload(java.io.PrintWriter,java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.ManagerServlet:void vmInfo(java.io.PrintWriter,org.apache.tomcat.util.res.StringManager,java.util.Enumeration)",
            "org.apache.catalina.manager.ManagerServlet:void threadDump(java.io.PrintWriter,org.apache.tomcat.util.res.StringManager,java.util.Enumeration)",
            "org.apache.catalina.manager.ManagerServlet:void sslConnectorCiphers(java.io.PrintWriter,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.ManagerServlet:void sslConnectorCerts(java.io.PrintWriter,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.ManagerServlet:void sslConnectorTrustedCerts(java.io.PrintWriter,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.ManagerServlet:void save(java.io.PrintWriter,java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.ManagerServlet:void deploy(java.io.PrintWriter,java.lang.String,org.apache.catalina.util.ContextName,java.lang.String,boolean,jakarta.servlet.http.HttpServletRequest,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.ManagerServlet:void deploy(java.io.PrintWriter,org.apache.catalina.util.ContextName,java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.ManagerServlet:void deploy(java.io.PrintWriter,java.lang.String,org.apache.catalina.util.ContextName,java.lang.String,boolean,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.ManagerServlet:void writeDeployResult(java.io.PrintWriter,org.apache.tomcat.util.res.StringManager,java.lang.String,java.lang.String)",
            "org.apache.catalina.manager.ManagerServlet:void list(java.io.PrintWriter,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.ManagerServlet:void reload(java.io.PrintWriter,org.apache.catalina.util.ContextName,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.ManagerServlet:void resources(java.io.PrintWriter,java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.ManagerServlet:void printResources(java.io.PrintWriter,java.lang.String,javax.naming.Context,java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.ManagerServlet:void serverinfo(java.io.PrintWriter,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.ManagerServlet:void sessions(java.io.PrintWriter,org.apache.catalina.util.ContextName,int,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.ManagerServlet:void start(java.io.PrintWriter,org.apache.catalina.util.ContextName,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.ManagerServlet:void stop(java.io.PrintWriter,org.apache.catalina.util.ContextName,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.ManagerServlet:void undeploy(java.io.PrintWriter,org.apache.catalina.util.ContextName,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.ManagerServlet:void uploadWar(java.io.PrintWriter,jakarta.servlet.http.HttpServletRequest,java.io.File,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.ManagerServlet:boolean validateContextName(org.apache.catalina.util.ContextName,java.io.PrintWriter,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.host.HostManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.host.HostManagerServlet:void add(java.io.PrintWriter,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean,boolean,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.host.HostManagerServlet:void remove(java.io.PrintWriter,java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.host.HostManagerServlet:void list(java.io.PrintWriter,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.host.HostManagerServlet:void start(java.io.PrintWriter,java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.host.HostManagerServlet:void stop(java.io.PrintWriter,java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.host.HostManagerServlet:void persist(java.io.PrintWriter,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.users.MemoryUserDatabase:void save()",
            "org.apache.catalina.valves.ExtendedAccessLogValve:void open()",
            "org.apache.tomcat.util.http.MimeHeaders:java.lang.String toString()"
        ]
    },
    "org.apache.catalina.connector.CoyoteWriter:void println(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void println(java.lang.Object)",
            "org.apache.catalina.users.MemoryUserDatabase:void save()"
        ]
    },
    "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void println()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void println()",
            "org.apache.catalina.manager.JMXProxyServlet:void listBeans(java.io.PrintWriter,java.lang.String)",
            "org.apache.catalina.manager.ManagerServlet:void printResources(java.io.PrintWriter,java.lang.String,javax.naming.Context,java.lang.String,org.apache.tomcat.util.res.StringManager)"
        ]
    },
    "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void println(char)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void println(char)"
        ]
    },
    "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void print(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void print(boolean)"
        ]
    },
    "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void print(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void print(int)",
            "org.apache.catalina.manager.StatusTransformer:void writeJspMonitor(java.io.PrintWriter,java.util.Set,javax.management.MBeanServer,int)"
        ]
    },
    "org.apache.catalina.manager.StatusTransformer:void writeJspMonitor(java.io.PrintWriter,java.util.Set,javax.management.MBeanServer,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.StatusTransformer:void writeContext(java.io.PrintWriter,javax.management.ObjectName,javax.management.MBeanServer,int)"
        ]
    },
    "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void print(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void print(long)"
        ]
    },
    "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void print(float)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void print(float)"
        ]
    },
    "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void print(double)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void print(double)"
        ]
    },
    "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void print(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.Response:void sendRedirect(java.lang.String,int)",
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void print(java.lang.String)",
            "org.apache.catalina.manager.HTMLManagerServlet:void list(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.JMXProxyServlet:void getAttribute(java.io.PrintWriter,java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.catalina.manager.JMXProxyServlet:void listBeans(java.io.PrintWriter,java.lang.String)",
            "org.apache.catalina.manager.ManagerServlet:void vmInfo(java.io.PrintWriter,org.apache.tomcat.util.res.StringManager,java.util.Enumeration)",
            "org.apache.catalina.manager.ManagerServlet:void threadDump(java.io.PrintWriter,org.apache.tomcat.util.res.StringManager,java.util.Enumeration)",
            "org.apache.catalina.manager.ManagerServlet:void sslConnectorCiphers(java.io.PrintWriter,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.ManagerServlet:void printResources(java.io.PrintWriter,java.lang.String,javax.naming.Context,java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.StatusTransformer:void writeHeader(java.io.PrintWriter,java.lang.Object[],int)",
            "org.apache.catalina.manager.StatusTransformer:void writeBody(java.io.PrintWriter,java.lang.Object[],int)",
            "org.apache.catalina.manager.StatusTransformer:void writeManager(java.io.PrintWriter,java.lang.Object[],int)",
            "org.apache.catalina.manager.StatusTransformer:void writePageHeading(java.io.PrintWriter,java.lang.Object[],int)",
            "org.apache.catalina.manager.StatusTransformer:void writeServerInfo(java.io.PrintWriter,java.lang.Object[],int)",
            "org.apache.catalina.manager.StatusTransformer:void writeFooter(java.io.PrintWriter,int)",
            "org.apache.catalina.manager.StatusTransformer:void writeOSState(java.io.PrintWriter,int,java.lang.Object[])",
            "org.apache.catalina.manager.StatusTransformer:void writeVMState(java.io.PrintWriter,int,java.lang.Object[])",
            "org.apache.catalina.manager.StatusTransformer:void writeConnectorState(java.io.PrintWriter,javax.management.ObjectName,java.lang.String,javax.management.MBeanServer,java.util.Vector,java.util.Vector,int,java.lang.Object[])",
            "org.apache.catalina.manager.StatusTransformer:void writeProcessorState(java.io.PrintWriter,javax.management.ObjectName,javax.management.MBeanServer,int)",
            "org.apache.catalina.manager.StatusTransformer:void writeDetailedState(java.io.PrintWriter,javax.management.MBeanServer,int)",
            "org.apache.catalina.manager.StatusTransformer:void writeContext(java.io.PrintWriter,javax.management.ObjectName,javax.management.MBeanServer,int)",
            "org.apache.catalina.manager.StatusTransformer:void writeManager(java.io.PrintWriter,javax.management.ObjectName,javax.management.MBeanServer,int)",
            "org.apache.catalina.manager.StatusTransformer:void writeJspMonitor(java.io.PrintWriter,java.util.Set,javax.management.MBeanServer,int)",
            "org.apache.catalina.manager.StatusTransformer:void writeWrapper(java.io.PrintWriter,javax.management.ObjectName,javax.management.MBeanServer,int)",
            "org.apache.catalina.manager.host.HTMLHostManagerServlet:void list(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.users.MemoryUserDatabase:void save()",
            "org.apache.catalina.util.DOMWriter:void print(org.w3c.dom.Node)",
            "org.apache.tomcat.util.http.MimeHeaders:java.lang.String toString()"
        ]
    },
    "org.apache.catalina.manager.ManagerServlet:void sslConnectorCiphers(java.io.PrintWriter,org.apache.tomcat.util.res.StringManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.ManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.manager.StatusTransformer:void writeBody(java.io.PrintWriter,java.lang.Object[],int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.StatusManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.manager.StatusTransformer:void writeManager(java.io.PrintWriter,java.lang.Object[],int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.StatusManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.manager.StatusTransformer:void writePageHeading(java.io.PrintWriter,java.lang.Object[],int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.StatusManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.manager.StatusTransformer:void writeServerInfo(java.io.PrintWriter,java.lang.Object[],int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.StatusManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.manager.StatusTransformer:void writeDetailedState(java.io.PrintWriter,javax.management.MBeanServer,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.StatusManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.manager.StatusTransformer:void writeContext(java.io.PrintWriter,javax.management.ObjectName,javax.management.MBeanServer,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.StatusTransformer:void writeDetailedState(java.io.PrintWriter,javax.management.MBeanServer,int)"
        ]
    },
    "org.apache.catalina.manager.StatusTransformer:void writeManager(java.io.PrintWriter,javax.management.ObjectName,javax.management.MBeanServer,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.StatusTransformer:void writeContext(java.io.PrintWriter,javax.management.ObjectName,javax.management.MBeanServer,int)"
        ]
    },
    "org.apache.catalina.manager.StatusTransformer:void writeWrapper(java.io.PrintWriter,javax.management.ObjectName,javax.management.MBeanServer,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.StatusTransformer:void writeContext(java.io.PrintWriter,javax.management.ObjectName,javax.management.MBeanServer,int)"
        ]
    },
    "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void print(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void print(java.lang.Object)",
            "org.apache.catalina.manager.StatusTransformer:void writeOSState(java.io.PrintWriter,int,java.lang.Object[])",
            "org.apache.catalina.manager.StatusTransformer:void writeVMState(java.io.PrintWriter,int,java.lang.Object[])",
            "org.apache.catalina.manager.StatusTransformer:void writeConnectorState(java.io.PrintWriter,javax.management.ObjectName,java.lang.String,javax.management.MBeanServer,java.util.Vector,java.util.Vector,int,java.lang.Object[])",
            "org.apache.catalina.manager.StatusTransformer:void writeManager(java.io.PrintWriter,javax.management.ObjectName,javax.management.MBeanServer,int)",
            "org.apache.catalina.manager.StatusTransformer:void writeWrapper(java.io.PrintWriter,javax.management.ObjectName,javax.management.MBeanServer,int)"
        ]
    },
    "org.apache.catalina.authenticator.jaspic.AuthConfigFactoryImpl:void savePersistentRegistrations()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.jaspic.AuthConfigFactoryImpl:java.lang.String registerConfigProvider(java.lang.String,java.util.Map,java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.catalina.authenticator.jaspic.AuthConfigFactoryImpl:boolean removeRegistration(java.lang.String)"
        ]
    },
    "jakarta.security.auth.message.config.AuthConfigFactory:jakarta.security.auth.message.config.AuthConfigFactory lambda$getFactory$0(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.security.auth.message.config.AuthConfigFactory$lambda_getFactory_0__1:java.lang.Object run()"
        ]
    },
    "org.apache.catalina.core.DefaultInstanceManager$PrivilegedLoadClass:java.lang.Class run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.DefaultInstanceManager$PrivilegedLoadClass:java.lang.Object run()"
        ]
    },
    "org.apache.catalina.core.DefaultInstanceManager:java.lang.Class loadClassMaybePrivileged(java.lang.String,java.lang.ClassLoader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.DefaultInstanceManager:java.lang.Object newInstance(java.lang.String)"
        ]
    },
    "org.apache.catalina.security.SecurityClassLoad:void securityClassLoad(java.lang.ClassLoader,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.security.SecurityClassLoad:void securityClassLoad(java.lang.ClassLoader)"
        ]
    },
    "org.apache.tomcat.util.digester.SetNextRule:void end(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.digester.Digester:void endElement(java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.catalina.startup.ListenerCreateRule:void begin(java.lang.String,java.lang.String,org.xml.sax.Attributes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.digester.Digester:void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)"
        ]
    },
    "org.apache.tomcat.util.digester.Digester:void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tomcat.util.modeler.ManagedBean:java.lang.reflect.Method getSetter(java.lang.String,org.apache.tomcat.util.modeler.BaseModelMBean,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.modeler.BaseModelMBean:void setAttribute(javax.management.Attribute)"
        ]
    },
    "org.apache.tomcat.util.modeler.ManagedBean:java.lang.reflect.Method getInvoke(java.lang.String,java.lang.Object[],java.lang.String[],org.apache.tomcat.util.modeler.BaseModelMBean,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.modeler.BaseModelMBean:java.lang.Object invoke(java.lang.String,java.lang.Object[],java.lang.String[])"
        ]
    },
    "org.apache.catalina.mbeans.MBeanUtils:javax.management.DynamicMBean createMBean(org.apache.tomcat.util.descriptor.web.ContextEnvironment)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.deploy.NamingResourcesImpl:void addEnvironment(org.apache.tomcat.util.descriptor.web.ContextEnvironment)",
            "org.apache.catalina.deploy.NamingResourcesImpl:void initInternal()"
        ]
    },
    "org.apache.catalina.mbeans.MBeanUtils:javax.management.DynamicMBean createMBean(org.apache.tomcat.util.descriptor.web.ContextResource)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.deploy.NamingResourcesImpl:void addResource(org.apache.tomcat.util.descriptor.web.ContextResource)",
            "org.apache.catalina.deploy.NamingResourcesImpl:void initInternal()"
        ]
    },
    "org.apache.catalina.mbeans.MBeanUtils:javax.management.DynamicMBean createMBean(org.apache.tomcat.util.descriptor.web.ContextResourceLink)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.deploy.NamingResourcesImpl:void addResourceLink(org.apache.tomcat.util.descriptor.web.ContextResourceLink)",
            "org.apache.catalina.deploy.NamingResourcesImpl:void initInternal()"
        ]
    },
    "org.apache.catalina.mbeans.MBeanUtils:javax.management.DynamicMBean createMBean(org.apache.catalina.Group)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.mbeans.GlobalResourcesLifecycleListener:void createMBeans(java.lang.String,org.apache.catalina.UserDatabase)",
            "org.apache.catalina.mbeans.MemoryUserDatabaseMBean:java.lang.String createGroup(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.catalina.mbeans.MBeanUtils:javax.management.DynamicMBean createMBean(org.apache.catalina.Role)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.mbeans.GlobalResourcesLifecycleListener:void createMBeans(java.lang.String,org.apache.catalina.UserDatabase)",
            "org.apache.catalina.mbeans.MemoryUserDatabaseMBean:java.lang.String createRole(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.catalina.mbeans.MBeanUtils:javax.management.DynamicMBean createMBean(org.apache.catalina.User)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.mbeans.GlobalResourcesLifecycleListener:void createMBeans(java.lang.String,org.apache.catalina.UserDatabase)",
            "org.apache.catalina.mbeans.MemoryUserDatabaseMBean:java.lang.String createUser(java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.catalina.mbeans.MBeanUtils:javax.management.DynamicMBean createMBean(org.apache.catalina.UserDatabase)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.mbeans.GlobalResourcesLifecycleListener:void createMBeans(java.lang.String,org.apache.catalina.UserDatabase)"
        ]
    },
    "org.apache.tomcat.util.scan.AbstractInputStreamJar:void nextEntry()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.ContextConfig:void processResourceJARs(java.util.Set)",
            "org.apache.catalina.startup.ContextConfig:void processAnnotationsJar(java.net.URL,org.apache.tomcat.util.descriptor.web.WebXml,boolean,java.util.Map)",
            "org.apache.tomcat.util.scan.ReferenceCountedJar:void nextEntry()"
        ]
    },
    "org.apache.tomcat.util.scan.AbstractInputStreamJar:java.util.jar.Manifest getManifest()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.scan.ReferenceCountedJar:java.util.jar.Manifest getManifest()",
            "org.apache.tomcat.util.scan.StandardJarScanner:void processManifest(org.apache.tomcat.Jar,boolean,java.util.Deque)"
        ]
    },
    "org.apache.tomcat.util.scan.AbstractInputStreamJar:void gotoEntry(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.scan.AbstractInputStreamJar:java.io.InputStream getInputStream(java.lang.String)",
            "org.apache.tomcat.util.scan.AbstractInputStreamJar:long getLastModified(java.lang.String)",
            "org.apache.tomcat.util.scan.AbstractInputStreamJar:boolean exists(java.lang.String)"
        ]
    },
    "org.apache.tomcat.util.scan.ReferenceCountedJar:void reset()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.scan.ReferenceCountedJar:void reset()"
        ]
    },
    "org.apache.catalina.connector.Response:void setLocale(java.util.Locale)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletResponseWrapper:void setLocale(java.util.Locale)",
            "org.apache.catalina.connector.ResponseFacade:void setLocale(java.util.Locale)",
            "org.apache.catalina.core.ApplicationHttpResponse:void setLocale(java.util.Locale)",
            "org.apache.catalina.core.ApplicationResponse:void setLocale(java.util.Locale)",
            "org.apache.catalina.valves.ErrorReportValve:void report(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,java.lang.Throwable)",
            "org.apache.catalina.valves.JsonErrorReportValve:void report(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,java.lang.Throwable)"
        ]
    },
    "org.apache.tomcat.util.scan.StandardJarScanner:void processURLs(org.apache.tomcat.JarScanType,org.apache.tomcat.JarScannerCallback,java.util.Set,boolean,java.util.Deque)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.scan.StandardJarScanner:void doScanClassPath(org.apache.tomcat.JarScanType,jakarta.servlet.ServletContext,org.apache.tomcat.JarScannerCallback,java.util.Set)"
        ]
    },
    "org.apache.catalina.security.SecurityUtil:void doAsPrivilege(java.lang.String,jakarta.servlet.Servlet)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.StandardWrapper:void unload()"
        ]
    },
    "org.apache.catalina.security.SecurityUtil:void doAsPrivilege(java.lang.String,jakarta.servlet.Servlet,java.lang.Class[],java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.StandardWrapper:void initServlet(jakarta.servlet.Servlet)"
        ]
    },
    "org.apache.catalina.security.SecurityUtil:void doAsPrivilege(java.lang.String,jakarta.servlet.Filter,java.lang.Class[],java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.security.SecurityUtil:void doAsPrivilege(java.lang.String,jakarta.servlet.Filter)"
        ]
    },
    "org.apache.catalina.filters.CsrfPreventionFilter$CsrfResponseWrapper:java.lang.String encodeRedirectURL(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletResponseWrapper:java.lang.String encodeRedirectURL(java.lang.String)",
            "org.apache.catalina.authenticator.FormAuthenticator:boolean doAuthenticate(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.filters.CsrfPreventionFilter$CsrfResponseWrapper:java.lang.String encodeRedirectUrl(java.lang.String)",
            "org.apache.catalina.servlets.DefaultServlet:void doDirectoryRedirect(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "jakarta.servlet.http.HttpServletResponseWrapper:java.lang.String encodeRedirectUrl(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletResponseWrapper:java.lang.String encodeRedirectUrl(java.lang.String)"
        ]
    },
    "org.apache.catalina.filters.CsrfPreventionFilter$CsrfResponseWrapper:java.lang.String encodeURL(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletResponseWrapper:java.lang.String encodeURL(java.lang.String)",
            "org.apache.catalina.filters.CsrfPreventionFilter$CsrfResponseWrapper:java.lang.String encodeUrl(java.lang.String)",
            "org.apache.catalina.manager.HTMLManagerServlet:void list(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.HTMLManagerServlet:void displaySessionDetailPage(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.catalina.util.ContextName,java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.StatusManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.host.HTMLHostManagerServlet:void list(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,java.lang.String,org.apache.tomcat.util.res.StringManager)"
        ]
    },
    "jakarta.servlet.http.HttpServletResponseWrapper:java.lang.String encodeUrl(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletResponseWrapper:java.lang.String encodeUrl(java.lang.String)"
        ]
    },
    "org.apache.catalina.core.ApplicationContextFacade:void addListener(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tomcat.util.modeler.BaseModelMBean:void setAttribute(javax.management.Attribute)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.mbeans.ContextEnvironmentMBean:void setAttribute(javax.management.Attribute)",
            "org.apache.tomcat.util.modeler.BaseModelMBean:void setAttribute(javax.management.Attribute)",
            "org.apache.tomcat.util.modeler.BaseModelMBean:javax.management.AttributeList setAttributes(javax.management.AttributeList)"
        ]
    },
    "org.apache.tomcat.util.modeler.BaseModelMBean:javax.management.AttributeList setAttributes(javax.management.AttributeList)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.juli.FileHandler:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.Integer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.juli.AsyncFileHandler:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.Integer)",
            "org.apache.juli.FileHandler:void <init>(java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.catalina.servlets.DefaultServlet$DirsFirstComparator:int compare(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.DefaultServlet$DirsFirstComparator:int compare(org.apache.catalina.WebResource,org.apache.catalina.WebResource)",
            "org.apache.catalina.servlets.DefaultServlet$ResourceLastModifiedDateComparator:int compare(org.apache.catalina.WebResource,org.apache.catalina.WebResource)",
            "org.apache.catalina.servlets.DefaultServlet$ResourceSizeComparator:int compare(org.apache.catalina.WebResource,org.apache.catalina.WebResource)"
        ]
    },
    "org.apache.catalina.servlets.DefaultServlet$ResourceLastModifiedDateComparator:int compare(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.DefaultServlet$DirsFirstComparator:int compare(org.apache.catalina.WebResource,org.apache.catalina.WebResource)",
            "org.apache.catalina.servlets.DefaultServlet$ResourceLastModifiedDateComparator:int compare(org.apache.catalina.WebResource,org.apache.catalina.WebResource)",
            "org.apache.catalina.servlets.DefaultServlet$ResourceSizeComparator:int compare(org.apache.catalina.WebResource,org.apache.catalina.WebResource)"
        ]
    },
    "org.apache.catalina.servlets.DefaultServlet$ResourceSizeComparator:int compare(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.DefaultServlet$DirsFirstComparator:int compare(org.apache.catalina.WebResource,org.apache.catalina.WebResource)",
            "org.apache.catalina.servlets.DefaultServlet$ResourceLastModifiedDateComparator:int compare(org.apache.catalina.WebResource,org.apache.catalina.WebResource)",
            "org.apache.catalina.servlets.DefaultServlet$ResourceSizeComparator:int compare(org.apache.catalina.WebResource,org.apache.catalina.WebResource)"
        ]
    },
    "org.apache.catalina.loader.WebappLoader:boolean modified()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.loader.WebappLoader:void backgroundProcess()"
        ]
    },
    "org.apache.catalina.loader.ParallelWebappClassLoader:org.apache.catalina.loader.ParallelWebappClassLoader copyWithoutTransformers()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.loader.ParallelWebappClassLoader:java.lang.ClassLoader copyWithoutTransformers()"
        ]
    },
    "org.apache.catalina.loader.WebappClassLoader:org.apache.catalina.loader.WebappClassLoader copyWithoutTransformers()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.loader.WebappClassLoader:java.lang.ClassLoader copyWithoutTransformers()"
        ]
    },
    "org.apache.catalina.webresources.war.WarURLConnection:long getLastModified()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.ContextConfig:org.apache.tomcat.util.descriptor.web.WebXml getDefaultWebXmlFragment(org.apache.tomcat.util.descriptor.web.WebXmlParser)",
            "org.apache.catalina.startup.ExpandWar:java.lang.String expand(org.apache.catalina.Host,java.net.URL,java.lang.String)",
            "org.apache.catalina.users.MemoryUserDatabase:void backgroundProcess()",
            "org.apache.catalina.webresources.war.WarURLConnection:long getLastModified()",
            "org.apache.tomcat.util.file.ConfigurationSource$Resource:long getLastModified()"
        ]
    },
    "org.apache.catalina.webresources.war.WarURLConnection:long getContentLengthLong()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.webresources.war.WarURLConnection:long getContentLengthLong()"
        ]
    },
    "org.apache.catalina.core.ApplicationContextFacade:java.net.URL getResource(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.NamingContextListener:void addService(org.apache.tomcat.util.descriptor.web.ContextService)",
            "org.apache.catalina.core.StandardContext$NoPluggabilityServletContext:java.net.URL getResource(java.lang.String)",
            "org.apache.catalina.startup.ContextConfig:org.xml.sax.InputSource getContextWebXmlSource()",
            "org.apache.catalina.startup.WebappServiceLoader:java.util.List load(java.lang.Class)",
            "org.apache.tomcat.util.scan.StandardJarScanner:void scan(org.apache.tomcat.JarScanType,jakarta.servlet.ServletContext,org.apache.tomcat.JarScannerCallback)"
        ]
    },
    "org.apache.catalina.core.StandardContext$NoPluggabilityServletContext:java.net.URL getResource(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.NamingContextListener:void addService(org.apache.tomcat.util.descriptor.web.ContextService)",
            "org.apache.catalina.core.StandardContext$NoPluggabilityServletContext:java.net.URL getResource(java.lang.String)",
            "org.apache.catalina.startup.ContextConfig:org.xml.sax.InputSource getContextWebXmlSource()",
            "org.apache.catalina.startup.WebappServiceLoader:java.util.List load(java.lang.Class)",
            "org.apache.tomcat.util.scan.StandardJarScanner:void scan(org.apache.tomcat.JarScanType,jakarta.servlet.ServletContext,org.apache.tomcat.JarScannerCallback)"
        ]
    },
    "org.apache.catalina.core.ApplicationContext:java.lang.String getRealPath(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.Request:java.lang.String getRealPath(java.lang.String)",
            "org.apache.catalina.connector.Request:java.lang.String getPathTranslated()",
            "org.apache.catalina.core.ApplicationContextFacade:java.lang.String getRealPath(java.lang.String)",
            "org.apache.catalina.core.ApplicationHttpRequest:java.lang.String getPathTranslated()",
            "org.apache.catalina.core.StandardContext$NoPluggabilityServletContext:java.lang.String getRealPath(java.lang.String)",
            "org.apache.catalina.servlets.CGIServlet$CGIEnvironment:void setupFromContext(jakarta.servlet.ServletContext)",
            "org.apache.catalina.servlets.CGIServlet$CGIEnvironment:boolean setCGIEnvironment(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.servlets.CGIServlet:void printServletEnvironment(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.valves.rewrite.ResolverImpl:java.lang.String resolve(java.lang.String)"
        ]
    },
    "org.apache.tomcat.util.digester.Digester$SystemPropertySource:java.lang.String getProperty(java.lang.String,java.lang.ClassLoader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.IntrospectionUtils:java.lang.String getProperty(java.lang.String,java.util.Hashtable,org.apache.tomcat.util.IntrospectionUtils$PropertySource[],java.lang.ClassLoader)",
            "org.apache.tomcat.util.digester.Digester$SystemPropertySource:java.lang.String getProperty(java.lang.String)"
        ]
    },
    "org.apache.tomcat.util.digester.EnvironmentPropertySource:java.lang.String getProperty(java.lang.String,java.lang.ClassLoader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.IntrospectionUtils:java.lang.String getProperty(java.lang.String,java.util.Hashtable,org.apache.tomcat.util.IntrospectionUtils$PropertySource[],java.lang.ClassLoader)"
        ]
    },
    "org.apache.catalina.mapper.Mapper:void map(org.apache.catalina.Context,org.apache.tomcat.util.buf.MessageBytes,org.apache.catalina.mapper.MappingData)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationContext:jakarta.servlet.RequestDispatcher getRequestDispatcher(java.lang.String)"
        ]
    },
    "org.apache.catalina.mapper.Mapper:void internalMap(org.apache.tomcat.util.buf.CharChunk,org.apache.tomcat.util.buf.CharChunk,java.lang.String,org.apache.catalina.mapper.MappingData)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.mapper.Mapper:void map(org.apache.tomcat.util.buf.MessageBytes,org.apache.tomcat.util.buf.MessageBytes,java.lang.String,org.apache.catalina.mapper.MappingData)"
        ]
    },
    "org.apache.catalina.valves.rewrite.RewriteCond$ResourceCondition:boolean evaluate(java.lang.String,org.apache.catalina.valves.rewrite.Resolver)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.valves.rewrite.RewriteCond:boolean evaluate(java.util.regex.Matcher,java.util.regex.Matcher,org.apache.catalina.valves.rewrite.Resolver)"
        ]
    },
    "org.apache.catalina.webresources.CachedResource:java.net.URL getCodeBase()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.loader.WebappClassLoaderBase:boolean check(java.security.Permission)",
            "org.apache.catalina.loader.WebappClassLoaderBase:java.lang.Class findClassInternal(java.lang.String)",
            "org.apache.catalina.webresources.CachedResource:java.net.URL getCodeBase()"
        ]
    },
    "org.apache.catalina.loader.WebappClassLoaderBase$PrivilegedHasLoggingConfig:java.lang.Boolean run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.loader.WebappClassLoaderBase$PrivilegedHasLoggingConfig:java.lang.Object run()"
        ]
    },
    "org.apache.catalina.loader.WebappClassLoaderBase:java.net.URL getResource(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.loader.WebappClassLoaderBase$PrivilegedJavaseGetResource:java.net.URL run()",
            "org.apache.catalina.loader.WebappClassLoaderBase:java.net.URL getResource(java.lang.String)",
            "org.apache.catalina.loader.WebappClassLoaderBase:java.lang.Class loadClass(java.lang.String,boolean)",
            "org.apache.catalina.realm.JAASRealm:javax.security.auth.login.Configuration getConfig()",
            "org.apache.catalina.startup.CatalinaBaseConfigurationSource:org.apache.tomcat.util.file.ConfigurationSource$Resource getServerXml()",
            "org.apache.catalina.startup.CatalinaBaseConfigurationSource:org.apache.tomcat.util.file.ConfigurationSource$Resource getResource(java.lang.String)",
            "org.apache.catalina.startup.CatalinaBaseConfigurationSource:java.net.URI getURI(java.lang.String)",
            "org.apache.catalina.webresources.ClasspathURLStreamHandler:java.net.URLConnection openConnection(java.net.URL)",
            "org.apache.tomcat.util.modeler.Registry:void loadDescriptors(java.lang.String,java.lang.ClassLoader)"
        ]
    },
    "org.apache.catalina.loader.WebappClassLoaderBase:boolean hasLoggingConfig()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.juli.ClassLoaderLogManager:void readConfiguration(java.lang.ClassLoader)"
        ]
    },
    "org.apache.coyote.http2.Http2AsyncUpgradeHandler:void <init>(org.apache.coyote.http2.Http2Protocol,org.apache.coyote.Adapter,org.apache.coyote.Request)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2Protocol:org.apache.coyote.http11.upgrade.InternalHttpUpgradeHandler getInternalUpgradeHandler(org.apache.tomcat.util.net.SocketWrapperBase,org.apache.coyote.Adapter,org.apache.coyote.Request)"
        ]
    },
    "org.apache.coyote.http2.Http2Protocol:org.apache.coyote.http11.upgrade.InternalHttpUpgradeHandler getInternalUpgradeHandler(org.apache.tomcat.util.net.SocketWrapperBase,org.apache.coyote.Adapter,org.apache.coyote.Request)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11Processor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState service(org.apache.tomcat.util.net.SocketWrapperBase)",
            "org.apache.coyote.http2.Http2Protocol:org.apache.coyote.Processor getProcessor(org.apache.tomcat.util.net.SocketWrapperBase,org.apache.coyote.Adapter)"
        ]
    },
    "org.apache.coyote.http2.Http2UpgradeHandler:void reprioritise(int,int,boolean,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2AsyncUpgradeHandler:void reprioritise(int,int,boolean,int)",
            "org.apache.coyote.http2.Http2Parser:void readHeadersFrame(int,int,int,java.nio.ByteBuffer)",
            "org.apache.coyote.http2.Http2Parser:void readPriorityFrame(int,java.nio.ByteBuffer)"
        ]
    },
    "org.apache.coyote.http2.Stream$StreamInputBuffer:boolean isReadyForRead()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.StreamProcessor:boolean isReadyForRead()"
        ]
    },
    "org.apache.coyote.http2.Stream$StreamInputBuffer:java.nio.ByteBuffer getInBuffer()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Stream$StreamInputBuffer:java.nio.ByteBuffer access$300(org.apache.coyote.http2.Stream$StreamInputBuffer)"
        ]
    },
    "org.apache.coyote.http2.Stream:boolean isReadyForWrite()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.StreamProcessor:boolean isReadyForWrite()",
            "org.apache.coyote.http2.StreamProcessor:boolean flushBufferedWrite()"
        ]
    },
    "org.apache.coyote.http2.Http2UpgradeHandler:java.nio.ByteBuffer startRequestBodyFrame(int,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2AsyncUpgradeHandler:java.nio.ByteBuffer startRequestBodyFrame(int,int,boolean)",
            "org.apache.coyote.http2.Http2Parser:void readDataFrame(int,int,int,java.nio.ByteBuffer)"
        ]
    },
    "org.apache.coyote.http2.Http2UpgradeHandler:void receivedEndOfStream(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2AsyncUpgradeHandler:void receivedEndOfStream(int)",
            "org.apache.coyote.http2.Http2Parser:void readDataFrame(int,int,int,java.nio.ByteBuffer)",
            "org.apache.coyote.http2.Http2Parser:void onHeadersComplete(int)"
        ]
    },
    "org.apache.coyote.http2.StreamProcessor:void setRequestBody(org.apache.tomcat.util.buf.ByteChunk)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProcessor:void action(org.apache.coyote.ActionCode,java.lang.Object)"
        ]
    },
    "org.apache.catalina.core.ApplicationFilterConfig:void registerJMX()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationFilterConfig:void initFilter()"
        ]
    },
    "org.apache.catalina.util.LifecycleMBeanBase:javax.management.ObjectName register(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.StandardServer:void initInternal()",
            "org.apache.catalina.util.LifecycleMBeanBase:void initInternal()",
            "org.apache.catalina.webresources.StandardRoot:void initInternal()"
        ]
    },
    "org.apache.coyote.AbstractProtocol$ConnectionHandler:void register(org.apache.coyote.Processor)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProtocol$ConnectionHandler:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState process(org.apache.tomcat.util.net.SocketWrapperBase,org.apache.tomcat.util.net.SocketEvent)"
        ]
    },
    "org.apache.coyote.http11.AbstractHttp11Protocol:org.apache.coyote.http11.upgrade.UpgradeGroupInfo getUpgradeGroupInfo(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.AbstractHttp11Protocol:org.apache.coyote.Processor createUpgradeProcessor(org.apache.tomcat.util.net.SocketWrapperBase,org.apache.coyote.UpgradeToken)"
        ]
    },
    "org.apache.coyote.http2.Http2Protocol:void setHttp11Protocol(org.apache.coyote.http11.AbstractHttp11Protocol)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.AbstractHttp11Protocol:void init()"
        ]
    },
    "org.apache.tomcat.util.modeler.Registry:void registerComponent(java.lang.Object,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tomcat.util.net.AbstractEndpoint:void registerJmx(org.apache.tomcat.util.net.SSLHostConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.AbstractEndpoint:void addSslHostConfig(org.apache.tomcat.util.net.SSLHostConfig,boolean)",
            "org.apache.tomcat.util.net.AbstractEndpoint:void init()"
        ]
    },
    "org.apache.catalina.mbeans.GroupMBean:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.mbeans.MBeanUtils:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.deploy.NamingResourcesImpl:void addEnvironment(org.apache.tomcat.util.descriptor.web.ContextEnvironment)",
            "org.apache.catalina.deploy.NamingResourcesImpl:void addResource(org.apache.tomcat.util.descriptor.web.ContextResource)",
            "org.apache.catalina.deploy.NamingResourcesImpl:void addResourceLink(org.apache.tomcat.util.descriptor.web.ContextResourceLink)",
            "org.apache.catalina.deploy.NamingResourcesImpl:void removeEnvironment(java.lang.String)",
            "org.apache.catalina.deploy.NamingResourcesImpl:void removeResource(java.lang.String)",
            "org.apache.catalina.deploy.NamingResourcesImpl:void removeResourceLink(java.lang.String)",
            "org.apache.catalina.deploy.NamingResourcesImpl:void initInternal()",
            "org.apache.catalina.deploy.NamingResourcesImpl:void destroyInternal()",
            "org.apache.catalina.mbeans.GlobalResourcesLifecycleListener:void createMBeans(java.lang.String,org.apache.catalina.UserDatabase)",
            "org.apache.catalina.mbeans.GroupMBean:void <init>()",
            "org.apache.catalina.mbeans.GroupMBean:java.lang.String[] getRoles()",
            "org.apache.catalina.mbeans.GroupMBean:java.lang.String[] getUsers()",
            "org.apache.catalina.mbeans.MBeanFactory:java.lang.String createWebappLoader(java.lang.String)",
            "org.apache.catalina.mbeans.MBeanFactory:void <clinit>()",
            "org.apache.catalina.mbeans.MBeanUtils:java.lang.String createManagedName(java.lang.Object)",
            "org.apache.catalina.mbeans.MBeanUtils:javax.management.DynamicMBean createMBean(org.apache.tomcat.util.descriptor.web.ContextEnvironment)",
            "org.apache.catalina.mbeans.MBeanUtils:javax.management.DynamicMBean createMBean(org.apache.tomcat.util.descriptor.web.ContextResource)",
            "org.apache.catalina.mbeans.MBeanUtils:javax.management.DynamicMBean createMBean(org.apache.tomcat.util.descriptor.web.ContextResourceLink)",
            "org.apache.catalina.mbeans.MBeanUtils:javax.management.DynamicMBean createMBean(org.apache.catalina.Group)",
            "org.apache.catalina.mbeans.MBeanUtils:javax.management.DynamicMBean createMBean(org.apache.catalina.Role)",
            "org.apache.catalina.mbeans.MBeanUtils:javax.management.DynamicMBean createMBean(org.apache.catalina.User)",
            "org.apache.catalina.mbeans.MBeanUtils:javax.management.DynamicMBean createMBean(org.apache.catalina.UserDatabase)",
            "org.apache.catalina.mbeans.MBeanUtils:org.apache.tomcat.util.modeler.Registry createRegistry()",
            "org.apache.catalina.mbeans.MBeanUtils:javax.management.MBeanServer createServer()",
            "org.apache.catalina.mbeans.MBeanUtils:void destroyMBean(org.apache.tomcat.util.descriptor.web.ContextEnvironment)",
            "org.apache.catalina.mbeans.MBeanUtils:void destroyMBean(org.apache.tomcat.util.descriptor.web.ContextResource)",
            "org.apache.catalina.mbeans.MBeanUtils:void destroyMBean(org.apache.tomcat.util.descriptor.web.ContextResourceLink)",
            "org.apache.catalina.mbeans.MBeanUtils:void destroyMBean(org.apache.catalina.Group)",
            "org.apache.catalina.mbeans.MBeanUtils:void destroyMBean(org.apache.catalina.Role)",
            "org.apache.catalina.mbeans.MBeanUtils:void destroyMBean(org.apache.catalina.User)",
            "org.apache.catalina.mbeans.MBeanUtils:void destroyMBeanUserDatabase(java.lang.String)",
            "org.apache.catalina.mbeans.MBeanUtils:void <clinit>()",
            "org.apache.catalina.mbeans.MemoryUserDatabaseMBean:void <init>()",
            "org.apache.catalina.mbeans.MemoryUserDatabaseMBean:java.lang.String createGroup(java.lang.String,java.lang.String)",
            "org.apache.catalina.mbeans.MemoryUserDatabaseMBean:java.lang.String createRole(java.lang.String,java.lang.String)",
            "org.apache.catalina.mbeans.MemoryUserDatabaseMBean:java.lang.String createUser(java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.catalina.mbeans.MemoryUserDatabaseMBean:java.lang.String findGroup(java.lang.String)",
            "org.apache.catalina.mbeans.MemoryUserDatabaseMBean:java.lang.String findRole(java.lang.String)",
            "org.apache.catalina.mbeans.MemoryUserDatabaseMBean:java.lang.String findUser(java.lang.String)",
            "org.apache.catalina.mbeans.MemoryUserDatabaseMBean:void removeGroup(java.lang.String)",
            "org.apache.catalina.mbeans.MemoryUserDatabaseMBean:void removeRole(java.lang.String)",
            "org.apache.catalina.mbeans.MemoryUserDatabaseMBean:void removeUser(java.lang.String)",
            "org.apache.catalina.mbeans.NamingResourcesMBean:void <init>()",
            "org.apache.catalina.mbeans.NamingResourcesMBean:java.lang.String[] getEnvironments()",
            "org.apache.catalina.mbeans.NamingResourcesMBean:java.lang.String[] getResources()",
            "org.apache.catalina.mbeans.NamingResourcesMBean:java.lang.String[] getResourceLinks()",
            "org.apache.catalina.mbeans.NamingResourcesMBean:java.lang.String addEnvironment(java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.catalina.mbeans.NamingResourcesMBean:java.lang.String addResource(java.lang.String,java.lang.String)",
            "org.apache.catalina.mbeans.NamingResourcesMBean:java.lang.String addResourceLink(java.lang.String,java.lang.String)",
            "org.apache.catalina.mbeans.RoleMBean:void <init>()",
            "org.apache.catalina.mbeans.UserMBean:void <init>()",
            "org.apache.catalina.mbeans.UserMBean:java.lang.String[] getGroups()",
            "org.apache.catalina.mbeans.UserMBean:java.lang.String[] getRoles()"
        ]
    },
    "org.apache.catalina.mbeans.MemoryUserDatabaseMBean:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.mbeans.NamingResourcesMBean:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.mbeans.RoleMBean:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.mbeans.UserMBean:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.connector.Connector:void addSslHostConfig(org.apache.tomcat.util.net.SSLHostConfig)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.manager.ManagerServlet:void sslReload(java.io.PrintWriter,java.lang.String,org.apache.tomcat.util.res.StringManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.HTMLManagerServlet:java.lang.String sslReload(java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.ManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.coyote.http11.AbstractHttp11Protocol:void reloadSslHostConfigs()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.ManagerServlet:void sslReload(java.io.PrintWriter,java.lang.String,org.apache.tomcat.util.res.StringManager)"
        ]
    },
    "org.apache.coyote.http2.Http2Parser:void readHeaderPayload(int,int,java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2Parser:void readHeadersFrame(int,int,int,java.nio.ByteBuffer)",
            "org.apache.coyote.http2.Http2Parser:void readContinuationFrame(int,int,int,java.nio.ByteBuffer)"
        ]
    },
    "org.apache.catalina.filters.AddDefaultCharsetFilter$ResponseWrapper:void setContentType(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletResponseWrapper:void setContentType(java.lang.String)",
            "jakarta.servlet.http.HttpServlet:void doTrace(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.core.ApplicationHttpResponse:void setContentType(java.lang.String)",
            "org.apache.catalina.core.ApplicationResponse:void setContentType(java.lang.String)",
            "org.apache.catalina.filters.AddDefaultCharsetFilter$ResponseWrapper:void setHeader(java.lang.String,java.lang.String)",
            "org.apache.catalina.filters.AddDefaultCharsetFilter$ResponseWrapper:void addHeader(java.lang.String,java.lang.String)",
            "org.apache.catalina.filters.CorsFilter:void handleInvalidCORS(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.filters.RemoteCIDRFilter:void sendErrorWhenNotHttp(jakarta.servlet.ServletResponse)",
            "org.apache.catalina.filters.RequestFilter:void sendErrorWhenNotHttp(jakarta.servlet.ServletResponse)",
            "org.apache.catalina.manager.HTMLManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.HTMLManagerServlet:void doPost(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.JMXProxyServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.ManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.ManagerServlet:void doPut(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.StatusTransformer:void setContentType(jakarta.servlet.http.HttpServletResponse,int)",
            "org.apache.catalina.manager.host.HTMLHostManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.host.HTMLHostManagerServlet:void doPost(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.host.HostManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.DefaultServlet:void serveResource(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,boolean,java.lang.String)",
            "org.apache.catalina.servlets.WebdavServlet:void doPropfind(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.WebdavServlet:void doLock(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.connector.Response:void addHeader(java.lang.String,java.lang.String,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.Response:void addCookie(jakarta.servlet.http.Cookie)",
            "org.apache.catalina.connector.Response:void addHeader(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.catalina.connector.Response:void setHeader(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServlet:void doOptions(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "jakarta.servlet.http.HttpServletResponseWrapper:void setHeader(java.lang.String,java.lang.String)",
            "org.apache.catalina.authenticator.AuthenticatorBase:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.authenticator.AuthenticatorBase:void register(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse,java.security.Principal,java.lang.String,java.lang.String,java.lang.String,boolean,boolean)",
            "org.apache.catalina.authenticator.BasicAuthenticator:boolean doAuthenticate(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.authenticator.DigestAuthenticator:void setAuthenticateHeader(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,java.lang.String,boolean)",
            "org.apache.catalina.authenticator.SpnegoAuthenticator:boolean doAuthenticate(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.connector.Response:void sendRedirect(java.lang.String,int)",
            "org.apache.catalina.connector.Response:void setDateHeader(java.lang.String,long)",
            "org.apache.catalina.connector.Response:void setIntHeader(java.lang.String,int)",
            "org.apache.catalina.connector.ResponseFacade:void setHeader(java.lang.String,java.lang.String)",
            "org.apache.catalina.core.ApplicationHttpResponse:void setHeader(java.lang.String,java.lang.String)",
            "org.apache.catalina.filters.HttpHeaderSecurityFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.manager.HTMLManagerServlet:void displaySessionsListPage(org.apache.catalina.util.ContextName,jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.HTMLManagerServlet:void displaySessionDetailPage(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.catalina.util.ContextName,java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.JMXProxyServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.ManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.ManagerServlet:void doPut(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.host.HostManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.CGIServlet:void doOptions(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.DefaultServlet:void doOptions(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.DefaultServlet:void serveResource(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,boolean,java.lang.String)",
            "org.apache.catalina.servlets.DefaultServlet:boolean checkIfModifiedSince(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.catalina.WebResource)",
            "org.apache.catalina.servlets.DefaultServlet:boolean checkIfNoneMatch(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.catalina.WebResource)",
            "org.apache.catalina.valves.LoadBalancerDrainingValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.tomcat.util.http.ResponseUtil$ResponseAdapter:void setHeader(java.lang.String,java.lang.String)",
            "org.apache.catalina.filters.RestCsrfPreventionFilter$RestCsrfPreventionStrategy$setHeader__36:void setNonce(java.lang.Object,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.catalina.connector.ResponseFacade$SetContentTypePrivilegedAction:java.lang.Object run()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.security.auth.message.config.AuthConfigFactory:java.lang.String getFactoryClassName()",
            "jakarta.servlet.http.Cookie:void <clinit>()",
            "org.apache.catalina.connector.ResponseFacade:void setContentType(java.lang.String)",
            "org.apache.catalina.startup.ClassLoaderFactory:java.lang.ClassLoader createClassLoader(java.io.File[],java.io.File[],java.lang.ClassLoader)",
            "org.apache.catalina.startup.ClassLoaderFactory:java.lang.ClassLoader createClassLoader(java.util.List,java.lang.ClassLoader)",
            "org.apache.catalina.util.Introspection:java.lang.reflect.Field[] getDeclaredFields(java.lang.Class)",
            "org.apache.catalina.util.Introspection:java.lang.reflect.Method[] getDeclaredMethods(java.lang.Class)",
            "org.apache.juli.ClassLoaderLogManager:boolean addLogger(java.util.logging.Logger)",
            "org.apache.juli.ClassLoaderLogManager:org.apache.juli.ClassLoaderLogManager$ClassLoaderLogInfo getClassLoaderInfo(java.lang.ClassLoader)",
            "org.apache.juli.ClassLoaderLogManager:void doSetParentLogger(java.util.logging.Logger,java.util.logging.Logger)",
            "org.apache.juli.FileHandler$1:java.lang.Thread newThread(java.lang.Runnable)",
            "org.apache.naming.factory.MailSessionFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.naming.factory.SendMailFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.tomcat.util.compat.JrePlatform:void <clinit>()"
        ]
    },
    "org.apache.coyote.Response:void addHeader(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.CoyoteAdapter:boolean postParseRequest(org.apache.coyote.Request,org.apache.catalina.connector.Request,org.apache.coyote.Response,org.apache.catalina.connector.Response)"
        ]
    },
    "org.apache.tomcat.util.json.JSONParser:void <init>(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tomcat.util.json.JSONParser:void ReInit(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tomcat.util.json.JSONParser:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tomcat.util.json.JSONParser:boolean ensureEOF()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.json.JSONParser:java.util.LinkedHashMap parseObject()",
            "org.apache.tomcat.util.json.JSONParser:java.util.ArrayList parseArray()",
            "org.apache.tomcat.util.json.JSONParser:java.lang.Object parse()"
        ]
    },
    "org.apache.tomcat.util.json.JSONParser:java.lang.Object value()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.json.JSONParser:java.lang.Object anything()"
        ]
    },
    "org.apache.tomcat.util.json.JSONParser:java.lang.Object nullValue()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.json.JSONParser:java.lang.String objectKey()",
            "org.apache.tomcat.util.json.JSONParser:java.lang.Object value()"
        ]
    },
    "org.apache.tomcat.util.json.JSONParser:java.lang.Boolean booleanValue()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.json.JSONParser:java.lang.String objectKey()",
            "org.apache.tomcat.util.json.JSONParser:java.lang.Object value()"
        ]
    },
    "org.apache.tomcat.util.json.JSONParser:java.lang.Number number()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.json.JSONParser:java.lang.String objectKey()",
            "org.apache.tomcat.util.json.JSONParser:java.lang.Object value()"
        ]
    },
    "org.apache.tomcat.util.json.JSONParser:java.lang.String string()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.json.JSONParser:java.lang.String objectKey()",
            "org.apache.tomcat.util.json.JSONParser:java.lang.Object value()"
        ]
    },
    "org.apache.tomcat.util.json.JSONParser:java.lang.String doubleQuoteString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.json.JSONParser:java.lang.String string()"
        ]
    },
    "org.apache.tomcat.util.json.JSONParser:java.lang.String singleQuoteString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.json.JSONParser:java.lang.String string()"
        ]
    },
    "org.apache.tomcat.util.json.JSONParser:java.lang.String symbol()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.json.JSONParser:java.lang.String objectKey()"
        ]
    },
    "org.apache.catalina.manager.HTMLManagerServlet:org.apache.catalina.Session getSessionForNameAndId(org.apache.catalina.util.ContextName,java.lang.String,org.apache.tomcat.util.res.StringManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.HTMLManagerServlet:void displaySessionDetailPage(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.catalina.util.ContextName,java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.HTMLManagerServlet:int invalidateSessions(org.apache.catalina.util.ContextName,java.lang.String[],org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.HTMLManagerServlet:boolean removeSessionAttribute(org.apache.catalina.util.ContextName,java.lang.String,java.lang.String,org.apache.tomcat.util.res.StringManager)"
        ]
    },
    "org.apache.catalina.connector.Request$3:void set(org.apache.catalina.connector.Request,java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.Request:void setAttribute(java.lang.String,java.lang.Object)"
        ]
    },
    "jakarta.servlet.ServletRequestWrapper:void removeAttribute(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletRequestWrapper:void removeAttribute(java.lang.String)",
            "org.apache.catalina.core.ApplicationHttpRequest:void removeAttribute(java.lang.String)",
            "org.apache.catalina.core.ApplicationRequest:void removeAttribute(java.lang.String)"
        ]
    },
    "org.apache.catalina.connector.RequestFacade:void removeAttribute(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletRequestWrapper:void removeAttribute(java.lang.String)",
            "org.apache.catalina.core.ApplicationHttpRequest:void removeAttribute(java.lang.String)",
            "org.apache.catalina.core.ApplicationRequest:void removeAttribute(java.lang.String)"
        ]
    },
    "org.apache.catalina.core.ApplicationHttpRequest:void removeAttribute(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletRequestWrapper:void removeAttribute(java.lang.String)",
            "org.apache.catalina.core.ApplicationHttpRequest:void removeAttribute(java.lang.String)",
            "org.apache.catalina.core.ApplicationRequest:void removeAttribute(java.lang.String)"
        ]
    },
    "org.apache.catalina.core.ApplicationRequest:void removeAttribute(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletRequestWrapper:void removeAttribute(java.lang.String)",
            "org.apache.catalina.core.ApplicationHttpRequest:void removeAttribute(java.lang.String)",
            "org.apache.catalina.core.ApplicationRequest:void removeAttribute(java.lang.String)"
        ]
    },
    "jakarta.servlet.http.HttpServletRequestWrapper:java.lang.String getContextPath()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletRequestWrapper:java.lang.String getContextPath()",
            "org.apache.catalina.core.ApplicationDispatcher:void doForward(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)",
            "org.apache.catalina.core.ApplicationDispatcher:jakarta.servlet.ServletRequest wrapRequest(org.apache.catalina.core.ApplicationDispatcher$State)",
            "org.apache.catalina.core.ApplicationHttpRequest:void setRequest(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.core.ApplicationPushBuilder:jakarta.servlet.http.PushBuilder path(java.lang.String)",
            "org.apache.catalina.core.AsyncContextImpl:void dispatch()",
            "org.apache.catalina.filters.RequestDumperFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.filters.WebdavFixFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.manager.HTMLManagerServlet:void list(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.StatusManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.host.HTMLHostManagerServlet:void list(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.servlets.CGIServlet$CGIEnvironment:boolean setupFromRequest(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.servlets.CGIServlet:void printServletEnvironment(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.servlets.DefaultServlet:java.lang.String getPathPrefix(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.servlets.WebdavServlet:java.lang.String getPathPrefix(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.servlets.WebdavServlet:boolean copyResource(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.WebdavServlet:void parseProperties(jakarta.servlet.http.HttpServletRequest,org.apache.catalina.util.XMLWriter,java.lang.String,int,java.util.Vector)"
        ]
    },
    "org.apache.catalina.connector.RequestFacade:java.lang.String getContextPath()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletRequestWrapper:java.lang.String getContextPath()",
            "org.apache.catalina.core.ApplicationDispatcher:void doForward(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)",
            "org.apache.catalina.core.ApplicationDispatcher:jakarta.servlet.ServletRequest wrapRequest(org.apache.catalina.core.ApplicationDispatcher$State)",
            "org.apache.catalina.core.ApplicationHttpRequest:void setRequest(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.core.ApplicationPushBuilder:jakarta.servlet.http.PushBuilder path(java.lang.String)",
            "org.apache.catalina.core.AsyncContextImpl:void dispatch()",
            "org.apache.catalina.filters.RequestDumperFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.filters.WebdavFixFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.manager.HTMLManagerServlet:void list(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.StatusManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.host.HTMLHostManagerServlet:void list(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.servlets.CGIServlet$CGIEnvironment:boolean setupFromRequest(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.servlets.CGIServlet:void printServletEnvironment(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.servlets.DefaultServlet:java.lang.String getPathPrefix(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.servlets.WebdavServlet:java.lang.String getPathPrefix(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.servlets.WebdavServlet:boolean copyResource(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.WebdavServlet:void parseProperties(jakarta.servlet.http.HttpServletRequest,org.apache.catalina.util.XMLWriter,java.lang.String,int,java.util.Vector)"
        ]
    },
    "org.apache.catalina.core.ApplicationPushBuilder:jakarta.servlet.http.PushBuilder path(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.servlets.DefaultServlet:java.lang.String getPathPrefix(jakarta.servlet.http.HttpServletRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.DefaultServlet:void serveResource(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,boolean,java.lang.String)"
        ]
    },
    "org.apache.catalina.servlets.WebdavServlet:java.lang.String getPathPrefix(jakarta.servlet.http.HttpServletRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.DefaultServlet:void serveResource(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,boolean,java.lang.String)"
        ]
    },
    "org.apache.catalina.filters.ExpiresFilter:void onBeforeWriteResponseBody(jakarta.servlet.http.HttpServletRequest,org.apache.catalina.filters.ExpiresFilter$XHttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void fireBeforeWriteResponseBodyEvent()",
            "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream:void fireOnBeforeWriteResponseBodyEvent()",
            "org.apache.catalina.filters.ExpiresFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)"
        ]
    },
    "jakarta.servlet.GenericServlet:void log(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.HTMLManagerServlet:void list(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.HTMLManagerServlet:java.lang.String expireSessions(org.apache.catalina.util.ContextName,jakarta.servlet.http.HttpServletRequest,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.HTMLManagerServlet:void doSessions(org.apache.catalina.util.ContextName,jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.HTMLManagerServlet:void displaySessionsListPage(org.apache.catalina.util.ContextName,jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.HTMLManagerServlet:int invalidateSessions(org.apache.catalina.util.ContextName,java.lang.String[],org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.HTMLManagerServlet:boolean removeSessionAttribute(org.apache.catalina.util.ContextName,java.lang.String,java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.ManagerServlet:void init()",
            "org.apache.catalina.manager.ManagerServlet:void deploy(java.io.PrintWriter,java.lang.String,org.apache.catalina.util.ContextName,java.lang.String,boolean,jakarta.servlet.http.HttpServletRequest,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.ManagerServlet:void deploy(java.io.PrintWriter,java.lang.String,org.apache.catalina.util.ContextName,java.lang.String,boolean,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.ManagerServlet:void list(java.io.PrintWriter,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.ManagerServlet:void reload(java.io.PrintWriter,org.apache.catalina.util.ContextName,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.ManagerServlet:void resources(java.io.PrintWriter,java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.ManagerServlet:void serverinfo(java.io.PrintWriter,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.ManagerServlet:void sessions(java.io.PrintWriter,org.apache.catalina.util.ContextName,int,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.ManagerServlet:void expireSessions(java.io.PrintWriter,org.apache.catalina.util.ContextName,jakarta.servlet.http.HttpServletRequest,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.ManagerServlet:void start(java.io.PrintWriter,org.apache.catalina.util.ContextName,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.ManagerServlet:void stop(java.io.PrintWriter,org.apache.catalina.util.ContextName,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.ManagerServlet:void undeploy(java.io.PrintWriter,org.apache.catalina.util.ContextName,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.host.HTMLHostManagerServlet:void list(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.host.HostManagerServlet:void add(java.io.PrintWriter,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean,boolean,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.host.HostManagerServlet:void remove(java.io.PrintWriter,java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.host.HostManagerServlet:void list(java.io.PrintWriter,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.host.HostManagerServlet:void start(java.io.PrintWriter,java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.host.HostManagerServlet:void stop(java.io.PrintWriter,java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.host.HostManagerServlet:void persist(java.io.PrintWriter,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.servlets.DefaultServlet:void init()",
            "org.apache.catalina.servlets.DefaultServlet:void serveResource(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,boolean,java.lang.String)",
            "org.apache.catalina.servlets.DefaultServlet:java.lang.String getReadme(org.apache.catalina.WebResource,java.lang.String)",
            "org.apache.catalina.servlets.DefaultServlet:javax.xml.transform.Source findXsltSource(org.apache.catalina.WebResource)",
            "org.apache.catalina.servlets.DefaultServlet:boolean checkIfMatch(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.catalina.WebResource)",
            "org.apache.catalina.servlets.DefaultServlet:boolean checkIfNoneMatch(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.catalina.WebResource)",
            "org.apache.catalina.servlets.DefaultServlet:java.io.IOException copyRange(java.io.InputStream,jakarta.servlet.ServletOutputStream,long,long)",
            "org.apache.catalina.servlets.WebdavServlet:void service(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.WebdavServlet:boolean copyResource(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.WebdavServlet:boolean copyResource(java.util.Hashtable,java.lang.String,java.lang.String)",
            "org.apache.catalina.servlets.WebdavServlet:void deleteCollection(jakarta.servlet.http.HttpServletRequest,java.lang.String,java.util.Hashtable)"
        ]
    },
    "jakarta.servlet.GenericServlet:void log(java.lang.String,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.HTMLManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.HTMLManagerServlet:java.lang.String upload(jakarta.servlet.http.HttpServletRequest,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.ManagerServlet:void setWrapper(org.apache.catalina.Wrapper)",
            "org.apache.catalina.manager.ManagerServlet:void save(java.io.PrintWriter,java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.ManagerServlet:void deploy(java.io.PrintWriter,java.lang.String,org.apache.catalina.util.ContextName,java.lang.String,boolean,jakarta.servlet.http.HttpServletRequest,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.ManagerServlet:void deploy(java.io.PrintWriter,org.apache.catalina.util.ContextName,java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.ManagerServlet:void deploy(java.io.PrintWriter,java.lang.String,org.apache.catalina.util.ContextName,java.lang.String,boolean,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.ManagerServlet:void reload(java.io.PrintWriter,org.apache.catalina.util.ContextName,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.ManagerServlet:void printResources(java.io.PrintWriter,java.lang.String,javax.naming.Context,java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.ManagerServlet:void serverinfo(java.io.PrintWriter,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.ManagerServlet:void sessions(java.io.PrintWriter,org.apache.catalina.util.ContextName,int,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.ManagerServlet:void start(java.io.PrintWriter,org.apache.catalina.util.ContextName,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.ManagerServlet:void stop(java.io.PrintWriter,org.apache.catalina.util.ContextName,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.ManagerServlet:void undeploy(java.io.PrintWriter,org.apache.catalina.util.ContextName,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.servlets.DefaultServlet:java.lang.String getReadme(org.apache.catalina.WebResource,java.lang.String)",
            "org.apache.catalina.servlets.DefaultServlet:javax.xml.transform.Source secureXslt(java.io.InputStream)",
            "org.apache.catalina.servlets.WebdavServlet:boolean copyResource(java.util.Hashtable,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.catalina.manager.ManagerServlet:void init()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.GenericServlet:void init(jakarta.servlet.ServletConfig)",
            "org.apache.catalina.manager.HTMLManagerServlet:void init()"
        ]
    },
    "org.apache.catalina.manager.host.HostManagerServlet:void persist(java.io.PrintWriter,org.apache.tomcat.util.res.StringManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.host.HTMLHostManagerServlet:java.lang.String persist(org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.host.HostManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.servlets.DefaultServlet:void init()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.GenericServlet:void init(jakarta.servlet.ServletConfig)",
            "org.apache.catalina.servlets.WebdavServlet:void init()"
        ]
    },
    "org.apache.catalina.servlets.WebdavServlet:javax.xml.parsers.DocumentBuilder getDocumentBuilder()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.WebdavServlet:void doPropfind(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.WebdavServlet:void doMkcol(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.WebdavServlet:void doLock(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.session.FileStore:void clear()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.session.PersistentManagerBase$PrivilegedStoreClear:java.lang.Void run()",
            "org.apache.catalina.session.PersistentManagerBase:void clearStore()"
        ]
    },
    "org.apache.catalina.session.FileStore:org.apache.catalina.Session load(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.session.PersistentManagerBase$PrivilegedStoreLoad:org.apache.catalina.Session run()",
            "org.apache.catalina.session.PersistentManagerBase:org.apache.catalina.Session loadSessionFromStore(java.lang.String)",
            "org.apache.catalina.session.StoreBase:void processExpires()",
            "org.apache.catalina.valves.PersistentValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)"
        ]
    },
    "org.apache.catalina.session.FileStore:void remove(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.session.FileStore:void clear()",
            "org.apache.catalina.session.PersistentManagerBase$PrivilegedStoreRemove:java.lang.Void run()",
            "org.apache.catalina.session.PersistentManagerBase:void removeSession(java.lang.String)",
            "org.apache.catalina.session.StoreBase:void processExpires()",
            "org.apache.catalina.valves.PersistentValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)"
        ]
    },
    "org.apache.catalina.connector.Response:boolean doIsEncodeable(org.apache.catalina.Context,org.apache.catalina.connector.Request,org.apache.catalina.Session,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.Response:boolean isEncodeable(java.lang.String)",
            "org.apache.catalina.connector.Response:boolean access$000(org.apache.catalina.Context,org.apache.catalina.connector.Request,org.apache.catalina.Session,java.lang.String)"
        ]
    },
    "org.apache.catalina.connector.Response:java.lang.String toEncoded(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.Response:java.lang.String encodeRedirectURL(java.lang.String)",
            "org.apache.catalina.connector.Response:java.lang.String encodeURL(java.lang.String)"
        ]
    },
    "org.apache.catalina.authenticator.SingleSignOn:void sessionDestroyed(java.lang.String,org.apache.catalina.Session)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.SingleSignOnListener:void sessionEvent(org.apache.catalina.SessionEvent)"
        ]
    },
    "org.apache.catalina.authenticator.SingleSignOn:void removeSession(java.lang.String,org.apache.catalina.Session)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.SingleSignOn:void sessionDestroyed(java.lang.String,org.apache.catalina.Session)"
        ]
    },
    "org.apache.catalina.session.StandardManager$PrivilegedDoLoad:java.lang.Object run()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.security.auth.message.config.AuthConfigFactory:jakarta.security.auth.message.config.AuthConfigFactory getFactory()",
            "org.apache.catalina.core.ApplicationFilterChain:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)",
            "org.apache.catalina.session.StandardManager:void load()"
        ]
    },
    "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void println(char[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void println(char[])"
        ]
    },
    "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void println(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void println(boolean)"
        ]
    },
    "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void println(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void println(int)"
        ]
    },
    "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void println(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void println(long)"
        ]
    },
    "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void println(float)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void println(float)"
        ]
    },
    "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void println(double)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void println(double)"
        ]
    },
    "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void println(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void println(java.lang.String)",
            "org.apache.catalina.manager.JMXProxyServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.JMXProxyServlet:void getAttribute(java.io.PrintWriter,java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.catalina.manager.JMXProxyServlet:void setAttribute(java.io.PrintWriter,java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.catalina.manager.JMXProxyServlet:void listBeans(java.io.PrintWriter,java.lang.String)",
            "org.apache.catalina.manager.JMXProxyServlet:void invokeOperation(java.io.PrintWriter,java.lang.String,java.lang.String,java.lang.String[])",
            "org.apache.catalina.manager.JMXProxyServlet:void output(java.lang.String,java.io.PrintWriter,java.lang.Object)",
            "org.apache.catalina.manager.ManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.ManagerServlet:void doPut(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.ManagerServlet:void findleaks(boolean,java.io.PrintWriter,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.ManagerServlet:void sslReload(java.io.PrintWriter,java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.ManagerServlet:void vmInfo(java.io.PrintWriter,org.apache.tomcat.util.res.StringManager,java.util.Enumeration)",
            "org.apache.catalina.manager.ManagerServlet:void threadDump(java.io.PrintWriter,org.apache.tomcat.util.res.StringManager,java.util.Enumeration)",
            "org.apache.catalina.manager.ManagerServlet:void sslConnectorCiphers(java.io.PrintWriter,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.ManagerServlet:void sslConnectorCerts(java.io.PrintWriter,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.ManagerServlet:void sslConnectorTrustedCerts(java.io.PrintWriter,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.ManagerServlet:void save(java.io.PrintWriter,java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.ManagerServlet:void deploy(java.io.PrintWriter,java.lang.String,org.apache.catalina.util.ContextName,java.lang.String,boolean,jakarta.servlet.http.HttpServletRequest,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.ManagerServlet:void deploy(java.io.PrintWriter,org.apache.catalina.util.ContextName,java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.ManagerServlet:void deploy(java.io.PrintWriter,java.lang.String,org.apache.catalina.util.ContextName,java.lang.String,boolean,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.ManagerServlet:void writeDeployResult(java.io.PrintWriter,org.apache.tomcat.util.res.StringManager,java.lang.String,java.lang.String)",
            "org.apache.catalina.manager.ManagerServlet:void list(java.io.PrintWriter,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.ManagerServlet:void reload(java.io.PrintWriter,org.apache.catalina.util.ContextName,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.ManagerServlet:void resources(java.io.PrintWriter,java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.ManagerServlet:void printResources(java.io.PrintWriter,java.lang.String,javax.naming.Context,java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.ManagerServlet:void serverinfo(java.io.PrintWriter,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.ManagerServlet:void sessions(java.io.PrintWriter,org.apache.catalina.util.ContextName,int,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.ManagerServlet:void start(java.io.PrintWriter,org.apache.catalina.util.ContextName,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.ManagerServlet:void stop(java.io.PrintWriter,org.apache.catalina.util.ContextName,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.ManagerServlet:void undeploy(java.io.PrintWriter,org.apache.catalina.util.ContextName,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.ManagerServlet:void uploadWar(java.io.PrintWriter,jakarta.servlet.http.HttpServletRequest,java.io.File,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.ManagerServlet:boolean validateContextName(org.apache.catalina.util.ContextName,java.io.PrintWriter,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.host.HostManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.host.HostManagerServlet:void add(java.io.PrintWriter,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean,boolean,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.host.HostManagerServlet:void remove(java.io.PrintWriter,java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.host.HostManagerServlet:void list(java.io.PrintWriter,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.host.HostManagerServlet:void start(java.io.PrintWriter,java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.host.HostManagerServlet:void stop(java.io.PrintWriter,java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.host.HostManagerServlet:void persist(java.io.PrintWriter,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.users.MemoryUserDatabase:void save()",
            "org.apache.catalina.valves.ExtendedAccessLogValve:void open()",
            "org.apache.tomcat.util.http.MimeHeaders:java.lang.String toString()"
        ]
    },
    "org.apache.catalina.manager.JMXProxyServlet:void setAttribute(java.io.PrintWriter,java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.JMXProxyServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.manager.ManagerServlet:void findleaks(boolean,java.io.PrintWriter,org.apache.tomcat.util.res.StringManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.HTMLManagerServlet:java.lang.String findleaks(org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.ManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.manager.ManagerServlet:void sslConnectorCerts(java.io.PrintWriter,org.apache.tomcat.util.res.StringManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.ManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.manager.ManagerServlet:void sslConnectorTrustedCerts(java.io.PrintWriter,org.apache.tomcat.util.res.StringManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.ManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.manager.ManagerServlet:void save(java.io.PrintWriter,java.lang.String,org.apache.tomcat.util.res.StringManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.ManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.manager.ManagerServlet:void deploy(java.io.PrintWriter,org.apache.catalina.util.ContextName,java.lang.String,org.apache.tomcat.util.res.StringManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.ManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.manager.ManagerServlet:void deploy(java.io.PrintWriter,java.lang.String,org.apache.catalina.util.ContextName,java.lang.String,boolean,org.apache.tomcat.util.res.StringManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.HTMLManagerServlet:java.lang.String deployInternal(java.lang.String,org.apache.catalina.util.ContextName,java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.ManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.manager.ManagerServlet:void writeDeployResult(java.io.PrintWriter,org.apache.tomcat.util.res.StringManager,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.ManagerServlet:void deploy(java.io.PrintWriter,java.lang.String,org.apache.catalina.util.ContextName,java.lang.String,boolean,jakarta.servlet.http.HttpServletRequest,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.ManagerServlet:void deploy(java.io.PrintWriter,org.apache.catalina.util.ContextName,java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.ManagerServlet:void deploy(java.io.PrintWriter,java.lang.String,org.apache.catalina.util.ContextName,java.lang.String,boolean,org.apache.tomcat.util.res.StringManager)"
        ]
    },
    "org.apache.catalina.manager.ManagerServlet:void list(java.io.PrintWriter,org.apache.tomcat.util.res.StringManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.ManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.manager.ManagerServlet:boolean validateContextName(org.apache.catalina.util.ContextName,java.io.PrintWriter,org.apache.tomcat.util.res.StringManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.ManagerServlet:void deploy(java.io.PrintWriter,java.lang.String,org.apache.catalina.util.ContextName,java.lang.String,boolean,jakarta.servlet.http.HttpServletRequest,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.ManagerServlet:void deploy(java.io.PrintWriter,org.apache.catalina.util.ContextName,java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.ManagerServlet:void deploy(java.io.PrintWriter,java.lang.String,org.apache.catalina.util.ContextName,java.lang.String,boolean,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.ManagerServlet:void reload(java.io.PrintWriter,org.apache.catalina.util.ContextName,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.ManagerServlet:void sessions(java.io.PrintWriter,org.apache.catalina.util.ContextName,int,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.ManagerServlet:void start(java.io.PrintWriter,org.apache.catalina.util.ContextName,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.ManagerServlet:void stop(java.io.PrintWriter,org.apache.catalina.util.ContextName,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.ManagerServlet:void undeploy(java.io.PrintWriter,org.apache.catalina.util.ContextName,org.apache.tomcat.util.res.StringManager)"
        ]
    },
    "org.apache.catalina.manager.host.HostManagerServlet:void list(java.io.PrintWriter,org.apache.tomcat.util.res.StringManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.host.HostManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void println(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void println(java.lang.Object)",
            "org.apache.catalina.users.MemoryUserDatabase:void save()"
        ]
    },
    "jakarta.security.auth.message.config.AuthConfigFactory$lambda_getFactory_0__1:java.lang.Object run()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.security.auth.message.config.AuthConfigFactory:jakarta.security.auth.message.config.AuthConfigFactory getFactory()",
            "org.apache.catalina.core.ApplicationFilterChain:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)"
        ]
    },
    "org.apache.catalina.core.DefaultInstanceManager$PrivilegedLoadClass:java.lang.Object run()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.security.auth.message.config.AuthConfigFactory:jakarta.security.auth.message.config.AuthConfigFactory getFactory()",
            "org.apache.catalina.core.ApplicationFilterChain:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)",
            "org.apache.catalina.core.DefaultInstanceManager:java.lang.Class loadClassMaybePrivileged(java.lang.String,java.lang.ClassLoader)"
        ]
    },
    "org.apache.catalina.security.SecurityClassLoad:void securityClassLoad(java.lang.ClassLoader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.Bootstrap:void init()",
            "org.apache.catalina.startup.Tomcat:void main(java.lang.String[])"
        ]
    },
    "org.apache.tomcat.util.modeler.BaseModelMBean:java.lang.Object invoke(java.lang.String,java.lang.Object[],java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.modeler.BaseModelMBean:java.lang.Object invoke(java.lang.String,java.lang.Object[],java.lang.String[])"
        ]
    },
    "org.apache.catalina.deploy.NamingResourcesImpl:void addResourceLink(org.apache.tomcat.util.descriptor.web.ContextResourceLink)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.mbeans.ContextResourceLinkMBean:void setAttribute(javax.management.Attribute)",
            "org.apache.catalina.mbeans.NamingResourcesMBean:java.lang.String addResourceLink(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.catalina.mbeans.GlobalResourcesLifecycleListener:void createMBeans(java.lang.String,org.apache.catalina.UserDatabase)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.mbeans.GlobalResourcesLifecycleListener:void createMBeans(java.lang.String,javax.naming.Context)"
        ]
    },
    "org.apache.catalina.mbeans.MemoryUserDatabaseMBean:java.lang.String createGroup(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.mbeans.MemoryUserDatabaseMBean:java.lang.String createRole(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.mbeans.MemoryUserDatabaseMBean:java.lang.String createUser(java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tomcat.util.scan.ReferenceCountedJar:java.util.jar.Manifest getManifest()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.scan.ReferenceCountedJar:java.util.jar.Manifest getManifest()",
            "org.apache.tomcat.util.scan.StandardJarScanner:void processManifest(org.apache.tomcat.Jar,boolean,java.util.Deque)"
        ]
    },
    "org.apache.tomcat.util.scan.StandardJarScanner:void processManifest(org.apache.tomcat.Jar,boolean,java.util.Deque)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.scan.StandardJarScanner:void process(org.apache.tomcat.JarScanType,org.apache.tomcat.JarScannerCallback,java.net.URL,java.lang.String,boolean,java.util.Deque)"
        ]
    },
    "org.apache.tomcat.util.scan.AbstractInputStreamJar:java.io.InputStream getInputStream(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.descriptor.web.FragmentJarScannerCallback:void scan(org.apache.tomcat.Jar,java.lang.String,boolean)",
            "org.apache.tomcat.util.scan.ReferenceCountedJar:java.io.InputStream getInputStream(java.lang.String)"
        ]
    },
    "org.apache.tomcat.util.scan.AbstractInputStreamJar:long getLastModified(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.scan.ReferenceCountedJar:long getLastModified(java.lang.String)"
        ]
    },
    "org.apache.tomcat.util.scan.AbstractInputStreamJar:boolean exists(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.scan.ReferenceCountedJar:boolean exists(java.lang.String)"
        ]
    },
    "jakarta.servlet.ServletResponseWrapper:void setLocale(java.util.Locale)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletResponseWrapper:void setLocale(java.util.Locale)",
            "org.apache.catalina.core.ApplicationHttpResponse:void setLocale(java.util.Locale)",
            "org.apache.catalina.core.ApplicationResponse:void setLocale(java.util.Locale)"
        ]
    },
    "org.apache.catalina.connector.ResponseFacade:void setLocale(java.util.Locale)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletResponseWrapper:void setLocale(java.util.Locale)",
            "org.apache.catalina.core.ApplicationHttpResponse:void setLocale(java.util.Locale)",
            "org.apache.catalina.core.ApplicationResponse:void setLocale(java.util.Locale)"
        ]
    },
    "org.apache.catalina.core.ApplicationHttpResponse:void setLocale(java.util.Locale)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletResponseWrapper:void setLocale(java.util.Locale)",
            "org.apache.catalina.core.ApplicationHttpResponse:void setLocale(java.util.Locale)",
            "org.apache.catalina.core.ApplicationResponse:void setLocale(java.util.Locale)"
        ]
    },
    "org.apache.catalina.core.ApplicationResponse:void setLocale(java.util.Locale)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.ServletResponseWrapper:void setLocale(java.util.Locale)",
            "org.apache.catalina.core.ApplicationHttpResponse:void setLocale(java.util.Locale)",
            "org.apache.catalina.core.ApplicationResponse:void setLocale(java.util.Locale)"
        ]
    },
    "org.apache.tomcat.util.scan.StandardJarScanner:void doScanClassPath(org.apache.tomcat.JarScanType,jakarta.servlet.ServletContext,org.apache.tomcat.JarScannerCallback,java.util.Set)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.scan.StandardJarScanner:void scan(org.apache.tomcat.JarScanType,jakarta.servlet.ServletContext,org.apache.tomcat.JarScannerCallback)"
        ]
    },
    "org.apache.catalina.security.SecurityUtil:void doAsPrivilege(java.lang.String,jakarta.servlet.Filter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.ApplicationFilterConfig:void release()"
        ]
    },
    "org.apache.catalina.filters.CsrfPreventionFilter$CsrfResponseWrapper:java.lang.String encodeRedirectUrl(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletResponseWrapper:java.lang.String encodeRedirectUrl(java.lang.String)"
        ]
    },
    "org.apache.catalina.filters.CsrfPreventionFilter$CsrfResponseWrapper:java.lang.String encodeUrl(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletResponseWrapper:java.lang.String encodeUrl(java.lang.String)"
        ]
    },
    "org.apache.juli.AsyncFileHandler:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.Integer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.juli.AsyncFileHandler:void <init>(java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.juli.FileHandler:void <init>(java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.juli.FileHandler:void <init>()"
        ]
    },
    "org.apache.catalina.loader.ParallelWebappClassLoader:java.lang.ClassLoader copyWithoutTransformers()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.loader.WebappClassLoader:java.lang.ClassLoader copyWithoutTransformers()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.core.ApplicationContextFacade:java.lang.String getRealPath(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.Request:java.lang.String getRealPath(java.lang.String)",
            "org.apache.catalina.connector.Request:java.lang.String getPathTranslated()",
            "org.apache.catalina.core.ApplicationHttpRequest:java.lang.String getPathTranslated()",
            "org.apache.catalina.core.StandardContext$NoPluggabilityServletContext:java.lang.String getRealPath(java.lang.String)",
            "org.apache.catalina.servlets.CGIServlet$CGIEnvironment:void setupFromContext(jakarta.servlet.ServletContext)",
            "org.apache.catalina.servlets.CGIServlet$CGIEnvironment:boolean setCGIEnvironment(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.servlets.CGIServlet:void printServletEnvironment(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.valves.rewrite.ResolverImpl:java.lang.String resolve(java.lang.String)"
        ]
    },
    "org.apache.catalina.core.StandardContext$NoPluggabilityServletContext:java.lang.String getRealPath(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.Request:java.lang.String getRealPath(java.lang.String)",
            "org.apache.catalina.connector.Request:java.lang.String getPathTranslated()",
            "org.apache.catalina.core.ApplicationHttpRequest:java.lang.String getPathTranslated()",
            "org.apache.catalina.core.StandardContext$NoPluggabilityServletContext:java.lang.String getRealPath(java.lang.String)",
            "org.apache.catalina.servlets.CGIServlet$CGIEnvironment:void setupFromContext(jakarta.servlet.ServletContext)",
            "org.apache.catalina.servlets.CGIServlet$CGIEnvironment:boolean setCGIEnvironment(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.servlets.CGIServlet:void printServletEnvironment(jakarta.servlet.http.HttpServletRequest)",
            "org.apache.catalina.valves.rewrite.ResolverImpl:java.lang.String resolve(java.lang.String)"
        ]
    },
    "org.apache.catalina.servlets.CGIServlet$CGIEnvironment:void setupFromContext(jakarta.servlet.ServletContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.CGIServlet$CGIEnvironment:void <init>(org.apache.catalina.servlets.CGIServlet,jakarta.servlet.http.HttpServletRequest,jakarta.servlet.ServletContext)"
        ]
    },
    "org.apache.tomcat.util.IntrospectionUtils:java.lang.String getProperty(java.lang.String,java.util.Hashtable,org.apache.tomcat.util.IntrospectionUtils$PropertySource[],java.lang.ClassLoader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.IntrospectionUtils:java.lang.String replaceProperties(java.lang.String,java.util.Hashtable,org.apache.tomcat.util.IntrospectionUtils$PropertySource[],java.lang.ClassLoader,int)"
        ]
    },
    "org.apache.tomcat.util.digester.Digester$SystemPropertySource:java.lang.String getProperty(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.IntrospectionUtils:java.lang.String getProperty(java.lang.String,java.util.Hashtable,org.apache.tomcat.util.IntrospectionUtils$PropertySource[],java.lang.ClassLoader)"
        ]
    },
    "org.apache.catalina.core.ApplicationContext:jakarta.servlet.RequestDispatcher getRequestDispatcher(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.FormAuthenticator:void forwardToLoginPage(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.descriptor.web.LoginConfig)",
            "org.apache.catalina.authenticator.FormAuthenticator:void forwardToErrorPage(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.descriptor.web.LoginConfig)",
            "org.apache.catalina.connector.Request:jakarta.servlet.RequestDispatcher getRequestDispatcher(java.lang.String)",
            "org.apache.catalina.core.ApplicationContextFacade:jakarta.servlet.RequestDispatcher getRequestDispatcher(java.lang.String)",
            "org.apache.catalina.core.ApplicationHttpRequest:jakarta.servlet.RequestDispatcher getRequestDispatcher(java.lang.String)",
            "org.apache.catalina.core.AsyncContextImpl:void dispatch(jakarta.servlet.ServletContext,java.lang.String)",
            "org.apache.catalina.core.StandardContext$NoPluggabilityServletContext:jakarta.servlet.RequestDispatcher getRequestDispatcher(java.lang.String)",
            "org.apache.catalina.core.StandardHostValve:boolean custom(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,org.apache.tomcat.util.descriptor.web.ErrorPage)",
            "org.apache.catalina.manager.HTMLManagerServlet:void sslConnectorCiphers(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.HTMLManagerServlet:void sslConnectorCerts(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.HTMLManagerServlet:void sslConnectorTrustedCerts(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.HTMLManagerServlet:void displaySessionsListPage(org.apache.catalina.util.ContextName,jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.HTMLManagerServlet:void displaySessionDetailPage(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.catalina.util.ContextName,java.lang.String,org.apache.tomcat.util.res.StringManager)"
        ]
    },
    "org.apache.catalina.mapper.Mapper:void map(org.apache.tomcat.util.buf.MessageBytes,org.apache.tomcat.util.buf.MessageBytes,java.lang.String,org.apache.catalina.mapper.MappingData)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.CoyoteAdapter:boolean postParseRequest(org.apache.coyote.Request,org.apache.catalina.connector.Request,org.apache.coyote.Response,org.apache.catalina.connector.Response)",
            "org.apache.catalina.core.ApplicationContext:jakarta.servlet.ServletContext getContext(java.lang.String)"
        ]
    },
    "org.apache.catalina.loader.WebappClassLoaderBase$PrivilegedHasLoggingConfig:java.lang.Object run()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.security.auth.message.config.AuthConfigFactory:java.lang.String getFactoryClassName()",
            "jakarta.servlet.http.Cookie:void <clinit>()",
            "org.apache.catalina.loader.WebappClassLoaderBase:boolean hasLoggingConfig()",
            "org.apache.catalina.startup.ClassLoaderFactory:java.lang.ClassLoader createClassLoader(java.io.File[],java.io.File[],java.lang.ClassLoader)",
            "org.apache.catalina.startup.ClassLoaderFactory:java.lang.ClassLoader createClassLoader(java.util.List,java.lang.ClassLoader)",
            "org.apache.catalina.util.Introspection:java.lang.reflect.Field[] getDeclaredFields(java.lang.Class)",
            "org.apache.catalina.util.Introspection:java.lang.reflect.Method[] getDeclaredMethods(java.lang.Class)",
            "org.apache.juli.ClassLoaderLogManager:boolean addLogger(java.util.logging.Logger)",
            "org.apache.juli.ClassLoaderLogManager:org.apache.juli.ClassLoaderLogManager$ClassLoaderLogInfo getClassLoaderInfo(java.lang.ClassLoader)",
            "org.apache.juli.ClassLoaderLogManager:void doSetParentLogger(java.util.logging.Logger,java.util.logging.Logger)",
            "org.apache.juli.FileHandler$1:java.lang.Thread newThread(java.lang.Runnable)",
            "org.apache.naming.factory.MailSessionFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.naming.factory.SendMailFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.tomcat.util.compat.JrePlatform:void <clinit>()"
        ]
    },
    "org.apache.catalina.loader.WebappClassLoaderBase$PrivilegedJavaseGetResource:java.net.URL run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.loader.WebappClassLoaderBase$PrivilegedJavaseGetResource:java.lang.Object run()"
        ]
    },
    "org.apache.catalina.realm.JAASRealm:javax.security.auth.login.Configuration getConfig()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.realm.JAASRealm:java.security.Principal authenticate(java.lang.String,javax.security.auth.callback.CallbackHandler)"
        ]
    },
    "org.apache.catalina.startup.CatalinaBaseConfigurationSource:java.net.URI getURI(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.users.MemoryUserDatabase:void backgroundProcess()",
            "org.apache.tomcat.util.net.SSLUtilBase:java.security.KeyStore getStore(java.lang.String,java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.catalina.webresources.ClasspathURLStreamHandler:java.net.URLConnection openConnection(java.net.URL)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.coyote.http2.Http2Protocol:org.apache.coyote.Processor getProcessor(org.apache.tomcat.util.net.SocketWrapperBase,org.apache.coyote.Adapter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProtocol$ConnectionHandler:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState process(org.apache.tomcat.util.net.SocketWrapperBase,org.apache.tomcat.util.net.SocketEvent)"
        ]
    },
    "org.apache.coyote.http2.Http2AsyncUpgradeHandler:void reprioritise(int,int,boolean,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2Parser:void readHeadersFrame(int,int,int,java.nio.ByteBuffer)",
            "org.apache.coyote.http2.Http2Parser:void readPriorityFrame(int,java.nio.ByteBuffer)"
        ]
    },
    "org.apache.coyote.http2.Http2Parser:void readPriorityFrame(int,java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2AsyncParser$FrameCompletionHandler:void completed(java.lang.Long,java.lang.Void)",
            "org.apache.coyote.http2.Http2Parser:boolean readFrame(boolean,org.apache.coyote.http2.FrameType)"
        ]
    },
    "org.apache.coyote.http2.StreamProcessor:boolean isReadyForRead()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProcessor:void action(org.apache.coyote.ActionCode,java.lang.Object)"
        ]
    },
    "org.apache.coyote.http2.Stream$StreamInputBuffer:java.nio.ByteBuffer access$300(org.apache.coyote.http2.Stream$StreamInputBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Stream:java.nio.ByteBuffer getInputByteBuffer()"
        ]
    },
    "org.apache.coyote.http2.StreamProcessor:boolean isReadyForWrite()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProcessor:void action(org.apache.coyote.ActionCode,java.lang.Object)"
        ]
    },
    "org.apache.coyote.http2.Http2AsyncUpgradeHandler:java.nio.ByteBuffer startRequestBodyFrame(int,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2Parser:void readDataFrame(int,int,int,java.nio.ByteBuffer)"
        ]
    },
    "org.apache.coyote.http2.Http2AsyncUpgradeHandler:void receivedEndOfStream(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2Parser:void readDataFrame(int,int,int,java.nio.ByteBuffer)",
            "org.apache.coyote.http2.Http2Parser:void onHeadersComplete(int)"
        ]
    },
    "org.apache.coyote.http11.AbstractHttp11Protocol:org.apache.coyote.Processor createUpgradeProcessor(org.apache.tomcat.util.net.SocketWrapperBase,org.apache.coyote.UpgradeToken)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProtocol$ConnectionHandler:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState process(org.apache.tomcat.util.net.SocketWrapperBase,org.apache.tomcat.util.net.SocketEvent)"
        ]
    },
    "org.apache.catalina.deploy.NamingResourcesImpl:void removeEnvironment(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.deploy.NamingResourcesImpl:void addEnvironment(org.apache.tomcat.util.descriptor.web.ContextEnvironment)",
            "org.apache.catalina.mbeans.ContextEnvironmentMBean:void setAttribute(javax.management.Attribute)",
            "org.apache.catalina.mbeans.NamingResourcesMBean:void removeEnvironment(java.lang.String)"
        ]
    },
    "org.apache.catalina.deploy.NamingResourcesImpl:void removeResource(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.mbeans.ContextResourceMBean:void setAttribute(javax.management.Attribute)",
            "org.apache.catalina.mbeans.NamingResourcesMBean:void removeResource(java.lang.String)"
        ]
    },
    "org.apache.catalina.deploy.NamingResourcesImpl:void removeResourceLink(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.deploy.NamingResourcesImpl:void addEnvironment(org.apache.tomcat.util.descriptor.web.ContextEnvironment)",
            "org.apache.catalina.mbeans.ContextResourceLinkMBean:void setAttribute(javax.management.Attribute)",
            "org.apache.catalina.mbeans.NamingResourcesMBean:void removeResourceLink(java.lang.String)"
        ]
    },
    "org.apache.catalina.deploy.NamingResourcesImpl:void destroyInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.util.LifecycleBase:void destroy()"
        ]
    },
    "org.apache.catalina.mbeans.GroupMBean:java.lang.String[] getRoles()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.mbeans.GroupMBean:java.lang.String[] getUsers()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.mbeans.MBeanFactory:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.StandardServer:void initInternal()",
            "org.apache.catalina.mbeans.MBeanFactory:org.apache.catalina.Service getService(javax.management.ObjectName)",
            "org.apache.catalina.mbeans.MBeanFactory:java.lang.String createStandardContext(java.lang.String,java.lang.String,java.lang.String,boolean,boolean)",
            "org.apache.catalina.mbeans.MBeanFactory:java.lang.String createStandardServiceEngine(java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.catalina.mbeans.MBeanFactory:java.lang.String createStandardManager(java.lang.String)",
            "org.apache.catalina.mbeans.MBeanFactory:void removeContext(java.lang.String)",
            "org.apache.catalina.mbeans.MBeanFactory:void <clinit>()"
        ]
    },
    "org.apache.catalina.mbeans.MBeanUtils:java.lang.String createManagedName(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.mbeans.MBeanUtils:javax.management.DynamicMBean createMBean(org.apache.tomcat.util.descriptor.web.ContextEnvironment)",
            "org.apache.catalina.mbeans.MBeanUtils:javax.management.DynamicMBean createMBean(org.apache.tomcat.util.descriptor.web.ContextResource)",
            "org.apache.catalina.mbeans.MBeanUtils:javax.management.DynamicMBean createMBean(org.apache.tomcat.util.descriptor.web.ContextResourceLink)",
            "org.apache.catalina.mbeans.MBeanUtils:javax.management.DynamicMBean createMBean(org.apache.catalina.Group)",
            "org.apache.catalina.mbeans.MBeanUtils:javax.management.DynamicMBean createMBean(org.apache.catalina.Role)",
            "org.apache.catalina.mbeans.MBeanUtils:javax.management.DynamicMBean createMBean(org.apache.catalina.User)",
            "org.apache.catalina.mbeans.MBeanUtils:javax.management.DynamicMBean createMBean(org.apache.catalina.UserDatabase)",
            "org.apache.catalina.mbeans.MBeanUtils:void destroyMBean(org.apache.tomcat.util.descriptor.web.ContextEnvironment)",
            "org.apache.catalina.mbeans.MBeanUtils:void destroyMBean(org.apache.tomcat.util.descriptor.web.ContextResource)",
            "org.apache.catalina.mbeans.MBeanUtils:void destroyMBean(org.apache.tomcat.util.descriptor.web.ContextResourceLink)",
            "org.apache.catalina.mbeans.MBeanUtils:void destroyMBean(org.apache.catalina.Group)",
            "org.apache.catalina.mbeans.MBeanUtils:void destroyMBean(org.apache.catalina.Role)",
            "org.apache.catalina.mbeans.MBeanUtils:void destroyMBean(org.apache.catalina.User)"
        ]
    },
    "org.apache.catalina.mbeans.MBeanUtils:javax.management.MBeanServer createServer()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.mbeans.MBeanFactory:void <clinit>()",
            "org.apache.catalina.mbeans.MBeanUtils:void <clinit>()"
        ]
    },
    "org.apache.catalina.mbeans.MBeanUtils:void destroyMBean(org.apache.tomcat.util.descriptor.web.ContextEnvironment)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.deploy.NamingResourcesImpl:void removeEnvironment(java.lang.String)",
            "org.apache.catalina.deploy.NamingResourcesImpl:void destroyInternal()"
        ]
    },
    "org.apache.catalina.mbeans.MBeanUtils:void destroyMBean(org.apache.tomcat.util.descriptor.web.ContextResource)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.deploy.NamingResourcesImpl:void removeResource(java.lang.String)",
            "org.apache.catalina.deploy.NamingResourcesImpl:void destroyInternal()"
        ]
    },
    "org.apache.catalina.mbeans.MBeanUtils:void destroyMBean(org.apache.tomcat.util.descriptor.web.ContextResourceLink)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.deploy.NamingResourcesImpl:void removeResourceLink(java.lang.String)",
            "org.apache.catalina.deploy.NamingResourcesImpl:void destroyInternal()"
        ]
    },
    "org.apache.catalina.mbeans.MBeanUtils:void destroyMBean(org.apache.catalina.Group)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.mbeans.MemoryUserDatabaseMBean:void removeGroup(java.lang.String)"
        ]
    },
    "org.apache.catalina.mbeans.MBeanUtils:void destroyMBean(org.apache.catalina.Role)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.mbeans.MemoryUserDatabaseMBean:void removeRole(java.lang.String)"
        ]
    },
    "org.apache.catalina.mbeans.MBeanUtils:void destroyMBean(org.apache.catalina.User)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.mbeans.MemoryUserDatabaseMBean:void removeUser(java.lang.String)"
        ]
    },
    "org.apache.catalina.mbeans.MBeanUtils:void destroyMBeanUserDatabase(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.mbeans.MBeanUtils:void destroyMBean(org.apache.tomcat.util.descriptor.web.ContextResource)"
        ]
    },
    "org.apache.catalina.mbeans.MemoryUserDatabaseMBean:java.lang.String findGroup(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.mbeans.MemoryUserDatabaseMBean:java.lang.String[] getGroups()",
            "org.apache.catalina.mbeans.MemoryUserDatabaseMBean:java.lang.String createGroup(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.catalina.mbeans.MemoryUserDatabaseMBean:java.lang.String findRole(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.mbeans.MemoryUserDatabaseMBean:java.lang.String[] getRoles()",
            "org.apache.catalina.mbeans.MemoryUserDatabaseMBean:java.lang.String createRole(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.catalina.mbeans.MemoryUserDatabaseMBean:java.lang.String findUser(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.mbeans.MemoryUserDatabaseMBean:java.lang.String[] getUsers()",
            "org.apache.catalina.mbeans.MemoryUserDatabaseMBean:java.lang.String createUser(java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.catalina.mbeans.MemoryUserDatabaseMBean:void removeGroup(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.mbeans.MemoryUserDatabaseMBean:void removeRole(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.mbeans.MemoryUserDatabaseMBean:void removeUser(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.mbeans.NamingResourcesMBean:java.lang.String[] getEnvironments()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.mbeans.NamingResourcesMBean:java.lang.String[] getResources()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.mbeans.NamingResourcesMBean:java.lang.String[] getResourceLinks()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.mbeans.NamingResourcesMBean:java.lang.String addResourceLink(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.mbeans.UserMBean:java.lang.String[] getGroups()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.mbeans.UserMBean:java.lang.String[] getRoles()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.manager.HTMLManagerServlet:java.lang.String sslReload(java.lang.String,org.apache.tomcat.util.res.StringManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.HTMLManagerServlet:void doPost(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.filters.AddDefaultCharsetFilter$ResponseWrapper:void setHeader(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServlet:void doOptions(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "jakarta.servlet.http.HttpServletResponseWrapper:void setHeader(java.lang.String,java.lang.String)",
            "org.apache.catalina.authenticator.AuthenticatorBase:void register(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse,java.security.Principal,java.lang.String,java.lang.String,java.lang.String,boolean,boolean)",
            "org.apache.catalina.authenticator.BasicAuthenticator:boolean doAuthenticate(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.authenticator.DigestAuthenticator:void setAuthenticateHeader(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,java.lang.String,boolean)",
            "org.apache.catalina.authenticator.SpnegoAuthenticator:boolean doAuthenticate(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.core.ApplicationHttpResponse:void setHeader(java.lang.String,java.lang.String)",
            "org.apache.catalina.filters.HttpHeaderSecurityFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.manager.HTMLManagerServlet:void displaySessionsListPage(org.apache.catalina.util.ContextName,jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.HTMLManagerServlet:void displaySessionDetailPage(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.catalina.util.ContextName,java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.JMXProxyServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.ManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.ManagerServlet:void doPut(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.host.HostManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.CGIServlet:void doOptions(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.DefaultServlet:void doOptions(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.DefaultServlet:void serveResource(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,boolean,java.lang.String)",
            "org.apache.catalina.servlets.DefaultServlet:boolean checkIfModifiedSince(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.catalina.WebResource)",
            "org.apache.catalina.servlets.DefaultServlet:boolean checkIfNoneMatch(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.catalina.WebResource)",
            "org.apache.tomcat.util.http.ResponseUtil$ResponseAdapter:void setHeader(java.lang.String,java.lang.String)",
            "org.apache.catalina.filters.RestCsrfPreventionFilter$RestCsrfPreventionStrategy$setHeader__36:void setNonce(java.lang.Object,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.catalina.filters.AddDefaultCharsetFilter$ResponseWrapper:void addHeader(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletResponseWrapper:void addHeader(java.lang.String,java.lang.String)",
            "org.apache.catalina.core.ApplicationHttpResponse:void addHeader(java.lang.String,java.lang.String)",
            "org.apache.catalina.filters.CorsFilter:void addStandardHeaders(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.CGIServlet$CGIRunner:void run()",
            "org.apache.catalina.servlets.DefaultServlet:void sendNotAllowed(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.DefaultServlet:void serveResource(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,boolean,java.lang.String)",
            "org.apache.catalina.servlets.DefaultServlet:org.apache.tomcat.util.http.parser.Ranges parseRange(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.catalina.WebResource)",
            "org.apache.catalina.servlets.WebdavServlet:void doOptions(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.WebdavServlet:void doLock(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.tomcat.util.http.ResponseUtil$ResponseAdapter:void addHeader(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.catalina.connector.Response:void addCookie(jakarta.servlet.http.Cookie)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletResponseWrapper:void addCookie(jakarta.servlet.http.Cookie)",
            "org.apache.catalina.authenticator.AuthenticatorBase:void register(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse,java.security.Principal,java.lang.String,java.lang.String,java.lang.String,boolean,boolean)",
            "org.apache.catalina.authenticator.SingleSignOn:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.connector.ResponseFacade:void addCookie(jakarta.servlet.http.Cookie)",
            "org.apache.catalina.core.ApplicationHttpResponse:void addCookie(jakarta.servlet.http.Cookie)",
            "org.apache.catalina.valves.LoadBalancerDrainingValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.valves.rewrite.RewriteValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)"
        ]
    },
    "org.apache.catalina.connector.Response:void addHeader(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletResponseWrapper:void addHeader(java.lang.String,java.lang.String)",
            "org.apache.catalina.connector.CoyoteAdapter:void service(org.apache.coyote.Request,org.apache.coyote.Response)",
            "org.apache.catalina.connector.Response:void addSessionCookieInternal(jakarta.servlet.http.Cookie)",
            "org.apache.catalina.connector.Response:void addDateHeader(java.lang.String,long)",
            "org.apache.catalina.connector.Response:void addIntHeader(java.lang.String,int)",
            "org.apache.catalina.connector.ResponseFacade:void addHeader(java.lang.String,java.lang.String)",
            "org.apache.catalina.core.ApplicationHttpResponse:void addHeader(java.lang.String,java.lang.String)",
            "org.apache.catalina.filters.CorsFilter:void addStandardHeaders(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.CGIServlet$CGIRunner:void run()",
            "org.apache.catalina.servlets.DefaultServlet:void sendNotAllowed(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.DefaultServlet:void serveResource(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,boolean,java.lang.String)",
            "org.apache.catalina.servlets.DefaultServlet:org.apache.tomcat.util.http.parser.Ranges parseRange(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.catalina.WebResource)",
            "org.apache.catalina.servlets.WebdavServlet:void doOptions(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.WebdavServlet:void doLock(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.tomcat.util.http.ResponseUtil$ResponseAdapter:void addHeader(java.lang.String,java.lang.String)"
        ]
    },
    "jakarta.servlet.http.HttpServlet:void doOptions(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServlet:void service(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "jakarta.servlet.http.HttpServletResponseWrapper:void setHeader(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServlet:void doOptions(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "jakarta.servlet.http.HttpServletResponseWrapper:void setHeader(java.lang.String,java.lang.String)",
            "jakarta.servlet.http.NoBodyResponse:void setHeader(java.lang.String,java.lang.String)",
            "org.apache.catalina.authenticator.AuthenticatorBase:void register(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse,java.security.Principal,java.lang.String,java.lang.String,java.lang.String,boolean,boolean)",
            "org.apache.catalina.authenticator.BasicAuthenticator:boolean doAuthenticate(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.authenticator.DigestAuthenticator:void setAuthenticateHeader(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,java.lang.String,boolean)",
            "org.apache.catalina.authenticator.SpnegoAuthenticator:boolean doAuthenticate(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.core.ApplicationHttpResponse:void setHeader(java.lang.String,java.lang.String)",
            "org.apache.catalina.filters.AddDefaultCharsetFilter$ResponseWrapper:void setHeader(java.lang.String,java.lang.String)",
            "org.apache.catalina.filters.ExpiresFilter$XHttpServletResponse:void setHeader(java.lang.String,java.lang.String)",
            "org.apache.catalina.filters.HttpHeaderSecurityFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.manager.HTMLManagerServlet:void displaySessionsListPage(org.apache.catalina.util.ContextName,jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.HTMLManagerServlet:void displaySessionDetailPage(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.catalina.util.ContextName,java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.JMXProxyServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.ManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.ManagerServlet:void doPut(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.host.HostManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.CGIServlet:void doOptions(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.DefaultServlet:void doOptions(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.DefaultServlet:void serveResource(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,boolean,java.lang.String)",
            "org.apache.catalina.servlets.DefaultServlet:boolean checkIfModifiedSince(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.catalina.WebResource)",
            "org.apache.catalina.servlets.DefaultServlet:boolean checkIfNoneMatch(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.catalina.WebResource)",
            "org.apache.tomcat.util.http.ResponseUtil$ResponseAdapter:void setHeader(java.lang.String,java.lang.String)",
            "org.apache.catalina.filters.RestCsrfPreventionFilter$RestCsrfPreventionStrategy$setHeader__36:void setNonce(java.lang.Object,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.catalina.authenticator.DigestAuthenticator:void setAuthenticateHeader(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.DigestAuthenticator:boolean doAuthenticate(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.connector.Response:void setDateHeader(java.lang.String,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServlet:void maybeSetLastModified(jakarta.servlet.http.HttpServletResponse,long)",
            "jakarta.servlet.http.HttpServletResponseWrapper:void setDateHeader(java.lang.String,long)",
            "org.apache.catalina.connector.ResponseFacade$DateHeaderPrivilegedAction:java.lang.Void run()",
            "org.apache.catalina.connector.ResponseFacade:void setDateHeader(java.lang.String,long)",
            "org.apache.catalina.core.ApplicationDispatcher:void invoke(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,org.apache.catalina.core.ApplicationDispatcher$State)",
            "org.apache.catalina.core.ApplicationHttpResponse:void setDateHeader(java.lang.String,long)",
            "org.apache.catalina.core.StandardWrapperValve:void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)",
            "org.apache.catalina.manager.HTMLManagerServlet:void displaySessionsListPage(org.apache.catalina.util.ContextName,jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.HTMLManagerServlet:void displaySessionDetailPage(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.catalina.util.ContextName,java.lang.String,org.apache.tomcat.util.res.StringManager)"
        ]
    },
    "org.apache.catalina.connector.Response:void setIntHeader(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletResponseWrapper:void setIntHeader(java.lang.String,int)",
            "org.apache.catalina.connector.ResponseFacade:void setIntHeader(java.lang.String,int)",
            "org.apache.catalina.core.ApplicationHttpResponse:void setIntHeader(java.lang.String,int)"
        ]
    },
    "org.apache.catalina.connector.ResponseFacade:void setHeader(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServlet:void doOptions(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "jakarta.servlet.http.HttpServletResponseWrapper:void setHeader(java.lang.String,java.lang.String)",
            "org.apache.catalina.authenticator.AuthenticatorBase:void register(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse,java.security.Principal,java.lang.String,java.lang.String,java.lang.String,boolean,boolean)",
            "org.apache.catalina.authenticator.BasicAuthenticator:boolean doAuthenticate(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.authenticator.DigestAuthenticator:void setAuthenticateHeader(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,java.lang.String,boolean)",
            "org.apache.catalina.authenticator.SpnegoAuthenticator:boolean doAuthenticate(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.core.ApplicationHttpResponse:void setHeader(java.lang.String,java.lang.String)",
            "org.apache.catalina.filters.HttpHeaderSecurityFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.manager.HTMLManagerServlet:void displaySessionsListPage(org.apache.catalina.util.ContextName,jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.HTMLManagerServlet:void displaySessionDetailPage(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.catalina.util.ContextName,java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.JMXProxyServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.ManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.ManagerServlet:void doPut(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.host.HostManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.CGIServlet:void doOptions(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.DefaultServlet:void doOptions(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.DefaultServlet:void serveResource(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,boolean,java.lang.String)",
            "org.apache.catalina.servlets.DefaultServlet:boolean checkIfModifiedSince(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.catalina.WebResource)",
            "org.apache.catalina.servlets.DefaultServlet:boolean checkIfNoneMatch(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.catalina.WebResource)",
            "org.apache.tomcat.util.http.ResponseUtil$ResponseAdapter:void setHeader(java.lang.String,java.lang.String)",
            "org.apache.catalina.filters.RestCsrfPreventionFilter$RestCsrfPreventionStrategy$setHeader__36:void setNonce(java.lang.Object,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.catalina.core.ApplicationHttpResponse:void setHeader(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServlet:void doOptions(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "jakarta.servlet.http.HttpServletResponseWrapper:void setHeader(java.lang.String,java.lang.String)",
            "org.apache.catalina.authenticator.AuthenticatorBase:void register(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse,java.security.Principal,java.lang.String,java.lang.String,java.lang.String,boolean,boolean)",
            "org.apache.catalina.authenticator.BasicAuthenticator:boolean doAuthenticate(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.authenticator.DigestAuthenticator:void setAuthenticateHeader(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,java.lang.String,boolean)",
            "org.apache.catalina.authenticator.SpnegoAuthenticator:boolean doAuthenticate(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.core.ApplicationHttpResponse:void setHeader(java.lang.String,java.lang.String)",
            "org.apache.catalina.filters.HttpHeaderSecurityFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.manager.HTMLManagerServlet:void displaySessionsListPage(org.apache.catalina.util.ContextName,jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.HTMLManagerServlet:void displaySessionDetailPage(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.catalina.util.ContextName,java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.JMXProxyServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.ManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.ManagerServlet:void doPut(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.host.HostManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.CGIServlet:void doOptions(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.DefaultServlet:void doOptions(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.DefaultServlet:void serveResource(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,boolean,java.lang.String)",
            "org.apache.catalina.servlets.DefaultServlet:boolean checkIfModifiedSince(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.catalina.WebResource)",
            "org.apache.catalina.servlets.DefaultServlet:boolean checkIfNoneMatch(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.catalina.WebResource)",
            "org.apache.tomcat.util.http.ResponseUtil$ResponseAdapter:void setHeader(java.lang.String,java.lang.String)",
            "org.apache.catalina.filters.RestCsrfPreventionFilter$RestCsrfPreventionStrategy$setHeader__36:void setNonce(java.lang.Object,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.catalina.servlets.DefaultServlet:boolean checkIfModifiedSince(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.catalina.WebResource)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.servlets.DefaultServlet:boolean checkIfHeaders(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.catalina.WebResource)"
        ]
    },
    "org.apache.tomcat.util.http.ResponseUtil$ResponseAdapter:void setHeader(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.ResponseUtil:void addVaryFieldName(org.apache.tomcat.util.http.ResponseUtil$Adapter,java.lang.String)"
        ]
    },
    "org.apache.catalina.filters.RestCsrfPreventionFilter$RestCsrfPreventionStrategy$setHeader__36:void setNonce(java.lang.Object,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.RestCsrfPreventionFilter$FetchRequest:boolean apply(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.filters.RestCsrfPreventionFilter$StateChangingRequest:boolean apply(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void fireBeforeWriteResponseBodyEvent()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:java.io.PrintWriter append(char)",
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:java.io.PrintWriter append(java.lang.CharSequence)",
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:java.io.PrintWriter append(java.lang.CharSequence,int,int)",
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void close()",
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void flush()",
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void print(boolean)",
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void print(char)",
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void print(char[])",
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void print(double)",
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void print(float)",
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void print(int)",
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void print(long)",
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void print(java.lang.Object)",
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void print(java.lang.String)",
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:java.io.PrintWriter printf(java.util.Locale,java.lang.String,java.lang.Object[])",
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:java.io.PrintWriter printf(java.lang.String,java.lang.Object[])",
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void println()",
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void println(boolean)",
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void println(char)",
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void println(char[])",
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void println(double)",
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void println(float)",
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void println(int)",
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void println(long)",
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void println(java.lang.Object)",
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void println(java.lang.String)",
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void write(char[])",
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void write(char[],int,int)",
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void write(int)",
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void write(java.lang.String)",
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:void write(java.lang.String,int,int)"
        ]
    },
    "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream:void fireOnBeforeWriteResponseBodyEvent()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream:void close()",
            "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream:void flush()",
            "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream:void print(boolean)",
            "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream:void print(char)",
            "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream:void print(double)",
            "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream:void print(float)",
            "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream:void print(int)",
            "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream:void print(long)",
            "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream:void print(java.lang.String)",
            "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream:void println()",
            "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream:void println(boolean)",
            "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream:void println(char)",
            "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream:void println(double)",
            "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream:void println(float)",
            "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream:void println(int)",
            "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream:void println(long)",
            "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream:void println(java.lang.String)",
            "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream:void write(byte[])",
            "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream:void write(byte[],int,int)",
            "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream:void write(int)"
        ]
    },
    "org.apache.catalina.manager.ManagerServlet:void setWrapper(org.apache.catalina.Wrapper)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.StandardWrapper:jakarta.servlet.Servlet loadServlet()"
        ]
    },
    "jakarta.servlet.GenericServlet:void init(jakarta.servlet.ServletConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.StandardWrapper:void initServlet(jakarta.servlet.Servlet)",
            "org.apache.catalina.servlets.CGIServlet:void init(jakarta.servlet.ServletConfig)",
            "org.apache.catalina.startup.Tomcat$ExistingStandardWrapper:jakarta.servlet.Servlet loadServlet()"
        ]
    },
    "org.apache.catalina.manager.HTMLManagerServlet:void init()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.GenericServlet:void init(jakarta.servlet.ServletConfig)"
        ]
    },
    "org.apache.catalina.manager.host.HTMLHostManagerServlet:java.lang.String persist(org.apache.tomcat.util.res.StringManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.host.HTMLHostManagerServlet:void doPost(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.servlets.WebdavServlet:void init()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.GenericServlet:void init(jakarta.servlet.ServletConfig)"
        ]
    },
    "org.apache.catalina.connector.Response:boolean access$000(org.apache.catalina.Context,org.apache.catalina.connector.Request,org.apache.catalina.Session,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.Response$PrivilegedDoIsEncodable:java.lang.Boolean run()"
        ]
    },
    "org.apache.catalina.authenticator.SingleSignOnListener:void sessionEvent(org.apache.catalina.SessionEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.session.StandardSession:void fireSessionEvent(java.lang.String,java.lang.Object)"
        ]
    },
    "org.apache.catalina.manager.HTMLManagerServlet:java.lang.String findleaks(org.apache.tomcat.util.res.StringManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.HTMLManagerServlet:void doPost(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.manager.HTMLManagerServlet:java.lang.String deployInternal(java.lang.String,org.apache.catalina.util.ContextName,java.lang.String,org.apache.tomcat.util.res.StringManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.HTMLManagerServlet:void doPost(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.catalina.mbeans.ContextResourceLinkMBean:void setAttribute(javax.management.Attribute)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.modeler.BaseModelMBean:void setAttribute(javax.management.Attribute)",
            "org.apache.tomcat.util.modeler.BaseModelMBean:javax.management.AttributeList setAttributes(javax.management.AttributeList)"
        ]
    },
    "org.apache.tomcat.util.scan.ReferenceCountedJar:java.io.InputStream getInputStream(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.descriptor.web.FragmentJarScannerCallback:void scan(org.apache.tomcat.Jar,java.lang.String,boolean)",
            "org.apache.tomcat.util.scan.ReferenceCountedJar:java.io.InputStream getInputStream(java.lang.String)"
        ]
    },
    "org.apache.tomcat.util.scan.ReferenceCountedJar:long getLastModified(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.scan.ReferenceCountedJar:long getLastModified(java.lang.String)"
        ]
    },
    "org.apache.tomcat.util.scan.ReferenceCountedJar:boolean exists(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.scan.ReferenceCountedJar:boolean exists(java.lang.String)"
        ]
    },
    "org.apache.catalina.core.ApplicationFilterConfig:void release()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.StandardContext:boolean filterStop()"
        ]
    },
    "org.apache.juli.AsyncFileHandler:void <init>(java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.juli.AsyncFileHandler:void <init>()"
        ]
    },
    "org.apache.juli.FileHandler:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tomcat.util.IntrospectionUtils:java.lang.String replaceProperties(java.lang.String,java.util.Hashtable,org.apache.tomcat.util.IntrospectionUtils$PropertySource[],java.lang.ClassLoader,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.IntrospectionUtils:java.lang.String replaceProperties(java.lang.String,java.util.Hashtable,org.apache.tomcat.util.IntrospectionUtils$PropertySource[],java.lang.ClassLoader)",
            "org.apache.tomcat.util.IntrospectionUtils:java.lang.String replaceProperties(java.lang.String,java.util.Hashtable,org.apache.tomcat.util.IntrospectionUtils$PropertySource[],java.lang.ClassLoader,int)"
        ]
    },
    "org.apache.catalina.core.ApplicationContextFacade:jakarta.servlet.RequestDispatcher getRequestDispatcher(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.FormAuthenticator:void forwardToLoginPage(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.descriptor.web.LoginConfig)",
            "org.apache.catalina.authenticator.FormAuthenticator:void forwardToErrorPage(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.descriptor.web.LoginConfig)",
            "org.apache.catalina.connector.Request:jakarta.servlet.RequestDispatcher getRequestDispatcher(java.lang.String)",
            "org.apache.catalina.core.ApplicationHttpRequest:jakarta.servlet.RequestDispatcher getRequestDispatcher(java.lang.String)",
            "org.apache.catalina.core.AsyncContextImpl:void dispatch(jakarta.servlet.ServletContext,java.lang.String)",
            "org.apache.catalina.core.StandardContext$NoPluggabilityServletContext:jakarta.servlet.RequestDispatcher getRequestDispatcher(java.lang.String)",
            "org.apache.catalina.core.StandardHostValve:boolean custom(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,org.apache.tomcat.util.descriptor.web.ErrorPage)",
            "org.apache.catalina.manager.HTMLManagerServlet:void sslConnectorCiphers(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.HTMLManagerServlet:void sslConnectorCerts(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.HTMLManagerServlet:void sslConnectorTrustedCerts(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.HTMLManagerServlet:void displaySessionsListPage(org.apache.catalina.util.ContextName,jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.HTMLManagerServlet:void displaySessionDetailPage(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.catalina.util.ContextName,java.lang.String,org.apache.tomcat.util.res.StringManager)"
        ]
    },
    "org.apache.catalina.core.StandardContext$NoPluggabilityServletContext:jakarta.servlet.RequestDispatcher getRequestDispatcher(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.FormAuthenticator:void forwardToLoginPage(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.descriptor.web.LoginConfig)",
            "org.apache.catalina.authenticator.FormAuthenticator:void forwardToErrorPage(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.descriptor.web.LoginConfig)",
            "org.apache.catalina.connector.Request:jakarta.servlet.RequestDispatcher getRequestDispatcher(java.lang.String)",
            "org.apache.catalina.core.ApplicationHttpRequest:jakarta.servlet.RequestDispatcher getRequestDispatcher(java.lang.String)",
            "org.apache.catalina.core.AsyncContextImpl:void dispatch(jakarta.servlet.ServletContext,java.lang.String)",
            "org.apache.catalina.core.StandardContext$NoPluggabilityServletContext:jakarta.servlet.RequestDispatcher getRequestDispatcher(java.lang.String)",
            "org.apache.catalina.core.StandardHostValve:boolean custom(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,org.apache.tomcat.util.descriptor.web.ErrorPage)",
            "org.apache.catalina.manager.HTMLManagerServlet:void sslConnectorCiphers(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.HTMLManagerServlet:void sslConnectorCerts(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.HTMLManagerServlet:void sslConnectorTrustedCerts(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.HTMLManagerServlet:void displaySessionsListPage(org.apache.catalina.util.ContextName,jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.HTMLManagerServlet:void displaySessionDetailPage(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.catalina.util.ContextName,java.lang.String,org.apache.tomcat.util.res.StringManager)"
        ]
    },
    "org.apache.catalina.loader.WebappClassLoaderBase$PrivilegedJavaseGetResource:java.lang.Object run()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.security.auth.message.config.AuthConfigFactory:java.lang.String getFactoryClassName()",
            "jakarta.servlet.http.Cookie:void <clinit>()",
            "org.apache.catalina.loader.WebappClassLoaderBase:java.lang.Class loadClass(java.lang.String,boolean)",
            "org.apache.catalina.startup.ClassLoaderFactory:java.lang.ClassLoader createClassLoader(java.io.File[],java.io.File[],java.lang.ClassLoader)",
            "org.apache.catalina.startup.ClassLoaderFactory:java.lang.ClassLoader createClassLoader(java.util.List,java.lang.ClassLoader)",
            "org.apache.catalina.util.Introspection:java.lang.reflect.Field[] getDeclaredFields(java.lang.Class)",
            "org.apache.catalina.util.Introspection:java.lang.reflect.Method[] getDeclaredMethods(java.lang.Class)",
            "org.apache.juli.ClassLoaderLogManager:boolean addLogger(java.util.logging.Logger)",
            "org.apache.juli.ClassLoaderLogManager:org.apache.juli.ClassLoaderLogManager$ClassLoaderLogInfo getClassLoaderInfo(java.lang.ClassLoader)",
            "org.apache.juli.ClassLoaderLogManager:void doSetParentLogger(java.util.logging.Logger,java.util.logging.Logger)",
            "org.apache.juli.FileHandler$1:java.lang.Thread newThread(java.lang.Runnable)",
            "org.apache.naming.factory.MailSessionFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.naming.factory.SendMailFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.tomcat.util.compat.JrePlatform:void <clinit>()"
        ]
    },
    "org.apache.catalina.realm.JAASRealm:java.security.Principal authenticate(java.lang.String,javax.security.auth.callback.CallbackHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.realm.JAASRealm:java.security.Principal authenticate(java.lang.String,java.lang.String)",
            "org.apache.catalina.realm.JAASRealm:java.security.Principal authenticate(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.catalina.realm.JAASRealm:java.security.Principal getPrincipal(java.lang.String)"
        ]
    },
    "org.apache.catalina.mbeans.NamingResourcesMBean:void removeEnvironment(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.mbeans.NamingResourcesMBean:void removeResource(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.mbeans.NamingResourcesMBean:void removeResourceLink(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.mbeans.MBeanFactory:org.apache.catalina.Service getService(javax.management.ObjectName)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.mbeans.MBeanFactory:org.apache.catalina.Container getParentContainerFromParent(javax.management.ObjectName)",
            "org.apache.catalina.mbeans.MBeanFactory:org.apache.catalina.Container getParentContainerFromChild(javax.management.ObjectName)",
            "org.apache.catalina.mbeans.MBeanFactory:java.lang.String createConnector(java.lang.String,java.lang.String,int,boolean,boolean)",
            "org.apache.catalina.mbeans.MBeanFactory:java.lang.String createStandardContext(java.lang.String,java.lang.String,java.lang.String,boolean,boolean)",
            "org.apache.catalina.mbeans.MBeanFactory:java.lang.String createStandardHost(java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)",
            "org.apache.catalina.mbeans.MBeanFactory:void removeConnector(java.lang.String)",
            "org.apache.catalina.mbeans.MBeanFactory:void removeContext(java.lang.String)",
            "org.apache.catalina.mbeans.MBeanFactory:void removeHost(java.lang.String)",
            "org.apache.catalina.mbeans.MBeanFactory:void removeService(java.lang.String)"
        ]
    },
    "org.apache.catalina.mbeans.MemoryUserDatabaseMBean:java.lang.String[] getGroups()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.mbeans.MemoryUserDatabaseMBean:java.lang.String[] getRoles()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.mbeans.MemoryUserDatabaseMBean:java.lang.String[] getUsers()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jakarta.servlet.http.HttpServletResponseWrapper:void addHeader(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletResponseWrapper:void addHeader(java.lang.String,java.lang.String)",
            "jakarta.servlet.http.NoBodyResponse:void addHeader(java.lang.String,java.lang.String)",
            "org.apache.catalina.core.ApplicationHttpResponse:void addHeader(java.lang.String,java.lang.String)",
            "org.apache.catalina.filters.AddDefaultCharsetFilter$ResponseWrapper:void addHeader(java.lang.String,java.lang.String)",
            "org.apache.catalina.filters.CorsFilter:void addStandardHeaders(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.filters.ExpiresFilter$XHttpServletResponse:void addHeader(java.lang.String,java.lang.String)",
            "org.apache.catalina.servlets.CGIServlet$CGIRunner:void run()",
            "org.apache.catalina.servlets.DefaultServlet:void sendNotAllowed(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.DefaultServlet:void serveResource(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,boolean,java.lang.String)",
            "org.apache.catalina.servlets.DefaultServlet:org.apache.tomcat.util.http.parser.Ranges parseRange(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.catalina.WebResource)",
            "org.apache.catalina.servlets.WebdavServlet:void doOptions(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.WebdavServlet:void doLock(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.tomcat.util.http.ResponseUtil$ResponseAdapter:void addHeader(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.catalina.core.ApplicationHttpResponse:void addHeader(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletResponseWrapper:void addHeader(java.lang.String,java.lang.String)",
            "org.apache.catalina.core.ApplicationHttpResponse:void addHeader(java.lang.String,java.lang.String)",
            "org.apache.catalina.filters.CorsFilter:void addStandardHeaders(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.CGIServlet$CGIRunner:void run()",
            "org.apache.catalina.servlets.DefaultServlet:void sendNotAllowed(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.DefaultServlet:void serveResource(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,boolean,java.lang.String)",
            "org.apache.catalina.servlets.DefaultServlet:org.apache.tomcat.util.http.parser.Ranges parseRange(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.catalina.WebResource)",
            "org.apache.catalina.servlets.WebdavServlet:void doOptions(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.WebdavServlet:void doLock(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.tomcat.util.http.ResponseUtil$ResponseAdapter:void addHeader(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.tomcat.util.http.ResponseUtil$ResponseAdapter:void addHeader(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.ResponseUtil:void addVaryFieldName(org.apache.tomcat.util.http.ResponseUtil$Adapter,java.lang.String)"
        ]
    },
    "jakarta.servlet.http.HttpServletResponseWrapper:void addCookie(jakarta.servlet.http.Cookie)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletResponseWrapper:void addCookie(jakarta.servlet.http.Cookie)",
            "org.apache.catalina.authenticator.AuthenticatorBase:void register(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse,java.security.Principal,java.lang.String,java.lang.String,java.lang.String,boolean,boolean)",
            "org.apache.catalina.core.ApplicationHttpResponse:void addCookie(jakarta.servlet.http.Cookie)"
        ]
    },
    "org.apache.catalina.connector.ResponseFacade:void addCookie(jakarta.servlet.http.Cookie)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletResponseWrapper:void addCookie(jakarta.servlet.http.Cookie)",
            "org.apache.catalina.authenticator.AuthenticatorBase:void register(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse,java.security.Principal,java.lang.String,java.lang.String,java.lang.String,boolean,boolean)",
            "org.apache.catalina.core.ApplicationHttpResponse:void addCookie(jakarta.servlet.http.Cookie)"
        ]
    },
    "org.apache.catalina.core.ApplicationHttpResponse:void addCookie(jakarta.servlet.http.Cookie)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletResponseWrapper:void addCookie(jakarta.servlet.http.Cookie)",
            "org.apache.catalina.authenticator.AuthenticatorBase:void register(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse,java.security.Principal,java.lang.String,java.lang.String,java.lang.String,boolean,boolean)",
            "org.apache.catalina.core.ApplicationHttpResponse:void addCookie(jakarta.servlet.http.Cookie)"
        ]
    },
    "org.apache.catalina.connector.Response:void addSessionCookieInternal(jakarta.servlet.http.Cookie)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.Request:void changeSessionId(java.lang.String)",
            "org.apache.catalina.connector.Request:org.apache.catalina.Session doGetSession(boolean)"
        ]
    },
    "org.apache.catalina.connector.Response:void addDateHeader(java.lang.String,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletResponseWrapper:void addDateHeader(java.lang.String,long)",
            "org.apache.catalina.connector.ResponseFacade$DateHeaderPrivilegedAction:java.lang.Void run()",
            "org.apache.catalina.connector.ResponseFacade:void addDateHeader(java.lang.String,long)",
            "org.apache.catalina.core.ApplicationHttpResponse:void addDateHeader(java.lang.String,long)"
        ]
    },
    "org.apache.catalina.connector.Response:void addIntHeader(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletResponseWrapper:void addIntHeader(java.lang.String,int)",
            "org.apache.catalina.connector.ResponseFacade:void addIntHeader(java.lang.String,int)",
            "org.apache.catalina.core.ApplicationHttpResponse:void addIntHeader(java.lang.String,int)"
        ]
    },
    "org.apache.catalina.connector.ResponseFacade:void addHeader(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletResponseWrapper:void addHeader(java.lang.String,java.lang.String)",
            "org.apache.catalina.core.ApplicationHttpResponse:void addHeader(java.lang.String,java.lang.String)",
            "org.apache.catalina.filters.CorsFilter:void addStandardHeaders(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.CGIServlet$CGIRunner:void run()",
            "org.apache.catalina.servlets.DefaultServlet:void sendNotAllowed(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.DefaultServlet:void serveResource(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,boolean,java.lang.String)",
            "org.apache.catalina.servlets.DefaultServlet:org.apache.tomcat.util.http.parser.Ranges parseRange(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.catalina.WebResource)",
            "org.apache.catalina.servlets.WebdavServlet:void doOptions(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.WebdavServlet:void doLock(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.tomcat.util.http.ResponseUtil$ResponseAdapter:void addHeader(java.lang.String,java.lang.String)"
        ]
    },
    "jakarta.servlet.http.NoBodyResponse:void setHeader(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServlet:void doOptions(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "jakarta.servlet.http.HttpServletResponseWrapper:void setHeader(java.lang.String,java.lang.String)",
            "org.apache.catalina.authenticator.AuthenticatorBase:void register(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse,java.security.Principal,java.lang.String,java.lang.String,java.lang.String,boolean,boolean)",
            "org.apache.catalina.authenticator.BasicAuthenticator:boolean doAuthenticate(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.authenticator.DigestAuthenticator:void setAuthenticateHeader(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,java.lang.String,boolean)",
            "org.apache.catalina.authenticator.SpnegoAuthenticator:boolean doAuthenticate(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.core.ApplicationHttpResponse:void setHeader(java.lang.String,java.lang.String)",
            "org.apache.catalina.filters.HttpHeaderSecurityFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.manager.HTMLManagerServlet:void displaySessionsListPage(org.apache.catalina.util.ContextName,jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.HTMLManagerServlet:void displaySessionDetailPage(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.catalina.util.ContextName,java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.JMXProxyServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.ManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.ManagerServlet:void doPut(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.host.HostManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.CGIServlet:void doOptions(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.DefaultServlet:void doOptions(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.DefaultServlet:void serveResource(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,boolean,java.lang.String)",
            "org.apache.catalina.servlets.DefaultServlet:boolean checkIfModifiedSince(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.catalina.WebResource)",
            "org.apache.catalina.servlets.DefaultServlet:boolean checkIfNoneMatch(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.catalina.WebResource)",
            "org.apache.tomcat.util.http.ResponseUtil$ResponseAdapter:void setHeader(java.lang.String,java.lang.String)",
            "org.apache.catalina.filters.RestCsrfPreventionFilter$RestCsrfPreventionStrategy$setHeader__36:void setNonce(java.lang.Object,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.catalina.filters.ExpiresFilter$XHttpServletResponse:void setHeader(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServlet:void doOptions(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "jakarta.servlet.http.HttpServletResponseWrapper:void setHeader(java.lang.String,java.lang.String)",
            "org.apache.catalina.authenticator.AuthenticatorBase:void register(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse,java.security.Principal,java.lang.String,java.lang.String,java.lang.String,boolean,boolean)",
            "org.apache.catalina.authenticator.BasicAuthenticator:boolean doAuthenticate(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.authenticator.DigestAuthenticator:void setAuthenticateHeader(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,java.lang.String,boolean)",
            "org.apache.catalina.authenticator.SpnegoAuthenticator:boolean doAuthenticate(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.core.ApplicationHttpResponse:void setHeader(java.lang.String,java.lang.String)",
            "org.apache.catalina.filters.ExpiresFilter:void onBeforeWriteResponseBody(jakarta.servlet.http.HttpServletRequest,org.apache.catalina.filters.ExpiresFilter$XHttpServletResponse)",
            "org.apache.catalina.filters.HttpHeaderSecurityFilter:void doFilter(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,jakarta.servlet.FilterChain)",
            "org.apache.catalina.manager.HTMLManagerServlet:void displaySessionsListPage(org.apache.catalina.util.ContextName,jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.HTMLManagerServlet:void displaySessionDetailPage(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.catalina.util.ContextName,java.lang.String,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.JMXProxyServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.ManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.ManagerServlet:void doPut(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.manager.host.HostManagerServlet:void doGet(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.CGIServlet:void doOptions(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.DefaultServlet:void doOptions(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.DefaultServlet:void serveResource(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,boolean,java.lang.String)",
            "org.apache.catalina.servlets.DefaultServlet:boolean checkIfModifiedSince(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.catalina.WebResource)",
            "org.apache.catalina.servlets.DefaultServlet:boolean checkIfNoneMatch(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.catalina.WebResource)",
            "org.apache.tomcat.util.http.ResponseUtil$ResponseAdapter:void setHeader(java.lang.String,java.lang.String)",
            "org.apache.catalina.filters.RestCsrfPreventionFilter$RestCsrfPreventionStrategy$setHeader__36:void setNonce(java.lang.Object,java.lang.String,java.lang.String)"
        ]
    },
    "jakarta.servlet.http.HttpServlet:void maybeSetLastModified(jakarta.servlet.http.HttpServletResponse,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServlet:void service(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)"
        ]
    },
    "jakarta.servlet.http.HttpServletResponseWrapper:void setDateHeader(java.lang.String,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServlet:void maybeSetLastModified(jakarta.servlet.http.HttpServletResponse,long)",
            "jakarta.servlet.http.HttpServletResponseWrapper:void setDateHeader(java.lang.String,long)",
            "org.apache.catalina.core.ApplicationDispatcher:void invoke(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,org.apache.catalina.core.ApplicationDispatcher$State)",
            "org.apache.catalina.core.ApplicationHttpResponse:void setDateHeader(java.lang.String,long)",
            "org.apache.catalina.filters.ExpiresFilter$XHttpServletResponse:void setDateHeader(java.lang.String,long)",
            "org.apache.catalina.manager.HTMLManagerServlet:void displaySessionsListPage(org.apache.catalina.util.ContextName,jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.HTMLManagerServlet:void displaySessionDetailPage(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.catalina.util.ContextName,java.lang.String,org.apache.tomcat.util.res.StringManager)"
        ]
    },
    "org.apache.catalina.connector.ResponseFacade$DateHeaderPrivilegedAction:java.lang.Void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.ResponseFacade$DateHeaderPrivilegedAction:java.lang.Object run()"
        ]
    },
    "org.apache.catalina.connector.ResponseFacade:void setDateHeader(java.lang.String,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServlet:void maybeSetLastModified(jakarta.servlet.http.HttpServletResponse,long)",
            "jakarta.servlet.http.HttpServletResponseWrapper:void setDateHeader(java.lang.String,long)",
            "org.apache.catalina.core.ApplicationDispatcher:void invoke(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,org.apache.catalina.core.ApplicationDispatcher$State)",
            "org.apache.catalina.core.ApplicationHttpResponse:void setDateHeader(java.lang.String,long)",
            "org.apache.catalina.manager.HTMLManagerServlet:void displaySessionsListPage(org.apache.catalina.util.ContextName,jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.HTMLManagerServlet:void displaySessionDetailPage(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.catalina.util.ContextName,java.lang.String,org.apache.tomcat.util.res.StringManager)"
        ]
    },
    "org.apache.catalina.core.ApplicationHttpResponse:void setDateHeader(java.lang.String,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServlet:void maybeSetLastModified(jakarta.servlet.http.HttpServletResponse,long)",
            "jakarta.servlet.http.HttpServletResponseWrapper:void setDateHeader(java.lang.String,long)",
            "org.apache.catalina.core.ApplicationDispatcher:void invoke(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,org.apache.catalina.core.ApplicationDispatcher$State)",
            "org.apache.catalina.core.ApplicationHttpResponse:void setDateHeader(java.lang.String,long)",
            "org.apache.catalina.manager.HTMLManagerServlet:void displaySessionsListPage(org.apache.catalina.util.ContextName,jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.HTMLManagerServlet:void displaySessionDetailPage(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.catalina.util.ContextName,java.lang.String,org.apache.tomcat.util.res.StringManager)"
        ]
    },
    "jakarta.servlet.http.HttpServletResponseWrapper:void setIntHeader(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletResponseWrapper:void setIntHeader(java.lang.String,int)",
            "jakarta.servlet.http.NoBodyResponse:void setIntHeader(java.lang.String,int)",
            "org.apache.catalina.core.ApplicationHttpResponse:void setIntHeader(java.lang.String,int)"
        ]
    },
    "org.apache.catalina.connector.ResponseFacade:void setIntHeader(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletResponseWrapper:void setIntHeader(java.lang.String,int)",
            "org.apache.catalina.core.ApplicationHttpResponse:void setIntHeader(java.lang.String,int)"
        ]
    },
    "org.apache.catalina.core.ApplicationHttpResponse:void setIntHeader(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletResponseWrapper:void setIntHeader(java.lang.String,int)",
            "org.apache.catalina.core.ApplicationHttpResponse:void setIntHeader(java.lang.String,int)"
        ]
    },
    "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:java.io.PrintWriter append(char)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:java.io.PrintWriter append(char)",
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:java.io.Writer append(char)",
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:java.lang.Appendable append(char)"
        ]
    },
    "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:java.io.PrintWriter append(java.lang.CharSequence)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:java.io.PrintWriter append(java.lang.CharSequence)",
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:java.io.Writer append(java.lang.CharSequence)",
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:java.lang.Appendable append(java.lang.CharSequence)"
        ]
    },
    "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:java.io.PrintWriter append(java.lang.CharSequence,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:java.io.PrintWriter append(java.lang.CharSequence,int,int)",
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:java.io.Writer append(java.lang.CharSequence,int,int)",
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:java.lang.Appendable append(java.lang.CharSequence,int,int)"
        ]
    },
    "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:java.io.PrintWriter printf(java.util.Locale,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:java.io.PrintWriter printf(java.util.Locale,java.lang.String,java.lang.Object[])"
        ]
    },
    "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:java.io.PrintWriter printf(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:java.io.PrintWriter printf(java.lang.String,java.lang.Object[])"
        ]
    },
    "org.apache.catalina.connector.Response$PrivilegedDoIsEncodable:java.lang.Boolean run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.connector.Response$PrivilegedDoIsEncodable:java.lang.Object run()"
        ]
    },
    "org.apache.catalina.session.StandardSession:void fireSessionEvent(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.session.StandardSession:void tellNew()",
            "org.apache.catalina.session.StandardSession:void expire(boolean)",
            "org.apache.catalina.session.StandardSession:void passivate()",
            "org.apache.catalina.session.StandardSession:void activate()"
        ]
    },
    "org.apache.catalina.core.StandardContext:boolean filterStop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.core.StandardContext:void stopInternal()"
        ]
    },
    "org.apache.juli.AsyncFileHandler:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tomcat.util.IntrospectionUtils:java.lang.String replaceProperties(java.lang.String,java.util.Hashtable,org.apache.tomcat.util.IntrospectionUtils$PropertySource[],java.lang.ClassLoader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.digester.Digester$EntityResolverWrapper:java.lang.String replace(java.lang.String)",
            "org.apache.tomcat.util.digester.Digester:void replaceSystemProperties()",
            "org.apache.tomcat.util.digester.Digester:org.xml.sax.Attributes updateAttributes(org.xml.sax.Attributes)",
            "org.apache.tomcat.util.digester.Digester:java.lang.StringBuilder updateBodyText(java.lang.StringBuilder)"
        ]
    },
    "org.apache.catalina.realm.JAASRealm:java.security.Principal authenticate(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.AuthenticatorBase:java.security.Principal doLogin(org.apache.catalina.connector.Request,java.lang.String,java.lang.String)",
            "org.apache.catalina.authenticator.BasicAuthenticator:boolean doAuthenticate(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.authenticator.FormAuthenticator:boolean doAuthenticate(org.apache.catalina.connector.Request,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.authenticator.SingleSignOn:boolean reauthenticate(java.lang.String,org.apache.catalina.Realm,org.apache.catalina.connector.Request)",
            "org.apache.catalina.authenticator.jaspic.CallbackHandlerImpl:void handle(javax.security.auth.callback.Callback[])",
            "org.apache.catalina.realm.CombinedRealm:java.security.Principal authenticate(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.catalina.realm.JAASRealm:java.security.Principal authenticate(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.DigestAuthenticator$DigestInfo:java.security.Principal authenticate(org.apache.catalina.Realm)",
            "org.apache.catalina.realm.CombinedRealm:java.security.Principal authenticate(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.catalina.realm.JAASRealm:java.security.Principal getPrincipal(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.realm.RealmBase:java.security.Principal authenticate(java.lang.String)",
            "org.apache.catalina.realm.RealmBase:java.security.Principal authenticate(java.lang.String,java.lang.String)",
            "org.apache.catalina.realm.RealmBase:java.security.Principal authenticate(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.catalina.realm.RealmBase:java.security.Principal getPrincipal(java.security.cert.X509Certificate)",
            "org.apache.catalina.realm.RealmBase:java.security.Principal getPrincipal(org.ietf.jgss.GSSName,org.ietf.jgss.GSSCredential)"
        ]
    },
    "org.apache.catalina.mbeans.MBeanFactory:org.apache.catalina.Container getParentContainerFromParent(javax.management.ObjectName)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.mbeans.MBeanFactory:java.lang.String addRealmToParent(java.lang.String,org.apache.catalina.Realm)",
            "org.apache.catalina.mbeans.MBeanFactory:java.lang.String createStandardManager(java.lang.String)",
            "org.apache.catalina.mbeans.MBeanFactory:java.lang.String createValve(java.lang.String,java.lang.String)",
            "org.apache.catalina.mbeans.MBeanFactory:java.lang.String createWebappLoader(java.lang.String)"
        ]
    },
    "org.apache.catalina.mbeans.MBeanFactory:org.apache.catalina.Container getParentContainerFromChild(javax.management.ObjectName)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.mbeans.MBeanFactory:void removeLoader(java.lang.String)",
            "org.apache.catalina.mbeans.MBeanFactory:void removeManager(java.lang.String)",
            "org.apache.catalina.mbeans.MBeanFactory:void removeRealm(java.lang.String)",
            "org.apache.catalina.mbeans.MBeanFactory:void removeValve(java.lang.String)"
        ]
    },
    "jakarta.servlet.http.NoBodyResponse:void addHeader(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletResponseWrapper:void addHeader(java.lang.String,java.lang.String)",
            "org.apache.catalina.core.ApplicationHttpResponse:void addHeader(java.lang.String,java.lang.String)",
            "org.apache.catalina.filters.CorsFilter:void addStandardHeaders(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.CGIServlet$CGIRunner:void run()",
            "org.apache.catalina.servlets.DefaultServlet:void sendNotAllowed(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.DefaultServlet:void serveResource(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,boolean,java.lang.String)",
            "org.apache.catalina.servlets.DefaultServlet:org.apache.tomcat.util.http.parser.Ranges parseRange(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.catalina.WebResource)",
            "org.apache.catalina.servlets.WebdavServlet:void doOptions(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.WebdavServlet:void doLock(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.tomcat.util.http.ResponseUtil$ResponseAdapter:void addHeader(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.catalina.filters.ExpiresFilter$XHttpServletResponse:void addHeader(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletResponseWrapper:void addHeader(java.lang.String,java.lang.String)",
            "org.apache.catalina.core.ApplicationHttpResponse:void addHeader(java.lang.String,java.lang.String)",
            "org.apache.catalina.filters.CorsFilter:void addStandardHeaders(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.CGIServlet$CGIRunner:void run()",
            "org.apache.catalina.servlets.DefaultServlet:void sendNotAllowed(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.DefaultServlet:void serveResource(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,boolean,java.lang.String)",
            "org.apache.catalina.servlets.DefaultServlet:org.apache.tomcat.util.http.parser.Ranges parseRange(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.catalina.WebResource)",
            "org.apache.catalina.servlets.WebdavServlet:void doOptions(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.catalina.servlets.WebdavServlet:void doLock(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
            "org.apache.tomcat.util.http.ResponseUtil$ResponseAdapter:void addHeader(java.lang.String,java.lang.String)"
        ]
    },
    "jakarta.servlet.http.HttpServletResponseWrapper:void addDateHeader(java.lang.String,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletResponseWrapper:void addDateHeader(java.lang.String,long)",
            "org.apache.catalina.core.ApplicationHttpResponse:void addDateHeader(java.lang.String,long)",
            "org.apache.catalina.filters.ExpiresFilter$XHttpServletResponse:void addDateHeader(java.lang.String,long)"
        ]
    },
    "org.apache.catalina.connector.ResponseFacade:void addDateHeader(java.lang.String,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletResponseWrapper:void addDateHeader(java.lang.String,long)",
            "org.apache.catalina.core.ApplicationHttpResponse:void addDateHeader(java.lang.String,long)"
        ]
    },
    "org.apache.catalina.core.ApplicationHttpResponse:void addDateHeader(java.lang.String,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletResponseWrapper:void addDateHeader(java.lang.String,long)",
            "org.apache.catalina.core.ApplicationHttpResponse:void addDateHeader(java.lang.String,long)"
        ]
    },
    "jakarta.servlet.http.HttpServletResponseWrapper:void addIntHeader(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletResponseWrapper:void addIntHeader(java.lang.String,int)",
            "jakarta.servlet.http.NoBodyResponse:void addIntHeader(java.lang.String,int)",
            "org.apache.catalina.core.ApplicationHttpResponse:void addIntHeader(java.lang.String,int)"
        ]
    },
    "org.apache.catalina.connector.ResponseFacade:void addIntHeader(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletResponseWrapper:void addIntHeader(java.lang.String,int)",
            "org.apache.catalina.core.ApplicationHttpResponse:void addIntHeader(java.lang.String,int)"
        ]
    },
    "org.apache.catalina.core.ApplicationHttpResponse:void addIntHeader(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletResponseWrapper:void addIntHeader(java.lang.String,int)",
            "org.apache.catalina.core.ApplicationHttpResponse:void addIntHeader(java.lang.String,int)"
        ]
    },
    "org.apache.catalina.filters.ExpiresFilter$XHttpServletResponse:void setDateHeader(java.lang.String,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServlet:void maybeSetLastModified(jakarta.servlet.http.HttpServletResponse,long)",
            "jakarta.servlet.http.HttpServletResponseWrapper:void setDateHeader(java.lang.String,long)",
            "org.apache.catalina.core.ApplicationDispatcher:void invoke(jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse,org.apache.catalina.core.ApplicationDispatcher$State)",
            "org.apache.catalina.core.ApplicationHttpResponse:void setDateHeader(java.lang.String,long)",
            "org.apache.catalina.filters.ExpiresFilter:void onBeforeWriteResponseBody(jakarta.servlet.http.HttpServletRequest,org.apache.catalina.filters.ExpiresFilter$XHttpServletResponse)",
            "org.apache.catalina.manager.HTMLManagerServlet:void displaySessionsListPage(org.apache.catalina.util.ContextName,jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.manager.HTMLManagerServlet:void displaySessionDetailPage(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.apache.catalina.util.ContextName,java.lang.String,org.apache.tomcat.util.res.StringManager)"
        ]
    },
    "org.apache.catalina.connector.ResponseFacade$DateHeaderPrivilegedAction:java.lang.Object run()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.security.auth.message.config.AuthConfigFactory:java.lang.String getFactoryClassName()",
            "jakarta.servlet.http.Cookie:void <clinit>()",
            "org.apache.catalina.connector.ResponseFacade:void setDateHeader(java.lang.String,long)",
            "org.apache.catalina.connector.ResponseFacade:void addDateHeader(java.lang.String,long)",
            "org.apache.catalina.startup.ClassLoaderFactory:java.lang.ClassLoader createClassLoader(java.io.File[],java.io.File[],java.lang.ClassLoader)",
            "org.apache.catalina.startup.ClassLoaderFactory:java.lang.ClassLoader createClassLoader(java.util.List,java.lang.ClassLoader)",
            "org.apache.catalina.util.Introspection:java.lang.reflect.Field[] getDeclaredFields(java.lang.Class)",
            "org.apache.catalina.util.Introspection:java.lang.reflect.Method[] getDeclaredMethods(java.lang.Class)",
            "org.apache.juli.ClassLoaderLogManager:boolean addLogger(java.util.logging.Logger)",
            "org.apache.juli.ClassLoaderLogManager:org.apache.juli.ClassLoaderLogManager$ClassLoaderLogInfo getClassLoaderInfo(java.lang.ClassLoader)",
            "org.apache.juli.ClassLoaderLogManager:void doSetParentLogger(java.util.logging.Logger,java.util.logging.Logger)",
            "org.apache.juli.FileHandler$1:java.lang.Thread newThread(java.lang.Runnable)",
            "org.apache.naming.factory.MailSessionFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.naming.factory.SendMailFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.tomcat.util.compat.JrePlatform:void <clinit>()"
        ]
    },
    "jakarta.servlet.http.NoBodyResponse:void setIntHeader(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletResponseWrapper:void setIntHeader(java.lang.String,int)",
            "org.apache.catalina.core.ApplicationHttpResponse:void setIntHeader(java.lang.String,int)"
        ]
    },
    "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:java.io.Writer append(char)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:java.lang.Appendable append(char)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:java.io.Writer append(java.lang.CharSequence)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:java.lang.Appendable append(java.lang.CharSequence)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:java.io.Writer append(java.lang.CharSequence,int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.filters.ExpiresFilter$XPrintWriter:java.lang.Appendable append(java.lang.CharSequence,int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.catalina.connector.Response$PrivilegedDoIsEncodable:java.lang.Object run()": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.security.auth.message.config.AuthConfigFactory:java.lang.String getFactoryClassName()",
            "jakarta.servlet.http.Cookie:void <clinit>()",
            "org.apache.catalina.connector.Response:boolean isEncodeable(java.lang.String)",
            "org.apache.catalina.startup.ClassLoaderFactory:java.lang.ClassLoader createClassLoader(java.io.File[],java.io.File[],java.lang.ClassLoader)",
            "org.apache.catalina.startup.ClassLoaderFactory:java.lang.ClassLoader createClassLoader(java.util.List,java.lang.ClassLoader)",
            "org.apache.catalina.util.Introspection:java.lang.reflect.Field[] getDeclaredFields(java.lang.Class)",
            "org.apache.catalina.util.Introspection:java.lang.reflect.Method[] getDeclaredMethods(java.lang.Class)",
            "org.apache.juli.ClassLoaderLogManager:boolean addLogger(java.util.logging.Logger)",
            "org.apache.juli.ClassLoaderLogManager:org.apache.juli.ClassLoaderLogManager$ClassLoaderLogInfo getClassLoaderInfo(java.lang.ClassLoader)",
            "org.apache.juli.ClassLoaderLogManager:void doSetParentLogger(java.util.logging.Logger,java.util.logging.Logger)",
            "org.apache.juli.FileHandler$1:java.lang.Thread newThread(java.lang.Runnable)",
            "org.apache.naming.factory.MailSessionFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.naming.factory.SendMailFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.tomcat.util.compat.JrePlatform:void <clinit>()"
        ]
    },
    "org.apache.catalina.session.StandardSession:void passivate()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.session.PersistentManagerBase:void swapOut(org.apache.catalina.Session)",
            "org.apache.catalina.session.StandardManager:void doUnload()"
        ]
    },
    "org.apache.catalina.session.StandardSession:void activate()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.session.PersistentManagerBase:void reactivateLoadedSession(java.lang.String,org.apache.catalina.Session)",
            "org.apache.catalina.session.StandardManager:void doLoad()"
        ]
    },
    "org.apache.tomcat.util.digester.Digester$EntityResolverWrapper:java.lang.String replace(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.digester.Digester$EntityResolver2Wrapper:org.xml.sax.InputSource getExternalSubset(java.lang.String,java.lang.String)",
            "org.apache.tomcat.util.digester.Digester$EntityResolver2Wrapper:org.xml.sax.InputSource resolveEntity(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.tomcat.util.digester.Digester$EntityResolverWrapper:org.xml.sax.InputSource resolveEntity(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.tomcat.util.digester.Digester:void replaceSystemProperties()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.digester.Digester:void <clinit>()"
        ]
    },
    "org.apache.tomcat.util.digester.Digester:org.xml.sax.Attributes updateAttributes(org.xml.sax.Attributes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.digester.Digester:void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)"
        ]
    },
    "org.apache.tomcat.util.digester.Digester:java.lang.StringBuilder updateBodyText(java.lang.StringBuilder)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.digester.Digester:void endElement(java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.catalina.filters.ExpiresFilter$XHttpServletResponse:void addDateHeader(java.lang.String,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletResponseWrapper:void addDateHeader(java.lang.String,long)",
            "org.apache.catalina.core.ApplicationHttpResponse:void addDateHeader(java.lang.String,long)"
        ]
    },
    "jakarta.servlet.http.NoBodyResponse:void addIntHeader(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jakarta.servlet.http.HttpServletResponseWrapper:void addIntHeader(java.lang.String,int)",
            "org.apache.catalina.core.ApplicationHttpResponse:void addIntHeader(java.lang.String,int)"
        ]
    },
    "org.apache.tomcat.util.digester.Digester$EntityResolver2Wrapper:org.xml.sax.InputSource getExternalSubset(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.digester.Digester$EntityResolver2Wrapper:org.xml.sax.InputSource getExternalSubset(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.tomcat.util.digester.Digester$EntityResolver2Wrapper:org.xml.sax.InputSource resolveEntity(java.lang.String,java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.digester.Digester$EntityResolver2Wrapper:org.xml.sax.InputSource resolveEntity(java.lang.String,java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.tomcat.util.digester.Digester$EntityResolverWrapper:org.xml.sax.InputSource resolveEntity(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.digester.Digester$EntityResolverWrapper:org.xml.sax.InputSource resolveEntity(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.tomcat.util.digester.Digester:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.jaspic.PersistentProviderRegistrations:org.apache.catalina.authenticator.jaspic.PersistentProviderRegistrations$Providers loadProviders(java.io.File)",
            "org.apache.catalina.realm.JAASMemoryLoginModule:void load()",
            "org.apache.catalina.realm.MemoryRealm:org.apache.tomcat.util.digester.Digester getDigester()",
            "org.apache.catalina.startup.Catalina:org.apache.tomcat.util.digester.Digester createStartDigester()",
            "org.apache.catalina.startup.Catalina:org.apache.tomcat.util.digester.Digester createStopDigester()",
            "org.apache.catalina.startup.Catalina:void parseServerXml(boolean)",
            "org.apache.catalina.startup.Catalina:void generateLoader()",
            "org.apache.catalina.startup.ContextConfig:org.apache.tomcat.util.digester.Digester createContextDigester()",
            "org.apache.catalina.startup.ContextConfig:void contextConfig(org.apache.tomcat.util.digester.Digester)",
            "org.apache.catalina.startup.HostConfig:org.apache.tomcat.util.digester.Digester createDigester(java.lang.String)",
            "org.apache.catalina.users.MemoryUserDatabase:void open()",
            "org.apache.tomcat.util.descriptor.DigesterFactory:org.apache.tomcat.util.digester.Digester newDigester(boolean,boolean,org.apache.tomcat.util.digester.RuleSet,boolean)",
            "org.apache.tomcat.util.digester.Digester:void setPropertySource(org.apache.tomcat.util.IntrospectionUtils$PropertySource)",
            "org.apache.tomcat.util.digester.Digester:void setPropertySource(org.apache.tomcat.util.IntrospectionUtils$PropertySource[])",
            "org.apache.tomcat.util.digester.Digester:void addGeneratedClass(java.lang.String)",
            "org.apache.tomcat.util.digester.Digester:java.lang.String[] getGeneratedClasses()",
            "org.apache.tomcat.util.digester.Digester:boolean isGeneratedCodeLoaderSet()",
            "org.apache.tomcat.util.digester.Digester:void setGeneratedCodeLoader(org.apache.tomcat.util.digester.Digester$GeneratedCodeLoader)",
            "org.apache.tomcat.util.digester.Digester:java.lang.Object loadGeneratedClass(java.lang.String)",
            "org.apache.tomcat.util.digester.Digester:void <init>()",
            "org.apache.tomcat.util.digester.Digester:void replaceSystemProperties()",
            "org.apache.tomcat.util.digester.Digester:javax.xml.parsers.SAXParser getParser()",
            "org.apache.tomcat.util.digester.Digester:void endDocument()",
            "org.apache.tomcat.util.digester.Digester:void endElement(java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.tomcat.util.digester.Digester:void endPrefixMapping(java.lang.String)",
            "org.apache.tomcat.util.digester.Digester:void startDocument()",
            "org.apache.tomcat.util.digester.Digester:void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)",
            "org.apache.tomcat.util.digester.Digester:void error(org.xml.sax.SAXParseException)",
            "org.apache.tomcat.util.digester.Digester:void fatalError(org.xml.sax.SAXParseException)",
            "org.apache.tomcat.util.digester.Digester:void warning(org.xml.sax.SAXParseException)",
            "org.apache.tomcat.util.digester.Digester:java.lang.Object peek()",
            "org.apache.tomcat.util.digester.Digester:java.lang.Object peek(int)",
            "org.apache.tomcat.util.digester.Digester:java.lang.Object pop()",
            "org.apache.tomcat.util.digester.Digester:java.lang.Object peekParams()",
            "org.apache.tomcat.util.digester.Digester:java.lang.Object popParams()",
            "org.apache.tomcat.util.digester.Digester:org.xml.sax.SAXException createSAXException(java.lang.String,java.lang.Exception)",
            "org.apache.tomcat.util.digester.Digester:org.xml.sax.Attributes updateAttributes(org.xml.sax.Attributes)",
            "org.apache.tomcat.util.digester.Digester:void <clinit>()",
            "org.apache.tomcat.util.modeler.modules.MbeansDescriptorsDigesterSource:org.apache.tomcat.util.digester.Digester createDigester()"
        ]
    },
    "org.apache.catalina.authenticator.jaspic.PersistentProviderRegistrations:org.apache.catalina.authenticator.jaspic.PersistentProviderRegistrations$Providers loadProviders(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.jaspic.AuthConfigFactoryImpl:void loadPersistentRegistrations()"
        ]
    },
    "org.apache.catalina.realm.MemoryRealm:org.apache.tomcat.util.digester.Digester getDigester()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.realm.MemoryRealm:void startInternal()"
        ]
    },
    "org.apache.catalina.startup.Catalina:org.apache.tomcat.util.digester.Digester createStartDigester()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.Catalina:void parseServerXml(boolean)"
        ]
    },
    "org.apache.catalina.startup.Catalina:org.apache.tomcat.util.digester.Digester createStopDigester()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.Catalina:void parseServerXml(boolean)"
        ]
    },
    "org.apache.catalina.startup.Catalina:void generateLoader()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.Catalina:void start()"
        ]
    },
    "org.apache.catalina.startup.ContextConfig:org.apache.tomcat.util.digester.Digester createContextDigester()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.ContextConfig:void init()"
        ]
    },
    "org.apache.catalina.startup.HostConfig:org.apache.tomcat.util.digester.Digester createDigester(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.HostConfig:void <init>()",
            "org.apache.catalina.startup.HostConfig:void setContextClass(java.lang.String)"
        ]
    },
    "org.apache.tomcat.util.descriptor.DigesterFactory:org.apache.tomcat.util.digester.Digester newDigester(boolean,boolean,org.apache.tomcat.util.digester.RuleSet,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.descriptor.tagplugin.TagPluginParser:void <init>(jakarta.servlet.ServletContext,boolean)",
            "org.apache.tomcat.util.descriptor.web.WebXmlParser:void <init>(boolean,boolean,boolean)"
        ]
    },
    "org.apache.tomcat.util.digester.Digester:void setPropertySource(org.apache.tomcat.util.IntrospectionUtils$PropertySource)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tomcat.util.digester.Digester:void setPropertySource(org.apache.tomcat.util.IntrospectionUtils$PropertySource[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tomcat.util.digester.Digester:void addGeneratedClass(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.Catalina:void parseServerXml(boolean)",
            "org.apache.catalina.startup.ContextConfig:void contextConfig(org.apache.tomcat.util.digester.Digester)"
        ]
    },
    "org.apache.tomcat.util.digester.Digester:java.lang.String[] getGeneratedClasses()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.Catalina:void generateLoader()"
        ]
    },
    "org.apache.tomcat.util.digester.Digester:boolean isGeneratedCodeLoaderSet()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.Catalina:void parseServerXml(boolean)"
        ]
    },
    "org.apache.tomcat.util.digester.Digester:void setGeneratedCodeLoader(org.apache.tomcat.util.digester.Digester$GeneratedCodeLoader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.Catalina:void parseServerXml(boolean)"
        ]
    },
    "org.apache.tomcat.util.digester.Digester:java.lang.Object loadGeneratedClass(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.Catalina:void parseServerXml(boolean)",
            "org.apache.catalina.startup.ContextConfig:void contextConfig(org.apache.tomcat.util.digester.Digester)"
        ]
    },
    "org.apache.tomcat.util.digester.Digester:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.jaspic.PersistentProviderRegistrations:org.apache.catalina.authenticator.jaspic.PersistentProviderRegistrations$Providers loadProviders(java.io.File)",
            "org.apache.catalina.realm.JAASMemoryLoginModule:void load()",
            "org.apache.catalina.realm.MemoryRealm:org.apache.tomcat.util.digester.Digester getDigester()",
            "org.apache.catalina.startup.Catalina:org.apache.tomcat.util.digester.Digester createStartDigester()",
            "org.apache.catalina.startup.Catalina:org.apache.tomcat.util.digester.Digester createStopDigester()",
            "org.apache.catalina.startup.ContextConfig:org.apache.tomcat.util.digester.Digester createContextDigester()",
            "org.apache.catalina.startup.HostConfig:org.apache.tomcat.util.digester.Digester createDigester(java.lang.String)",
            "org.apache.catalina.users.MemoryUserDatabase:void open()",
            "org.apache.tomcat.util.descriptor.DigesterFactory:org.apache.tomcat.util.digester.Digester newDigester(boolean,boolean,org.apache.tomcat.util.digester.RuleSet,boolean)",
            "org.apache.tomcat.util.modeler.modules.MbeansDescriptorsDigesterSource:org.apache.tomcat.util.digester.Digester createDigester()"
        ]
    },
    "org.apache.tomcat.util.digester.Digester:javax.xml.parsers.SAXParser getParser()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.ContextConfig:void init()",
            "org.apache.tomcat.util.descriptor.web.WebXmlParser:void <init>(boolean,boolean,boolean)",
            "org.apache.tomcat.util.digester.Digester:java.lang.Object getProperty(java.lang.String)",
            "org.apache.tomcat.util.digester.Digester:org.xml.sax.XMLReader getXMLReader()"
        ]
    },
    "org.apache.tomcat.util.digester.Digester:void endDocument()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tomcat.util.digester.Digester:void endPrefixMapping(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tomcat.util.digester.Digester:void startDocument()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tomcat.util.digester.Digester:void error(org.xml.sax.SAXParseException)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.digester.Digester:void error(org.xml.sax.SAXParseException)"
        ]
    },
    "org.apache.tomcat.util.digester.Digester:void fatalError(org.xml.sax.SAXParseException)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.digester.Digester:void fatalError(org.xml.sax.SAXParseException)"
        ]
    },
    "org.apache.tomcat.util.digester.Digester:void warning(org.xml.sax.SAXParseException)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.digester.Digester:void warning(org.xml.sax.SAXParseException)"
        ]
    },
    "org.apache.tomcat.util.digester.Digester:java.lang.Object peek()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.AddPortOffsetRule:void begin(java.lang.String,java.lang.String,org.xml.sax.Attributes)",
            "org.apache.catalina.startup.Catalina$SetParentClassLoaderRule:void begin(java.lang.String,java.lang.String,org.xml.sax.Attributes)",
            "org.apache.catalina.startup.CertificateCreateRule:void begin(java.lang.String,java.lang.String,org.xml.sax.Attributes)",
            "org.apache.catalina.startup.ConnectorCreateRule:void begin(java.lang.String,java.lang.String,org.xml.sax.Attributes)",
            "org.apache.catalina.startup.LifecycleListenerRule:void begin(java.lang.String,java.lang.String,org.xml.sax.Attributes)",
            "org.apache.tomcat.util.descriptor.web.AbsoluteOrderingRule:void begin(java.lang.String,java.lang.String,org.xml.sax.Attributes)",
            "org.apache.tomcat.util.descriptor.web.LifecycleCallbackRule:void end(java.lang.String,java.lang.String)",
            "org.apache.tomcat.util.descriptor.web.MappedNameRule:void body(java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.tomcat.util.descriptor.web.NameRule:void body(java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.tomcat.util.descriptor.web.ServiceQnameRule:void body(java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.tomcat.util.descriptor.web.SetAuthConstraintRule:void begin(java.lang.String,java.lang.String,org.xml.sax.Attributes)",
            "org.apache.tomcat.util.descriptor.web.SetDenyUncoveredHttpMethodsRule:void begin(java.lang.String,java.lang.String,org.xml.sax.Attributes)",
            "org.apache.tomcat.util.descriptor.web.SetDistributableRule:void begin(java.lang.String,java.lang.String,org.xml.sax.Attributes)",
            "org.apache.tomcat.util.descriptor.web.SetOverrideRule:void begin(java.lang.String,java.lang.String,org.xml.sax.Attributes)",
            "org.apache.tomcat.util.descriptor.web.SetPublicIdRule:void begin(java.lang.String,java.lang.String,org.xml.sax.Attributes)",
            "org.apache.tomcat.util.descriptor.web.SoapHeaderRule:void body(java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.tomcat.util.digester.SetPropertiesRule:void begin(java.lang.String,java.lang.String,org.xml.sax.Attributes)"
        ]
    },
    "org.apache.tomcat.util.digester.Digester:java.lang.Object peek(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.realm.MemoryUserRule:void begin(java.lang.String,java.lang.String,org.xml.sax.Attributes)",
            "org.apache.catalina.startup.AddPortOffsetRule:void begin(java.lang.String,java.lang.String,org.xml.sax.Attributes)",
            "org.apache.catalina.startup.CopyParentClassLoaderRule:void begin(java.lang.String,java.lang.String,org.xml.sax.Attributes)",
            "org.apache.catalina.startup.LifecycleListenerRule:void begin(java.lang.String,java.lang.String,org.xml.sax.Attributes)",
            "org.apache.catalina.startup.SetNextNamingRule:void end(java.lang.String,java.lang.String)",
            "org.apache.tomcat.util.descriptor.web.CallMethodMultiRule:void end(java.lang.String,java.lang.String)",
            "org.apache.tomcat.util.descriptor.web.IgnoreAnnotationsRule:void begin(java.lang.String,java.lang.String,org.xml.sax.Attributes)",
            "org.apache.tomcat.util.descriptor.web.TaglibLocationRule:void begin(java.lang.String,java.lang.String,org.xml.sax.Attributes)",
            "org.apache.tomcat.util.descriptor.web.VersionRule:void begin(java.lang.String,java.lang.String,org.xml.sax.Attributes)",
            "org.apache.tomcat.util.digester.CallMethodRule:void end(java.lang.String,java.lang.String)",
            "org.apache.tomcat.util.digester.CallParamRule:void begin(java.lang.String,java.lang.String,org.xml.sax.Attributes)",
            "org.apache.tomcat.util.digester.SetNextRule:void end(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.tomcat.util.digester.Digester:java.lang.Object pop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.CertificateCreateRule:void end(java.lang.String,java.lang.String)",
            "org.apache.catalina.startup.ConnectorCreateRule:void end(java.lang.String,java.lang.String)",
            "org.apache.tomcat.util.descriptor.web.ServletDefCreateRule:void end(java.lang.String,java.lang.String)",
            "org.apache.tomcat.util.digester.Digester:void endDocument()",
            "org.apache.tomcat.util.digester.FactoryCreateRule:void end(java.lang.String,java.lang.String)",
            "org.apache.tomcat.util.digester.ObjectCreateRule:void end(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.tomcat.util.digester.Digester:java.lang.Object peekParams()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.descriptor.web.CallParamMultiRule:void end(java.lang.String,java.lang.String)",
            "org.apache.tomcat.util.descriptor.web.LifecycleCallbackRule:void end(java.lang.String,java.lang.String)",
            "org.apache.tomcat.util.digester.CallParamRule:void begin(java.lang.String,java.lang.String,org.xml.sax.Attributes)",
            "org.apache.tomcat.util.digester.CallParamRule:void end(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.tomcat.util.digester.Digester:java.lang.Object popParams()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.descriptor.web.CallMethodMultiRule:void end(java.lang.String,java.lang.String)",
            "org.apache.tomcat.util.digester.CallMethodRule:void end(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.tomcat.util.digester.Digester:org.xml.sax.SAXException createSAXException(java.lang.String,java.lang.Exception)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.digester.Digester:org.xml.sax.SAXException createSAXException(java.lang.Exception)",
            "org.apache.tomcat.util.digester.Digester:org.xml.sax.SAXException createSAXException(java.lang.String)"
        ]
    },
    "org.apache.tomcat.util.modeler.modules.MbeansDescriptorsDigesterSource:org.apache.tomcat.util.digester.Digester createDigester()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.modeler.modules.MbeansDescriptorsDigesterSource:void execute()"
        ]
    },
    "org.apache.catalina.startup.HostConfig:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.manager.host.HostManagerServlet:void add(java.io.PrintWriter,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean,boolean,org.apache.tomcat.util.res.StringManager)",
            "org.apache.catalina.mbeans.ContainerMBean:void addChild(java.lang.String,java.lang.String)",
            "org.apache.catalina.mbeans.MBeanFactory:java.lang.String createStandardHost(java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)"
        ]
    },
    "org.apache.catalina.startup.HostConfig:void setContextClass(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.HostConfig:void lifecycleEvent(org.apache.catalina.LifecycleEvent)"
        ]
    },
    "org.apache.tomcat.util.descriptor.tagplugin.TagPluginParser:void <init>(jakarta.servlet.ServletContext,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tomcat.util.descriptor.web.WebXmlParser:void <init>(boolean,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.ContextConfig:void webConfig()"
        ]
    },
    "org.apache.tomcat.util.digester.Digester:java.lang.Object getProperty(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tomcat.util.digester.Digester:org.xml.sax.XMLReader getXMLReader()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.digester.Digester:java.lang.Object parse(java.io.File)",
            "org.apache.tomcat.util.digester.Digester:java.lang.Object parse(org.xml.sax.InputSource)",
            "org.apache.tomcat.util.digester.Digester:java.lang.Object parse(java.io.InputStream)"
        ]
    },
    "org.apache.catalina.startup.AddPortOffsetRule:void begin(java.lang.String,java.lang.String,org.xml.sax.Attributes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.digester.Digester:void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)"
        ]
    },
    "org.apache.catalina.startup.Catalina$SetParentClassLoaderRule:void begin(java.lang.String,java.lang.String,org.xml.sax.Attributes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.digester.Digester:void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)"
        ]
    },
    "org.apache.catalina.startup.CertificateCreateRule:void begin(java.lang.String,java.lang.String,org.xml.sax.Attributes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.digester.Digester:void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)"
        ]
    },
    "org.apache.catalina.startup.ConnectorCreateRule:void begin(java.lang.String,java.lang.String,org.xml.sax.Attributes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.digester.Digester:void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)"
        ]
    },
    "org.apache.catalina.startup.LifecycleListenerRule:void begin(java.lang.String,java.lang.String,org.xml.sax.Attributes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.digester.Digester:void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)"
        ]
    },
    "org.apache.tomcat.util.descriptor.web.AbsoluteOrderingRule:void begin(java.lang.String,java.lang.String,org.xml.sax.Attributes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.digester.Digester:void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)"
        ]
    },
    "org.apache.tomcat.util.descriptor.web.MappedNameRule:void body(java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.digester.Digester:void endElement(java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.tomcat.util.descriptor.web.NameRule:void body(java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.digester.Digester:void endElement(java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.tomcat.util.descriptor.web.ServiceQnameRule:void body(java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.digester.Digester:void endElement(java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.tomcat.util.descriptor.web.SetAuthConstraintRule:void begin(java.lang.String,java.lang.String,org.xml.sax.Attributes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.digester.Digester:void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)"
        ]
    },
    "org.apache.tomcat.util.descriptor.web.SetDenyUncoveredHttpMethodsRule:void begin(java.lang.String,java.lang.String,org.xml.sax.Attributes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.digester.Digester:void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)"
        ]
    },
    "org.apache.tomcat.util.descriptor.web.SetDistributableRule:void begin(java.lang.String,java.lang.String,org.xml.sax.Attributes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.digester.Digester:void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)"
        ]
    },
    "org.apache.tomcat.util.descriptor.web.SetOverrideRule:void begin(java.lang.String,java.lang.String,org.xml.sax.Attributes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.digester.Digester:void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)"
        ]
    },
    "org.apache.tomcat.util.descriptor.web.SetPublicIdRule:void begin(java.lang.String,java.lang.String,org.xml.sax.Attributes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.digester.Digester:void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)"
        ]
    },
    "org.apache.tomcat.util.descriptor.web.SoapHeaderRule:void body(java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.digester.Digester:void endElement(java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.tomcat.util.digester.SetPropertiesRule:void begin(java.lang.String,java.lang.String,org.xml.sax.Attributes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.digester.Digester:void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)"
        ]
    },
    "org.apache.catalina.realm.MemoryUserRule:void begin(java.lang.String,java.lang.String,org.xml.sax.Attributes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.digester.Digester:void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)"
        ]
    },
    "org.apache.catalina.startup.CopyParentClassLoaderRule:void begin(java.lang.String,java.lang.String,org.xml.sax.Attributes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.digester.Digester:void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)"
        ]
    },
    "org.apache.tomcat.util.descriptor.web.IgnoreAnnotationsRule:void begin(java.lang.String,java.lang.String,org.xml.sax.Attributes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.digester.Digester:void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)"
        ]
    },
    "org.apache.tomcat.util.descriptor.web.TaglibLocationRule:void begin(java.lang.String,java.lang.String,org.xml.sax.Attributes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.digester.Digester:void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)"
        ]
    },
    "org.apache.tomcat.util.descriptor.web.VersionRule:void begin(java.lang.String,java.lang.String,org.xml.sax.Attributes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.digester.Digester:void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)"
        ]
    },
    "org.apache.tomcat.util.digester.CallParamRule:void begin(java.lang.String,java.lang.String,org.xml.sax.Attributes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.digester.Digester:void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)"
        ]
    },
    "org.apache.catalina.startup.CertificateCreateRule:void end(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.digester.Digester:void endElement(java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.catalina.startup.ConnectorCreateRule:void end(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.digester.Digester:void endElement(java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.tomcat.util.descriptor.web.ServletDefCreateRule:void end(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.digester.Digester:void endElement(java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.tomcat.util.digester.FactoryCreateRule:void end(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.digester.Digester:void endElement(java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.tomcat.util.digester.ObjectCreateRule:void end(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.digester.Digester:void endElement(java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.tomcat.util.descriptor.web.CallParamMultiRule:void end(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.digester.Digester:void endElement(java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.tomcat.util.digester.CallParamRule:void end(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.digester.Digester:void endElement(java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.tomcat.util.digester.Digester:org.xml.sax.SAXException createSAXException(java.lang.Exception)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.digester.Digester:void endDocument()",
            "org.apache.tomcat.util.digester.Digester:void endElement(java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.tomcat.util.digester.Digester:void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)",
            "org.apache.tomcat.util.digester.Digester:org.xml.sax.InputSource resolveEntity(java.lang.String,java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.tomcat.util.digester.Digester:org.xml.sax.SAXException createSAXException(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.digester.Digester:void endPrefixMapping(java.lang.String)"
        ]
    },
    "org.apache.tomcat.util.modeler.modules.MbeansDescriptorsDigesterSource:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.modeler.modules.MbeansDescriptorsDigesterSource:java.util.List loadDescriptors(org.apache.tomcat.util.modeler.Registry,java.lang.String,java.lang.Object)"
        ]
    },
    "org.apache.tomcat.util.digester.Digester:java.lang.Object parse(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.realm.JAASMemoryLoginModule:void load()",
            "org.apache.catalina.startup.HostConfig:void deployWAR(org.apache.catalina.util.ContextName,java.io.File)",
            "org.apache.catalina.startup.HostConfig:void deployDirectory(org.apache.catalina.util.ContextName,java.io.File)"
        ]
    },
    "org.apache.tomcat.util.digester.Digester:java.lang.Object parse(org.xml.sax.InputSource)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.startup.Catalina:void parseServerXml(boolean)",
            "org.apache.catalina.startup.ContextConfig:void processContextConfig(org.apache.tomcat.util.digester.Digester,java.net.URL,java.io.InputStream)",
            "org.apache.tomcat.util.descriptor.tagplugin.TagPluginParser:void parse(java.net.URL)",
            "org.apache.tomcat.util.descriptor.web.WebXmlParser:boolean parseWebXml(org.xml.sax.InputSource,org.apache.tomcat.util.descriptor.web.WebXml,boolean)"
        ]
    },
    "org.apache.tomcat.util.digester.Digester:java.lang.Object parse(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.catalina.authenticator.jaspic.PersistentProviderRegistrations:org.apache.catalina.authenticator.jaspic.PersistentProviderRegistrations$Providers loadProviders(java.io.File)",
            "org.apache.catalina.realm.MemoryRealm:void startInternal()",
            "org.apache.catalina.startup.HostConfig:void deployDescriptor(org.apache.catalina.util.ContextName,java.io.File)",
            "org.apache.catalina.startup.HostConfig:void deployWAR(org.apache.catalina.util.ContextName,java.io.File)",
            "org.apache.catalina.users.MemoryUserDatabase:void open()",
            "org.apache.tomcat.util.modeler.modules.MbeansDescriptorsDigesterSource:void execute()"
        ]
    },
    "org.apache.tomcat.util.digester.Digester:org.xml.sax.InputSource resolveEntity(java.lang.String,java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.digester.Digester$EntityResolver2Wrapper:org.xml.sax.InputSource resolveEntity(java.lang.String,java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.tomcat.util.modeler.modules.MbeansDescriptorsDigesterSource:java.util.List loadDescriptors(org.apache.tomcat.util.modeler.Registry,java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.modeler.Registry:java.util.List load(java.lang.String,java.lang.Object,java.lang.String)"
        ]
    }
}