{
    "org.asynchttpclient.uri.UriParser:void parseAuthority()": {
        "isVulRoot": true,
        "vulCaller": [
            "org.asynchttpclient.uri.UriParser:void parse(org.asynchttpclient.uri.Uri,java.lang.String)"
        ]
    },
    "org.asynchttpclient.uri.UriParser:void handleRelativePath()": {
        "isVulRoot": true,
        "vulCaller": [
            "org.asynchttpclient.uri.UriParser:void computeRegularPath()"
        ]
    },
    "org.asynchttpclient.uri.UriParser:void parse(org.asynchttpclient.uri.Uri,java.lang.String)": {
        "isVulRoot": true,
        "vulCaller": [
            "org.asynchttpclient.uri.Uri:org.asynchttpclient.uri.Uri create(org.asynchttpclient.uri.Uri,java.lang.String)"
        ]
    },
    "org.asynchttpclient.uri.UriParser:void computeInitialScheme(java.lang.String)": {
        "isVulRoot": true,
        "vulCaller": [
            "org.asynchttpclient.uri.UriParser:void parse(org.asynchttpclient.uri.Uri,java.lang.String)"
        ]
    },
    "org.asynchttpclient.uri.UriParser:boolean overrideWithContext(org.asynchttpclient.uri.Uri,java.lang.String)": {
        "isVulRoot": true,
        "vulCaller": [
            "org.asynchttpclient.uri.UriParser:void parse(org.asynchttpclient.uri.Uri,java.lang.String)"
        ]
    },
    "org.asynchttpclient.uri.UriParser:void computeAuthority()": {
        "isVulRoot": true,
        "vulCaller": [
            "org.asynchttpclient.uri.UriParser:void parseAuthority()"
        ]
    },
    "org.asynchttpclient.uri.UriParser:void computePath(boolean)": {
        "isVulRoot": true,
        "vulCaller": [
            "org.asynchttpclient.uri.UriParser:void parse(org.asynchttpclient.uri.Uri,java.lang.String)"
        ]
    },
    "org.asynchttpclient.uri.UriParser:void trimLeft(java.lang.String)": {
        "isVulRoot": true,
        "vulCaller": [
            "org.asynchttpclient.uri.UriParser:void parse(org.asynchttpclient.uri.Uri,java.lang.String)"
        ]
    },
    "org.asynchttpclient.uri.UriParser:void computeRegularPath()": {
        "isVulRoot": true,
        "vulCaller": [
            "org.asynchttpclient.uri.UriParser:void computePath(boolean)"
        ]
    },
    "org.asynchttpclient.uri.UriParser:boolean splitUrlAndQuery(java.lang.String)": {
        "isVulRoot": true,
        "vulCaller": [
            "org.asynchttpclient.uri.UriParser:void parse(org.asynchttpclient.uri.Uri,java.lang.String)"
        ]
    },
    "org.asynchttpclient.uri.Uri:org.asynchttpclient.uri.Uri create(org.asynchttpclient.uri.Uri,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.asynchttpclient.netty.handler.intercept.Redirect30xInterceptor:boolean exitAfterHandlingRedirect(io.netty.channel.Channel,org.asynchttpclient.netty.NettyResponseFuture,io.netty.handler.codec.http.HttpResponse,org.asynchttpclient.Request,int,org.asynchttpclient.Realm)",
            "org.asynchttpclient.uri.Uri:org.asynchttpclient.uri.Uri create(java.lang.String)"
        ]
    },
    "org.asynchttpclient.netty.handler.intercept.Redirect30xInterceptor:boolean exitAfterHandlingRedirect(io.netty.channel.Channel,org.asynchttpclient.netty.NettyResponseFuture,io.netty.handler.codec.http.HttpResponse,org.asynchttpclient.Request,int,org.asynchttpclient.Realm)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.asynchttpclient.netty.handler.intercept.Interceptors:boolean exitAfterIntercept(io.netty.channel.Channel,org.asynchttpclient.netty.NettyResponseFuture,org.asynchttpclient.AsyncHandler,io.netty.handler.codec.http.HttpResponse,org.asynchttpclient.HttpResponseStatus,org.asynchttpclient.HttpResponseHeaders)"
        ]
    },
    "org.asynchttpclient.uri.Uri:org.asynchttpclient.uri.Uri create(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.asynchttpclient.RequestBuilderBase:org.asynchttpclient.RequestBuilderBase setUrl(java.lang.String)",
            "org.asynchttpclient.RequestBuilderBase:void <clinit>()"
        ]
    },
    "org.asynchttpclient.netty.handler.intercept.Interceptors:boolean exitAfterIntercept(io.netty.channel.Channel,org.asynchttpclient.netty.NettyResponseFuture,org.asynchttpclient.AsyncHandler,io.netty.handler.codec.http.HttpResponse,org.asynchttpclient.HttpResponseStatus,org.asynchttpclient.HttpResponseHeaders)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.asynchttpclient.netty.handler.WebSocketHandler:void handleRead(io.netty.channel.Channel,org.asynchttpclient.netty.NettyResponseFuture,java.lang.Object)",
            "org.asynchttpclient.netty.handler.HttpHandler:void handleHttpResponse(io.netty.handler.codec.http.HttpResponse,io.netty.channel.Channel,org.asynchttpclient.netty.NettyResponseFuture,org.asynchttpclient.AsyncHandler)"
        ]
    },
    "org.asynchttpclient.RequestBuilderBase:org.asynchttpclient.RequestBuilderBase setUrl(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.asynchttpclient.Dsl:org.asynchttpclient.RequestBuilder request(java.lang.String,java.lang.String)",
            "org.asynchttpclient.DefaultAsyncHttpClient:org.asynchttpclient.BoundRequestBuilder requestBuilder(java.lang.String,java.lang.String)"
        ]
    },
    "org.asynchttpclient.RequestBuilderBase:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.asynchttpclient.RequestBuilderBase:void <init>(java.lang.String,boolean,boolean)",
            "org.asynchttpclient.RequestBuilderBase:void <init>(org.asynchttpclient.Request,boolean,boolean)",
            "org.asynchttpclient.RequestBuilderBase:org.asynchttpclient.RequestBuilderBase addHeader(java.lang.CharSequence,java.lang.String)",
            "org.asynchttpclient.RequestBuilderBase:org.asynchttpclient.uri.Uri computeUri()",
            "org.asynchttpclient.RequestBuilderBase:void <clinit>()"
        ]
    },
    "org.asynchttpclient.netty.handler.WebSocketHandler:void handleRead(io.netty.channel.Channel,org.asynchttpclient.netty.NettyResponseFuture,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.asynchttpclient.netty.handler.AsyncHttpClientHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "org.asynchttpclient.netty.handler.HttpHandler:void handleHttpResponse(io.netty.handler.codec.http.HttpResponse,io.netty.channel.Channel,org.asynchttpclient.netty.NettyResponseFuture,org.asynchttpclient.AsyncHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.asynchttpclient.netty.handler.HttpHandler:void handleRead(io.netty.channel.Channel,org.asynchttpclient.netty.NettyResponseFuture,java.lang.Object)"
        ]
    },
    "org.asynchttpclient.Dsl:org.asynchttpclient.RequestBuilder request(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.asynchttpclient.Dsl:org.asynchttpclient.RequestBuilder get(java.lang.String)",
            "org.asynchttpclient.Dsl:org.asynchttpclient.RequestBuilder put(java.lang.String)",
            "org.asynchttpclient.Dsl:org.asynchttpclient.RequestBuilder post(java.lang.String)",
            "org.asynchttpclient.Dsl:org.asynchttpclient.RequestBuilder delete(java.lang.String)",
            "org.asynchttpclient.Dsl:org.asynchttpclient.RequestBuilder head(java.lang.String)",
            "org.asynchttpclient.Dsl:org.asynchttpclient.RequestBuilder options(java.lang.String)",
            "org.asynchttpclient.Dsl:org.asynchttpclient.RequestBuilder patch(java.lang.String)",
            "org.asynchttpclient.Dsl:org.asynchttpclient.RequestBuilder trace(java.lang.String)"
        ]
    },
    "org.asynchttpclient.DefaultAsyncHttpClient:org.asynchttpclient.BoundRequestBuilder requestBuilder(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.asynchttpclient.DefaultAsyncHttpClient:org.asynchttpclient.BoundRequestBuilder prepareGet(java.lang.String)",
            "org.asynchttpclient.DefaultAsyncHttpClient:org.asynchttpclient.BoundRequestBuilder prepareConnect(java.lang.String)",
            "org.asynchttpclient.DefaultAsyncHttpClient:org.asynchttpclient.BoundRequestBuilder prepareOptions(java.lang.String)",
            "org.asynchttpclient.DefaultAsyncHttpClient:org.asynchttpclient.BoundRequestBuilder prepareHead(java.lang.String)",
            "org.asynchttpclient.DefaultAsyncHttpClient:org.asynchttpclient.BoundRequestBuilder preparePost(java.lang.String)",
            "org.asynchttpclient.DefaultAsyncHttpClient:org.asynchttpclient.BoundRequestBuilder preparePut(java.lang.String)",
            "org.asynchttpclient.DefaultAsyncHttpClient:org.asynchttpclient.BoundRequestBuilder prepareDelete(java.lang.String)",
            "org.asynchttpclient.DefaultAsyncHttpClient:org.asynchttpclient.BoundRequestBuilder preparePatch(java.lang.String)",
            "org.asynchttpclient.DefaultAsyncHttpClient:org.asynchttpclient.BoundRequestBuilder prepareTrace(java.lang.String)"
        ]
    },
    "org.asynchttpclient.RequestBuilderBase:void <init>(java.lang.String,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.asynchttpclient.RequestBuilder:void <init>(java.lang.String,boolean,boolean)",
            "org.asynchttpclient.BoundRequestBuilder:void <init>(org.asynchttpclient.AsyncHttpClient,java.lang.String,boolean,boolean)",
            "org.asynchttpclient.RequestBuilderBase:void <init>(java.lang.String,boolean)"
        ]
    },
    "org.asynchttpclient.RequestBuilderBase:void <init>(org.asynchttpclient.Request,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.asynchttpclient.RequestBuilder:void <init>(org.asynchttpclient.Request,boolean,boolean)",
            "org.asynchttpclient.RequestBuilderBase:void <init>(org.asynchttpclient.Request)"
        ]
    },
    "org.asynchttpclient.RequestBuilderBase:org.asynchttpclient.RequestBuilderBase addHeader(java.lang.CharSequence,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.asynchttpclient.RequestBuilderBase:org.asynchttpclient.uri.Uri computeUri()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.asynchttpclient.RequestBuilderBase:org.asynchttpclient.Request build()"
        ]
    },
    "org.asynchttpclient.netty.handler.AsyncHttpClientHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.asynchttpclient.netty.handler.HttpHandler:void handleRead(io.netty.channel.Channel,org.asynchttpclient.netty.NettyResponseFuture,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.asynchttpclient.netty.handler.AsyncHttpClientHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "org.asynchttpclient.Dsl:org.asynchttpclient.RequestBuilder get(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.asynchttpclient.Dsl:org.asynchttpclient.RequestBuilder put(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.asynchttpclient.Dsl:org.asynchttpclient.RequestBuilder post(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.asynchttpclient.Dsl:org.asynchttpclient.RequestBuilder delete(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.asynchttpclient.Dsl:org.asynchttpclient.RequestBuilder head(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.asynchttpclient.Dsl:org.asynchttpclient.RequestBuilder options(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.asynchttpclient.Dsl:org.asynchttpclient.RequestBuilder patch(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.asynchttpclient.Dsl:org.asynchttpclient.RequestBuilder trace(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.asynchttpclient.DefaultAsyncHttpClient:org.asynchttpclient.BoundRequestBuilder prepareGet(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.asynchttpclient.DefaultAsyncHttpClient:org.asynchttpclient.BoundRequestBuilder prepareConnect(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.asynchttpclient.DefaultAsyncHttpClient:org.asynchttpclient.BoundRequestBuilder prepareOptions(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.asynchttpclient.DefaultAsyncHttpClient:org.asynchttpclient.BoundRequestBuilder prepareHead(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.asynchttpclient.DefaultAsyncHttpClient:org.asynchttpclient.BoundRequestBuilder preparePost(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.asynchttpclient.DefaultAsyncHttpClient:org.asynchttpclient.BoundRequestBuilder preparePut(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.asynchttpclient.DefaultAsyncHttpClient:org.asynchttpclient.BoundRequestBuilder prepareDelete(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.asynchttpclient.DefaultAsyncHttpClient:org.asynchttpclient.BoundRequestBuilder preparePatch(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.asynchttpclient.DefaultAsyncHttpClient:org.asynchttpclient.BoundRequestBuilder prepareTrace(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.asynchttpclient.RequestBuilder:void <init>(java.lang.String,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.asynchttpclient.BoundRequestBuilder:void <init>(org.asynchttpclient.AsyncHttpClient,java.lang.String,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.asynchttpclient.RequestBuilderBase:void <init>(java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.asynchttpclient.RequestBuilder:void <init>(java.lang.String,boolean)",
            "org.asynchttpclient.BoundRequestBuilder:void <init>(org.asynchttpclient.AsyncHttpClient,java.lang.String,boolean)"
        ]
    },
    "org.asynchttpclient.RequestBuilder:void <init>(org.asynchttpclient.Request,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.asynchttpclient.RequestBuilderBase:void <init>(org.asynchttpclient.Request)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.asynchttpclient.RequestBuilder:void <init>(org.asynchttpclient.Request)",
            "org.asynchttpclient.BoundRequestBuilder:void <init>(org.asynchttpclient.AsyncHttpClient,org.asynchttpclient.Request)"
        ]
    },
    "org.asynchttpclient.RequestBuilderBase:org.asynchttpclient.Request build()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.asynchttpclient.handler.resumable.ResumableAsyncHandler:org.asynchttpclient.Request adjustRequestRange(org.asynchttpclient.Request)",
            "org.asynchttpclient.netty.handler.intercept.Unauthorized401Interceptor:boolean exitAfterHandling401(io.netty.channel.Channel,org.asynchttpclient.netty.NettyResponseFuture,io.netty.handler.codec.http.HttpResponse,org.asynchttpclient.Request,int,org.asynchttpclient.Realm,org.asynchttpclient.proxy.ProxyServer,io.netty.handler.codec.http.HttpRequest)",
            "org.asynchttpclient.netty.handler.intercept.ConnectSuccessInterceptor:boolean exitAfterHandlingConnect(io.netty.channel.Channel,org.asynchttpclient.netty.NettyResponseFuture,org.asynchttpclient.Request,org.asynchttpclient.proxy.ProxyServer,int,io.netty.handler.codec.http.HttpRequest)",
            "org.asynchttpclient.netty.handler.intercept.Redirect30xInterceptor:boolean exitAfterHandlingRedirect(io.netty.channel.Channel,org.asynchttpclient.netty.NettyResponseFuture,io.netty.handler.codec.http.HttpResponse,org.asynchttpclient.Request,int,org.asynchttpclient.Realm)",
            "org.asynchttpclient.netty.handler.intercept.ProxyUnauthorized407Interceptor:boolean exitAfterHandling407(io.netty.channel.Channel,org.asynchttpclient.netty.NettyResponseFuture,io.netty.handler.codec.http.HttpResponse,org.asynchttpclient.Request,int,org.asynchttpclient.proxy.ProxyServer,io.netty.handler.codec.http.HttpRequest)",
            "org.asynchttpclient.BoundRequestBuilder:org.asynchttpclient.ListenableFuture execute(org.asynchttpclient.AsyncHandler)",
            "org.asynchttpclient.BoundRequestBuilder:org.asynchttpclient.ListenableFuture execute()",
            "org.asynchttpclient.DefaultAsyncHttpClient:org.asynchttpclient.BoundRequestBuilder prepareRequest(org.asynchttpclient.RequestBuilder)",
            "org.asynchttpclient.DefaultAsyncHttpClient:org.asynchttpclient.ListenableFuture executeRequest(org.asynchttpclient.RequestBuilder,org.asynchttpclient.AsyncHandler)",
            "org.asynchttpclient.DefaultAsyncHttpClient:org.asynchttpclient.ListenableFuture executeRequest(org.asynchttpclient.RequestBuilder)",
            "org.asynchttpclient.DefaultAsyncHttpClient:org.asynchttpclient.filter.FilterContext preProcessRequest(org.asynchttpclient.filter.FilterContext)",
            "org.asynchttpclient.RequestBuilderBase:org.asynchttpclient.RequestBuilderBase executeSignatureCalculator()"
        ]
    },
    "org.asynchttpclient.RequestBuilder:void <init>(java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.asynchttpclient.RequestBuilder:void <init>(java.lang.String)"
        ]
    },
    "org.asynchttpclient.BoundRequestBuilder:void <init>(org.asynchttpclient.AsyncHttpClient,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.asynchttpclient.DefaultAsyncHttpClient:org.asynchttpclient.BoundRequestBuilder requestBuilder(java.lang.String,java.lang.String)"
        ]
    },
    "org.asynchttpclient.RequestBuilder:void <init>(org.asynchttpclient.Request)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.asynchttpclient.handler.resumable.ResumableAsyncHandler:org.asynchttpclient.Request adjustRequestRange(org.asynchttpclient.Request)",
            "org.asynchttpclient.netty.handler.intercept.Unauthorized401Interceptor:boolean exitAfterHandling401(io.netty.channel.Channel,org.asynchttpclient.netty.NettyResponseFuture,io.netty.handler.codec.http.HttpResponse,org.asynchttpclient.Request,int,org.asynchttpclient.Realm,org.asynchttpclient.proxy.ProxyServer,io.netty.handler.codec.http.HttpRequest)",
            "org.asynchttpclient.netty.handler.intercept.ConnectSuccessInterceptor:boolean exitAfterHandlingConnect(io.netty.channel.Channel,org.asynchttpclient.netty.NettyResponseFuture,org.asynchttpclient.Request,org.asynchttpclient.proxy.ProxyServer,int,io.netty.handler.codec.http.HttpRequest)",
            "org.asynchttpclient.netty.handler.intercept.ProxyUnauthorized407Interceptor:boolean exitAfterHandling407(io.netty.channel.Channel,org.asynchttpclient.netty.NettyResponseFuture,io.netty.handler.codec.http.HttpResponse,org.asynchttpclient.Request,int,org.asynchttpclient.proxy.ProxyServer,io.netty.handler.codec.http.HttpRequest)",
            "org.asynchttpclient.DefaultAsyncHttpClient:org.asynchttpclient.filter.FilterContext preProcessRequest(org.asynchttpclient.filter.FilterContext)"
        ]
    },
    "org.asynchttpclient.BoundRequestBuilder:void <init>(org.asynchttpclient.AsyncHttpClient,org.asynchttpclient.Request)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.asynchttpclient.DefaultAsyncHttpClient:org.asynchttpclient.BoundRequestBuilder requestBuilder(org.asynchttpclient.Request)"
        ]
    },
    "org.asynchttpclient.handler.resumable.ResumableAsyncHandler:org.asynchttpclient.Request adjustRequestRange(org.asynchttpclient.Request)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.asynchttpclient.handler.resumable.ResumableIOExceptionFilter:org.asynchttpclient.filter.FilterContext filter(org.asynchttpclient.filter.FilterContext)",
            "org.asynchttpclient.DefaultAsyncHttpClient:org.asynchttpclient.filter.FilterContext preProcessRequest(org.asynchttpclient.filter.FilterContext)"
        ]
    },
    "org.asynchttpclient.netty.handler.intercept.Unauthorized401Interceptor:boolean exitAfterHandling401(io.netty.channel.Channel,org.asynchttpclient.netty.NettyResponseFuture,io.netty.handler.codec.http.HttpResponse,org.asynchttpclient.Request,int,org.asynchttpclient.Realm,org.asynchttpclient.proxy.ProxyServer,io.netty.handler.codec.http.HttpRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.asynchttpclient.netty.handler.intercept.Interceptors:boolean exitAfterIntercept(io.netty.channel.Channel,org.asynchttpclient.netty.NettyResponseFuture,org.asynchttpclient.AsyncHandler,io.netty.handler.codec.http.HttpResponse,org.asynchttpclient.HttpResponseStatus,org.asynchttpclient.HttpResponseHeaders)"
        ]
    },
    "org.asynchttpclient.netty.handler.intercept.ConnectSuccessInterceptor:boolean exitAfterHandlingConnect(io.netty.channel.Channel,org.asynchttpclient.netty.NettyResponseFuture,org.asynchttpclient.Request,org.asynchttpclient.proxy.ProxyServer,int,io.netty.handler.codec.http.HttpRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.asynchttpclient.netty.handler.intercept.Interceptors:boolean exitAfterIntercept(io.netty.channel.Channel,org.asynchttpclient.netty.NettyResponseFuture,org.asynchttpclient.AsyncHandler,io.netty.handler.codec.http.HttpResponse,org.asynchttpclient.HttpResponseStatus,org.asynchttpclient.HttpResponseHeaders)"
        ]
    },
    "org.asynchttpclient.netty.handler.intercept.ProxyUnauthorized407Interceptor:boolean exitAfterHandling407(io.netty.channel.Channel,org.asynchttpclient.netty.NettyResponseFuture,io.netty.handler.codec.http.HttpResponse,org.asynchttpclient.Request,int,org.asynchttpclient.proxy.ProxyServer,io.netty.handler.codec.http.HttpRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.asynchttpclient.netty.handler.intercept.Interceptors:boolean exitAfterIntercept(io.netty.channel.Channel,org.asynchttpclient.netty.NettyResponseFuture,org.asynchttpclient.AsyncHandler,io.netty.handler.codec.http.HttpResponse,org.asynchttpclient.HttpResponseStatus,org.asynchttpclient.HttpResponseHeaders)"
        ]
    },
    "org.asynchttpclient.BoundRequestBuilder:org.asynchttpclient.ListenableFuture execute(org.asynchttpclient.AsyncHandler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.asynchttpclient.BoundRequestBuilder:org.asynchttpclient.ListenableFuture execute()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.asynchttpclient.DefaultAsyncHttpClient:org.asynchttpclient.BoundRequestBuilder prepareRequest(org.asynchttpclient.RequestBuilder)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.asynchttpclient.DefaultAsyncHttpClient:org.asynchttpclient.ListenableFuture executeRequest(org.asynchttpclient.RequestBuilder,org.asynchttpclient.AsyncHandler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.asynchttpclient.DefaultAsyncHttpClient:org.asynchttpclient.ListenableFuture executeRequest(org.asynchttpclient.RequestBuilder)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.asynchttpclient.DefaultAsyncHttpClient:org.asynchttpclient.filter.FilterContext preProcessRequest(org.asynchttpclient.filter.FilterContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.asynchttpclient.DefaultAsyncHttpClient:org.asynchttpclient.ListenableFuture executeRequest(org.asynchttpclient.Request,org.asynchttpclient.AsyncHandler)"
        ]
    },
    "org.asynchttpclient.RequestBuilderBase:org.asynchttpclient.RequestBuilderBase executeSignatureCalculator()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.asynchttpclient.RequestBuilderBase:org.asynchttpclient.Request build()"
        ]
    },
    "org.asynchttpclient.RequestBuilder:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.asynchttpclient.netty.handler.intercept.Redirect30xInterceptor:boolean exitAfterHandlingRedirect(io.netty.channel.Channel,org.asynchttpclient.netty.NettyResponseFuture,io.netty.handler.codec.http.HttpResponse,org.asynchttpclient.Request,int,org.asynchttpclient.Realm)",
            "org.asynchttpclient.RequestBuilder:void <init>()",
            "org.asynchttpclient.Dsl:org.asynchttpclient.RequestBuilder request(java.lang.String,java.lang.String)",
            "org.asynchttpclient.RequestBuilderBase:org.asynchttpclient.RequestBuilderBase executeSignatureCalculator()"
        ]
    },
    "org.asynchttpclient.DefaultAsyncHttpClient:org.asynchttpclient.BoundRequestBuilder requestBuilder(org.asynchttpclient.Request)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.asynchttpclient.DefaultAsyncHttpClient:org.asynchttpclient.BoundRequestBuilder prepareRequest(org.asynchttpclient.Request)"
        ]
    },
    "org.asynchttpclient.handler.resumable.ResumableIOExceptionFilter:org.asynchttpclient.filter.FilterContext filter(org.asynchttpclient.filter.FilterContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.asynchttpclient.netty.request.NettyRequestSender:boolean applyIoExceptionFiltersAndReplayRequest(org.asynchttpclient.netty.NettyResponseFuture,java.io.IOException,io.netty.channel.Channel)"
        ]
    },
    "org.asynchttpclient.DefaultAsyncHttpClient:org.asynchttpclient.ListenableFuture executeRequest(org.asynchttpclient.Request,org.asynchttpclient.AsyncHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.asynchttpclient.BoundRequestBuilder:org.asynchttpclient.ListenableFuture execute(org.asynchttpclient.AsyncHandler)",
            "org.asynchttpclient.BoundRequestBuilder:org.asynchttpclient.ListenableFuture execute()",
            "org.asynchttpclient.DefaultAsyncHttpClient:org.asynchttpclient.ListenableFuture executeRequest(org.asynchttpclient.RequestBuilder,org.asynchttpclient.AsyncHandler)",
            "org.asynchttpclient.DefaultAsyncHttpClient:org.asynchttpclient.ListenableFuture executeRequest(org.asynchttpclient.Request)"
        ]
    },
    "org.asynchttpclient.RequestBuilder:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.asynchttpclient.DefaultAsyncHttpClient:org.asynchttpclient.BoundRequestBuilder prepareRequest(org.asynchttpclient.Request)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.asynchttpclient.DefaultAsyncHttpClient:org.asynchttpclient.BoundRequestBuilder prepareRequest(org.asynchttpclient.RequestBuilder)"
        ]
    },
    "org.asynchttpclient.netty.request.NettyRequestSender:boolean applyIoExceptionFiltersAndReplayRequest(org.asynchttpclient.netty.NettyResponseFuture,java.io.IOException,io.netty.channel.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.asynchttpclient.netty.handler.AsyncHttpClientHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "org.asynchttpclient.netty.handler.AsyncHttpClientHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "org.asynchttpclient.netty.handler.HttpHandler:void handleRead(io.netty.channel.Channel,org.asynchttpclient.netty.NettyResponseFuture,java.lang.Object)"
        ]
    },
    "org.asynchttpclient.DefaultAsyncHttpClient:org.asynchttpclient.ListenableFuture executeRequest(org.asynchttpclient.Request)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.asynchttpclient.DefaultAsyncHttpClient:org.asynchttpclient.ListenableFuture executeRequest(org.asynchttpclient.RequestBuilder)"
        ]
    },
    "org.asynchttpclient.netty.handler.AsyncHttpClientHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.asynchttpclient.netty.handler.AsyncHttpClientHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": []
    }
}