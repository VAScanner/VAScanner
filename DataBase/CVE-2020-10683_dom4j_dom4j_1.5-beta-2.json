{
    "org.dom4j.io.SAXHelper:org.xml.sax.XMLReader createXMLReader(boolean)": {
        "isVulRoot": true,
        "vulCaller": [
            "org.dom4j.io.SAXReader:org.xml.sax.XMLReader createXMLReader()",
            "org.dom4j.io.SAXValidator:org.xml.sax.XMLReader createXMLReader()"
        ]
    },
    "org.dom4j.io.SAXReader:void configureReader(org.xml.sax.XMLReader,org.xml.sax.helpers.DefaultHandler)": {
        "isVulRoot": true,
        "vulCaller": [
            "org.dom4j.io.SAXReader:org.dom4j.Document read(org.xml.sax.InputSource)"
        ]
    },
    "org.dom4j.io.SAXReader:org.dom4j.Document read(java.io.Reader)": {
        "isVulRoot": true,
        "vulCaller": [
            "org.dom4j.DocumentHelper:org.dom4j.Document parseText(java.lang.String)"
        ]
    },
    "org.dom4j.io.SAXReader:org.dom4j.Document read(java.io.Reader,java.lang.String)": {
        "isVulRoot": true,
        "vulCaller": []
    },
    "org.dom4j.io.SAXReader:org.dom4j.Document read(java.io.InputStream,java.lang.String)": {
        "isVulRoot": true,
        "vulCaller": []
    },
    "org.dom4j.io.SAXReader:org.dom4j.Document read(java.io.File)": {
        "isVulRoot": true,
        "vulCaller": []
    },
    "org.dom4j.io.SAXReader:org.dom4j.Document read(java.io.InputStream)": {
        "isVulRoot": true,
        "vulCaller": [
            "org.dom4j.DocumentHelper:org.dom4j.Document parseText(java.lang.String,java.lang.String)"
        ]
    },
    "org.dom4j.io.SAXReader:org.xml.sax.XMLReader installXMLFilter(org.xml.sax.XMLReader)": {
        "isVulRoot": true,
        "vulCaller": [
            "org.dom4j.io.SAXReader:org.dom4j.Document read(org.xml.sax.InputSource)"
        ]
    },
    "org.dom4j.io.SAXReader:org.dom4j.Document read(java.lang.String)": {
        "isVulRoot": true,
        "vulCaller": []
    },
    "org.dom4j.io.SAXReader:org.dom4j.Document read(java.net.URL)": {
        "isVulRoot": true,
        "vulCaller": []
    },
    "org.dom4j.io.SAXReader:org.dom4j.Document read(org.xml.sax.InputSource)": {
        "isVulRoot": true,
        "vulCaller": [
            "org.dom4j.datatype.DatatypeDocumentFactory:void loadSchema(org.dom4j.Document,java.lang.String)",
            "org.dom4j.datatype.DatatypeDocumentFactory:void loadSchema(org.dom4j.Document,java.lang.String,org.dom4j.Namespace)",
            "org.dom4j.datatype.SchemaParser:void internalBuild(org.dom4j.Document)",
            "org.dom4j.io.SAXReader:org.dom4j.Document read(java.io.File)",
            "org.dom4j.io.SAXReader:org.dom4j.Document read(java.net.URL)",
            "org.dom4j.io.SAXReader:org.dom4j.Document read(java.lang.String)",
            "org.dom4j.io.SAXReader:org.dom4j.Document read(java.io.InputStream)",
            "org.dom4j.io.SAXReader:org.dom4j.Document read(java.io.Reader)",
            "org.dom4j.io.SAXReader:org.dom4j.Document read(java.io.InputStream,java.lang.String)",
            "org.dom4j.io.SAXReader:org.dom4j.Document read(java.io.Reader,java.lang.String)"
        ]
    },
    "org.dom4j.DocumentHelper:org.dom4j.Document parseText(java.lang.String)": {
        "isVulRoot": true,
        "vulCaller": [
            "org.dom4j.io.HTMLWriter:java.lang.String prettyPrintHTML(java.lang.String,boolean,boolean,boolean,boolean)"
        ]
    },
    "org.dom4j.io.SAXReader:org.xml.sax.XMLReader createXMLReader()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.SAXReader:org.xml.sax.XMLReader getXMLReader()"
        ]
    },
    "org.dom4j.io.SAXValidator:org.xml.sax.XMLReader createXMLReader()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.SAXValidator:org.xml.sax.XMLReader getXMLReader()"
        ]
    },
    "org.dom4j.DocumentHelper:org.dom4j.Document parseText(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.dom4j.datatype.DatatypeDocumentFactory:void loadSchema(org.dom4j.Document,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.datatype.DatatypeDocumentFactory:org.dom4j.Attribute createAttribute(org.dom4j.Element,org.dom4j.QName,java.lang.String)"
        ]
    },
    "org.dom4j.datatype.DatatypeDocumentFactory:void loadSchema(org.dom4j.Document,java.lang.String,org.dom4j.Namespace)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.datatype.DatatypeDocumentFactory:org.dom4j.Attribute createAttribute(org.dom4j.Element,org.dom4j.QName,java.lang.String)"
        ]
    },
    "org.dom4j.datatype.SchemaParser:void internalBuild(org.dom4j.Document)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.datatype.SchemaParser:void build(org.dom4j.Document)",
            "org.dom4j.datatype.SchemaParser:void build(org.dom4j.Document,org.dom4j.Namespace)"
        ]
    },
    "org.dom4j.io.HTMLWriter:java.lang.String prettyPrintHTML(java.lang.String,boolean,boolean,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.HTMLWriter:java.lang.String prettyPrintHTML(java.lang.String)",
            "org.dom4j.io.HTMLWriter:java.lang.String prettyPrintXHTML(java.lang.String)"
        ]
    },
    "org.dom4j.io.SAXReader:org.xml.sax.XMLReader getXMLReader()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.SAXReader:void setProperty(java.lang.String,java.lang.Object)",
            "org.dom4j.io.SAXReader:void setFeature(java.lang.String,boolean)",
            "org.dom4j.io.SAXReader:org.dom4j.Document read(org.xml.sax.InputSource)"
        ]
    },
    "org.dom4j.io.SAXValidator:org.xml.sax.XMLReader getXMLReader()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.SAXValidator:void validate(org.dom4j.Document)"
        ]
    },
    "org.dom4j.datatype.DatatypeDocumentFactory:org.dom4j.Attribute createAttribute(org.dom4j.Element,org.dom4j.QName,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.dom.DOMDocument:org.w3c.dom.Attr createAttribute(java.lang.String)",
            "org.dom4j.dom.DOMDocument:org.w3c.dom.Attr createAttributeNS(java.lang.String,java.lang.String)",
            "org.dom4j.io.STAXEventReader:org.dom4j.Attribute createAttribute(org.dom4j.Element,javax.xml.stream.events.Attribute)",
            "org.dom4j.tree.AbstractElement:void setAttributes(org.xml.sax.Attributes,org.dom4j.tree.NamespaceStack,boolean)",
            "org.dom4j.tree.AbstractElement:org.dom4j.Element addAttribute(org.dom4j.QName,java.lang.String)",
            "org.dom4j.util.ProxyDocumentFactory:org.dom4j.Attribute createAttribute(org.dom4j.Element,org.dom4j.QName,java.lang.String)",
            "org.dom4j.DocumentFactory:org.dom4j.Attribute createAttribute(org.dom4j.Element,java.lang.String,java.lang.String)",
            "org.dom4j.DocumentHelper:org.dom4j.Attribute createAttribute(org.dom4j.Element,org.dom4j.QName,java.lang.String)"
        ]
    },
    "org.dom4j.datatype.SchemaParser:void build(org.dom4j.Document)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.datatype.DatatypeDocumentFactory:void loadSchema(org.dom4j.Document)",
            "org.dom4j.datatype.SchemaParser:void internalBuild(org.dom4j.Document)"
        ]
    },
    "org.dom4j.datatype.SchemaParser:void build(org.dom4j.Document,org.dom4j.Namespace)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.datatype.DatatypeDocumentFactory:void loadSchema(org.dom4j.Document,org.dom4j.Namespace)"
        ]
    },
    "org.dom4j.io.HTMLWriter:java.lang.String prettyPrintHTML(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.dom4j.io.HTMLWriter:java.lang.String prettyPrintXHTML(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.dom4j.io.SAXReader:void setProperty(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.dom4j.io.SAXReader:void setFeature(java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.dom4j.io.SAXValidator:void validate(org.dom4j.Document)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.dom4j.dom.DOMDocument:org.w3c.dom.Attr createAttribute(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.dom4j.dom.DOMDocument:org.w3c.dom.Attr createAttributeNS(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.dom4j.io.STAXEventReader:org.dom4j.Attribute createAttribute(org.dom4j.Element,javax.xml.stream.events.Attribute)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.STAXEventReader:org.dom4j.Attribute readAttribute(javax.xml.stream.XMLEventReader)"
        ]
    },
    "org.dom4j.tree.AbstractElement:void setAttributes(org.xml.sax.Attributes,org.dom4j.tree.NamespaceStack,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.SAXContentHandler:void addAttributes(org.dom4j.Element,org.xml.sax.Attributes)"
        ]
    },
    "org.dom4j.tree.AbstractElement:org.dom4j.Element addAttribute(org.dom4j.QName,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.dom.DOMElement:void setAttributeNS(java.lang.String,java.lang.String,java.lang.String)",
            "org.dom4j.io.DOMReader:void readElement(org.w3c.dom.Node,org.dom4j.Branch)",
            "org.dom4j.io.SAXContentHandler:void addAttributes(org.dom4j.Element,org.xml.sax.Attributes)",
            "org.dom4j.io.STAXEventReader:org.dom4j.Element createElement(javax.xml.stream.events.StartElement)",
            "org.dom4j.tree.AbstractElement:void setAttributeValue(org.dom4j.QName,java.lang.String)",
            "org.dom4j.tree.AbstractElement:void appendAttributes(org.dom4j.Element)",
            "org.dom4j.xpp.ProxyXmlStartTag:void addAttribute(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
            "org.dom4j.xpp.ProxyXmlStartTag:void addAttribute(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)"
        ]
    },
    "org.dom4j.util.ProxyDocumentFactory:org.dom4j.Attribute createAttribute(org.dom4j.Element,org.dom4j.QName,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.dom4j.DocumentFactory:org.dom4j.Attribute createAttribute(org.dom4j.Element,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.tree.AbstractElement:org.dom4j.Element addAttribute(java.lang.String,java.lang.String)",
            "org.dom4j.util.ProxyDocumentFactory:org.dom4j.Attribute createAttribute(org.dom4j.Element,java.lang.String,java.lang.String)",
            "org.dom4j.DocumentHelper:org.dom4j.Attribute createAttribute(org.dom4j.Element,java.lang.String,java.lang.String)"
        ]
    },
    "org.dom4j.DocumentHelper:org.dom4j.Attribute createAttribute(org.dom4j.Element,org.dom4j.QName,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.dom4j.datatype.DatatypeDocumentFactory:void loadSchema(org.dom4j.Document)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.datatype.DatatypeDocumentFactory:void loadSchema(org.dom4j.Document,java.lang.String)"
        ]
    },
    "org.dom4j.datatype.DatatypeDocumentFactory:void loadSchema(org.dom4j.Document,org.dom4j.Namespace)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.datatype.DatatypeDocumentFactory:void loadSchema(org.dom4j.Document,java.lang.String,org.dom4j.Namespace)"
        ]
    },
    "org.dom4j.io.STAXEventReader:org.dom4j.Attribute readAttribute(javax.xml.stream.XMLEventReader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.STAXEventReader:org.dom4j.Node readNode(javax.xml.stream.XMLEventReader)"
        ]
    },
    "org.dom4j.io.SAXContentHandler:void addAttributes(org.dom4j.Element,org.xml.sax.Attributes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.SAXContentHandler:void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)"
        ]
    },
    "org.dom4j.dom.DOMElement:void setAttributeNS(java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.DOMWriter:void appendDOMTree(org.w3c.dom.Document,org.w3c.dom.Node,org.dom4j.Element)"
        ]
    },
    "org.dom4j.io.DOMReader:void readElement(org.w3c.dom.Node,org.dom4j.Branch)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.DOMReader:void readTree(org.w3c.dom.Node,org.dom4j.Branch)"
        ]
    },
    "org.dom4j.io.STAXEventReader:org.dom4j.Element createElement(javax.xml.stream.events.StartElement)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.STAXEventReader:org.dom4j.Element readElement(javax.xml.stream.XMLEventReader)"
        ]
    },
    "org.dom4j.tree.AbstractElement:void setAttributeValue(org.dom4j.QName,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.dom4j.tree.AbstractElement:void appendAttributes(org.dom4j.Element)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.tree.AbstractElement:org.dom4j.Element createCopy()",
            "org.dom4j.tree.AbstractElement:org.dom4j.Element createCopy(java.lang.String)",
            "org.dom4j.tree.AbstractElement:org.dom4j.Element createCopy(org.dom4j.QName)",
            "org.dom4j.tree.DefaultElement:java.lang.Object clone()"
        ]
    },
    "org.dom4j.xpp.ProxyXmlStartTag:void addAttribute(java.lang.String,java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.dom4j.xpp.ProxyXmlStartTag:void addAttribute(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.dom4j.tree.AbstractElement:org.dom4j.Element addAttribute(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.dom.DOMElement:void setAttribute(java.lang.String,java.lang.String)",
            "org.dom4j.tree.AbstractElement:void setAttributeValue(java.lang.String,java.lang.String)",
            "org.dom4j.util.XMLErrorHandler:void addException(org.dom4j.Element,org.xml.sax.SAXParseException)"
        ]
    },
    "org.dom4j.util.ProxyDocumentFactory:org.dom4j.Attribute createAttribute(org.dom4j.Element,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.dom4j.DocumentHelper:org.dom4j.Attribute createAttribute(org.dom4j.Element,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.dom4j.io.STAXEventReader:org.dom4j.Node readNode(javax.xml.stream.XMLEventReader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.STAXEventReader:org.dom4j.Document readDocument(javax.xml.stream.XMLEventReader)",
            "org.dom4j.io.STAXEventReader:org.dom4j.Element readElement(javax.xml.stream.XMLEventReader)"
        ]
    },
    "org.dom4j.io.SAXContentHandler:void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred.SAXDriver:void startElement(java.lang.String)",
            "org.dom4j.io.aelfred2.SAXDriver:void startElement(java.lang.String)",
            "org.dom4j.io.SAXWriter:void startElement(org.dom4j.Element,org.xml.sax.helpers.AttributesImpl)"
        ]
    },
    "org.dom4j.io.DOMWriter:void appendDOMTree(org.w3c.dom.Document,org.w3c.dom.Node,org.dom4j.Element)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.DOMWriter:void appendDOMTree(org.w3c.dom.Document,org.w3c.dom.Node,java.util.List)"
        ]
    },
    "org.dom4j.io.DOMReader:void readTree(org.w3c.dom.Node,org.dom4j.Branch)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.DOMReader:org.dom4j.Document read(org.w3c.dom.Document)",
            "org.dom4j.io.DOMReader:void readElement(org.w3c.dom.Node,org.dom4j.Branch)"
        ]
    },
    "org.dom4j.io.STAXEventReader:org.dom4j.Element readElement(javax.xml.stream.XMLEventReader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.STAXEventReader:org.dom4j.Node readNode(javax.xml.stream.XMLEventReader)"
        ]
    },
    "org.dom4j.tree.AbstractElement:org.dom4j.Element createCopy()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.dom4j.tree.AbstractElement:org.dom4j.Element createCopy(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.dom4j.tree.AbstractElement:org.dom4j.Element createCopy(org.dom4j.QName)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.dom4j.tree.DefaultElement:java.lang.Object clone()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.dom.DOMNodeHelper:org.w3c.dom.Node cloneNode(org.dom4j.Node,boolean)",
            "org.dom4j.tree.AbstractBranch:void appendContent(org.dom4j.Branch)",
            "org.dom4j.tree.DefaultDocument:void setContent(java.util.List)",
            "org.dom4j.tree.DefaultElement:void setContent(java.util.List)",
            "org.dom4j.util.UserDataElement:java.lang.Object clone()"
        ]
    },
    "org.dom4j.dom.DOMElement:void setAttribute(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.DOMWriter:void writeNamespace(org.w3c.dom.Element,org.dom4j.Namespace)"
        ]
    },
    "org.dom4j.tree.AbstractElement:void setAttributeValue(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.dom4j.util.XMLErrorHandler:void addException(org.dom4j.Element,org.xml.sax.SAXParseException)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.util.XMLErrorHandler:void error(org.xml.sax.SAXParseException)",
            "org.dom4j.util.XMLErrorHandler:void fatalError(org.xml.sax.SAXParseException)",
            "org.dom4j.util.XMLErrorHandler:void warning(org.xml.sax.SAXParseException)"
        ]
    },
    "org.dom4j.io.STAXEventReader:org.dom4j.Document readDocument(javax.xml.stream.XMLEventReader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.STAXEventReader:org.dom4j.Document readDocument(java.io.InputStream,java.lang.String)",
            "org.dom4j.io.STAXEventReader:org.dom4j.Document readDocument(java.io.Reader,java.lang.String)",
            "org.dom4j.io.STAXEventReader:org.dom4j.Node readNode(javax.xml.stream.XMLEventReader)"
        ]
    },
    "org.dom4j.io.aelfred.SAXDriver:void startElement(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred.XmlParser:void parseElement()"
        ]
    },
    "org.dom4j.io.aelfred2.SAXDriver:void startElement(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred2.XmlParser:void parseElement(boolean)"
        ]
    },
    "org.dom4j.io.SAXWriter:void startElement(org.dom4j.Element,org.xml.sax.helpers.AttributesImpl)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.SAXWriter:void writeOpen(org.dom4j.Element)",
            "org.dom4j.io.SAXWriter:void write(org.dom4j.Element,org.dom4j.tree.NamespaceStack)"
        ]
    },
    "org.dom4j.io.DOMWriter:void appendDOMTree(org.w3c.dom.Document,org.w3c.dom.Node,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.DOMWriter:org.w3c.dom.Document write(org.dom4j.Document)",
            "org.dom4j.io.DOMWriter:org.w3c.dom.Document write(org.dom4j.Document,org.w3c.dom.DOMImplementation)",
            "org.dom4j.io.DOMWriter:void appendDOMTree(org.w3c.dom.Document,org.w3c.dom.Node,org.dom4j.Element)"
        ]
    },
    "org.dom4j.io.DOMReader:org.dom4j.Document read(org.w3c.dom.Document)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.dom4j.dom.DOMNodeHelper:org.w3c.dom.Node cloneNode(org.dom4j.Node,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.dom.DOMAttribute:org.w3c.dom.Node cloneNode(boolean)",
            "org.dom4j.dom.DOMCDATA:org.w3c.dom.Node cloneNode(boolean)",
            "org.dom4j.dom.DOMComment:org.w3c.dom.Node cloneNode(boolean)",
            "org.dom4j.dom.DOMDocument:org.w3c.dom.Node cloneNode(boolean)",
            "org.dom4j.dom.DOMDocumentType:org.w3c.dom.Node cloneNode(boolean)",
            "org.dom4j.dom.DOMElement:org.w3c.dom.Node cloneNode(boolean)",
            "org.dom4j.dom.DOMEntityReference:org.w3c.dom.Node cloneNode(boolean)",
            "org.dom4j.dom.DOMNamespace:org.w3c.dom.Node cloneNode(boolean)",
            "org.dom4j.dom.DOMProcessingInstruction:org.w3c.dom.Node cloneNode(boolean)",
            "org.dom4j.dom.DOMText:org.w3c.dom.Node cloneNode(boolean)"
        ]
    },
    "org.dom4j.tree.AbstractBranch:void appendContent(org.dom4j.Branch)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.tree.AbstractElement:org.dom4j.Element createCopy()",
            "org.dom4j.tree.AbstractElement:org.dom4j.Element createCopy(java.lang.String)",
            "org.dom4j.tree.AbstractElement:org.dom4j.Element createCopy(org.dom4j.QName)",
            "org.dom4j.tree.DefaultDocument:java.lang.Object clone()",
            "org.dom4j.tree.DefaultElement:java.lang.Object clone()"
        ]
    },
    "org.dom4j.tree.DefaultDocument:void setContent(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.dom4j.tree.DefaultElement:void setContent(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.dom4j.util.UserDataElement:java.lang.Object clone()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.dom.DOMNodeHelper:org.w3c.dom.Node cloneNode(org.dom4j.Node,boolean)",
            "org.dom4j.tree.AbstractBranch:void appendContent(org.dom4j.Branch)",
            "org.dom4j.tree.DefaultDocument:void setContent(java.util.List)",
            "org.dom4j.tree.DefaultElement:void setContent(java.util.List)"
        ]
    },
    "org.dom4j.io.DOMWriter:void writeNamespace(org.w3c.dom.Element,org.dom4j.Namespace)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.DOMWriter:void appendDOMTree(org.w3c.dom.Document,org.w3c.dom.Node,org.dom4j.Element)"
        ]
    },
    "org.dom4j.util.XMLErrorHandler:void error(org.xml.sax.SAXParseException)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred.SAXDriver:void attribute(java.lang.String,java.lang.String,boolean)",
            "org.dom4j.io.aelfred.SAXDriver:void startElement(java.lang.String)",
            "org.dom4j.io.aelfred2.SAXDriver:void verror(java.lang.String)"
        ]
    },
    "org.dom4j.util.XMLErrorHandler:void fatalError(org.xml.sax.SAXParseException)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred.SAXDriver:void error(java.lang.String,java.lang.String,int,int)",
            "org.dom4j.io.aelfred.SAXDriver:void deliverDTDEvents()",
            "org.dom4j.io.aelfred2.SAXDriver:void fatal(java.lang.String)"
        ]
    },
    "org.dom4j.util.XMLErrorHandler:void warning(org.xml.sax.SAXParseException)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred2.SAXDriver:void warn(java.lang.String)"
        ]
    },
    "org.dom4j.io.STAXEventReader:org.dom4j.Document readDocument(java.io.InputStream,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.STAXEventReader:org.dom4j.Document readDocument(java.io.InputStream)"
        ]
    },
    "org.dom4j.io.STAXEventReader:org.dom4j.Document readDocument(java.io.Reader,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.STAXEventReader:org.dom4j.Document readDocument(java.io.Reader)"
        ]
    },
    "org.dom4j.io.aelfred.XmlParser:void parseElement()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred.XmlParser:void parseDocument()",
            "org.dom4j.io.aelfred.XmlParser:void parseContent()"
        ]
    },
    "org.dom4j.io.aelfred2.XmlParser:void parseElement(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred2.XmlParser:void parseDocument()",
            "org.dom4j.io.aelfred2.XmlParser:void parseContent()"
        ]
    },
    "org.dom4j.io.SAXWriter:void writeOpen(org.dom4j.Element)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.dom4j.io.SAXWriter:void write(org.dom4j.Element,org.dom4j.tree.NamespaceStack)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.SAXWriter:void write(org.dom4j.Element)",
            "org.dom4j.io.SAXWriter:void writeContent(org.dom4j.Branch,org.dom4j.tree.NamespaceStack)"
        ]
    },
    "org.dom4j.io.DOMWriter:org.w3c.dom.Document write(org.dom4j.Document)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.dom4j.io.DOMWriter:org.w3c.dom.Document write(org.dom4j.Document,org.w3c.dom.DOMImplementation)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.dom4j.dom.DOMAttribute:org.w3c.dom.Node cloneNode(boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.dom4j.dom.DOMCDATA:org.w3c.dom.Node cloneNode(boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.dom4j.dom.DOMComment:org.w3c.dom.Node cloneNode(boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.dom4j.dom.DOMDocument:org.w3c.dom.Node cloneNode(boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.dom4j.dom.DOMDocumentType:org.w3c.dom.Node cloneNode(boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.dom4j.dom.DOMElement:org.w3c.dom.Node cloneNode(boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.dom4j.dom.DOMEntityReference:org.w3c.dom.Node cloneNode(boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.dom4j.dom.DOMNamespace:org.w3c.dom.Node cloneNode(boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.dom4j.dom.DOMProcessingInstruction:org.w3c.dom.Node cloneNode(boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.dom4j.dom.DOMText:org.w3c.dom.Node cloneNode(boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.dom4j.tree.DefaultDocument:java.lang.Object clone()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.dom.DOMNodeHelper:org.w3c.dom.Node cloneNode(org.dom4j.Node,boolean)",
            "org.dom4j.tree.AbstractBranch:void appendContent(org.dom4j.Branch)",
            "org.dom4j.tree.DefaultDocument:void setContent(java.util.List)",
            "org.dom4j.tree.DefaultElement:void setContent(java.util.List)"
        ]
    },
    "org.dom4j.io.aelfred.SAXDriver:void attribute(java.lang.String,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred.XmlParser:void parseElement()",
            "org.dom4j.io.aelfred.XmlParser:void parseAttribute(java.lang.String)"
        ]
    },
    "org.dom4j.io.aelfred2.SAXDriver:void verror(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred2.SAXDriver:void attribute(java.lang.String,java.lang.String,boolean)",
            "org.dom4j.io.aelfred2.SAXDriver:void startElement(java.lang.String)",
            "org.dom4j.io.aelfred2.XmlParser:void parseMarkupdecl()",
            "org.dom4j.io.aelfred2.XmlParser:void parseElements(char[])",
            "org.dom4j.io.aelfred2.XmlParser:void parseMixed(char[])",
            "org.dom4j.io.aelfred2.XmlParser:void parseConditionalSect(char[])",
            "org.dom4j.io.aelfred2.XmlParser:void parseEntityRef(boolean)",
            "org.dom4j.io.aelfred2.XmlParser:void parsePEReference()",
            "org.dom4j.io.aelfred2.XmlParser:java.lang.String[] readExternalIds(boolean,boolean)",
            "org.dom4j.io.aelfred2.XmlParser:void setElement(java.lang.String,int,java.lang.String,java.util.Hashtable)",
            "org.dom4j.io.aelfred2.XmlParser:void setNotation(java.lang.String,java.lang.String[])"
        ]
    },
    "org.dom4j.io.aelfred.SAXDriver:void error(java.lang.String,java.lang.String,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred.XmlParser:void error(java.lang.String,java.lang.String,java.lang.String)",
            "org.dom4j.io.aelfred.XmlParser:void encodingError(java.lang.String,int,int)"
        ]
    },
    "org.dom4j.io.aelfred.SAXDriver:void deliverDTDEvents()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred.SAXDriver:void endDoctype()"
        ]
    },
    "org.dom4j.io.aelfred2.SAXDriver:void fatal(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred2.XmlParser:void error(java.lang.String,java.lang.String,java.lang.String)",
            "org.dom4j.io.aelfred2.XmlParser:void error(java.lang.String)"
        ]
    },
    "org.dom4j.io.aelfred2.SAXDriver:void warn(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred2.SAXDriver:java.lang.String absolutize(java.lang.String,java.lang.String,boolean)",
            "org.dom4j.io.aelfred2.SAXDriver:void declarePrefix(java.lang.String,java.lang.String)",
            "org.dom4j.io.aelfred2.XmlParser:java.lang.String parseXMLDecl(boolean)",
            "org.dom4j.io.aelfred2.XmlParser:java.lang.String parseTextDecl(boolean)",
            "org.dom4j.io.aelfred2.XmlParser:void parseDoctypedecl()",
            "org.dom4j.io.aelfred2.XmlParser:void parseElement(boolean)",
            "org.dom4j.io.aelfred2.XmlParser:java.lang.String[] readExternalIds(boolean,boolean)",
            "org.dom4j.io.aelfred2.XmlParser:void pushURL(boolean,java.lang.String,java.lang.String[],java.io.Reader,java.io.InputStream,java.lang.String,boolean)"
        ]
    },
    "org.dom4j.io.STAXEventReader:org.dom4j.Document readDocument(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.dom4j.io.STAXEventReader:org.dom4j.Document readDocument(java.io.Reader)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.dom4j.io.aelfred.XmlParser:void parseDocument()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred.XmlParser:void doParse(java.lang.String,java.lang.String,java.io.Reader,java.io.InputStream,java.lang.String)"
        ]
    },
    "org.dom4j.io.aelfred.XmlParser:void parseContent()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred.XmlParser:void parseElement()"
        ]
    },
    "org.dom4j.io.aelfred2.XmlParser:void parseDocument()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred2.XmlParser:void doParse(java.lang.String,java.lang.String,java.io.Reader,java.io.InputStream,java.lang.String)"
        ]
    },
    "org.dom4j.io.aelfred2.XmlParser:void parseContent()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred2.XmlParser:void parseElement(boolean)"
        ]
    },
    "org.dom4j.io.SAXWriter:void write(org.dom4j.Element)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.SAXWriter:void write(org.dom4j.Node)"
        ]
    },
    "org.dom4j.io.SAXWriter:void writeContent(org.dom4j.Branch,org.dom4j.tree.NamespaceStack)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.SAXWriter:void write(org.dom4j.Document)",
            "org.dom4j.io.SAXWriter:void write(org.dom4j.Element,org.dom4j.tree.NamespaceStack)"
        ]
    },
    "org.dom4j.io.aelfred.XmlParser:void parseAttribute(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred.XmlParser:void parseElement()"
        ]
    },
    "org.dom4j.io.aelfred2.SAXDriver:void attribute(java.lang.String,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred2.XmlParser:void parseElement(boolean)",
            "org.dom4j.io.aelfred2.XmlParser:void parseAttribute(java.lang.String)"
        ]
    },
    "org.dom4j.io.aelfred2.XmlParser:void parseMarkupdecl()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred2.XmlParser:void parseDoctypedecl()",
            "org.dom4j.io.aelfred2.XmlParser:void parseElement(boolean)",
            "org.dom4j.io.aelfred2.XmlParser:void parseConditionalSect(char[])"
        ]
    },
    "org.dom4j.io.aelfred2.XmlParser:void parseElements(char[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred2.XmlParser:void parseContentspec(java.lang.String)",
            "org.dom4j.io.aelfred2.XmlParser:void parseCp()"
        ]
    },
    "org.dom4j.io.aelfred2.XmlParser:void parseMixed(char[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred2.XmlParser:void parseContentspec(java.lang.String)"
        ]
    },
    "org.dom4j.io.aelfred2.XmlParser:void parseConditionalSect(char[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred2.XmlParser:void parseMarkupdecl()"
        ]
    },
    "org.dom4j.io.aelfred2.XmlParser:void parseEntityRef(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred2.XmlParser:void parseContent()",
            "org.dom4j.io.aelfred2.XmlParser:java.lang.String readLiteral(int)"
        ]
    },
    "org.dom4j.io.aelfred2.XmlParser:void parsePEReference()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred2.XmlParser:char readCh()"
        ]
    },
    "org.dom4j.io.aelfred2.XmlParser:java.lang.String[] readExternalIds(boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred2.XmlParser:void parseDoctypedecl()",
            "org.dom4j.io.aelfred2.XmlParser:void parseEntityDecl()",
            "org.dom4j.io.aelfred2.XmlParser:void parseNotationDecl()"
        ]
    },
    "org.dom4j.io.aelfred2.XmlParser:void setElement(java.lang.String,int,java.lang.String,java.util.Hashtable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred2.XmlParser:void parseContentspec(java.lang.String)",
            "org.dom4j.io.aelfred2.XmlParser:void setAttribute(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int)"
        ]
    },
    "org.dom4j.io.aelfred2.XmlParser:void setNotation(java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred2.XmlParser:void parseNotationDecl()"
        ]
    },
    "org.dom4j.io.aelfred.XmlParser:void error(java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred.XmlParser:void error(java.lang.String,char,java.lang.String)",
            "org.dom4j.io.aelfred.XmlParser:void error(java.lang.String)",
            "org.dom4j.io.aelfred.XmlParser:void parseDocument()",
            "org.dom4j.io.aelfred.XmlParser:void parsePI()",
            "org.dom4j.io.aelfred.XmlParser:java.lang.String parseXMLDecl(boolean)",
            "org.dom4j.io.aelfred.XmlParser:java.lang.String parseTextDecl(boolean)",
            "org.dom4j.io.aelfred.XmlParser:void setupDecoding(java.lang.String)",
            "org.dom4j.io.aelfred.XmlParser:void parseAttribute(java.lang.String)",
            "org.dom4j.io.aelfred.XmlParser:int readAttType()",
            "org.dom4j.io.aelfred.XmlParser:void parseCharRef()",
            "org.dom4j.io.aelfred.XmlParser:void parseEntityRef(boolean)",
            "org.dom4j.io.aelfred.XmlParser:void parseEntityDecl()",
            "org.dom4j.io.aelfred.XmlParser:void parseNotationDecl()",
            "org.dom4j.io.aelfred.XmlParser:java.lang.String readLiteral(int)",
            "org.dom4j.io.aelfred.XmlParser:void require(java.lang.String)",
            "org.dom4j.io.aelfred.XmlParser:void pushInput(java.lang.String)",
            "org.dom4j.io.aelfred.XmlParser:void parseUntil(java.lang.String)",
            "org.dom4j.io.aelfred.XmlParser:void read8bitEncodingDeclaration()"
        ]
    },
    "org.dom4j.io.aelfred.XmlParser:void encodingError(java.lang.String,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred.XmlParser:void copyUtf8ReadBuffer(int)",
            "org.dom4j.io.aelfred.XmlParser:int getNextUtf8Byte(int,int)",
            "org.dom4j.io.aelfred.XmlParser:void copyUcs2ReadBuffer(int,int,int)",
            "org.dom4j.io.aelfred.XmlParser:void copyUcs4ReadBuffer(int,int,int,int,int)"
        ]
    },
    "org.dom4j.io.aelfred.SAXDriver:void endDoctype()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred.XmlParser:void parseDoctypedecl()"
        ]
    },
    "org.dom4j.io.aelfred2.XmlParser:void error(java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred2.XmlParser:void error(java.lang.String,char,java.lang.String)",
            "org.dom4j.io.aelfred2.XmlParser:void parseDocument()",
            "org.dom4j.io.aelfred2.XmlParser:void parsePI()",
            "org.dom4j.io.aelfred2.XmlParser:void checkLegalVersion(java.lang.String)",
            "org.dom4j.io.aelfred2.XmlParser:void setupDecoding(java.lang.String)",
            "org.dom4j.io.aelfred2.XmlParser:void parseAttribute(java.lang.String)",
            "org.dom4j.io.aelfred2.XmlParser:java.lang.String readAttType()",
            "org.dom4j.io.aelfred2.XmlParser:void parseCharRef(boolean)",
            "org.dom4j.io.aelfred2.XmlParser:void parseEntityRef(boolean)",
            "org.dom4j.io.aelfred2.XmlParser:java.lang.String readLiteral(int)",
            "org.dom4j.io.aelfred2.XmlParser:void require(java.lang.String)",
            "org.dom4j.io.aelfred2.XmlParser:void pushURL(boolean,java.lang.String,java.lang.String[],java.io.Reader,java.io.InputStream,java.lang.String,boolean)",
            "org.dom4j.io.aelfred2.XmlParser:void pushInput(java.lang.String)",
            "org.dom4j.io.aelfred2.XmlParser:void parseUntil(char[])",
            "org.dom4j.io.aelfred2.XmlParser:void prefetchASCIIEncodingDecl()"
        ]
    },
    "org.dom4j.io.aelfred2.XmlParser:void error(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred2.XmlParser:java.lang.String parseXMLDecl(boolean)",
            "org.dom4j.io.aelfred2.XmlParser:void parseDoctypedecl()",
            "org.dom4j.io.aelfred2.XmlParser:void parseMarkupdecl()",
            "org.dom4j.io.aelfred2.XmlParser:void parseElement(boolean)",
            "org.dom4j.io.aelfred2.XmlParser:void parseAttlistDecl()",
            "org.dom4j.io.aelfred2.XmlParser:void parseDefault(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
            "org.dom4j.io.aelfred2.XmlParser:void parseConditionalSect(char[])",
            "org.dom4j.io.aelfred2.XmlParser:void parseCharRef(boolean)",
            "org.dom4j.io.aelfred2.XmlParser:void parseEntityRef(boolean)",
            "org.dom4j.io.aelfred2.XmlParser:void parseEntityDecl()",
            "org.dom4j.io.aelfred2.XmlParser:void parseCharData()",
            "org.dom4j.io.aelfred2.XmlParser:java.lang.String readNmtoken(boolean)",
            "org.dom4j.io.aelfred2.XmlParser:java.lang.String readLiteral(int)",
            "org.dom4j.io.aelfred2.XmlParser:java.lang.String[] readExternalIds(boolean,boolean)",
            "org.dom4j.io.aelfred2.XmlParser:char readCh()",
            "org.dom4j.io.aelfred2.XmlParser:void pushURL(boolean,java.lang.String,java.lang.String[],java.io.Reader,java.io.InputStream,java.lang.String,boolean)",
            "org.dom4j.io.aelfred2.XmlParser:void detectEncoding()",
            "org.dom4j.io.aelfred2.XmlParser:void prefetchASCIIEncodingDecl()",
            "org.dom4j.io.aelfred2.XmlParser:void encodingError(java.lang.String,int,int)"
        ]
    },
    "org.dom4j.io.aelfred2.SAXDriver:java.lang.String absolutize(java.lang.String,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred2.SAXDriver:org.xml.sax.InputSource resolveEntity(boolean,java.lang.String,org.xml.sax.InputSource,java.lang.String)",
            "org.dom4j.io.aelfred2.SAXDriver:void notationDecl(java.lang.String,java.lang.String[])",
            "org.dom4j.io.aelfred2.SAXDriver:void unparsedEntityDecl(java.lang.String,java.lang.String[],java.lang.String)",
            "org.dom4j.io.aelfred2.XmlParser:void parseEntityDecl()"
        ]
    },
    "org.dom4j.io.aelfred2.SAXDriver:void declarePrefix(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred2.SAXDriver:void attribute(java.lang.String,java.lang.String,boolean)"
        ]
    },
    "org.dom4j.io.aelfred2.XmlParser:java.lang.String parseXMLDecl(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred2.XmlParser:java.lang.String tryEncodingDecl(boolean)"
        ]
    },
    "org.dom4j.io.aelfred2.XmlParser:java.lang.String parseTextDecl(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred2.XmlParser:java.lang.String tryEncodingDecl(boolean)"
        ]
    },
    "org.dom4j.io.aelfred2.XmlParser:void parseDoctypedecl()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred2.XmlParser:boolean parseProlog()"
        ]
    },
    "org.dom4j.io.aelfred2.XmlParser:void pushURL(boolean,java.lang.String,java.lang.String[],java.io.Reader,java.io.InputStream,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred2.XmlParser:void doParse(java.lang.String,java.lang.String,java.io.Reader,java.io.InputStream,java.lang.String)",
            "org.dom4j.io.aelfred2.XmlParser:void parseDoctypedecl()",
            "org.dom4j.io.aelfred2.XmlParser:void parseElement(boolean)",
            "org.dom4j.io.aelfred2.XmlParser:void parseEntityRef(boolean)",
            "org.dom4j.io.aelfred2.XmlParser:void parsePEReference()"
        ]
    },
    "org.dom4j.io.aelfred.XmlParser:void doParse(java.lang.String,java.lang.String,java.io.Reader,java.io.InputStream,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred.SAXDriver:void parse(org.xml.sax.InputSource)"
        ]
    },
    "org.dom4j.io.aelfred2.XmlParser:void doParse(java.lang.String,java.lang.String,java.io.Reader,java.io.InputStream,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred2.SAXDriver:void parse(org.xml.sax.InputSource)"
        ]
    },
    "org.dom4j.io.SAXWriter:void write(org.dom4j.Node)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.SAXWriter:void write(org.dom4j.Node)"
        ]
    },
    "org.dom4j.io.SAXWriter:void write(org.dom4j.Document)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.SAXWriter:void write(org.dom4j.Node)",
            "org.dom4j.io.SAXWriter:void parse(org.xml.sax.InputSource)"
        ]
    },
    "org.dom4j.io.aelfred2.XmlParser:void parseAttribute(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred2.XmlParser:void parseElement(boolean)"
        ]
    },
    "org.dom4j.io.aelfred2.XmlParser:void parseContentspec(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred2.XmlParser:void parseElementDecl()"
        ]
    },
    "org.dom4j.io.aelfred2.XmlParser:void parseCp()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred2.XmlParser:void parseElements(char[])"
        ]
    },
    "org.dom4j.io.aelfred2.XmlParser:java.lang.String readLiteral(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred2.XmlParser:java.lang.String parseXMLDecl(boolean)",
            "org.dom4j.io.aelfred2.XmlParser:java.lang.String parseTextDecl(boolean)",
            "org.dom4j.io.aelfred2.XmlParser:void parseAttribute(java.lang.String)",
            "org.dom4j.io.aelfred2.XmlParser:void parseDefault(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
            "org.dom4j.io.aelfred2.XmlParser:void parseEntityDecl()",
            "org.dom4j.io.aelfred2.XmlParser:java.lang.String[] readExternalIds(boolean,boolean)"
        ]
    },
    "org.dom4j.io.aelfred2.XmlParser:char readCh()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred2.XmlParser:void parseDocument()",
            "org.dom4j.io.aelfred2.XmlParser:void parseElement(boolean)",
            "org.dom4j.io.aelfred2.XmlParser:void parseContent()",
            "org.dom4j.io.aelfred2.XmlParser:void parseElements(char[])",
            "org.dom4j.io.aelfred2.XmlParser:void parseCp()",
            "org.dom4j.io.aelfred2.XmlParser:void parseConditionalSect(char[])",
            "org.dom4j.io.aelfred2.XmlParser:void parseCharRef(boolean)",
            "org.dom4j.io.aelfred2.XmlParser:void parseEntityDecl()",
            "org.dom4j.io.aelfred2.XmlParser:void parseCharData()",
            "org.dom4j.io.aelfred2.XmlParser:void requireWhitespace()",
            "org.dom4j.io.aelfred2.XmlParser:void skipWhitespace()",
            "org.dom4j.io.aelfred2.XmlParser:java.lang.String readNmtoken(boolean)",
            "org.dom4j.io.aelfred2.XmlParser:java.lang.String readLiteral(int)",
            "org.dom4j.io.aelfred2.XmlParser:java.lang.String[] readExternalIds(boolean,boolean)",
            "org.dom4j.io.aelfred2.XmlParser:void require(char)",
            "org.dom4j.io.aelfred2.XmlParser:char readCh()",
            "org.dom4j.io.aelfred2.XmlParser:boolean tryRead(char)",
            "org.dom4j.io.aelfred2.XmlParser:boolean tryRead(char[])",
            "org.dom4j.io.aelfred2.XmlParser:boolean tryWhitespace()",
            "org.dom4j.io.aelfred2.XmlParser:void parseUntil(char[])"
        ]
    },
    "org.dom4j.io.aelfred2.XmlParser:void parseEntityDecl()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred2.XmlParser:void parseMarkupdecl()"
        ]
    },
    "org.dom4j.io.aelfred2.XmlParser:void parseNotationDecl()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred2.XmlParser:void parseMarkupdecl()"
        ]
    },
    "org.dom4j.io.aelfred2.XmlParser:void setAttribute(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred2.XmlParser:void parseDefault(java.lang.String,java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "org.dom4j.io.aelfred.XmlParser:void error(java.lang.String,char,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred.XmlParser:void parseDocument()",
            "org.dom4j.io.aelfred.XmlParser:void parseContent()",
            "org.dom4j.io.aelfred.XmlParser:void parseElements()",
            "org.dom4j.io.aelfred.XmlParser:void parseCharRef()",
            "org.dom4j.io.aelfred.XmlParser:void requireWhitespace()",
            "org.dom4j.io.aelfred.XmlParser:java.lang.String readNmtoken(boolean)",
            "org.dom4j.io.aelfred.XmlParser:java.lang.String readLiteral(int)",
            "org.dom4j.io.aelfred.XmlParser:void require(char)"
        ]
    },
    "org.dom4j.io.aelfred.XmlParser:void error(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred.XmlParser:java.lang.String parseXMLDecl(boolean)",
            "org.dom4j.io.aelfred.XmlParser:void parseMarkupdecl()",
            "org.dom4j.io.aelfred.XmlParser:void parseElement()",
            "org.dom4j.io.aelfred.XmlParser:void parseAttlistDecl()",
            "org.dom4j.io.aelfred.XmlParser:void parseDefault(java.lang.String,java.lang.String,int,java.lang.String)",
            "org.dom4j.io.aelfred.XmlParser:void parseConditionalSect()",
            "org.dom4j.io.aelfred.XmlParser:void parseCharRef()",
            "org.dom4j.io.aelfred.XmlParser:void parseEntityDecl()",
            "org.dom4j.io.aelfred.XmlParser:void parseCharData()",
            "org.dom4j.io.aelfred.XmlParser:java.lang.String readNmtoken(boolean)",
            "org.dom4j.io.aelfred.XmlParser:java.lang.String readLiteral(int)",
            "org.dom4j.io.aelfred.XmlParser:java.lang.String[] readExternalIds(boolean)",
            "org.dom4j.io.aelfred.XmlParser:char readCh()",
            "org.dom4j.io.aelfred.XmlParser:void detectEncoding()",
            "org.dom4j.io.aelfred.XmlParser:void read8bitEncodingDeclaration()"
        ]
    },
    "org.dom4j.io.aelfred.XmlParser:void parsePI()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred.XmlParser:void parseMisc()",
            "org.dom4j.io.aelfred.XmlParser:void parseMarkupdecl()",
            "org.dom4j.io.aelfred.XmlParser:void parseContent()",
            "org.dom4j.io.aelfred.XmlParser:java.lang.String tryEncodingDecl(boolean)"
        ]
    },
    "org.dom4j.io.aelfred.XmlParser:java.lang.String parseXMLDecl(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred.XmlParser:java.lang.String tryEncodingDecl(boolean)"
        ]
    },
    "org.dom4j.io.aelfred.XmlParser:java.lang.String parseTextDecl(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred.XmlParser:java.lang.String tryEncodingDecl(boolean)"
        ]
    },
    "org.dom4j.io.aelfred.XmlParser:void setupDecoding(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred.XmlParser:java.lang.String parseXMLDecl(boolean)",
            "org.dom4j.io.aelfred.XmlParser:java.lang.String parseTextDecl(boolean)",
            "org.dom4j.io.aelfred.XmlParser:void pushURL(java.lang.String,java.lang.String,java.lang.String,java.io.Reader,java.io.InputStream,java.lang.String)"
        ]
    },
    "org.dom4j.io.aelfred.XmlParser:int readAttType()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred.XmlParser:void parseAttDef(java.lang.String)"
        ]
    },
    "org.dom4j.io.aelfred.XmlParser:void parseCharRef()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred.XmlParser:void parseContent()",
            "org.dom4j.io.aelfred.XmlParser:java.lang.String readLiteral(int)"
        ]
    },
    "org.dom4j.io.aelfred.XmlParser:void parseEntityRef(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred.XmlParser:void parseContent()",
            "org.dom4j.io.aelfred.XmlParser:java.lang.String readLiteral(int)"
        ]
    },
    "org.dom4j.io.aelfred.XmlParser:void parseEntityDecl()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred.XmlParser:void parseMarkupdecl()"
        ]
    },
    "org.dom4j.io.aelfred.XmlParser:void parseNotationDecl()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred.XmlParser:void parseMarkupdecl()"
        ]
    },
    "org.dom4j.io.aelfred.XmlParser:java.lang.String readLiteral(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred.XmlParser:java.lang.String parseXMLDecl(boolean)",
            "org.dom4j.io.aelfred.XmlParser:java.lang.String parseTextDecl(boolean)",
            "org.dom4j.io.aelfred.XmlParser:void parseAttribute(java.lang.String)",
            "org.dom4j.io.aelfred.XmlParser:void parseDefault(java.lang.String,java.lang.String,int,java.lang.String)",
            "org.dom4j.io.aelfred.XmlParser:void parseEntityDecl()",
            "org.dom4j.io.aelfred.XmlParser:java.lang.String[] readExternalIds(boolean)",
            "org.dom4j.io.aelfred.XmlParser:java.lang.String getAttributeExpandedValue(java.lang.String,java.lang.String)"
        ]
    },
    "org.dom4j.io.aelfred.XmlParser:void require(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred.XmlParser:java.lang.String parseXMLDecl(boolean)",
            "org.dom4j.io.aelfred.XmlParser:java.lang.String parseTextDecl(boolean)",
            "org.dom4j.io.aelfred.XmlParser:void parseETag()",
            "org.dom4j.io.aelfred.XmlParser:void parseContent()"
        ]
    },
    "org.dom4j.io.aelfred.XmlParser:void pushInput(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred.XmlParser:void pushURL(java.lang.String,java.lang.String,java.lang.String,java.io.Reader,java.io.InputStream,java.lang.String)",
            "org.dom4j.io.aelfred.XmlParser:void pushCharArray(java.lang.String,char[],int,int)"
        ]
    },
    "org.dom4j.io.aelfred.XmlParser:void parseUntil(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred.XmlParser:void parseComment()",
            "org.dom4j.io.aelfred.XmlParser:void parsePI()",
            "org.dom4j.io.aelfred.XmlParser:void parseCDSect()"
        ]
    },
    "org.dom4j.io.aelfred.XmlParser:void read8bitEncodingDeclaration()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred.XmlParser:void detectEncoding()"
        ]
    },
    "org.dom4j.io.aelfred.XmlParser:void copyUtf8ReadBuffer(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred.XmlParser:void readDataChunk()"
        ]
    },
    "org.dom4j.io.aelfred.XmlParser:int getNextUtf8Byte(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred.XmlParser:void copyUtf8ReadBuffer(int)"
        ]
    },
    "org.dom4j.io.aelfred.XmlParser:void copyUcs2ReadBuffer(int,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred.XmlParser:void readDataChunk()"
        ]
    },
    "org.dom4j.io.aelfred.XmlParser:void copyUcs4ReadBuffer(int,int,int,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred.XmlParser:void readDataChunk()"
        ]
    },
    "org.dom4j.io.aelfred.XmlParser:void parseDoctypedecl()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred.XmlParser:void parseProlog()"
        ]
    },
    "org.dom4j.io.aelfred2.XmlParser:void error(java.lang.String,char,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred2.XmlParser:void parseDocument()",
            "org.dom4j.io.aelfred2.XmlParser:void parseContent()",
            "org.dom4j.io.aelfred2.XmlParser:void parseElements(char[])",
            "org.dom4j.io.aelfred2.XmlParser:void parseCharRef(boolean)",
            "org.dom4j.io.aelfred2.XmlParser:void requireWhitespace()",
            "org.dom4j.io.aelfred2.XmlParser:java.lang.String readNmtoken(boolean)",
            "org.dom4j.io.aelfred2.XmlParser:java.lang.String readLiteral(int)",
            "org.dom4j.io.aelfred2.XmlParser:void require(char)"
        ]
    },
    "org.dom4j.io.aelfred2.XmlParser:void parsePI()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred2.XmlParser:void parseMisc()",
            "org.dom4j.io.aelfred2.XmlParser:void parseMarkupdecl()",
            "org.dom4j.io.aelfred2.XmlParser:void parseContent()"
        ]
    },
    "org.dom4j.io.aelfred2.XmlParser:void checkLegalVersion(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred2.XmlParser:java.lang.String parseXMLDecl(boolean)",
            "org.dom4j.io.aelfred2.XmlParser:java.lang.String parseTextDecl(boolean)"
        ]
    },
    "org.dom4j.io.aelfred2.XmlParser:void setupDecoding(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred2.XmlParser:java.lang.String parseXMLDecl(boolean)",
            "org.dom4j.io.aelfred2.XmlParser:java.lang.String parseTextDecl(boolean)",
            "org.dom4j.io.aelfred2.XmlParser:void pushURL(boolean,java.lang.String,java.lang.String[],java.io.Reader,java.io.InputStream,java.lang.String,boolean)"
        ]
    },
    "org.dom4j.io.aelfred2.XmlParser:java.lang.String readAttType()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred2.XmlParser:void parseAttDef(java.lang.String)"
        ]
    },
    "org.dom4j.io.aelfred2.XmlParser:void parseCharRef(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred2.XmlParser:void parseCharRef()",
            "org.dom4j.io.aelfred2.XmlParser:java.lang.String readLiteral(int)"
        ]
    },
    "org.dom4j.io.aelfred2.XmlParser:void require(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred2.XmlParser:java.lang.String parseXMLDecl(boolean)",
            "org.dom4j.io.aelfred2.XmlParser:java.lang.String parseTextDecl(boolean)",
            "org.dom4j.io.aelfred2.XmlParser:void parseETag()",
            "org.dom4j.io.aelfred2.XmlParser:void parseContent()"
        ]
    },
    "org.dom4j.io.aelfred2.XmlParser:void pushInput(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred2.XmlParser:void pushURL(boolean,java.lang.String,java.lang.String[],java.io.Reader,java.io.InputStream,java.lang.String,boolean)",
            "org.dom4j.io.aelfred2.XmlParser:void pushCharArray(java.lang.String,char[],int,int)"
        ]
    },
    "org.dom4j.io.aelfred2.XmlParser:void parseUntil(char[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred2.XmlParser:void parseComment()",
            "org.dom4j.io.aelfred2.XmlParser:void parsePI()",
            "org.dom4j.io.aelfred2.XmlParser:void parseCDSect()",
            "org.dom4j.io.aelfred2.XmlParser:void parseUntil(java.lang.String)"
        ]
    },
    "org.dom4j.io.aelfred2.XmlParser:void prefetchASCIIEncodingDecl()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred2.XmlParser:void detectEncoding()"
        ]
    },
    "org.dom4j.io.aelfred2.XmlParser:void parseAttlistDecl()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred2.XmlParser:void parseMarkupdecl()"
        ]
    },
    "org.dom4j.io.aelfred2.XmlParser:void parseDefault(java.lang.String,java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred2.XmlParser:void parseAttDef(java.lang.String)"
        ]
    },
    "org.dom4j.io.aelfred2.XmlParser:void parseCharData()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred2.XmlParser:void parseContent()"
        ]
    },
    "org.dom4j.io.aelfred2.XmlParser:java.lang.String readNmtoken(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred2.XmlParser:void parsePI()",
            "org.dom4j.io.aelfred2.XmlParser:void parseDoctypedecl()",
            "org.dom4j.io.aelfred2.XmlParser:void parseElement(boolean)",
            "org.dom4j.io.aelfred2.XmlParser:void parseAttribute(java.lang.String)",
            "org.dom4j.io.aelfred2.XmlParser:void parseElementDecl()",
            "org.dom4j.io.aelfred2.XmlParser:void parseCp()",
            "org.dom4j.io.aelfred2.XmlParser:void parseMixed(char[])",
            "org.dom4j.io.aelfred2.XmlParser:void parseAttlistDecl()",
            "org.dom4j.io.aelfred2.XmlParser:void parseAttDef(java.lang.String)",
            "org.dom4j.io.aelfred2.XmlParser:java.lang.String readAttType()",
            "org.dom4j.io.aelfred2.XmlParser:void parseEnumeration(boolean)",
            "org.dom4j.io.aelfred2.XmlParser:void parseEntityRef(boolean)",
            "org.dom4j.io.aelfred2.XmlParser:void parsePEReference()",
            "org.dom4j.io.aelfred2.XmlParser:void parseEntityDecl()",
            "org.dom4j.io.aelfred2.XmlParser:void parseNotationDecl()",
            "org.dom4j.io.aelfred2.XmlParser:java.lang.String readLiteral(int)"
        ]
    },
    "org.dom4j.io.aelfred2.XmlParser:void detectEncoding()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred2.XmlParser:void pushURL(boolean,java.lang.String,java.lang.String[],java.io.Reader,java.io.InputStream,java.lang.String,boolean)"
        ]
    },
    "org.dom4j.io.aelfred2.XmlParser:void encodingError(java.lang.String,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred2.XmlParser:void copyUtf8ReadBuffer(int)",
            "org.dom4j.io.aelfred2.XmlParser:int getNextUtf8Byte(int,int)",
            "org.dom4j.io.aelfred2.XmlParser:void copyUcs2ReadBuffer(int,int,int)",
            "org.dom4j.io.aelfred2.XmlParser:void copyUcs4ReadBuffer(int,int,int,int,int)"
        ]
    },
    "org.dom4j.io.aelfred2.SAXDriver:org.xml.sax.InputSource resolveEntity(boolean,java.lang.String,org.xml.sax.InputSource,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred2.XmlParser:void pushURL(boolean,java.lang.String,java.lang.String[],java.io.Reader,java.io.InputStream,java.lang.String,boolean)"
        ]
    },
    "org.dom4j.io.aelfred2.SAXDriver:void notationDecl(java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred2.XmlParser:void setNotation(java.lang.String,java.lang.String[])"
        ]
    },
    "org.dom4j.io.aelfred2.SAXDriver:void unparsedEntityDecl(java.lang.String,java.lang.String[],java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred2.XmlParser:void parseEntityDecl()"
        ]
    },
    "org.dom4j.io.aelfred2.XmlParser:java.lang.String tryEncodingDecl(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred2.XmlParser:void pushURL(boolean,java.lang.String,java.lang.String[],java.io.Reader,java.io.InputStream,java.lang.String,boolean)"
        ]
    },
    "org.dom4j.io.aelfred2.XmlParser:boolean parseProlog()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred2.XmlParser:void parseDocument()"
        ]
    },
    "org.dom4j.io.aelfred.SAXDriver:void parse(org.xml.sax.InputSource)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred.SAXDriver:void parse(java.lang.String)",
            "org.dom4j.io.SAXReader:org.dom4j.Document read(org.xml.sax.InputSource)",
            "org.dom4j.io.SAXValidator:void validate(org.dom4j.Document)"
        ]
    },
    "org.dom4j.io.aelfred2.SAXDriver:void parse(org.xml.sax.InputSource)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred2.SAXDriver:void parse(java.lang.String)",
            "org.dom4j.io.SAXReader:org.dom4j.Document read(org.xml.sax.InputSource)",
            "org.dom4j.io.SAXValidator:void validate(org.dom4j.Document)"
        ]
    },
    "org.dom4j.io.SAXWriter:void parse(org.xml.sax.InputSource)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.SAXReader:org.dom4j.Document read(org.xml.sax.InputSource)",
            "org.dom4j.io.SAXValidator:void validate(org.dom4j.Document)"
        ]
    },
    "org.dom4j.io.aelfred2.XmlParser:void parseElementDecl()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred2.XmlParser:void parseMarkupdecl()"
        ]
    },
    "org.dom4j.io.aelfred2.XmlParser:void requireWhitespace()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred2.XmlParser:void parsePI()",
            "org.dom4j.io.aelfred2.XmlParser:java.lang.String parseTextDecl(boolean)",
            "org.dom4j.io.aelfred2.XmlParser:void parseDoctypedecl()",
            "org.dom4j.io.aelfred2.XmlParser:void parseElementDecl()",
            "org.dom4j.io.aelfred2.XmlParser:void parseAttlistDecl()",
            "org.dom4j.io.aelfred2.XmlParser:void parseAttDef(java.lang.String)",
            "org.dom4j.io.aelfred2.XmlParser:void parseNotationType()",
            "org.dom4j.io.aelfred2.XmlParser:void parseDefault(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
            "org.dom4j.io.aelfred2.XmlParser:void parseEntityDecl()",
            "org.dom4j.io.aelfred2.XmlParser:void parseNotationDecl()",
            "org.dom4j.io.aelfred2.XmlParser:java.lang.String[] readExternalIds(boolean,boolean)"
        ]
    },
    "org.dom4j.io.aelfred2.XmlParser:void skipWhitespace()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred2.XmlParser:java.lang.String parseXMLDecl(boolean)",
            "org.dom4j.io.aelfred2.XmlParser:java.lang.String parseTextDecl(boolean)",
            "org.dom4j.io.aelfred2.XmlParser:void parseMisc()",
            "org.dom4j.io.aelfred2.XmlParser:void parseDoctypedecl()",
            "org.dom4j.io.aelfred2.XmlParser:void parseElement(boolean)",
            "org.dom4j.io.aelfred2.XmlParser:void parseEq()",
            "org.dom4j.io.aelfred2.XmlParser:void parseETag()",
            "org.dom4j.io.aelfred2.XmlParser:void parseElementDecl()",
            "org.dom4j.io.aelfred2.XmlParser:void parseContentspec(java.lang.String)",
            "org.dom4j.io.aelfred2.XmlParser:void parseElements(char[])",
            "org.dom4j.io.aelfred2.XmlParser:void parseMixed(char[])",
            "org.dom4j.io.aelfred2.XmlParser:void parseEnumeration(boolean)",
            "org.dom4j.io.aelfred2.XmlParser:void parseConditionalSect(char[])",
            "org.dom4j.io.aelfred2.XmlParser:void parseEntityDecl()",
            "org.dom4j.io.aelfred2.XmlParser:void parseNotationDecl()",
            "org.dom4j.io.aelfred2.XmlParser:void requireWhitespace()",
            "org.dom4j.io.aelfred2.XmlParser:java.lang.String[] readExternalIds(boolean,boolean)",
            "org.dom4j.io.aelfred2.XmlParser:boolean tryWhitespace()"
        ]
    },
    "org.dom4j.io.aelfred2.XmlParser:void require(char)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred2.XmlParser:void parseDocument()",
            "org.dom4j.io.aelfred2.XmlParser:void parseComment()",
            "org.dom4j.io.aelfred2.XmlParser:void parseDoctypedecl()",
            "org.dom4j.io.aelfred2.XmlParser:void parseMarkupdecl()",
            "org.dom4j.io.aelfred2.XmlParser:void parseElement(boolean)",
            "org.dom4j.io.aelfred2.XmlParser:void parseEq()",
            "org.dom4j.io.aelfred2.XmlParser:void parseETag()",
            "org.dom4j.io.aelfred2.XmlParser:void parseContent()",
            "org.dom4j.io.aelfred2.XmlParser:void parseElementDecl()",
            "org.dom4j.io.aelfred2.XmlParser:void parseContentspec(java.lang.String)",
            "org.dom4j.io.aelfred2.XmlParser:void parseMixed(char[])",
            "org.dom4j.io.aelfred2.XmlParser:void parseEnumeration(boolean)",
            "org.dom4j.io.aelfred2.XmlParser:void parseNotationType()",
            "org.dom4j.io.aelfred2.XmlParser:void parseConditionalSect(char[])",
            "org.dom4j.io.aelfred2.XmlParser:void parseEntityRef(boolean)",
            "org.dom4j.io.aelfred2.XmlParser:void parsePEReference()",
            "org.dom4j.io.aelfred2.XmlParser:void parseEntityDecl()",
            "org.dom4j.io.aelfred2.XmlParser:void parseNotationDecl()",
            "org.dom4j.io.aelfred2.XmlParser:java.lang.String readLiteral(int)",
            "org.dom4j.io.aelfred2.XmlParser:void require(java.lang.String)"
        ]
    },
    "org.dom4j.io.aelfred2.XmlParser:boolean tryRead(char)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred2.XmlParser:void parseDoctypedecl()",
            "org.dom4j.io.aelfred2.XmlParser:void parseElement(boolean)",
            "org.dom4j.io.aelfred2.XmlParser:void parseCp()",
            "org.dom4j.io.aelfred2.XmlParser:void parseMixed(char[])",
            "org.dom4j.io.aelfred2.XmlParser:void parseAttlistDecl()",
            "org.dom4j.io.aelfred2.XmlParser:java.lang.String readAttType()",
            "org.dom4j.io.aelfred2.XmlParser:void parseEnumeration(boolean)",
            "org.dom4j.io.aelfred2.XmlParser:void parseDefault(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
            "org.dom4j.io.aelfred2.XmlParser:void parseCharRef(boolean)",
            "org.dom4j.io.aelfred2.XmlParser:void parseEntityDecl()"
        ]
    },
    "org.dom4j.io.aelfred2.XmlParser:boolean tryRead(char[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred2.XmlParser:void parsePI()",
            "org.dom4j.io.aelfred2.XmlParser:void parseMisc()",
            "org.dom4j.io.aelfred2.XmlParser:void parseMarkupdecl()",
            "org.dom4j.io.aelfred2.XmlParser:boolean tryRead(java.lang.String)",
            "org.dom4j.io.aelfred2.XmlParser:void parseUntil(char[])"
        ]
    },
    "org.dom4j.io.aelfred2.XmlParser:boolean tryWhitespace()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred2.XmlParser:java.lang.String parseXMLDecl(boolean)",
            "org.dom4j.io.aelfred2.XmlParser:void parseElement(boolean)",
            "org.dom4j.io.aelfred2.XmlParser:void parseAttlistDecl()",
            "org.dom4j.io.aelfred2.XmlParser:void parseEntityDecl()",
            "org.dom4j.io.aelfred2.XmlParser:java.lang.String tryEncodingDecl(boolean)"
        ]
    },
    "org.dom4j.io.aelfred.XmlParser:void parseElements()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred.XmlParser:void parseContentspec(java.lang.String)",
            "org.dom4j.io.aelfred.XmlParser:void parseCp()"
        ]
    },
    "org.dom4j.io.aelfred.XmlParser:void requireWhitespace()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred.XmlParser:void parsePI()",
            "org.dom4j.io.aelfred.XmlParser:java.lang.String parseTextDecl(boolean)",
            "org.dom4j.io.aelfred.XmlParser:void parseDoctypedecl()",
            "org.dom4j.io.aelfred.XmlParser:void parseElementdecl()",
            "org.dom4j.io.aelfred.XmlParser:void parseAttlistDecl()",
            "org.dom4j.io.aelfred.XmlParser:void parseAttDef(java.lang.String)",
            "org.dom4j.io.aelfred.XmlParser:void parseNotationType()",
            "org.dom4j.io.aelfred.XmlParser:void parseDefault(java.lang.String,java.lang.String,int,java.lang.String)",
            "org.dom4j.io.aelfred.XmlParser:void parseEntityDecl()",
            "org.dom4j.io.aelfred.XmlParser:void parseNotationDecl()",
            "org.dom4j.io.aelfred.XmlParser:java.lang.String[] readExternalIds(boolean)"
        ]
    },
    "org.dom4j.io.aelfred.XmlParser:java.lang.String readNmtoken(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred.XmlParser:void parsePI()",
            "org.dom4j.io.aelfred.XmlParser:void parseDoctypedecl()",
            "org.dom4j.io.aelfred.XmlParser:void parseElement()",
            "org.dom4j.io.aelfred.XmlParser:void parseAttribute(java.lang.String)",
            "org.dom4j.io.aelfred.XmlParser:void parseElementdecl()",
            "org.dom4j.io.aelfred.XmlParser:void parseCp()",
            "org.dom4j.io.aelfred.XmlParser:void parseMixed()",
            "org.dom4j.io.aelfred.XmlParser:void parseAttlistDecl()",
            "org.dom4j.io.aelfred.XmlParser:void parseAttDef(java.lang.String)",
            "org.dom4j.io.aelfred.XmlParser:int readAttType()",
            "org.dom4j.io.aelfred.XmlParser:void parseEnumeration(boolean)",
            "org.dom4j.io.aelfred.XmlParser:void parseEntityRef(boolean)",
            "org.dom4j.io.aelfred.XmlParser:void parsePEReference()",
            "org.dom4j.io.aelfred.XmlParser:void parseEntityDecl()",
            "org.dom4j.io.aelfred.XmlParser:void parseNotationDecl()",
            "org.dom4j.io.aelfred.XmlParser:java.lang.String readLiteral(int)"
        ]
    },
    "org.dom4j.io.aelfred.XmlParser:void require(char)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred.XmlParser:void parseDocument()",
            "org.dom4j.io.aelfred.XmlParser:void parseComment()",
            "org.dom4j.io.aelfred.XmlParser:void parseDoctypedecl()",
            "org.dom4j.io.aelfred.XmlParser:void parseElement()",
            "org.dom4j.io.aelfred.XmlParser:void parseEq()",
            "org.dom4j.io.aelfred.XmlParser:void parseETag()",
            "org.dom4j.io.aelfred.XmlParser:void parseContent()",
            "org.dom4j.io.aelfred.XmlParser:void parseElementdecl()",
            "org.dom4j.io.aelfred.XmlParser:void parseContentspec(java.lang.String)",
            "org.dom4j.io.aelfred.XmlParser:void parseMixed()",
            "org.dom4j.io.aelfred.XmlParser:void parseEnumeration(boolean)",
            "org.dom4j.io.aelfred.XmlParser:void parseNotationType()",
            "org.dom4j.io.aelfred.XmlParser:void parseConditionalSect()",
            "org.dom4j.io.aelfred.XmlParser:void parseEntityRef(boolean)",
            "org.dom4j.io.aelfred.XmlParser:void parsePEReference()",
            "org.dom4j.io.aelfred.XmlParser:void parseEntityDecl()",
            "org.dom4j.io.aelfred.XmlParser:void parseNotationDecl()",
            "org.dom4j.io.aelfred.XmlParser:java.lang.String readLiteral(int)",
            "org.dom4j.io.aelfred.XmlParser:void require(java.lang.String)"
        ]
    },
    "org.dom4j.io.aelfred.XmlParser:void parseMarkupdecl()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred.XmlParser:void parseDoctypedecl()",
            "org.dom4j.io.aelfred.XmlParser:void parseConditionalSect()"
        ]
    },
    "org.dom4j.io.aelfred.XmlParser:void parseAttlistDecl()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred.XmlParser:void parseMarkupdecl()"
        ]
    },
    "org.dom4j.io.aelfred.XmlParser:void parseDefault(java.lang.String,java.lang.String,int,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred.XmlParser:void parseAttDef(java.lang.String)"
        ]
    },
    "org.dom4j.io.aelfred.XmlParser:void parseConditionalSect()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred.XmlParser:void parseMarkupdecl()"
        ]
    },
    "org.dom4j.io.aelfred.XmlParser:void parseCharData()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred.XmlParser:void parseContent()"
        ]
    },
    "org.dom4j.io.aelfred.XmlParser:java.lang.String[] readExternalIds(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred.XmlParser:void parseDoctypedecl()",
            "org.dom4j.io.aelfred.XmlParser:void parseEntityDecl()",
            "org.dom4j.io.aelfred.XmlParser:void parseNotationDecl()"
        ]
    },
    "org.dom4j.io.aelfred.XmlParser:char readCh()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred.XmlParser:void parseDocument()",
            "org.dom4j.io.aelfred.XmlParser:void parseElement()",
            "org.dom4j.io.aelfred.XmlParser:void parseContent()",
            "org.dom4j.io.aelfred.XmlParser:void parseElements()",
            "org.dom4j.io.aelfred.XmlParser:void parseCp()",
            "org.dom4j.io.aelfred.XmlParser:void parseConditionalSect()",
            "org.dom4j.io.aelfred.XmlParser:void parseCharRef()",
            "org.dom4j.io.aelfred.XmlParser:void parseEntityDecl()",
            "org.dom4j.io.aelfred.XmlParser:void parseCharData()",
            "org.dom4j.io.aelfred.XmlParser:void requireWhitespace()",
            "org.dom4j.io.aelfred.XmlParser:void parseWhitespace()",
            "org.dom4j.io.aelfred.XmlParser:void skipWhitespace()",
            "org.dom4j.io.aelfred.XmlParser:java.lang.String readNmtoken(boolean)",
            "org.dom4j.io.aelfred.XmlParser:java.lang.String readLiteral(int)",
            "org.dom4j.io.aelfred.XmlParser:java.lang.String[] readExternalIds(boolean)",
            "org.dom4j.io.aelfred.XmlParser:void require(char)",
            "org.dom4j.io.aelfred.XmlParser:char readCh()",
            "org.dom4j.io.aelfred.XmlParser:boolean tryRead(char)",
            "org.dom4j.io.aelfred.XmlParser:boolean tryRead(java.lang.String)",
            "org.dom4j.io.aelfred.XmlParser:boolean tryWhitespace()",
            "org.dom4j.io.aelfred.XmlParser:void parseUntil(java.lang.String)"
        ]
    },
    "org.dom4j.io.aelfred.XmlParser:void detectEncoding()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred.XmlParser:void pushURL(java.lang.String,java.lang.String,java.lang.String,java.io.Reader,java.io.InputStream,java.lang.String)"
        ]
    },
    "org.dom4j.io.aelfred.XmlParser:void parseMisc()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred.XmlParser:void parseDocument()",
            "org.dom4j.io.aelfred.XmlParser:void parseProlog()"
        ]
    },
    "org.dom4j.io.aelfred.XmlParser:java.lang.String tryEncodingDecl(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred.XmlParser:void pushURL(java.lang.String,java.lang.String,java.lang.String,java.io.Reader,java.io.InputStream,java.lang.String)"
        ]
    },
    "org.dom4j.io.aelfred.XmlParser:void pushURL(java.lang.String,java.lang.String,java.lang.String,java.io.Reader,java.io.InputStream,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred.XmlParser:void doParse(java.lang.String,java.lang.String,java.io.Reader,java.io.InputStream,java.lang.String)",
            "org.dom4j.io.aelfred.XmlParser:void parseDoctypedecl()",
            "org.dom4j.io.aelfred.XmlParser:void parseEntityRef(boolean)",
            "org.dom4j.io.aelfred.XmlParser:void parsePEReference()"
        ]
    },
    "org.dom4j.io.aelfred.XmlParser:void parseAttDef(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred.XmlParser:void parseAttlistDecl()"
        ]
    },
    "org.dom4j.io.aelfred.XmlParser:java.lang.String getAttributeExpandedValue(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred.XmlParser:void parseElement()"
        ]
    },
    "org.dom4j.io.aelfred.XmlParser:void parseETag()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred.XmlParser:void parseContent()"
        ]
    },
    "org.dom4j.io.aelfred.XmlParser:void pushCharArray(java.lang.String,char[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred.XmlParser:java.lang.String getAttributeExpandedValue(java.lang.String,java.lang.String)",
            "org.dom4j.io.aelfred.XmlParser:void unread(char[],int)",
            "org.dom4j.io.aelfred.XmlParser:void pushString(java.lang.String,java.lang.String)"
        ]
    },
    "org.dom4j.io.aelfred.XmlParser:void parseComment()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred.XmlParser:void parseMisc()",
            "org.dom4j.io.aelfred.XmlParser:void parseMarkupdecl()",
            "org.dom4j.io.aelfred.XmlParser:void parseContent()"
        ]
    },
    "org.dom4j.io.aelfred.XmlParser:void parseCDSect()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred.XmlParser:void parseContent()"
        ]
    },
    "org.dom4j.io.aelfred.XmlParser:void readDataChunk()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred.XmlParser:char readCh()",
            "org.dom4j.io.aelfred.XmlParser:void readDataChunk()"
        ]
    },
    "org.dom4j.io.aelfred.XmlParser:void parseProlog()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred.XmlParser:void parseDocument()"
        ]
    },
    "org.dom4j.io.aelfred2.XmlParser:void parseMisc()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred2.XmlParser:void parseDocument()",
            "org.dom4j.io.aelfred2.XmlParser:boolean parseProlog()"
        ]
    },
    "org.dom4j.io.aelfred2.XmlParser:void parseAttDef(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred2.XmlParser:void parseAttlistDecl()"
        ]
    },
    "org.dom4j.io.aelfred2.XmlParser:void parseCharRef()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred2.XmlParser:void parseContent()"
        ]
    },
    "org.dom4j.io.aelfred2.XmlParser:void parseETag()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred2.XmlParser:void parseContent()"
        ]
    },
    "org.dom4j.io.aelfred2.XmlParser:void pushCharArray(java.lang.String,char[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred2.XmlParser:void unread(char[],int)",
            "org.dom4j.io.aelfred2.XmlParser:void pushString(java.lang.String,java.lang.String)"
        ]
    },
    "org.dom4j.io.aelfred2.XmlParser:void parseComment()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred2.XmlParser:void parseMisc()",
            "org.dom4j.io.aelfred2.XmlParser:void parseMarkupdecl()",
            "org.dom4j.io.aelfred2.XmlParser:void parseContent()"
        ]
    },
    "org.dom4j.io.aelfred2.XmlParser:void parseCDSect()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred2.XmlParser:void parseContent()"
        ]
    },
    "org.dom4j.io.aelfred2.XmlParser:void parseUntil(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.dom4j.io.aelfred2.XmlParser:void parseEnumeration(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred2.XmlParser:java.lang.String readAttType()",
            "org.dom4j.io.aelfred2.XmlParser:void parseNotationType()"
        ]
    },
    "org.dom4j.io.aelfred2.XmlParser:void copyUtf8ReadBuffer(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred2.XmlParser:void readDataChunk()"
        ]
    },
    "org.dom4j.io.aelfred2.XmlParser:int getNextUtf8Byte(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred2.XmlParser:void copyUtf8ReadBuffer(int)"
        ]
    },
    "org.dom4j.io.aelfred2.XmlParser:void copyUcs2ReadBuffer(int,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred2.XmlParser:void readDataChunk()"
        ]
    },
    "org.dom4j.io.aelfred2.XmlParser:void copyUcs4ReadBuffer(int,int,int,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred2.XmlParser:void readDataChunk()"
        ]
    },
    "org.dom4j.io.aelfred.SAXDriver:void parse(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.dom4j.io.aelfred2.SAXDriver:void parse(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.dom4j.io.aelfred2.XmlParser:void parseNotationType()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred2.XmlParser:java.lang.String readAttType()"
        ]
    },
    "org.dom4j.io.aelfred2.XmlParser:void parseEq()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred2.XmlParser:java.lang.String parseXMLDecl(boolean)",
            "org.dom4j.io.aelfred2.XmlParser:java.lang.String parseTextDecl(boolean)",
            "org.dom4j.io.aelfred2.XmlParser:void parseAttribute(java.lang.String)"
        ]
    },
    "org.dom4j.io.aelfred2.XmlParser:boolean tryRead(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred2.XmlParser:boolean parseProlog()",
            "org.dom4j.io.aelfred2.XmlParser:java.lang.String parseXMLDecl(boolean)",
            "org.dom4j.io.aelfred2.XmlParser:java.lang.String parseTextDecl(boolean)",
            "org.dom4j.io.aelfred2.XmlParser:void parseMarkupdecl()",
            "org.dom4j.io.aelfred2.XmlParser:void parseContentspec(java.lang.String)",
            "org.dom4j.io.aelfred2.XmlParser:void parseMixed(char[])",
            "org.dom4j.io.aelfred2.XmlParser:void parseDefault(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
            "org.dom4j.io.aelfred2.XmlParser:void parseConditionalSect(char[])",
            "org.dom4j.io.aelfred2.XmlParser:void parseEntityDecl()",
            "org.dom4j.io.aelfred2.XmlParser:java.lang.String[] readExternalIds(boolean,boolean)",
            "org.dom4j.io.aelfred2.XmlParser:java.lang.String tryEncodingDecl(boolean)"
        ]
    },
    "org.dom4j.io.aelfred.XmlParser:void parseContentspec(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred.XmlParser:void parseElementdecl()"
        ]
    },
    "org.dom4j.io.aelfred.XmlParser:void parseCp()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred.XmlParser:void parseElements()"
        ]
    },
    "org.dom4j.io.aelfred.XmlParser:void parseElementdecl()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred.XmlParser:void parseMarkupdecl()"
        ]
    },
    "org.dom4j.io.aelfred.XmlParser:void parseNotationType()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred.XmlParser:int readAttType()"
        ]
    },
    "org.dom4j.io.aelfred.XmlParser:void parseMixed()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred.XmlParser:void parseContentspec(java.lang.String)"
        ]
    },
    "org.dom4j.io.aelfred.XmlParser:void parseEnumeration(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred.XmlParser:int readAttType()",
            "org.dom4j.io.aelfred.XmlParser:void parseNotationType()"
        ]
    },
    "org.dom4j.io.aelfred.XmlParser:void parsePEReference()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred.XmlParser:char readCh()"
        ]
    },
    "org.dom4j.io.aelfred.XmlParser:void parseEq()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred.XmlParser:java.lang.String parseXMLDecl(boolean)",
            "org.dom4j.io.aelfred.XmlParser:java.lang.String parseTextDecl(boolean)",
            "org.dom4j.io.aelfred.XmlParser:void parseAttribute(java.lang.String)"
        ]
    },
    "org.dom4j.io.aelfred.XmlParser:void parseWhitespace()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred.XmlParser:void parseContent()"
        ]
    },
    "org.dom4j.io.aelfred.XmlParser:void skipWhitespace()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred.XmlParser:java.lang.String parseXMLDecl(boolean)",
            "org.dom4j.io.aelfred.XmlParser:java.lang.String parseTextDecl(boolean)",
            "org.dom4j.io.aelfred.XmlParser:void parseMisc()",
            "org.dom4j.io.aelfred.XmlParser:void parseDoctypedecl()",
            "org.dom4j.io.aelfred.XmlParser:void parseEq()",
            "org.dom4j.io.aelfred.XmlParser:void parseETag()",
            "org.dom4j.io.aelfred.XmlParser:void parseElementdecl()",
            "org.dom4j.io.aelfred.XmlParser:void parseContentspec(java.lang.String)",
            "org.dom4j.io.aelfred.XmlParser:void parseElements()",
            "org.dom4j.io.aelfred.XmlParser:void parseMixed()",
            "org.dom4j.io.aelfred.XmlParser:void parseEnumeration(boolean)",
            "org.dom4j.io.aelfred.XmlParser:void parseConditionalSect()",
            "org.dom4j.io.aelfred.XmlParser:void parseEntityDecl()",
            "org.dom4j.io.aelfred.XmlParser:void parseNotationDecl()",
            "org.dom4j.io.aelfred.XmlParser:void requireWhitespace()",
            "org.dom4j.io.aelfred.XmlParser:java.lang.String[] readExternalIds(boolean)",
            "org.dom4j.io.aelfred.XmlParser:boolean tryWhitespace()"
        ]
    },
    "org.dom4j.io.aelfred.XmlParser:boolean tryRead(char)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred.XmlParser:void parseDoctypedecl()",
            "org.dom4j.io.aelfred.XmlParser:void parseCp()",
            "org.dom4j.io.aelfred.XmlParser:void parseMixed()",
            "org.dom4j.io.aelfred.XmlParser:void parseAttlistDecl()",
            "org.dom4j.io.aelfred.XmlParser:int readAttType()",
            "org.dom4j.io.aelfred.XmlParser:void parseEnumeration(boolean)",
            "org.dom4j.io.aelfred.XmlParser:void parseDefault(java.lang.String,java.lang.String,int,java.lang.String)",
            "org.dom4j.io.aelfred.XmlParser:void parseCharRef()",
            "org.dom4j.io.aelfred.XmlParser:void parseEntityDecl()"
        ]
    },
    "org.dom4j.io.aelfred.XmlParser:boolean tryRead(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred.XmlParser:void parsePI()",
            "org.dom4j.io.aelfred.XmlParser:void parseProlog()",
            "org.dom4j.io.aelfred.XmlParser:java.lang.String parseXMLDecl(boolean)",
            "org.dom4j.io.aelfred.XmlParser:java.lang.String parseTextDecl(boolean)",
            "org.dom4j.io.aelfred.XmlParser:void parseMisc()",
            "org.dom4j.io.aelfred.XmlParser:void parseMarkupdecl()",
            "org.dom4j.io.aelfred.XmlParser:void parseContentspec(java.lang.String)",
            "org.dom4j.io.aelfred.XmlParser:void parseMixed()",
            "org.dom4j.io.aelfred.XmlParser:void parseDefault(java.lang.String,java.lang.String,int,java.lang.String)",
            "org.dom4j.io.aelfred.XmlParser:void parseConditionalSect()",
            "org.dom4j.io.aelfred.XmlParser:void parseEntityDecl()",
            "org.dom4j.io.aelfred.XmlParser:java.lang.String[] readExternalIds(boolean)",
            "org.dom4j.io.aelfred.XmlParser:java.lang.String tryEncodingDecl(boolean)",
            "org.dom4j.io.aelfred.XmlParser:void parseUntil(java.lang.String)"
        ]
    },
    "org.dom4j.io.aelfred.XmlParser:boolean tryWhitespace()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred.XmlParser:java.lang.String parseXMLDecl(boolean)",
            "org.dom4j.io.aelfred.XmlParser:void parseElement()",
            "org.dom4j.io.aelfred.XmlParser:void parseAttlistDecl()",
            "org.dom4j.io.aelfred.XmlParser:void parseEntityDecl()",
            "org.dom4j.io.aelfred.XmlParser:java.lang.String tryEncodingDecl(boolean)"
        ]
    },
    "org.dom4j.io.aelfred.XmlParser:void unread(char[],int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred.XmlParser:java.lang.String tryEncodingDecl(boolean)",
            "org.dom4j.io.aelfred.XmlParser:boolean tryRead(java.lang.String)"
        ]
    },
    "org.dom4j.io.aelfred.XmlParser:void pushString(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred.XmlParser:void parseEntityRef(boolean)",
            "org.dom4j.io.aelfred.XmlParser:void parsePEReference()",
            "org.dom4j.io.aelfred.XmlParser:java.lang.String getAttributeExpandedValue(java.lang.String,java.lang.String)",
            "org.dom4j.io.aelfred.XmlParser:void unread(char)"
        ]
    },
    "org.dom4j.io.aelfred2.XmlParser:void unread(char[],int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred2.XmlParser:boolean tryRead(char[])"
        ]
    },
    "org.dom4j.io.aelfred2.XmlParser:void pushString(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred2.XmlParser:void parseDoctypedecl()",
            "org.dom4j.io.aelfred2.XmlParser:void parseElement(boolean)",
            "org.dom4j.io.aelfred2.XmlParser:void parseEntityRef(boolean)",
            "org.dom4j.io.aelfred2.XmlParser:void parsePEReference()",
            "org.dom4j.io.aelfred2.XmlParser:void unread(char)"
        ]
    },
    "org.dom4j.io.aelfred2.XmlParser:void readDataChunk()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred2.XmlParser:char readCh()",
            "org.dom4j.io.aelfred2.XmlParser:void readDataChunk()"
        ]
    },
    "org.dom4j.io.aelfred.XmlParser:void unread(char)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred.XmlParser:void parseElement()",
            "org.dom4j.io.aelfred.XmlParser:void parseContent()",
            "org.dom4j.io.aelfred.XmlParser:void parseElements()",
            "org.dom4j.io.aelfred.XmlParser:void parseCp()",
            "org.dom4j.io.aelfred.XmlParser:void parseEntityDecl()",
            "org.dom4j.io.aelfred.XmlParser:void parseCharData()",
            "org.dom4j.io.aelfred.XmlParser:void parseWhitespace()",
            "org.dom4j.io.aelfred.XmlParser:void skipWhitespace()",
            "org.dom4j.io.aelfred.XmlParser:java.lang.String readNmtoken(boolean)",
            "org.dom4j.io.aelfred.XmlParser:java.lang.String readLiteral(int)",
            "org.dom4j.io.aelfred.XmlParser:java.lang.String[] readExternalIds(boolean)",
            "org.dom4j.io.aelfred.XmlParser:boolean tryRead(char)",
            "org.dom4j.io.aelfred.XmlParser:boolean tryRead(java.lang.String)",
            "org.dom4j.io.aelfred.XmlParser:boolean tryWhitespace()"
        ]
    },
    "org.dom4j.io.aelfred2.XmlParser:void unread(char)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.dom4j.io.aelfred2.XmlParser:void parseMarkupdecl()",
            "org.dom4j.io.aelfred2.XmlParser:void parseElement(boolean)",
            "org.dom4j.io.aelfred2.XmlParser:void parseContent()",
            "org.dom4j.io.aelfred2.XmlParser:void parseElements(char[])",
            "org.dom4j.io.aelfred2.XmlParser:void parseCp()",
            "org.dom4j.io.aelfred2.XmlParser:void parseEntityDecl()",
            "org.dom4j.io.aelfred2.XmlParser:void parseCharData()",
            "org.dom4j.io.aelfred2.XmlParser:void skipWhitespace()",
            "org.dom4j.io.aelfred2.XmlParser:java.lang.String readNmtoken(boolean)",
            "org.dom4j.io.aelfred2.XmlParser:java.lang.String readLiteral(int)",
            "org.dom4j.io.aelfred2.XmlParser:java.lang.String[] readExternalIds(boolean,boolean)",
            "org.dom4j.io.aelfred2.XmlParser:java.lang.String tryEncodingDecl(boolean)",
            "org.dom4j.io.aelfred2.XmlParser:boolean tryRead(char)",
            "org.dom4j.io.aelfred2.XmlParser:boolean tryRead(char[])",
            "org.dom4j.io.aelfred2.XmlParser:boolean tryWhitespace()"
        ]
    }
}