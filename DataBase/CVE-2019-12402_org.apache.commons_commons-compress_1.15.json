{
    "org.apache.commons.compress.archivers.zip.NioZipEncoding:java.nio.ByteBuffer encode(java.lang.String)": {
        "isVulRoot": true,
        "vulCaller": [
            "org.apache.commons.compress.archivers.tar.TarUtils:int formatNameBytes(java.lang.String,byte[],int,int,org.apache.commons.compress.archivers.zip.ZipEncoding)",
            "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:boolean handleLongName(org.apache.commons.compress.archivers.tar.TarArchiveEntry,java.lang.String,java.util.Map,java.lang.String,byte,java.lang.String)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeCString(java.lang.String)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void addUnicodeExtraFields(org.apache.commons.compress.archivers.zip.ZipArchiveEntry,boolean,java.nio.ByteBuffer)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:byte[] createCentralFileHeader(org.apache.commons.compress.archivers.zip.ZipArchiveEntry,java.nio.ByteBuffer,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData,boolean)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void writeCentralDirectoryEnd()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:java.nio.ByteBuffer getName(org.apache.commons.compress.archivers.zip.ZipArchiveEntry)"
        ]
    },
    "org.apache.commons.compress.archivers.tar.TarUtils:int formatNameBytes(java.lang.String,byte[],int,int,org.apache.commons.compress.archivers.zip.ZipEncoding)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.tar.TarUtils:int formatNameBytes(java.lang.String,byte[],int,int)",
            "org.apache.commons.compress.archivers.tar.TarArchiveEntry:void writeEntryHeader(byte[],org.apache.commons.compress.archivers.zip.ZipEncoding,boolean)"
        ]
    },
    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:boolean handleLongName(org.apache.commons.compress.archivers.tar.TarArchiveEntry,java.lang.String,java.util.Map,java.lang.String,byte,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:void putArchiveEntry(org.apache.commons.compress.archivers.ArchiveEntry)"
        ]
    },
    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeCString(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeNewEntry(org.apache.commons.compress.archivers.cpio.CpioArchiveEntry)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeOldAsciiEntry(org.apache.commons.compress.archivers.cpio.CpioArchiveEntry)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeOldBinaryEntry(org.apache.commons.compress.archivers.cpio.CpioArchiveEntry,boolean)"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void addUnicodeExtraFields(org.apache.commons.compress.archivers.zip.ZipArchiveEntry,boolean,java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void writeLocalFileHeader(org.apache.commons.compress.archivers.zip.ZipArchiveEntry,boolean)"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:byte[] createCentralFileHeader(org.apache.commons.compress.archivers.zip.ZipArchiveEntry,java.nio.ByteBuffer,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:byte[] createCentralFileHeader(org.apache.commons.compress.archivers.zip.ZipArchiveEntry)"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void writeCentralDirectoryEnd()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void finish()"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:java.nio.ByteBuffer getName(org.apache.commons.compress.archivers.zip.ZipArchiveEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void rewriteSizesAndCrc(boolean)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void writeLocalFileHeader(org.apache.commons.compress.archivers.zip.ZipArchiveEntry,boolean)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:byte[] createCentralFileHeader(org.apache.commons.compress.archivers.zip.ZipArchiveEntry)"
        ]
    },
    "org.apache.commons.compress.archivers.tar.TarUtils:int formatNameBytes(java.lang.String,byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.tar.TarArchiveEntry:void writeEntryHeader(byte[],org.apache.commons.compress.archivers.zip.ZipEncoding,boolean)"
        ]
    },
    "org.apache.commons.compress.archivers.tar.TarArchiveEntry:void writeEntryHeader(byte[],org.apache.commons.compress.archivers.zip.ZipEncoding,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.tar.TarArchiveEntry:void writeEntryHeader(byte[])",
            "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:void putArchiveEntry(org.apache.commons.compress.archivers.ArchiveEntry)"
        ]
    },
    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:void putArchiveEntry(org.apache.commons.compress.archivers.ArchiveEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:void writePaxHeaders(org.apache.commons.compress.archivers.tar.TarArchiveEntry,java.lang.String,java.util.Map)",
            "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:boolean handleLongName(org.apache.commons.compress.archivers.tar.TarArchiveEntry,java.lang.String,java.util.Map,java.lang.String,byte,java.lang.String)",
            "org.apache.commons.compress.changes.ChangeSetPerformer:void copyStream(java.io.InputStream,org.apache.commons.compress.archivers.ArchiveOutputStream,org.apache.commons.compress.archivers.ArchiveEntry)"
        ]
    },
    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeNewEntry(org.apache.commons.compress.archivers.cpio.CpioArchiveEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeHeader(org.apache.commons.compress.archivers.cpio.CpioArchiveEntry)"
        ]
    },
    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeOldAsciiEntry(org.apache.commons.compress.archivers.cpio.CpioArchiveEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeHeader(org.apache.commons.compress.archivers.cpio.CpioArchiveEntry)"
        ]
    },
    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeOldBinaryEntry(org.apache.commons.compress.archivers.cpio.CpioArchiveEntry,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeHeader(org.apache.commons.compress.archivers.cpio.CpioArchiveEntry)"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void writeLocalFileHeader(org.apache.commons.compress.archivers.zip.ZipArchiveEntry,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void putArchiveEntry(org.apache.commons.compress.archivers.ArchiveEntry,boolean)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void writeLocalFileHeader(org.apache.commons.compress.archivers.zip.ZipArchiveEntry)"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:byte[] createCentralFileHeader(org.apache.commons.compress.archivers.zip.ZipArchiveEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void writeCentralDirectoryInChunks()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void writeCentralFileHeader(org.apache.commons.compress.archivers.zip.ZipArchiveEntry)"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void finish()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void close()",
            "org.apache.commons.compress.changes.ChangeSetPerformer:org.apache.commons.compress.changes.ChangeSetResults perform(org.apache.commons.compress.changes.ChangeSetPerformer$ArchiveEntryIterator,org.apache.commons.compress.archivers.ArchiveOutputStream)"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void rewriteSizesAndCrc(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void closeEntry(boolean,boolean)"
        ]
    },
    "org.apache.commons.compress.archivers.tar.TarArchiveEntry:void writeEntryHeader(byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:void writePaxHeaders(org.apache.commons.compress.archivers.tar.TarArchiveEntry,java.lang.String,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:void putArchiveEntry(org.apache.commons.compress.archivers.ArchiveEntry)"
        ]
    },
    "org.apache.commons.compress.changes.ChangeSetPerformer:void copyStream(java.io.InputStream,org.apache.commons.compress.archivers.ArchiveOutputStream,org.apache.commons.compress.archivers.ArchiveEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.changes.ChangeSetPerformer:org.apache.commons.compress.changes.ChangeSetResults perform(org.apache.commons.compress.changes.ChangeSetPerformer$ArchiveEntryIterator,org.apache.commons.compress.archivers.ArchiveOutputStream)"
        ]
    },
    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeHeader(org.apache.commons.compress.archivers.cpio.CpioArchiveEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void putArchiveEntry(org.apache.commons.compress.archivers.ArchiveEntry)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void finish()"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void putArchiveEntry(org.apache.commons.compress.archivers.ArchiveEntry,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void addRawArchiveEntry(org.apache.commons.compress.archivers.zip.ZipArchiveEntry,java.io.InputStream)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void putArchiveEntry(org.apache.commons.compress.archivers.ArchiveEntry)"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void writeLocalFileHeader(org.apache.commons.compress.archivers.zip.ZipArchiveEntry)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void writeCentralDirectoryInChunks()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void finish()"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void writeCentralFileHeader(org.apache.commons.compress.archivers.zip.ZipArchiveEntry)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void close()",
            "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:void close()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void destroy()",
            "org.apache.commons.compress.utils.IOUtils:void closeQuietly(java.io.Closeable)",
            "org.apache.commons.compress.utils.FixedLengthBlockOutputStream$BufferAtATimeOutputChannel:void close()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void close()",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream:void close()",
            "org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge:java.io.InputStream getInputView()",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream:void close()",
            "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream:void close()",
            "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void close()",
            "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream:void close()",
            "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream:void close()",
            "org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore:void closeForWriting()"
        ]
    },
    "org.apache.commons.compress.changes.ChangeSetPerformer:org.apache.commons.compress.changes.ChangeSetResults perform(org.apache.commons.compress.changes.ChangeSetPerformer$ArchiveEntryIterator,org.apache.commons.compress.archivers.ArchiveOutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.changes.ChangeSetPerformer:org.apache.commons.compress.changes.ChangeSetResults perform(org.apache.commons.compress.archivers.ArchiveInputStream,org.apache.commons.compress.archivers.ArchiveOutputStream)",
            "org.apache.commons.compress.changes.ChangeSetPerformer:org.apache.commons.compress.changes.ChangeSetResults perform(org.apache.commons.compress.archivers.zip.ZipFile,org.apache.commons.compress.archivers.ArchiveOutputStream)"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void closeEntry(boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void closeArchiveEntry()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void closeCopiedEntry(boolean)"
        ]
    },
    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void putArchiveEntry(org.apache.commons.compress.archivers.ArchiveEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.changes.ChangeSetPerformer:void copyStream(java.io.InputStream,org.apache.commons.compress.archivers.ArchiveOutputStream,org.apache.commons.compress.archivers.ArchiveEntry)"
        ]
    },
    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void finish()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void close()",
            "org.apache.commons.compress.changes.ChangeSetPerformer:org.apache.commons.compress.changes.ChangeSetResults perform(org.apache.commons.compress.changes.ChangeSetPerformer$ArchiveEntryIterator,org.apache.commons.compress.archivers.ArchiveOutputStream)"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void addRawArchiveEntry(org.apache.commons.compress.archivers.zip.ZipArchiveEntry,java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipFile:void copyRawEntries(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream,org.apache.commons.compress.archivers.zip.ZipArchiveEntryPredicate)",
            "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream:void writeTo(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream)"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void putArchiveEntry(org.apache.commons.compress.archivers.ArchiveEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.jar.JarArchiveOutputStream:void putArchiveEntry(org.apache.commons.compress.archivers.ArchiveEntry)",
            "org.apache.commons.compress.changes.ChangeSetPerformer:void copyStream(java.io.InputStream,org.apache.commons.compress.archivers.ArchiveOutputStream,org.apache.commons.compress.archivers.ArchiveEntry)"
        ]
    },
    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void close()",
            "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:void close()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void destroy()",
            "org.apache.commons.compress.utils.IOUtils:void closeQuietly(java.io.Closeable)",
            "org.apache.commons.compress.utils.FixedLengthBlockOutputStream$BufferAtATimeOutputChannel:void close()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void close()",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream:void close()",
            "org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge:java.io.InputStream getInputView()",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream:void close()",
            "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream:void close()",
            "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void close()",
            "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream:void close()",
            "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream:void close()",
            "org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore:void closeForWriting()"
        ]
    },
    "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void close()",
            "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:void close()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void destroy()",
            "org.apache.commons.compress.utils.IOUtils:void closeQuietly(java.io.Closeable)",
            "org.apache.commons.compress.utils.FixedLengthBlockOutputStream$BufferAtATimeOutputChannel:void close()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void close()",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream:void close()",
            "org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge:java.io.InputStream getInputView()",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream:void close()",
            "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream:void close()",
            "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void close()",
            "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream:void close()",
            "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream:void close()",
            "org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore:void closeForWriting()"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void close()"
        ]
    },
    "org.apache.commons.compress.utils.IOUtils:void closeQuietly(java.io.Closeable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipFile:void <init>(java.nio.channels.SeekableByteChannel,java.lang.String,java.lang.String,boolean,boolean)",
            "org.apache.commons.compress.archivers.zip.ZipFile:void closeQuietly(org.apache.commons.compress.archivers.zip.ZipFile)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void <init>(java.io.File)",
            "org.apache.commons.compress.archivers.ArchiveStreamFactory:java.lang.String detect(java.io.InputStream)"
        ]
    },
    "org.apache.commons.compress.utils.FixedLengthBlockOutputStream$BufferAtATimeOutputChannel:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.utils.FixedLengthBlockOutputStream:void close()",
            "org.apache.commons.compress.utils.IOUtils:void closeQuietly(java.io.Closeable)",
            "org.apache.commons.compress.utils.FixedLengthBlockOutputStream$BufferAtATimeOutputChannel:int write(java.nio.ByteBuffer)"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void close()",
            "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:void close()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void destroy()",
            "org.apache.commons.compress.utils.IOUtils:void closeQuietly(java.io.Closeable)",
            "org.apache.commons.compress.utils.FixedLengthBlockOutputStream$BufferAtATimeOutputChannel:void close()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void close()",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream:void close()",
            "org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge:java.io.InputStream getInputView()",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream:void close()",
            "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream:void close()",
            "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void close()",
            "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream:void close()",
            "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream:void close()",
            "org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore:void closeForWriting()"
        ]
    },
    "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void close()",
            "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:void close()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void destroy()",
            "org.apache.commons.compress.utils.IOUtils:void closeQuietly(java.io.Closeable)",
            "org.apache.commons.compress.utils.FixedLengthBlockOutputStream$BufferAtATimeOutputChannel:void close()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void close()",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream:void close()",
            "org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge:java.io.InputStream getInputView()",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream:void close()",
            "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream:void close()",
            "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void close()",
            "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream:void close()",
            "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream:void close()",
            "org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore:void closeForWriting()"
        ]
    },
    "org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge:java.io.InputStream getInputView()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.pack200.StreamBridge:java.io.InputStream getInput()"
        ]
    },
    "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void close()",
            "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:void close()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void destroy()",
            "org.apache.commons.compress.utils.IOUtils:void closeQuietly(java.io.Closeable)",
            "org.apache.commons.compress.utils.FixedLengthBlockOutputStream$BufferAtATimeOutputChannel:void close()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void close()",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream:void close()",
            "org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge:java.io.InputStream getInputView()",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream:void close()",
            "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream:void close()",
            "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void close()",
            "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream:void close()",
            "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream:void close()",
            "org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore:void closeForWriting()"
        ]
    },
    "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void close()",
            "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:void close()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void destroy()",
            "org.apache.commons.compress.utils.IOUtils:void closeQuietly(java.io.Closeable)",
            "org.apache.commons.compress.utils.FixedLengthBlockOutputStream$BufferAtATimeOutputChannel:void close()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void close()",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream:void close()",
            "org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge:java.io.InputStream getInputView()",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream:void close()",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream:void flushBlock()",
            "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream:void close()",
            "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void close()",
            "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream:void close()",
            "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream:void close()",
            "org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore:void closeForWriting()"
        ]
    },
    "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void close()",
            "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:void close()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void destroy()",
            "org.apache.commons.compress.utils.IOUtils:void closeQuietly(java.io.Closeable)",
            "org.apache.commons.compress.utils.FixedLengthBlockOutputStream$BufferAtATimeOutputChannel:void close()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void close()",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream:void close()",
            "org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge:java.io.InputStream getInputView()",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream:void close()",
            "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream:void close()",
            "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void close()",
            "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream:void close()",
            "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream:void flushBuffer()",
            "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream:void close()",
            "org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore:void closeForWriting()"
        ]
    },
    "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void close()",
            "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:void close()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void destroy()",
            "org.apache.commons.compress.utils.IOUtils:void closeQuietly(java.io.Closeable)",
            "org.apache.commons.compress.utils.FixedLengthBlockOutputStream$BufferAtATimeOutputChannel:void close()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void close()",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream:void close()",
            "org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge:java.io.InputStream getInputView()",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream:void close()",
            "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream:void close()",
            "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void close()",
            "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream:void close()",
            "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream:void close()",
            "org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore:void closeForWriting()"
        ]
    },
    "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void close()",
            "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:void close()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void destroy()",
            "org.apache.commons.compress.utils.IOUtils:void closeQuietly(java.io.Closeable)",
            "org.apache.commons.compress.utils.FixedLengthBlockOutputStream$BufferAtATimeOutputChannel:void close()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void close()",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream:void close()",
            "org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge:java.io.InputStream getInputView()",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream:void close()",
            "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream:void close()",
            "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void close()",
            "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream:void close()",
            "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream:void close()",
            "org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore:void closeForWriting()"
        ]
    },
    "org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore:void closeForWriting()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream:void writeTo(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream)",
            "org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore:void close()"
        ]
    },
    "org.apache.commons.compress.changes.ChangeSetPerformer:org.apache.commons.compress.changes.ChangeSetResults perform(org.apache.commons.compress.archivers.ArchiveInputStream,org.apache.commons.compress.archivers.ArchiveOutputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.compress.changes.ChangeSetPerformer:org.apache.commons.compress.changes.ChangeSetResults perform(org.apache.commons.compress.archivers.zip.ZipFile,org.apache.commons.compress.archivers.ArchiveOutputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void closeArchiveEntry()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void putArchiveEntry(org.apache.commons.compress.archivers.ArchiveEntry,boolean)",
            "org.apache.commons.compress.changes.ChangeSetPerformer:void copyStream(java.io.InputStream,org.apache.commons.compress.archivers.ArchiveOutputStream,org.apache.commons.compress.archivers.ArchiveEntry)"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void closeCopiedEntry(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void addRawArchiveEntry(org.apache.commons.compress.archivers.zip.ZipArchiveEntry,java.io.InputStream)"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipFile:void copyRawEntries(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream,org.apache.commons.compress.archivers.zip.ZipArchiveEntryPredicate)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream:void writeTo(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator:void writeTo(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream)"
        ]
    },
    "org.apache.commons.compress.archivers.jar.JarArchiveOutputStream:void putArchiveEntry(org.apache.commons.compress.archivers.ArchiveEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.changes.ChangeSetPerformer:void copyStream(java.io.InputStream,org.apache.commons.compress.archivers.ArchiveOutputStream,org.apache.commons.compress.archivers.ArchiveEntry)"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipFile:void <init>(java.nio.channels.SeekableByteChannel,java.lang.String,java.lang.String,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipFile:void <init>(java.io.File,java.lang.String,boolean)",
            "org.apache.commons.compress.archivers.zip.ZipFile:void <init>(java.nio.channels.SeekableByteChannel,java.lang.String,java.lang.String,boolean)"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipFile:void closeQuietly(org.apache.commons.compress.archivers.zip.ZipFile)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void <init>(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.compress.archivers.ArchiveStreamFactory:java.lang.String detect(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.ArchiveStreamFactory:org.apache.commons.compress.archivers.ArchiveInputStream createArchiveInputStream(java.io.InputStream)"
        ]
    },
    "org.apache.commons.compress.utils.FixedLengthBlockOutputStream:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:void close()",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void close()",
            "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:void close()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void destroy()",
            "org.apache.commons.compress.utils.FixedLengthBlockOutputStream:void close()",
            "org.apache.commons.compress.utils.IOUtils:void closeQuietly(java.io.Closeable)",
            "org.apache.commons.compress.utils.FixedLengthBlockOutputStream$BufferAtATimeOutputChannel:void close()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void close()",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream:void close()",
            "org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge:java.io.InputStream getInputView()",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream:void close()",
            "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream:void close()",
            "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void close()",
            "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream:void close()",
            "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream:void close()",
            "org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore:void closeForWriting()"
        ]
    },
    "org.apache.commons.compress.utils.FixedLengthBlockOutputStream$BufferAtATimeOutputChannel:int write(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.utils.FixedLengthBlockOutputStream:void writeBlock()",
            "org.apache.commons.compress.utils.FixedLengthBlockOutputStream:int write(java.nio.ByteBuffer)"
        ]
    },
    "org.apache.commons.compress.compressors.pack200.StreamBridge:java.io.InputStream getInput()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream:void finish()",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read()",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read(byte[])",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int available()",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:boolean markSupported()",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:void mark(int)",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:void reset()",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:long skip(long)"
        ]
    },
    "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream:void flushBlock()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream:void write(byte[],int,int)",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream:void finish()"
        ]
    },
    "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream:void flushBuffer()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream:void write(byte[],int,int)",
            "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream:void finish()"
        ]
    },
    "org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream:void close()",
            "org.apache.commons.compress.utils.IOUtils:void closeQuietly(java.io.Closeable)"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator:void writeTo(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.compress.archivers.zip.ZipFile:void <init>(java.io.File,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipFile:void <init>(java.lang.String,java.lang.String)",
            "org.apache.commons.compress.archivers.zip.ZipFile:void <init>(java.io.File,java.lang.String)"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipFile:void <init>(java.nio.channels.SeekableByteChannel,java.lang.String,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipFile:void <init>(java.nio.channels.SeekableByteChannel)",
            "org.apache.commons.compress.archivers.zip.ZipFile:void <init>(java.nio.channels.SeekableByteChannel,java.lang.String)"
        ]
    },
    "org.apache.commons.compress.archivers.ArchiveStreamFactory:org.apache.commons.compress.archivers.ArchiveInputStream createArchiveInputStream(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.Lister:org.apache.commons.compress.archivers.ArchiveInputStream createArchiveInputStream(java.lang.String[],java.io.InputStream)"
        ]
    },
    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void close()",
            "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:void close()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void destroy()",
            "org.apache.commons.compress.utils.IOUtils:void closeQuietly(java.io.Closeable)",
            "org.apache.commons.compress.utils.FixedLengthBlockOutputStream$BufferAtATimeOutputChannel:void close()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void close()",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream:void close()",
            "org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge:java.io.InputStream getInputView()",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream:void close()",
            "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream:void close()",
            "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void close()",
            "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream:void close()",
            "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream:void close()",
            "org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore:void closeForWriting()"
        ]
    },
    "org.apache.commons.compress.utils.FixedLengthBlockOutputStream:void writeBlock()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.utils.FixedLengthBlockOutputStream:void maybeFlush()",
            "org.apache.commons.compress.utils.FixedLengthBlockOutputStream:int write(java.nio.ByteBuffer)",
            "org.apache.commons.compress.utils.FixedLengthBlockOutputStream:void flushBlock()"
        ]
    },
    "org.apache.commons.compress.utils.FixedLengthBlockOutputStream:int write(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.utils.FixedLengthBlockOutputStream:void writeBlock()",
            "org.apache.commons.compress.utils.FixedLengthBlockOutputStream:int write(java.nio.ByteBuffer)"
        ]
    },
    "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream:void finish()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream:void close()"
        ]
    },
    "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:java.util.Map parsePaxHeaders(java.io.InputStream)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:java.lang.String readCString(int)",
            "org.apache.commons.compress.archivers.sevenz.SevenZFile:int read()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:int readOneByte()",
            "org.apache.commons.compress.archivers.zip.BinaryTree:org.apache.commons.compress.archivers.zip.BinaryTree decode(java.io.InputStream,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream:int read()",
            "org.apache.commons.compress.utils.ByteUtils$InputStreamByteSupplier:int getAsByte()",
            "org.apache.commons.compress.utils.BitInputStream:long processBitsGreater57(int)",
            "org.apache.commons.compress.utils.BitInputStream:boolean ensureCache(int)",
            "org.apache.commons.compress.utils.ChecksumCalculatingInputStream:int read()",
            "org.apache.commons.compress.utils.ByteUtils:long fromLittleEndian(java.io.InputStream,int)",
            "org.apache.commons.compress.utils.CountingInputStream:int read()",
            "org.apache.commons.compress.utils.ChecksumVerifyingInputStream:int read()",
            "org.apache.commons.compress.utils.BoundedInputStream:int read()",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read()",
            "org.apache.commons.compress.compressors.xz.XZCompressorInputStream:int read()",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream:int readOneByte()",
            "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream:int readOneByte()",
            "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream:int read()",
            "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream:boolean init(boolean)",
            "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream:int read()"
        ]
    },
    "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:int readStored(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:int fill()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void copyFromZipInputStream(java.io.InputStream)",
            "org.apache.commons.compress.utils.IOUtils:long copy(java.io.InputStream,java.io.OutputStream,int)",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read(byte[])",
            "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream:int read(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.sevenz.SevenZFile:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void drainCurrentEntryData()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void readStoredEntry()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void realSkip(long)",
            "org.apache.commons.compress.archivers.zip.StreamCompressor:void deflate(java.io.InputStream,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.ChecksumCalculatingInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.IOUtils:int readFully(java.io.InputStream,byte[],int,int)",
            "org.apache.commons.compress.utils.CountingInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.ChecksumVerifyingInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.BoundedInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.xz.XZCompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream:int readOnce(byte[],int,int)",
            "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream:int read(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int available()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.dump.TapeInputStream:int available()",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:org.apache.commons.compress.archivers.ar.ArArchiveEntry getNextArEntry()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream:int available()",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int available()",
            "org.apache.commons.compress.compressors.xz.XZCompressorInputStream:int available()",
            "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream:int available()",
            "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream:int available()"
        ]
    },
    "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:boolean markSupported()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:void tryToConsumeSecondEOFRecord()",
            "org.apache.commons.compress.archivers.ArchiveStreamFactory:java.lang.String detect(java.io.InputStream)",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:boolean markSupported()",
            "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream:void <init>(java.io.InputStream,boolean)",
            "org.apache.commons.compress.compressors.CompressorStreamFactory:java.lang.String detect(java.io.InputStream)"
        ]
    },
    "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:void mark(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:void tryToConsumeSecondEOFRecord()",
            "org.apache.commons.compress.archivers.ArchiveStreamFactory:java.lang.String detect(java.io.InputStream)",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:void mark(int)",
            "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.CompressorStreamFactory:java.lang.String detect(java.io.InputStream)"
        ]
    },
    "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:void reset()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:void tryToConsumeSecondEOFRecord()",
            "org.apache.commons.compress.archivers.ArchiveStreamFactory:java.lang.String detect(java.io.InputStream)",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:void reset()",
            "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.CompressorStreamFactory:java.lang.String detect(java.io.InputStream)"
        ]
    },
    "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:long skip(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:long skip(long)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream:long skip(long)",
            "org.apache.commons.compress.utils.IOUtils:long skip(java.io.InputStream,long)",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:long skip(long)",
            "org.apache.commons.compress.compressors.xz.XZCompressorInputStream:long skip(long)",
            "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream:long skip(long)",
            "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream:long skip(long)"
        ]
    },
    "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream:void write(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void write(byte[],int,int)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeCString(java.lang.String)",
            "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:void write(byte[],int,int)",
            "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:void write(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.StreamCompressor$OutputStreamCompressor:void writeOut(byte[],int,int)",
            "org.apache.commons.compress.utils.IOUtils:long copy(java.io.InputStream,java.io.OutputStream,int)",
            "org.apache.commons.compress.utils.FixedLengthBlockOutputStream$BufferAtATimeOutputChannel:int write(java.nio.ByteBuffer)",
            "org.apache.commons.compress.utils.CountingOutputStream:void write(byte[],int,int)",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream:void flushBlock()",
            "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void writeLiteralBlockWithSize(int,int,int,org.apache.commons.compress.compressors.lz77support.LZ77Compressor$LiteralBlock)",
            "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream:void deflate()",
            "org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore:void writeOut(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream:void finish()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream:void close()"
        ]
    },
    "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream:void write(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void write(byte[],int,int)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeCString(java.lang.String)",
            "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:void write(byte[],int,int)",
            "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:void write(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.StreamCompressor$OutputStreamCompressor:void writeOut(byte[],int,int)",
            "org.apache.commons.compress.utils.IOUtils:long copy(java.io.InputStream,java.io.OutputStream,int)",
            "org.apache.commons.compress.utils.FixedLengthBlockOutputStream$BufferAtATimeOutputChannel:int write(java.nio.ByteBuffer)",
            "org.apache.commons.compress.utils.CountingOutputStream:void write(byte[],int,int)",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream:void flushBlock()",
            "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void writeLiteralBlockWithSize(int,int,int,org.apache.commons.compress.compressors.lz77support.LZ77Compressor$LiteralBlock)",
            "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream:void deflate()",
            "org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore:void writeOut(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream:void finish()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream:void close()"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator:void writeTo(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream)",
            "org.apache.commons.compress.utils.IOUtils:void closeQuietly(java.io.Closeable)"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipFile:void <init>(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.compress.archivers.zip.ZipFile:void <init>(java.io.File,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipFile:void <init>(java.io.File)",
            "org.apache.commons.compress.archivers.zip.ZipFile:void <init>(java.lang.String)"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipFile:void <init>(java.nio.channels.SeekableByteChannel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.compress.archivers.zip.ZipFile:void <init>(java.nio.channels.SeekableByteChannel,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.compress.archivers.Lister:org.apache.commons.compress.archivers.ArchiveInputStream createArchiveInputStream(java.lang.String[],java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.Lister:void main(java.lang.String[])"
        ]
    },
    "org.apache.commons.compress.utils.FixedLengthBlockOutputStream:void maybeFlush()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.utils.FixedLengthBlockOutputStream:void write(int)",
            "org.apache.commons.compress.utils.FixedLengthBlockOutputStream:void write(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.utils.FixedLengthBlockOutputStream:void flushBlock()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:void closeArchiveEntry()",
            "org.apache.commons.compress.utils.FixedLengthBlockOutputStream:void close()"
        ]
    },
    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:java.util.Map parsePaxHeaders(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:void readGlobalPaxHeaders()",
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:void paxHeaders()"
        ]
    },
    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:java.lang.String readCString(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:org.apache.commons.compress.archivers.cpio.CpioArchiveEntry readNewEntry(boolean)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:org.apache.commons.compress.archivers.cpio.CpioArchiveEntry readOldAsciiEntry()",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:org.apache.commons.compress.archivers.cpio.CpioArchiveEntry readOldBinaryEntry(boolean)"
        ]
    },
    "org.apache.commons.compress.archivers.sevenz.SevenZFile:int read()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:int readOneByte()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void findEocdRecord()"
        ]
    },
    "org.apache.commons.compress.archivers.zip.BinaryTree:org.apache.commons.compress.archivers.zip.BinaryTree decode(java.io.InputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ExplodingInputStream:void init()"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream:int read()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:java.util.Map parsePaxHeaders(java.io.InputStream)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:java.lang.String readCString(int)",
            "org.apache.commons.compress.archivers.sevenz.SevenZFile:int read()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:int readOneByte()",
            "org.apache.commons.compress.archivers.zip.BinaryTree:org.apache.commons.compress.archivers.zip.BinaryTree decode(java.io.InputStream,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream:int read()",
            "org.apache.commons.compress.utils.ByteUtils$InputStreamByteSupplier:int getAsByte()",
            "org.apache.commons.compress.utils.BitInputStream:long processBitsGreater57(int)",
            "org.apache.commons.compress.utils.BitInputStream:boolean ensureCache(int)",
            "org.apache.commons.compress.utils.ChecksumCalculatingInputStream:int read()",
            "org.apache.commons.compress.utils.ByteUtils:long fromLittleEndian(java.io.InputStream,int)",
            "org.apache.commons.compress.utils.CountingInputStream:int read()",
            "org.apache.commons.compress.utils.ChecksumVerifyingInputStream:int read()",
            "org.apache.commons.compress.utils.BoundedInputStream:int read()",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read()",
            "org.apache.commons.compress.compressors.xz.XZCompressorInputStream:int read()",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream:int readOneByte()",
            "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream:int readOneByte()",
            "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream:int read()",
            "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream:boolean init(boolean)",
            "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream:int read()"
        ]
    },
    "org.apache.commons.compress.utils.ByteUtils$InputStreamByteSupplier:int getAsByte()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.utils.ByteUtils:long fromLittleEndian(org.apache.commons.compress.utils.ByteUtils$ByteSupplier,int)"
        ]
    },
    "org.apache.commons.compress.utils.BitInputStream:long processBitsGreater57(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.utils.BitInputStream:long readBits(int)"
        ]
    },
    "org.apache.commons.compress.utils.BitInputStream:boolean ensureCache(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.utils.BitInputStream:long readBits(int)"
        ]
    },
    "org.apache.commons.compress.utils.ChecksumCalculatingInputStream:int read()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:java.util.Map parsePaxHeaders(java.io.InputStream)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:java.lang.String readCString(int)",
            "org.apache.commons.compress.archivers.sevenz.SevenZFile:int read()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:int readOneByte()",
            "org.apache.commons.compress.archivers.zip.BinaryTree:org.apache.commons.compress.archivers.zip.BinaryTree decode(java.io.InputStream,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream:int read()",
            "org.apache.commons.compress.utils.ByteUtils$InputStreamByteSupplier:int getAsByte()",
            "org.apache.commons.compress.utils.BitInputStream:long processBitsGreater57(int)",
            "org.apache.commons.compress.utils.BitInputStream:boolean ensureCache(int)",
            "org.apache.commons.compress.utils.ChecksumCalculatingInputStream:int read()",
            "org.apache.commons.compress.utils.ChecksumCalculatingInputStream:long skip(long)",
            "org.apache.commons.compress.utils.ByteUtils:long fromLittleEndian(java.io.InputStream,int)",
            "org.apache.commons.compress.utils.CountingInputStream:int read()",
            "org.apache.commons.compress.utils.ChecksumVerifyingInputStream:int read()",
            "org.apache.commons.compress.utils.BoundedInputStream:int read()",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read()",
            "org.apache.commons.compress.compressors.xz.XZCompressorInputStream:int read()",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream:int readOneByte()",
            "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream:int readOneByte()",
            "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream:int read()",
            "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream:boolean init(boolean)",
            "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream:int read()"
        ]
    },
    "org.apache.commons.compress.utils.ByteUtils:long fromLittleEndian(java.io.InputStream,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.compress.utils.CountingInputStream:int read()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:java.util.Map parsePaxHeaders(java.io.InputStream)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:java.lang.String readCString(int)",
            "org.apache.commons.compress.archivers.sevenz.SevenZFile:int read()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:int readOneByte()",
            "org.apache.commons.compress.archivers.zip.BinaryTree:org.apache.commons.compress.archivers.zip.BinaryTree decode(java.io.InputStream,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream:int read()",
            "org.apache.commons.compress.utils.ByteUtils$InputStreamByteSupplier:int getAsByte()",
            "org.apache.commons.compress.utils.BitInputStream:long processBitsGreater57(int)",
            "org.apache.commons.compress.utils.BitInputStream:boolean ensureCache(int)",
            "org.apache.commons.compress.utils.ChecksumCalculatingInputStream:int read()",
            "org.apache.commons.compress.utils.ByteUtils:long fromLittleEndian(java.io.InputStream,int)",
            "org.apache.commons.compress.utils.CountingInputStream:int read()",
            "org.apache.commons.compress.utils.ChecksumVerifyingInputStream:int read()",
            "org.apache.commons.compress.utils.BoundedInputStream:int read()",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read()",
            "org.apache.commons.compress.compressors.xz.XZCompressorInputStream:int read()",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream:int readOneByte()",
            "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream:int readOneByte()",
            "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream:int read()",
            "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream:boolean init(boolean)",
            "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream:int read()"
        ]
    },
    "org.apache.commons.compress.utils.ChecksumVerifyingInputStream:int read()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:java.util.Map parsePaxHeaders(java.io.InputStream)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:java.lang.String readCString(int)",
            "org.apache.commons.compress.archivers.sevenz.SevenZFile:int read()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:int readOneByte()",
            "org.apache.commons.compress.archivers.zip.BinaryTree:org.apache.commons.compress.archivers.zip.BinaryTree decode(java.io.InputStream,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream:int read()",
            "org.apache.commons.compress.utils.ByteUtils$InputStreamByteSupplier:int getAsByte()",
            "org.apache.commons.compress.utils.BitInputStream:long processBitsGreater57(int)",
            "org.apache.commons.compress.utils.BitInputStream:boolean ensureCache(int)",
            "org.apache.commons.compress.utils.ChecksumCalculatingInputStream:int read()",
            "org.apache.commons.compress.utils.ByteUtils:long fromLittleEndian(java.io.InputStream,int)",
            "org.apache.commons.compress.utils.CountingInputStream:int read()",
            "org.apache.commons.compress.utils.ChecksumVerifyingInputStream:int read()",
            "org.apache.commons.compress.utils.ChecksumVerifyingInputStream:long skip(long)",
            "org.apache.commons.compress.utils.BoundedInputStream:int read()",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read()",
            "org.apache.commons.compress.compressors.xz.XZCompressorInputStream:int read()",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream:int readOneByte()",
            "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream:int readOneByte()",
            "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream:int read()",
            "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream:boolean init(boolean)",
            "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream:int read()"
        ]
    },
    "org.apache.commons.compress.utils.BoundedInputStream:int read()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:java.util.Map parsePaxHeaders(java.io.InputStream)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:java.lang.String readCString(int)",
            "org.apache.commons.compress.archivers.sevenz.SevenZFile:int read()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:int readOneByte()",
            "org.apache.commons.compress.archivers.zip.BinaryTree:org.apache.commons.compress.archivers.zip.BinaryTree decode(java.io.InputStream,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream:int read()",
            "org.apache.commons.compress.utils.ByteUtils$InputStreamByteSupplier:int getAsByte()",
            "org.apache.commons.compress.utils.BitInputStream:long processBitsGreater57(int)",
            "org.apache.commons.compress.utils.BitInputStream:boolean ensureCache(int)",
            "org.apache.commons.compress.utils.ChecksumCalculatingInputStream:int read()",
            "org.apache.commons.compress.utils.ByteUtils:long fromLittleEndian(java.io.InputStream,int)",
            "org.apache.commons.compress.utils.CountingInputStream:int read()",
            "org.apache.commons.compress.utils.ChecksumVerifyingInputStream:int read()",
            "org.apache.commons.compress.utils.BoundedInputStream:int read()",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read()",
            "org.apache.commons.compress.compressors.xz.XZCompressorInputStream:int read()",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream:int readOneByte()",
            "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream:int readOneByte()",
            "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream:int read()",
            "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream:boolean init(boolean)",
            "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream:int read()"
        ]
    },
    "org.apache.commons.compress.compressors.xz.XZCompressorInputStream:int read()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:java.util.Map parsePaxHeaders(java.io.InputStream)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:java.lang.String readCString(int)",
            "org.apache.commons.compress.archivers.sevenz.SevenZFile:int read()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:int readOneByte()",
            "org.apache.commons.compress.archivers.zip.BinaryTree:org.apache.commons.compress.archivers.zip.BinaryTree decode(java.io.InputStream,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream:int read()",
            "org.apache.commons.compress.utils.ByteUtils$InputStreamByteSupplier:int getAsByte()",
            "org.apache.commons.compress.utils.BitInputStream:long processBitsGreater57(int)",
            "org.apache.commons.compress.utils.BitInputStream:boolean ensureCache(int)",
            "org.apache.commons.compress.utils.ChecksumCalculatingInputStream:int read()",
            "org.apache.commons.compress.utils.ByteUtils:long fromLittleEndian(java.io.InputStream,int)",
            "org.apache.commons.compress.utils.CountingInputStream:int read()",
            "org.apache.commons.compress.utils.ChecksumVerifyingInputStream:int read()",
            "org.apache.commons.compress.utils.BoundedInputStream:int read()",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read()",
            "org.apache.commons.compress.compressors.xz.XZCompressorInputStream:int read()",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream:int readOneByte()",
            "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream:int readOneByte()",
            "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream:int read()",
            "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream:boolean init(boolean)",
            "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream:int read()"
        ]
    },
    "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream:int readOneByte()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream:void readFrameDescriptor()",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream:int access$000(org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream)"
        ]
    },
    "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream:int readOneByte()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream:void readSizes()",
            "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream:long readSizeBytes()",
            "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream$1:int getAsByte()",
            "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream:void fill()",
            "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream:int readLiteralLength(int)",
            "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream:long readSize()"
        ]
    },
    "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream:int read()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:java.util.Map parsePaxHeaders(java.io.InputStream)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:java.lang.String readCString(int)",
            "org.apache.commons.compress.archivers.sevenz.SevenZFile:int read()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:int readOneByte()",
            "org.apache.commons.compress.archivers.zip.BinaryTree:org.apache.commons.compress.archivers.zip.BinaryTree decode(java.io.InputStream,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream:int read()",
            "org.apache.commons.compress.utils.ByteUtils$InputStreamByteSupplier:int getAsByte()",
            "org.apache.commons.compress.utils.BitInputStream:long processBitsGreater57(int)",
            "org.apache.commons.compress.utils.BitInputStream:boolean ensureCache(int)",
            "org.apache.commons.compress.utils.ChecksumCalculatingInputStream:int read()",
            "org.apache.commons.compress.utils.ByteUtils:long fromLittleEndian(java.io.InputStream,int)",
            "org.apache.commons.compress.utils.CountingInputStream:int read()",
            "org.apache.commons.compress.utils.ChecksumVerifyingInputStream:int read()",
            "org.apache.commons.compress.utils.BoundedInputStream:int read()",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read()",
            "org.apache.commons.compress.compressors.xz.XZCompressorInputStream:int read()",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream:int readOneByte()",
            "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream:int readOneByte()",
            "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream:int read()",
            "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream:boolean init(boolean)",
            "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream:int read()"
        ]
    },
    "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream:boolean init(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream:void <init>(java.io.InputStream,boolean)",
            "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream:int read(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream:int read()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:java.util.Map parsePaxHeaders(java.io.InputStream)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:java.lang.String readCString(int)",
            "org.apache.commons.compress.archivers.sevenz.SevenZFile:int read()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:int readOneByte()",
            "org.apache.commons.compress.archivers.zip.BinaryTree:org.apache.commons.compress.archivers.zip.BinaryTree decode(java.io.InputStream,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream:int read()",
            "org.apache.commons.compress.utils.ByteUtils$InputStreamByteSupplier:int getAsByte()",
            "org.apache.commons.compress.utils.BitInputStream:long processBitsGreater57(int)",
            "org.apache.commons.compress.utils.BitInputStream:boolean ensureCache(int)",
            "org.apache.commons.compress.utils.ChecksumCalculatingInputStream:int read()",
            "org.apache.commons.compress.utils.ByteUtils:long fromLittleEndian(java.io.InputStream,int)",
            "org.apache.commons.compress.utils.CountingInputStream:int read()",
            "org.apache.commons.compress.utils.ChecksumVerifyingInputStream:int read()",
            "org.apache.commons.compress.utils.BoundedInputStream:int read()",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read()",
            "org.apache.commons.compress.compressors.xz.XZCompressorInputStream:int read()",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream:int readOneByte()",
            "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream:int readOneByte()",
            "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream:int read()",
            "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream:boolean init(boolean)",
            "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream:int read()"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:int readStored(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:int read(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:int fill()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:int readFromInflater(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void copyFromZipInputStream(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void addRawArchiveEntry(org.apache.commons.compress.archivers.zip.ZipArchiveEntry,java.io.InputStream)"
        ]
    },
    "org.apache.commons.compress.utils.IOUtils:long copy(java.io.InputStream,java.io.OutputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.utils.IOUtils:long copy(java.io.InputStream,java.io.OutputStream)"
        ]
    },
    "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream:int read(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.sevenz.SevenZFile:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void drainCurrentEntryData()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void readStoredEntry()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void realSkip(long)",
            "org.apache.commons.compress.archivers.zip.StreamCompressor:void deflate(java.io.InputStream,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.ChecksumCalculatingInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.IOUtils:int readFully(java.io.InputStream,byte[],int,int)",
            "org.apache.commons.compress.utils.CountingInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.ChecksumVerifyingInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.BoundedInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.xz.XZCompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream:int readOnce(byte[],int,int)",
            "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream:int read()",
            "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream:int read(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream:int read(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.sevenz.SevenZFile:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void drainCurrentEntryData()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void readStoredEntry()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void realSkip(long)",
            "org.apache.commons.compress.archivers.zip.StreamCompressor:void deflate(java.io.InputStream,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.ArchiveInputStream:int read()",
            "org.apache.commons.compress.utils.ChecksumCalculatingInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.IOUtils:int readFully(java.io.InputStream,byte[],int,int)",
            "org.apache.commons.compress.utils.CountingInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.ChecksumVerifyingInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.BoundedInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.xz.XZCompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream:int readOnce(byte[],int,int)",
            "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream:int read(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:int read(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.sevenz.SevenZFile:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void drainCurrentEntryData()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void readStoredEntry()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void realSkip(long)",
            "org.apache.commons.compress.archivers.zip.StreamCompressor:void deflate(java.io.InputStream,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.ArchiveInputStream:int read()",
            "org.apache.commons.compress.utils.ChecksumCalculatingInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.IOUtils:int readFully(java.io.InputStream,byte[],int,int)",
            "org.apache.commons.compress.utils.CountingInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.ChecksumVerifyingInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.BoundedInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.xz.XZCompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream:int readOnce(byte[],int,int)",
            "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream:int read(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:int read(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.sevenz.SevenZFile:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void drainCurrentEntryData()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void readStoredEntry()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void realSkip(long)",
            "org.apache.commons.compress.archivers.zip.StreamCompressor:void deflate(java.io.InputStream,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.ArchiveInputStream:int read()",
            "org.apache.commons.compress.utils.ChecksumCalculatingInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.IOUtils:int readFully(java.io.InputStream,byte[],int,int)",
            "org.apache.commons.compress.utils.CountingInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.ChecksumVerifyingInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.BoundedInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.xz.XZCompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream:int readOnce(byte[],int,int)",
            "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream:int read(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.archivers.sevenz.SevenZFile:int read(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.sevenz.SevenZFile:int read(byte[])",
            "org.apache.commons.compress.archivers.sevenz.CLI$Mode$2:void takeAction(org.apache.commons.compress.archivers.sevenz.SevenZFile,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry)"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:int read(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.sevenz.SevenZFile:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:long skip(long)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void drainCurrentEntryData()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void readStoredEntry()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void realSkip(long)",
            "org.apache.commons.compress.archivers.zip.StreamCompressor:void deflate(java.io.InputStream,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.ArchiveInputStream:int read()",
            "org.apache.commons.compress.utils.ChecksumCalculatingInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.IOUtils:int readFully(java.io.InputStream,byte[],int,int)",
            "org.apache.commons.compress.utils.CountingInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.ChecksumVerifyingInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.BoundedInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.xz.XZCompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream:int readOnce(byte[],int,int)",
            "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream:int read(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void drainCurrentEntryData()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void closeEntry()"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void readStoredEntry()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:int readStored(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void realSkip(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void skipRemainderOfArchive()"
        ]
    },
    "org.apache.commons.compress.archivers.zip.StreamCompressor:void deflate(java.io.InputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream:void addArchiveEntry(org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest)"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream:int read(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.sevenz.SevenZFile:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void drainCurrentEntryData()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void readStoredEntry()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void realSkip(long)",
            "org.apache.commons.compress.archivers.zip.StreamCompressor:void deflate(java.io.InputStream,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream:int read(byte[])",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.ChecksumCalculatingInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.IOUtils:int readFully(java.io.InputStream,byte[],int,int)",
            "org.apache.commons.compress.utils.CountingInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.ChecksumVerifyingInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.BoundedInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.xz.XZCompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream:int readOnce(byte[],int,int)",
            "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream:int read(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.utils.ChecksumCalculatingInputStream:int read(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.sevenz.SevenZFile:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void drainCurrentEntryData()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void readStoredEntry()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void realSkip(long)",
            "org.apache.commons.compress.archivers.zip.StreamCompressor:void deflate(java.io.InputStream,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.ChecksumCalculatingInputStream:int read(byte[])",
            "org.apache.commons.compress.utils.ChecksumCalculatingInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.IOUtils:int readFully(java.io.InputStream,byte[],int,int)",
            "org.apache.commons.compress.utils.CountingInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.ChecksumVerifyingInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.BoundedInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.xz.XZCompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream:int readOnce(byte[],int,int)",
            "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream:int read(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.utils.IOUtils:int readFully(java.io.InputStream,byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.dump.TapeInputStream:void readFully(byte[],int,int)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:int readFully(byte[],int,int)",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:org.apache.commons.compress.archivers.ar.ArArchiveEntry readGNUStringTable(byte[])",
            "org.apache.commons.compress.utils.IOUtils:long skip(java.io.InputStream,long)",
            "org.apache.commons.compress.utils.IOUtils:int readFully(java.io.InputStream,byte[])",
            "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream:void tryToReadLiteral(int)"
        ]
    },
    "org.apache.commons.compress.utils.CountingInputStream:int read(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.sevenz.SevenZFile:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void drainCurrentEntryData()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void readStoredEntry()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void realSkip(long)",
            "org.apache.commons.compress.archivers.zip.StreamCompressor:void deflate(java.io.InputStream,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.ChecksumCalculatingInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.IOUtils:int readFully(java.io.InputStream,byte[],int,int)",
            "org.apache.commons.compress.utils.CountingInputStream:int read(byte[])",
            "org.apache.commons.compress.utils.CountingInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.ChecksumVerifyingInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.BoundedInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.xz.XZCompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream:int readOnce(byte[],int,int)",
            "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream:int read(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.utils.ChecksumVerifyingInputStream:int read(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.sevenz.SevenZFile:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void drainCurrentEntryData()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void readStoredEntry()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void realSkip(long)",
            "org.apache.commons.compress.archivers.zip.StreamCompressor:void deflate(java.io.InputStream,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.ChecksumCalculatingInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.IOUtils:int readFully(java.io.InputStream,byte[],int,int)",
            "org.apache.commons.compress.utils.CountingInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.ChecksumVerifyingInputStream:int read(byte[])",
            "org.apache.commons.compress.utils.ChecksumVerifyingInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.BoundedInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.xz.XZCompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream:int readOnce(byte[],int,int)",
            "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream:int read(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.utils.BoundedInputStream:int read(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.sevenz.SevenZFile:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void drainCurrentEntryData()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void readStoredEntry()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void realSkip(long)",
            "org.apache.commons.compress.archivers.zip.StreamCompressor:void deflate(java.io.InputStream,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.ChecksumCalculatingInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.IOUtils:int readFully(java.io.InputStream,byte[],int,int)",
            "org.apache.commons.compress.utils.CountingInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.ChecksumVerifyingInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.BoundedInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.xz.XZCompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream:int readOnce(byte[],int,int)",
            "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream:int read(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.compressors.xz.XZCompressorInputStream:int read(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.sevenz.SevenZFile:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void drainCurrentEntryData()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void readStoredEntry()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void realSkip(long)",
            "org.apache.commons.compress.archivers.zip.StreamCompressor:void deflate(java.io.InputStream,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.ChecksumCalculatingInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.IOUtils:int readFully(java.io.InputStream,byte[],int,int)",
            "org.apache.commons.compress.utils.CountingInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.ChecksumVerifyingInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.BoundedInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.xz.XZCompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream:int readOnce(byte[],int,int)",
            "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream:int read(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream:int readOnce(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream:int read(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream:int read(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.sevenz.SevenZFile:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void drainCurrentEntryData()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void readStoredEntry()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void realSkip(long)",
            "org.apache.commons.compress.archivers.zip.StreamCompressor:void deflate(java.io.InputStream,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.ChecksumCalculatingInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.IOUtils:int readFully(java.io.InputStream,byte[],int,int)",
            "org.apache.commons.compress.utils.CountingInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.ChecksumVerifyingInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.BoundedInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.xz.XZCompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream:int readOnce(byte[],int,int)",
            "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream:int read(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream:int read(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.sevenz.SevenZFile:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void drainCurrentEntryData()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void readStoredEntry()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void realSkip(long)",
            "org.apache.commons.compress.archivers.zip.StreamCompressor:void deflate(java.io.InputStream,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.ChecksumCalculatingInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.IOUtils:int readFully(java.io.InputStream,byte[],int,int)",
            "org.apache.commons.compress.utils.CountingInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.ChecksumVerifyingInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.BoundedInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.xz.XZCompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream:int readOnce(byte[],int,int)",
            "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream:int read(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.archivers.dump.TapeInputStream:int available()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.dump.TapeInputStream:int available()",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:org.apache.commons.compress.archivers.ar.ArArchiveEntry getNextArEntry()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream:int available()",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int available()",
            "org.apache.commons.compress.compressors.xz.XZCompressorInputStream:int available()",
            "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream:int available()",
            "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream:int available()"
        ]
    },
    "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:org.apache.commons.compress.archivers.ar.ArArchiveEntry getNextArEntry()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:org.apache.commons.compress.archivers.ar.ArArchiveEntry getNextArEntry()",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:org.apache.commons.compress.archivers.ArchiveEntry getNextEntry()"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream:int available()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.dump.TapeInputStream:int available()",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:org.apache.commons.compress.archivers.ar.ArArchiveEntry getNextArEntry()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream:int available()",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int available()",
            "org.apache.commons.compress.compressors.xz.XZCompressorInputStream:int available()",
            "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream:int available()",
            "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream:int available()"
        ]
    },
    "org.apache.commons.compress.compressors.xz.XZCompressorInputStream:int available()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.dump.TapeInputStream:int available()",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:org.apache.commons.compress.archivers.ar.ArArchiveEntry getNextArEntry()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream:int available()",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int available()",
            "org.apache.commons.compress.compressors.xz.XZCompressorInputStream:int available()",
            "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream:int available()",
            "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream:int available()"
        ]
    },
    "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream:int available()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.dump.TapeInputStream:int available()",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:org.apache.commons.compress.archivers.ar.ArArchiveEntry getNextArEntry()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream:int available()",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int available()",
            "org.apache.commons.compress.compressors.xz.XZCompressorInputStream:int available()",
            "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream:int available()",
            "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream:int available()"
        ]
    },
    "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream:int available()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.dump.TapeInputStream:int available()",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:org.apache.commons.compress.archivers.ar.ArArchiveEntry getNextArEntry()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream:int available()",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int available()",
            "org.apache.commons.compress.compressors.xz.XZCompressorInputStream:int available()",
            "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream:int available()",
            "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream:int available()"
        ]
    },
    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:void tryToConsumeSecondEOFRecord()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:byte[] getRecord()"
        ]
    },
    "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream:void <init>(java.io.InputStream,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream:void <init>(java.io.InputStream)",
            "org.apache.commons.compress.compressors.CompressorStreamFactory:org.apache.commons.compress.compressors.CompressorInputStream createCompressorInputStream(java.lang.String,java.io.InputStream,boolean)"
        ]
    },
    "org.apache.commons.compress.compressors.CompressorStreamFactory:java.lang.String detect(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.CompressorStreamFactory:org.apache.commons.compress.compressors.CompressorInputStream createCompressorInputStream(java.io.InputStream)"
        ]
    },
    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:long skip(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:long skip(long)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream:long skip(long)",
            "org.apache.commons.compress.utils.IOUtils:long skip(java.io.InputStream,long)",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:long skip(long)",
            "org.apache.commons.compress.compressors.xz.XZCompressorInputStream:long skip(long)",
            "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream:long skip(long)",
            "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream:long skip(long)"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream:long skip(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:long skip(long)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream:long skip(long)",
            "org.apache.commons.compress.utils.IOUtils:long skip(java.io.InputStream,long)",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:long skip(long)",
            "org.apache.commons.compress.compressors.xz.XZCompressorInputStream:long skip(long)",
            "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream:long skip(long)",
            "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream:long skip(long)"
        ]
    },
    "org.apache.commons.compress.utils.IOUtils:long skip(java.io.InputStream,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream:org.apache.commons.compress.archivers.arj.ArjArchiveEntry getNextEntry()",
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:org.apache.commons.compress.archivers.tar.TarArchiveEntry getNextTarEntry()",
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:void skipRecordPadding()",
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:void consumeRemainderOfLastBlock()",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:org.apache.commons.compress.archivers.ar.ArArchiveEntry getNextArEntry()",
            "org.apache.commons.compress.archivers.sevenz.SevenZFile:java.io.InputStream getCurrentStream()",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream:int skipSkippableFrame(byte[])",
            "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream:void skipBlock()"
        ]
    },
    "org.apache.commons.compress.compressors.xz.XZCompressorInputStream:long skip(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:long skip(long)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream:long skip(long)",
            "org.apache.commons.compress.utils.IOUtils:long skip(java.io.InputStream,long)",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:long skip(long)",
            "org.apache.commons.compress.compressors.xz.XZCompressorInputStream:long skip(long)",
            "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream:long skip(long)",
            "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream:long skip(long)"
        ]
    },
    "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream:long skip(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:long skip(long)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream:long skip(long)",
            "org.apache.commons.compress.utils.IOUtils:long skip(java.io.InputStream,long)",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:long skip(long)",
            "org.apache.commons.compress.compressors.xz.XZCompressorInputStream:long skip(long)",
            "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream:long skip(long)",
            "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream:long skip(long)"
        ]
    },
    "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream:long skip(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:long skip(long)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream:long skip(long)",
            "org.apache.commons.compress.utils.IOUtils:long skip(java.io.InputStream,long)",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:long skip(long)",
            "org.apache.commons.compress.compressors.xz.XZCompressorInputStream:long skip(long)",
            "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream:long skip(long)",
            "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream:long skip(long)"
        ]
    },
    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void write(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void write(byte[],int,int)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeCString(java.lang.String)",
            "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:void write(byte[],int,int)",
            "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:void write(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.StreamCompressor$OutputStreamCompressor:void writeOut(byte[],int,int)",
            "org.apache.commons.compress.archivers.ArchiveOutputStream:void write(int)",
            "org.apache.commons.compress.utils.IOUtils:long copy(java.io.InputStream,java.io.OutputStream,int)",
            "org.apache.commons.compress.utils.FixedLengthBlockOutputStream$BufferAtATimeOutputChannel:int write(java.nio.ByteBuffer)",
            "org.apache.commons.compress.utils.CountingOutputStream:void write(byte[],int,int)",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream:void flushBlock()",
            "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void writeLiteralBlockWithSize(int,int,int,org.apache.commons.compress.compressors.lz77support.LZ77Compressor$LiteralBlock)",
            "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream:void deflate()",
            "org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore:void writeOut(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:void write(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void write(byte[],int,int)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeCString(java.lang.String)",
            "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:void write(byte[],int,int)",
            "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:void write(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.StreamCompressor$OutputStreamCompressor:void writeOut(byte[],int,int)",
            "org.apache.commons.compress.archivers.ArchiveOutputStream:void write(int)",
            "org.apache.commons.compress.utils.IOUtils:long copy(java.io.InputStream,java.io.OutputStream,int)",
            "org.apache.commons.compress.utils.FixedLengthBlockOutputStream$BufferAtATimeOutputChannel:int write(java.nio.ByteBuffer)",
            "org.apache.commons.compress.utils.CountingOutputStream:void write(byte[],int,int)",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream:void flushBlock()",
            "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void writeLiteralBlockWithSize(int,int,int,org.apache.commons.compress.compressors.lz77support.LZ77Compressor$LiteralBlock)",
            "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream:void deflate()",
            "org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore:void writeOut(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:void write(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:void write(byte[])"
        ]
    },
    "org.apache.commons.compress.archivers.zip.StreamCompressor$OutputStreamCompressor:void writeOut(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.StreamCompressor:void writeCounted(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void writeOut(byte[])",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void writeOut(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.utils.CountingOutputStream:void write(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void write(byte[],int,int)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeCString(java.lang.String)",
            "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:void write(byte[],int,int)",
            "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile$1:void write(byte[],int,int)",
            "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:void write(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.StreamCompressor$OutputStreamCompressor:void writeOut(byte[],int,int)",
            "org.apache.commons.compress.utils.IOUtils:long copy(java.io.InputStream,java.io.OutputStream,int)",
            "org.apache.commons.compress.utils.FixedLengthBlockOutputStream$BufferAtATimeOutputChannel:int write(java.nio.ByteBuffer)",
            "org.apache.commons.compress.utils.CountingOutputStream:void write(byte[])",
            "org.apache.commons.compress.utils.CountingOutputStream:void write(byte[],int,int)",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream:void flushBlock()",
            "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void writeLiteralBlockWithSize(int,int,int,org.apache.commons.compress.compressors.lz77support.LZ77Compressor$LiteralBlock)",
            "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream:void deflate()",
            "org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore:void writeOut(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void writeLiteralBlockWithSize(int,int,int,org.apache.commons.compress.compressors.lz77support.LZ77Compressor$LiteralBlock)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void writeLiteralBlockNoSizeBytes(org.apache.commons.compress.compressors.lz77support.LZ77Compressor$LiteralBlock,int)",
            "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void writeLiteralBlockOneSizeByte(org.apache.commons.compress.compressors.lz77support.LZ77Compressor$LiteralBlock,int)",
            "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void writeLiteralBlockTwoSizeBytes(org.apache.commons.compress.compressors.lz77support.LZ77Compressor$LiteralBlock,int)",
            "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void writeLiteralBlockThreeSizeBytes(org.apache.commons.compress.compressors.lz77support.LZ77Compressor$LiteralBlock,int)",
            "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void writeLiteralBlockFourSizeBytes(org.apache.commons.compress.compressors.lz77support.LZ77Compressor$LiteralBlock,int)"
        ]
    },
    "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream:void deflate()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream:void write(byte[],int,int)",
            "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream:void finish()"
        ]
    },
    "org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore:void writeOut(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.StreamCompressor$ScatterGatherBackingStoreCompressor:void writeOut(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipFile:void <init>(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.compress.archivers.zip.ZipFile:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.compress.archivers.Lister:void main(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.compress.utils.FixedLengthBlockOutputStream:void write(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeCString(java.lang.String)",
            "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:void closeArchiveEntry()",
            "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:void write(int)",
            "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:void writeSingleCodec(org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration,java.io.OutputStream)",
            "org.apache.commons.compress.utils.ByteUtils$OutputStreamByteConsumer:void accept(int)",
            "org.apache.commons.compress.utils.ByteUtils:void toLittleEndian(java.io.OutputStream,long,int)",
            "org.apache.commons.compress.utils.CountingOutputStream:void write(int)",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void bsFinishedWithStream()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void bsW(int,int)",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void sendMTFValues4()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void sendMTFValues5(int,int)",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void sendMTFValues6(int,int)",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void sendMTFValues7()",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream:void writeFrameDescriptor()",
            "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair:void writeTo(java.io.OutputStream)",
            "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair:void writeLength(int,java.io.OutputStream)",
            "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void writeUncompressedSize(long)",
            "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void writeLiteralBlockWithSize(int,int,int,org.apache.commons.compress.compressors.lz77support.LZ77Compressor$LiteralBlock)",
            "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void writeBackReferenceWithOneOffsetByte(int,int)",
            "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void writeBackReferenceWithLittleEndianOffset(int,int,int,int)",
            "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream:void flushBuffer()",
            "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream:void writeHeader(org.apache.commons.compress.compressors.gzip.GzipParameters)"
        ]
    },
    "org.apache.commons.compress.utils.FixedLengthBlockOutputStream:void write(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:void write(byte[],int,int)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void write(byte[],int,int)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeCString(java.lang.String)",
            "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:void write(byte[],int,int)",
            "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:void write(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.StreamCompressor$OutputStreamCompressor:void writeOut(byte[],int,int)",
            "org.apache.commons.compress.utils.IOUtils:long copy(java.io.InputStream,java.io.OutputStream,int)",
            "org.apache.commons.compress.utils.FixedLengthBlockOutputStream$BufferAtATimeOutputChannel:int write(java.nio.ByteBuffer)",
            "org.apache.commons.compress.utils.CountingOutputStream:void write(byte[],int,int)",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream:void flushBlock()",
            "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void writeLiteralBlockWithSize(int,int,int,org.apache.commons.compress.compressors.lz77support.LZ77Compressor$LiteralBlock)",
            "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream:void deflate()",
            "org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore:void writeOut(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:void closeArchiveEntry()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:void putArchiveEntry(org.apache.commons.compress.archivers.ArchiveEntry)",
            "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:void writePaxHeaders(org.apache.commons.compress.archivers.tar.TarArchiveEntry,java.lang.String,java.util.Map)",
            "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:boolean handleLongName(org.apache.commons.compress.archivers.tar.TarArchiveEntry,java.lang.String,java.util.Map,java.lang.String,byte,java.lang.String)",
            "org.apache.commons.compress.changes.ChangeSetPerformer:void copyStream(java.io.InputStream,org.apache.commons.compress.archivers.ArchiveOutputStream,org.apache.commons.compress.archivers.ArchiveEntry)"
        ]
    },
    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:void readGlobalPaxHeaders()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:org.apache.commons.compress.archivers.tar.TarArchiveEntry getNextTarEntry()"
        ]
    },
    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:void paxHeaders()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:org.apache.commons.compress.archivers.tar.TarArchiveEntry getNextTarEntry()"
        ]
    },
    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:org.apache.commons.compress.archivers.cpio.CpioArchiveEntry readNewEntry(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:org.apache.commons.compress.archivers.cpio.CpioArchiveEntry getNextCPIOEntry()"
        ]
    },
    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:org.apache.commons.compress.archivers.cpio.CpioArchiveEntry readOldAsciiEntry()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:org.apache.commons.compress.archivers.cpio.CpioArchiveEntry getNextCPIOEntry()"
        ]
    },
    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:org.apache.commons.compress.archivers.cpio.CpioArchiveEntry readOldBinaryEntry(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:org.apache.commons.compress.archivers.cpio.CpioArchiveEntry getNextCPIOEntry()"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void findEocdRecord()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void skipRemainderOfArchive()"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ExplodingInputStream:void init()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ExplodingInputStream:void fillBuffer()"
        ]
    },
    "org.apache.commons.compress.utils.ByteUtils:long fromLittleEndian(org.apache.commons.compress.utils.ByteUtils$ByteSupplier,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream:void nextBlock()",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream:int skipSkippableFrame(byte[])",
            "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream:boolean initializeBackReference()",
            "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream:void fill()",
            "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream:int readLiteralLength(int)",
            "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream:int readSize()"
        ]
    },
    "org.apache.commons.compress.utils.BitInputStream:long readBits(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.BitStream:int nextBit()",
            "org.apache.commons.compress.archivers.zip.BitStream:long nextBits(int)",
            "org.apache.commons.compress.archivers.zip.BitStream:int nextByte()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:int readNextByte(org.apache.commons.compress.utils.BitInputStream)",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:int bsR(org.apache.commons.compress.utils.BitInputStream,int)",
            "org.apache.commons.compress.compressors.lzw.LZWInputStream:int readNextCode()",
            "org.apache.commons.compress.compressors.z.ZCompressorInputStream:void <init>(java.io.InputStream,int)"
        ]
    },
    "org.apache.commons.compress.utils.ChecksumCalculatingInputStream:long skip(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:long skip(long)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream:long skip(long)",
            "org.apache.commons.compress.utils.IOUtils:long skip(java.io.InputStream,long)",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:long skip(long)",
            "org.apache.commons.compress.compressors.xz.XZCompressorInputStream:long skip(long)",
            "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream:long skip(long)",
            "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream:long skip(long)"
        ]
    },
    "org.apache.commons.compress.utils.ChecksumVerifyingInputStream:long skip(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:long skip(long)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream:long skip(long)",
            "org.apache.commons.compress.utils.IOUtils:long skip(java.io.InputStream,long)",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:long skip(long)",
            "org.apache.commons.compress.compressors.xz.XZCompressorInputStream:long skip(long)",
            "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream:long skip(long)",
            "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream:long skip(long)"
        ]
    },
    "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream:void readFrameDescriptor()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream:void init(boolean)"
        ]
    },
    "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream:int access$000(org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream$1:int getAsByte()"
        ]
    },
    "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream:void readSizes()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream:int read(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream:long readSizeBytes()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream:void readSizes()",
            "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream:boolean initializeBackReference()"
        ]
    },
    "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream$1:int getAsByte()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.utils.ByteUtils:long fromLittleEndian(org.apache.commons.compress.utils.ByteUtils$ByteSupplier,int)"
        ]
    },
    "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream:void fill()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream:int read(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream:int readLiteralLength(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream:void fill()"
        ]
    },
    "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream:long readSize()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream:void <init>(java.io.InputStream,int)"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:int readFromInflater(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:int readDeflated(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.utils.IOUtils:long copy(java.io.InputStream,java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.utils.IOUtils:byte[] toByteArray(java.io.InputStream)",
            "org.apache.commons.compress.changes.ChangeSetPerformer:void copyStream(java.io.InputStream,org.apache.commons.compress.archivers.ArchiveOutputStream,org.apache.commons.compress.archivers.ArchiveEntry)"
        ]
    },
    "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream:int read()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:java.util.Map parsePaxHeaders(java.io.InputStream)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:java.lang.String readCString(int)",
            "org.apache.commons.compress.archivers.sevenz.SevenZFile:int read()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:int readOneByte()",
            "org.apache.commons.compress.archivers.zip.BinaryTree:org.apache.commons.compress.archivers.zip.BinaryTree decode(java.io.InputStream,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream:int read()",
            "org.apache.commons.compress.utils.ByteUtils$InputStreamByteSupplier:int getAsByte()",
            "org.apache.commons.compress.utils.BitInputStream:long processBitsGreater57(int)",
            "org.apache.commons.compress.utils.BitInputStream:boolean ensureCache(int)",
            "org.apache.commons.compress.utils.ChecksumCalculatingInputStream:int read()",
            "org.apache.commons.compress.utils.ByteUtils:long fromLittleEndian(java.io.InputStream,int)",
            "org.apache.commons.compress.utils.CountingInputStream:int read()",
            "org.apache.commons.compress.utils.ChecksumVerifyingInputStream:int read()",
            "org.apache.commons.compress.utils.BoundedInputStream:int read()",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read()",
            "org.apache.commons.compress.compressors.xz.XZCompressorInputStream:int read()",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream:int readOneByte()",
            "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream:int readOneByte()",
            "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream:int read()",
            "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream:boolean init(boolean)",
            "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream:int read()"
        ]
    },
    "org.apache.commons.compress.archivers.ArchiveInputStream:int read()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:java.util.Map parsePaxHeaders(java.io.InputStream)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:java.lang.String readCString(int)",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:org.apache.commons.compress.archivers.ar.ArArchiveEntry getNextArEntry()",
            "org.apache.commons.compress.archivers.sevenz.SevenZFile:int read()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:int readOneByte()",
            "org.apache.commons.compress.archivers.zip.BinaryTree:org.apache.commons.compress.archivers.zip.BinaryTree decode(java.io.InputStream,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream:int read()",
            "org.apache.commons.compress.utils.ByteUtils$InputStreamByteSupplier:int getAsByte()",
            "org.apache.commons.compress.utils.BitInputStream:long processBitsGreater57(int)",
            "org.apache.commons.compress.utils.BitInputStream:boolean ensureCache(int)",
            "org.apache.commons.compress.utils.ChecksumCalculatingInputStream:int read()",
            "org.apache.commons.compress.utils.ByteUtils:long fromLittleEndian(java.io.InputStream,int)",
            "org.apache.commons.compress.utils.CountingInputStream:int read()",
            "org.apache.commons.compress.utils.ChecksumVerifyingInputStream:int read()",
            "org.apache.commons.compress.utils.BoundedInputStream:int read()",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read()",
            "org.apache.commons.compress.compressors.xz.XZCompressorInputStream:int read()",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream:int readOneByte()",
            "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream:int readOneByte()",
            "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream:int read()",
            "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream:boolean init(boolean)",
            "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream:int read()"
        ]
    },
    "org.apache.commons.compress.archivers.sevenz.SevenZFile:int read(byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.compress.archivers.sevenz.CLI$Mode$2:void takeAction(org.apache.commons.compress.archivers.sevenz.SevenZFile,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.sevenz.CLI:void main(java.lang.String[])"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:long skip(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:long skip(long)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void closeEntry()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream:long skip(long)",
            "org.apache.commons.compress.utils.IOUtils:long skip(java.io.InputStream,long)",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:long skip(long)",
            "org.apache.commons.compress.compressors.xz.XZCompressorInputStream:long skip(long)",
            "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream:long skip(long)",
            "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream:long skip(long)"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void closeEntry()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:org.apache.commons.compress.archivers.zip.ZipArchiveEntry getNextZipEntry()"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void skipRemainderOfArchive()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:org.apache.commons.compress.archivers.zip.ZipArchiveEntry getNextZipEntry()"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream:void addArchiveEntry(org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator$2:java.lang.Object call()",
            "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator$3:java.lang.Object call()"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream:int read(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:int readStored(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:int fill()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void copyFromZipInputStream(java.io.InputStream)",
            "org.apache.commons.compress.utils.IOUtils:long copy(java.io.InputStream,java.io.OutputStream,int)",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read(byte[])",
            "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream:int read(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.utils.ChecksumCalculatingInputStream:int read(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:int readStored(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:int fill()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void copyFromZipInputStream(java.io.InputStream)",
            "org.apache.commons.compress.utils.IOUtils:long copy(java.io.InputStream,java.io.OutputStream,int)",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read(byte[])",
            "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream:int read(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.archivers.dump.TapeInputStream:void readFully(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.dump.TapeInputStream:void resetBlockSize(int,boolean)",
            "org.apache.commons.compress.archivers.dump.TapeInputStream:void readBlock(boolean)"
        ]
    },
    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:int readFully(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:org.apache.commons.compress.archivers.cpio.CpioArchiveEntry getNextCPIOEntry()",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:void skip(int)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:long readBinaryLong(int,boolean)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:long readAsciiLong(int,int)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:java.lang.String readCString(int)"
        ]
    },
    "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:org.apache.commons.compress.archivers.ar.ArArchiveEntry readGNUStringTable(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:org.apache.commons.compress.archivers.ar.ArArchiveEntry getNextArEntry()"
        ]
    },
    "org.apache.commons.compress.utils.IOUtils:int readFully(java.io.InputStream,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:byte[] readRecord()",
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:java.util.Map parsePaxHeaders(java.io.InputStream)",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:org.apache.commons.compress.archivers.ar.ArArchiveEntry getNextArEntry()",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:java.lang.String getBSDLongName(java.lang.String)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void readFully(byte[])",
            "org.apache.commons.compress.archivers.ArchiveStreamFactory:java.lang.String detect(java.io.InputStream)",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream:boolean readSignature(boolean)",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream:void readFrameDescriptor()",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream:void verifyChecksum(org.apache.commons.compress.compressors.lz4.XXHash32,java.lang.String)",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream:int skipSkippableFrame(byte[])",
            "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream:long readCrc()",
            "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream:void readStreamIdentifier()",
            "org.apache.commons.compress.compressors.CompressorStreamFactory:java.lang.String detect(java.io.InputStream)"
        ]
    },
    "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream:void tryToReadLiteral(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream:int readLiteral(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.utils.CountingInputStream:int read(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:int readStored(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:int fill()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void copyFromZipInputStream(java.io.InputStream)",
            "org.apache.commons.compress.utils.IOUtils:long copy(java.io.InputStream,java.io.OutputStream,int)",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read(byte[])",
            "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream:int read(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.utils.ChecksumVerifyingInputStream:int read(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:int readStored(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:int fill()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void copyFromZipInputStream(java.io.InputStream)",
            "org.apache.commons.compress.utils.IOUtils:long copy(java.io.InputStream,java.io.OutputStream,int)",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read(byte[])",
            "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream:int read(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream:int read(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.sevenz.SevenZFile:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void drainCurrentEntryData()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void readStoredEntry()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void realSkip(long)",
            "org.apache.commons.compress.archivers.zip.StreamCompressor:void deflate(java.io.InputStream,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.ChecksumCalculatingInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.IOUtils:int readFully(java.io.InputStream,byte[],int,int)",
            "org.apache.commons.compress.utils.CountingInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.ChecksumVerifyingInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.BoundedInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.xz.XZCompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream:int read()",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream:int readOnce(byte[],int,int)",
            "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream:int read(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:org.apache.commons.compress.archivers.ArchiveEntry getNextEntry()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.Lister:void main(java.lang.String[])",
            "org.apache.commons.compress.changes.ChangeSetPerformer$ArchiveInputStreamIterator:boolean hasNext()"
        ]
    },
    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:byte[] getRecord()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:org.apache.commons.compress.archivers.tar.TarArchiveEntry getNextTarEntry()",
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:void readOldGNUSparse()"
        ]
    },
    "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream:void <init>(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.compress.compressors.CompressorStreamFactory:org.apache.commons.compress.compressors.CompressorInputStream createCompressorInputStream(java.lang.String,java.io.InputStream,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.CompressorStreamFactory:org.apache.commons.compress.compressors.CompressorInputStream createCompressorInputStream(java.lang.String,java.io.InputStream)",
            "org.apache.commons.compress.compressors.CompressorStreamFactory:org.apache.commons.compress.compressors.CompressorInputStream createCompressorInputStream(java.lang.String,java.io.InputStream,boolean)"
        ]
    },
    "org.apache.commons.compress.compressors.CompressorStreamFactory:org.apache.commons.compress.compressors.CompressorInputStream createCompressorInputStream(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream:org.apache.commons.compress.archivers.arj.ArjArchiveEntry getNextEntry()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream:org.apache.commons.compress.archivers.ArchiveEntry getNextEntry()"
        ]
    },
    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:org.apache.commons.compress.archivers.tar.TarArchiveEntry getNextTarEntry()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:org.apache.commons.compress.archivers.ArchiveEntry getNextEntry()",
            "org.apache.commons.compress.archivers.ArchiveStreamFactory:java.lang.String detect(java.io.InputStream)"
        ]
    },
    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:void skipRecordPadding()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:org.apache.commons.compress.archivers.tar.TarArchiveEntry getNextTarEntry()"
        ]
    },
    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:void consumeRemainderOfLastBlock()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:byte[] getRecord()"
        ]
    },
    "org.apache.commons.compress.archivers.sevenz.SevenZFile:java.io.InputStream getCurrentStream()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.sevenz.SevenZFile:int read()",
            "org.apache.commons.compress.archivers.sevenz.SevenZFile:int read(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream:int skipSkippableFrame(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream:boolean readSignature(boolean)"
        ]
    },
    "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream:void skipBlock()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream:void readNextBlock()"
        ]
    },
    "org.apache.commons.compress.archivers.ArchiveOutputStream:void write(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:boolean handleLongName(org.apache.commons.compress.archivers.tar.TarArchiveEntry,java.lang.String,java.util.Map,java.lang.String,byte,java.lang.String)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeCString(java.lang.String)",
            "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:void closeArchiveEntry()",
            "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:long fill(long,long,char)",
            "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:void write(int)",
            "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:void writeSingleCodec(org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration,java.io.OutputStream)",
            "org.apache.commons.compress.utils.ByteUtils$OutputStreamByteConsumer:void accept(int)",
            "org.apache.commons.compress.utils.ByteUtils:void toLittleEndian(java.io.OutputStream,long,int)",
            "org.apache.commons.compress.utils.CountingOutputStream:void write(int)",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void bsFinishedWithStream()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void bsW(int,int)",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void sendMTFValues4()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void sendMTFValues5(int,int)",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void sendMTFValues6(int,int)",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void sendMTFValues7()",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream:void writeFrameDescriptor()",
            "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair:void writeTo(java.io.OutputStream)",
            "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair:void writeLength(int,java.io.OutputStream)",
            "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void writeUncompressedSize(long)",
            "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void writeLiteralBlockWithSize(int,int,int,org.apache.commons.compress.compressors.lz77support.LZ77Compressor$LiteralBlock)",
            "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void writeBackReferenceWithOneOffsetByte(int,int)",
            "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void writeBackReferenceWithLittleEndianOffset(int,int,int,int)",
            "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream:void flushBuffer()",
            "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream:void writeHeader(org.apache.commons.compress.compressors.gzip.GzipParameters)"
        ]
    },
    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:void write(byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.compress.archivers.zip.StreamCompressor:void writeCounted(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.StreamCompressor:long write(byte[],int,int,int)",
            "org.apache.commons.compress.archivers.zip.StreamCompressor:void deflate()",
            "org.apache.commons.compress.archivers.zip.StreamCompressor:void writeCounted(byte[])",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void copyFromZipInputStream(java.io.InputStream)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void writeCentralDirectoryEnd()"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void writeOut(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void rewriteSizesAndCrc(boolean)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void writeZip64CentralDirectory()"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void writeOut(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile$1:void write(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void write(byte[],int,int)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeCString(java.lang.String)",
            "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:void write(byte[],int,int)",
            "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:void write(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.StreamCompressor$OutputStreamCompressor:void writeOut(byte[],int,int)",
            "org.apache.commons.compress.utils.IOUtils:long copy(java.io.InputStream,java.io.OutputStream,int)",
            "org.apache.commons.compress.utils.FixedLengthBlockOutputStream$BufferAtATimeOutputChannel:int write(java.nio.ByteBuffer)",
            "org.apache.commons.compress.utils.CountingOutputStream:void write(byte[])",
            "org.apache.commons.compress.utils.CountingOutputStream:void write(byte[],int,int)",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream:void flushBlock()",
            "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void writeLiteralBlockWithSize(int,int,int,org.apache.commons.compress.compressors.lz77support.LZ77Compressor$LiteralBlock)",
            "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream:void deflate()",
            "org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore:void writeOut(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.utils.CountingOutputStream:void write(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeHeader(org.apache.commons.compress.archivers.cpio.CpioArchiveEntry)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void pad(int)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeBinaryLong(long,int,boolean)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeAsciiLong(long,int,int)",
            "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:long writeArchiveHeader()",
            "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile$1:void write(byte[])",
            "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:void writeSingleCodec(org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration,java.io.OutputStream)",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream:void <init>(java.io.OutputStream,org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream$Parameters)",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream:void flushBlock()",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream:void writeTrailer()",
            "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair:void writeTo(java.io.OutputStream)",
            "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream:void <init>(java.io.OutputStream,org.apache.commons.compress.compressors.lz77support.Parameters)",
            "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream:void flushBuffer()",
            "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream:void writeHeader(org.apache.commons.compress.compressors.gzip.GzipParameters)",
            "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream:void writeTrailer()"
        ]
    },
    "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void writeLiteralBlockNoSizeBytes(org.apache.commons.compress.compressors.lz77support.LZ77Compressor$LiteralBlock,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void writeLiteralBlock(org.apache.commons.compress.compressors.lz77support.LZ77Compressor$LiteralBlock)"
        ]
    },
    "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void writeLiteralBlockOneSizeByte(org.apache.commons.compress.compressors.lz77support.LZ77Compressor$LiteralBlock,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void writeLiteralBlock(org.apache.commons.compress.compressors.lz77support.LZ77Compressor$LiteralBlock)"
        ]
    },
    "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void writeLiteralBlockTwoSizeBytes(org.apache.commons.compress.compressors.lz77support.LZ77Compressor$LiteralBlock,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void writeLiteralBlock(org.apache.commons.compress.compressors.lz77support.LZ77Compressor$LiteralBlock)"
        ]
    },
    "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void writeLiteralBlockThreeSizeBytes(org.apache.commons.compress.compressors.lz77support.LZ77Compressor$LiteralBlock,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void writeLiteralBlock(org.apache.commons.compress.compressors.lz77support.LZ77Compressor$LiteralBlock)"
        ]
    },
    "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void writeLiteralBlockFourSizeBytes(org.apache.commons.compress.compressors.lz77support.LZ77Compressor$LiteralBlock,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void writeLiteralBlock(org.apache.commons.compress.compressors.lz77support.LZ77Compressor$LiteralBlock)"
        ]
    },
    "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream:void write(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void write(byte[],int,int)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeCString(java.lang.String)",
            "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:void write(byte[],int,int)",
            "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:void write(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.StreamCompressor$OutputStreamCompressor:void writeOut(byte[],int,int)",
            "org.apache.commons.compress.utils.IOUtils:long copy(java.io.InputStream,java.io.OutputStream,int)",
            "org.apache.commons.compress.utils.FixedLengthBlockOutputStream$BufferAtATimeOutputChannel:int write(java.nio.ByteBuffer)",
            "org.apache.commons.compress.utils.CountingOutputStream:void write(byte[],int,int)",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream:void flushBlock()",
            "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void writeLiteralBlockWithSize(int,int,int,org.apache.commons.compress.compressors.lz77support.LZ77Compressor$LiteralBlock)",
            "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream:void write(int)",
            "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream:void write(byte[])",
            "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream:void deflate()",
            "org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore:void writeOut(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream:void finish()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream:void close()"
        ]
    },
    "org.apache.commons.compress.archivers.zip.StreamCompressor$ScatterGatherBackingStoreCompressor:void writeOut(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.StreamCompressor:void writeCounted(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void writeOut(byte[])",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void writeOut(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:void closeArchiveEntry()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:void putArchiveEntry(org.apache.commons.compress.archivers.ArchiveEntry)",
            "org.apache.commons.compress.changes.ChangeSetPerformer:void copyStream(java.io.InputStream,org.apache.commons.compress.archivers.ArchiveOutputStream,org.apache.commons.compress.archivers.ArchiveEntry)"
        ]
    },
    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:void write(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:void writeSingleCodec(org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration,java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:void writeFolder(java.io.DataOutput,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry)"
        ]
    },
    "org.apache.commons.compress.utils.ByteUtils$OutputStreamByteConsumer:void accept(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.utils.ByteUtils:void toLittleEndian(org.apache.commons.compress.utils.ByteUtils$ByteConsumer,long,int)"
        ]
    },
    "org.apache.commons.compress.utils.ByteUtils:void toLittleEndian(java.io.OutputStream,long,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream:void flushBlock()",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream:void writeTrailer()",
            "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair:void writeTo(java.io.OutputStream)"
        ]
    },
    "org.apache.commons.compress.utils.CountingOutputStream:void write(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeCString(java.lang.String)",
            "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:void closeArchiveEntry()",
            "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile$1:void write(int)",
            "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:void write(int)",
            "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:void writeSingleCodec(org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration,java.io.OutputStream)",
            "org.apache.commons.compress.utils.ByteUtils$OutputStreamByteConsumer:void accept(int)",
            "org.apache.commons.compress.utils.ByteUtils:void toLittleEndian(java.io.OutputStream,long,int)",
            "org.apache.commons.compress.utils.CountingOutputStream:void write(int)",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void bsFinishedWithStream()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void bsW(int,int)",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void sendMTFValues4()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void sendMTFValues5(int,int)",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void sendMTFValues6(int,int)",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void sendMTFValues7()",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream:void writeFrameDescriptor()",
            "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair:void writeTo(java.io.OutputStream)",
            "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair:void writeLength(int,java.io.OutputStream)",
            "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void writeUncompressedSize(long)",
            "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void writeLiteralBlockWithSize(int,int,int,org.apache.commons.compress.compressors.lz77support.LZ77Compressor$LiteralBlock)",
            "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void writeBackReferenceWithOneOffsetByte(int,int)",
            "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void writeBackReferenceWithLittleEndianOffset(int,int,int,int)",
            "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream:void flushBuffer()",
            "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream:void writeHeader(org.apache.commons.compress.compressors.gzip.GzipParameters)"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void bsFinishedWithStream()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void endCompression()"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void bsW(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void endBlock()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void bsPutUByte(int)",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void bsPutInt(int)",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void sendMTFValues4()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void sendMTFValues5(int,int)",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void moveToFrontCodeAndSend()"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void sendMTFValues4()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void sendMTFValues()"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void sendMTFValues5(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void sendMTFValues()"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void sendMTFValues6(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void sendMTFValues()"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void sendMTFValues7()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void sendMTFValues()"
        ]
    },
    "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream:void writeFrameDescriptor()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream:void <init>(java.io.OutputStream,org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream$Parameters)"
        ]
    },
    "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair:void writeTo(java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream:void writeFinalLiteralBlock()",
            "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream:void writeWritablePairs(int)"
        ]
    },
    "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair:void writeLength(int,java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair:void writeTo(java.io.OutputStream)"
        ]
    },
    "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void writeUncompressedSize(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void <init>(java.io.OutputStream,long,org.apache.commons.compress.compressors.lz77support.Parameters)"
        ]
    },
    "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void writeBackReferenceWithOneOffsetByte(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void writeBackReference(org.apache.commons.compress.compressors.lz77support.LZ77Compressor$BackReference)"
        ]
    },
    "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void writeBackReferenceWithLittleEndianOffset(int,int,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void writeBackReferenceWithTwoOffsetBytes(int,int)",
            "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void writeBackReferenceWithFourOffsetBytes(int,int)"
        ]
    },
    "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream:void writeHeader(org.apache.commons.compress.compressors.gzip.GzipParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream:void <init>(java.io.OutputStream,org.apache.commons.compress.compressors.gzip.GzipParameters)"
        ]
    },
    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:void write(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:boolean handleLongName(org.apache.commons.compress.archivers.tar.TarArchiveEntry,java.lang.String,java.util.Map,java.lang.String,byte,java.lang.String)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void write(byte[],int,int)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeCString(java.lang.String)",
            "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:void write(byte[],int,int)",
            "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:void write(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.StreamCompressor$OutputStreamCompressor:void writeOut(byte[],int,int)",
            "org.apache.commons.compress.archivers.ArchiveOutputStream:void write(int)",
            "org.apache.commons.compress.utils.IOUtils:long copy(java.io.InputStream,java.io.OutputStream,int)",
            "org.apache.commons.compress.utils.FixedLengthBlockOutputStream$BufferAtATimeOutputChannel:int write(java.nio.ByteBuffer)",
            "org.apache.commons.compress.utils.CountingOutputStream:void write(byte[],int,int)",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream:void flushBlock()",
            "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void writeLiteralBlockWithSize(int,int,int,org.apache.commons.compress.compressors.lz77support.LZ77Compressor$LiteralBlock)",
            "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream:void deflate()",
            "org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore:void writeOut(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:org.apache.commons.compress.archivers.cpio.CpioArchiveEntry getNextCPIOEntry()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:org.apache.commons.compress.archivers.ArchiveEntry getNextEntry()"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ExplodingInputStream:void fillBuffer()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ExplodingInputStream:int read()"
        ]
    },
    "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream:void nextBlock()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream:void init(boolean)"
        ]
    },
    "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream:boolean initializeBackReference()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream:int read(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream:int readSize()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream:void readNextBlock()",
            "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream:void skipBlock()"
        ]
    },
    "org.apache.commons.compress.archivers.zip.BitStream:int nextBit()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.BinaryTree:int read(org.apache.commons.compress.archivers.zip.BitStream)",
            "org.apache.commons.compress.archivers.zip.ExplodingInputStream:void fillBuffer()"
        ]
    },
    "org.apache.commons.compress.archivers.zip.BitStream:long nextBits(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ExplodingInputStream:void fillBuffer()"
        ]
    },
    "org.apache.commons.compress.archivers.zip.BitStream:int nextByte()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ExplodingInputStream:void fillBuffer()"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:int readNextByte(org.apache.commons.compress.utils.BitInputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:boolean init(boolean)"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:int bsR(org.apache.commons.compress.utils.BitInputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void initBlock()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:boolean bsGetBit(org.apache.commons.compress.utils.BitInputStream)",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:char bsGetUByte(org.apache.commons.compress.utils.BitInputStream)",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:int bsGetInt(org.apache.commons.compress.utils.BitInputStream)",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void recvDecodingTables()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void getAndMoveToFrontDecode()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:int getAndMoveToFrontDecode0(int)"
        ]
    },
    "org.apache.commons.compress.compressors.lzw.LZWInputStream:int readNextCode()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream:int decompressNextSymbol()",
            "org.apache.commons.compress.compressors.z.ZCompressorInputStream:int readNextCode()"
        ]
    },
    "org.apache.commons.compress.compressors.z.ZCompressorInputStream:void <init>(java.io.InputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.z.ZCompressorInputStream:void <init>(java.io.InputStream)",
            "org.apache.commons.compress.compressors.CompressorStreamFactory:org.apache.commons.compress.compressors.CompressorInputStream createCompressorInputStream(java.lang.String,java.io.InputStream,boolean)"
        ]
    },
    "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream:void init(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream:void <init>(java.io.InputStream,boolean)",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream:void nextBlock()"
        ]
    },
    "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream$1:int getAsByte()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.utils.ByteUtils:long fromLittleEndian(org.apache.commons.compress.utils.ByteUtils$ByteSupplier,int)"
        ]
    },
    "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream:int read(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.sevenz.SevenZFile:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void drainCurrentEntryData()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void readStoredEntry()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void realSkip(long)",
            "org.apache.commons.compress.archivers.zip.StreamCompressor:void deflate(java.io.InputStream,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.ChecksumCalculatingInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.IOUtils:int readFully(java.io.InputStream,byte[],int,int)",
            "org.apache.commons.compress.utils.CountingInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.ChecksumVerifyingInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.BoundedInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.xz.XZCompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream:int readOnce(byte[],int,int)",
            "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream:int read()",
            "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream:int read(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream:int read(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.sevenz.SevenZFile:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void drainCurrentEntryData()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void readStoredEntry()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void realSkip(long)",
            "org.apache.commons.compress.archivers.zip.StreamCompressor:void deflate(java.io.InputStream,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.ChecksumCalculatingInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.IOUtils:int readFully(java.io.InputStream,byte[],int,int)",
            "org.apache.commons.compress.utils.CountingInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.ChecksumVerifyingInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.BoundedInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.xz.XZCompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream:int readOnce(byte[],int,int)",
            "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream:int read()",
            "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream:int readOnce(byte[],int,int)",
            "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream:int read(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream:void <init>(java.io.InputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream:void <init>(java.io.InputStream)",
            "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream:void readNextBlock()"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:int readDeflated(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:int read(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.utils.IOUtils:byte[] toByteArray(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipFile:java.lang.String getUnixSymlink(org.apache.commons.compress.archivers.zip.ZipArchiveEntry)"
        ]
    },
    "org.apache.commons.compress.archivers.sevenz.CLI:void main(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:org.apache.commons.compress.archivers.zip.ZipArchiveEntry getNextZipEntry()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.jar.JarArchiveInputStream:org.apache.commons.compress.archivers.jar.JarArchiveEntry getNextJarEntry()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:org.apache.commons.compress.archivers.ArchiveEntry getNextEntry()"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator$2:java.lang.Object call()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator$3:java.lang.Object call()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.compress.archivers.dump.TapeInputStream:void resetBlockSize(int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:void <init>(java.io.InputStream,java.lang.String)"
        ]
    },
    "org.apache.commons.compress.archivers.dump.TapeInputStream:void readBlock(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.dump.TapeInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.dump.TapeInputStream:long skip(long)",
            "org.apache.commons.compress.archivers.dump.TapeInputStream:byte[] peek()"
        ]
    },
    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:void skip(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:org.apache.commons.compress.archivers.cpio.CpioArchiveEntry readNewEntry(boolean)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:org.apache.commons.compress.archivers.cpio.CpioArchiveEntry readOldBinaryEntry(boolean)"
        ]
    },
    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:int read(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:long skip(long)",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.sevenz.SevenZFile:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void drainCurrentEntryData()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void readStoredEntry()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void realSkip(long)",
            "org.apache.commons.compress.archivers.zip.StreamCompressor:void deflate(java.io.InputStream,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.ArchiveInputStream:int read()",
            "org.apache.commons.compress.utils.ChecksumCalculatingInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.IOUtils:int readFully(java.io.InputStream,byte[],int,int)",
            "org.apache.commons.compress.utils.CountingInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.ChecksumVerifyingInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.BoundedInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.xz.XZCompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream:int readOnce(byte[],int,int)",
            "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream:int read(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:long readBinaryLong(int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:org.apache.commons.compress.archivers.cpio.CpioArchiveEntry readOldBinaryEntry(boolean)"
        ]
    },
    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:long readAsciiLong(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:org.apache.commons.compress.archivers.cpio.CpioArchiveEntry readNewEntry(boolean)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:org.apache.commons.compress.archivers.cpio.CpioArchiveEntry readOldAsciiEntry()"
        ]
    },
    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:byte[] readRecord()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:byte[] getRecord()",
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:void tryToConsumeSecondEOFRecord()"
        ]
    },
    "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:java.lang.String getBSDLongName(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:org.apache.commons.compress.archivers.ar.ArArchiveEntry getNextArEntry()"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void readFully(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:org.apache.commons.compress.archivers.zip.ZipArchiveEntry getNextZipEntry()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void readFirstLocalFileHeader(byte[])",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void readDataDescriptor()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void skipRemainderOfArchive()"
        ]
    },
    "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream:boolean readSignature(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream:void init(boolean)"
        ]
    },
    "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream:void verifyChecksum(org.apache.commons.compress.compressors.lz4.XXHash32,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream:void maybeFinishCurrentBlock()",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream:void verifyContentChecksum()"
        ]
    },
    "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream:long readCrc()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream:void readNextBlock()"
        ]
    },
    "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream:void readStreamIdentifier()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream:void <init>(java.io.InputStream,int,org.apache.commons.compress.compressors.snappy.FramedSnappyDialect)",
            "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream:void readNextBlock()"
        ]
    },
    "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream:int readLiteral(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream:int read(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream:int read()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:java.util.Map parsePaxHeaders(java.io.InputStream)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:java.lang.String readCString(int)",
            "org.apache.commons.compress.archivers.sevenz.SevenZFile:int read()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:int readOneByte()",
            "org.apache.commons.compress.archivers.zip.BinaryTree:org.apache.commons.compress.archivers.zip.BinaryTree decode(java.io.InputStream,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream:int read()",
            "org.apache.commons.compress.utils.ByteUtils$InputStreamByteSupplier:int getAsByte()",
            "org.apache.commons.compress.utils.BitInputStream:long processBitsGreater57(int)",
            "org.apache.commons.compress.utils.BitInputStream:boolean ensureCache(int)",
            "org.apache.commons.compress.utils.ChecksumCalculatingInputStream:int read()",
            "org.apache.commons.compress.utils.ByteUtils:long fromLittleEndian(java.io.InputStream,int)",
            "org.apache.commons.compress.utils.CountingInputStream:int read()",
            "org.apache.commons.compress.utils.ChecksumVerifyingInputStream:int read()",
            "org.apache.commons.compress.utils.BoundedInputStream:int read()",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read()",
            "org.apache.commons.compress.compressors.xz.XZCompressorInputStream:int read()",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream:int readOneByte()",
            "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream:int readOneByte()",
            "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream:int read()",
            "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream:boolean init(boolean)",
            "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream:int read()"
        ]
    },
    "org.apache.commons.compress.changes.ChangeSetPerformer$ArchiveInputStreamIterator:boolean hasNext()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.changes.ChangeSetPerformer:org.apache.commons.compress.changes.ChangeSetResults perform(org.apache.commons.compress.changes.ChangeSetPerformer$ArchiveEntryIterator,org.apache.commons.compress.archivers.ArchiveOutputStream)"
        ]
    },
    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:void readOldGNUSparse()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:org.apache.commons.compress.archivers.tar.TarArchiveEntry getNextTarEntry()"
        ]
    },
    "org.apache.commons.compress.compressors.CompressorStreamFactory:org.apache.commons.compress.compressors.CompressorInputStream createCompressorInputStream(java.lang.String,java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.CompressorStreamFactory:org.apache.commons.compress.compressors.CompressorInputStream createCompressorInputStream(java.io.InputStream)"
        ]
    },
    "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream:org.apache.commons.compress.archivers.ArchiveEntry getNextEntry()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.Lister:void main(java.lang.String[])",
            "org.apache.commons.compress.changes.ChangeSetPerformer$ArchiveInputStreamIterator:boolean hasNext()"
        ]
    },
    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:org.apache.commons.compress.archivers.ArchiveEntry getNextEntry()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:byte[] getLongNameData()",
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:void readGlobalPaxHeaders()",
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:void paxHeaders()",
            "org.apache.commons.compress.archivers.Lister:void main(java.lang.String[])",
            "org.apache.commons.compress.changes.ChangeSetPerformer$ArchiveInputStreamIterator:boolean hasNext()"
        ]
    },
    "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream:void readNextBlock()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream:void readNextBlock()"
        ]
    },
    "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:long fill(long,long,char)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:long writeEntryHeader(org.apache.commons.compress.archivers.ar.ArArchiveEntry)"
        ]
    },
    "org.apache.commons.compress.archivers.zip.StreamCompressor:long write(byte[],int,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.StreamCompressor:void deflate(java.io.InputStream,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void write(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.archivers.zip.StreamCompressor:void deflate()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.StreamCompressor:void flushDeflater()",
            "org.apache.commons.compress.archivers.zip.StreamCompressor:void deflateUntilInputIsNeeded()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void deflate()"
        ]
    },
    "org.apache.commons.compress.archivers.zip.StreamCompressor:void writeCounted(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void writeCounted(byte[])"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void writeZip64CentralDirectory()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void finish()"
        ]
    },
    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void pad(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeNewEntry(org.apache.commons.compress.archivers.cpio.CpioArchiveEntry)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeOldBinaryEntry(org.apache.commons.compress.archivers.cpio.CpioArchiveEntry,boolean)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void closeArchiveEntry()",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void finish()"
        ]
    },
    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeBinaryLong(long,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeHeader(org.apache.commons.compress.archivers.cpio.CpioArchiveEntry)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeOldBinaryEntry(org.apache.commons.compress.archivers.cpio.CpioArchiveEntry,boolean)"
        ]
    },
    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeAsciiLong(long,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeNewEntry(org.apache.commons.compress.archivers.cpio.CpioArchiveEntry)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeOldAsciiEntry(org.apache.commons.compress.archivers.cpio.CpioArchiveEntry)"
        ]
    },
    "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:long writeArchiveHeader()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:void putArchiveEntry(org.apache.commons.compress.archivers.ArchiveEntry)"
        ]
    },
    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile$1:void write(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeHeader(org.apache.commons.compress.archivers.cpio.CpioArchiveEntry)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void pad(int)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeBinaryLong(long,int,boolean)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeAsciiLong(long,int,int)",
            "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:long writeArchiveHeader()",
            "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:void writeSingleCodec(org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration,java.io.OutputStream)",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream:void <init>(java.io.OutputStream,org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream$Parameters)",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream:void flushBlock()",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream:void writeTrailer()",
            "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair:void writeTo(java.io.OutputStream)",
            "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream:void <init>(java.io.OutputStream,org.apache.commons.compress.compressors.lz77support.Parameters)",
            "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream:void flushBuffer()",
            "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream:void writeHeader(org.apache.commons.compress.compressors.gzip.GzipParameters)",
            "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream:void writeTrailer()"
        ]
    },
    "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream:void <init>(java.io.OutputStream,org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream$Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream:void <init>(java.io.OutputStream)"
        ]
    },
    "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream:void writeTrailer()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream:void finish()"
        ]
    },
    "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream:void <init>(java.io.OutputStream,org.apache.commons.compress.compressors.lz77support.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream:void <init>(java.io.OutputStream)"
        ]
    },
    "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream:void writeTrailer()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream:void finish()"
        ]
    },
    "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void writeLiteralBlock(org.apache.commons.compress.compressors.lz77support.LZ77Compressor$LiteralBlock)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void access$000(org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream,org.apache.commons.compress.compressors.lz77support.LZ77Compressor$LiteralBlock)"
        ]
    },
    "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream:void write(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeCString(java.lang.String)",
            "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:void closeArchiveEntry()",
            "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:void write(int)",
            "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:void writeSingleCodec(org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration,java.io.OutputStream)",
            "org.apache.commons.compress.utils.ByteUtils$OutputStreamByteConsumer:void accept(int)",
            "org.apache.commons.compress.utils.ByteUtils:void toLittleEndian(java.io.OutputStream,long,int)",
            "org.apache.commons.compress.utils.CountingOutputStream:void write(int)",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void bsFinishedWithStream()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void bsW(int,int)",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void sendMTFValues4()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void sendMTFValues5(int,int)",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void sendMTFValues6(int,int)",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void sendMTFValues7()",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream:void writeFrameDescriptor()",
            "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair:void writeTo(java.io.OutputStream)",
            "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair:void writeLength(int,java.io.OutputStream)",
            "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void writeUncompressedSize(long)",
            "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void writeLiteralBlockWithSize(int,int,int,org.apache.commons.compress.compressors.lz77support.LZ77Compressor$LiteralBlock)",
            "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void writeBackReferenceWithOneOffsetByte(int,int)",
            "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void writeBackReferenceWithLittleEndianOffset(int,int,int,int)",
            "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream:void flushBuffer()",
            "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream:void writeHeader(org.apache.commons.compress.compressors.gzip.GzipParameters)"
        ]
    },
    "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream:void write(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeHeader(org.apache.commons.compress.archivers.cpio.CpioArchiveEntry)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void pad(int)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeBinaryLong(long,int,boolean)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeAsciiLong(long,int,int)",
            "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:long writeArchiveHeader()",
            "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:void writeSingleCodec(org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration,java.io.OutputStream)",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream:void <init>(java.io.OutputStream,org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream$Parameters)",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream:void flushBlock()",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream:void writeTrailer()",
            "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair:void writeTo(java.io.OutputStream)",
            "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream:void <init>(java.io.OutputStream,org.apache.commons.compress.compressors.lz77support.Parameters)",
            "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream:void flushBuffer()",
            "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream:void writeHeader(org.apache.commons.compress.compressors.gzip.GzipParameters)",
            "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream:void writeTrailer()"
        ]
    },
    "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:void putArchiveEntry(org.apache.commons.compress.archivers.ArchiveEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.changes.ChangeSetPerformer:void copyStream(java.io.InputStream,org.apache.commons.compress.archivers.ArchiveOutputStream,org.apache.commons.compress.archivers.ArchiveEntry)"
        ]
    },
    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:void writeFolder(java.io.DataOutput,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:void writeUnpackInfo(java.io.DataOutput)"
        ]
    },
    "org.apache.commons.compress.utils.ByteUtils:void toLittleEndian(org.apache.commons.compress.utils.ByteUtils$ByteConsumer,long,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void writeLittleEndian(int,int)",
            "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream:void writeLittleEndian(int,long)"
        ]
    },
    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile$1:void write(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeCString(java.lang.String)",
            "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:void closeArchiveEntry()",
            "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:void write(int)",
            "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:void writeSingleCodec(org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration,java.io.OutputStream)",
            "org.apache.commons.compress.utils.ByteUtils$OutputStreamByteConsumer:void accept(int)",
            "org.apache.commons.compress.utils.ByteUtils:void toLittleEndian(java.io.OutputStream,long,int)",
            "org.apache.commons.compress.utils.CountingOutputStream:void write(int)",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void bsFinishedWithStream()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void bsW(int,int)",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void sendMTFValues4()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void sendMTFValues5(int,int)",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void sendMTFValues6(int,int)",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void sendMTFValues7()",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream:void writeFrameDescriptor()",
            "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair:void writeTo(java.io.OutputStream)",
            "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair:void writeLength(int,java.io.OutputStream)",
            "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void writeUncompressedSize(long)",
            "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void writeLiteralBlockWithSize(int,int,int,org.apache.commons.compress.compressors.lz77support.LZ77Compressor$LiteralBlock)",
            "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void writeBackReferenceWithOneOffsetByte(int,int)",
            "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void writeBackReferenceWithLittleEndianOffset(int,int,int,int)",
            "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream:void flushBuffer()",
            "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream:void writeHeader(org.apache.commons.compress.compressors.gzip.GzipParameters)"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void endCompression()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void finish()"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void endBlock()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void writeRun()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void finish()"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void bsPutUByte(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void init()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void endBlock()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void endCompression()"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void bsPutInt(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void endBlock()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void endCompression()"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void moveToFrontCodeAndSend()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void endBlock()"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void sendMTFValues()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void moveToFrontCodeAndSend()"
        ]
    },
    "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream:void writeFinalLiteralBlock()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream:void access$200(org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream)"
        ]
    },
    "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream:void writeWritablePairs(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream:org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair writeBlocksAndReturnUnfinishedPair(int)"
        ]
    },
    "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void <init>(java.io.OutputStream,long,org.apache.commons.compress.compressors.lz77support.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void <init>(java.io.OutputStream,long,int)",
            "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream:void flushBuffer()"
        ]
    },
    "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void writeBackReference(org.apache.commons.compress.compressors.lz77support.LZ77Compressor$BackReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void access$100(org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream,org.apache.commons.compress.compressors.lz77support.LZ77Compressor$BackReference)"
        ]
    },
    "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void writeBackReferenceWithTwoOffsetBytes(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void writeBackReference(org.apache.commons.compress.compressors.lz77support.LZ77Compressor$BackReference)"
        ]
    },
    "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void writeBackReferenceWithFourOffsetBytes(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void writeBackReference(org.apache.commons.compress.compressors.lz77support.LZ77Compressor$BackReference)"
        ]
    },
    "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream:void <init>(java.io.OutputStream,org.apache.commons.compress.compressors.gzip.GzipParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream:void <init>(java.io.OutputStream)"
        ]
    },
    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:org.apache.commons.compress.archivers.ArchiveEntry getNextEntry()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.Lister:void main(java.lang.String[])",
            "org.apache.commons.compress.changes.ChangeSetPerformer$ArchiveInputStreamIterator:boolean hasNext()"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ExplodingInputStream:int read()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:java.util.Map parsePaxHeaders(java.io.InputStream)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:java.lang.String readCString(int)",
            "org.apache.commons.compress.archivers.sevenz.SevenZFile:int read()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:int readOneByte()",
            "org.apache.commons.compress.archivers.zip.BinaryTree:org.apache.commons.compress.archivers.zip.BinaryTree decode(java.io.InputStream,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream:int read()",
            "org.apache.commons.compress.utils.ByteUtils$InputStreamByteSupplier:int getAsByte()",
            "org.apache.commons.compress.utils.BitInputStream:long processBitsGreater57(int)",
            "org.apache.commons.compress.utils.BitInputStream:boolean ensureCache(int)",
            "org.apache.commons.compress.utils.ChecksumCalculatingInputStream:int read()",
            "org.apache.commons.compress.utils.ByteUtils:long fromLittleEndian(java.io.InputStream,int)",
            "org.apache.commons.compress.utils.CountingInputStream:int read()",
            "org.apache.commons.compress.utils.ChecksumVerifyingInputStream:int read()",
            "org.apache.commons.compress.utils.BoundedInputStream:int read()",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read()",
            "org.apache.commons.compress.compressors.xz.XZCompressorInputStream:int read()",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream:int readOneByte()",
            "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream:int readOneByte()",
            "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream:int read()",
            "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream:boolean init(boolean)",
            "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream:int read()"
        ]
    },
    "org.apache.commons.compress.archivers.zip.BinaryTree:int read(org.apache.commons.compress.archivers.zip.BitStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ExplodingInputStream:void fillBuffer()"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:boolean init(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void <init>(java.io.InputStream,boolean)",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:boolean complete()"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void initBlock()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void <init>(java.io.InputStream,boolean)",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:int setupRandPartA()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:int setupNoRandPartA()"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:boolean bsGetBit(org.apache.commons.compress.utils.BitInputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void recvDecodingTables()"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:char bsGetUByte(org.apache.commons.compress.utils.BitInputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void initBlock()"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:int bsGetInt(org.apache.commons.compress.utils.BitInputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void initBlock()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:boolean complete()"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void recvDecodingTables()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void getAndMoveToFrontDecode()"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void getAndMoveToFrontDecode()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void initBlock()"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:int getAndMoveToFrontDecode0(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void getAndMoveToFrontDecode()"
        ]
    },
    "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream:int decompressNextSymbol()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.lzw.LZWInputStream:int read(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.compressors.z.ZCompressorInputStream:int readNextCode()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.z.ZCompressorInputStream:void reAlignReading()",
            "org.apache.commons.compress.compressors.z.ZCompressorInputStream:int decompressNextSymbol()"
        ]
    },
    "org.apache.commons.compress.compressors.z.ZCompressorInputStream:void <init>(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream:void <init>(java.io.InputStream,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream:void <init>(java.io.InputStream)",
            "org.apache.commons.compress.compressors.CompressorStreamFactory:org.apache.commons.compress.compressors.CompressorInputStream createCompressorInputStream(java.lang.String,java.io.InputStream,boolean)"
        ]
    },
    "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream:int read()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:java.util.Map parsePaxHeaders(java.io.InputStream)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:java.lang.String readCString(int)",
            "org.apache.commons.compress.archivers.sevenz.SevenZFile:int read()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:int readOneByte()",
            "org.apache.commons.compress.archivers.zip.BinaryTree:org.apache.commons.compress.archivers.zip.BinaryTree decode(java.io.InputStream,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream:int read()",
            "org.apache.commons.compress.utils.ByteUtils$InputStreamByteSupplier:int getAsByte()",
            "org.apache.commons.compress.utils.BitInputStream:long processBitsGreater57(int)",
            "org.apache.commons.compress.utils.BitInputStream:boolean ensureCache(int)",
            "org.apache.commons.compress.utils.ChecksumCalculatingInputStream:int read()",
            "org.apache.commons.compress.utils.ByteUtils:long fromLittleEndian(java.io.InputStream,int)",
            "org.apache.commons.compress.utils.CountingInputStream:int read()",
            "org.apache.commons.compress.utils.ChecksumVerifyingInputStream:int read()",
            "org.apache.commons.compress.utils.BoundedInputStream:int read()",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read()",
            "org.apache.commons.compress.compressors.xz.XZCompressorInputStream:int read()",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream:int readOneByte()",
            "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream:int readOneByte()",
            "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream:int read()",
            "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream:boolean init(boolean)",
            "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream:int read()"
        ]
    },
    "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream:int readOnce(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream:int read(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream:void <init>(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.CompressorStreamFactory:org.apache.commons.compress.compressors.CompressorInputStream createCompressorInputStream(java.lang.String,java.io.InputStream,boolean)"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipFile:java.lang.String getUnixSymlink(org.apache.commons.compress.archivers.zip.ZipArchiveEntry)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.compress.archivers.jar.JarArchiveInputStream:org.apache.commons.compress.archivers.jar.JarArchiveEntry getNextJarEntry()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.jar.JarArchiveInputStream:org.apache.commons.compress.archivers.ArchiveEntry getNextEntry()"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:org.apache.commons.compress.archivers.ArchiveEntry getNextEntry()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.Lister:void main(java.lang.String[])",
            "org.apache.commons.compress.changes.ChangeSetPerformer$ArchiveInputStreamIterator:boolean hasNext()"
        ]
    },
    "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:void <init>(java.io.InputStream,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:void <init>(java.io.InputStream)",
            "org.apache.commons.compress.archivers.ArchiveStreamFactory:org.apache.commons.compress.archivers.ArchiveInputStream createArchiveInputStream(java.lang.String,java.io.InputStream,java.lang.String)"
        ]
    },
    "org.apache.commons.compress.archivers.dump.TapeInputStream:int read(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:void readDirectoryEntry(org.apache.commons.compress.archivers.dump.DumpArchiveEntry)",
            "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.dump.TapeInputStream:byte[] readRecord()",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.sevenz.SevenZFile:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void drainCurrentEntryData()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void readStoredEntry()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void realSkip(long)",
            "org.apache.commons.compress.archivers.zip.StreamCompressor:void deflate(java.io.InputStream,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.ChecksumCalculatingInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.IOUtils:int readFully(java.io.InputStream,byte[],int,int)",
            "org.apache.commons.compress.utils.CountingInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.ChecksumVerifyingInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.BoundedInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.xz.XZCompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream:int readOnce(byte[],int,int)",
            "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream:int read(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.archivers.dump.TapeInputStream:long skip(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:long skip(long)",
            "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:void readCLRI()",
            "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:void readBITS()",
            "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:org.apache.commons.compress.archivers.dump.DumpArchiveEntry getNextEntry()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream:long skip(long)",
            "org.apache.commons.compress.utils.IOUtils:long skip(java.io.InputStream,long)",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:long skip(long)",
            "org.apache.commons.compress.compressors.xz.XZCompressorInputStream:long skip(long)",
            "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream:long skip(long)",
            "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream:long skip(long)"
        ]
    },
    "org.apache.commons.compress.archivers.dump.TapeInputStream:byte[] peek()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:void readDirectoryEntry(org.apache.commons.compress.archivers.dump.DumpArchiveEntry)"
        ]
    },
    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:long skip(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:long skip(long)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:void closeEntry()",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:void skipRemainderOfLastBlock()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream:long skip(long)",
            "org.apache.commons.compress.utils.IOUtils:long skip(java.io.InputStream,long)",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:long skip(long)",
            "org.apache.commons.compress.compressors.xz.XZCompressorInputStream:long skip(long)",
            "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream:long skip(long)",
            "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream:long skip(long)"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void readFirstLocalFileHeader(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:org.apache.commons.compress.archivers.zip.ZipArchiveEntry getNextZipEntry()"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void readDataDescriptor()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void closeEntry()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:boolean bufferContainsSignature(java.io.ByteArrayOutputStream,int,int,int)"
        ]
    },
    "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream:void maybeFinishCurrentBlock()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream:void nextBlock()"
        ]
    },
    "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream:void verifyContentChecksum()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream:void nextBlock()"
        ]
    },
    "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream:void <init>(java.io.InputStream,int,org.apache.commons.compress.compressors.snappy.FramedSnappyDialect)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream:void <init>(java.io.InputStream,org.apache.commons.compress.compressors.snappy.FramedSnappyDialect)"
        ]
    },
    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:byte[] getLongNameData()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:org.apache.commons.compress.archivers.tar.TarArchiveEntry getNextTarEntry()"
        ]
    },
    "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream:int read(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.sevenz.SevenZFile:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void drainCurrentEntryData()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void readStoredEntry()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void realSkip(long)",
            "org.apache.commons.compress.archivers.zip.StreamCompressor:void deflate(java.io.InputStream,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.ChecksumCalculatingInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.IOUtils:int readFully(java.io.InputStream,byte[],int,int)",
            "org.apache.commons.compress.utils.CountingInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.ChecksumVerifyingInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.BoundedInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.xz.XZCompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream:int readOnce(byte[],int,int)",
            "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream:int read()",
            "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream:int read(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:long writeEntryHeader(org.apache.commons.compress.archivers.ar.ArArchiveEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:void putArchiveEntry(org.apache.commons.compress.archivers.ArchiveEntry)"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void write(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void write(byte[],int,int)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeCString(java.lang.String)",
            "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:void write(byte[],int,int)",
            "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:void write(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.StreamCompressor$OutputStreamCompressor:void writeOut(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void preClose()",
            "org.apache.commons.compress.archivers.ArchiveOutputStream:void write(int)",
            "org.apache.commons.compress.utils.IOUtils:long copy(java.io.InputStream,java.io.OutputStream,int)",
            "org.apache.commons.compress.utils.FixedLengthBlockOutputStream$BufferAtATimeOutputChannel:int write(java.nio.ByteBuffer)",
            "org.apache.commons.compress.utils.CountingOutputStream:void write(byte[],int,int)",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream:void flushBlock()",
            "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void writeLiteralBlockWithSize(int,int,int,org.apache.commons.compress.compressors.lz77support.LZ77Compressor$LiteralBlock)",
            "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream:void deflate()",
            "org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore:void writeOut(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.archivers.zip.StreamCompressor:void flushDeflater()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.StreamCompressor:void deflate(java.io.InputStream,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void flushDeflater()"
        ]
    },
    "org.apache.commons.compress.archivers.zip.StreamCompressor:void deflateUntilInputIsNeeded()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.StreamCompressor:void writeDeflated(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void deflate()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void writeCounted(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void writeCentralDirectoryInChunks()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void writeLocalFileHeader(org.apache.commons.compress.archivers.zip.ZipArchiveEntry,boolean)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void writeDataDescriptor(org.apache.commons.compress.archivers.zip.ZipArchiveEntry)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void writeCentralFileHeader(org.apache.commons.compress.archivers.zip.ZipArchiveEntry)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void writeCentralDirectoryEnd()"
        ]
    },
    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void closeArchiveEntry()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void putArchiveEntry(org.apache.commons.compress.archivers.ArchiveEntry)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void finish()",
            "org.apache.commons.compress.changes.ChangeSetPerformer:void copyStream(java.io.InputStream,org.apache.commons.compress.archivers.ArchiveOutputStream,org.apache.commons.compress.archivers.ArchiveEntry)"
        ]
    },
    "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream:void <init>(java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.CompressorStreamFactory:org.apache.commons.compress.compressors.CompressorOutputStream createCompressorOutputStream(java.lang.String,java.io.OutputStream)"
        ]
    },
    "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream:void <init>(java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.CompressorStreamFactory:org.apache.commons.compress.compressors.CompressorOutputStream createCompressorOutputStream(java.lang.String,java.io.OutputStream)"
        ]
    },
    "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void access$000(org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream,org.apache.commons.compress.compressors.lz77support.LZ77Compressor$LiteralBlock)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream$1:void accept(org.apache.commons.compress.compressors.lz77support.LZ77Compressor$Block)"
        ]
    },
    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:void writeUnpackInfo(java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:void writeStreamsInfo(java.io.DataOutput)"
        ]
    },
    "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void writeLittleEndian(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void writeLiteralBlockWithSize(int,int,int,org.apache.commons.compress.compressors.lz77support.LZ77Compressor$LiteralBlock)",
            "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void writeBackReferenceWithLittleEndianOffset(int,int,int,int)"
        ]
    },
    "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream:void writeLittleEndian(int,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream:void flushBuffer()",
            "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream:void writeCrc()"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void finish()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void close()"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void writeRun()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void writeRun()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void finish()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void write0(int)"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void init()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void <init>(java.io.OutputStream,int)"
        ]
    },
    "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream:void access$200(org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$1:void accept(org.apache.commons.compress.compressors.lz77support.LZ77Compressor$Block)"
        ]
    },
    "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream:org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair writeBlocksAndReturnUnfinishedPair(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream:void addLiteralBlock(org.apache.commons.compress.compressors.lz77support.LZ77Compressor$LiteralBlock)",
            "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream:void addBackReference(org.apache.commons.compress.compressors.lz77support.LZ77Compressor$BackReference)"
        ]
    },
    "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void <init>(java.io.OutputStream,long,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void <init>(java.io.OutputStream,long)"
        ]
    },
    "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void access$100(org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream,org.apache.commons.compress.compressors.lz77support.LZ77Compressor$BackReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream$1:void accept(org.apache.commons.compress.compressors.lz77support.LZ77Compressor$Block)"
        ]
    },
    "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream:void <init>(java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.CompressorStreamFactory:org.apache.commons.compress.compressors.CompressorOutputStream createCompressorOutputStream(java.lang.String,java.io.OutputStream)"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void <init>(java.io.InputStream,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void <init>(java.io.InputStream)",
            "org.apache.commons.compress.compressors.CompressorStreamFactory:org.apache.commons.compress.compressors.CompressorInputStream createCompressorInputStream(java.lang.String,java.io.InputStream,boolean)"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:boolean complete()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void initBlock()"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:int setupRandPartA()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:int setupBlock()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:int setupRandPartB()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:int setupRandPartC()"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:int setupNoRandPartA()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:int setupBlock()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:int setupNoRandPartB()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:int setupNoRandPartC()"
        ]
    },
    "org.apache.commons.compress.compressors.lzw.LZWInputStream:int read(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.sevenz.SevenZFile:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void drainCurrentEntryData()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void readStoredEntry()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void realSkip(long)",
            "org.apache.commons.compress.archivers.zip.StreamCompressor:void deflate(java.io.InputStream,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.ChecksumCalculatingInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.IOUtils:int readFully(java.io.InputStream,byte[],int,int)",
            "org.apache.commons.compress.utils.CountingInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.ChecksumVerifyingInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.BoundedInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.xz.XZCompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream:int readOnce(byte[],int,int)",
            "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream:int read(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.compressors.z.ZCompressorInputStream:void reAlignReading()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.z.ZCompressorInputStream:int addEntry(int,byte)",
            "org.apache.commons.compress.compressors.z.ZCompressorInputStream:int decompressNextSymbol()"
        ]
    },
    "org.apache.commons.compress.compressors.z.ZCompressorInputStream:int decompressNextSymbol()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.lzw.LZWInputStream:int read(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream:void <init>(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.compress.archivers.jar.JarArchiveInputStream:org.apache.commons.compress.archivers.ArchiveEntry getNextEntry()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.Lister:void main(java.lang.String[])",
            "org.apache.commons.compress.changes.ChangeSetPerformer$ArchiveInputStreamIterator:boolean hasNext()"
        ]
    },
    "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:void <init>(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.ArchiveStreamFactory:org.apache.commons.compress.archivers.ArchiveInputStream createArchiveInputStream(java.lang.String,java.io.InputStream,java.lang.String)"
        ]
    },
    "org.apache.commons.compress.archivers.ArchiveStreamFactory:org.apache.commons.compress.archivers.ArchiveInputStream createArchiveInputStream(java.lang.String,java.io.InputStream,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.ArchiveStreamFactory:org.apache.commons.compress.archivers.ArchiveInputStream createArchiveInputStream(java.lang.String,java.io.InputStream)",
            "org.apache.commons.compress.archivers.ArchiveStreamFactory:org.apache.commons.compress.archivers.ArchiveInputStream createArchiveInputStream(java.lang.String,java.io.InputStream,java.lang.String)"
        ]
    },
    "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:void readDirectoryEntry(org.apache.commons.compress.archivers.dump.DumpArchiveEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:org.apache.commons.compress.archivers.dump.DumpArchiveEntry getNextEntry()"
        ]
    },
    "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:int read(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.sevenz.SevenZFile:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void drainCurrentEntryData()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void readStoredEntry()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void realSkip(long)",
            "org.apache.commons.compress.archivers.zip.StreamCompressor:void deflate(java.io.InputStream,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.ArchiveInputStream:int read()",
            "org.apache.commons.compress.utils.ChecksumCalculatingInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.IOUtils:int readFully(java.io.InputStream,byte[],int,int)",
            "org.apache.commons.compress.utils.CountingInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.ChecksumVerifyingInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.BoundedInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.xz.XZCompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream:int readOnce(byte[],int,int)",
            "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream:int read(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.archivers.dump.TapeInputStream:byte[] readRecord()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:void <init>(java.io.InputStream,java.lang.String)",
            "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:void readCLRI()",
            "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:void readBITS()",
            "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:org.apache.commons.compress.archivers.dump.DumpArchiveEntry getNextEntry()",
            "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:void readDirectoryEntry(org.apache.commons.compress.archivers.dump.DumpArchiveEntry)",
            "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:int read(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:void readCLRI()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:void <init>(java.io.InputStream,java.lang.String)"
        ]
    },
    "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:void readBITS()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:void <init>(java.io.InputStream,java.lang.String)"
        ]
    },
    "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:org.apache.commons.compress.archivers.dump.DumpArchiveEntry getNextEntry()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:org.apache.commons.compress.archivers.dump.DumpArchiveEntry getNextDumpEntry()",
            "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:org.apache.commons.compress.archivers.ArchiveEntry getNextEntry()"
        ]
    },
    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:void closeEntry()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:org.apache.commons.compress.archivers.cpio.CpioArchiveEntry getNextCPIOEntry()"
        ]
    },
    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:void skipRemainderOfLastBlock()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:org.apache.commons.compress.archivers.cpio.CpioArchiveEntry getNextCPIOEntry()"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:boolean bufferContainsSignature(java.io.ByteArrayOutputStream,int,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void readStoredEntry()"
        ]
    },
    "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream:void <init>(java.io.InputStream,org.apache.commons.compress.compressors.snappy.FramedSnappyDialect)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream:void <init>(java.io.InputStream)"
        ]
    },
    "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream:int read()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:java.util.Map parsePaxHeaders(java.io.InputStream)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:java.lang.String readCString(int)",
            "org.apache.commons.compress.archivers.sevenz.SevenZFile:int read()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:int readOneByte()",
            "org.apache.commons.compress.archivers.zip.BinaryTree:org.apache.commons.compress.archivers.zip.BinaryTree decode(java.io.InputStream,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream:int read()",
            "org.apache.commons.compress.utils.ByteUtils$InputStreamByteSupplier:int getAsByte()",
            "org.apache.commons.compress.utils.BitInputStream:long processBitsGreater57(int)",
            "org.apache.commons.compress.utils.BitInputStream:boolean ensureCache(int)",
            "org.apache.commons.compress.utils.ChecksumCalculatingInputStream:int read()",
            "org.apache.commons.compress.utils.ByteUtils:long fromLittleEndian(java.io.InputStream,int)",
            "org.apache.commons.compress.utils.CountingInputStream:int read()",
            "org.apache.commons.compress.utils.ChecksumVerifyingInputStream:int read()",
            "org.apache.commons.compress.utils.BoundedInputStream:int read()",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read()",
            "org.apache.commons.compress.compressors.xz.XZCompressorInputStream:int read()",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream:int readOneByte()",
            "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream:int readOneByte()",
            "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream:int read()",
            "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream:boolean init(boolean)",
            "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream:int read()"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void preClose()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void closeArchiveEntry()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void closeCopiedEntry(boolean)"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void flushDeflater()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void closeArchiveEntry()"
        ]
    },
    "org.apache.commons.compress.archivers.zip.StreamCompressor:void writeDeflated(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.StreamCompressor:long write(byte[],int,int,int)"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void writeDataDescriptor(org.apache.commons.compress.archivers.zip.ZipArchiveEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void closeEntry(boolean,boolean)"
        ]
    },
    "org.apache.commons.compress.compressors.CompressorStreamFactory:org.apache.commons.compress.compressors.CompressorOutputStream createCompressorOutputStream(java.lang.String,java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.CompressorStreamFactory:org.apache.commons.compress.compressors.CompressorOutputStream createCompressorOutputStream(java.lang.String,java.io.OutputStream)"
        ]
    },
    "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream$1:void accept(org.apache.commons.compress.compressors.lz77support.LZ77Compressor$Block)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.lz77support.LZ77Compressor:void finish()",
            "org.apache.commons.compress.compressors.lz77support.LZ77Compressor:void flushBackReference(int)",
            "org.apache.commons.compress.compressors.lz77support.LZ77Compressor:void flushLiteralBlock()"
        ]
    },
    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:void writeStreamsInfo(java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:void writeHeader(java.io.DataOutput)"
        ]
    },
    "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream:void writeCrc()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream:void flushBuffer()"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void write0(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void write(int)",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void write(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void <init>(java.io.OutputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.sevenz.Coders$BZIP2Decoder:java.io.OutputStream encode(java.io.OutputStream,java.lang.Object)",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void <init>(java.io.OutputStream)"
        ]
    },
    "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$1:void accept(org.apache.commons.compress.compressors.lz77support.LZ77Compressor$Block)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.lz77support.LZ77Compressor:void finish()",
            "org.apache.commons.compress.compressors.lz77support.LZ77Compressor:void flushBackReference(int)",
            "org.apache.commons.compress.compressors.lz77support.LZ77Compressor:void flushLiteralBlock()"
        ]
    },
    "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream:void addLiteralBlock(org.apache.commons.compress.compressors.lz77support.LZ77Compressor$LiteralBlock)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream:void access$000(org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream,org.apache.commons.compress.compressors.lz77support.LZ77Compressor$LiteralBlock)"
        ]
    },
    "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream:void addBackReference(org.apache.commons.compress.compressors.lz77support.LZ77Compressor$BackReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream:void access$100(org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream,org.apache.commons.compress.compressors.lz77support.LZ77Compressor$BackReference)"
        ]
    },
    "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void <init>(java.io.OutputStream,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void <init>(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.sevenz.Coders$BZIP2Decoder:java.io.InputStream decode(java.lang.String,java.io.InputStream,long,org.apache.commons.compress.archivers.sevenz.Coder,byte[])",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:org.apache.commons.compress.archivers.zip.ZipArchiveEntry getNextZipEntry()",
            "org.apache.commons.compress.archivers.zip.ZipFile:java.io.InputStream getInputStream(org.apache.commons.compress.archivers.zip.ZipArchiveEntry)"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:int setupBlock()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:int read0()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:int setupRandPartA()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:int setupNoRandPartA()"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:int setupRandPartB()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:int read0()"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:int setupRandPartC()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:int read0()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:int setupRandPartB()"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:int setupNoRandPartB()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:int read0()"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:int setupNoRandPartC()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:int read0()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:int setupNoRandPartB()"
        ]
    },
    "org.apache.commons.compress.compressors.z.ZCompressorInputStream:int addEntry(int,byte)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.lzw.LZWInputStream:int addRepeatOfPreviousCode()",
            "org.apache.commons.compress.compressors.lzw.LZWInputStream:int expandCodeToOutputStack(int,boolean)"
        ]
    },
    "org.apache.commons.compress.archivers.ArchiveStreamFactory:org.apache.commons.compress.archivers.ArchiveInputStream createArchiveInputStream(java.lang.String,java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.ArchiveStreamFactory:org.apache.commons.compress.archivers.ArchiveInputStream createArchiveInputStream(java.io.InputStream)",
            "org.apache.commons.compress.archivers.Lister:org.apache.commons.compress.archivers.ArchiveInputStream createArchiveInputStream(java.lang.String[],java.io.InputStream)"
        ]
    },
    "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:org.apache.commons.compress.archivers.dump.DumpArchiveEntry getNextDumpEntry()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:org.apache.commons.compress.archivers.ArchiveEntry getNextEntry()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.Lister:void main(java.lang.String[])",
            "org.apache.commons.compress.changes.ChangeSetPerformer$ArchiveInputStreamIterator:boolean hasNext()"
        ]
    },
    "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream:void <init>(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.CompressorStreamFactory:org.apache.commons.compress.compressors.CompressorInputStream createCompressorInputStream(java.lang.String,java.io.InputStream,boolean)"
        ]
    },
    "org.apache.commons.compress.compressors.lz77support.LZ77Compressor:void finish()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream:void finish()",
            "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void finish()"
        ]
    },
    "org.apache.commons.compress.compressors.lz77support.LZ77Compressor:void flushBackReference(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.lz77support.LZ77Compressor:void compress()"
        ]
    },
    "org.apache.commons.compress.compressors.lz77support.LZ77Compressor:void flushLiteralBlock()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.lz77support.LZ77Compressor:void finish()",
            "org.apache.commons.compress.compressors.lz77support.LZ77Compressor:void slide()",
            "org.apache.commons.compress.compressors.lz77support.LZ77Compressor:void compress()"
        ]
    },
    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:void writeHeader(java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:void finish()"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void write(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeCString(java.lang.String)",
            "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:void closeArchiveEntry()",
            "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:void write(int)",
            "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:void writeSingleCodec(org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration,java.io.OutputStream)",
            "org.apache.commons.compress.utils.ByteUtils$OutputStreamByteConsumer:void accept(int)",
            "org.apache.commons.compress.utils.ByteUtils:void toLittleEndian(java.io.OutputStream,long,int)",
            "org.apache.commons.compress.utils.CountingOutputStream:void write(int)",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void bsFinishedWithStream()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void bsW(int,int)",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void sendMTFValues4()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void sendMTFValues5(int,int)",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void sendMTFValues6(int,int)",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void sendMTFValues7()",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream:void writeFrameDescriptor()",
            "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair:void writeTo(java.io.OutputStream)",
            "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair:void writeLength(int,java.io.OutputStream)",
            "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void writeUncompressedSize(long)",
            "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void writeLiteralBlockWithSize(int,int,int,org.apache.commons.compress.compressors.lz77support.LZ77Compressor$LiteralBlock)",
            "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void writeBackReferenceWithOneOffsetByte(int,int)",
            "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void writeBackReferenceWithLittleEndianOffset(int,int,int,int)",
            "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream:void flushBuffer()",
            "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream:void writeHeader(org.apache.commons.compress.compressors.gzip.GzipParameters)"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void write(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void write(byte[],int,int)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeCString(java.lang.String)",
            "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:void write(byte[],int,int)",
            "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:void write(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.StreamCompressor$OutputStreamCompressor:void writeOut(byte[],int,int)",
            "org.apache.commons.compress.utils.IOUtils:long copy(java.io.InputStream,java.io.OutputStream,int)",
            "org.apache.commons.compress.utils.FixedLengthBlockOutputStream$BufferAtATimeOutputChannel:int write(java.nio.ByteBuffer)",
            "org.apache.commons.compress.utils.CountingOutputStream:void write(byte[],int,int)",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream:void flushBlock()",
            "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void writeLiteralBlockWithSize(int,int,int,org.apache.commons.compress.compressors.lz77support.LZ77Compressor$LiteralBlock)",
            "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream:void deflate()",
            "org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore:void writeOut(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.archivers.sevenz.Coders$BZIP2Decoder:java.io.OutputStream encode(java.io.OutputStream,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.sevenz.Coders:java.io.OutputStream addEncoder(java.io.OutputStream,org.apache.commons.compress.archivers.sevenz.SevenZMethod,java.lang.Object)"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void <init>(java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.CompressorStreamFactory:org.apache.commons.compress.compressors.CompressorOutputStream createCompressorOutputStream(java.lang.String,java.io.OutputStream)"
        ]
    },
    "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream:void access$000(org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream,org.apache.commons.compress.compressors.lz77support.LZ77Compressor$LiteralBlock)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$1:void accept(org.apache.commons.compress.compressors.lz77support.LZ77Compressor$Block)"
        ]
    },
    "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream:void access$100(org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream,org.apache.commons.compress.compressors.lz77support.LZ77Compressor$BackReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$1:void accept(org.apache.commons.compress.compressors.lz77support.LZ77Compressor$Block)"
        ]
    },
    "org.apache.commons.compress.archivers.sevenz.Coders$BZIP2Decoder:java.io.InputStream decode(java.lang.String,java.io.InputStream,long,org.apache.commons.compress.archivers.sevenz.Coder,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.sevenz.Coders:java.io.InputStream addDecoder(java.lang.String,java.io.InputStream,long,org.apache.commons.compress.archivers.sevenz.Coder,byte[])"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipFile:java.io.InputStream getInputStream(org.apache.commons.compress.archivers.zip.ZipArchiveEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipFile:java.lang.String getUnixSymlink(org.apache.commons.compress.archivers.zip.ZipArchiveEntry)",
            "org.apache.commons.compress.changes.ChangeSetPerformer$ZipFileIterator:java.io.InputStream getInputStream()"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:int read0()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:int read()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:int read(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.compressors.lzw.LZWInputStream:int addRepeatOfPreviousCode()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream:int decompressNextSymbol()",
            "org.apache.commons.compress.compressors.z.ZCompressorInputStream:int decompressNextSymbol()"
        ]
    },
    "org.apache.commons.compress.compressors.lzw.LZWInputStream:int expandCodeToOutputStack(int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream:int decompressNextSymbol()",
            "org.apache.commons.compress.compressors.z.ZCompressorInputStream:int decompressNextSymbol()"
        ]
    },
    "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream:void finish()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream:void close()"
        ]
    },
    "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void finish()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void close()"
        ]
    },
    "org.apache.commons.compress.compressors.lz77support.LZ77Compressor:void compress()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.lz77support.LZ77Compressor:void doCompress(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.compressors.lz77support.LZ77Compressor:void slide()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.lz77support.LZ77Compressor:void doCompress(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:void finish()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:void close()"
        ]
    },
    "org.apache.commons.compress.archivers.sevenz.Coders:java.io.OutputStream addEncoder(java.io.OutputStream,org.apache.commons.compress.archivers.sevenz.SevenZMethod,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:org.apache.commons.compress.utils.CountingOutputStream setupFileOutputStream()"
        ]
    },
    "org.apache.commons.compress.archivers.sevenz.Coders:java.io.InputStream addDecoder(java.lang.String,java.io.InputStream,long,org.apache.commons.compress.archivers.sevenz.Coder,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.sevenz.SevenZFile:java.nio.ByteBuffer readEncodedHeader(java.nio.ByteBuffer,org.apache.commons.compress.archivers.sevenz.Archive,byte[])",
            "org.apache.commons.compress.archivers.sevenz.SevenZFile:java.io.InputStream buildDecoderStack(org.apache.commons.compress.archivers.sevenz.Folder,long,int,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry)"
        ]
    },
    "org.apache.commons.compress.changes.ChangeSetPerformer$ZipFileIterator:java.io.InputStream getInputStream()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.changes.ChangeSetPerformer:org.apache.commons.compress.changes.ChangeSetResults perform(org.apache.commons.compress.changes.ChangeSetPerformer$ArchiveEntryIterator,org.apache.commons.compress.archivers.ArchiveOutputStream)"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:int read()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:java.util.Map parsePaxHeaders(java.io.InputStream)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:java.lang.String readCString(int)",
            "org.apache.commons.compress.archivers.sevenz.SevenZFile:int read()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:int readOneByte()",
            "org.apache.commons.compress.archivers.zip.BinaryTree:org.apache.commons.compress.archivers.zip.BinaryTree decode(java.io.InputStream,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream:int read()",
            "org.apache.commons.compress.utils.ByteUtils$InputStreamByteSupplier:int getAsByte()",
            "org.apache.commons.compress.utils.BitInputStream:long processBitsGreater57(int)",
            "org.apache.commons.compress.utils.BitInputStream:boolean ensureCache(int)",
            "org.apache.commons.compress.utils.ChecksumCalculatingInputStream:int read()",
            "org.apache.commons.compress.utils.ByteUtils:long fromLittleEndian(java.io.InputStream,int)",
            "org.apache.commons.compress.utils.CountingInputStream:int read()",
            "org.apache.commons.compress.utils.ChecksumVerifyingInputStream:int read()",
            "org.apache.commons.compress.utils.BoundedInputStream:int read()",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read()",
            "org.apache.commons.compress.compressors.xz.XZCompressorInputStream:int read()",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream:int readOneByte()",
            "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream:int readOneByte()",
            "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream:int read()",
            "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream:boolean init(boolean)",
            "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream:int read()"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:int read(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.sevenz.SevenZFile:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void drainCurrentEntryData()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void readStoredEntry()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void realSkip(long)",
            "org.apache.commons.compress.archivers.zip.StreamCompressor:void deflate(java.io.InputStream,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.ChecksumCalculatingInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.IOUtils:int readFully(java.io.InputStream,byte[],int,int)",
            "org.apache.commons.compress.utils.CountingInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.ChecksumVerifyingInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.BoundedInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.xz.XZCompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream:int readOnce(byte[],int,int)",
            "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream:int read(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.compressors.lz77support.LZ77Compressor:void doCompress(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.lz77support.LZ77Compressor:void compress(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.utils.IOUtils:void closeQuietly(java.io.Closeable)"
        ]
    },
    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:org.apache.commons.compress.utils.CountingOutputStream setupFileOutputStream()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:java.io.OutputStream getCurrentOutputStream()"
        ]
    },
    "org.apache.commons.compress.archivers.sevenz.SevenZFile:java.nio.ByteBuffer readEncodedHeader(java.nio.ByteBuffer,org.apache.commons.compress.archivers.sevenz.Archive,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.sevenz.SevenZFile:org.apache.commons.compress.archivers.sevenz.Archive readHeaders(byte[])"
        ]
    },
    "org.apache.commons.compress.archivers.sevenz.SevenZFile:java.io.InputStream buildDecoderStack(org.apache.commons.compress.archivers.sevenz.Folder,long,int,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.sevenz.SevenZFile:void buildDecodingStream()"
        ]
    },
    "org.apache.commons.compress.compressors.lz77support.LZ77Compressor:void compress(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream:void write(byte[],int,int)",
            "org.apache.commons.compress.compressors.lz77support.LZ77Compressor:void compress(byte[])",
            "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void write(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:java.io.OutputStream getCurrentOutputStream()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:void write(int)",
            "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:void write(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.archivers.sevenz.SevenZFile:org.apache.commons.compress.archivers.sevenz.Archive readHeaders(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.sevenz.SevenZFile:void <init>(java.nio.channels.SeekableByteChannel,java.lang.String,byte[],boolean)"
        ]
    },
    "org.apache.commons.compress.archivers.sevenz.SevenZFile:void buildDecodingStream()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.sevenz.SevenZFile:org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry getNextEntry()"
        ]
    },
    "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream:void write(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void write(byte[],int,int)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeCString(java.lang.String)",
            "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:void write(byte[],int,int)",
            "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:void write(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.StreamCompressor$OutputStreamCompressor:void writeOut(byte[],int,int)",
            "org.apache.commons.compress.utils.IOUtils:long copy(java.io.InputStream,java.io.OutputStream,int)",
            "org.apache.commons.compress.utils.FixedLengthBlockOutputStream$BufferAtATimeOutputChannel:int write(java.nio.ByteBuffer)",
            "org.apache.commons.compress.utils.CountingOutputStream:void write(byte[],int,int)",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream:void flushBlock()",
            "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void writeLiteralBlockWithSize(int,int,int,org.apache.commons.compress.compressors.lz77support.LZ77Compressor$LiteralBlock)",
            "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream:void deflate()",
            "org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore:void writeOut(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.compressors.lz77support.LZ77Compressor:void compress(byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void write(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void write(byte[],int,int)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeCString(java.lang.String)",
            "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:void write(byte[],int,int)",
            "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:void write(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.StreamCompressor$OutputStreamCompressor:void writeOut(byte[],int,int)",
            "org.apache.commons.compress.utils.IOUtils:long copy(java.io.InputStream,java.io.OutputStream,int)",
            "org.apache.commons.compress.utils.FixedLengthBlockOutputStream$BufferAtATimeOutputChannel:int write(java.nio.ByteBuffer)",
            "org.apache.commons.compress.utils.CountingOutputStream:void write(byte[],int,int)",
            "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream:void flushBlock()",
            "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream:void writeLiteralBlockWithSize(int,int,int,org.apache.commons.compress.compressors.lz77support.LZ77Compressor$LiteralBlock)",
            "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream:void flushBuffer()",
            "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream:void deflate()",
            "org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore:void writeOut(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.archivers.sevenz.SevenZFile:void <init>(java.nio.channels.SeekableByteChannel,java.lang.String,byte[],boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.sevenz.SevenZFile:void <init>(java.io.File,byte[])",
            "org.apache.commons.compress.archivers.sevenz.SevenZFile:void <init>(java.nio.channels.SeekableByteChannel,java.lang.String,byte[])"
        ]
    },
    "org.apache.commons.compress.archivers.sevenz.SevenZFile:org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry getNextEntry()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.sevenz.CLI:void main(java.lang.String[])"
        ]
    },
    "org.apache.commons.compress.archivers.sevenz.SevenZFile:void <init>(java.io.File,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.sevenz.SevenZFile:void <init>(java.io.File)"
        ]
    },
    "org.apache.commons.compress.archivers.sevenz.SevenZFile:void <init>(java.nio.channels.SeekableByteChannel,java.lang.String,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.sevenz.SevenZFile:void <init>(java.nio.channels.SeekableByteChannel)",
            "org.apache.commons.compress.archivers.sevenz.SevenZFile:void <init>(java.nio.channels.SeekableByteChannel,byte[])"
        ]
    },
    "org.apache.commons.compress.archivers.sevenz.SevenZFile:void <init>(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.sevenz.CLI:void main(java.lang.String[])"
        ]
    },
    "org.apache.commons.compress.archivers.sevenz.SevenZFile:void <init>(java.nio.channels.SeekableByteChannel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.compress.archivers.sevenz.SevenZFile:void <init>(java.nio.channels.SeekableByteChannel,byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    }
}