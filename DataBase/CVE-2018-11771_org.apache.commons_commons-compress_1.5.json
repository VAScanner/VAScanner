{
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:int readStored(byte[],int,int)": {
        "isVulRoot": true,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:int read(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:int read(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:int readFully(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:long skip(long)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void drainCurrentEntryData()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void readFully(byte[])",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void readStoredEntry()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void realSkip(long)",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:java.lang.String getBSDLongName(java.lang.String)",
            "org.apache.commons.compress.archivers.dump.TapeInputStream:boolean readFully(byte[],int,int)",
            "org.apache.commons.compress.archivers.tar.TarBuffer:boolean readBlock()",
            "org.apache.commons.compress.archivers.ArchiveInputStream:int read()",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.xz.XZCompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.CountingInputStream:int read(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:int readFully(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:org.apache.commons.compress.archivers.cpio.CpioArchiveEntry getNextCPIOEntry()",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:void skip(int)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:long readBinaryLong(int,boolean)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:long readAsciiLong(int,int)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:java.lang.String readCString(int)"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:long skip(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void closeEntry()",
            "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:long skip(long)",
            "org.apache.commons.compress.compressors.xz.XZCompressorInputStream:long skip(long)"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void drainCurrentEntryData()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void closeEntry()"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void readFully(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:org.apache.commons.compress.archivers.zip.ZipArchiveEntry getNextZipEntry()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void readFirstLocalFileHeader(byte[])",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void readDataDescriptor()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void skipRemainderOfArchive()"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void readStoredEntry()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:int readStored(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void realSkip(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void skipRemainderOfArchive()"
        ]
    },
    "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:int read(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:int readFully(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void drainCurrentEntryData()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void readFully(byte[])",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void readStoredEntry()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void realSkip(long)",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:java.lang.String getBSDLongName(java.lang.String)",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:org.apache.commons.compress.archivers.ar.ArArchiveEntry readGNUStringTable(byte[])",
            "org.apache.commons.compress.archivers.dump.TapeInputStream:boolean readFully(byte[],int,int)",
            "org.apache.commons.compress.archivers.tar.TarBuffer:boolean readBlock()",
            "org.apache.commons.compress.archivers.ArchiveInputStream:int read()",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.xz.XZCompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.CountingInputStream:int read(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:java.lang.String getBSDLongName(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:org.apache.commons.compress.archivers.ar.ArArchiveEntry getNextArEntry()"
        ]
    },
    "org.apache.commons.compress.archivers.dump.TapeInputStream:boolean readFully(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.dump.TapeInputStream:void resetBlockSize(int,boolean)",
            "org.apache.commons.compress.archivers.dump.TapeInputStream:boolean readBlock(boolean)"
        ]
    },
    "org.apache.commons.compress.archivers.tar.TarBuffer:boolean readBlock()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.tar.TarBuffer:void skipRecord()",
            "org.apache.commons.compress.archivers.tar.TarBuffer:byte[] readRecord()"
        ]
    },
    "org.apache.commons.compress.archivers.ArchiveInputStream:int read()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:int readOneByte()",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:org.apache.commons.compress.archivers.ar.ArArchiveEntry getNextArEntry()",
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:java.util.Map parsePaxHeaders(java.io.InputStream)",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:boolean init(boolean)",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:int bsR(int)",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:boolean bsGetBit()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void getAndMoveToFrontDecode()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:int getAndMoveToFrontDecode0(int)",
            "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream:boolean init(boolean)",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read()",
            "org.apache.commons.compress.compressors.xz.XZCompressorInputStream:int read()",
            "org.apache.commons.compress.utils.CountingInputStream:int read()"
        ]
    },
    "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:int readFully(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void drainCurrentEntryData()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void readFully(byte[])",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void readStoredEntry()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void realSkip(long)",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:java.lang.String getBSDLongName(java.lang.String)",
            "org.apache.commons.compress.archivers.dump.TapeInputStream:boolean readFully(byte[],int,int)",
            "org.apache.commons.compress.archivers.tar.TarBuffer:boolean readBlock()",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.xz.XZCompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.CountingInputStream:int read(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.compressors.xz.XZCompressorInputStream:int read(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:int readFully(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void drainCurrentEntryData()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void readFully(byte[])",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void readStoredEntry()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void realSkip(long)",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:java.lang.String getBSDLongName(java.lang.String)",
            "org.apache.commons.compress.archivers.dump.TapeInputStream:boolean readFully(byte[],int,int)",
            "org.apache.commons.compress.archivers.tar.TarBuffer:boolean readBlock()",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.xz.XZCompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.CountingInputStream:int read(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.utils.CountingInputStream:int read(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:int readFully(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void drainCurrentEntryData()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void readFully(byte[])",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void readStoredEntry()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void realSkip(long)",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:java.lang.String getBSDLongName(java.lang.String)",
            "org.apache.commons.compress.archivers.dump.TapeInputStream:boolean readFully(byte[],int,int)",
            "org.apache.commons.compress.archivers.tar.TarBuffer:boolean readBlock()",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.xz.XZCompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.CountingInputStream:int read(byte[])",
            "org.apache.commons.compress.utils.CountingInputStream:int read(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:org.apache.commons.compress.archivers.cpio.CpioArchiveEntry getNextCPIOEntry()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:org.apache.commons.compress.archivers.ArchiveEntry getNextEntry()"
        ]
    },
    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:void skip(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:org.apache.commons.compress.archivers.cpio.CpioArchiveEntry readNewEntry(boolean)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:org.apache.commons.compress.archivers.cpio.CpioArchiveEntry readOldBinaryEntry(boolean)"
        ]
    },
    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:int read(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:void closeEntry()",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:int readFully(byte[],int,int)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:long skip(long)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void drainCurrentEntryData()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void readFully(byte[])",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void readStoredEntry()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void realSkip(long)",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:java.lang.String getBSDLongName(java.lang.String)",
            "org.apache.commons.compress.archivers.dump.TapeInputStream:boolean readFully(byte[],int,int)",
            "org.apache.commons.compress.archivers.tar.TarBuffer:boolean readBlock()",
            "org.apache.commons.compress.archivers.ArchiveInputStream:int read()",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.xz.XZCompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.CountingInputStream:int read(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:long readBinaryLong(int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:org.apache.commons.compress.archivers.cpio.CpioArchiveEntry readOldBinaryEntry(boolean)"
        ]
    },
    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:long readAsciiLong(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:org.apache.commons.compress.archivers.cpio.CpioArchiveEntry readNewEntry(boolean)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:org.apache.commons.compress.archivers.cpio.CpioArchiveEntry readOldAsciiEntry()"
        ]
    },
    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:java.lang.String readCString(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:org.apache.commons.compress.archivers.cpio.CpioArchiveEntry readNewEntry(boolean)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:org.apache.commons.compress.archivers.cpio.CpioArchiveEntry readOldAsciiEntry()",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:org.apache.commons.compress.archivers.cpio.CpioArchiveEntry readOldBinaryEntry(boolean)"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void closeEntry()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:org.apache.commons.compress.archivers.zip.ZipArchiveEntry getNextZipEntry()"
        ]
    },
    "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream:int read(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:int readFully(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void drainCurrentEntryData()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void readFully(byte[])",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void readStoredEntry()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void realSkip(long)",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:java.lang.String getBSDLongName(java.lang.String)",
            "org.apache.commons.compress.archivers.dump.TapeInputStream:boolean readFully(byte[],int,int)",
            "org.apache.commons.compress.archivers.tar.TarBuffer:boolean readBlock()",
            "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream:int read()",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.xz.XZCompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.CountingInputStream:int read(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:long skip(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:long skip(long)",
            "org.apache.commons.compress.compressors.xz.XZCompressorInputStream:long skip(long)"
        ]
    },
    "org.apache.commons.compress.compressors.xz.XZCompressorInputStream:long skip(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:long skip(long)",
            "org.apache.commons.compress.compressors.xz.XZCompressorInputStream:long skip(long)"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:org.apache.commons.compress.archivers.zip.ZipArchiveEntry getNextZipEntry()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.jar.JarArchiveInputStream:org.apache.commons.compress.archivers.jar.JarArchiveEntry getNextJarEntry()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:org.apache.commons.compress.archivers.ArchiveEntry getNextEntry()"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void readFirstLocalFileHeader(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:org.apache.commons.compress.archivers.zip.ZipArchiveEntry getNextZipEntry()"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void readDataDescriptor()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void closeEntry()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:boolean bufferContainsSignature(java.io.ByteArrayOutputStream,int,int,int)"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void skipRemainderOfArchive()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:org.apache.commons.compress.archivers.zip.ZipArchiveEntry getNextZipEntry()"
        ]
    },
    "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:org.apache.commons.compress.archivers.ar.ArArchiveEntry readGNUStringTable(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:org.apache.commons.compress.archivers.ar.ArArchiveEntry getNextArEntry()"
        ]
    },
    "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:org.apache.commons.compress.archivers.ar.ArArchiveEntry getNextArEntry()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:org.apache.commons.compress.archivers.ar.ArArchiveEntry getNextArEntry()",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:org.apache.commons.compress.archivers.ArchiveEntry getNextEntry()"
        ]
    },
    "org.apache.commons.compress.archivers.dump.TapeInputStream:void resetBlockSize(int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:void <init>(java.io.InputStream)"
        ]
    },
    "org.apache.commons.compress.archivers.dump.TapeInputStream:boolean readBlock(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.dump.TapeInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.dump.TapeInputStream:long skip(long)",
            "org.apache.commons.compress.archivers.dump.TapeInputStream:byte[] peek()"
        ]
    },
    "org.apache.commons.compress.archivers.tar.TarBuffer:void skipRecord()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.compress.archivers.tar.TarBuffer:byte[] readRecord()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.tar.TarBuffer:void tryToConsumeSecondEOFRecord()",
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:byte[] getRecord()",
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:int read(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:int readOneByte()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void findEocdRecord()"
        ]
    },
    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:java.util.Map parsePaxHeaders(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:void paxHeaders()"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:boolean init(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void <init>(java.io.InputStream,boolean)",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:boolean complete()"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:int bsR(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void initBlock()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:char bsGetUByte()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:int bsGetInt()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void recvDecodingTables()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void getAndMoveToFrontDecode()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:int getAndMoveToFrontDecode0(int)"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:boolean bsGetBit()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void recvDecodingTables()"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void getAndMoveToFrontDecode()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void initBlock()"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:int getAndMoveToFrontDecode0(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void getAndMoveToFrontDecode()"
        ]
    },
    "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream:boolean init(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream:void <init>(java.io.InputStream,boolean)",
            "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream:int read(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:int readOneByte()",
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:java.util.Map parsePaxHeaders(java.io.InputStream)",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:boolean init(boolean)",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:int bsR(int)",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:boolean bsGetBit()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void getAndMoveToFrontDecode()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:int getAndMoveToFrontDecode0(int)",
            "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream:boolean init(boolean)",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read()",
            "org.apache.commons.compress.compressors.xz.XZCompressorInputStream:int read()",
            "org.apache.commons.compress.utils.CountingInputStream:int read()"
        ]
    },
    "org.apache.commons.compress.compressors.xz.XZCompressorInputStream:int read()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:int readOneByte()",
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:java.util.Map parsePaxHeaders(java.io.InputStream)",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:boolean init(boolean)",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:int bsR(int)",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:boolean bsGetBit()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void getAndMoveToFrontDecode()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:int getAndMoveToFrontDecode0(int)",
            "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream:boolean init(boolean)",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read()",
            "org.apache.commons.compress.compressors.xz.XZCompressorInputStream:int read()",
            "org.apache.commons.compress.utils.CountingInputStream:int read()"
        ]
    },
    "org.apache.commons.compress.utils.CountingInputStream:int read()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:int readOneByte()",
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:java.util.Map parsePaxHeaders(java.io.InputStream)",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:boolean init(boolean)",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:int bsR(int)",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:boolean bsGetBit()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void getAndMoveToFrontDecode()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:int getAndMoveToFrontDecode0(int)",
            "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream:boolean init(boolean)",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read()",
            "org.apache.commons.compress.compressors.xz.XZCompressorInputStream:int read()",
            "org.apache.commons.compress.utils.CountingInputStream:int read()"
        ]
    },
    "org.apache.commons.compress.utils.CountingInputStream:int read(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:int readStored(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void fill()",
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:java.util.Map parsePaxHeaders(java.io.InputStream)",
            "org.apache.commons.compress.archivers.ArchiveStreamFactory:org.apache.commons.compress.archivers.ArchiveInputStream createArchiveInputStream(java.io.InputStream)",
            "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read(byte[])",
            "org.apache.commons.compress.compressors.CompressorStreamFactory:org.apache.commons.compress.compressors.CompressorInputStream createCompressorInputStream(java.io.InputStream)",
            "org.apache.commons.compress.utils.IOUtils:long copy(java.io.InputStream,java.io.OutputStream,int)"
        ]
    },
    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:org.apache.commons.compress.archivers.ArchiveEntry getNextEntry()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.Lister:void main(java.lang.String[])",
            "org.apache.commons.compress.changes.ChangeSetPerformer$ArchiveInputStreamIterator:boolean hasNext()"
        ]
    },
    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:org.apache.commons.compress.archivers.cpio.CpioArchiveEntry readNewEntry(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:org.apache.commons.compress.archivers.cpio.CpioArchiveEntry getNextCPIOEntry()"
        ]
    },
    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:org.apache.commons.compress.archivers.cpio.CpioArchiveEntry readOldBinaryEntry(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:org.apache.commons.compress.archivers.cpio.CpioArchiveEntry getNextCPIOEntry()"
        ]
    },
    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:void closeEntry()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:org.apache.commons.compress.archivers.cpio.CpioArchiveEntry getNextCPIOEntry()"
        ]
    },
    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:long skip(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:void skipRemainderOfLastBlock()",
            "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:long skip(long)",
            "org.apache.commons.compress.compressors.xz.XZCompressorInputStream:long skip(long)"
        ]
    },
    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:org.apache.commons.compress.archivers.cpio.CpioArchiveEntry readOldAsciiEntry()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:org.apache.commons.compress.archivers.cpio.CpioArchiveEntry getNextCPIOEntry()"
        ]
    },
    "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream:int read()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:int readOneByte()",
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:java.util.Map parsePaxHeaders(java.io.InputStream)",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:boolean init(boolean)",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:int bsR(int)",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:boolean bsGetBit()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void getAndMoveToFrontDecode()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:int getAndMoveToFrontDecode0(int)",
            "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream:boolean init(boolean)",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read()",
            "org.apache.commons.compress.compressors.xz.XZCompressorInputStream:int read()",
            "org.apache.commons.compress.utils.CountingInputStream:int read()"
        ]
    },
    "org.apache.commons.compress.archivers.jar.JarArchiveInputStream:org.apache.commons.compress.archivers.jar.JarArchiveEntry getNextJarEntry()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.jar.JarArchiveInputStream:org.apache.commons.compress.archivers.ArchiveEntry getNextEntry()"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:org.apache.commons.compress.archivers.ArchiveEntry getNextEntry()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.Lister:void main(java.lang.String[])",
            "org.apache.commons.compress.changes.ChangeSetPerformer$ArchiveInputStreamIterator:boolean hasNext()"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:boolean bufferContainsSignature(java.io.ByteArrayOutputStream,int,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void readStoredEntry()"
        ]
    },
    "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:org.apache.commons.compress.archivers.ArchiveEntry getNextEntry()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.Lister:void main(java.lang.String[])",
            "org.apache.commons.compress.changes.ChangeSetPerformer$ArchiveInputStreamIterator:boolean hasNext()"
        ]
    },
    "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:void <init>(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.ArchiveStreamFactory:org.apache.commons.compress.archivers.ArchiveInputStream createArchiveInputStream(java.lang.String,java.io.InputStream)",
            "org.apache.commons.compress.archivers.ArchiveStreamFactory:org.apache.commons.compress.archivers.ArchiveInputStream createArchiveInputStream(java.io.InputStream)"
        ]
    },
    "org.apache.commons.compress.archivers.dump.TapeInputStream:int read(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:int readFully(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void drainCurrentEntryData()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void readFully(byte[])",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void readStoredEntry()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void realSkip(long)",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:java.lang.String getBSDLongName(java.lang.String)",
            "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:void readDirectoryEntry(org.apache.commons.compress.archivers.dump.DumpArchiveEntry)",
            "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.dump.TapeInputStream:byte[] readRecord()",
            "org.apache.commons.compress.archivers.dump.TapeInputStream:boolean readFully(byte[],int,int)",
            "org.apache.commons.compress.archivers.tar.TarBuffer:boolean readBlock()",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.xz.XZCompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.CountingInputStream:int read(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.archivers.dump.TapeInputStream:long skip(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:void readCLRI()",
            "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:void readBITS()",
            "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:org.apache.commons.compress.archivers.dump.DumpArchiveEntry getNextEntry()",
            "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:long skip(long)",
            "org.apache.commons.compress.compressors.xz.XZCompressorInputStream:long skip(long)"
        ]
    },
    "org.apache.commons.compress.archivers.dump.TapeInputStream:byte[] peek()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:void readDirectoryEntry(org.apache.commons.compress.archivers.dump.DumpArchiveEntry)"
        ]
    },
    "org.apache.commons.compress.archivers.tar.TarBuffer:void tryToConsumeSecondEOFRecord()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:byte[] getRecord()"
        ]
    },
    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:byte[] getRecord()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:org.apache.commons.compress.archivers.tar.TarArchiveEntry getNextTarEntry()",
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:void readGNUSparse()"
        ]
    },
    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:int read(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:int readFully(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void drainCurrentEntryData()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void readFully(byte[])",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void readStoredEntry()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void realSkip(long)",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:java.lang.String getBSDLongName(java.lang.String)",
            "org.apache.commons.compress.archivers.dump.TapeInputStream:boolean readFully(byte[],int,int)",
            "org.apache.commons.compress.archivers.tar.TarBuffer:boolean readBlock()",
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:long skip(long)",
            "org.apache.commons.compress.archivers.ArchiveInputStream:int read()",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.xz.XZCompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.CountingInputStream:int read(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void findEocdRecord()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void skipRemainderOfArchive()"
        ]
    },
    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:void paxHeaders()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:org.apache.commons.compress.archivers.tar.TarArchiveEntry getNextTarEntry()"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void <init>(java.io.InputStream,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void <init>(java.io.InputStream)",
            "org.apache.commons.compress.compressors.CompressorStreamFactory:org.apache.commons.compress.compressors.CompressorInputStream createCompressorInputStream(java.io.InputStream)"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:boolean complete()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void initBlock()"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void initBlock()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void <init>(java.io.InputStream,boolean)",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void setupRandPartA()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void setupNoRandPartA()"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:char bsGetUByte()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void initBlock()"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:int bsGetInt()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void initBlock()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:boolean complete()"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void recvDecodingTables()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void getAndMoveToFrontDecode()"
        ]
    },
    "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream:void <init>(java.io.InputStream,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream:void <init>(java.io.InputStream)",
            "org.apache.commons.compress.compressors.CompressorStreamFactory:org.apache.commons.compress.compressors.CompressorInputStream createCompressorInputStream(java.io.InputStream)"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void fill()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:int readFromInflater(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.archivers.ArchiveStreamFactory:org.apache.commons.compress.archivers.ArchiveInputStream createArchiveInputStream(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.Lister:void main(java.lang.String[])"
        ]
    },
    "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:int readStored(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void fill()",
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:java.util.Map parsePaxHeaders(java.io.InputStream)",
            "org.apache.commons.compress.archivers.ArchiveStreamFactory:org.apache.commons.compress.archivers.ArchiveInputStream createArchiveInputStream(java.io.InputStream)",
            "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read(byte[])",
            "org.apache.commons.compress.compressors.CompressorStreamFactory:org.apache.commons.compress.compressors.CompressorInputStream createCompressorInputStream(java.io.InputStream)",
            "org.apache.commons.compress.utils.IOUtils:long copy(java.io.InputStream,java.io.OutputStream,int)"
        ]
    },
    "org.apache.commons.compress.compressors.CompressorStreamFactory:org.apache.commons.compress.compressors.CompressorInputStream createCompressorInputStream(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.compress.utils.IOUtils:long copy(java.io.InputStream,java.io.OutputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.utils.IOUtils:long copy(java.io.InputStream,java.io.OutputStream)"
        ]
    },
    "org.apache.commons.compress.archivers.Lister:void main(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.compress.changes.ChangeSetPerformer$ArchiveInputStreamIterator:boolean hasNext()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.changes.ChangeSetPerformer:org.apache.commons.compress.changes.ChangeSetResults perform(org.apache.commons.compress.changes.ChangeSetPerformer$ArchiveEntryIterator,org.apache.commons.compress.archivers.ArchiveOutputStream)"
        ]
    },
    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:void skipRemainderOfLastBlock()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:org.apache.commons.compress.archivers.cpio.CpioArchiveEntry getNextCPIOEntry()"
        ]
    },
    "org.apache.commons.compress.archivers.jar.JarArchiveInputStream:org.apache.commons.compress.archivers.ArchiveEntry getNextEntry()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.Lister:void main(java.lang.String[])",
            "org.apache.commons.compress.changes.ChangeSetPerformer$ArchiveInputStreamIterator:boolean hasNext()"
        ]
    },
    "org.apache.commons.compress.archivers.ArchiveStreamFactory:org.apache.commons.compress.archivers.ArchiveInputStream createArchiveInputStream(java.lang.String,java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.Lister:void main(java.lang.String[])"
        ]
    },
    "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:void readDirectoryEntry(org.apache.commons.compress.archivers.dump.DumpArchiveEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:org.apache.commons.compress.archivers.dump.DumpArchiveEntry getNextEntry()"
        ]
    },
    "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:int read(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:int readFully(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void drainCurrentEntryData()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void readFully(byte[])",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void readStoredEntry()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void realSkip(long)",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:java.lang.String getBSDLongName(java.lang.String)",
            "org.apache.commons.compress.archivers.dump.TapeInputStream:boolean readFully(byte[],int,int)",
            "org.apache.commons.compress.archivers.tar.TarBuffer:boolean readBlock()",
            "org.apache.commons.compress.archivers.ArchiveInputStream:int read()",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.xz.XZCompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.CountingInputStream:int read(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.archivers.dump.TapeInputStream:byte[] readRecord()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:void <init>(java.io.InputStream)",
            "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:void readCLRI()",
            "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:void readBITS()",
            "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:org.apache.commons.compress.archivers.dump.DumpArchiveEntry getNextEntry()",
            "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:void readDirectoryEntry(org.apache.commons.compress.archivers.dump.DumpArchiveEntry)",
            "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:int read(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:void readCLRI()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:void <init>(java.io.InputStream)"
        ]
    },
    "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:void readBITS()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:void <init>(java.io.InputStream)"
        ]
    },
    "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:org.apache.commons.compress.archivers.dump.DumpArchiveEntry getNextEntry()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:org.apache.commons.compress.archivers.dump.DumpArchiveEntry getNextDumpEntry()",
            "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:org.apache.commons.compress.archivers.ArchiveEntry getNextEntry()"
        ]
    },
    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:org.apache.commons.compress.archivers.tar.TarArchiveEntry getNextTarEntry()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:org.apache.commons.compress.archivers.ArchiveEntry getNextEntry()",
            "org.apache.commons.compress.archivers.ArchiveStreamFactory:org.apache.commons.compress.archivers.ArchiveInputStream createArchiveInputStream(java.io.InputStream)"
        ]
    },
    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:void readGNUSparse()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:org.apache.commons.compress.archivers.tar.TarArchiveEntry getNextTarEntry()"
        ]
    },
    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:long skip(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:org.apache.commons.compress.archivers.tar.TarArchiveEntry getNextTarEntry()",
            "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:long skip(long)",
            "org.apache.commons.compress.compressors.xz.XZCompressorInputStream:long skip(long)"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void <init>(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.CompressorStreamFactory:org.apache.commons.compress.compressors.CompressorInputStream createCompressorInputStream(java.lang.String,java.io.InputStream)"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void setupRandPartA()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void setupBlock()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void setupRandPartB()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void setupRandPartC()"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void setupNoRandPartA()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void setupBlock()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void setupNoRandPartB()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void setupNoRandPartC()"
        ]
    },
    "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream:void <init>(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.CompressorStreamFactory:org.apache.commons.compress.compressors.CompressorInputStream createCompressorInputStream(java.lang.String,java.io.InputStream)"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:int readFromInflater(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:int readDeflated(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.utils.IOUtils:long copy(java.io.InputStream,java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.changes.ChangeSetPerformer:void copyStream(java.io.InputStream,org.apache.commons.compress.archivers.ArchiveOutputStream,org.apache.commons.compress.archivers.ArchiveEntry)",
            "org.apache.commons.compress.utils.IOUtils:byte[] toByteArray(java.io.InputStream)"
        ]
    },
    "org.apache.commons.compress.changes.ChangeSetPerformer:org.apache.commons.compress.changes.ChangeSetResults perform(org.apache.commons.compress.changes.ChangeSetPerformer$ArchiveEntryIterator,org.apache.commons.compress.archivers.ArchiveOutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.changes.ChangeSetPerformer:org.apache.commons.compress.changes.ChangeSetResults perform(org.apache.commons.compress.archivers.ArchiveInputStream,org.apache.commons.compress.archivers.ArchiveOutputStream)",
            "org.apache.commons.compress.changes.ChangeSetPerformer:org.apache.commons.compress.changes.ChangeSetResults perform(org.apache.commons.compress.archivers.zip.ZipFile,org.apache.commons.compress.archivers.ArchiveOutputStream)"
        ]
    },
    "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:org.apache.commons.compress.archivers.dump.DumpArchiveEntry getNextDumpEntry()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:org.apache.commons.compress.archivers.ArchiveEntry getNextEntry()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.Lister:void main(java.lang.String[])",
            "org.apache.commons.compress.changes.ChangeSetPerformer$ArchiveInputStreamIterator:boolean hasNext()"
        ]
    },
    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:org.apache.commons.compress.archivers.ArchiveEntry getNextEntry()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:org.apache.commons.compress.archivers.tar.TarArchiveEntry getNextTarEntry()",
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:void paxHeaders()",
            "org.apache.commons.compress.archivers.Lister:void main(java.lang.String[])",
            "org.apache.commons.compress.changes.ChangeSetPerformer$ArchiveInputStreamIterator:boolean hasNext()"
        ]
    },
    "org.apache.commons.compress.compressors.CompressorStreamFactory:org.apache.commons.compress.compressors.CompressorInputStream createCompressorInputStream(java.lang.String,java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void setupBlock()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void <init>(java.io.InputStream,boolean)",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void setupRandPartA()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void setupNoRandPartA()"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void setupRandPartB()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:int read0()"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void setupRandPartC()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:int read0()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void setupRandPartB()"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void setupNoRandPartB()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:int read0()"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void setupNoRandPartC()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:int read0()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void setupNoRandPartB()"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:int readDeflated(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:int read(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.changes.ChangeSetPerformer:void copyStream(java.io.InputStream,org.apache.commons.compress.archivers.ArchiveOutputStream,org.apache.commons.compress.archivers.ArchiveEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.changes.ChangeSetPerformer:org.apache.commons.compress.changes.ChangeSetResults perform(org.apache.commons.compress.changes.ChangeSetPerformer$ArchiveEntryIterator,org.apache.commons.compress.archivers.ArchiveOutputStream)"
        ]
    },
    "org.apache.commons.compress.utils.IOUtils:byte[] toByteArray(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipFile:java.lang.String getUnixSymlink(org.apache.commons.compress.archivers.zip.ZipArchiveEntry)"
        ]
    },
    "org.apache.commons.compress.changes.ChangeSetPerformer:org.apache.commons.compress.changes.ChangeSetResults perform(org.apache.commons.compress.archivers.ArchiveInputStream,org.apache.commons.compress.archivers.ArchiveOutputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.compress.changes.ChangeSetPerformer:org.apache.commons.compress.changes.ChangeSetResults perform(org.apache.commons.compress.archivers.zip.ZipFile,org.apache.commons.compress.archivers.ArchiveOutputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:int read0()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:int read()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:int read(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipFile:java.lang.String getUnixSymlink(org.apache.commons.compress.archivers.zip.ZipArchiveEntry)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:int read()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:int readOneByte()",
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:java.util.Map parsePaxHeaders(java.io.InputStream)",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:boolean init(boolean)",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:int bsR(int)",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:boolean bsGetBit()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void getAndMoveToFrontDecode()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:int getAndMoveToFrontDecode0(int)",
            "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream:boolean init(boolean)",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read()",
            "org.apache.commons.compress.compressors.xz.XZCompressorInputStream:int read()",
            "org.apache.commons.compress.utils.CountingInputStream:int read()"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:int read(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:int readFully(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void drainCurrentEntryData()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void readFully(byte[])",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void readStoredEntry()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void realSkip(long)",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:java.lang.String getBSDLongName(java.lang.String)",
            "org.apache.commons.compress.archivers.dump.TapeInputStream:boolean readFully(byte[],int,int)",
            "org.apache.commons.compress.archivers.tar.TarBuffer:boolean readBlock()",
            "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.compressors.xz.XZCompressorInputStream:int read(byte[],int,int)",
            "org.apache.commons.compress.utils.CountingInputStream:int read(byte[],int,int)"
        ]
    }
}