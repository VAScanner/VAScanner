{
    "org.eclipse.jetty.server.Request:void extractParameters()": {
        "isVulRoot": true,
        "vulCaller": [
            "org.eclipse.jetty.server.Request:java.lang.String getParameter(java.lang.String)",
            "org.eclipse.jetty.server.Request:java.util.Map getParameterMap()",
            "org.eclipse.jetty.server.Request:java.util.Enumeration getParameterNames()",
            "org.eclipse.jetty.server.Request:java.lang.String[] getParameterValues(java.lang.String)",
            "org.eclipse.jetty.server.Request:void mergeQueryString(java.lang.String)",
            "org.eclipse.jetty.server.Dispatcher:void include(javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "org.eclipse.jetty.server.Dispatcher:void forward(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.DispatcherType)",
            "org.eclipse.jetty.security.authentication.FormAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)"
        ]
    },
    "org.eclipse.jetty.server.Request:java.lang.String getParameter(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.StatisticsServlet:void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.security.authentication.FormAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)"
        ]
    },
    "org.eclipse.jetty.server.Request:java.util.Map getParameterMap()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.Request:java.util.Enumeration getParameterNames()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.Request:java.lang.String[] getParameterValues(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.Request:void mergeQueryString(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.Server:void handleAsync(org.eclipse.jetty.server.HttpConnection)",
            "org.eclipse.jetty.server.Dispatcher:void forward(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.DispatcherType)"
        ]
    },
    "org.eclipse.jetty.server.Dispatcher:void include(javax.servlet.ServletRequest,javax.servlet.ServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.DefaultServlet:void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.Dispatcher:void forward(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.DispatcherType)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.Dispatcher:void forward(javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "org.eclipse.jetty.server.Dispatcher:void error(javax.servlet.ServletRequest,javax.servlet.ServletResponse)"
        ]
    },
    "org.eclipse.jetty.security.authentication.FormAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.security.authentication.DeferredAuthentication:org.eclipse.jetty.server.Authentication authenticate(javax.servlet.ServletRequest)",
            "org.eclipse.jetty.security.authentication.DeferredAuthentication:org.eclipse.jetty.server.Authentication authenticate(javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "org.eclipse.jetty.security.SecurityHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.servlet.StatisticsServlet:void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.Server:void handleAsync(org.eclipse.jetty.server.HttpConnection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.HttpConnection:void handleRequest()"
        ]
    },
    "org.eclipse.jetty.servlet.DefaultServlet:void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.Dispatcher:void forward(javax.servlet.ServletRequest,javax.servlet.ServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.DefaultServlet:void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.security.authentication.FormAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)"
        ]
    },
    "org.eclipse.jetty.server.Dispatcher:void error(javax.servlet.ServletRequest,javax.servlet.ServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ErrorPageErrorHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.security.authentication.DeferredAuthentication:org.eclipse.jetty.server.Authentication authenticate(javax.servlet.ServletRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.Request:java.lang.String getAuthType()",
            "org.eclipse.jetty.server.Request:org.eclipse.jetty.server.UserIdentity getUserIdentity()",
            "org.eclipse.jetty.server.Request:java.security.Principal getUserPrincipal()",
            "org.eclipse.jetty.server.Request:boolean isUserInRole(java.lang.String)"
        ]
    },
    "org.eclipse.jetty.security.authentication.DeferredAuthentication:org.eclipse.jetty.server.Authentication authenticate(javax.servlet.ServletRequest,javax.servlet.ServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.Request:boolean authenticate(javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.security.SecurityHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ScopedHandler:void nextHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HotSwapHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerList:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.DebugHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerWrapper:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.IPAccessHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.session.SessionHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.security.SecurityHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.HttpConnection:void handleRequest()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.HttpConnection$RequestHandler:void headerComplete()",
            "org.eclipse.jetty.server.HttpConnection$RequestHandler:void content(org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.server.HttpConnection$RequestHandler:void messageComplete(long)",
            "org.eclipse.jetty.server.HttpConnection:org.eclipse.jetty.io.Connection handle()"
        ]
    },
    "org.eclipse.jetty.servlet.ErrorPageErrorHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ScopedHandler:void nextHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HotSwapHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerList:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.DebugHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerWrapper:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.IPAccessHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.session.SessionHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.Response:void sendError(int,java.lang.String)",
            "org.eclipse.jetty.security.SecurityHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.Request:java.lang.String getAuthType()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.security.ConstraintSecurityHandler:boolean checkWebResourcePermissions(java.lang.String,org.eclipse.jetty.server.Request,org.eclipse.jetty.server.Response,java.lang.Object,org.eclipse.jetty.server.UserIdentity)"
        ]
    },
    "org.eclipse.jetty.server.Request:org.eclipse.jetty.server.UserIdentity getUserIdentity()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.Request:java.security.Principal getUserPrincipal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.Request:java.lang.String getRemoteUser()"
        ]
    },
    "org.eclipse.jetty.server.Request:boolean isUserInRole(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.Request:boolean authenticate(javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.handler.ScopedHandler:void nextHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ContextHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.session.SessionHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.handler.HotSwapHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ScopedHandler:void nextHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HotSwapHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerList:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.DebugHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerWrapper:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.IPAccessHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.session.SessionHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.security.SecurityHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.handler.HandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ScopedHandler:void nextHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HotSwapHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerList:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.DebugHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerWrapper:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.IPAccessHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.session.SessionHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.security.SecurityHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.handler.HandlerList:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ScopedHandler:void nextHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HotSwapHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerList:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.DebugHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerWrapper:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.IPAccessHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.session.SessionHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.security.SecurityHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.handler.DebugHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ScopedHandler:void nextHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HotSwapHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerList:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.DebugHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerWrapper:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.IPAccessHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.session.SessionHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.security.SecurityHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.handler.ContextHandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ScopedHandler:void nextHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HotSwapHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerList:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.DebugHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerWrapper:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.IPAccessHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.session.SessionHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.security.SecurityHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.handler.HandlerWrapper:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ScopedHandler:void nextHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HotSwapHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.StatisticsHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.RequestLogHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ConnectHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerList:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.DebugHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerWrapper:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.IPAccessHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.session.SessionHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.Server:void handle(org.eclipse.jetty.server.HttpConnection)",
            "org.eclipse.jetty.server.Server:void handleAsync(org.eclipse.jetty.server.HttpConnection)",
            "org.eclipse.jetty.websocket.WebSocketHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.security.SecurityHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.handler.IPAccessHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ScopedHandler:void nextHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HotSwapHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerList:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.DebugHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerWrapper:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.IPAccessHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.session.SessionHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.security.SecurityHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.handler.ContextHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletHandler:void doScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ScopedHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ScopedHandler:void nextScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ScopedHandler:void nextHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandler:void doScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.session.SessionHandler:void doScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.session.SessionHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.session.SessionHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletHandler:void doScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ScopedHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ScopedHandler:void nextScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ScopedHandler:void nextHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandler:void doScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.session.SessionHandler:void doScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.session.SessionHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.HttpConnection$RequestHandler:void headerComplete()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.http.HttpParser:long parseNext()"
        ]
    },
    "org.eclipse.jetty.server.HttpConnection$RequestHandler:void content(org.eclipse.jetty.io.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.http.HttpParser:long parseNext()"
        ]
    },
    "org.eclipse.jetty.server.HttpConnection$RequestHandler:void messageComplete(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.http.HttpParser:long parseNext()"
        ]
    },
    "org.eclipse.jetty.server.HttpConnection:org.eclipse.jetty.io.Connection handle()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.nio.BlockingChannelConnector$BlockingChannelEndPoint:void run()",
            "org.eclipse.jetty.server.bio.SocketConnector$ConnectorEndPoint:void run()",
            "org.eclipse.jetty.server.LocalConnector$Request:void run()",
            "org.eclipse.jetty.io.nio.SelectChannelEndPoint:void handle()"
        ]
    },
    "org.eclipse.jetty.server.Response:void sendError(int,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.servlet.DefaultServlet:void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.servlet.DefaultServlet:boolean passConditionalHeaders(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.eclipse.jetty.util.resource.Resource,org.eclipse.jetty.http.HttpContent)",
            "org.eclipse.jetty.servlet.DefaultServlet:void sendDirectory(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.eclipse.jetty.util.resource.Resource,java.lang.String)",
            "org.eclipse.jetty.servlet.NoJspServlet:void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.Response:void sendError(int)",
            "org.eclipse.jetty.server.HttpConnection:void handleRequest()",
            "org.eclipse.jetty.websocket.WebSocketConnectionD00:void handshake(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String,java.lang.String)",
            "org.eclipse.jetty.security.ConstraintSecurityHandler:boolean checkUserDataPermissions(java.lang.String,org.eclipse.jetty.server.Request,org.eclipse.jetty.server.Response,java.lang.Object)",
            "org.eclipse.jetty.security.SecurityHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.security.ConstraintSecurityHandler:boolean checkWebResourcePermissions(java.lang.String,org.eclipse.jetty.server.Request,org.eclipse.jetty.server.Response,java.lang.Object,org.eclipse.jetty.server.UserIdentity)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.security.SecurityHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.Request:java.lang.String getRemoteUser()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.handler.StatisticsHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ScopedHandler:void nextHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HotSwapHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerList:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.DebugHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerWrapper:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.IPAccessHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.session.SessionHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.security.SecurityHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.handler.RequestLogHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ScopedHandler:void nextHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HotSwapHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerList:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.DebugHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerWrapper:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.IPAccessHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.session.SessionHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.security.SecurityHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.handler.ConnectHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ScopedHandler:void nextHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HotSwapHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerList:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.DebugHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerWrapper:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.IPAccessHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.session.SessionHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.security.SecurityHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.Server:void handle(org.eclipse.jetty.server.HttpConnection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.HttpConnection:void handleRequest()"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.servlet.ServletHandler:void doScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletHandler:void doScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ScopedHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ScopedHandler:void nextScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandler:void doScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.session.SessionHandler:void doScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.handler.ScopedHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ScopedHandler:void nextHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HotSwapHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerList:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.DebugHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerWrapper:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.IPAccessHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.session.SessionHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.Dispatcher:void include(javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "org.eclipse.jetty.server.Dispatcher:void forward(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.DispatcherType)",
            "org.eclipse.jetty.security.SecurityHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.handler.ScopedHandler:void nextScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletHandler:void doScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandler:void doScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.handler.ContextHandler:void doScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletHandler:void doScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ScopedHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ScopedHandler:void nextScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandler:void doScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.session.SessionHandler:void doScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.session.SessionHandler:void doScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletHandler:void doScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ScopedHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ScopedHandler:void nextScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandler:void doScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.session.SessionHandler:void doScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.http.HttpParser:long parseNext()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.http.HttpParser:void parse()",
            "org.eclipse.jetty.http.HttpParser:long parseAvailable()",
            "org.eclipse.jetty.http.HttpParser:org.eclipse.jetty.io.Buffer blockForContent(long)",
            "org.eclipse.jetty.http.HttpParser:int available()"
        ]
    },
    "org.eclipse.jetty.server.nio.BlockingChannelConnector$BlockingChannelEndPoint:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ContextHandler:void handle(java.lang.Runnable)",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:void shutdownOutput()",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int fill(org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int flush(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.util.thread.OldQueuedThreadPool$PoolThread:void run()",
            "org.eclipse.jetty.util.thread.QueuedThreadPool$2:void run()",
            "org.eclipse.jetty.util.thread.ExecutorThreadPool:boolean dispatch(java.lang.Runnable)"
        ]
    },
    "org.eclipse.jetty.server.bio.SocketConnector$ConnectorEndPoint:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ContextHandler:void handle(java.lang.Runnable)",
            "org.eclipse.jetty.server.ssl.SslSocketConnector$SslConnectorEndPoint:void run()",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:void shutdownOutput()",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int fill(org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int flush(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.util.thread.OldQueuedThreadPool$PoolThread:void run()",
            "org.eclipse.jetty.util.thread.QueuedThreadPool$2:void run()",
            "org.eclipse.jetty.util.thread.ExecutorThreadPool:boolean dispatch(java.lang.Runnable)"
        ]
    },
    "org.eclipse.jetty.server.LocalConnector$Request:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ContextHandler:void handle(java.lang.Runnable)",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:void shutdownOutput()",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int fill(org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int flush(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.util.thread.OldQueuedThreadPool$PoolThread:void run()",
            "org.eclipse.jetty.util.thread.QueuedThreadPool$2:void run()",
            "org.eclipse.jetty.util.thread.ExecutorThreadPool:boolean dispatch(java.lang.Runnable)"
        ]
    },
    "org.eclipse.jetty.io.nio.SelectChannelEndPoint:void handle()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.io.nio.SelectChannelEndPoint:void access$000(org.eclipse.jetty.io.nio.SelectChannelEndPoint)"
        ]
    },
    "org.eclipse.jetty.servlet.ServletHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletHandler:void doScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ScopedHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ScopedHandler:void nextScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ScopedHandler:void nextHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandler:void doScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.session.SessionHandler:void doScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.session.SessionHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.servlet.DefaultServlet:boolean passConditionalHeaders(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.eclipse.jetty.util.resource.Resource,org.eclipse.jetty.http.HttpContent)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.servlet.DefaultServlet:void sendDirectory(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.eclipse.jetty.util.resource.Resource,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.servlet.NoJspServlet:void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.Response:void sendError(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletHandler:void notFound(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.servlet.Invoker:void service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.servlet.DefaultServlet:void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.servlet.DefaultServlet:void doTrace(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.servlet.DefaultServlet:boolean passConditionalHeaders(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.eclipse.jetty.util.resource.Resource,org.eclipse.jetty.http.HttpContent)",
            "org.eclipse.jetty.servlet.DefaultServlet:void sendDirectory(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.eclipse.jetty.util.resource.Resource,java.lang.String)",
            "org.eclipse.jetty.servlet.StatisticsServlet:void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ResourceHandler:void doDirectory(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.eclipse.jetty.util.resource.Resource)",
            "org.eclipse.jetty.server.handler.DefaultHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.IPAccessHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandler:boolean checkContext(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.HttpConnection:void handleRequest()",
            "org.eclipse.jetty.server.Request:boolean authenticate(javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.websocket.WebSocketHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.websocket.WebSocketServlet:void service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.security.authentication.FormAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)",
            "org.eclipse.jetty.security.authentication.ClientCertAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)",
            "org.eclipse.jetty.security.authentication.BasicAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)",
            "org.eclipse.jetty.security.authentication.DigestAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)",
            "org.eclipse.jetty.security.SecurityHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketConnectionD00:void handshake(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.WebSocketFactory:void upgrade(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.eclipse.jetty.websocket.WebSocket,java.lang.String,java.lang.String)"
        ]
    },
    "org.eclipse.jetty.security.ConstraintSecurityHandler:boolean checkUserDataPermissions(java.lang.String,org.eclipse.jetty.server.Request,org.eclipse.jetty.server.Response,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.security.SecurityHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.http.HttpParser:void parse()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.http.HttpParser:long parseAvailable()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.HttpConnection:org.eclipse.jetty.io.Connection handle()"
        ]
    },
    "org.eclipse.jetty.http.HttpParser:org.eclipse.jetty.io.Buffer blockForContent(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.HttpInput:int read()",
            "org.eclipse.jetty.server.HttpInput:int read(byte[],int,int)"
        ]
    },
    "org.eclipse.jetty.http.HttpParser:int available()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.handler.ContextHandler:void handle(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.JDBCSessionManager:org.eclipse.jetty.server.session.JDBCSessionManager$SessionData loadSession(java.lang.String,java.lang.String,java.lang.String)",
            "org.eclipse.jetty.server.AsyncContinuation$1:void run()"
        ]
    },
    "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:void shutdownOutput()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:void close()",
            "org.eclipse.jetty.http.HttpGenerator:long flushBuffer()"
        ]
    },
    "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int fill(org.eclipse.jetty.io.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ConnectHandler:int read(org.eclipse.jetty.io.EndPoint,org.eclipse.jetty.io.Buffer,java.util.concurrent.ConcurrentMap)",
            "org.eclipse.jetty.http.HttpParser:long parseNext()",
            "org.eclipse.jetty.http.HttpParser:long fill()",
            "org.eclipse.jetty.websocket.WebSocketParserD00:int parseNext()",
            "org.eclipse.jetty.websocket.WebSocketParserD01:int parseNext()",
            "org.eclipse.jetty.websocket.WebSocketConnectionD00:org.eclipse.jetty.io.Connection handle()"
        ]
    },
    "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int flush(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int flush(org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.http.HttpGenerator:long flushBuffer()"
        ]
    },
    "org.eclipse.jetty.util.thread.OldQueuedThreadPool$PoolThread:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ContextHandler:void handle(java.lang.Runnable)",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:void shutdownOutput()",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int fill(org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int flush(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.util.thread.OldQueuedThreadPool$PoolThread:void run()",
            "org.eclipse.jetty.util.thread.QueuedThreadPool$2:void run()",
            "org.eclipse.jetty.util.thread.QueuedThreadPool:boolean startThread(int)",
            "org.eclipse.jetty.util.thread.ExecutorThreadPool:boolean dispatch(java.lang.Runnable)",
            "org.eclipse.jetty.util.thread.OldQueuedThreadPool:void newThread()"
        ]
    },
    "org.eclipse.jetty.util.thread.QueuedThreadPool$2:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ContextHandler:void handle(java.lang.Runnable)",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:void shutdownOutput()",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int fill(org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int flush(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.util.thread.OldQueuedThreadPool$PoolThread:void run()",
            "org.eclipse.jetty.util.thread.QueuedThreadPool$2:void run()",
            "org.eclipse.jetty.util.thread.ExecutorThreadPool:boolean dispatch(java.lang.Runnable)"
        ]
    },
    "org.eclipse.jetty.util.thread.ExecutorThreadPool:boolean dispatch(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ConnectHandler:void doStart()",
            "org.eclipse.jetty.server.handler.HandlerCollection:void doStart()",
            "org.eclipse.jetty.server.handler.ConnectHandler$Manager:boolean dispatch(java.lang.Runnable)",
            "org.eclipse.jetty.server.nio.BlockingChannelConnector$BlockingChannelEndPoint:void dispatch()",
            "org.eclipse.jetty.server.nio.BlockingChannelConnector:void doStart()",
            "org.eclipse.jetty.server.nio.SelectChannelConnector$1:boolean dispatch(java.lang.Runnable)",
            "org.eclipse.jetty.server.bio.SocketConnector$ConnectorEndPoint:void dispatch()",
            "org.eclipse.jetty.server.AbstractConnector:void doStart()",
            "org.eclipse.jetty.server.LocalConnector:void accept(int)",
            "org.eclipse.jetty.server.AsyncContinuation:void start(java.lang.Runnable)"
        ]
    },
    "org.eclipse.jetty.server.ssl.SslSocketConnector$SslConnectorEndPoint:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ContextHandler:void handle(java.lang.Runnable)",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:void shutdownOutput()",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int fill(org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int flush(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.util.thread.OldQueuedThreadPool$PoolThread:void run()",
            "org.eclipse.jetty.util.thread.QueuedThreadPool$2:void run()",
            "org.eclipse.jetty.util.thread.ExecutorThreadPool:boolean dispatch(java.lang.Runnable)"
        ]
    },
    "org.eclipse.jetty.io.nio.SelectChannelEndPoint:void access$000(org.eclipse.jetty.io.nio.SelectChannelEndPoint)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.io.nio.SelectChannelEndPoint$1:void run()"
        ]
    },
    "org.eclipse.jetty.servlet.ServletHandler:void notFound(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.servlet.ServletHandler$CachedChain:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "org.eclipse.jetty.servlet.ServletHandler$Chain:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)"
        ]
    },
    "org.eclipse.jetty.servlet.Invoker:void service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.servlet.DefaultServlet:void doTrace(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.handler.ResourceHandler:void doDirectory(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.eclipse.jetty.util.resource.Resource)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ResourceHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.handler.DefaultHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ScopedHandler:void nextHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HotSwapHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerList:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.DebugHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerWrapper:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.IPAccessHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.session.SessionHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.security.SecurityHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.handler.ContextHandler:boolean checkContext(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ContextHandler:void doScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketServlet:void service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.security.authentication.ClientCertAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.security.authentication.DeferredAuthentication:org.eclipse.jetty.server.Authentication authenticate(javax.servlet.ServletRequest)",
            "org.eclipse.jetty.security.authentication.DeferredAuthentication:org.eclipse.jetty.server.Authentication authenticate(javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "org.eclipse.jetty.security.SecurityHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.security.authentication.BasicAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.security.authentication.DeferredAuthentication:org.eclipse.jetty.server.Authentication authenticate(javax.servlet.ServletRequest)",
            "org.eclipse.jetty.security.authentication.DeferredAuthentication:org.eclipse.jetty.server.Authentication authenticate(javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "org.eclipse.jetty.security.SecurityHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.security.authentication.DigestAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.security.authentication.DeferredAuthentication:org.eclipse.jetty.server.Authentication authenticate(javax.servlet.ServletRequest)",
            "org.eclipse.jetty.security.authentication.DeferredAuthentication:org.eclipse.jetty.server.Authentication authenticate(javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "org.eclipse.jetty.security.SecurityHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketFactory:void upgrade(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.eclipse.jetty.websocket.WebSocket,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.WebSocketHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.websocket.WebSocketServlet:void service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.HttpInput:int read()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.HttpInput:int read(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.session.JDBCSessionManager:org.eclipse.jetty.server.session.JDBCSessionManager$SessionData loadSession(java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.JDBCSessionManager:org.eclipse.jetty.server.session.JDBCSessionManager$Session getSession(java.lang.String)"
        ]
    },
    "org.eclipse.jetty.server.AsyncContinuation$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ContextHandler:void handle(java.lang.Runnable)",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:void shutdownOutput()",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int fill(org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int flush(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.util.thread.OldQueuedThreadPool$PoolThread:void run()",
            "org.eclipse.jetty.util.thread.QueuedThreadPool$2:void run()",
            "org.eclipse.jetty.util.thread.ExecutorThreadPool:boolean dispatch(java.lang.Runnable)"
        ]
    },
    "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ConnectHandler$ProxyToServerConnection:void closeServer()",
            "org.eclipse.jetty.server.handler.ConnectHandler$ClientToProxyConnection:void closeClient()",
            "org.eclipse.jetty.server.HttpConnection:org.eclipse.jetty.io.Connection handle()",
            "org.eclipse.jetty.server.HttpConnection:void handleRequest()",
            "org.eclipse.jetty.io.nio.SelectChannelEndPoint:void idleExpired()",
            "org.eclipse.jetty.io.nio.SelectChannelEndPoint:void handle()",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:void checkRenegotiate()",
            "org.eclipse.jetty.io.nio.SelectorManager$SelectSet$2:void run()",
            "org.eclipse.jetty.io.nio.SelectorManager$SelectSet:void stop()",
            "org.eclipse.jetty.http.AbstractGenerator:void blockForOutput(long)",
            "org.eclipse.jetty.http.HttpParser:org.eclipse.jetty.io.Buffer blockForContent(long)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD00:org.eclipse.jetty.io.Connection handle()",
            "org.eclipse.jetty.websocket.WebSocketConnectionD00:void disconnect()"
        ]
    },
    "org.eclipse.jetty.http.HttpGenerator:long flushBuffer()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.HttpConnection:org.eclipse.jetty.io.Connection handle()",
            "org.eclipse.jetty.server.HttpConnection:void flushResponse()",
            "org.eclipse.jetty.http.HttpGenerator:void addContent(org.eclipse.jetty.io.Buffer,boolean)",
            "org.eclipse.jetty.http.HttpGenerator:boolean addContent(byte)",
            "org.eclipse.jetty.http.HttpGenerator:int prepareUncheckedAddContent()",
            "org.eclipse.jetty.http.HttpGenerator:void complete()",
            "org.eclipse.jetty.http.AbstractGenerator:void flush(long)",
            "org.eclipse.jetty.http.AbstractGenerator:void blockForOutput(long)"
        ]
    },
    "org.eclipse.jetty.server.handler.ConnectHandler:int read(org.eclipse.jetty.io.EndPoint,org.eclipse.jetty.io.Buffer,java.util.concurrent.ConcurrentMap)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ConnectHandler$ProxyToServerConnection:org.eclipse.jetty.io.Connection handle()",
            "org.eclipse.jetty.server.handler.ConnectHandler$ClientToProxyConnection:org.eclipse.jetty.io.Connection handle()"
        ]
    },
    "org.eclipse.jetty.http.HttpParser:long fill()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.websocket.WebSocketParserD00:int parseNext()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.WebSocketConnectionD00:org.eclipse.jetty.io.Connection handle()"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketParserD01:int parseNext()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.WebSocketConnectionD00:org.eclipse.jetty.io.Connection handle()"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketConnectionD00:org.eclipse.jetty.io.Connection handle()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.nio.BlockingChannelConnector$BlockingChannelEndPoint:void run()",
            "org.eclipse.jetty.server.bio.SocketConnector$ConnectorEndPoint:void run()",
            "org.eclipse.jetty.server.LocalConnector$Request:void run()",
            "org.eclipse.jetty.io.nio.SelectChannelEndPoint:void handle()"
        ]
    },
    "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int flush(org.eclipse.jetty.io.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ConnectHandler:int write(org.eclipse.jetty.io.EndPoint,org.eclipse.jetty.io.Buffer,java.util.concurrent.ConcurrentMap)",
            "org.eclipse.jetty.io.nio.ChannelEndPoint:int flush(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.http.HttpGenerator:void send1xx(int)",
            "org.eclipse.jetty.http.HttpGenerator:long flushBuffer()",
            "org.eclipse.jetty.websocket.WebSocketGeneratorD00:int flushBuffer()",
            "org.eclipse.jetty.websocket.WebSocketGeneratorD01:int flushBuffer()",
            "org.eclipse.jetty.websocket.WebSocketConnectionD00:org.eclipse.jetty.io.Connection handle()"
        ]
    },
    "org.eclipse.jetty.util.thread.QueuedThreadPool:boolean startThread(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.thread.QueuedThreadPool:void doStart()",
            "org.eclipse.jetty.util.thread.QueuedThreadPool:void setMinThreads(int)",
            "org.eclipse.jetty.util.thread.QueuedThreadPool:boolean dispatch(java.lang.Runnable)"
        ]
    },
    "org.eclipse.jetty.util.thread.OldQueuedThreadPool:void newThread()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.thread.OldQueuedThreadPool:boolean dispatch(java.lang.Runnable)",
            "org.eclipse.jetty.util.thread.OldQueuedThreadPool:void setMinThreads(int)",
            "org.eclipse.jetty.util.thread.OldQueuedThreadPool:void doStart()"
        ]
    },
    "org.eclipse.jetty.server.handler.ConnectHandler:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()"
        ]
    },
    "org.eclipse.jetty.server.handler.HandlerCollection:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ContextHandlerCollection:void doStart()",
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()"
        ]
    },
    "org.eclipse.jetty.server.handler.ConnectHandler$Manager:boolean dispatch(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.nio.SelectChannelConnector:void doStart()",
            "org.eclipse.jetty.io.nio.SelectChannelEndPoint:void dispatch()",
            "org.eclipse.jetty.io.nio.SelectorManager$SelectSet:void doSelect()",
            "org.eclipse.jetty.io.nio.SelectorManager$SelectSet:void checkJvmBugs(long,long,long,int)"
        ]
    },
    "org.eclipse.jetty.server.nio.BlockingChannelConnector$BlockingChannelEndPoint:void dispatch()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.nio.BlockingChannelConnector:void accept(int)"
        ]
    },
    "org.eclipse.jetty.server.nio.BlockingChannelConnector:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()"
        ]
    },
    "org.eclipse.jetty.server.nio.SelectChannelConnector$1:boolean dispatch(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.nio.SelectChannelConnector:void doStart()",
            "org.eclipse.jetty.io.nio.SelectChannelEndPoint:void dispatch()",
            "org.eclipse.jetty.io.nio.SelectorManager$SelectSet:void doSelect()",
            "org.eclipse.jetty.io.nio.SelectorManager$SelectSet:void checkJvmBugs(long,long,long,int)"
        ]
    },
    "org.eclipse.jetty.server.bio.SocketConnector$ConnectorEndPoint:void dispatch()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.bio.SocketConnector:void accept(int)",
            "org.eclipse.jetty.server.ssl.SslSocketConnector$SslConnectorEndPoint:void dispatch()"
        ]
    },
    "org.eclipse.jetty.server.AbstractConnector:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.nio.SelectChannelConnector:void doStart()",
            "org.eclipse.jetty.server.nio.BlockingChannelConnector:void doStart()",
            "org.eclipse.jetty.server.bio.SocketConnector:void doStart()",
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()"
        ]
    },
    "org.eclipse.jetty.server.LocalConnector:void accept(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.AbstractConnector$Acceptor:void run()"
        ]
    },
    "org.eclipse.jetty.server.AsyncContinuation:void start(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.io.nio.SelectChannelEndPoint$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ContextHandler:void handle(java.lang.Runnable)",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:void shutdownOutput()",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int fill(org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int flush(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.util.thread.OldQueuedThreadPool$PoolThread:void run()",
            "org.eclipse.jetty.util.thread.QueuedThreadPool$2:void run()",
            "org.eclipse.jetty.util.thread.ExecutorThreadPool:boolean dispatch(java.lang.Runnable)"
        ]
    },
    "org.eclipse.jetty.servlet.ServletHandler$CachedChain:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.continuation.ContinuationFilter:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)"
        ]
    },
    "org.eclipse.jetty.servlet.ServletHandler$Chain:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.continuation.ContinuationFilter:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)"
        ]
    },
    "org.eclipse.jetty.server.handler.ResourceHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ScopedHandler:void nextHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HotSwapHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerList:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.DebugHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerWrapper:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.IPAccessHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.session.SessionHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.security.SecurityHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.session.JDBCSessionManager:org.eclipse.jetty.server.session.JDBCSessionManager$Session getSession(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.JDBCSessionManager:void removeSession(org.eclipse.jetty.server.session.AbstractSessionManager$Session,boolean)",
            "org.eclipse.jetty.server.session.JDBCSessionManager:org.eclipse.jetty.server.session.AbstractSessionManager$Session getSession(java.lang.String)"
        ]
    },
    "org.eclipse.jetty.server.handler.ConnectHandler$ProxyToServerConnection:void closeServer()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ConnectHandler$ProxyToServerConnection:void close()",
            "org.eclipse.jetty.server.handler.ConnectHandler$ClientToProxyConnection:void closeServer()"
        ]
    },
    "org.eclipse.jetty.server.handler.ConnectHandler$ClientToProxyConnection:void closeClient()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ConnectHandler$ProxyToServerConnection:void closeClient()",
            "org.eclipse.jetty.server.handler.ConnectHandler$ClientToProxyConnection:void close()"
        ]
    },
    "org.eclipse.jetty.io.nio.SelectChannelEndPoint:void idleExpired()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.io.nio.SelectChannelEndPoint:void checkIdleTimestamp(long)"
        ]
    },
    "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:void checkRenegotiate()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int fill(org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int flush(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)"
        ]
    },
    "org.eclipse.jetty.io.nio.SelectorManager$SelectSet$2:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ContextHandler:void handle(java.lang.Runnable)",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:void shutdownOutput()",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int fill(org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int flush(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.util.thread.OldQueuedThreadPool$PoolThread:void run()",
            "org.eclipse.jetty.util.thread.QueuedThreadPool$2:void run()",
            "org.eclipse.jetty.util.thread.ExecutorThreadPool:boolean dispatch(java.lang.Runnable)"
        ]
    },
    "org.eclipse.jetty.io.nio.SelectorManager$SelectSet:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.io.nio.SelectorManager:void doStop()"
        ]
    },
    "org.eclipse.jetty.http.AbstractGenerator:void blockForOutput(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.HttpOutput:void write(int)",
            "org.eclipse.jetty.server.HttpOutput:void write(org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.http.AbstractGenerator:void flush(long)"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketConnectionD00:void disconnect()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.HttpConnection:void flushResponse()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.Response:void flushBuffer()",
            "org.eclipse.jetty.server.HttpConnection$Output:void close()"
        ]
    },
    "org.eclipse.jetty.http.HttpGenerator:void addContent(org.eclipse.jetty.io.Buffer,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.HttpConnection$Output:void sendContent(java.lang.Object)",
            "org.eclipse.jetty.server.HttpOutput:void write(org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.http.AbstractGenerator:void sendError(int,java.lang.String,java.lang.String,boolean)"
        ]
    },
    "org.eclipse.jetty.http.HttpGenerator:boolean addContent(byte)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.HttpOutput:void write(int)"
        ]
    },
    "org.eclipse.jetty.http.HttpGenerator:int prepareUncheckedAddContent()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.HttpConnection$Output:void sendContent(java.lang.Object)"
        ]
    },
    "org.eclipse.jetty.http.HttpGenerator:void complete()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.HttpConnection$RequestHandler:void headerComplete()",
            "org.eclipse.jetty.server.HttpConnection:void commitResponse(boolean)",
            "org.eclipse.jetty.server.HttpConnection:void completeResponse()",
            "org.eclipse.jetty.http.AbstractGenerator:void sendError(int,java.lang.String,java.lang.String,boolean)"
        ]
    },
    "org.eclipse.jetty.http.AbstractGenerator:void flush(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.HttpOutput:void flush()"
        ]
    },
    "org.eclipse.jetty.server.handler.ConnectHandler$ProxyToServerConnection:org.eclipse.jetty.io.Connection handle()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.nio.BlockingChannelConnector$BlockingChannelEndPoint:void run()",
            "org.eclipse.jetty.server.bio.SocketConnector$ConnectorEndPoint:void run()",
            "org.eclipse.jetty.server.LocalConnector$Request:void run()",
            "org.eclipse.jetty.io.nio.SelectChannelEndPoint:void handle()"
        ]
    },
    "org.eclipse.jetty.server.handler.ConnectHandler$ClientToProxyConnection:org.eclipse.jetty.io.Connection handle()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.nio.BlockingChannelConnector$BlockingChannelEndPoint:void run()",
            "org.eclipse.jetty.server.bio.SocketConnector$ConnectorEndPoint:void run()",
            "org.eclipse.jetty.server.LocalConnector$Request:void run()",
            "org.eclipse.jetty.io.nio.SelectChannelEndPoint:void handle()"
        ]
    },
    "org.eclipse.jetty.server.handler.ConnectHandler:int write(org.eclipse.jetty.io.EndPoint,org.eclipse.jetty.io.Buffer,java.util.concurrent.ConcurrentMap)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ConnectHandler$ProxyToServerConnection:org.eclipse.jetty.io.Connection handle()",
            "org.eclipse.jetty.server.handler.ConnectHandler$ClientToProxyConnection:org.eclipse.jetty.io.Connection handle()"
        ]
    },
    "org.eclipse.jetty.io.nio.ChannelEndPoint:int flush(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.nio.BlockingChannelConnector$BlockingChannelEndPoint:int flush(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.io.nio.SelectChannelEndPoint:int flush(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.http.HttpGenerator:long flushBuffer()"
        ]
    },
    "org.eclipse.jetty.http.HttpGenerator:void send1xx(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.Response:void sendProcessing()",
            "org.eclipse.jetty.server.HttpConnection:javax.servlet.ServletInputStream getInputStream()"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketGeneratorD00:int flushBuffer()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.WebSocketGeneratorD00:void addFrame(byte,byte[],int,int,int)",
            "org.eclipse.jetty.websocket.WebSocketGeneratorD00:int flush()",
            "org.eclipse.jetty.websocket.WebSocketGeneratorD00:int expelBuffer(long)"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketGeneratorD01:int flushBuffer()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.WebSocketGeneratorD01:void addFragment(boolean,byte,byte[],int,int,int)",
            "org.eclipse.jetty.websocket.WebSocketGeneratorD01:int flush()",
            "org.eclipse.jetty.websocket.WebSocketGeneratorD01:int expelBuffer(long)"
        ]
    },
    "org.eclipse.jetty.util.thread.QueuedThreadPool:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()"
        ]
    },
    "org.eclipse.jetty.util.thread.QueuedThreadPool:void setMinThreads(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.util.thread.QueuedThreadPool:boolean dispatch(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ConnectHandler:void doStart()",
            "org.eclipse.jetty.server.handler.HandlerCollection:void doStart()",
            "org.eclipse.jetty.server.handler.ConnectHandler$Manager:boolean dispatch(java.lang.Runnable)",
            "org.eclipse.jetty.server.nio.BlockingChannelConnector$BlockingChannelEndPoint:void dispatch()",
            "org.eclipse.jetty.server.nio.BlockingChannelConnector:void doStart()",
            "org.eclipse.jetty.server.nio.SelectChannelConnector$1:boolean dispatch(java.lang.Runnable)",
            "org.eclipse.jetty.server.bio.SocketConnector$ConnectorEndPoint:void dispatch()",
            "org.eclipse.jetty.server.AbstractConnector:void doStart()",
            "org.eclipse.jetty.server.LocalConnector:void accept(int)",
            "org.eclipse.jetty.server.AsyncContinuation:void start(java.lang.Runnable)",
            "org.eclipse.jetty.util.thread.QueuedThreadPool:void execute(java.lang.Runnable)",
            "org.eclipse.jetty.util.IO:void copyThread(java.io.InputStream,java.io.OutputStream)",
            "org.eclipse.jetty.util.IO:void copyThread(java.io.Reader,java.io.Writer)"
        ]
    },
    "org.eclipse.jetty.util.thread.OldQueuedThreadPool:boolean dispatch(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ConnectHandler:void doStart()",
            "org.eclipse.jetty.server.handler.HandlerCollection:void doStart()",
            "org.eclipse.jetty.server.handler.ConnectHandler$Manager:boolean dispatch(java.lang.Runnable)",
            "org.eclipse.jetty.server.nio.BlockingChannelConnector$BlockingChannelEndPoint:void dispatch()",
            "org.eclipse.jetty.server.nio.BlockingChannelConnector:void doStart()",
            "org.eclipse.jetty.server.nio.SelectChannelConnector$1:boolean dispatch(java.lang.Runnable)",
            "org.eclipse.jetty.server.bio.SocketConnector$ConnectorEndPoint:void dispatch()",
            "org.eclipse.jetty.server.AbstractConnector:void doStart()",
            "org.eclipse.jetty.server.LocalConnector:void accept(int)",
            "org.eclipse.jetty.server.AsyncContinuation:void start(java.lang.Runnable)",
            "org.eclipse.jetty.util.thread.OldQueuedThreadPool$PoolThread:void run()"
        ]
    },
    "org.eclipse.jetty.util.thread.OldQueuedThreadPool:void setMinThreads(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.util.thread.OldQueuedThreadPool:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()"
        ]
    },
    "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletHandler:void initialize()",
            "org.eclipse.jetty.servlet.Invoker:void service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HotSwapHandler:void setHandler(org.eclipse.jetty.server.Handler)",
            "org.eclipse.jetty.server.handler.HotSwapHandler:void doStart()",
            "org.eclipse.jetty.server.handler.HandlerCollection$1:void run()",
            "org.eclipse.jetty.server.handler.RequestLogHandler:void setRequestLog(org.eclipse.jetty.server.RequestLog)",
            "org.eclipse.jetty.server.handler.RequestLogHandler:void doStart()",
            "org.eclipse.jetty.server.handler.ConnectHandler:void doStart()",
            "org.eclipse.jetty.server.handler.HandlerCollection:void doStart()",
            "org.eclipse.jetty.server.handler.HandlerWrapper:void doStart()",
            "org.eclipse.jetty.server.handler.ContextHandler:void startContext()",
            "org.eclipse.jetty.server.session.AbstractSessionManager:void doStart()",
            "org.eclipse.jetty.server.session.SessionHandler:void doStart()",
            "org.eclipse.jetty.server.nio.SelectChannelConnector:void doStart()",
            "org.eclipse.jetty.server.AbstractConnector:void doStart()",
            "org.eclipse.jetty.server.Server:void doStart()",
            "org.eclipse.jetty.server.Server:void addBean(java.lang.Object)",
            "org.eclipse.jetty.security.SecurityHandler:void doStart()",
            "org.eclipse.jetty.util.IO$Singleton:void <clinit>()"
        ]
    },
    "org.eclipse.jetty.server.handler.ContextHandlerCollection:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()"
        ]
    },
    "org.eclipse.jetty.server.nio.SelectChannelConnector:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.ssl.SslSelectChannelConnector:void doStart()",
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()"
        ]
    },
    "org.eclipse.jetty.io.nio.SelectChannelEndPoint:void dispatch()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.AsyncContinuation:void scheduleDispatch()",
            "org.eclipse.jetty.io.nio.SelectChannelEndPoint:void schedule()"
        ]
    },
    "org.eclipse.jetty.io.nio.SelectorManager$SelectSet:void doSelect()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.io.nio.SelectorManager:void doSelect(int)"
        ]
    },
    "org.eclipse.jetty.io.nio.SelectorManager$SelectSet:void checkJvmBugs(long,long,long,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.io.nio.SelectorManager$SelectSet:void doSelect()"
        ]
    },
    "org.eclipse.jetty.server.nio.BlockingChannelConnector:void accept(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.AbstractConnector$Acceptor:void run()"
        ]
    },
    "org.eclipse.jetty.server.bio.SocketConnector:void accept(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.AbstractConnector$Acceptor:void run()"
        ]
    },
    "org.eclipse.jetty.server.ssl.SslSocketConnector$SslConnectorEndPoint:void dispatch()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.bio.SocketConnector:void accept(int)",
            "org.eclipse.jetty.server.ssl.SslSocketConnector:void accept(int)"
        ]
    },
    "org.eclipse.jetty.server.bio.SocketConnector:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()"
        ]
    },
    "org.eclipse.jetty.server.AbstractConnector$Acceptor:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ContextHandler:void handle(java.lang.Runnable)",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:void shutdownOutput()",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int fill(org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int flush(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.util.thread.OldQueuedThreadPool$PoolThread:void run()",
            "org.eclipse.jetty.util.thread.QueuedThreadPool$2:void run()",
            "org.eclipse.jetty.util.thread.ExecutorThreadPool:boolean dispatch(java.lang.Runnable)"
        ]
    },
    "org.eclipse.jetty.continuation.ContinuationFilter:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletHandler$CachedChain:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "org.eclipse.jetty.servlet.ServletHandler$Chain:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.session.JDBCSessionManager:void removeSession(org.eclipse.jetty.server.session.AbstractSessionManager$Session,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.AbstractSessionManager$Session:void timeout()",
            "org.eclipse.jetty.server.session.AbstractSessionManager$Session:void invalidate()",
            "org.eclipse.jetty.server.session.AbstractSessionManager:void removeSession(javax.servlet.http.HttpSession,boolean)"
        ]
    },
    "org.eclipse.jetty.server.session.JDBCSessionManager:org.eclipse.jetty.server.session.AbstractSessionManager$Session getSession(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.AbstractSessionManager:javax.servlet.http.HttpSession getHttpSession(java.lang.String)"
        ]
    },
    "org.eclipse.jetty.server.handler.ConnectHandler$ProxyToServerConnection:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ConnectHandler$ProxyToServerConnection:org.eclipse.jetty.io.Connection handle()"
        ]
    },
    "org.eclipse.jetty.server.handler.ConnectHandler$ClientToProxyConnection:void closeServer()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ConnectHandler$ClientToProxyConnection:org.eclipse.jetty.io.Connection handle()",
            "org.eclipse.jetty.server.handler.ConnectHandler$ClientToProxyConnection:void close()"
        ]
    },
    "org.eclipse.jetty.server.handler.ConnectHandler$ProxyToServerConnection:void closeClient()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ConnectHandler$ProxyToServerConnection:void close()"
        ]
    },
    "org.eclipse.jetty.server.handler.ConnectHandler$ClientToProxyConnection:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ConnectHandler$ClientToProxyConnection:org.eclipse.jetty.io.Connection handle()"
        ]
    },
    "org.eclipse.jetty.io.nio.SelectChannelEndPoint:void checkIdleTimestamp(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.io.nio.SelectorManager$SelectSet$1:void run()"
        ]
    },
    "org.eclipse.jetty.io.nio.SelectorManager:void doStop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void stop()"
        ]
    },
    "org.eclipse.jetty.server.HttpOutput:void write(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.HttpOutput:void write(org.eclipse.jetty.io.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.HttpOutput:void write(byte[],int,int)",
            "org.eclipse.jetty.server.HttpOutput:void write(byte[])"
        ]
    },
    "org.eclipse.jetty.server.Response:void flushBuffer()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.DefaultServlet:boolean passConditionalHeaders(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.eclipse.jetty.util.resource.Resource,org.eclipse.jetty.http.HttpContent)",
            "org.eclipse.jetty.websocket.WebSocketFactory:void upgrade(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.eclipse.jetty.websocket.WebSocket,java.lang.String,java.lang.String)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD00:void handshake(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String,java.lang.String)"
        ]
    },
    "org.eclipse.jetty.server.HttpConnection$Output:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ConnectHandler:void handleConnect(org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String)",
            "org.eclipse.jetty.server.Response:void setContentLength(int)",
            "org.eclipse.jetty.server.HttpWriter:void close()",
            "org.eclipse.jetty.server.Dispatcher:void forward(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.DispatcherType)",
            "org.eclipse.jetty.server.HttpOutput:void write(int)",
            "org.eclipse.jetty.server.HttpOutput:void write(org.eclipse.jetty.io.Buffer)"
        ]
    },
    "org.eclipse.jetty.server.HttpConnection$Output:void sendContent(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.DefaultServlet:void sendData(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,boolean,org.eclipse.jetty.util.resource.Resource,org.eclipse.jetty.http.HttpContent,java.util.Enumeration)",
            "org.eclipse.jetty.server.handler.ResourceHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.Request:void setAttribute(java.lang.String,java.lang.Object)"
        ]
    },
    "org.eclipse.jetty.http.AbstractGenerator:void sendError(int,java.lang.String,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.HttpConnection:org.eclipse.jetty.io.Connection handle()",
            "org.eclipse.jetty.server.HttpConnection:void handleRequest()"
        ]
    },
    "org.eclipse.jetty.server.HttpConnection:void commitResponse(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.HttpConnection:void flushResponse()",
            "org.eclipse.jetty.server.HttpConnection$Output:void close()",
            "org.eclipse.jetty.server.HttpConnection$Output:void flush()",
            "org.eclipse.jetty.server.HttpConnection$Output:void sendContent(java.lang.Object)"
        ]
    },
    "org.eclipse.jetty.server.HttpConnection:void completeResponse()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.Response:void complete()"
        ]
    },
    "org.eclipse.jetty.server.HttpOutput:void flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.HttpConnection$Output:void flush()"
        ]
    },
    "org.eclipse.jetty.server.nio.BlockingChannelConnector$BlockingChannelEndPoint:int flush(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.http.HttpGenerator:long flushBuffer()"
        ]
    },
    "org.eclipse.jetty.io.nio.SelectChannelEndPoint:int flush(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.http.HttpGenerator:long flushBuffer()"
        ]
    },
    "org.eclipse.jetty.server.Response:void sendProcessing()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.Response:void sendError(int)"
        ]
    },
    "org.eclipse.jetty.server.HttpConnection:javax.servlet.ServletInputStream getInputStream()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.Request:javax.servlet.ServletInputStream getInputStream()"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketGeneratorD00:void addFrame(byte,byte[],int,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.WebSocketGeneratorD00:void addFrame(byte,java.lang.String,int)",
            "org.eclipse.jetty.websocket.WebSocketGeneratorD00:void addFragment(boolean,byte,byte[],int,int,int)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD00:void sendMessage(byte,byte[],int,int)"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketGeneratorD00:int flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.WebSocketConnectionD00:org.eclipse.jetty.io.Connection handle()",
            "org.eclipse.jetty.websocket.WebSocketConnectionD00:void sendMessage(byte,java.lang.String)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD00:void sendMessage(byte,byte[],int,int)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD00:void sendFragment(boolean,byte,byte[],int,int)"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketGeneratorD00:int expelBuffer(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.WebSocketGeneratorD00:void addFrame(byte,byte[],int,int,int)",
            "org.eclipse.jetty.websocket.WebSocketGeneratorD00:void bufferPut(byte,long)",
            "org.eclipse.jetty.websocket.WebSocketGeneratorD00:int flush(int)"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketGeneratorD01:void addFragment(boolean,byte,byte[],int,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.WebSocketGeneratorD01:void addFrame(byte,byte[],int,int,int)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD00:void sendFragment(boolean,byte,byte[],int,int)"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketGeneratorD01:int flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.WebSocketConnectionD00:org.eclipse.jetty.io.Connection handle()",
            "org.eclipse.jetty.websocket.WebSocketConnectionD00:void sendMessage(byte,java.lang.String)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD00:void sendMessage(byte,byte[],int,int)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD00:void sendFragment(boolean,byte,byte[],int,int)"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketGeneratorD01:int expelBuffer(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.WebSocketGeneratorD01:void addFragment(boolean,byte,byte[],int,int,int)",
            "org.eclipse.jetty.websocket.WebSocketGeneratorD01:void bufferPut(byte,long)",
            "org.eclipse.jetty.websocket.WebSocketGeneratorD01:int flush(int)"
        ]
    },
    "org.eclipse.jetty.util.thread.QueuedThreadPool:void execute(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.util.IO:void copyThread(java.io.InputStream,java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.util.IO:void copyThread(java.io.Reader,java.io.Writer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.servlet.ServletHandler:void initialize()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletHandler:void doStart()",
            "org.eclipse.jetty.servlet.ServletHandler:void updateMappings()",
            "org.eclipse.jetty.servlet.ServletContextHandler:void startContext()"
        ]
    },
    "org.eclipse.jetty.server.handler.HotSwapHandler:void setHandler(org.eclipse.jetty.server.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.handler.HotSwapHandler:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()"
        ]
    },
    "org.eclipse.jetty.server.handler.HandlerCollection$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ContextHandler:void handle(java.lang.Runnable)",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:void shutdownOutput()",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int fill(org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int flush(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.util.thread.OldQueuedThreadPool$PoolThread:void run()",
            "org.eclipse.jetty.util.thread.QueuedThreadPool$2:void run()",
            "org.eclipse.jetty.util.thread.ExecutorThreadPool:boolean dispatch(java.lang.Runnable)"
        ]
    },
    "org.eclipse.jetty.server.handler.RequestLogHandler:void setRequestLog(org.eclipse.jetty.server.RequestLog)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.handler.RequestLogHandler:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()"
        ]
    },
    "org.eclipse.jetty.server.handler.HandlerWrapper:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ScopedHandler:void doStart()",
            "org.eclipse.jetty.server.handler.StatisticsHandler:void doStart()",
            "org.eclipse.jetty.server.handler.RequestLogHandler:void doStart()",
            "org.eclipse.jetty.server.handler.ConnectHandler:void doStart()",
            "org.eclipse.jetty.server.handler.DebugHandler:void doStart()",
            "org.eclipse.jetty.server.handler.IPAccessHandler:void doStart()",
            "org.eclipse.jetty.server.Server:void doStart()",
            "org.eclipse.jetty.websocket.WebSocketHandler:void doStart()",
            "org.eclipse.jetty.security.SecurityHandler:void doStart()",
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()"
        ]
    },
    "org.eclipse.jetty.server.handler.ContextHandler:void startContext()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletContextHandler:void startContext()",
            "org.eclipse.jetty.server.handler.ContextHandler:void doStart()"
        ]
    },
    "org.eclipse.jetty.server.session.AbstractSessionManager:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.JDBCSessionManager:void doStart()",
            "org.eclipse.jetty.server.session.HashSessionManager:void doStart()"
        ]
    },
    "org.eclipse.jetty.server.session.SessionHandler:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()"
        ]
    },
    "org.eclipse.jetty.server.Server:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()"
        ]
    },
    "org.eclipse.jetty.server.Server:void addBean(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.Server:void addLifeCycle(org.eclipse.jetty.util.component.LifeCycle)"
        ]
    },
    "org.eclipse.jetty.security.SecurityHandler:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.security.ConstraintSecurityHandler:void doStart()"
        ]
    },
    "org.eclipse.jetty.util.IO$Singleton:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.IO$Singleton:void <clinit>()",
            "org.eclipse.jetty.util.IO:void copyThread(java.io.InputStream,java.io.OutputStream)",
            "org.eclipse.jetty.util.IO:void copyThread(java.io.Reader,java.io.Writer)"
        ]
    },
    "org.eclipse.jetty.server.ssl.SslSelectChannelConnector:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()"
        ]
    },
    "org.eclipse.jetty.server.AsyncContinuation:void scheduleDispatch()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.AsyncContinuation:void dispatch()",
            "org.eclipse.jetty.server.AsyncContinuation:void expired()",
            "org.eclipse.jetty.server.AsyncContinuation:void complete()"
        ]
    },
    "org.eclipse.jetty.io.nio.SelectChannelEndPoint:void schedule()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.io.nio.SelectorManager$SelectSet:void doSelect()"
        ]
    },
    "org.eclipse.jetty.io.nio.SelectorManager:void doSelect(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ConnectHandler$1:void run()",
            "org.eclipse.jetty.server.nio.SelectChannelConnector:void accept(int)"
        ]
    },
    "org.eclipse.jetty.server.ssl.SslSocketConnector:void accept(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.AbstractConnector$Acceptor:void run()"
        ]
    },
    "org.eclipse.jetty.server.session.AbstractSessionManager$Session:void timeout()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.JDBCSessionManager$Session:void timeout()",
            "org.eclipse.jetty.server.session.HashSessionManager:void scavenge()"
        ]
    },
    "org.eclipse.jetty.server.session.AbstractSessionManager$Session:void invalidate()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.AbstractSessionManager$Session:void access(long)",
            "org.eclipse.jetty.server.session.HashSessionManager$HashedSession:void invalidate()",
            "org.eclipse.jetty.server.session.JDBCSessionManager:void invalidateSession(java.lang.String)",
            "org.eclipse.jetty.server.session.HashSessionIdManager:void invalidateAll(java.lang.String)",
            "org.eclipse.jetty.security.authentication.LoginAuthenticator:javax.servlet.http.HttpSession renewSessionOnAuthentication(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.session.AbstractSessionManager:void removeSession(javax.servlet.http.HttpSession,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.session.AbstractSessionManager:javax.servlet.http.HttpSession getHttpSession(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.SessionHandler:void setRequestedId(org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest)",
            "org.eclipse.jetty.server.Request:javax.servlet.http.HttpSession getSession(boolean)"
        ]
    },
    "org.eclipse.jetty.io.nio.SelectorManager$SelectSet$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ContextHandler:void handle(java.lang.Runnable)",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:void shutdownOutput()",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int fill(org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int flush(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.util.thread.OldQueuedThreadPool$PoolThread:void run()",
            "org.eclipse.jetty.util.thread.QueuedThreadPool$2:void run()",
            "org.eclipse.jetty.util.thread.ExecutorThreadPool:boolean dispatch(java.lang.Runnable)"
        ]
    },
    "org.eclipse.jetty.util.component.AbstractLifeCycle:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletHandler:void doStop()",
            "org.eclipse.jetty.servlet.Invoker:void service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.servlet.FilterHolder:void doStart()",
            "org.eclipse.jetty.server.handler.HotSwapHandler:void setHandler(org.eclipse.jetty.server.Handler)",
            "org.eclipse.jetty.server.handler.HotSwapHandler:void doStop()",
            "org.eclipse.jetty.server.handler.RequestLogHandler:void setRequestLog(org.eclipse.jetty.server.RequestLog)",
            "org.eclipse.jetty.server.handler.RequestLogHandler:void doStop()",
            "org.eclipse.jetty.server.handler.ConnectHandler:void doStop()",
            "org.eclipse.jetty.server.handler.HandlerCollection:void setHandlers(org.eclipse.jetty.server.Handler[])",
            "org.eclipse.jetty.server.handler.HandlerCollection:void doStop()",
            "org.eclipse.jetty.server.handler.HandlerWrapper:void doStop()",
            "org.eclipse.jetty.server.handler.ContextHandler:void doStop()",
            "org.eclipse.jetty.server.session.SessionHandler:void doStop()",
            "org.eclipse.jetty.server.nio.SelectChannelConnector:void close()",
            "org.eclipse.jetty.server.AbstractConnector:void doStop()",
            "org.eclipse.jetty.server.Server:void doStop()",
            "org.eclipse.jetty.security.SecurityHandler:void doStop()",
            "org.eclipse.jetty.util.thread.ShutdownThread:void run()"
        ]
    },
    "org.eclipse.jetty.server.HttpOutput:void write(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.HttpOutput:void write(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.DefaultServlet:void sendDirectory(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.eclipse.jetty.util.resource.Resource,java.lang.String)",
            "org.eclipse.jetty.server.handler.DefaultHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.HttpOutput:void print(java.lang.String)"
        ]
    },
    "org.eclipse.jetty.server.handler.ConnectHandler:void handleConnect(org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ConnectHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.Response:void setContentLength(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.DefaultServlet:void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.servlet.DefaultServlet:void sendDirectory(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.eclipse.jetty.util.resource.Resource,java.lang.String)",
            "org.eclipse.jetty.servlet.DefaultServlet:void sendData(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,boolean,org.eclipse.jetty.util.resource.Resource,org.eclipse.jetty.http.HttpContent,java.util.Enumeration)",
            "org.eclipse.jetty.servlet.DefaultServlet:void writeHeaders(javax.servlet.http.HttpServletResponse,org.eclipse.jetty.http.HttpContent,long)",
            "org.eclipse.jetty.server.handler.DefaultHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ErrorHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.MovedContextHandler$Redirector:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.Response:void sendError(int,java.lang.String)",
            "org.eclipse.jetty.security.authentication.FormAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)",
            "org.eclipse.jetty.security.ConstraintSecurityHandler:boolean checkUserDataPermissions(java.lang.String,org.eclipse.jetty.server.Request,org.eclipse.jetty.server.Response,java.lang.Object)"
        ]
    },
    "org.eclipse.jetty.server.HttpWriter:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.io.UncheckedPrintWriter:void close()",
            "org.eclipse.jetty.io.WriterOutputStream:void close()",
            "org.eclipse.jetty.util.IO:void close(java.io.Writer)",
            "org.eclipse.jetty.util.IO$Job:void run()"
        ]
    },
    "org.eclipse.jetty.servlet.DefaultServlet:void sendData(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,boolean,org.eclipse.jetty.util.resource.Resource,org.eclipse.jetty.http.HttpContent,java.util.Enumeration)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.Request:void setAttribute(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletHandler:void doScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.servlet.ServletHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.servlet.ErrorPageErrorHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.servlet.DefaultServlet:void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ConnectHandler:void upgradeConnection(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.eclipse.jetty.io.Connection)",
            "org.eclipse.jetty.server.handler.DebugHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.session.AbstractSessionIdManager:java.lang.String newSessionId(javax.servlet.http.HttpServletRequest,long)",
            "org.eclipse.jetty.server.ssl.SslCertificates:void customize(javax.net.ssl.SSLSession,org.eclipse.jetty.io.EndPoint,org.eclipse.jetty.server.Request)",
            "org.eclipse.jetty.server.Response:void sendError(int,java.lang.String)",
            "org.eclipse.jetty.server.AsyncContinuation:void setAttribute(java.lang.String,java.lang.Object)",
            "org.eclipse.jetty.server.Server:void handleAsync(org.eclipse.jetty.server.HttpConnection)",
            "org.eclipse.jetty.websocket.WebSocketFactory:void upgrade(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.eclipse.jetty.websocket.WebSocket,java.lang.String,java.lang.String)"
        ]
    },
    "org.eclipse.jetty.server.HttpConnection$Output:void flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.HttpWriter:void flush()",
            "org.eclipse.jetty.server.HttpConnection$Output:void sendContent(java.lang.Object)",
            "org.eclipse.jetty.server.HttpOutput:void write(int)",
            "org.eclipse.jetty.server.HttpOutput:void write(org.eclipse.jetty.io.Buffer)"
        ]
    },
    "org.eclipse.jetty.server.Response:void complete()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.Response:void sendError(int,java.lang.String)",
            "org.eclipse.jetty.server.Response:void sendRedirect(java.lang.String)",
            "org.eclipse.jetty.server.HttpConnection:void handleRequest()"
        ]
    },
    "org.eclipse.jetty.server.Request:javax.servlet.ServletInputStream getInputStream()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.Request:void extractParameters()",
            "org.eclipse.jetty.server.Request:java.io.BufferedReader getReader()",
            "org.eclipse.jetty.server.Request:javax.servlet.http.Part getPart(java.lang.String)",
            "org.eclipse.jetty.server.Request:java.util.Collection getParts()"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketGeneratorD00:void addFrame(byte,java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.WebSocketConnectionD00:void sendMessage(byte,java.lang.String)"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketGeneratorD00:void addFragment(boolean,byte,byte[],int,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.WebSocketConnectionD00:void sendFragment(boolean,byte,byte[],int,int)"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketConnectionD00:void sendMessage(byte,byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.FrameHandlerD1:void onFrame(boolean,byte,byte,org.eclipse.jetty.io.Buffer)"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketConnectionD00:void sendMessage(byte,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.WebSocketConnectionD00:void sendMessage(java.lang.String)"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketConnectionD00:void sendFragment(boolean,byte,byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.websocket.WebSocketGeneratorD00:void bufferPut(byte,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.WebSocketGeneratorD00:void addFrame(byte,byte[],int,int,int)"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketGeneratorD00:int flush(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.WebSocketConnectionD00:void disconnect()"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketGeneratorD01:void addFrame(byte,byte[],int,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.WebSocketGeneratorD01:void addFrame(byte,byte[],int)",
            "org.eclipse.jetty.websocket.WebSocketGeneratorD01:void addFrame(byte,java.lang.String,int)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD00:void sendMessage(byte,byte[],int,int)"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketGeneratorD01:void bufferPut(byte,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.WebSocketGeneratorD01:void addFragment(boolean,byte,byte[],int,int,int)"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketGeneratorD01:int flush(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.WebSocketConnectionD00:void disconnect()"
        ]
    },
    "org.eclipse.jetty.servlet.ServletHandler:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()"
        ]
    },
    "org.eclipse.jetty.servlet.ServletHandler:void updateMappings()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletHandler:void doStart()",
            "org.eclipse.jetty.servlet.ServletHandler:void setFilterMappings(org.eclipse.jetty.servlet.FilterMapping[])",
            "org.eclipse.jetty.servlet.ServletHandler:void setServletMappings(org.eclipse.jetty.servlet.ServletMapping[])"
        ]
    },
    "org.eclipse.jetty.servlet.ServletContextHandler:void startContext()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ContextHandler:void doStart()"
        ]
    },
    "org.eclipse.jetty.server.handler.ScopedHandler:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletHandler:void doStart()",
            "org.eclipse.jetty.server.handler.ContextHandler:void startContext()",
            "org.eclipse.jetty.server.session.SessionHandler:void doStart()"
        ]
    },
    "org.eclipse.jetty.server.handler.StatisticsHandler:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()"
        ]
    },
    "org.eclipse.jetty.server.handler.DebugHandler:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()"
        ]
    },
    "org.eclipse.jetty.server.handler.IPAccessHandler:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketHandler:void doStart()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.handler.ContextHandler:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()"
        ]
    },
    "org.eclipse.jetty.server.session.JDBCSessionManager:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()"
        ]
    },
    "org.eclipse.jetty.server.session.HashSessionManager:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()"
        ]
    },
    "org.eclipse.jetty.server.Server:void addLifeCycle(org.eclipse.jetty.util.component.LifeCycle)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.security.ConstraintSecurityHandler:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()"
        ]
    },
    "org.eclipse.jetty.server.AsyncContinuation:void dispatch()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.AsyncContinuation:void expired()",
            "org.eclipse.jetty.server.AsyncContinuation:void dispatch(javax.servlet.ServletContext,java.lang.String)",
            "org.eclipse.jetty.server.AsyncContinuation:void dispatch(java.lang.String)",
            "org.eclipse.jetty.server.AsyncContinuation:void resume()",
            "org.eclipse.jetty.continuation.Servlet3Continuation:void resume()",
            "org.eclipse.jetty.continuation.Servlet3Continuation$1:void onTimeout(javax.servlet.AsyncEvent)"
        ]
    },
    "org.eclipse.jetty.server.AsyncContinuation:void expired()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.AsyncContinuation:void scheduleTimeout()",
            "org.eclipse.jetty.server.AsyncContinuation$AsyncTimeout:void expired()",
            "org.eclipse.jetty.server.AsyncContinuation$AsyncTimeout:void run()"
        ]
    },
    "org.eclipse.jetty.server.AsyncContinuation:void complete()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.AsyncContinuation:void expired()",
            "org.eclipse.jetty.continuation.Servlet3Continuation:void complete()"
        ]
    },
    "org.eclipse.jetty.server.handler.ConnectHandler$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ContextHandler:void handle(java.lang.Runnable)",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:void shutdownOutput()",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int fill(org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int flush(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.util.thread.OldQueuedThreadPool$PoolThread:void run()",
            "org.eclipse.jetty.util.thread.QueuedThreadPool$2:void run()",
            "org.eclipse.jetty.util.thread.ExecutorThreadPool:boolean dispatch(java.lang.Runnable)"
        ]
    },
    "org.eclipse.jetty.server.nio.SelectChannelConnector:void accept(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.AbstractConnector$Acceptor:void run()"
        ]
    },
    "org.eclipse.jetty.server.session.JDBCSessionManager$Session:void timeout()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.JDBCSessionManager:void expire(java.util.List)"
        ]
    },
    "org.eclipse.jetty.server.session.HashSessionManager:void scavenge()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.HashSessionManager$2:void run()"
        ]
    },
    "org.eclipse.jetty.server.session.AbstractSessionManager$Session:void access(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.HashSessionManager$HashedSession:void deIdle()",
            "org.eclipse.jetty.server.session.AbstractSessionManager:org.eclipse.jetty.http.HttpCookie access(javax.servlet.http.HttpSession,boolean)",
            "org.eclipse.jetty.server.session.JDBCSessionManager$Session:void access(long)"
        ]
    },
    "org.eclipse.jetty.server.session.HashSessionManager$HashedSession:void invalidate()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.AbstractSessionManager$Session:void access(long)",
            "org.eclipse.jetty.server.session.HashSessionManager$HashedSession:void deIdle()",
            "org.eclipse.jetty.server.session.HashSessionManager:void invalidateSessions()",
            "org.eclipse.jetty.server.session.HashSessionIdManager:void invalidateAll(java.lang.String)",
            "org.eclipse.jetty.security.authentication.LoginAuthenticator:javax.servlet.http.HttpSession renewSessionOnAuthentication(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.session.JDBCSessionManager:void invalidateSession(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.JDBCSessionIdManager:void invalidateAll(java.lang.String)"
        ]
    },
    "org.eclipse.jetty.server.session.HashSessionIdManager:void invalidateAll(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.JDBCSessionManager:void removeSession(org.eclipse.jetty.server.session.AbstractSessionManager$Session,boolean)",
            "org.eclipse.jetty.server.session.AbstractSessionManager:void removeSession(org.eclipse.jetty.server.session.AbstractSessionManager$Session,boolean)"
        ]
    },
    "org.eclipse.jetty.security.authentication.LoginAuthenticator:javax.servlet.http.HttpSession renewSessionOnAuthentication(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.security.authentication.FormAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)",
            "org.eclipse.jetty.security.authentication.ClientCertAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)",
            "org.eclipse.jetty.security.authentication.BasicAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)",
            "org.eclipse.jetty.security.authentication.DigestAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)"
        ]
    },
    "org.eclipse.jetty.server.session.SessionHandler:void setRequestedId(org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.SessionHandler:void doScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.Request:javax.servlet.http.HttpSession getSession(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.SessionHandler:void doScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.Response:java.lang.String encodeURL(java.lang.String)",
            "org.eclipse.jetty.server.Request:javax.servlet.http.HttpSession getSession()",
            "org.eclipse.jetty.server.Request:boolean isRequestedSessionIdValid()",
            "org.eclipse.jetty.security.authentication.FormAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)",
            "org.eclipse.jetty.security.authentication.LoginAuthenticator:javax.servlet.http.HttpSession renewSessionOnAuthentication(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.servlet.ServletHandler:void doStop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void stop()"
        ]
    },
    "org.eclipse.jetty.servlet.FilterHolder:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()"
        ]
    },
    "org.eclipse.jetty.server.handler.HotSwapHandler:void doStop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void stop()"
        ]
    },
    "org.eclipse.jetty.server.handler.RequestLogHandler:void doStop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void stop()"
        ]
    },
    "org.eclipse.jetty.server.handler.ConnectHandler:void doStop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void stop()"
        ]
    },
    "org.eclipse.jetty.server.handler.HandlerCollection:void setHandlers(org.eclipse.jetty.server.Handler[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.HandlerCollection:void addHandler(org.eclipse.jetty.server.Handler)",
            "org.eclipse.jetty.server.handler.HandlerCollection:void removeHandler(org.eclipse.jetty.server.Handler)",
            "org.eclipse.jetty.server.handler.ContextHandlerCollection:void setHandlers(org.eclipse.jetty.server.Handler[])"
        ]
    },
    "org.eclipse.jetty.server.handler.HandlerCollection:void doStop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void stop()"
        ]
    },
    "org.eclipse.jetty.server.handler.HandlerWrapper:void doStop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletHandler:void doStop()",
            "org.eclipse.jetty.server.handler.RequestLogHandler:void doStop()",
            "org.eclipse.jetty.server.handler.ConnectHandler:void doStop()",
            "org.eclipse.jetty.server.handler.DebugHandler:void doStop()",
            "org.eclipse.jetty.server.handler.ContextHandler:void doStop()",
            "org.eclipse.jetty.server.session.SessionHandler:void doStop()",
            "org.eclipse.jetty.server.Server:void doStop()",
            "org.eclipse.jetty.websocket.WebSocketHandler:void doStop()",
            "org.eclipse.jetty.security.SecurityHandler:void doStop()",
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void stop()"
        ]
    },
    "org.eclipse.jetty.server.handler.ContextHandler:void doStop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletContextHandler:void doStop()",
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void stop()"
        ]
    },
    "org.eclipse.jetty.server.session.SessionHandler:void doStop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void stop()"
        ]
    },
    "org.eclipse.jetty.server.nio.SelectChannelConnector:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.ssl.SslSelectChannelConnector:javax.net.ssl.SSLEngine createSSLEngine()",
            "org.eclipse.jetty.server.AbstractConnector:void doStop()",
            "org.eclipse.jetty.server.Server:void doStop()"
        ]
    },
    "org.eclipse.jetty.server.AbstractConnector:void doStop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.nio.SelectChannelConnector:void doStop()",
            "org.eclipse.jetty.server.bio.SocketConnector:void doStop()",
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void stop()"
        ]
    },
    "org.eclipse.jetty.server.Server:void doStop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void stop()"
        ]
    },
    "org.eclipse.jetty.security.SecurityHandler:void doStop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void stop()"
        ]
    },
    "org.eclipse.jetty.util.thread.ShutdownThread:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ContextHandler:void handle(java.lang.Runnable)",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:void shutdownOutput()",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int fill(org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int flush(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.util.thread.OldQueuedThreadPool$PoolThread:void run()",
            "org.eclipse.jetty.util.thread.QueuedThreadPool$2:void run()",
            "org.eclipse.jetty.util.thread.QueuedThreadPool:boolean startThread(int)",
            "org.eclipse.jetty.util.thread.ExecutorThreadPool:boolean dispatch(java.lang.Runnable)"
        ]
    },
    "org.eclipse.jetty.server.HttpOutput:void print(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.servlet.DefaultServlet:void writeHeaders(javax.servlet.http.HttpServletResponse,org.eclipse.jetty.http.HttpContent,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.handler.ErrorHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ErrorPageErrorHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ScopedHandler:void nextHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HotSwapHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerList:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.DebugHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerWrapper:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.IPAccessHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.session.SessionHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.Response:void sendError(int,java.lang.String)",
            "org.eclipse.jetty.security.SecurityHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.handler.MovedContextHandler$Redirector:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ScopedHandler:void nextHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HotSwapHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerList:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.DebugHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandlerCollection:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.HandlerWrapper:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.IPAccessHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.session.SessionHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.security.SecurityHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.io.UncheckedPrintWriter:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.Response:void setContentLength(int)",
            "org.eclipse.jetty.server.Dispatcher:void forward(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.DispatcherType)",
            "org.eclipse.jetty.io.UncheckedPrintWriter:void close()",
            "org.eclipse.jetty.io.WriterOutputStream:void close()",
            "org.eclipse.jetty.util.IO:void close(java.io.Writer)",
            "org.eclipse.jetty.util.IO$Job:void run()"
        ]
    },
    "org.eclipse.jetty.io.WriterOutputStream:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.DefaultHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.NCSARequestLog:void doStop()",
            "org.eclipse.jetty.io.bio.StreamEndPoint:void close()",
            "org.eclipse.jetty.util.MultiPartInputStream$MultiPart:void close()",
            "org.eclipse.jetty.util.MultiPartInputStream$MultiPart:void createFile()",
            "org.eclipse.jetty.util.RolloverFileOutputStream:void setFile()",
            "org.eclipse.jetty.util.IO:void close(java.io.OutputStream)",
            "org.eclipse.jetty.util.IO$Job:void run()"
        ]
    },
    "org.eclipse.jetty.util.IO:void close(java.io.Writer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.util.IO$Job:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ContextHandler:void handle(java.lang.Runnable)",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:void shutdownOutput()",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int fill(org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int flush(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.util.thread.OldQueuedThreadPool$PoolThread:void run()",
            "org.eclipse.jetty.util.thread.QueuedThreadPool$2:void run()",
            "org.eclipse.jetty.util.thread.ExecutorThreadPool:boolean dispatch(java.lang.Runnable)",
            "org.eclipse.jetty.util.IO:void copyThread(java.io.InputStream,java.io.OutputStream)",
            "org.eclipse.jetty.util.IO:void copyThread(java.io.Reader,java.io.Writer)"
        ]
    },
    "org.eclipse.jetty.server.handler.ConnectHandler:void upgradeConnection(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.eclipse.jetty.io.Connection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ConnectHandler:void handleConnect(org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String)"
        ]
    },
    "org.eclipse.jetty.server.session.AbstractSessionIdManager:java.lang.String newSessionId(javax.servlet.http.HttpServletRequest,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.AbstractSessionManager$Session:void <init>(org.eclipse.jetty.server.session.AbstractSessionManager,javax.servlet.http.HttpServletRequest)"
        ]
    },
    "org.eclipse.jetty.server.ssl.SslCertificates:void customize(javax.net.ssl.SSLSession,org.eclipse.jetty.io.EndPoint,org.eclipse.jetty.server.Request)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.ssl.SslSelectChannelConnector:void customize(org.eclipse.jetty.io.EndPoint,org.eclipse.jetty.server.Request)",
            "org.eclipse.jetty.server.ssl.SslSocketConnector:void customize(org.eclipse.jetty.io.EndPoint,org.eclipse.jetty.server.Request)"
        ]
    },
    "org.eclipse.jetty.server.AsyncContinuation:void setAttribute(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.HttpWriter:void flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.HttpWriter:void write(char[],int,int)",
            "org.eclipse.jetty.server.NCSARequestLog:void log(org.eclipse.jetty.server.Request,org.eclipse.jetty.server.Response)",
            "org.eclipse.jetty.server.NCSARequestLog:void doStop()",
            "org.eclipse.jetty.io.UncheckedPrintWriter:void flush()",
            "org.eclipse.jetty.io.UncheckedPrintWriter:void newLine()",
            "org.eclipse.jetty.io.WriterOutputStream:void flush()"
        ]
    },
    "org.eclipse.jetty.server.Response:void sendRedirect(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.DefaultServlet:void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ResourceHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ContextHandler:boolean checkContext(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.security.authentication.FormAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)",
            "org.eclipse.jetty.security.ConstraintSecurityHandler:boolean checkUserDataPermissions(java.lang.String,org.eclipse.jetty.server.Request,org.eclipse.jetty.server.Response,java.lang.Object)"
        ]
    },
    "org.eclipse.jetty.server.Request:java.io.BufferedReader getReader()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.Request:javax.servlet.http.Part getPart(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.Request:java.util.Collection getParts()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.websocket.FrameHandlerD1:void onFrame(boolean,byte,byte,org.eclipse.jetty.io.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.WebSocketParserD00:int parseNext()",
            "org.eclipse.jetty.websocket.WebSocketParserD01:int parseNext()"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketConnectionD00:void sendMessage(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.websocket.WebSocketGeneratorD01:void addFrame(byte,byte[],int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.websocket.WebSocketGeneratorD01:void addFrame(byte,java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.websocket.WebSocketConnectionD00:void sendMessage(byte,java.lang.String)"
        ]
    },
    "org.eclipse.jetty.servlet.ServletHandler:void setFilterMappings(org.eclipse.jetty.servlet.FilterMapping[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletHandler:void addFilterWithMapping(org.eclipse.jetty.servlet.FilterHolder,java.lang.String,java.util.EnumSet)",
            "org.eclipse.jetty.servlet.ServletHandler:void addFilter(org.eclipse.jetty.servlet.FilterHolder,org.eclipse.jetty.servlet.FilterMapping)",
            "org.eclipse.jetty.servlet.ServletHandler:void addFilterMapping(org.eclipse.jetty.servlet.FilterMapping)",
            "org.eclipse.jetty.servlet.ServletHandler:void prependFilterMapping(org.eclipse.jetty.servlet.FilterMapping)"
        ]
    },
    "org.eclipse.jetty.servlet.ServletHandler:void setServletMappings(org.eclipse.jetty.servlet.ServletMapping[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletHandler:void addServletWithMapping(org.eclipse.jetty.servlet.ServletHolder,java.lang.String)",
            "org.eclipse.jetty.servlet.ServletHandler:void addServletMapping(org.eclipse.jetty.servlet.ServletMapping)",
            "org.eclipse.jetty.servlet.Invoker:void service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.AsyncContinuation:void dispatch(javax.servlet.ServletContext,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.AsyncContinuation:void dispatch(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.AsyncContinuation:void resume()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.continuation.Servlet3Continuation:void resume()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.continuation.Servlet3Continuation$1:void onTimeout(javax.servlet.AsyncEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.AsyncContinuation:void expired()"
        ]
    },
    "org.eclipse.jetty.server.AsyncContinuation:void scheduleTimeout()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.AsyncContinuation:boolean unhandle()"
        ]
    },
    "org.eclipse.jetty.server.AsyncContinuation$AsyncTimeout:void expired()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.thread.Timeout:void tick()"
        ]
    },
    "org.eclipse.jetty.server.AsyncContinuation$AsyncTimeout:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ContextHandler:void handle(java.lang.Runnable)",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:void shutdownOutput()",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int fill(org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int flush(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.util.thread.OldQueuedThreadPool$PoolThread:void run()",
            "org.eclipse.jetty.util.thread.QueuedThreadPool$2:void run()",
            "org.eclipse.jetty.util.thread.ExecutorThreadPool:boolean dispatch(java.lang.Runnable)"
        ]
    },
    "org.eclipse.jetty.continuation.Servlet3Continuation:void complete()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.session.JDBCSessionManager:void expire(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.JDBCSessionIdManager:void scavenge()"
        ]
    },
    "org.eclipse.jetty.server.session.HashSessionManager$2:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ContextHandler:void handle(java.lang.Runnable)",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:void shutdownOutput()",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int fill(org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int flush(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.util.thread.OldQueuedThreadPool$PoolThread:void run()",
            "org.eclipse.jetty.util.thread.QueuedThreadPool$2:void run()",
            "org.eclipse.jetty.util.thread.ExecutorThreadPool:boolean dispatch(java.lang.Runnable)"
        ]
    },
    "org.eclipse.jetty.server.session.HashSessionManager$HashedSession:void deIdle()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.HashSessionManager$HashedSession:boolean isNotAvailable()",
            "org.eclipse.jetty.server.session.HashSessionManager:org.eclipse.jetty.server.session.AbstractSessionManager$Session getSession(java.lang.String)"
        ]
    },
    "org.eclipse.jetty.server.session.AbstractSessionManager:org.eclipse.jetty.http.HttpCookie access(javax.servlet.http.HttpSession,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.SessionHandler:void doScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.session.JDBCSessionManager$Session:void access(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.AbstractSessionManager:org.eclipse.jetty.http.HttpCookie access(javax.servlet.http.HttpSession,boolean)"
        ]
    },
    "org.eclipse.jetty.server.session.HashSessionManager:void invalidateSessions()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.AbstractSessionManager:void doStop()"
        ]
    },
    "org.eclipse.jetty.server.session.JDBCSessionIdManager:void invalidateAll(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.JDBCSessionManager:void removeSession(org.eclipse.jetty.server.session.AbstractSessionManager$Session,boolean)",
            "org.eclipse.jetty.server.session.AbstractSessionManager:void removeSession(org.eclipse.jetty.server.session.AbstractSessionManager$Session,boolean)"
        ]
    },
    "org.eclipse.jetty.server.session.AbstractSessionManager:void removeSession(org.eclipse.jetty.server.session.AbstractSessionManager$Session,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.AbstractSessionManager$Session:void timeout()",
            "org.eclipse.jetty.server.session.AbstractSessionManager$Session:void invalidate()",
            "org.eclipse.jetty.server.session.AbstractSessionManager:void removeSession(javax.servlet.http.HttpSession,boolean)"
        ]
    },
    "org.eclipse.jetty.server.Response:java.lang.String encodeURL(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.Response:java.lang.String encodeRedirectURL(java.lang.String)",
            "org.eclipse.jetty.server.Response:java.lang.String encodeUrl(java.lang.String)"
        ]
    },
    "org.eclipse.jetty.server.Request:javax.servlet.http.HttpSession getSession()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.Request:boolean isRequestedSessionIdValid()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.handler.HandlerCollection:void addHandler(org.eclipse.jetty.server.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletContextHandler:void <init>(org.eclipse.jetty.server.HandlerContainer,java.lang.String,org.eclipse.jetty.server.session.SessionHandler,org.eclipse.jetty.security.SecurityHandler,org.eclipse.jetty.servlet.ServletHandler,org.eclipse.jetty.server.handler.ErrorHandler)",
            "org.eclipse.jetty.server.handler.ContextHandlerCollection:org.eclipse.jetty.server.handler.ContextHandler addContext(java.lang.String,java.lang.String)",
            "org.eclipse.jetty.server.handler.ContextHandler:void <init>(org.eclipse.jetty.server.HandlerContainer,java.lang.String)"
        ]
    },
    "org.eclipse.jetty.server.handler.HandlerCollection:void removeHandler(org.eclipse.jetty.server.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.handler.ContextHandlerCollection:void setHandlers(org.eclipse.jetty.server.Handler[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.HandlerCollection:void addHandler(org.eclipse.jetty.server.Handler)",
            "org.eclipse.jetty.server.handler.HandlerCollection:void removeHandler(org.eclipse.jetty.server.Handler)"
        ]
    },
    "org.eclipse.jetty.server.handler.DebugHandler:void doStop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void stop()"
        ]
    },
    "org.eclipse.jetty.websocket.WebSocketHandler:void doStop()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.servlet.ServletContextHandler:void doStop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void stop()"
        ]
    },
    "org.eclipse.jetty.server.ssl.SslSelectChannelConnector:javax.net.ssl.SSLEngine createSSLEngine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.ssl.SslSelectChannelConnector:org.eclipse.jetty.io.nio.SelectChannelEndPoint newEndPoint(java.nio.channels.SocketChannel,org.eclipse.jetty.io.nio.SelectorManager$SelectSet,java.nio.channels.SelectionKey)",
            "org.eclipse.jetty.server.ssl.SslSelectChannelConnector:void doStart()"
        ]
    },
    "org.eclipse.jetty.server.nio.SelectChannelConnector:void doStop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void stop()"
        ]
    },
    "org.eclipse.jetty.server.bio.SocketConnector:void doStop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void stop()"
        ]
    },
    "org.eclipse.jetty.server.NCSARequestLog:void doStop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void stop()"
        ]
    },
    "org.eclipse.jetty.io.bio.StreamEndPoint:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ConnectHandler$ClientToProxyConnection:void closeClient()",
            "org.eclipse.jetty.server.HttpConnection:org.eclipse.jetty.io.Connection handle()",
            "org.eclipse.jetty.server.HttpConnection:void handleRequest()",
            "org.eclipse.jetty.io.nio.SelectorManager$SelectSet:void stop()",
            "org.eclipse.jetty.http.AbstractGenerator:void blockForOutput(long)",
            "org.eclipse.jetty.http.HttpParser:org.eclipse.jetty.io.Buffer blockForContent(long)",
            "org.eclipse.jetty.websocket.WebSocketConnectionD00:org.eclipse.jetty.io.Connection handle()",
            "org.eclipse.jetty.websocket.WebSocketConnectionD00:void disconnect()"
        ]
    },
    "org.eclipse.jetty.util.MultiPartInputStream$MultiPart:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.MultiPartInputStream:void parse()"
        ]
    },
    "org.eclipse.jetty.util.MultiPartInputStream$MultiPart:void createFile()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.MultiPartInputStream$MultiPart:void open()",
            "org.eclipse.jetty.util.MultiPartInputStream$MultiPart:void write(int)",
            "org.eclipse.jetty.util.MultiPartInputStream$MultiPart:void write(byte[],int,int)"
        ]
    },
    "org.eclipse.jetty.util.RolloverFileOutputStream:void setFile()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.RolloverFileOutputStream:void <init>(java.lang.String,boolean,int,java.util.TimeZone,java.lang.String,java.lang.String)",
            "org.eclipse.jetty.util.RolloverFileOutputStream:void access$100(org.eclipse.jetty.util.RolloverFileOutputStream)"
        ]
    },
    "org.eclipse.jetty.util.IO:void close(java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.HashSessionManager$HashedSession:void idle()",
            "org.eclipse.jetty.server.session.HashSessionManager:void saveSessions()",
            "org.eclipse.jetty.util.resource.JarResource:void copyTo(java.io.File)"
        ]
    },
    "org.eclipse.jetty.server.session.AbstractSessionManager$Session:void <init>(org.eclipse.jetty.server.session.AbstractSessionManager,javax.servlet.http.HttpServletRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.HashSessionManager$HashedSession:void <init>(org.eclipse.jetty.server.session.HashSessionManager,javax.servlet.http.HttpServletRequest)",
            "org.eclipse.jetty.server.session.JDBCSessionManager$Session:void <init>(org.eclipse.jetty.server.session.JDBCSessionManager,javax.servlet.http.HttpServletRequest)"
        ]
    },
    "org.eclipse.jetty.server.ssl.SslSelectChannelConnector:void customize(org.eclipse.jetty.io.EndPoint,org.eclipse.jetty.server.Request)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.HttpConnection:void handleRequest()"
        ]
    },
    "org.eclipse.jetty.server.ssl.SslSocketConnector:void customize(org.eclipse.jetty.io.EndPoint,org.eclipse.jetty.server.Request)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.HttpConnection:void handleRequest()"
        ]
    },
    "org.eclipse.jetty.server.HttpWriter:void write(char[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.HttpWriter:void write(java.lang.String,int,int)",
            "org.eclipse.jetty.server.HttpWriter:void write(char[],int,int)",
            "org.eclipse.jetty.io.UncheckedPrintWriter:void write(char[],int,int)",
            "org.eclipse.jetty.util.IO:void copy(java.io.Reader,java.io.Writer,long)"
        ]
    },
    "org.eclipse.jetty.server.NCSARequestLog:void log(org.eclipse.jetty.server.Request,org.eclipse.jetty.server.Response)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.RequestLogHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.io.UncheckedPrintWriter:void flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ErrorHandler:void writeErrorPageStacks(javax.servlet.http.HttpServletRequest,java.io.Writer)",
            "org.eclipse.jetty.server.HttpWriter:void write(char[],int,int)",
            "org.eclipse.jetty.server.NCSARequestLog:void log(org.eclipse.jetty.server.Request,org.eclipse.jetty.server.Response)",
            "org.eclipse.jetty.server.NCSARequestLog:void doStop()",
            "org.eclipse.jetty.io.UncheckedPrintWriter:void flush()",
            "org.eclipse.jetty.io.UncheckedPrintWriter:void newLine()",
            "org.eclipse.jetty.io.WriterOutputStream:void flush()"
        ]
    },
    "org.eclipse.jetty.io.UncheckedPrintWriter:void newLine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.io.UncheckedPrintWriter:void println()"
        ]
    },
    "org.eclipse.jetty.io.WriterOutputStream:void flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.io.bio.StreamEndPoint:void flush()",
            "org.eclipse.jetty.util.MultiPartInputStream$MultiPart:void createFile()"
        ]
    },
    "org.eclipse.jetty.servlet.ServletHandler:void addFilterWithMapping(org.eclipse.jetty.servlet.FilterHolder,java.lang.String,java.util.EnumSet)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletHandler:org.eclipse.jetty.servlet.FilterHolder addFilterWithMapping(java.lang.Class,java.lang.String,java.util.EnumSet)",
            "org.eclipse.jetty.servlet.ServletHandler:org.eclipse.jetty.servlet.FilterHolder addFilterWithMapping(java.lang.String,java.lang.String,java.util.EnumSet)",
            "org.eclipse.jetty.servlet.ServletContextHandler:void addFilter(org.eclipse.jetty.servlet.FilterHolder,java.lang.String,java.util.EnumSet)"
        ]
    },
    "org.eclipse.jetty.servlet.ServletHandler:void addFilter(org.eclipse.jetty.servlet.FilterHolder,org.eclipse.jetty.servlet.FilterMapping)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.servlet.ServletHandler:void addFilterMapping(org.eclipse.jetty.servlet.FilterMapping)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.FilterHolder$Registration:void addMappingForServletNames(java.util.EnumSet,boolean,java.lang.String[])",
            "org.eclipse.jetty.servlet.FilterHolder$Registration:void addMappingForUrlPatterns(java.util.EnumSet,boolean,java.lang.String[])"
        ]
    },
    "org.eclipse.jetty.servlet.ServletHandler:void prependFilterMapping(org.eclipse.jetty.servlet.FilterMapping)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.FilterHolder$Registration:void addMappingForServletNames(java.util.EnumSet,boolean,java.lang.String[])",
            "org.eclipse.jetty.servlet.FilterHolder$Registration:void addMappingForUrlPatterns(java.util.EnumSet,boolean,java.lang.String[])"
        ]
    },
    "org.eclipse.jetty.servlet.ServletHandler:void addServletWithMapping(org.eclipse.jetty.servlet.ServletHolder,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletHandler:org.eclipse.jetty.servlet.ServletHolder addServletWithMapping(java.lang.String,java.lang.String)",
            "org.eclipse.jetty.servlet.ServletHandler:org.eclipse.jetty.servlet.ServletHolder addServletWithMapping(java.lang.Class,java.lang.String)",
            "org.eclipse.jetty.servlet.ServletContextHandler:void addServlet(org.eclipse.jetty.servlet.ServletHolder,java.lang.String)"
        ]
    },
    "org.eclipse.jetty.servlet.ServletHandler:void addServletMapping(org.eclipse.jetty.servlet.ServletMapping)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletHolder$Registration:java.util.Set addMapping(java.lang.String[])"
        ]
    },
    "org.eclipse.jetty.server.AsyncContinuation:boolean unhandle()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.HttpConnection:void handleRequest()"
        ]
    },
    "org.eclipse.jetty.util.thread.Timeout:void tick()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.thread.Timeout:void tick(long)"
        ]
    },
    "org.eclipse.jetty.server.session.JDBCSessionIdManager:void scavenge()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.JDBCSessionIdManager:void access$000(org.eclipse.jetty.server.session.JDBCSessionIdManager)"
        ]
    },
    "org.eclipse.jetty.server.session.HashSessionManager$HashedSession:boolean isNotAvailable()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.AbstractSessionManager$Session:java.lang.Object getAttribute(java.lang.String)",
            "org.eclipse.jetty.server.session.AbstractSessionManager$Session:java.util.Enumeration getAttributeNames()",
            "org.eclipse.jetty.server.session.AbstractSessionManager$Session:long getCreationTime()",
            "org.eclipse.jetty.server.session.AbstractSessionManager$Session:long getLastAccessedTime()",
            "org.eclipse.jetty.server.session.AbstractSessionManager$Session:int getMaxInactiveInterval()",
            "org.eclipse.jetty.server.session.AbstractSessionManager$Session:javax.servlet.http.HttpSessionContext getSessionContext()",
            "org.eclipse.jetty.server.session.AbstractSessionManager$Session:java.lang.String[] getValueNames()",
            "org.eclipse.jetty.server.session.AbstractSessionManager$Session:void doInvalidate()",
            "org.eclipse.jetty.server.session.AbstractSessionManager$Session:boolean isNew()",
            "org.eclipse.jetty.server.session.AbstractSessionManager$Session:void removeAttribute(java.lang.String)",
            "org.eclipse.jetty.server.session.AbstractSessionManager$Session:void setAttribute(java.lang.String,java.lang.Object)"
        ]
    },
    "org.eclipse.jetty.server.session.HashSessionManager:org.eclipse.jetty.server.session.AbstractSessionManager$Session getSession(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.AbstractSessionManager:javax.servlet.http.HttpSession getHttpSession(java.lang.String)"
        ]
    },
    "org.eclipse.jetty.server.session.AbstractSessionManager:void doStop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.JDBCSessionManager:void doStop()",
            "org.eclipse.jetty.server.session.HashSessionManager:void doStop()"
        ]
    },
    "org.eclipse.jetty.server.Response:java.lang.String encodeRedirectURL(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.DefaultServlet:void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ResourceHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.Response:java.lang.String encodeRedirectUrl(java.lang.String)",
            "org.eclipse.jetty.security.authentication.FormAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)"
        ]
    },
    "org.eclipse.jetty.server.Response:java.lang.String encodeUrl(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.servlet.ServletContextHandler:void <init>(org.eclipse.jetty.server.HandlerContainer,java.lang.String,org.eclipse.jetty.server.session.SessionHandler,org.eclipse.jetty.security.SecurityHandler,org.eclipse.jetty.servlet.ServletHandler,org.eclipse.jetty.server.handler.ErrorHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletContextHandler:void <init>(org.eclipse.jetty.server.HandlerContainer,java.lang.String)",
            "org.eclipse.jetty.servlet.ServletContextHandler:void <init>(org.eclipse.jetty.server.HandlerContainer,java.lang.String,int)",
            "org.eclipse.jetty.servlet.ServletContextHandler:void <init>(org.eclipse.jetty.server.HandlerContainer,org.eclipse.jetty.server.session.SessionHandler,org.eclipse.jetty.security.SecurityHandler,org.eclipse.jetty.servlet.ServletHandler,org.eclipse.jetty.server.handler.ErrorHandler)"
        ]
    },
    "org.eclipse.jetty.server.handler.ContextHandlerCollection:org.eclipse.jetty.server.handler.ContextHandler addContext(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.handler.ContextHandler:void <init>(org.eclipse.jetty.server.HandlerContainer,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.MovedContextHandler:void <init>(org.eclipse.jetty.server.HandlerContainer,java.lang.String,java.lang.String)"
        ]
    },
    "org.eclipse.jetty.server.ssl.SslSelectChannelConnector:org.eclipse.jetty.io.nio.SelectChannelEndPoint newEndPoint(java.nio.channels.SocketChannel,org.eclipse.jetty.io.nio.SelectorManager$SelectSet,java.nio.channels.SelectionKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.nio.SelectChannelConnector$1:org.eclipse.jetty.io.nio.SelectChannelEndPoint newEndPoint(java.nio.channels.SocketChannel,org.eclipse.jetty.io.nio.SelectorManager$SelectSet,java.nio.channels.SelectionKey)"
        ]
    },
    "org.eclipse.jetty.util.MultiPartInputStream:void parse()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.MultiPartInputStream:java.util.Collection getParts()",
            "org.eclipse.jetty.util.MultiPartInputStream:javax.servlet.http.Part getPart(java.lang.String)"
        ]
    },
    "org.eclipse.jetty.util.MultiPartInputStream$MultiPart:void open()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.MultiPartInputStream:void parse()"
        ]
    },
    "org.eclipse.jetty.util.MultiPartInputStream$MultiPart:void write(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.MultiPartInputStream:void parse()"
        ]
    },
    "org.eclipse.jetty.util.MultiPartInputStream$MultiPart:void write(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.MultiPartInputStream:void parse()"
        ]
    },
    "org.eclipse.jetty.util.RolloverFileOutputStream:void <init>(java.lang.String,boolean,int,java.util.TimeZone,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.NCSARequestLog:void doStart()",
            "org.eclipse.jetty.util.RolloverFileOutputStream:void <init>(java.lang.String,boolean,int,java.util.TimeZone)"
        ]
    },
    "org.eclipse.jetty.util.RolloverFileOutputStream:void access$100(org.eclipse.jetty.util.RolloverFileOutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.RolloverFileOutputStream$RollTask:void run()"
        ]
    },
    "org.eclipse.jetty.server.session.HashSessionManager$HashedSession:void idle()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.HashSessionManager:void scavenge()"
        ]
    },
    "org.eclipse.jetty.server.session.HashSessionManager:void saveSessions()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.HashSessionManager$1:void run()",
            "org.eclipse.jetty.server.session.HashSessionManager:void doStop()"
        ]
    },
    "org.eclipse.jetty.util.resource.JarResource:void copyTo(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.resource.ResourceCollection:void copyTo(java.io.File)"
        ]
    },
    "org.eclipse.jetty.server.session.HashSessionManager$HashedSession:void <init>(org.eclipse.jetty.server.session.HashSessionManager,javax.servlet.http.HttpServletRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.HashSessionManager:org.eclipse.jetty.server.session.AbstractSessionManager$Session newSession(javax.servlet.http.HttpServletRequest)"
        ]
    },
    "org.eclipse.jetty.server.session.JDBCSessionManager$Session:void <init>(org.eclipse.jetty.server.session.JDBCSessionManager,javax.servlet.http.HttpServletRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.JDBCSessionManager:org.eclipse.jetty.server.session.AbstractSessionManager$Session newSession(javax.servlet.http.HttpServletRequest)"
        ]
    },
    "org.eclipse.jetty.server.HttpWriter:void write(java.lang.String,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.HttpWriter:void write(java.lang.String,int,int)",
            "org.eclipse.jetty.io.UncheckedPrintWriter:void write(java.lang.String,int,int)"
        ]
    },
    "org.eclipse.jetty.io.UncheckedPrintWriter:void write(char[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.HttpWriter:void write(char[],int,int)",
            "org.eclipse.jetty.io.UncheckedPrintWriter:void write(char[],int,int)",
            "org.eclipse.jetty.io.UncheckedPrintWriter:void write(char[])",
            "org.eclipse.jetty.util.IO:void copy(java.io.Reader,java.io.Writer,long)"
        ]
    },
    "org.eclipse.jetty.util.IO:void copy(java.io.Reader,java.io.Writer,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.IO:void copy(java.io.Reader,java.io.Writer)",
            "org.eclipse.jetty.util.IO$Job:void run()"
        ]
    },
    "org.eclipse.jetty.server.handler.ErrorHandler:void writeErrorPageStacks(javax.servlet.http.HttpServletRequest,java.io.Writer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ErrorHandler:void writeErrorPageBody(javax.servlet.http.HttpServletRequest,java.io.Writer,int,java.lang.String,boolean)"
        ]
    },
    "org.eclipse.jetty.io.UncheckedPrintWriter:void println()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.io.UncheckedPrintWriter:void println(boolean)",
            "org.eclipse.jetty.io.UncheckedPrintWriter:void println(char)",
            "org.eclipse.jetty.io.UncheckedPrintWriter:void println(int)",
            "org.eclipse.jetty.io.UncheckedPrintWriter:void println(long)",
            "org.eclipse.jetty.io.UncheckedPrintWriter:void println(float)",
            "org.eclipse.jetty.io.UncheckedPrintWriter:void println(double)",
            "org.eclipse.jetty.io.UncheckedPrintWriter:void println(char[])",
            "org.eclipse.jetty.io.UncheckedPrintWriter:void println(java.lang.String)",
            "org.eclipse.jetty.io.UncheckedPrintWriter:void println(java.lang.Object)"
        ]
    },
    "org.eclipse.jetty.io.bio.StreamEndPoint:void flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.HttpConnection:org.eclipse.jetty.io.Connection handle()",
            "org.eclipse.jetty.websocket.WebSocketConnectionD00:org.eclipse.jetty.io.Connection handle()"
        ]
    },
    "org.eclipse.jetty.servlet.ServletHandler:org.eclipse.jetty.servlet.FilterHolder addFilterWithMapping(java.lang.Class,java.lang.String,java.util.EnumSet)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletContextHandler:org.eclipse.jetty.servlet.FilterHolder addFilter(java.lang.Class,java.lang.String,java.util.EnumSet)"
        ]
    },
    "org.eclipse.jetty.servlet.ServletHandler:org.eclipse.jetty.servlet.FilterHolder addFilterWithMapping(java.lang.String,java.lang.String,java.util.EnumSet)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletHandler:org.eclipse.jetty.servlet.FilterHolder addFilter(java.lang.String,java.lang.String,java.util.EnumSet)",
            "org.eclipse.jetty.servlet.ServletContextHandler:org.eclipse.jetty.servlet.FilterHolder addFilter(java.lang.String,java.lang.String,java.util.EnumSet)"
        ]
    },
    "org.eclipse.jetty.servlet.ServletContextHandler:void addFilter(org.eclipse.jetty.servlet.FilterHolder,java.lang.String,java.util.EnumSet)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.servlet.FilterHolder$Registration:void addMappingForServletNames(java.util.EnumSet,boolean,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.servlet.FilterHolder$Registration:void addMappingForUrlPatterns(java.util.EnumSet,boolean,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.servlet.ServletHandler:org.eclipse.jetty.servlet.ServletHolder addServletWithMapping(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.Invoker:void service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.servlet.ServletContextHandler:org.eclipse.jetty.servlet.ServletHolder addServlet(java.lang.String,java.lang.String)",
            "org.eclipse.jetty.servlet.ServletContextHandler:org.eclipse.jetty.servlet.ServletHolder addServlet(java.lang.Class,java.lang.String)"
        ]
    },
    "org.eclipse.jetty.servlet.ServletHandler:org.eclipse.jetty.servlet.ServletHolder addServletWithMapping(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.servlet.ServletContextHandler:void addServlet(org.eclipse.jetty.servlet.ServletHolder,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.servlet.ServletHolder$Registration:java.util.Set addMapping(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.util.thread.Timeout:void tick(long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.session.JDBCSessionIdManager:void access$000(org.eclipse.jetty.server.session.JDBCSessionIdManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.JDBCSessionIdManager$1:void run()"
        ]
    },
    "org.eclipse.jetty.server.session.AbstractSessionManager$Session:java.lang.Object getAttribute(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.AbstractSessionManager$Session:java.lang.Object getValue(java.lang.String)",
            "org.eclipse.jetty.security.authentication.FormAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)",
            "org.eclipse.jetty.security.authentication.SessionAuthentication:void logout()",
            "org.eclipse.jetty.security.authentication.LoginAuthenticator:javax.servlet.http.HttpSession renewSessionOnAuthentication(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.session.AbstractSessionManager$Session:java.util.Enumeration getAttributeNames()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.security.authentication.LoginAuthenticator:javax.servlet.http.HttpSession renewSessionOnAuthentication(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.session.AbstractSessionManager$Session:long getCreationTime()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.AbstractSessionManager:void removeSession(org.eclipse.jetty.server.session.AbstractSessionManager$Session,boolean)"
        ]
    },
    "org.eclipse.jetty.server.session.AbstractSessionManager$Session:long getLastAccessedTime()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.session.AbstractSessionManager$Session:int getMaxInactiveInterval()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.session.AbstractSessionManager$Session:javax.servlet.http.HttpSessionContext getSessionContext()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.session.AbstractSessionManager$Session:java.lang.String[] getValueNames()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.session.AbstractSessionManager$Session:void doInvalidate()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.AbstractSessionManager$Session:void complete()",
            "org.eclipse.jetty.server.session.AbstractSessionManager$Session:void timeout()",
            "org.eclipse.jetty.server.session.AbstractSessionManager$Session:void invalidate()"
        ]
    },
    "org.eclipse.jetty.server.session.AbstractSessionManager$Session:boolean isNew()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.session.AbstractSessionManager$Session:void removeAttribute(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.AbstractSessionManager$Session:void removeValue(java.lang.String)",
            "org.eclipse.jetty.server.session.AbstractSessionManager$Session:void setAttribute(java.lang.String,java.lang.Object)",
            "org.eclipse.jetty.server.session.JDBCSessionManager$Session:void removeAttribute(java.lang.String)",
            "org.eclipse.jetty.security.authentication.FormAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)",
            "org.eclipse.jetty.security.authentication.SessionAuthentication:void logout()",
            "org.eclipse.jetty.security.authentication.SessionAuthentication:void doLogout()",
            "org.eclipse.jetty.security.authentication.LoginAuthenticator:javax.servlet.http.HttpSession renewSessionOnAuthentication(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.session.AbstractSessionManager$Session:void setAttribute(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.AbstractSessionManager$Session:void putValue(java.lang.String,java.lang.Object)",
            "org.eclipse.jetty.server.session.JDBCSessionManager$Session:void setAttribute(java.lang.String,java.lang.Object)",
            "org.eclipse.jetty.server.session.HashSessionManager:org.eclipse.jetty.server.session.HashSessionManager$HashedSession restoreSession(java.io.InputStream,org.eclipse.jetty.server.session.HashSessionManager$HashedSession)",
            "org.eclipse.jetty.security.authentication.FormAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)",
            "org.eclipse.jetty.security.authentication.LoginAuthenticator:javax.servlet.http.HttpSession renewSessionOnAuthentication(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.session.JDBCSessionManager:void doStop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void stop()"
        ]
    },
    "org.eclipse.jetty.server.session.HashSessionManager:void doStop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void stop()"
        ]
    },
    "org.eclipse.jetty.server.Response:java.lang.String encodeRedirectUrl(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.servlet.ServletContextHandler:void <init>(org.eclipse.jetty.server.HandlerContainer,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.servlet.ServletContextHandler:void <init>(org.eclipse.jetty.server.HandlerContainer,java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletContextHandler:void <init>(int)",
            "org.eclipse.jetty.servlet.ServletContextHandler:void <init>(org.eclipse.jetty.server.HandlerContainer,java.lang.String,boolean,boolean)"
        ]
    },
    "org.eclipse.jetty.servlet.ServletContextHandler:void <init>(org.eclipse.jetty.server.HandlerContainer,org.eclipse.jetty.server.session.SessionHandler,org.eclipse.jetty.security.SecurityHandler,org.eclipse.jetty.servlet.ServletHandler,org.eclipse.jetty.server.handler.ErrorHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.ServletContextHandler:void <init>()"
        ]
    },
    "org.eclipse.jetty.server.handler.MovedContextHandler:void <init>(org.eclipse.jetty.server.HandlerContainer,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.nio.SelectChannelConnector$1:org.eclipse.jetty.io.nio.SelectChannelEndPoint newEndPoint(java.nio.channels.SocketChannel,org.eclipse.jetty.io.nio.SelectorManager$SelectSet,java.nio.channels.SelectionKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.io.nio.SelectorManager$SelectSet:org.eclipse.jetty.io.nio.SelectChannelEndPoint createEndPoint(java.nio.channels.SocketChannel,java.nio.channels.SelectionKey)"
        ]
    },
    "org.eclipse.jetty.util.MultiPartInputStream:java.util.Collection getParts()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.Request:java.util.Collection getParts()"
        ]
    },
    "org.eclipse.jetty.util.MultiPartInputStream:javax.servlet.http.Part getPart(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.Request:javax.servlet.http.Part getPart(java.lang.String)"
        ]
    },
    "org.eclipse.jetty.server.NCSARequestLog:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.component.AbstractLifeCycle:void start()"
        ]
    },
    "org.eclipse.jetty.util.RolloverFileOutputStream:void <init>(java.lang.String,boolean,int,java.util.TimeZone)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.RolloverFileOutputStream:void <init>(java.lang.String,boolean,int)"
        ]
    },
    "org.eclipse.jetty.util.RolloverFileOutputStream$RollTask:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ContextHandler:void handle(java.lang.Runnable)",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:void shutdownOutput()",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int fill(org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int flush(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.util.thread.OldQueuedThreadPool$PoolThread:void run()",
            "org.eclipse.jetty.util.thread.QueuedThreadPool$2:void run()",
            "org.eclipse.jetty.util.thread.ExecutorThreadPool:boolean dispatch(java.lang.Runnable)"
        ]
    },
    "org.eclipse.jetty.server.session.HashSessionManager$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ContextHandler:void handle(java.lang.Runnable)",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:void shutdownOutput()",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int fill(org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int flush(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.util.thread.OldQueuedThreadPool$PoolThread:void run()",
            "org.eclipse.jetty.util.thread.QueuedThreadPool$2:void run()",
            "org.eclipse.jetty.util.thread.ExecutorThreadPool:boolean dispatch(java.lang.Runnable)"
        ]
    },
    "org.eclipse.jetty.util.resource.ResourceCollection:void copyTo(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.resource.ResourceCollection:void copyTo(java.io.File)"
        ]
    },
    "org.eclipse.jetty.server.session.HashSessionManager:org.eclipse.jetty.server.session.AbstractSessionManager$Session newSession(javax.servlet.http.HttpServletRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.AbstractSessionManager:javax.servlet.http.HttpSession newHttpSession(javax.servlet.http.HttpServletRequest)"
        ]
    },
    "org.eclipse.jetty.server.session.JDBCSessionManager:org.eclipse.jetty.server.session.AbstractSessionManager$Session newSession(javax.servlet.http.HttpServletRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.AbstractSessionManager:javax.servlet.http.HttpSession newHttpSession(javax.servlet.http.HttpServletRequest)"
        ]
    },
    "org.eclipse.jetty.io.UncheckedPrintWriter:void write(java.lang.String,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.io.UncheckedPrintWriter:void write(java.lang.String,int,int)",
            "org.eclipse.jetty.io.UncheckedPrintWriter:void write(java.lang.String)"
        ]
    },
    "org.eclipse.jetty.io.UncheckedPrintWriter:void write(char[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.io.UncheckedPrintWriter:void print(char[])"
        ]
    },
    "org.eclipse.jetty.util.IO:void copy(java.io.Reader,java.io.Writer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.IO:java.lang.String toString(java.io.InputStream,java.lang.String)",
            "org.eclipse.jetty.util.IO:java.lang.String toString(java.io.Reader)"
        ]
    },
    "org.eclipse.jetty.server.handler.ErrorHandler:void writeErrorPageBody(javax.servlet.http.HttpServletRequest,java.io.Writer,int,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ErrorHandler:void writeErrorPage(javax.servlet.http.HttpServletRequest,java.io.Writer,int,java.lang.String,boolean)"
        ]
    },
    "org.eclipse.jetty.io.UncheckedPrintWriter:void println(boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.io.UncheckedPrintWriter:void println(char)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.io.UncheckedPrintWriter:void println(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.io.UncheckedPrintWriter:void println(long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.io.UncheckedPrintWriter:void println(float)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.io.UncheckedPrintWriter:void println(double)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.io.UncheckedPrintWriter:void println(char[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.io.UncheckedPrintWriter:void println(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ResourceHandler:void doDirectory(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.eclipse.jetty.util.resource.Resource)"
        ]
    },
    "org.eclipse.jetty.io.UncheckedPrintWriter:void println(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.servlet.ServletContextHandler:org.eclipse.jetty.servlet.FilterHolder addFilter(java.lang.Class,java.lang.String,java.util.EnumSet)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.servlet.ServletHandler:org.eclipse.jetty.servlet.FilterHolder addFilter(java.lang.String,java.lang.String,java.util.EnumSet)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.servlet.ServletContextHandler:org.eclipse.jetty.servlet.FilterHolder addFilter(java.lang.String,java.lang.String,java.util.EnumSet)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.servlet.ServletContextHandler:org.eclipse.jetty.servlet.ServletHolder addServlet(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.servlet.ServletContextHandler:org.eclipse.jetty.servlet.ServletHolder addServlet(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.session.JDBCSessionIdManager$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ContextHandler:void handle(java.lang.Runnable)",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:void shutdownOutput()",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int fill(org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.io.nio.SslSelectChannelEndPoint:int flush(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.util.thread.OldQueuedThreadPool$PoolThread:void run()",
            "org.eclipse.jetty.util.thread.QueuedThreadPool$2:void run()",
            "org.eclipse.jetty.util.thread.ExecutorThreadPool:boolean dispatch(java.lang.Runnable)"
        ]
    },
    "org.eclipse.jetty.server.session.AbstractSessionManager$Session:java.lang.Object getValue(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.security.authentication.SessionAuthentication:void logout()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.Request:void logout()"
        ]
    },
    "org.eclipse.jetty.server.session.AbstractSessionManager$Session:void complete()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.AbstractSessionManager:void complete(javax.servlet.http.HttpSession)",
            "org.eclipse.jetty.server.session.JDBCSessionManager$Session:void complete()"
        ]
    },
    "org.eclipse.jetty.server.session.AbstractSessionManager$Session:void removeValue(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.session.JDBCSessionManager$Session:void removeAttribute(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.AbstractSessionManager$Session:void removeValue(java.lang.String)",
            "org.eclipse.jetty.server.session.AbstractSessionManager$Session:void setAttribute(java.lang.String,java.lang.Object)",
            "org.eclipse.jetty.security.authentication.FormAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)",
            "org.eclipse.jetty.security.authentication.SessionAuthentication:void logout()",
            "org.eclipse.jetty.security.authentication.SessionAuthentication:void doLogout()",
            "org.eclipse.jetty.security.authentication.LoginAuthenticator:javax.servlet.http.HttpSession renewSessionOnAuthentication(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.security.authentication.SessionAuthentication:void doLogout()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.security.authentication.SessionAuthentication:void logout()",
            "org.eclipse.jetty.security.authentication.SessionAuthentication:void valueUnbound(javax.servlet.http.HttpSessionBindingEvent)"
        ]
    },
    "org.eclipse.jetty.server.session.AbstractSessionManager$Session:void putValue(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.session.JDBCSessionManager$Session:void setAttribute(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.AbstractSessionManager$Session:void putValue(java.lang.String,java.lang.Object)",
            "org.eclipse.jetty.security.authentication.FormAuthenticator:org.eclipse.jetty.server.Authentication validateRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,boolean)",
            "org.eclipse.jetty.security.authentication.LoginAuthenticator:javax.servlet.http.HttpSession renewSessionOnAuthentication(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.session.HashSessionManager:org.eclipse.jetty.server.session.HashSessionManager$HashedSession restoreSession(java.io.InputStream,org.eclipse.jetty.server.session.HashSessionManager$HashedSession)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.HashSessionManager$HashedSession:void deIdle()",
            "org.eclipse.jetty.server.session.HashSessionManager:void restoreSessions()"
        ]
    },
    "org.eclipse.jetty.servlet.ServletContextHandler:void <init>(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.servlet.ServletContextHandler:void <init>(org.eclipse.jetty.server.HandlerContainer,java.lang.String,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.servlet.ServletContextHandler:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.io.nio.SelectorManager$SelectSet:org.eclipse.jetty.io.nio.SelectChannelEndPoint createEndPoint(java.nio.channels.SocketChannel,java.nio.channels.SelectionKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.io.nio.SelectorManager$SelectSet:void doSelect()"
        ]
    },
    "org.eclipse.jetty.util.RolloverFileOutputStream:void <init>(java.lang.String,boolean,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.RolloverFileOutputStream:void <init>(java.lang.String)",
            "org.eclipse.jetty.util.RolloverFileOutputStream:void <init>(java.lang.String,boolean)"
        ]
    },
    "org.eclipse.jetty.server.session.AbstractSessionManager:javax.servlet.http.HttpSession newHttpSession(javax.servlet.http.HttpServletRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.Request:javax.servlet.http.HttpSession getSession(boolean)"
        ]
    },
    "org.eclipse.jetty.io.UncheckedPrintWriter:void write(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.StatisticsServlet:void sendXmlResponse(javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.servlet.StatisticsServlet:void sendTextResponse(javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ErrorHandler:void writeErrorPage(javax.servlet.http.HttpServletRequest,java.io.Writer,int,java.lang.String,boolean)",
            "org.eclipse.jetty.server.handler.ErrorHandler:void writeErrorPageHead(javax.servlet.http.HttpServletRequest,java.io.Writer,int,java.lang.String)",
            "org.eclipse.jetty.server.handler.ErrorHandler:void writeErrorPageBody(javax.servlet.http.HttpServletRequest,java.io.Writer,int,java.lang.String,boolean)",
            "org.eclipse.jetty.server.handler.ErrorHandler:void writeErrorPageMessage(javax.servlet.http.HttpServletRequest,java.io.Writer,int,java.lang.String,java.lang.String)",
            "org.eclipse.jetty.server.handler.ErrorHandler:void writeErrorPageStacks(javax.servlet.http.HttpServletRequest,java.io.Writer)",
            "org.eclipse.jetty.server.handler.ErrorHandler:void write(java.io.Writer,java.lang.String)",
            "org.eclipse.jetty.server.NCSARequestLog:void log(org.eclipse.jetty.server.Request,org.eclipse.jetty.server.Response)",
            "org.eclipse.jetty.io.UncheckedPrintWriter:void newLine()",
            "org.eclipse.jetty.io.UncheckedPrintWriter:void print(boolean)",
            "org.eclipse.jetty.io.UncheckedPrintWriter:void print(int)",
            "org.eclipse.jetty.io.UncheckedPrintWriter:void print(long)",
            "org.eclipse.jetty.io.UncheckedPrintWriter:void print(float)",
            "org.eclipse.jetty.io.UncheckedPrintWriter:void print(double)",
            "org.eclipse.jetty.io.UncheckedPrintWriter:void print(java.lang.String)",
            "org.eclipse.jetty.io.UncheckedPrintWriter:void print(java.lang.Object)",
            "org.eclipse.jetty.io.WriterOutputStream:void write(byte[])",
            "org.eclipse.jetty.io.WriterOutputStream:void write(byte[],int,int)",
            "org.eclipse.jetty.util.MultiPartWriter:void close()",
            "org.eclipse.jetty.util.MultiPartWriter:void startPart(java.lang.String)",
            "org.eclipse.jetty.util.MultiPartWriter:void endPart()",
            "org.eclipse.jetty.util.MultiPartWriter:void startPart(java.lang.String,java.lang.String[])"
        ]
    },
    "org.eclipse.jetty.io.UncheckedPrintWriter:void print(char[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.io.UncheckedPrintWriter:void println(char[])"
        ]
    },
    "org.eclipse.jetty.util.IO:java.lang.String toString(java.io.InputStream,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.IO:java.lang.String toString(java.io.InputStream)"
        ]
    },
    "org.eclipse.jetty.util.IO:java.lang.String toString(java.io.Reader)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.handler.ErrorHandler:void writeErrorPage(javax.servlet.http.HttpServletRequest,java.io.Writer,int,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ErrorHandler:void handleErrorPage(javax.servlet.http.HttpServletRequest,java.io.Writer,int,java.lang.String)"
        ]
    },
    "org.eclipse.jetty.server.Request:void logout()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.server.session.AbstractSessionManager:void complete(javax.servlet.http.HttpSession)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.SessionHandler:void doScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.session.JDBCSessionManager$Session:void complete()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.AbstractSessionManager:void complete(javax.servlet.http.HttpSession)"
        ]
    },
    "org.eclipse.jetty.security.authentication.SessionAuthentication:void valueUnbound(javax.servlet.http.HttpSessionBindingEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.AbstractSessionManager$Session:void unbindValue(java.lang.String,java.lang.Object)"
        ]
    },
    "org.eclipse.jetty.server.session.HashSessionManager:void restoreSessions()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.HashSessionManager:void doStart()",
            "org.eclipse.jetty.server.session.HashSessionManager:void scavenge()",
            "org.eclipse.jetty.server.session.HashSessionManager:org.eclipse.jetty.server.session.AbstractSessionManager$Session getSession(java.lang.String)"
        ]
    },
    "org.eclipse.jetty.util.RolloverFileOutputStream:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.util.RolloverFileOutputStream:void <init>(java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.DebugHandler:void doStart()"
        ]
    },
    "org.eclipse.jetty.servlet.StatisticsServlet:void sendXmlResponse(javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.StatisticsServlet:void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.servlet.StatisticsServlet:void sendTextResponse(javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.StatisticsServlet:void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.handler.ErrorHandler:void writeErrorPageHead(javax.servlet.http.HttpServletRequest,java.io.Writer,int,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ErrorHandler:void writeErrorPage(javax.servlet.http.HttpServletRequest,java.io.Writer,int,java.lang.String,boolean)"
        ]
    },
    "org.eclipse.jetty.server.handler.ErrorHandler:void writeErrorPageMessage(javax.servlet.http.HttpServletRequest,java.io.Writer,int,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ErrorHandler:void writeErrorPageBody(javax.servlet.http.HttpServletRequest,java.io.Writer,int,java.lang.String,boolean)"
        ]
    },
    "org.eclipse.jetty.server.handler.ErrorHandler:void write(java.io.Writer,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ErrorHandler:void writeErrorPageHead(javax.servlet.http.HttpServletRequest,java.io.Writer,int,java.lang.String)",
            "org.eclipse.jetty.server.handler.ErrorHandler:void writeErrorPageMessage(javax.servlet.http.HttpServletRequest,java.io.Writer,int,java.lang.String,java.lang.String)",
            "org.eclipse.jetty.server.handler.ErrorHandler:void writeErrorPageStacks(javax.servlet.http.HttpServletRequest,java.io.Writer)"
        ]
    },
    "org.eclipse.jetty.io.UncheckedPrintWriter:void print(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.io.UncheckedPrintWriter:void println(boolean)"
        ]
    },
    "org.eclipse.jetty.io.UncheckedPrintWriter:void print(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.io.UncheckedPrintWriter:void println(int)"
        ]
    },
    "org.eclipse.jetty.io.UncheckedPrintWriter:void print(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.io.UncheckedPrintWriter:void println(long)"
        ]
    },
    "org.eclipse.jetty.io.UncheckedPrintWriter:void print(float)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.io.UncheckedPrintWriter:void println(float)"
        ]
    },
    "org.eclipse.jetty.io.UncheckedPrintWriter:void print(double)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.io.UncheckedPrintWriter:void println(double)"
        ]
    },
    "org.eclipse.jetty.io.UncheckedPrintWriter:void print(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.HttpConnection$Output:void print(java.lang.String)",
            "org.eclipse.jetty.io.UncheckedPrintWriter:void println(java.lang.String)"
        ]
    },
    "org.eclipse.jetty.io.UncheckedPrintWriter:void print(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.io.UncheckedPrintWriter:void println(java.lang.Object)"
        ]
    },
    "org.eclipse.jetty.io.WriterOutputStream:void write(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.io.WriterOutputStream:void write(int)",
            "org.eclipse.jetty.util.MultiPartOutputStream:void close()",
            "org.eclipse.jetty.util.MultiPartOutputStream:void startPart(java.lang.String)",
            "org.eclipse.jetty.util.MultiPartOutputStream:void startPart(java.lang.String,java.lang.String[])",
            "org.eclipse.jetty.util.RolloverFileOutputStream:void write(byte[])"
        ]
    },
    "org.eclipse.jetty.io.WriterOutputStream:void write(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.io.ByteArrayBuffer:void writeTo(java.io.OutputStream)",
            "org.eclipse.jetty.io.AbstractBuffer:void writeTo(java.io.OutputStream)",
            "org.eclipse.jetty.util.MultiPartInputStream$MultiPart:void write(byte[],int,int)",
            "org.eclipse.jetty.util.RolloverFileOutputStream:void write(byte[],int,int)",
            "org.eclipse.jetty.util.IO:void copy(java.io.InputStream,java.io.OutputStream,long)",
            "org.eclipse.jetty.util.ByteArrayISO8859Writer:void writeTo(java.io.OutputStream)"
        ]
    },
    "org.eclipse.jetty.util.MultiPartWriter:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.io.UncheckedPrintWriter:void close()",
            "org.eclipse.jetty.io.WriterOutputStream:void close()",
            "org.eclipse.jetty.util.IO:void close(java.io.Writer)",
            "org.eclipse.jetty.util.IO$Job:void run()"
        ]
    },
    "org.eclipse.jetty.util.MultiPartWriter:void startPart(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.util.MultiPartWriter:void endPart()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.util.MultiPartWriter:void startPart(java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.util.IO:java.lang.String toString(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.ajax.JSON:java.lang.Object parse(java.io.InputStream)",
            "org.eclipse.jetty.util.ajax.JSON:java.lang.Object parse(java.io.InputStream,boolean)"
        ]
    },
    "org.eclipse.jetty.server.handler.ErrorHandler:void handleErrorPage(javax.servlet.http.HttpServletRequest,java.io.Writer,int,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ErrorHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.eclipse.jetty.server.session.AbstractSessionManager$Session:void unbindValue(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.session.AbstractSessionManager$Session:void doInvalidate()",
            "org.eclipse.jetty.server.session.AbstractSessionManager$Session:void removeAttribute(java.lang.String)",
            "org.eclipse.jetty.server.session.AbstractSessionManager$Session:void setAttribute(java.lang.String,java.lang.Object)"
        ]
    },
    "org.eclipse.jetty.server.HttpConnection$Output:void print(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.io.WriterOutputStream:void write(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.MultiPartInputStream$MultiPart:void write(int)"
        ]
    },
    "org.eclipse.jetty.util.MultiPartOutputStream:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.DefaultServlet:void sendData(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,boolean,org.eclipse.jetty.util.resource.Resource,org.eclipse.jetty.http.HttpContent,java.util.Enumeration)",
            "org.eclipse.jetty.server.handler.DefaultHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.NCSARequestLog:void doStop()",
            "org.eclipse.jetty.io.bio.StreamEndPoint:void close()",
            "org.eclipse.jetty.util.MultiPartInputStream$MultiPart:void close()",
            "org.eclipse.jetty.util.MultiPartInputStream$MultiPart:void createFile()",
            "org.eclipse.jetty.util.RolloverFileOutputStream:void setFile()",
            "org.eclipse.jetty.util.IO:void close(java.io.OutputStream)",
            "org.eclipse.jetty.util.IO$Job:void run()"
        ]
    },
    "org.eclipse.jetty.util.MultiPartOutputStream:void startPart(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.util.MultiPartOutputStream:void startPart(java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.DefaultServlet:void sendData(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,boolean,org.eclipse.jetty.util.resource.Resource,org.eclipse.jetty.http.HttpContent,java.util.Enumeration)"
        ]
    },
    "org.eclipse.jetty.util.RolloverFileOutputStream:void write(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.MultiPartOutputStream:void close()",
            "org.eclipse.jetty.util.MultiPartOutputStream:void startPart(java.lang.String)",
            "org.eclipse.jetty.util.MultiPartOutputStream:void startPart(java.lang.String,java.lang.String[])",
            "org.eclipse.jetty.util.RolloverFileOutputStream:void write(byte[])"
        ]
    },
    "org.eclipse.jetty.io.ByteArrayBuffer:void writeTo(java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.DefaultServlet:void sendData(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,boolean,org.eclipse.jetty.util.resource.Resource,org.eclipse.jetty.http.HttpContent,java.util.Enumeration)",
            "org.eclipse.jetty.io.bio.StreamEndPoint:int flush(org.eclipse.jetty.io.Buffer)"
        ]
    },
    "org.eclipse.jetty.io.AbstractBuffer:void writeTo(java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.DefaultServlet:void sendData(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,boolean,org.eclipse.jetty.util.resource.Resource,org.eclipse.jetty.http.HttpContent,java.util.Enumeration)",
            "org.eclipse.jetty.io.bio.StreamEndPoint:int flush(org.eclipse.jetty.io.Buffer)"
        ]
    },
    "org.eclipse.jetty.util.RolloverFileOutputStream:void write(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.io.ByteArrayBuffer:void writeTo(java.io.OutputStream)",
            "org.eclipse.jetty.io.AbstractBuffer:void writeTo(java.io.OutputStream)",
            "org.eclipse.jetty.util.MultiPartInputStream$MultiPart:void write(byte[],int,int)",
            "org.eclipse.jetty.util.RolloverFileOutputStream:void write(byte[],int,int)",
            "org.eclipse.jetty.util.IO:void copy(java.io.InputStream,java.io.OutputStream,long)",
            "org.eclipse.jetty.util.ByteArrayISO8859Writer:void writeTo(java.io.OutputStream)"
        ]
    },
    "org.eclipse.jetty.util.IO:void copy(java.io.InputStream,java.io.OutputStream,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.DefaultServlet:void sendData(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,boolean,org.eclipse.jetty.util.resource.Resource,org.eclipse.jetty.http.HttpContent,java.util.Enumeration)",
            "org.eclipse.jetty.util.resource.Resource:void writeTo(java.io.OutputStream,long,long)",
            "org.eclipse.jetty.util.IO:void copy(java.io.InputStream,java.io.OutputStream)",
            "org.eclipse.jetty.util.IO$Job:void run()"
        ]
    },
    "org.eclipse.jetty.util.ByteArrayISO8859Writer:void writeTo(java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.DefaultHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.handler.ErrorHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.server.Response:void sendError(int,java.lang.String)"
        ]
    },
    "org.eclipse.jetty.util.ajax.JSON:java.lang.Object parse(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.util.ajax.JSON:java.lang.Object parse(java.io.InputStream,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.io.bio.StreamEndPoint:int flush(org.eclipse.jetty.io.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.ConnectHandler:int write(org.eclipse.jetty.io.EndPoint,org.eclipse.jetty.io.Buffer,java.util.concurrent.ConcurrentMap)",
            "org.eclipse.jetty.io.bio.StreamEndPoint:int flush(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)",
            "org.eclipse.jetty.http.HttpGenerator:void send1xx(int)",
            "org.eclipse.jetty.http.HttpGenerator:long flushBuffer()",
            "org.eclipse.jetty.websocket.WebSocketGeneratorD00:int flushBuffer()",
            "org.eclipse.jetty.websocket.WebSocketGeneratorD01:int flushBuffer()",
            "org.eclipse.jetty.websocket.WebSocketConnectionD00:org.eclipse.jetty.io.Connection handle()"
        ]
    },
    "org.eclipse.jetty.util.resource.Resource:void writeTo(java.io.OutputStream,long,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.servlet.DefaultServlet:void sendData(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,boolean,org.eclipse.jetty.util.resource.Resource,org.eclipse.jetty.http.HttpContent,java.util.Enumeration)",
            "org.eclipse.jetty.server.handler.ResourceHandler:void handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.eclipse.jetty.util.resource.Resource:void copyTo(java.io.File)"
        ]
    },
    "org.eclipse.jetty.util.IO:void copy(java.io.InputStream,java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.resource.JarResource:void copyTo(java.io.File)",
            "org.eclipse.jetty.util.resource.Resource:void writeTo(java.io.OutputStream,long,long)",
            "org.eclipse.jetty.util.IO:void copyFile(java.io.File,java.io.File)",
            "org.eclipse.jetty.util.IO:byte[] readBytes(java.io.InputStream)"
        ]
    },
    "org.eclipse.jetty.io.bio.StreamEndPoint:int flush(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.http.HttpGenerator:long flushBuffer()"
        ]
    },
    "org.eclipse.jetty.util.resource.Resource:void copyTo(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.resource.ResourceCollection:void copyTo(java.io.File)"
        ]
    },
    "org.eclipse.jetty.util.IO:void copyFile(java.io.File,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.IO:void copy(java.io.File,java.io.File)"
        ]
    },
    "org.eclipse.jetty.util.IO:byte[] readBytes(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.server.handler.DefaultHandler:void <init>()"
        ]
    },
    "org.eclipse.jetty.util.IO:void copy(java.io.File,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.resource.FileResource:void copyTo(java.io.File)",
            "org.eclipse.jetty.util.IO:void copyDir(java.io.File,java.io.File)"
        ]
    },
    "org.eclipse.jetty.server.handler.DefaultHandler:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.jetty.util.resource.FileResource:void copyTo(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.resource.ResourceCollection:void copyTo(java.io.File)"
        ]
    },
    "org.eclipse.jetty.util.IO:void copyDir(java.io.File,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.jetty.util.resource.FileResource:void copyTo(java.io.File)",
            "org.eclipse.jetty.util.IO:void copy(java.io.File,java.io.File)"
        ]
    }
}