{
    "io.undertow.security.impl.DigestAuthenticationMechanism:io.undertow.security.api.AuthenticationMechanism$AuthenticationMechanismOutcome handleDigestHeader(io.undertow.server.HttpServerExchange,io.undertow.security.api.SecurityContext)": {
        "isVulRoot": true,
        "vulCaller": [
            "io.undertow.security.impl.DigestAuthenticationMechanism:io.undertow.security.api.AuthenticationMechanism$AuthenticationMechanismOutcome authenticate(io.undertow.server.HttpServerExchange,io.undertow.security.api.SecurityContext)"
        ]
    },
    "io.undertow.security.impl.DigestAuthenticationMechanism:io.undertow.security.api.AuthenticationMechanism$AuthenticationMechanismOutcome authenticate(io.undertow.server.HttpServerExchange,io.undertow.security.api.SecurityContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.security.impl.SecurityContextImpl$AuthAttempter:io.undertow.security.impl.SecurityContextImpl$AuthenticationState transition()"
        ]
    },
    "io.undertow.security.impl.SecurityContextImpl$AuthAttempter:io.undertow.security.impl.SecurityContextImpl$AuthenticationState transition()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.security.impl.SecurityContextImpl$AuthAttempter:io.undertow.security.impl.SecurityContextImpl$AuthenticationState transition()",
            "io.undertow.security.impl.SecurityContextImpl$AuthAttempter:io.undertow.security.impl.SecurityContextImpl$AuthenticationState access$100(io.undertow.security.impl.SecurityContextImpl$AuthAttempter)"
        ]
    },
    "io.undertow.security.impl.SecurityContextImpl$AuthAttempter:io.undertow.security.impl.SecurityContextImpl$AuthenticationState access$100(io.undertow.security.impl.SecurityContextImpl$AuthAttempter)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.security.impl.SecurityContextImpl:io.undertow.security.impl.SecurityContextImpl$AuthenticationState attemptAuthentication()"
        ]
    },
    "io.undertow.security.impl.SecurityContextImpl:io.undertow.security.impl.SecurityContextImpl$AuthenticationState attemptAuthentication()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.security.impl.SecurityContextImpl:boolean authTransition()"
        ]
    },
    "io.undertow.security.impl.SecurityContextImpl:boolean authTransition()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.security.impl.SecurityContextImpl:boolean authenticate()",
            "io.undertow.security.impl.SecurityContextImpl:boolean authTransition()"
        ]
    },
    "io.undertow.security.impl.SecurityContextImpl:boolean authenticate()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.predicate.PredicatesHandler$DoneHandlerBuilder$1$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractSecurityContextAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.RequestEncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.resource.ResourceHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LearningPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathSeparatorHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConnectHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisableCacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StuckThreadDetectionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ExceptionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumpingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ResponseRateLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ByteRangeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LocalNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StoredResponseHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimit:void handleRequest(io.undertow.server.HttpServerExchange,io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConfiguredPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$3$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$2:void handle(io.undertow.server.HttpServerExchange,byte[],boolean)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleNoMatch(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.predicate.PredicatesHandler$DoneHandlerBuilder$1$1:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.predicate.PredicatesHandler$DoneHandlerBuilder$1$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractSecurityContextAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.RequestEncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.resource.ResourceHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LearningPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathSeparatorHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConnectHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisableCacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StuckThreadDetectionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ExceptionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumpingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ResponseRateLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ByteRangeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LocalNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StoredResponseHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimit:void handleRequest(io.undertow.server.HttpServerExchange,io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConfiguredPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$3$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$2:void handle(io.undertow.server.HttpServerExchange,byte[],boolean)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleNoMatch(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.predicate.PredicatesHandler$DoneHandlerBuilder$1$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractSecurityContextAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.RequestEncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.resource.ResourceHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LearningPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathSeparatorHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConnectHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisableCacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StuckThreadDetectionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ExceptionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumpingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ResponseRateLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ByteRangeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LocalNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StoredResponseHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimit:void handleRequest(io.undertow.server.HttpServerExchange,io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConfiguredPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$3$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$2:void handle(io.undertow.server.HttpServerExchange,byte[],boolean)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleNoMatch(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.predicate.PredicatesHandler$DoneHandlerBuilder$1$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractSecurityContextAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.RequestEncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.resource.ResourceHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LearningPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathSeparatorHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConnectHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisableCacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StuckThreadDetectionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ExceptionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumpingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ResponseRateLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ByteRangeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LocalNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StoredResponseHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimit:void handleRequest(io.undertow.server.HttpServerExchange,io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConfiguredPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$3$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$2:void handle(io.undertow.server.HttpServerExchange,byte[],boolean)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleNoMatch(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.predicate.PredicatesHandler$DoneHandlerBuilder$1$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractSecurityContextAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.RequestEncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.resource.ResourceHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LearningPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathSeparatorHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConnectHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisableCacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StuckThreadDetectionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ExceptionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumpingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ResponseRateLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ByteRangeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LocalNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StoredResponseHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimit:void handleRequest(io.undertow.server.HttpServerExchange,io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConfiguredPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$3$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$2:void handle(io.undertow.server.HttpServerExchange,byte[],boolean)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleNoMatch(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.security.handlers.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.predicate.PredicatesHandler$DoneHandlerBuilder$1$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractSecurityContextAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.RequestEncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.resource.ResourceHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LearningPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathSeparatorHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConnectHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisableCacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StuckThreadDetectionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ExceptionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumpingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ResponseRateLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ByteRangeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LocalNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StoredResponseHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimit:void handleRequest(io.undertow.server.HttpServerExchange,io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConfiguredPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$3$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$2:void handle(io.undertow.server.HttpServerExchange,byte[],boolean)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleNoMatch(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.predicate.PredicatesHandler$DoneHandlerBuilder$1$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractSecurityContextAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.RequestEncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.resource.ResourceHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LearningPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathSeparatorHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConnectHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisableCacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StuckThreadDetectionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ExceptionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumpingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ResponseRateLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ByteRangeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LocalNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StoredResponseHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimit:void handleRequest(io.undertow.server.HttpServerExchange,io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConfiguredPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$3$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$2:void handle(io.undertow.server.HttpServerExchange,byte[],boolean)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleNoMatch(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.predicate.PredicatesHandler$DoneHandlerBuilder$1$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractSecurityContextAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.RequestEncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.resource.ResourceHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LearningPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathSeparatorHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConnectHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisableCacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StuckThreadDetectionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ExceptionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumpingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ResponseRateLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ByteRangeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LocalNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StoredResponseHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimit:void handleRequest(io.undertow.server.HttpServerExchange,io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConfiguredPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$3$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$2:void handle(io.undertow.server.HttpServerExchange,byte[],boolean)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleNoMatch(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.security.handlers.AbstractSecurityContextAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.predicate.PredicatesHandler$DoneHandlerBuilder$1$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractSecurityContextAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.RequestEncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.resource.ResourceHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LearningPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathSeparatorHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConnectHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisableCacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StuckThreadDetectionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ExceptionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumpingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ResponseRateLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ByteRangeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LocalNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StoredResponseHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimit:void handleRequest(io.undertow.server.HttpServerExchange,io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConfiguredPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$3$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$2:void handle(io.undertow.server.HttpServerExchange,byte[],boolean)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleNoMatch(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.predicate.PredicatesHandler$DoneHandlerBuilder$1$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractSecurityContextAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.RequestEncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.resource.ResourceHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LearningPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathSeparatorHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConnectHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisableCacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StuckThreadDetectionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ExceptionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumpingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ResponseRateLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ByteRangeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LocalNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StoredResponseHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimit:void handleRequest(io.undertow.server.HttpServerExchange,io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConfiguredPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$3$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$2:void handle(io.undertow.server.HttpServerExchange,byte[],boolean)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleNoMatch(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.predicate.PredicatesHandler$DoneHandlerBuilder$1$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractSecurityContextAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.RequestEncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.resource.ResourceHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LearningPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathSeparatorHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConnectHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisableCacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StuckThreadDetectionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ExceptionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumpingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ResponseRateLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ByteRangeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LocalNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StoredResponseHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimit:void handleRequest(io.undertow.server.HttpServerExchange,io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConfiguredPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$3$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$2:void handle(io.undertow.server.HttpServerExchange,byte[],boolean)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleNoMatch(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.predicate.PredicatesHandler$DoneHandlerBuilder$1$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractSecurityContextAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.RequestEncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.resource.ResourceHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LearningPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathSeparatorHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConnectHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisableCacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StuckThreadDetectionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ExceptionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumpingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ResponseRateLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ByteRangeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LocalNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StoredResponseHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimit:void handleRequest(io.undertow.server.HttpServerExchange,io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConfiguredPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$3$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$2:void handle(io.undertow.server.HttpServerExchange,byte[],boolean)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleNoMatch(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.encoding.RequestEncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.predicate.PredicatesHandler$DoneHandlerBuilder$1$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractSecurityContextAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.RequestEncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.resource.ResourceHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LearningPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathSeparatorHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConnectHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisableCacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StuckThreadDetectionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ExceptionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumpingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ResponseRateLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ByteRangeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LocalNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StoredResponseHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimit:void handleRequest(io.undertow.server.HttpServerExchange,io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConfiguredPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$3$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$2:void handle(io.undertow.server.HttpServerExchange,byte[],boolean)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleNoMatch(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.predicate.PredicatesHandler$DoneHandlerBuilder$1$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractSecurityContextAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.RequestEncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.resource.ResourceHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LearningPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathSeparatorHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConnectHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisableCacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StuckThreadDetectionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ExceptionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumpingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ResponseRateLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ByteRangeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LocalNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StoredResponseHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimit:void handleRequest(io.undertow.server.HttpServerExchange,io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConfiguredPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$3$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$2:void handle(io.undertow.server.HttpServerExchange,byte[],boolean)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleNoMatch(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.predicate.PredicatesHandler$DoneHandlerBuilder$1$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractSecurityContextAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.RequestEncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.resource.ResourceHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LearningPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathSeparatorHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConnectHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisableCacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StuckThreadDetectionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ExceptionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumpingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ResponseRateLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ByteRangeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LocalNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StoredResponseHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimit:void handleRequest(io.undertow.server.HttpServerExchange,io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConfiguredPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$3$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$2:void handle(io.undertow.server.HttpServerExchange,byte[],boolean)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleNoMatch(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.predicate.PredicatesHandler$DoneHandlerBuilder$1$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractSecurityContextAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.RequestEncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.resource.ResourceHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LearningPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathSeparatorHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConnectHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisableCacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StuckThreadDetectionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ExceptionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumpingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ResponseRateLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ByteRangeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LocalNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StoredResponseHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimit:void handleRequest(io.undertow.server.HttpServerExchange,io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConfiguredPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$3$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$2:void handle(io.undertow.server.HttpServerExchange,byte[],boolean)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleNoMatch(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.predicate.PredicatesHandler$DoneHandlerBuilder$1$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractSecurityContextAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.RequestEncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.resource.ResourceHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LearningPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathSeparatorHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConnectHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisableCacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StuckThreadDetectionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ExceptionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumpingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ResponseRateLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ByteRangeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LocalNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StoredResponseHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimit:void handleRequest(io.undertow.server.HttpServerExchange,io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConfiguredPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$3$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$2:void handle(io.undertow.server.HttpServerExchange,byte[],boolean)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleNoMatch(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPWebManager:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.predicate.PredicatesHandler$DoneHandlerBuilder$1$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractSecurityContextAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.RequestEncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.resource.ResourceHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LearningPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathSeparatorHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConnectHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisableCacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StuckThreadDetectionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ExceptionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumpingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ResponseRateLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ByteRangeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LocalNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StoredResponseHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimit:void handleRequest(io.undertow.server.HttpServerExchange,io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConfiguredPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$3$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$2:void handle(io.undertow.server.HttpServerExchange,byte[],boolean)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleNoMatch(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.resource.ResourceHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.predicate.PredicatesHandler$DoneHandlerBuilder$1$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractSecurityContextAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.RequestEncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.resource.ResourceHandler:void serveResource(io.undertow.server.HttpServerExchange,boolean)",
            "io.undertow.server.handlers.resource.ResourceHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LearningPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathSeparatorHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConnectHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisableCacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StuckThreadDetectionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ExceptionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumpingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ResponseRateLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ByteRangeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LocalNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StoredResponseHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimit:void handleRequest(io.undertow.server.HttpServerExchange,io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConfiguredPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$3$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$2:void handle(io.undertow.server.HttpServerExchange,byte[],boolean)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleNoMatch(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.predicate.PredicatesHandler$DoneHandlerBuilder$1$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractSecurityContextAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.RequestEncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.resource.ResourceHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LearningPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathSeparatorHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConnectHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisableCacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StuckThreadDetectionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ExceptionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumpingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ResponseRateLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ByteRangeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LocalNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StoredResponseHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimit:void handleRequest(io.undertow.server.HttpServerExchange,io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConfiguredPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$3$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$2:void handle(io.undertow.server.HttpServerExchange,byte[],boolean)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleNoMatch(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.LearningPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.predicate.PredicatesHandler$DoneHandlerBuilder$1$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractSecurityContextAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.RequestEncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.resource.ResourceHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LearningPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathSeparatorHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConnectHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisableCacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StuckThreadDetectionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ExceptionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumpingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ResponseRateLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ByteRangeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LocalNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StoredResponseHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimit:void handleRequest(io.undertow.server.HttpServerExchange,io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConfiguredPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$3$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$2:void handle(io.undertow.server.HttpServerExchange,byte[],boolean)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleNoMatch(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.PathSeparatorHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.predicate.PredicatesHandler$DoneHandlerBuilder$1$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractSecurityContextAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.RequestEncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.resource.ResourceHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LearningPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathSeparatorHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConnectHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisableCacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StuckThreadDetectionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ExceptionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumpingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ResponseRateLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ByteRangeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LocalNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StoredResponseHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimit:void handleRequest(io.undertow.server.HttpServerExchange,io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConfiguredPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$3$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$2:void handle(io.undertow.server.HttpServerExchange,byte[],boolean)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleNoMatch(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.predicate.PredicatesHandler$DoneHandlerBuilder$1$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractSecurityContextAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.RequestEncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.resource.ResourceHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LearningPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathSeparatorHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConnectHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisableCacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StuckThreadDetectionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ExceptionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumpingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ResponseRateLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ByteRangeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LocalNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StoredResponseHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimit:void handleRequest(io.undertow.server.HttpServerExchange,io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConfiguredPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$3$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$2:void handle(io.undertow.server.HttpServerExchange,byte[],boolean)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleNoMatch(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.ConnectHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.predicate.PredicatesHandler$DoneHandlerBuilder$1$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractSecurityContextAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.RequestEncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.resource.ResourceHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LearningPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathSeparatorHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConnectHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisableCacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StuckThreadDetectionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ExceptionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumpingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ResponseRateLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ByteRangeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LocalNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StoredResponseHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimit:void handleRequest(io.undertow.server.HttpServerExchange,io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConfiguredPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$3$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$2:void handle(io.undertow.server.HttpServerExchange,byte[],boolean)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleNoMatch(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.DisableCacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.predicate.PredicatesHandler$DoneHandlerBuilder$1$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractSecurityContextAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.RequestEncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.resource.ResourceHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LearningPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathSeparatorHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConnectHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisableCacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StuckThreadDetectionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ExceptionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumpingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ResponseRateLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ByteRangeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LocalNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StoredResponseHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimit:void handleRequest(io.undertow.server.HttpServerExchange,io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConfiguredPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$3$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$2:void handle(io.undertow.server.HttpServerExchange,byte[],boolean)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleNoMatch(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.predicate.PredicatesHandler$DoneHandlerBuilder$1$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractSecurityContextAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.RequestEncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.resource.ResourceHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LearningPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathSeparatorHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConnectHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisableCacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StuckThreadDetectionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ExceptionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumpingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ResponseRateLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ByteRangeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LocalNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StoredResponseHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimit:void handleRequest(io.undertow.server.HttpServerExchange,io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConfiguredPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$3$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$2:void handle(io.undertow.server.HttpServerExchange,byte[],boolean)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleNoMatch(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.predicate.PredicatesHandler$DoneHandlerBuilder$1$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractSecurityContextAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.RequestEncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.resource.ResourceHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LearningPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathSeparatorHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConnectHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisableCacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StuckThreadDetectionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ExceptionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumpingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ResponseRateLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ByteRangeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LocalNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StoredResponseHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimit:void handleRequest(io.undertow.server.HttpServerExchange,io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConfiguredPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$3$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$2:void handle(io.undertow.server.HttpServerExchange,byte[],boolean)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleNoMatch(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.StuckThreadDetectionHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.predicate.PredicatesHandler$DoneHandlerBuilder$1$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractSecurityContextAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.RequestEncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.resource.ResourceHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LearningPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathSeparatorHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConnectHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisableCacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StuckThreadDetectionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ExceptionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumpingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ResponseRateLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ByteRangeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LocalNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StoredResponseHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimit:void handleRequest(io.undertow.server.HttpServerExchange,io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConfiguredPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$3$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$2:void handle(io.undertow.server.HttpServerExchange,byte[],boolean)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleNoMatch(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.ExceptionHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.predicate.PredicatesHandler$DoneHandlerBuilder$1$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractSecurityContextAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.RequestEncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.resource.ResourceHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LearningPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathSeparatorHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConnectHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisableCacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StuckThreadDetectionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ExceptionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumpingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ResponseRateLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ByteRangeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LocalNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StoredResponseHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimit:void handleRequest(io.undertow.server.HttpServerExchange,io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConfiguredPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$3$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$2:void handle(io.undertow.server.HttpServerExchange,byte[],boolean)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleNoMatch(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.predicate.PredicatesHandler$DoneHandlerBuilder$1$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractSecurityContextAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.RequestEncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.resource.ResourceHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LearningPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathSeparatorHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConnectHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisableCacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StuckThreadDetectionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ExceptionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumpingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ResponseRateLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ByteRangeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LocalNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StoredResponseHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimit:void handleRequest(io.undertow.server.HttpServerExchange,io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConfiguredPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$3$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$2:void handle(io.undertow.server.HttpServerExchange,byte[],boolean)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleNoMatch(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.predicate.PredicatesHandler$DoneHandlerBuilder$1$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractSecurityContextAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.RequestEncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.resource.ResourceHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LearningPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathSeparatorHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConnectHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisableCacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StuckThreadDetectionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ExceptionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumpingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ResponseRateLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ByteRangeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LocalNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StoredResponseHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimit:void handleRequest(io.undertow.server.HttpServerExchange,io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConfiguredPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$3$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$2:void handle(io.undertow.server.HttpServerExchange,byte[],boolean)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleNoMatch(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.RequestDumpingHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.predicate.PredicatesHandler$DoneHandlerBuilder$1$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractSecurityContextAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.RequestEncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.resource.ResourceHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LearningPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathSeparatorHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConnectHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisableCacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StuckThreadDetectionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ExceptionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumpingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ResponseRateLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ByteRangeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LocalNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StoredResponseHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimit:void handleRequest(io.undertow.server.HttpServerExchange,io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConfiguredPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$3$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$2:void handle(io.undertow.server.HttpServerExchange,byte[],boolean)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleNoMatch(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.ResponseRateLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.predicate.PredicatesHandler$DoneHandlerBuilder$1$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractSecurityContextAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.RequestEncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.resource.ResourceHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LearningPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathSeparatorHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConnectHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisableCacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StuckThreadDetectionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ExceptionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumpingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ResponseRateLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ByteRangeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LocalNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StoredResponseHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimit:void handleRequest(io.undertow.server.HttpServerExchange,io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConfiguredPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$3$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$2:void handle(io.undertow.server.HttpServerExchange,byte[],boolean)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleNoMatch(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.predicate.PredicatesHandler$DoneHandlerBuilder$1$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractSecurityContextAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.RequestEncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.resource.ResourceHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LearningPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathSeparatorHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConnectHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisableCacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StuckThreadDetectionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ExceptionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumpingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ResponseRateLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ByteRangeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LocalNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StoredResponseHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimit:void handleRequest(io.undertow.server.HttpServerExchange,io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConfiguredPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$3$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$2:void handle(io.undertow.server.HttpServerExchange,byte[],boolean)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleNoMatch(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.ByteRangeHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.predicate.PredicatesHandler$DoneHandlerBuilder$1$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractSecurityContextAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.RequestEncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.resource.ResourceHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LearningPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathSeparatorHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConnectHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisableCacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StuckThreadDetectionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ExceptionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumpingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ResponseRateLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ByteRangeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LocalNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StoredResponseHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimit:void handleRequest(io.undertow.server.HttpServerExchange,io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConfiguredPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$3$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$2:void handle(io.undertow.server.HttpServerExchange,byte[],boolean)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleNoMatch(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.predicate.PredicatesHandler$DoneHandlerBuilder$1$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractSecurityContextAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.RequestEncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.resource.ResourceHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LearningPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathSeparatorHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConnectHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisableCacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StuckThreadDetectionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ExceptionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumpingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ResponseRateLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ByteRangeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LocalNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StoredResponseHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimit:void handleRequest(io.undertow.server.HttpServerExchange,io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConfiguredPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$3$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$2:void handle(io.undertow.server.HttpServerExchange,byte[],boolean)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleNoMatch(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.predicate.PredicatesHandler$DoneHandlerBuilder$1$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractSecurityContextAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.RequestEncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.resource.ResourceHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LearningPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathSeparatorHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConnectHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisableCacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StuckThreadDetectionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ExceptionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumpingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ResponseRateLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ByteRangeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LocalNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StoredResponseHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimit:void handleRequest(io.undertow.server.HttpServerExchange,io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConfiguredPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$3$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$2:void handle(io.undertow.server.HttpServerExchange,byte[],boolean)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleNoMatch(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.predicate.PredicatesHandler$DoneHandlerBuilder$1$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractSecurityContextAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.RequestEncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.resource.ResourceHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LearningPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathSeparatorHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConnectHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisableCacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StuckThreadDetectionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ExceptionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumpingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ResponseRateLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ByteRangeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LocalNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StoredResponseHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimit:void handleRequest(io.undertow.server.HttpServerExchange,io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConfiguredPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$3$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$2:void handle(io.undertow.server.HttpServerExchange,byte[],boolean)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleNoMatch(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.predicate.PredicatesHandler$DoneHandlerBuilder$1$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractSecurityContextAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.RequestEncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.resource.ResourceHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LearningPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathSeparatorHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConnectHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisableCacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StuckThreadDetectionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ExceptionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumpingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ResponseRateLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ByteRangeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LocalNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StoredResponseHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimit:void handleRequest(io.undertow.server.HttpServerExchange,io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConfiguredPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$3$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$2:void handle(io.undertow.server.HttpServerExchange,byte[],boolean)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleNoMatch(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.predicate.PredicatesHandler$DoneHandlerBuilder$1$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractSecurityContextAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.RequestEncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.resource.ResourceHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LearningPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathSeparatorHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConnectHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisableCacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StuckThreadDetectionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ExceptionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumpingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ResponseRateLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ByteRangeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LocalNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StoredResponseHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimit:void handleRequest(io.undertow.server.HttpServerExchange,io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConfiguredPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$3$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$2:void handle(io.undertow.server.HttpServerExchange,byte[],boolean)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleNoMatch(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.LocalNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.predicate.PredicatesHandler$DoneHandlerBuilder$1$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractSecurityContextAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.RequestEncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.resource.ResourceHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LearningPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathSeparatorHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConnectHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisableCacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StuckThreadDetectionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ExceptionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumpingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ResponseRateLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ByteRangeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LocalNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StoredResponseHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimit:void handleRequest(io.undertow.server.HttpServerExchange,io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConfiguredPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$3$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$2:void handle(io.undertow.server.HttpServerExchange,byte[],boolean)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleNoMatch(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.predicate.PredicatesHandler$DoneHandlerBuilder$1$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractSecurityContextAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.RequestEncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.resource.ResourceHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LearningPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathSeparatorHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConnectHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisableCacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StuckThreadDetectionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ExceptionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumpingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ResponseRateLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ByteRangeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LocalNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StoredResponseHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimit:void handleRequest(io.undertow.server.HttpServerExchange,io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConfiguredPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$3$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$2:void handle(io.undertow.server.HttpServerExchange,byte[],boolean)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleNoMatch(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.StoredResponseHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.predicate.PredicatesHandler$DoneHandlerBuilder$1$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractSecurityContextAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.RequestEncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.resource.ResourceHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LearningPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathSeparatorHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConnectHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisableCacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StuckThreadDetectionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ExceptionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumpingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ResponseRateLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ByteRangeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LocalNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StoredResponseHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimit:void handleRequest(io.undertow.server.HttpServerExchange,io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConfiguredPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$3$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$2:void handle(io.undertow.server.HttpServerExchange,byte[],boolean)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleNoMatch(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.predicate.PredicatesHandler$DoneHandlerBuilder$1$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractSecurityContextAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.RequestEncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.resource.ResourceHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LearningPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathSeparatorHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConnectHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisableCacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StuckThreadDetectionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ExceptionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumpingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ResponseRateLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ByteRangeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LocalNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StoredResponseHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimit:void handleRequest(io.undertow.server.HttpServerExchange,io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConfiguredPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$3$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$2:void handle(io.undertow.server.HttpServerExchange,byte[],boolean)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleNoMatch(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.predicate.PredicatesHandler$DoneHandlerBuilder$1$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractSecurityContextAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.RequestEncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.resource.ResourceHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LearningPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathSeparatorHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConnectHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisableCacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StuckThreadDetectionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ExceptionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumpingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ResponseRateLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ByteRangeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LocalNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StoredResponseHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimit:void handleRequest(io.undertow.server.HttpServerExchange,io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConfiguredPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$3$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$2:void handle(io.undertow.server.HttpServerExchange,byte[],boolean)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleNoMatch(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.predicate.PredicatesHandler$DoneHandlerBuilder$1$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractSecurityContextAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.RequestEncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.resource.ResourceHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LearningPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathSeparatorHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConnectHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisableCacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StuckThreadDetectionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ExceptionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumpingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ResponseRateLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ByteRangeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LocalNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StoredResponseHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimit:void handleRequest(io.undertow.server.HttpServerExchange,io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConfiguredPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$3$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$2:void handle(io.undertow.server.HttpServerExchange,byte[],boolean)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleNoMatch(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.predicate.PredicatesHandler$DoneHandlerBuilder$1$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractSecurityContextAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.RequestEncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.resource.ResourceHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LearningPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathSeparatorHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConnectHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisableCacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StuckThreadDetectionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ExceptionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumpingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ResponseRateLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ByteRangeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LocalNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StoredResponseHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimit:void handleRequest(io.undertow.server.HttpServerExchange,io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConfiguredPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$3$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$2:void handle(io.undertow.server.HttpServerExchange,byte[],boolean)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleNoMatch(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.RequestLimit:void handleRequest(io.undertow.server.HttpServerExchange,io.undertow.server.HttpHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.RequestLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.predicate.PredicatesHandler$DoneHandlerBuilder$1$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractSecurityContextAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.RequestEncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.resource.ResourceHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LearningPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathSeparatorHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConnectHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisableCacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StuckThreadDetectionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ExceptionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumpingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ResponseRateLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ByteRangeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LocalNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StoredResponseHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimit:void handleRequest(io.undertow.server.HttpServerExchange,io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConfiguredPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$3$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$2:void handle(io.undertow.server.HttpServerExchange,byte[],boolean)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleNoMatch(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.predicate.PredicatesHandler$DoneHandlerBuilder$1$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractSecurityContextAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.RequestEncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.resource.ResourceHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LearningPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathSeparatorHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConnectHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisableCacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StuckThreadDetectionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ExceptionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumpingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ResponseRateLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ByteRangeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LocalNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StoredResponseHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimit:void handleRequest(io.undertow.server.HttpServerExchange,io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConfiguredPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$3$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$2:void handle(io.undertow.server.HttpServerExchange,byte[],boolean)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleNoMatch(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.predicate.PredicatesHandler$DoneHandlerBuilder$1$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractSecurityContextAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.RequestEncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.resource.ResourceHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LearningPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathSeparatorHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConnectHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisableCacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StuckThreadDetectionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ExceptionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumpingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ResponseRateLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ByteRangeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LocalNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StoredResponseHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimit:void handleRequest(io.undertow.server.HttpServerExchange,io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConfiguredPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$3$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$2:void handle(io.undertow.server.HttpServerExchange,byte[],boolean)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleNoMatch(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.predicate.PredicatesHandler$DoneHandlerBuilder$1$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractSecurityContextAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.RequestEncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.resource.ResourceHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LearningPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathSeparatorHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConnectHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisableCacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StuckThreadDetectionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ExceptionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumpingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ResponseRateLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ByteRangeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LocalNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StoredResponseHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimit:void handleRequest(io.undertow.server.HttpServerExchange,io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConfiguredPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$3$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$2:void handle(io.undertow.server.HttpServerExchange,byte[],boolean)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleNoMatch(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.ConfiguredPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.predicate.PredicatesHandler$DoneHandlerBuilder$1$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractSecurityContextAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.RequestEncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.resource.ResourceHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LearningPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathSeparatorHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConnectHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisableCacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StuckThreadDetectionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ExceptionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumpingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ResponseRateLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ByteRangeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LocalNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StoredResponseHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimit:void handleRequest(io.undertow.server.HttpServerExchange,io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConfiguredPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$3$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$2:void handle(io.undertow.server.HttpServerExchange,byte[],boolean)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleNoMatch(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.predicate.PredicatesHandler$DoneHandlerBuilder$1$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractSecurityContextAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.RequestEncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.resource.ResourceHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LearningPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathSeparatorHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConnectHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisableCacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StuckThreadDetectionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ExceptionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumpingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ResponseRateLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ByteRangeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LocalNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StoredResponseHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimit:void handleRequest(io.undertow.server.HttpServerExchange,io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConfiguredPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$3$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$2:void handle(io.undertow.server.HttpServerExchange,byte[],boolean)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleNoMatch(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.predicate.PredicatesHandler$DoneHandlerBuilder$1$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractSecurityContextAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.RequestEncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.resource.ResourceHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LearningPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathSeparatorHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConnectHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisableCacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StuckThreadDetectionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ExceptionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumpingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ResponseRateLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ByteRangeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LocalNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StoredResponseHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimit:void handleRequest(io.undertow.server.HttpServerExchange,io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConfiguredPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$3$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$2:void handle(io.undertow.server.HttpServerExchange,byte[],boolean)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleNoMatch(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.predicate.PredicatesHandler$DoneHandlerBuilder$1$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractSecurityContextAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.RequestEncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.resource.ResourceHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LearningPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathSeparatorHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConnectHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisableCacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StuckThreadDetectionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ExceptionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumpingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ResponseRateLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ByteRangeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LocalNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StoredResponseHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimit:void handleRequest(io.undertow.server.HttpServerExchange,io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConfiguredPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$3$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$2:void handle(io.undertow.server.HttpServerExchange,byte[],boolean)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleNoMatch(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.predicate.PredicatesHandler$DoneHandlerBuilder$1$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractSecurityContextAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.RequestEncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.resource.ResourceHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LearningPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathSeparatorHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConnectHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisableCacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StuckThreadDetectionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ExceptionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumpingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ResponseRateLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ByteRangeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LocalNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StoredResponseHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimit:void handleRequest(io.undertow.server.HttpServerExchange,io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConfiguredPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$3$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$2:void handle(io.undertow.server.HttpServerExchange,byte[],boolean)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleNoMatch(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.predicate.PredicatesHandler$DoneHandlerBuilder$1$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractSecurityContextAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.RequestEncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.resource.ResourceHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LearningPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathSeparatorHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConnectHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisableCacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StuckThreadDetectionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ExceptionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumpingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ResponseRateLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ByteRangeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LocalNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StoredResponseHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimit:void handleRequest(io.undertow.server.HttpServerExchange,io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConfiguredPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$3$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$2:void handle(io.undertow.server.HttpServerExchange,byte[],boolean)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleNoMatch(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.predicate.PredicatesHandler$DoneHandlerBuilder$1$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractSecurityContextAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.RequestEncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.resource.ResourceHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LearningPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathSeparatorHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConnectHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisableCacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StuckThreadDetectionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ExceptionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumpingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ResponseRateLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ByteRangeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LocalNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StoredResponseHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimit:void handleRequest(io.undertow.server.HttpServerExchange,io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConfiguredPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$3$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$2:void handle(io.undertow.server.HttpServerExchange,byte[],boolean)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleNoMatch(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.predicate.PredicatesHandler$DoneHandlerBuilder$1$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractSecurityContextAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.RequestEncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.resource.ResourceHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LearningPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathSeparatorHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConnectHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisableCacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StuckThreadDetectionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ExceptionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumpingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ResponseRateLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ByteRangeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LocalNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StoredResponseHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimit:void handleRequest(io.undertow.server.HttpServerExchange,io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConfiguredPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$3$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$2:void handle(io.undertow.server.HttpServerExchange,byte[],boolean)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleNoMatch(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.protocol.http2.Http2UpgradeHandler$3$1:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.predicate.PredicatesHandler$DoneHandlerBuilder$1$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractSecurityContextAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.RequestEncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.resource.ResourceHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LearningPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathSeparatorHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConnectHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisableCacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StuckThreadDetectionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ExceptionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumpingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ResponseRateLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ByteRangeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LocalNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StoredResponseHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimit:void handleRequest(io.undertow.server.HttpServerExchange,io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConfiguredPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$3$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$2:void handle(io.undertow.server.HttpServerExchange,byte[],boolean)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleNoMatch(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.protocol.http2.Http2UpgradeHandler$2:void handle(io.undertow.server.HttpServerExchange,byte[],boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.AsyncReceiverImpl$5$2:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.io.AsyncReceiverImpl:void receivePartialBytes(io.undertow.io.Receiver$PartialBytesCallback,io.undertow.io.Receiver$ErrorCallback)",
            "io.undertow.io.AsyncReceiverImpl$5$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.io.BlockingReceiverImpl:void receivePartialBytes(io.undertow.io.Receiver$PartialBytesCallback,io.undertow.io.Receiver$ErrorCallback)"
        ]
    },
    "io.undertow.server.protocol.http2.Http2UpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.predicate.PredicatesHandler$DoneHandlerBuilder$1$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractSecurityContextAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.RequestEncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.resource.ResourceHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LearningPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathSeparatorHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConnectHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisableCacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StuckThreadDetectionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ExceptionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumpingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ResponseRateLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ByteRangeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LocalNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StoredResponseHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimit:void handleRequest(io.undertow.server.HttpServerExchange,io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConfiguredPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$3$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$2:void handle(io.undertow.server.HttpServerExchange,byte[],boolean)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleNoMatch(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.predicate.PredicatesHandler$DoneHandlerBuilder$1$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractSecurityContextAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.RequestEncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.resource.ResourceHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LearningPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathSeparatorHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConnectHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisableCacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StuckThreadDetectionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ExceptionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumpingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ResponseRateLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ByteRangeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LocalNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StoredResponseHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimit:void handleRequest(io.undertow.server.HttpServerExchange,io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConfiguredPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$3$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$2:void handle(io.undertow.server.HttpServerExchange,byte[],boolean)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleNoMatch(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.RoutingHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.predicate.PredicatesHandler$DoneHandlerBuilder$1$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractSecurityContextAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.RequestEncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.resource.ResourceHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LearningPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathSeparatorHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConnectHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisableCacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StuckThreadDetectionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ExceptionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumpingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ResponseRateLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ByteRangeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LocalNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StoredResponseHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimit:void handleRequest(io.undertow.server.HttpServerExchange,io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConfiguredPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$3$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$2:void handle(io.undertow.server.HttpServerExchange,byte[],boolean)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleNoMatch(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.RoutingHandler:void handleNoMatch(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.RoutingHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.AsyncReceiverImpl$5:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.io.AsyncReceiverImpl$2:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.io.AsyncReceiverImpl$3:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.io.AsyncReceiverImpl$4:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.handlers.RequestBufferingHandler$1:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.handlers.RequestLimit$2:void run()",
            "io.undertow.server.protocol.ajp.AjpReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.protocol.http.HttpReadListener:void handleEventWithNoRunningRequest(org.xnio.conduits.ConduitStreamSourceChannel)",
            "io.undertow.server.protocol.http2.Http2ReceiveListener:void handleRequests(io.undertow.protocols.http2.Http2Channel,io.undertow.protocols.http2.Http2StreamSourceChannel)",
            "io.undertow.server.protocol.http2.Http2ReceiveListener:void handleInitialRequest(io.undertow.server.HttpServerExchange,io.undertow.protocols.http2.Http2Channel,byte[])",
            "io.undertow.server.protocol.http2.Http2ServerConnection$4:void run()",
            "io.undertow.server.HttpServerExchange$1:void run()"
        ]
    },
    "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.predicate.PredicatesHandler$DoneHandlerBuilder$1$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractSecurityContextAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.RequestEncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.resource.ResourceHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LearningPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathSeparatorHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConnectHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisableCacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StuckThreadDetectionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ExceptionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumpingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ResponseRateLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ByteRangeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LocalNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StoredResponseHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimit:void handleRequest(io.undertow.server.HttpServerExchange,io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConfiguredPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$3$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$2:void handle(io.undertow.server.HttpServerExchange,byte[],boolean)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleNoMatch(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.predicate.PredicatesHandler$DoneHandlerBuilder$1$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractSecurityContextAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.RequestEncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.resource.ResourceHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LearningPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathSeparatorHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConnectHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisableCacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StuckThreadDetectionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ExceptionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumpingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ResponseRateLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ByteRangeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LocalNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StoredResponseHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimit:void handleRequest(io.undertow.server.HttpServerExchange,io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConfiguredPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$3$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$2:void handle(io.undertow.server.HttpServerExchange,byte[],boolean)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleNoMatch(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.proxy.mod_cluster.MCMPWebManager:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.resource.ResourceHandler:void serveResource(io.undertow.server.HttpServerExchange,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.resource.ResourceHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.RequestLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.predicate.PredicatesHandler$DoneHandlerBuilder$1$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractSecurityContextAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.RequestEncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.resource.ResourceHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LearningPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathSeparatorHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConnectHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisableCacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StuckThreadDetectionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ExceptionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumpingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ResponseRateLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ByteRangeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LocalNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StoredResponseHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimit:void handleRequest(io.undertow.server.HttpServerExchange,io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConfiguredPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$3$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$2:void handle(io.undertow.server.HttpServerExchange,byte[],boolean)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleNoMatch(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.io.AsyncReceiverImpl$5$2:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.predicate.PredicatesHandler$DoneHandlerBuilder$1$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractSecurityContextAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.RequestEncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.resource.ResourceHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LearningPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathSeparatorHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConnectHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisableCacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StuckThreadDetectionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ExceptionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumpingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ResponseRateLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ByteRangeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LocalNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StoredResponseHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimit:void handleRequest(io.undertow.server.HttpServerExchange,io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConfiguredPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$3$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$2:void handle(io.undertow.server.HttpServerExchange,byte[],boolean)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleNoMatch(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.io.AsyncReceiverImpl:void receivePartialBytes(io.undertow.io.Receiver$PartialBytesCallback,io.undertow.io.Receiver$ErrorCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.AsyncReceiverImpl:void receivePartialBytes(io.undertow.io.Receiver$PartialBytesCallback)"
        ]
    },
    "io.undertow.io.AsyncReceiverImpl$5$1:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.predicate.PredicatesHandler$DoneHandlerBuilder$1$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractSecurityContextAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.RequestEncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.resource.ResourceHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LearningPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathSeparatorHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConnectHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisableCacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StuckThreadDetectionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ExceptionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumpingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ResponseRateLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ByteRangeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LocalNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StoredResponseHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimit:void handleRequest(io.undertow.server.HttpServerExchange,io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConfiguredPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$3$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$2:void handle(io.undertow.server.HttpServerExchange,byte[],boolean)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleNoMatch(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.io.BlockingReceiverImpl:void receivePartialBytes(io.undertow.io.Receiver$PartialBytesCallback,io.undertow.io.Receiver$ErrorCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.BlockingReceiverImpl:void receivePartialBytes(io.undertow.io.Receiver$PartialBytesCallback)"
        ]
    },
    "io.undertow.io.AsyncReceiverImpl$5:void handleEvent(org.xnio.channels.StreamSourceChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.AsyncReceiverImpl$5:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.io.AsyncReceiverImpl$2:void handleEvent(org.xnio.channels.StreamSourceChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.AsyncReceiverImpl$2:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.io.AsyncReceiverImpl$3:void handleEvent(org.xnio.channels.StreamSourceChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.AsyncReceiverImpl$3:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.io.AsyncReceiverImpl$4:void handleEvent(org.xnio.channels.StreamSourceChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.AsyncReceiverImpl$4:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.server.handlers.RequestBufferingHandler$1:void handleEvent(org.xnio.channels.StreamSourceChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.RequestBufferingHandler$1:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.server.handlers.RequestLimit$2:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.ssl.SslConduit$5:void run()",
            "io.undertow.protocols.ssl.SslConduit:void runReadListener(boolean)",
            "io.undertow.protocols.ssl.SslConduit:boolean handleHandshakeResult(javax.net.ssl.SSLEngineResult)",
            "io.undertow.protocols.ssl.SslConduit$2:void run()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$FrameReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$3:void run()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel:void runInIoThread(java.lang.Runnable)",
            "io.undertow.server.protocol.http.ALPNLimitingSSLEngine:void limitCiphers(java.util.List)",
            "io.undertow.server.protocol.ParseTimeoutUpdater:void run()",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:io.undertow.server.HttpServerExchange dispatch(java.util.concurrent.Executor,java.lang.Runnable)",
            "io.undertow.util.SameThreadExecutor:void execute(java.lang.Runnable)",
            "io.undertow.util.PipeliningExecutor$1:void run()"
        ]
    },
    "io.undertow.server.protocol.ajp.AjpReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.ajp.AjpReadListener$2:void handleEvent(org.xnio.conduits.ConduitStreamSinkChannel)",
            "io.undertow.server.protocol.ajp.AjpOpenListener:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.server.protocol.ajp.AjpReadListener:void handleCPing()",
            "io.undertow.server.protocol.ajp.AjpReadListener:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.server.protocol.http.HttpReadListener:void handleEventWithNoRunningRequest(org.xnio.conduits.ConduitStreamSourceChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.http.HttpReadListener:void handleEvent(org.xnio.conduits.ConduitStreamSourceChannel)"
        ]
    },
    "io.undertow.server.protocol.http2.Http2ReceiveListener:void handleRequests(io.undertow.protocols.http2.Http2Channel,io.undertow.protocols.http2.Http2StreamSourceChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.http2.Http2ReceiveListener:void handleEvent(io.undertow.protocols.http2.Http2Channel)"
        ]
    },
    "io.undertow.server.protocol.http2.Http2ReceiveListener:void handleInitialRequest(io.undertow.server.HttpServerExchange,io.undertow.protocols.http2.Http2Channel,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$3:void handleUpgrade(org.xnio.StreamConnection,io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.protocol.http2.Http2ServerConnection$4:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.ssl.SslConduit$5:void run()",
            "io.undertow.protocols.ssl.SslConduit:void runReadListener(boolean)",
            "io.undertow.protocols.ssl.SslConduit:boolean handleHandshakeResult(javax.net.ssl.SSLEngineResult)",
            "io.undertow.protocols.ssl.SslConduit$2:void run()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$FrameReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$3:void run()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel:void runInIoThread(java.lang.Runnable)",
            "io.undertow.server.protocol.http.ALPNLimitingSSLEngine:void limitCiphers(java.util.List)",
            "io.undertow.server.protocol.http2.Http2ServerConnection:boolean pushResource(java.lang.String,io.undertow.util.HttpString,io.undertow.util.HeaderMap,io.undertow.server.HttpHandler)",
            "io.undertow.server.protocol.ParseTimeoutUpdater:void run()",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:io.undertow.server.HttpServerExchange dispatch(java.util.concurrent.Executor,java.lang.Runnable)",
            "io.undertow.util.SameThreadExecutor:void execute(java.lang.Runnable)",
            "io.undertow.util.PipeliningExecutor$1:void run()"
        ]
    },
    "io.undertow.server.HttpServerExchange$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.ssl.SslConduit$5:void run()",
            "io.undertow.protocols.ssl.SslConduit:void runReadListener(boolean)",
            "io.undertow.protocols.ssl.SslConduit:boolean handleHandshakeResult(javax.net.ssl.SSLEngineResult)",
            "io.undertow.protocols.ssl.SslConduit$2:void run()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$FrameReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$3:void run()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel:void runInIoThread(java.lang.Runnable)",
            "io.undertow.server.protocol.http.ALPNLimitingSSLEngine:void limitCiphers(java.util.List)",
            "io.undertow.server.protocol.ParseTimeoutUpdater:void run()",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:io.undertow.server.HttpServerExchange dispatch(java.util.concurrent.Executor,java.lang.Runnable)",
            "io.undertow.util.SameThreadExecutor:void execute(java.lang.Runnable)",
            "io.undertow.util.PipeliningExecutor$1:void run()"
        ]
    },
    "io.undertow.server.handlers.resource.ResourceHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.predicate.PredicatesHandler$DoneHandlerBuilder$1$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractSecurityContextAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.RequestEncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.resource.ResourceHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LearningPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathSeparatorHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConnectHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisableCacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StuckThreadDetectionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ExceptionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumpingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ResponseRateLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ByteRangeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LocalNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StoredResponseHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimit:void handleRequest(io.undertow.server.HttpServerExchange,io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConfiguredPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$3$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$2:void handle(io.undertow.server.HttpServerExchange,byte[],boolean)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleNoMatch(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.io.AsyncReceiverImpl:void receivePartialBytes(io.undertow.io.Receiver$PartialBytesCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.http2.Http2UpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.io.BlockingReceiverImpl:void receivePartialBytes(io.undertow.io.Receiver$PartialBytesCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.http2.Http2UpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.io.AsyncReceiverImpl$5:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection$3:void handleEvent(io.undertow.protocols.ajp.AjpClientChannel)",
            "io.undertow.client.http.HttpClientConnection$5:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.client.http2.Http2ClientConnection$1:void handleEvent(io.undertow.protocols.http2.Http2Channel)",
            "io.undertow.client.ALPNClientSelector$2:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ALPNClientSelector$2:void handleSelected(java.lang.String)",
            "io.undertow.client.ALPNClientSelector:void runAlpn(org.xnio.ssl.SslConnection,org.xnio.ChannelListener,io.undertow.client.ClientCallback,io.undertow.client.ALPNClientSelector$ALPNProtocol[])",
            "io.undertow.protocols.ajp.AjpClientResponseStreamSourceChannel:void complete()",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void handleFlushComplete(boolean)",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void channelForciblyClosed()",
            "io.undertow.protocols.http2.Http2StreamSourceChannel:void channelForciblyClosed()",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$RequestExchangeListener:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void close()"
        ]
    },
    "io.undertow.io.AsyncReceiverImpl$2:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection$3:void handleEvent(io.undertow.protocols.ajp.AjpClientChannel)",
            "io.undertow.client.http.HttpClientConnection$5:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.client.http2.Http2ClientConnection$1:void handleEvent(io.undertow.protocols.http2.Http2Channel)",
            "io.undertow.client.ALPNClientSelector$2:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ALPNClientSelector$2:void handleSelected(java.lang.String)",
            "io.undertow.client.ALPNClientSelector:void runAlpn(org.xnio.ssl.SslConnection,org.xnio.ChannelListener,io.undertow.client.ClientCallback,io.undertow.client.ALPNClientSelector$ALPNProtocol[])",
            "io.undertow.protocols.ajp.AjpClientResponseStreamSourceChannel:void complete()",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void handleFlushComplete(boolean)",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void channelForciblyClosed()",
            "io.undertow.protocols.http2.Http2StreamSourceChannel:void channelForciblyClosed()",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$RequestExchangeListener:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void close()"
        ]
    },
    "io.undertow.io.AsyncReceiverImpl$3:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection$3:void handleEvent(io.undertow.protocols.ajp.AjpClientChannel)",
            "io.undertow.client.http.HttpClientConnection$5:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.client.http2.Http2ClientConnection$1:void handleEvent(io.undertow.protocols.http2.Http2Channel)",
            "io.undertow.client.ALPNClientSelector$2:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ALPNClientSelector$2:void handleSelected(java.lang.String)",
            "io.undertow.client.ALPNClientSelector:void runAlpn(org.xnio.ssl.SslConnection,org.xnio.ChannelListener,io.undertow.client.ClientCallback,io.undertow.client.ALPNClientSelector$ALPNProtocol[])",
            "io.undertow.protocols.ajp.AjpClientResponseStreamSourceChannel:void complete()",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void handleFlushComplete(boolean)",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void channelForciblyClosed()",
            "io.undertow.protocols.http2.Http2StreamSourceChannel:void channelForciblyClosed()",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$RequestExchangeListener:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void close()"
        ]
    },
    "io.undertow.io.AsyncReceiverImpl$4:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection$3:void handleEvent(io.undertow.protocols.ajp.AjpClientChannel)",
            "io.undertow.client.http.HttpClientConnection$5:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.client.http2.Http2ClientConnection$1:void handleEvent(io.undertow.protocols.http2.Http2Channel)",
            "io.undertow.client.ALPNClientSelector$2:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ALPNClientSelector$2:void handleSelected(java.lang.String)",
            "io.undertow.client.ALPNClientSelector:void runAlpn(org.xnio.ssl.SslConnection,org.xnio.ChannelListener,io.undertow.client.ClientCallback,io.undertow.client.ALPNClientSelector$ALPNProtocol[])",
            "io.undertow.protocols.ajp.AjpClientResponseStreamSourceChannel:void complete()",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void handleFlushComplete(boolean)",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void channelForciblyClosed()",
            "io.undertow.protocols.http2.Http2StreamSourceChannel:void channelForciblyClosed()",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$RequestExchangeListener:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void close()"
        ]
    },
    "io.undertow.server.handlers.RequestBufferingHandler$1:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection$3:void handleEvent(io.undertow.protocols.ajp.AjpClientChannel)",
            "io.undertow.client.http.HttpClientConnection$5:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.client.http2.Http2ClientConnection$1:void handleEvent(io.undertow.protocols.http2.Http2Channel)",
            "io.undertow.client.ALPNClientSelector$2:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ALPNClientSelector$2:void handleSelected(java.lang.String)",
            "io.undertow.client.ALPNClientSelector:void runAlpn(org.xnio.ssl.SslConnection,org.xnio.ChannelListener,io.undertow.client.ClientCallback,io.undertow.client.ALPNClientSelector$ALPNProtocol[])",
            "io.undertow.protocols.ajp.AjpClientResponseStreamSourceChannel:void complete()",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void handleFlushComplete(boolean)",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void channelForciblyClosed()",
            "io.undertow.protocols.http2.Http2StreamSourceChannel:void channelForciblyClosed()",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$RequestExchangeListener:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void close()"
        ]
    },
    "io.undertow.protocols.ssl.SslConduit$5:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.ssl.SslConduit$5:void run()",
            "io.undertow.protocols.ssl.SslConduit:void runReadListener(boolean)",
            "io.undertow.protocols.ssl.SslConduit:boolean handleHandshakeResult(javax.net.ssl.SSLEngineResult)",
            "io.undertow.protocols.ssl.SslConduit:void runTasks()",
            "io.undertow.protocols.ssl.SslConduit$2:void run()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$FrameReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$3:void run()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel:void runInIoThread(java.lang.Runnable)",
            "io.undertow.server.protocol.http.ALPNLimitingSSLEngine:void limitCiphers(java.util.List)",
            "io.undertow.server.protocol.ParseTimeoutUpdater:void run()",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:io.undertow.server.HttpServerExchange dispatch(java.util.concurrent.Executor,java.lang.Runnable)",
            "io.undertow.util.SameThreadExecutor:void execute(java.lang.Runnable)",
            "io.undertow.util.PipeliningExecutor$1:void run()"
        ]
    },
    "io.undertow.protocols.ssl.SslConduit:void runReadListener(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.ssl.SslConduit:void resumeReads(boolean)",
            "io.undertow.protocols.ssl.SslConduit:void notifyReadClosed()",
            "io.undertow.protocols.ssl.SslConduit:long doUnwrap(java.nio.ByteBuffer[],int,int)",
            "io.undertow.protocols.ssl.SslConduit:void access$1500(io.undertow.protocols.ssl.SslConduit,boolean)"
        ]
    },
    "io.undertow.protocols.ssl.SslConduit:boolean handleHandshakeResult(javax.net.ssl.SSLEngineResult)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.ssl.SslConduit:long doUnwrap(java.nio.ByteBuffer[],int,int)",
            "io.undertow.protocols.ssl.SslConduit:long doWrap(java.nio.ByteBuffer[],int,int)"
        ]
    },
    "io.undertow.protocols.ssl.SslConduit$2:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.ssl.SslConduit$5:void run()",
            "io.undertow.protocols.ssl.SslConduit:void runReadListener(boolean)",
            "io.undertow.protocols.ssl.SslConduit:boolean handleHandshakeResult(javax.net.ssl.SSLEngineResult)",
            "io.undertow.protocols.ssl.SslConduit$2:void run()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$FrameReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$3:void run()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel:void runInIoThread(java.lang.Runnable)",
            "io.undertow.server.protocol.http.ALPNLimitingSSLEngine:void limitCiphers(java.util.List)",
            "io.undertow.server.protocol.ParseTimeoutUpdater:void run()",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:io.undertow.server.HttpServerExchange dispatch(java.util.concurrent.Executor,java.lang.Runnable)",
            "io.undertow.util.SameThreadExecutor:void execute(java.lang.Runnable)",
            "io.undertow.util.PipeliningExecutor$1:void run()"
        ]
    },
    "io.undertow.server.protocol.framed.AbstractFramedChannel$FrameReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.framed.AbstractFramedChannel$FrameReadListener:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.server.protocol.framed.AbstractFramedChannel$3:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.ssl.SslConduit$5:void run()",
            "io.undertow.protocols.ssl.SslConduit:void runReadListener(boolean)",
            "io.undertow.protocols.ssl.SslConduit:boolean handleHandshakeResult(javax.net.ssl.SSLEngineResult)",
            "io.undertow.protocols.ssl.SslConduit$2:void run()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$FrameReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$3:void run()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel:void runInIoThread(java.lang.Runnable)",
            "io.undertow.server.protocol.http.ALPNLimitingSSLEngine:void limitCiphers(java.util.List)",
            "io.undertow.server.protocol.ParseTimeoutUpdater:void run()",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:io.undertow.server.HttpServerExchange dispatch(java.util.concurrent.Executor,java.lang.Runnable)",
            "io.undertow.util.SameThreadExecutor:void execute(java.lang.Runnable)",
            "io.undertow.util.PipeliningExecutor$1:void run()"
        ]
    },
    "io.undertow.server.protocol.framed.AbstractFramedChannel:void runInIoThread(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.framed.AbstractFramedChannel$FrameReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void resumeReadsInternal(boolean)",
            "io.undertow.server.protocol.framed.AbstractFramedChannel:void flushSenders()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel:void flush()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$FrameCloseListener:void handleEvent(org.xnio.channels.CloseableChannel)",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSinkChannel:void resumeWritesInternal(boolean)"
        ]
    },
    "io.undertow.server.protocol.http.ALPNLimitingSSLEngine:void limitCiphers(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.http.ALPNLimitingSSLEngine:javax.net.ssl.SSLEngineResult unwrap(java.nio.ByteBuffer,java.nio.ByteBuffer)",
            "io.undertow.server.protocol.http.ALPNLimitingSSLEngine:javax.net.ssl.SSLEngineResult unwrap(java.nio.ByteBuffer,java.nio.ByteBuffer[],int,int)"
        ]
    },
    "io.undertow.server.protocol.ParseTimeoutUpdater:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.ssl.SslConduit$5:void run()",
            "io.undertow.protocols.ssl.SslConduit:void runReadListener(boolean)",
            "io.undertow.protocols.ssl.SslConduit:boolean handleHandshakeResult(javax.net.ssl.SSLEngineResult)",
            "io.undertow.protocols.ssl.SslConduit$2:void run()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$FrameReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$3:void run()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel:void runInIoThread(java.lang.Runnable)",
            "io.undertow.server.protocol.http.ALPNLimitingSSLEngine:void limitCiphers(java.util.List)",
            "io.undertow.server.protocol.ParseTimeoutUpdater:void run()",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:io.undertow.server.HttpServerExchange dispatch(java.util.concurrent.Executor,java.lang.Runnable)",
            "io.undertow.util.SameThreadExecutor:void execute(java.lang.Runnable)",
            "io.undertow.util.PipeliningExecutor$1:void run()"
        ]
    },
    "io.undertow.server.HttpServerExchange:io.undertow.server.HttpServerExchange dispatch(java.util.concurrent.Executor,java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil:void pingHost(java.net.InetSocketAddress,io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$PingCallback,org.xnio.OptionMap)",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil:void pingHttpClient(java.net.URI,io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$PingCallback,io.undertow.server.HttpServerExchange,io.undertow.client.UndertowClient,org.xnio.ssl.XnioSsl,org.xnio.OptionMap)",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil:void pingNode(io.undertow.server.handlers.proxy.mod_cluster.Node,io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$PingCallback)",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$1$1:void completed(io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.ProxyConnection)",
            "io.undertow.server.handlers.proxy.ProxyHandler$ProxyAction$1$2$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler$ProxyClientHandler:void completed(io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.ProxyConnection)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.sse.ServerSentEventHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConnectHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimit:void handleRequest(io.undertow.server.HttpServerExchange,io.undertow.server.HttpHandler)",
            "io.undertow.server.HttpServerExchange:io.undertow.server.HttpServerExchange dispatch(java.lang.Runnable)",
            "io.undertow.server.HttpServerExchange:io.undertow.server.HttpServerExchange dispatch(java.util.concurrent.Executor,io.undertow.server.HttpHandler)"
        ]
    },
    "io.undertow.util.SameThreadExecutor:void execute(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.accesslog.DefaultAccessLogReceiver:void logMessage(java.lang.String)",
            "io.undertow.server.handlers.accesslog.DefaultAccessLogReceiver:void run()",
            "io.undertow.server.handlers.accesslog.DefaultAccessLogReceiver:void rotate()",
            "io.undertow.server.handlers.accesslog.DefaultAccessLogReceiver:void close()",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler$NonBlockingParseTask$1:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.handlers.JDBCLogHandler:void logMessage(java.lang.String,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void run()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:io.undertow.server.HttpServerExchange dispatch(java.util.concurrent.Executor,java.lang.Runnable)",
            "io.undertow.util.PipeliningExecutor:void execute(java.lang.Runnable)"
        ]
    },
    "io.undertow.util.PipeliningExecutor$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.ssl.SslConduit$5:void run()",
            "io.undertow.protocols.ssl.SslConduit:void runReadListener(boolean)",
            "io.undertow.protocols.ssl.SslConduit:boolean handleHandshakeResult(javax.net.ssl.SSLEngineResult)",
            "io.undertow.protocols.ssl.SslConduit$2:void run()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$FrameReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$3:void run()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel:void runInIoThread(java.lang.Runnable)",
            "io.undertow.server.protocol.http.ALPNLimitingSSLEngine:void limitCiphers(java.util.List)",
            "io.undertow.server.protocol.ParseTimeoutUpdater:void run()",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:io.undertow.server.HttpServerExchange dispatch(java.util.concurrent.Executor,java.lang.Runnable)",
            "io.undertow.util.PipeliningExecutor:void execute(java.lang.Runnable)",
            "io.undertow.util.SameThreadExecutor:void execute(java.lang.Runnable)",
            "io.undertow.util.PipeliningExecutor$1:void run()"
        ]
    },
    "io.undertow.server.protocol.ajp.AjpReadListener$2:void handleEvent(org.xnio.conduits.ConduitStreamSinkChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.ajp.AjpReadListener$2:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.server.protocol.ajp.AjpOpenListener:void handleEvent(org.xnio.StreamConnection)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.ajp.AjpOpenListener:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.server.protocol.ajp.AjpReadListener:void handleCPing()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.ajp.AjpReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)"
        ]
    },
    "io.undertow.server.protocol.ajp.AjpReadListener:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection$3:void handleEvent(io.undertow.protocols.ajp.AjpClientChannel)",
            "io.undertow.client.http.HttpClientConnection$5:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.client.http2.Http2ClientConnection$1:void handleEvent(io.undertow.protocols.http2.Http2Channel)",
            "io.undertow.client.ALPNClientSelector$2:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ALPNClientSelector$2:void handleSelected(java.lang.String)",
            "io.undertow.client.ALPNClientSelector:void runAlpn(org.xnio.ssl.SslConnection,org.xnio.ChannelListener,io.undertow.client.ClientCallback,io.undertow.client.ALPNClientSelector$ALPNProtocol[])",
            "io.undertow.protocols.ajp.AjpClientResponseStreamSourceChannel:void complete()",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void handleFlushComplete(boolean)",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void channelForciblyClosed()",
            "io.undertow.protocols.http2.Http2StreamSourceChannel:void channelForciblyClosed()",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$RequestExchangeListener:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void close()"
        ]
    },
    "io.undertow.server.protocol.http.HttpReadListener:void handleEvent(org.xnio.conduits.ConduitStreamSourceChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.http.HttpReadListener:void run()",
            "io.undertow.server.protocol.http.HttpReadListener:void handleEvent(java.nio.channels.Channel)",
            "io.undertow.server.protocol.http.HttpOpenListener:void handleEvent(org.xnio.StreamConnection,io.undertow.connector.PooledByteBuffer)"
        ]
    },
    "io.undertow.server.protocol.http2.Http2ReceiveListener:void handleEvent(io.undertow.protocols.http2.Http2Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.http2.Http2ReceiveListener:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.server.protocol.http2.Http2UpgradeHandler$3:void handleUpgrade(org.xnio.StreamConnection,io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http.HttpReadListener$2:void handleEvent(org.xnio.conduits.ConduitStreamSinkChannel)"
        ]
    },
    "io.undertow.server.protocol.http2.Http2ServerConnection:boolean pushResource(java.lang.String,io.undertow.util.HttpString,io.undertow.util.HeaderMap,io.undertow.server.HttpHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.ProxyHandler$ProxyAction$1$2:boolean handlePush(io.undertow.client.ClientExchange,io.undertow.client.ClientExchange)",
            "io.undertow.server.protocol.http2.Http2ServerConnection:boolean pushResource(java.lang.String,io.undertow.util.HttpString,io.undertow.util.HeaderMap)"
        ]
    },
    "io.undertow.client.ajp.AjpClientConnection$3:void handleEvent(io.undertow.protocols.ajp.AjpClientChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection$3:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.client.http.HttpClientConnection$5:void handleEvent(org.xnio.StreamConnection)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpClientConnection$5:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.client.http2.Http2ClientConnection$1:void handleEvent(io.undertow.protocols.http2.Http2Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http2.Http2ClientConnection$1:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.client.ALPNClientSelector$2:void handleEvent(org.xnio.channels.StreamSourceChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ALPNClientSelector$2:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.client.ALPNClientSelector$2:void handleSelected(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ALPNClientSelector$2:void handleEvent(org.xnio.channels.StreamSourceChannel)"
        ]
    },
    "io.undertow.client.ALPNClientSelector:void runAlpn(org.xnio.ssl.SslConnection,org.xnio.ChannelListener,io.undertow.client.ClientCallback,io.undertow.client.ALPNClientSelector$ALPNProtocol[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpClientProvider:void handleConnected(org.xnio.StreamConnection,io.undertow.client.ClientCallback,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap,java.net.URI)",
            "io.undertow.client.http2.Http2ClientProvider:void handleConnected(org.xnio.StreamConnection,io.undertow.client.ClientCallback,java.net.URI,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)"
        ]
    },
    "io.undertow.protocols.ajp.AjpClientResponseStreamSourceChannel:void complete()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void exitRead()"
        ]
    },
    "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void handleFlushComplete(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.framed.AbstractFramedStreamSinkChannel:void flushComplete()"
        ]
    },
    "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void channelForciblyClosed()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.framed.AbstractFramedStreamSinkChannel:void close()"
        ]
    },
    "io.undertow.protocols.http2.Http2StreamSourceChannel:void channelForciblyClosed()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void close()"
        ]
    },
    "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$RequestExchangeListener:void completed(io.undertow.client.ClientExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$RequestExchangeListener:void completed(java.lang.Object)"
        ]
    },
    "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.channels.DetachableStreamSourceChannel:void close()",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void complete()",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void shutdownReads()",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void exitRead()",
            "io.undertow.server.protocol.http2.Http2ServerConnection:void terminateRequestChannel(io.undertow.server.HttpServerExchange)",
            "io.undertow.websockets.core.function.ChannelFunctionStreamSourceChannel:void close()",
            "io.undertow.websockets.core.WebSocketUtils:void echoFrame(io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.StreamSourceFrameChannel)"
        ]
    },
    "io.undertow.protocols.ssl.SslConduit:void runTasks()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.ssl.SslConduit:boolean handleHandshakeResult(javax.net.ssl.SSLEngineResult)"
        ]
    },
    "io.undertow.protocols.ssl.SslConduit:void resumeReads(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.ssl.SslConduit:void resumeReads()",
            "io.undertow.protocols.ssl.SslConduit:void wakeupReads()",
            "io.undertow.protocols.ssl.SslConduit:void clearReadRequiresWrite()"
        ]
    },
    "io.undertow.protocols.ssl.SslConduit:void notifyReadClosed()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.ssl.UndertowSslConnection:void notifyReadClosed()",
            "io.undertow.protocols.ssl.SslConduit:void terminateReads()",
            "io.undertow.protocols.ssl.SslConduit:void notifyWriteClosed()",
            "io.undertow.protocols.ssl.SslConduit:long doUnwrap(java.nio.ByteBuffer[],int,int)",
            "io.undertow.protocols.ssl.SslConduit:void closed()"
        ]
    },
    "io.undertow.protocols.ssl.SslConduit:long doUnwrap(java.nio.ByteBuffer[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.ssl.SslConduit:int read(java.nio.ByteBuffer)",
            "io.undertow.protocols.ssl.SslConduit:long read(java.nio.ByteBuffer[],int,int)",
            "io.undertow.protocols.ssl.SslConduit:void doHandshake()",
            "io.undertow.protocols.ssl.SslConduit:long doWrap(java.nio.ByteBuffer[],int,int)"
        ]
    },
    "io.undertow.protocols.ssl.SslConduit:void access$1500(io.undertow.protocols.ssl.SslConduit,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.ssl.SslConduit$SslReadReadyHandler:void readReady()"
        ]
    },
    "io.undertow.protocols.ssl.SslConduit:long doWrap(java.nio.ByteBuffer[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.ssl.SslConduit:int write(java.nio.ByteBuffer)",
            "io.undertow.protocols.ssl.SslConduit:long write(java.nio.ByteBuffer[],int,int)",
            "io.undertow.protocols.ssl.SslConduit:boolean flush()",
            "io.undertow.protocols.ssl.SslConduit:void doHandshake()",
            "io.undertow.protocols.ssl.SslConduit:long doUnwrap(java.nio.ByteBuffer[],int,int)"
        ]
    },
    "io.undertow.server.protocol.framed.AbstractFramedChannel$FrameReadListener:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection$3:void handleEvent(io.undertow.protocols.ajp.AjpClientChannel)",
            "io.undertow.client.http.HttpClientConnection$5:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.client.http2.Http2ClientConnection$1:void handleEvent(io.undertow.protocols.http2.Http2Channel)",
            "io.undertow.client.ALPNClientSelector$2:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ALPNClientSelector$2:void handleSelected(java.lang.String)",
            "io.undertow.client.ALPNClientSelector:void runAlpn(org.xnio.ssl.SslConnection,org.xnio.ChannelListener,io.undertow.client.ClientCallback,io.undertow.client.ALPNClientSelector$ALPNProtocol[])",
            "io.undertow.protocols.ajp.AjpClientResponseStreamSourceChannel:void complete()",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void handleFlushComplete(boolean)",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void channelForciblyClosed()",
            "io.undertow.protocols.http2.Http2StreamSourceChannel:void channelForciblyClosed()",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$RequestExchangeListener:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void close()"
        ]
    },
    "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void resumeReadsInternal(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void resumeReads()",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void wakeupReads()",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void dataReady(io.undertow.server.protocol.framed.FrameHeaderData,io.undertow.connector.PooledByteBuffer)",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void markStreamBroken()"
        ]
    },
    "io.undertow.server.protocol.framed.AbstractFramedChannel:void flushSenders()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.framed.AbstractFramedChannel$5:void run()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$FrameWriteListener:void handleEvent(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$4:void run()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel:void recalculateHeldFrames()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel:void flush()"
        ]
    },
    "io.undertow.server.protocol.framed.AbstractFramedChannel:void flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.framed.AbstractFramedChannel:void queueFrame(io.undertow.server.protocol.framed.AbstractFramedStreamSinkChannel)"
        ]
    },
    "io.undertow.server.protocol.framed.AbstractFramedChannel$FrameCloseListener:void handleEvent(org.xnio.channels.CloseableChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.framed.AbstractFramedChannel$FrameCloseListener:void handleEvent(java.nio.channels.Channel)",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$FrameCloseListener$2:void run()"
        ]
    },
    "io.undertow.server.protocol.framed.AbstractFramedStreamSinkChannel:void resumeWritesInternal(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.http2.Http2StreamSinkChannel:void updateFlowControlWindow(int)",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSinkChannel:void wakeupWrites()",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSinkChannel:void resumeWrites()"
        ]
    },
    "io.undertow.server.protocol.http.ALPNLimitingSSLEngine:javax.net.ssl.SSLEngineResult unwrap(java.nio.ByteBuffer,java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.ssl.SslConduit:long doUnwrap(java.nio.ByteBuffer[],int,int)",
            "io.undertow.server.protocol.http.ALPNLimitingSSLEngine:javax.net.ssl.SSLEngineResult unwrap(java.nio.ByteBuffer,java.nio.ByteBuffer)"
        ]
    },
    "io.undertow.server.protocol.http.ALPNLimitingSSLEngine:javax.net.ssl.SSLEngineResult unwrap(java.nio.ByteBuffer,java.nio.ByteBuffer[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.ssl.ALPNHackSSLEngine:javax.net.ssl.SSLEngineResult unwrap(java.nio.ByteBuffer,java.nio.ByteBuffer[],int,int)",
            "io.undertow.protocols.ssl.SslConduit:long doUnwrap(java.nio.ByteBuffer[],int,int)",
            "io.undertow.server.protocol.http.ALPNLimitingSSLEngine:javax.net.ssl.SSLEngineResult unwrap(java.nio.ByteBuffer,java.nio.ByteBuffer[])",
            "io.undertow.server.protocol.http.ALPNLimitingSSLEngine:javax.net.ssl.SSLEngineResult unwrap(java.nio.ByteBuffer,java.nio.ByteBuffer[],int,int)"
        ]
    },
    "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil:void pingHost(java.net.InetSocketAddress,io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$PingCallback,org.xnio.OptionMap)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void checkHostUp(java.lang.String,java.lang.String,int,io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$PingCallback)"
        ]
    },
    "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil:void pingHttpClient(java.net.URI,io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$PingCallback,io.undertow.server.HttpServerExchange,io.undertow.client.UndertowClient,org.xnio.ssl.XnioSsl,org.xnio.OptionMap)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void checkHostUp(java.lang.String,java.lang.String,int,io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$PingCallback)"
        ]
    },
    "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil:void pingNode(io.undertow.server.handlers.proxy.mod_cluster.Node,io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$PingCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.mod_cluster.Node:void ping(io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$PingCallback)"
        ]
    },
    "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$1$1:void completed(io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.ProxyConnection)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$1$1:void completed(io.undertow.server.HttpServerExchange,java.lang.Object)"
        ]
    },
    "io.undertow.server.handlers.proxy.ProxyHandler$ProxyAction$1$2$1:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.predicate.PredicatesHandler$DoneHandlerBuilder$1$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractSecurityContextAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.RequestEncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.resource.ResourceHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LearningPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathSeparatorHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConnectHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisableCacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StuckThreadDetectionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ExceptionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumpingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ResponseRateLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ByteRangeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LocalNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StoredResponseHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimit:void handleRequest(io.undertow.server.HttpServerExchange,io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConfiguredPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$3$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$2:void handle(io.undertow.server.HttpServerExchange,byte[],boolean)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleNoMatch(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.proxy.ProxyHandler$ProxyClientHandler:void completed(io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.ProxyConnection)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.ProxyHandler$ProxyClientHandler:void completed(io.undertow.server.HttpServerExchange,java.lang.Object)"
        ]
    },
    "io.undertow.server.handlers.sse.ServerSentEventHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.predicate.PredicatesHandler$DoneHandlerBuilder$1$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractSecurityContextAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.RequestEncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.resource.ResourceHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LearningPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathSeparatorHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConnectHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisableCacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StuckThreadDetectionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ExceptionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumpingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ResponseRateLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ByteRangeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LocalNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StoredResponseHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimit:void handleRequest(io.undertow.server.HttpServerExchange,io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConfiguredPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$3$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$2:void handle(io.undertow.server.HttpServerExchange,byte[],boolean)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleNoMatch(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.HttpServerExchange:io.undertow.server.HttpServerExchange dispatch(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.AsyncSenderImpl:void transferFrom(java.nio.channels.FileChannel,io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl$TransferTask:void handleEvent(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void serveFile(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.resource.PathResource:void serveImpl(io.undertow.io.Sender,io.undertow.server.HttpServerExchange,long,long,io.undertow.io.IoCallback,boolean)",
            "io.undertow.server.handlers.resource.PathResource$1ServerTask:void onComplete(io.undertow.server.HttpServerExchange,io.undertow.io.Sender)",
            "io.undertow.server.handlers.resource.URLResource$1ServerTask:void onComplete(io.undertow.server.HttpServerExchange,io.undertow.io.Sender)",
            "io.undertow.server.handlers.resource.URLResource:void serveImpl(io.undertow.io.Sender,io.undertow.server.HttpServerExchange,long,long,boolean,io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.server.HttpServerExchange:io.undertow.server.HttpServerExchange dispatch(java.util.concurrent.Executor,io.undertow.server.HttpHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler$NonBlockingParseTask:void run()",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.HttpServerExchange:io.undertow.server.HttpServerExchange dispatch(io.undertow.server.HttpHandler)"
        ]
    },
    "io.undertow.server.handlers.accesslog.DefaultAccessLogReceiver:void logMessage(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.accesslog.AccessLogHandler$AccessLogCompletionListener:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)"
        ]
    },
    "io.undertow.server.handlers.accesslog.DefaultAccessLogReceiver:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.ssl.SslConduit$5:void run()",
            "io.undertow.protocols.ssl.SslConduit:void runReadListener(boolean)",
            "io.undertow.protocols.ssl.SslConduit:boolean handleHandshakeResult(javax.net.ssl.SSLEngineResult)",
            "io.undertow.protocols.ssl.SslConduit$2:void run()",
            "io.undertow.server.handlers.accesslog.DefaultAccessLogReceiver:void logMessage(java.lang.String)",
            "io.undertow.server.handlers.accesslog.DefaultAccessLogReceiver:void run()",
            "io.undertow.server.handlers.accesslog.DefaultAccessLogReceiver:void rotate()",
            "io.undertow.server.handlers.accesslog.DefaultAccessLogReceiver:void close()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$FrameReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$3:void run()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel:void runInIoThread(java.lang.Runnable)",
            "io.undertow.server.protocol.http.ALPNLimitingSSLEngine:void limitCiphers(java.util.List)",
            "io.undertow.server.protocol.ParseTimeoutUpdater:void run()",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:io.undertow.server.HttpServerExchange dispatch(java.util.concurrent.Executor,java.lang.Runnable)",
            "io.undertow.util.SameThreadExecutor:void execute(java.lang.Runnable)",
            "io.undertow.util.PipeliningExecutor$1:void run()"
        ]
    },
    "io.undertow.server.handlers.accesslog.DefaultAccessLogReceiver:void rotate()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.server.handlers.accesslog.DefaultAccessLogReceiver:void close()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler$NonBlockingParseTask$1:void handleEvent(org.xnio.channels.StreamSourceChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler$NonBlockingParseTask$1:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.server.handlers.JDBCLogHandler:void logMessage(java.lang.String,io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.JDBCLogHandler$JDBCLogCompletionListener:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)"
        ]
    },
    "io.undertow.server.handlers.JDBCLogHandler:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.ssl.SslConduit$5:void run()",
            "io.undertow.protocols.ssl.SslConduit:void runReadListener(boolean)",
            "io.undertow.protocols.ssl.SslConduit:boolean handleHandshakeResult(javax.net.ssl.SSLEngineResult)",
            "io.undertow.protocols.ssl.SslConduit$2:void run()",
            "io.undertow.server.handlers.JDBCLogHandler:void logMessage(java.lang.String,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void run()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$FrameReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$3:void run()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel:void runInIoThread(java.lang.Runnable)",
            "io.undertow.server.protocol.http.ALPNLimitingSSLEngine:void limitCiphers(java.util.List)",
            "io.undertow.server.protocol.ParseTimeoutUpdater:void run()",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:io.undertow.server.HttpServerExchange dispatch(java.util.concurrent.Executor,java.lang.Runnable)",
            "io.undertow.util.SameThreadExecutor:void execute(java.lang.Runnable)",
            "io.undertow.util.PipeliningExecutor$1:void run()"
        ]
    },
    "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit:void performFlush(io.undertow.server.HttpServerExchange,io.undertow.server.protocol.http.HttpServerConnection)",
            "io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit$1:void handleEvent(java.nio.channels.Channel)",
            "io.undertow.server.protocol.http.HttpServerConnection:void exchangeComplete(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.util.PipeliningExecutor:void execute(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.accesslog.DefaultAccessLogReceiver:void logMessage(java.lang.String)",
            "io.undertow.server.handlers.accesslog.DefaultAccessLogReceiver:void run()",
            "io.undertow.server.handlers.accesslog.DefaultAccessLogReceiver:void rotate()",
            "io.undertow.server.handlers.accesslog.DefaultAccessLogReceiver:void close()",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler$NonBlockingParseTask$1:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.handlers.JDBCLogHandler:void logMessage(java.lang.String,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void run()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:io.undertow.server.HttpServerExchange dispatch(java.util.concurrent.Executor,java.lang.Runnable)",
            "io.undertow.util.PipeliningExecutor:void execute(java.lang.Runnable)"
        ]
    },
    "io.undertow.server.protocol.ajp.AjpReadListener$2:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection$3:void handleEvent(io.undertow.protocols.ajp.AjpClientChannel)",
            "io.undertow.client.http.HttpClientConnection$5:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.client.http2.Http2ClientConnection$1:void handleEvent(io.undertow.protocols.http2.Http2Channel)",
            "io.undertow.client.ALPNClientSelector$2:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ALPNClientSelector$2:void handleSelected(java.lang.String)",
            "io.undertow.client.ALPNClientSelector:void runAlpn(org.xnio.ssl.SslConnection,org.xnio.ChannelListener,io.undertow.client.ClientCallback,io.undertow.client.ALPNClientSelector$ALPNProtocol[])",
            "io.undertow.protocols.ajp.AjpClientResponseStreamSourceChannel:void complete()",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void handleFlushComplete(boolean)",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void channelForciblyClosed()",
            "io.undertow.protocols.http2.Http2StreamSourceChannel:void channelForciblyClosed()",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$RequestExchangeListener:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void close()"
        ]
    },
    "io.undertow.server.protocol.ajp.AjpOpenListener:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection$3:void handleEvent(io.undertow.protocols.ajp.AjpClientChannel)",
            "io.undertow.client.http.HttpClientConnection$5:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.client.http2.Http2ClientConnection$1:void handleEvent(io.undertow.protocols.http2.Http2Channel)",
            "io.undertow.client.ALPNClientSelector$2:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ALPNClientSelector$2:void handleSelected(java.lang.String)",
            "io.undertow.client.ALPNClientSelector:void runAlpn(org.xnio.ssl.SslConnection,org.xnio.ChannelListener,io.undertow.client.ClientCallback,io.undertow.client.ALPNClientSelector$ALPNProtocol[])",
            "io.undertow.protocols.ajp.AjpClientResponseStreamSourceChannel:void complete()",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void handleFlushComplete(boolean)",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void channelForciblyClosed()",
            "io.undertow.protocols.http2.Http2StreamSourceChannel:void channelForciblyClosed()",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$RequestExchangeListener:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void close()"
        ]
    },
    "io.undertow.server.protocol.http.HttpReadListener:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.ssl.SslConduit$5:void run()",
            "io.undertow.protocols.ssl.SslConduit:void runReadListener(boolean)",
            "io.undertow.protocols.ssl.SslConduit:boolean handleHandshakeResult(javax.net.ssl.SSLEngineResult)",
            "io.undertow.protocols.ssl.SslConduit$2:void run()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$FrameReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$3:void run()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel:void runInIoThread(java.lang.Runnable)",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http.ALPNLimitingSSLEngine:void limitCiphers(java.util.List)",
            "io.undertow.server.protocol.ParseTimeoutUpdater:void run()",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:io.undertow.server.HttpServerExchange dispatch(java.util.concurrent.Executor,java.lang.Runnable)",
            "io.undertow.util.SameThreadExecutor:void execute(java.lang.Runnable)",
            "io.undertow.util.PipeliningExecutor$1:void run()"
        ]
    },
    "io.undertow.server.protocol.http.HttpReadListener:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection$3:void handleEvent(io.undertow.protocols.ajp.AjpClientChannel)",
            "io.undertow.client.http.HttpClientConnection$5:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.client.http2.Http2ClientConnection$1:void handleEvent(io.undertow.protocols.http2.Http2Channel)",
            "io.undertow.client.ALPNClientSelector$2:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ALPNClientSelector$2:void handleSelected(java.lang.String)",
            "io.undertow.client.ALPNClientSelector:void runAlpn(org.xnio.ssl.SslConnection,org.xnio.ChannelListener,io.undertow.client.ClientCallback,io.undertow.client.ALPNClientSelector$ALPNProtocol[])",
            "io.undertow.protocols.ajp.AjpClientResponseStreamSourceChannel:void complete()",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void handleFlushComplete(boolean)",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void channelForciblyClosed()",
            "io.undertow.protocols.http2.Http2StreamSourceChannel:void channelForciblyClosed()",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$RequestExchangeListener:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void close()"
        ]
    },
    "io.undertow.server.protocol.http.HttpOpenListener:void handleEvent(org.xnio.StreamConnection,io.undertow.connector.PooledByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.http.HttpOpenListener:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.server.protocol.http.AlpnOpenListener$AlpnConnectionListener:void handleEvent(org.xnio.channels.StreamSourceChannel)"
        ]
    },
    "io.undertow.server.protocol.http2.Http2ReceiveListener:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection$3:void handleEvent(io.undertow.protocols.ajp.AjpClientChannel)",
            "io.undertow.client.http.HttpClientConnection$5:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.client.http2.Http2ClientConnection$1:void handleEvent(io.undertow.protocols.http2.Http2Channel)",
            "io.undertow.client.ALPNClientSelector$2:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ALPNClientSelector$2:void handleSelected(java.lang.String)",
            "io.undertow.client.ALPNClientSelector:void runAlpn(org.xnio.ssl.SslConnection,org.xnio.ChannelListener,io.undertow.client.ClientCallback,io.undertow.client.ALPNClientSelector$ALPNProtocol[])",
            "io.undertow.protocols.ajp.AjpClientResponseStreamSourceChannel:void complete()",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void handleFlushComplete(boolean)",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void channelForciblyClosed()",
            "io.undertow.protocols.http2.Http2StreamSourceChannel:void channelForciblyClosed()",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$RequestExchangeListener:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void close()"
        ]
    },
    "io.undertow.server.protocol.http.HttpReadListener$2:void handleEvent(org.xnio.conduits.ConduitStreamSinkChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.http.HttpReadListener$2:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.server.handlers.proxy.ProxyHandler$ProxyAction$1$2:boolean handlePush(io.undertow.client.ClientExchange,io.undertow.client.ClientExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http2.Http2ClientConnection$Http2ReceiveListener:void handleEvent(io.undertow.protocols.http2.Http2Channel)"
        ]
    },
    "io.undertow.server.protocol.http2.Http2ServerConnection:boolean pushResource(java.lang.String,io.undertow.util.HttpString,io.undertow.util.HeaderMap)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.LearningPushHandler:void doPush(io.undertow.server.HttpServerExchange,java.lang.String)",
            "io.undertow.server.handlers.ConfiguredPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.client.ajp.AjpClientConnection$3:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection$3:void handleEvent(io.undertow.protocols.ajp.AjpClientChannel)",
            "io.undertow.client.http.HttpClientConnection$5:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.client.http2.Http2ClientConnection$1:void handleEvent(io.undertow.protocols.http2.Http2Channel)",
            "io.undertow.client.ALPNClientSelector$2:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ALPNClientSelector$2:void handleSelected(java.lang.String)",
            "io.undertow.client.ALPNClientSelector:void runAlpn(org.xnio.ssl.SslConnection,org.xnio.ChannelListener,io.undertow.client.ClientCallback,io.undertow.client.ALPNClientSelector$ALPNProtocol[])",
            "io.undertow.protocols.ajp.AjpClientResponseStreamSourceChannel:void complete()",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void handleFlushComplete(boolean)",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void channelForciblyClosed()",
            "io.undertow.protocols.http2.Http2StreamSourceChannel:void channelForciblyClosed()",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$RequestExchangeListener:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void close()"
        ]
    },
    "io.undertow.client.http.HttpClientConnection$5:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection$3:void handleEvent(io.undertow.protocols.ajp.AjpClientChannel)",
            "io.undertow.client.http.HttpClientConnection$5:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.client.http2.Http2ClientConnection$1:void handleEvent(io.undertow.protocols.http2.Http2Channel)",
            "io.undertow.client.ALPNClientSelector$2:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ALPNClientSelector$2:void handleSelected(java.lang.String)",
            "io.undertow.client.ALPNClientSelector:void runAlpn(org.xnio.ssl.SslConnection,org.xnio.ChannelListener,io.undertow.client.ClientCallback,io.undertow.client.ALPNClientSelector$ALPNProtocol[])",
            "io.undertow.protocols.ajp.AjpClientResponseStreamSourceChannel:void complete()",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void handleFlushComplete(boolean)",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void channelForciblyClosed()",
            "io.undertow.protocols.http2.Http2StreamSourceChannel:void channelForciblyClosed()",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$RequestExchangeListener:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void close()"
        ]
    },
    "io.undertow.client.http2.Http2ClientConnection$1:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection$3:void handleEvent(io.undertow.protocols.ajp.AjpClientChannel)",
            "io.undertow.client.http.HttpClientConnection$5:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.client.http2.Http2ClientConnection$1:void handleEvent(io.undertow.protocols.http2.Http2Channel)",
            "io.undertow.client.ALPNClientSelector$2:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ALPNClientSelector$2:void handleSelected(java.lang.String)",
            "io.undertow.client.ALPNClientSelector:void runAlpn(org.xnio.ssl.SslConnection,org.xnio.ChannelListener,io.undertow.client.ClientCallback,io.undertow.client.ALPNClientSelector$ALPNProtocol[])",
            "io.undertow.protocols.ajp.AjpClientResponseStreamSourceChannel:void complete()",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void handleFlushComplete(boolean)",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void channelForciblyClosed()",
            "io.undertow.protocols.http2.Http2StreamSourceChannel:void channelForciblyClosed()",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$RequestExchangeListener:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void close()"
        ]
    },
    "io.undertow.client.ALPNClientSelector$2:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection$3:void handleEvent(io.undertow.protocols.ajp.AjpClientChannel)",
            "io.undertow.client.http.HttpClientConnection$5:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.client.http2.Http2ClientConnection$1:void handleEvent(io.undertow.protocols.http2.Http2Channel)",
            "io.undertow.client.ALPNClientSelector$2:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ALPNClientSelector$2:void handleSelected(java.lang.String)",
            "io.undertow.client.ALPNClientSelector:void runAlpn(org.xnio.ssl.SslConnection,org.xnio.ChannelListener,io.undertow.client.ClientCallback,io.undertow.client.ALPNClientSelector$ALPNProtocol[])",
            "io.undertow.protocols.ajp.AjpClientResponseStreamSourceChannel:void complete()",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void handleFlushComplete(boolean)",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void channelForciblyClosed()",
            "io.undertow.protocols.http2.Http2StreamSourceChannel:void channelForciblyClosed()",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$RequestExchangeListener:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void close()"
        ]
    },
    "io.undertow.client.http.HttpClientProvider:void handleConnected(org.xnio.StreamConnection,io.undertow.client.ClientCallback,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap,java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpClientProvider:void access$000(io.undertow.client.http.HttpClientProvider,org.xnio.StreamConnection,io.undertow.client.ClientCallback,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap,java.net.URI)"
        ]
    },
    "io.undertow.client.http2.Http2ClientProvider:void handleConnected(org.xnio.StreamConnection,io.undertow.client.ClientCallback,java.net.URI,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http2.Http2ClientProvider:void access$000(io.undertow.client.http2.Http2ClientProvider,org.xnio.StreamConnection,io.undertow.client.ClientCallback,java.net.URI,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)"
        ]
    },
    "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void exitRead()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:long transferTo(long,long,java.nio.channels.FileChannel)",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:long transferTo(long,java.nio.ByteBuffer,org.xnio.channels.StreamSinkChannel)",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:long read(java.nio.ByteBuffer[],int,int)",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:int read(java.nio.ByteBuffer)"
        ]
    },
    "io.undertow.server.protocol.framed.AbstractFramedStreamSinkChannel:void flushComplete()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.framed.AbstractFramedChannel:void flushSenders()"
        ]
    },
    "io.undertow.server.protocol.framed.AbstractFramedStreamSinkChannel:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.channels.DetachableStreamSinkChannel:void close()"
        ]
    },
    "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$RequestExchangeListener:void completed(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientProvider:void handleConnected(org.xnio.StreamConnection,io.undertow.client.ClientCallback,java.net.URI,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)",
            "io.undertow.client.ajp.AjpClientExchange:void setResponse(io.undertow.client.ClientResponse)",
            "io.undertow.client.ajp.AjpClientExchange:void setResponseListener(io.undertow.client.ClientCallback)",
            "io.undertow.client.ajp.AjpClientExchange:void invokeReadReadyCallback(io.undertow.client.ClientExchange)",
            "io.undertow.client.http.HttpClientProvider:void handleConnected(org.xnio.StreamConnection,io.undertow.client.ClientCallback,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap,java.net.URI)",
            "io.undertow.client.http.HttpClientProvider$3:void handleEvent(org.xnio.ssl.SslConnection)",
            "io.undertow.client.http.HttpClientExchange:void setResponse(io.undertow.client.ClientResponse)",
            "io.undertow.client.http.HttpClientExchange:void setResponseListener(io.undertow.client.ClientCallback)",
            "io.undertow.client.http.HttpClientExchange:void invokeReadReadyCallback()",
            "io.undertow.client.http2.Http2ClientProvider$4:void handleEvent(org.xnio.ssl.SslConnection)",
            "io.undertow.client.http2.Http2PriorKnowledgeClientProvider:void handleConnected(org.xnio.StreamConnection,io.undertow.client.ClientCallback,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap,java.lang.String)",
            "io.undertow.client.http2.Http2PriorKnowledgeClientProvider$5:void handleEvent(org.xnio.conduits.ConduitStreamSinkChannel)",
            "io.undertow.client.http2.Http2ClearClientProvider$Http2ClearOpenListener:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.client.http2.Http2ClientExchange:void responseReady(io.undertow.protocols.http2.Http2StreamSourceChannel)",
            "io.undertow.client.http2.Http2ClientConnection:void sendRequest(io.undertow.client.ClientRequest,io.undertow.client.ClientCallback)"
        ]
    },
    "io.undertow.channels.DetachableStreamSourceChannel:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.channels.DetachableStreamSourceChannel:void close()",
            "io.undertow.server.HttpServerExchange$ReadDispatchChannel:void close()",
            "io.undertow.websockets.core.function.ChannelFunctionStreamSourceChannel:void close()"
        ]
    },
    "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void complete()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.http2.Http2StreamSourceChannel:void complete()",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void exitRead()"
        ]
    },
    "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void shutdownReads()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.channels.DetachableStreamSourceChannel:void shutdownReads()",
            "io.undertow.io.UndertowInputStream:void close()",
            "io.undertow.server.protocol.ajp.AjpReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.websockets.core.function.ChannelFunctionStreamSourceChannel:void shutdownReads()"
        ]
    },
    "io.undertow.server.protocol.http2.Http2ServerConnection:void terminateRequestChannel(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.HttpServerExchange:io.undertow.server.HttpServerExchange endExchange()"
        ]
    },
    "io.undertow.websockets.core.function.ChannelFunctionStreamSourceChannel:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.channels.DetachableStreamSourceChannel:void close()",
            "io.undertow.websockets.core.function.ChannelFunctionStreamSourceChannel:void close()"
        ]
    },
    "io.undertow.websockets.core.WebSocketUtils:void echoFrame(io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.StreamSourceFrameChannel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.protocols.ssl.SslConduit:void resumeReads()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.IdleTimeoutConduit:void resumeReads()",
            "io.undertow.protocols.ssl.SslConduit:boolean handleHandshakeResult(javax.net.ssl.SSLEngineResult)"
        ]
    },
    "io.undertow.protocols.ssl.SslConduit:void wakeupReads()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.FixedLengthStreamSourceConduit:void wakeupReads()",
            "io.undertow.conduits.IdleTimeoutConduit:void wakeupReads()",
            "io.undertow.protocols.ssl.SslConduit$5$1:void run()"
        ]
    },
    "io.undertow.protocols.ssl.SslConduit:void clearReadRequiresWrite()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.ssl.SslConduit:boolean handleHandshakeResult(javax.net.ssl.SSLEngineResult)"
        ]
    },
    "io.undertow.protocols.ssl.UndertowSslConnection:void notifyReadClosed()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.protocols.ssl.SslConduit:void terminateReads()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.InflatingStreamSourceConduit:void terminateReads()",
            "io.undertow.conduits.IdleTimeoutConduit:void terminateReads()",
            "io.undertow.conduits.IdleTimeoutConduit:void safeClose(org.xnio.conduits.StreamSourceConduit)"
        ]
    },
    "io.undertow.protocols.ssl.SslConduit:void notifyWriteClosed()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.ssl.UndertowSslConnection:void notifyWriteClosed()",
            "io.undertow.protocols.ssl.SslConduit:void truncateWrites()",
            "io.undertow.protocols.ssl.SslConduit:boolean flush()",
            "io.undertow.protocols.ssl.SslConduit:void notifyReadClosed()",
            "io.undertow.protocols.ssl.SslConduit:long doWrap(java.nio.ByteBuffer[],int,int)",
            "io.undertow.protocols.ssl.SslConduit:void closed()"
        ]
    },
    "io.undertow.protocols.ssl.SslConduit:void closed()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.ssl.SslConduit:boolean flush()",
            "io.undertow.protocols.ssl.SslConduit:void notifyWriteClosed()",
            "io.undertow.protocols.ssl.SslConduit:void notifyReadClosed()",
            "io.undertow.protocols.ssl.SslConduit:void close()"
        ]
    },
    "io.undertow.protocols.ssl.SslConduit:int read(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.InflatingStreamSourceConduit:int read(java.nio.ByteBuffer)",
            "io.undertow.conduits.FinishableStreamSourceConduit:int read(java.nio.ByteBuffer)",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:int read(java.nio.ByteBuffer)",
            "io.undertow.conduits.ChunkedStreamSourceConduit:int read(java.nio.ByteBuffer)",
            "io.undertow.conduits.IdleTimeoutConduit:int read(java.nio.ByteBuffer)",
            "io.undertow.protocols.ssl.SslConduit:long doUnwrap(java.nio.ByteBuffer[],int,int)",
            "io.undertow.server.protocol.ajp.AjpServerRequestConduit:int doRead(java.nio.ByteBuffer,long)"
        ]
    },
    "io.undertow.protocols.ssl.SslConduit:long read(java.nio.ByteBuffer[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.FinishableStreamSourceConduit:long read(java.nio.ByteBuffer[],int,int)",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:long read(java.nio.ByteBuffer[],int,int)",
            "io.undertow.conduits.IdleTimeoutConduit:long read(java.nio.ByteBuffer[],int,int)"
        ]
    },
    "io.undertow.protocols.ssl.SslConduit:void doHandshake()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.ssl.SslConduit:void access$900(io.undertow.protocols.ssl.SslConduit)"
        ]
    },
    "io.undertow.protocols.ssl.SslConduit$SslReadReadyHandler:void readReady()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.EmptyStreamSourceConduit$1:void run()",
            "io.undertow.conduits.IdleTimeoutConduit$1:void run()",
            "io.undertow.conduits.ReadTimeoutStreamSourceConduit$2:void readReady()",
            "io.undertow.protocols.ssl.SslConduit$SslWriteReadyHandler:void writeReady()",
            "io.undertow.protocols.ssl.SslConduit$1:void run()",
            "io.undertow.protocols.ssl.SslConduit$SslReadReadyHandler:void readReady()"
        ]
    },
    "io.undertow.protocols.ssl.SslConduit:int write(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpRequestConduit:int processWrite(int,java.nio.ByteBuffer)",
            "io.undertow.client.http.HttpRequestConduit:int write(java.nio.ByteBuffer)",
            "io.undertow.client.http.HttpRequestConduit:long write(java.nio.ByteBuffer[],int,int)",
            "io.undertow.conduits.BytesSentStreamSinkConduit:int write(java.nio.ByteBuffer)",
            "io.undertow.conduits.ChunkedStreamSinkConduit:int doWrite(java.nio.ByteBuffer)",
            "io.undertow.conduits.ChunkedStreamSinkConduit:boolean flush()",
            "io.undertow.conduits.PreChunkedStreamSinkConduit:int doWrite(java.nio.ByteBuffer)",
            "io.undertow.conduits.AbstractFixedLengthStreamSinkConduit:int write(java.nio.ByteBuffer)",
            "io.undertow.conduits.IdleTimeoutConduit:int write(java.nio.ByteBuffer)",
            "io.undertow.protocols.ssl.SslConduit:long doWrap(java.nio.ByteBuffer[],int,int)",
            "io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit:boolean flushBuffer()",
            "io.undertow.server.protocol.http.HttpResponseConduit:int processWrite(int,java.lang.Object,int,int)",
            "io.undertow.server.protocol.http.HttpResponseConduit:int processStatefulWrite(int,java.lang.Object,int,int)",
            "io.undertow.server.protocol.http.HttpResponseConduit:boolean flushHeaderBuffer(java.nio.ByteBuffer,java.lang.String,io.undertow.util.HeaderValues,int,long,int)",
            "io.undertow.server.protocol.http.HttpResponseConduit:int write(java.nio.ByteBuffer)",
            "io.undertow.server.protocol.http.HttpResponseConduit:long write(java.nio.ByteBuffer[],int,int)"
        ]
    },
    "io.undertow.protocols.ssl.SslConduit:long write(java.nio.ByteBuffer[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpRequestConduit:int processWrite(int,java.nio.ByteBuffer)",
            "io.undertow.client.http.HttpRequestConduit:long write(java.nio.ByteBuffer[],int,int)",
            "io.undertow.conduits.BytesSentStreamSinkConduit:long write(java.nio.ByteBuffer[],int,int)",
            "io.undertow.conduits.ChunkedStreamSinkConduit:int doWrite(java.nio.ByteBuffer)",
            "io.undertow.conduits.DeflatingStreamSinkConduit:boolean performFlushIfRequired()",
            "io.undertow.conduits.AbstractFixedLengthStreamSinkConduit:long write(java.nio.ByteBuffer[],int,int)",
            "io.undertow.conduits.IdleTimeoutConduit:long write(java.nio.ByteBuffer[],int,int)",
            "io.undertow.conduits.AbstractFramedStreamSinkConduit:long doWrite(java.nio.ByteBuffer[],int,int)",
            "io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit:long flushBufferWithUserData(java.nio.ByteBuffer[],int,int)",
            "io.undertow.server.protocol.http.HttpResponseConduit:int processWrite(int,java.lang.Object,int,int)",
            "io.undertow.server.protocol.http.HttpResponseConduit:int processStatefulWrite(int,java.lang.Object,int,int)",
            "io.undertow.server.protocol.http.HttpResponseConduit:long write(java.nio.ByteBuffer[],int,int)"
        ]
    },
    "io.undertow.protocols.ssl.SslConduit:boolean flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpRequestConduit:boolean flush()",
            "io.undertow.conduits.HeadStreamSinkConduit:boolean flush()",
            "io.undertow.conduits.ChunkedStreamSinkConduit:boolean flush()",
            "io.undertow.conduits.PreChunkedStreamSinkConduit:boolean flush()",
            "io.undertow.conduits.DeflatingStreamSinkConduit:boolean flush()",
            "io.undertow.conduits.AbstractFixedLengthStreamSinkConduit:boolean flush()",
            "io.undertow.conduits.IdleTimeoutConduit:boolean flush()",
            "io.undertow.conduits.AbstractFramedStreamSinkConduit:boolean flushQueuedData()",
            "io.undertow.conduits.FinishableStreamSinkConduit:boolean flush()",
            "io.undertow.protocols.ssl.SslConduit:boolean flush()",
            "io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit:boolean flushPipelinedData()",
            "io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit:boolean flushBuffer()",
            "io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit:boolean flush()",
            "io.undertow.server.protocol.http.HttpResponseConduit:boolean flush()",
            "io.undertow.server.ConnectionSSLSessionInfo:void renegotiateNoRequest(io.undertow.server.HttpServerExchange,org.xnio.SslClientAuthMode)"
        ]
    },
    "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void resumeReads()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.channels.DetachableStreamSourceChannel:void resumeReads()",
            "io.undertow.client.http.HttpClientConnection$ClientReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.io.AsyncReceiverImpl$3$2:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.io.AsyncReceiverImpl$5$2:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.io.AsyncReceiverImpl:void receiveFullString(io.undertow.io.Receiver$FullStringCallback,io.undertow.io.Receiver$ErrorCallback,java.nio.charset.Charset)",
            "io.undertow.io.AsyncReceiverImpl:void receivePartialString(io.undertow.io.Receiver$PartialStringCallback,io.undertow.io.Receiver$ErrorCallback,java.nio.charset.Charset)",
            "io.undertow.io.AsyncReceiverImpl:void receiveFullBytes(io.undertow.io.Receiver$FullBytesCallback,io.undertow.io.Receiver$ErrorCallback)",
            "io.undertow.io.AsyncReceiverImpl:void receivePartialBytes(io.undertow.io.Receiver$PartialBytesCallback,io.undertow.io.Receiver$ErrorCallback)",
            "io.undertow.protocols.ajp.AjpClientResponseStreamSourceChannel:void resumeReads()",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler$NonBlockingParseTask:void run()",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$RequestExchangeListener:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.ajp.AjpReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.HttpServerExchange$ReadDispatchChannel:void resumeReads()",
            "io.undertow.server.HttpServerExchange$ReadDispatchChannel:void runResume()",
            "io.undertow.util.Transfer:void initiateTransfer(org.xnio.channels.StreamSourceChannel,org.xnio.channels.StreamSinkChannel,org.xnio.ChannelListener,org.xnio.ChannelListener,org.xnio.ChannelExceptionHandler,org.xnio.ChannelExceptionHandler,io.undertow.connector.ByteBufferPool)",
            "io.undertow.util.StringReadChannelListener:void setup(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.util.Transfer$TransferListener:void handleEvent(java.nio.channels.Channel)",
            "io.undertow.websockets.core.function.ChannelFunctionStreamSourceChannel:void resumeReads()",
            "io.undertow.websockets.core.BufferedTextMessage:void read(io.undertow.websockets.core.StreamSourceFrameChannel,io.undertow.websockets.core.WebSocketCallback)",
            "io.undertow.websockets.core.BufferedBinaryMessage:void read(io.undertow.websockets.core.StreamSourceFrameChannel,io.undertow.websockets.core.WebSocketCallback)",
            "io.undertow.websockets.spi.AsyncWebSocketHttpServerExchange:org.xnio.IoFuture readRequestData()"
        ]
    },
    "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void wakeupReads()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.channels.DetachableStreamSourceChannel:void wakeupReads()",
            "io.undertow.io.AsyncReceiverImpl:void resume()",
            "io.undertow.protocols.ajp.AjpClientResponseStreamSourceChannel:void wakeupReads()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$2:void handleEvent(io.undertow.server.protocol.framed.AbstractFramedChannel)",
            "io.undertow.server.HttpServerExchange$ReadDispatchChannel:void wakeupReads()",
            "io.undertow.server.HttpServerExchange$ReadDispatchChannel:void runResume()",
            "io.undertow.util.Transfer:void done(org.xnio.channels.StreamSourceChannel,org.xnio.channels.StreamSinkChannel,org.xnio.ChannelListener,org.xnio.ChannelListener)",
            "io.undertow.websockets.core.function.ChannelFunctionStreamSourceChannel:void wakeupReads()"
        ]
    },
    "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void dataReady(io.undertow.server.protocol.framed.FrameHeaderData,io.undertow.connector.PooledByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void <init>(io.undertow.server.protocol.framed.AbstractFramedChannel,io.undertow.connector.PooledByteBuffer,long)",
            "io.undertow.server.protocol.framed.AbstractFramedChannel:io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel receive()"
        ]
    },
    "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void markStreamBroken()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.http2.AbstractHttp2StreamSourceChannel:void markStreamBroken()",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:int read(java.nio.ByteBuffer)",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void beforeRead()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel:void handleLastFrame(io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel)",
            "io.undertow.server.protocol.framed.AbstractFramedChannel:void markReadsBroken(java.lang.Throwable)"
        ]
    },
    "io.undertow.server.protocol.framed.AbstractFramedChannel$5:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.ssl.SslConduit$5:void run()",
            "io.undertow.protocols.ssl.SslConduit:void runReadListener(boolean)",
            "io.undertow.protocols.ssl.SslConduit:boolean handleHandshakeResult(javax.net.ssl.SSLEngineResult)",
            "io.undertow.protocols.ssl.SslConduit$2:void run()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$FrameReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$3:void run()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel:void runInIoThread(java.lang.Runnable)",
            "io.undertow.server.protocol.http.ALPNLimitingSSLEngine:void limitCiphers(java.util.List)",
            "io.undertow.server.protocol.ParseTimeoutUpdater:void run()",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:io.undertow.server.HttpServerExchange dispatch(java.util.concurrent.Executor,java.lang.Runnable)",
            "io.undertow.util.SameThreadExecutor:void execute(java.lang.Runnable)",
            "io.undertow.util.PipeliningExecutor$1:void run()"
        ]
    },
    "io.undertow.server.protocol.framed.AbstractFramedChannel$FrameWriteListener:void handleEvent(org.xnio.channels.StreamSinkChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.framed.AbstractFramedChannel$FrameWriteListener:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.server.protocol.framed.AbstractFramedChannel$4:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.ssl.SslConduit$5:void run()",
            "io.undertow.protocols.ssl.SslConduit:void runReadListener(boolean)",
            "io.undertow.protocols.ssl.SslConduit:boolean handleHandshakeResult(javax.net.ssl.SSLEngineResult)",
            "io.undertow.protocols.ssl.SslConduit$2:void run()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$FrameReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$3:void run()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel:void runInIoThread(java.lang.Runnable)",
            "io.undertow.server.protocol.http.ALPNLimitingSSLEngine:void limitCiphers(java.util.List)",
            "io.undertow.server.protocol.ParseTimeoutUpdater:void run()",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:io.undertow.server.HttpServerExchange dispatch(java.util.concurrent.Executor,java.lang.Runnable)",
            "io.undertow.util.SameThreadExecutor:void execute(java.lang.Runnable)",
            "io.undertow.util.PipeliningExecutor$1:void run()"
        ]
    },
    "io.undertow.server.protocol.framed.AbstractFramedChannel:void recalculateHeldFrames()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.ajp.AjpClientChannel:void recalculateHeldFrames()",
            "io.undertow.protocols.http2.Http2Channel:void notifyFlowControlAllowed()"
        ]
    },
    "io.undertow.server.protocol.framed.AbstractFramedChannel:void queueFrame(io.undertow.server.protocol.framed.AbstractFramedStreamSinkChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.framed.AbstractFramedStreamSinkChannel:void queueFinalFrame()",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSinkChannel:void handleBufferFull()"
        ]
    },
    "io.undertow.server.protocol.framed.AbstractFramedChannel$FrameCloseListener:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection$3:void handleEvent(io.undertow.protocols.ajp.AjpClientChannel)",
            "io.undertow.client.http.HttpClientConnection$5:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.client.http2.Http2ClientConnection$1:void handleEvent(io.undertow.protocols.http2.Http2Channel)",
            "io.undertow.client.ALPNClientSelector$2:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ALPNClientSelector$2:void handleSelected(java.lang.String)",
            "io.undertow.client.ALPNClientSelector:void runAlpn(org.xnio.ssl.SslConnection,org.xnio.ChannelListener,io.undertow.client.ClientCallback,io.undertow.client.ALPNClientSelector$ALPNProtocol[])",
            "io.undertow.protocols.ajp.AjpClientResponseStreamSourceChannel:void complete()",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void handleFlushComplete(boolean)",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void channelForciblyClosed()",
            "io.undertow.protocols.http2.Http2StreamSourceChannel:void channelForciblyClosed()",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$RequestExchangeListener:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void close()"
        ]
    },
    "io.undertow.server.protocol.framed.AbstractFramedChannel$FrameCloseListener$2:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.ssl.SslConduit$5:void run()",
            "io.undertow.protocols.ssl.SslConduit:void runReadListener(boolean)",
            "io.undertow.protocols.ssl.SslConduit:boolean handleHandshakeResult(javax.net.ssl.SSLEngineResult)",
            "io.undertow.protocols.ssl.SslConduit$2:void run()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$FrameReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$3:void run()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel:void runInIoThread(java.lang.Runnable)",
            "io.undertow.server.protocol.http.ALPNLimitingSSLEngine:void limitCiphers(java.util.List)",
            "io.undertow.server.protocol.ParseTimeoutUpdater:void run()",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:io.undertow.server.HttpServerExchange dispatch(java.util.concurrent.Executor,java.lang.Runnable)",
            "io.undertow.util.SameThreadExecutor:void execute(java.lang.Runnable)",
            "io.undertow.util.PipeliningExecutor$1:void run()"
        ]
    },
    "io.undertow.protocols.http2.Http2StreamSinkChannel:void updateFlowControlWindow(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.http2.Http2Channel:void handleWindowUpdate(int,int)"
        ]
    },
    "io.undertow.server.protocol.framed.AbstractFramedStreamSinkChannel:void wakeupWrites()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.channels.DetachableStreamSinkChannel:void wakeupWrites()",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSinkChannel:void close()",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSinkChannel:void flushComplete()",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSinkChannel:void markBroken()",
            "io.undertow.server.HttpServerExchange$WriteDispatchChannel:void wakeupWrites()",
            "io.undertow.server.HttpServerExchange$WriteDispatchChannel:void runResume()",
            "io.undertow.util.Transfer:void done(org.xnio.channels.StreamSourceChannel,org.xnio.channels.StreamSinkChannel,org.xnio.ChannelListener,org.xnio.ChannelListener)"
        ]
    },
    "io.undertow.server.protocol.framed.AbstractFramedStreamSinkChannel:void resumeWrites()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.channels.DetachableStreamSinkChannel:void resumeWrites()",
            "io.undertow.client.ajp.AjpClientConnection:void handleFailedFlush(io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel)",
            "io.undertow.client.http2.Http2ClientConnection:void sendRequest(io.undertow.client.ClientRequest,io.undertow.client.ClientCallback)",
            "io.undertow.io.AsyncSenderImpl:void send(java.nio.ByteBuffer,io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void send(java.nio.ByteBuffer[],io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void close(io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void invokeOnComplete()",
            "io.undertow.io.AsyncSenderImpl$TransferTask:boolean run(boolean)",
            "io.undertow.protocols.http2.Http2Channel:void flushChannel(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.protocols.http2.Http2Channel:void sendPing(byte[],org.xnio.ChannelExceptionHandler,boolean)",
            "io.undertow.protocols.http2.Http2Channel:void sendGoAway(int,org.xnio.ChannelExceptionHandler)",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$HttpClientPingTask$1$1:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$ConnectionPoolPingTask$1:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler$ProxyAction$1:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler$HTTPTrailerChannelListener:void handleEvent(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.server.handlers.sse.ServerSentEventConnection:void fillBuffer()",
            "io.undertow.server.handlers.sse.ServerSentEventConnection:void close(java.io.IOException)",
            "io.undertow.server.handlers.sse.ServerSentEventHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.sse.ServerSentEventConnection$SseWriteListener:void handleEvent(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.server.protocol.http.HttpContinue:void internalSendContinueResponse(io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)",
            "io.undertow.server.HttpServerExchange$WriteDispatchChannel:void resumeWrites()",
            "io.undertow.server.HttpServerExchange$WriteDispatchChannel:void runResume()",
            "io.undertow.util.Transfer:void initiateTransfer(org.xnio.channels.StreamSourceChannel,org.xnio.channels.StreamSinkChannel,org.xnio.ChannelListener,org.xnio.ChannelListener,org.xnio.ChannelExceptionHandler,org.xnio.ChannelExceptionHandler,io.undertow.connector.ByteBufferPool)",
            "io.undertow.util.StringWriteChannelListener:void setup(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.util.StringWriteChannelListener:void handleEvent(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.util.StringWriteChannelListener:void writeDone(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.util.Transfer$TransferListener:void handleEvent(java.nio.channels.Channel)",
            "io.undertow.websockets.core.WebSocketChannel:void sendClose()",
            "io.undertow.websockets.core.WebSocketUtils$2:void handleEvent(io.undertow.websockets.core.StreamSinkFrameChannel)",
            "io.undertow.websockets.core.WebSockets:void flushChannelAsync(io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback,io.undertow.websockets.core.StreamSinkFrameChannel,java.lang.Object,long)"
        ]
    },
    "io.undertow.protocols.ssl.ALPNHackSSLEngine:javax.net.ssl.SSLEngineResult unwrap(java.nio.ByteBuffer,java.nio.ByteBuffer[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.ssl.ALPNHackSSLEngine:javax.net.ssl.SSLEngineResult unwrap(java.nio.ByteBuffer,java.nio.ByteBuffer[],int,int)",
            "io.undertow.protocols.ssl.SslConduit:long doUnwrap(java.nio.ByteBuffer[],int,int)",
            "io.undertow.server.protocol.http.ALPNLimitingSSLEngine:javax.net.ssl.SSLEngineResult unwrap(java.nio.ByteBuffer,java.nio.ByteBuffer[],int,int)"
        ]
    },
    "io.undertow.server.protocol.http.ALPNLimitingSSLEngine:javax.net.ssl.SSLEngineResult unwrap(java.nio.ByteBuffer,java.nio.ByteBuffer[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.ssl.SslConduit:long doUnwrap(java.nio.ByteBuffer[],int,int)"
        ]
    },
    "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void checkHostUp(java.lang.String,java.lang.String,int,io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$PingCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void processPing(io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler$RequestData)"
        ]
    },
    "io.undertow.server.handlers.proxy.mod_cluster.Node:void ping(io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$PingCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void processStatus(io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler$RequestData)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void processPing(io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler$RequestData)"
        ]
    },
    "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$1$1:void completed(io.undertow.server.HttpServerExchange,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.mod_cluster.ModClusterProxyClient$1:void completed(io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.ProxyConnection)",
            "io.undertow.server.handlers.proxy.mod_cluster.ModClusterProxyClient:void getConnection(io.undertow.server.handlers.proxy.ProxyClient$ProxyTarget,io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.ProxyCallback,long,java.util.concurrent.TimeUnit)",
            "io.undertow.server.handlers.proxy.LoadBalancingProxyClient:void getConnection(io.undertow.server.handlers.proxy.ProxyClient$ProxyTarget,io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.ProxyCallback,long,java.util.concurrent.TimeUnit)",
            "io.undertow.server.handlers.proxy.ProxyConnectionPool:void connectionReady(io.undertow.server.handlers.proxy.ProxyConnectionPool$ConnectionHolder,io.undertow.server.handlers.proxy.ProxyCallback,io.undertow.server.HttpServerExchange,boolean)",
            "io.undertow.server.handlers.proxy.SimpleProxyClientProvider:void getConnection(io.undertow.server.handlers.proxy.ProxyClient$ProxyTarget,io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.ProxyCallback,long,java.util.concurrent.TimeUnit)",
            "io.undertow.server.handlers.proxy.SimpleProxyClientProvider$ConnectNotifier:void completed(io.undertow.client.ClientConnection)",
            "io.undertow.server.handlers.proxy.LoadBalancingProxyClient$2:void completed(io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.ProxyConnection)"
        ]
    },
    "io.undertow.server.handlers.proxy.ProxyHandler$ProxyClientHandler:void completed(io.undertow.server.HttpServerExchange,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.mod_cluster.ModClusterProxyClient$1:void completed(io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.ProxyConnection)",
            "io.undertow.server.handlers.proxy.mod_cluster.ModClusterProxyClient:void getConnection(io.undertow.server.handlers.proxy.ProxyClient$ProxyTarget,io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.ProxyCallback,long,java.util.concurrent.TimeUnit)",
            "io.undertow.server.handlers.proxy.LoadBalancingProxyClient:void getConnection(io.undertow.server.handlers.proxy.ProxyClient$ProxyTarget,io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.ProxyCallback,long,java.util.concurrent.TimeUnit)",
            "io.undertow.server.handlers.proxy.ProxyConnectionPool:void connectionReady(io.undertow.server.handlers.proxy.ProxyConnectionPool$ConnectionHolder,io.undertow.server.handlers.proxy.ProxyCallback,io.undertow.server.HttpServerExchange,boolean)",
            "io.undertow.server.handlers.proxy.SimpleProxyClientProvider:void getConnection(io.undertow.server.handlers.proxy.ProxyClient$ProxyTarget,io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.ProxyCallback,long,java.util.concurrent.TimeUnit)",
            "io.undertow.server.handlers.proxy.SimpleProxyClientProvider$ConnectNotifier:void completed(io.undertow.client.ClientConnection)",
            "io.undertow.server.handlers.proxy.LoadBalancingProxyClient$2:void completed(io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.ProxyConnection)"
        ]
    },
    "io.undertow.io.AsyncSenderImpl:void transferFrom(java.nio.channels.FileChannel,io.undertow.io.IoCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.cache.ResponseCachingSender:void transferFrom(java.nio.channels.FileChannel,io.undertow.io.IoCallback)",
            "io.undertow.server.handlers.resource.PathResource$1TransferTask:void run()"
        ]
    },
    "io.undertow.io.AsyncSenderImpl$TransferTask:void handleEvent(org.xnio.channels.StreamSinkChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.AsyncSenderImpl$TransferTask:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.server.handlers.error.FileErrorPageHandler:void serveFile(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.error.FileErrorPageHandler:void access$100(io.undertow.server.handlers.error.FileErrorPageHandler,io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.resource.PathResource:void serveImpl(io.undertow.io.Sender,io.undertow.server.HttpServerExchange,long,long,io.undertow.io.IoCallback,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.resource.PathResource:void serve(io.undertow.io.Sender,io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)",
            "io.undertow.server.handlers.resource.PathResource:void serveRange(io.undertow.io.Sender,io.undertow.server.HttpServerExchange,long,long,io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.server.handlers.resource.PathResource$1ServerTask:void onComplete(io.undertow.server.HttpServerExchange,io.undertow.io.Sender)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.AsyncSenderImpl:void send(java.nio.ByteBuffer,io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void send(java.lang.String,java.nio.charset.Charset,io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void close(io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void invokeOnComplete()",
            "io.undertow.io.AsyncSenderImpl$1:void handleEvent(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.io.BlockingSenderImpl:void invokeOnComplete(io.undertow.io.IoCallback)",
            "io.undertow.server.handlers.resource.PathResource$1ServerTask:void run()",
            "io.undertow.server.handlers.resource.URLResource$1ServerTask:void run()",
            "io.undertow.server.handlers.resource.CachedResource$DereferenceCallback:void onComplete(io.undertow.server.HttpServerExchange,io.undertow.io.Sender)",
            "io.undertow.server.handlers.resource.PathResource$1TransferTask$1:void onComplete(io.undertow.server.HttpServerExchange,io.undertow.io.Sender)",
            "io.undertow.server.protocol.http.HttpContinue$3$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http.HttpContinue:void internalSendContinueResponse(io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.server.handlers.resource.URLResource$1ServerTask:void onComplete(io.undertow.server.HttpServerExchange,io.undertow.io.Sender)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.AsyncSenderImpl:void send(java.nio.ByteBuffer,io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void send(java.lang.String,java.nio.charset.Charset,io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void close(io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void invokeOnComplete()",
            "io.undertow.io.AsyncSenderImpl$1:void handleEvent(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.io.BlockingSenderImpl:void invokeOnComplete(io.undertow.io.IoCallback)",
            "io.undertow.server.handlers.resource.PathResource$1ServerTask:void run()",
            "io.undertow.server.handlers.resource.URLResource$1ServerTask:void run()",
            "io.undertow.server.handlers.resource.CachedResource$DereferenceCallback:void onComplete(io.undertow.server.HttpServerExchange,io.undertow.io.Sender)",
            "io.undertow.server.handlers.resource.PathResource$1TransferTask$1:void onComplete(io.undertow.server.HttpServerExchange,io.undertow.io.Sender)",
            "io.undertow.server.protocol.http.HttpContinue$3$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http.HttpContinue:void internalSendContinueResponse(io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.server.handlers.resource.URLResource:void serveImpl(io.undertow.io.Sender,io.undertow.server.HttpServerExchange,long,long,boolean,io.undertow.io.IoCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.resource.URLResource:void serve(io.undertow.io.Sender,io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)",
            "io.undertow.server.handlers.resource.URLResource:void serveRange(io.undertow.io.Sender,io.undertow.server.HttpServerExchange,long,long,io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler$NonBlockingParseTask:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.ssl.SslConduit$5:void run()",
            "io.undertow.protocols.ssl.SslConduit:void runReadListener(boolean)",
            "io.undertow.protocols.ssl.SslConduit:boolean handleHandshakeResult(javax.net.ssl.SSLEngineResult)",
            "io.undertow.protocols.ssl.SslConduit$2:void run()",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler$NonBlockingParseTask$1:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$FrameReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$3:void run()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel:void runInIoThread(java.lang.Runnable)",
            "io.undertow.server.protocol.http.ALPNLimitingSSLEngine:void limitCiphers(java.util.List)",
            "io.undertow.server.protocol.ParseTimeoutUpdater:void run()",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:io.undertow.server.HttpServerExchange dispatch(java.util.concurrent.Executor,java.lang.Runnable)",
            "io.undertow.util.SameThreadExecutor:void execute(java.lang.Runnable)",
            "io.undertow.util.PipeliningExecutor$1:void run()"
        ]
    },
    "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void handleEvent(org.xnio.channels.StreamSourceChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.server.HttpServerExchange:io.undertow.server.HttpServerExchange dispatch(io.undertow.server.HttpHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.resource.ResourceHandler:void serveResource(io.undertow.server.HttpServerExchange,boolean)",
            "io.undertow.server.handlers.RequestLimit$1:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)",
            "io.undertow.server.handlers.RequestLimit$2:void run()",
            "io.undertow.server.handlers.RequestLimit:int setMaximumConcurrentRequests(int)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler$1:void onComplete(io.undertow.server.HttpServerExchange,io.undertow.io.Sender)",
            "io.undertow.server.protocol.http.HttpContinue$3:void handleEvent(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.server.protocol.http.HttpContinue$4:void handleException(java.nio.channels.Channel,java.io.IOException)"
        ]
    },
    "io.undertow.server.handlers.accesslog.AccessLogHandler$AccessLogCompletionListener:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()"
        ]
    },
    "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler$NonBlockingParseTask$1:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection$3:void handleEvent(io.undertow.protocols.ajp.AjpClientChannel)",
            "io.undertow.client.http.HttpClientConnection$5:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.client.http2.Http2ClientConnection$1:void handleEvent(io.undertow.protocols.http2.Http2Channel)",
            "io.undertow.client.ALPNClientSelector$2:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ALPNClientSelector$2:void handleSelected(java.lang.String)",
            "io.undertow.client.ALPNClientSelector:void runAlpn(org.xnio.ssl.SslConnection,org.xnio.ChannelListener,io.undertow.client.ClientCallback,io.undertow.client.ALPNClientSelector$ALPNProtocol[])",
            "io.undertow.protocols.ajp.AjpClientResponseStreamSourceChannel:void complete()",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void handleFlushComplete(boolean)",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void channelForciblyClosed()",
            "io.undertow.protocols.http2.Http2StreamSourceChannel:void channelForciblyClosed()",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$RequestExchangeListener:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void close()"
        ]
    },
    "io.undertow.server.handlers.JDBCLogHandler$JDBCLogCompletionListener:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()"
        ]
    },
    "io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit:void exchangeComplete(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.http.HttpServerConnection:void exchangeComplete(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit:void performFlush(io.undertow.server.HttpServerExchange,io.undertow.server.protocol.http.HttpServerConnection)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit:void exchangeComplete(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit$1:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection$3:void handleEvent(io.undertow.protocols.ajp.AjpClientChannel)",
            "io.undertow.client.http.HttpClientConnection$5:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.client.http2.Http2ClientConnection$1:void handleEvent(io.undertow.protocols.http2.Http2Channel)",
            "io.undertow.client.ALPNClientSelector$2:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ALPNClientSelector$2:void handleSelected(java.lang.String)",
            "io.undertow.client.ALPNClientSelector:void runAlpn(org.xnio.ssl.SslConnection,org.xnio.ChannelListener,io.undertow.client.ClientCallback,io.undertow.client.ALPNClientSelector$ALPNProtocol[])",
            "io.undertow.protocols.ajp.AjpClientResponseStreamSourceChannel:void complete()",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void handleFlushComplete(boolean)",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void channelForciblyClosed()",
            "io.undertow.protocols.http2.Http2StreamSourceChannel:void channelForciblyClosed()",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$RequestExchangeListener:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void close()"
        ]
    },
    "io.undertow.server.protocol.http.HttpServerConnection:void exchangeComplete(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()"
        ]
    },
    "io.undertow.server.protocol.http.HttpOpenListener:void handleEvent(org.xnio.StreamConnection)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.http.HttpOpenListener:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.server.protocol.http.AlpnOpenListener$AlpnConnectionListener:void handleEvent(org.xnio.channels.StreamSourceChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.http.AlpnOpenListener:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.server.protocol.http.AlpnOpenListener$AlpnConnectionListener:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.server.protocol.http.HttpReadListener$2:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection$3:void handleEvent(io.undertow.protocols.ajp.AjpClientChannel)",
            "io.undertow.client.http.HttpClientConnection$5:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.client.http2.Http2ClientConnection$1:void handleEvent(io.undertow.protocols.http2.Http2Channel)",
            "io.undertow.client.ALPNClientSelector$2:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ALPNClientSelector$2:void handleSelected(java.lang.String)",
            "io.undertow.client.ALPNClientSelector:void runAlpn(org.xnio.ssl.SslConnection,org.xnio.ChannelListener,io.undertow.client.ClientCallback,io.undertow.client.ALPNClientSelector$ALPNProtocol[])",
            "io.undertow.protocols.ajp.AjpClientResponseStreamSourceChannel:void complete()",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void handleFlushComplete(boolean)",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void channelForciblyClosed()",
            "io.undertow.protocols.http2.Http2StreamSourceChannel:void channelForciblyClosed()",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$RequestExchangeListener:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void close()"
        ]
    },
    "io.undertow.client.http2.Http2ClientConnection$Http2ReceiveListener:void handleEvent(io.undertow.protocols.http2.Http2Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http2.Http2ClientConnection$Http2ReceiveListener:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.server.handlers.LearningPushHandler:void doPush(io.undertow.server.HttpServerExchange,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.LearningPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.client.http.HttpClientProvider:void access$000(io.undertow.client.http.HttpClientProvider,org.xnio.StreamConnection,io.undertow.client.ClientCallback,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap,java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpClientProvider$2:void handleEvent(org.xnio.StreamConnection)"
        ]
    },
    "io.undertow.client.http2.Http2ClientProvider:void access$000(io.undertow.client.http2.Http2ClientProvider,org.xnio.StreamConnection,io.undertow.client.ClientCallback,java.net.URI,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http2.Http2ClientProvider$3:void handleEvent(org.xnio.StreamConnection)"
        ]
    },
    "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:long transferTo(long,long,java.nio.channels.FileChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.channels.DetachableStreamSourceChannel:long transferTo(long,long,java.nio.channels.FileChannel)",
            "io.undertow.protocols.http2.Http2StreamSourceChannel:long transferTo(long,long,java.nio.channels.FileChannel)",
            "io.undertow.websockets.core.function.ChannelFunctionStreamSourceChannel:long transferTo(long,long,java.nio.channels.FileChannel)",
            "io.undertow.websockets.core.StreamSourceFrameChannel:long transferTo(long,long,java.nio.channels.FileChannel)"
        ]
    },
    "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:long transferTo(long,java.nio.ByteBuffer,org.xnio.channels.StreamSinkChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.channels.DetachableStreamSourceChannel:long transferTo(long,java.nio.ByteBuffer,org.xnio.channels.StreamSinkChannel)",
            "io.undertow.protocols.http2.Http2StreamSourceChannel:long transferTo(long,java.nio.ByteBuffer,org.xnio.channels.StreamSinkChannel)"
        ]
    },
    "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:long read(java.nio.ByteBuffer[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.channels.DetachableStreamSourceChannel:long read(java.nio.ByteBuffer[],int,int)",
            "io.undertow.protocols.http2.Http2StreamSourceChannel:long read(java.nio.ByteBuffer[],int,int)",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:long read(java.nio.ByteBuffer[])",
            "io.undertow.websockets.core.StreamSourceFrameChannel:long read(java.nio.ByteBuffer[],int,int)"
        ]
    },
    "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:int read(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.channels.DetachableStreamSourceChannel:int read(java.nio.ByteBuffer)",
            "io.undertow.client.http.HttpClientConnection$ClientReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ALPNClientSelector$2:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.io.AsyncReceiverImpl$5:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.io.AsyncReceiverImpl$2:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.io.AsyncReceiverImpl$3:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.io.AsyncReceiverImpl:void receiveFullString(io.undertow.io.Receiver$FullStringCallback,io.undertow.io.Receiver$ErrorCallback,java.nio.charset.Charset)",
            "io.undertow.io.AsyncReceiverImpl:void receivePartialString(io.undertow.io.Receiver$PartialStringCallback,io.undertow.io.Receiver$ErrorCallback,java.nio.charset.Charset)",
            "io.undertow.io.AsyncReceiverImpl:void receiveFullBytes(io.undertow.io.Receiver$FullBytesCallback,io.undertow.io.Receiver$ErrorCallback)",
            "io.undertow.io.AsyncReceiverImpl:void receivePartialBytes(io.undertow.io.Receiver$PartialBytesCallback,io.undertow.io.Receiver$ErrorCallback)",
            "io.undertow.io.UndertowInputStream:void readIntoBufferNonBlocking()",
            "io.undertow.io.AsyncReceiverImpl$4:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.protocols.http2.Http2StreamSourceChannel:int read(java.nio.ByteBuffer)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler$NonBlockingParseTask:void run()",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void doParse(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.handlers.RequestBufferingHandler$1:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.ajp.AjpReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.util.Transfer:void initiateTransfer(org.xnio.channels.StreamSourceChannel,org.xnio.channels.StreamSinkChannel,org.xnio.ChannelListener,org.xnio.ChannelListener,org.xnio.ChannelExceptionHandler,org.xnio.ChannelExceptionHandler,io.undertow.connector.ByteBufferPool)",
            "io.undertow.util.StringReadChannelListener:void setup(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.util.StringReadChannelListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.util.Transfer$TransferListener:void handleEvent(java.nio.channels.Channel)",
            "io.undertow.websockets.core.function.ChannelFunctionStreamSourceChannel:int read(java.nio.ByteBuffer)",
            "io.undertow.websockets.core.StreamSourceFrameChannel:int read(java.nio.ByteBuffer)",
            "io.undertow.websockets.spi.AsyncWebSocketHttpServerExchange:org.xnio.IoFuture readRequestData()",
            "io.undertow.websockets.spi.AsyncWebSocketHttpServerExchange$2:void handleEvent(org.xnio.channels.StreamSourceChannel)"
        ]
    },
    "io.undertow.channels.DetachableStreamSinkChannel:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.channels.DetachableStreamSinkChannel:void close()"
        ]
    },
    "io.undertow.client.ajp.AjpClientProvider:void handleConnected(org.xnio.StreamConnection,io.undertow.client.ClientCallback,java.net.URI,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientProvider:void access$000(io.undertow.client.ajp.AjpClientProvider,org.xnio.StreamConnection,io.undertow.client.ClientCallback,java.net.URI,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)"
        ]
    },
    "io.undertow.client.ajp.AjpClientExchange:void setResponse(io.undertow.client.ClientResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection$ClientReceiveListener:void handleEvent(io.undertow.protocols.ajp.AjpClientChannel)"
        ]
    },
    "io.undertow.client.ajp.AjpClientExchange:void setResponseListener(io.undertow.client.ClientCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$HttpClientPingTask$1$1:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$ConnectionPoolPingTask$1:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler$ProxyAction$1:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.websockets.client.WebSocketClient$ConnectionBuilder$1$1:void completed(io.undertow.client.ClientExchange)"
        ]
    },
    "io.undertow.client.ajp.AjpClientExchange:void invokeReadReadyCallback(io.undertow.client.ClientExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection:void initiateRequest(io.undertow.client.ajp.AjpClientExchange)"
        ]
    },
    "io.undertow.client.http.HttpClientProvider$3:void handleEvent(org.xnio.ssl.SslConnection)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpClientProvider$3:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.client.http.HttpClientExchange:void setResponse(io.undertow.client.ClientResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpClientConnection$ClientReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)"
        ]
    },
    "io.undertow.client.http.HttpClientExchange:void setResponseListener(io.undertow.client.ClientCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$HttpClientPingTask$1$1:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$ConnectionPoolPingTask$1:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler$ProxyAction$1:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.websockets.client.WebSocketClient$ConnectionBuilder$1$1:void completed(io.undertow.client.ClientExchange)"
        ]
    },
    "io.undertow.client.http.HttpClientExchange:void invokeReadReadyCallback()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpClientConnection:void initiateRequest(io.undertow.client.http.HttpClientExchange)"
        ]
    },
    "io.undertow.client.http2.Http2ClientProvider$4:void handleEvent(org.xnio.ssl.SslConnection)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http2.Http2ClientProvider$4:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.client.http2.Http2PriorKnowledgeClientProvider:void handleConnected(org.xnio.StreamConnection,io.undertow.client.ClientCallback,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http2.Http2PriorKnowledgeClientProvider:void access$000(io.undertow.client.http2.Http2PriorKnowledgeClientProvider,org.xnio.StreamConnection,io.undertow.client.ClientCallback,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap,java.lang.String)"
        ]
    },
    "io.undertow.client.http2.Http2PriorKnowledgeClientProvider$5:void handleEvent(org.xnio.conduits.ConduitStreamSinkChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http2.Http2PriorKnowledgeClientProvider$5:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.client.http2.Http2ClearClientProvider$Http2ClearOpenListener:void handleEvent(org.xnio.StreamConnection)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http2.Http2ClearClientProvider$Http2ClearOpenListener:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.client.http2.Http2ClientExchange:void responseReady(io.undertow.protocols.http2.Http2StreamSourceChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http2.Http2ClientConnection$Http2ReceiveListener:void handleEvent(io.undertow.protocols.http2.Http2Channel)"
        ]
    },
    "io.undertow.client.http2.Http2ClientConnection:void sendRequest(io.undertow.client.ClientRequest,io.undertow.client.ClientCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpClientConnection:void sendRequest(io.undertow.client.ClientRequest,io.undertow.client.ClientCallback)",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$HttpClientPingTask$1:void completed(io.undertow.client.ClientConnection)",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$ConnectionPoolPingTask:void run()",
            "io.undertow.server.handlers.proxy.ProxyHandler$ProxyAction:void run()",
            "io.undertow.websockets.client.WebSocketClient$ConnectionBuilder$1:void completed(io.undertow.client.ClientConnection)"
        ]
    },
    "io.undertow.server.HttpServerExchange$ReadDispatchChannel:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.channels.DetachableStreamSourceChannel:void close()",
            "io.undertow.websockets.core.function.ChannelFunctionStreamSourceChannel:void close()"
        ]
    },
    "io.undertow.protocols.http2.Http2StreamSourceChannel:void complete()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void exitRead()"
        ]
    },
    "io.undertow.channels.DetachableStreamSourceChannel:void shutdownReads()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.channels.DetachableStreamSourceChannel:void shutdownReads()",
            "io.undertow.io.UndertowInputStream:void close()",
            "io.undertow.server.protocol.ajp.AjpReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.websockets.core.function.ChannelFunctionStreamSourceChannel:void shutdownReads()"
        ]
    },
    "io.undertow.io.UndertowInputStream:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.http.HttpContinue:void sendContinueResponseBlocking(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$DefaultBlockingHttpExchange:void close()",
            "io.undertow.util.FlexBase64$DecoderInputStream:void close()",
            "io.undertow.Version:void <clinit>()"
        ]
    },
    "io.undertow.websockets.core.function.ChannelFunctionStreamSourceChannel:void shutdownReads()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.channels.DetachableStreamSourceChannel:void shutdownReads()",
            "io.undertow.io.UndertowInputStream:void close()",
            "io.undertow.server.protocol.ajp.AjpReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.websockets.core.function.ChannelFunctionStreamSourceChannel:void shutdownReads()"
        ]
    },
    "io.undertow.server.HttpServerExchange:io.undertow.server.HttpServerExchange endExchange()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.BlockingReceiverImpl$1:void error(io.undertow.server.HttpServerExchange,java.io.IOException)",
            "io.undertow.io.DefaultIoCallback:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)",
            "io.undertow.io.DefaultIoCallback$1:void onComplete(io.undertow.server.HttpServerExchange,io.undertow.io.Sender)",
            "io.undertow.io.DefaultIoCallback$1:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)",
            "io.undertow.io.AsyncReceiverImpl$1:void error(io.undertow.server.HttpServerExchange,java.io.IOException)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.impl.FormAuthenticationMechanism$1:boolean handleDefaultResponse(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.impl.FormAuthenticationMechanism:io.undertow.security.api.AuthenticationMechanism$AuthenticationMechanismOutcome runFormAuth(io.undertow.server.HttpServerExchange,io.undertow.security.api.SecurityContext)",
            "io.undertow.server.handlers.cache.ResponseCache:boolean tryServeResponse(boolean)",
            "io.undertow.server.handlers.cache.ResponseCache$DereferenceCallback:void onComplete(io.undertow.server.HttpServerExchange,io.undertow.io.Sender)",
            "io.undertow.server.handlers.cache.ResponseCache$DereferenceCallback:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)",
            "io.undertow.server.handlers.error.FileErrorPageHandler$2:void run()",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler$NonBlockingParseTask:void run()",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void processOK(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void processError(java.lang.String,java.lang.String,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler$IoExceptionHandler:void handleException(java.nio.channels.Channel,java.io.IOException)",
            "io.undertow.server.handlers.proxy.ProxyHandler$ProxyClientHandler:void couldNotResolveBackend(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler$ProxyClientHandler:void cancel(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleFailure(io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.ProxyHandler$ProxyClientHandler,io.undertow.predicate.Predicate,java.io.IOException)",
            "io.undertow.server.handlers.proxy.ProxyHandler$ProxyAction$1$1$1:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)",
            "io.undertow.server.handlers.resource.ResourceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.resource.ResourceHandler:void serveResource(io.undertow.server.HttpServerExchange,boolean)",
            "io.undertow.server.handlers.resource.DirectoryUtils:boolean sendRequestedBlobs(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.resource.DirectoryUtils:void renderDirectoryListing(io.undertow.server.HttpServerExchange,io.undertow.server.handlers.resource.Resource)",
            "io.undertow.server.handlers.resource.ResourceHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RedirectHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestBufferingHandler$1:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.handlers.ConnectHandler$1$1:void notify(org.xnio.IoFuture,java.lang.Object)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConnectHandler$1$2:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler$1:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)",
            "io.undertow.server.protocol.ajp.AjpReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.protocol.http.HttpContinue:void rejectExchange(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2ReceiveListener:void handleRequests(io.undertow.protocols.http2.Http2Channel,io.undertow.protocols.http2.Http2StreamSourceChannel)",
            "io.undertow.server.protocol.http2.Http2ReceiveListener:void handleInitialRequest(io.undertow.server.HttpServerExchange,io.undertow.protocols.http2.Http2Channel,byte[])",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$3$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$2:void handle(io.undertow.server.HttpServerExchange,byte[],boolean)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$1:void handle(io.undertow.server.HttpServerExchange,byte[])",
            "io.undertow.server.protocol.http2.Http2ServerConnection:boolean pushResource(java.lang.String,io.undertow.util.HttpString,io.undertow.util.HeaderMap,io.undertow.server.HttpHandler)",
            "io.undertow.server.AbstractServerConnection$CloseSetter:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.websockets.spi.AsyncWebSocketHttpServerExchange:void endExchange()",
            "io.undertow.websockets.spi.AsyncWebSocketHttpServerExchange:void close()"
        ]
    },
    "io.undertow.conduits.IdleTimeoutConduit:void resumeReads()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.IdleTimeoutConduit:void resumeReads()",
            "io.undertow.protocols.ssl.SslConduit:boolean handleHandshakeResult(javax.net.ssl.SSLEngineResult)"
        ]
    },
    "io.undertow.conduits.FixedLengthStreamSourceConduit:void wakeupReads()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.conduits.IdleTimeoutConduit:void wakeupReads()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.FixedLengthStreamSourceConduit:void wakeupReads()",
            "io.undertow.conduits.IdleTimeoutConduit:void wakeupReads()"
        ]
    },
    "io.undertow.protocols.ssl.SslConduit$5$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.ssl.SslConduit$5:void run()",
            "io.undertow.protocols.ssl.SslConduit:void runReadListener(boolean)",
            "io.undertow.protocols.ssl.SslConduit:boolean handleHandshakeResult(javax.net.ssl.SSLEngineResult)",
            "io.undertow.protocols.ssl.SslConduit$2:void run()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$FrameReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$3:void run()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel:void runInIoThread(java.lang.Runnable)",
            "io.undertow.server.protocol.http.ALPNLimitingSSLEngine:void limitCiphers(java.util.List)",
            "io.undertow.server.protocol.ParseTimeoutUpdater:void run()",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:io.undertow.server.HttpServerExchange dispatch(java.util.concurrent.Executor,java.lang.Runnable)",
            "io.undertow.util.SameThreadExecutor:void execute(java.lang.Runnable)",
            "io.undertow.util.PipeliningExecutor$1:void run()"
        ]
    },
    "io.undertow.conduits.InflatingStreamSourceConduit:void terminateReads()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.conduits.IdleTimeoutConduit:void terminateReads()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.InflatingStreamSourceConduit:void terminateReads()",
            "io.undertow.conduits.IdleTimeoutConduit:void terminateReads()",
            "io.undertow.conduits.IdleTimeoutConduit:void safeClose(org.xnio.conduits.StreamSourceConduit)"
        ]
    },
    "io.undertow.conduits.IdleTimeoutConduit:void safeClose(org.xnio.conduits.StreamSourceConduit)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.IdleTimeoutConduit:void doClose()"
        ]
    },
    "io.undertow.protocols.ssl.UndertowSslConnection:void notifyWriteClosed()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.protocols.ssl.SslConduit:void truncateWrites()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpRequestConduit:void truncateWrites()",
            "io.undertow.conduits.ChunkedStreamSinkConduit:void terminateWrites()",
            "io.undertow.conduits.DeflatingStreamSinkConduit:void truncateWrites()",
            "io.undertow.conduits.AbstractFixedLengthStreamSinkConduit:void terminateWrites()",
            "io.undertow.conduits.IdleTimeoutConduit:void safeClose(org.xnio.conduits.StreamSinkConduit)",
            "io.undertow.conduits.IdleTimeoutConduit:void truncateWrites()",
            "io.undertow.conduits.FinishableStreamSinkConduit:void truncateWrites()",
            "io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit:void truncateWrites()",
            "io.undertow.server.protocol.http.HttpResponseConduit:void truncateWrites()"
        ]
    },
    "io.undertow.protocols.ssl.SslConduit:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.ssl.UndertowSslConnection:void closeAction()",
            "io.undertow.protocols.ssl.SslConduit:void runReadListener(boolean)",
            "io.undertow.protocols.ssl.SslConduit:long doUnwrap(java.nio.ByteBuffer[],int,int)",
            "io.undertow.protocols.ssl.SslConduit:long doWrap(java.nio.ByteBuffer[],int,int)"
        ]
    },
    "io.undertow.conduits.InflatingStreamSourceConduit:int read(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.InflatingStreamSourceConduit:long read(java.nio.ByteBuffer[],int,int)"
        ]
    },
    "io.undertow.conduits.FinishableStreamSourceConduit:int read(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.conduits.FixedLengthStreamSourceConduit:int read(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.FixedLengthStreamSourceConduit:long read(java.nio.ByteBuffer[],int,int)"
        ]
    },
    "io.undertow.conduits.ChunkedStreamSourceConduit:int read(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.ChunkedStreamSourceConduit:long read(java.nio.ByteBuffer[],int,int)"
        ]
    },
    "io.undertow.conduits.IdleTimeoutConduit:int read(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.InflatingStreamSourceConduit:int read(java.nio.ByteBuffer)",
            "io.undertow.conduits.FinishableStreamSourceConduit:int read(java.nio.ByteBuffer)",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:int read(java.nio.ByteBuffer)",
            "io.undertow.conduits.ChunkedStreamSourceConduit:int read(java.nio.ByteBuffer)",
            "io.undertow.conduits.IdleTimeoutConduit:int read(java.nio.ByteBuffer)",
            "io.undertow.protocols.ssl.SslConduit:long doUnwrap(java.nio.ByteBuffer[],int,int)",
            "io.undertow.server.protocol.ajp.AjpServerRequestConduit:int doRead(java.nio.ByteBuffer,long)"
        ]
    },
    "io.undertow.server.protocol.ajp.AjpServerRequestConduit:int doRead(java.nio.ByteBuffer,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.ajp.AjpServerRequestConduit:int read(java.nio.ByteBuffer)"
        ]
    },
    "io.undertow.conduits.FinishableStreamSourceConduit:long read(java.nio.ByteBuffer[],int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.conduits.FixedLengthStreamSourceConduit:long read(java.nio.ByteBuffer[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.FixedLengthStreamSourceConduit:long read(java.nio.ByteBuffer[])"
        ]
    },
    "io.undertow.conduits.IdleTimeoutConduit:long read(java.nio.ByteBuffer[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.FinishableStreamSourceConduit:long read(java.nio.ByteBuffer[],int,int)",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:long read(java.nio.ByteBuffer[],int,int)",
            "io.undertow.conduits.IdleTimeoutConduit:long read(java.nio.ByteBuffer[],int,int)"
        ]
    },
    "io.undertow.protocols.ssl.SslConduit:void access$900(io.undertow.protocols.ssl.SslConduit)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.ssl.SslConduit$5$1:void run()",
            "io.undertow.protocols.ssl.SslConduit$SslWriteReadyHandler:void writeReady()",
            "io.undertow.protocols.ssl.SslConduit$SslReadReadyHandler:void readReady()"
        ]
    },
    "io.undertow.conduits.EmptyStreamSourceConduit$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.EmptyStreamSourceConduit:void resumeReads()",
            "io.undertow.protocols.ssl.SslConduit$5:void run()",
            "io.undertow.protocols.ssl.SslConduit:void runReadListener(boolean)",
            "io.undertow.protocols.ssl.SslConduit:boolean handleHandshakeResult(javax.net.ssl.SSLEngineResult)",
            "io.undertow.protocols.ssl.SslConduit$2:void run()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$FrameReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$3:void run()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel:void runInIoThread(java.lang.Runnable)",
            "io.undertow.server.protocol.http.ALPNLimitingSSLEngine:void limitCiphers(java.util.List)",
            "io.undertow.server.protocol.ParseTimeoutUpdater:void run()",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:io.undertow.server.HttpServerExchange dispatch(java.util.concurrent.Executor,java.lang.Runnable)",
            "io.undertow.util.SameThreadExecutor:void execute(java.lang.Runnable)",
            "io.undertow.util.PipeliningExecutor$1:void run()"
        ]
    },
    "io.undertow.conduits.IdleTimeoutConduit$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.ssl.SslConduit$5:void run()",
            "io.undertow.protocols.ssl.SslConduit:void runReadListener(boolean)",
            "io.undertow.protocols.ssl.SslConduit:boolean handleHandshakeResult(javax.net.ssl.SSLEngineResult)",
            "io.undertow.protocols.ssl.SslConduit$2:void run()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$FrameReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$3:void run()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel:void runInIoThread(java.lang.Runnable)",
            "io.undertow.server.protocol.http.ALPNLimitingSSLEngine:void limitCiphers(java.util.List)",
            "io.undertow.server.protocol.ParseTimeoutUpdater:void run()",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:io.undertow.server.HttpServerExchange dispatch(java.util.concurrent.Executor,java.lang.Runnable)",
            "io.undertow.util.SameThreadExecutor:void execute(java.lang.Runnable)",
            "io.undertow.util.PipeliningExecutor$1:void run()"
        ]
    },
    "io.undertow.conduits.ReadTimeoutStreamSourceConduit$2:void readReady()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.EmptyStreamSourceConduit$1:void run()",
            "io.undertow.conduits.IdleTimeoutConduit$1:void run()",
            "io.undertow.conduits.ReadTimeoutStreamSourceConduit$2:void readReady()",
            "io.undertow.protocols.ssl.SslConduit$SslReadReadyHandler:void readReady()"
        ]
    },
    "io.undertow.protocols.ssl.SslConduit$SslWriteReadyHandler:void writeReady()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.DeflatingStreamSinkConduit$1:void run()",
            "io.undertow.conduits.IdleTimeoutConduit$1:void run()",
            "io.undertow.protocols.ssl.SslConduit$SslWriteReadyHandler:void writeReady()",
            "io.undertow.protocols.ssl.SslConduit$3:void run()",
            "io.undertow.protocols.ssl.SslConduit$4:void run()",
            "io.undertow.server.handlers.encoding.ContentEncodedResourceManager$FileConduitTarget:void wakeupWrites()",
            "io.undertow.server.protocol.ajp.AjpServerResponseConduit$AjpServerWriteReadyHandler:void writeReady()"
        ]
    },
    "io.undertow.protocols.ssl.SslConduit$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.ssl.SslConduit$5:void run()",
            "io.undertow.protocols.ssl.SslConduit:void runReadListener(boolean)",
            "io.undertow.protocols.ssl.SslConduit:boolean handleHandshakeResult(javax.net.ssl.SSLEngineResult)",
            "io.undertow.protocols.ssl.SslConduit$2:void run()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$FrameReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$3:void run()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel:void runInIoThread(java.lang.Runnable)",
            "io.undertow.server.protocol.http.ALPNLimitingSSLEngine:void limitCiphers(java.util.List)",
            "io.undertow.server.protocol.ParseTimeoutUpdater:void run()",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:io.undertow.server.HttpServerExchange dispatch(java.util.concurrent.Executor,java.lang.Runnable)",
            "io.undertow.util.SameThreadExecutor:void execute(java.lang.Runnable)",
            "io.undertow.util.PipeliningExecutor$1:void run()"
        ]
    },
    "io.undertow.client.http.HttpRequestConduit:int processWrite(int,java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpRequestConduit:int write(java.nio.ByteBuffer)",
            "io.undertow.client.http.HttpRequestConduit:long write(java.nio.ByteBuffer[],int,int)",
            "io.undertow.client.http.HttpRequestConduit:long transferFrom(java.nio.channels.FileChannel,long,long)",
            "io.undertow.client.http.HttpRequestConduit:long transferFrom(org.xnio.channels.StreamSourceChannel,long,java.nio.ByteBuffer)",
            "io.undertow.client.http.HttpRequestConduit:boolean flush()"
        ]
    },
    "io.undertow.client.http.HttpRequestConduit:int write(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.client.http.HttpRequestConduit:long write(java.nio.ByteBuffer[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpRequestConduit:long write(java.nio.ByteBuffer[])"
        ]
    },
    "io.undertow.conduits.BytesSentStreamSinkConduit:int write(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.conduits.ChunkedStreamSinkConduit:int doWrite(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.ChunkedStreamSinkConduit:int write(java.nio.ByteBuffer)",
            "io.undertow.conduits.ChunkedStreamSinkConduit:int writeFinal(java.nio.ByteBuffer)"
        ]
    },
    "io.undertow.conduits.ChunkedStreamSinkConduit:boolean flush()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.conduits.PreChunkedStreamSinkConduit:int doWrite(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.PreChunkedStreamSinkConduit:int write(java.nio.ByteBuffer)",
            "io.undertow.conduits.PreChunkedStreamSinkConduit:int writeFinal(java.nio.ByteBuffer)"
        ]
    },
    "io.undertow.conduits.AbstractFixedLengthStreamSinkConduit:int write(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.AbstractFixedLengthStreamSinkConduit:long write(java.nio.ByteBuffer[],int,int)"
        ]
    },
    "io.undertow.conduits.IdleTimeoutConduit:int write(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpRequestConduit:int processWrite(int,java.nio.ByteBuffer)",
            "io.undertow.client.http.HttpRequestConduit:int write(java.nio.ByteBuffer)",
            "io.undertow.client.http.HttpRequestConduit:long write(java.nio.ByteBuffer[],int,int)",
            "io.undertow.conduits.BytesSentStreamSinkConduit:int write(java.nio.ByteBuffer)",
            "io.undertow.conduits.ChunkedStreamSinkConduit:int doWrite(java.nio.ByteBuffer)",
            "io.undertow.conduits.ChunkedStreamSinkConduit:boolean flush()",
            "io.undertow.conduits.PreChunkedStreamSinkConduit:int doWrite(java.nio.ByteBuffer)",
            "io.undertow.conduits.AbstractFixedLengthStreamSinkConduit:int write(java.nio.ByteBuffer)",
            "io.undertow.conduits.IdleTimeoutConduit:int write(java.nio.ByteBuffer)",
            "io.undertow.protocols.ssl.SslConduit:long doWrap(java.nio.ByteBuffer[],int,int)",
            "io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit:boolean flushBuffer()",
            "io.undertow.server.protocol.http.HttpResponseConduit:int processWrite(int,java.lang.Object,int,int)",
            "io.undertow.server.protocol.http.HttpResponseConduit:int processStatefulWrite(int,java.lang.Object,int,int)",
            "io.undertow.server.protocol.http.HttpResponseConduit:boolean flushHeaderBuffer(java.nio.ByteBuffer,java.lang.String,io.undertow.util.HeaderValues,int,long,int)",
            "io.undertow.server.protocol.http.HttpResponseConduit:int write(java.nio.ByteBuffer)",
            "io.undertow.server.protocol.http.HttpResponseConduit:long write(java.nio.ByteBuffer[],int,int)"
        ]
    },
    "io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit:boolean flushBuffer()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit:long write(java.nio.ByteBuffer[],int,int)",
            "io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit:int write(java.nio.ByteBuffer)",
            "io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit:boolean flushPipelinedData()",
            "io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit:boolean flush()"
        ]
    },
    "io.undertow.server.protocol.http.HttpResponseConduit:int processWrite(int,java.lang.Object,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.http.HttpResponseConduit:int write(java.nio.ByteBuffer)",
            "io.undertow.server.protocol.http.HttpResponseConduit:long write(java.nio.ByteBuffer[],int,int)",
            "io.undertow.server.protocol.http.HttpResponseConduit:boolean flush()"
        ]
    },
    "io.undertow.server.protocol.http.HttpResponseConduit:int processStatefulWrite(int,java.lang.Object,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.http.HttpResponseConduit:int processWrite(int,java.lang.Object,int,int)"
        ]
    },
    "io.undertow.server.protocol.http.HttpResponseConduit:boolean flushHeaderBuffer(java.nio.ByteBuffer,java.lang.String,io.undertow.util.HeaderValues,int,long,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.http.HttpResponseConduit:int processStatefulWrite(int,java.lang.Object,int,int)"
        ]
    },
    "io.undertow.server.protocol.http.HttpResponseConduit:int write(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.http.HttpResponseConduit:long transferFrom(java.nio.channels.FileChannel,long,long)"
        ]
    },
    "io.undertow.server.protocol.http.HttpResponseConduit:long write(java.nio.ByteBuffer[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.http.HttpResponseConduit:long write(java.nio.ByteBuffer[])"
        ]
    },
    "io.undertow.conduits.BytesSentStreamSinkConduit:long write(java.nio.ByteBuffer[],int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.conduits.DeflatingStreamSinkConduit:boolean performFlushIfRequired()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.DeflatingStreamSinkConduit:int write(java.nio.ByteBuffer)",
            "io.undertow.conduits.DeflatingStreamSinkConduit:long transferFrom(java.nio.channels.FileChannel,long,long)",
            "io.undertow.conduits.DeflatingStreamSinkConduit:long transferFrom(org.xnio.channels.StreamSourceChannel,long,java.nio.ByteBuffer)",
            "io.undertow.conduits.DeflatingStreamSinkConduit:boolean flush()",
            "io.undertow.conduits.DeflatingStreamSinkConduit:void deflateData(boolean)"
        ]
    },
    "io.undertow.conduits.AbstractFixedLengthStreamSinkConduit:long write(java.nio.ByteBuffer[],int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.conduits.IdleTimeoutConduit:long write(java.nio.ByteBuffer[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpRequestConduit:int processWrite(int,java.nio.ByteBuffer)",
            "io.undertow.client.http.HttpRequestConduit:long write(java.nio.ByteBuffer[],int,int)",
            "io.undertow.conduits.BytesSentStreamSinkConduit:long write(java.nio.ByteBuffer[],int,int)",
            "io.undertow.conduits.ChunkedStreamSinkConduit:int doWrite(java.nio.ByteBuffer)",
            "io.undertow.conduits.DeflatingStreamSinkConduit:boolean performFlushIfRequired()",
            "io.undertow.conduits.AbstractFixedLengthStreamSinkConduit:long write(java.nio.ByteBuffer[],int,int)",
            "io.undertow.conduits.IdleTimeoutConduit:long write(java.nio.ByteBuffer[],int,int)",
            "io.undertow.conduits.AbstractFramedStreamSinkConduit:long doWrite(java.nio.ByteBuffer[],int,int)",
            "io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit:long flushBufferWithUserData(java.nio.ByteBuffer[],int,int)",
            "io.undertow.server.protocol.http.HttpResponseConduit:int processWrite(int,java.lang.Object,int,int)",
            "io.undertow.server.protocol.http.HttpResponseConduit:int processStatefulWrite(int,java.lang.Object,int,int)",
            "io.undertow.server.protocol.http.HttpResponseConduit:long write(java.nio.ByteBuffer[],int,int)"
        ]
    },
    "io.undertow.conduits.AbstractFramedStreamSinkConduit:long doWrite(java.nio.ByteBuffer[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.AbstractFramedStreamSinkConduit:int write(java.nio.ByteBuffer)",
            "io.undertow.conduits.AbstractFramedStreamSinkConduit:long write(java.nio.ByteBuffer[],int,int)",
            "io.undertow.conduits.AbstractFramedStreamSinkConduit:boolean flushQueuedData()"
        ]
    },
    "io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit:long flushBufferWithUserData(java.nio.ByteBuffer[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit:long write(java.nio.ByteBuffer[],int,int)",
            "io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit:int write(java.nio.ByteBuffer)"
        ]
    },
    "io.undertow.client.http.HttpRequestConduit:boolean flush()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.conduits.HeadStreamSinkConduit:boolean flush()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.conduits.PreChunkedStreamSinkConduit:boolean flush()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.conduits.DeflatingStreamSinkConduit:boolean flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpRequestConduit:boolean flush()",
            "io.undertow.conduits.HeadStreamSinkConduit:boolean flush()",
            "io.undertow.conduits.ChunkedStreamSinkConduit:boolean flush()",
            "io.undertow.conduits.PreChunkedStreamSinkConduit:boolean flush()",
            "io.undertow.conduits.DeflatingStreamSinkConduit:boolean flush()",
            "io.undertow.conduits.AbstractFixedLengthStreamSinkConduit:boolean flush()",
            "io.undertow.conduits.IdleTimeoutConduit:boolean flush()",
            "io.undertow.conduits.AbstractFramedStreamSinkConduit:boolean flushQueuedData()",
            "io.undertow.conduits.FinishableStreamSinkConduit:boolean flush()",
            "io.undertow.protocols.ssl.SslConduit:boolean flush()",
            "io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit:boolean flushPipelinedData()",
            "io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit:boolean flushBuffer()",
            "io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit:boolean flush()",
            "io.undertow.server.protocol.http.HttpResponseConduit:boolean flush()",
            "io.undertow.server.ConnectionSSLSessionInfo:void renegotiateNoRequest(io.undertow.server.HttpServerExchange,org.xnio.SslClientAuthMode)"
        ]
    },
    "io.undertow.conduits.AbstractFixedLengthStreamSinkConduit:boolean flush()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.conduits.IdleTimeoutConduit:boolean flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpRequestConduit:boolean flush()",
            "io.undertow.conduits.HeadStreamSinkConduit:boolean flush()",
            "io.undertow.conduits.ChunkedStreamSinkConduit:boolean flush()",
            "io.undertow.conduits.PreChunkedStreamSinkConduit:boolean flush()",
            "io.undertow.conduits.DeflatingStreamSinkConduit:boolean flush()",
            "io.undertow.conduits.AbstractFixedLengthStreamSinkConduit:boolean flush()",
            "io.undertow.conduits.IdleTimeoutConduit:boolean flush()",
            "io.undertow.conduits.AbstractFramedStreamSinkConduit:boolean flushQueuedData()",
            "io.undertow.conduits.FinishableStreamSinkConduit:boolean flush()",
            "io.undertow.protocols.ssl.SslConduit:boolean flush()",
            "io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit:boolean flushPipelinedData()",
            "io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit:boolean flushBuffer()",
            "io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit:boolean flush()",
            "io.undertow.server.protocol.http.HttpResponseConduit:boolean flush()",
            "io.undertow.server.ConnectionSSLSessionInfo:void renegotiateNoRequest(io.undertow.server.HttpServerExchange,org.xnio.SslClientAuthMode)"
        ]
    },
    "io.undertow.conduits.AbstractFramedStreamSinkConduit:boolean flushQueuedData()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.ajp.AjpServerResponseConduit:int write(java.nio.ByteBuffer)",
            "io.undertow.server.protocol.ajp.AjpServerResponseConduit:boolean flush()",
            "io.undertow.server.protocol.ajp.AjpServerResponseConduit:boolean access$300(io.undertow.server.protocol.ajp.AjpServerResponseConduit)"
        ]
    },
    "io.undertow.conduits.FinishableStreamSinkConduit:boolean flush()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit:boolean flushPipelinedData()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit:void performFlush(io.undertow.server.HttpServerExchange,io.undertow.server.protocol.http.HttpServerConnection)",
            "io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit$1:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit:boolean flush()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.server.protocol.http.HttpResponseConduit:boolean flush()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.server.ConnectionSSLSessionInfo:void renegotiateNoRequest(io.undertow.server.HttpServerExchange,org.xnio.SslClientAuthMode)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.ConnectionSSLSessionInfo:void renegotiate(io.undertow.server.HttpServerExchange,org.xnio.SslClientAuthMode)",
            "io.undertow.server.ConnectionSSLSessionInfo:void renegotiateBufferRequest(io.undertow.server.HttpServerExchange,org.xnio.SslClientAuthMode)"
        ]
    },
    "io.undertow.channels.DetachableStreamSourceChannel:void resumeReads()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.channels.DetachableStreamSourceChannel:void resumeReads()",
            "io.undertow.client.http.HttpClientConnection$ClientReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.io.AsyncReceiverImpl$3$2:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.io.AsyncReceiverImpl$5$2:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.io.AsyncReceiverImpl:void receiveFullString(io.undertow.io.Receiver$FullStringCallback,io.undertow.io.Receiver$ErrorCallback,java.nio.charset.Charset)",
            "io.undertow.io.AsyncReceiverImpl:void receivePartialString(io.undertow.io.Receiver$PartialStringCallback,io.undertow.io.Receiver$ErrorCallback,java.nio.charset.Charset)",
            "io.undertow.io.AsyncReceiverImpl:void receiveFullBytes(io.undertow.io.Receiver$FullBytesCallback,io.undertow.io.Receiver$ErrorCallback)",
            "io.undertow.io.AsyncReceiverImpl:void receivePartialBytes(io.undertow.io.Receiver$PartialBytesCallback,io.undertow.io.Receiver$ErrorCallback)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler$NonBlockingParseTask:void run()",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$RequestExchangeListener:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.ajp.AjpReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.HttpServerExchange$ReadDispatchChannel:void resumeReads()",
            "io.undertow.server.HttpServerExchange$ReadDispatchChannel:void runResume()",
            "io.undertow.util.Transfer:void initiateTransfer(org.xnio.channels.StreamSourceChannel,org.xnio.channels.StreamSinkChannel,org.xnio.ChannelListener,org.xnio.ChannelListener,org.xnio.ChannelExceptionHandler,org.xnio.ChannelExceptionHandler,io.undertow.connector.ByteBufferPool)",
            "io.undertow.util.StringReadChannelListener:void setup(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.util.Transfer$TransferListener:void handleEvent(java.nio.channels.Channel)",
            "io.undertow.websockets.core.function.ChannelFunctionStreamSourceChannel:void resumeReads()",
            "io.undertow.websockets.spi.AsyncWebSocketHttpServerExchange:org.xnio.IoFuture readRequestData()"
        ]
    },
    "io.undertow.client.http.HttpClientConnection$ClientReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpClientConnection$ClientReadListener:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.io.AsyncReceiverImpl$3$2:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.predicate.PredicatesHandler$DoneHandlerBuilder$1$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractSecurityContextAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.RequestEncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.resource.ResourceHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LearningPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathSeparatorHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConnectHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisableCacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StuckThreadDetectionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ExceptionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumpingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ResponseRateLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ByteRangeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LocalNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StoredResponseHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimit:void handleRequest(io.undertow.server.HttpServerExchange,io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConfiguredPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$3$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$2:void handle(io.undertow.server.HttpServerExchange,byte[],boolean)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleNoMatch(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.io.AsyncReceiverImpl:void receiveFullString(io.undertow.io.Receiver$FullStringCallback,io.undertow.io.Receiver$ErrorCallback,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.AsyncReceiverImpl:void receiveFullString(io.undertow.io.Receiver$FullStringCallback,io.undertow.io.Receiver$ErrorCallback)",
            "io.undertow.io.AsyncReceiverImpl:void receiveFullString(io.undertow.io.Receiver$FullStringCallback)",
            "io.undertow.io.AsyncReceiverImpl:void receiveFullString(io.undertow.io.Receiver$FullStringCallback,java.nio.charset.Charset)"
        ]
    },
    "io.undertow.io.AsyncReceiverImpl:void receivePartialString(io.undertow.io.Receiver$PartialStringCallback,io.undertow.io.Receiver$ErrorCallback,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.AsyncReceiverImpl:void receivePartialString(io.undertow.io.Receiver$PartialStringCallback,io.undertow.io.Receiver$ErrorCallback)",
            "io.undertow.io.AsyncReceiverImpl:void receivePartialString(io.undertow.io.Receiver$PartialStringCallback)",
            "io.undertow.io.AsyncReceiverImpl:void receivePartialString(io.undertow.io.Receiver$PartialStringCallback,java.nio.charset.Charset)"
        ]
    },
    "io.undertow.io.AsyncReceiverImpl:void receiveFullBytes(io.undertow.io.Receiver$FullBytesCallback,io.undertow.io.Receiver$ErrorCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.AsyncReceiverImpl:void receiveFullBytes(io.undertow.io.Receiver$FullBytesCallback)"
        ]
    },
    "io.undertow.protocols.ajp.AjpClientResponseStreamSourceChannel:void resumeReads()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.channels.DetachableStreamSourceChannel:void resumeReads()",
            "io.undertow.client.http.HttpClientConnection$ClientReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.io.AsyncReceiverImpl$3$2:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.io.AsyncReceiverImpl$5$2:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.io.AsyncReceiverImpl:void receiveFullString(io.undertow.io.Receiver$FullStringCallback,io.undertow.io.Receiver$ErrorCallback,java.nio.charset.Charset)",
            "io.undertow.io.AsyncReceiverImpl:void receivePartialString(io.undertow.io.Receiver$PartialStringCallback,io.undertow.io.Receiver$ErrorCallback,java.nio.charset.Charset)",
            "io.undertow.io.AsyncReceiverImpl:void receiveFullBytes(io.undertow.io.Receiver$FullBytesCallback,io.undertow.io.Receiver$ErrorCallback)",
            "io.undertow.io.AsyncReceiverImpl:void receivePartialBytes(io.undertow.io.Receiver$PartialBytesCallback,io.undertow.io.Receiver$ErrorCallback)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler$NonBlockingParseTask:void run()",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$RequestExchangeListener:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.ajp.AjpReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.HttpServerExchange$ReadDispatchChannel:void resumeReads()",
            "io.undertow.server.HttpServerExchange$ReadDispatchChannel:void runResume()",
            "io.undertow.util.Transfer:void initiateTransfer(org.xnio.channels.StreamSourceChannel,org.xnio.channels.StreamSinkChannel,org.xnio.ChannelListener,org.xnio.ChannelListener,org.xnio.ChannelExceptionHandler,org.xnio.ChannelExceptionHandler,io.undertow.connector.ByteBufferPool)",
            "io.undertow.util.StringReadChannelListener:void setup(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.util.Transfer$TransferListener:void handleEvent(java.nio.channels.Channel)",
            "io.undertow.websockets.core.function.ChannelFunctionStreamSourceChannel:void resumeReads()",
            "io.undertow.websockets.spi.AsyncWebSocketHttpServerExchange:org.xnio.IoFuture readRequestData()"
        ]
    },
    "io.undertow.server.HttpServerExchange$ReadDispatchChannel:void resumeReads()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.channels.DetachableStreamSourceChannel:void resumeReads()",
            "io.undertow.client.http.HttpClientConnection$ClientReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.io.AsyncReceiverImpl$3$2:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.io.AsyncReceiverImpl$5$2:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.io.AsyncReceiverImpl:void receiveFullString(io.undertow.io.Receiver$FullStringCallback,io.undertow.io.Receiver$ErrorCallback,java.nio.charset.Charset)",
            "io.undertow.io.AsyncReceiverImpl:void receivePartialString(io.undertow.io.Receiver$PartialStringCallback,io.undertow.io.Receiver$ErrorCallback,java.nio.charset.Charset)",
            "io.undertow.io.AsyncReceiverImpl:void receiveFullBytes(io.undertow.io.Receiver$FullBytesCallback,io.undertow.io.Receiver$ErrorCallback)",
            "io.undertow.io.AsyncReceiverImpl:void receivePartialBytes(io.undertow.io.Receiver$PartialBytesCallback,io.undertow.io.Receiver$ErrorCallback)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler$NonBlockingParseTask:void run()",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$RequestExchangeListener:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.ajp.AjpReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.HttpServerExchange:io.undertow.server.HttpServerExchange endExchange()",
            "io.undertow.server.HttpServerExchange$ReadDispatchChannel:void resumeReads()",
            "io.undertow.server.HttpServerExchange$ReadDispatchChannel:void runResume()",
            "io.undertow.util.Transfer:void initiateTransfer(org.xnio.channels.StreamSourceChannel,org.xnio.channels.StreamSinkChannel,org.xnio.ChannelListener,org.xnio.ChannelListener,org.xnio.ChannelExceptionHandler,org.xnio.ChannelExceptionHandler,io.undertow.connector.ByteBufferPool)",
            "io.undertow.util.StringReadChannelListener:void setup(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.util.Transfer$TransferListener:void handleEvent(java.nio.channels.Channel)",
            "io.undertow.websockets.core.function.ChannelFunctionStreamSourceChannel:void resumeReads()",
            "io.undertow.websockets.spi.AsyncWebSocketHttpServerExchange:org.xnio.IoFuture readRequestData()"
        ]
    },
    "io.undertow.server.HttpServerExchange$ReadDispatchChannel:void runResume()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.HttpServerExchange:boolean runResumeReadWrite()"
        ]
    },
    "io.undertow.util.Transfer:void initiateTransfer(org.xnio.channels.StreamSourceChannel,org.xnio.channels.StreamSinkChannel,org.xnio.ChannelListener,org.xnio.ChannelListener,org.xnio.ChannelExceptionHandler,org.xnio.ChannelExceptionHandler,io.undertow.connector.ByteBufferPool)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.ProxyHandler$ProxyAction$1:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler$ResponseCallback$1:void handleUpgrade(org.xnio.StreamConnection,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler$ProxyAction$1$3:void handleEvent(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.server.handlers.proxy.ProxyHandler$ResponseCallback:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.handlers.ConnectHandler$1$2$1:void handleUpgrade(org.xnio.StreamConnection,io.undertow.server.HttpServerExchange)",
            "io.undertow.websockets.core.WebSocketUtils:void initiateTransfer(org.xnio.channels.StreamSourceChannel,org.xnio.channels.StreamSinkChannel,org.xnio.ChannelListener,org.xnio.ChannelListener,org.xnio.ChannelExceptionHandler,org.xnio.ChannelExceptionHandler,io.undertow.connector.ByteBufferPool)"
        ]
    },
    "io.undertow.util.StringReadChannelListener:void setup(org.xnio.channels.StreamSourceChannel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.util.Transfer$TransferListener:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection$3:void handleEvent(io.undertow.protocols.ajp.AjpClientChannel)",
            "io.undertow.client.http.HttpClientConnection$5:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.client.http2.Http2ClientConnection$1:void handleEvent(io.undertow.protocols.http2.Http2Channel)",
            "io.undertow.client.ALPNClientSelector$2:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ALPNClientSelector$2:void handleSelected(java.lang.String)",
            "io.undertow.client.ALPNClientSelector:void runAlpn(org.xnio.ssl.SslConnection,org.xnio.ChannelListener,io.undertow.client.ClientCallback,io.undertow.client.ALPNClientSelector$ALPNProtocol[])",
            "io.undertow.protocols.ajp.AjpClientResponseStreamSourceChannel:void complete()",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void handleFlushComplete(boolean)",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void channelForciblyClosed()",
            "io.undertow.protocols.http2.Http2StreamSourceChannel:void channelForciblyClosed()",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$RequestExchangeListener:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void close()"
        ]
    },
    "io.undertow.websockets.core.function.ChannelFunctionStreamSourceChannel:void resumeReads()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.channels.DetachableStreamSourceChannel:void resumeReads()",
            "io.undertow.client.http.HttpClientConnection$ClientReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.io.AsyncReceiverImpl$3$2:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.io.AsyncReceiverImpl$5$2:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.io.AsyncReceiverImpl:void receiveFullString(io.undertow.io.Receiver$FullStringCallback,io.undertow.io.Receiver$ErrorCallback,java.nio.charset.Charset)",
            "io.undertow.io.AsyncReceiverImpl:void receivePartialString(io.undertow.io.Receiver$PartialStringCallback,io.undertow.io.Receiver$ErrorCallback,java.nio.charset.Charset)",
            "io.undertow.io.AsyncReceiverImpl:void receiveFullBytes(io.undertow.io.Receiver$FullBytesCallback,io.undertow.io.Receiver$ErrorCallback)",
            "io.undertow.io.AsyncReceiverImpl:void receivePartialBytes(io.undertow.io.Receiver$PartialBytesCallback,io.undertow.io.Receiver$ErrorCallback)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler$NonBlockingParseTask:void run()",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$RequestExchangeListener:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.ajp.AjpReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.HttpServerExchange$ReadDispatchChannel:void resumeReads()",
            "io.undertow.server.HttpServerExchange$ReadDispatchChannel:void runResume()",
            "io.undertow.util.Transfer:void initiateTransfer(org.xnio.channels.StreamSourceChannel,org.xnio.channels.StreamSinkChannel,org.xnio.ChannelListener,org.xnio.ChannelListener,org.xnio.ChannelExceptionHandler,org.xnio.ChannelExceptionHandler,io.undertow.connector.ByteBufferPool)",
            "io.undertow.util.StringReadChannelListener:void setup(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.util.Transfer$TransferListener:void handleEvent(java.nio.channels.Channel)",
            "io.undertow.websockets.core.function.ChannelFunctionStreamSourceChannel:void resumeReads()",
            "io.undertow.websockets.spi.AsyncWebSocketHttpServerExchange:org.xnio.IoFuture readRequestData()"
        ]
    },
    "io.undertow.websockets.core.BufferedTextMessage:void read(io.undertow.websockets.core.StreamSourceFrameChannel,io.undertow.websockets.core.WebSocketCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.AbstractReceiveListener:void readBufferedText(io.undertow.websockets.core.StreamSourceFrameChannel,io.undertow.websockets.core.BufferedTextMessage)"
        ]
    },
    "io.undertow.websockets.core.BufferedBinaryMessage:void read(io.undertow.websockets.core.StreamSourceFrameChannel,io.undertow.websockets.core.WebSocketCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.AbstractReceiveListener:void readBufferedBinary(io.undertow.websockets.core.StreamSourceFrameChannel,boolean,io.undertow.websockets.core.BufferedBinaryMessage)"
        ]
    },
    "io.undertow.websockets.spi.AsyncWebSocketHttpServerExchange:org.xnio.IoFuture readRequestData()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.channels.DetachableStreamSourceChannel:void wakeupReads()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.channels.DetachableStreamSourceChannel:void wakeupReads()",
            "io.undertow.io.AsyncReceiverImpl:void resume()",
            "io.undertow.server.HttpServerExchange$ReadDispatchChannel:void wakeupReads()",
            "io.undertow.server.HttpServerExchange$ReadDispatchChannel:void runResume()",
            "io.undertow.util.Transfer:void done(org.xnio.channels.StreamSourceChannel,org.xnio.channels.StreamSinkChannel,org.xnio.ChannelListener,org.xnio.ChannelListener)",
            "io.undertow.websockets.core.function.ChannelFunctionStreamSourceChannel:void wakeupReads()"
        ]
    },
    "io.undertow.io.AsyncReceiverImpl:void resume()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.protocols.ajp.AjpClientResponseStreamSourceChannel:void wakeupReads()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.channels.DetachableStreamSourceChannel:void wakeupReads()",
            "io.undertow.io.AsyncReceiverImpl:void resume()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$2:void handleEvent(io.undertow.server.protocol.framed.AbstractFramedChannel)",
            "io.undertow.server.HttpServerExchange$ReadDispatchChannel:void wakeupReads()",
            "io.undertow.server.HttpServerExchange$ReadDispatchChannel:void runResume()",
            "io.undertow.util.Transfer:void done(org.xnio.channels.StreamSourceChannel,org.xnio.channels.StreamSinkChannel,org.xnio.ChannelListener,org.xnio.ChannelListener)",
            "io.undertow.websockets.core.function.ChannelFunctionStreamSourceChannel:void wakeupReads()"
        ]
    },
    "io.undertow.server.protocol.framed.AbstractFramedChannel$2:void handleEvent(io.undertow.server.protocol.framed.AbstractFramedChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.framed.AbstractFramedChannel$2:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.server.HttpServerExchange$ReadDispatchChannel:void wakeupReads()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.channels.DetachableStreamSourceChannel:void wakeupReads()",
            "io.undertow.io.AsyncReceiverImpl:void resume()",
            "io.undertow.server.HttpServerExchange$ReadDispatchChannel:void wakeupReads()",
            "io.undertow.server.HttpServerExchange$ReadDispatchChannel:void runResume()",
            "io.undertow.util.Transfer:void done(org.xnio.channels.StreamSourceChannel,org.xnio.channels.StreamSinkChannel,org.xnio.ChannelListener,org.xnio.ChannelListener)",
            "io.undertow.websockets.core.function.ChannelFunctionStreamSourceChannel:void wakeupReads()"
        ]
    },
    "io.undertow.util.Transfer:void done(org.xnio.channels.StreamSourceChannel,org.xnio.channels.StreamSinkChannel,org.xnio.ChannelListener,org.xnio.ChannelListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.util.Transfer:void initiateTransfer(org.xnio.channels.StreamSourceChannel,org.xnio.channels.StreamSinkChannel,org.xnio.ChannelListener,org.xnio.ChannelListener,org.xnio.ChannelExceptionHandler,org.xnio.ChannelExceptionHandler,io.undertow.connector.ByteBufferPool)",
            "io.undertow.util.Transfer:void access$000(org.xnio.channels.StreamSourceChannel,org.xnio.channels.StreamSinkChannel,org.xnio.ChannelListener,org.xnio.ChannelListener)"
        ]
    },
    "io.undertow.websockets.core.function.ChannelFunctionStreamSourceChannel:void wakeupReads()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.channels.DetachableStreamSourceChannel:void wakeupReads()",
            "io.undertow.io.AsyncReceiverImpl:void resume()",
            "io.undertow.server.HttpServerExchange$ReadDispatchChannel:void wakeupReads()",
            "io.undertow.server.HttpServerExchange$ReadDispatchChannel:void runResume()",
            "io.undertow.util.Transfer:void done(org.xnio.channels.StreamSourceChannel,org.xnio.channels.StreamSinkChannel,org.xnio.ChannelListener,org.xnio.ChannelListener)",
            "io.undertow.websockets.core.function.ChannelFunctionStreamSourceChannel:void wakeupReads()"
        ]
    },
    "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void <init>(io.undertow.server.protocol.framed.AbstractFramedChannel,io.undertow.connector.PooledByteBuffer,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.ajp.AbstractAjpClientStreamSourceChannel:void <init>(io.undertow.protocols.ajp.AjpClientChannel,io.undertow.connector.PooledByteBuffer,long)",
            "io.undertow.protocols.http2.AbstractHttp2StreamSourceChannel:void <init>(io.undertow.protocols.http2.Http2Channel,io.undertow.connector.PooledByteBuffer,long)",
            "io.undertow.websockets.core.StreamSourceFrameChannel:void <init>(io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketFrameType,int,boolean,io.undertow.connector.PooledByteBuffer,long,io.undertow.websockets.core.protocol.version07.Masker,io.undertow.websockets.core.function.ChannelFunction[])"
        ]
    },
    "io.undertow.server.protocol.framed.AbstractFramedChannel:io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel receive()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection$ClientReceiveListener:void handleEvent(io.undertow.protocols.ajp.AjpClientChannel)",
            "io.undertow.client.http2.Http2ClientConnection$Http2ReceiveListener:void handleEvent(io.undertow.protocols.http2.Http2Channel)",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$2:void handleEvent(io.undertow.server.protocol.framed.AbstractFramedChannel)",
            "io.undertow.server.protocol.http2.Http2ReceiveListener:void handleEvent(io.undertow.protocols.http2.Http2Channel)",
            "io.undertow.websockets.core.AbstractReceiveListener:void handleEvent(io.undertow.websockets.core.WebSocketChannel)"
        ]
    },
    "io.undertow.protocols.http2.AbstractHttp2StreamSourceChannel:void markStreamBroken()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.http2.Http2StreamSourceChannel:void rstStream(int)",
            "io.undertow.protocols.http2.Http2StreamSourceChannel:void channelForciblyClosed()",
            "io.undertow.protocols.http2.Http2Channel:void closeSubChannels()",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:int read(java.nio.ByteBuffer)",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void beforeRead()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel:void handleLastFrame(io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel)",
            "io.undertow.server.protocol.framed.AbstractFramedChannel:void markReadsBroken(java.lang.Throwable)"
        ]
    },
    "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void beforeRead()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:long transferTo(long,long,java.nio.channels.FileChannel)",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:long transferTo(long,java.nio.ByteBuffer,org.xnio.channels.StreamSinkChannel)",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:long read(java.nio.ByteBuffer[],int,int)",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:int read(java.nio.ByteBuffer)"
        ]
    },
    "io.undertow.server.protocol.framed.AbstractFramedChannel:void handleLastFrame(io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.framed.AbstractFramedChannel:io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel receive()"
        ]
    },
    "io.undertow.server.protocol.framed.AbstractFramedChannel:void markReadsBroken(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.ajp.AjpClientChannel:void lastDataRead()",
            "io.undertow.protocols.http2.Http2Channel:io.undertow.server.protocol.framed.FrameHeaderData parseFrame(java.nio.ByteBuffer)",
            "io.undertow.server.protocol.framed.AbstractFramedChannel:io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel receive()",
            "io.undertow.websockets.core.WebSocketChannel:void markReadsBroken(java.lang.Throwable)"
        ]
    },
    "io.undertow.server.protocol.framed.AbstractFramedChannel$FrameWriteListener:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection$3:void handleEvent(io.undertow.protocols.ajp.AjpClientChannel)",
            "io.undertow.client.http.HttpClientConnection$5:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.client.http2.Http2ClientConnection$1:void handleEvent(io.undertow.protocols.http2.Http2Channel)",
            "io.undertow.client.ALPNClientSelector$2:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ALPNClientSelector$2:void handleSelected(java.lang.String)",
            "io.undertow.client.ALPNClientSelector:void runAlpn(org.xnio.ssl.SslConnection,org.xnio.ChannelListener,io.undertow.client.ClientCallback,io.undertow.client.ALPNClientSelector$ALPNProtocol[])",
            "io.undertow.protocols.ajp.AjpClientResponseStreamSourceChannel:void complete()",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void handleFlushComplete(boolean)",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void channelForciblyClosed()",
            "io.undertow.protocols.http2.Http2StreamSourceChannel:void channelForciblyClosed()",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$RequestExchangeListener:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void close()"
        ]
    },
    "io.undertow.protocols.ajp.AjpClientChannel:void recalculateHeldFrames()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void chunkRequested(int)",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void startDiscard()"
        ]
    },
    "io.undertow.protocols.http2.Http2Channel:void notifyFlowControlAllowed()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.http2.Http2Channel:void handleWindowUpdate(int,int)",
            "io.undertow.protocols.http2.Http2StreamSinkChannel:void updateFlowControlWindow(int)"
        ]
    },
    "io.undertow.server.protocol.framed.AbstractFramedStreamSinkChannel:void queueFinalFrame()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.framed.AbstractFramedStreamSinkChannel:void shutdownWrites()",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSinkChannel:boolean flush()"
        ]
    },
    "io.undertow.server.protocol.framed.AbstractFramedStreamSinkChannel:void handleBufferFull()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.framed.AbstractFramedStreamSinkChannel:boolean flush()",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSinkChannel:long write(java.nio.ByteBuffer[],int,int)",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSinkChannel:int write(java.nio.ByteBuffer)"
        ]
    },
    "io.undertow.protocols.http2.Http2Channel:void handleWindowUpdate(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.http2.Http2Channel:io.undertow.protocols.http2.AbstractHttp2StreamSourceChannel createChannelImpl(io.undertow.server.protocol.framed.FrameHeaderData,io.undertow.connector.PooledByteBuffer)"
        ]
    },
    "io.undertow.channels.DetachableStreamSinkChannel:void wakeupWrites()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.channels.DetachableStreamSinkChannel:void wakeupWrites()",
            "io.undertow.server.HttpServerExchange$WriteDispatchChannel:void wakeupWrites()",
            "io.undertow.server.HttpServerExchange$WriteDispatchChannel:void runResume()",
            "io.undertow.util.Transfer:void done(org.xnio.channels.StreamSourceChannel,org.xnio.channels.StreamSinkChannel,org.xnio.ChannelListener,org.xnio.ChannelListener)"
        ]
    },
    "io.undertow.server.protocol.framed.AbstractFramedStreamSinkChannel:void markBroken()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:io.undertow.server.protocol.framed.SendFrameHeader createFrameHeaderImpl()",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void startDiscard()",
            "io.undertow.protocols.http2.Http2StreamSinkChannel:void channelForciblyClosed()",
            "io.undertow.protocols.http2.Http2StreamSinkChannel:void updateFlowControlWindow(int)",
            "io.undertow.server.protocol.framed.AbstractFramedChannel:void markWritesBroken(java.lang.Throwable)",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$FrameCloseListener:void handleEvent(org.xnio.channels.CloseableChannel)",
            "io.undertow.websockets.core.protocol.version07.WebSocket07FrameSinkChannel:io.undertow.connector.PooledByteBuffer preWriteTransform(io.undertow.connector.PooledByteBuffer)",
            "io.undertow.websockets.core.WebSocketFramePriority:boolean insertFrame(io.undertow.websockets.core.StreamSinkFrameChannel,java.util.List)"
        ]
    },
    "io.undertow.server.HttpServerExchange$WriteDispatchChannel:void wakeupWrites()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.channels.DetachableStreamSinkChannel:void wakeupWrites()",
            "io.undertow.server.HttpServerExchange$WriteDispatchChannel:void wakeupWrites()",
            "io.undertow.server.HttpServerExchange$WriteDispatchChannel:void runResume()",
            "io.undertow.util.Transfer:void done(org.xnio.channels.StreamSourceChannel,org.xnio.channels.StreamSinkChannel,org.xnio.ChannelListener,org.xnio.ChannelListener)"
        ]
    },
    "io.undertow.server.HttpServerExchange$WriteDispatchChannel:void runResume()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.HttpServerExchange:boolean runResumeReadWrite()"
        ]
    },
    "io.undertow.channels.DetachableStreamSinkChannel:void resumeWrites()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.channels.DetachableStreamSinkChannel:void resumeWrites()",
            "io.undertow.io.AsyncSenderImpl:void send(java.nio.ByteBuffer,io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void send(java.nio.ByteBuffer[],io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void close(io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void invokeOnComplete()",
            "io.undertow.io.AsyncSenderImpl$TransferTask:boolean run(boolean)",
            "io.undertow.protocols.http2.Http2Channel:void flushChannel(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$HttpClientPingTask$1$1:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$ConnectionPoolPingTask$1:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler$ProxyAction$1:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler$HTTPTrailerChannelListener:void handleEvent(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.server.handlers.sse.ServerSentEventConnection:void fillBuffer()",
            "io.undertow.server.handlers.sse.ServerSentEventConnection:void close(java.io.IOException)",
            "io.undertow.server.handlers.sse.ServerSentEventHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.sse.ServerSentEventConnection$SseWriteListener:void handleEvent(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.server.protocol.http.HttpContinue:void internalSendContinueResponse(io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)",
            "io.undertow.server.HttpServerExchange$WriteDispatchChannel:void resumeWrites()",
            "io.undertow.server.HttpServerExchange$WriteDispatchChannel:void runResume()",
            "io.undertow.util.Transfer:void initiateTransfer(org.xnio.channels.StreamSourceChannel,org.xnio.channels.StreamSinkChannel,org.xnio.ChannelListener,org.xnio.ChannelListener,org.xnio.ChannelExceptionHandler,org.xnio.ChannelExceptionHandler,io.undertow.connector.ByteBufferPool)",
            "io.undertow.util.StringWriteChannelListener:void setup(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.util.StringWriteChannelListener:void handleEvent(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.util.StringWriteChannelListener:void writeDone(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.util.Transfer$TransferListener:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.client.ajp.AjpClientConnection:void handleFailedFlush(io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection:void initiateRequest(io.undertow.client.ajp.AjpClientExchange)"
        ]
    },
    "io.undertow.io.AsyncSenderImpl:void send(java.nio.ByteBuffer,io.undertow.io.IoCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.AsyncSenderImpl:void send(java.nio.ByteBuffer)",
            "io.undertow.server.handlers.cache.ResponseCachingSender:void send(java.nio.ByteBuffer,io.undertow.io.IoCallback)",
            "io.undertow.server.handlers.resource.PathResource$1ServerTask:void run()",
            "io.undertow.server.handlers.resource.URLResource$1ServerTask:void run()",
            "io.undertow.websockets.spi.AsyncWebSocketHttpServerExchange:org.xnio.IoFuture sendData(java.nio.ByteBuffer)"
        ]
    },
    "io.undertow.io.AsyncSenderImpl:void send(java.nio.ByteBuffer[],io.undertow.io.IoCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.AsyncSenderImpl:void send(java.nio.ByteBuffer[])",
            "io.undertow.io.AsyncSenderImpl:void send(java.lang.String,java.nio.charset.Charset,io.undertow.io.IoCallback)",
            "io.undertow.server.handlers.cache.ResponseCache:boolean tryServeResponse(boolean)",
            "io.undertow.server.handlers.cache.ResponseCachingSender:void send(java.nio.ByteBuffer[],io.undertow.io.IoCallback)",
            "io.undertow.server.handlers.resource.CachedResource:void serve(io.undertow.io.Sender,io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)",
            "io.undertow.server.handlers.resource.CachedResource:void serveRange(io.undertow.io.Sender,io.undertow.server.HttpServerExchange,long,long,io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.io.AsyncSenderImpl:void close(io.undertow.io.IoCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.DefaultIoCallback:void onComplete(io.undertow.server.HttpServerExchange,io.undertow.io.Sender)",
            "io.undertow.io.AsyncSenderImpl:void close()"
        ]
    },
    "io.undertow.io.AsyncSenderImpl:void invokeOnComplete()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.AsyncSenderImpl:void send(java.nio.ByteBuffer,io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void send(java.nio.ByteBuffer[],io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void access$400(io.undertow.io.AsyncSenderImpl)"
        ]
    },
    "io.undertow.io.AsyncSenderImpl$TransferTask:boolean run(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.AsyncSenderImpl:void invokeOnComplete()",
            "io.undertow.io.AsyncSenderImpl$TransferTask:void run()"
        ]
    },
    "io.undertow.protocols.http2.Http2Channel:void flushChannel(org.xnio.channels.StreamSinkChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.http2.Http2Channel:void flushChannelIgnoreFailure(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.protocols.http2.Http2Channel:void sendUpdateWindowSize(int,int)",
            "io.undertow.protocols.http2.Http2Channel:io.undertow.protocols.http2.Http2HeadersStreamSinkChannel sendPushPromise(int,io.undertow.util.HeaderMap,io.undertow.util.HeaderMap)"
        ]
    },
    "io.undertow.protocols.http2.Http2Channel:void sendPing(byte[],org.xnio.ChannelExceptionHandler,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.http2.Http2Channel:io.undertow.protocols.http2.AbstractHttp2StreamSourceChannel createChannelImpl(io.undertow.server.protocol.framed.FrameHeaderData,io.undertow.connector.PooledByteBuffer)",
            "io.undertow.protocols.http2.Http2Channel:void sendPing(byte[],org.xnio.ChannelExceptionHandler)"
        ]
    },
    "io.undertow.protocols.http2.Http2Channel:void sendGoAway(int,org.xnio.ChannelExceptionHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.http2.Http2Channel:void handleBrokenSourceChannel(java.lang.Throwable)",
            "io.undertow.protocols.http2.Http2Channel:void sendGoAway(int)"
        ]
    },
    "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$HttpClientPingTask$1$1:void completed(io.undertow.client.ClientExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$HttpClientPingTask$1$1:void completed(java.lang.Object)"
        ]
    },
    "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$ConnectionPoolPingTask$1:void completed(io.undertow.client.ClientExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$ConnectionPoolPingTask$1:void completed(java.lang.Object)"
        ]
    },
    "io.undertow.server.handlers.proxy.ProxyHandler$ProxyAction$1:void completed(io.undertow.client.ClientExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.ProxyHandler$ProxyAction$1:void completed(java.lang.Object)"
        ]
    },
    "io.undertow.server.handlers.proxy.ProxyHandler$HTTPTrailerChannelListener:void handleEvent(org.xnio.channels.StreamSinkChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.ProxyHandler$ProxyAction$1:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler$HTTPTrailerChannelListener:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.server.handlers.sse.ServerSentEventConnection:void fillBuffer()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.sse.ServerSentEventConnection:void access$500(io.undertow.server.handlers.sse.ServerSentEventConnection)"
        ]
    },
    "io.undertow.server.handlers.sse.ServerSentEventConnection:void close(java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.sse.ServerSentEventConnection:void close()"
        ]
    },
    "io.undertow.server.handlers.sse.ServerSentEventConnection$SseWriteListener:void handleEvent(org.xnio.channels.StreamSinkChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.sse.ServerSentEventConnection$4:void run()",
            "io.undertow.server.handlers.sse.ServerSentEventConnection$3:void run()",
            "io.undertow.server.handlers.sse.ServerSentEventConnection$2:void run()",
            "io.undertow.server.handlers.sse.ServerSentEventConnection$SseWriteListener:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.server.protocol.http.HttpContinue:void internalSendContinueResponse(io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.http.HttpContinue:void sendContinueResponse(io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.server.HttpServerExchange$WriteDispatchChannel:void resumeWrites()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.channels.DetachableStreamSinkChannel:void resumeWrites()",
            "io.undertow.io.AsyncSenderImpl:void send(java.nio.ByteBuffer,io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void send(java.nio.ByteBuffer[],io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void close(io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void invokeOnComplete()",
            "io.undertow.io.AsyncSenderImpl$TransferTask:boolean run(boolean)",
            "io.undertow.protocols.http2.Http2Channel:void flushChannel(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$HttpClientPingTask$1$1:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$ConnectionPoolPingTask$1:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler$ProxyAction$1:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler$HTTPTrailerChannelListener:void handleEvent(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.server.handlers.sse.ServerSentEventConnection:void fillBuffer()",
            "io.undertow.server.handlers.sse.ServerSentEventConnection:void close(java.io.IOException)",
            "io.undertow.server.handlers.sse.ServerSentEventHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.sse.ServerSentEventConnection$SseWriteListener:void handleEvent(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.server.protocol.http.HttpContinue:void internalSendContinueResponse(io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)",
            "io.undertow.server.HttpServerExchange$WriteDispatchChannel:void resumeWrites()",
            "io.undertow.server.HttpServerExchange$WriteDispatchChannel:void runResume()",
            "io.undertow.server.HttpServerExchange:void closeAndFlushResponse()",
            "io.undertow.util.Transfer:void initiateTransfer(org.xnio.channels.StreamSourceChannel,org.xnio.channels.StreamSinkChannel,org.xnio.ChannelListener,org.xnio.ChannelListener,org.xnio.ChannelExceptionHandler,org.xnio.ChannelExceptionHandler,io.undertow.connector.ByteBufferPool)",
            "io.undertow.util.StringWriteChannelListener:void setup(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.util.StringWriteChannelListener:void handleEvent(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.util.StringWriteChannelListener:void writeDone(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.util.Transfer$TransferListener:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.util.StringWriteChannelListener:void setup(org.xnio.channels.StreamSinkChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.http.HttpReadListener:void sendBadRequestAndClose(org.xnio.StreamConnection,java.lang.Exception)"
        ]
    },
    "io.undertow.util.StringWriteChannelListener:void handleEvent(org.xnio.channels.StreamSinkChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.util.StringWriteChannelListener:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.util.StringWriteChannelListener:void writeDone(org.xnio.channels.StreamSinkChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.http.HttpReadListener$1:void writeDone(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.util.StringWriteChannelListener:void setup(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.util.StringWriteChannelListener:void handleEvent(org.xnio.channels.StreamSinkChannel)"
        ]
    },
    "io.undertow.websockets.core.WebSocketChannel:void sendClose()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.WebSocketChannel:void lastDataRead()"
        ]
    },
    "io.undertow.websockets.core.WebSocketUtils$2:void handleEvent(io.undertow.websockets.core.StreamSinkFrameChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.WebSocketUtils$2:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.websockets.core.WebSockets:void flushChannelAsync(io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback,io.undertow.websockets.core.StreamSinkFrameChannel,java.lang.Object,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.WebSockets:void sendInternal(io.undertow.connector.PooledByteBuffer,io.undertow.websockets.core.WebSocketFrameType,io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback,java.lang.Object,long)"
        ]
    },
    "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void processPing(io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler$RequestData)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void processStatus(io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler$RequestData)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.proxy.mod_cluster.ModClusterProxyClient$1:void completed(io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.ProxyConnection)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.mod_cluster.ModClusterProxyClient$1:void completed(io.undertow.server.HttpServerExchange,java.lang.Object)"
        ]
    },
    "io.undertow.server.handlers.proxy.mod_cluster.ModClusterProxyClient:void getConnection(io.undertow.server.handlers.proxy.ProxyClient$ProxyTarget,io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.ProxyCallback,long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.ProxyHandler$ProxyClientHandler:void run()",
            "io.undertow.server.handlers.proxy.ProxyHandler$ProxyClientHandler:void failed(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.proxy.LoadBalancingProxyClient:void getConnection(io.undertow.server.handlers.proxy.ProxyClient$ProxyTarget,io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.ProxyCallback,long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.ProxyHandler$ProxyClientHandler:void run()",
            "io.undertow.server.handlers.proxy.ProxyHandler$ProxyClientHandler:void failed(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.proxy.ProxyConnectionPool:void connectionReady(io.undertow.server.handlers.proxy.ProxyConnectionPool$ConnectionHolder,io.undertow.server.handlers.proxy.ProxyCallback,io.undertow.server.HttpServerExchange,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.ProxyConnectionPool:void returnConnection(io.undertow.server.handlers.proxy.ProxyConnectionPool$ConnectionHolder)",
            "io.undertow.server.handlers.proxy.ProxyConnectionPool:void connect(io.undertow.server.handlers.proxy.ProxyClient$ProxyTarget,io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.ProxyCallback,long,java.util.concurrent.TimeUnit,boolean)",
            "io.undertow.server.handlers.proxy.ProxyConnectionPool:void access$900(io.undertow.server.handlers.proxy.ProxyConnectionPool,io.undertow.server.handlers.proxy.ProxyConnectionPool$ConnectionHolder,io.undertow.server.handlers.proxy.ProxyCallback,io.undertow.server.HttpServerExchange,boolean)"
        ]
    },
    "io.undertow.server.handlers.proxy.SimpleProxyClientProvider:void getConnection(io.undertow.server.handlers.proxy.ProxyClient$ProxyTarget,io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.ProxyCallback,long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.ProxyHandler$ProxyClientHandler:void run()",
            "io.undertow.server.handlers.proxy.ProxyHandler$ProxyClientHandler:void failed(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.proxy.SimpleProxyClientProvider$ConnectNotifier:void completed(io.undertow.client.ClientConnection)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.SimpleProxyClientProvider$ConnectNotifier:void completed(java.lang.Object)"
        ]
    },
    "io.undertow.server.handlers.proxy.LoadBalancingProxyClient$2:void completed(io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.ProxyConnection)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.LoadBalancingProxyClient$2:void completed(io.undertow.server.HttpServerExchange,java.lang.Object)"
        ]
    },
    "io.undertow.server.handlers.cache.ResponseCachingSender:void transferFrom(java.nio.channels.FileChannel,io.undertow.io.IoCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.cache.ResponseCachingSender:void transferFrom(java.nio.channels.FileChannel,io.undertow.io.IoCallback)",
            "io.undertow.server.handlers.resource.PathResource$1TransferTask:void run()"
        ]
    },
    "io.undertow.server.handlers.resource.PathResource$1TransferTask:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.ssl.SslConduit$5:void run()",
            "io.undertow.protocols.ssl.SslConduit:void runReadListener(boolean)",
            "io.undertow.protocols.ssl.SslConduit:boolean handleHandshakeResult(javax.net.ssl.SSLEngineResult)",
            "io.undertow.protocols.ssl.SslConduit$2:void run()",
            "io.undertow.server.handlers.resource.PathResource:void serveImpl(io.undertow.io.Sender,io.undertow.server.HttpServerExchange,long,long,io.undertow.io.IoCallback,boolean)",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$FrameReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$3:void run()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel:void runInIoThread(java.lang.Runnable)",
            "io.undertow.server.protocol.http.ALPNLimitingSSLEngine:void limitCiphers(java.util.List)",
            "io.undertow.server.protocol.ParseTimeoutUpdater:void run()",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:io.undertow.server.HttpServerExchange dispatch(java.util.concurrent.Executor,java.lang.Runnable)",
            "io.undertow.util.SameThreadExecutor:void execute(java.lang.Runnable)",
            "io.undertow.util.PipeliningExecutor$1:void run()"
        ]
    },
    "io.undertow.io.AsyncSenderImpl$TransferTask:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection$3:void handleEvent(io.undertow.protocols.ajp.AjpClientChannel)",
            "io.undertow.client.http.HttpClientConnection$5:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.client.http2.Http2ClientConnection$1:void handleEvent(io.undertow.protocols.http2.Http2Channel)",
            "io.undertow.client.ALPNClientSelector$2:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ALPNClientSelector$2:void handleSelected(java.lang.String)",
            "io.undertow.client.ALPNClientSelector:void runAlpn(org.xnio.ssl.SslConnection,org.xnio.ChannelListener,io.undertow.client.ClientCallback,io.undertow.client.ALPNClientSelector$ALPNProtocol[])",
            "io.undertow.protocols.ajp.AjpClientResponseStreamSourceChannel:void complete()",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void handleFlushComplete(boolean)",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void channelForciblyClosed()",
            "io.undertow.protocols.http2.Http2StreamSourceChannel:void channelForciblyClosed()",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$RequestExchangeListener:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void close()"
        ]
    },
    "io.undertow.server.handlers.error.FileErrorPageHandler:void access$100(io.undertow.server.handlers.error.FileErrorPageHandler,io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.error.FileErrorPageHandler$1:boolean handleDefaultResponse(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.resource.PathResource:void serve(io.undertow.io.Sender,io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.resource.CachedResource:void serve(io.undertow.io.Sender,io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)",
            "io.undertow.server.handlers.resource.CachedResource:void serveRange(io.undertow.io.Sender,io.undertow.server.HttpServerExchange,long,long,io.undertow.io.IoCallback)",
            "io.undertow.server.handlers.resource.ResourceHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.resource.PathResource:void serveRange(io.undertow.io.Sender,io.undertow.server.HttpServerExchange,long,long,io.undertow.io.IoCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.resource.CachedResource:void serveRange(io.undertow.io.Sender,io.undertow.server.HttpServerExchange,long,long,io.undertow.io.IoCallback)",
            "io.undertow.server.handlers.resource.ResourceHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.io.AsyncSenderImpl:void send(java.lang.String,java.nio.charset.Charset,io.undertow.io.IoCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.AsyncSenderImpl:void send(java.lang.String,io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void send(java.lang.String,java.nio.charset.Charset)",
            "io.undertow.server.handlers.cache.ResponseCachingSender:void send(java.lang.String,java.nio.charset.Charset,io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.io.AsyncSenderImpl$1:void handleEvent(org.xnio.channels.StreamSinkChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.AsyncSenderImpl$1:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.io.BlockingSenderImpl:void invokeOnComplete(io.undertow.io.IoCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.BlockingSenderImpl:void send(java.nio.ByteBuffer,io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:void send(java.nio.ByteBuffer[],io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:void send(java.lang.String,io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:void send(java.lang.String,java.nio.charset.Charset,io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:void transferFrom(java.nio.channels.FileChannel,io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:void close(io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.server.handlers.resource.PathResource$1ServerTask:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.ssl.SslConduit$5:void run()",
            "io.undertow.protocols.ssl.SslConduit:void runReadListener(boolean)",
            "io.undertow.protocols.ssl.SslConduit:boolean handleHandshakeResult(javax.net.ssl.SSLEngineResult)",
            "io.undertow.protocols.ssl.SslConduit$2:void run()",
            "io.undertow.server.handlers.resource.PathResource:void serveImpl(io.undertow.io.Sender,io.undertow.server.HttpServerExchange,long,long,io.undertow.io.IoCallback,boolean)",
            "io.undertow.server.handlers.resource.PathResource$1ServerTask:void onComplete(io.undertow.server.HttpServerExchange,io.undertow.io.Sender)",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$FrameReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$3:void run()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel:void runInIoThread(java.lang.Runnable)",
            "io.undertow.server.protocol.http.ALPNLimitingSSLEngine:void limitCiphers(java.util.List)",
            "io.undertow.server.protocol.ParseTimeoutUpdater:void run()",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:io.undertow.server.HttpServerExchange dispatch(java.util.concurrent.Executor,java.lang.Runnable)",
            "io.undertow.util.SameThreadExecutor:void execute(java.lang.Runnable)",
            "io.undertow.util.PipeliningExecutor$1:void run()"
        ]
    },
    "io.undertow.server.handlers.resource.URLResource$1ServerTask:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.ssl.SslConduit$5:void run()",
            "io.undertow.protocols.ssl.SslConduit:void runReadListener(boolean)",
            "io.undertow.protocols.ssl.SslConduit:boolean handleHandshakeResult(javax.net.ssl.SSLEngineResult)",
            "io.undertow.protocols.ssl.SslConduit$2:void run()",
            "io.undertow.server.handlers.resource.URLResource$1ServerTask:void onComplete(io.undertow.server.HttpServerExchange,io.undertow.io.Sender)",
            "io.undertow.server.handlers.resource.URLResource:void serveImpl(io.undertow.io.Sender,io.undertow.server.HttpServerExchange,long,long,boolean,io.undertow.io.IoCallback)",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$FrameReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$3:void run()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel:void runInIoThread(java.lang.Runnable)",
            "io.undertow.server.protocol.http.ALPNLimitingSSLEngine:void limitCiphers(java.util.List)",
            "io.undertow.server.protocol.ParseTimeoutUpdater:void run()",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:io.undertow.server.HttpServerExchange dispatch(java.util.concurrent.Executor,java.lang.Runnable)",
            "io.undertow.util.SameThreadExecutor:void execute(java.lang.Runnable)",
            "io.undertow.util.PipeliningExecutor$1:void run()"
        ]
    },
    "io.undertow.server.handlers.resource.CachedResource$DereferenceCallback:void onComplete(io.undertow.server.HttpServerExchange,io.undertow.io.Sender)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.AsyncSenderImpl:void send(java.nio.ByteBuffer,io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void send(java.lang.String,java.nio.charset.Charset,io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void close(io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void invokeOnComplete()",
            "io.undertow.io.AsyncSenderImpl$1:void handleEvent(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.io.BlockingSenderImpl:void invokeOnComplete(io.undertow.io.IoCallback)",
            "io.undertow.server.handlers.resource.PathResource$1ServerTask:void run()",
            "io.undertow.server.handlers.resource.URLResource$1ServerTask:void run()",
            "io.undertow.server.handlers.resource.CachedResource$DereferenceCallback:void onComplete(io.undertow.server.HttpServerExchange,io.undertow.io.Sender)",
            "io.undertow.server.handlers.resource.PathResource$1TransferTask$1:void onComplete(io.undertow.server.HttpServerExchange,io.undertow.io.Sender)",
            "io.undertow.server.protocol.http.HttpContinue$3$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http.HttpContinue:void internalSendContinueResponse(io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.server.handlers.resource.PathResource$1TransferTask$1:void onComplete(io.undertow.server.HttpServerExchange,io.undertow.io.Sender)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.AsyncSenderImpl:void send(java.nio.ByteBuffer,io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void send(java.lang.String,java.nio.charset.Charset,io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void close(io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void invokeOnComplete()",
            "io.undertow.io.AsyncSenderImpl$1:void handleEvent(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.io.BlockingSenderImpl:void invokeOnComplete(io.undertow.io.IoCallback)",
            "io.undertow.server.handlers.resource.PathResource$1ServerTask:void run()",
            "io.undertow.server.handlers.resource.URLResource$1ServerTask:void run()",
            "io.undertow.server.handlers.resource.CachedResource$DereferenceCallback:void onComplete(io.undertow.server.HttpServerExchange,io.undertow.io.Sender)",
            "io.undertow.server.handlers.resource.PathResource$1TransferTask$1:void onComplete(io.undertow.server.HttpServerExchange,io.undertow.io.Sender)",
            "io.undertow.server.protocol.http.HttpContinue$3$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http.HttpContinue:void internalSendContinueResponse(io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.server.protocol.http.HttpContinue$3$1:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.predicate.PredicatesHandler$DoneHandlerBuilder$1$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractSecurityContextAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.RequestEncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.resource.ResourceHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LearningPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathSeparatorHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConnectHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisableCacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StuckThreadDetectionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ExceptionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumpingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ResponseRateLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ByteRangeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LocalNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StoredResponseHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimit:void handleRequest(io.undertow.server.HttpServerExchange,io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConfiguredPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$3$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$2:void handle(io.undertow.server.HttpServerExchange,byte[],boolean)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleNoMatch(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.resource.URLResource:void serve(io.undertow.io.Sender,io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.resource.CachedResource:void serve(io.undertow.io.Sender,io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)",
            "io.undertow.server.handlers.resource.CachedResource:void serveRange(io.undertow.io.Sender,io.undertow.server.HttpServerExchange,long,long,io.undertow.io.IoCallback)",
            "io.undertow.server.handlers.resource.ResourceHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.resource.URLResource:void serveRange(io.undertow.io.Sender,io.undertow.server.HttpServerExchange,long,long,io.undertow.io.IoCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.resource.CachedResource:void serveRange(io.undertow.io.Sender,io.undertow.server.HttpServerExchange,long,long,io.undertow.io.IoCallback)",
            "io.undertow.server.handlers.resource.ResourceHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection$3:void handleEvent(io.undertow.protocols.ajp.AjpClientChannel)",
            "io.undertow.client.http.HttpClientConnection$5:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.client.http2.Http2ClientConnection$1:void handleEvent(io.undertow.protocols.http2.Http2Channel)",
            "io.undertow.client.ALPNClientSelector$2:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ALPNClientSelector$2:void handleSelected(java.lang.String)",
            "io.undertow.client.ALPNClientSelector:void runAlpn(org.xnio.ssl.SslConnection,org.xnio.ChannelListener,io.undertow.client.ClientCallback,io.undertow.client.ALPNClientSelector$ALPNProtocol[])",
            "io.undertow.protocols.ajp.AjpClientResponseStreamSourceChannel:void complete()",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void handleFlushComplete(boolean)",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void channelForciblyClosed()",
            "io.undertow.protocols.http2.Http2StreamSourceChannel:void channelForciblyClosed()",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$RequestExchangeListener:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void close()"
        ]
    },
    "io.undertow.server.handlers.RequestLimit$1:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()"
        ]
    },
    "io.undertow.server.handlers.RequestLimit:int setMaximumConcurrentRequests(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.server.handlers.HttpContinueAcceptingHandler$1:void onComplete(io.undertow.server.HttpServerExchange,io.undertow.io.Sender)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.AsyncSenderImpl:void send(java.nio.ByteBuffer,io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void send(java.lang.String,java.nio.charset.Charset,io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void close(io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void invokeOnComplete()",
            "io.undertow.io.AsyncSenderImpl$1:void handleEvent(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.io.BlockingSenderImpl:void invokeOnComplete(io.undertow.io.IoCallback)",
            "io.undertow.server.handlers.resource.PathResource$1ServerTask:void run()",
            "io.undertow.server.handlers.resource.URLResource$1ServerTask:void run()",
            "io.undertow.server.handlers.resource.CachedResource$DereferenceCallback:void onComplete(io.undertow.server.HttpServerExchange,io.undertow.io.Sender)",
            "io.undertow.server.handlers.resource.PathResource$1TransferTask$1:void onComplete(io.undertow.server.HttpServerExchange,io.undertow.io.Sender)",
            "io.undertow.server.protocol.http.HttpContinue$3$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http.HttpContinue:void internalSendContinueResponse(io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.server.protocol.http.HttpContinue$3:void handleEvent(org.xnio.channels.StreamSinkChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.http.HttpContinue$3:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.server.protocol.http.HttpContinue$4:void handleException(java.nio.channels.Channel,java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.http2.Http2Channel:void sendPing(byte[],org.xnio.ChannelExceptionHandler,boolean)",
            "io.undertow.protocols.http2.Http2Channel:void sendGoAway(int,org.xnio.ChannelExceptionHandler)"
        ]
    },
    "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.accesslog.AccessLogHandler$AccessLogCompletionListener:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)",
            "io.undertow.server.handlers.error.FileErrorPageHandler$2$1:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$1:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)",
            "io.undertow.server.handlers.proxy.mod_cluster.Context$1:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)",
            "io.undertow.server.handlers.proxy.ProxyHandler$2:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)",
            "io.undertow.server.handlers.proxy.ProxyConnectionPool$3:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)",
            "io.undertow.server.handlers.RequestLimit$1:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)",
            "io.undertow.server.handlers.LearningPushHandler$PushCompletionListener:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)",
            "io.undertow.server.handlers.GracefulShutdownHandler$GracefulShutdownListener:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)",
            "io.undertow.server.handlers.JDBCLogHandler$JDBCLogCompletionListener:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)",
            "io.undertow.server.handlers.MetricsHandler$2:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)",
            "io.undertow.server.handlers.RequestDumpingHandler$1:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)",
            "io.undertow.server.handlers.SSLHeaderHandler$1:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)",
            "io.undertow.server.protocol.http2.Http2ServerConnection$2:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)",
            "io.undertow.server.session.SessionAttachmentHandler$UpdateLastAccessTimeListener:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)",
            "io.undertow.server.Connectors$1:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)",
            "io.undertow.server.ConnectorStatisticsImpl$1:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)"
        ]
    },
    "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.HttpServerExchange:void terminateRequest()",
            "io.undertow.server.HttpServerExchange:io.undertow.server.HttpServerExchange terminateResponse()",
            "io.undertow.server.HttpServerExchange:io.undertow.server.HttpServerExchange endExchange()",
            "io.undertow.server.HttpServerExchange:void closeAndFlushResponse()",
            "io.undertow.server.HttpServerExchange:void access$100(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.protocol.http.HttpOpenListener:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection$3:void handleEvent(io.undertow.protocols.ajp.AjpClientChannel)",
            "io.undertow.client.http.HttpClientConnection$5:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.client.http2.Http2ClientConnection$1:void handleEvent(io.undertow.protocols.http2.Http2Channel)",
            "io.undertow.client.ALPNClientSelector$2:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ALPNClientSelector$2:void handleSelected(java.lang.String)",
            "io.undertow.client.ALPNClientSelector:void runAlpn(org.xnio.ssl.SslConnection,org.xnio.ChannelListener,io.undertow.client.ClientCallback,io.undertow.client.ALPNClientSelector$ALPNProtocol[])",
            "io.undertow.protocols.ajp.AjpClientResponseStreamSourceChannel:void complete()",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void handleFlushComplete(boolean)",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void channelForciblyClosed()",
            "io.undertow.protocols.http2.Http2StreamSourceChannel:void channelForciblyClosed()",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$RequestExchangeListener:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void close()",
            "io.undertow.server.protocol.http.AlpnOpenListener:void handleEvent(org.xnio.StreamConnection)"
        ]
    },
    "io.undertow.server.protocol.http.AlpnOpenListener:void handleEvent(org.xnio.StreamConnection)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.http.AlpnOpenListener:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.server.protocol.http.AlpnOpenListener$AlpnConnectionListener:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection$3:void handleEvent(io.undertow.protocols.ajp.AjpClientChannel)",
            "io.undertow.client.http.HttpClientConnection$5:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.client.http2.Http2ClientConnection$1:void handleEvent(io.undertow.protocols.http2.Http2Channel)",
            "io.undertow.client.ALPNClientSelector$2:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ALPNClientSelector$2:void handleSelected(java.lang.String)",
            "io.undertow.client.ALPNClientSelector:void runAlpn(org.xnio.ssl.SslConnection,org.xnio.ChannelListener,io.undertow.client.ClientCallback,io.undertow.client.ALPNClientSelector$ALPNProtocol[])",
            "io.undertow.protocols.ajp.AjpClientResponseStreamSourceChannel:void complete()",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void handleFlushComplete(boolean)",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void channelForciblyClosed()",
            "io.undertow.protocols.http2.Http2StreamSourceChannel:void channelForciblyClosed()",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$RequestExchangeListener:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void close()"
        ]
    },
    "io.undertow.client.http2.Http2ClientConnection$Http2ReceiveListener:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection$3:void handleEvent(io.undertow.protocols.ajp.AjpClientChannel)",
            "io.undertow.client.http.HttpClientConnection$5:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.client.http2.Http2ClientConnection$1:void handleEvent(io.undertow.protocols.http2.Http2Channel)",
            "io.undertow.client.ALPNClientSelector$2:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ALPNClientSelector$2:void handleSelected(java.lang.String)",
            "io.undertow.client.ALPNClientSelector:void runAlpn(org.xnio.ssl.SslConnection,org.xnio.ChannelListener,io.undertow.client.ClientCallback,io.undertow.client.ALPNClientSelector$ALPNProtocol[])",
            "io.undertow.protocols.ajp.AjpClientResponseStreamSourceChannel:void complete()",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void handleFlushComplete(boolean)",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void channelForciblyClosed()",
            "io.undertow.protocols.http2.Http2StreamSourceChannel:void channelForciblyClosed()",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$RequestExchangeListener:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void close()"
        ]
    },
    "io.undertow.client.http.HttpClientProvider$2:void handleEvent(org.xnio.StreamConnection)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpClientProvider$2:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.client.http2.Http2ClientProvider$3:void handleEvent(org.xnio.StreamConnection)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http2.Http2ClientProvider$3:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.channels.DetachableStreamSourceChannel:long transferTo(long,long,java.nio.channels.FileChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.channels.DetachableStreamSourceChannel:long transferTo(long,long,java.nio.channels.FileChannel)",
            "io.undertow.server.HttpServerExchange$ReadDispatchChannel:long transferTo(long,long,java.nio.channels.FileChannel)",
            "io.undertow.websockets.core.function.ChannelFunctionStreamSourceChannel:long transferTo(long,long,java.nio.channels.FileChannel)"
        ]
    },
    "io.undertow.protocols.http2.Http2StreamSourceChannel:long transferTo(long,long,java.nio.channels.FileChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.channels.DetachableStreamSourceChannel:long transferTo(long,long,java.nio.channels.FileChannel)",
            "io.undertow.websockets.core.function.ChannelFunctionStreamSourceChannel:long transferTo(long,long,java.nio.channels.FileChannel)"
        ]
    },
    "io.undertow.websockets.core.function.ChannelFunctionStreamSourceChannel:long transferTo(long,long,java.nio.channels.FileChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.channels.DetachableStreamSourceChannel:long transferTo(long,long,java.nio.channels.FileChannel)",
            "io.undertow.websockets.core.function.ChannelFunctionStreamSourceChannel:long transferTo(long,long,java.nio.channels.FileChannel)"
        ]
    },
    "io.undertow.websockets.core.StreamSourceFrameChannel:long transferTo(long,long,java.nio.channels.FileChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.channels.DetachableStreamSourceChannel:long transferTo(long,long,java.nio.channels.FileChannel)",
            "io.undertow.websockets.core.function.ChannelFunctionStreamSourceChannel:long transferTo(long,long,java.nio.channels.FileChannel)"
        ]
    },
    "io.undertow.channels.DetachableStreamSourceChannel:long transferTo(long,java.nio.ByteBuffer,org.xnio.channels.StreamSinkChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.channels.DetachableStreamSourceChannel:long transferTo(long,java.nio.ByteBuffer,org.xnio.channels.StreamSinkChannel)",
            "io.undertow.server.HttpServerExchange$ReadDispatchChannel:long transferTo(long,java.nio.ByteBuffer,org.xnio.channels.StreamSinkChannel)"
        ]
    },
    "io.undertow.protocols.http2.Http2StreamSourceChannel:long transferTo(long,java.nio.ByteBuffer,org.xnio.channels.StreamSinkChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.channels.DetachableStreamSourceChannel:long transferTo(long,java.nio.ByteBuffer,org.xnio.channels.StreamSinkChannel)"
        ]
    },
    "io.undertow.channels.DetachableStreamSourceChannel:long read(java.nio.ByteBuffer[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.channels.DetachableStreamSourceChannel:long read(java.nio.ByteBuffer[],int,int)",
            "io.undertow.server.HttpServerExchange$ReadDispatchChannel:long read(java.nio.ByteBuffer[],int,int)"
        ]
    },
    "io.undertow.protocols.http2.Http2StreamSourceChannel:long read(java.nio.ByteBuffer[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.channels.DetachableStreamSourceChannel:long read(java.nio.ByteBuffer[],int,int)",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:long read(java.nio.ByteBuffer[])"
        ]
    },
    "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:long read(java.nio.ByteBuffer[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.channels.DetachableStreamSourceChannel:long read(java.nio.ByteBuffer[])",
            "io.undertow.protocols.http2.Http2StreamSourceChannel:long read(java.nio.ByteBuffer[])"
        ]
    },
    "io.undertow.websockets.core.StreamSourceFrameChannel:long read(java.nio.ByteBuffer[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.channels.DetachableStreamSourceChannel:long read(java.nio.ByteBuffer[],int,int)",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:long read(java.nio.ByteBuffer[])",
            "io.undertow.websockets.core.StreamSourceFrameChannel:long read(java.nio.ByteBuffer[])"
        ]
    },
    "io.undertow.channels.DetachableStreamSourceChannel:int read(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.channels.DetachableStreamSourceChannel:int read(java.nio.ByteBuffer)",
            "io.undertow.client.http.HttpClientConnection$ClientReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ALPNClientSelector$2:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.io.AsyncReceiverImpl$5:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.io.AsyncReceiverImpl$2:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.io.AsyncReceiverImpl$3:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.io.AsyncReceiverImpl:void receiveFullString(io.undertow.io.Receiver$FullStringCallback,io.undertow.io.Receiver$ErrorCallback,java.nio.charset.Charset)",
            "io.undertow.io.AsyncReceiverImpl:void receivePartialString(io.undertow.io.Receiver$PartialStringCallback,io.undertow.io.Receiver$ErrorCallback,java.nio.charset.Charset)",
            "io.undertow.io.AsyncReceiverImpl:void receiveFullBytes(io.undertow.io.Receiver$FullBytesCallback,io.undertow.io.Receiver$ErrorCallback)",
            "io.undertow.io.AsyncReceiverImpl:void receivePartialBytes(io.undertow.io.Receiver$PartialBytesCallback,io.undertow.io.Receiver$ErrorCallback)",
            "io.undertow.io.UndertowInputStream:void readIntoBufferNonBlocking()",
            "io.undertow.io.AsyncReceiverImpl$4:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler$NonBlockingParseTask:void run()",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void doParse(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.handlers.RequestBufferingHandler$1:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.ajp.AjpReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.HttpServerExchange$ReadDispatchChannel:int read(java.nio.ByteBuffer)",
            "io.undertow.util.Transfer:void initiateTransfer(org.xnio.channels.StreamSourceChannel,org.xnio.channels.StreamSinkChannel,org.xnio.ChannelListener,org.xnio.ChannelListener,org.xnio.ChannelExceptionHandler,org.xnio.ChannelExceptionHandler,io.undertow.connector.ByteBufferPool)",
            "io.undertow.util.StringReadChannelListener:void setup(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.util.StringReadChannelListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.util.Transfer$TransferListener:void handleEvent(java.nio.channels.Channel)",
            "io.undertow.websockets.core.function.ChannelFunctionStreamSourceChannel:int read(java.nio.ByteBuffer)",
            "io.undertow.websockets.spi.AsyncWebSocketHttpServerExchange:org.xnio.IoFuture readRequestData()",
            "io.undertow.websockets.spi.AsyncWebSocketHttpServerExchange$2:void handleEvent(org.xnio.channels.StreamSourceChannel)"
        ]
    },
    "io.undertow.io.UndertowInputStream:void readIntoBufferNonBlocking()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.UndertowInputStream:int available()"
        ]
    },
    "io.undertow.protocols.http2.Http2StreamSourceChannel:int read(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.channels.DetachableStreamSourceChannel:int read(java.nio.ByteBuffer)",
            "io.undertow.client.http.HttpClientConnection$ClientReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ALPNClientSelector$2:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.io.AsyncReceiverImpl$5:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.io.AsyncReceiverImpl$2:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.io.AsyncReceiverImpl$3:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.io.AsyncReceiverImpl:void receiveFullString(io.undertow.io.Receiver$FullStringCallback,io.undertow.io.Receiver$ErrorCallback,java.nio.charset.Charset)",
            "io.undertow.io.AsyncReceiverImpl:void receivePartialString(io.undertow.io.Receiver$PartialStringCallback,io.undertow.io.Receiver$ErrorCallback,java.nio.charset.Charset)",
            "io.undertow.io.AsyncReceiverImpl:void receiveFullBytes(io.undertow.io.Receiver$FullBytesCallback,io.undertow.io.Receiver$ErrorCallback)",
            "io.undertow.io.AsyncReceiverImpl:void receivePartialBytes(io.undertow.io.Receiver$PartialBytesCallback,io.undertow.io.Receiver$ErrorCallback)",
            "io.undertow.io.UndertowInputStream:void readIntoBufferNonBlocking()",
            "io.undertow.io.AsyncReceiverImpl$4:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler$NonBlockingParseTask:void run()",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void doParse(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.handlers.RequestBufferingHandler$1:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.ajp.AjpReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.util.Transfer:void initiateTransfer(org.xnio.channels.StreamSourceChannel,org.xnio.channels.StreamSinkChannel,org.xnio.ChannelListener,org.xnio.ChannelListener,org.xnio.ChannelExceptionHandler,org.xnio.ChannelExceptionHandler,io.undertow.connector.ByteBufferPool)",
            "io.undertow.util.StringReadChannelListener:void setup(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.util.StringReadChannelListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.util.Transfer$TransferListener:void handleEvent(java.nio.channels.Channel)",
            "io.undertow.websockets.core.function.ChannelFunctionStreamSourceChannel:int read(java.nio.ByteBuffer)",
            "io.undertow.websockets.spi.AsyncWebSocketHttpServerExchange:org.xnio.IoFuture readRequestData()",
            "io.undertow.websockets.spi.AsyncWebSocketHttpServerExchange$2:void handleEvent(org.xnio.channels.StreamSourceChannel)"
        ]
    },
    "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void doParse(org.xnio.channels.StreamSourceChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:io.undertow.server.handlers.form.FormData parseBlocking()"
        ]
    },
    "io.undertow.util.StringReadChannelListener:void handleEvent(org.xnio.channels.StreamSourceChannel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.websockets.core.function.ChannelFunctionStreamSourceChannel:int read(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.channels.DetachableStreamSourceChannel:int read(java.nio.ByteBuffer)",
            "io.undertow.client.http.HttpClientConnection$ClientReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ALPNClientSelector$2:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.io.AsyncReceiverImpl$5:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.io.AsyncReceiverImpl$2:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.io.AsyncReceiverImpl$3:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.io.AsyncReceiverImpl:void receiveFullString(io.undertow.io.Receiver$FullStringCallback,io.undertow.io.Receiver$ErrorCallback,java.nio.charset.Charset)",
            "io.undertow.io.AsyncReceiverImpl:void receivePartialString(io.undertow.io.Receiver$PartialStringCallback,io.undertow.io.Receiver$ErrorCallback,java.nio.charset.Charset)",
            "io.undertow.io.AsyncReceiverImpl:void receiveFullBytes(io.undertow.io.Receiver$FullBytesCallback,io.undertow.io.Receiver$ErrorCallback)",
            "io.undertow.io.AsyncReceiverImpl:void receivePartialBytes(io.undertow.io.Receiver$PartialBytesCallback,io.undertow.io.Receiver$ErrorCallback)",
            "io.undertow.io.UndertowInputStream:void readIntoBufferNonBlocking()",
            "io.undertow.io.AsyncReceiverImpl$4:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler$NonBlockingParseTask:void run()",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void doParse(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.handlers.RequestBufferingHandler$1:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.ajp.AjpReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.util.Transfer:void initiateTransfer(org.xnio.channels.StreamSourceChannel,org.xnio.channels.StreamSinkChannel,org.xnio.ChannelListener,org.xnio.ChannelListener,org.xnio.ChannelExceptionHandler,org.xnio.ChannelExceptionHandler,io.undertow.connector.ByteBufferPool)",
            "io.undertow.util.StringReadChannelListener:void setup(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.util.StringReadChannelListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.util.Transfer$TransferListener:void handleEvent(java.nio.channels.Channel)",
            "io.undertow.websockets.core.function.ChannelFunctionStreamSourceChannel:long read(java.nio.ByteBuffer[],int,int)",
            "io.undertow.websockets.core.function.ChannelFunctionStreamSourceChannel:long read(java.nio.ByteBuffer[])",
            "io.undertow.websockets.core.function.ChannelFunctionStreamSourceChannel:int read(java.nio.ByteBuffer)",
            "io.undertow.websockets.spi.AsyncWebSocketHttpServerExchange:org.xnio.IoFuture readRequestData()",
            "io.undertow.websockets.spi.AsyncWebSocketHttpServerExchange$2:void handleEvent(org.xnio.channels.StreamSourceChannel)"
        ]
    },
    "io.undertow.websockets.core.StreamSourceFrameChannel:int read(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.channels.DetachableStreamSourceChannel:int read(java.nio.ByteBuffer)",
            "io.undertow.client.http.HttpClientConnection$ClientReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ALPNClientSelector$2:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.io.AsyncReceiverImpl$5:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.io.AsyncReceiverImpl$2:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.io.AsyncReceiverImpl$3:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.io.AsyncReceiverImpl:void receiveFullString(io.undertow.io.Receiver$FullStringCallback,io.undertow.io.Receiver$ErrorCallback,java.nio.charset.Charset)",
            "io.undertow.io.AsyncReceiverImpl:void receivePartialString(io.undertow.io.Receiver$PartialStringCallback,io.undertow.io.Receiver$ErrorCallback,java.nio.charset.Charset)",
            "io.undertow.io.AsyncReceiverImpl:void receiveFullBytes(io.undertow.io.Receiver$FullBytesCallback,io.undertow.io.Receiver$ErrorCallback)",
            "io.undertow.io.AsyncReceiverImpl:void receivePartialBytes(io.undertow.io.Receiver$PartialBytesCallback,io.undertow.io.Receiver$ErrorCallback)",
            "io.undertow.io.UndertowInputStream:void readIntoBufferNonBlocking()",
            "io.undertow.io.AsyncReceiverImpl$4:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler$NonBlockingParseTask:void run()",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void doParse(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.handlers.RequestBufferingHandler$1:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.ajp.AjpReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.util.Transfer:void initiateTransfer(org.xnio.channels.StreamSourceChannel,org.xnio.channels.StreamSinkChannel,org.xnio.ChannelListener,org.xnio.ChannelListener,org.xnio.ChannelExceptionHandler,org.xnio.ChannelExceptionHandler,io.undertow.connector.ByteBufferPool)",
            "io.undertow.util.StringReadChannelListener:void setup(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.util.StringReadChannelListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.util.Transfer$TransferListener:void handleEvent(java.nio.channels.Channel)",
            "io.undertow.websockets.core.function.ChannelFunctionStreamSourceChannel:int read(java.nio.ByteBuffer)",
            "io.undertow.websockets.core.BufferedTextMessage:void readBlocking(io.undertow.websockets.core.StreamSourceFrameChannel)",
            "io.undertow.websockets.core.BufferedTextMessage:void read(io.undertow.websockets.core.StreamSourceFrameChannel,io.undertow.websockets.core.WebSocketCallback)",
            "io.undertow.websockets.core.BufferedBinaryMessage$1:void handleEvent(io.undertow.websockets.core.StreamSourceFrameChannel)",
            "io.undertow.websockets.core.BufferedBinaryMessage:void readBlocking(io.undertow.websockets.core.StreamSourceFrameChannel)",
            "io.undertow.websockets.core.BufferedBinaryMessage:void read(io.undertow.websockets.core.StreamSourceFrameChannel,io.undertow.websockets.core.WebSocketCallback)",
            "io.undertow.websockets.core.BufferedTextMessage$1:void handleEvent(io.undertow.websockets.core.StreamSourceFrameChannel)",
            "io.undertow.websockets.spi.AsyncWebSocketHttpServerExchange:org.xnio.IoFuture readRequestData()",
            "io.undertow.websockets.spi.AsyncWebSocketHttpServerExchange$2:void handleEvent(org.xnio.channels.StreamSourceChannel)"
        ]
    },
    "io.undertow.websockets.spi.AsyncWebSocketHttpServerExchange$2:void handleEvent(org.xnio.channels.StreamSourceChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.spi.AsyncWebSocketHttpServerExchange$2:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.client.ajp.AjpClientProvider:void access$000(io.undertow.client.ajp.AjpClientProvider,org.xnio.StreamConnection,io.undertow.client.ClientCallback,java.net.URI,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientProvider$3:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.client.ajp.AjpClientProvider$1:void handleEvent(org.xnio.StreamConnection)"
        ]
    },
    "io.undertow.client.ajp.AjpClientConnection$ClientReceiveListener:void handleEvent(io.undertow.protocols.ajp.AjpClientChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection$ClientReceiveListener:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.websockets.client.WebSocketClient$ConnectionBuilder$1$1:void completed(io.undertow.client.ClientExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.client.WebSocketClient$ConnectionBuilder$1$1:void completed(java.lang.Object)"
        ]
    },
    "io.undertow.client.ajp.AjpClientConnection:void initiateRequest(io.undertow.client.ajp.AjpClientExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection:void sendRequest(io.undertow.client.ClientRequest,io.undertow.client.ClientCallback)",
            "io.undertow.client.ajp.AjpClientConnection:void requestDone()"
        ]
    },
    "io.undertow.client.http.HttpClientProvider$3:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection$3:void handleEvent(io.undertow.protocols.ajp.AjpClientChannel)",
            "io.undertow.client.http.HttpClientConnection$5:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.client.http2.Http2ClientConnection$1:void handleEvent(io.undertow.protocols.http2.Http2Channel)",
            "io.undertow.client.ALPNClientSelector$2:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ALPNClientSelector$2:void handleSelected(java.lang.String)",
            "io.undertow.client.ALPNClientSelector:void runAlpn(org.xnio.ssl.SslConnection,org.xnio.ChannelListener,io.undertow.client.ClientCallback,io.undertow.client.ALPNClientSelector$ALPNProtocol[])",
            "io.undertow.protocols.ajp.AjpClientResponseStreamSourceChannel:void complete()",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void handleFlushComplete(boolean)",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void channelForciblyClosed()",
            "io.undertow.protocols.http2.Http2StreamSourceChannel:void channelForciblyClosed()",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$RequestExchangeListener:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void close()"
        ]
    },
    "io.undertow.client.http.HttpClientConnection:void initiateRequest(io.undertow.client.http.HttpClientExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpClientConnection:void sendRequest(io.undertow.client.ClientRequest,io.undertow.client.ClientCallback)",
            "io.undertow.client.http.HttpClientConnection:void exchangeDone()"
        ]
    },
    "io.undertow.client.http2.Http2ClientProvider$4:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection$3:void handleEvent(io.undertow.protocols.ajp.AjpClientChannel)",
            "io.undertow.client.http.HttpClientConnection$5:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.client.http2.Http2ClientConnection$1:void handleEvent(io.undertow.protocols.http2.Http2Channel)",
            "io.undertow.client.ALPNClientSelector$2:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ALPNClientSelector$2:void handleSelected(java.lang.String)",
            "io.undertow.client.ALPNClientSelector:void runAlpn(org.xnio.ssl.SslConnection,org.xnio.ChannelListener,io.undertow.client.ClientCallback,io.undertow.client.ALPNClientSelector$ALPNProtocol[])",
            "io.undertow.protocols.ajp.AjpClientResponseStreamSourceChannel:void complete()",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void handleFlushComplete(boolean)",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void channelForciblyClosed()",
            "io.undertow.protocols.http2.Http2StreamSourceChannel:void channelForciblyClosed()",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$RequestExchangeListener:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void close()"
        ]
    },
    "io.undertow.client.http2.Http2PriorKnowledgeClientProvider:void access$000(io.undertow.client.http2.Http2PriorKnowledgeClientProvider,org.xnio.StreamConnection,io.undertow.client.ClientCallback,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http2.Http2PriorKnowledgeClientProvider$2:void handleEvent(org.xnio.StreamConnection)"
        ]
    },
    "io.undertow.client.http2.Http2PriorKnowledgeClientProvider$5:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection$3:void handleEvent(io.undertow.protocols.ajp.AjpClientChannel)",
            "io.undertow.client.http.HttpClientConnection$5:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.client.http2.Http2ClientConnection$1:void handleEvent(io.undertow.protocols.http2.Http2Channel)",
            "io.undertow.client.ALPNClientSelector$2:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ALPNClientSelector$2:void handleSelected(java.lang.String)",
            "io.undertow.client.ALPNClientSelector:void runAlpn(org.xnio.ssl.SslConnection,org.xnio.ChannelListener,io.undertow.client.ClientCallback,io.undertow.client.ALPNClientSelector$ALPNProtocol[])",
            "io.undertow.protocols.ajp.AjpClientResponseStreamSourceChannel:void complete()",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void handleFlushComplete(boolean)",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void channelForciblyClosed()",
            "io.undertow.protocols.http2.Http2StreamSourceChannel:void channelForciblyClosed()",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$RequestExchangeListener:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void close()"
        ]
    },
    "io.undertow.client.http2.Http2ClearClientProvider$Http2ClearOpenListener:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection$3:void handleEvent(io.undertow.protocols.ajp.AjpClientChannel)",
            "io.undertow.client.http.HttpClientConnection$5:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.client.http2.Http2ClientConnection$1:void handleEvent(io.undertow.protocols.http2.Http2Channel)",
            "io.undertow.client.ALPNClientSelector$2:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ALPNClientSelector$2:void handleSelected(java.lang.String)",
            "io.undertow.client.ALPNClientSelector:void runAlpn(org.xnio.ssl.SslConnection,org.xnio.ChannelListener,io.undertow.client.ClientCallback,io.undertow.client.ALPNClientSelector$ALPNProtocol[])",
            "io.undertow.protocols.ajp.AjpClientResponseStreamSourceChannel:void complete()",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void handleFlushComplete(boolean)",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void channelForciblyClosed()",
            "io.undertow.protocols.http2.Http2StreamSourceChannel:void channelForciblyClosed()",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$RequestExchangeListener:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void close()"
        ]
    },
    "io.undertow.client.http.HttpClientConnection:void sendRequest(io.undertow.client.ClientRequest,io.undertow.client.ClientCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpClientConnection:void sendRequest(io.undertow.client.ClientRequest,io.undertow.client.ClientCallback)",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$HttpClientPingTask$1:void completed(io.undertow.client.ClientConnection)",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$ConnectionPoolPingTask:void run()",
            "io.undertow.server.handlers.proxy.ProxyHandler$ProxyAction:void run()",
            "io.undertow.websockets.client.WebSocketClient$ConnectionBuilder$1:void completed(io.undertow.client.ClientConnection)"
        ]
    },
    "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$HttpClientPingTask$1:void completed(io.undertow.client.ClientConnection)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$HttpClientPingTask$1:void completed(java.lang.Object)"
        ]
    },
    "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$ConnectionPoolPingTask:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.ssl.SslConduit$5:void run()",
            "io.undertow.protocols.ssl.SslConduit:void runReadListener(boolean)",
            "io.undertow.protocols.ssl.SslConduit:boolean handleHandshakeResult(javax.net.ssl.SSLEngineResult)",
            "io.undertow.protocols.ssl.SslConduit$2:void run()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$FrameReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$3:void run()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel:void runInIoThread(java.lang.Runnable)",
            "io.undertow.server.protocol.http.ALPNLimitingSSLEngine:void limitCiphers(java.util.List)",
            "io.undertow.server.protocol.ParseTimeoutUpdater:void run()",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:io.undertow.server.HttpServerExchange dispatch(java.util.concurrent.Executor,java.lang.Runnable)",
            "io.undertow.util.SameThreadExecutor:void execute(java.lang.Runnable)",
            "io.undertow.util.PipeliningExecutor$1:void run()"
        ]
    },
    "io.undertow.server.handlers.proxy.ProxyHandler$ProxyAction:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.ssl.SslConduit$5:void run()",
            "io.undertow.protocols.ssl.SslConduit:void runReadListener(boolean)",
            "io.undertow.protocols.ssl.SslConduit:boolean handleHandshakeResult(javax.net.ssl.SSLEngineResult)",
            "io.undertow.protocols.ssl.SslConduit$2:void run()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$FrameReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$3:void run()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel:void runInIoThread(java.lang.Runnable)",
            "io.undertow.server.protocol.http.ALPNLimitingSSLEngine:void limitCiphers(java.util.List)",
            "io.undertow.server.protocol.ParseTimeoutUpdater:void run()",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:io.undertow.server.HttpServerExchange dispatch(java.util.concurrent.Executor,java.lang.Runnable)",
            "io.undertow.util.SameThreadExecutor:void execute(java.lang.Runnable)",
            "io.undertow.util.PipeliningExecutor$1:void run()"
        ]
    },
    "io.undertow.websockets.client.WebSocketClient$ConnectionBuilder$1:void completed(io.undertow.client.ClientConnection)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.client.WebSocketClient$ConnectionBuilder$1:void completed(java.lang.Object)"
        ]
    },
    "io.undertow.server.protocol.http.HttpContinue:void sendContinueResponseBlocking(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.server.HttpServerExchange$DefaultBlockingHttpExchange:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.HttpServerExchange:io.undertow.server.HttpServerExchange endExchange()"
        ]
    },
    "io.undertow.util.FlexBase64$DecoderInputStream:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.http.HttpContinue:void sendContinueResponseBlocking(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$DefaultBlockingHttpExchange:void close()",
            "io.undertow.util.FlexBase64$DecoderInputStream:void close()",
            "io.undertow.Version:void <clinit>()"
        ]
    },
    "io.undertow.Version:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.accesslog.ExtendedAccessLogParser$ExtendedAccessLogHeaderGenerator:java.lang.String generateHeader()",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void <clinit>()",
            "io.undertow.Version:java.lang.String getVersionString()",
            "io.undertow.Version:java.lang.String getFullVersionString()",
            "io.undertow.Version:void <clinit>()"
        ]
    },
    "io.undertow.io.BlockingReceiverImpl$1:void error(io.undertow.server.HttpServerExchange,java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.AsyncReceiverImpl$2$2:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.io.AsyncReceiverImpl$4$2:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.io.AsyncReceiverImpl:void receiveFullString(io.undertow.io.Receiver$FullStringCallback,io.undertow.io.Receiver$ErrorCallback,java.nio.charset.Charset)",
            "io.undertow.io.AsyncReceiverImpl:void receivePartialString(io.undertow.io.Receiver$PartialStringCallback,io.undertow.io.Receiver$ErrorCallback,java.nio.charset.Charset)",
            "io.undertow.io.AsyncReceiverImpl:void receiveFullBytes(io.undertow.io.Receiver$FullBytesCallback,io.undertow.io.Receiver$ErrorCallback)",
            "io.undertow.io.AsyncReceiverImpl:void receivePartialBytes(io.undertow.io.Receiver$PartialBytesCallback,io.undertow.io.Receiver$ErrorCallback)",
            "io.undertow.io.AsyncReceiverImpl$2$3:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.io.BlockingReceiverImpl:void receiveFullString(io.undertow.io.Receiver$FullStringCallback,io.undertow.io.Receiver$ErrorCallback,java.nio.charset.Charset)",
            "io.undertow.io.BlockingReceiverImpl:void receivePartialString(io.undertow.io.Receiver$PartialStringCallback,io.undertow.io.Receiver$ErrorCallback,java.nio.charset.Charset)",
            "io.undertow.io.BlockingReceiverImpl:void receiveFullBytes(io.undertow.io.Receiver$FullBytesCallback,io.undertow.io.Receiver$ErrorCallback)",
            "io.undertow.io.BlockingReceiverImpl:void receivePartialBytes(io.undertow.io.Receiver$PartialBytesCallback,io.undertow.io.Receiver$ErrorCallback)",
            "io.undertow.io.AsyncReceiverImpl$5$3:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.io.AsyncReceiverImpl$3$3:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.io.AsyncReceiverImpl$4$3:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.io.DefaultIoCallback:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.AsyncSenderImpl:void invokeOnException(io.undertow.io.IoCallback,java.io.IOException)",
            "io.undertow.io.BlockingSenderImpl:void send(java.lang.String,io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:void send(java.lang.String,java.nio.charset.Charset,io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:void performTransfer(java.nio.channels.FileChannel,io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:void close(io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:boolean writeBuffer(java.nio.ByteBuffer[],io.undertow.io.IoCallback)",
            "io.undertow.server.handlers.resource.PathResource$1ServerTask:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)",
            "io.undertow.server.handlers.resource.URLResource$1ServerTask:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)",
            "io.undertow.server.handlers.resource.CachedResource$DereferenceCallback:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)",
            "io.undertow.server.handlers.resource.PathResource$1TransferTask$1:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)",
            "io.undertow.server.handlers.resource.PathResource$1BaseFileTask:boolean openFile()",
            "io.undertow.server.protocol.http.HttpContinue$4$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http.HttpContinue:void sendContinueResponse(io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)",
            "io.undertow.server.protocol.http.HttpContinue:void internalSendContinueResponse(io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.io.DefaultIoCallback$1:void onComplete(io.undertow.server.HttpServerExchange,io.undertow.io.Sender)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.AsyncSenderImpl:void send(java.nio.ByteBuffer,io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void send(java.lang.String,java.nio.charset.Charset,io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void close(io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void invokeOnComplete()",
            "io.undertow.io.AsyncSenderImpl$1:void handleEvent(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.io.BlockingSenderImpl:void invokeOnComplete(io.undertow.io.IoCallback)",
            "io.undertow.server.handlers.resource.PathResource$1ServerTask:void run()",
            "io.undertow.server.handlers.resource.URLResource$1ServerTask:void run()",
            "io.undertow.server.handlers.resource.CachedResource$DereferenceCallback:void onComplete(io.undertow.server.HttpServerExchange,io.undertow.io.Sender)",
            "io.undertow.server.handlers.resource.PathResource$1TransferTask$1:void onComplete(io.undertow.server.HttpServerExchange,io.undertow.io.Sender)",
            "io.undertow.server.protocol.http.HttpContinue$3$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http.HttpContinue:void internalSendContinueResponse(io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.io.DefaultIoCallback$1:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.AsyncSenderImpl:void invokeOnException(io.undertow.io.IoCallback,java.io.IOException)",
            "io.undertow.io.BlockingSenderImpl:void send(java.lang.String,io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:void send(java.lang.String,java.nio.charset.Charset,io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:void performTransfer(java.nio.channels.FileChannel,io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:void close(io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:boolean writeBuffer(java.nio.ByteBuffer[],io.undertow.io.IoCallback)",
            "io.undertow.server.handlers.resource.PathResource$1ServerTask:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)",
            "io.undertow.server.handlers.resource.URLResource$1ServerTask:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)",
            "io.undertow.server.handlers.resource.CachedResource$DereferenceCallback:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)",
            "io.undertow.server.handlers.resource.PathResource$1TransferTask$1:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)",
            "io.undertow.server.handlers.resource.PathResource$1BaseFileTask:boolean openFile()",
            "io.undertow.server.protocol.http.HttpContinue$4$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http.HttpContinue:void sendContinueResponse(io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)",
            "io.undertow.server.protocol.http.HttpContinue:void internalSendContinueResponse(io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.io.AsyncReceiverImpl$1:void error(io.undertow.server.HttpServerExchange,java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.AsyncReceiverImpl$2$2:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.io.AsyncReceiverImpl$4$2:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.io.AsyncReceiverImpl:void receiveFullString(io.undertow.io.Receiver$FullStringCallback,io.undertow.io.Receiver$ErrorCallback,java.nio.charset.Charset)",
            "io.undertow.io.AsyncReceiverImpl:void receivePartialString(io.undertow.io.Receiver$PartialStringCallback,io.undertow.io.Receiver$ErrorCallback,java.nio.charset.Charset)",
            "io.undertow.io.AsyncReceiverImpl:void receiveFullBytes(io.undertow.io.Receiver$FullBytesCallback,io.undertow.io.Receiver$ErrorCallback)",
            "io.undertow.io.AsyncReceiverImpl:void receivePartialBytes(io.undertow.io.Receiver$PartialBytesCallback,io.undertow.io.Receiver$ErrorCallback)",
            "io.undertow.io.AsyncReceiverImpl$2$3:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.io.BlockingReceiverImpl:void receiveFullString(io.undertow.io.Receiver$FullStringCallback,io.undertow.io.Receiver$ErrorCallback,java.nio.charset.Charset)",
            "io.undertow.io.BlockingReceiverImpl:void receivePartialString(io.undertow.io.Receiver$PartialStringCallback,io.undertow.io.Receiver$ErrorCallback,java.nio.charset.Charset)",
            "io.undertow.io.BlockingReceiverImpl:void receiveFullBytes(io.undertow.io.Receiver$FullBytesCallback,io.undertow.io.Receiver$ErrorCallback)",
            "io.undertow.io.BlockingReceiverImpl:void receivePartialBytes(io.undertow.io.Receiver$PartialBytesCallback,io.undertow.io.Receiver$ErrorCallback)",
            "io.undertow.io.AsyncReceiverImpl$5$3:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.io.AsyncReceiverImpl$3$3:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.io.AsyncReceiverImpl$4$3:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.security.impl.FormAuthenticationMechanism$1:boolean handleDefaultResponse(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.HttpServerExchange:io.undertow.server.HttpServerExchange endExchange()"
        ]
    },
    "io.undertow.security.impl.FormAuthenticationMechanism:io.undertow.security.api.AuthenticationMechanism$AuthenticationMechanismOutcome runFormAuth(io.undertow.server.HttpServerExchange,io.undertow.security.api.SecurityContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.security.impl.FormAuthenticationMechanism:io.undertow.security.api.AuthenticationMechanism$AuthenticationMechanismOutcome authenticate(io.undertow.server.HttpServerExchange,io.undertow.security.api.SecurityContext)"
        ]
    },
    "io.undertow.server.handlers.cache.ResponseCache:boolean tryServeResponse(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.cache.ResponseCache:boolean tryServeResponse()"
        ]
    },
    "io.undertow.server.handlers.cache.ResponseCache$DereferenceCallback:void onComplete(io.undertow.server.HttpServerExchange,io.undertow.io.Sender)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.AsyncSenderImpl:void send(java.nio.ByteBuffer,io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void send(java.lang.String,java.nio.charset.Charset,io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void close(io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void invokeOnComplete()",
            "io.undertow.io.AsyncSenderImpl$1:void handleEvent(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.io.BlockingSenderImpl:void invokeOnComplete(io.undertow.io.IoCallback)",
            "io.undertow.server.handlers.resource.PathResource$1ServerTask:void run()",
            "io.undertow.server.handlers.resource.URLResource$1ServerTask:void run()",
            "io.undertow.server.handlers.resource.CachedResource$DereferenceCallback:void onComplete(io.undertow.server.HttpServerExchange,io.undertow.io.Sender)",
            "io.undertow.server.handlers.resource.PathResource$1TransferTask$1:void onComplete(io.undertow.server.HttpServerExchange,io.undertow.io.Sender)",
            "io.undertow.server.protocol.http.HttpContinue$3$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http.HttpContinue:void internalSendContinueResponse(io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.server.handlers.cache.ResponseCache$DereferenceCallback:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.AsyncSenderImpl:void invokeOnException(io.undertow.io.IoCallback,java.io.IOException)",
            "io.undertow.io.BlockingSenderImpl:void send(java.lang.String,io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:void send(java.lang.String,java.nio.charset.Charset,io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:void performTransfer(java.nio.channels.FileChannel,io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:void close(io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:boolean writeBuffer(java.nio.ByteBuffer[],io.undertow.io.IoCallback)",
            "io.undertow.server.handlers.resource.PathResource$1ServerTask:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)",
            "io.undertow.server.handlers.resource.URLResource$1ServerTask:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)",
            "io.undertow.server.handlers.resource.CachedResource$DereferenceCallback:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)",
            "io.undertow.server.handlers.resource.PathResource$1TransferTask$1:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)",
            "io.undertow.server.handlers.resource.PathResource$1BaseFileTask:boolean openFile()",
            "io.undertow.server.protocol.http.HttpContinue$4$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http.HttpContinue:void sendContinueResponse(io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)",
            "io.undertow.server.protocol.http.HttpContinue:void internalSendContinueResponse(io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.server.handlers.error.FileErrorPageHandler$2:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.ssl.SslConduit$5:void run()",
            "io.undertow.protocols.ssl.SslConduit:void runReadListener(boolean)",
            "io.undertow.protocols.ssl.SslConduit:boolean handleHandshakeResult(javax.net.ssl.SSLEngineResult)",
            "io.undertow.protocols.ssl.SslConduit$2:void run()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$FrameReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$3:void run()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel:void runInIoThread(java.lang.Runnable)",
            "io.undertow.server.protocol.http.ALPNLimitingSSLEngine:void limitCiphers(java.util.List)",
            "io.undertow.server.protocol.ParseTimeoutUpdater:void run()",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:io.undertow.server.HttpServerExchange dispatch(java.util.concurrent.Executor,java.lang.Runnable)",
            "io.undertow.util.SameThreadExecutor:void execute(java.lang.Runnable)",
            "io.undertow.util.PipeliningExecutor$1:void run()"
        ]
    },
    "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void processOK(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void processConfig(io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler$RequestData)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void processNodeCommand(io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler$RequestData,io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler$MCMPAction)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void processAppCommand(io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler$RequestData,io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler$MCMPAction)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPWebManager:void processDomainCmd(io.undertow.server.HttpServerExchange,java.lang.String,io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler$MCMPAction)"
        ]
    },
    "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void processError(java.lang.String,java.lang.String,io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void processConfig(io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler$RequestData)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void processNodeCommand(io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler$RequestData,io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler$MCMPAction)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void processAppCommand(io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler$RequestData,io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler$MCMPAction)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void processStatus(io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler$RequestData)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void processPing(io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler$RequestData)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void processError(io.undertow.server.handlers.proxy.mod_cluster.MCMPErrorCode,io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.proxy.ProxyHandler$IoExceptionHandler:void handleException(java.nio.channels.Channel,java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.http2.Http2Channel:void sendPing(byte[],org.xnio.ChannelExceptionHandler,boolean)",
            "io.undertow.protocols.http2.Http2Channel:void sendGoAway(int,org.xnio.ChannelExceptionHandler)",
            "io.undertow.server.handlers.proxy.ProxyHandler$ProxyAction$1:void completed(io.undertow.client.ClientExchange)"
        ]
    },
    "io.undertow.server.handlers.proxy.ProxyHandler$ProxyClientHandler:void couldNotResolveBackend(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.mod_cluster.ModClusterProxyClient$1:void couldNotResolveBackend(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.ModClusterProxyClient:void getConnection(io.undertow.server.handlers.proxy.ProxyClient$ProxyTarget,io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.ProxyCallback,long,java.util.concurrent.TimeUnit)",
            "io.undertow.server.handlers.proxy.LoadBalancingProxyClient:void getConnection(io.undertow.server.handlers.proxy.ProxyClient$ProxyTarget,io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.ProxyCallback,long,java.util.concurrent.TimeUnit)",
            "io.undertow.server.handlers.proxy.ProxyHandler$ProxyClientHandler:void failed(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.LoadBalancingProxyClient$2:void couldNotResolveBackend(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.proxy.ProxyHandler$ProxyClientHandler:void cancel(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.ProxyHandler$ProxyClientHandler:void failed(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler$1:void run()"
        ]
    },
    "io.undertow.server.handlers.proxy.ProxyHandler:void handleFailure(io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.ProxyHandler$ProxyClientHandler,io.undertow.predicate.Predicate,java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.ProxyHandler$ProxyAction$1:void failed(java.io.IOException)",
            "io.undertow.server.handlers.proxy.ProxyHandler$HTTPTrailerChannelListener:void handleEvent(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.server.handlers.proxy.ProxyHandler$ResponseCallback:void failed(java.io.IOException)"
        ]
    },
    "io.undertow.server.handlers.proxy.ProxyHandler$ProxyAction$1$1$1:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.AsyncSenderImpl:void invokeOnException(io.undertow.io.IoCallback,java.io.IOException)",
            "io.undertow.io.BlockingSenderImpl:void send(java.lang.String,io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:void send(java.lang.String,java.nio.charset.Charset,io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:void performTransfer(java.nio.channels.FileChannel,io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:void close(io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:boolean writeBuffer(java.nio.ByteBuffer[],io.undertow.io.IoCallback)",
            "io.undertow.server.handlers.resource.PathResource$1ServerTask:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)",
            "io.undertow.server.handlers.resource.URLResource$1ServerTask:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)",
            "io.undertow.server.handlers.resource.CachedResource$DereferenceCallback:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)",
            "io.undertow.server.handlers.resource.PathResource$1TransferTask$1:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)",
            "io.undertow.server.handlers.resource.PathResource$1BaseFileTask:boolean openFile()",
            "io.undertow.server.protocol.http.HttpContinue$4$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http.HttpContinue:void sendContinueResponse(io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)",
            "io.undertow.server.protocol.http.HttpContinue:void internalSendContinueResponse(io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.server.handlers.resource.DirectoryUtils:boolean sendRequestedBlobs(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.resource.ResourceHandler:void serveResource(io.undertow.server.HttpServerExchange,boolean)"
        ]
    },
    "io.undertow.server.handlers.resource.DirectoryUtils:void renderDirectoryListing(io.undertow.server.HttpServerExchange,io.undertow.server.handlers.resource.Resource)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.resource.ResourceHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.RedirectHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.predicate.PredicatesHandler$DoneHandlerBuilder$1$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractSecurityContextAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.RequestEncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.resource.ResourceHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LearningPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathSeparatorHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConnectHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisableCacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StuckThreadDetectionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ExceptionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumpingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ResponseRateLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ByteRangeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LocalNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StoredResponseHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimit:void handleRequest(io.undertow.server.HttpServerExchange,io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConfiguredPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$3$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$2:void handle(io.undertow.server.HttpServerExchange,byte[],boolean)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleNoMatch(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.ConnectHandler$1$1:void notify(org.xnio.IoFuture,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.server.handlers.ConnectHandler$1$2:void handleEvent(org.xnio.StreamConnection)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.ConnectHandler$1$2:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.server.handlers.HttpContinueAcceptingHandler$1:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.AsyncSenderImpl:void invokeOnException(io.undertow.io.IoCallback,java.io.IOException)",
            "io.undertow.io.BlockingSenderImpl:void send(java.lang.String,io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:void send(java.lang.String,java.nio.charset.Charset,io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:void performTransfer(java.nio.channels.FileChannel,io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:void close(io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:boolean writeBuffer(java.nio.ByteBuffer[],io.undertow.io.IoCallback)",
            "io.undertow.server.handlers.resource.PathResource$1ServerTask:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)",
            "io.undertow.server.handlers.resource.URLResource$1ServerTask:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)",
            "io.undertow.server.handlers.resource.CachedResource$DereferenceCallback:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)",
            "io.undertow.server.handlers.resource.PathResource$1TransferTask$1:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)",
            "io.undertow.server.handlers.resource.PathResource$1BaseFileTask:boolean openFile()",
            "io.undertow.server.protocol.http.HttpContinue$4$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http.HttpContinue:void sendContinueResponse(io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)",
            "io.undertow.server.protocol.http.HttpContinue:void internalSendContinueResponse(io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.server.protocol.http.HttpContinue:void rejectExchange(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.protocol.http2.Http2UpgradeHandler$1:void handle(io.undertow.server.HttpServerExchange,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.AsyncReceiverImpl:void receiveFullBytes(io.undertow.io.Receiver$FullBytesCallback,io.undertow.io.Receiver$ErrorCallback)",
            "io.undertow.io.BlockingReceiverImpl:void receiveFullBytes(io.undertow.io.Receiver$FullBytesCallback,io.undertow.io.Receiver$ErrorCallback)",
            "io.undertow.io.AsyncReceiverImpl$4$1:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.AbstractServerConnection$CloseSetter:void handleEvent(org.xnio.StreamConnection)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.AbstractServerConnection$CloseSetter:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.websockets.spi.AsyncWebSocketHttpServerExchange:void endExchange()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.protocol.version07.Hybi07Handshake:void handshakeInternal(io.undertow.websockets.spi.WebSocketHttpExchange)",
            "io.undertow.websockets.core.protocol.version13.Hybi13Handshake:void handshakeInternal(io.undertow.websockets.spi.WebSocketHttpExchange)",
            "io.undertow.websockets.core.protocol.Handshake:void upgradeChannel(io.undertow.websockets.spi.WebSocketHttpExchange,byte[])",
            "io.undertow.websockets.core.protocol.Handshake$1:void notify(org.xnio.IoFuture,java.lang.Object)"
        ]
    },
    "io.undertow.websockets.spi.AsyncWebSocketHttpServerExchange:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.protocol.Handshake$1:void notify(org.xnio.IoFuture,java.lang.Object)"
        ]
    },
    "io.undertow.conduits.IdleTimeoutConduit:void doClose()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.IdleTimeoutConduit:void handleIdleTimeout()",
            "io.undertow.conduits.IdleTimeoutConduit$1:void run()"
        ]
    },
    "io.undertow.client.http.HttpRequestConduit:void truncateWrites()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.conduits.ChunkedStreamSinkConduit:void terminateWrites()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.ChunkedStreamSinkConduit:int writeFinal(java.nio.ByteBuffer)"
        ]
    },
    "io.undertow.conduits.DeflatingStreamSinkConduit:void truncateWrites()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpRequestConduit:void truncateWrites()",
            "io.undertow.conduits.ChunkedStreamSinkConduit:void terminateWrites()",
            "io.undertow.conduits.DeflatingStreamSinkConduit:void truncateWrites()",
            "io.undertow.conduits.AbstractFixedLengthStreamSinkConduit:void terminateWrites()",
            "io.undertow.conduits.IdleTimeoutConduit:void safeClose(org.xnio.conduits.StreamSinkConduit)",
            "io.undertow.conduits.IdleTimeoutConduit:void truncateWrites()",
            "io.undertow.conduits.FinishableStreamSinkConduit:void truncateWrites()",
            "io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit:void truncateWrites()",
            "io.undertow.server.protocol.http.HttpResponseConduit:void truncateWrites()"
        ]
    },
    "io.undertow.conduits.AbstractFixedLengthStreamSinkConduit:void terminateWrites()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.conduits.IdleTimeoutConduit:void safeClose(org.xnio.conduits.StreamSinkConduit)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.IdleTimeoutConduit:void doClose()"
        ]
    },
    "io.undertow.conduits.IdleTimeoutConduit:void truncateWrites()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpRequestConduit:void truncateWrites()",
            "io.undertow.conduits.ChunkedStreamSinkConduit:void terminateWrites()",
            "io.undertow.conduits.DeflatingStreamSinkConduit:void truncateWrites()",
            "io.undertow.conduits.AbstractFixedLengthStreamSinkConduit:void terminateWrites()",
            "io.undertow.conduits.IdleTimeoutConduit:void safeClose(org.xnio.conduits.StreamSinkConduit)",
            "io.undertow.conduits.IdleTimeoutConduit:void truncateWrites()",
            "io.undertow.conduits.FinishableStreamSinkConduit:void truncateWrites()",
            "io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit:void truncateWrites()",
            "io.undertow.server.protocol.http.HttpResponseConduit:void truncateWrites()"
        ]
    },
    "io.undertow.conduits.FinishableStreamSinkConduit:void truncateWrites()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit:void truncateWrites()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.server.protocol.http.HttpResponseConduit:void truncateWrites()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.http.HttpResponseConduit:int processWrite(int,java.lang.Object,int,int)"
        ]
    },
    "io.undertow.protocols.ssl.UndertowSslConnection:void closeAction()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.conduits.InflatingStreamSourceConduit:long read(java.nio.ByteBuffer[],int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.conduits.ChunkedStreamSourceConduit:long read(java.nio.ByteBuffer[],int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.server.protocol.ajp.AjpServerRequestConduit:int read(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.ajp.AjpServerRequestConduit:long read(java.nio.ByteBuffer[],int,int)"
        ]
    },
    "io.undertow.conduits.FixedLengthStreamSourceConduit:long read(java.nio.ByteBuffer[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.conduits.EmptyStreamSourceConduit:void resumeReads()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.EmptyStreamSourceConduit:void wakeupReads()",
            "io.undertow.conduits.IdleTimeoutConduit:void resumeReads()",
            "io.undertow.protocols.ssl.SslConduit:boolean handleHandshakeResult(javax.net.ssl.SSLEngineResult)"
        ]
    },
    "io.undertow.conduits.DeflatingStreamSinkConduit$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.DeflatingStreamSinkConduit:void queueWriteListener()",
            "io.undertow.protocols.ssl.SslConduit$5:void run()",
            "io.undertow.protocols.ssl.SslConduit:void runReadListener(boolean)",
            "io.undertow.protocols.ssl.SslConduit:boolean handleHandshakeResult(javax.net.ssl.SSLEngineResult)",
            "io.undertow.protocols.ssl.SslConduit$2:void run()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$FrameReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$3:void run()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel:void runInIoThread(java.lang.Runnable)",
            "io.undertow.server.protocol.http.ALPNLimitingSSLEngine:void limitCiphers(java.util.List)",
            "io.undertow.server.protocol.ParseTimeoutUpdater:void run()",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:io.undertow.server.HttpServerExchange dispatch(java.util.concurrent.Executor,java.lang.Runnable)",
            "io.undertow.util.SameThreadExecutor:void execute(java.lang.Runnable)",
            "io.undertow.util.PipeliningExecutor$1:void run()"
        ]
    },
    "io.undertow.protocols.ssl.SslConduit$3:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.ssl.SslConduit$5:void run()",
            "io.undertow.protocols.ssl.SslConduit:void runReadListener(boolean)",
            "io.undertow.protocols.ssl.SslConduit:void runWriteListener()",
            "io.undertow.protocols.ssl.SslConduit:boolean handleHandshakeResult(javax.net.ssl.SSLEngineResult)",
            "io.undertow.protocols.ssl.SslConduit$2:void run()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$FrameReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$3:void run()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel:void runInIoThread(java.lang.Runnable)",
            "io.undertow.server.protocol.http.ALPNLimitingSSLEngine:void limitCiphers(java.util.List)",
            "io.undertow.server.protocol.ParseTimeoutUpdater:void run()",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:io.undertow.server.HttpServerExchange dispatch(java.util.concurrent.Executor,java.lang.Runnable)",
            "io.undertow.util.SameThreadExecutor:void execute(java.lang.Runnable)",
            "io.undertow.util.PipeliningExecutor$1:void run()"
        ]
    },
    "io.undertow.protocols.ssl.SslConduit$4:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.ssl.SslConduit$5:void run()",
            "io.undertow.protocols.ssl.SslConduit:void runReadListener(boolean)",
            "io.undertow.protocols.ssl.SslConduit:void wakeupWrites()",
            "io.undertow.protocols.ssl.SslConduit:boolean handleHandshakeResult(javax.net.ssl.SSLEngineResult)",
            "io.undertow.protocols.ssl.SslConduit$2:void run()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$FrameReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$3:void run()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel:void runInIoThread(java.lang.Runnable)",
            "io.undertow.server.protocol.http.ALPNLimitingSSLEngine:void limitCiphers(java.util.List)",
            "io.undertow.server.protocol.ParseTimeoutUpdater:void run()",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:io.undertow.server.HttpServerExchange dispatch(java.util.concurrent.Executor,java.lang.Runnable)",
            "io.undertow.util.SameThreadExecutor:void execute(java.lang.Runnable)",
            "io.undertow.util.PipeliningExecutor$1:void run()"
        ]
    },
    "io.undertow.server.handlers.encoding.ContentEncodedResourceManager$FileConduitTarget:void wakeupWrites()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.HeadStreamSinkConduit:void wakeupWrites()",
            "io.undertow.conduits.RateLimitingStreamSinkConduit$1:void run()",
            "io.undertow.conduits.DeflatingStreamSinkConduit:void wakeupWrites()",
            "io.undertow.conduits.AbstractFixedLengthStreamSinkConduit:void wakeupWrites()",
            "io.undertow.conduits.IdleTimeoutConduit:void wakeupWrites()",
            "io.undertow.server.handlers.encoding.ContentEncodedResourceManager$FileConduitTarget:void resumeWrites()",
            "io.undertow.server.protocol.ajp.AjpServerResponseConduit:void wakeupWrites()"
        ]
    },
    "io.undertow.server.protocol.ajp.AjpServerResponseConduit$AjpServerWriteReadyHandler:void writeReady()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.DeflatingStreamSinkConduit$1:void run()",
            "io.undertow.conduits.IdleTimeoutConduit$1:void run()",
            "io.undertow.protocols.ssl.SslConduit$SslWriteReadyHandler:void writeReady()",
            "io.undertow.server.handlers.encoding.ContentEncodedResourceManager$FileConduitTarget:void wakeupWrites()",
            "io.undertow.server.protocol.ajp.AjpServerResponseConduit$AjpServerWriteReadyHandler:void writeReady()"
        ]
    },
    "io.undertow.client.http.HttpRequestConduit:long transferFrom(java.nio.channels.FileChannel,long,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.client.http.HttpRequestConduit:long transferFrom(org.xnio.channels.StreamSourceChannel,long,java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.client.http.HttpRequestConduit:long write(java.nio.ByteBuffer[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.conduits.ChunkedStreamSinkConduit:int write(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.ChunkedStreamSinkConduit:long write(java.nio.ByteBuffer[],int,int)"
        ]
    },
    "io.undertow.conduits.ChunkedStreamSinkConduit:int writeFinal(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.conduits.PreChunkedStreamSinkConduit:int write(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.PreChunkedStreamSinkConduit:long write(java.nio.ByteBuffer[],int,int)"
        ]
    },
    "io.undertow.conduits.PreChunkedStreamSinkConduit:int writeFinal(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit:long write(java.nio.ByteBuffer[],int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit:int write(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.server.protocol.http.HttpResponseConduit:long transferFrom(java.nio.channels.FileChannel,long,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.server.protocol.http.HttpResponseConduit:long write(java.nio.ByteBuffer[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.conduits.DeflatingStreamSinkConduit:int write(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpRequestConduit:int processWrite(int,java.nio.ByteBuffer)",
            "io.undertow.client.http.HttpRequestConduit:int write(java.nio.ByteBuffer)",
            "io.undertow.client.http.HttpRequestConduit:long write(java.nio.ByteBuffer[],int,int)",
            "io.undertow.conduits.BytesSentStreamSinkConduit:int write(java.nio.ByteBuffer)",
            "io.undertow.conduits.ChunkedStreamSinkConduit:int doWrite(java.nio.ByteBuffer)",
            "io.undertow.conduits.ChunkedStreamSinkConduit:boolean flush()",
            "io.undertow.conduits.PreChunkedStreamSinkConduit:int doWrite(java.nio.ByteBuffer)",
            "io.undertow.conduits.DeflatingStreamSinkConduit:long write(java.nio.ByteBuffer[],int,int)",
            "io.undertow.conduits.AbstractFixedLengthStreamSinkConduit:int write(java.nio.ByteBuffer)",
            "io.undertow.conduits.IdleTimeoutConduit:int write(java.nio.ByteBuffer)",
            "io.undertow.protocols.ssl.SslConduit:long doWrap(java.nio.ByteBuffer[],int,int)",
            "io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit:boolean flushBuffer()",
            "io.undertow.server.protocol.http.HttpResponseConduit:int processWrite(int,java.lang.Object,int,int)",
            "io.undertow.server.protocol.http.HttpResponseConduit:int processStatefulWrite(int,java.lang.Object,int,int)",
            "io.undertow.server.protocol.http.HttpResponseConduit:boolean flushHeaderBuffer(java.nio.ByteBuffer,java.lang.String,io.undertow.util.HeaderValues,int,long,int)",
            "io.undertow.server.protocol.http.HttpResponseConduit:int write(java.nio.ByteBuffer)",
            "io.undertow.server.protocol.http.HttpResponseConduit:long write(java.nio.ByteBuffer[],int,int)"
        ]
    },
    "io.undertow.conduits.DeflatingStreamSinkConduit:long transferFrom(java.nio.channels.FileChannel,long,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpRequestConduit:long transferFrom(java.nio.channels.FileChannel,long,long)",
            "io.undertow.conduits.BytesSentStreamSinkConduit:long transferFrom(java.nio.channels.FileChannel,long,long)",
            "io.undertow.conduits.AbstractFixedLengthStreamSinkConduit:long transferFrom(java.nio.channels.FileChannel,long,long)",
            "io.undertow.conduits.IdleTimeoutConduit:long transferFrom(java.nio.channels.FileChannel,long,long)",
            "io.undertow.server.protocol.http.HttpResponseConduit:long transferFrom(java.nio.channels.FileChannel,long,long)"
        ]
    },
    "io.undertow.conduits.DeflatingStreamSinkConduit:long transferFrom(org.xnio.channels.StreamSourceChannel,long,java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpRequestConduit:long transferFrom(org.xnio.channels.StreamSourceChannel,long,java.nio.ByteBuffer)",
            "io.undertow.conduits.BytesSentStreamSinkConduit:long transferFrom(org.xnio.channels.StreamSourceChannel,long,java.nio.ByteBuffer)",
            "io.undertow.conduits.AbstractFixedLengthStreamSinkConduit:long transferFrom(org.xnio.channels.StreamSourceChannel,long,java.nio.ByteBuffer)",
            "io.undertow.conduits.IdleTimeoutConduit:long transferFrom(org.xnio.channels.StreamSourceChannel,long,java.nio.ByteBuffer)",
            "io.undertow.server.protocol.http.HttpResponseConduit:long transferFrom(org.xnio.channels.StreamSourceChannel,long,java.nio.ByteBuffer)"
        ]
    },
    "io.undertow.conduits.DeflatingStreamSinkConduit:void deflateData(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.DeflatingStreamSinkConduit:int write(java.nio.ByteBuffer)",
            "io.undertow.conduits.DeflatingStreamSinkConduit:boolean flush()"
        ]
    },
    "io.undertow.conduits.AbstractFramedStreamSinkConduit:int write(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.ajp.AjpServerResponseConduit:boolean doGetRequestBodyChunk(java.nio.ByteBuffer,io.undertow.server.protocol.ajp.AjpServerRequestConduit)"
        ]
    },
    "io.undertow.conduits.AbstractFramedStreamSinkConduit:long write(java.nio.ByteBuffer[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.ajp.AjpServerResponseConduit:int write(java.nio.ByteBuffer)"
        ]
    },
    "io.undertow.server.protocol.ajp.AjpServerResponseConduit:int write(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.ajp.AjpServerResponseConduit:long write(java.nio.ByteBuffer[],int,int)"
        ]
    },
    "io.undertow.server.protocol.ajp.AjpServerResponseConduit:boolean flush()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.server.protocol.ajp.AjpServerResponseConduit:boolean access$300(io.undertow.server.protocol.ajp.AjpServerResponseConduit)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.ajp.AjpServerResponseConduit$AjpServerWriteReadyHandler:void writeReady()"
        ]
    },
    "io.undertow.server.ConnectionSSLSessionInfo:void renegotiate(io.undertow.server.HttpServerExchange,org.xnio.SslClientAuthMode)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.security.impl.ClientCertAuthenticationMechanism:java.security.cert.Certificate[] getPeerCertificates(io.undertow.server.HttpServerExchange,io.undertow.server.SSLSessionInfo,io.undertow.security.api.SecurityContext)"
        ]
    },
    "io.undertow.server.ConnectionSSLSessionInfo:void renegotiateBufferRequest(io.undertow.server.HttpServerExchange,org.xnio.SslClientAuthMode)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.ConnectionSSLSessionInfo:void renegotiate(io.undertow.server.HttpServerExchange,org.xnio.SslClientAuthMode)"
        ]
    },
    "io.undertow.client.http.HttpClientConnection$ClientReadListener:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection$3:void handleEvent(io.undertow.protocols.ajp.AjpClientChannel)",
            "io.undertow.client.http.HttpClientConnection$5:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.client.http2.Http2ClientConnection$1:void handleEvent(io.undertow.protocols.http2.Http2Channel)",
            "io.undertow.client.ALPNClientSelector$2:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ALPNClientSelector$2:void handleSelected(java.lang.String)",
            "io.undertow.client.ALPNClientSelector:void runAlpn(org.xnio.ssl.SslConnection,org.xnio.ChannelListener,io.undertow.client.ClientCallback,io.undertow.client.ALPNClientSelector$ALPNProtocol[])",
            "io.undertow.protocols.ajp.AjpClientResponseStreamSourceChannel:void complete()",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void handleFlushComplete(boolean)",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void channelForciblyClosed()",
            "io.undertow.protocols.http2.Http2StreamSourceChannel:void channelForciblyClosed()",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$RequestExchangeListener:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void close()"
        ]
    },
    "io.undertow.io.AsyncReceiverImpl:void receiveFullString(io.undertow.io.Receiver$FullStringCallback,io.undertow.io.Receiver$ErrorCallback)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.io.AsyncReceiverImpl:void receiveFullString(io.undertow.io.Receiver$FullStringCallback)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.io.AsyncReceiverImpl:void receiveFullString(io.undertow.io.Receiver$FullStringCallback,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.io.AsyncReceiverImpl:void receivePartialString(io.undertow.io.Receiver$PartialStringCallback,io.undertow.io.Receiver$ErrorCallback)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.io.AsyncReceiverImpl:void receivePartialString(io.undertow.io.Receiver$PartialStringCallback)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.io.AsyncReceiverImpl:void receivePartialString(io.undertow.io.Receiver$PartialStringCallback,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.io.AsyncReceiverImpl:void receiveFullBytes(io.undertow.io.Receiver$FullBytesCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.http2.Http2UpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.HttpServerExchange:boolean runResumeReadWrite()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.proxy.ProxyHandler$ResponseCallback$1:void handleUpgrade(org.xnio.StreamConnection,io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http.HttpReadListener$2:void handleEvent(org.xnio.conduits.ConduitStreamSinkChannel)"
        ]
    },
    "io.undertow.server.handlers.proxy.ProxyHandler$ProxyAction$1$3:void handleEvent(org.xnio.channels.StreamSinkChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.ProxyHandler$ProxyAction$1$3:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.server.handlers.proxy.ProxyHandler$ResponseCallback:void completed(io.undertow.client.ClientExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.ProxyHandler$ResponseCallback:void completed(java.lang.Object)"
        ]
    },
    "io.undertow.server.handlers.ConnectHandler$1$2$1:void handleUpgrade(org.xnio.StreamConnection,io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http.HttpReadListener$2:void handleEvent(org.xnio.conduits.ConduitStreamSinkChannel)"
        ]
    },
    "io.undertow.websockets.core.WebSocketUtils:void initiateTransfer(org.xnio.channels.StreamSourceChannel,org.xnio.channels.StreamSinkChannel,org.xnio.ChannelListener,org.xnio.ChannelListener,org.xnio.ChannelExceptionHandler,org.xnio.ChannelExceptionHandler,io.undertow.connector.ByteBufferPool)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.WebSocketUtils:void echoFrame(io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.StreamSourceFrameChannel)"
        ]
    },
    "io.undertow.websockets.core.AbstractReceiveListener:void readBufferedText(io.undertow.websockets.core.StreamSourceFrameChannel,io.undertow.websockets.core.BufferedTextMessage)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.AbstractReceiveListener:void bufferFullMessage(io.undertow.websockets.core.StreamSourceFrameChannel)"
        ]
    },
    "io.undertow.websockets.core.AbstractReceiveListener:void readBufferedBinary(io.undertow.websockets.core.StreamSourceFrameChannel,boolean,io.undertow.websockets.core.BufferedBinaryMessage)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.AbstractReceiveListener:void bufferFullMessage(io.undertow.websockets.core.StreamSourceFrameChannel)"
        ]
    },
    "io.undertow.server.protocol.framed.AbstractFramedChannel$2:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection$3:void handleEvent(io.undertow.protocols.ajp.AjpClientChannel)",
            "io.undertow.client.http.HttpClientConnection$5:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.client.http2.Http2ClientConnection$1:void handleEvent(io.undertow.protocols.http2.Http2Channel)",
            "io.undertow.client.ALPNClientSelector$2:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ALPNClientSelector$2:void handleSelected(java.lang.String)",
            "io.undertow.client.ALPNClientSelector:void runAlpn(org.xnio.ssl.SslConnection,org.xnio.ChannelListener,io.undertow.client.ClientCallback,io.undertow.client.ALPNClientSelector$ALPNProtocol[])",
            "io.undertow.protocols.ajp.AjpClientResponseStreamSourceChannel:void complete()",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void handleFlushComplete(boolean)",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void channelForciblyClosed()",
            "io.undertow.protocols.http2.Http2StreamSourceChannel:void channelForciblyClosed()",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$RequestExchangeListener:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void close()"
        ]
    },
    "io.undertow.util.Transfer:void access$000(org.xnio.channels.StreamSourceChannel,org.xnio.channels.StreamSinkChannel,org.xnio.ChannelListener,org.xnio.ChannelListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.util.Transfer$TransferListener:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.protocols.ajp.AbstractAjpClientStreamSourceChannel:void <init>(io.undertow.protocols.ajp.AjpClientChannel,io.undertow.connector.PooledByteBuffer,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.ajp.AjpClientResponseStreamSourceChannel:void <init>(io.undertow.protocols.ajp.AjpClientChannel,io.undertow.util.HeaderMap,int,java.lang.String,io.undertow.connector.PooledByteBuffer,int)"
        ]
    },
    "io.undertow.protocols.http2.AbstractHttp2StreamSourceChannel:void <init>(io.undertow.protocols.http2.Http2Channel,io.undertow.connector.PooledByteBuffer,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.http2.Http2RstStreamStreamSourceChannel:void <init>(io.undertow.protocols.http2.Http2Channel,io.undertow.connector.PooledByteBuffer,int,int)",
            "io.undertow.protocols.http2.Http2StreamSourceChannel:void <init>(io.undertow.protocols.http2.Http2Channel,io.undertow.connector.PooledByteBuffer,long,io.undertow.util.HeaderMap,int)",
            "io.undertow.protocols.http2.Http2PushPromiseStreamSourceChannel:void <init>(io.undertow.protocols.http2.Http2Channel,io.undertow.connector.PooledByteBuffer,long,io.undertow.util.HeaderMap,int,int)",
            "io.undertow.protocols.http2.Http2GoAwayStreamSourceChannel:void <init>(io.undertow.protocols.http2.Http2Channel,io.undertow.connector.PooledByteBuffer,long,int,int)",
            "io.undertow.protocols.http2.Http2SettingsStreamSourceChannel:void <init>(io.undertow.protocols.http2.Http2Channel,io.undertow.connector.PooledByteBuffer,long,java.util.List)"
        ]
    },
    "io.undertow.websockets.core.StreamSourceFrameChannel:void <init>(io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketFrameType,int,boolean,io.undertow.connector.PooledByteBuffer,long,io.undertow.websockets.core.protocol.version07.Masker,io.undertow.websockets.core.function.ChannelFunction[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.protocol.version07.WebSocket07BinaryFrameSourceChannel:void <init>(io.undertow.websockets.core.WebSocketChannel,int,boolean,io.undertow.websockets.core.protocol.version07.Masker,io.undertow.connector.PooledByteBuffer,long)",
            "io.undertow.websockets.core.protocol.version07.WebSocket07BinaryFrameSourceChannel:void <init>(io.undertow.websockets.core.WebSocketChannel,int,boolean,io.undertow.connector.PooledByteBuffer,long)",
            "io.undertow.websockets.core.protocol.version07.WebSocket07TextFrameSourceChannel:void <init>(io.undertow.websockets.core.protocol.version07.WebSocket07Channel,int,boolean,io.undertow.websockets.core.protocol.version07.Masker,io.undertow.websockets.core.protocol.version07.UTF8Checker,io.undertow.connector.PooledByteBuffer,long)",
            "io.undertow.websockets.core.protocol.version07.WebSocket07TextFrameSourceChannel:void <init>(io.undertow.websockets.core.protocol.version07.WebSocket07Channel,int,boolean,io.undertow.websockets.core.protocol.version07.UTF8Checker,io.undertow.connector.PooledByteBuffer,long)",
            "io.undertow.websockets.core.protocol.version07.WebSocket07CloseFrameSourceChannel:void <init>(io.undertow.websockets.core.protocol.version07.WebSocket07Channel,int,io.undertow.websockets.core.protocol.version07.Masker,io.undertow.connector.PooledByteBuffer,long)",
            "io.undertow.websockets.core.protocol.version07.WebSocket07CloseFrameSourceChannel:void <init>(io.undertow.websockets.core.protocol.version07.WebSocket07Channel,int,io.undertow.connector.PooledByteBuffer,long)",
            "io.undertow.websockets.core.protocol.version07.WebSocket07PingFrameSourceChannel:void <init>(io.undertow.websockets.core.WebSocketChannel,int,io.undertow.websockets.core.protocol.version07.Masker,io.undertow.connector.PooledByteBuffer,long)",
            "io.undertow.websockets.core.protocol.version07.WebSocket07PingFrameSourceChannel:void <init>(io.undertow.websockets.core.WebSocketChannel,int,io.undertow.connector.PooledByteBuffer,long)",
            "io.undertow.websockets.core.protocol.version07.WebSocket07PongFrameSourceChannel:void <init>(io.undertow.websockets.core.WebSocketChannel,int,io.undertow.websockets.core.protocol.version07.Masker,io.undertow.connector.PooledByteBuffer,long)",
            "io.undertow.websockets.core.protocol.version07.WebSocket07PongFrameSourceChannel:void <init>(io.undertow.websockets.core.WebSocketChannel,int,io.undertow.connector.PooledByteBuffer,long)",
            "io.undertow.websockets.core.StreamSourceFrameChannel:void <init>(io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketFrameType,io.undertow.connector.PooledByteBuffer,long)"
        ]
    },
    "io.undertow.websockets.core.AbstractReceiveListener:void handleEvent(io.undertow.websockets.core.WebSocketChannel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.protocols.http2.Http2StreamSourceChannel:void rstStream(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.http2.AbstractHttp2StreamSourceChannel:void rstStream()",
            "io.undertow.protocols.http2.Http2Channel:io.undertow.protocols.http2.AbstractHttp2StreamSourceChannel createChannelImpl(io.undertow.server.protocol.framed.FrameHeaderData,io.undertow.connector.PooledByteBuffer)"
        ]
    },
    "io.undertow.protocols.http2.Http2Channel:void closeSubChannels()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.framed.AbstractFramedChannel:void close()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel:void markReadsBroken(java.lang.Throwable)",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$FrameCloseListener:void handleEvent(org.xnio.channels.CloseableChannel)"
        ]
    },
    "io.undertow.protocols.ajp.AjpClientChannel:void lastDataRead()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.framed.AbstractFramedChannel:io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel receive()"
        ]
    },
    "io.undertow.protocols.http2.Http2Channel:io.undertow.server.protocol.framed.FrameHeaderData parseFrame(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.framed.AbstractFramedChannel:io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel receive()"
        ]
    },
    "io.undertow.websockets.core.WebSocketChannel:void markReadsBroken(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.protocol.version07.WebSocket07Channel:void markReadsBroken(java.lang.Throwable)"
        ]
    },
    "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void chunkRequested(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.ajp.AjpClientChannel:io.undertow.protocols.ajp.AbstractAjpClientStreamSourceChannel createChannel(io.undertow.server.protocol.framed.FrameHeaderData,io.undertow.connector.PooledByteBuffer)"
        ]
    },
    "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void startDiscard()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.ajp.AjpClientChannel:void sourceDone()"
        ]
    },
    "io.undertow.server.protocol.framed.AbstractFramedStreamSinkChannel:void shutdownWrites()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.channels.DetachableStreamSinkChannel:void shutdownWrites()",
            "io.undertow.client.ajp.AjpClientConnection:void initiateRequest(io.undertow.client.ajp.AjpClientExchange)",
            "io.undertow.client.http2.Http2ClientConnection:void sendRequest(io.undertow.client.ClientRequest,io.undertow.client.ClientCallback)",
            "io.undertow.io.UndertowOutputStream:void close()",
            "io.undertow.io.AsyncSenderImpl:void close(io.undertow.io.IoCallback)",
            "io.undertow.protocols.http2.Http2Channel:void flushChannel(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.protocols.http2.Http2Channel:void sendPing(byte[],org.xnio.ChannelExceptionHandler,boolean)",
            "io.undertow.protocols.http2.Http2Channel:void sendGoAway(int,org.xnio.ChannelExceptionHandler)",
            "io.undertow.server.handlers.error.FileErrorPageHandler$2:void run()",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$HttpClientPingTask$1$1:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$ConnectionPoolPingTask$1:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler$HTTPTrailerChannelListener:void handleEvent(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.server.handlers.sse.ServerSentEventConnection:void close(java.io.IOException)",
            "io.undertow.server.handlers.sse.ServerSentEventConnection$5:void run()",
            "io.undertow.server.protocol.ajp.AjpReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.protocol.http.HttpContinue:void internalSendContinueResponse(io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)",
            "io.undertow.server.protocol.http.HttpContinue$2:boolean send()",
            "io.undertow.util.StringWriteChannelListener:void writeDone(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.websockets.core.WebSocketChannel:void sendClose()",
            "io.undertow.websockets.core.WebSocketUtils$2:void handleEvent(io.undertow.websockets.core.StreamSinkFrameChannel)",
            "io.undertow.websockets.core.WebSockets:void flushChannelAsync(io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback,io.undertow.websockets.core.StreamSinkFrameChannel,java.lang.Object,long)",
            "io.undertow.websockets.core.WebSockets:void sendBlockingInternal(io.undertow.connector.PooledByteBuffer,io.undertow.websockets.core.WebSocketFrameType,io.undertow.websockets.core.WebSocketChannel)",
            "io.undertow.websockets.core.BinaryOutputStream:void close()"
        ]
    },
    "io.undertow.server.protocol.framed.AbstractFramedStreamSinkChannel:boolean flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.channels.DetachableStreamSinkChannel:boolean flush()",
            "io.undertow.client.ajp.AjpClientConnection:void initiateRequest(io.undertow.client.ajp.AjpClientExchange)",
            "io.undertow.io.AsyncSenderImpl:void close(io.undertow.io.IoCallback)",
            "io.undertow.protocols.http2.Http2DataStreamSinkChannel:boolean flush()",
            "io.undertow.protocols.http2.Http2Channel:void flushChannel(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.protocols.http2.Http2Channel:void sendPing(byte[],org.xnio.ChannelExceptionHandler,boolean)",
            "io.undertow.protocols.http2.Http2Channel:void sendGoAway(int,org.xnio.ChannelExceptionHandler)",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$HttpClientPingTask$1$1:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$ConnectionPoolPingTask$1:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler$ProxyAction$1:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler$HTTPTrailerChannelListener:void handleEvent(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.server.handlers.sse.ServerSentEventConnection:void close(java.io.IOException)",
            "io.undertow.server.handlers.sse.ServerSentEventHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.sse.ServerSentEventConnection$SseWriteListener:void handleEvent(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.server.protocol.http.HttpContinue:void internalSendContinueResponse(io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)",
            "io.undertow.server.protocol.http.HttpContinue$2:boolean send()",
            "io.undertow.util.StringWriteChannelListener:void writeDone(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.websockets.core.WebSocketChannel:void sendClose()",
            "io.undertow.websockets.core.WebSocketUtils$2:void handleEvent(io.undertow.websockets.core.StreamSinkFrameChannel)",
            "io.undertow.websockets.core.WebSockets:void flushChannelAsync(io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback,io.undertow.websockets.core.StreamSinkFrameChannel,java.lang.Object,long)",
            "io.undertow.websockets.core.WebSockets:void sendBlockingInternal(io.undertow.connector.PooledByteBuffer,io.undertow.websockets.core.WebSocketFrameType,io.undertow.websockets.core.WebSocketChannel)",
            "io.undertow.websockets.core.BinaryOutputStream:void flush()"
        ]
    },
    "io.undertow.server.protocol.framed.AbstractFramedStreamSinkChannel:long write(java.nio.ByteBuffer[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.channels.DetachableStreamSinkChannel:long write(java.nio.ByteBuffer[],int,int)",
            "io.undertow.io.AsyncSenderImpl$3:void handleEvent(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSinkChannel:long write(java.nio.ByteBuffer[])"
        ]
    },
    "io.undertow.server.protocol.framed.AbstractFramedStreamSinkChannel:int write(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.channels.DetachableStreamSinkChannel:int write(java.nio.ByteBuffer)",
            "io.undertow.io.UndertowOutputStream:void writeBufferBlocking(boolean)",
            "io.undertow.io.AsyncSenderImpl:void send(java.nio.ByteBuffer,io.undertow.io.IoCallback)",
            "io.undertow.server.handlers.sse.ServerSentEventConnection$SseWriteListener:void handleEvent(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:long transferTo(long,java.nio.ByteBuffer,org.xnio.channels.StreamSinkChannel)",
            "io.undertow.server.HttpServerExchange$ReadDispatchChannel:long transferTo(long,java.nio.ByteBuffer,org.xnio.channels.StreamSinkChannel)",
            "io.undertow.util.Transfer:void initiateTransfer(org.xnio.channels.StreamSourceChannel,org.xnio.channels.StreamSinkChannel,org.xnio.ChannelListener,org.xnio.ChannelListener,org.xnio.ChannelExceptionHandler,org.xnio.ChannelExceptionHandler,io.undertow.connector.ByteBufferPool)",
            "io.undertow.util.StringWriteChannelListener:void setup(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.util.StringWriteChannelListener:void handleEvent(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.util.Transfer$TransferListener:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.protocols.http2.Http2Channel:io.undertow.protocols.http2.AbstractHttp2StreamSourceChannel createChannelImpl(io.undertow.server.protocol.framed.FrameHeaderData,io.undertow.connector.PooledByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.http2.Http2Channel:io.undertow.protocols.http2.AbstractHttp2StreamSourceChannel createChannel(io.undertow.server.protocol.framed.FrameHeaderData,io.undertow.connector.PooledByteBuffer)"
        ]
    },
    "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:io.undertow.server.protocol.framed.SendFrameHeader createFrameHeaderImpl()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:io.undertow.server.protocol.framed.SendFrameHeader generateSendFrameHeader()"
        ]
    },
    "io.undertow.protocols.http2.Http2StreamSinkChannel:void channelForciblyClosed()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.http2.Http2DataStreamSinkChannel:void channelForciblyClosed()",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSinkChannel:void close()"
        ]
    },
    "io.undertow.server.protocol.framed.AbstractFramedChannel:void markWritesBroken(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.ajp.AjpClientChannel:void lastDataRead()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$6:void handleException(org.xnio.channels.SuspendableWriteChannel,java.io.IOException)",
            "io.undertow.server.protocol.framed.AbstractFramedChannel:void flushSenders()",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSinkChannel:void channelForciblyClosed()"
        ]
    },
    "io.undertow.websockets.core.protocol.version07.WebSocket07FrameSinkChannel:io.undertow.connector.PooledByteBuffer preWriteTransform(io.undertow.connector.PooledByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.framed.AbstractFramedStreamSinkChannel:void preWrite()"
        ]
    },
    "io.undertow.websockets.core.WebSocketFramePriority:boolean insertFrame(io.undertow.websockets.core.StreamSinkFrameChannel,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.WebSocketFramePriority:void frameAdded(io.undertow.websockets.core.StreamSinkFrameChannel,java.util.List,java.util.Deque)",
            "io.undertow.websockets.core.WebSocketFramePriority:boolean insertFrame(io.undertow.server.protocol.framed.AbstractFramedStreamSinkChannel,java.util.List)"
        ]
    },
    "io.undertow.io.AsyncSenderImpl:void send(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.cache.ResponseCachingSender:void send(java.nio.ByteBuffer)",
            "io.undertow.server.handlers.resource.DirectoryUtils:boolean sendRequestedBlobs(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.cache.ResponseCachingSender:void send(java.nio.ByteBuffer,io.undertow.io.IoCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.cache.ResponseCachingSender:void send(java.nio.ByteBuffer,io.undertow.io.IoCallback)",
            "io.undertow.server.handlers.resource.PathResource$1ServerTask:void run()",
            "io.undertow.server.handlers.resource.URLResource$1ServerTask:void run()",
            "io.undertow.websockets.spi.AsyncWebSocketHttpServerExchange:org.xnio.IoFuture sendData(java.nio.ByteBuffer)"
        ]
    },
    "io.undertow.websockets.spi.AsyncWebSocketHttpServerExchange:org.xnio.IoFuture sendData(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.protocol.Handshake:void writePayload(io.undertow.websockets.spi.WebSocketHttpExchange,java.nio.ByteBuffer)"
        ]
    },
    "io.undertow.io.AsyncSenderImpl:void send(java.nio.ByteBuffer[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.cache.ResponseCachingSender:void send(java.nio.ByteBuffer[])"
        ]
    },
    "io.undertow.server.handlers.cache.ResponseCachingSender:void send(java.nio.ByteBuffer[],io.undertow.io.IoCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.cache.ResponseCache:boolean tryServeResponse(boolean)",
            "io.undertow.server.handlers.cache.ResponseCachingSender:void send(java.nio.ByteBuffer[],io.undertow.io.IoCallback)",
            "io.undertow.server.handlers.resource.CachedResource:void serve(io.undertow.io.Sender,io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)",
            "io.undertow.server.handlers.resource.CachedResource:void serveRange(io.undertow.io.Sender,io.undertow.server.HttpServerExchange,long,long,io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.server.handlers.resource.CachedResource:void serve(io.undertow.io.Sender,io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.resource.CachedResource:void serve(io.undertow.io.Sender,io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)",
            "io.undertow.server.handlers.resource.CachedResource:void serveRange(io.undertow.io.Sender,io.undertow.server.HttpServerExchange,long,long,io.undertow.io.IoCallback)",
            "io.undertow.server.handlers.resource.ResourceHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.resource.CachedResource:void serveRange(io.undertow.io.Sender,io.undertow.server.HttpServerExchange,long,long,io.undertow.io.IoCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.resource.CachedResource:void serveRange(io.undertow.io.Sender,io.undertow.server.HttpServerExchange,long,long,io.undertow.io.IoCallback)",
            "io.undertow.server.handlers.resource.ResourceHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.io.DefaultIoCallback:void onComplete(io.undertow.server.HttpServerExchange,io.undertow.io.Sender)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.AsyncSenderImpl:void send(java.nio.ByteBuffer,io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void send(java.lang.String,java.nio.charset.Charset,io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void close(io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void invokeOnComplete()",
            "io.undertow.io.AsyncSenderImpl$1:void handleEvent(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.io.BlockingSenderImpl:void invokeOnComplete(io.undertow.io.IoCallback)",
            "io.undertow.server.handlers.resource.PathResource$1ServerTask:void run()",
            "io.undertow.server.handlers.resource.URLResource$1ServerTask:void run()",
            "io.undertow.server.handlers.resource.CachedResource$DereferenceCallback:void onComplete(io.undertow.server.HttpServerExchange,io.undertow.io.Sender)",
            "io.undertow.server.handlers.resource.PathResource$1TransferTask$1:void onComplete(io.undertow.server.HttpServerExchange,io.undertow.io.Sender)",
            "io.undertow.server.protocol.http.HttpContinue$3$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http.HttpContinue:void internalSendContinueResponse(io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.io.AsyncSenderImpl:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.cache.ResponseCachingSender:void close(io.undertow.io.IoCallback)",
            "io.undertow.server.handlers.cache.ResponseCachingSender:void close()"
        ]
    },
    "io.undertow.io.AsyncSenderImpl:void access$400(io.undertow.io.AsyncSenderImpl)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.AsyncSenderImpl$3:void handleEvent(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.io.AsyncSenderImpl$TransferTask:boolean run(boolean)"
        ]
    },
    "io.undertow.io.AsyncSenderImpl$TransferTask:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.AsyncSenderImpl:void transferFrom(java.nio.channels.FileChannel,io.undertow.io.IoCallback)",
            "io.undertow.protocols.ssl.SslConduit$5:void run()",
            "io.undertow.protocols.ssl.SslConduit:void runReadListener(boolean)",
            "io.undertow.protocols.ssl.SslConduit:boolean handleHandshakeResult(javax.net.ssl.SSLEngineResult)",
            "io.undertow.protocols.ssl.SslConduit$2:void run()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$FrameReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$3:void run()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel:void runInIoThread(java.lang.Runnable)",
            "io.undertow.server.protocol.http.ALPNLimitingSSLEngine:void limitCiphers(java.util.List)",
            "io.undertow.server.protocol.ParseTimeoutUpdater:void run()",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:io.undertow.server.HttpServerExchange dispatch(java.util.concurrent.Executor,java.lang.Runnable)",
            "io.undertow.util.SameThreadExecutor:void execute(java.lang.Runnable)",
            "io.undertow.util.PipeliningExecutor$1:void run()"
        ]
    },
    "io.undertow.protocols.http2.Http2Channel:void flushChannelIgnoreFailure(org.xnio.channels.StreamSinkChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.http2.Http2Channel:void sendSettings()",
            "io.undertow.protocols.http2.Http2Channel:void sendSettingsAck()",
            "io.undertow.protocols.http2.Http2Channel:void sendPreface()",
            "io.undertow.protocols.http2.Http2Channel:void sendRstStream(int,int)"
        ]
    },
    "io.undertow.protocols.http2.Http2Channel:void sendUpdateWindowSize(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.http2.Http2StreamSourceChannel:void updateFlowControlWindow(int)",
            "io.undertow.protocols.http2.Http2Channel:void updateReceiveFlowControlWindow(int)"
        ]
    },
    "io.undertow.protocols.http2.Http2Channel:io.undertow.protocols.http2.Http2HeadersStreamSinkChannel sendPushPromise(int,io.undertow.util.HeaderMap,io.undertow.util.HeaderMap)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.http2.Http2ServerConnection:boolean pushResource(java.lang.String,io.undertow.util.HttpString,io.undertow.util.HeaderMap,io.undertow.server.HttpHandler)"
        ]
    },
    "io.undertow.protocols.http2.Http2Channel:void sendPing(byte[],org.xnio.ChannelExceptionHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.http2.Http2Channel:void sendPing(byte[])"
        ]
    },
    "io.undertow.protocols.http2.Http2Channel:void handleBrokenSourceChannel(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.framed.AbstractFramedChannel:void markReadsBroken(java.lang.Throwable)"
        ]
    },
    "io.undertow.protocols.http2.Http2Channel:void sendGoAway(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http2.Http2ClientConnection$Http2ReceiveListener:void handleEvent(io.undertow.protocols.http2.Http2Channel)",
            "io.undertow.client.http2.Http2ClientConnection:void close()",
            "io.undertow.protocols.http2.Http2Channel:io.undertow.protocols.http2.AbstractHttp2StreamSourceChannel createChannelImpl(io.undertow.server.protocol.framed.FrameHeaderData,io.undertow.connector.PooledByteBuffer)",
            "io.undertow.protocols.http2.Http2Channel:io.undertow.server.protocol.framed.FrameHeaderData parseFrame(java.nio.ByteBuffer)",
            "io.undertow.protocols.http2.Http2Channel:void lastDataRead()",
            "io.undertow.protocols.http2.Http2Channel:boolean updateSettings(java.util.List)",
            "io.undertow.protocols.http2.Http2Channel:void handleWindowUpdate(int,int)",
            "io.undertow.protocols.http2.Http2Channel:void removeStreamSink(int)",
            "io.undertow.protocols.http2.Http2Channel$1:void run()",
            "io.undertow.protocols.http2.Http2FrameHeaderParser:boolean handle(java.nio.ByteBuffer)",
            "io.undertow.protocols.http2.Http2FrameHeaderParser:io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel getExistingChannel()",
            "io.undertow.server.protocol.http2.Http2ReceiveListener:void handleRequests(io.undertow.protocols.http2.Http2Channel,io.undertow.protocols.http2.Http2StreamSourceChannel)"
        ]
    },
    "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$HttpClientPingTask$1$1:void completed(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientProvider:void handleConnected(org.xnio.StreamConnection,io.undertow.client.ClientCallback,java.net.URI,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)",
            "io.undertow.client.ajp.AjpClientExchange:void setResponse(io.undertow.client.ClientResponse)",
            "io.undertow.client.ajp.AjpClientExchange:void setResponseListener(io.undertow.client.ClientCallback)",
            "io.undertow.client.ajp.AjpClientExchange:void invokeReadReadyCallback(io.undertow.client.ClientExchange)",
            "io.undertow.client.http.HttpClientProvider:void handleConnected(org.xnio.StreamConnection,io.undertow.client.ClientCallback,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap,java.net.URI)",
            "io.undertow.client.http.HttpClientProvider$3:void handleEvent(org.xnio.ssl.SslConnection)",
            "io.undertow.client.http.HttpClientExchange:void setResponse(io.undertow.client.ClientResponse)",
            "io.undertow.client.http.HttpClientExchange:void setResponseListener(io.undertow.client.ClientCallback)",
            "io.undertow.client.http.HttpClientExchange:void invokeReadReadyCallback()",
            "io.undertow.client.http2.Http2ClientProvider$4:void handleEvent(org.xnio.ssl.SslConnection)",
            "io.undertow.client.http2.Http2PriorKnowledgeClientProvider:void handleConnected(org.xnio.StreamConnection,io.undertow.client.ClientCallback,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap,java.lang.String)",
            "io.undertow.client.http2.Http2PriorKnowledgeClientProvider$5:void handleEvent(org.xnio.conduits.ConduitStreamSinkChannel)",
            "io.undertow.client.http2.Http2ClearClientProvider$Http2ClearOpenListener:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.client.http2.Http2ClientExchange:void responseReady(io.undertow.protocols.http2.Http2StreamSourceChannel)",
            "io.undertow.client.http2.Http2ClientConnection:void sendRequest(io.undertow.client.ClientRequest,io.undertow.client.ClientCallback)"
        ]
    },
    "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$ConnectionPoolPingTask$1:void completed(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientProvider:void handleConnected(org.xnio.StreamConnection,io.undertow.client.ClientCallback,java.net.URI,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)",
            "io.undertow.client.ajp.AjpClientExchange:void setResponse(io.undertow.client.ClientResponse)",
            "io.undertow.client.ajp.AjpClientExchange:void setResponseListener(io.undertow.client.ClientCallback)",
            "io.undertow.client.ajp.AjpClientExchange:void invokeReadReadyCallback(io.undertow.client.ClientExchange)",
            "io.undertow.client.http.HttpClientProvider:void handleConnected(org.xnio.StreamConnection,io.undertow.client.ClientCallback,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap,java.net.URI)",
            "io.undertow.client.http.HttpClientProvider$3:void handleEvent(org.xnio.ssl.SslConnection)",
            "io.undertow.client.http.HttpClientExchange:void setResponse(io.undertow.client.ClientResponse)",
            "io.undertow.client.http.HttpClientExchange:void setResponseListener(io.undertow.client.ClientCallback)",
            "io.undertow.client.http.HttpClientExchange:void invokeReadReadyCallback()",
            "io.undertow.client.http2.Http2ClientProvider$4:void handleEvent(org.xnio.ssl.SslConnection)",
            "io.undertow.client.http2.Http2PriorKnowledgeClientProvider:void handleConnected(org.xnio.StreamConnection,io.undertow.client.ClientCallback,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap,java.lang.String)",
            "io.undertow.client.http2.Http2PriorKnowledgeClientProvider$5:void handleEvent(org.xnio.conduits.ConduitStreamSinkChannel)",
            "io.undertow.client.http2.Http2ClearClientProvider$Http2ClearOpenListener:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.client.http2.Http2ClientExchange:void responseReady(io.undertow.protocols.http2.Http2StreamSourceChannel)",
            "io.undertow.client.http2.Http2ClientConnection:void sendRequest(io.undertow.client.ClientRequest,io.undertow.client.ClientCallback)"
        ]
    },
    "io.undertow.server.handlers.proxy.ProxyHandler$ProxyAction$1:void completed(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientProvider:void handleConnected(org.xnio.StreamConnection,io.undertow.client.ClientCallback,java.net.URI,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)",
            "io.undertow.client.ajp.AjpClientExchange:void setResponse(io.undertow.client.ClientResponse)",
            "io.undertow.client.ajp.AjpClientExchange:void setResponseListener(io.undertow.client.ClientCallback)",
            "io.undertow.client.ajp.AjpClientExchange:void invokeReadReadyCallback(io.undertow.client.ClientExchange)",
            "io.undertow.client.http.HttpClientProvider:void handleConnected(org.xnio.StreamConnection,io.undertow.client.ClientCallback,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap,java.net.URI)",
            "io.undertow.client.http.HttpClientProvider$3:void handleEvent(org.xnio.ssl.SslConnection)",
            "io.undertow.client.http.HttpClientExchange:void setResponse(io.undertow.client.ClientResponse)",
            "io.undertow.client.http.HttpClientExchange:void setResponseListener(io.undertow.client.ClientCallback)",
            "io.undertow.client.http.HttpClientExchange:void invokeReadReadyCallback()",
            "io.undertow.client.http2.Http2ClientProvider$4:void handleEvent(org.xnio.ssl.SslConnection)",
            "io.undertow.client.http2.Http2PriorKnowledgeClientProvider:void handleConnected(org.xnio.StreamConnection,io.undertow.client.ClientCallback,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap,java.lang.String)",
            "io.undertow.client.http2.Http2PriorKnowledgeClientProvider$5:void handleEvent(org.xnio.conduits.ConduitStreamSinkChannel)",
            "io.undertow.client.http2.Http2ClearClientProvider$Http2ClearOpenListener:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.client.http2.Http2ClientExchange:void responseReady(io.undertow.protocols.http2.Http2StreamSourceChannel)",
            "io.undertow.client.http2.Http2ClientConnection:void sendRequest(io.undertow.client.ClientRequest,io.undertow.client.ClientCallback)"
        ]
    },
    "io.undertow.server.handlers.proxy.ProxyHandler$HTTPTrailerChannelListener:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection$3:void handleEvent(io.undertow.protocols.ajp.AjpClientChannel)",
            "io.undertow.client.http.HttpClientConnection$5:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.client.http2.Http2ClientConnection$1:void handleEvent(io.undertow.protocols.http2.Http2Channel)",
            "io.undertow.client.ALPNClientSelector$2:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ALPNClientSelector$2:void handleSelected(java.lang.String)",
            "io.undertow.client.ALPNClientSelector:void runAlpn(org.xnio.ssl.SslConnection,org.xnio.ChannelListener,io.undertow.client.ClientCallback,io.undertow.client.ALPNClientSelector$ALPNProtocol[])",
            "io.undertow.protocols.ajp.AjpClientResponseStreamSourceChannel:void complete()",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void handleFlushComplete(boolean)",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void channelForciblyClosed()",
            "io.undertow.protocols.http2.Http2StreamSourceChannel:void channelForciblyClosed()",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$RequestExchangeListener:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void close()"
        ]
    },
    "io.undertow.server.handlers.sse.ServerSentEventConnection:void access$500(io.undertow.server.handlers.sse.ServerSentEventConnection)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.sse.ServerSentEventConnection$3:void run()",
            "io.undertow.server.handlers.sse.ServerSentEventConnection$2:void run()",
            "io.undertow.server.handlers.sse.ServerSentEventConnection$SseWriteListener:void handleEvent(org.xnio.channels.StreamSinkChannel)"
        ]
    },
    "io.undertow.server.handlers.sse.ServerSentEventConnection:void close()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.server.handlers.sse.ServerSentEventConnection$4:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.ssl.SslConduit$5:void run()",
            "io.undertow.protocols.ssl.SslConduit:void runReadListener(boolean)",
            "io.undertow.protocols.ssl.SslConduit:boolean handleHandshakeResult(javax.net.ssl.SSLEngineResult)",
            "io.undertow.protocols.ssl.SslConduit$2:void run()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$FrameReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$3:void run()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel:void runInIoThread(java.lang.Runnable)",
            "io.undertow.server.protocol.http.ALPNLimitingSSLEngine:void limitCiphers(java.util.List)",
            "io.undertow.server.protocol.ParseTimeoutUpdater:void run()",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:io.undertow.server.HttpServerExchange dispatch(java.util.concurrent.Executor,java.lang.Runnable)",
            "io.undertow.util.SameThreadExecutor:void execute(java.lang.Runnable)",
            "io.undertow.util.PipeliningExecutor$1:void run()"
        ]
    },
    "io.undertow.server.handlers.sse.ServerSentEventConnection$3:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.ssl.SslConduit$5:void run()",
            "io.undertow.protocols.ssl.SslConduit:void runReadListener(boolean)",
            "io.undertow.protocols.ssl.SslConduit:boolean handleHandshakeResult(javax.net.ssl.SSLEngineResult)",
            "io.undertow.protocols.ssl.SslConduit$2:void run()",
            "io.undertow.server.handlers.sse.ServerSentEventConnection:void send(java.lang.String,java.lang.String,java.lang.String,io.undertow.server.handlers.sse.ServerSentEventConnection$EventCallback)",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$FrameReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$3:void run()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel:void runInIoThread(java.lang.Runnable)",
            "io.undertow.server.protocol.http.ALPNLimitingSSLEngine:void limitCiphers(java.util.List)",
            "io.undertow.server.protocol.ParseTimeoutUpdater:void run()",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:io.undertow.server.HttpServerExchange dispatch(java.util.concurrent.Executor,java.lang.Runnable)",
            "io.undertow.util.SameThreadExecutor:void execute(java.lang.Runnable)",
            "io.undertow.util.PipeliningExecutor$1:void run()"
        ]
    },
    "io.undertow.server.handlers.sse.ServerSentEventConnection$2:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.ssl.SslConduit$5:void run()",
            "io.undertow.protocols.ssl.SslConduit:void runReadListener(boolean)",
            "io.undertow.protocols.ssl.SslConduit:boolean handleHandshakeResult(javax.net.ssl.SSLEngineResult)",
            "io.undertow.protocols.ssl.SslConduit$2:void run()",
            "io.undertow.server.handlers.sse.ServerSentEventConnection:void sendRetry(long,io.undertow.server.handlers.sse.ServerSentEventConnection$EventCallback)",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$FrameReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$3:void run()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel:void runInIoThread(java.lang.Runnable)",
            "io.undertow.server.protocol.http.ALPNLimitingSSLEngine:void limitCiphers(java.util.List)",
            "io.undertow.server.protocol.ParseTimeoutUpdater:void run()",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:io.undertow.server.HttpServerExchange dispatch(java.util.concurrent.Executor,java.lang.Runnable)",
            "io.undertow.util.SameThreadExecutor:void execute(java.lang.Runnable)",
            "io.undertow.util.PipeliningExecutor$1:void run()"
        ]
    },
    "io.undertow.server.handlers.sse.ServerSentEventConnection$SseWriteListener:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection$3:void handleEvent(io.undertow.protocols.ajp.AjpClientChannel)",
            "io.undertow.client.http.HttpClientConnection$5:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.client.http2.Http2ClientConnection$1:void handleEvent(io.undertow.protocols.http2.Http2Channel)",
            "io.undertow.client.ALPNClientSelector$2:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ALPNClientSelector$2:void handleSelected(java.lang.String)",
            "io.undertow.client.ALPNClientSelector:void runAlpn(org.xnio.ssl.SslConnection,org.xnio.ChannelListener,io.undertow.client.ClientCallback,io.undertow.client.ALPNClientSelector$ALPNProtocol[])",
            "io.undertow.protocols.ajp.AjpClientResponseStreamSourceChannel:void complete()",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void handleFlushComplete(boolean)",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void channelForciblyClosed()",
            "io.undertow.protocols.http2.Http2StreamSourceChannel:void channelForciblyClosed()",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$RequestExchangeListener:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void close()"
        ]
    },
    "io.undertow.server.protocol.http.HttpContinue:void sendContinueResponse(io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.ProxyHandler$ProxyAction$1$1:void handleContinue(io.undertow.client.ClientExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.HttpServerExchange:void closeAndFlushResponse()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.HttpServerExchange:io.undertow.server.HttpServerExchange endExchange()",
            "io.undertow.server.HttpServerExchange:void access$000(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.protocol.http.HttpReadListener:void sendBadRequestAndClose(org.xnio.StreamConnection,java.lang.Exception)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.http.HttpReadListener:void handleEventWithNoRunningRequest(org.xnio.conduits.ConduitStreamSourceChannel)",
            "io.undertow.server.protocol.http.HttpReadListener:boolean handleHttp2PriorKnowledge(io.undertow.connector.PooledByteBuffer,io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.util.StringWriteChannelListener:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection$3:void handleEvent(io.undertow.protocols.ajp.AjpClientChannel)",
            "io.undertow.client.http.HttpClientConnection$5:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.client.http2.Http2ClientConnection$1:void handleEvent(io.undertow.protocols.http2.Http2Channel)",
            "io.undertow.client.ALPNClientSelector$2:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ALPNClientSelector$2:void handleSelected(java.lang.String)",
            "io.undertow.client.ALPNClientSelector:void runAlpn(org.xnio.ssl.SslConnection,org.xnio.ChannelListener,io.undertow.client.ClientCallback,io.undertow.client.ALPNClientSelector$ALPNProtocol[])",
            "io.undertow.protocols.ajp.AjpClientResponseStreamSourceChannel:void complete()",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void handleFlushComplete(boolean)",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void channelForciblyClosed()",
            "io.undertow.protocols.http2.Http2StreamSourceChannel:void channelForciblyClosed()",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$RequestExchangeListener:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void close()"
        ]
    },
    "io.undertow.server.protocol.http.HttpReadListener$1:void writeDone(org.xnio.channels.StreamSinkChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.util.StringWriteChannelListener:void setup(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.util.StringWriteChannelListener:void handleEvent(org.xnio.channels.StreamSinkChannel)"
        ]
    },
    "io.undertow.websockets.core.WebSocketChannel:void lastDataRead()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.framed.AbstractFramedChannel:io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel receive()"
        ]
    },
    "io.undertow.websockets.core.WebSocketUtils$2:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection$3:void handleEvent(io.undertow.protocols.ajp.AjpClientChannel)",
            "io.undertow.client.http.HttpClientConnection$5:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.client.http2.Http2ClientConnection$1:void handleEvent(io.undertow.protocols.http2.Http2Channel)",
            "io.undertow.client.ALPNClientSelector$2:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ALPNClientSelector$2:void handleSelected(java.lang.String)",
            "io.undertow.client.ALPNClientSelector:void runAlpn(org.xnio.ssl.SslConnection,org.xnio.ChannelListener,io.undertow.client.ClientCallback,io.undertow.client.ALPNClientSelector$ALPNProtocol[])",
            "io.undertow.protocols.ajp.AjpClientResponseStreamSourceChannel:void complete()",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void handleFlushComplete(boolean)",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void channelForciblyClosed()",
            "io.undertow.protocols.http2.Http2StreamSourceChannel:void channelForciblyClosed()",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$RequestExchangeListener:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void close()"
        ]
    },
    "io.undertow.websockets.core.WebSockets:void sendInternal(io.undertow.connector.PooledByteBuffer,io.undertow.websockets.core.WebSocketFrameType,io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback,java.lang.Object,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.WebSockets:void sendText(io.undertow.connector.PooledByteBuffer,io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback)",
            "io.undertow.websockets.core.WebSockets:void sendText(io.undertow.connector.PooledByteBuffer,io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback,java.lang.Object)",
            "io.undertow.websockets.core.WebSockets:void sendText(io.undertow.connector.PooledByteBuffer,io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback,long)",
            "io.undertow.websockets.core.WebSockets:void sendText(io.undertow.connector.PooledByteBuffer,io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback,java.lang.Object,long)",
            "io.undertow.websockets.core.WebSockets:void sendPing(io.undertow.connector.PooledByteBuffer,io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback)",
            "io.undertow.websockets.core.WebSockets:void sendPing(io.undertow.connector.PooledByteBuffer,io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback,java.lang.Object)",
            "io.undertow.websockets.core.WebSockets:void sendPing(io.undertow.connector.PooledByteBuffer,io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback,long)",
            "io.undertow.websockets.core.WebSockets:void sendPing(io.undertow.connector.PooledByteBuffer,io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback,java.lang.Object,long)",
            "io.undertow.websockets.core.WebSockets:void sendPong(io.undertow.connector.PooledByteBuffer,io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback)",
            "io.undertow.websockets.core.WebSockets:void sendPong(io.undertow.connector.PooledByteBuffer,io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback,java.lang.Object)",
            "io.undertow.websockets.core.WebSockets:void sendPong(io.undertow.connector.PooledByteBuffer,io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback,long)",
            "io.undertow.websockets.core.WebSockets:void sendPong(io.undertow.connector.PooledByteBuffer,io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback,java.lang.Object,long)",
            "io.undertow.websockets.core.WebSockets:void sendBinary(io.undertow.connector.PooledByteBuffer,io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback)",
            "io.undertow.websockets.core.WebSockets:void sendBinary(io.undertow.connector.PooledByteBuffer,io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback,java.lang.Object)",
            "io.undertow.websockets.core.WebSockets:void sendBinary(io.undertow.connector.PooledByteBuffer,io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback,long)",
            "io.undertow.websockets.core.WebSockets:void sendBinary(io.undertow.connector.PooledByteBuffer,io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback,java.lang.Object,long)",
            "io.undertow.websockets.core.WebSockets:void sendInternal(java.nio.ByteBuffer,io.undertow.websockets.core.WebSocketFrameType,io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback,java.lang.Object,long)"
        ]
    },
    "io.undertow.server.handlers.proxy.mod_cluster.ModClusterProxyClient$1:void completed(io.undertow.server.HttpServerExchange,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.mod_cluster.ModClusterProxyClient$1:void completed(io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.ProxyConnection)",
            "io.undertow.server.handlers.proxy.mod_cluster.ModClusterProxyClient:void getConnection(io.undertow.server.handlers.proxy.ProxyClient$ProxyTarget,io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.ProxyCallback,long,java.util.concurrent.TimeUnit)",
            "io.undertow.server.handlers.proxy.LoadBalancingProxyClient:void getConnection(io.undertow.server.handlers.proxy.ProxyClient$ProxyTarget,io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.ProxyCallback,long,java.util.concurrent.TimeUnit)",
            "io.undertow.server.handlers.proxy.ProxyConnectionPool:void connectionReady(io.undertow.server.handlers.proxy.ProxyConnectionPool$ConnectionHolder,io.undertow.server.handlers.proxy.ProxyCallback,io.undertow.server.HttpServerExchange,boolean)",
            "io.undertow.server.handlers.proxy.SimpleProxyClientProvider:void getConnection(io.undertow.server.handlers.proxy.ProxyClient$ProxyTarget,io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.ProxyCallback,long,java.util.concurrent.TimeUnit)",
            "io.undertow.server.handlers.proxy.SimpleProxyClientProvider$ConnectNotifier:void completed(io.undertow.client.ClientConnection)",
            "io.undertow.server.handlers.proxy.LoadBalancingProxyClient$2:void completed(io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.ProxyConnection)"
        ]
    },
    "io.undertow.server.handlers.proxy.ProxyHandler$ProxyClientHandler:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.ssl.SslConduit$5:void run()",
            "io.undertow.protocols.ssl.SslConduit:void runReadListener(boolean)",
            "io.undertow.protocols.ssl.SslConduit:boolean handleHandshakeResult(javax.net.ssl.SSLEngineResult)",
            "io.undertow.protocols.ssl.SslConduit$2:void run()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$FrameReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$3:void run()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel:void runInIoThread(java.lang.Runnable)",
            "io.undertow.server.protocol.http.ALPNLimitingSSLEngine:void limitCiphers(java.util.List)",
            "io.undertow.server.protocol.ParseTimeoutUpdater:void run()",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:io.undertow.server.HttpServerExchange dispatch(java.util.concurrent.Executor,java.lang.Runnable)",
            "io.undertow.util.SameThreadExecutor:void execute(java.lang.Runnable)",
            "io.undertow.util.PipeliningExecutor$1:void run()"
        ]
    },
    "io.undertow.server.handlers.proxy.ProxyHandler$ProxyClientHandler:void failed(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.mod_cluster.ModClusterProxyClient$1:void failed(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.Context:void handleRequest(io.undertow.server.handlers.proxy.mod_cluster.ModClusterProxyTarget,io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.ProxyCallback,long,java.util.concurrent.TimeUnit,boolean)",
            "io.undertow.server.handlers.proxy.ProxyConnectionPool:void redistributeQueued(io.undertow.server.handlers.proxy.ProxyConnectionPool$HostThreadData)",
            "io.undertow.server.handlers.proxy.ProxyConnectionPool:void connectionReady(io.undertow.server.handlers.proxy.ProxyConnectionPool$ConnectionHolder,io.undertow.server.handlers.proxy.ProxyCallback,io.undertow.server.HttpServerExchange,boolean)",
            "io.undertow.server.handlers.proxy.ProxyConnectionPool$CallbackHolder:void run()",
            "io.undertow.server.handlers.proxy.ProxyConnectionPool$2:void failed(java.io.IOException)",
            "io.undertow.server.handlers.proxy.ProxyHandler$ProxyClientHandler:void queuedRequestFailed(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.SimpleProxyClientProvider$ConnectNotifier:void failed(java.io.IOException)",
            "io.undertow.server.handlers.proxy.LoadBalancingProxyClient$2:void failed(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleFailure(io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.ProxyHandler$ProxyClientHandler,io.undertow.predicate.Predicate,java.io.IOException)"
        ]
    },
    "io.undertow.server.handlers.proxy.ProxyConnectionPool:void returnConnection(io.undertow.server.handlers.proxy.ProxyConnectionPool$ConnectionHolder)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.ProxyConnectionPool:void connectionReady(io.undertow.server.handlers.proxy.ProxyConnectionPool$ConnectionHolder,io.undertow.server.handlers.proxy.ProxyCallback,io.undertow.server.HttpServerExchange,boolean)",
            "io.undertow.server.handlers.proxy.ProxyConnectionPool:void access$1500(io.undertow.server.handlers.proxy.ProxyConnectionPool,io.undertow.server.handlers.proxy.ProxyConnectionPool$ConnectionHolder)"
        ]
    },
    "io.undertow.server.handlers.proxy.ProxyConnectionPool:void connect(io.undertow.server.handlers.proxy.ProxyClient$ProxyTarget,io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.ProxyCallback,long,java.util.concurrent.TimeUnit,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$1:void run()",
            "io.undertow.server.handlers.proxy.mod_cluster.Context:void handleRequest(io.undertow.server.handlers.proxy.mod_cluster.ModClusterProxyTarget,io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.ProxyCallback,long,java.util.concurrent.TimeUnit,boolean)",
            "io.undertow.server.handlers.proxy.LoadBalancingProxyClient:void getConnection(io.undertow.server.handlers.proxy.ProxyClient$ProxyTarget,io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.ProxyCallback,long,java.util.concurrent.TimeUnit)"
        ]
    },
    "io.undertow.server.handlers.proxy.ProxyConnectionPool:void access$900(io.undertow.server.handlers.proxy.ProxyConnectionPool,io.undertow.server.handlers.proxy.ProxyConnectionPool$ConnectionHolder,io.undertow.server.handlers.proxy.ProxyCallback,io.undertow.server.HttpServerExchange,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.ProxyConnectionPool$2:void completed(io.undertow.client.ClientConnection)"
        ]
    },
    "io.undertow.server.handlers.proxy.SimpleProxyClientProvider$ConnectNotifier:void completed(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientProvider:void handleConnected(org.xnio.StreamConnection,io.undertow.client.ClientCallback,java.net.URI,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)",
            "io.undertow.client.ajp.AjpClientExchange:void setResponse(io.undertow.client.ClientResponse)",
            "io.undertow.client.ajp.AjpClientExchange:void setResponseListener(io.undertow.client.ClientCallback)",
            "io.undertow.client.ajp.AjpClientExchange:void invokeReadReadyCallback(io.undertow.client.ClientExchange)",
            "io.undertow.client.http.HttpClientProvider:void handleConnected(org.xnio.StreamConnection,io.undertow.client.ClientCallback,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap,java.net.URI)",
            "io.undertow.client.http.HttpClientProvider$3:void handleEvent(org.xnio.ssl.SslConnection)",
            "io.undertow.client.http.HttpClientExchange:void setResponse(io.undertow.client.ClientResponse)",
            "io.undertow.client.http.HttpClientExchange:void setResponseListener(io.undertow.client.ClientCallback)",
            "io.undertow.client.http.HttpClientExchange:void invokeReadReadyCallback()",
            "io.undertow.client.http2.Http2ClientProvider$4:void handleEvent(org.xnio.ssl.SslConnection)",
            "io.undertow.client.http2.Http2PriorKnowledgeClientProvider:void handleConnected(org.xnio.StreamConnection,io.undertow.client.ClientCallback,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap,java.lang.String)",
            "io.undertow.client.http2.Http2PriorKnowledgeClientProvider$5:void handleEvent(org.xnio.conduits.ConduitStreamSinkChannel)",
            "io.undertow.client.http2.Http2ClearClientProvider$Http2ClearOpenListener:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.client.http2.Http2ClientExchange:void responseReady(io.undertow.protocols.http2.Http2StreamSourceChannel)",
            "io.undertow.client.http2.Http2ClientConnection:void sendRequest(io.undertow.client.ClientRequest,io.undertow.client.ClientCallback)"
        ]
    },
    "io.undertow.server.handlers.proxy.LoadBalancingProxyClient$2:void completed(io.undertow.server.HttpServerExchange,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.mod_cluster.ModClusterProxyClient$1:void completed(io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.ProxyConnection)",
            "io.undertow.server.handlers.proxy.mod_cluster.ModClusterProxyClient:void getConnection(io.undertow.server.handlers.proxy.ProxyClient$ProxyTarget,io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.ProxyCallback,long,java.util.concurrent.TimeUnit)",
            "io.undertow.server.handlers.proxy.LoadBalancingProxyClient:void getConnection(io.undertow.server.handlers.proxy.ProxyClient$ProxyTarget,io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.ProxyCallback,long,java.util.concurrent.TimeUnit)",
            "io.undertow.server.handlers.proxy.ProxyConnectionPool:void connectionReady(io.undertow.server.handlers.proxy.ProxyConnectionPool$ConnectionHolder,io.undertow.server.handlers.proxy.ProxyCallback,io.undertow.server.HttpServerExchange,boolean)",
            "io.undertow.server.handlers.proxy.SimpleProxyClientProvider:void getConnection(io.undertow.server.handlers.proxy.ProxyClient$ProxyTarget,io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.ProxyCallback,long,java.util.concurrent.TimeUnit)",
            "io.undertow.server.handlers.proxy.SimpleProxyClientProvider$ConnectNotifier:void completed(io.undertow.client.ClientConnection)",
            "io.undertow.server.handlers.proxy.LoadBalancingProxyClient$2:void completed(io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.ProxyConnection)"
        ]
    },
    "io.undertow.server.handlers.error.FileErrorPageHandler$1:boolean handleDefaultResponse(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.HttpServerExchange:io.undertow.server.HttpServerExchange endExchange()"
        ]
    },
    "io.undertow.io.AsyncSenderImpl:void send(java.lang.String,io.undertow.io.IoCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.AsyncSenderImpl:void send(java.lang.String)",
            "io.undertow.server.handlers.cache.ResponseCachingSender:void send(java.lang.String,io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.io.AsyncSenderImpl:void send(java.lang.String,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.cache.ResponseCachingSender:void send(java.lang.String,java.nio.charset.Charset)"
        ]
    },
    "io.undertow.server.handlers.cache.ResponseCachingSender:void send(java.lang.String,java.nio.charset.Charset,io.undertow.io.IoCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.cache.ResponseCachingSender:void send(java.lang.String,java.nio.charset.Charset,io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.io.AsyncSenderImpl$1:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection$3:void handleEvent(io.undertow.protocols.ajp.AjpClientChannel)",
            "io.undertow.client.http.HttpClientConnection$5:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.client.http2.Http2ClientConnection$1:void handleEvent(io.undertow.protocols.http2.Http2Channel)",
            "io.undertow.client.ALPNClientSelector$2:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ALPNClientSelector$2:void handleSelected(java.lang.String)",
            "io.undertow.client.ALPNClientSelector:void runAlpn(org.xnio.ssl.SslConnection,org.xnio.ChannelListener,io.undertow.client.ClientCallback,io.undertow.client.ALPNClientSelector$ALPNProtocol[])",
            "io.undertow.protocols.ajp.AjpClientResponseStreamSourceChannel:void complete()",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void handleFlushComplete(boolean)",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void channelForciblyClosed()",
            "io.undertow.protocols.http2.Http2StreamSourceChannel:void channelForciblyClosed()",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$RequestExchangeListener:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void close()"
        ]
    },
    "io.undertow.io.BlockingSenderImpl:void send(java.nio.ByteBuffer,io.undertow.io.IoCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.BlockingSenderImpl:void send(java.nio.ByteBuffer)",
            "io.undertow.server.handlers.cache.ResponseCachingSender:void send(java.nio.ByteBuffer,io.undertow.io.IoCallback)",
            "io.undertow.server.handlers.resource.PathResource$1ServerTask:void run()",
            "io.undertow.server.handlers.resource.URLResource$1ServerTask:void run()",
            "io.undertow.websockets.spi.AsyncWebSocketHttpServerExchange:org.xnio.IoFuture sendData(java.nio.ByteBuffer)"
        ]
    },
    "io.undertow.io.BlockingSenderImpl:void send(java.nio.ByteBuffer[],io.undertow.io.IoCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.BlockingSenderImpl:void send(java.nio.ByteBuffer[])",
            "io.undertow.server.handlers.cache.ResponseCache:boolean tryServeResponse(boolean)",
            "io.undertow.server.handlers.cache.ResponseCachingSender:void send(java.nio.ByteBuffer[],io.undertow.io.IoCallback)",
            "io.undertow.server.handlers.resource.CachedResource:void serve(io.undertow.io.Sender,io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)",
            "io.undertow.server.handlers.resource.CachedResource:void serveRange(io.undertow.io.Sender,io.undertow.server.HttpServerExchange,long,long,io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.io.BlockingSenderImpl:void send(java.lang.String,io.undertow.io.IoCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.BlockingSenderImpl:void send(java.lang.String)",
            "io.undertow.server.handlers.cache.ResponseCachingSender:void send(java.lang.String,io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.io.BlockingSenderImpl:void send(java.lang.String,java.nio.charset.Charset,io.undertow.io.IoCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.BlockingSenderImpl:void send(java.lang.String,java.nio.charset.Charset)",
            "io.undertow.server.handlers.cache.ResponseCachingSender:void send(java.lang.String,java.nio.charset.Charset,io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.io.BlockingSenderImpl:void transferFrom(java.nio.channels.FileChannel,io.undertow.io.IoCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.cache.ResponseCachingSender:void transferFrom(java.nio.channels.FileChannel,io.undertow.io.IoCallback)",
            "io.undertow.server.handlers.resource.PathResource$1TransferTask:void run()"
        ]
    },
    "io.undertow.io.BlockingSenderImpl:void close(io.undertow.io.IoCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.DefaultIoCallback:void onComplete(io.undertow.server.HttpServerExchange,io.undertow.io.Sender)"
        ]
    },
    "io.undertow.server.protocol.http.HttpContinue$3:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection$3:void handleEvent(io.undertow.protocols.ajp.AjpClientChannel)",
            "io.undertow.client.http.HttpClientConnection$5:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.client.http2.Http2ClientConnection$1:void handleEvent(io.undertow.protocols.http2.Http2Channel)",
            "io.undertow.client.ALPNClientSelector$2:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ALPNClientSelector$2:void handleSelected(java.lang.String)",
            "io.undertow.client.ALPNClientSelector:void runAlpn(org.xnio.ssl.SslConnection,org.xnio.ChannelListener,io.undertow.client.ClientCallback,io.undertow.client.ALPNClientSelector$ALPNProtocol[])",
            "io.undertow.protocols.ajp.AjpClientResponseStreamSourceChannel:void complete()",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void handleFlushComplete(boolean)",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void channelForciblyClosed()",
            "io.undertow.protocols.http2.Http2StreamSourceChannel:void channelForciblyClosed()",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$RequestExchangeListener:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void close()"
        ]
    },
    "io.undertow.server.handlers.error.FileErrorPageHandler$2$1:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()"
        ]
    },
    "io.undertow.server.handlers.form.MultiPartParserDefinition$1:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()"
        ]
    },
    "io.undertow.server.handlers.proxy.mod_cluster.Context$1:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()"
        ]
    },
    "io.undertow.server.handlers.proxy.ProxyHandler$2:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()"
        ]
    },
    "io.undertow.server.handlers.proxy.ProxyConnectionPool$3:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()"
        ]
    },
    "io.undertow.server.handlers.LearningPushHandler$PushCompletionListener:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()"
        ]
    },
    "io.undertow.server.handlers.GracefulShutdownHandler$GracefulShutdownListener:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()"
        ]
    },
    "io.undertow.server.handlers.MetricsHandler$2:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()"
        ]
    },
    "io.undertow.server.handlers.RequestDumpingHandler$1:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()"
        ]
    },
    "io.undertow.server.handlers.SSLHeaderHandler$1:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()"
        ]
    },
    "io.undertow.server.protocol.http2.Http2ServerConnection$2:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()"
        ]
    },
    "io.undertow.server.session.SessionAttachmentHandler$UpdateLastAccessTimeListener:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()"
        ]
    },
    "io.undertow.server.Connectors$1:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()"
        ]
    },
    "io.undertow.server.ConnectorStatisticsImpl$1:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()"
        ]
    },
    "io.undertow.server.HttpServerExchange:void terminateRequest()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.Connectors:void terminateRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.HttpServerExchange:io.undertow.server.HttpServerExchange terminateResponse()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.Connectors:void terminateResponse(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.HttpServerExchange:void access$100(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.HttpServerExchange$5:void handleException(java.nio.channels.Channel,java.io.IOException)",
            "io.undertow.server.HttpServerExchange$3:void handleException(org.xnio.channels.StreamSourceChannel,java.io.IOException)"
        ]
    },
    "io.undertow.server.protocol.http.AlpnOpenListener:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection$3:void handleEvent(io.undertow.protocols.ajp.AjpClientChannel)",
            "io.undertow.client.http.HttpClientConnection$5:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.client.http2.Http2ClientConnection$1:void handleEvent(io.undertow.protocols.http2.Http2Channel)",
            "io.undertow.client.ALPNClientSelector$2:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ALPNClientSelector$2:void handleSelected(java.lang.String)",
            "io.undertow.client.ALPNClientSelector:void runAlpn(org.xnio.ssl.SslConnection,org.xnio.ChannelListener,io.undertow.client.ClientCallback,io.undertow.client.ALPNClientSelector$ALPNProtocol[])",
            "io.undertow.protocols.ajp.AjpClientResponseStreamSourceChannel:void complete()",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void handleFlushComplete(boolean)",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void channelForciblyClosed()",
            "io.undertow.protocols.http2.Http2StreamSourceChannel:void channelForciblyClosed()",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$RequestExchangeListener:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void close()"
        ]
    },
    "io.undertow.client.http.HttpClientProvider$2:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection$3:void handleEvent(io.undertow.protocols.ajp.AjpClientChannel)",
            "io.undertow.client.http.HttpClientConnection$5:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.client.http2.Http2ClientConnection$1:void handleEvent(io.undertow.protocols.http2.Http2Channel)",
            "io.undertow.client.ALPNClientSelector$2:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ALPNClientSelector$2:void handleSelected(java.lang.String)",
            "io.undertow.client.ALPNClientSelector:void runAlpn(org.xnio.ssl.SslConnection,org.xnio.ChannelListener,io.undertow.client.ClientCallback,io.undertow.client.ALPNClientSelector$ALPNProtocol[])",
            "io.undertow.protocols.ajp.AjpClientResponseStreamSourceChannel:void complete()",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void handleFlushComplete(boolean)",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void channelForciblyClosed()",
            "io.undertow.protocols.http2.Http2StreamSourceChannel:void channelForciblyClosed()",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$RequestExchangeListener:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void close()"
        ]
    },
    "io.undertow.client.http2.Http2ClientProvider$3:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection$3:void handleEvent(io.undertow.protocols.ajp.AjpClientChannel)",
            "io.undertow.client.http.HttpClientConnection$5:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.client.http2.Http2ClientConnection$1:void handleEvent(io.undertow.protocols.http2.Http2Channel)",
            "io.undertow.client.ALPNClientSelector$2:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ALPNClientSelector$2:void handleSelected(java.lang.String)",
            "io.undertow.client.ALPNClientSelector:void runAlpn(org.xnio.ssl.SslConnection,org.xnio.ChannelListener,io.undertow.client.ClientCallback,io.undertow.client.ALPNClientSelector$ALPNProtocol[])",
            "io.undertow.protocols.ajp.AjpClientResponseStreamSourceChannel:void complete()",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void handleFlushComplete(boolean)",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void channelForciblyClosed()",
            "io.undertow.protocols.http2.Http2StreamSourceChannel:void channelForciblyClosed()",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$RequestExchangeListener:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void close()"
        ]
    },
    "io.undertow.server.HttpServerExchange$ReadDispatchChannel:long transferTo(long,long,java.nio.channels.FileChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.channels.DetachableStreamSourceChannel:long transferTo(long,long,java.nio.channels.FileChannel)",
            "io.undertow.websockets.core.function.ChannelFunctionStreamSourceChannel:long transferTo(long,long,java.nio.channels.FileChannel)"
        ]
    },
    "io.undertow.server.HttpServerExchange$ReadDispatchChannel:long transferTo(long,java.nio.ByteBuffer,org.xnio.channels.StreamSinkChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.channels.DetachableStreamSourceChannel:long transferTo(long,java.nio.ByteBuffer,org.xnio.channels.StreamSinkChannel)"
        ]
    },
    "io.undertow.server.HttpServerExchange$ReadDispatchChannel:long read(java.nio.ByteBuffer[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.channels.DetachableStreamSourceChannel:long read(java.nio.ByteBuffer[],int,int)",
            "io.undertow.server.HttpServerExchange$ReadDispatchChannel:long read(java.nio.ByteBuffer[])"
        ]
    },
    "io.undertow.channels.DetachableStreamSourceChannel:long read(java.nio.ByteBuffer[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.channels.DetachableStreamSourceChannel:long read(java.nio.ByteBuffer[])"
        ]
    },
    "io.undertow.protocols.http2.Http2StreamSourceChannel:long read(java.nio.ByteBuffer[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.channels.DetachableStreamSourceChannel:long read(java.nio.ByteBuffer[])"
        ]
    },
    "io.undertow.websockets.core.StreamSourceFrameChannel:long read(java.nio.ByteBuffer[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.channels.DetachableStreamSourceChannel:long read(java.nio.ByteBuffer[])"
        ]
    },
    "io.undertow.server.HttpServerExchange$ReadDispatchChannel:int read(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.channels.DetachableStreamSourceChannel:int read(java.nio.ByteBuffer)",
            "io.undertow.client.http.HttpClientConnection$ClientReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ALPNClientSelector$2:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.io.AsyncReceiverImpl$5:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.io.AsyncReceiverImpl$2:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.io.AsyncReceiverImpl$3:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.io.AsyncReceiverImpl:void receiveFullString(io.undertow.io.Receiver$FullStringCallback,io.undertow.io.Receiver$ErrorCallback,java.nio.charset.Charset)",
            "io.undertow.io.AsyncReceiverImpl:void receivePartialString(io.undertow.io.Receiver$PartialStringCallback,io.undertow.io.Receiver$ErrorCallback,java.nio.charset.Charset)",
            "io.undertow.io.AsyncReceiverImpl:void receiveFullBytes(io.undertow.io.Receiver$FullBytesCallback,io.undertow.io.Receiver$ErrorCallback)",
            "io.undertow.io.AsyncReceiverImpl:void receivePartialBytes(io.undertow.io.Receiver$PartialBytesCallback,io.undertow.io.Receiver$ErrorCallback)",
            "io.undertow.io.UndertowInputStream:void readIntoBufferNonBlocking()",
            "io.undertow.io.AsyncReceiverImpl$4:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler$NonBlockingParseTask:void run()",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void doParse(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.handlers.RequestBufferingHandler$1:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.ajp.AjpReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.util.Transfer:void initiateTransfer(org.xnio.channels.StreamSourceChannel,org.xnio.channels.StreamSinkChannel,org.xnio.ChannelListener,org.xnio.ChannelListener,org.xnio.ChannelExceptionHandler,org.xnio.ChannelExceptionHandler,io.undertow.connector.ByteBufferPool)",
            "io.undertow.util.StringReadChannelListener:void setup(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.util.StringReadChannelListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.util.Transfer$TransferListener:void handleEvent(java.nio.channels.Channel)",
            "io.undertow.websockets.core.function.ChannelFunctionStreamSourceChannel:int read(java.nio.ByteBuffer)",
            "io.undertow.websockets.spi.AsyncWebSocketHttpServerExchange:org.xnio.IoFuture readRequestData()",
            "io.undertow.websockets.spi.AsyncWebSocketHttpServerExchange$2:void handleEvent(org.xnio.channels.StreamSourceChannel)"
        ]
    },
    "io.undertow.io.UndertowInputStream:int available()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:io.undertow.server.handlers.form.FormData parseBlocking()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.security.impl.FormAuthenticationMechanism:io.undertow.security.api.AuthenticationMechanism$AuthenticationMechanismOutcome runFormAuth(io.undertow.server.HttpServerExchange,io.undertow.security.api.SecurityContext)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler$RequestData parseFormData(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.websockets.core.function.ChannelFunctionStreamSourceChannel:long read(java.nio.ByteBuffer[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.channels.DetachableStreamSourceChannel:long read(java.nio.ByteBuffer[],int,int)"
        ]
    },
    "io.undertow.websockets.core.function.ChannelFunctionStreamSourceChannel:long read(java.nio.ByteBuffer[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.channels.DetachableStreamSourceChannel:long read(java.nio.ByteBuffer[])"
        ]
    },
    "io.undertow.websockets.core.BufferedTextMessage:void readBlocking(io.undertow.websockets.core.StreamSourceFrameChannel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.websockets.core.BufferedBinaryMessage$1:void handleEvent(io.undertow.websockets.core.StreamSourceFrameChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.BufferedBinaryMessage$1:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.websockets.core.BufferedBinaryMessage:void readBlocking(io.undertow.websockets.core.StreamSourceFrameChannel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.websockets.core.BufferedTextMessage$1:void handleEvent(io.undertow.websockets.core.StreamSourceFrameChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.BufferedTextMessage$1:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.websockets.spi.AsyncWebSocketHttpServerExchange$2:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection$3:void handleEvent(io.undertow.protocols.ajp.AjpClientChannel)",
            "io.undertow.client.http.HttpClientConnection$5:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.client.http2.Http2ClientConnection$1:void handleEvent(io.undertow.protocols.http2.Http2Channel)",
            "io.undertow.client.ALPNClientSelector$2:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ALPNClientSelector$2:void handleSelected(java.lang.String)",
            "io.undertow.client.ALPNClientSelector:void runAlpn(org.xnio.ssl.SslConnection,org.xnio.ChannelListener,io.undertow.client.ClientCallback,io.undertow.client.ALPNClientSelector$ALPNProtocol[])",
            "io.undertow.protocols.ajp.AjpClientResponseStreamSourceChannel:void complete()",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void handleFlushComplete(boolean)",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void channelForciblyClosed()",
            "io.undertow.protocols.http2.Http2StreamSourceChannel:void channelForciblyClosed()",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$RequestExchangeListener:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void close()"
        ]
    },
    "io.undertow.client.ajp.AjpClientProvider$3:void handleEvent(org.xnio.StreamConnection)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientProvider$3:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.client.ajp.AjpClientProvider$1:void handleEvent(org.xnio.StreamConnection)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientProvider$1:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.client.ajp.AjpClientConnection$ClientReceiveListener:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection$3:void handleEvent(io.undertow.protocols.ajp.AjpClientChannel)",
            "io.undertow.client.http.HttpClientConnection$5:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.client.http2.Http2ClientConnection$1:void handleEvent(io.undertow.protocols.http2.Http2Channel)",
            "io.undertow.client.ALPNClientSelector$2:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ALPNClientSelector$2:void handleSelected(java.lang.String)",
            "io.undertow.client.ALPNClientSelector:void runAlpn(org.xnio.ssl.SslConnection,org.xnio.ChannelListener,io.undertow.client.ClientCallback,io.undertow.client.ALPNClientSelector$ALPNProtocol[])",
            "io.undertow.protocols.ajp.AjpClientResponseStreamSourceChannel:void complete()",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void handleFlushComplete(boolean)",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void channelForciblyClosed()",
            "io.undertow.protocols.http2.Http2StreamSourceChannel:void channelForciblyClosed()",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$RequestExchangeListener:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void close()"
        ]
    },
    "io.undertow.websockets.client.WebSocketClient$ConnectionBuilder$1$1:void completed(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientProvider:void handleConnected(org.xnio.StreamConnection,io.undertow.client.ClientCallback,java.net.URI,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)",
            "io.undertow.client.ajp.AjpClientExchange:void setResponse(io.undertow.client.ClientResponse)",
            "io.undertow.client.ajp.AjpClientExchange:void setResponseListener(io.undertow.client.ClientCallback)",
            "io.undertow.client.ajp.AjpClientExchange:void invokeReadReadyCallback(io.undertow.client.ClientExchange)",
            "io.undertow.client.http.HttpClientProvider:void handleConnected(org.xnio.StreamConnection,io.undertow.client.ClientCallback,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap,java.net.URI)",
            "io.undertow.client.http.HttpClientProvider$3:void handleEvent(org.xnio.ssl.SslConnection)",
            "io.undertow.client.http.HttpClientExchange:void setResponse(io.undertow.client.ClientResponse)",
            "io.undertow.client.http.HttpClientExchange:void setResponseListener(io.undertow.client.ClientCallback)",
            "io.undertow.client.http.HttpClientExchange:void invokeReadReadyCallback()",
            "io.undertow.client.http2.Http2ClientProvider$4:void handleEvent(org.xnio.ssl.SslConnection)",
            "io.undertow.client.http2.Http2PriorKnowledgeClientProvider:void handleConnected(org.xnio.StreamConnection,io.undertow.client.ClientCallback,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap,java.lang.String)",
            "io.undertow.client.http2.Http2PriorKnowledgeClientProvider$5:void handleEvent(org.xnio.conduits.ConduitStreamSinkChannel)",
            "io.undertow.client.http2.Http2ClearClientProvider$Http2ClearOpenListener:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.client.http2.Http2ClientExchange:void responseReady(io.undertow.protocols.http2.Http2StreamSourceChannel)",
            "io.undertow.client.http2.Http2ClientConnection:void sendRequest(io.undertow.client.ClientRequest,io.undertow.client.ClientCallback)"
        ]
    },
    "io.undertow.client.ajp.AjpClientConnection:void sendRequest(io.undertow.client.ClientRequest,io.undertow.client.ClientCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpClientConnection:void sendRequest(io.undertow.client.ClientRequest,io.undertow.client.ClientCallback)",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$HttpClientPingTask$1:void completed(io.undertow.client.ClientConnection)",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$ConnectionPoolPingTask:void run()",
            "io.undertow.server.handlers.proxy.ProxyHandler$ProxyAction:void run()",
            "io.undertow.websockets.client.WebSocketClient$ConnectionBuilder$1:void completed(io.undertow.client.ClientConnection)"
        ]
    },
    "io.undertow.client.ajp.AjpClientConnection:void requestDone()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientExchange:void terminateRequest()",
            "io.undertow.client.ajp.AjpClientExchange:void terminateResponse()"
        ]
    },
    "io.undertow.client.http.HttpClientConnection:void exchangeDone()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpClientExchange:void terminateRequest()",
            "io.undertow.client.http.HttpClientExchange:void terminateResponse()"
        ]
    },
    "io.undertow.client.http2.Http2PriorKnowledgeClientProvider$2:void handleEvent(org.xnio.StreamConnection)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http2.Http2PriorKnowledgeClientProvider$2:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$HttpClientPingTask$1:void completed(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientProvider:void handleConnected(org.xnio.StreamConnection,io.undertow.client.ClientCallback,java.net.URI,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)",
            "io.undertow.client.ajp.AjpClientExchange:void setResponse(io.undertow.client.ClientResponse)",
            "io.undertow.client.ajp.AjpClientExchange:void setResponseListener(io.undertow.client.ClientCallback)",
            "io.undertow.client.ajp.AjpClientExchange:void invokeReadReadyCallback(io.undertow.client.ClientExchange)",
            "io.undertow.client.http.HttpClientProvider:void handleConnected(org.xnio.StreamConnection,io.undertow.client.ClientCallback,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap,java.net.URI)",
            "io.undertow.client.http.HttpClientProvider$3:void handleEvent(org.xnio.ssl.SslConnection)",
            "io.undertow.client.http.HttpClientExchange:void setResponse(io.undertow.client.ClientResponse)",
            "io.undertow.client.http.HttpClientExchange:void setResponseListener(io.undertow.client.ClientCallback)",
            "io.undertow.client.http.HttpClientExchange:void invokeReadReadyCallback()",
            "io.undertow.client.http2.Http2ClientProvider$4:void handleEvent(org.xnio.ssl.SslConnection)",
            "io.undertow.client.http2.Http2PriorKnowledgeClientProvider:void handleConnected(org.xnio.StreamConnection,io.undertow.client.ClientCallback,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap,java.lang.String)",
            "io.undertow.client.http2.Http2PriorKnowledgeClientProvider$5:void handleEvent(org.xnio.conduits.ConduitStreamSinkChannel)",
            "io.undertow.client.http2.Http2ClearClientProvider$Http2ClearOpenListener:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.client.http2.Http2ClientExchange:void responseReady(io.undertow.protocols.http2.Http2StreamSourceChannel)",
            "io.undertow.client.http2.Http2ClientConnection:void sendRequest(io.undertow.client.ClientRequest,io.undertow.client.ClientCallback)"
        ]
    },
    "io.undertow.websockets.client.WebSocketClient$ConnectionBuilder$1:void completed(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientProvider:void handleConnected(org.xnio.StreamConnection,io.undertow.client.ClientCallback,java.net.URI,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)",
            "io.undertow.client.ajp.AjpClientExchange:void setResponse(io.undertow.client.ClientResponse)",
            "io.undertow.client.ajp.AjpClientExchange:void setResponseListener(io.undertow.client.ClientCallback)",
            "io.undertow.client.ajp.AjpClientExchange:void invokeReadReadyCallback(io.undertow.client.ClientExchange)",
            "io.undertow.client.http.HttpClientProvider:void handleConnected(org.xnio.StreamConnection,io.undertow.client.ClientCallback,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap,java.net.URI)",
            "io.undertow.client.http.HttpClientProvider$3:void handleEvent(org.xnio.ssl.SslConnection)",
            "io.undertow.client.http.HttpClientExchange:void setResponse(io.undertow.client.ClientResponse)",
            "io.undertow.client.http.HttpClientExchange:void setResponseListener(io.undertow.client.ClientCallback)",
            "io.undertow.client.http.HttpClientExchange:void invokeReadReadyCallback()",
            "io.undertow.client.http2.Http2ClientProvider$4:void handleEvent(org.xnio.ssl.SslConnection)",
            "io.undertow.client.http2.Http2PriorKnowledgeClientProvider:void handleConnected(org.xnio.StreamConnection,io.undertow.client.ClientCallback,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap,java.lang.String)",
            "io.undertow.client.http2.Http2PriorKnowledgeClientProvider$5:void handleEvent(org.xnio.conduits.ConduitStreamSinkChannel)",
            "io.undertow.client.http2.Http2ClearClientProvider$Http2ClearOpenListener:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.client.http2.Http2ClientExchange:void responseReady(io.undertow.protocols.http2.Http2StreamSourceChannel)",
            "io.undertow.client.http2.Http2ClientConnection:void sendRequest(io.undertow.client.ClientRequest,io.undertow.client.ClientCallback)"
        ]
    },
    "io.undertow.server.handlers.accesslog.ExtendedAccessLogParser$ExtendedAccessLogHeaderGenerator:java.lang.String generateHeader()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.accesslog.DefaultAccessLogReceiver:void writeMessage(java.util.List)"
        ]
    },
    "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPConfig:io.undertow.server.HttpHandler create(io.undertow.server.handlers.proxy.mod_cluster.ModCluster,io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler$1:void completed()",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler$1:void failed()",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:boolean handlesMethod(io.undertow.util.HttpString)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void processConfig(io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler$RequestData)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void processNodeCommand(io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler$RequestData,io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler$MCMPAction)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void processAppCommand(io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler$RequestData,io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler$MCMPAction)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void processStatus(io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler$RequestData)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void processPing(io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler$RequestData)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void processInfo(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void processDump(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void processError(io.undertow.server.handlers.proxy.mod_cluster.MCMPErrorCode,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void access$100(java.lang.String)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void <clinit>()",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler$RequestData:void add(io.undertow.util.HttpString,java.util.Deque)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler$RequestData:void addValues(io.undertow.util.HttpString,java.util.Deque)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler$RequestData:void add(io.undertow.util.HttpString,io.undertow.server.handlers.form.FormData$FormValue)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler$3:void completed()",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler$3:void failed()",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler$2:void completed()",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler$2:void failed()"
        ]
    },
    "io.undertow.Version:java.lang.String getVersionString()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void <clinit>()"
        ]
    },
    "io.undertow.Version:java.lang.String getFullVersionString()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.accesslog.ExtendedAccessLogParser$ExtendedAccessLogHeaderGenerator:java.lang.String generateHeader()"
        ]
    },
    "io.undertow.io.AsyncReceiverImpl$2$2:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.predicate.PredicatesHandler$DoneHandlerBuilder$1$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractSecurityContextAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.RequestEncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.resource.ResourceHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LearningPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathSeparatorHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConnectHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisableCacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StuckThreadDetectionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ExceptionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumpingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ResponseRateLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ByteRangeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LocalNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StoredResponseHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimit:void handleRequest(io.undertow.server.HttpServerExchange,io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConfiguredPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$3$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$2:void handle(io.undertow.server.HttpServerExchange,byte[],boolean)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleNoMatch(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.io.AsyncReceiverImpl$4$2:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.predicate.PredicatesHandler$DoneHandlerBuilder$1$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractSecurityContextAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.RequestEncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.resource.ResourceHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LearningPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathSeparatorHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConnectHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisableCacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StuckThreadDetectionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ExceptionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumpingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ResponseRateLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ByteRangeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LocalNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StoredResponseHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimit:void handleRequest(io.undertow.server.HttpServerExchange,io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConfiguredPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$3$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$2:void handle(io.undertow.server.HttpServerExchange,byte[],boolean)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleNoMatch(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.io.AsyncReceiverImpl$2$3:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.predicate.PredicatesHandler$DoneHandlerBuilder$1$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractSecurityContextAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.RequestEncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.resource.ResourceHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LearningPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathSeparatorHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConnectHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisableCacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StuckThreadDetectionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ExceptionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumpingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ResponseRateLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ByteRangeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LocalNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StoredResponseHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimit:void handleRequest(io.undertow.server.HttpServerExchange,io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConfiguredPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$3$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$2:void handle(io.undertow.server.HttpServerExchange,byte[],boolean)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleNoMatch(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.io.BlockingReceiverImpl:void receiveFullString(io.undertow.io.Receiver$FullStringCallback,io.undertow.io.Receiver$ErrorCallback,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.BlockingReceiverImpl:void receiveFullString(io.undertow.io.Receiver$FullStringCallback,io.undertow.io.Receiver$ErrorCallback)",
            "io.undertow.io.BlockingReceiverImpl:void receiveFullString(io.undertow.io.Receiver$FullStringCallback)",
            "io.undertow.io.BlockingReceiverImpl:void receiveFullString(io.undertow.io.Receiver$FullStringCallback,java.nio.charset.Charset)"
        ]
    },
    "io.undertow.io.BlockingReceiverImpl:void receivePartialString(io.undertow.io.Receiver$PartialStringCallback,io.undertow.io.Receiver$ErrorCallback,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.BlockingReceiverImpl:void receivePartialString(io.undertow.io.Receiver$PartialStringCallback,io.undertow.io.Receiver$ErrorCallback)",
            "io.undertow.io.BlockingReceiverImpl:void receivePartialString(io.undertow.io.Receiver$PartialStringCallback)",
            "io.undertow.io.BlockingReceiverImpl:void receivePartialString(io.undertow.io.Receiver$PartialStringCallback,java.nio.charset.Charset)"
        ]
    },
    "io.undertow.io.BlockingReceiverImpl:void receiveFullBytes(io.undertow.io.Receiver$FullBytesCallback,io.undertow.io.Receiver$ErrorCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.BlockingReceiverImpl:void receiveFullBytes(io.undertow.io.Receiver$FullBytesCallback)"
        ]
    },
    "io.undertow.io.AsyncReceiverImpl$5$3:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.predicate.PredicatesHandler$DoneHandlerBuilder$1$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractSecurityContextAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.RequestEncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.resource.ResourceHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LearningPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathSeparatorHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConnectHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisableCacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StuckThreadDetectionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ExceptionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumpingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ResponseRateLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ByteRangeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LocalNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StoredResponseHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimit:void handleRequest(io.undertow.server.HttpServerExchange,io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConfiguredPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$3$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$2:void handle(io.undertow.server.HttpServerExchange,byte[],boolean)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleNoMatch(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.io.AsyncReceiverImpl$3$3:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.predicate.PredicatesHandler$DoneHandlerBuilder$1$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractSecurityContextAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.RequestEncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.resource.ResourceHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LearningPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathSeparatorHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConnectHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisableCacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StuckThreadDetectionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ExceptionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumpingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ResponseRateLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ByteRangeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LocalNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StoredResponseHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimit:void handleRequest(io.undertow.server.HttpServerExchange,io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConfiguredPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$3$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$2:void handle(io.undertow.server.HttpServerExchange,byte[],boolean)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleNoMatch(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.io.AsyncReceiverImpl$4$3:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.predicate.PredicatesHandler$DoneHandlerBuilder$1$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractSecurityContextAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.RequestEncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.resource.ResourceHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LearningPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathSeparatorHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConnectHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisableCacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StuckThreadDetectionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ExceptionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumpingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ResponseRateLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ByteRangeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LocalNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StoredResponseHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimit:void handleRequest(io.undertow.server.HttpServerExchange,io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConfiguredPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$3$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$2:void handle(io.undertow.server.HttpServerExchange,byte[],boolean)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleNoMatch(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.io.AsyncSenderImpl:void invokeOnException(io.undertow.io.IoCallback,java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.AsyncSenderImpl:void send(java.nio.ByteBuffer,io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void send(java.nio.ByteBuffer[],io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void close(io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void invokeOnComplete()",
            "io.undertow.io.AsyncSenderImpl:void access$500(io.undertow.io.AsyncSenderImpl,io.undertow.io.IoCallback,java.io.IOException)"
        ]
    },
    "io.undertow.io.BlockingSenderImpl:void performTransfer(java.nio.channels.FileChannel,io.undertow.io.IoCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.BlockingSenderImpl:void transferFrom(java.nio.channels.FileChannel,io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:void invokeOnComplete(io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.io.BlockingSenderImpl:boolean writeBuffer(java.nio.ByteBuffer[],io.undertow.io.IoCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.BlockingSenderImpl:void send(java.nio.ByteBuffer[],io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:boolean writeBuffer(java.nio.ByteBuffer,io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.server.handlers.resource.PathResource$1ServerTask:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.AsyncSenderImpl:void invokeOnException(io.undertow.io.IoCallback,java.io.IOException)",
            "io.undertow.io.BlockingSenderImpl:void send(java.lang.String,io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:void send(java.lang.String,java.nio.charset.Charset,io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:void performTransfer(java.nio.channels.FileChannel,io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:void close(io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:boolean writeBuffer(java.nio.ByteBuffer[],io.undertow.io.IoCallback)",
            "io.undertow.server.handlers.resource.PathResource$1ServerTask:void run()",
            "io.undertow.server.handlers.resource.PathResource$1ServerTask:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)",
            "io.undertow.server.handlers.resource.URLResource$1ServerTask:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)",
            "io.undertow.server.handlers.resource.CachedResource$DereferenceCallback:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)",
            "io.undertow.server.handlers.resource.PathResource$1TransferTask$1:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)",
            "io.undertow.server.handlers.resource.PathResource$1BaseFileTask:boolean openFile()",
            "io.undertow.server.protocol.http.HttpContinue$4$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http.HttpContinue:void sendContinueResponse(io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)",
            "io.undertow.server.protocol.http.HttpContinue:void internalSendContinueResponse(io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.server.handlers.resource.URLResource$1ServerTask:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.AsyncSenderImpl:void invokeOnException(io.undertow.io.IoCallback,java.io.IOException)",
            "io.undertow.io.BlockingSenderImpl:void send(java.lang.String,io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:void send(java.lang.String,java.nio.charset.Charset,io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:void performTransfer(java.nio.channels.FileChannel,io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:void close(io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:boolean writeBuffer(java.nio.ByteBuffer[],io.undertow.io.IoCallback)",
            "io.undertow.server.handlers.resource.PathResource$1ServerTask:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)",
            "io.undertow.server.handlers.resource.URLResource$1ServerTask:void run()",
            "io.undertow.server.handlers.resource.URLResource$1ServerTask:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)",
            "io.undertow.server.handlers.resource.CachedResource$DereferenceCallback:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)",
            "io.undertow.server.handlers.resource.PathResource$1TransferTask$1:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)",
            "io.undertow.server.handlers.resource.PathResource$1BaseFileTask:boolean openFile()",
            "io.undertow.server.protocol.http.HttpContinue$4$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http.HttpContinue:void sendContinueResponse(io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)",
            "io.undertow.server.protocol.http.HttpContinue:void internalSendContinueResponse(io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.server.handlers.resource.CachedResource$DereferenceCallback:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.AsyncSenderImpl:void invokeOnException(io.undertow.io.IoCallback,java.io.IOException)",
            "io.undertow.io.BlockingSenderImpl:void send(java.lang.String,io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:void send(java.lang.String,java.nio.charset.Charset,io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:void performTransfer(java.nio.channels.FileChannel,io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:void close(io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:boolean writeBuffer(java.nio.ByteBuffer[],io.undertow.io.IoCallback)",
            "io.undertow.server.handlers.resource.PathResource$1ServerTask:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)",
            "io.undertow.server.handlers.resource.URLResource$1ServerTask:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)",
            "io.undertow.server.handlers.resource.CachedResource$DereferenceCallback:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)",
            "io.undertow.server.handlers.resource.PathResource$1TransferTask$1:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)",
            "io.undertow.server.handlers.resource.PathResource$1BaseFileTask:boolean openFile()",
            "io.undertow.server.protocol.http.HttpContinue$4$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http.HttpContinue:void sendContinueResponse(io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)",
            "io.undertow.server.protocol.http.HttpContinue:void internalSendContinueResponse(io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.server.handlers.resource.PathResource$1TransferTask$1:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.AsyncSenderImpl:void invokeOnException(io.undertow.io.IoCallback,java.io.IOException)",
            "io.undertow.io.BlockingSenderImpl:void send(java.lang.String,io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:void send(java.lang.String,java.nio.charset.Charset,io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:void performTransfer(java.nio.channels.FileChannel,io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:void close(io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:boolean writeBuffer(java.nio.ByteBuffer[],io.undertow.io.IoCallback)",
            "io.undertow.server.handlers.resource.PathResource$1ServerTask:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)",
            "io.undertow.server.handlers.resource.URLResource$1ServerTask:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)",
            "io.undertow.server.handlers.resource.CachedResource$DereferenceCallback:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)",
            "io.undertow.server.handlers.resource.PathResource$1TransferTask$1:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)",
            "io.undertow.server.handlers.resource.PathResource$1BaseFileTask:boolean openFile()",
            "io.undertow.server.protocol.http.HttpContinue$4$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http.HttpContinue:void sendContinueResponse(io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)",
            "io.undertow.server.protocol.http.HttpContinue:void internalSendContinueResponse(io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.server.handlers.resource.PathResource$1BaseFileTask:boolean openFile()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.resource.PathResource$1ServerTask:void run()",
            "io.undertow.server.handlers.resource.PathResource$1TransferTask:void run()"
        ]
    },
    "io.undertow.server.protocol.http.HttpContinue$4$1:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.predicate.PredicatesHandler$DoneHandlerBuilder$1$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractSecurityContextAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.RequestEncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.resource.ResourceHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LearningPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathSeparatorHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConnectHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisableCacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StuckThreadDetectionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ExceptionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumpingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ResponseRateLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ByteRangeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LocalNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StoredResponseHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimit:void handleRequest(io.undertow.server.HttpServerExchange,io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConfiguredPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$3$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$2:void handle(io.undertow.server.HttpServerExchange,byte[],boolean)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleNoMatch(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.security.impl.FormAuthenticationMechanism:io.undertow.security.api.AuthenticationMechanism$AuthenticationMechanismOutcome authenticate(io.undertow.server.HttpServerExchange,io.undertow.security.api.SecurityContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.security.impl.SecurityContextImpl$AuthAttempter:io.undertow.security.impl.SecurityContextImpl$AuthenticationState transition()"
        ]
    },
    "io.undertow.server.handlers.cache.ResponseCache:boolean tryServeResponse()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.resource.ResourceHandler:void serveResource(io.undertow.server.HttpServerExchange,boolean)"
        ]
    },
    "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void processConfig(io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler$RequestData)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void processNodeCommand(io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler$RequestData,io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler$MCMPAction)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void processCommand(io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler$RequestData,io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler$MCMPAction)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPWebManager:void processRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void processAppCommand(io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler$RequestData,io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler$MCMPAction)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void processCommand(io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler$RequestData,io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler$MCMPAction)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPWebManager:void processRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.proxy.mod_cluster.MCMPWebManager:void processDomainCmd(io.undertow.server.HttpServerExchange,java.lang.String,io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler$MCMPAction)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPWebManager:void processRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void processError(io.undertow.server.handlers.proxy.mod_cluster.MCMPErrorCode,io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void processConfig(io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler$RequestData)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void processNodeCommand(io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler$RequestData,io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler$MCMPAction)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void processAppCommand(io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler$RequestData,io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler$MCMPAction)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void processStatus(io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler$RequestData)"
        ]
    },
    "io.undertow.server.handlers.proxy.mod_cluster.ModClusterProxyClient$1:void couldNotResolveBackend(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.mod_cluster.ModClusterProxyClient$1:void couldNotResolveBackend(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.ModClusterProxyClient:void getConnection(io.undertow.server.handlers.proxy.ProxyClient$ProxyTarget,io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.ProxyCallback,long,java.util.concurrent.TimeUnit)",
            "io.undertow.server.handlers.proxy.LoadBalancingProxyClient:void getConnection(io.undertow.server.handlers.proxy.ProxyClient$ProxyTarget,io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.ProxyCallback,long,java.util.concurrent.TimeUnit)",
            "io.undertow.server.handlers.proxy.LoadBalancingProxyClient$2:void couldNotResolveBackend(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.proxy.LoadBalancingProxyClient$2:void couldNotResolveBackend(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.mod_cluster.ModClusterProxyClient$1:void couldNotResolveBackend(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.ModClusterProxyClient:void getConnection(io.undertow.server.handlers.proxy.ProxyClient$ProxyTarget,io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.ProxyCallback,long,java.util.concurrent.TimeUnit)",
            "io.undertow.server.handlers.proxy.LoadBalancingProxyClient:void getConnection(io.undertow.server.handlers.proxy.ProxyClient$ProxyTarget,io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.ProxyCallback,long,java.util.concurrent.TimeUnit)",
            "io.undertow.server.handlers.proxy.LoadBalancingProxyClient$2:void couldNotResolveBackend(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.proxy.ProxyHandler$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.ssl.SslConduit$5:void run()",
            "io.undertow.protocols.ssl.SslConduit:void runReadListener(boolean)",
            "io.undertow.protocols.ssl.SslConduit:boolean handleHandshakeResult(javax.net.ssl.SSLEngineResult)",
            "io.undertow.protocols.ssl.SslConduit$2:void run()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$FrameReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$3:void run()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel:void runInIoThread(java.lang.Runnable)",
            "io.undertow.server.protocol.http.ALPNLimitingSSLEngine:void limitCiphers(java.util.List)",
            "io.undertow.server.protocol.ParseTimeoutUpdater:void run()",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:io.undertow.server.HttpServerExchange dispatch(java.util.concurrent.Executor,java.lang.Runnable)",
            "io.undertow.util.SameThreadExecutor:void execute(java.lang.Runnable)",
            "io.undertow.util.PipeliningExecutor$1:void run()"
        ]
    },
    "io.undertow.server.handlers.proxy.ProxyHandler$ProxyAction$1:void failed(java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientProvider$2:void notify(org.xnio.IoFuture,java.lang.Object)",
            "io.undertow.client.ajp.AjpClientProvider$4:void notify(org.xnio.IoFuture,java.lang.Object)",
            "io.undertow.client.ajp.AjpClientExchange:void setResponseListener(io.undertow.client.ClientCallback)",
            "io.undertow.client.ajp.AjpClientExchange:void setFailed(java.io.IOException)",
            "io.undertow.client.ajp.AjpClientConnection:void sendRequest(io.undertow.client.ClientRequest,io.undertow.client.ClientCallback)",
            "io.undertow.client.http.HttpClientProvider:void connect(io.undertow.client.ClientCallback,java.net.InetSocketAddress,java.net.URI,org.xnio.XnioWorker,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)",
            "io.undertow.client.http.HttpClientProvider:void connect(io.undertow.client.ClientCallback,java.net.InetSocketAddress,java.net.URI,org.xnio.XnioIoThread,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)",
            "io.undertow.client.http.HttpClientProvider:void handleConnected(org.xnio.StreamConnection,io.undertow.client.ClientCallback,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap,java.net.URI)",
            "io.undertow.client.http.HttpClientProvider$1:void notify(org.xnio.IoFuture,java.lang.Object)",
            "io.undertow.client.http.HttpClientExchange:void setResponseListener(io.undertow.client.ClientCallback)",
            "io.undertow.client.http.HttpClientExchange:void setFailed(java.io.IOException)",
            "io.undertow.client.http.HttpClientConnection:void sendRequest(io.undertow.client.ClientRequest,io.undertow.client.ClientCallback)",
            "io.undertow.client.http2.Http2PriorKnowledgeClientProvider:void handleConnected(org.xnio.StreamConnection,io.undertow.client.ClientCallback,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap,java.lang.String)",
            "io.undertow.client.http2.Http2ClientProvider$2:void notify(org.xnio.IoFuture,java.lang.Object)",
            "io.undertow.client.http2.Http2PriorKnowledgeClientProvider$5:void handleEvent(org.xnio.conduits.ConduitStreamSinkChannel)",
            "io.undertow.client.http2.Http2ClientProvider:void connect(io.undertow.client.ClientCallback,java.net.InetSocketAddress,java.net.URI,org.xnio.XnioWorker,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)",
            "io.undertow.client.http2.Http2ClientProvider:void connect(io.undertow.client.ClientCallback,java.net.InetSocketAddress,java.net.URI,org.xnio.XnioIoThread,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)",
            "io.undertow.client.http2.Http2ClientExchange:void setResponseListener(io.undertow.client.ClientCallback)",
            "io.undertow.client.http2.Http2ClientExchange:void failed(java.io.IOException)",
            "io.undertow.client.http2.Http2ClearClientProvider:void connect(io.undertow.client.ClientCallback,java.net.InetSocketAddress,java.net.URI,org.xnio.XnioWorker,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)",
            "io.undertow.client.http2.Http2ClearClientProvider:void connect(io.undertow.client.ClientCallback,java.net.InetSocketAddress,java.net.URI,org.xnio.XnioIoThread,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)",
            "io.undertow.client.http2.Http2PriorKnowledgeClientProvider$1:void notify(org.xnio.IoFuture,java.lang.Object)",
            "io.undertow.client.http2.Http2ClearClientProvider$FailedNotifier:void notify(org.xnio.IoFuture,java.lang.Object)",
            "io.undertow.client.http2.Http2ClientConnection:void sendRequest(io.undertow.client.ClientRequest,io.undertow.client.ClientCallback)",
            "io.undertow.client.ALPNClientSelector$2:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ALPNClientSelector:void runAlpn(org.xnio.ssl.SslConnection,org.xnio.ChannelListener,io.undertow.client.ClientCallback,io.undertow.client.ALPNClientSelector$ALPNProtocol[])"
        ]
    },
    "io.undertow.server.handlers.proxy.ProxyHandler$ResponseCallback:void failed(java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientProvider$2:void notify(org.xnio.IoFuture,java.lang.Object)",
            "io.undertow.client.ajp.AjpClientProvider$4:void notify(org.xnio.IoFuture,java.lang.Object)",
            "io.undertow.client.ajp.AjpClientExchange:void setResponseListener(io.undertow.client.ClientCallback)",
            "io.undertow.client.ajp.AjpClientExchange:void setFailed(java.io.IOException)",
            "io.undertow.client.ajp.AjpClientConnection:void sendRequest(io.undertow.client.ClientRequest,io.undertow.client.ClientCallback)",
            "io.undertow.client.http.HttpClientProvider:void connect(io.undertow.client.ClientCallback,java.net.InetSocketAddress,java.net.URI,org.xnio.XnioWorker,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)",
            "io.undertow.client.http.HttpClientProvider:void connect(io.undertow.client.ClientCallback,java.net.InetSocketAddress,java.net.URI,org.xnio.XnioIoThread,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)",
            "io.undertow.client.http.HttpClientProvider:void handleConnected(org.xnio.StreamConnection,io.undertow.client.ClientCallback,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap,java.net.URI)",
            "io.undertow.client.http.HttpClientProvider$1:void notify(org.xnio.IoFuture,java.lang.Object)",
            "io.undertow.client.http.HttpClientExchange:void setResponseListener(io.undertow.client.ClientCallback)",
            "io.undertow.client.http.HttpClientExchange:void setFailed(java.io.IOException)",
            "io.undertow.client.http.HttpClientConnection:void sendRequest(io.undertow.client.ClientRequest,io.undertow.client.ClientCallback)",
            "io.undertow.client.http2.Http2PriorKnowledgeClientProvider:void handleConnected(org.xnio.StreamConnection,io.undertow.client.ClientCallback,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap,java.lang.String)",
            "io.undertow.client.http2.Http2ClientProvider$2:void notify(org.xnio.IoFuture,java.lang.Object)",
            "io.undertow.client.http2.Http2PriorKnowledgeClientProvider$5:void handleEvent(org.xnio.conduits.ConduitStreamSinkChannel)",
            "io.undertow.client.http2.Http2ClientProvider:void connect(io.undertow.client.ClientCallback,java.net.InetSocketAddress,java.net.URI,org.xnio.XnioWorker,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)",
            "io.undertow.client.http2.Http2ClientProvider:void connect(io.undertow.client.ClientCallback,java.net.InetSocketAddress,java.net.URI,org.xnio.XnioIoThread,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)",
            "io.undertow.client.http2.Http2ClientExchange:void setResponseListener(io.undertow.client.ClientCallback)",
            "io.undertow.client.http2.Http2ClientExchange:void failed(java.io.IOException)",
            "io.undertow.client.http2.Http2ClearClientProvider:void connect(io.undertow.client.ClientCallback,java.net.InetSocketAddress,java.net.URI,org.xnio.XnioWorker,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)",
            "io.undertow.client.http2.Http2ClearClientProvider:void connect(io.undertow.client.ClientCallback,java.net.InetSocketAddress,java.net.URI,org.xnio.XnioIoThread,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)",
            "io.undertow.client.http2.Http2PriorKnowledgeClientProvider$1:void notify(org.xnio.IoFuture,java.lang.Object)",
            "io.undertow.client.http2.Http2ClearClientProvider$FailedNotifier:void notify(org.xnio.IoFuture,java.lang.Object)",
            "io.undertow.client.http2.Http2ClientConnection:void sendRequest(io.undertow.client.ClientRequest,io.undertow.client.ClientCallback)",
            "io.undertow.client.ALPNClientSelector$2:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ALPNClientSelector:void runAlpn(org.xnio.ssl.SslConnection,org.xnio.ChannelListener,io.undertow.client.ClientCallback,io.undertow.client.ALPNClientSelector$ALPNProtocol[])"
        ]
    },
    "io.undertow.server.handlers.ConnectHandler$1$2:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection$3:void handleEvent(io.undertow.protocols.ajp.AjpClientChannel)",
            "io.undertow.client.http.HttpClientConnection$5:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.client.http2.Http2ClientConnection$1:void handleEvent(io.undertow.protocols.http2.Http2Channel)",
            "io.undertow.client.ALPNClientSelector$2:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ALPNClientSelector$2:void handleSelected(java.lang.String)",
            "io.undertow.client.ALPNClientSelector:void runAlpn(org.xnio.ssl.SslConnection,org.xnio.ChannelListener,io.undertow.client.ClientCallback,io.undertow.client.ALPNClientSelector$ALPNProtocol[])",
            "io.undertow.protocols.ajp.AjpClientResponseStreamSourceChannel:void complete()",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void handleFlushComplete(boolean)",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void channelForciblyClosed()",
            "io.undertow.protocols.http2.Http2StreamSourceChannel:void channelForciblyClosed()",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$RequestExchangeListener:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void close()"
        ]
    },
    "io.undertow.io.AsyncReceiverImpl$4$1:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.predicate.PredicatesHandler$DoneHandlerBuilder$1$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractSecurityContextAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.RequestEncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.resource.ResourceHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LearningPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathSeparatorHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConnectHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisableCacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StuckThreadDetectionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ExceptionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumpingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ResponseRateLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ByteRangeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.LocalNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.StoredResponseHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimit:void handleRequest(io.undertow.server.HttpServerExchange,io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ConfiguredPushHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestBufferingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$3$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$2:void handle(io.undertow.server.HttpServerExchange,byte[],boolean)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.RoutingHandler:void handleNoMatch(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.AbstractServerConnection$CloseSetter:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection$3:void handleEvent(io.undertow.protocols.ajp.AjpClientChannel)",
            "io.undertow.client.http.HttpClientConnection$5:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.client.http2.Http2ClientConnection$1:void handleEvent(io.undertow.protocols.http2.Http2Channel)",
            "io.undertow.client.ALPNClientSelector$2:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ALPNClientSelector$2:void handleSelected(java.lang.String)",
            "io.undertow.client.ALPNClientSelector:void runAlpn(org.xnio.ssl.SslConnection,org.xnio.ChannelListener,io.undertow.client.ClientCallback,io.undertow.client.ALPNClientSelector$ALPNProtocol[])",
            "io.undertow.protocols.ajp.AjpClientResponseStreamSourceChannel:void complete()",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void handleFlushComplete(boolean)",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void channelForciblyClosed()",
            "io.undertow.protocols.http2.Http2StreamSourceChannel:void channelForciblyClosed()",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$RequestExchangeListener:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void close()"
        ]
    },
    "io.undertow.websockets.core.protocol.version07.Hybi07Handshake:void handshakeInternal(io.undertow.websockets.spi.WebSocketHttpExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.protocol.Handshake:void handshake(io.undertow.websockets.spi.WebSocketHttpExchange)"
        ]
    },
    "io.undertow.websockets.core.protocol.version13.Hybi13Handshake:void handshakeInternal(io.undertow.websockets.spi.WebSocketHttpExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.protocol.Handshake:void handshake(io.undertow.websockets.spi.WebSocketHttpExchange)"
        ]
    },
    "io.undertow.websockets.core.protocol.Handshake:void upgradeChannel(io.undertow.websockets.spi.WebSocketHttpExchange,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.protocol.Handshake:void performUpgrade(io.undertow.websockets.spi.WebSocketHttpExchange,byte[])"
        ]
    },
    "io.undertow.websockets.core.protocol.Handshake$1:void notify(org.xnio.IoFuture,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.conduits.IdleTimeoutConduit:void handleIdleTimeout()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.IdleTimeoutConduit:int write(java.nio.ByteBuffer)",
            "io.undertow.conduits.IdleTimeoutConduit:long write(java.nio.ByteBuffer[],int,int)",
            "io.undertow.conduits.IdleTimeoutConduit:int writeFinal(java.nio.ByteBuffer)",
            "io.undertow.conduits.IdleTimeoutConduit:long writeFinal(java.nio.ByteBuffer[],int,int)",
            "io.undertow.conduits.IdleTimeoutConduit:long transferTo(long,long,java.nio.channels.FileChannel)",
            "io.undertow.conduits.IdleTimeoutConduit:long transferTo(long,java.nio.ByteBuffer,org.xnio.channels.StreamSinkChannel)",
            "io.undertow.conduits.IdleTimeoutConduit:long read(java.nio.ByteBuffer[],int,int)",
            "io.undertow.conduits.IdleTimeoutConduit:int read(java.nio.ByteBuffer)",
            "io.undertow.conduits.IdleTimeoutConduit:long transferFrom(java.nio.channels.FileChannel,long,long)",
            "io.undertow.conduits.IdleTimeoutConduit:long transferFrom(org.xnio.channels.StreamSourceChannel,long,java.nio.ByteBuffer)"
        ]
    },
    "io.undertow.server.protocol.ajp.AjpServerRequestConduit:long read(java.nio.ByteBuffer[],int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.conduits.EmptyStreamSourceConduit:void wakeupReads()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.FixedLengthStreamSourceConduit:void wakeupReads()",
            "io.undertow.conduits.IdleTimeoutConduit:void wakeupReads()"
        ]
    },
    "io.undertow.conduits.DeflatingStreamSinkConduit:void queueWriteListener()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.DeflatingStreamSinkConduit:void resumeWrites()",
            "io.undertow.conduits.DeflatingStreamSinkConduit:void access$200(io.undertow.conduits.DeflatingStreamSinkConduit)"
        ]
    },
    "io.undertow.protocols.ssl.SslConduit:void runWriteListener()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.ssl.SslConduit:void notifyWriteClosed()"
        ]
    },
    "io.undertow.protocols.ssl.SslConduit:void wakeupWrites()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.HeadStreamSinkConduit:void wakeupWrites()",
            "io.undertow.conduits.RateLimitingStreamSinkConduit$1:void run()",
            "io.undertow.conduits.DeflatingStreamSinkConduit:void wakeupWrites()",
            "io.undertow.conduits.AbstractFixedLengthStreamSinkConduit:void wakeupWrites()",
            "io.undertow.conduits.IdleTimeoutConduit:void wakeupWrites()",
            "io.undertow.protocols.ssl.SslConduit:void clearWriteRequiresRead()",
            "io.undertow.server.protocol.ajp.AjpServerResponseConduit:void wakeupWrites()"
        ]
    },
    "io.undertow.conduits.HeadStreamSinkConduit:void wakeupWrites()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.conduits.RateLimitingStreamSinkConduit$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.ssl.SslConduit$5:void run()",
            "io.undertow.protocols.ssl.SslConduit:void runReadListener(boolean)",
            "io.undertow.protocols.ssl.SslConduit:boolean handleHandshakeResult(javax.net.ssl.SSLEngineResult)",
            "io.undertow.protocols.ssl.SslConduit$2:void run()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$FrameReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$3:void run()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel:void runInIoThread(java.lang.Runnable)",
            "io.undertow.server.protocol.http.ALPNLimitingSSLEngine:void limitCiphers(java.util.List)",
            "io.undertow.server.protocol.ParseTimeoutUpdater:void run()",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:io.undertow.server.HttpServerExchange dispatch(java.util.concurrent.Executor,java.lang.Runnable)",
            "io.undertow.util.SameThreadExecutor:void execute(java.lang.Runnable)",
            "io.undertow.util.PipeliningExecutor$1:void run()"
        ]
    },
    "io.undertow.conduits.DeflatingStreamSinkConduit:void wakeupWrites()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.HeadStreamSinkConduit:void wakeupWrites()",
            "io.undertow.conduits.RateLimitingStreamSinkConduit$1:void run()",
            "io.undertow.conduits.DeflatingStreamSinkConduit:void wakeupWrites()",
            "io.undertow.conduits.AbstractFixedLengthStreamSinkConduit:void wakeupWrites()",
            "io.undertow.conduits.IdleTimeoutConduit:void wakeupWrites()",
            "io.undertow.server.protocol.ajp.AjpServerResponseConduit:void wakeupWrites()"
        ]
    },
    "io.undertow.conduits.AbstractFixedLengthStreamSinkConduit:void wakeupWrites()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.conduits.IdleTimeoutConduit:void wakeupWrites()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.HeadStreamSinkConduit:void wakeupWrites()",
            "io.undertow.conduits.RateLimitingStreamSinkConduit$1:void run()",
            "io.undertow.conduits.DeflatingStreamSinkConduit:void wakeupWrites()",
            "io.undertow.conduits.AbstractFixedLengthStreamSinkConduit:void wakeupWrites()",
            "io.undertow.conduits.IdleTimeoutConduit:void wakeupWrites()",
            "io.undertow.server.protocol.ajp.AjpServerResponseConduit:void wakeupWrites()"
        ]
    },
    "io.undertow.server.handlers.encoding.ContentEncodedResourceManager$FileConduitTarget:void resumeWrites()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.HeadStreamSinkConduit:void resumeWrites()",
            "io.undertow.conduits.DeflatingStreamSinkConduit:void resumeWrites()",
            "io.undertow.conduits.DeflatingStreamSinkConduit:boolean flush()",
            "io.undertow.conduits.DeflatingStreamSinkConduit:void deflateData(boolean)",
            "io.undertow.conduits.IdleTimeoutConduit:void resumeWrites()",
            "io.undertow.protocols.ssl.SslConduit:boolean handleHandshakeResult(javax.net.ssl.SSLEngineResult)",
            "io.undertow.server.protocol.ajp.AjpServerResponseConduit:void resumeWrites()",
            "io.undertow.server.protocol.ajp.AjpServerResponseConduit:boolean doGetRequestBodyChunk(java.nio.ByteBuffer,io.undertow.server.protocol.ajp.AjpServerRequestConduit)"
        ]
    },
    "io.undertow.server.protocol.ajp.AjpServerResponseConduit:void wakeupWrites()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.conduits.ChunkedStreamSinkConduit:long write(java.nio.ByteBuffer[],int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.conduits.PreChunkedStreamSinkConduit:long write(java.nio.ByteBuffer[],int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.conduits.DeflatingStreamSinkConduit:long write(java.nio.ByteBuffer[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpRequestConduit:int processWrite(int,java.nio.ByteBuffer)",
            "io.undertow.client.http.HttpRequestConduit:long write(java.nio.ByteBuffer[],int,int)",
            "io.undertow.conduits.BytesSentStreamSinkConduit:long write(java.nio.ByteBuffer[],int,int)",
            "io.undertow.conduits.ChunkedStreamSinkConduit:int doWrite(java.nio.ByteBuffer)",
            "io.undertow.conduits.DeflatingStreamSinkConduit:boolean performFlushIfRequired()",
            "io.undertow.conduits.AbstractFixedLengthStreamSinkConduit:long write(java.nio.ByteBuffer[],int,int)",
            "io.undertow.conduits.IdleTimeoutConduit:long write(java.nio.ByteBuffer[],int,int)",
            "io.undertow.conduits.AbstractFramedStreamSinkConduit:long doWrite(java.nio.ByteBuffer[],int,int)",
            "io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit:long flushBufferWithUserData(java.nio.ByteBuffer[],int,int)",
            "io.undertow.server.protocol.http.HttpResponseConduit:int processWrite(int,java.lang.Object,int,int)",
            "io.undertow.server.protocol.http.HttpResponseConduit:int processStatefulWrite(int,java.lang.Object,int,int)",
            "io.undertow.server.protocol.http.HttpResponseConduit:long write(java.nio.ByteBuffer[],int,int)"
        ]
    },
    "io.undertow.conduits.BytesSentStreamSinkConduit:long transferFrom(java.nio.channels.FileChannel,long,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.conduits.AbstractFixedLengthStreamSinkConduit:long transferFrom(java.nio.channels.FileChannel,long,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.conduits.IdleTimeoutConduit:long transferFrom(java.nio.channels.FileChannel,long,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpRequestConduit:long transferFrom(java.nio.channels.FileChannel,long,long)",
            "io.undertow.conduits.BytesSentStreamSinkConduit:long transferFrom(java.nio.channels.FileChannel,long,long)",
            "io.undertow.conduits.AbstractFixedLengthStreamSinkConduit:long transferFrom(java.nio.channels.FileChannel,long,long)",
            "io.undertow.conduits.IdleTimeoutConduit:long transferFrom(java.nio.channels.FileChannel,long,long)",
            "io.undertow.server.protocol.http.HttpResponseConduit:long transferFrom(java.nio.channels.FileChannel,long,long)"
        ]
    },
    "io.undertow.conduits.BytesSentStreamSinkConduit:long transferFrom(org.xnio.channels.StreamSourceChannel,long,java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.conduits.AbstractFixedLengthStreamSinkConduit:long transferFrom(org.xnio.channels.StreamSourceChannel,long,java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.conduits.IdleTimeoutConduit:long transferFrom(org.xnio.channels.StreamSourceChannel,long,java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpRequestConduit:long transferFrom(org.xnio.channels.StreamSourceChannel,long,java.nio.ByteBuffer)",
            "io.undertow.conduits.BytesSentStreamSinkConduit:long transferFrom(org.xnio.channels.StreamSourceChannel,long,java.nio.ByteBuffer)",
            "io.undertow.conduits.AbstractFixedLengthStreamSinkConduit:long transferFrom(org.xnio.channels.StreamSourceChannel,long,java.nio.ByteBuffer)",
            "io.undertow.conduits.IdleTimeoutConduit:long transferFrom(org.xnio.channels.StreamSourceChannel,long,java.nio.ByteBuffer)",
            "io.undertow.server.protocol.http.HttpResponseConduit:long transferFrom(org.xnio.channels.StreamSourceChannel,long,java.nio.ByteBuffer)"
        ]
    },
    "io.undertow.server.protocol.http.HttpResponseConduit:long transferFrom(org.xnio.channels.StreamSourceChannel,long,java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.server.protocol.ajp.AjpServerResponseConduit:boolean doGetRequestBodyChunk(java.nio.ByteBuffer,io.undertow.server.protocol.ajp.AjpServerRequestConduit)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.ajp.AjpServerRequestConduit:int read(java.nio.ByteBuffer)"
        ]
    },
    "io.undertow.server.protocol.ajp.AjpServerResponseConduit:long write(java.nio.ByteBuffer[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.ajp.AjpServerResponseConduit:long write(java.nio.ByteBuffer[])"
        ]
    },
    "io.undertow.security.impl.ClientCertAuthenticationMechanism:java.security.cert.Certificate[] getPeerCertificates(io.undertow.server.HttpServerExchange,io.undertow.server.SSLSessionInfo,io.undertow.security.api.SecurityContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.security.impl.ClientCertAuthenticationMechanism:io.undertow.security.api.AuthenticationMechanism$AuthenticationMechanismOutcome authenticate(io.undertow.server.HttpServerExchange,io.undertow.security.api.SecurityContext)"
        ]
    },
    "io.undertow.server.handlers.proxy.ProxyHandler$ProxyAction$1$3:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection$3:void handleEvent(io.undertow.protocols.ajp.AjpClientChannel)",
            "io.undertow.client.http.HttpClientConnection$5:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.client.http2.Http2ClientConnection$1:void handleEvent(io.undertow.protocols.http2.Http2Channel)",
            "io.undertow.client.ALPNClientSelector$2:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ALPNClientSelector$2:void handleSelected(java.lang.String)",
            "io.undertow.client.ALPNClientSelector:void runAlpn(org.xnio.ssl.SslConnection,org.xnio.ChannelListener,io.undertow.client.ClientCallback,io.undertow.client.ALPNClientSelector$ALPNProtocol[])",
            "io.undertow.protocols.ajp.AjpClientResponseStreamSourceChannel:void complete()",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void handleFlushComplete(boolean)",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void channelForciblyClosed()",
            "io.undertow.protocols.http2.Http2StreamSourceChannel:void channelForciblyClosed()",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$RequestExchangeListener:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void close()"
        ]
    },
    "io.undertow.server.handlers.proxy.ProxyHandler$ResponseCallback:void completed(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientProvider:void handleConnected(org.xnio.StreamConnection,io.undertow.client.ClientCallback,java.net.URI,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)",
            "io.undertow.client.ajp.AjpClientExchange:void setResponse(io.undertow.client.ClientResponse)",
            "io.undertow.client.ajp.AjpClientExchange:void setResponseListener(io.undertow.client.ClientCallback)",
            "io.undertow.client.ajp.AjpClientExchange:void invokeReadReadyCallback(io.undertow.client.ClientExchange)",
            "io.undertow.client.http.HttpClientProvider:void handleConnected(org.xnio.StreamConnection,io.undertow.client.ClientCallback,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap,java.net.URI)",
            "io.undertow.client.http.HttpClientProvider$3:void handleEvent(org.xnio.ssl.SslConnection)",
            "io.undertow.client.http.HttpClientExchange:void setResponse(io.undertow.client.ClientResponse)",
            "io.undertow.client.http.HttpClientExchange:void setResponseListener(io.undertow.client.ClientCallback)",
            "io.undertow.client.http.HttpClientExchange:void invokeReadReadyCallback()",
            "io.undertow.client.http2.Http2ClientProvider$4:void handleEvent(org.xnio.ssl.SslConnection)",
            "io.undertow.client.http2.Http2PriorKnowledgeClientProvider:void handleConnected(org.xnio.StreamConnection,io.undertow.client.ClientCallback,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap,java.lang.String)",
            "io.undertow.client.http2.Http2PriorKnowledgeClientProvider$5:void handleEvent(org.xnio.conduits.ConduitStreamSinkChannel)",
            "io.undertow.client.http2.Http2ClearClientProvider$Http2ClearOpenListener:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.client.http2.Http2ClientExchange:void responseReady(io.undertow.protocols.http2.Http2StreamSourceChannel)",
            "io.undertow.client.http2.Http2ClientConnection:void sendRequest(io.undertow.client.ClientRequest,io.undertow.client.ClientCallback)"
        ]
    },
    "io.undertow.websockets.core.AbstractReceiveListener:void bufferFullMessage(io.undertow.websockets.core.StreamSourceFrameChannel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.protocols.ajp.AjpClientResponseStreamSourceChannel:void <init>(io.undertow.protocols.ajp.AjpClientChannel,io.undertow.util.HeaderMap,int,java.lang.String,io.undertow.connector.PooledByteBuffer,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.ajp.AjpClientChannel:io.undertow.protocols.ajp.AbstractAjpClientStreamSourceChannel createChannel(io.undertow.server.protocol.framed.FrameHeaderData,io.undertow.connector.PooledByteBuffer)"
        ]
    },
    "io.undertow.protocols.http2.Http2RstStreamStreamSourceChannel:void <init>(io.undertow.protocols.http2.Http2Channel,io.undertow.connector.PooledByteBuffer,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.http2.Http2Channel:io.undertow.protocols.http2.AbstractHttp2StreamSourceChannel createChannelImpl(io.undertow.server.protocol.framed.FrameHeaderData,io.undertow.connector.PooledByteBuffer)"
        ]
    },
    "io.undertow.protocols.http2.Http2StreamSourceChannel:void <init>(io.undertow.protocols.http2.Http2Channel,io.undertow.connector.PooledByteBuffer,long,io.undertow.util.HeaderMap,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.http2.Http2Channel:io.undertow.protocols.http2.AbstractHttp2StreamSourceChannel createChannelImpl(io.undertow.server.protocol.framed.FrameHeaderData,io.undertow.connector.PooledByteBuffer)"
        ]
    },
    "io.undertow.protocols.http2.Http2PushPromiseStreamSourceChannel:void <init>(io.undertow.protocols.http2.Http2Channel,io.undertow.connector.PooledByteBuffer,long,io.undertow.util.HeaderMap,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.http2.Http2Channel:io.undertow.protocols.http2.AbstractHttp2StreamSourceChannel createChannelImpl(io.undertow.server.protocol.framed.FrameHeaderData,io.undertow.connector.PooledByteBuffer)"
        ]
    },
    "io.undertow.protocols.http2.Http2GoAwayStreamSourceChannel:void <init>(io.undertow.protocols.http2.Http2Channel,io.undertow.connector.PooledByteBuffer,long,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.http2.Http2Channel:io.undertow.protocols.http2.AbstractHttp2StreamSourceChannel createChannelImpl(io.undertow.server.protocol.framed.FrameHeaderData,io.undertow.connector.PooledByteBuffer)"
        ]
    },
    "io.undertow.protocols.http2.Http2SettingsStreamSourceChannel:void <init>(io.undertow.protocols.http2.Http2Channel,io.undertow.connector.PooledByteBuffer,long,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.http2.Http2Channel:io.undertow.protocols.http2.AbstractHttp2StreamSourceChannel createChannelImpl(io.undertow.server.protocol.framed.FrameHeaderData,io.undertow.connector.PooledByteBuffer)"
        ]
    },
    "io.undertow.websockets.core.protocol.version07.WebSocket07BinaryFrameSourceChannel:void <init>(io.undertow.websockets.core.WebSocketChannel,int,boolean,io.undertow.websockets.core.protocol.version07.Masker,io.undertow.connector.PooledByteBuffer,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.protocol.version07.WebSocket07Channel$WebSocketFrameHeader:io.undertow.websockets.core.StreamSourceFrameChannel createChannel(io.undertow.connector.PooledByteBuffer)"
        ]
    },
    "io.undertow.websockets.core.protocol.version07.WebSocket07BinaryFrameSourceChannel:void <init>(io.undertow.websockets.core.WebSocketChannel,int,boolean,io.undertow.connector.PooledByteBuffer,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.protocol.version07.WebSocket07Channel$WebSocketFrameHeader:io.undertow.websockets.core.StreamSourceFrameChannel createChannel(io.undertow.connector.PooledByteBuffer)"
        ]
    },
    "io.undertow.websockets.core.protocol.version07.WebSocket07TextFrameSourceChannel:void <init>(io.undertow.websockets.core.protocol.version07.WebSocket07Channel,int,boolean,io.undertow.websockets.core.protocol.version07.Masker,io.undertow.websockets.core.protocol.version07.UTF8Checker,io.undertow.connector.PooledByteBuffer,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.protocol.version07.WebSocket07Channel$WebSocketFrameHeader:io.undertow.websockets.core.StreamSourceFrameChannel createChannel(io.undertow.connector.PooledByteBuffer)"
        ]
    },
    "io.undertow.websockets.core.protocol.version07.WebSocket07TextFrameSourceChannel:void <init>(io.undertow.websockets.core.protocol.version07.WebSocket07Channel,int,boolean,io.undertow.websockets.core.protocol.version07.UTF8Checker,io.undertow.connector.PooledByteBuffer,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.protocol.version07.WebSocket07Channel$WebSocketFrameHeader:io.undertow.websockets.core.StreamSourceFrameChannel createChannel(io.undertow.connector.PooledByteBuffer)"
        ]
    },
    "io.undertow.websockets.core.protocol.version07.WebSocket07CloseFrameSourceChannel:void <init>(io.undertow.websockets.core.protocol.version07.WebSocket07Channel,int,io.undertow.websockets.core.protocol.version07.Masker,io.undertow.connector.PooledByteBuffer,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.protocol.version07.WebSocket07Channel$WebSocketFrameHeader:io.undertow.websockets.core.StreamSourceFrameChannel createChannel(io.undertow.connector.PooledByteBuffer)"
        ]
    },
    "io.undertow.websockets.core.protocol.version07.WebSocket07CloseFrameSourceChannel:void <init>(io.undertow.websockets.core.protocol.version07.WebSocket07Channel,int,io.undertow.connector.PooledByteBuffer,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.protocol.version07.WebSocket07Channel$WebSocketFrameHeader:io.undertow.websockets.core.StreamSourceFrameChannel createChannel(io.undertow.connector.PooledByteBuffer)"
        ]
    },
    "io.undertow.websockets.core.protocol.version07.WebSocket07PingFrameSourceChannel:void <init>(io.undertow.websockets.core.WebSocketChannel,int,io.undertow.websockets.core.protocol.version07.Masker,io.undertow.connector.PooledByteBuffer,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.protocol.version07.WebSocket07Channel$WebSocketFrameHeader:io.undertow.websockets.core.StreamSourceFrameChannel createChannel(io.undertow.connector.PooledByteBuffer)"
        ]
    },
    "io.undertow.websockets.core.protocol.version07.WebSocket07PingFrameSourceChannel:void <init>(io.undertow.websockets.core.WebSocketChannel,int,io.undertow.connector.PooledByteBuffer,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.protocol.version07.WebSocket07Channel$WebSocketFrameHeader:io.undertow.websockets.core.StreamSourceFrameChannel createChannel(io.undertow.connector.PooledByteBuffer)"
        ]
    },
    "io.undertow.websockets.core.protocol.version07.WebSocket07PongFrameSourceChannel:void <init>(io.undertow.websockets.core.WebSocketChannel,int,io.undertow.websockets.core.protocol.version07.Masker,io.undertow.connector.PooledByteBuffer,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.protocol.version07.WebSocket07Channel$WebSocketFrameHeader:io.undertow.websockets.core.StreamSourceFrameChannel createChannel(io.undertow.connector.PooledByteBuffer)"
        ]
    },
    "io.undertow.websockets.core.protocol.version07.WebSocket07PongFrameSourceChannel:void <init>(io.undertow.websockets.core.WebSocketChannel,int,io.undertow.connector.PooledByteBuffer,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.protocol.version07.WebSocket07Channel$WebSocketFrameHeader:io.undertow.websockets.core.StreamSourceFrameChannel createChannel(io.undertow.connector.PooledByteBuffer)"
        ]
    },
    "io.undertow.websockets.core.StreamSourceFrameChannel:void <init>(io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketFrameType,io.undertow.connector.PooledByteBuffer,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.protocols.http2.AbstractHttp2StreamSourceChannel:void rstStream()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.http2.Http2Channel:io.undertow.protocols.http2.AbstractHttp2StreamSourceChannel createChannelImpl(io.undertow.server.protocol.framed.FrameHeaderData,io.undertow.connector.PooledByteBuffer)",
            "io.undertow.protocols.http2.Http2Channel:void handleRstStream(int)"
        ]
    },
    "io.undertow.server.protocol.framed.AbstractFramedChannel:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection:void close()"
        ]
    },
    "io.undertow.websockets.core.protocol.version07.WebSocket07Channel:void markReadsBroken(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.framed.AbstractFramedChannel:io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel receive()",
            "io.undertow.websockets.core.protocol.version07.WebSocket07CloseFrameSourceChannel$CloseFrameValidatorChannelFunction:void afterRead(java.nio.ByteBuffer,int,int)",
            "io.undertow.websockets.core.WebSocketChannel:io.undertow.server.protocol.framed.FrameHeaderData parseFrame(java.nio.ByteBuffer)",
            "io.undertow.websockets.core.StreamSourceFrameChannel:void checkComplete()",
            "io.undertow.websockets.core.StreamSourceFrameChannel:void afterRead(java.nio.ByteBuffer,int,int)",
            "io.undertow.websockets.core.StreamSourceFrameChannel:void checker(java.nio.ByteBuffer,int,int,boolean)",
            "io.undertow.websockets.core.StreamSourceFrameChannel:io.undertow.connector.PooledByteBuffer processFrameData(io.undertow.connector.PooledByteBuffer,boolean)"
        ]
    },
    "io.undertow.protocols.ajp.AjpClientChannel:io.undertow.protocols.ajp.AbstractAjpClientStreamSourceChannel createChannel(io.undertow.server.protocol.framed.FrameHeaderData,io.undertow.connector.PooledByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.ajp.AjpClientChannel:io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel createChannel(io.undertow.server.protocol.framed.FrameHeaderData,io.undertow.connector.PooledByteBuffer)"
        ]
    },
    "io.undertow.protocols.ajp.AjpClientChannel:void sourceDone()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.ajp.AjpClientResponseStreamSourceChannel:void complete()"
        ]
    },
    "io.undertow.channels.DetachableStreamSinkChannel:void shutdownWrites()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.channels.DetachableStreamSinkChannel:void shutdownWrites()",
            "io.undertow.io.UndertowOutputStream:void close()",
            "io.undertow.io.AsyncSenderImpl:void close(io.undertow.io.IoCallback)",
            "io.undertow.protocols.http2.Http2Channel:void flushChannel(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.server.handlers.error.FileErrorPageHandler$2:void run()",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$HttpClientPingTask$1$1:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$ConnectionPoolPingTask$1:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler$HTTPTrailerChannelListener:void handleEvent(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.server.handlers.sse.ServerSentEventConnection:void close(java.io.IOException)",
            "io.undertow.server.handlers.sse.ServerSentEventConnection$5:void run()",
            "io.undertow.server.protocol.ajp.AjpReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.protocol.http.HttpContinue:void internalSendContinueResponse(io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)",
            "io.undertow.server.protocol.http.HttpContinue$2:boolean send()",
            "io.undertow.server.HttpServerExchange:void closeAndFlushResponse()",
            "io.undertow.util.StringWriteChannelListener:void writeDone(org.xnio.channels.StreamSinkChannel)"
        ]
    },
    "io.undertow.io.UndertowOutputStream:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.UndertowOutputStream:void updateWritten(long)",
            "io.undertow.io.BlockingSenderImpl:void close(io.undertow.io.IoCallback)",
            "io.undertow.server.handlers.encoding.ContentEncodedResourceManager:io.undertow.server.handlers.encoding.ContentEncodedResource getResource(io.undertow.server.handlers.resource.Resource,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http.HttpContinue:void sendContinueResponseBlocking(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$DefaultBlockingHttpExchange:void close()",
            "io.undertow.util.FlexBase64$DecoderOutputStream:void close()",
            "io.undertow.util.FlexBase64$EncoderOutputStream:void close()"
        ]
    },
    "io.undertow.server.handlers.sse.ServerSentEventConnection$5:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.ssl.SslConduit$5:void run()",
            "io.undertow.protocols.ssl.SslConduit:void runReadListener(boolean)",
            "io.undertow.protocols.ssl.SslConduit:boolean handleHandshakeResult(javax.net.ssl.SSLEngineResult)",
            "io.undertow.protocols.ssl.SslConduit$2:void run()",
            "io.undertow.server.handlers.sse.ServerSentEventConnection:void shutdown()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$FrameReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$3:void run()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel:void runInIoThread(java.lang.Runnable)",
            "io.undertow.server.protocol.http.ALPNLimitingSSLEngine:void limitCiphers(java.util.List)",
            "io.undertow.server.protocol.ParseTimeoutUpdater:void run()",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:io.undertow.server.HttpServerExchange dispatch(java.util.concurrent.Executor,java.lang.Runnable)",
            "io.undertow.util.SameThreadExecutor:void execute(java.lang.Runnable)",
            "io.undertow.util.PipeliningExecutor$1:void run()"
        ]
    },
    "io.undertow.server.protocol.http.HttpContinue$2:boolean send()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.HttpContinueReadHandler$ContinueConduit:long transferTo(long,long,java.nio.channels.FileChannel)",
            "io.undertow.server.handlers.HttpContinueReadHandler$ContinueConduit:long transferTo(long,java.nio.ByteBuffer,org.xnio.channels.StreamSinkChannel)",
            "io.undertow.server.handlers.HttpContinueReadHandler$ContinueConduit:int read(java.nio.ByteBuffer)",
            "io.undertow.server.handlers.HttpContinueReadHandler$ContinueConduit:long read(java.nio.ByteBuffer[],int,int)",
            "io.undertow.server.handlers.HttpContinueReadHandler$ContinueConduit:void awaitReadable(long,java.util.concurrent.TimeUnit)",
            "io.undertow.server.handlers.HttpContinueReadHandler$ContinueConduit:void awaitReadable()"
        ]
    },
    "io.undertow.websockets.core.WebSockets:void sendBlockingInternal(io.undertow.connector.PooledByteBuffer,io.undertow.websockets.core.WebSocketFrameType,io.undertow.websockets.core.WebSocketChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.WebSockets:void sendTextBlocking(io.undertow.connector.PooledByteBuffer,io.undertow.websockets.core.WebSocketChannel)",
            "io.undertow.websockets.core.WebSockets:void sendPingBlocking(io.undertow.connector.PooledByteBuffer,io.undertow.websockets.core.WebSocketChannel)",
            "io.undertow.websockets.core.WebSockets:void sendPongBlocking(io.undertow.connector.PooledByteBuffer,io.undertow.websockets.core.WebSocketChannel)",
            "io.undertow.websockets.core.WebSockets:void sendBinaryBlocking(io.undertow.connector.PooledByteBuffer,io.undertow.websockets.core.WebSocketChannel)",
            "io.undertow.websockets.core.WebSockets:void sendBlockingInternal(java.nio.ByteBuffer,io.undertow.websockets.core.WebSocketFrameType,io.undertow.websockets.core.WebSocketChannel)"
        ]
    },
    "io.undertow.websockets.core.BinaryOutputStream:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.BlockingSenderImpl:void close(io.undertow.io.IoCallback)",
            "io.undertow.server.handlers.encoding.ContentEncodedResourceManager:io.undertow.server.handlers.encoding.ContentEncodedResource getResource(io.undertow.server.handlers.resource.Resource,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http.HttpContinue:void sendContinueResponseBlocking(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$DefaultBlockingHttpExchange:void close()",
            "io.undertow.util.FlexBase64$DecoderOutputStream:void close()",
            "io.undertow.util.FlexBase64$EncoderOutputStream:void close()"
        ]
    },
    "io.undertow.channels.DetachableStreamSinkChannel:boolean flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.channels.DetachableStreamSinkChannel:boolean flush()",
            "io.undertow.io.AsyncSenderImpl:void close(io.undertow.io.IoCallback)",
            "io.undertow.protocols.http2.Http2Channel:void flushChannel(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$HttpClientPingTask$1$1:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$ConnectionPoolPingTask$1:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler$ProxyAction$1:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler$HTTPTrailerChannelListener:void handleEvent(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.server.handlers.sse.ServerSentEventConnection:void close(java.io.IOException)",
            "io.undertow.server.handlers.sse.ServerSentEventHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.sse.ServerSentEventConnection$SseWriteListener:void handleEvent(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.server.protocol.http.HttpContinue:void internalSendContinueResponse(io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)",
            "io.undertow.server.protocol.http.HttpContinue$2:boolean send()",
            "io.undertow.server.HttpServerExchange:void closeAndFlushResponse()",
            "io.undertow.util.StringWriteChannelListener:void writeDone(org.xnio.channels.StreamSinkChannel)"
        ]
    },
    "io.undertow.protocols.http2.Http2DataStreamSinkChannel:boolean flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.channels.DetachableStreamSinkChannel:boolean flush()",
            "io.undertow.client.http2.Http2ClientConnection:void sendRequest(io.undertow.client.ClientRequest,io.undertow.client.ClientCallback)",
            "io.undertow.io.AsyncSenderImpl:void close(io.undertow.io.IoCallback)",
            "io.undertow.protocols.http2.Http2Channel:void flushChannel(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$HttpClientPingTask$1$1:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$ConnectionPoolPingTask$1:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler$ProxyAction$1:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler$HTTPTrailerChannelListener:void handleEvent(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.server.handlers.sse.ServerSentEventConnection:void close(java.io.IOException)",
            "io.undertow.server.handlers.sse.ServerSentEventHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.sse.ServerSentEventConnection$SseWriteListener:void handleEvent(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.server.protocol.http.HttpContinue:void internalSendContinueResponse(io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)",
            "io.undertow.server.protocol.http.HttpContinue$2:boolean send()",
            "io.undertow.util.StringWriteChannelListener:void writeDone(org.xnio.channels.StreamSinkChannel)"
        ]
    },
    "io.undertow.websockets.core.BinaryOutputStream:void flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.util.FlexBase64$DecoderOutputStream:void flush()",
            "io.undertow.util.FlexBase64$DecoderOutputStream:void close()",
            "io.undertow.util.FlexBase64$EncoderOutputStream:void flush()",
            "io.undertow.util.FlexBase64$EncoderOutputStream:void complete()",
            "io.undertow.util.FlexBase64$EncoderOutputStream:void close()"
        ]
    },
    "io.undertow.channels.DetachableStreamSinkChannel:long write(java.nio.ByteBuffer[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.channels.DetachableStreamSinkChannel:long write(java.nio.ByteBuffer[],int,int)",
            "io.undertow.io.AsyncSenderImpl$3:void handleEvent(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.server.HttpServerExchange$WriteDispatchChannel:long write(java.nio.ByteBuffer[],int,int)"
        ]
    },
    "io.undertow.io.AsyncSenderImpl$3:void handleEvent(org.xnio.channels.StreamSinkChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.AsyncSenderImpl$3:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.server.protocol.framed.AbstractFramedStreamSinkChannel:long write(java.nio.ByteBuffer[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.channels.DetachableStreamSinkChannel:long write(java.nio.ByteBuffer[])",
            "io.undertow.io.AsyncSenderImpl:void send(java.nio.ByteBuffer[],io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void invokeOnComplete()"
        ]
    },
    "io.undertow.channels.DetachableStreamSinkChannel:int write(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.channels.DetachableStreamSinkChannel:int write(java.nio.ByteBuffer)",
            "io.undertow.io.UndertowOutputStream:void writeBufferBlocking(boolean)",
            "io.undertow.io.AsyncSenderImpl:void send(java.nio.ByteBuffer,io.undertow.io.IoCallback)",
            "io.undertow.server.handlers.sse.ServerSentEventConnection$SseWriteListener:void handleEvent(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:long transferTo(long,java.nio.ByteBuffer,org.xnio.channels.StreamSinkChannel)",
            "io.undertow.server.HttpServerExchange$WriteDispatchChannel:int write(java.nio.ByteBuffer)",
            "io.undertow.server.HttpServerExchange$ReadDispatchChannel:long transferTo(long,java.nio.ByteBuffer,org.xnio.channels.StreamSinkChannel)",
            "io.undertow.util.Transfer:void initiateTransfer(org.xnio.channels.StreamSourceChannel,org.xnio.channels.StreamSinkChannel,org.xnio.ChannelListener,org.xnio.ChannelListener,org.xnio.ChannelExceptionHandler,org.xnio.ChannelExceptionHandler,io.undertow.connector.ByteBufferPool)",
            "io.undertow.util.StringWriteChannelListener:void setup(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.util.StringWriteChannelListener:void handleEvent(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.util.Transfer$TransferListener:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.io.UndertowOutputStream:void writeBufferBlocking(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.UndertowOutputStream:void write(byte[],int,int)",
            "io.undertow.io.UndertowOutputStream:void flush()",
            "io.undertow.io.UndertowOutputStream:void transferFrom(java.nio.channels.FileChannel)",
            "io.undertow.io.UndertowOutputStream:void close()"
        ]
    },
    "io.undertow.protocols.http2.Http2Channel:io.undertow.protocols.http2.AbstractHttp2StreamSourceChannel createChannel(io.undertow.server.protocol.framed.FrameHeaderData,io.undertow.connector.PooledByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.http2.Http2Channel:io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel createChannel(io.undertow.server.protocol.framed.FrameHeaderData,io.undertow.connector.PooledByteBuffer)"
        ]
    },
    "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:io.undertow.server.protocol.framed.SendFrameHeader generateSendFrameHeader()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.ajp.AjpClientFramePriority:boolean insertFrame(io.undertow.protocols.ajp.AbstractAjpClientStreamSinkChannel,java.util.List)",
            "io.undertow.protocols.ajp.AjpClientFramePriority:void frameAdded(io.undertow.protocols.ajp.AbstractAjpClientStreamSinkChannel,java.util.List,java.util.Deque)"
        ]
    },
    "io.undertow.protocols.http2.Http2DataStreamSinkChannel:void channelForciblyClosed()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.framed.AbstractFramedStreamSinkChannel:void close()"
        ]
    },
    "io.undertow.server.protocol.framed.AbstractFramedChannel$6:void handleException(org.xnio.channels.SuspendableWriteChannel,java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.framed.AbstractFramedChannel$6:void handleException(java.nio.channels.Channel,java.io.IOException)"
        ]
    },
    "io.undertow.server.protocol.framed.AbstractFramedStreamSinkChannel:void channelForciblyClosed()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void channelForciblyClosed()",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSinkChannel:void close()"
        ]
    },
    "io.undertow.server.protocol.framed.AbstractFramedStreamSinkChannel:void preWrite()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.framed.AbstractFramedChannel:void flushSenders()"
        ]
    },
    "io.undertow.websockets.core.WebSocketFramePriority:void frameAdded(io.undertow.websockets.core.StreamSinkFrameChannel,java.util.List,java.util.Deque)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.WebSocketFramePriority:void frameAdded(io.undertow.server.protocol.framed.AbstractFramedStreamSinkChannel,java.util.List,java.util.Deque)"
        ]
    },
    "io.undertow.websockets.core.WebSocketFramePriority:boolean insertFrame(io.undertow.server.protocol.framed.AbstractFramedStreamSinkChannel,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.framed.AbstractFramedChannel:void flushSenders()"
        ]
    },
    "io.undertow.server.handlers.cache.ResponseCachingSender:void send(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.cache.ResponseCachingSender:void send(java.nio.ByteBuffer)",
            "io.undertow.server.handlers.resource.DirectoryUtils:boolean sendRequestedBlobs(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.websockets.core.protocol.Handshake:void writePayload(io.undertow.websockets.spi.WebSocketHttpExchange,java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.protocol.Handshake:void upgradeChannel(io.undertow.websockets.spi.WebSocketHttpExchange,byte[])"
        ]
    },
    "io.undertow.server.handlers.cache.ResponseCachingSender:void send(java.nio.ByteBuffer[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.cache.ResponseCachingSender:void send(java.nio.ByteBuffer[])"
        ]
    },
    "io.undertow.server.handlers.cache.ResponseCachingSender:void close(io.undertow.io.IoCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.DefaultIoCallback:void onComplete(io.undertow.server.HttpServerExchange,io.undertow.io.Sender)"
        ]
    },
    "io.undertow.server.handlers.cache.ResponseCachingSender:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.cache.ResponseCachingSender:void close(io.undertow.io.IoCallback)",
            "io.undertow.server.handlers.cache.ResponseCachingSender:void close()"
        ]
    },
    "io.undertow.protocols.http2.Http2Channel:void sendSettings()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.http2.Http2Channel:void <init>(org.xnio.StreamConnection,java.lang.String,io.undertow.connector.ByteBufferPool,io.undertow.connector.PooledByteBuffer,boolean,boolean,boolean,java.nio.ByteBuffer,org.xnio.OptionMap)",
            "io.undertow.protocols.http2.Http2Channel:void sendSettingsAck()"
        ]
    },
    "io.undertow.protocols.http2.Http2Channel:void sendSettingsAck()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.http2.Http2Channel:io.undertow.protocols.http2.AbstractHttp2StreamSourceChannel createChannelImpl(io.undertow.server.protocol.framed.FrameHeaderData,io.undertow.connector.PooledByteBuffer)"
        ]
    },
    "io.undertow.protocols.http2.Http2Channel:void sendPreface()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.http2.Http2Channel:void <init>(org.xnio.StreamConnection,java.lang.String,io.undertow.connector.ByteBufferPool,io.undertow.connector.PooledByteBuffer,boolean,boolean,boolean,java.nio.ByteBuffer,org.xnio.OptionMap)"
        ]
    },
    "io.undertow.protocols.http2.Http2Channel:void sendRstStream(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http2.Http2ClientConnection$Http2ReceiveListener:void handleEvent(io.undertow.protocols.http2.Http2Channel)",
            "io.undertow.protocols.http2.Http2StreamSourceChannel:void channelForciblyClosed()",
            "io.undertow.protocols.http2.Http2StreamSourceChannel:void updateContentSize(long,boolean)",
            "io.undertow.protocols.http2.Http2Channel:io.undertow.protocols.http2.AbstractHttp2StreamSourceChannel createChannelImpl(io.undertow.server.protocol.framed.FrameHeaderData,io.undertow.connector.PooledByteBuffer)",
            "io.undertow.protocols.http2.Http2Channel:void handleWindowUpdate(int,int)",
            "io.undertow.protocols.http2.Http2StreamSinkChannel:void channelForciblyClosed()",
            "io.undertow.protocols.http2.Http2StreamSinkChannel:void updateFlowControlWindow(int)",
            "io.undertow.server.protocol.http2.Http2ReceiveListener:void handleRequests(io.undertow.protocols.http2.Http2Channel,io.undertow.protocols.http2.Http2StreamSourceChannel)",
            "io.undertow.server.protocol.http2.Http2ServerConnection$2:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)",
            "io.undertow.server.protocol.http2.Http2ServerConnection:void close()"
        ]
    },
    "io.undertow.protocols.http2.Http2StreamSourceChannel:void updateFlowControlWindow(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.http2.Http2StreamSourceChannel:void handleHeaderData(io.undertow.server.protocol.framed.FrameHeaderData)",
            "io.undertow.protocols.http2.Http2StreamSourceChannel:int read(java.nio.ByteBuffer)",
            "io.undertow.protocols.http2.Http2StreamSourceChannel:long read(java.nio.ByteBuffer[],int,int)",
            "io.undertow.protocols.http2.Http2StreamSourceChannel:long read(java.nio.ByteBuffer[])",
            "io.undertow.protocols.http2.Http2StreamSourceChannel:long transferTo(long,java.nio.ByteBuffer,org.xnio.channels.StreamSinkChannel)",
            "io.undertow.protocols.http2.Http2StreamSourceChannel:long transferTo(long,long,java.nio.channels.FileChannel)"
        ]
    },
    "io.undertow.protocols.http2.Http2Channel:void updateReceiveFlowControlWindow(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.http2.Http2StreamSourceChannel:void updateFlowControlWindow(int)"
        ]
    },
    "io.undertow.protocols.http2.Http2Channel:void sendPing(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http2.Http2ClientConnection$Http2ReceiveListener:void handlePing(io.undertow.protocols.http2.Http2PingStreamSourceChannel)"
        ]
    },
    "io.undertow.client.http2.Http2ClientConnection:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpClientConnection:void close()",
            "io.undertow.client.http2.Http2ClientConnection$Http2ReceiveListener:void handleEvent(io.undertow.protocols.http2.Http2Channel)"
        ]
    },
    "io.undertow.protocols.http2.Http2Channel:void lastDataRead()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.framed.AbstractFramedChannel:io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel receive()"
        ]
    },
    "io.undertow.protocols.http2.Http2Channel:boolean updateSettings(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.http2.Http2Channel:void <init>(org.xnio.StreamConnection,java.lang.String,io.undertow.connector.ByteBufferPool,io.undertow.connector.PooledByteBuffer,boolean,boolean,boolean,java.nio.ByteBuffer,org.xnio.OptionMap)",
            "io.undertow.protocols.http2.Http2Channel:io.undertow.protocols.http2.AbstractHttp2StreamSourceChannel createChannelImpl(io.undertow.server.protocol.framed.FrameHeaderData,io.undertow.connector.PooledByteBuffer)"
        ]
    },
    "io.undertow.protocols.http2.Http2Channel:void removeStreamSink(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.http2.Http2StreamSinkChannel:void channelForciblyClosed()",
            "io.undertow.protocols.http2.Http2StreamSinkChannel:void handleFlushComplete(boolean)",
            "io.undertow.protocols.http2.Http2StreamSinkChannel:void rstStream()"
        ]
    },
    "io.undertow.protocols.http2.Http2Channel$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.ssl.SslConduit$5:void run()",
            "io.undertow.protocols.ssl.SslConduit:void runReadListener(boolean)",
            "io.undertow.protocols.ssl.SslConduit:boolean handleHandshakeResult(javax.net.ssl.SSLEngineResult)",
            "io.undertow.protocols.ssl.SslConduit$2:void run()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$FrameReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$3:void run()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel:void runInIoThread(java.lang.Runnable)",
            "io.undertow.server.protocol.http.ALPNLimitingSSLEngine:void limitCiphers(java.util.List)",
            "io.undertow.server.protocol.ParseTimeoutUpdater:void run()",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:io.undertow.server.HttpServerExchange dispatch(java.util.concurrent.Executor,java.lang.Runnable)",
            "io.undertow.util.SameThreadExecutor:void execute(java.lang.Runnable)",
            "io.undertow.util.PipeliningExecutor$1:void run()"
        ]
    },
    "io.undertow.protocols.http2.Http2FrameHeaderParser:boolean handle(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.http2.Http2Channel:io.undertow.server.protocol.framed.FrameHeaderData parseFrame(java.nio.ByteBuffer)"
        ]
    },
    "io.undertow.protocols.http2.Http2FrameHeaderParser:io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel getExistingChannel()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.framed.AbstractFramedChannel:io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel receive()"
        ]
    },
    "io.undertow.server.handlers.sse.ServerSentEventConnection:void send(java.lang.String,java.lang.String,java.lang.String,io.undertow.server.handlers.sse.ServerSentEventConnection$EventCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.sse.ServerSentEventConnection:void send(java.lang.String)",
            "io.undertow.server.handlers.sse.ServerSentEventConnection:void send(java.lang.String,io.undertow.server.handlers.sse.ServerSentEventConnection$EventCallback)"
        ]
    },
    "io.undertow.server.handlers.sse.ServerSentEventConnection:void sendRetry(long,io.undertow.server.handlers.sse.ServerSentEventConnection$EventCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.sse.ServerSentEventConnection:void sendRetry(long)"
        ]
    },
    "io.undertow.server.handlers.proxy.ProxyHandler$ProxyAction$1$1:void handleContinue(io.undertow.client.ClientExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientExchange:void setContinueResponse(io.undertow.client.ClientResponse)",
            "io.undertow.client.http.HttpClientExchange:void setContinueResponse(io.undertow.client.ClientResponse)",
            "io.undertow.client.http2.Http2ClientExchange:void setContinueResponse(io.undertow.client.ClientResponse)"
        ]
    },
    "io.undertow.server.HttpServerExchange:void access$000(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.HttpServerExchange$2:void handleEvent(org.xnio.channels.StreamSourceChannel)"
        ]
    },
    "io.undertow.server.protocol.http.HttpReadListener:boolean handleHttp2PriorKnowledge(io.undertow.connector.PooledByteBuffer,io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.http.HttpReadListener:void handleEventWithNoRunningRequest(org.xnio.conduits.ConduitStreamSourceChannel)"
        ]
    },
    "io.undertow.websockets.core.WebSockets:void sendText(io.undertow.connector.PooledByteBuffer,io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.websockets.core.WebSockets:void sendText(io.undertow.connector.PooledByteBuffer,io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.websockets.core.WebSockets:void sendText(io.undertow.connector.PooledByteBuffer,io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.websockets.core.WebSockets:void sendText(io.undertow.connector.PooledByteBuffer,io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback,java.lang.Object,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.websockets.core.WebSockets:void sendPing(io.undertow.connector.PooledByteBuffer,io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.websockets.core.WebSockets:void sendPing(io.undertow.connector.PooledByteBuffer,io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.websockets.core.WebSockets:void sendPing(io.undertow.connector.PooledByteBuffer,io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.websockets.core.WebSockets:void sendPing(io.undertow.connector.PooledByteBuffer,io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback,java.lang.Object,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.websockets.core.WebSockets:void sendPong(io.undertow.connector.PooledByteBuffer,io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.websockets.core.WebSockets:void sendPong(io.undertow.connector.PooledByteBuffer,io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.websockets.core.WebSockets:void sendPong(io.undertow.connector.PooledByteBuffer,io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.websockets.core.WebSockets:void sendPong(io.undertow.connector.PooledByteBuffer,io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback,java.lang.Object,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.websockets.core.WebSockets:void sendBinary(io.undertow.connector.PooledByteBuffer,io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.websockets.core.WebSockets:void sendBinary(io.undertow.connector.PooledByteBuffer,io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.websockets.core.WebSockets:void sendBinary(io.undertow.connector.PooledByteBuffer,io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.websockets.core.WebSockets:void sendBinary(io.undertow.connector.PooledByteBuffer,io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback,java.lang.Object,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.websockets.core.WebSockets:void sendInternal(java.nio.ByteBuffer,io.undertow.websockets.core.WebSocketFrameType,io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback,java.lang.Object,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.WebSockets:void sendText(java.lang.String,io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback,java.lang.Object)",
            "io.undertow.websockets.core.WebSockets:void sendText(java.lang.String,io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback,java.lang.Object,long)",
            "io.undertow.websockets.core.WebSockets:void sendText(java.nio.ByteBuffer,io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback)",
            "io.undertow.websockets.core.WebSockets:void sendText(java.nio.ByteBuffer,io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback,java.lang.Object)",
            "io.undertow.websockets.core.WebSockets:void sendText(java.nio.ByteBuffer,io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback,long)",
            "io.undertow.websockets.core.WebSockets:void sendText(java.nio.ByteBuffer,io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback,java.lang.Object,long)",
            "io.undertow.websockets.core.WebSockets:void sendPing(java.nio.ByteBuffer,io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback)",
            "io.undertow.websockets.core.WebSockets:void sendPing(java.nio.ByteBuffer,io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback,java.lang.Object)",
            "io.undertow.websockets.core.WebSockets:void sendPing(java.nio.ByteBuffer,io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback,long)",
            "io.undertow.websockets.core.WebSockets:void sendPing(java.nio.ByteBuffer,io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback,java.lang.Object,long)",
            "io.undertow.websockets.core.WebSockets:void sendPing(java.nio.ByteBuffer[],io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback)",
            "io.undertow.websockets.core.WebSockets:void sendPing(java.nio.ByteBuffer[],io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback,java.lang.Object)",
            "io.undertow.websockets.core.WebSockets:void sendPing(java.nio.ByteBuffer[],io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback,long)",
            "io.undertow.websockets.core.WebSockets:void sendPing(java.nio.ByteBuffer[],io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback,java.lang.Object,long)",
            "io.undertow.websockets.core.WebSockets:void sendPong(java.nio.ByteBuffer,io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback)",
            "io.undertow.websockets.core.WebSockets:void sendPong(java.nio.ByteBuffer,io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback,java.lang.Object)",
            "io.undertow.websockets.core.WebSockets:void sendPong(java.nio.ByteBuffer,io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback,long)",
            "io.undertow.websockets.core.WebSockets:void sendPong(java.nio.ByteBuffer,io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback,java.lang.Object,long)",
            "io.undertow.websockets.core.WebSockets:void sendPong(java.nio.ByteBuffer[],io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback)",
            "io.undertow.websockets.core.WebSockets:void sendPong(java.nio.ByteBuffer[],io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback,java.lang.Object)",
            "io.undertow.websockets.core.WebSockets:void sendPong(java.nio.ByteBuffer[],io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback,long)",
            "io.undertow.websockets.core.WebSockets:void sendPong(java.nio.ByteBuffer[],io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback,java.lang.Object,long)",
            "io.undertow.websockets.core.WebSockets:void sendBinary(java.nio.ByteBuffer,io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback)",
            "io.undertow.websockets.core.WebSockets:void sendBinary(java.nio.ByteBuffer,io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback,java.lang.Object)",
            "io.undertow.websockets.core.WebSockets:void sendBinary(java.nio.ByteBuffer,io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback,long)",
            "io.undertow.websockets.core.WebSockets:void sendBinary(java.nio.ByteBuffer,io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback,java.lang.Object,long)",
            "io.undertow.websockets.core.WebSockets:void sendBinary(java.nio.ByteBuffer[],io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback)",
            "io.undertow.websockets.core.WebSockets:void sendBinary(java.nio.ByteBuffer[],io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback,java.lang.Object)",
            "io.undertow.websockets.core.WebSockets:void sendBinary(java.nio.ByteBuffer[],io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback,long)",
            "io.undertow.websockets.core.WebSockets:void sendBinary(java.nio.ByteBuffer[],io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback,java.lang.Object,long)",
            "io.undertow.websockets.core.WebSockets:void sendClose(io.undertow.websockets.core.CloseMessage,io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback,java.lang.Object)"
        ]
    },
    "io.undertow.server.handlers.proxy.mod_cluster.ModClusterProxyClient$1:void failed(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.mod_cluster.ModClusterProxyClient$1:void failed(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.Context:void handleRequest(io.undertow.server.handlers.proxy.mod_cluster.ModClusterProxyTarget,io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.ProxyCallback,long,java.util.concurrent.TimeUnit,boolean)",
            "io.undertow.server.handlers.proxy.ProxyConnectionPool:void redistributeQueued(io.undertow.server.handlers.proxy.ProxyConnectionPool$HostThreadData)",
            "io.undertow.server.handlers.proxy.ProxyConnectionPool:void connectionReady(io.undertow.server.handlers.proxy.ProxyConnectionPool$ConnectionHolder,io.undertow.server.handlers.proxy.ProxyCallback,io.undertow.server.HttpServerExchange,boolean)",
            "io.undertow.server.handlers.proxy.ProxyConnectionPool$CallbackHolder:void run()",
            "io.undertow.server.handlers.proxy.ProxyConnectionPool$2:void failed(java.io.IOException)",
            "io.undertow.server.handlers.proxy.SimpleProxyClientProvider$ConnectNotifier:void failed(java.io.IOException)",
            "io.undertow.server.handlers.proxy.LoadBalancingProxyClient$2:void failed(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.proxy.mod_cluster.Context:void handleRequest(io.undertow.server.handlers.proxy.mod_cluster.ModClusterProxyTarget,io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.ProxyCallback,long,java.util.concurrent.TimeUnit,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.mod_cluster.ModClusterProxyClient:void getConnection(io.undertow.server.handlers.proxy.ProxyClient$ProxyTarget,io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.ProxyCallback,long,java.util.concurrent.TimeUnit)"
        ]
    },
    "io.undertow.server.handlers.proxy.ProxyConnectionPool:void redistributeQueued(io.undertow.server.handlers.proxy.ProxyConnectionPool$HostThreadData)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.ProxyConnectionPool:void returnConnection(io.undertow.server.handlers.proxy.ProxyConnectionPool$ConnectionHolder)",
            "io.undertow.server.handlers.proxy.ProxyConnectionPool:void access$1200(io.undertow.server.handlers.proxy.ProxyConnectionPool,io.undertow.server.handlers.proxy.ProxyConnectionPool$HostThreadData)"
        ]
    },
    "io.undertow.server.handlers.proxy.ProxyConnectionPool$CallbackHolder:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.ssl.SslConduit$5:void run()",
            "io.undertow.protocols.ssl.SslConduit:void runReadListener(boolean)",
            "io.undertow.protocols.ssl.SslConduit:boolean handleHandshakeResult(javax.net.ssl.SSLEngineResult)",
            "io.undertow.protocols.ssl.SslConduit$2:void run()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$FrameReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$3:void run()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel:void runInIoThread(java.lang.Runnable)",
            "io.undertow.server.protocol.http.ALPNLimitingSSLEngine:void limitCiphers(java.util.List)",
            "io.undertow.server.protocol.ParseTimeoutUpdater:void run()",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:io.undertow.server.HttpServerExchange dispatch(java.util.concurrent.Executor,java.lang.Runnable)",
            "io.undertow.util.SameThreadExecutor:void execute(java.lang.Runnable)",
            "io.undertow.util.PipeliningExecutor$1:void run()"
        ]
    },
    "io.undertow.server.handlers.proxy.ProxyConnectionPool$2:void failed(java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientProvider$2:void notify(org.xnio.IoFuture,java.lang.Object)",
            "io.undertow.client.ajp.AjpClientProvider$4:void notify(org.xnio.IoFuture,java.lang.Object)",
            "io.undertow.client.ajp.AjpClientExchange:void setResponseListener(io.undertow.client.ClientCallback)",
            "io.undertow.client.ajp.AjpClientExchange:void setFailed(java.io.IOException)",
            "io.undertow.client.ajp.AjpClientConnection:void sendRequest(io.undertow.client.ClientRequest,io.undertow.client.ClientCallback)",
            "io.undertow.client.http.HttpClientProvider:void connect(io.undertow.client.ClientCallback,java.net.InetSocketAddress,java.net.URI,org.xnio.XnioWorker,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)",
            "io.undertow.client.http.HttpClientProvider:void connect(io.undertow.client.ClientCallback,java.net.InetSocketAddress,java.net.URI,org.xnio.XnioIoThread,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)",
            "io.undertow.client.http.HttpClientProvider:void handleConnected(org.xnio.StreamConnection,io.undertow.client.ClientCallback,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap,java.net.URI)",
            "io.undertow.client.http.HttpClientProvider$1:void notify(org.xnio.IoFuture,java.lang.Object)",
            "io.undertow.client.http.HttpClientExchange:void setResponseListener(io.undertow.client.ClientCallback)",
            "io.undertow.client.http.HttpClientExchange:void setFailed(java.io.IOException)",
            "io.undertow.client.http.HttpClientConnection:void sendRequest(io.undertow.client.ClientRequest,io.undertow.client.ClientCallback)",
            "io.undertow.client.http2.Http2PriorKnowledgeClientProvider:void handleConnected(org.xnio.StreamConnection,io.undertow.client.ClientCallback,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap,java.lang.String)",
            "io.undertow.client.http2.Http2ClientProvider$2:void notify(org.xnio.IoFuture,java.lang.Object)",
            "io.undertow.client.http2.Http2PriorKnowledgeClientProvider$5:void handleEvent(org.xnio.conduits.ConduitStreamSinkChannel)",
            "io.undertow.client.http2.Http2ClientProvider:void connect(io.undertow.client.ClientCallback,java.net.InetSocketAddress,java.net.URI,org.xnio.XnioWorker,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)",
            "io.undertow.client.http2.Http2ClientProvider:void connect(io.undertow.client.ClientCallback,java.net.InetSocketAddress,java.net.URI,org.xnio.XnioIoThread,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)",
            "io.undertow.client.http2.Http2ClientExchange:void setResponseListener(io.undertow.client.ClientCallback)",
            "io.undertow.client.http2.Http2ClientExchange:void failed(java.io.IOException)",
            "io.undertow.client.http2.Http2ClearClientProvider:void connect(io.undertow.client.ClientCallback,java.net.InetSocketAddress,java.net.URI,org.xnio.XnioWorker,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)",
            "io.undertow.client.http2.Http2ClearClientProvider:void connect(io.undertow.client.ClientCallback,java.net.InetSocketAddress,java.net.URI,org.xnio.XnioIoThread,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)",
            "io.undertow.client.http2.Http2PriorKnowledgeClientProvider$1:void notify(org.xnio.IoFuture,java.lang.Object)",
            "io.undertow.client.http2.Http2ClearClientProvider$FailedNotifier:void notify(org.xnio.IoFuture,java.lang.Object)",
            "io.undertow.client.http2.Http2ClientConnection:void sendRequest(io.undertow.client.ClientRequest,io.undertow.client.ClientCallback)",
            "io.undertow.client.ALPNClientSelector$2:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ALPNClientSelector:void runAlpn(org.xnio.ssl.SslConnection,org.xnio.ChannelListener,io.undertow.client.ClientCallback,io.undertow.client.ALPNClientSelector$ALPNProtocol[])"
        ]
    },
    "io.undertow.server.handlers.proxy.ProxyHandler$ProxyClientHandler:void queuedRequestFailed(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.mod_cluster.ModClusterProxyClient$1:void queuedRequestFailed(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyConnectionPool:void redistributeQueued(io.undertow.server.handlers.proxy.ProxyConnectionPool$HostThreadData)",
            "io.undertow.server.handlers.proxy.ProxyConnectionPool:void connect(io.undertow.server.handlers.proxy.ProxyClient$ProxyTarget,io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.ProxyCallback,long,java.util.concurrent.TimeUnit,boolean)",
            "io.undertow.server.handlers.proxy.LoadBalancingProxyClient$2:void queuedRequestFailed(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.proxy.SimpleProxyClientProvider$ConnectNotifier:void failed(java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientProvider$2:void notify(org.xnio.IoFuture,java.lang.Object)",
            "io.undertow.client.ajp.AjpClientProvider$4:void notify(org.xnio.IoFuture,java.lang.Object)",
            "io.undertow.client.ajp.AjpClientExchange:void setResponseListener(io.undertow.client.ClientCallback)",
            "io.undertow.client.ajp.AjpClientExchange:void setFailed(java.io.IOException)",
            "io.undertow.client.ajp.AjpClientConnection:void sendRequest(io.undertow.client.ClientRequest,io.undertow.client.ClientCallback)",
            "io.undertow.client.http.HttpClientProvider:void connect(io.undertow.client.ClientCallback,java.net.InetSocketAddress,java.net.URI,org.xnio.XnioWorker,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)",
            "io.undertow.client.http.HttpClientProvider:void connect(io.undertow.client.ClientCallback,java.net.InetSocketAddress,java.net.URI,org.xnio.XnioIoThread,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)",
            "io.undertow.client.http.HttpClientProvider:void handleConnected(org.xnio.StreamConnection,io.undertow.client.ClientCallback,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap,java.net.URI)",
            "io.undertow.client.http.HttpClientProvider$1:void notify(org.xnio.IoFuture,java.lang.Object)",
            "io.undertow.client.http.HttpClientExchange:void setResponseListener(io.undertow.client.ClientCallback)",
            "io.undertow.client.http.HttpClientExchange:void setFailed(java.io.IOException)",
            "io.undertow.client.http.HttpClientConnection:void sendRequest(io.undertow.client.ClientRequest,io.undertow.client.ClientCallback)",
            "io.undertow.client.http2.Http2PriorKnowledgeClientProvider:void handleConnected(org.xnio.StreamConnection,io.undertow.client.ClientCallback,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap,java.lang.String)",
            "io.undertow.client.http2.Http2ClientProvider$2:void notify(org.xnio.IoFuture,java.lang.Object)",
            "io.undertow.client.http2.Http2PriorKnowledgeClientProvider$5:void handleEvent(org.xnio.conduits.ConduitStreamSinkChannel)",
            "io.undertow.client.http2.Http2ClientProvider:void connect(io.undertow.client.ClientCallback,java.net.InetSocketAddress,java.net.URI,org.xnio.XnioWorker,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)",
            "io.undertow.client.http2.Http2ClientProvider:void connect(io.undertow.client.ClientCallback,java.net.InetSocketAddress,java.net.URI,org.xnio.XnioIoThread,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)",
            "io.undertow.client.http2.Http2ClientExchange:void setResponseListener(io.undertow.client.ClientCallback)",
            "io.undertow.client.http2.Http2ClientExchange:void failed(java.io.IOException)",
            "io.undertow.client.http2.Http2ClearClientProvider:void connect(io.undertow.client.ClientCallback,java.net.InetSocketAddress,java.net.URI,org.xnio.XnioWorker,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)",
            "io.undertow.client.http2.Http2ClearClientProvider:void connect(io.undertow.client.ClientCallback,java.net.InetSocketAddress,java.net.URI,org.xnio.XnioIoThread,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)",
            "io.undertow.client.http2.Http2PriorKnowledgeClientProvider$1:void notify(org.xnio.IoFuture,java.lang.Object)",
            "io.undertow.client.http2.Http2ClearClientProvider$FailedNotifier:void notify(org.xnio.IoFuture,java.lang.Object)",
            "io.undertow.client.http2.Http2ClientConnection:void sendRequest(io.undertow.client.ClientRequest,io.undertow.client.ClientCallback)",
            "io.undertow.client.ALPNClientSelector$2:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ALPNClientSelector:void runAlpn(org.xnio.ssl.SslConnection,org.xnio.ChannelListener,io.undertow.client.ClientCallback,io.undertow.client.ALPNClientSelector$ALPNProtocol[])"
        ]
    },
    "io.undertow.server.handlers.proxy.LoadBalancingProxyClient$2:void failed(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.mod_cluster.ModClusterProxyClient$1:void failed(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.Context:void handleRequest(io.undertow.server.handlers.proxy.mod_cluster.ModClusterProxyTarget,io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.ProxyCallback,long,java.util.concurrent.TimeUnit,boolean)",
            "io.undertow.server.handlers.proxy.ProxyConnectionPool:void redistributeQueued(io.undertow.server.handlers.proxy.ProxyConnectionPool$HostThreadData)",
            "io.undertow.server.handlers.proxy.ProxyConnectionPool:void connectionReady(io.undertow.server.handlers.proxy.ProxyConnectionPool$ConnectionHolder,io.undertow.server.handlers.proxy.ProxyCallback,io.undertow.server.HttpServerExchange,boolean)",
            "io.undertow.server.handlers.proxy.ProxyConnectionPool$CallbackHolder:void run()",
            "io.undertow.server.handlers.proxy.ProxyConnectionPool$2:void failed(java.io.IOException)",
            "io.undertow.server.handlers.proxy.SimpleProxyClientProvider$ConnectNotifier:void failed(java.io.IOException)",
            "io.undertow.server.handlers.proxy.LoadBalancingProxyClient$2:void failed(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.proxy.ProxyConnectionPool:void access$1500(io.undertow.server.handlers.proxy.ProxyConnectionPool,io.undertow.server.handlers.proxy.ProxyConnectionPool$ConnectionHolder)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.ProxyConnectionPool$3:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)",
            "io.undertow.server.handlers.proxy.ProxyConnectionPool$4$1:void completed(io.undertow.client.ClientConnection)"
        ]
    },
    "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.ssl.SslConduit$5:void run()",
            "io.undertow.protocols.ssl.SslConduit:void runReadListener(boolean)",
            "io.undertow.protocols.ssl.SslConduit:boolean handleHandshakeResult(javax.net.ssl.SSLEngineResult)",
            "io.undertow.protocols.ssl.SslConduit$2:void run()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$FrameReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$3:void run()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel:void runInIoThread(java.lang.Runnable)",
            "io.undertow.server.protocol.http.ALPNLimitingSSLEngine:void limitCiphers(java.util.List)",
            "io.undertow.server.protocol.ParseTimeoutUpdater:void run()",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:io.undertow.server.HttpServerExchange dispatch(java.util.concurrent.Executor,java.lang.Runnable)",
            "io.undertow.util.SameThreadExecutor:void execute(java.lang.Runnable)",
            "io.undertow.util.PipeliningExecutor$1:void run()"
        ]
    },
    "io.undertow.server.handlers.proxy.ProxyConnectionPool$2:void completed(io.undertow.client.ClientConnection)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.ProxyConnectionPool$2:void completed(java.lang.Object)"
        ]
    },
    "io.undertow.io.AsyncSenderImpl:void send(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.cache.ResponseCachingSender:void send(java.lang.String)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler$1:boolean handleDefaultResponse(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void sendResponse(io.undertow.server.HttpServerExchange,java.lang.String)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPWebManager:void processRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.cache.ResponseCachingSender:void send(java.lang.String,io.undertow.io.IoCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.cache.ResponseCachingSender:void send(java.lang.String,io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.server.handlers.cache.ResponseCachingSender:void send(java.lang.String,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.cache.ResponseCachingSender:void send(java.lang.String,java.nio.charset.Charset)"
        ]
    },
    "io.undertow.io.BlockingSenderImpl:void send(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.cache.ResponseCachingSender:void send(java.nio.ByteBuffer)",
            "io.undertow.server.handlers.resource.DirectoryUtils:boolean sendRequestedBlobs(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.io.BlockingSenderImpl:void send(java.nio.ByteBuffer[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.cache.ResponseCachingSender:void send(java.nio.ByteBuffer[])"
        ]
    },
    "io.undertow.io.BlockingSenderImpl:void send(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.cache.ResponseCachingSender:void send(java.lang.String)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler$1:boolean handleDefaultResponse(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void sendResponse(io.undertow.server.HttpServerExchange,java.lang.String)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPWebManager:void processRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.io.BlockingSenderImpl:void send(java.lang.String,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.cache.ResponseCachingSender:void send(java.lang.String,java.nio.charset.Charset)"
        ]
    },
    "io.undertow.server.Connectors:void terminateRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.FixedLengthStreamSourceConduit:void checkMaxSize(long)",
            "io.undertow.conduits.ChunkedStreamSourceConduit:void updateRemainingAllowed(int)",
            "io.undertow.server.protocol.ajp.AjpReadListener:org.xnio.conduits.StreamSourceConduit createSourceConduit(org.xnio.conduits.StreamSourceConduit,io.undertow.server.protocol.ajp.AjpServerResponseConduit,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.ajp.AjpReadListener$3:void handleEvent(io.undertow.server.protocol.ajp.AjpServerRequestConduit)",
            "io.undertow.server.protocol.http.HttpTransferEncoding$2:void handleEvent(io.undertow.conduits.ChunkedStreamSourceConduit)",
            "io.undertow.server.protocol.http.HttpTransferEncoding:void setupRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http.HttpTransferEncoding:boolean handleRequestEncoding(io.undertow.server.HttpServerExchange,java.lang.String,java.lang.String,io.undertow.server.protocol.http.HttpServerConnection,io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit,boolean)",
            "io.undertow.server.protocol.http.HttpTransferEncoding$1:void handleEvent(io.undertow.conduits.FixedLengthStreamSourceConduit)",
            "io.undertow.server.protocol.http.HttpServerConnection:io.undertow.server.HttpServerExchange sendOutOfBandResponse(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2ReceiveListener:void handleRequests(io.undertow.protocols.http2.Http2Channel,io.undertow.protocols.http2.Http2StreamSourceChannel)",
            "io.undertow.server.protocol.http2.Http2ReceiveListener:void handleInitialRequest(io.undertow.server.HttpServerExchange,io.undertow.protocols.http2.Http2Channel,byte[])",
            "io.undertow.server.protocol.http2.Http2ReceiveListener$2:void handleEvent(io.undertow.protocols.http2.Http2StreamSourceChannel)",
            "io.undertow.server.protocol.http2.Http2ServerConnection:io.undertow.server.HttpServerExchange sendOutOfBandResponse(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http2.Http2ServerConnection:boolean pushResource(java.lang.String,io.undertow.util.HttpString,io.undertow.util.HeaderMap,io.undertow.server.HttpHandler)"
        ]
    },
    "io.undertow.server.Connectors:void terminateResponse(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.ajp.AjpReadListener$1:void handleEvent(io.undertow.server.protocol.ajp.AjpServerResponseConduit)",
            "io.undertow.server.protocol.http.ServerFixedLengthStreamSinkConduit:void channelFinished()",
            "io.undertow.server.protocol.http.HttpTransferEncoding$3:void handleEvent(org.xnio.conduits.StreamSinkConduit)",
            "io.undertow.server.protocol.http2.Http2ReceiveListener$1:void handleEvent(io.undertow.protocols.http2.Http2DataStreamSinkChannel)",
            "io.undertow.server.protocol.http2.Http2ReceiveListener$3:void handleEvent(io.undertow.protocols.http2.Http2DataStreamSinkChannel)"
        ]
    },
    "io.undertow.server.HttpServerExchange$5:void handleException(java.nio.channels.Channel,java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.http2.Http2Channel:void sendPing(byte[],org.xnio.ChannelExceptionHandler,boolean)",
            "io.undertow.protocols.http2.Http2Channel:void sendGoAway(int,org.xnio.ChannelExceptionHandler)"
        ]
    },
    "io.undertow.server.HttpServerExchange$3:void handleException(org.xnio.channels.StreamSourceChannel,java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.HttpServerExchange$3:void handleException(java.nio.channels.Channel,java.io.IOException)"
        ]
    },
    "io.undertow.server.HttpServerExchange$ReadDispatchChannel:long read(java.nio.ByteBuffer[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.channels.DetachableStreamSourceChannel:long read(java.nio.ByteBuffer[])"
        ]
    },
    "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler$RequestData parseFormData(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.websockets.core.BufferedBinaryMessage$1:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection$3:void handleEvent(io.undertow.protocols.ajp.AjpClientChannel)",
            "io.undertow.client.http.HttpClientConnection$5:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.client.http2.Http2ClientConnection$1:void handleEvent(io.undertow.protocols.http2.Http2Channel)",
            "io.undertow.client.ALPNClientSelector$2:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ALPNClientSelector$2:void handleSelected(java.lang.String)",
            "io.undertow.client.ALPNClientSelector:void runAlpn(org.xnio.ssl.SslConnection,org.xnio.ChannelListener,io.undertow.client.ClientCallback,io.undertow.client.ALPNClientSelector$ALPNProtocol[])",
            "io.undertow.protocols.ajp.AjpClientResponseStreamSourceChannel:void complete()",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void handleFlushComplete(boolean)",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void channelForciblyClosed()",
            "io.undertow.protocols.http2.Http2StreamSourceChannel:void channelForciblyClosed()",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$RequestExchangeListener:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void close()"
        ]
    },
    "io.undertow.websockets.core.BufferedTextMessage$1:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection$3:void handleEvent(io.undertow.protocols.ajp.AjpClientChannel)",
            "io.undertow.client.http.HttpClientConnection$5:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.client.http2.Http2ClientConnection$1:void handleEvent(io.undertow.protocols.http2.Http2Channel)",
            "io.undertow.client.ALPNClientSelector$2:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ALPNClientSelector$2:void handleSelected(java.lang.String)",
            "io.undertow.client.ALPNClientSelector:void runAlpn(org.xnio.ssl.SslConnection,org.xnio.ChannelListener,io.undertow.client.ClientCallback,io.undertow.client.ALPNClientSelector$ALPNProtocol[])",
            "io.undertow.protocols.ajp.AjpClientResponseStreamSourceChannel:void complete()",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void handleFlushComplete(boolean)",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void channelForciblyClosed()",
            "io.undertow.protocols.http2.Http2StreamSourceChannel:void channelForciblyClosed()",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$RequestExchangeListener:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void close()"
        ]
    },
    "io.undertow.client.ajp.AjpClientProvider$3:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection$3:void handleEvent(io.undertow.protocols.ajp.AjpClientChannel)",
            "io.undertow.client.http.HttpClientConnection$5:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.client.http2.Http2ClientConnection$1:void handleEvent(io.undertow.protocols.http2.Http2Channel)",
            "io.undertow.client.ALPNClientSelector$2:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ALPNClientSelector$2:void handleSelected(java.lang.String)",
            "io.undertow.client.ALPNClientSelector:void runAlpn(org.xnio.ssl.SslConnection,org.xnio.ChannelListener,io.undertow.client.ClientCallback,io.undertow.client.ALPNClientSelector$ALPNProtocol[])",
            "io.undertow.protocols.ajp.AjpClientResponseStreamSourceChannel:void complete()",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void handleFlushComplete(boolean)",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void channelForciblyClosed()",
            "io.undertow.protocols.http2.Http2StreamSourceChannel:void channelForciblyClosed()",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$RequestExchangeListener:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void close()"
        ]
    },
    "io.undertow.client.ajp.AjpClientProvider$1:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection$3:void handleEvent(io.undertow.protocols.ajp.AjpClientChannel)",
            "io.undertow.client.http.HttpClientConnection$5:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.client.http2.Http2ClientConnection$1:void handleEvent(io.undertow.protocols.http2.Http2Channel)",
            "io.undertow.client.ALPNClientSelector$2:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ALPNClientSelector$2:void handleSelected(java.lang.String)",
            "io.undertow.client.ALPNClientSelector:void runAlpn(org.xnio.ssl.SslConnection,org.xnio.ChannelListener,io.undertow.client.ClientCallback,io.undertow.client.ALPNClientSelector$ALPNProtocol[])",
            "io.undertow.protocols.ajp.AjpClientResponseStreamSourceChannel:void complete()",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void handleFlushComplete(boolean)",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void channelForciblyClosed()",
            "io.undertow.protocols.http2.Http2StreamSourceChannel:void channelForciblyClosed()",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$RequestExchangeListener:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void close()"
        ]
    },
    "io.undertow.client.ajp.AjpClientExchange:void terminateRequest()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection$1:void handleEvent(io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel)"
        ]
    },
    "io.undertow.client.ajp.AjpClientExchange:void terminateResponse()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection$2:void handleEvent(io.undertow.protocols.ajp.AjpClientResponseStreamSourceChannel)"
        ]
    },
    "io.undertow.client.http.HttpClientExchange:void terminateRequest()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpClientConnection$1:void handleEvent(org.xnio.conduits.StreamSinkConduit)",
            "io.undertow.client.http.ClientFixedLengthStreamSinkConduit:void channelFinished()",
            "io.undertow.client.http.HttpClientConnection$ClientReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)"
        ]
    },
    "io.undertow.client.http.HttpClientExchange:void terminateResponse()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpClientConnection$2:void handleEvent(org.xnio.conduits.StreamSourceConduit)"
        ]
    },
    "io.undertow.client.http2.Http2PriorKnowledgeClientProvider$2:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection$3:void handleEvent(io.undertow.protocols.ajp.AjpClientChannel)",
            "io.undertow.client.http.HttpClientConnection$5:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.client.http2.Http2ClientConnection$1:void handleEvent(io.undertow.protocols.http2.Http2Channel)",
            "io.undertow.client.ALPNClientSelector$2:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ALPNClientSelector$2:void handleSelected(java.lang.String)",
            "io.undertow.client.ALPNClientSelector:void runAlpn(org.xnio.ssl.SslConnection,org.xnio.ChannelListener,io.undertow.client.ClientCallback,io.undertow.client.ALPNClientSelector$ALPNProtocol[])",
            "io.undertow.protocols.ajp.AjpClientResponseStreamSourceChannel:void complete()",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void handleFlushComplete(boolean)",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void channelForciblyClosed()",
            "io.undertow.protocols.http2.Http2StreamSourceChannel:void channelForciblyClosed()",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$RequestExchangeListener:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void close()"
        ]
    },
    "io.undertow.server.handlers.accesslog.DefaultAccessLogReceiver:void writeMessage(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.accesslog.DefaultAccessLogReceiver:void run()"
        ]
    },
    "io.undertow.server.handlers.proxy.mod_cluster.MCMPConfig:io.undertow.server.HttpHandler create(io.undertow.server.handlers.proxy.mod_cluster.ModCluster,io.undertow.server.HttpHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPConfig$Builder:io.undertow.server.HttpHandler create(io.undertow.server.handlers.proxy.mod_cluster.ModCluster,io.undertow.server.HttpHandler)"
        ]
    },
    "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler$1:void completed()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$CancellableTask:void taskCompleted()"
        ]
    },
    "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler$1:void failed()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$CancellableTask:void taskFailed()",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$CancellableTask:void cancel()",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void checkHostUp(java.lang.String,java.lang.String,int,io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$PingCallback)",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil:void pingNode(io.undertow.server.handlers.proxy.mod_cluster.Node,io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$PingCallback)",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$1$1:void failed(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$1$1:void queuedRequestFailed(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$1$1:void couldNotResolveBackend(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:boolean handlesMethod(io.undertow.util.HttpString)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPWebManager:boolean handlesMethod(io.undertow.util.HttpString)"
        ]
    },
    "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void processInfo(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPWebManager:void processRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void processDump(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPWebManager:void processRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void access$100(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler$RequestData:void add(io.undertow.util.HttpString,java.util.Deque)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler$RequestData:void addValues(io.undertow.util.HttpString,java.util.Deque)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler$RequestData:void add(io.undertow.util.HttpString,io.undertow.server.handlers.form.FormData$FormValue)"
        ]
    },
    "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler$RequestData:void add(io.undertow.util.HttpString,java.util.Deque)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler$RequestData parseFormData(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler$RequestData:void addValues(io.undertow.util.HttpString,java.util.Deque)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPWebManager:io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler$RequestData buildRequestData(io.undertow.server.HttpServerExchange,java.util.Map)"
        ]
    },
    "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler$RequestData:void add(io.undertow.util.HttpString,io.undertow.server.handlers.form.FormData$FormValue)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler$RequestData:void add(io.undertow.util.HttpString,java.util.Deque)"
        ]
    },
    "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler$3:void completed()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$CancellableTask:void taskCompleted()"
        ]
    },
    "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler$3:void failed()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$CancellableTask:void taskFailed()",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$CancellableTask:void cancel()",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void checkHostUp(java.lang.String,java.lang.String,int,io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$PingCallback)",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil:void pingNode(io.undertow.server.handlers.proxy.mod_cluster.Node,io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$PingCallback)",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$1$1:void failed(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$1$1:void queuedRequestFailed(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$1$1:void couldNotResolveBackend(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler$2:void completed()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$CancellableTask:void taskCompleted()"
        ]
    },
    "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler$2:void failed()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$CancellableTask:void taskFailed()",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$CancellableTask:void cancel()",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void checkHostUp(java.lang.String,java.lang.String,int,io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$PingCallback)",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil:void pingNode(io.undertow.server.handlers.proxy.mod_cluster.Node,io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$PingCallback)",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$1$1:void failed(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$1$1:void queuedRequestFailed(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$1$1:void couldNotResolveBackend(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.io.BlockingReceiverImpl:void receiveFullString(io.undertow.io.Receiver$FullStringCallback,io.undertow.io.Receiver$ErrorCallback)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.io.BlockingReceiverImpl:void receiveFullString(io.undertow.io.Receiver$FullStringCallback)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.io.BlockingReceiverImpl:void receiveFullString(io.undertow.io.Receiver$FullStringCallback,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.io.BlockingReceiverImpl:void receivePartialString(io.undertow.io.Receiver$PartialStringCallback,io.undertow.io.Receiver$ErrorCallback)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.io.BlockingReceiverImpl:void receivePartialString(io.undertow.io.Receiver$PartialStringCallback)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.io.BlockingReceiverImpl:void receivePartialString(io.undertow.io.Receiver$PartialStringCallback,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.io.BlockingReceiverImpl:void receiveFullBytes(io.undertow.io.Receiver$FullBytesCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.http2.Http2UpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.io.AsyncSenderImpl:void access$500(io.undertow.io.AsyncSenderImpl,io.undertow.io.IoCallback,java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.AsyncSenderImpl$3:void handleEvent(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.io.AsyncSenderImpl$2:void handleException(org.xnio.channels.StreamSinkChannel,java.io.IOException)",
            "io.undertow.io.AsyncSenderImpl$TransferTask:boolean run(boolean)"
        ]
    },
    "io.undertow.io.BlockingSenderImpl:boolean writeBuffer(java.nio.ByteBuffer,io.undertow.io.IoCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.BlockingSenderImpl:void send(java.nio.ByteBuffer,io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:void invokeOnComplete(io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void processCommand(io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler$RequestData,io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler$MCMPAction)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.proxy.mod_cluster.MCMPWebManager:void processRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPWebManager:void handleRequest(io.undertow.util.HttpString,io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.client.ajp.AjpClientProvider$2:void notify(org.xnio.IoFuture,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.client.ajp.AjpClientProvider$4:void notify(org.xnio.IoFuture,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.client.ajp.AjpClientExchange:void setFailed(java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection$ClientReceiveListener:void handleEvent(io.undertow.protocols.ajp.AjpClientChannel)",
            "io.undertow.client.ajp.AjpClientConnection:void handleError(java.io.IOException)",
            "io.undertow.client.ajp.AjpClientConnection$3:void handleEvent(io.undertow.protocols.ajp.AjpClientChannel)"
        ]
    },
    "io.undertow.client.http.HttpClientProvider:void connect(io.undertow.client.ClientCallback,java.net.InetSocketAddress,java.net.URI,org.xnio.XnioWorker,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpClientProvider:void connect(io.undertow.client.ClientCallback,java.net.URI,org.xnio.XnioWorker,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)",
            "io.undertow.client.UndertowClient:org.xnio.IoFuture connect(java.net.InetSocketAddress,java.net.URI,org.xnio.XnioWorker,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)",
            "io.undertow.client.UndertowClient:void connect(io.undertow.client.ClientCallback,java.net.InetSocketAddress,java.net.URI,org.xnio.XnioWorker,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)"
        ]
    },
    "io.undertow.client.http.HttpClientProvider:void connect(io.undertow.client.ClientCallback,java.net.InetSocketAddress,java.net.URI,org.xnio.XnioIoThread,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpClientProvider:void connect(io.undertow.client.ClientCallback,java.net.URI,org.xnio.XnioIoThread,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)",
            "io.undertow.client.UndertowClient:org.xnio.IoFuture connect(java.net.InetSocketAddress,java.net.URI,org.xnio.XnioIoThread,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)",
            "io.undertow.client.UndertowClient:void connect(io.undertow.client.ClientCallback,java.net.InetSocketAddress,java.net.URI,org.xnio.XnioIoThread,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)"
        ]
    },
    "io.undertow.client.http.HttpClientProvider$1:void notify(org.xnio.IoFuture,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.client.http.HttpClientExchange:void setFailed(java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpClientConnection$5:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.client.http.HttpClientConnection$ClientReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.http.HttpClientConnection:void handleError(java.io.IOException)"
        ]
    },
    "io.undertow.client.http2.Http2ClientProvider$2:void notify(org.xnio.IoFuture,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.client.http2.Http2ClientProvider:void connect(io.undertow.client.ClientCallback,java.net.InetSocketAddress,java.net.URI,org.xnio.XnioWorker,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http2.Http2ClientProvider:void connect(io.undertow.client.ClientCallback,java.net.URI,org.xnio.XnioWorker,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)",
            "io.undertow.client.UndertowClient:org.xnio.IoFuture connect(java.net.InetSocketAddress,java.net.URI,org.xnio.XnioWorker,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)",
            "io.undertow.client.UndertowClient:void connect(io.undertow.client.ClientCallback,java.net.InetSocketAddress,java.net.URI,org.xnio.XnioWorker,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)"
        ]
    },
    "io.undertow.client.http2.Http2ClientProvider:void connect(io.undertow.client.ClientCallback,java.net.InetSocketAddress,java.net.URI,org.xnio.XnioIoThread,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http2.Http2ClientProvider:void connect(io.undertow.client.ClientCallback,java.net.URI,org.xnio.XnioIoThread,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)",
            "io.undertow.client.UndertowClient:org.xnio.IoFuture connect(java.net.InetSocketAddress,java.net.URI,org.xnio.XnioIoThread,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)",
            "io.undertow.client.UndertowClient:void connect(io.undertow.client.ClientCallback,java.net.InetSocketAddress,java.net.URI,org.xnio.XnioIoThread,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)"
        ]
    },
    "io.undertow.client.http2.Http2ClientExchange:void setResponseListener(io.undertow.client.ClientCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http2.Http2ClientConnection:void <init>(io.undertow.protocols.http2.Http2Channel,io.undertow.client.ClientCallback,io.undertow.client.ClientRequest,java.lang.String,io.undertow.client.ClientStatistics,boolean)",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$HttpClientPingTask$1$1:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$ConnectionPoolPingTask$1:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler$ProxyAction$1:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.websockets.client.WebSocketClient$ConnectionBuilder$1$1:void completed(io.undertow.client.ClientExchange)"
        ]
    },
    "io.undertow.client.http2.Http2ClientExchange:void failed(java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http2.Http2ClientConnection$Http2ReceiveListener:void handleEvent(io.undertow.protocols.http2.Http2Channel)",
            "io.undertow.client.http2.Http2ClientConnection$1:void handleEvent(io.undertow.protocols.http2.Http2Channel)",
            "io.undertow.client.http2.Http2ClientConnection:void handleError(java.io.IOException)",
            "io.undertow.client.http2.Http2ClientConnection:void close()"
        ]
    },
    "io.undertow.client.http2.Http2ClearClientProvider:void connect(io.undertow.client.ClientCallback,java.net.InetSocketAddress,java.net.URI,org.xnio.XnioWorker,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http2.Http2ClearClientProvider:void connect(io.undertow.client.ClientCallback,java.net.URI,org.xnio.XnioWorker,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)",
            "io.undertow.client.UndertowClient:org.xnio.IoFuture connect(java.net.InetSocketAddress,java.net.URI,org.xnio.XnioWorker,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)",
            "io.undertow.client.UndertowClient:void connect(io.undertow.client.ClientCallback,java.net.InetSocketAddress,java.net.URI,org.xnio.XnioWorker,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)"
        ]
    },
    "io.undertow.client.http2.Http2ClearClientProvider:void connect(io.undertow.client.ClientCallback,java.net.InetSocketAddress,java.net.URI,org.xnio.XnioIoThread,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http2.Http2ClearClientProvider:void connect(io.undertow.client.ClientCallback,java.net.URI,org.xnio.XnioIoThread,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)",
            "io.undertow.client.UndertowClient:org.xnio.IoFuture connect(java.net.InetSocketAddress,java.net.URI,org.xnio.XnioIoThread,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)",
            "io.undertow.client.UndertowClient:void connect(io.undertow.client.ClientCallback,java.net.InetSocketAddress,java.net.URI,org.xnio.XnioIoThread,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)"
        ]
    },
    "io.undertow.client.http2.Http2PriorKnowledgeClientProvider$1:void notify(org.xnio.IoFuture,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.client.http2.Http2ClearClientProvider$FailedNotifier:void notify(org.xnio.IoFuture,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.websockets.core.protocol.Handshake:void handshake(io.undertow.websockets.spi.WebSocketHttpExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.websockets.core.protocol.Handshake:void performUpgrade(io.undertow.websockets.spi.WebSocketHttpExchange,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.protocol.Handshake:void performUpgrade(io.undertow.websockets.spi.WebSocketHttpExchange)"
        ]
    },
    "io.undertow.conduits.IdleTimeoutConduit:int writeFinal(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.BytesSentStreamSinkConduit:int writeFinal(java.nio.ByteBuffer)",
            "io.undertow.conduits.IdleTimeoutConduit:int writeFinal(java.nio.ByteBuffer)",
            "io.undertow.conduits.FinishableStreamSinkConduit:int writeFinal(java.nio.ByteBuffer)"
        ]
    },
    "io.undertow.conduits.IdleTimeoutConduit:long writeFinal(java.nio.ByteBuffer[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.BytesSentStreamSinkConduit:long writeFinal(java.nio.ByteBuffer[],int,int)",
            "io.undertow.conduits.ChunkedStreamSinkConduit:int doWrite(java.nio.ByteBuffer)",
            "io.undertow.conduits.IdleTimeoutConduit:long writeFinal(java.nio.ByteBuffer[],int,int)",
            "io.undertow.conduits.FinishableStreamSinkConduit:long writeFinal(java.nio.ByteBuffer[],int,int)"
        ]
    },
    "io.undertow.conduits.IdleTimeoutConduit:long transferTo(long,long,java.nio.channels.FileChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.FinishableStreamSourceConduit:long transferTo(long,long,java.nio.channels.FileChannel)",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:long transferTo(long,long,java.nio.channels.FileChannel)",
            "io.undertow.conduits.IdleTimeoutConduit:long transferTo(long,long,java.nio.channels.FileChannel)"
        ]
    },
    "io.undertow.conduits.IdleTimeoutConduit:long transferTo(long,java.nio.ByteBuffer,org.xnio.channels.StreamSinkChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.FinishableStreamSourceConduit:long transferTo(long,java.nio.ByteBuffer,org.xnio.channels.StreamSinkChannel)",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:long transferTo(long,java.nio.ByteBuffer,org.xnio.channels.StreamSinkChannel)",
            "io.undertow.conduits.IdleTimeoutConduit:long transferTo(long,java.nio.ByteBuffer,org.xnio.channels.StreamSinkChannel)"
        ]
    },
    "io.undertow.conduits.DeflatingStreamSinkConduit:void resumeWrites()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.HeadStreamSinkConduit:void resumeWrites()",
            "io.undertow.conduits.DeflatingStreamSinkConduit:void wakeupWrites()",
            "io.undertow.conduits.DeflatingStreamSinkConduit:void resumeWrites()",
            "io.undertow.conduits.DeflatingStreamSinkConduit:boolean flush()",
            "io.undertow.conduits.DeflatingStreamSinkConduit:void deflateData(boolean)",
            "io.undertow.conduits.IdleTimeoutConduit:void resumeWrites()",
            "io.undertow.protocols.ssl.SslConduit:boolean handleHandshakeResult(javax.net.ssl.SSLEngineResult)",
            "io.undertow.server.protocol.ajp.AjpServerResponseConduit:void resumeWrites()",
            "io.undertow.server.protocol.ajp.AjpServerResponseConduit:boolean doGetRequestBodyChunk(java.nio.ByteBuffer,io.undertow.server.protocol.ajp.AjpServerRequestConduit)"
        ]
    },
    "io.undertow.conduits.DeflatingStreamSinkConduit:void access$200(io.undertow.conduits.DeflatingStreamSinkConduit)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.DeflatingStreamSinkConduit$1:void run()"
        ]
    },
    "io.undertow.protocols.ssl.SslConduit:void clearWriteRequiresRead()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.ssl.SslConduit:boolean handleHandshakeResult(javax.net.ssl.SSLEngineResult)"
        ]
    },
    "io.undertow.conduits.HeadStreamSinkConduit:void resumeWrites()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.conduits.IdleTimeoutConduit:void resumeWrites()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.HeadStreamSinkConduit:void resumeWrites()",
            "io.undertow.conduits.DeflatingStreamSinkConduit:void resumeWrites()",
            "io.undertow.conduits.DeflatingStreamSinkConduit:boolean flush()",
            "io.undertow.conduits.DeflatingStreamSinkConduit:void deflateData(boolean)",
            "io.undertow.conduits.IdleTimeoutConduit:void resumeWrites()",
            "io.undertow.protocols.ssl.SslConduit:boolean handleHandshakeResult(javax.net.ssl.SSLEngineResult)",
            "io.undertow.server.protocol.ajp.AjpServerResponseConduit:void resumeWrites()",
            "io.undertow.server.protocol.ajp.AjpServerResponseConduit:boolean doGetRequestBodyChunk(java.nio.ByteBuffer,io.undertow.server.protocol.ajp.AjpServerRequestConduit)"
        ]
    },
    "io.undertow.server.protocol.ajp.AjpServerResponseConduit:void resumeWrites()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.server.protocol.ajp.AjpServerResponseConduit:long write(java.nio.ByteBuffer[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.security.impl.ClientCertAuthenticationMechanism:io.undertow.security.api.AuthenticationMechanism$AuthenticationMechanismOutcome authenticate(io.undertow.server.HttpServerExchange,io.undertow.security.api.SecurityContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.security.impl.SecurityContextImpl$AuthAttempter:io.undertow.security.impl.SecurityContextImpl$AuthenticationState transition()"
        ]
    },
    "io.undertow.websockets.core.protocol.version07.WebSocket07Channel$WebSocketFrameHeader:io.undertow.websockets.core.StreamSourceFrameChannel createChannel(io.undertow.connector.PooledByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.protocol.version07.WebSocket07Channel$WebSocketFrameHeader:io.undertow.websockets.core.StreamSourceFrameChannel getChannel(io.undertow.connector.PooledByteBuffer)"
        ]
    },
    "io.undertow.protocols.http2.Http2Channel:void handleRstStream(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.http2.Http2Channel:io.undertow.protocols.http2.AbstractHttp2StreamSourceChannel createChannelImpl(io.undertow.server.protocol.framed.FrameHeaderData,io.undertow.connector.PooledByteBuffer)",
            "io.undertow.protocols.http2.Http2Channel:void sendRstStream(int,int)"
        ]
    },
    "io.undertow.client.ajp.AjpClientConnection:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpClientConnection:void close()"
        ]
    },
    "io.undertow.websockets.core.protocol.version07.WebSocket07CloseFrameSourceChannel$CloseFrameValidatorChannelFunction:void afterRead(java.nio.ByteBuffer,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.function.ChannelFunctionFileChannel:void afterReading(java.nio.ByteBuffer,int,int)",
            "io.undertow.websockets.core.function.ChannelFunctionReadableByteChannel:int read(java.nio.ByteBuffer)",
            "io.undertow.websockets.core.function.ChannelFunctionStreamSourceChannel:void afterReading(java.nio.ByteBuffer,int,int)",
            "io.undertow.websockets.core.StreamSourceFrameChannel:void afterRead(java.nio.ByteBuffer,int,int)",
            "io.undertow.websockets.core.StreamSourceFrameChannel:void checker(java.nio.ByteBuffer,int,int,boolean)"
        ]
    },
    "io.undertow.websockets.core.WebSocketChannel:io.undertow.server.protocol.framed.FrameHeaderData parseFrame(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.framed.AbstractFramedChannel:io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel receive()"
        ]
    },
    "io.undertow.websockets.core.StreamSourceFrameChannel:void checkComplete()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.StreamSourceFrameChannel:int read(java.nio.ByteBuffer)",
            "io.undertow.websockets.core.StreamSourceFrameChannel:long read(java.nio.ByteBuffer[],int,int)",
            "io.undertow.websockets.core.StreamSourceFrameChannel:void afterRead(java.nio.ByteBuffer,int,int)"
        ]
    },
    "io.undertow.websockets.core.StreamSourceFrameChannel:void afterRead(java.nio.ByteBuffer,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.StreamSourceFrameChannel:long read(java.nio.ByteBuffer[],int,int)"
        ]
    },
    "io.undertow.websockets.core.StreamSourceFrameChannel:void checker(java.nio.ByteBuffer,int,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.StreamSourceFrameChannel:int read(java.nio.ByteBuffer)"
        ]
    },
    "io.undertow.websockets.core.StreamSourceFrameChannel:io.undertow.connector.PooledByteBuffer processFrameData(io.undertow.connector.PooledByteBuffer,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void beforeRead()"
        ]
    },
    "io.undertow.protocols.ajp.AjpClientChannel:io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel createChannel(io.undertow.server.protocol.framed.FrameHeaderData,io.undertow.connector.PooledByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.framed.AbstractFramedChannel:io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel receive()"
        ]
    },
    "io.undertow.io.UndertowOutputStream:void updateWritten(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.UndertowOutputStream:void write(byte[],int,int)",
            "io.undertow.io.UndertowOutputStream:void write(java.nio.ByteBuffer[])",
            "io.undertow.io.UndertowOutputStream:void transferFrom(java.nio.channels.FileChannel)"
        ]
    },
    "io.undertow.server.handlers.encoding.ContentEncodedResourceManager:io.undertow.server.handlers.encoding.ContentEncodedResource getResource(io.undertow.server.handlers.resource.Resource,io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.resource.ResourceHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.util.FlexBase64$DecoderOutputStream:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.BlockingSenderImpl:void close(io.undertow.io.IoCallback)",
            "io.undertow.server.handlers.encoding.ContentEncodedResourceManager:io.undertow.server.handlers.encoding.ContentEncodedResource getResource(io.undertow.server.handlers.resource.Resource,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http.HttpContinue:void sendContinueResponseBlocking(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$DefaultBlockingHttpExchange:void close()",
            "io.undertow.util.FlexBase64$DecoderOutputStream:void close()",
            "io.undertow.util.FlexBase64$EncoderOutputStream:void close()"
        ]
    },
    "io.undertow.util.FlexBase64$EncoderOutputStream:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.BlockingSenderImpl:void close(io.undertow.io.IoCallback)",
            "io.undertow.server.handlers.encoding.ContentEncodedResourceManager:io.undertow.server.handlers.encoding.ContentEncodedResource getResource(io.undertow.server.handlers.resource.Resource,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http.HttpContinue:void sendContinueResponseBlocking(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$DefaultBlockingHttpExchange:void close()",
            "io.undertow.util.FlexBase64$DecoderOutputStream:void close()",
            "io.undertow.util.FlexBase64$EncoderOutputStream:void close()"
        ]
    },
    "io.undertow.server.handlers.sse.ServerSentEventConnection:void shutdown()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.server.handlers.HttpContinueReadHandler$ContinueConduit:long transferTo(long,long,java.nio.channels.FileChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.FinishableStreamSourceConduit:long transferTo(long,long,java.nio.channels.FileChannel)",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:long transferTo(long,long,java.nio.channels.FileChannel)",
            "io.undertow.conduits.IdleTimeoutConduit:long transferTo(long,long,java.nio.channels.FileChannel)"
        ]
    },
    "io.undertow.server.handlers.HttpContinueReadHandler$ContinueConduit:long transferTo(long,java.nio.ByteBuffer,org.xnio.channels.StreamSinkChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.FinishableStreamSourceConduit:long transferTo(long,java.nio.ByteBuffer,org.xnio.channels.StreamSinkChannel)",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:long transferTo(long,java.nio.ByteBuffer,org.xnio.channels.StreamSinkChannel)",
            "io.undertow.conduits.IdleTimeoutConduit:long transferTo(long,java.nio.ByteBuffer,org.xnio.channels.StreamSinkChannel)"
        ]
    },
    "io.undertow.server.handlers.HttpContinueReadHandler$ContinueConduit:int read(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.InflatingStreamSourceConduit:int read(java.nio.ByteBuffer)",
            "io.undertow.conduits.FinishableStreamSourceConduit:int read(java.nio.ByteBuffer)",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:int read(java.nio.ByteBuffer)",
            "io.undertow.conduits.ChunkedStreamSourceConduit:int read(java.nio.ByteBuffer)",
            "io.undertow.conduits.IdleTimeoutConduit:int read(java.nio.ByteBuffer)",
            "io.undertow.protocols.ssl.SslConduit:long doUnwrap(java.nio.ByteBuffer[],int,int)",
            "io.undertow.server.protocol.ajp.AjpServerRequestConduit:int doRead(java.nio.ByteBuffer,long)"
        ]
    },
    "io.undertow.server.handlers.HttpContinueReadHandler$ContinueConduit:long read(java.nio.ByteBuffer[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.FinishableStreamSourceConduit:long read(java.nio.ByteBuffer[],int,int)",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:long read(java.nio.ByteBuffer[],int,int)",
            "io.undertow.conduits.IdleTimeoutConduit:long read(java.nio.ByteBuffer[],int,int)"
        ]
    },
    "io.undertow.server.handlers.HttpContinueReadHandler$ContinueConduit:void awaitReadable(long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.FixedLengthStreamSourceConduit:void awaitReadable(long,java.util.concurrent.TimeUnit)",
            "io.undertow.conduits.IdleTimeoutConduit:void awaitReadable(long,java.util.concurrent.TimeUnit)",
            "io.undertow.protocols.ssl.SslConduit:void awaitReadable(long,java.util.concurrent.TimeUnit)",
            "io.undertow.server.protocol.ajp.AjpServerRequestConduit:void awaitReadable(long,java.util.concurrent.TimeUnit)"
        ]
    },
    "io.undertow.server.handlers.HttpContinueReadHandler$ContinueConduit:void awaitReadable()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.FixedLengthStreamSourceConduit:void awaitReadable()",
            "io.undertow.conduits.IdleTimeoutConduit:void awaitReadable()",
            "io.undertow.protocols.ssl.SslConduit:void awaitReadable()",
            "io.undertow.server.protocol.ajp.AjpServerRequestConduit:void awaitReadable()"
        ]
    },
    "io.undertow.websockets.core.WebSockets:void sendTextBlocking(io.undertow.connector.PooledByteBuffer,io.undertow.websockets.core.WebSocketChannel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.websockets.core.WebSockets:void sendPingBlocking(io.undertow.connector.PooledByteBuffer,io.undertow.websockets.core.WebSocketChannel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.websockets.core.WebSockets:void sendPongBlocking(io.undertow.connector.PooledByteBuffer,io.undertow.websockets.core.WebSocketChannel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.websockets.core.WebSockets:void sendBinaryBlocking(io.undertow.connector.PooledByteBuffer,io.undertow.websockets.core.WebSocketChannel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.websockets.core.WebSockets:void sendBlockingInternal(java.nio.ByteBuffer,io.undertow.websockets.core.WebSocketFrameType,io.undertow.websockets.core.WebSocketChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.WebSockets:void sendTextBlocking(java.lang.String,io.undertow.websockets.core.WebSocketChannel)",
            "io.undertow.websockets.core.WebSockets:void sendTextBlocking(java.nio.ByteBuffer,io.undertow.websockets.core.WebSocketChannel)",
            "io.undertow.websockets.core.WebSockets:void sendPingBlocking(java.nio.ByteBuffer,io.undertow.websockets.core.WebSocketChannel)",
            "io.undertow.websockets.core.WebSockets:void sendPingBlocking(java.nio.ByteBuffer[],io.undertow.websockets.core.WebSocketChannel)",
            "io.undertow.websockets.core.WebSockets:void sendPongBlocking(java.nio.ByteBuffer,io.undertow.websockets.core.WebSocketChannel)",
            "io.undertow.websockets.core.WebSockets:void sendPongBlocking(java.nio.ByteBuffer[],io.undertow.websockets.core.WebSocketChannel)",
            "io.undertow.websockets.core.WebSockets:void sendBinaryBlocking(java.nio.ByteBuffer,io.undertow.websockets.core.WebSocketChannel)",
            "io.undertow.websockets.core.WebSockets:void sendBinaryBlocking(java.nio.ByteBuffer[],io.undertow.websockets.core.WebSocketChannel)",
            "io.undertow.websockets.core.WebSockets:void sendCloseBlocking(io.undertow.websockets.core.CloseMessage,io.undertow.websockets.core.WebSocketChannel)"
        ]
    },
    "io.undertow.util.FlexBase64$DecoderOutputStream:void flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.util.FlexBase64$DecoderOutputStream:void flush()",
            "io.undertow.util.FlexBase64$DecoderOutputStream:void close()",
            "io.undertow.util.FlexBase64$EncoderOutputStream:void flush()",
            "io.undertow.util.FlexBase64$EncoderOutputStream:void complete()",
            "io.undertow.util.FlexBase64$EncoderOutputStream:void close()"
        ]
    },
    "io.undertow.util.FlexBase64$EncoderOutputStream:void flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.util.FlexBase64$DecoderOutputStream:void flush()",
            "io.undertow.util.FlexBase64$DecoderOutputStream:void close()",
            "io.undertow.util.FlexBase64$EncoderOutputStream:void flush()",
            "io.undertow.util.FlexBase64$EncoderOutputStream:void complete()",
            "io.undertow.util.FlexBase64$EncoderOutputStream:void close()"
        ]
    },
    "io.undertow.util.FlexBase64$EncoderOutputStream:void complete()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.util.FlexBase64$EncoderOutputStream:void close()"
        ]
    },
    "io.undertow.server.HttpServerExchange$WriteDispatchChannel:long write(java.nio.ByteBuffer[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.channels.DetachableStreamSinkChannel:long write(java.nio.ByteBuffer[],int,int)",
            "io.undertow.io.AsyncSenderImpl$3:void handleEvent(org.xnio.channels.StreamSinkChannel)"
        ]
    },
    "io.undertow.io.AsyncSenderImpl$3:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection$3:void handleEvent(io.undertow.protocols.ajp.AjpClientChannel)",
            "io.undertow.client.http.HttpClientConnection$5:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.client.http2.Http2ClientConnection$1:void handleEvent(io.undertow.protocols.http2.Http2Channel)",
            "io.undertow.client.ALPNClientSelector$2:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ALPNClientSelector$2:void handleSelected(java.lang.String)",
            "io.undertow.client.ALPNClientSelector:void runAlpn(org.xnio.ssl.SslConnection,org.xnio.ChannelListener,io.undertow.client.ClientCallback,io.undertow.client.ALPNClientSelector$ALPNProtocol[])",
            "io.undertow.protocols.ajp.AjpClientResponseStreamSourceChannel:void complete()",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void handleFlushComplete(boolean)",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void channelForciblyClosed()",
            "io.undertow.protocols.http2.Http2StreamSourceChannel:void channelForciblyClosed()",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$RequestExchangeListener:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void close()"
        ]
    },
    "io.undertow.channels.DetachableStreamSinkChannel:long write(java.nio.ByteBuffer[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.channels.DetachableStreamSinkChannel:long write(java.nio.ByteBuffer[])",
            "io.undertow.io.AsyncSenderImpl:void send(java.nio.ByteBuffer[],io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void invokeOnComplete()",
            "io.undertow.server.HttpServerExchange$WriteDispatchChannel:long write(java.nio.ByteBuffer[])"
        ]
    },
    "io.undertow.server.HttpServerExchange$WriteDispatchChannel:int write(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.channels.DetachableStreamSinkChannel:int write(java.nio.ByteBuffer)",
            "io.undertow.io.UndertowOutputStream:void writeBufferBlocking(boolean)",
            "io.undertow.io.AsyncSenderImpl:void send(java.nio.ByteBuffer,io.undertow.io.IoCallback)",
            "io.undertow.server.handlers.sse.ServerSentEventConnection$SseWriteListener:void handleEvent(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:long transferTo(long,java.nio.ByteBuffer,org.xnio.channels.StreamSinkChannel)",
            "io.undertow.server.HttpServerExchange$ReadDispatchChannel:long transferTo(long,java.nio.ByteBuffer,org.xnio.channels.StreamSinkChannel)",
            "io.undertow.util.Transfer:void initiateTransfer(org.xnio.channels.StreamSourceChannel,org.xnio.channels.StreamSinkChannel,org.xnio.ChannelListener,org.xnio.ChannelListener,org.xnio.ChannelExceptionHandler,org.xnio.ChannelExceptionHandler,io.undertow.connector.ByteBufferPool)",
            "io.undertow.util.StringWriteChannelListener:void setup(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.util.StringWriteChannelListener:void handleEvent(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.util.Transfer$TransferListener:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.io.UndertowOutputStream:void write(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.UndertowOutputStream:void write(int)",
            "io.undertow.io.UndertowOutputStream:void write(byte[])",
            "io.undertow.io.BlockingSenderImpl:void performTransfer(java.nio.channels.FileChannel,io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:boolean writeBuffer(java.nio.ByteBuffer[],io.undertow.io.IoCallback)",
            "io.undertow.util.FlexBase64$DecoderOutputStream:void write(byte[],int,int)",
            "io.undertow.util.FlexBase64$DecoderOutputStream:void flush()",
            "io.undertow.util.FlexBase64$EncoderOutputStream:void write(byte[],int,int)",
            "io.undertow.util.FlexBase64$EncoderOutputStream:void flush()",
            "io.undertow.util.FlexBase64$EncoderOutputStream:void complete()",
            "io.undertow.websockets.core.protocol.version07.Base64$OutputStream:void write(int)",
            "io.undertow.websockets.core.protocol.version07.Base64$OutputStream:void write(byte[],int,int)"
        ]
    },
    "io.undertow.io.UndertowOutputStream:void flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.UndertowOutputStream:void updateWritten(long)",
            "io.undertow.util.FlexBase64$DecoderOutputStream:void flush()",
            "io.undertow.util.FlexBase64$DecoderOutputStream:void close()",
            "io.undertow.util.FlexBase64$EncoderOutputStream:void flush()",
            "io.undertow.util.FlexBase64$EncoderOutputStream:void complete()",
            "io.undertow.util.FlexBase64$EncoderOutputStream:void close()"
        ]
    },
    "io.undertow.io.UndertowOutputStream:void transferFrom(java.nio.channels.FileChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.BlockingSenderImpl:void performTransfer(java.nio.channels.FileChannel,io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.protocols.http2.Http2Channel:io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel createChannel(io.undertow.server.protocol.framed.FrameHeaderData,io.undertow.connector.PooledByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.framed.AbstractFramedChannel:io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel receive()"
        ]
    },
    "io.undertow.protocols.ajp.AjpClientFramePriority:boolean insertFrame(io.undertow.protocols.ajp.AbstractAjpClientStreamSinkChannel,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.ajp.AjpClientFramePriority:boolean insertFrame(io.undertow.server.protocol.framed.AbstractFramedStreamSinkChannel,java.util.List)"
        ]
    },
    "io.undertow.protocols.ajp.AjpClientFramePriority:void frameAdded(io.undertow.protocols.ajp.AbstractAjpClientStreamSinkChannel,java.util.List,java.util.Deque)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.ajp.AjpClientFramePriority:void frameAdded(io.undertow.server.protocol.framed.AbstractFramedStreamSinkChannel,java.util.List,java.util.Deque)"
        ]
    },
    "io.undertow.server.protocol.framed.AbstractFramedChannel$6:void handleException(java.nio.channels.Channel,java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.http2.Http2Channel:void sendPing(byte[],org.xnio.ChannelExceptionHandler,boolean)",
            "io.undertow.protocols.http2.Http2Channel:void sendGoAway(int,org.xnio.ChannelExceptionHandler)"
        ]
    },
    "io.undertow.websockets.core.WebSocketFramePriority:void frameAdded(io.undertow.server.protocol.framed.AbstractFramedStreamSinkChannel,java.util.List,java.util.Deque)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.framed.AbstractFramedChannel:void recalculateHeldFrames()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel:void flushSenders()"
        ]
    },
    "io.undertow.protocols.http2.Http2Channel:void <init>(org.xnio.StreamConnection,java.lang.String,io.undertow.connector.ByteBufferPool,io.undertow.connector.PooledByteBuffer,boolean,boolean,boolean,java.nio.ByteBuffer,org.xnio.OptionMap)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.http2.Http2Channel:void <init>(org.xnio.StreamConnection,java.lang.String,io.undertow.connector.ByteBufferPool,io.undertow.connector.PooledByteBuffer,boolean,boolean,org.xnio.OptionMap)",
            "io.undertow.protocols.http2.Http2Channel:void <init>(org.xnio.StreamConnection,java.lang.String,io.undertow.connector.ByteBufferPool,io.undertow.connector.PooledByteBuffer,boolean,boolean,boolean,org.xnio.OptionMap)",
            "io.undertow.server.protocol.http2.Http2UpgradeHandler$3:void handleUpgrade(org.xnio.StreamConnection,io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.protocols.http2.Http2StreamSourceChannel:void updateContentSize(long,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.http2.Http2FrameHeaderParser:io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel getExistingChannel()"
        ]
    },
    "io.undertow.server.protocol.http2.Http2ServerConnection:void close()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.protocols.http2.Http2StreamSourceChannel:void handleHeaderData(io.undertow.server.protocol.framed.FrameHeaderData)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void beforeRead()"
        ]
    },
    "io.undertow.client.http2.Http2ClientConnection$Http2ReceiveListener:void handlePing(io.undertow.protocols.http2.Http2PingStreamSourceChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http2.Http2ClientConnection$Http2ReceiveListener:void handleEvent(io.undertow.protocols.http2.Http2Channel)"
        ]
    },
    "io.undertow.client.http.HttpClientConnection:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpClientConnection:void close()"
        ]
    },
    "io.undertow.protocols.http2.Http2StreamSinkChannel:void handleFlushComplete(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.http2.Http2DataStreamSinkChannel:void handleFlushComplete(boolean)",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSinkChannel:void flushComplete()"
        ]
    },
    "io.undertow.protocols.http2.Http2StreamSinkChannel:void rstStream()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.http2.Http2Channel:io.undertow.protocols.http2.AbstractHttp2StreamSourceChannel createChannelImpl(io.undertow.server.protocol.framed.FrameHeaderData,io.undertow.connector.PooledByteBuffer)",
            "io.undertow.protocols.http2.Http2Channel:void handleRstStream(int)"
        ]
    },
    "io.undertow.server.handlers.sse.ServerSentEventConnection:void send(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.server.handlers.sse.ServerSentEventConnection:void send(java.lang.String,io.undertow.server.handlers.sse.ServerSentEventConnection$EventCallback)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.server.handlers.sse.ServerSentEventConnection:void sendRetry(long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.client.ajp.AjpClientExchange:void setContinueResponse(io.undertow.client.ClientResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection$ClientReceiveListener:void handleEvent(io.undertow.protocols.ajp.AjpClientChannel)"
        ]
    },
    "io.undertow.client.http.HttpClientExchange:void setContinueResponse(io.undertow.client.ClientResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpClientConnection$ClientReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)"
        ]
    },
    "io.undertow.client.http2.Http2ClientExchange:void setContinueResponse(io.undertow.client.ClientResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http2.Http2ClientConnection$Http2ReceiveListener:void handleEvent(io.undertow.protocols.http2.Http2Channel)"
        ]
    },
    "io.undertow.server.HttpServerExchange$2:void handleEvent(org.xnio.channels.StreamSourceChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.HttpServerExchange$2:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.websockets.core.WebSockets:void sendText(java.lang.String,io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.WebSockets:void sendText(java.lang.String,io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback)"
        ]
    },
    "io.undertow.websockets.core.WebSockets:void sendText(java.lang.String,io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback,java.lang.Object,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.WebSockets:void sendText(java.lang.String,io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback,long)"
        ]
    },
    "io.undertow.websockets.core.WebSockets:void sendText(java.nio.ByteBuffer,io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.websockets.core.WebSockets:void sendText(java.nio.ByteBuffer,io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.websockets.core.WebSockets:void sendText(java.nio.ByteBuffer,io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.websockets.core.WebSockets:void sendText(java.nio.ByteBuffer,io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback,java.lang.Object,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.websockets.core.WebSockets:void sendPing(java.nio.ByteBuffer,io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.websockets.core.WebSockets:void sendPing(java.nio.ByteBuffer,io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.websockets.core.WebSockets:void sendPing(java.nio.ByteBuffer,io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.websockets.core.WebSockets:void sendPing(java.nio.ByteBuffer,io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback,java.lang.Object,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.websockets.core.WebSockets:void sendPing(java.nio.ByteBuffer[],io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.websockets.core.WebSockets:void sendPing(java.nio.ByteBuffer[],io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.websockets.core.WebSockets:void sendPing(java.nio.ByteBuffer[],io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.websockets.core.WebSockets:void sendPing(java.nio.ByteBuffer[],io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback,java.lang.Object,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.websockets.core.WebSockets:void sendPong(java.nio.ByteBuffer,io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.websockets.core.WebSockets:void sendPong(java.nio.ByteBuffer,io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.websockets.core.WebSockets:void sendPong(java.nio.ByteBuffer,io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.websockets.core.WebSockets:void sendPong(java.nio.ByteBuffer,io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback,java.lang.Object,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.websockets.core.WebSockets:void sendPong(java.nio.ByteBuffer[],io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.AbstractReceiveListener:void onFullPingMessage(io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.BufferedBinaryMessage)"
        ]
    },
    "io.undertow.websockets.core.WebSockets:void sendPong(java.nio.ByteBuffer[],io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.websockets.core.WebSockets:void sendPong(java.nio.ByteBuffer[],io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.websockets.core.WebSockets:void sendPong(java.nio.ByteBuffer[],io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback,java.lang.Object,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.websockets.core.WebSockets:void sendBinary(java.nio.ByteBuffer,io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.websockets.core.WebSockets:void sendBinary(java.nio.ByteBuffer,io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.websockets.core.WebSockets:void sendBinary(java.nio.ByteBuffer,io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.websockets.core.WebSockets:void sendBinary(java.nio.ByteBuffer,io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback,java.lang.Object,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.websockets.core.WebSockets:void sendBinary(java.nio.ByteBuffer[],io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.websockets.core.WebSockets:void sendBinary(java.nio.ByteBuffer[],io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.websockets.core.WebSockets:void sendBinary(java.nio.ByteBuffer[],io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.websockets.core.WebSockets:void sendBinary(java.nio.ByteBuffer[],io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback,java.lang.Object,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.websockets.core.WebSockets:void sendClose(io.undertow.websockets.core.CloseMessage,io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.WebSockets:void sendClose(java.nio.ByteBuffer,io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback,java.lang.Object)",
            "io.undertow.websockets.core.WebSockets:void sendClose(java.nio.ByteBuffer[],io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback,java.lang.Object)",
            "io.undertow.websockets.core.WebSockets:void sendClose(int,java.lang.String,io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback,java.lang.Object)",
            "io.undertow.websockets.core.WebSockets:void sendClose(io.undertow.websockets.core.CloseMessage,io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback)"
        ]
    },
    "io.undertow.server.handlers.proxy.ProxyConnectionPool:void access$1200(io.undertow.server.handlers.proxy.ProxyConnectionPool,io.undertow.server.handlers.proxy.ProxyConnectionPool$HostThreadData)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.ProxyConnectionPool$2:void failed(java.io.IOException)"
        ]
    },
    "io.undertow.server.handlers.proxy.mod_cluster.ModClusterProxyClient$1:void queuedRequestFailed(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.mod_cluster.ModClusterProxyClient$1:void queuedRequestFailed(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyConnectionPool:void redistributeQueued(io.undertow.server.handlers.proxy.ProxyConnectionPool$HostThreadData)",
            "io.undertow.server.handlers.proxy.ProxyConnectionPool:void connect(io.undertow.server.handlers.proxy.ProxyClient$ProxyTarget,io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.ProxyCallback,long,java.util.concurrent.TimeUnit,boolean)",
            "io.undertow.server.handlers.proxy.LoadBalancingProxyClient$2:void queuedRequestFailed(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.proxy.LoadBalancingProxyClient$2:void queuedRequestFailed(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.mod_cluster.ModClusterProxyClient$1:void queuedRequestFailed(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyConnectionPool:void redistributeQueued(io.undertow.server.handlers.proxy.ProxyConnectionPool$HostThreadData)",
            "io.undertow.server.handlers.proxy.ProxyConnectionPool:void connect(io.undertow.server.handlers.proxy.ProxyClient$ProxyTarget,io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.ProxyCallback,long,java.util.concurrent.TimeUnit,boolean)",
            "io.undertow.server.handlers.proxy.LoadBalancingProxyClient$2:void queuedRequestFailed(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.proxy.ProxyConnectionPool$4$1:void completed(io.undertow.client.ClientConnection)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.ProxyConnectionPool$4$1:void completed(java.lang.Object)"
        ]
    },
    "io.undertow.server.handlers.proxy.ProxyConnectionPool$2:void completed(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientProvider:void handleConnected(org.xnio.StreamConnection,io.undertow.client.ClientCallback,java.net.URI,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)",
            "io.undertow.client.ajp.AjpClientExchange:void setResponse(io.undertow.client.ClientResponse)",
            "io.undertow.client.ajp.AjpClientExchange:void setResponseListener(io.undertow.client.ClientCallback)",
            "io.undertow.client.ajp.AjpClientExchange:void invokeReadReadyCallback(io.undertow.client.ClientExchange)",
            "io.undertow.client.http.HttpClientProvider:void handleConnected(org.xnio.StreamConnection,io.undertow.client.ClientCallback,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap,java.net.URI)",
            "io.undertow.client.http.HttpClientProvider$3:void handleEvent(org.xnio.ssl.SslConnection)",
            "io.undertow.client.http.HttpClientExchange:void setResponse(io.undertow.client.ClientResponse)",
            "io.undertow.client.http.HttpClientExchange:void setResponseListener(io.undertow.client.ClientCallback)",
            "io.undertow.client.http.HttpClientExchange:void invokeReadReadyCallback()",
            "io.undertow.client.http2.Http2ClientProvider$4:void handleEvent(org.xnio.ssl.SslConnection)",
            "io.undertow.client.http2.Http2PriorKnowledgeClientProvider:void handleConnected(org.xnio.StreamConnection,io.undertow.client.ClientCallback,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap,java.lang.String)",
            "io.undertow.client.http2.Http2PriorKnowledgeClientProvider$5:void handleEvent(org.xnio.conduits.ConduitStreamSinkChannel)",
            "io.undertow.client.http2.Http2ClearClientProvider$Http2ClearOpenListener:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.client.http2.Http2ClientExchange:void responseReady(io.undertow.protocols.http2.Http2StreamSourceChannel)",
            "io.undertow.client.http2.Http2ClientConnection:void sendRequest(io.undertow.client.ClientRequest,io.undertow.client.ClientCallback)"
        ]
    },
    "io.undertow.server.handlers.cache.ResponseCachingSender:void send(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.cache.ResponseCachingSender:void send(java.lang.String)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler$1:boolean handleDefaultResponse(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void sendResponse(io.undertow.server.HttpServerExchange,java.lang.String)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPWebManager:void processRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.error.SimpleErrorPageHandler$1:boolean handleDefaultResponse(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.HttpServerExchange:io.undertow.server.HttpServerExchange endExchange()"
        ]
    },
    "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void sendResponse(io.undertow.server.HttpServerExchange,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler$1:void completed()",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler$1:void failed()",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void processAppCommand(io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler$RequestData,io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler$MCMPAction)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void processStatus(io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler$RequestData)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void processPing(io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler$RequestData)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void processInfo(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void processDump(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler$3:void completed()",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler$3:void failed()",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler$2:void completed()",
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler$2:void failed()"
        ]
    },
    "io.undertow.conduits.FixedLengthStreamSourceConduit:void checkMaxSize(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.FixedLengthStreamSourceConduit:long transferTo(long,long,java.nio.channels.FileChannel)",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:long transferTo(long,java.nio.ByteBuffer,org.xnio.channels.StreamSinkChannel)",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:long read(java.nio.ByteBuffer[],int,int)",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:int read(java.nio.ByteBuffer)"
        ]
    },
    "io.undertow.conduits.ChunkedStreamSourceConduit:void updateRemainingAllowed(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.ChunkedStreamSourceConduit:int read(java.nio.ByteBuffer)"
        ]
    },
    "io.undertow.server.protocol.ajp.AjpReadListener:org.xnio.conduits.StreamSourceConduit createSourceConduit(org.xnio.conduits.StreamSourceConduit,io.undertow.server.protocol.ajp.AjpServerResponseConduit,io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.ajp.AjpReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)"
        ]
    },
    "io.undertow.server.protocol.ajp.AjpReadListener$3:void handleEvent(io.undertow.server.protocol.ajp.AjpServerRequestConduit)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.ajp.AjpReadListener$3:void handleEvent(org.xnio.conduits.Conduit)"
        ]
    },
    "io.undertow.server.protocol.http.HttpTransferEncoding$2:void handleEvent(io.undertow.conduits.ChunkedStreamSourceConduit)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.http.HttpTransferEncoding$2:void handleEvent(org.xnio.conduits.Conduit)"
        ]
    },
    "io.undertow.server.protocol.http.HttpTransferEncoding:void setupRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.http.HttpReadListener:void handleEventWithNoRunningRequest(org.xnio.conduits.ConduitStreamSourceChannel)"
        ]
    },
    "io.undertow.server.protocol.http.HttpTransferEncoding:boolean handleRequestEncoding(io.undertow.server.HttpServerExchange,java.lang.String,java.lang.String,io.undertow.server.protocol.http.HttpServerConnection,io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:void setupRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.protocol.http.HttpTransferEncoding$1:void handleEvent(io.undertow.conduits.FixedLengthStreamSourceConduit)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.http.HttpTransferEncoding$1:void handleEvent(org.xnio.conduits.Conduit)"
        ]
    },
    "io.undertow.server.protocol.http.HttpServerConnection:io.undertow.server.HttpServerExchange sendOutOfBandResponse(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.http.HttpContinue:io.undertow.server.protocol.http.HttpContinue$ContinueResponseSender createResponseSender(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http.HttpContinue:void sendContinueResponseBlocking(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http.HttpContinue:void internalSendContinueResponse(io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.server.protocol.http2.Http2ReceiveListener$2:void handleEvent(io.undertow.protocols.http2.Http2StreamSourceChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.http2.Http2ReceiveListener$2:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.server.protocol.http2.Http2ServerConnection:io.undertow.server.HttpServerExchange sendOutOfBandResponse(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.http.HttpContinue:io.undertow.server.protocol.http.HttpContinue$ContinueResponseSender createResponseSender(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http.HttpContinue:void sendContinueResponseBlocking(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http.HttpContinue:void internalSendContinueResponse(io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.server.protocol.ajp.AjpReadListener$1:void handleEvent(io.undertow.server.protocol.ajp.AjpServerResponseConduit)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.ajp.AjpReadListener$1:void handleEvent(org.xnio.conduits.Conduit)"
        ]
    },
    "io.undertow.server.protocol.http.ServerFixedLengthStreamSinkConduit:void channelFinished()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.AbstractFixedLengthStreamSinkConduit:void terminateWrites()",
            "io.undertow.conduits.AbstractFixedLengthStreamSinkConduit:void truncateWrites()",
            "io.undertow.conduits.AbstractFixedLengthStreamSinkConduit:void exitFlush(long,boolean)"
        ]
    },
    "io.undertow.server.protocol.http.HttpTransferEncoding$3:void handleEvent(org.xnio.conduits.StreamSinkConduit)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.http.HttpTransferEncoding$3:void handleEvent(org.xnio.conduits.Conduit)"
        ]
    },
    "io.undertow.server.protocol.http2.Http2ReceiveListener$1:void handleEvent(io.undertow.protocols.http2.Http2DataStreamSinkChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.http2.Http2ReceiveListener$1:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.server.protocol.http2.Http2ReceiveListener$3:void handleEvent(io.undertow.protocols.http2.Http2DataStreamSinkChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.http2.Http2ReceiveListener$3:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.server.HttpServerExchange$3:void handleException(java.nio.channels.Channel,java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.http2.Http2Channel:void sendPing(byte[],org.xnio.ChannelExceptionHandler,boolean)",
            "io.undertow.protocols.http2.Http2Channel:void sendGoAway(int,org.xnio.ChannelExceptionHandler)"
        ]
    },
    "io.undertow.client.ajp.AjpClientConnection$1:void handleEvent(io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection$1:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.client.ajp.AjpClientConnection$2:void handleEvent(io.undertow.protocols.ajp.AjpClientResponseStreamSourceChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection$2:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.client.http.HttpClientConnection$1:void handleEvent(org.xnio.conduits.StreamSinkConduit)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpClientConnection$1:void handleEvent(org.xnio.conduits.Conduit)"
        ]
    },
    "io.undertow.client.http.ClientFixedLengthStreamSinkConduit:void channelFinished()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.AbstractFixedLengthStreamSinkConduit:void terminateWrites()",
            "io.undertow.conduits.AbstractFixedLengthStreamSinkConduit:void truncateWrites()",
            "io.undertow.conduits.AbstractFixedLengthStreamSinkConduit:void exitFlush(long,boolean)"
        ]
    },
    "io.undertow.client.http.HttpClientConnection$2:void handleEvent(org.xnio.conduits.StreamSourceConduit)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpClientConnection$2:void handleEvent(org.xnio.conduits.Conduit)"
        ]
    },
    "io.undertow.server.handlers.proxy.mod_cluster.MCMPConfig$Builder:io.undertow.server.HttpHandler create(io.undertow.server.handlers.proxy.mod_cluster.ModCluster,io.undertow.server.HttpHandler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$CancellableTask:void taskCompleted()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$RequestExchangeListener$1:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$HostPingTask$2:void handleDone(org.xnio.StreamConnection,java.lang.Void)"
        ]
    },
    "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$CancellableTask:void taskFailed()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$RequestExchangeListener$1:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$HttpClientPingTask$1:void failed(java.io.IOException)",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$HostPingTask$2:void handleFailed(java.io.IOException,java.lang.Void)",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$RequestExchangeListener$2:void handleException(org.xnio.channels.StreamSourceChannel,java.io.IOException)",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$HttpClientPingTask$1$1:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$HttpClientPingTask$1$1:void failed(java.io.IOException)",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$ConnectionPoolPingTask$1:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$ConnectionPoolPingTask$1:void failed(java.io.IOException)",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$HostPingTask:void run()",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$ConnectionPoolPingTask$1$1:void handleException(org.xnio.channels.StreamSinkChannel,java.io.IOException)",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$HttpClientPingTask$1$1$1:void handleException(org.xnio.channels.StreamSinkChannel,java.io.IOException)",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$RequestExchangeListener:void failed(java.io.IOException)"
        ]
    },
    "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$CancellableTask:void cancel()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$HostPingTask$2:void handleCancelled(java.lang.Void)",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$2:void run()"
        ]
    },
    "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$1$1:void failed(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.mod_cluster.ModClusterProxyClient$1:void failed(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.Context:void handleRequest(io.undertow.server.handlers.proxy.mod_cluster.ModClusterProxyTarget,io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.ProxyCallback,long,java.util.concurrent.TimeUnit,boolean)",
            "io.undertow.server.handlers.proxy.ProxyConnectionPool:void redistributeQueued(io.undertow.server.handlers.proxy.ProxyConnectionPool$HostThreadData)",
            "io.undertow.server.handlers.proxy.ProxyConnectionPool:void connectionReady(io.undertow.server.handlers.proxy.ProxyConnectionPool$ConnectionHolder,io.undertow.server.handlers.proxy.ProxyCallback,io.undertow.server.HttpServerExchange,boolean)",
            "io.undertow.server.handlers.proxy.ProxyConnectionPool$CallbackHolder:void run()",
            "io.undertow.server.handlers.proxy.ProxyConnectionPool$2:void failed(java.io.IOException)",
            "io.undertow.server.handlers.proxy.SimpleProxyClientProvider$ConnectNotifier:void failed(java.io.IOException)",
            "io.undertow.server.handlers.proxy.LoadBalancingProxyClient$2:void failed(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$1$1:void queuedRequestFailed(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.mod_cluster.ModClusterProxyClient$1:void queuedRequestFailed(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyConnectionPool:void redistributeQueued(io.undertow.server.handlers.proxy.ProxyConnectionPool$HostThreadData)",
            "io.undertow.server.handlers.proxy.ProxyConnectionPool:void connect(io.undertow.server.handlers.proxy.ProxyClient$ProxyTarget,io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.ProxyCallback,long,java.util.concurrent.TimeUnit,boolean)",
            "io.undertow.server.handlers.proxy.LoadBalancingProxyClient$2:void queuedRequestFailed(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$1$1:void couldNotResolveBackend(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.mod_cluster.ModClusterProxyClient$1:void couldNotResolveBackend(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.mod_cluster.ModClusterProxyClient:void getConnection(io.undertow.server.handlers.proxy.ProxyClient$ProxyTarget,io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.ProxyCallback,long,java.util.concurrent.TimeUnit)",
            "io.undertow.server.handlers.proxy.LoadBalancingProxyClient:void getConnection(io.undertow.server.handlers.proxy.ProxyClient$ProxyTarget,io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.ProxyCallback,long,java.util.concurrent.TimeUnit)",
            "io.undertow.server.handlers.proxy.LoadBalancingProxyClient$2:void couldNotResolveBackend(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.proxy.mod_cluster.MCMPWebManager:boolean handlesMethod(io.undertow.util.HttpString)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.proxy.mod_cluster.MCMPWebManager:io.undertow.server.handlers.proxy.mod_cluster.MCMPHandler$RequestData buildRequestData(io.undertow.server.HttpServerExchange,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.mod_cluster.MCMPWebManager:void processRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.io.AsyncSenderImpl$2:void handleException(org.xnio.channels.StreamSinkChannel,java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.AsyncSenderImpl$2:void handleException(java.nio.channels.Channel,java.io.IOException)"
        ]
    },
    "io.undertow.client.ajp.AjpClientConnection:void handleError(java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection:void initiateRequest(io.undertow.client.ajp.AjpClientExchange)",
            "io.undertow.client.ajp.AjpClientConnection:void access$400(io.undertow.client.ajp.AjpClientConnection,java.io.IOException)"
        ]
    },
    "io.undertow.client.http.HttpClientProvider:void connect(io.undertow.client.ClientCallback,java.net.URI,org.xnio.XnioWorker,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.UndertowClient:void connect(io.undertow.client.ClientCallback,java.net.URI,org.xnio.XnioWorker,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)"
        ]
    },
    "io.undertow.client.UndertowClient:org.xnio.IoFuture connect(java.net.InetSocketAddress,java.net.URI,org.xnio.XnioWorker,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.UndertowClient:org.xnio.IoFuture connect(java.net.InetSocketAddress,java.net.URI,org.xnio.XnioWorker,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)",
            "io.undertow.client.UndertowClient:org.xnio.IoFuture connect(java.net.URI,org.xnio.XnioWorker,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)"
        ]
    },
    "io.undertow.client.UndertowClient:void connect(io.undertow.client.ClientCallback,java.net.InetSocketAddress,java.net.URI,org.xnio.XnioWorker,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.UndertowClient:void connect(io.undertow.client.ClientCallback,java.net.InetSocketAddress,java.net.URI,org.xnio.XnioWorker,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)",
            "io.undertow.websockets.client.WebSocketClient$ConnectionBuilder:org.xnio.IoFuture connectImpl(java.net.URI,org.xnio.FutureResult,int)"
        ]
    },
    "io.undertow.client.http.HttpClientProvider:void connect(io.undertow.client.ClientCallback,java.net.URI,org.xnio.XnioIoThread,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.UndertowClient:void connect(io.undertow.client.ClientCallback,java.net.URI,org.xnio.XnioIoThread,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)"
        ]
    },
    "io.undertow.client.UndertowClient:org.xnio.IoFuture connect(java.net.InetSocketAddress,java.net.URI,org.xnio.XnioIoThread,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.UndertowClient:org.xnio.IoFuture connect(java.net.URI,org.xnio.XnioIoThread,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)",
            "io.undertow.client.UndertowClient:org.xnio.IoFuture connect(java.net.InetSocketAddress,java.net.URI,org.xnio.XnioIoThread,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)",
            "io.undertow.client.UndertowClient:org.xnio.IoFuture connect(java.net.URI,org.xnio.XnioIoThread,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)"
        ]
    },
    "io.undertow.client.UndertowClient:void connect(io.undertow.client.ClientCallback,java.net.InetSocketAddress,java.net.URI,org.xnio.XnioIoThread,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.UndertowClient:void connect(io.undertow.client.ClientCallback,java.net.InetSocketAddress,java.net.URI,org.xnio.XnioIoThread,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)",
            "io.undertow.server.handlers.proxy.ProxyConnectionPool:void openConnection(io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.ProxyCallback,io.undertow.server.handlers.proxy.ProxyConnectionPool$HostThreadData,boolean)",
            "io.undertow.server.handlers.proxy.ProxyConnectionPool$4:void run()"
        ]
    },
    "io.undertow.client.http.HttpClientConnection:void handleError(java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpClientConnection:void initiateRequest(io.undertow.client.http.HttpClientExchange)",
            "io.undertow.client.http.HttpClientConnection:void prepareResponseChannel(io.undertow.client.ClientResponse,io.undertow.client.ClientExchange)",
            "io.undertow.client.http.HttpClientConnection:void access$900(io.undertow.client.http.HttpClientConnection,java.io.IOException)"
        ]
    },
    "io.undertow.client.http2.Http2ClientProvider:void connect(io.undertow.client.ClientCallback,java.net.URI,org.xnio.XnioWorker,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.UndertowClient:void connect(io.undertow.client.ClientCallback,java.net.URI,org.xnio.XnioWorker,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)"
        ]
    },
    "io.undertow.client.http2.Http2ClientProvider:void connect(io.undertow.client.ClientCallback,java.net.URI,org.xnio.XnioIoThread,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.UndertowClient:void connect(io.undertow.client.ClientCallback,java.net.URI,org.xnio.XnioIoThread,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)"
        ]
    },
    "io.undertow.client.http2.Http2ClientConnection:void <init>(io.undertow.protocols.http2.Http2Channel,io.undertow.client.ClientCallback,io.undertow.client.ClientRequest,java.lang.String,io.undertow.client.ClientStatistics,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpClientConnection:void doHttp2Upgrade()"
        ]
    },
    "io.undertow.client.http2.Http2ClientConnection:void handleError(java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http2.Http2ClientConnection:void sendRequest(io.undertow.client.ClientRequest,io.undertow.client.ClientCallback)",
            "io.undertow.client.http2.Http2ClientConnection:void access$400(io.undertow.client.http2.Http2ClientConnection,java.io.IOException)"
        ]
    },
    "io.undertow.client.http2.Http2ClearClientProvider:void connect(io.undertow.client.ClientCallback,java.net.URI,org.xnio.XnioWorker,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.UndertowClient:void connect(io.undertow.client.ClientCallback,java.net.URI,org.xnio.XnioWorker,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)"
        ]
    },
    "io.undertow.client.http2.Http2ClearClientProvider:void connect(io.undertow.client.ClientCallback,java.net.URI,org.xnio.XnioIoThread,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.UndertowClient:void connect(io.undertow.client.ClientCallback,java.net.URI,org.xnio.XnioIoThread,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)"
        ]
    },
    "io.undertow.websockets.core.protocol.Handshake:void performUpgrade(io.undertow.websockets.spi.WebSocketHttpExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.protocol.version07.Hybi07Handshake:void handshakeInternal(io.undertow.websockets.spi.WebSocketHttpExchange)",
            "io.undertow.websockets.core.protocol.version13.Hybi13Handshake:void handshakeInternal(io.undertow.websockets.spi.WebSocketHttpExchange)"
        ]
    },
    "io.undertow.conduits.BytesSentStreamSinkConduit:int writeFinal(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.conduits.FinishableStreamSinkConduit:int writeFinal(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.conduits.BytesSentStreamSinkConduit:long writeFinal(java.nio.ByteBuffer[],int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.conduits.FinishableStreamSinkConduit:long writeFinal(java.nio.ByteBuffer[],int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.conduits.FinishableStreamSourceConduit:long transferTo(long,long,java.nio.channels.FileChannel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.conduits.FixedLengthStreamSourceConduit:long transferTo(long,long,java.nio.channels.FileChannel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.conduits.FinishableStreamSourceConduit:long transferTo(long,java.nio.ByteBuffer,org.xnio.channels.StreamSinkChannel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.conduits.FixedLengthStreamSourceConduit:long transferTo(long,java.nio.ByteBuffer,org.xnio.channels.StreamSinkChannel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.websockets.core.protocol.version07.WebSocket07Channel$WebSocketFrameHeader:io.undertow.websockets.core.StreamSourceFrameChannel getChannel(io.undertow.connector.PooledByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.WebSocketChannel:io.undertow.websockets.core.StreamSourceFrameChannel createChannel(io.undertow.server.protocol.framed.FrameHeaderData,io.undertow.connector.PooledByteBuffer)"
        ]
    },
    "io.undertow.websockets.core.function.ChannelFunctionFileChannel:void afterReading(java.nio.ByteBuffer,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.function.ChannelFunctionFileChannel:int read(java.nio.ByteBuffer)",
            "io.undertow.websockets.core.function.ChannelFunctionFileChannel:long read(java.nio.ByteBuffer[],int,int)",
            "io.undertow.websockets.core.function.ChannelFunctionFileChannel:int read(java.nio.ByteBuffer,long)"
        ]
    },
    "io.undertow.websockets.core.function.ChannelFunctionReadableByteChannel:int read(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.function.ChannelFunctionReadableByteChannel:int read(java.nio.ByteBuffer)",
            "io.undertow.websockets.core.WebSocketUtils:long transfer(java.nio.channels.ReadableByteChannel,long,java.nio.ByteBuffer,java.nio.channels.WritableByteChannel)"
        ]
    },
    "io.undertow.websockets.core.function.ChannelFunctionStreamSourceChannel:void afterReading(java.nio.ByteBuffer,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.function.ChannelFunctionStreamSourceChannel:int read(java.nio.ByteBuffer)"
        ]
    },
    "io.undertow.io.UndertowOutputStream:void write(java.nio.ByteBuffer[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.UndertowOutputStream:void write(java.nio.ByteBuffer)",
            "io.undertow.io.BlockingSenderImpl:boolean writeBuffer(java.nio.ByteBuffer[],io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.conduits.FixedLengthStreamSourceConduit:void awaitReadable(long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.conduits.IdleTimeoutConduit:void awaitReadable(long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.FixedLengthStreamSourceConduit:void awaitReadable(long,java.util.concurrent.TimeUnit)",
            "io.undertow.conduits.IdleTimeoutConduit:void awaitReadable(long,java.util.concurrent.TimeUnit)",
            "io.undertow.protocols.ssl.SslConduit:void awaitReadable(long,java.util.concurrent.TimeUnit)",
            "io.undertow.server.protocol.ajp.AjpServerRequestConduit:void awaitReadable(long,java.util.concurrent.TimeUnit)"
        ]
    },
    "io.undertow.protocols.ssl.SslConduit:void awaitReadable(long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.FixedLengthStreamSourceConduit:void awaitReadable(long,java.util.concurrent.TimeUnit)",
            "io.undertow.conduits.IdleTimeoutConduit:void awaitReadable(long,java.util.concurrent.TimeUnit)",
            "io.undertow.protocols.ssl.SslConduit:void awaitReadable(long,java.util.concurrent.TimeUnit)",
            "io.undertow.protocols.ssl.SslConduit:void awaitWritable(long,java.util.concurrent.TimeUnit)",
            "io.undertow.server.protocol.ajp.AjpServerRequestConduit:void awaitReadable(long,java.util.concurrent.TimeUnit)"
        ]
    },
    "io.undertow.server.protocol.ajp.AjpServerRequestConduit:void awaitReadable(long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.conduits.FixedLengthStreamSourceConduit:void awaitReadable()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.conduits.IdleTimeoutConduit:void awaitReadable()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.FixedLengthStreamSourceConduit:void awaitReadable()",
            "io.undertow.conduits.IdleTimeoutConduit:void awaitReadable()",
            "io.undertow.protocols.ssl.SslConduit:void awaitReadable()",
            "io.undertow.server.protocol.ajp.AjpServerRequestConduit:void awaitReadable()"
        ]
    },
    "io.undertow.protocols.ssl.SslConduit:void awaitReadable()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.FixedLengthStreamSourceConduit:void awaitReadable()",
            "io.undertow.conduits.IdleTimeoutConduit:void awaitReadable()",
            "io.undertow.protocols.ssl.SslConduit:void awaitReadable()",
            "io.undertow.protocols.ssl.SslConduit:void awaitWritable()",
            "io.undertow.server.protocol.ajp.AjpServerRequestConduit:void awaitReadable()"
        ]
    },
    "io.undertow.server.protocol.ajp.AjpServerRequestConduit:void awaitReadable()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.websockets.core.WebSockets:void sendTextBlocking(java.lang.String,io.undertow.websockets.core.WebSocketChannel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.websockets.core.WebSockets:void sendTextBlocking(java.nio.ByteBuffer,io.undertow.websockets.core.WebSocketChannel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.websockets.core.WebSockets:void sendPingBlocking(java.nio.ByteBuffer,io.undertow.websockets.core.WebSocketChannel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.websockets.core.WebSockets:void sendPingBlocking(java.nio.ByteBuffer[],io.undertow.websockets.core.WebSocketChannel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.websockets.core.WebSockets:void sendPongBlocking(java.nio.ByteBuffer,io.undertow.websockets.core.WebSocketChannel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.websockets.core.WebSockets:void sendPongBlocking(java.nio.ByteBuffer[],io.undertow.websockets.core.WebSocketChannel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.websockets.core.WebSockets:void sendBinaryBlocking(java.nio.ByteBuffer,io.undertow.websockets.core.WebSocketChannel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.websockets.core.WebSockets:void sendBinaryBlocking(java.nio.ByteBuffer[],io.undertow.websockets.core.WebSocketChannel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.websockets.core.WebSockets:void sendCloseBlocking(io.undertow.websockets.core.CloseMessage,io.undertow.websockets.core.WebSocketChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.WebSockets:void sendCloseBlocking(int,java.lang.String,io.undertow.websockets.core.WebSocketChannel)",
            "io.undertow.websockets.core.WebSockets:void sendCloseBlocking(java.nio.ByteBuffer,io.undertow.websockets.core.WebSocketChannel)",
            "io.undertow.websockets.core.WebSockets:void sendCloseBlocking(java.nio.ByteBuffer[],io.undertow.websockets.core.WebSocketChannel)"
        ]
    },
    "io.undertow.server.HttpServerExchange$WriteDispatchChannel:long write(java.nio.ByteBuffer[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.channels.DetachableStreamSinkChannel:long write(java.nio.ByteBuffer[])",
            "io.undertow.io.AsyncSenderImpl:void send(java.nio.ByteBuffer[],io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void invokeOnComplete()"
        ]
    },
    "io.undertow.io.UndertowOutputStream:void write(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.protocol.version07.Base64$OutputStream:void write(int)",
            "io.undertow.websockets.spi.BlockingWebSocketHttpServerExchange:org.xnio.IoFuture sendData(java.nio.ByteBuffer)"
        ]
    },
    "io.undertow.io.UndertowOutputStream:void write(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.BlockingSenderImpl:void send(java.lang.String,io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:void send(java.lang.String,java.nio.charset.Charset,io.undertow.io.IoCallback)",
            "io.undertow.util.HttpString:void writeTo(java.io.OutputStream)",
            "io.undertow.websockets.core.protocol.version07.Base64$OutputStream:void write(int)",
            "io.undertow.websockets.core.protocol.version07.Base64$OutputStream:void flushBase64()"
        ]
    },
    "io.undertow.util.FlexBase64$DecoderOutputStream:void write(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.BlockingSenderImpl:void performTransfer(java.nio.channels.FileChannel,io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:boolean writeBuffer(java.nio.ByteBuffer[],io.undertow.io.IoCallback)",
            "io.undertow.util.FlexBase64$DecoderOutputStream:void write(byte[],int,int)",
            "io.undertow.util.FlexBase64$DecoderOutputStream:void write(int)",
            "io.undertow.util.FlexBase64$DecoderOutputStream:void flush()",
            "io.undertow.util.FlexBase64$EncoderOutputStream:void write(byte[],int,int)",
            "io.undertow.util.FlexBase64$EncoderOutputStream:void flush()",
            "io.undertow.util.FlexBase64$EncoderOutputStream:void complete()",
            "io.undertow.websockets.core.protocol.version07.Base64$OutputStream:void write(int)",
            "io.undertow.websockets.core.protocol.version07.Base64$OutputStream:void write(byte[],int,int)"
        ]
    },
    "io.undertow.util.FlexBase64$EncoderOutputStream:void write(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.BlockingSenderImpl:void performTransfer(java.nio.channels.FileChannel,io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:boolean writeBuffer(java.nio.ByteBuffer[],io.undertow.io.IoCallback)",
            "io.undertow.util.FlexBase64$DecoderOutputStream:void write(byte[],int,int)",
            "io.undertow.util.FlexBase64$DecoderOutputStream:void flush()",
            "io.undertow.util.FlexBase64$EncoderOutputStream:void write(byte[],int,int)",
            "io.undertow.util.FlexBase64$EncoderOutputStream:void write(int)",
            "io.undertow.util.FlexBase64$EncoderOutputStream:void flush()",
            "io.undertow.util.FlexBase64$EncoderOutputStream:void complete()",
            "io.undertow.websockets.core.protocol.version07.Base64$OutputStream:void write(int)",
            "io.undertow.websockets.core.protocol.version07.Base64$OutputStream:void write(byte[],int,int)"
        ]
    },
    "io.undertow.websockets.core.protocol.version07.Base64$OutputStream:void write(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.protocol.version07.Base64$OutputStream:void write(int)",
            "io.undertow.websockets.core.protocol.version07.Base64$OutputStream:void write(byte[],int,int)",
            "io.undertow.websockets.spi.BlockingWebSocketHttpServerExchange:org.xnio.IoFuture sendData(java.nio.ByteBuffer)"
        ]
    },
    "io.undertow.websockets.core.protocol.version07.Base64$OutputStream:void write(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.BlockingSenderImpl:void performTransfer(java.nio.channels.FileChannel,io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:boolean writeBuffer(java.nio.ByteBuffer[],io.undertow.io.IoCallback)",
            "io.undertow.util.FlexBase64$DecoderOutputStream:void write(byte[],int,int)",
            "io.undertow.util.FlexBase64$DecoderOutputStream:void flush()",
            "io.undertow.util.FlexBase64$EncoderOutputStream:void write(byte[],int,int)",
            "io.undertow.util.FlexBase64$EncoderOutputStream:void flush()",
            "io.undertow.util.FlexBase64$EncoderOutputStream:void complete()",
            "io.undertow.websockets.core.protocol.version07.Base64$OutputStream:void write(int)",
            "io.undertow.websockets.core.protocol.version07.Base64$OutputStream:void write(byte[],int,int)"
        ]
    },
    "io.undertow.protocols.ajp.AjpClientFramePriority:boolean insertFrame(io.undertow.server.protocol.framed.AbstractFramedStreamSinkChannel,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.framed.AbstractFramedChannel:void flushSenders()"
        ]
    },
    "io.undertow.protocols.ajp.AjpClientFramePriority:void frameAdded(io.undertow.server.protocol.framed.AbstractFramedStreamSinkChannel,java.util.List,java.util.Deque)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.framed.AbstractFramedChannel:void recalculateHeldFrames()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel:void flushSenders()"
        ]
    },
    "io.undertow.protocols.http2.Http2Channel:void <init>(org.xnio.StreamConnection,java.lang.String,io.undertow.connector.ByteBufferPool,io.undertow.connector.PooledByteBuffer,boolean,boolean,org.xnio.OptionMap)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpClientConnection:void doHttp2Upgrade()",
            "io.undertow.client.http2.Http2PriorKnowledgeClientProvider:void handleConnected(org.xnio.StreamConnection,io.undertow.client.ClientCallback,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap,java.lang.String)",
            "io.undertow.client.http2.Http2PriorKnowledgeClientProvider$5:void handleEvent(org.xnio.conduits.ConduitStreamSinkChannel)",
            "io.undertow.client.http2.Http2ClientProvider:io.undertow.client.http2.Http2ClientConnection createHttp2Channel(org.xnio.StreamConnection,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap,java.lang.String)",
            "io.undertow.client.http2.Http2ClearClientProvider$Http2ClearOpenListener:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.server.protocol.http2.Http2OpenListener:void handleEvent(org.xnio.StreamConnection,io.undertow.connector.PooledByteBuffer)"
        ]
    },
    "io.undertow.protocols.http2.Http2Channel:void <init>(org.xnio.StreamConnection,java.lang.String,io.undertow.connector.ByteBufferPool,io.undertow.connector.PooledByteBuffer,boolean,boolean,boolean,org.xnio.OptionMap)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.http.HttpReadListener:boolean doHttp2PriRead(org.xnio.StreamConnection,java.nio.ByteBuffer,io.undertow.server.protocol.http.HttpServerConnection,io.undertow.connector.PooledByteBuffer)"
        ]
    },
    "io.undertow.protocols.http2.Http2DataStreamSinkChannel:void handleFlushComplete(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.framed.AbstractFramedStreamSinkChannel:void flushComplete()"
        ]
    },
    "io.undertow.server.HttpServerExchange$2:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection$3:void handleEvent(io.undertow.protocols.ajp.AjpClientChannel)",
            "io.undertow.client.http.HttpClientConnection$5:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.client.http2.Http2ClientConnection$1:void handleEvent(io.undertow.protocols.http2.Http2Channel)",
            "io.undertow.client.ALPNClientSelector$2:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ALPNClientSelector$2:void handleSelected(java.lang.String)",
            "io.undertow.client.ALPNClientSelector:void runAlpn(org.xnio.ssl.SslConnection,org.xnio.ChannelListener,io.undertow.client.ClientCallback,io.undertow.client.ALPNClientSelector$ALPNProtocol[])",
            "io.undertow.protocols.ajp.AjpClientResponseStreamSourceChannel:void complete()",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void handleFlushComplete(boolean)",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void channelForciblyClosed()",
            "io.undertow.protocols.http2.Http2StreamSourceChannel:void channelForciblyClosed()",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$RequestExchangeListener:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void close()"
        ]
    },
    "io.undertow.websockets.core.WebSockets:void sendText(java.lang.String,io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.websockets.core.WebSockets:void sendText(java.lang.String,io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.websockets.core.AbstractReceiveListener:void onFullPingMessage(io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.BufferedBinaryMessage)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.websockets.core.WebSockets:void sendClose(java.nio.ByteBuffer,io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.websockets.core.WebSockets:void sendClose(java.nio.ByteBuffer[],io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.websockets.core.WebSockets:void sendClose(int,java.lang.String,io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.websockets.core.WebSockets:void sendClose(io.undertow.websockets.core.CloseMessage,io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.AbstractReceiveListener:void onFullCloseMessage(io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.BufferedBinaryMessage)",
            "io.undertow.websockets.core.BufferedTextMessage:void checkMaxSize(io.undertow.websockets.core.StreamSourceFrameChannel,int)",
            "io.undertow.websockets.core.WebSockets:void sendClose(java.nio.ByteBuffer,io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback)",
            "io.undertow.websockets.core.WebSockets:void sendClose(java.nio.ByteBuffer[],io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback)",
            "io.undertow.websockets.core.WebSockets:void sendClose(int,java.lang.String,io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback)",
            "io.undertow.websockets.core.BufferedBinaryMessage:void checkMaxSize(io.undertow.websockets.core.StreamSourceFrameChannel,int)"
        ]
    },
    "io.undertow.server.handlers.proxy.ProxyConnectionPool$4$1:void completed(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientProvider:void handleConnected(org.xnio.StreamConnection,io.undertow.client.ClientCallback,java.net.URI,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)",
            "io.undertow.client.ajp.AjpClientExchange:void setResponse(io.undertow.client.ClientResponse)",
            "io.undertow.client.ajp.AjpClientExchange:void setResponseListener(io.undertow.client.ClientCallback)",
            "io.undertow.client.ajp.AjpClientExchange:void invokeReadReadyCallback(io.undertow.client.ClientExchange)",
            "io.undertow.client.http.HttpClientProvider:void handleConnected(org.xnio.StreamConnection,io.undertow.client.ClientCallback,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap,java.net.URI)",
            "io.undertow.client.http.HttpClientProvider$3:void handleEvent(org.xnio.ssl.SslConnection)",
            "io.undertow.client.http.HttpClientExchange:void setResponse(io.undertow.client.ClientResponse)",
            "io.undertow.client.http.HttpClientExchange:void setResponseListener(io.undertow.client.ClientCallback)",
            "io.undertow.client.http.HttpClientExchange:void invokeReadReadyCallback()",
            "io.undertow.client.http2.Http2ClientProvider$4:void handleEvent(org.xnio.ssl.SslConnection)",
            "io.undertow.client.http2.Http2PriorKnowledgeClientProvider:void handleConnected(org.xnio.StreamConnection,io.undertow.client.ClientCallback,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap,java.lang.String)",
            "io.undertow.client.http2.Http2PriorKnowledgeClientProvider$5:void handleEvent(org.xnio.conduits.ConduitStreamSinkChannel)",
            "io.undertow.client.http2.Http2ClearClientProvider$Http2ClearOpenListener:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.client.http2.Http2ClientExchange:void responseReady(io.undertow.protocols.http2.Http2StreamSourceChannel)",
            "io.undertow.client.http2.Http2ClientConnection:void sendRequest(io.undertow.client.ClientRequest,io.undertow.client.ClientCallback)"
        ]
    },
    "io.undertow.server.protocol.ajp.AjpReadListener$3:void handleEvent(org.xnio.conduits.Conduit)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.HeadStreamSinkConduit:void exitFlush(int,boolean)",
            "io.undertow.conduits.ChunkedStreamSinkConduit:void invokeFinishListener()",
            "io.undertow.conduits.FinishableStreamSourceConduit:void exitRead(long)",
            "io.undertow.conduits.PreChunkedStreamSinkConduit:void invokeFinishListener()",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:void checkMaxSize(long)",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:void invokeFinishListener()",
            "io.undertow.conduits.ChunkedStreamSourceConduit:void updateRemainingAllowed(int)",
            "io.undertow.conduits.ChunkedStreamSourceConduit:int read(java.nio.ByteBuffer)",
            "io.undertow.conduits.FinishableStreamSinkConduit:void truncateWrites()",
            "io.undertow.conduits.FinishableStreamSinkConduit:boolean flush()",
            "io.undertow.server.protocol.ajp.AjpServerResponseConduit:void finished()",
            "io.undertow.server.protocol.ajp.AjpServerRequestConduit:int read(java.nio.ByteBuffer)",
            "io.undertow.server.protocol.ajp.AjpServerRequestConduit:int doRead(java.nio.ByteBuffer,long)"
        ]
    },
    "io.undertow.server.protocol.http.HttpTransferEncoding$2:void handleEvent(org.xnio.conduits.Conduit)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.HeadStreamSinkConduit:void exitFlush(int,boolean)",
            "io.undertow.conduits.ChunkedStreamSinkConduit:void invokeFinishListener()",
            "io.undertow.conduits.FinishableStreamSourceConduit:void exitRead(long)",
            "io.undertow.conduits.PreChunkedStreamSinkConduit:void invokeFinishListener()",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:void checkMaxSize(long)",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:void invokeFinishListener()",
            "io.undertow.conduits.ChunkedStreamSourceConduit:void updateRemainingAllowed(int)",
            "io.undertow.conduits.ChunkedStreamSourceConduit:int read(java.nio.ByteBuffer)",
            "io.undertow.conduits.FinishableStreamSinkConduit:void truncateWrites()",
            "io.undertow.conduits.FinishableStreamSinkConduit:boolean flush()",
            "io.undertow.server.protocol.ajp.AjpServerResponseConduit:void finished()",
            "io.undertow.server.protocol.ajp.AjpServerRequestConduit:int read(java.nio.ByteBuffer)",
            "io.undertow.server.protocol.ajp.AjpServerRequestConduit:int doRead(java.nio.ByteBuffer,long)"
        ]
    },
    "io.undertow.server.protocol.http.HttpTransferEncoding$1:void handleEvent(org.xnio.conduits.Conduit)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.HeadStreamSinkConduit:void exitFlush(int,boolean)",
            "io.undertow.conduits.ChunkedStreamSinkConduit:void invokeFinishListener()",
            "io.undertow.conduits.FinishableStreamSourceConduit:void exitRead(long)",
            "io.undertow.conduits.PreChunkedStreamSinkConduit:void invokeFinishListener()",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:void checkMaxSize(long)",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:void invokeFinishListener()",
            "io.undertow.conduits.ChunkedStreamSourceConduit:void updateRemainingAllowed(int)",
            "io.undertow.conduits.ChunkedStreamSourceConduit:int read(java.nio.ByteBuffer)",
            "io.undertow.conduits.FinishableStreamSinkConduit:void truncateWrites()",
            "io.undertow.conduits.FinishableStreamSinkConduit:boolean flush()",
            "io.undertow.server.protocol.ajp.AjpServerResponseConduit:void finished()",
            "io.undertow.server.protocol.ajp.AjpServerRequestConduit:int read(java.nio.ByteBuffer)",
            "io.undertow.server.protocol.ajp.AjpServerRequestConduit:int doRead(java.nio.ByteBuffer,long)"
        ]
    },
    "io.undertow.server.protocol.http.HttpContinue:io.undertow.server.protocol.http.HttpContinue$ContinueResponseSender createResponseSender(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.HttpContinueReadHandler$ContinueConduit:long transferTo(long,long,java.nio.channels.FileChannel)",
            "io.undertow.server.handlers.HttpContinueReadHandler$ContinueConduit:long transferTo(long,java.nio.ByteBuffer,org.xnio.channels.StreamSinkChannel)",
            "io.undertow.server.handlers.HttpContinueReadHandler$ContinueConduit:int read(java.nio.ByteBuffer)",
            "io.undertow.server.handlers.HttpContinueReadHandler$ContinueConduit:long read(java.nio.ByteBuffer[],int,int)",
            "io.undertow.server.handlers.HttpContinueReadHandler$ContinueConduit:void awaitReadable(long,java.util.concurrent.TimeUnit)",
            "io.undertow.server.handlers.HttpContinueReadHandler$ContinueConduit:void awaitReadable()"
        ]
    },
    "io.undertow.server.protocol.http2.Http2ReceiveListener$2:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection$3:void handleEvent(io.undertow.protocols.ajp.AjpClientChannel)",
            "io.undertow.client.http.HttpClientConnection$5:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.client.http2.Http2ClientConnection$1:void handleEvent(io.undertow.protocols.http2.Http2Channel)",
            "io.undertow.client.ALPNClientSelector$2:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ALPNClientSelector$2:void handleSelected(java.lang.String)",
            "io.undertow.client.ALPNClientSelector:void runAlpn(org.xnio.ssl.SslConnection,org.xnio.ChannelListener,io.undertow.client.ClientCallback,io.undertow.client.ALPNClientSelector$ALPNProtocol[])",
            "io.undertow.protocols.ajp.AjpClientResponseStreamSourceChannel:void complete()",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void handleFlushComplete(boolean)",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void channelForciblyClosed()",
            "io.undertow.protocols.http2.Http2StreamSourceChannel:void channelForciblyClosed()",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$RequestExchangeListener:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void close()"
        ]
    },
    "io.undertow.server.protocol.ajp.AjpReadListener$1:void handleEvent(org.xnio.conduits.Conduit)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.HeadStreamSinkConduit:void exitFlush(int,boolean)",
            "io.undertow.conduits.ChunkedStreamSinkConduit:void invokeFinishListener()",
            "io.undertow.conduits.FinishableStreamSourceConduit:void exitRead(long)",
            "io.undertow.conduits.PreChunkedStreamSinkConduit:void invokeFinishListener()",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:void checkMaxSize(long)",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:void invokeFinishListener()",
            "io.undertow.conduits.ChunkedStreamSourceConduit:void updateRemainingAllowed(int)",
            "io.undertow.conduits.ChunkedStreamSourceConduit:int read(java.nio.ByteBuffer)",
            "io.undertow.conduits.FinishableStreamSinkConduit:void truncateWrites()",
            "io.undertow.conduits.FinishableStreamSinkConduit:boolean flush()",
            "io.undertow.server.protocol.ajp.AjpServerResponseConduit:void finished()",
            "io.undertow.server.protocol.ajp.AjpServerRequestConduit:int read(java.nio.ByteBuffer)",
            "io.undertow.server.protocol.ajp.AjpServerRequestConduit:int doRead(java.nio.ByteBuffer,long)"
        ]
    },
    "io.undertow.conduits.AbstractFixedLengthStreamSinkConduit:void truncateWrites()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.conduits.AbstractFixedLengthStreamSinkConduit:void exitFlush(long,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.AbstractFixedLengthStreamSinkConduit:boolean flush()"
        ]
    },
    "io.undertow.server.protocol.http.HttpTransferEncoding$3:void handleEvent(org.xnio.conduits.Conduit)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.HeadStreamSinkConduit:void exitFlush(int,boolean)",
            "io.undertow.conduits.ChunkedStreamSinkConduit:void invokeFinishListener()",
            "io.undertow.conduits.FinishableStreamSourceConduit:void exitRead(long)",
            "io.undertow.conduits.PreChunkedStreamSinkConduit:void invokeFinishListener()",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:void checkMaxSize(long)",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:void invokeFinishListener()",
            "io.undertow.conduits.ChunkedStreamSourceConduit:void updateRemainingAllowed(int)",
            "io.undertow.conduits.ChunkedStreamSourceConduit:int read(java.nio.ByteBuffer)",
            "io.undertow.conduits.FinishableStreamSinkConduit:void truncateWrites()",
            "io.undertow.conduits.FinishableStreamSinkConduit:boolean flush()",
            "io.undertow.server.protocol.ajp.AjpServerResponseConduit:void finished()",
            "io.undertow.server.protocol.ajp.AjpServerRequestConduit:int read(java.nio.ByteBuffer)",
            "io.undertow.server.protocol.ajp.AjpServerRequestConduit:int doRead(java.nio.ByteBuffer,long)"
        ]
    },
    "io.undertow.server.protocol.http2.Http2ReceiveListener$1:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection$3:void handleEvent(io.undertow.protocols.ajp.AjpClientChannel)",
            "io.undertow.client.http.HttpClientConnection$5:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.client.http2.Http2ClientConnection$1:void handleEvent(io.undertow.protocols.http2.Http2Channel)",
            "io.undertow.client.ALPNClientSelector$2:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ALPNClientSelector$2:void handleSelected(java.lang.String)",
            "io.undertow.client.ALPNClientSelector:void runAlpn(org.xnio.ssl.SslConnection,org.xnio.ChannelListener,io.undertow.client.ClientCallback,io.undertow.client.ALPNClientSelector$ALPNProtocol[])",
            "io.undertow.protocols.ajp.AjpClientResponseStreamSourceChannel:void complete()",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void handleFlushComplete(boolean)",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void channelForciblyClosed()",
            "io.undertow.protocols.http2.Http2StreamSourceChannel:void channelForciblyClosed()",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$RequestExchangeListener:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void close()"
        ]
    },
    "io.undertow.server.protocol.http2.Http2ReceiveListener$3:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection$3:void handleEvent(io.undertow.protocols.ajp.AjpClientChannel)",
            "io.undertow.client.http.HttpClientConnection$5:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.client.http2.Http2ClientConnection$1:void handleEvent(io.undertow.protocols.http2.Http2Channel)",
            "io.undertow.client.ALPNClientSelector$2:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ALPNClientSelector$2:void handleSelected(java.lang.String)",
            "io.undertow.client.ALPNClientSelector:void runAlpn(org.xnio.ssl.SslConnection,org.xnio.ChannelListener,io.undertow.client.ClientCallback,io.undertow.client.ALPNClientSelector$ALPNProtocol[])",
            "io.undertow.protocols.ajp.AjpClientResponseStreamSourceChannel:void complete()",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void handleFlushComplete(boolean)",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void channelForciblyClosed()",
            "io.undertow.protocols.http2.Http2StreamSourceChannel:void channelForciblyClosed()",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$RequestExchangeListener:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void close()"
        ]
    },
    "io.undertow.client.ajp.AjpClientConnection$1:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection$3:void handleEvent(io.undertow.protocols.ajp.AjpClientChannel)",
            "io.undertow.client.http.HttpClientConnection$5:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.client.http2.Http2ClientConnection$1:void handleEvent(io.undertow.protocols.http2.Http2Channel)",
            "io.undertow.client.ALPNClientSelector$2:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ALPNClientSelector$2:void handleSelected(java.lang.String)",
            "io.undertow.client.ALPNClientSelector:void runAlpn(org.xnio.ssl.SslConnection,org.xnio.ChannelListener,io.undertow.client.ClientCallback,io.undertow.client.ALPNClientSelector$ALPNProtocol[])",
            "io.undertow.protocols.ajp.AjpClientResponseStreamSourceChannel:void complete()",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void handleFlushComplete(boolean)",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void channelForciblyClosed()",
            "io.undertow.protocols.http2.Http2StreamSourceChannel:void channelForciblyClosed()",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$RequestExchangeListener:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void close()"
        ]
    },
    "io.undertow.client.ajp.AjpClientConnection$2:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection$3:void handleEvent(io.undertow.protocols.ajp.AjpClientChannel)",
            "io.undertow.client.http.HttpClientConnection$5:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.client.http2.Http2ClientConnection$1:void handleEvent(io.undertow.protocols.http2.Http2Channel)",
            "io.undertow.client.ALPNClientSelector$2:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ALPNClientSelector$2:void handleSelected(java.lang.String)",
            "io.undertow.client.ALPNClientSelector:void runAlpn(org.xnio.ssl.SslConnection,org.xnio.ChannelListener,io.undertow.client.ClientCallback,io.undertow.client.ALPNClientSelector$ALPNProtocol[])",
            "io.undertow.protocols.ajp.AjpClientResponseStreamSourceChannel:void complete()",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void handleFlushComplete(boolean)",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void channelForciblyClosed()",
            "io.undertow.protocols.http2.Http2StreamSourceChannel:void channelForciblyClosed()",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$RequestExchangeListener:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void close()"
        ]
    },
    "io.undertow.client.http.HttpClientConnection$1:void handleEvent(org.xnio.conduits.Conduit)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.HeadStreamSinkConduit:void exitFlush(int,boolean)",
            "io.undertow.conduits.ChunkedStreamSinkConduit:void invokeFinishListener()",
            "io.undertow.conduits.FinishableStreamSourceConduit:void exitRead(long)",
            "io.undertow.conduits.PreChunkedStreamSinkConduit:void invokeFinishListener()",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:void checkMaxSize(long)",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:void invokeFinishListener()",
            "io.undertow.conduits.ChunkedStreamSourceConduit:void updateRemainingAllowed(int)",
            "io.undertow.conduits.ChunkedStreamSourceConduit:int read(java.nio.ByteBuffer)",
            "io.undertow.conduits.FinishableStreamSinkConduit:void truncateWrites()",
            "io.undertow.conduits.FinishableStreamSinkConduit:boolean flush()",
            "io.undertow.server.protocol.ajp.AjpServerResponseConduit:void finished()",
            "io.undertow.server.protocol.ajp.AjpServerRequestConduit:int read(java.nio.ByteBuffer)",
            "io.undertow.server.protocol.ajp.AjpServerRequestConduit:int doRead(java.nio.ByteBuffer,long)"
        ]
    },
    "io.undertow.client.http.HttpClientConnection$2:void handleEvent(org.xnio.conduits.Conduit)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.HeadStreamSinkConduit:void exitFlush(int,boolean)",
            "io.undertow.conduits.ChunkedStreamSinkConduit:void invokeFinishListener()",
            "io.undertow.conduits.FinishableStreamSourceConduit:void exitRead(long)",
            "io.undertow.conduits.PreChunkedStreamSinkConduit:void invokeFinishListener()",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:void checkMaxSize(long)",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:void invokeFinishListener()",
            "io.undertow.conduits.ChunkedStreamSourceConduit:void updateRemainingAllowed(int)",
            "io.undertow.conduits.ChunkedStreamSourceConduit:int read(java.nio.ByteBuffer)",
            "io.undertow.conduits.FinishableStreamSinkConduit:void truncateWrites()",
            "io.undertow.conduits.FinishableStreamSinkConduit:boolean flush()",
            "io.undertow.server.protocol.ajp.AjpServerResponseConduit:void finished()",
            "io.undertow.server.protocol.ajp.AjpServerRequestConduit:int read(java.nio.ByteBuffer)",
            "io.undertow.server.protocol.ajp.AjpServerRequestConduit:int doRead(java.nio.ByteBuffer,long)"
        ]
    },
    "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$RequestExchangeListener$1:void handleEvent(org.xnio.channels.StreamSourceChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$RequestExchangeListener$1:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$HostPingTask$2:void handleDone(org.xnio.StreamConnection,java.lang.Void)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$HostPingTask$2:void handleDone(java.lang.Object,java.lang.Object)"
        ]
    },
    "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$HttpClientPingTask$1:void failed(java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientProvider$2:void notify(org.xnio.IoFuture,java.lang.Object)",
            "io.undertow.client.ajp.AjpClientProvider$4:void notify(org.xnio.IoFuture,java.lang.Object)",
            "io.undertow.client.ajp.AjpClientExchange:void setResponseListener(io.undertow.client.ClientCallback)",
            "io.undertow.client.ajp.AjpClientExchange:void setFailed(java.io.IOException)",
            "io.undertow.client.ajp.AjpClientConnection:void sendRequest(io.undertow.client.ClientRequest,io.undertow.client.ClientCallback)",
            "io.undertow.client.http.HttpClientProvider:void connect(io.undertow.client.ClientCallback,java.net.InetSocketAddress,java.net.URI,org.xnio.XnioWorker,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)",
            "io.undertow.client.http.HttpClientProvider:void connect(io.undertow.client.ClientCallback,java.net.InetSocketAddress,java.net.URI,org.xnio.XnioIoThread,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)",
            "io.undertow.client.http.HttpClientProvider:void handleConnected(org.xnio.StreamConnection,io.undertow.client.ClientCallback,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap,java.net.URI)",
            "io.undertow.client.http.HttpClientProvider$1:void notify(org.xnio.IoFuture,java.lang.Object)",
            "io.undertow.client.http.HttpClientExchange:void setResponseListener(io.undertow.client.ClientCallback)",
            "io.undertow.client.http.HttpClientExchange:void setFailed(java.io.IOException)",
            "io.undertow.client.http.HttpClientConnection:void sendRequest(io.undertow.client.ClientRequest,io.undertow.client.ClientCallback)",
            "io.undertow.client.http2.Http2PriorKnowledgeClientProvider:void handleConnected(org.xnio.StreamConnection,io.undertow.client.ClientCallback,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap,java.lang.String)",
            "io.undertow.client.http2.Http2ClientProvider$2:void notify(org.xnio.IoFuture,java.lang.Object)",
            "io.undertow.client.http2.Http2PriorKnowledgeClientProvider$5:void handleEvent(org.xnio.conduits.ConduitStreamSinkChannel)",
            "io.undertow.client.http2.Http2ClientProvider:void connect(io.undertow.client.ClientCallback,java.net.InetSocketAddress,java.net.URI,org.xnio.XnioWorker,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)",
            "io.undertow.client.http2.Http2ClientProvider:void connect(io.undertow.client.ClientCallback,java.net.InetSocketAddress,java.net.URI,org.xnio.XnioIoThread,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)",
            "io.undertow.client.http2.Http2ClientExchange:void setResponseListener(io.undertow.client.ClientCallback)",
            "io.undertow.client.http2.Http2ClientExchange:void failed(java.io.IOException)",
            "io.undertow.client.http2.Http2ClearClientProvider:void connect(io.undertow.client.ClientCallback,java.net.InetSocketAddress,java.net.URI,org.xnio.XnioWorker,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)",
            "io.undertow.client.http2.Http2ClearClientProvider:void connect(io.undertow.client.ClientCallback,java.net.InetSocketAddress,java.net.URI,org.xnio.XnioIoThread,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)",
            "io.undertow.client.http2.Http2PriorKnowledgeClientProvider$1:void notify(org.xnio.IoFuture,java.lang.Object)",
            "io.undertow.client.http2.Http2ClearClientProvider$FailedNotifier:void notify(org.xnio.IoFuture,java.lang.Object)",
            "io.undertow.client.http2.Http2ClientConnection:void sendRequest(io.undertow.client.ClientRequest,io.undertow.client.ClientCallback)",
            "io.undertow.client.ALPNClientSelector$2:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ALPNClientSelector:void runAlpn(org.xnio.ssl.SslConnection,org.xnio.ChannelListener,io.undertow.client.ClientCallback,io.undertow.client.ALPNClientSelector$ALPNProtocol[])"
        ]
    },
    "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$HostPingTask$2:void handleFailed(java.io.IOException,java.lang.Void)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$HostPingTask$2:void handleFailed(java.io.IOException,java.lang.Object)"
        ]
    },
    "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$RequestExchangeListener$2:void handleException(org.xnio.channels.StreamSourceChannel,java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$RequestExchangeListener$2:void handleException(java.nio.channels.Channel,java.io.IOException)"
        ]
    },
    "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$HttpClientPingTask$1$1:void failed(java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientProvider$2:void notify(org.xnio.IoFuture,java.lang.Object)",
            "io.undertow.client.ajp.AjpClientProvider$4:void notify(org.xnio.IoFuture,java.lang.Object)",
            "io.undertow.client.ajp.AjpClientExchange:void setResponseListener(io.undertow.client.ClientCallback)",
            "io.undertow.client.ajp.AjpClientExchange:void setFailed(java.io.IOException)",
            "io.undertow.client.ajp.AjpClientConnection:void sendRequest(io.undertow.client.ClientRequest,io.undertow.client.ClientCallback)",
            "io.undertow.client.http.HttpClientProvider:void connect(io.undertow.client.ClientCallback,java.net.InetSocketAddress,java.net.URI,org.xnio.XnioWorker,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)",
            "io.undertow.client.http.HttpClientProvider:void connect(io.undertow.client.ClientCallback,java.net.InetSocketAddress,java.net.URI,org.xnio.XnioIoThread,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)",
            "io.undertow.client.http.HttpClientProvider:void handleConnected(org.xnio.StreamConnection,io.undertow.client.ClientCallback,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap,java.net.URI)",
            "io.undertow.client.http.HttpClientProvider$1:void notify(org.xnio.IoFuture,java.lang.Object)",
            "io.undertow.client.http.HttpClientExchange:void setResponseListener(io.undertow.client.ClientCallback)",
            "io.undertow.client.http.HttpClientExchange:void setFailed(java.io.IOException)",
            "io.undertow.client.http.HttpClientConnection:void sendRequest(io.undertow.client.ClientRequest,io.undertow.client.ClientCallback)",
            "io.undertow.client.http2.Http2PriorKnowledgeClientProvider:void handleConnected(org.xnio.StreamConnection,io.undertow.client.ClientCallback,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap,java.lang.String)",
            "io.undertow.client.http2.Http2ClientProvider$2:void notify(org.xnio.IoFuture,java.lang.Object)",
            "io.undertow.client.http2.Http2PriorKnowledgeClientProvider$5:void handleEvent(org.xnio.conduits.ConduitStreamSinkChannel)",
            "io.undertow.client.http2.Http2ClientProvider:void connect(io.undertow.client.ClientCallback,java.net.InetSocketAddress,java.net.URI,org.xnio.XnioWorker,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)",
            "io.undertow.client.http2.Http2ClientProvider:void connect(io.undertow.client.ClientCallback,java.net.InetSocketAddress,java.net.URI,org.xnio.XnioIoThread,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)",
            "io.undertow.client.http2.Http2ClientExchange:void setResponseListener(io.undertow.client.ClientCallback)",
            "io.undertow.client.http2.Http2ClientExchange:void failed(java.io.IOException)",
            "io.undertow.client.http2.Http2ClearClientProvider:void connect(io.undertow.client.ClientCallback,java.net.InetSocketAddress,java.net.URI,org.xnio.XnioWorker,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)",
            "io.undertow.client.http2.Http2ClearClientProvider:void connect(io.undertow.client.ClientCallback,java.net.InetSocketAddress,java.net.URI,org.xnio.XnioIoThread,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)",
            "io.undertow.client.http2.Http2PriorKnowledgeClientProvider$1:void notify(org.xnio.IoFuture,java.lang.Object)",
            "io.undertow.client.http2.Http2ClearClientProvider$FailedNotifier:void notify(org.xnio.IoFuture,java.lang.Object)",
            "io.undertow.client.http2.Http2ClientConnection:void sendRequest(io.undertow.client.ClientRequest,io.undertow.client.ClientCallback)",
            "io.undertow.client.ALPNClientSelector$2:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ALPNClientSelector:void runAlpn(org.xnio.ssl.SslConnection,org.xnio.ChannelListener,io.undertow.client.ClientCallback,io.undertow.client.ALPNClientSelector$ALPNProtocol[])"
        ]
    },
    "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$ConnectionPoolPingTask$1:void failed(java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientProvider$2:void notify(org.xnio.IoFuture,java.lang.Object)",
            "io.undertow.client.ajp.AjpClientProvider$4:void notify(org.xnio.IoFuture,java.lang.Object)",
            "io.undertow.client.ajp.AjpClientExchange:void setResponseListener(io.undertow.client.ClientCallback)",
            "io.undertow.client.ajp.AjpClientExchange:void setFailed(java.io.IOException)",
            "io.undertow.client.ajp.AjpClientConnection:void sendRequest(io.undertow.client.ClientRequest,io.undertow.client.ClientCallback)",
            "io.undertow.client.http.HttpClientProvider:void connect(io.undertow.client.ClientCallback,java.net.InetSocketAddress,java.net.URI,org.xnio.XnioWorker,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)",
            "io.undertow.client.http.HttpClientProvider:void connect(io.undertow.client.ClientCallback,java.net.InetSocketAddress,java.net.URI,org.xnio.XnioIoThread,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)",
            "io.undertow.client.http.HttpClientProvider:void handleConnected(org.xnio.StreamConnection,io.undertow.client.ClientCallback,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap,java.net.URI)",
            "io.undertow.client.http.HttpClientProvider$1:void notify(org.xnio.IoFuture,java.lang.Object)",
            "io.undertow.client.http.HttpClientExchange:void setResponseListener(io.undertow.client.ClientCallback)",
            "io.undertow.client.http.HttpClientExchange:void setFailed(java.io.IOException)",
            "io.undertow.client.http.HttpClientConnection:void sendRequest(io.undertow.client.ClientRequest,io.undertow.client.ClientCallback)",
            "io.undertow.client.http2.Http2PriorKnowledgeClientProvider:void handleConnected(org.xnio.StreamConnection,io.undertow.client.ClientCallback,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap,java.lang.String)",
            "io.undertow.client.http2.Http2ClientProvider$2:void notify(org.xnio.IoFuture,java.lang.Object)",
            "io.undertow.client.http2.Http2PriorKnowledgeClientProvider$5:void handleEvent(org.xnio.conduits.ConduitStreamSinkChannel)",
            "io.undertow.client.http2.Http2ClientProvider:void connect(io.undertow.client.ClientCallback,java.net.InetSocketAddress,java.net.URI,org.xnio.XnioWorker,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)",
            "io.undertow.client.http2.Http2ClientProvider:void connect(io.undertow.client.ClientCallback,java.net.InetSocketAddress,java.net.URI,org.xnio.XnioIoThread,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)",
            "io.undertow.client.http2.Http2ClientExchange:void setResponseListener(io.undertow.client.ClientCallback)",
            "io.undertow.client.http2.Http2ClientExchange:void failed(java.io.IOException)",
            "io.undertow.client.http2.Http2ClearClientProvider:void connect(io.undertow.client.ClientCallback,java.net.InetSocketAddress,java.net.URI,org.xnio.XnioWorker,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)",
            "io.undertow.client.http2.Http2ClearClientProvider:void connect(io.undertow.client.ClientCallback,java.net.InetSocketAddress,java.net.URI,org.xnio.XnioIoThread,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)",
            "io.undertow.client.http2.Http2PriorKnowledgeClientProvider$1:void notify(org.xnio.IoFuture,java.lang.Object)",
            "io.undertow.client.http2.Http2ClearClientProvider$FailedNotifier:void notify(org.xnio.IoFuture,java.lang.Object)",
            "io.undertow.client.http2.Http2ClientConnection:void sendRequest(io.undertow.client.ClientRequest,io.undertow.client.ClientCallback)",
            "io.undertow.client.ALPNClientSelector$2:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ALPNClientSelector:void runAlpn(org.xnio.ssl.SslConnection,org.xnio.ChannelListener,io.undertow.client.ClientCallback,io.undertow.client.ALPNClientSelector$ALPNProtocol[])"
        ]
    },
    "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$HostPingTask:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.ssl.SslConduit$5:void run()",
            "io.undertow.protocols.ssl.SslConduit:void runReadListener(boolean)",
            "io.undertow.protocols.ssl.SslConduit:boolean handleHandshakeResult(javax.net.ssl.SSLEngineResult)",
            "io.undertow.protocols.ssl.SslConduit$2:void run()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$FrameReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$3:void run()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel:void runInIoThread(java.lang.Runnable)",
            "io.undertow.server.protocol.http.ALPNLimitingSSLEngine:void limitCiphers(java.util.List)",
            "io.undertow.server.protocol.ParseTimeoutUpdater:void run()",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:io.undertow.server.HttpServerExchange dispatch(java.util.concurrent.Executor,java.lang.Runnable)",
            "io.undertow.util.SameThreadExecutor:void execute(java.lang.Runnable)",
            "io.undertow.util.PipeliningExecutor$1:void run()"
        ]
    },
    "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$ConnectionPoolPingTask$1$1:void handleException(org.xnio.channels.StreamSinkChannel,java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$ConnectionPoolPingTask$1$1:void handleException(java.nio.channels.Channel,java.io.IOException)"
        ]
    },
    "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$HttpClientPingTask$1$1$1:void handleException(org.xnio.channels.StreamSinkChannel,java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$HttpClientPingTask$1$1$1:void handleException(java.nio.channels.Channel,java.io.IOException)"
        ]
    },
    "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$RequestExchangeListener:void failed(java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientProvider$2:void notify(org.xnio.IoFuture,java.lang.Object)",
            "io.undertow.client.ajp.AjpClientProvider$4:void notify(org.xnio.IoFuture,java.lang.Object)",
            "io.undertow.client.ajp.AjpClientExchange:void setResponseListener(io.undertow.client.ClientCallback)",
            "io.undertow.client.ajp.AjpClientExchange:void setFailed(java.io.IOException)",
            "io.undertow.client.ajp.AjpClientConnection:void sendRequest(io.undertow.client.ClientRequest,io.undertow.client.ClientCallback)",
            "io.undertow.client.http.HttpClientProvider:void connect(io.undertow.client.ClientCallback,java.net.InetSocketAddress,java.net.URI,org.xnio.XnioWorker,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)",
            "io.undertow.client.http.HttpClientProvider:void connect(io.undertow.client.ClientCallback,java.net.InetSocketAddress,java.net.URI,org.xnio.XnioIoThread,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)",
            "io.undertow.client.http.HttpClientProvider:void handleConnected(org.xnio.StreamConnection,io.undertow.client.ClientCallback,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap,java.net.URI)",
            "io.undertow.client.http.HttpClientProvider$1:void notify(org.xnio.IoFuture,java.lang.Object)",
            "io.undertow.client.http.HttpClientExchange:void setResponseListener(io.undertow.client.ClientCallback)",
            "io.undertow.client.http.HttpClientExchange:void setFailed(java.io.IOException)",
            "io.undertow.client.http.HttpClientConnection:void sendRequest(io.undertow.client.ClientRequest,io.undertow.client.ClientCallback)",
            "io.undertow.client.http2.Http2PriorKnowledgeClientProvider:void handleConnected(org.xnio.StreamConnection,io.undertow.client.ClientCallback,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap,java.lang.String)",
            "io.undertow.client.http2.Http2ClientProvider$2:void notify(org.xnio.IoFuture,java.lang.Object)",
            "io.undertow.client.http2.Http2PriorKnowledgeClientProvider$5:void handleEvent(org.xnio.conduits.ConduitStreamSinkChannel)",
            "io.undertow.client.http2.Http2ClientProvider:void connect(io.undertow.client.ClientCallback,java.net.InetSocketAddress,java.net.URI,org.xnio.XnioWorker,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)",
            "io.undertow.client.http2.Http2ClientProvider:void connect(io.undertow.client.ClientCallback,java.net.InetSocketAddress,java.net.URI,org.xnio.XnioIoThread,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)",
            "io.undertow.client.http2.Http2ClientExchange:void setResponseListener(io.undertow.client.ClientCallback)",
            "io.undertow.client.http2.Http2ClientExchange:void failed(java.io.IOException)",
            "io.undertow.client.http2.Http2ClearClientProvider:void connect(io.undertow.client.ClientCallback,java.net.InetSocketAddress,java.net.URI,org.xnio.XnioWorker,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)",
            "io.undertow.client.http2.Http2ClearClientProvider:void connect(io.undertow.client.ClientCallback,java.net.InetSocketAddress,java.net.URI,org.xnio.XnioIoThread,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)",
            "io.undertow.client.http2.Http2PriorKnowledgeClientProvider$1:void notify(org.xnio.IoFuture,java.lang.Object)",
            "io.undertow.client.http2.Http2ClearClientProvider$FailedNotifier:void notify(org.xnio.IoFuture,java.lang.Object)",
            "io.undertow.client.http2.Http2ClientConnection:void sendRequest(io.undertow.client.ClientRequest,io.undertow.client.ClientCallback)",
            "io.undertow.client.ALPNClientSelector$2:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ALPNClientSelector:void runAlpn(org.xnio.ssl.SslConnection,org.xnio.ChannelListener,io.undertow.client.ClientCallback,io.undertow.client.ALPNClientSelector$ALPNProtocol[])"
        ]
    },
    "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$HostPingTask$2:void handleCancelled(java.lang.Void)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$HostPingTask$2:void handleCancelled(java.lang.Object)"
        ]
    },
    "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$2:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.ssl.SslConduit$5:void run()",
            "io.undertow.protocols.ssl.SslConduit:void runReadListener(boolean)",
            "io.undertow.protocols.ssl.SslConduit:boolean handleHandshakeResult(javax.net.ssl.SSLEngineResult)",
            "io.undertow.protocols.ssl.SslConduit$2:void run()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$FrameReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$3:void run()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel:void runInIoThread(java.lang.Runnable)",
            "io.undertow.server.protocol.http.ALPNLimitingSSLEngine:void limitCiphers(java.util.List)",
            "io.undertow.server.protocol.ParseTimeoutUpdater:void run()",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:io.undertow.server.HttpServerExchange dispatch(java.util.concurrent.Executor,java.lang.Runnable)",
            "io.undertow.util.SameThreadExecutor:void execute(java.lang.Runnable)",
            "io.undertow.util.PipeliningExecutor$1:void run()"
        ]
    },
    "io.undertow.io.AsyncSenderImpl$2:void handleException(java.nio.channels.Channel,java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.http2.Http2Channel:void sendPing(byte[],org.xnio.ChannelExceptionHandler,boolean)",
            "io.undertow.protocols.http2.Http2Channel:void sendGoAway(int,org.xnio.ChannelExceptionHandler)"
        ]
    },
    "io.undertow.client.ajp.AjpClientConnection:void access$400(io.undertow.client.ajp.AjpClientConnection,java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection$4:void handleException(org.xnio.channels.StreamSinkChannel,java.io.IOException)"
        ]
    },
    "io.undertow.client.UndertowClient:void connect(io.undertow.client.ClientCallback,java.net.URI,org.xnio.XnioWorker,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.UndertowClient:void connect(io.undertow.client.ClientCallback,java.net.URI,org.xnio.XnioWorker,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)"
        ]
    },
    "io.undertow.client.UndertowClient:org.xnio.IoFuture connect(java.net.InetSocketAddress,java.net.URI,org.xnio.XnioWorker,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.client.UndertowClient:org.xnio.IoFuture connect(java.net.URI,org.xnio.XnioWorker,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.UndertowClient:org.xnio.IoFuture connect(java.net.URI,org.xnio.XnioWorker,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)"
        ]
    },
    "io.undertow.client.UndertowClient:void connect(io.undertow.client.ClientCallback,java.net.InetSocketAddress,java.net.URI,org.xnio.XnioWorker,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.websockets.client.WebSocketClient$ConnectionBuilder:org.xnio.IoFuture connectImpl(java.net.URI,org.xnio.FutureResult,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.client.WebSocketClient$ConnectionBuilder:org.xnio.IoFuture connect()",
            "io.undertow.websockets.client.WebSocketClient$ConnectionBuilder:org.xnio.IoFuture access$400(io.undertow.websockets.client.WebSocketClient$ConnectionBuilder,java.net.URI,org.xnio.FutureResult,int)"
        ]
    },
    "io.undertow.client.UndertowClient:void connect(io.undertow.client.ClientCallback,java.net.URI,org.xnio.XnioIoThread,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.UndertowClient:void connect(io.undertow.client.ClientCallback,java.net.URI,org.xnio.XnioIoThread,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$HttpClientPingTask:void run()"
        ]
    },
    "io.undertow.client.UndertowClient:org.xnio.IoFuture connect(java.net.URI,org.xnio.XnioIoThread,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.client.UndertowClient:org.xnio.IoFuture connect(java.net.InetSocketAddress,java.net.URI,org.xnio.XnioIoThread,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.client.UndertowClient:org.xnio.IoFuture connect(java.net.URI,org.xnio.XnioIoThread,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.client.UndertowClient:void connect(io.undertow.client.ClientCallback,java.net.InetSocketAddress,java.net.URI,org.xnio.XnioIoThread,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.server.handlers.proxy.ProxyConnectionPool:void openConnection(io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.ProxyCallback,io.undertow.server.handlers.proxy.ProxyConnectionPool$HostThreadData,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.ProxyConnectionPool:void handleClosedConnection(io.undertow.server.handlers.proxy.ProxyConnectionPool$HostThreadData,io.undertow.server.handlers.proxy.ProxyConnectionPool$ConnectionHolder)",
            "io.undertow.server.handlers.proxy.ProxyConnectionPool:void connect(io.undertow.server.handlers.proxy.ProxyClient$ProxyTarget,io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.ProxyCallback,long,java.util.concurrent.TimeUnit,boolean)"
        ]
    },
    "io.undertow.server.handlers.proxy.ProxyConnectionPool$4:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.ssl.SslConduit$5:void run()",
            "io.undertow.protocols.ssl.SslConduit:void runReadListener(boolean)",
            "io.undertow.protocols.ssl.SslConduit:boolean handleHandshakeResult(javax.net.ssl.SSLEngineResult)",
            "io.undertow.protocols.ssl.SslConduit$2:void run()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$FrameReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$3:void run()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel:void runInIoThread(java.lang.Runnable)",
            "io.undertow.server.protocol.http.ALPNLimitingSSLEngine:void limitCiphers(java.util.List)",
            "io.undertow.server.protocol.ParseTimeoutUpdater:void run()",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:io.undertow.server.HttpServerExchange dispatch(java.util.concurrent.Executor,java.lang.Runnable)",
            "io.undertow.util.SameThreadExecutor:void execute(java.lang.Runnable)",
            "io.undertow.util.PipeliningExecutor$1:void run()"
        ]
    },
    "io.undertow.client.http.HttpClientConnection:void prepareResponseChannel(io.undertow.client.ClientResponse,io.undertow.client.ClientExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpClientConnection:void access$1500(io.undertow.client.http.HttpClientConnection,io.undertow.client.ClientResponse,io.undertow.client.ClientExchange)"
        ]
    },
    "io.undertow.client.http.HttpClientConnection:void access$900(io.undertow.client.http.HttpClientConnection,java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpClientConnection$6:void handleException(org.xnio.conduits.ConduitStreamSinkChannel,java.io.IOException)"
        ]
    },
    "io.undertow.client.http.HttpClientConnection:void doHttp2Upgrade()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpClientConnection$ClientReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.http.HttpClientConnection:void requestDataSent()"
        ]
    },
    "io.undertow.client.http2.Http2ClientConnection:void access$400(io.undertow.client.http2.Http2ClientConnection,java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http2.Http2ClientConnection$2:void handleException(org.xnio.channels.StreamSinkChannel,java.io.IOException)"
        ]
    },
    "io.undertow.websockets.core.WebSocketChannel:io.undertow.websockets.core.StreamSourceFrameChannel createChannel(io.undertow.server.protocol.framed.FrameHeaderData,io.undertow.connector.PooledByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.WebSocketChannel:io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel createChannel(io.undertow.server.protocol.framed.FrameHeaderData,io.undertow.connector.PooledByteBuffer)"
        ]
    },
    "io.undertow.websockets.core.function.ChannelFunctionFileChannel:int read(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.BlockingSenderImpl:void performTransfer(java.nio.channels.FileChannel,io.undertow.io.IoCallback)",
            "io.undertow.server.handlers.resource.PathResource$1ServerTask:void run()",
            "io.undertow.server.protocol.http.HttpResponseConduit:long transferFrom(java.nio.channels.FileChannel,long,long)",
            "io.undertow.websockets.core.function.ChannelFunctionFileChannel:int read(java.nio.ByteBuffer)",
            "io.undertow.websockets.core.function.ChannelFunctionReadableByteChannel:int read(java.nio.ByteBuffer)",
            "io.undertow.websockets.core.WebSocketUtils:long transfer(java.nio.channels.ReadableByteChannel,long,java.nio.ByteBuffer,java.nio.channels.WritableByteChannel)"
        ]
    },
    "io.undertow.websockets.core.function.ChannelFunctionFileChannel:long read(java.nio.ByteBuffer[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.function.ChannelFunctionFileChannel:long read(java.nio.ByteBuffer[],int,int)"
        ]
    },
    "io.undertow.websockets.core.function.ChannelFunctionFileChannel:int read(java.nio.ByteBuffer,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.function.ChannelFunctionFileChannel:int read(java.nio.ByteBuffer,long)"
        ]
    },
    "io.undertow.websockets.core.WebSocketUtils:long transfer(java.nio.channels.ReadableByteChannel,long,java.nio.ByteBuffer,java.nio.channels.WritableByteChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.StreamSourceFrameChannel:long transferTo(long,java.nio.ByteBuffer,org.xnio.channels.StreamSinkChannel)"
        ]
    },
    "io.undertow.io.UndertowOutputStream:void write(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.protocols.ssl.SslConduit:void awaitWritable(long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.ChunkedStreamSinkConduit:void awaitWritable(long,java.util.concurrent.TimeUnit)",
            "io.undertow.conduits.PreChunkedStreamSinkConduit:void awaitWritable(long,java.util.concurrent.TimeUnit)",
            "io.undertow.conduits.DeflatingStreamSinkConduit:void awaitWritable(long,java.util.concurrent.TimeUnit)",
            "io.undertow.conduits.AbstractFixedLengthStreamSinkConduit:void awaitWritable(long,java.util.concurrent.TimeUnit)",
            "io.undertow.protocols.ssl.SslConduit:void awaitReadable(long,java.util.concurrent.TimeUnit)",
            "io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit:void awaitWritable(long,java.util.concurrent.TimeUnit)"
        ]
    },
    "io.undertow.protocols.ssl.SslConduit:void awaitWritable()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.ChunkedStreamSinkConduit:void awaitWritable()",
            "io.undertow.conduits.PreChunkedStreamSinkConduit:void awaitWritable()",
            "io.undertow.conduits.DeflatingStreamSinkConduit:void awaitWritable()",
            "io.undertow.conduits.AbstractFixedLengthStreamSinkConduit:void awaitWritable()",
            "io.undertow.conduits.IdleTimeoutConduit:void awaitWritable()",
            "io.undertow.conduits.IdleTimeoutConduit:void awaitWritable(long,java.util.concurrent.TimeUnit)",
            "io.undertow.protocols.ssl.SslConduit:void awaitReadable()",
            "io.undertow.protocols.ssl.SslConduit:void awaitWritable()",
            "io.undertow.protocols.ssl.SslConduit:void awaitWritable(long,java.util.concurrent.TimeUnit)",
            "io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit:void awaitWritable()"
        ]
    },
    "io.undertow.websockets.core.WebSockets:void sendCloseBlocking(int,java.lang.String,io.undertow.websockets.core.WebSocketChannel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.websockets.core.WebSockets:void sendCloseBlocking(java.nio.ByteBuffer,io.undertow.websockets.core.WebSocketChannel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.websockets.core.WebSockets:void sendCloseBlocking(java.nio.ByteBuffer[],io.undertow.websockets.core.WebSocketChannel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.websockets.spi.BlockingWebSocketHttpServerExchange:org.xnio.IoFuture sendData(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.protocol.Handshake:void writePayload(io.undertow.websockets.spi.WebSocketHttpExchange,java.nio.ByteBuffer)"
        ]
    },
    "io.undertow.util.HttpString:void writeTo(java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.websockets.core.protocol.version07.Base64$OutputStream:void flushBase64()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.protocol.version07.Base64$OutputStream:void close()",
            "io.undertow.websockets.core.protocol.version07.Base64$OutputStream:void suspendEncoding()"
        ]
    },
    "io.undertow.util.FlexBase64$DecoderOutputStream:void write(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.protocol.version07.Base64$OutputStream:void write(int)",
            "io.undertow.websockets.spi.BlockingWebSocketHttpServerExchange:org.xnio.IoFuture sendData(java.nio.ByteBuffer)"
        ]
    },
    "io.undertow.util.FlexBase64$EncoderOutputStream:void write(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.protocol.version07.Base64$OutputStream:void write(int)",
            "io.undertow.websockets.spi.BlockingWebSocketHttpServerExchange:org.xnio.IoFuture sendData(java.nio.ByteBuffer)"
        ]
    },
    "io.undertow.client.http2.Http2ClientProvider:io.undertow.client.http2.Http2ClientConnection createHttp2Channel(org.xnio.StreamConnection,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http2.Http2ClientProvider:io.undertow.client.http2.Http2ClientConnection access$100(org.xnio.StreamConnection,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap,java.lang.String)"
        ]
    },
    "io.undertow.server.protocol.http2.Http2OpenListener:void handleEvent(org.xnio.StreamConnection,io.undertow.connector.PooledByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.http.AlpnOpenListener$AlpnConnectionListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.protocol.http2.Http2OpenListener:void handleEvent(org.xnio.StreamConnection)"
        ]
    },
    "io.undertow.server.protocol.http.HttpReadListener:boolean doHttp2PriRead(org.xnio.StreamConnection,java.nio.ByteBuffer,io.undertow.server.protocol.http.HttpServerConnection,io.undertow.connector.PooledByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.http.HttpReadListener:void handleHttp2PriorKnowledge(org.xnio.StreamConnection,io.undertow.server.protocol.http.HttpServerConnection,io.undertow.connector.PooledByteBuffer)",
            "io.undertow.server.protocol.http.HttpReadListener:boolean access$000(io.undertow.server.protocol.http.HttpReadListener,org.xnio.StreamConnection,java.nio.ByteBuffer,io.undertow.server.protocol.http.HttpServerConnection,io.undertow.connector.PooledByteBuffer)"
        ]
    },
    "io.undertow.websockets.core.AbstractReceiveListener:void onFullCloseMessage(io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.BufferedBinaryMessage)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.websockets.core.BufferedTextMessage:void checkMaxSize(io.undertow.websockets.core.StreamSourceFrameChannel,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.BufferedTextMessage:void readBlocking(io.undertow.websockets.core.StreamSourceFrameChannel)",
            "io.undertow.websockets.core.BufferedTextMessage:void read(io.undertow.websockets.core.StreamSourceFrameChannel,io.undertow.websockets.core.WebSocketCallback)",
            "io.undertow.websockets.core.BufferedTextMessage:void access$100(io.undertow.websockets.core.BufferedTextMessage,io.undertow.websockets.core.StreamSourceFrameChannel,int)"
        ]
    },
    "io.undertow.websockets.core.WebSockets:void sendClose(java.nio.ByteBuffer,io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.WebSocketChannel:io.undertow.server.protocol.framed.FrameHeaderData parseFrame(java.nio.ByteBuffer)",
            "io.undertow.websockets.core.WebSocketChannel:void handleBrokenSourceChannel(java.lang.Throwable)"
        ]
    },
    "io.undertow.websockets.core.WebSockets:void sendClose(java.nio.ByteBuffer[],io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.websockets.core.WebSockets:void sendClose(int,java.lang.String,io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.WebSocketCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.WebSocketChannel$2:void doClose()"
        ]
    },
    "io.undertow.websockets.core.BufferedBinaryMessage:void checkMaxSize(io.undertow.websockets.core.StreamSourceFrameChannel,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.BufferedBinaryMessage:void readBlocking(io.undertow.websockets.core.StreamSourceFrameChannel)",
            "io.undertow.websockets.core.BufferedBinaryMessage:void read(io.undertow.websockets.core.StreamSourceFrameChannel,io.undertow.websockets.core.WebSocketCallback)",
            "io.undertow.websockets.core.BufferedBinaryMessage:void access$200(io.undertow.websockets.core.BufferedBinaryMessage,io.undertow.websockets.core.StreamSourceFrameChannel,int)"
        ]
    },
    "io.undertow.conduits.HeadStreamSinkConduit:void exitFlush(int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.HeadStreamSinkConduit:boolean flush()"
        ]
    },
    "io.undertow.conduits.ChunkedStreamSinkConduit:void invokeFinishListener()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.ChunkedStreamSinkConduit:void truncateWrites()",
            "io.undertow.conduits.ChunkedStreamSinkConduit:boolean flush()"
        ]
    },
    "io.undertow.conduits.FinishableStreamSourceConduit:void exitRead(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.FinishableStreamSourceConduit:long transferTo(long,long,java.nio.channels.FileChannel)",
            "io.undertow.conduits.FinishableStreamSourceConduit:long transferTo(long,java.nio.ByteBuffer,org.xnio.channels.StreamSinkChannel)",
            "io.undertow.conduits.FinishableStreamSourceConduit:long read(java.nio.ByteBuffer[],int,int)",
            "io.undertow.conduits.FinishableStreamSourceConduit:int read(java.nio.ByteBuffer)"
        ]
    },
    "io.undertow.conduits.PreChunkedStreamSinkConduit:void invokeFinishListener()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.PreChunkedStreamSinkConduit:boolean flush()"
        ]
    },
    "io.undertow.conduits.FixedLengthStreamSourceConduit:void invokeFinishListener()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.FixedLengthStreamSourceConduit:long transferTo(long,long,java.nio.channels.FileChannel)",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:long transferTo(long,java.nio.ByteBuffer,org.xnio.channels.StreamSinkChannel)",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:long read(java.nio.ByteBuffer[],int,int)",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:int read(java.nio.ByteBuffer)",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:void exitShutdownReads(long)",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:void exitRead(long)"
        ]
    },
    "io.undertow.server.protocol.ajp.AjpServerResponseConduit:void finished()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.AbstractFramedStreamSinkConduit:void terminateWrites()",
            "io.undertow.conduits.AbstractFramedStreamSinkConduit:boolean flushQueuedData()"
        ]
    },
    "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$RequestExchangeListener$1:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection$3:void handleEvent(io.undertow.protocols.ajp.AjpClientChannel)",
            "io.undertow.client.http.HttpClientConnection$5:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.client.http2.Http2ClientConnection$1:void handleEvent(io.undertow.protocols.http2.Http2Channel)",
            "io.undertow.client.ALPNClientSelector$2:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ALPNClientSelector$2:void handleSelected(java.lang.String)",
            "io.undertow.client.ALPNClientSelector:void runAlpn(org.xnio.ssl.SslConnection,org.xnio.ChannelListener,io.undertow.client.ClientCallback,io.undertow.client.ALPNClientSelector$ALPNProtocol[])",
            "io.undertow.protocols.ajp.AjpClientResponseStreamSourceChannel:void complete()",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void handleFlushComplete(boolean)",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void channelForciblyClosed()",
            "io.undertow.protocols.http2.Http2StreamSourceChannel:void channelForciblyClosed()",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$RequestExchangeListener:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void close()"
        ]
    },
    "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$HostPingTask$2:void handleDone(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$HostPingTask$2:void handleFailed(java.io.IOException,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$RequestExchangeListener$2:void handleException(java.nio.channels.Channel,java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.http2.Http2Channel:void sendPing(byte[],org.xnio.ChannelExceptionHandler,boolean)",
            "io.undertow.protocols.http2.Http2Channel:void sendGoAway(int,org.xnio.ChannelExceptionHandler)"
        ]
    },
    "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$ConnectionPoolPingTask$1$1:void handleException(java.nio.channels.Channel,java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.http2.Http2Channel:void sendPing(byte[],org.xnio.ChannelExceptionHandler,boolean)",
            "io.undertow.protocols.http2.Http2Channel:void sendGoAway(int,org.xnio.ChannelExceptionHandler)"
        ]
    },
    "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$HttpClientPingTask$1$1$1:void handleException(java.nio.channels.Channel,java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.http2.Http2Channel:void sendPing(byte[],org.xnio.ChannelExceptionHandler,boolean)",
            "io.undertow.protocols.http2.Http2Channel:void sendGoAway(int,org.xnio.ChannelExceptionHandler)"
        ]
    },
    "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$HostPingTask$2:void handleCancelled(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.client.ajp.AjpClientConnection$4:void handleException(org.xnio.channels.StreamSinkChannel,java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection$4:void handleException(java.nio.channels.Channel,java.io.IOException)"
        ]
    },
    "io.undertow.client.UndertowClient:void connect(io.undertow.client.ClientCallback,java.net.URI,org.xnio.XnioWorker,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.client.UndertowClient:org.xnio.IoFuture connect(java.net.URI,org.xnio.XnioWorker,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.websockets.client.WebSocketClient$ConnectionBuilder:org.xnio.IoFuture connect()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.client.WebSocketClient:org.xnio.IoFuture connect(org.xnio.XnioWorker,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap,java.net.InetSocketAddress,java.net.URI,io.undertow.websockets.core.WebSocketVersion,io.undertow.websockets.client.WebSocketClientNegotiation,java.util.Set)"
        ]
    },
    "io.undertow.websockets.client.WebSocketClient$ConnectionBuilder:org.xnio.IoFuture access$400(io.undertow.websockets.client.WebSocketClient$ConnectionBuilder,java.net.URI,org.xnio.FutureResult,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.client.WebSocketClient$ConnectionBuilder$2:void notify(org.xnio.IoFuture,java.lang.Object)"
        ]
    },
    "io.undertow.client.UndertowClient:void connect(io.undertow.client.ClientCallback,java.net.URI,org.xnio.XnioIoThread,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.SimpleProxyClientProvider:void getConnection(io.undertow.server.handlers.proxy.ProxyClient$ProxyTarget,io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.ProxyCallback,long,java.util.concurrent.TimeUnit)"
        ]
    },
    "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$HttpClientPingTask:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.ssl.SslConduit$5:void run()",
            "io.undertow.protocols.ssl.SslConduit:void runReadListener(boolean)",
            "io.undertow.protocols.ssl.SslConduit:boolean handleHandshakeResult(javax.net.ssl.SSLEngineResult)",
            "io.undertow.protocols.ssl.SslConduit$2:void run()",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil:void internalPingNode(io.undertow.server.handlers.proxy.mod_cluster.Node,io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$PingCallback,io.undertow.server.handlers.proxy.mod_cluster.NodeHealthChecker,org.xnio.XnioIoThread,io.undertow.connector.ByteBufferPool,io.undertow.client.UndertowClient,org.xnio.ssl.XnioSsl,org.xnio.OptionMap)",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$FrameReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$3:void run()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel:void runInIoThread(java.lang.Runnable)",
            "io.undertow.server.protocol.http.ALPNLimitingSSLEngine:void limitCiphers(java.util.List)",
            "io.undertow.server.protocol.ParseTimeoutUpdater:void run()",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:io.undertow.server.HttpServerExchange dispatch(java.util.concurrent.Executor,java.lang.Runnable)",
            "io.undertow.util.SameThreadExecutor:void execute(java.lang.Runnable)",
            "io.undertow.util.PipeliningExecutor$1:void run()"
        ]
    },
    "io.undertow.server.handlers.proxy.ProxyConnectionPool:void handleClosedConnection(io.undertow.server.handlers.proxy.ProxyConnectionPool$HostThreadData,io.undertow.server.handlers.proxy.ProxyConnectionPool$ConnectionHolder)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.ProxyConnectionPool:void returnConnection(io.undertow.server.handlers.proxy.ProxyConnectionPool$ConnectionHolder)",
            "io.undertow.server.handlers.proxy.ProxyConnectionPool:void access$800(io.undertow.server.handlers.proxy.ProxyConnectionPool,io.undertow.server.handlers.proxy.ProxyConnectionPool$HostThreadData,io.undertow.server.handlers.proxy.ProxyConnectionPool$ConnectionHolder)"
        ]
    },
    "io.undertow.client.http.HttpClientConnection:void access$1500(io.undertow.client.http.HttpClientConnection,io.undertow.client.ClientResponse,io.undertow.client.ClientExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpClientConnection$ClientReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)"
        ]
    },
    "io.undertow.client.http.HttpClientConnection$6:void handleException(org.xnio.conduits.ConduitStreamSinkChannel,java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpClientConnection$6:void handleException(java.nio.channels.Channel,java.io.IOException)"
        ]
    },
    "io.undertow.client.http.HttpClientConnection:void requestDataSent()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpClientExchange:void terminateRequest()"
        ]
    },
    "io.undertow.client.http2.Http2ClientConnection$2:void handleException(org.xnio.channels.StreamSinkChannel,java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http2.Http2ClientConnection$2:void handleException(java.nio.channels.Channel,java.io.IOException)"
        ]
    },
    "io.undertow.websockets.core.WebSocketChannel:io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel createChannel(io.undertow.server.protocol.framed.FrameHeaderData,io.undertow.connector.PooledByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.framed.AbstractFramedChannel:io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel receive()"
        ]
    },
    "io.undertow.websockets.core.StreamSourceFrameChannel:long transferTo(long,java.nio.ByteBuffer,org.xnio.channels.StreamSinkChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.channels.DetachableStreamSourceChannel:long transferTo(long,java.nio.ByteBuffer,org.xnio.channels.StreamSinkChannel)"
        ]
    },
    "io.undertow.conduits.ChunkedStreamSinkConduit:void awaitWritable(long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.conduits.PreChunkedStreamSinkConduit:void awaitWritable(long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.conduits.DeflatingStreamSinkConduit:void awaitWritable(long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.ChunkedStreamSinkConduit:void awaitWritable(long,java.util.concurrent.TimeUnit)",
            "io.undertow.conduits.PreChunkedStreamSinkConduit:void awaitWritable(long,java.util.concurrent.TimeUnit)",
            "io.undertow.conduits.DeflatingStreamSinkConduit:void awaitWritable(long,java.util.concurrent.TimeUnit)",
            "io.undertow.conduits.AbstractFixedLengthStreamSinkConduit:void awaitWritable(long,java.util.concurrent.TimeUnit)",
            "io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit:void awaitWritable(long,java.util.concurrent.TimeUnit)"
        ]
    },
    "io.undertow.conduits.AbstractFixedLengthStreamSinkConduit:void awaitWritable(long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit:void awaitWritable(long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.conduits.ChunkedStreamSinkConduit:void awaitWritable()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.conduits.PreChunkedStreamSinkConduit:void awaitWritable()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.conduits.DeflatingStreamSinkConduit:void awaitWritable()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.ChunkedStreamSinkConduit:void awaitWritable()",
            "io.undertow.conduits.PreChunkedStreamSinkConduit:void awaitWritable()",
            "io.undertow.conduits.DeflatingStreamSinkConduit:void awaitWritable()",
            "io.undertow.conduits.AbstractFixedLengthStreamSinkConduit:void awaitWritable()",
            "io.undertow.conduits.IdleTimeoutConduit:void awaitWritable()",
            "io.undertow.conduits.IdleTimeoutConduit:void awaitWritable(long,java.util.concurrent.TimeUnit)",
            "io.undertow.protocols.ssl.SslConduit:void awaitWritable()",
            "io.undertow.protocols.ssl.SslConduit:void awaitWritable(long,java.util.concurrent.TimeUnit)",
            "io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit:void awaitWritable()"
        ]
    },
    "io.undertow.conduits.AbstractFixedLengthStreamSinkConduit:void awaitWritable()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.conduits.IdleTimeoutConduit:void awaitWritable()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.ChunkedStreamSinkConduit:void awaitWritable()",
            "io.undertow.conduits.PreChunkedStreamSinkConduit:void awaitWritable()",
            "io.undertow.conduits.DeflatingStreamSinkConduit:void awaitWritable()",
            "io.undertow.conduits.AbstractFixedLengthStreamSinkConduit:void awaitWritable()",
            "io.undertow.conduits.IdleTimeoutConduit:void awaitWritable()",
            "io.undertow.conduits.IdleTimeoutConduit:void awaitWritable(long,java.util.concurrent.TimeUnit)",
            "io.undertow.protocols.ssl.SslConduit:void awaitWritable()",
            "io.undertow.protocols.ssl.SslConduit:void awaitWritable(long,java.util.concurrent.TimeUnit)",
            "io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit:void awaitWritable()"
        ]
    },
    "io.undertow.conduits.IdleTimeoutConduit:void awaitWritable(long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.ChunkedStreamSinkConduit:void awaitWritable(long,java.util.concurrent.TimeUnit)",
            "io.undertow.conduits.PreChunkedStreamSinkConduit:void awaitWritable(long,java.util.concurrent.TimeUnit)",
            "io.undertow.conduits.DeflatingStreamSinkConduit:void awaitWritable(long,java.util.concurrent.TimeUnit)",
            "io.undertow.conduits.AbstractFixedLengthStreamSinkConduit:void awaitWritable(long,java.util.concurrent.TimeUnit)",
            "io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit:void awaitWritable(long,java.util.concurrent.TimeUnit)"
        ]
    },
    "io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit:void awaitWritable()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.websockets.core.protocol.version07.Base64$OutputStream:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.BlockingSenderImpl:void close(io.undertow.io.IoCallback)",
            "io.undertow.server.handlers.encoding.ContentEncodedResourceManager:io.undertow.server.handlers.encoding.ContentEncodedResource getResource(io.undertow.server.handlers.resource.Resource,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http.HttpContinue:void sendContinueResponseBlocking(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$DefaultBlockingHttpExchange:void close()",
            "io.undertow.util.FlexBase64$DecoderOutputStream:void close()",
            "io.undertow.util.FlexBase64$EncoderOutputStream:void close()",
            "io.undertow.websockets.core.protocol.version07.Base64:java.lang.String encodeObject(java.io.Serializable,int)",
            "io.undertow.websockets.core.protocol.version07.Base64:byte[] encodeBytesToBytes(byte[],int,int,int)",
            "io.undertow.websockets.core.protocol.version07.Base64:void encodeToFile(byte[],java.lang.String)",
            "io.undertow.websockets.core.protocol.version07.Base64:void decodeToFile(java.lang.String,java.lang.String)"
        ]
    },
    "io.undertow.websockets.core.protocol.version07.Base64$OutputStream:void suspendEncoding()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.client.http2.Http2ClientProvider:io.undertow.client.http2.Http2ClientConnection access$100(org.xnio.StreamConnection,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http2.Http2ClientProvider$4:void handleEvent(org.xnio.ssl.SslConnection)"
        ]
    },
    "io.undertow.server.protocol.http2.Http2OpenListener:void handleEvent(org.xnio.StreamConnection)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.http2.Http2OpenListener:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.server.protocol.http.HttpReadListener:void handleHttp2PriorKnowledge(org.xnio.StreamConnection,io.undertow.server.protocol.http.HttpServerConnection,io.undertow.connector.PooledByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.http.HttpReadListener:boolean handleHttp2PriorKnowledge(io.undertow.connector.PooledByteBuffer,io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.protocol.http.HttpReadListener:boolean access$000(io.undertow.server.protocol.http.HttpReadListener,org.xnio.StreamConnection,java.nio.ByteBuffer,io.undertow.server.protocol.http.HttpServerConnection,io.undertow.connector.PooledByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.http.HttpReadListener$3:void handleEvent(org.xnio.channels.StreamSourceChannel)"
        ]
    },
    "io.undertow.websockets.core.BufferedTextMessage:void access$100(io.undertow.websockets.core.BufferedTextMessage,io.undertow.websockets.core.StreamSourceFrameChannel,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.BufferedTextMessage$1:void handleEvent(io.undertow.websockets.core.StreamSourceFrameChannel)"
        ]
    },
    "io.undertow.websockets.core.WebSocketChannel:void handleBrokenSourceChannel(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.framed.AbstractFramedChannel:void markReadsBroken(java.lang.Throwable)"
        ]
    },
    "io.undertow.websockets.core.WebSocketChannel$2:void doClose()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.IdleTimeoutConduit:void handleIdleTimeout()",
            "io.undertow.conduits.IdleTimeoutConduit$1:void run()"
        ]
    },
    "io.undertow.websockets.core.BufferedBinaryMessage:void access$200(io.undertow.websockets.core.BufferedBinaryMessage,io.undertow.websockets.core.StreamSourceFrameChannel,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.BufferedBinaryMessage$1:void handleEvent(io.undertow.websockets.core.StreamSourceFrameChannel)"
        ]
    },
    "io.undertow.conduits.ChunkedStreamSinkConduit:void truncateWrites()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.conduits.FixedLengthStreamSourceConduit:void exitShutdownReads(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.FixedLengthStreamSourceConduit:void terminateReads()"
        ]
    },
    "io.undertow.conduits.FixedLengthStreamSourceConduit:void exitRead(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.FixedLengthStreamSourceConduit:long transferTo(long,long,java.nio.channels.FileChannel)",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:long transferTo(long,java.nio.ByteBuffer,org.xnio.channels.StreamSinkChannel)",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:long read(java.nio.ByteBuffer[],int,int)",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:int read(java.nio.ByteBuffer)"
        ]
    },
    "io.undertow.conduits.AbstractFramedStreamSinkConduit:void terminateWrites()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.client.ajp.AjpClientConnection$4:void handleException(java.nio.channels.Channel,java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.http2.Http2Channel:void sendPing(byte[],org.xnio.ChannelExceptionHandler,boolean)",
            "io.undertow.protocols.http2.Http2Channel:void sendGoAway(int,org.xnio.ChannelExceptionHandler)"
        ]
    },
    "io.undertow.websockets.client.WebSocketClient:org.xnio.IoFuture connect(org.xnio.XnioWorker,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap,java.net.InetSocketAddress,java.net.URI,io.undertow.websockets.core.WebSocketVersion,io.undertow.websockets.client.WebSocketClientNegotiation,java.util.Set)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.client.WebSocketClient:org.xnio.IoFuture connect(org.xnio.XnioWorker,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap,java.net.URI,io.undertow.websockets.core.WebSocketVersion,io.undertow.websockets.client.WebSocketClientNegotiation,java.util.Set)"
        ]
    },
    "io.undertow.websockets.client.WebSocketClient$ConnectionBuilder$2:void notify(org.xnio.IoFuture,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil:void internalPingNode(io.undertow.server.handlers.proxy.mod_cluster.Node,io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$PingCallback,io.undertow.server.handlers.proxy.mod_cluster.NodeHealthChecker,org.xnio.XnioIoThread,io.undertow.connector.ByteBufferPool,io.undertow.client.UndertowClient,org.xnio.ssl.XnioSsl,org.xnio.OptionMap)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.mod_cluster.Node:void healthCheckPing(long,io.undertow.server.handlers.proxy.mod_cluster.NodeHealthChecker)"
        ]
    },
    "io.undertow.server.handlers.proxy.ProxyConnectionPool:void access$800(io.undertow.server.handlers.proxy.ProxyConnectionPool,io.undertow.server.handlers.proxy.ProxyConnectionPool$HostThreadData,io.undertow.server.handlers.proxy.ProxyConnectionPool$ConnectionHolder)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.ProxyConnectionPool$2$1:void handleEvent(io.undertow.client.ClientConnection)",
            "io.undertow.server.handlers.proxy.ProxyConnectionPool$4$1$1:void handleEvent(io.undertow.client.ClientConnection)"
        ]
    },
    "io.undertow.client.http.HttpClientConnection$6:void handleException(java.nio.channels.Channel,java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.http2.Http2Channel:void sendPing(byte[],org.xnio.ChannelExceptionHandler,boolean)",
            "io.undertow.protocols.http2.Http2Channel:void sendGoAway(int,org.xnio.ChannelExceptionHandler)"
        ]
    },
    "io.undertow.client.http2.Http2ClientConnection$2:void handleException(java.nio.channels.Channel,java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.http2.Http2Channel:void sendPing(byte[],org.xnio.ChannelExceptionHandler,boolean)",
            "io.undertow.protocols.http2.Http2Channel:void sendGoAway(int,org.xnio.ChannelExceptionHandler)"
        ]
    },
    "io.undertow.websockets.core.protocol.version07.Base64:java.lang.String encodeObject(java.io.Serializable,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.protocol.version07.Base64:java.lang.String encodeObject(java.io.Serializable)"
        ]
    },
    "io.undertow.websockets.core.protocol.version07.Base64:byte[] encodeBytesToBytes(byte[],int,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.protocol.version07.Base64:java.lang.String encodeBytes(byte[],int,int,int)",
            "io.undertow.websockets.core.protocol.version07.Base64:byte[] encodeBytesToBytes(byte[])"
        ]
    },
    "io.undertow.websockets.core.protocol.version07.Base64:void encodeToFile(byte[],java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.websockets.core.protocol.version07.Base64:void decodeToFile(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.server.protocol.http2.Http2OpenListener:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection$3:void handleEvent(io.undertow.protocols.ajp.AjpClientChannel)",
            "io.undertow.client.http.HttpClientConnection$5:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.client.http2.Http2ClientConnection$1:void handleEvent(io.undertow.protocols.http2.Http2Channel)",
            "io.undertow.client.ALPNClientSelector$2:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ALPNClientSelector$2:void handleSelected(java.lang.String)",
            "io.undertow.client.ALPNClientSelector:void runAlpn(org.xnio.ssl.SslConnection,org.xnio.ChannelListener,io.undertow.client.ClientCallback,io.undertow.client.ALPNClientSelector$ALPNProtocol[])",
            "io.undertow.protocols.ajp.AjpClientResponseStreamSourceChannel:void complete()",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void handleFlushComplete(boolean)",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void channelForciblyClosed()",
            "io.undertow.protocols.http2.Http2StreamSourceChannel:void channelForciblyClosed()",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$RequestExchangeListener:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void close()",
            "io.undertow.server.protocol.http.AlpnOpenListener:void handleEvent(org.xnio.StreamConnection)"
        ]
    },
    "io.undertow.server.protocol.http.HttpReadListener$3:void handleEvent(org.xnio.channels.StreamSourceChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.http.HttpReadListener$3:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.conduits.FixedLengthStreamSourceConduit:void terminateReads()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.websockets.client.WebSocketClient:org.xnio.IoFuture connect(org.xnio.XnioWorker,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap,java.net.URI,io.undertow.websockets.core.WebSocketVersion,io.undertow.websockets.client.WebSocketClientNegotiation,java.util.Set)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.client.WebSocketClient:org.xnio.IoFuture connect(org.xnio.XnioWorker,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap,java.net.URI,io.undertow.websockets.core.WebSocketVersion,io.undertow.websockets.client.WebSocketClientNegotiation)"
        ]
    },
    "io.undertow.server.handlers.proxy.mod_cluster.Node:void healthCheckPing(long,io.undertow.server.handlers.proxy.mod_cluster.NodeHealthChecker)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.mod_cluster.Node:void checkHealth(long,io.undertow.server.handlers.proxy.mod_cluster.NodeHealthChecker)"
        ]
    },
    "io.undertow.server.handlers.proxy.ProxyConnectionPool$2$1:void handleEvent(io.undertow.client.ClientConnection)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.ProxyConnectionPool$2$1:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.server.handlers.proxy.ProxyConnectionPool$4$1$1:void handleEvent(io.undertow.client.ClientConnection)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.ProxyConnectionPool$4$1$1:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.websockets.core.protocol.version07.Base64:java.lang.String encodeObject(java.io.Serializable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.websockets.core.protocol.version07.Base64:java.lang.String encodeBytes(byte[],int,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.protocol.version07.Base64:java.lang.String encodeBytes(byte[])",
            "io.undertow.websockets.core.protocol.version07.Base64:java.lang.String encodeBytes(byte[],int)",
            "io.undertow.websockets.core.protocol.version07.Base64:java.lang.String encodeBytes(byte[],int,int)"
        ]
    },
    "io.undertow.websockets.core.protocol.version07.Base64:byte[] encodeBytesToBytes(byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.server.protocol.http.HttpReadListener$3:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection$3:void handleEvent(io.undertow.protocols.ajp.AjpClientChannel)",
            "io.undertow.client.http.HttpClientConnection$5:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.client.http2.Http2ClientConnection$1:void handleEvent(io.undertow.protocols.http2.Http2Channel)",
            "io.undertow.client.ALPNClientSelector$2:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ALPNClientSelector$2:void handleSelected(java.lang.String)",
            "io.undertow.client.ALPNClientSelector:void runAlpn(org.xnio.ssl.SslConnection,org.xnio.ChannelListener,io.undertow.client.ClientCallback,io.undertow.client.ALPNClientSelector$ALPNProtocol[])",
            "io.undertow.protocols.ajp.AjpClientResponseStreamSourceChannel:void complete()",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void handleFlushComplete(boolean)",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void channelForciblyClosed()",
            "io.undertow.protocols.http2.Http2StreamSourceChannel:void channelForciblyClosed()",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$RequestExchangeListener:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void close()"
        ]
    },
    "io.undertow.websockets.client.WebSocketClient:org.xnio.IoFuture connect(org.xnio.XnioWorker,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap,java.net.URI,io.undertow.websockets.core.WebSocketVersion,io.undertow.websockets.client.WebSocketClientNegotiation)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.client.WebSocketClient:org.xnio.IoFuture connect(org.xnio.XnioWorker,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap,java.net.URI,io.undertow.websockets.core.WebSocketVersion)",
            "io.undertow.websockets.client.WebSocketClient:org.xnio.IoFuture connect(org.xnio.XnioWorker,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap,java.net.URI,io.undertow.websockets.core.WebSocketVersion,io.undertow.websockets.client.WebSocketClientNegotiation)"
        ]
    },
    "io.undertow.server.handlers.proxy.mod_cluster.Node:void checkHealth(long,io.undertow.server.handlers.proxy.mod_cluster.NodeHealthChecker)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.mod_cluster.ModClusterContainer$HealthCheckTask:void run()"
        ]
    },
    "io.undertow.server.handlers.proxy.ProxyConnectionPool$2$1:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection$3:void handleEvent(io.undertow.protocols.ajp.AjpClientChannel)",
            "io.undertow.client.http.HttpClientConnection$5:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.client.http2.Http2ClientConnection$1:void handleEvent(io.undertow.protocols.http2.Http2Channel)",
            "io.undertow.client.ALPNClientSelector$2:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ALPNClientSelector$2:void handleSelected(java.lang.String)",
            "io.undertow.client.ALPNClientSelector:void runAlpn(org.xnio.ssl.SslConnection,org.xnio.ChannelListener,io.undertow.client.ClientCallback,io.undertow.client.ALPNClientSelector$ALPNProtocol[])",
            "io.undertow.protocols.ajp.AjpClientResponseStreamSourceChannel:void complete()",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void handleFlushComplete(boolean)",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void channelForciblyClosed()",
            "io.undertow.protocols.http2.Http2StreamSourceChannel:void channelForciblyClosed()",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$RequestExchangeListener:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void close()"
        ]
    },
    "io.undertow.server.handlers.proxy.ProxyConnectionPool$4$1$1:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection$3:void handleEvent(io.undertow.protocols.ajp.AjpClientChannel)",
            "io.undertow.client.http.HttpClientConnection$5:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.client.http2.Http2ClientConnection$1:void handleEvent(io.undertow.protocols.http2.Http2Channel)",
            "io.undertow.client.ALPNClientSelector$2:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ALPNClientSelector$2:void handleSelected(java.lang.String)",
            "io.undertow.client.ALPNClientSelector:void runAlpn(org.xnio.ssl.SslConnection,org.xnio.ChannelListener,io.undertow.client.ClientCallback,io.undertow.client.ALPNClientSelector$ALPNProtocol[])",
            "io.undertow.protocols.ajp.AjpClientResponseStreamSourceChannel:void complete()",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void handleFlushComplete(boolean)",
            "io.undertow.protocols.ajp.AjpClientRequestClientStreamSinkChannel:void channelForciblyClosed()",
            "io.undertow.protocols.http2.Http2StreamSourceChannel:void channelForciblyClosed()",
            "io.undertow.server.handlers.proxy.mod_cluster.NodePingUtil$RequestExchangeListener:void completed(io.undertow.client.ClientExchange)",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void close()"
        ]
    },
    "io.undertow.websockets.core.protocol.version07.Base64:java.lang.String encodeBytes(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.protocol.version07.Hybi07Handshake:java.lang.String solve(java.lang.String)"
        ]
    },
    "io.undertow.websockets.core.protocol.version07.Base64:java.lang.String encodeBytes(byte[],int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.websockets.core.protocol.version07.Base64:java.lang.String encodeBytes(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.websockets.client.WebSocketClient:org.xnio.IoFuture connect(org.xnio.XnioWorker,org.xnio.ssl.XnioSsl,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap,java.net.URI,io.undertow.websockets.core.WebSocketVersion)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.websockets.client.WebSocketClient:org.xnio.IoFuture connect(org.xnio.XnioWorker,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap,java.net.URI,io.undertow.websockets.core.WebSocketVersion,io.undertow.websockets.client.WebSocketClientNegotiation)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.client.WebSocketClient:org.xnio.IoFuture connect(org.xnio.XnioWorker,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap,java.net.URI,io.undertow.websockets.core.WebSocketVersion)"
        ]
    },
    "io.undertow.server.handlers.proxy.mod_cluster.ModClusterContainer$HealthCheckTask:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.protocols.ssl.SslConduit$5:void run()",
            "io.undertow.protocols.ssl.SslConduit:void runReadListener(boolean)",
            "io.undertow.protocols.ssl.SslConduit:boolean handleHandshakeResult(javax.net.ssl.SSLEngineResult)",
            "io.undertow.protocols.ssl.SslConduit$2:void run()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$FrameReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.protocol.framed.AbstractFramedChannel$3:void run()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel:void runInIoThread(java.lang.Runnable)",
            "io.undertow.server.protocol.http.ALPNLimitingSSLEngine:void limitCiphers(java.util.List)",
            "io.undertow.server.protocol.ParseTimeoutUpdater:void run()",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:io.undertow.server.HttpServerExchange dispatch(java.util.concurrent.Executor,java.lang.Runnable)",
            "io.undertow.util.SameThreadExecutor:void execute(java.lang.Runnable)",
            "io.undertow.util.PipeliningExecutor$1:void run()"
        ]
    },
    "io.undertow.websockets.core.protocol.version07.Hybi07Handshake:java.lang.String solve(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.protocol.version07.Hybi07Handshake:void handshakeInternal(io.undertow.websockets.spi.WebSocketHttpExchange)",
            "io.undertow.websockets.core.protocol.version13.Hybi13Handshake:void handshakeInternal(io.undertow.websockets.spi.WebSocketHttpExchange)"
        ]
    },
    "io.undertow.websockets.client.WebSocketClient:org.xnio.IoFuture connect(org.xnio.XnioWorker,io.undertow.connector.ByteBufferPool,org.xnio.OptionMap,java.net.URI,io.undertow.websockets.core.WebSocketVersion)": {
        "isVulRoot": false,
        "vulCaller": []
    }
}