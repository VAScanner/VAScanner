{
    "org.codehaus.plexus.util.cli.shell.Shell:java.util.List getRawCommandLine(java.lang.String,java.lang.String[])": {
        "isVulRoot": true,
        "vulCaller": [
            "org.codehaus.plexus.util.cli.shell.Shell:java.util.List getCommandLine(java.lang.String,java.lang.String[])",
            "org.codehaus.plexus.util.cli.shell.Shell:java.util.List getOriginalCommandLine(java.lang.String,java.lang.String[])"
        ]
    },
    "org.codehaus.plexus.util.cli.shell.Shell:java.util.List getCommandLine(java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.codehaus.plexus.util.cli.shell.CmdShell:java.util.List getCommandLine(java.lang.String,java.lang.String[])",
            "org.codehaus.plexus.util.cli.shell.Shell:java.util.List getShellCommandLine(java.lang.String[])"
        ]
    },
    "org.codehaus.plexus.util.cli.shell.Shell:java.util.List getOriginalCommandLine(java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.codehaus.plexus.util.cli.shell.CmdShell:java.util.List getCommandLine(java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.codehaus.plexus.util.cli.shell.Shell:java.util.List getShellCommandLine(java.lang.String[])"
        ]
    },
    "org.codehaus.plexus.util.cli.shell.Shell:java.util.List getShellCommandLine(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.codehaus.plexus.util.cli.Commandline:java.lang.String[] getShellCommandline()"
        ]
    },
    "org.codehaus.plexus.util.cli.Commandline:java.lang.String[] getShellCommandline()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.codehaus.plexus.util.cli.Commandline:java.lang.String toString()",
            "org.codehaus.plexus.util.cli.Commandline:java.lang.Process execute()"
        ]
    },
    "org.codehaus.plexus.util.cli.Commandline:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.codehaus.plexus.util.xml.Xpp3DomBuilder:org.codehaus.plexus.util.xml.Xpp3Dom build(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)",
            "org.codehaus.plexus.util.StringUtils:java.lang.String join(java.lang.Object[],java.lang.String)",
            "org.codehaus.plexus.util.StringUtils:java.lang.String defaultString(java.lang.Object,java.lang.String)",
            "org.codehaus.plexus.util.StringUtils:java.lang.String interpolate(java.lang.String,java.util.Map)",
            "org.codehaus.plexus.util.InterpolationFilterReader:int read()"
        ]
    },
    "org.codehaus.plexus.util.cli.Commandline:java.lang.Process execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.codehaus.plexus.util.cli.CommandLineUtils:org.codehaus.plexus.util.cli.CommandLineCallable executeCommandLineAsCallable(org.codehaus.plexus.util.cli.Commandline,java.io.InputStream,org.codehaus.plexus.util.cli.StreamConsumer,org.codehaus.plexus.util.cli.StreamConsumer,int)"
        ]
    },
    "org.codehaus.plexus.util.xml.Xpp3DomBuilder:org.codehaus.plexus.util.xml.Xpp3Dom build(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.codehaus.plexus.util.xml.Xpp3DomBuilder:org.codehaus.plexus.util.xml.Xpp3Dom build(java.io.InputStream,java.lang.String,boolean)",
            "org.codehaus.plexus.util.xml.Xpp3DomBuilder:org.codehaus.plexus.util.xml.Xpp3Dom build(java.io.Reader,boolean)",
            "org.codehaus.plexus.util.xml.Xpp3DomBuilder:org.codehaus.plexus.util.xml.Xpp3Dom build(org.codehaus.plexus.util.xml.pull.XmlPullParser)"
        ]
    },
    "org.codehaus.plexus.util.StringUtils:java.lang.String join(java.lang.Object[],java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.codehaus.plexus.util.cli.Commandline:java.lang.String toString()",
            "org.codehaus.plexus.util.FileUtils:java.lang.String getDefaultExcludesAsString()",
            "org.codehaus.plexus.util.FileUtils:void mkdir(java.lang.String)",
            "org.codehaus.plexus.util.FileUtils:void forceMkdir(java.io.File)",
            "org.codehaus.plexus.util.StringUtils:java.lang.String concatenate(java.lang.Object[])",
            "org.codehaus.plexus.util.StringUtils:java.lang.String reverseDelimitedString(java.lang.String,java.lang.String)"
        ]
    },
    "org.codehaus.plexus.util.StringUtils:java.lang.String defaultString(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.codehaus.plexus.util.StringUtils:java.lang.String defaultString(java.lang.Object)"
        ]
    },
    "org.codehaus.plexus.util.StringUtils:java.lang.String interpolate(java.lang.String,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.codehaus.plexus.util.InterpolationFilterReader:int read()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.codehaus.plexus.util.InterpolationFilterReader:long skip(long)",
            "org.codehaus.plexus.util.InterpolationFilterReader:int read(char[],int,int)",
            "org.codehaus.plexus.util.InterpolationFilterReader:int read()"
        ]
    },
    "org.codehaus.plexus.util.cli.CommandLineUtils:org.codehaus.plexus.util.cli.CommandLineCallable executeCommandLineAsCallable(org.codehaus.plexus.util.cli.Commandline,java.io.InputStream,org.codehaus.plexus.util.cli.StreamConsumer,org.codehaus.plexus.util.cli.StreamConsumer,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.codehaus.plexus.util.cli.CommandLineUtils:int executeCommandLine(org.codehaus.plexus.util.cli.Commandline,java.io.InputStream,org.codehaus.plexus.util.cli.StreamConsumer,org.codehaus.plexus.util.cli.StreamConsumer,int)"
        ]
    },
    "org.codehaus.plexus.util.xml.Xpp3DomBuilder:org.codehaus.plexus.util.xml.Xpp3Dom build(java.io.InputStream,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.codehaus.plexus.util.xml.Xpp3DomBuilder:org.codehaus.plexus.util.xml.Xpp3Dom build(java.io.InputStream,java.lang.String)"
        ]
    },
    "org.codehaus.plexus.util.xml.Xpp3DomBuilder:org.codehaus.plexus.util.xml.Xpp3Dom build(java.io.Reader,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.codehaus.plexus.util.xml.Xpp3DomBuilder:org.codehaus.plexus.util.xml.Xpp3Dom build(java.io.Reader)"
        ]
    },
    "org.codehaus.plexus.util.xml.Xpp3DomBuilder:org.codehaus.plexus.util.xml.Xpp3Dom build(org.codehaus.plexus.util.xml.pull.XmlPullParser)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.codehaus.plexus.util.FileUtils:java.lang.String getDefaultExcludesAsString()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.codehaus.plexus.util.FileUtils:void mkdir(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.codehaus.plexus.util.FileUtils:void forceMkdir(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.codehaus.plexus.util.StringUtils:java.lang.String concatenate(java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.codehaus.plexus.util.StringUtils:java.lang.String reverseDelimitedString(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.codehaus.plexus.util.StringUtils:java.lang.String defaultString(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.codehaus.plexus.util.InterpolationFilterReader:long skip(long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.codehaus.plexus.util.InterpolationFilterReader:int read(char[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.codehaus.plexus.util.xml.pull.MXParser:void fillBuf()",
            "org.codehaus.plexus.util.xml.XmlReader:int read(char[],int,int)"
        ]
    },
    "org.codehaus.plexus.util.cli.CommandLineUtils:int executeCommandLine(org.codehaus.plexus.util.cli.Commandline,java.io.InputStream,org.codehaus.plexus.util.cli.StreamConsumer,org.codehaus.plexus.util.cli.StreamConsumer,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.codehaus.plexus.util.cli.CommandLineUtils:int executeCommandLine(org.codehaus.plexus.util.cli.Commandline,org.codehaus.plexus.util.cli.StreamConsumer,org.codehaus.plexus.util.cli.StreamConsumer)",
            "org.codehaus.plexus.util.cli.CommandLineUtils:int executeCommandLine(org.codehaus.plexus.util.cli.Commandline,org.codehaus.plexus.util.cli.StreamConsumer,org.codehaus.plexus.util.cli.StreamConsumer,int)",
            "org.codehaus.plexus.util.cli.CommandLineUtils:int executeCommandLine(org.codehaus.plexus.util.cli.Commandline,java.io.InputStream,org.codehaus.plexus.util.cli.StreamConsumer,org.codehaus.plexus.util.cli.StreamConsumer)"
        ]
    },
    "org.codehaus.plexus.util.xml.Xpp3DomBuilder:org.codehaus.plexus.util.xml.Xpp3Dom build(java.io.InputStream,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.codehaus.plexus.util.xml.Xpp3DomBuilder:org.codehaus.plexus.util.xml.Xpp3Dom build(java.io.Reader)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.codehaus.plexus.util.xml.pull.MXParser:void fillBuf()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.codehaus.plexus.util.xml.pull.MXParser:char more()"
        ]
    },
    "org.codehaus.plexus.util.xml.XmlReader:int read(char[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.codehaus.plexus.util.xml.pull.MXParser:void fillBuf()",
            "org.codehaus.plexus.util.xml.XmlReader:int read(char[],int,int)"
        ]
    },
    "org.codehaus.plexus.util.cli.CommandLineUtils:int executeCommandLine(org.codehaus.plexus.util.cli.Commandline,org.codehaus.plexus.util.cli.StreamConsumer,org.codehaus.plexus.util.cli.StreamConsumer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.codehaus.plexus.util.cli.CommandLineUtils:int executeCommandLine(org.codehaus.plexus.util.cli.Commandline,org.codehaus.plexus.util.cli.StreamConsumer,org.codehaus.plexus.util.cli.StreamConsumer,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.codehaus.plexus.util.cli.CommandLineUtils:int executeCommandLine(org.codehaus.plexus.util.cli.Commandline,java.io.InputStream,org.codehaus.plexus.util.cli.StreamConsumer,org.codehaus.plexus.util.cli.StreamConsumer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.codehaus.plexus.util.xml.pull.MXParser:char more()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.codehaus.plexus.util.xml.pull.MXParser:int nextImpl()",
            "org.codehaus.plexus.util.xml.pull.MXParser:int parseProlog()",
            "org.codehaus.plexus.util.xml.pull.MXParser:int parseEpilog()",
            "org.codehaus.plexus.util.xml.pull.MXParser:int parseEndTag()",
            "org.codehaus.plexus.util.xml.pull.MXParser:int parseStartTag()",
            "org.codehaus.plexus.util.xml.pull.MXParser:char parseAttribute()",
            "org.codehaus.plexus.util.xml.pull.MXParser:char[] parseEntityRef()",
            "org.codehaus.plexus.util.xml.pull.MXParser:void parseComment()",
            "org.codehaus.plexus.util.xml.pull.MXParser:boolean parsePI()",
            "org.codehaus.plexus.util.xml.pull.MXParser:void parseXmlDecl(char)",
            "org.codehaus.plexus.util.xml.pull.MXParser:void parseXmlDeclWithVersion(int,int)",
            "org.codehaus.plexus.util.xml.pull.MXParser:void parseDocdecl()",
            "org.codehaus.plexus.util.xml.pull.MXParser:void parseCDSect(boolean)",
            "org.codehaus.plexus.util.xml.pull.MXParser:char requireInput(char,char[])",
            "org.codehaus.plexus.util.xml.pull.MXParser:char requireNextS()",
            "org.codehaus.plexus.util.xml.pull.MXParser:char skipS(char)"
        ]
    },
    "org.codehaus.plexus.util.xml.pull.MXParser:int nextImpl()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.codehaus.plexus.util.xml.pull.MXParser:int next()",
            "org.codehaus.plexus.util.xml.pull.MXParser:int nextToken()"
        ]
    },
    "org.codehaus.plexus.util.xml.pull.MXParser:int parseProlog()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.codehaus.plexus.util.xml.pull.MXParser:int nextImpl()"
        ]
    },
    "org.codehaus.plexus.util.xml.pull.MXParser:int parseEpilog()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.codehaus.plexus.util.xml.pull.MXParser:int nextImpl()"
        ]
    },
    "org.codehaus.plexus.util.xml.pull.MXParser:int parseEndTag()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.codehaus.plexus.util.xml.pull.MXParser:int nextImpl()"
        ]
    },
    "org.codehaus.plexus.util.xml.pull.MXParser:int parseStartTag()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.codehaus.plexus.util.xml.pull.MXParser:int nextImpl()",
            "org.codehaus.plexus.util.xml.pull.MXParser:int parseProlog()"
        ]
    },
    "org.codehaus.plexus.util.xml.pull.MXParser:char parseAttribute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.codehaus.plexus.util.xml.pull.MXParser:int parseStartTag()"
        ]
    },
    "org.codehaus.plexus.util.xml.pull.MXParser:char[] parseEntityRef()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.codehaus.plexus.util.xml.pull.MXParser:int nextImpl()",
            "org.codehaus.plexus.util.xml.pull.MXParser:char parseAttribute()"
        ]
    },
    "org.codehaus.plexus.util.xml.pull.MXParser:void parseComment()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.codehaus.plexus.util.xml.pull.MXParser:int nextImpl()",
            "org.codehaus.plexus.util.xml.pull.MXParser:int parseProlog()",
            "org.codehaus.plexus.util.xml.pull.MXParser:int parseEpilog()"
        ]
    },
    "org.codehaus.plexus.util.xml.pull.MXParser:boolean parsePI()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.codehaus.plexus.util.xml.pull.MXParser:int nextImpl()",
            "org.codehaus.plexus.util.xml.pull.MXParser:int parseProlog()",
            "org.codehaus.plexus.util.xml.pull.MXParser:int parseEpilog()"
        ]
    },
    "org.codehaus.plexus.util.xml.pull.MXParser:void parseXmlDecl(char)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.codehaus.plexus.util.xml.pull.MXParser:boolean parsePI()"
        ]
    },
    "org.codehaus.plexus.util.xml.pull.MXParser:void parseXmlDeclWithVersion(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.codehaus.plexus.util.xml.pull.MXParser:void parseXmlDecl(char)"
        ]
    },
    "org.codehaus.plexus.util.xml.pull.MXParser:void parseDocdecl()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.codehaus.plexus.util.xml.pull.MXParser:int parseProlog()",
            "org.codehaus.plexus.util.xml.pull.MXParser:int parseEpilog()"
        ]
    },
    "org.codehaus.plexus.util.xml.pull.MXParser:void parseCDSect(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.codehaus.plexus.util.xml.pull.MXParser:int nextImpl()"
        ]
    },
    "org.codehaus.plexus.util.xml.pull.MXParser:char requireInput(char,char[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.codehaus.plexus.util.xml.pull.MXParser:void parseXmlDecl(char)",
            "org.codehaus.plexus.util.xml.pull.MXParser:void parseXmlDeclWithVersion(int,int)"
        ]
    },
    "org.codehaus.plexus.util.xml.pull.MXParser:char requireNextS()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.codehaus.plexus.util.xml.pull.MXParser:char skipS(char)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.codehaus.plexus.util.xml.pull.MXParser:void parseXmlDecl(char)",
            "org.codehaus.plexus.util.xml.pull.MXParser:void parseXmlDeclWithVersion(int,int)",
            "org.codehaus.plexus.util.xml.pull.MXParser:char requireNextS()"
        ]
    },
    "org.codehaus.plexus.util.xml.pull.MXParser:int next()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.codehaus.plexus.util.xml.pull.MXParser:void skipSubTree()",
            "org.codehaus.plexus.util.xml.pull.MXParser:java.lang.String nextText()",
            "org.codehaus.plexus.util.xml.pull.MXParser:int nextTag()",
            "org.codehaus.plexus.util.xml.Xpp3DomBuilder:org.codehaus.plexus.util.xml.Xpp3Dom build(org.codehaus.plexus.util.xml.pull.XmlPullParser,boolean)"
        ]
    },
    "org.codehaus.plexus.util.xml.pull.MXParser:int nextToken()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.codehaus.plexus.util.xml.XmlUtil:boolean isXml(java.io.File)",
            "org.codehaus.plexus.util.xml.XmlUtil:void prettyFormatInternal(org.codehaus.plexus.util.xml.pull.XmlPullParser,org.codehaus.plexus.util.xml.PrettyPrintXMLWriter)"
        ]
    },
    "org.codehaus.plexus.util.xml.pull.MXParser:void skipSubTree()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.codehaus.plexus.util.xml.pull.MXParser:java.lang.String nextText()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.codehaus.plexus.util.xml.pull.MXParser:int nextTag()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.codehaus.plexus.util.xml.XmlUtil:boolean isXml(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.codehaus.plexus.util.xml.XmlUtil:void prettyFormatInternal(org.codehaus.plexus.util.xml.pull.XmlPullParser,org.codehaus.plexus.util.xml.PrettyPrintXMLWriter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.codehaus.plexus.util.xml.XmlUtil:void prettyFormat(java.io.Reader,java.io.Writer,int,java.lang.String)",
            "org.codehaus.plexus.util.xml.XmlUtil:void prettyFormat(java.io.InputStream,java.io.OutputStream,int,java.lang.String)"
        ]
    },
    "org.codehaus.plexus.util.xml.XmlUtil:void prettyFormat(java.io.Reader,java.io.Writer,int,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.codehaus.plexus.util.xml.XmlUtil:void prettyFormat(java.io.Reader,java.io.Writer)"
        ]
    },
    "org.codehaus.plexus.util.xml.XmlUtil:void prettyFormat(java.io.InputStream,java.io.OutputStream,int,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.codehaus.plexus.util.xml.XmlUtil:void prettyFormat(java.io.InputStream,java.io.OutputStream)"
        ]
    },
    "org.codehaus.plexus.util.xml.XmlUtil:void prettyFormat(java.io.Reader,java.io.Writer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.codehaus.plexus.util.xml.XmlUtil:void prettyFormat(java.io.InputStream,java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    }
}